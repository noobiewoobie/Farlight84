Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x120, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x130, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0x168, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x178, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x180, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x188, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x190, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x198, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b6, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x1b8, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x1c0, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x1c8, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x1d0, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x1d8, Size: 0x8]
	Level*[] Levels;//[Offset: 0x1e0, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x1f0, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x220, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x228, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x238, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x240, Size: 0x8]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x298, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x2a8, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x660, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x6f0, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x6d3304f39041
	void HandleTimelineScrubbed();// 0x6d3204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x113504f39031
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x230, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x234, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x235, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x235, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x235, Size: 0x1]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0x238, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0x248, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0x258, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0x268, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0x278, Size: 0x10]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x288, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x288, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x288, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x288, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x289, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x290, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x298, Size: 0x8]
	float WorldToMeters;//[Offset: 0x2a0, Size: 0x4]
	float KillZ;//[Offset: 0x2a4, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x2a8, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x2b0, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x2b4, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2b8, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2c0, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2c8, Size: 0x28]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2f0, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2f8, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x2fc, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x308, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x30c, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x310, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x318, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x338, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x35c, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x360, Size: 0x8]
	float TimeDilation;//[Offset: 0x368, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x36c, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x370, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x374, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x378, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x37c, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x380, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x384, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x3c8, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x3d0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3e0, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x3f0, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x3f8, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x400, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x408, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x418, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x5ff204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Info.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfHiddenInGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x62, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x63, Size: 0x1]
	byte RemoteRole;//[Offset: 0x64, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x68, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0x9c, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xa0, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xa8, Size: 0x40]
	Actor* Owner;//[Offset: 0xe8, Size: 0x8]
	FName NetDriverName;//[Offset: 0xf0, Size: 0x8]
	byte Role;//[Offset: 0xf8, Size: 0x1]
	byte NetDormancy;//[Offset: 0xf9, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xfa, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0xfb, Size: 0x1]
	int InputPriority;//[Offset: 0xfc, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x100, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x108, Size: 0x4]
	int NetTag;//[Offset: 0x10c, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x110, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x114, Size: 0x4]
	float NetPriority;//[Offset: 0x118, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x120, Size: 0x8]
	Actor*[] Children;//[Offset: 0x128, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x138, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x140, Size: 0x10]
	FName[] Layers;//[Offset: 0x158, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x168, Size: 0x8]
	FName[] Tags;//[Offset: 0x178, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x188, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x189, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x18a, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x18b, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x18c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x18d, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x18e, Size: 0x1]
	delegate OnClicked;//[Offset: 0x18f, Size: 0x1]
	delegate OnReleased;//[Offset: 0x190, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x191, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x192, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x193, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x194, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x195, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x196, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x197, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f8, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x208, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x1b9d04f39041
	void UserConstructionScript();// 0x1b9c04f39041
	void TearOff();// 0x1b9b04f39041
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x1b9a04f39041
	void SetTickGroup(byte NewTickGroup);// 0x1b9904f39041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x1b9804f39041
	void SetReplicates(bool bInReplicates);// 0x1b9704f39041
	void SetReplicateMovement(bool bInReplicateMovement);// 0x1b9604f39041
	void SetOwner(Actor* NewOwner);// 0x1b9504f39041
	void SetNetDormancy(byte NewDormancy);// 0x1b9304f39041
	void SetLifeSpan(float InLifespan);// 0x1b9204f39041
	void SetAutoDestroyWhenFinished(bool bVal);// 0x1b9104f39041
	void SetActorTickInterval(float TickInterval);// 0x1b9004f39041
	void SetActorTickEnabled(bool bEnabled);// 0x1b8f04f39041
	void SetActorScale3D(Vector NewScale3D);// 0x1b8e04f39041
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x1b8d04f39041
	void SetActorHiddenInGame(bool bNewHidden);// 0x1b8c04f39041
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x1b8b04f39041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1b8a04f39041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1b8904f39041
	void ReceiveTick(float DeltaSeconds);// 0x1b8804f39041
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1b8704f39041
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1b8604f39041
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1b8504f39041
	void ReceiveEndPlay(byte EndPlayReason);// 0x1b8404f39041
	void ReceiveDestroyed();// 0x1b8304f39041
	void ReceiveBeginPlay();// 0x1b8204f39041
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1b8104f39041
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1b8004f39041
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x1b7f04f39041
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x1b7e04f39041
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x1b7d04f39041
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x1b7c04f39041
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x1b7b04f39041
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x1b7a04f39041
	void ReceiveActorEndCursorOver();// 0x1b7904f39041
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x1b7804f39041
	void ReceiveActorBeginCursorOver();// 0x1b7704f39041
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x1b7604f39041
	void OnRep_ReplicateMovement();// 0x1b7504f39041
	void OnRep_ReplicatedMovement();// 0x1b7404f39041
	void OnRep_Owner();// 0x1b7304f39041
	void OnRep_Instigator();// 0x1b7204f39041
	void OnRep_AttachmentReplication();// 0x1b7104f39041
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x1b7004f39041
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x1b6f04f39041
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x1b6e04f39041
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b6d04f39041
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x1b6c04f39041
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b6b04f39041
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b6a04f39041
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b6904f39041
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b6804f39041
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b6704f39041
	void K2_OnReset();// 0x1b6604f39041
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1b6504f39041
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x1b6404f39041
	SceneComponent* K2_GetRootComponent();// 0x1b6304f39041
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x1b6204f39041
	Rotator K2_GetActorRotation();// 0x1b6104f39041
	Vector K2_GetActorLocation();// 0x1b6004f39041
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x1b5e04f39041
	void K2_DestroyComponent(ActorComponent* Component);// 0x1b5d04f39041
	void K2_DestroyActor();// 0x1b5c04f39041
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x1b5b04f39041
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x1b5904f39041
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x1b5804f39041
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x1b5604f39041
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b5504f39041
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b5404f39041
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b5304f39041
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b5204f39041
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b5104f39041
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b5004f39041
	bool IsOverlappingActor(const Actor* Other);// 0x1b4f04f39041
	bool IsChildActor();// 0x1b4e04f39041
	bool IsActorTickEnabled();// 0x1b4d04f39041
	bool IsActorBeingDestroyed();// 0x1b4c04f39041
	bool HasAuthority();// 0x1b4b04f39041
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x1b4a04f39041
	Vector GetVelocity();// 0x1b4904f39041
	Transform GetTransform();// 0x1b4804f39041
	bool GetTickableWhenPaused();// 0x1b4704f39041
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x1b4604f39041
	byte GetRemoteRole();// 0x1b4504f39041
	ChildActorComponent* GetParentComponent();// 0x1b4404f39041
	Actor* GetParentActor();// 0x1b4304f39041
	Actor* GetOwner();// 0x1b4204f39041
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x1b4104f39041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x1b4004f39041
	byte GetLocalRole();// 0x1b3e04f39041
	float GetLifeSpan();// 0x1b3d04f39041
	Controller* GetInstigatorController();// 0x1b3c04f39041
	Pawn* GetInstigator();// 0x1b3b04f39041
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x1b3a04f39041
	float GetInputAxisValue(const FName InputAxisName);// 0x1b3904f39041
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x1b3804f39041
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x1b3704f39041
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x1b3604f39041
	float GetGameTimeSinceCreation();// 0x1b3504f39041
	float GetDotProductTo(const Actor* OtherActor);// 0x1b3404f39041
	float GetDistanceTo(const Actor* OtherActor);// 0x1b3304f39041
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x1b3204f39041
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x1b3104f39041
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x1b3004f39041
	FName GetAttachParentSocketName();// 0x1b2f04f39041
	Actor* GetAttachParentActor();// 0x1b2e04f39041
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x1b2d04f39041
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x1b2c04f39041
	Vector GetActorUpVector();// 0x1b2b04f39041
	float GetActorTimeDilation();// 0x1b2a04f39041
	float GetActorTickInterval();// 0x1b2904f39041
	Vector GetActorScale3D();// 0x1b2804f39041
	Vector GetActorRightVector();// 0x1b2704f39041
	Vector GetActorRelativeScale3D();// 0x1b2604f39041
	Vector GetActorForwardVector();// 0x1b2504f39041
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x1b2404f39041
	bool GetActorEnableCollision();// 0x1b2304f39041
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x1b2204f39041
	void ForceNetUpdate();// 0x1b2104f39041
	void FlushNetDormancy();// 0x1b2004f39041
	void EnableInput(PlayerController* PlayerController);// 0x1b1f04f39041
	void DisableInput(PlayerController* PlayerController);// 0x1b1e04f39041
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x1b1d04f39041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1b1c04f39041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1b1b04f39041
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x1b1a04f39041
	bool ActorHasTag(FName Tag);// 0x1b1904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorTickFunction.TickFunction
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector_NetQuantize100.Vector
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfNotVisiable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14d, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfTickStateCoolingDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14d, Size: 0x1]
	bool bDisableDeferredUpdateComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14d, Size: 0x1]
	byte Mobility;//[Offset: 0x14f, Size: 0x1]
	byte DetailMode;//[Offset: 0x150, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x2cba04f39041
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x2cb904f39041
	void SetWorldScale3D(Vector NewScale);// 0x2cb804f39041
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren, int Flag);// 0x2cb704f39041
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x2cb604f39041
	void SetRelativeScale3D(Vector NewScale3D);// 0x2cb504f39041
	void SetMobility(byte NewMobility);// 0x2cb304f39041
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x2cb204f39041
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x2cb104f39041
	void ResetRelativeTransform();// 0x2cb004f39041
	void OnRep_Visibility(bool OldValue);// 0x2caf04f39041
	void OnRep_Transform();// 0x2cae04f39041
	void OnRep_AttachSocketName();// 0x2cad04f39041
	void OnRep_AttachParent();// 0x2cac04f39041
	void OnRep_AttachChildren();// 0x2cab04f39041
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2caa04f39041
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca904f39041
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca804f39041
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca704f39041
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca604f39041
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca504f39041
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca404f39041
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca304f39041
	Transform K2_GetComponentToWorld();// 0x2ca204f39041
	Vector K2_GetComponentScale();// 0x2ca104f39041
	Rotator K2_GetComponentRotation();// 0x2ca004f39041
	Vector K2_GetComponentLocation();// 0x2c9f04f39041
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x2c9e04f39041
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x2c9d04f39041
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x2c9c04f39041
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9b04f39041
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9a04f39041
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9904f39041
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9804f39041
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9704f39041
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9604f39041
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9504f39041
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9404f39041
	bool IsVisible();// 0x2c9304f39041
	bool IsSimulatingPhysics(FName BoneName);// 0x2c9204f39041
	bool IsAnySimulatingPhysics();// 0x2c9104f39041
	Vector GetUpVector();// 0x2c9004f39041
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace, bool bDoParallel);// 0x2c8e04f39041
	Rotator GetSocketRotation(FName InSocketName);// 0x2c8d04f39041
	Quat GetSocketQuaternion(FName InSocketName);// 0x2c8c04f39041
	Vector GetSocketLocation(FName InSocketName);// 0x2c8b04f39041
	bool GetShouldUpdatePhysicsVolume();// 0x2c8a04f39041
	Vector GetRightVector();// 0x2c8904f39041
	Transform GetRelativeTransform();// 0x2c8804f39041
	PhysicsVolume* GetPhysicsVolume();// 0x2c8704f39041
	void GetParentComponents(out SceneComponent*[] Parents);// 0x2c8604f39041
	int GetNumChildrenComponents();// 0x2c8504f39041
	Vector GetForwardVector();// 0x2c8404f39041
	Vector GetComponentVelocity();// 0x2c8304f39041
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x2c8204f39041
	SceneComponent* GetChildComponent(int ChildIndex);// 0x2c8104f39041
	FName GetAttachSocketName();// 0x2c8004f39041
	SceneComponent* GetAttachParent();// 0x2c7f04f39041
	FName[] GetAllSocketNames();// 0x2c7e04f39041
	bool DoesSocketExist(FName InSocketName);// 0x2c7d04f39041
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x2c7c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1]
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10]
	void ToggleActive();// 0x11b804f39041
	void SetTickGroup(byte NewTickGroup);// 0x11b604f39041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x11b504f39041
	void SetIsReplicated(bool ShouldReplicate);// 0x11b404f39041
	void SetComponentTickInterval(float TickInterval);// 0x11b304f39041
	void SetComponentTickEnabled(bool bEnabled);// 0x11b204f39041
	void SetAutoActivate(bool bNewAutoActivate);// 0x11b104f39041
	void SetActive(bool bNewActive, bool bReset);// 0x11b004f39041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x11af04f39041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x11ae04f39041
	void ReceiveTick(float DeltaSeconds);// 0x11ad04f39041
	void ReceiveEndPlay(byte EndPlayReason);// 0x11ac04f39041
	void ReceiveBeginPlay();// 0x11ab04f39041
	void OnRep_IsActive();// 0x11aa04f39041
	void K2_DestroyComponent(Object* Object);// 0x11a904f39041
	bool IsComponentTickEnabled();// 0x11a804f39041
	bool IsBeingDestroyed();// 0x11a704f39041
	bool IsActive();// 0x11a604f39041
	Actor* GetOwner();// 0x11a504f39041
	float GetComponentTickInterval();// 0x11a404f39041
	void Deactivate();// 0x11a304f39041
	bool ComponentHasTag(FName Tag);// 0x11a204f39041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x11a104f39041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x11a004f39041
	void Activate(bool bReset);// 0x119f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorComponentTickFunction.TickFunction
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x260, Size: 0x4]
	int Priority;//[Offset: 0x264, Size: 0x4]
	float FluidFriction;//[Offset: 0x268, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Volume.Brush.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x228, Size: 0x1]
	Color BrushColor;//[Offset: 0x22c, Size: 0x4]
	int PolyFlags;//[Offset: 0x230, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x234, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x234, Size: 0x1]
	Model* Brush;//[Offset: 0x238, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x240, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x250, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Model.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x540, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x548, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x320, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x324, Size: 0x4]
	float LDMinimalismDrawDistance;//[Offset: 0x328, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x32c, Size: 0x4]
	float MinScreenSizeCulling;//[Offset: 0x330, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x334, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x335, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x336, Size: 0x1]
	enum LightmapType;//[Offset: 0x337, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x338, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x339, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x339, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x339, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x339, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x339, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x339, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33a, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33a, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33a, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33a, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33a, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33a, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33a, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33a, Size: 0x1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33b, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33b, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33b, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33b, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33b, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33b, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33b, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33b, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33c, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33c, Size: 0x1]
	bool bForceGenLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33c, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33c, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33c, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33c, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33c, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33d, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33d, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33d, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33d, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33d, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33d, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33d, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33d, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33e, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33e, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33e, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33e, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33e, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33e, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33e, Size: 0x1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33e, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x340, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x342, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x343, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x344, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x348, Size: 0x4]
	int MainPassDepthStencilValue;//[Offset: 0x34c, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x350, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x360, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x370, Size: 0x4]
	int VisibilityId;//[Offset: 0x374, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x378, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x388, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x389, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x38a, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x38b, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x390, Size: 0x4]
	float BoundsScale;//[Offset: 0x39c, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x3b0, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x3c0, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x3e0, Size: 0x130]
	delegate OnComponentHit;//[Offset: 0x510, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x511, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x512, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x513, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x514, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x516, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x517, Size: 0x1]
	delegate OnClicked;//[Offset: 0x518, Size: 0x1]
	delegate OnReleased;//[Offset: 0x519, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x51a, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x51b, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x51c, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x51d, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x538, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0x2f4c04f39041
	void WakeRigidBody(FName BoneName);// 0x2f4b04f39041
	void WakeAllRigidBodies();// 0x2f4a04f39041
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x2f4904f39041
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x2f4804f39041
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x2f4704f39041
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x2f4604f39041
	void SetSimulatePhysics(bool bSimulate);// 0x2f4504f39041
	void SetRenderMainPassStencil(bool bValue);// 0x2f4404f39041
	void SetRenderInMainPass(bool bValue);// 0x2f4304f39041
	void SetRenderCustomDepth(bool bValue);// 0x2f4204f39041
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x2f4104f39041
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x2f4004f39041
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2f3f04f39041
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2f3e04f39041
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2f3d04f39041
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x2f3c04f39041
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2f3b04f39041
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2f3a04f39041
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2f3904f39041
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x2f3804f39041
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x2f3704f39041
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x2f3604f39041
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x2f3504f39041
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x2f3404f39041
	void SetMassScale(FName BoneName, float InMassScale);// 0x2f3304f39041
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x2f3204f39041
	void SetMainPassStencilValue(int Value);// 0x2f3104f39041
	void SetLinearDamping(float InDamping);// 0x2f3004f39041
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x2f2f04f39041
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x2f2e04f39041
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x2f2d04f39041
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x2f2c04f39041
	void SetEnableGravity(bool bGravityEnabled);// 0x2f2b04f39041
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x2f2a04f39041
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x2f2904f39041
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x2f2804f39041
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x2f2704f39041
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x2f2604f39041
	void SetCustomDepthStencilValue(int Value);// 0x2f2504f39041
	void SetCullDistance(float NewCullDistance);// 0x2f2404f39041
	void SetConstraintMode(byte ConstraintMode);// 0x2f2304f39041
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x2f2204f39041
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x2f2104f39041
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x2f2004f39041
	void SetCollisionObjectType(byte Channel);// 0x2f1f04f39041
	void SetCollisionEnabled(byte NewType);// 0x2f1e04f39041
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x2f1d04f39041
	void SetCastShadow(bool NewCastShadow);// 0x2f1c04f39041
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x2f1b04f39041
	void SetBoundsScale(float NewBoundsScale);// 0x2f1a04f39041
	void SetAngularDamping(float InDamping);// 0x2f1904f39041
	void SetAllUseCCD(bool InUseCCD);// 0x2f1804f39041
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x2f1704f39041
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x2f1604f39041
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x2f1504f39041
	void SetAllMassScale(float InMassScale);// 0x2f1404f39041
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x2f1304f39041
	void PutRigidBodyToSleep(FName BoneName);// 0x2f1204f39041
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2f1104f39041
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2f1004f39041
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2f0f04f39041
	bool K2_IsQueryCollisionEnabled();// 0x2f0e04f39041
	bool K2_IsPhysicsCollisionEnabled();// 0x2f0d04f39041
	bool K2_IsCollisionEnabled();// 0x2f0c04f39041
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2f0b04f39041
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x2f0a04f39041
	bool IsOverlappingActor(const Actor* Other);// 0x2f0904f39041
	bool IsGravityEnabled();// 0x2f0804f39041
	bool IsAnyRigidBodyAwake();// 0x2f0704f39041
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x2f0604f39041
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x2f0504f39041
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x2f0304f39041
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x2f0204f39041
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x2f0104f39041
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x2f0004f39041
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x2eff04f39041
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x2efe04f39041
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x2efd04f39041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x2efc04f39041
	int GetNumMaterials();// 0x2efb04f39041
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x2efa04f39041
	MaterialInterface* GetMaterial(int ElementIndex);// 0x2ef904f39041
	float GetMassScale(FName BoneName);// 0x2ef804f39041
	float GetMass();// 0x2ef704f39041
	float GetLinearDamping();// 0x2ef604f39041
	Vector GetInertiaTensor(FName BoneName);// 0x2ef504f39041
	bool GetGenerateOverlapEvents();// 0x2ef404f39041
	byte GetCollisionResponseToChannel(byte Channel);// 0x2ef304f39041
	FName GetCollisionProfileName();// 0x2ef204f39041
	byte GetCollisionObjectType();// 0x2ef104f39041
	byte GetCollisionEnabled();// 0x2ef004f39041
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x2eef04f39041
	Vector GetCenterOfMass(FName BoneName);// 0x2eee04f39041
	float GetAngularDamping();// 0x2eed04f39041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x2eec04f39041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x2eeb04f39041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x2eea04f39041
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x2ee904f39041
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x2ee804f39041
	void ClearMoveIgnoreComponents();// 0x2ee704f39041
	void ClearMoveIgnoreActors();// 0x2ee604f39041
	bool CanCharacterStepUp(Pawn* Pawn);// 0x2ee504f39041
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x2ee404f39041
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x2ee304f39041
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x2ee204f39041
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x2ee104f39041
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x2ee004f39041
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x2edf04f39041
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2ede04f39041
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x2edd04f39041
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x2edc04f39041
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x2edb04f39041
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x2eda04f39041
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x2ed904f39041
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2ed804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x120, Size: 0x130]
	Vector BuildScale3D;//[Offset: 0x258, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicalMaterialPropertyBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x639a04f39041
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x639904f39041
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x639804f39041
	PhysicalMaterial* GetPhysicalMaterial();// 0x639704f39041
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x639604f39041
	Material* GetBaseMaterial();// 0x639504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c5, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1c6, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c7, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fe, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fe, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fe, Size: 0x1]
	bool bZWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ff, Size: 0x1]
	byte DepthCompare;//[Offset: 0x200, Size: 0x1]
	bool bMainPassStencilWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bMainPassStencilCompareEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	byte MainPassStencilCompare;//[Offset: 0x202, Size: 0x1]
	byte MainPassStencilRefValue;//[Offset: 0x203, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x204, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x204, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x204, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x205, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x206, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x206, Size: 0x1]
	byte StencilCompare;//[Offset: 0x207, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x208, Size: 0x1]
	byte RefractionMode;//[Offset: 0x209, Size: 0x1]
	int BlendablePriority;//[Offset: 0x20c, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x214, Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x218, Size: 0x4]
	Guid StateId;//[Offset: 0x21c, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x22c, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2b8, Size: 0x228]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScalarMaterialInput.MaterialInput
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VectorMaterialInput.MaterialInput
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ColorMaterialInput.MaterialInput
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ShadingModelMaterialInput.MaterialInput
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialCachedParameters
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 0x40]
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]
	bool[] Overrides;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x48, Size: 0x10]
	int LODBias;//[Offset: 0x58, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x5c, Size: 0x1]
	byte Filter;//[Offset: 0x5d, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x5e, Size: 0x1]
	byte LODGroup;//[Offset: 0x5f, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 0x4]
	int StreamingIndex;//[Offset: 0x34, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 0x4]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 0x1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AssetUserData.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xb8, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xbc, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte AddressX;//[Offset: 0xc1, Size: 0x1]
	byte AddressY;//[Offset: 0xc2, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xc4, Size: 0x8]
	int Blueprint_GetSizeY();// 0x66e004f39041
	int Blueprint_GetSizeX();// 0x66df04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	int Size;//[Offset: 0x30, Size: 0x4]
	int TileCount;//[Offset: 0x34, Size: 0x4]
	int TileSize;//[Offset: 0x38, Size: 0x4]
	int TileBorderSize;//[Offset: 0x3c, Size: 0x4]
	int StreamLowMips;//[Offset: 0x40, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x54, Size: 0x4]
	int GetTileSize();// 0x6c6c04f39041
	int GetTileCount();// 0x6c6b04f39041
	int GetTileBorderSize();// 0x6c6a04f39041
	int GetSize();// 0x6c6904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0xf0, Size: 0xc]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	uint32 BuildHash;//[Offset: 0x100, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4]
	int TileBorderSize;//[Offset: 0x4, Size: 0x4]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float PlacementJitter;//[Offset: 0x10, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 0x4]
	int MinLOD;//[Offset: 0x1c, Size: 0x4]
	enum Scaling;//[Offset: 0x20, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMesh.StreamableRenderAsset.Object
	byte LODGroupAsInt;//[Offset: 0x60, Size: 0x1]
	bool bStripLastLODLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0x64, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x68, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x70, Size: 0x10]
	StaticMaterial[] PhysicalMaterialsOverride;//[Offset: 0x80, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x90, Size: 0x4]
	int LightMapResolution;//[Offset: 0x94, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x98, Size: 0x4]
	bool bForceLODsShareLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa0, Size: 0x4]
	float MinScreenSize;//[Offset: 0xa4, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 0x8]
	int LODForCollision;//[Offset: 0xb0, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb4, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x148, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x150, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x6cd304f39041
	int GetNumSections(int InLOD);// 0x6cd204f39041
	int GetNumLODs();// 0x6cd104f39041
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x6cd004f39041
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x6ccf04f39041
	int GetMaterialIndex(FName MaterialSlotName);// 0x6cce04f39041
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x6ccd04f39041
	BoxSphereBounds GetBounds();// 0x6ccc04f39041
	Box GetBoundingBox();// 0x6ccb04f39041
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x6cca04f39041
	StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x6cc904f39041
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x6cc804f39041
	void AddSocket(StaticMeshSocket* Socket);// 0x6cc704f39041
	FName AddMaterial(MaterialInterface* Material);// 0x6cc604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x657804f39041
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x657704f39041
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x657604f39041
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x657504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x657404f39041
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x657304f39041
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x657204f39041
	void ReversePolygonFacing(PolygonID PolygonID);// 0x657104f39041
	void ReserveNewVertices(int NumberOfNewVertices);// 0x657004f39041
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x656f04f39041
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x656e04f39041
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x656d04f39041
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x656c04f39041
	void ReserveNewEdges(int NumberOfNewEdges);// 0x656b04f39041
	bool IsVertexValid(VertexID VertexID);// 0x656a04f39041
	bool IsVertexOrphaned(VertexID VertexID);// 0x656904f39041
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x656804f39041
	bool IsTriangleValid(const TriangleID TriangleID);// 0x656704f39041
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x656604f39041
	bool IsPolygonValid(PolygonID PolygonID);// 0x656504f39041
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x656404f39041
	bool IsEmpty();// 0x656304f39041
	bool IsEdgeValid(EdgeID EdgeID);// 0x656204f39041
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x656104f39041
	bool IsEdgeInternal(EdgeID EdgeID);// 0x656004f39041
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x655f04f39041
	Vector GetVertexPosition(VertexID VertexID);// 0x655e04f39041
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x655d04f39041
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x655c04f39041
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x655b04f39041
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x655a04f39041
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x655904f39041
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x655804f39041
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x655704f39041
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x655604f39041
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x655504f39041
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x655404f39041
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x655304f39041
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x655204f39041
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x655104f39041
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x655004f39041
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x654f04f39041
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x654e04f39041
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x654d04f39041
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x654c04f39041
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x654b04f39041
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x654a04f39041
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x654904f39041
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x654804f39041
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x654704f39041
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x654604f39041
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x654504f39041
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x654404f39041
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x654304f39041
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x654204f39041
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x654104f39041
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x654004f39041
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x653f04f39041
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x653e04f39041
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x653d04f39041
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x653c04f39041
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x653b04f39041
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x653a04f39041
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x653904f39041
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x653804f39041
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x653704f39041
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x653604f39041
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x653504f39041
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x653404f39041
	void Empty();// 0x653304f39041
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x653204f39041
	void DeleteVertex(VertexID VertexID);// 0x653104f39041
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x653004f39041
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x652f04f39041
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x652e04f39041
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x652d04f39041
	void CreateVertexWithID(VertexID VertexID);// 0x652c04f39041
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x652b04f39041
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x652a04f39041
	VertexID CreateVertex();// 0x652904f39041
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x652804f39041
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x652704f39041
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x652604f39041
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x652504f39041
	PolygonGroupID CreatePolygonGroup();// 0x652404f39041
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x652304f39041
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x652204f39041
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x652104f39041
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x652004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VertexID.ElementID
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PolygonID.ElementID
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VertexInstanceID.ElementID
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PolygonGroupID.ElementID
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TriangleID.ElementID
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EdgeID.ElementID
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector_NetQuantize.Vector
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector_NetQuantizeNormal.Vector
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x6bf404f39041
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x6bf304f39041
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x6bf204f39041
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x6bf104f39041
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x6bf004f39041
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x6bef04f39041
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x6bee04f39041
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x6bed04f39041
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x6bec04f39041
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x6beb04f39041
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x6bea04f39041
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x6be904f39041
	float K2_GetScalarParameterValue(FName ParameterName);// 0x6be804f39041
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x6be704f39041
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x6be604f39041
	void CopyInterpParameters(MaterialInstance* Source);// 0x6be504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x1a0]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_AllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x230, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x234, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x238, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x239, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x23a, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x240, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x248, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x258, Size: 0x8]
	Controller* Controller;//[Offset: 0x260, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x26c, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x278, Size: 0xc]
	void SpawnDefaultController();// 0x1f3c04f39041
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x1f3b04f39041
	void ReceiveUnpossessed(Controller* OldController);// 0x1f3a04f39041
	void ReceivePossessed(Controller* NewController);// 0x1f3904f39041
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x1f3804f39041
	void OnRep_PlayerState();// 0x1f3704f39041
	void OnRep_Controller();// 0x1f3604f39041
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1f3504f39041
	Vector K2_GetMovementInputVector();// 0x1f3404f39041
	bool IsPlayerControlled();// 0x1f3304f39041
	bool IsPawnControlled();// 0x1f3204f39041
	bool IsMoveInputIgnored();// 0x1f3104f39041
	bool IsLocallyControlled();// 0x1f3004f39041
	bool IsControlled();// 0x1f2f04f39041
	bool IsBotControlled();// 0x1f2e04f39041
	Vector GetPendingMovementInputVector();// 0x1f2d04f39041
	Vector GetNavAgentLocation();// 0x1f2c04f39041
	PawnMovementComponent* GetMovementComponent();// 0x1f2b04f39041
	Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x1f2a04f39041
	Vector GetLastMovementInputVector();// 0x1f2904f39041
	Rotator GetControlRotation();// 0x1f2804f39041
	Controller* GetController();// 0x1f2704f39041
	Rotator GetBaseAimRotation();// 0x1f2604f39041
	void DetachFromControllerPendingDestroy();// 0x1f2504f39041
	Vector ConsumeMovementInputVector();// 0x1f2404f39041
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x1f2304f39041
	void AddControllerYawInput(float val);// 0x1f2204f39041
	void AddControllerRollInput(float val);// 0x1f2104f39041
	void AddControllerPitchInput(float val);// 0x1f2004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x230, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x240, Size: 0x10]
	FName StateName;//[Offset: 0x250, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x258, Size: 0x8]
	Character* Character;//[Offset: 0x268, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x270, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x2a8, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	void UnPossess();// 0x230f04f39041
	void StopMovement();// 0x230e04f39041
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x230d04f39041
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x230c04f39041
	void SetIgnoreLookInput(bool bNewLookInput);// 0x230b04f39041
	void SetControlRotation(out const Rotator NewRotation);// 0x230a04f39041
	void ResetIgnoreMoveInput();// 0x230904f39041
	void ResetIgnoreLookInput();// 0x230804f39041
	void ResetIgnoreInputFlags();// 0x230704f39041
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x230604f39041
	void ReceivePossess(Pawn* PossessedPawn);// 0x230504f39041
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x230404f39041
	void Possess(Pawn* InPawn);// 0x230304f39041
	void OnRep_PlayerState();// 0x230204f39041
	void OnRep_Pawn();// 0x230104f39041
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x230004f39041
	Pawn* K2_GetPawn();// 0x22ff04f39041
	bool IsPlayerController();// 0x22fe04f39041
	bool IsMoveInputIgnored();// 0x22fd04f39041
	bool IsLookInputIgnored();// 0x22fc04f39041
	bool IsLocalPlayerController();// 0x22fb04f39041
	bool IsLocalController();// 0x22fa04f39041
	Actor* GetViewTarget();// 0x22f904f39041
	Rotator GetDesiredRotation();// 0x22f804f39041
	Rotator GetControlRotation();// 0x22f704f39041
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x22f604f39041
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x22f504f39041
	PlayerController* CastToPlayerController();// 0x22f404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x228, Size: 0x4]
	int PlayerId;//[Offset: 0x22c, Size: 0x4]
	byte Ping;//[Offset: 0x230, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x232, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x232, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x232, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x232, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x232, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x232, Size: 0x1]
	int StartTime;//[Offset: 0x234, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x238, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x250, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x260, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x290, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x308, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x1ded04f39041
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x1dec04f39041
	void OnRep_UniqueId();// 0x1deb04f39041
	void OnRep_Score();// 0x1dea04f39041
	void OnRep_PlayerName();// 0x1de904f39041
	void OnRep_PlayerId();// 0x1de804f39041
	void OnRep_bIsInactive();// 0x1de704f39041
	FString GetPlayerName();// 0x1de604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LocalMessage.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UniqueNetIdWrapper
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x288, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x290, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x298, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2a0, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2d0, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x300, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x304, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x344, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x348, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x350, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x370, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x380, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x390, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x1f6b04f39041
	void StopJumping();// 0x1f6a04f39041
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x1f6904f39041
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x1f6804f39041
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x1f6704f39041
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x1f6604f39041
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1f6504f39041
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1f6404f39041
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1f6304f39041
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x1f6204f39041
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x1f6104f39041
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x1f6004f39041
	void OnRep_RootMotion();// 0x1f5f04f39041
	void OnRep_ReplicatedBasedMovement();// 0x1f5e04f39041
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x1f5d04f39041
	void OnRep_IsCrouched();// 0x1f5c04f39041
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1f5b04f39041
	void OnLanded(out const HitResult Hit);// 0x1f5a04f39041
	void OnJumped();// 0x1f5904f39041
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1f5804f39041
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1f5704f39041
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1f5604f39041
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1f5504f39041
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1f5404f39041
	void Jump();// 0x1f5304f39041
	bool IsPlayingRootMotion();// 0x1f5204f39041
	bool IsPlayingNetworkedRootMotionMontage();// 0x1f5104f39041
	bool IsJumpProvidingForce();// 0x1f5004f39041
	bool HasAnyRootMotion();// 0x1f4f04f39041
	AnimMontage* GetCurrentMontage();// 0x1f4e04f39041
	Vector GetBaseTranslationOffset();// 0x1f4d04f39041
	Rotator GetBaseRotationOffsetRotator();// 0x1f4c04f39041
	float GetAnimRootMotionTranslationScale();// 0x1f4b04f39041
	void Crouch(bool bClientSimulation);// 0x1f4a04f39041
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1f4904f39041
	void ClientCheatWalk();// 0x1f4804f39041
	void ClientCheatGhost();// 0x1f4704f39041
	void ClientCheatFly();// 0x1f4604f39041
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1f4504f39041
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1f4404f39041
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1f4304f39041
	void ClientAckGoodMove(float Timestamp);// 0x1f4204f39041
	bool CanJumpInternal();// 0x1f4104f39041
	bool CanJump();// 0x1f4004f39041
	bool CanCrouch();// 0x1f3f04f39041
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x1f3e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x661b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x661a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x66dc04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x66db04f39041
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x66da04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KeyHandleMap
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	int NotifyFilterSignificanceLevel;//[Offset: 0xa0, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	int TrackIndex;//[Offset: 0xa8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x44d504f39041
	FString GetNotifyName();// 0x44d404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x790, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x798, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x7a0, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x7a8, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x7b0, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x7d8, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x7e4, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0x810, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x820, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x830, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x860, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x864, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x865, Size: 0x1]
	byte AnimationMode;//[Offset: 0x867, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x869, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x869, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x869, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x869, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x869, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86a, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86a, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86a, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86a, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x86a, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86b, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86b, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86b, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86b, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x86b, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x86b, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x86b, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86c, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86c, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x874, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x874, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x874, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x874, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x874, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x874, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x874, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x874, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x875, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x875, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x875, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x875, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x875, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x875, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x875, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x875, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x876, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x876, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x878, Size: 0x2]
	enum MassMode;//[Offset: 0x87a, Size: 0x1]
	float UniformMass;//[Offset: 0x87c, Size: 0x4]
	float TotalMass;//[Offset: 0x880, Size: 0x4]
	float Density;//[Offset: 0x884, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0x888, Size: 0x4]
	float ClothBlendWeight;//[Offset: 0x88c, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x890, Size: 0x4]
	float BendingStiffness;//[Offset: 0x894, Size: 0x4]
	float AreaStiffness;//[Offset: 0x898, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x89c, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x8a0, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x8a4, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x8a8, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x8b8, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x8c8, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x8d8, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x9a8, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x9ac, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x9b8, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa10, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xae0, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3bfe04f39041
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x3bfd04f39041
	void ToggleDisablePostProcessBlueprint();// 0x3bfc04f39041
	void TermBodiesBelow(FName ParentBoneName);// 0x3bfb04f39041
	void SuspendClothingSimulation();// 0x3bfa04f39041
	void Stop();// 0x3bf904f39041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x3bf804f39041
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x3bf704f39041
	void SetTeleportRotationThreshold(float Threshold);// 0x3bf604f39041
	void SetTeleportDistanceThreshold(float Threshold);// 0x3bf504f39041
	void SetPosition(float InPos, bool bFireNotifies);// 0x3bf404f39041
	void SetPlayRate(float Rate);// 0x3bf304f39041
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x3bf204f39041
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x3bf104f39041
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x3bf004f39041
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x3bef04f39041
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x3bee04f39041
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x3bed04f39041
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x3bec04f39041
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x3beb04f39041
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x3bea04f39041
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x3be904f39041
	void SetClothMaxDistanceScale(float Scale);// 0x3be804f39041
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x3be704f39041
	void SetAnimClass(class Object NewClass);// 0x3be604f39041
	void SetAnimationMode(byte InAnimationMode);// 0x3be504f39041
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x3be404f39041
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x3be304f39041
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x3be204f39041
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x3be104f39041
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x3be004f39041
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x3bdf04f39041
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x3bde04f39041
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x3bdd04f39041
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x3bdc04f39041
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3bdb04f39041
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x3bda04f39041
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x3bd904f39041
	void ResumeClothingSimulation();// 0x3bd804f39041
	void ResetClothTeleportMode();// 0x3bd704f39041
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x3bd604f39041
	void ResetAllowedAnimCurveEvaluation();// 0x3bd504f39041
	void ResetAllBodiesSimulatePhysics();// 0x3bd404f39041
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x3bd304f39041
	void Play(bool bLooping);// 0x3bd204f39041
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x3bd104f39041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3bd004f39041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3bcf04f39041
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x3bce04f39041
	bool IsPlaying();// 0x3bcd04f39041
	bool IsClothingSimulationSuspended();// 0x3bcc04f39041
	bool IsBodyGravityEnabled(FName BoneName);// 0x3bcb04f39041
	bool HasValidAnimationInstance();// 0x3bca04f39041
	float GetTeleportRotationThreshold();// 0x3bc904f39041
	float GetTeleportDistanceThreshold();// 0x3bc804f39041
	Vector GetSkeletalCenterOfMass();// 0x3bc704f39041
	AnimInstance* GetPostProcessInstance();// 0x3bc604f39041
	float GetPosition();// 0x3bc504f39041
	float GetPlayRate();// 0x3bc404f39041
	float GetMorphTarget(FName MorphTargetName);// 0x3bc304f39041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3bc204f39041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3bc104f39041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3bc004f39041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3bbf04f39041
	bool GetDisablePostProcessBlueprint();// 0x3bbe04f39041
	bool GetDisableAnimCurves();// 0x3bbd04f39041
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x3bbc04f39041
	float GetClothMaxDistanceScale();// 0x3bbb04f39041
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x3bba04f39041
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x3bb904f39041
	AnimInstance* GetAnimInstance();// 0x3bb804f39041
	class Object GetAnimClass();// 0x3bb704f39041
	byte GetAnimationMode();// 0x3bb604f39041
	bool GetAllowRigidBodyAnimNode();// 0x3bb504f39041
	bool GetAllowedAnimCurveEvaluate();// 0x3bb404f39041
	void ForceClothNextUpdateTeleportAndReset();// 0x3bb304f39041
	void ForceClothNextUpdateTeleport();// 0x3bb204f39041
	FName FindConstraintBoneName(int ConstraintIndex);// 0x3bb104f39041
	void ClearMorphTargets();// 0x3bb004f39041
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x3baf04f39041
	void BindClothToMasterPoseComponent();// 0x3bae04f39041
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x3bad04f39041
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x3bac04f39041
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x3bab04f39041
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3baa04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x578, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x580, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x588, Size: 0x10]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x690, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x698, Size: 0x4]
	int MinLodModel;//[Offset: 0x69c, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x6ac, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x6b8, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x6ec, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ee, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6ee, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6ee, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6ee, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6ee, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6ee, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ef, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ef, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ef, Size: 0x1]
	bool bOverrideMeshMinScreenSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6ef, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6ef, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6ef, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6ef, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6ef, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f0, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f0, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f0, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f0, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f0, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f0, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f1, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f1, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x6f4, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x708, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x730, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x3ba904f39041
	void UnHideBoneByName(FName BoneName);// 0x3ba804f39041
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3ba704f39041
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3ba604f39041
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x3ba504f39041
	void ShowAllMaterialSections(int LODIndex);// 0x3ba404f39041
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x3ba304f39041
	bool SetSkinWeightProfile(FName InProfileName);// 0x3ba204f39041
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x3ba104f39041
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation);// 0x3ba004f39041
	void SetRenderStatic(bool bNewValue);// 0x3b9f04f39041
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x3b9e04f39041
	void SetMinLOD(int InNewMinLOD);// 0x3b9d04f39041
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x3b9c04f39041
	void SetForcedLOD(int InNewForcedLOD);// 0x3b9b04f39041
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x3b9a04f39041
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x3b9904f39041
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x3b9804f39041
	bool IsUsingSkinWeightProfile();// 0x3b9704f39041
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x3b9604f39041
	bool IsBoneHiddenByName(FName BoneName);// 0x3b9504f39041
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x3b9404f39041
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x3b9304f39041
	FName GetSocketBoneName(FName InSocketName);// 0x3b9204f39041
	Vector GetRefPosePosition(int BoneIndex);// 0x3b9104f39041
	FName GetParentBone(FName BoneName);// 0x3b9004f39041
	int GetNumLODs();// 0x3b8f04f39041
	int GetNumBones();// 0x3b8e04f39041
	int GetForcedLOD();// 0x3b8d04f39041
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x3b8c04f39041
	FName GetCurrentSkinWeightProfileName();// 0x3b8b04f39041
	FName GetBoneName(int BoneIndex);// 0x3b8a04f39041
	int GetBoneIndex(FName BoneName);// 0x3b8904f39041
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x3b8804f39041
	void ClearVertexColorOverride(int LODIndex);// 0x3b8704f39041
	void ClearSkinWeightProfile();// 0x3b8604f39041
	void ClearSkinWeightOverride(int LODIndex);// 0x3b8504f39041
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x3b8404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x540, Size: 0x10]
	bool bNeedMultiplePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	bool bForceFrontFaceCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	bool bIgnoreTranslucentSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 0x1]
	bool bIgnoreMaskedSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 0x1]
	MaterialInterface* MultiplePassMaterial;//[Offset: 0x558, Size: 0x8]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x2f5904f39041
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x2f5804f39041
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x2f5704f39041
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x2f5604f39041
	FName[] GetMaterialSlotNames();// 0x2f5504f39041
	MaterialInterface*[] GetMaterials();// 0x2f5404f39041
	int GetMaterialIndex(FName MaterialSlotName);// 0x2f5304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x60, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x68, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x84, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xa0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xac, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x138, Size: 0x4]
	byte LODGroup;//[Offset: 0x13c, Size: 0x1]
	float MinScreenSize;//[Offset: 0x140, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x144, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x145, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x146, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x147, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x147, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x147, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x147, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x147, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x148, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x150, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x158, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x160, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x170, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2f8, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x300, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x310, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x340, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x358, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x378, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x6c7d04f39041
	int NumSockets();// 0x6c7c04f39041
	FString[] K2_GetAllMorphTargetNames();// 0x6c7b04f39041
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x6c7a04f39041
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x6c7904f39041
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x6c7804f39041
	BoxSphereBounds GetImportedBounds();// 0x6c7704f39041
	BoxSphereBounds GetBounds();// 0x6c7604f39041
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x6c7504f39041
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x6c7404f39041
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x6c7304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x6c8304f39041
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x6c8204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SmartNameContainer
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	enum Interpolation;//[Offset: 0x16c, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimCurveCompressionCodec.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x18]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x278, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 0x4]
	int JointIterations;//[Offset: 0x4, Size: 0x4]
	int CollisionIterations;//[Offset: 0x8, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ThumbnailInfo.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x35, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x401b04f39041
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x401a04f39041
	Pawn* TryGetPawnOwner();// 0x401904f39041
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x401804f39041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x401704f39041
	void SetRootMotionMode(byte Value);// 0x401604f39041
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x401504f39041
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x401404f39041
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x401304f39041
	void SavePoseSnapshot(FName SnapshotName);// 0x401204f39041
	void ResetDynamics(enum InTeleportType);// 0x401104f39041
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x401004f39041
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x400f04f39041
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x400e04f39041
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x400d04f39041
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x400c04f39041
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x400b04f39041
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x400a04f39041
	void Montage_Resume(const AnimMontage* Montage);// 0x400904f39041
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x400804f39041
	void Montage_Pause(const AnimMontage* Montage);// 0x400704f39041
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x400604f39041
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x400504f39041
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x400404f39041
	bool Montage_IsActive(const AnimMontage* Montage);// 0x400304f39041
	float Montage_GetPosition(const AnimMontage* Montage);// 0x400204f39041
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x400104f39041
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x400004f39041
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x3fff04f39041
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x3ffe04f39041
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x3ffd04f39041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3ffc04f39041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3ffb04f39041
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x3ffa04f39041
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x3ff904f39041
	bool IsAnyMontagePlaying();// 0x3ff804f39041
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x3ff704f39041
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x3ff604f39041
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x3ff504f39041
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x3ff404f39041
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x3ff304f39041
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x3ff204f39041
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x3ff104f39041
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x3ff004f39041
	bool GetReceiveNotifiesFromLinkedInstances();// 0x3fef04f39041
	bool GetPropagateNotifiesToLinkedInstances();// 0x3fee04f39041
	SkeletalMeshComponent* GetOwningComponent();// 0x3fed04f39041
	Actor* GetOwningActor();// 0x3fec04f39041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3feb04f39041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3fea04f39041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3fe904f39041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3fe804f39041
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x3fe704f39041
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x3fe604f39041
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x3fe504f39041
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x3fe404f39041
	float GetInstanceMachineWeight(int MachineIndex);// 0x3fe304f39041
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x3fe204f39041
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x3fe104f39041
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x3fe004f39041
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x3fdf04f39041
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x3fde04f39041
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x3fdd04f39041
	float GetCurveValue(FName CurveName);// 0x3fdc04f39041
	FName GetCurrentStateName(int MachineIndex);// 0x3fdb04f39041
	AnimMontage* GetCurrentActiveMontage();// 0x3fda04f39041
	void GetAllCurveNames(out FName[] OutNames);// 0x3fd904f39041
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x3fd804f39041
	void ClearMorphTargets();// 0x3fd704f39041
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x3fd604f39041
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x3fd504f39041
	void BlueprintPostEvaluateAnimation();// 0x3fd404f39041
	void BlueprintLinkedAnimationLayersInitialized();// 0x3fd304f39041
	void BlueprintInitializeAnimation();// 0x3fd204f39041
	void BlueprintBeginPlay();// 0x3fd104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingLODBuiltData
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingRegionBuiltData
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Struct.Field.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Field.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x66e504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x66de04f39041
	LinearColor GetClampedLinearColorValue(float InTime);// 0x66dd04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ClothingSimulationFactory.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x657d04f39041
	void PhysicsAssetUpdated();// 0x657c04f39041
	void EnableGravityOverride(out const Vector InVector);// 0x657b04f39041
	void DisableGravityOverride();// 0x657a04f39041
	void ClothConfigUpdated();// 0x657904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x3d5d04f39041
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x3d5c04f39041
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x3d5b04f39041
	FString GetNotifyName();// 0x3d5a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimMetaData.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector_NetQuantize10.Vector
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 0x8]
	float GravityScale;//[Offset: 0x150, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x154, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x158, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x164, Size: 0x4]
	byte MovementMode;//[Offset: 0x168, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 0x1]
	float GroundFriction;//[Offset: 0x16c, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x198, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1ac, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 0x4]
	float AirControl;//[Offset: 0x1c4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1d8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 0x1]
	bool bNetworkEnableProxyPrediction;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkEnableProxyFindFloorWhenNoPrediction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f3, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f3, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x204, Size: 0x4]
	float Mass;//[Offset: 0x208, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 0x4]
	float PushForceFactor;//[Offset: 0x214, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x21c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x220, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x224, Size: 0x4]
	float RepulsionForce;//[Offset: 0x228, Size: 0x4]
	Vector Acceleration;//[Offset: 0x22c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 0x4]
	float NetworkLinearSmoothingLerpLimit;//[Offset: 0x2d8, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2dc, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2e0, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e4, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e8, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2ec, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2f0, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x2f4, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x388, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x389, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x38a, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38b, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38b, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38b, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38b, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38c, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38c, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38c, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38c, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38d, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38d, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38d, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38d, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38d, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38d, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38d, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38e, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38e, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38e, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38e, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38e, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38e, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3a0, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3a4, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3b0, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b4, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b8, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3bc, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3c0, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3c4, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 0x30]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4d8, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5a0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x5e0, Size: 0xc]
	bool bCanAdjustWalkingVelocityOnSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	bool bCanAdjustFallingVelocityOnSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 0x1]
	float LimitedNewVelocityZOnTwoWallAdjust;//[Offset: 0x614, Size: 0x4]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x1cd304f39041
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x1cd204f39041
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x1cd104f39041
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x1cd004f39041
	void SetGroupsToIgnore(int GroupFlags);// 0x1ccf04f39041
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x1cce04f39041
	void SetGroupsToAvoid(int GroupFlags);// 0x1ccd04f39041
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x1ccb04f39041
	void SetAvoidanceGroup(int GroupFlags);// 0x1cca04f39041
	void SetAvoidanceEnabled(bool bEnable);// 0x1cc904f39041
	float K2_GetWalkableFloorZ();// 0x1cc804f39041
	float K2_GetWalkableFloorAngle();// 0x1cc704f39041
	float K2_GetModifiedMaxAcceleration();// 0x1cc604f39041
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x1cc504f39041
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x1cc304f39041
	bool IsWalking();// 0x1cc204f39041
	bool IsWalkable(out const HitResult Hit);// 0x1cc104f39041
	float GetValidPerchRadius();// 0x1cc004f39041
	float GetPerchRadiusThreshold();// 0x1cbf04f39041
	PrimitiveComponent* GetMovementBase();// 0x1cbe04f39041
	float GetMinAnalogSpeed();// 0x1cbd04f39041
	float GetMaxJumpHeightWithJumpTime();// 0x1cbc04f39041
	float GetMaxJumpHeight();// 0x1cbb04f39041
	float GetMaxBrakingDeceleration();// 0x1cba04f39041
	float GetMaxAcceleration();// 0x1cb904f39041
	Vector GetLastUpdateVelocity();// 0x1cb804f39041
	Rotator GetLastUpdateRotation();// 0x1cb704f39041
	Vector GetLastUpdateLocation();// 0x1cb604f39041
	Vector GetImpartedMovementBaseVelocity();// 0x1cb504f39041
	Vector GetCurrentAcceleration();// 0x1cb404f39041
	Character* GetCharacterOwner();// 0x1cb304f39041
	float GetAnalogInputModifier();// 0x1cb204f39041
	void DisableMovement();// 0x1cb104f39041
	void ClearAccumulatedForces();// 0x1cb004f39041
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1caf04f39041
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x1cae04f39041
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x1cad04f39041
	void AddForce(Vector Force);// 0x1cac04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 0x8]
	Vector K2_GetInputVector();// 0x1cab04f39041
	bool IsMoveInputIgnored();// 0x1caa04f39041
	Vector GetPendingInputVector();// 0x1ca904f39041
	Pawn* GetPawnOwner();// 0x1ca804f39041
	Vector GetLastInputVector();// 0x1ca704f39041
	Vector ConsumeInputVector();// 0x1ca604f39041
	void AddInputVector(Vector WorldVector, bool bForce);// 0x1ca504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 0x8]
	void StopMovementKeepPathing();// 0x1ca204f39041
	void StopActiveMovement();// 0x1ca104f39041
	bool IsSwimming();// 0x1ca004f39041
	bool IsMovingOnGround();// 0x1c9f04f39041
	bool IsFlying();// 0x1c9e04f39041
	bool IsFalling();// 0x1c9d04f39041
	bool IsCrouching();// 0x1c9c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8]
	Vector Velocity;//[Offset: 0xc4, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 0x1]
	void StopMovementImmediately();// 0x11e504f39041
	void SnapUpdatedComponentToPlane();// 0x11e404f39041
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x11e304f39041
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x11e204f39041
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x11e104f39041
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x11e004f39041
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x11df04f39041
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x11de04f39041
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x11dd04f39041
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x11dc04f39041
	float K2_GetModifiedMaxSpeed();// 0x11db04f39041
	float K2_GetMaxSpeedModifier();// 0x11da04f39041
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x11d904f39041
	Vector GetPlaneConstraintOrigin();// 0x11d804f39041
	Vector GetPlaneConstraintNormal();// 0x11d704f39041
	enum GetPlaneConstraintAxisSetting();// 0x11d504f39041
	PhysicsVolume* GetPhysicsVolume();// 0x11d404f39041
	float GetMaxSpeed();// 0x11d304f39041
	float GetGravityZ();// 0x11d204f39041
	Vector ConstrainNormalToPlane(Vector Normal);// 0x11d104f39041
	Vector ConstrainLocationToPlane(Vector Location);// 0x11d004f39041
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x11cf04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoftClassPath.SoftObjectPath
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x558, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x55c, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x554004f39041
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x553f04f39041
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x553e04f39041
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x553d04f39041
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x553c04f39041
	float GetUnscaledCapsuleRadius();// 0x553b04f39041
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x553a04f39041
	float GetUnscaledCapsuleHalfHeight();// 0x553904f39041
	float GetShapeScale();// 0x553804f39041
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x553704f39041
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x553604f39041
	float GetScaledCapsuleRadius();// 0x553504f39041
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x553404f39041
	float GetScaledCapsuleHalfHeight();// 0x553304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x540, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x548, Size: 0x8]
	Color ShapeColor;//[Offset: 0x550, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x554, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x554, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x554, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavAreaBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x2b8, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x2c0, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2c8, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x2d0, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2d8, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2e0, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x2ec, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x304, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x310, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x320, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x334, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x338, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x344, Size: 0xc]
	int ClientCap;//[Offset: 0x350, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x358, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x360, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x368, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x370, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x3f1, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x430, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x438, Size: 0x8]
	float InputYawScale;//[Offset: 0x44c, Size: 0x4]
	float InputPitchScale;//[Offset: 0x450, Size: 0x4]
	float InputRollScale;//[Offset: 0x454, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x458, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x458, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x458, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x458, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x45c, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x460, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x470, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x471, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x472, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x473, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x474, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x478, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x47a, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x508, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x510, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x528, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x580, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x590, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x23a004f39041
	bool WasInputKeyJustPressed(Key Key);// 0x239f04f39041
	void ToggleSpeaking(bool bInSpeaking);// 0x239e04f39041
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x239d04f39041
	void SwitchLevel(FString URL);// 0x239c04f39041
	void StopHapticEffect(enum Hand);// 0x239b04f39041
	void StartFire(byte FireModeNum);// 0x239a04f39041
	void SetVirtualJoystickVisibility(bool bVisible);// 0x239904f39041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x239804f39041
	void SetName(FString S);// 0x239704f39041
	void SetMouseLocation(const int X, const int Y);// 0x239604f39041
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x239504f39041
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x239404f39041
	void SetDisableHaptics(bool bNewDisabled);// 0x239304f39041
	void SetControllerLightColor(Color Color);// 0x239204f39041
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x239104f39041
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x239004f39041
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x238f04f39041
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x238e04f39041
	void ServerViewPrevPlayer();// 0x238d04f39041
	void ServerViewNextPlayer();// 0x238c04f39041
	void ServerVerifyViewTarget();// 0x238b04f39041
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x238a04f39041
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x238804f39041
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x238704f39041
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x238604f39041
	void ServerToggleAILogging();// 0x238504f39041
	void ServerShortTimeout();// 0x238404f39041
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x238304f39041
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x238204f39041
	void ServerRestartPlayer();// 0x238104f39041
	void ServerPause();// 0x238004f39041
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x237f04f39041
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x237e04f39041
	void ServerExecRPC(FString Msg);// 0x237d04f39041
	void ServerExec(FString Msg);// 0x237c04f39041
	void ServerCheckClientPossessionReliable();// 0x237b04f39041
	void ServerCheckClientPossession();// 0x237a04f39041
	void ServerChangeName(FString S);// 0x237904f39041
	void ServerCamera(FName NewMode);// 0x237804f39041
	void ServerAcknowledgePossession(Pawn* P);// 0x237704f39041
	void SendToConsole(FString Command);// 0x237604f39041
	void RestartLevel();// 0x237504f39041
	void ResetControllerLightColor();// 0x237404f39041
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x237304f39041
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x237104f39041
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x236f04f39041
	void Pause();// 0x236e04f39041
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x236d04f39041
	void LocalTravel(FString URL);// 0x236c04f39041
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x236b04f39041
	bool IsInputKeyDown(Key Key);// 0x236a04f39041
	void GetViewportSize(out int SizeX, out int SizeY);// 0x236904f39041
	SpectatorPawn* GetSpectatorPawn();// 0x236804f39041
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x236704f39041
	Vector GetInputVectorKeyState(Key Key);// 0x236604f39041
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x236504f39041
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x236404f39041
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x236304f39041
	float GetInputKeyTimeDown(Key Key);// 0x236204f39041
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x236004f39041
	float GetInputAnalogKeyState(Key Key);// 0x235f04f39041
	HUD* GetHUD();// 0x235e04f39041
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x235d04f39041
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x235c04f39041
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x235b04f39041
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x235a04f39041
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x235904f39041
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x235704f39041
	Vector GetFocalLocation();// 0x235604f39041
	void FOV(float NewFOV);// 0x235504f39041
	void EnableCheats();// 0x235404f39041
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x235304f39041
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x235204f39041
	void ConsoleKey(Key Key);// 0x235104f39041
	void ClientWasKicked(const FText KickReason);// 0x235004f39041
	void ClientVoiceHandshakeComplete();// 0x234f04f39041
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x234d04f39041
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x234c04f39041
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x234b04f39041
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x234a04f39041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x234904f39041
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x234804f39041
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x234704f39041
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x234604f39041
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x234504f39041
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x234404f39041
	void ClientStartOnlineSession();// 0x234304f39041
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x234204f39041
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x233f04f39041
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x233e04f39041
	void ClientSetHUD(class HUD NewHUDClass);// 0x233d04f39041
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x233c04f39041
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x233b04f39041
	void ClientSetCameraMode(FName NewCamMode);// 0x233a04f39041
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x233904f39041
	void ClientSetBlockOnAsyncLoading();// 0x233804f39041
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x233704f39041
	void ClientReturnToMainMenu(FString ReturnReason);// 0x233604f39041
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x233504f39041
	void ClientRestart(Pawn* NewPawn);// 0x233404f39041
	void ClientReset();// 0x233304f39041
	void ClientRepObjRef(Object* Object);// 0x233204f39041
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x233104f39041
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x233004f39041
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x232f04f39041
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x232e04f39041
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x232d04f39041
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x232b04f39041
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x232a04f39041
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x232904f39041
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x232704f39041
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x232604f39041
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x232504f39041
	void ClientIgnoreMoveInput(bool bIgnore);// 0x232404f39041
	void ClientIgnoreLookInput(bool bIgnore);// 0x232304f39041
	void ClientGotoState(FName NewState);// 0x232204f39041
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x232104f39041
	void ClientForceGarbageCollection();// 0x232004f39041
	void ClientFlushLevelStreaming();// 0x231f04f39041
	void ClientEndOnlineSession();// 0x231e04f39041
	void ClientEnableNetworkVoice(bool bEnable);// 0x231d04f39041
	void ClientCommitMapChange();// 0x231c04f39041
	void ClientClearCameraLensEffects();// 0x231b04f39041
	void ClientCapBandwidth(int Cap);// 0x231a04f39041
	void ClientCancelPendingMapChange();// 0x231904f39041
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x231804f39041
	void ClearAudioListenerOverride();// 0x231704f39041
	void ClearAudioListenerAttenuationOverride();// 0x231604f39041
	bool CanRestartPlayer();// 0x231504f39041
	void Camera(FName NewMode);// 0x231404f39041
	void AddYawInput(float val);// 0x231304f39041
	void AddRollInput(float val);// 0x231204f39041
	void AddPitchInput(float val);// 0x231104f39041
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x231004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpTrackInst.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x140, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x150, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x160, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x188, Size: 0x10]
	Margin Padding;//[Offset: 0x198, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a8, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 0x8]
	int Priority;//[Offset: 0x1e0, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1f0, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 0x10]
	void UnregisterInputComponent();// 0x193504f39041
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x193404f39041
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x193304f39041
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x193204f39041
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x193104f39041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x193004f39041
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x192f04f39041
	void StopListeningForAllInputActions();// 0x192e04f39041
	void StopAnimationsAndLatentActions();// 0x192d04f39041
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x192c04f39041
	void StopAllAnimations();// 0x192b04f39041
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x192a04f39041
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x192904f39041
	void SetPadding(Margin InPadding);// 0x192804f39041
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x192704f39041
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x192604f39041
	void SetInputActionPriority(int NewPriority);// 0x192504f39041
	void SetInputActionBlocking(bool bShouldBlock);// 0x192404f39041
	void SetForegroundColor(SlateColor InForegroundColor);// 0x192304f39041
	void SetDesiredSizeInViewport(Vector2D Size);// 0x192204f39041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x192104f39041
	void SetAnchorsInViewport(Anchors Anchors);// 0x192004f39041
	void SetAlignmentInViewport(Vector2D Alignment);// 0x191f04f39041
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x191e04f39041
	void RemoveFromViewport();// 0x191d04f39041
	void RegisterInputComponent();// 0x191c04f39041
	void PreConstruct(bool IsDesignTime);// 0x191b04f39041
	void PlaySound(SoundBase* SoundToPlay);// 0x191a04f39041
	void PlayEnterAnim();// 0x191904f39041
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x191804f39041
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x191704f39041
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x191604f39041
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x191404f39041
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x191304f39041
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x191204f39041
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x191104f39041
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x191004f39041
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x190f04f39041
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x190e04f39041
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x190d04f39041
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x190c04f39041
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x190b04f39041
	void OnPaint(out PaintContext Context);// 0x190a04f39041
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x190904f39041
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x190804f39041
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x190704f39041
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x190604f39041
	void OnMouseCaptureLost();// 0x190504f39041
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x190404f39041
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x190304f39041
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x190204f39041
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x190004f39041
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x18ff04f39041
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x18fe04f39041
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x18fd04f39041
	void OnInitialized();// 0x18fc04f39041
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x18fb04f39041
	void OnFocusLost(FocusEvent InFocusEvent);// 0x18fa04f39041
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x18f904f39041
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x18f804f39041
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x18f704f39041
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x18f604f39041
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x18f504f39041
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x18f404f39041
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x18f304f39041
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x18f204f39041
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x18f104f39041
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x18ef04f39041
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x18ed04f39041
	bool IsPlayingAnimation();// 0x18ec04f39041
	bool IsListeningForInputAction(FName ActionName);// 0x18eb04f39041
	bool IsInViewport();// 0x18ea04f39041
	bool IsInteractable();// 0x18e904f39041
	bool IsAnyAnimationPlaying();// 0x18e804f39041
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x18e704f39041
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x18e604f39041
	Pawn* GetOwningPlayerPawn();// 0x18e504f39041
	HUD* GetOwningHUD();// 0x18e404f39041
	bool GetIsVisible();// 0x18e304f39041
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x18e204f39041
	Anchors GetAnchorsInViewport();// 0x18e004f39041
	Vector2D GetAlignmentInViewport();// 0x18df04f39041
	void DoPlayEnterAnim(bool InPlayFlag);// 0x18de04f39041
	void Destruct();// 0x18dd04f39041
	void Construct();// 0x18dc04f39041
	void CancelLatentActions();// 0x18db04f39041
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x18da04f39041
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x18d904f39041
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x18d704f39041
	void AddToViewport(int ZOrder);// 0x18d604f39041
	bool AddToPlayerScreen(int ZOrder);// 0x18d504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte Cursor;//[Offset: 0xc1, Size: 0x1]
	enum Clipping;//[Offset: 0xc2, Size: 0x1]
	enum Visibility;//[Offset: 0xc3, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4]
	byte DetailMode;//[Offset: 0xc8, Size: 0x1]
	bool bSelectedDetailModeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	int WidthDivisor;//[Offset: 0xcc, Size: 0x4]
	int HeightDivisor;//[Offset: 0xd0, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xd8, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xe0, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x128, Size: 0x10]
	void SetWidthHeightDivisors(int InWidthDivisor, int InHeightDivisor);// 0x17b704f39041
	void SetVisibility(enum InVisibility);// 0x17b604f39041
	void SetUserFocus(PlayerController* PlayerController);// 0x17b504f39041
	void SetToolTipText(out const FText InToolTipText);// 0x17b404f39041
	void SetToolTip(Widget* Widget);// 0x17b304f39041
	void SetSelectedDetailModeOnly(bool InSelectedDetailModeOnly);// 0x17b204f39041
	void SetRenderTranslation(Vector2D Translation);// 0x17b104f39041
	void SetRenderTransformPivot(Vector2D Pivot);// 0x17b004f39041
	void SetRenderTransformAngle(float Angle);// 0x17af04f39041
	void SetRenderTransform(WidgetTransform InTransform);// 0x17ad04f39041
	void SetRenderShear(Vector2D Shear);// 0x17ac04f39041
	void SetRenderScale(Vector2D Scale);// 0x17ab04f39041
	void SetRenderOpacity(float InOpacity);// 0x17aa04f39041
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x17a904f39041
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x17a804f39041
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x17a704f39041
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x17a604f39041
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x17a504f39041
	void SetKeyboardFocus();// 0x17a404f39041
	void SetIsEnabled(bool bInIsEnabled);// 0x17a304f39041
	void SetFocus();// 0x17a204f39041
	void SetDetailMode(byte InDetailMode);// 0x17a004f39041
	void SetCursor(byte InCursor);// 0x179f04f39041
	void SetClipping(enum InClipping);// 0x179e04f39041
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x179c04f39041
	void ResetCursor();// 0x179b04f39041
	void RemoveFromParent();// 0x179a04f39041
	EventReply OnReply__DelegateSignature();// 0x179904f39041
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x179504f39041
	bool IsVisible();// 0x179404f39041
	bool IsHovered();// 0x179304f39041
	void InvalidateLayoutAndVolatility();// 0x179204f39041
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x179104f39041
	bool HasUserFocus(PlayerController* PlayerController);// 0x179004f39041
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x178f04f39041
	bool HasMouseCapture();// 0x178e04f39041
	bool HasKeyboardFocus();// 0x178d04f39041
	bool HasFocusedDescendants();// 0x178c04f39041
	bool HasAnyUserFocus();// 0x178b04f39041
	Widget* GetWidget__DelegateSignature();// 0x178a04f39041
	enum GetVisibility();// 0x178904f39041
	Geometry GetTickSpaceGeometry();// 0x178804f39041
	FText GetText__DelegateSignature();// 0x178704f39041
	enum GetSlateVisibility__DelegateSignature();// 0x178504f39041
	SlateColor GetSlateColor__DelegateSignature();// 0x178404f39041
	SlateBrush GetSlateBrush__DelegateSignature();// 0x177904f39041
	float GetRenderTransformAngle();// 0x177804f39041
	float GetRenderOpacity();// 0x177704f39041
	PanelWidget* GetParent();// 0x177604f39041
	Geometry GetPaintSpaceGeometry();// 0x177504f39041
	PlayerController* GetOwningPlayer();// 0x177404f39041
	LocalPlayer* GetOwningLocalPlayer();// 0x177304f39041
	byte GetMouseCursor__DelegateSignature();// 0x177104f39041
	LinearColor GetLinearColor__DelegateSignature();// 0x177004f39041
	bool GetIsEnabled();// 0x176f04f39041
	int GetInt32__DelegateSignature();// 0x176e04f39041
	GameInstance* GetGameInstance();// 0x176d04f39041
	float GetFloat__DelegateSignature();// 0x176c04f39041
	Vector2D GetDesiredSize();// 0x176b04f39041
	enum GetClipping();// 0x176904f39041
	enum GetCheckBoxState__DelegateSignature();// 0x176704f39041
	Geometry GetCachedGeometry();// 0x176504f39041
	bool GetBool__DelegateSignature();// 0x176404f39041
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x176304f39041
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x176204f39041
	void ForceVolatile(bool bForce);// 0x176104f39041
	void ForceLayoutPrepass();// 0x176004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Visual.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10]
	byte DetailMode;//[Offset: 0x378, Size: 0x1]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x647d04f39041
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x647c04f39041
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x647b04f39041
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x647a04f39041
	void SetDetailMode(byte InDetailMode);// 0x647904f39041
	float GetStartTime();// 0x647804f39041
	float GetEndTime();// 0x647704f39041
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x647604f39041
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x647504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x401d04f39041
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x401c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSegment
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SectionEvaluationDataTree
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvalTemplatePtr
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTrackImplementationPtr
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneFrameRange
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x94, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceInstanceDataPtr
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTrackFieldData
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSubSectionFieldData
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] Ids;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Geometry
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0x646004f39041
	FName GetUserTag();// 0x645f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x138, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x189d04f39041
	bool RemoveChild(Widget* Content);// 0x189c04f39041
	bool HasChild(Widget* Content);// 0x189b04f39041
	bool HasAnyChildren();// 0x189a04f39041
	int GetChildrenCount();// 0x189904f39041
	int GetChildIndex(const Widget* Content);// 0x189804f39041
	Widget* GetChildAt(int Index);// 0x189704f39041
	Widget*[] GetAllChildren();// 0x189604f39041
	void ClearChildren();// 0x189504f39041
	PanelSlot* AddChild(Widget* Content);// 0x189404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DynamicPropertyPath.CachedPropertyPath
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Function.Struct.Field.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 0x1c]
	float Duration;//[Offset: 0xf4, Size: 0x4]
	float MaxDistance;//[Offset: 0xf8, Size: 0x4]
	float TotalSamples;//[Offset: 0xfc, Size: 0x4]
	float Priority;//[Offset: 0x100, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 0x8]
	SoundModulation Modulation;//[Offset: 0x110, Size: 0x10]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x58]
	SoundClass*[] ChildClasses;//[Offset: 0x80, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x90, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0xa0, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xb0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float StereoBleed;//[Offset: 0x10, Size: 0x4]
	float LFEBleed;//[Offset: 0x14, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4]
	byte OutputTarget;//[Offset: 0x2c, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x2d, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	float OutputVolume;//[Offset: 0x68, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x70, Size: 0x10]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x6ca504f39041
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x6ca404f39041
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x6ca304f39041
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x6ca204f39041
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x6ca104f39041
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x6ca004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundEffectSubmixPreset.SoundEffectPreset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundEffectPreset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundfieldEncodingSettingsBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x160, Size: 0x4]
	int StreamingPriority;//[Offset: 0x164, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x168, Size: 0x1]
	byte SoundGroup;//[Offset: 0x16a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x16c, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1a0, Size: 0x4]
	FString SpokenText;//[Offset: 0x1e8, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x1f8, Size: 0x4]
	float Volume;//[Offset: 0x1fc, Size: 0x4]
	float Pitch;//[Offset: 0x200, Size: 0x4]
	int NumChannels;//[Offset: 0x204, Size: 0x4]
	int SampleRate;//[Offset: 0x208, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x228, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveTable.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AudioEffectParameters
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundModulationPluginSourceSettingsBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x1c]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0xc, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x14, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AttenuationSubmixSendSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpatializationPluginSourceSettingsBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OcclusionPluginSourceSettingsBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReverbPluginSourceSettingsBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundEffectSourcePreset.SoundEffectPreset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x304, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x308, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PointerEvent.InputEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EventReply
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FocusEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KeyEvent.InputEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PaintContext
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MotionEvent.InputEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterEvent.InputEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D LockedSize;//[Offset: 0x14, Size: 0x8]
	bool bUsePixelMargin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	Margin Margin;//[Offset: 0x20, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x30, Size: 0x28]
	SlateBrushOutlineSettings OutlineSettings;//[Offset: 0x60, Size: 0x40]
	Object* ResourceObject;//[Offset: 0xa0, Size: 0x8]
	FName ResourceName;//[Offset: 0xa8, Size: 0x8]
	Box2D UVRegion;//[Offset: 0xb0, Size: 0x14]
	byte DrawAs;//[Offset: 0xc4, Size: 0x1]
	byte Tiling;//[Offset: 0xc5, Size: 0x1]
	byte Mirroring;//[Offset: 0xc6, Size: 0x1]
	byte ImageType;//[Offset: 0xc7, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateBrushOutlineSettings
	Vector4 CornerRadii;//[Offset: 0x0, Size: 0x10]
	SlateColor Color;//[Offset: 0x10, Size: 0x28]
	float Width;//[Offset: 0x38, Size: 0x4]
	byte RoundingType;//[Offset: 0x3c, Size: 0x1]
	bool bUseBrushTransparency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x3f1104f39041
	void ShowTitleSafeArea();// 0x3f1004f39041
	void SetConsoleTarget(int PlayerIndex);// 0x3f0f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScriptViewportClient.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0x121c04f39041
	void ReceiveInit();// 0x121b04f39041
	void HandleTravelError(byte FailureType);// 0x121904f39041
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x121704f39041
	void DebugRemovePlayer(int ControllerId);// 0x121604f39041
	void DebugCreatePlayer(int ControllerId);// 0x121504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OnlineSession.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x402c04f39041
	bool WasControllerKeyJustPressed(Key Key);// 0x402b04f39041
	bool IsControllerKeyDown(Key Key);// 0x402a04f39041
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x402904f39041
	Vector GetControllerVectorKeyState(Key Key);// 0x402804f39041
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x402704f39041
	float GetControllerKeyTimeDown(Key Key);// 0x402604f39041
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x402504f39041
	float GetControllerAnalogKeyState(Key Key);// 0x402404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x404204f39041
	void SetBind(FName BindName, FString Command);// 0x404104f39041
	void InvertAxisKey(const Key AxisKey);// 0x404004f39041
	void InvertAxis(const FName AxisName);// 0x403f04f39041
	void ClearSmoothing();// 0x403e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x50e804f39041
	void Dragged(out const PointerEvent PointerEvent);// 0x50e704f39041
	void DragCancelled(out const PointerEvent PointerEvent);// 0x50e604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnalogInputEvent.KeyEvent.InputEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x228, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x230, Size: 0x8]
	float DefaultFOV;//[Offset: 0x240, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x248, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x250, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2a0, Size: 0x660]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x900, Size: 0x660]
	TViewTarget ViewTarget;//[Offset: 0xf60, Size: 0x670]
	TViewTarget PendingViewTarget;//[Offset: 0x15d0, Size: 0x670]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1c70, Size: 0x660]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x22d0, Size: 0x660]
	CameraModifier*[] ModifierList;//[Offset: 0x2930, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2940, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2950, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2954, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2960, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2980, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2990, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2998, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x29d8, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x29f8, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2a08, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2a18, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a20, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a20, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a20, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a20, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a21, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2a24, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2a28, Size: 0x4]
	float ViewYawMin;//[Offset: 0x2a2c, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2a30, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2a34, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2a38, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2a40, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x55eb04f39041
	void StopCameraFade();// 0x55ea04f39041
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x55e904f39041
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x55e804f39041
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x55e704f39041
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x55e604f39041
	void StopAllCameraShakes(bool bImmediately);// 0x55e504f39041
	void StopAllCameraAnims(bool bImmediate);// 0x55e404f39041
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x55e304f39041
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x55e204f39041
	void SetGameCameraCutThisFrame();// 0x55e104f39041
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x55e004f39041
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x55df04f39041
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x55de04f39041
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x55dd04f39041
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x55dc04f39041
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x55db04f39041
	void OnPhotographySessionStart();// 0x55da04f39041
	void OnPhotographySessionEnd();// 0x55d904f39041
	void OnPhotographyMultiPartCaptureStart();// 0x55d804f39041
	void OnPhotographyMultiPartCaptureEnd();// 0x55d704f39041
	PlayerController* GetOwningPlayerController();// 0x55d604f39041
	float GetFOVAngle();// 0x55d504f39041
	Rotator GetCameraRotation();// 0x55d404f39041
	Vector GetCameraLocation();// 0x55d304f39041
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x55d204f39041
	void ClearCameraLensEffects();// 0x55d104f39041
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x55d004f39041
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x55cf04f39041
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x55ce04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x4f9c04f39041
	void ReceivePlayShake(float Scale);// 0x4f9b04f39041
	bool ReceiveIsFinished();// 0x4f9a04f39041
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x4f9904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x5c0]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x600, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PostProcessSettings
	bool bOverride_LDRSaturation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellOpacity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellFadeness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellSecondRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellLocation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellSecondLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_PCBloomIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_PCBloomThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1]
	byte BloomMethod;//[Offset: 0x18, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x19, Size: 0x1]
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4]
	float WhiteTint;//[Offset: 0x20, Size: 0x4]
	Vector4 LDRSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 LDRContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 LDRBrightness;//[Offset: 0x50, Size: 0x10]
	float NightfellRadius;//[Offset: 0x60, Size: 0x4]
	float NightfellSecondRadius;//[Offset: 0x64, Size: 0x4]
	float NightfellOpacity;//[Offset: 0x68, Size: 0x4]
	float NightfellFadeness;//[Offset: 0x6c, Size: 0x4]
	Vector4 NightfellLocation;//[Offset: 0x70, Size: 0x10]
	Vector4 NightfellSecondLocation;//[Offset: 0x80, Size: 0x10]
	float PCBloomIntensity;//[Offset: 0x90, Size: 0x4]
	float PCBloomThreshold;//[Offset: 0x94, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0x160, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0x170, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x180, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x190, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x1a0, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x1b0, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x1c0, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x1d0, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x1e0, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x1f0, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x1f4, Size: 0x4]
	float BlueCorrection;//[Offset: 0x1f8, Size: 0x4]
	float ExpandGamut;//[Offset: 0x1fc, Size: 0x4]
	float FilmSlope;//[Offset: 0x200, Size: 0x4]
	float FilmToe;//[Offset: 0x204, Size: 0x4]
	float FilmShoulder;//[Offset: 0x208, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x20c, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x210, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x214, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x224, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x234, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x238, Size: 0x4]
	float FilmSaturation;//[Offset: 0x23c, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x240, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x250, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x260, Size: 0x10]
	float FilmContrast;//[Offset: 0x270, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x274, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x278, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x27c, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x280, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x290, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x294, Size: 0x4]
	float BloomIntensity;//[Offset: 0x298, Size: 0x4]
	float BloomThreshold;//[Offset: 0x29c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x2a0, Size: 0x4]
	float Bloom1Size;//[Offset: 0x2a4, Size: 0x4]
	float Bloom2Size;//[Offset: 0x2a8, Size: 0x4]
	float Bloom3Size;//[Offset: 0x2ac, Size: 0x4]
	float Bloom4Size;//[Offset: 0x2b0, Size: 0x4]
	float Bloom5Size;//[Offset: 0x2b4, Size: 0x4]
	float Bloom6Size;//[Offset: 0x2b8, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x2bc, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x2cc, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x2dc, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x2ec, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2fc, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x30c, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x31c, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x320, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x328, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x330, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x334, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x338, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x33c, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x340, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x348, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x34c, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x35c, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x36c, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x370, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x378, Size: 0x4]
	float CameraISO;//[Offset: 0x37c, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x380, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x384, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x388, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x38c, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x390, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x394, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x398, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x3a0, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x3a8, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x3ac, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x3b0, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x3b4, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x3b8, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x3bc, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x3c0, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x3c4, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x3c8, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x3cc, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x3d0, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x3e0, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x3e4, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x3e8, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x3f0, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x470, Size: 0x4]
	float GrainJitter;//[Offset: 0x474, Size: 0x4]
	float GrainIntensity;//[Offset: 0x478, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x47c, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x480, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x484, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x488, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x48c, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x490, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x494, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x498, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x49c, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x4a0, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x4a4, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x4a8, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x4ac, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b0, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x4b4, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x4b8, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x4c8, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x4cc, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x4d0, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x4d4, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x4d8, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x4e0, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x4e8, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x4ec, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x4f0, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x4f4, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x4f8, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x4fc, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x500, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x504, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x508, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x50c, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x510, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x514, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x518, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x51c, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x520, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x524, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x528, Size: 0x4]
	float LPVIntensity;//[Offset: 0x52c, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x530, Size: 0x4]
	float LPVSize;//[Offset: 0x534, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x538, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x53c, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x540, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x544, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x548, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x54c, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x550, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x554, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x558, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x55c, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x560, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x564, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x568, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x56c, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x570, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x574, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x578, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x57c, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57d, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x57e, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x580, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x584, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x588, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x58c, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58d, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x590, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x594, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x598, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x59c, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x5a0, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x5a8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextureCube.Texture.StreamableRenderAsset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x5c0]
	float BasePostProcessBlendWeight;//[Offset: 0x620, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x66c304f39041
	void SetScale(float NewDuration);// 0x66c204f39041
	void SetDuration(float NewDuration);// 0x66c104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x314, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x318, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x31c, Size: 0x4]
	class CameraShake* CameraShake;//[Offset: 0x320, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	void StopAllCameraShakes(bool bImmediately);// 0x66c704f39041
	void PlayCameraShake(class CameraShake InCameraShake);// 0x66c604f39041
	void Play();// 0x66c504f39041
	float GetAttenuationFactor(out const Vector Location);// 0x66c404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x457804f39041
	Actor* GetViewTarget();// 0x457704f39041
	void EnableModifier();// 0x457604f39041
	void DisableModifier(bool bImmediate);// 0x457504f39041
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x457404f39041
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x457304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x280, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x288, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x290, Size: 0x30]
	float BaseFOV;//[Offset: 0x2c0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x2d8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x228, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x238, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x248, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x258, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x268, Size: 0x10]
	void ToggleActive();// 0x673804f39041
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x673704f39041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x673604f39041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x673504f39041
	void SetFloatParameter(FName ParameterName, float Param);// 0x673404f39041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x673304f39041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x673204f39041
	void OnRep_bCurrentlyActive();// 0x673104f39041
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x673004f39041
	bool IsActive();// 0x672f04f39041
	void Deactivate();// 0x672e04f39041
	void Activate();// 0x672d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4]
	float Delay;//[Offset: 0xa8, Size: 0x4]
	float DelayLow;//[Offset: 0xac, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1]
	byte LODMethod;//[Offset: 0xb3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x6c0204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Distribution.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleBurst
	int count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleTypeDataBase.ParticleModule.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleEventBase.ParticleModule.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleEventSendToGame.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x540, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x548, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x558, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x569, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x569, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x569, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x569, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x569, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56a, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56a, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56a, Size: 0x1]
	byte LODMethod;//[Offset: 0x575, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x576, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x578, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x588, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x598, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x5a8, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x5b8, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	Vector OldPosition;//[Offset: 0x5cc, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x5d8, Size: 0xc]
	float WarmupTime;//[Offset: 0x5e4, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x5e8, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x5f0, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x5f8, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x618, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x630, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x688, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x690, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x698, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x699, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x69a, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x6c8, Size: 0x10]
	delegate OnPreSystemActivated;//[Offset: 0x6d8, Size: 0x10]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3d2204f39041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x3d2104f39041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x3d2004f39041
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x3d1f04f39041
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x3d1e04f39041
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x3d1d04f39041
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x3d1c04f39041
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x3d1b04f39041
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x3d1a04f39041
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x3d1904f39041
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x3d1804f39041
	int GetNumActiveParticles();// 0x3d1704f39041
	MaterialInterface* GetNamedMaterial(FName InName);// 0x3d1604f39041
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x3d1504f39041
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x3d1404f39041
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x3d1304f39041
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x3d1204f39041
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x3d1104f39041
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x3d1004f39041
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x3d0f04f39041
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x3d0e04f39041
	void EndTrails();// 0x3d0d04f39041
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x3d0c04f39041
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3d0b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x3d0a04f39041
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x3d0904f39041
	void SetFloatParameter(FName ParameterName, float Param);// 0x3d0804f39041
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x3d0704f39041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x3d0604f39041
	void SetBoolParameter(FName ParameterName, bool Param);// 0x3d0504f39041
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x3d0404f39041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x3d0304f39041
	void ReleaseToPool();// 0x3d0204f39041
	FXSystemAsset* GetFXSystemAsset();// 0x3d0104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSystemLOD
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x650]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x650]
	PlayerState* PlayerState;//[Offset: 0x660, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x228, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x230, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x238, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	float AspectRatio;//[Offset: 0x24c, Size: 0x4]
	float FOVAngle;//[Offset: 0x250, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x254, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 0x5c0]
	int GetAutoActivatePlayerIndex();// 0x57eb04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x314, Size: 0x4]
	float OrthoWidth;//[Offset: 0x318, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x31c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x320, Size: 0x4]
	float AspectRatio;//[Offset: 0x324, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x328, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x328, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x328, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x329, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x360, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x390, Size: 0x5c0]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x4f9504f39041
	void SetProjectionMode(byte InProjectionMode);// 0x4f9404f39041
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x4f9304f39041
	void SetOrthoWidth(float InOrthoWidth);// 0x4f9204f39041
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x4f9104f39041
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x4f9004f39041
	void SetFieldOfView(float InFieldOfView);// 0x4f8f04f39041
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x4f8e04f39041
	void SetAspectRatio(float InAspectRatio);// 0x4f8d04f39041
	void RemoveBlendable(interface classNone InBlendableObject);// 0x4f8c04f39041
	void OnCameraMeshHiddenChanged();// 0x4f8b04f39041
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x4f8a04f39041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x4f8904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HapticFeedbackEffect_Base.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x284, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x288, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x290, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x298, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2a0, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	void TurnAtRate(float Rate);// 0x3c5504f39041
	void MoveUp_World(float val);// 0x3c5404f39041
	void MoveRight(float val);// 0x3c5304f39041
	void MoveForward(float val);// 0x3c5204f39041
	void LookUpAtRate(float Rate);// 0x3c5104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x558, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x495904f39041
	float GetUnscaledSphereRadius();// 0x495804f39041
	float GetShapeScale();// 0x495704f39041
	float GetScaledSphereRadius();// 0x495604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x574, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x578, Size: 0x4]
	int MinLOD;//[Offset: 0x57c, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x580, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x588, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x590, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x594, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x594, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x594, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x594, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x594, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x594, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x594, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x594, Size: 0x1]
	bool bOverrideShadowMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x595, Size: 0x1]
	bool bMinimizeLightmapRes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x595, Size: 0x1]
	bool bOverrideMeshMinScreenSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x595, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x595, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x595, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x595, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x595, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x595, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x598, Size: 0x4]
	float LightmapPrecision;//[Offset: 0x59c, Size: 0x4]
	float ShadowmapPrecision;//[Offset: 0x5a0, Size: 0x4]
	int OverriddenShadowMapRes;//[Offset: 0x5a4, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x5a8, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x5ac, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x5b0, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x5b8, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5c8, Size: 0x10]
	bool bClearStaticLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x5dc, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x44fb04f39041
	void SetShadowmapPrecision(float InShadowMapPrecision);// 0x44fa04f39041
	void SetReverseCulling(bool ReverseCulling);// 0x44f904f39041
	void SetOverrideShadowMapRes(int InOverridShadowMapRes);// 0x44f804f39041
	void SetOverrideMinLOD(bool bInOverrideMinLOD, int InMinLOD);// 0x44f704f39041
	void SetOverrideLightMapRes(int InOverrideLightMapRes);// 0x44f604f39041
	void SetLightmapPrecision(float InLightMapPrecision);// 0x44f504f39041
	void SetForcedLodModel(int NewForcedLodModel);// 0x44f404f39041
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x44f304f39041
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x44f204f39041
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x44f104f39041
	void EnableShadowmapResOverride(bool bInOverrideShadowMapRes);// 0x44f004f39041
	void EnableLightmapResOverride(bool bInOverrideLightMapRes);// 0x44ef04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMeshComponentLODInfo
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x502604f39041
	void ViewSelf();// 0x502504f39041
	void ViewPlayer(FString S);// 0x502404f39041
	void ViewClass(class Actor DesiredClass);// 0x502304f39041
	void ViewActor(FName ActorName);// 0x502204f39041
	void UpdateSafeArea();// 0x502104f39041
	void ToggleServerStatReplicatorUpdateStatNet();// 0x502004f39041
	void ToggleServerStatReplicatorClientOverwrite();// 0x501f04f39041
	void ToggleDebugCamera();// 0x501e04f39041
	void ToggleAILogging();// 0x501d04f39041
	void TestCollisionDistance();// 0x501c04f39041
	void Teleport();// 0x501b04f39041
	void Summon(FString ClassName);// 0x501a04f39041
	void StreamLevelOut(FName PackageName);// 0x501904f39041
	void StreamLevelIn(FName PackageName);// 0x501804f39041
	void SpawnServerStatReplicator();// 0x501704f39041
	void Slomo(float NewTimeDilation);// 0x501604f39041
	void SetWorldOrigin();// 0x501504f39041
	void SetMouseSensitivityToDefault();// 0x501404f39041
	void ServerToggleAILogging();// 0x501304f39041
	void ReceiveInitCheatManager();// 0x501204f39041
	void ReceiveEndPlay();// 0x501104f39041
	void PlayersOnly();// 0x501004f39041
	void OnlyLoadLevel(FName PackageName);// 0x500f04f39041
	void LogLoc();// 0x500e04f39041
	void InvertMouse();// 0x500d04f39041
	void God();// 0x500c04f39041
	void Ghost();// 0x500b04f39041
	void FreezeFrame(float Delay);// 0x500a04f39041
	void Fly();// 0x500904f39041
	void FlushLog();// 0x500804f39041
	void EnableDebugCamera();// 0x500704f39041
	void DumpVoiceMutingState();// 0x500604f39041
	void DumpPartyState();// 0x500504f39041
	void DumpOnlineSessionState();// 0x500404f39041
	void DumpChatState();// 0x500304f39041
	void DisableDebugCamera();// 0x500204f39041
	void DestroyTarget();// 0x500104f39041
	void DestroyServerStatReplicator();// 0x500004f39041
	void DestroyPawns(class Pawn aClass);// 0x4fff04f39041
	void DestroyAllPawnsExceptTarget();// 0x4ffe04f39041
	void DestroyAll(class Actor aClass);// 0x4ffd04f39041
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x4ffc04f39041
	void DebugCapsuleSweepPawn();// 0x4ffb04f39041
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x4ffa04f39041
	void DebugCapsuleSweepClear();// 0x4ff904f39041
	void DebugCapsuleSweepChannel(byte Channel);// 0x4ff804f39041
	void DebugCapsuleSweepCapture();// 0x4ff704f39041
	void DebugCapsuleSweep();// 0x4ff604f39041
	void DamageTarget(float DamageAmount);// 0x4ff504f39041
	void CheatScript(FString ScriptName);// 0x4ff404f39041
	void ChangeSize(float F);// 0x4ff304f39041
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x4ff204f39041
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x4ff104f39041
	void BugIt(FString ScreenShotDescription);// 0x4ff004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a5, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a5, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a5, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a5, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a5, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a5, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a5, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a5, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5a8, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x5b0, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x5b8, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x5c0, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x648, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x650, Size: 0x8]
	float SpeedScale;//[Offset: 0x658, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x65c, Size: 0x4]
	float InitialAccel;//[Offset: 0x660, Size: 0x4]
	float InitialDecel;//[Offset: 0x664, Size: 0x4]
	void ToggleDisplay();// 0x66f104f39041
	void ShowDebugSelectedInfo();// 0x66f004f39041
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x66ef04f39041
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x66ee04f39041
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x66ed04f39041
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x66ec04f39041
	Actor* GetSelectedActor();// 0x66eb04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x540, Size: 0x4]
	float FrustumAngle;//[Offset: 0x544, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x548, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x54c, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x550, Size: 0x4]
	Texture* Texture;//[Offset: 0x558, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x170, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1f0, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1530, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1b10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x210, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Package.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicationDriver.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PackageMap.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x228, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x238, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x240, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x248, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x250, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x258, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x260, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x268, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x270, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x278, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x280, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x288, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x290, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x298, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	void StartPlay();// 0x22b804f39041
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x22b704f39041
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x22b604f39041
	bool ShouldReset(Actor* ActorToReset);// 0x22b504f39041
	void ReturnToMainMenuHost();// 0x22b404f39041
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x22b304f39041
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x22b204f39041
	void RestartPlayer(Controller* NewPlayer);// 0x22b104f39041
	void ResetLevel();// 0x22b004f39041
	bool PlayerCanRestart(PlayerController* Player);// 0x22af04f39041
	bool MustSpectate(PlayerController* NewPlayerController);// 0x22ae04f39041
	void K2_PostLogin(PlayerController* NewPlayer);// 0x22ad04f39041
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x22ac04f39041
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x22ab04f39041
	void K2_OnLogout(Controller* ExitingController);// 0x22aa04f39041
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x22a904f39041
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x22a804f39041
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x22a704f39041
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x22a604f39041
	bool HasMatchStarted();// 0x22a504f39041
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x22a404f39041
	int GetNumSpectators();// 0x22a304f39041
	int GetNumPlayers();// 0x22a204f39041
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x22a104f39041
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x22a004f39041
	Actor* ChoosePlayerStart(Controller* Player);// 0x229f04f39041
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x229e04f39041
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x229d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x228, Size: 0x4]
	int MaxPlayers;//[Offset: 0x22c, Size: 0x4]
	int MaxPartySize;//[Offset: 0x230, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x234, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	FName SessionName;//[Offset: 0x238, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x228, Size: 0x28]
	GameModeBase* AuthorityGameMode;//[Offset: 0x250, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x258, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x260, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x274, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x278, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x27c, Size: 0x4]
	void OnRep_SpectatorClass();// 0x1bae04f39041
	void OnRep_ReplicatedWorldTimeSeconds();// 0x1bad04f39041
	void OnRep_ReplicatedHasBegunPlay();// 0x1bac04f39041
	void OnRep_GameModeClass();// 0x1bab04f39041
	bool HasMatchStarted();// 0x1baa04f39041
	bool HasBegunPlay();// 0x1ba904f39041
	float GetServerWorldTimeSeconds();// 0x1ba804f39041
	float GetPlayerStartTime(Controller* Controller);// 0x1ba704f39041
	float GetPlayerRespawnDelay(Controller* Controller);// 0x1ba604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	uint32 Channels;//[Offset: 0x22c, Size: 0x4]
	uint32 InRate;//[Offset: 0x230, Size: 0x4]
	uint32 OutRate;//[Offset: 0x234, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x23c, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x240, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x244, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x248, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x24c, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x250, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x254, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x258, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x25c, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x260, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x264, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x268, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x26c, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x270, Size: 0x4]
	uint32 InPackets;//[Offset: 0x274, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x278, Size: 0x4]
	uint32 InBunches;//[Offset: 0x27c, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x280, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x284, Size: 0x4]
	uint32 InLoss;//[Offset: 0x288, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x28c, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x290, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x294, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x298, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x29c, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2a0, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2a4, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2a8, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2ac, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x2b0, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2b4, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b8, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x2bc, Size: 0x4]
	uint32 NumActors;//[Offset: 0x2c0, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x2c4, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x2c8, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2cc, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2d0, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x2d4, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d8, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x2dc, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x2e0, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x2e4, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x2e8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x228, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x22c, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x230, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x234, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x238, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x23c, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x240, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x244, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x248, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x250, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x254, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x258, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x25c, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x260, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x264, Size: 0x4]
	float MoveRepSize;//[Offset: 0x268, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x26c, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x270, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x274, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x278, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x27c, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x280, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x284, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x288, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x28c, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x290, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x294, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x298, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x29c, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2a0, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a8, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2ac, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2b0, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b8, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2bc, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2c0, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2c4, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BookmarkBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x228, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x230, Size: 0x8]
	float PlayRate;//[Offset: 0x238, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x240, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x244, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x244, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x248, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x250, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x268, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x278, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	float InterpPosition;//[Offset: 0x28c, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x294, Size: 0x1]
	delegate OnPlay;//[Offset: 0x298, Size: 0x10]
	delegate OnStop;//[Offset: 0x2a8, Size: 0x10]
	delegate OnPause;//[Offset: 0x2b8, Size: 0x10]
	void Stop();// 0x6bfc04f39041
	void SetPosition(float NewPosition, bool bJump);// 0x6bfb04f39041
	void SetLoopingState(bool bNewLooping);// 0x6bfa04f39041
	void Reverse();// 0x6bf904f39041
	void Play();// 0x6bf804f39041
	void Pause();// 0x6bf704f39041
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x6bf604f39041
	void ChangePlaybackDirection();// 0x6bf504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpGroupDirector.InterpGroup.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x318, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x320, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x328, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x66d904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Interface.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	<FName,LevelSolarDecorationLightMapGUIDArray> LevelSolarDecorationLightMapGUIDs;//[Offset: 0x1e8, Size: 0x50]
	IntVector LightBuildLevelOffset;//[Offset: 0x238, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x298, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x2a8, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x2c8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x558, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x6bd104f39041
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x6bd004f39041
	bool RemoteEvent(FName EventName);// 0x6bcf04f39041
	void LevelReset();// 0x6bce04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x238, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x240, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x540, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1]
	float ScreenSize;//[Offset: 0x54c, Size: 0x4]
	float U;//[Offset: 0x550, Size: 0x4]
	float UL;//[Offset: 0x554, Size: 0x4]
	float V;//[Offset: 0x558, Size: 0x4]
	float VL;//[Offset: 0x55c, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x664d04f39041
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x664c04f39041
	void SetSprite(Texture2D* NewSprite);// 0x664b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSolarDecorationLightMapGUIDArray
	Guid[] MapBuildDataIdArray;//[Offset: 0x0, Size: 0x10]
	uint32[] LODNumArray;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xf0, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x100, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x110, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x120, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x130, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x138, Size: 0x8]
	bool ShouldBeLoaded();// 0x6bdd04f39041
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x6bdc04f39041
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x6bdb04f39041
	void SetPriority(int NewPriority);// 0x6bda04f39041
	void SetLevelLODIndex(int LODIndex);// 0x6bd904f39041
	bool IsStreamingStatePending();// 0x6bd804f39041
	bool IsLevelVisible();// 0x6bd704f39041
	bool IsLevelLoaded();// 0x6bd604f39041
	FName GetWorldAssetPackageFName();// 0x6bd504f39041
	Level* GetLoadedLevel();// 0x6bd404f39041
	LevelScriptActor* GetLevelScriptActor();// 0x6bd304f39041
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x6bd204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x260, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x271, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x850, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9fc, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa20, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleEventManager.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationSystemBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x664a04f39041
	int GetObjectCount();// 0x664904f39041
	int GetNewAvoidanceUID();// 0x664804f39041
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x664704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x66d404f39041
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x66d304f39041
	Vector K2_Project(Vector WorldLocation);// 0x66d204f39041
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x66d104f39041
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x66d004f39041
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x66cf04f39041
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x66ce04f39041
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x66cd04f39041
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x66cc04f39041
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x66cb04f39041
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x66ca04f39041
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x66c904f39041
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x66c804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReporterGraph.ReporterBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReporterBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x88, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x98, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0xa4, Size: 0x4]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0xa8, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0xb8, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0xc8, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0xd8, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0xe8, Size: 0x10]
	void OnStreamingLevelShownHandle(FName LevelPackageName, LevelStreaming* LevelStreaming);// 0x6d3404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWorldSettings.WorldSettings.Info.Actor.Object
	int MapId;//[Offset: 0x420, Size: 0x4]
	SoftObjectPath PreloadAssets;//[Offset: 0x428, Size: 0x18]
	bool bAsyncPreload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool bHoldAllMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	SolarPostProcessSettingItem* PostProcessItem;//[Offset: 0x448, Size: 0x8]
	int CurrentActiveColorThemeIndex;//[Offset: 0x450, Size: 0x4]
	int SolarMapTypeValue;//[Offset: 0x454, Size: 0x4]
	bool MapEnableLowMemoryGraphOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	Transform SpectatorPawnStartPoint;//[Offset: 0x460, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPostProcessSettingItem.Object
	ColorGradingItem ColorGradingItem;//[Offset: 0x30, Size: 0x5d0]
	void SetPostSettingsByIndex(int Index, PostProcessSettings PPSettings);// 0x525904f39041
	PostProcessSettings GetPostSettingsByIndex(int Index);// 0x525804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ColorGradingItem
	enum ColorTheme;//[Offset: 0x0, Size: 0x1]
	PostProcessSettings PPSettings;//[Offset: 0x10, Size: 0x5c0]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Controller_BattleRoyaleMap01_C.BP_Controller_BattleRoyale_C.BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	void OnCatchInputActionDelegate_29A6297C08DBDD6A44AA98D8928BE733(FName ActionName, byte InputEventType);// 0x16a67051b9001
	void OnEnterLandingDelegate_29A5E4E908DBDD6A44AA968A928BE6F8();// 0xffffffff033ab620
	IntPoint GetCustomStandardScreenSize();// 0xe4bc051b9001
	void SetInputActionSwitch(int ActionID, bool bOn);// 0x91d0051b9001
	void DebugUpdateTask();// 0xffffff8f04f39002
	void UpdateEnableAiPalRate(int Rate);// 0xffffffff54195020
	void TryRecordBattlePlayerData();// 0xf27104f39041
	void OnCharacterRebirthLua();// 0xffffffff5418e110
	void DebugSetPlayerData();// 0xffffff9404f39007
	void MeerkatTriggerReport(FString Value);// 0xe32f051b9001
	void UpdateAiPalRate(int Rate);// 0x2304f39097
	void DebugInitTask();// 0x28896051b9008
	void LuaShowUI(FString WidgetPath, FString UIName);// 0xffffffff5418aac0
	void OnCharacterDeathLua();// 0x1139c051b9001
	void NotifyMonsterSpawn();// 0x3dcccc5946139000
	int QueryStage();// 0xffffff8f04f39002
	void CustomModeShowNotice(const int InType, const int InNoticeID, class Object InClass, const float InTime, FString InText, Object* InIcon, const int InNoticeColor);// 0x38ffbc05229065
	void NotifyCrouchIsLocked();// 0xfc16051b9001
	void ShowBackpackUI();// 0xf26d04f39041
	void ReceiveEndPlay(byte EndPlayReason);// 0xffffff8f04f39002
	void RecordSpectateInfoToBI(out SpectateReportInfo SpectateReportInfo);// 0x1c0005404f3d0c7
	void ReceiveBeginPlay();// 0x3abfbc3004f39414
	bool IsMatching();// 0xe4c1051b9001
	IntPoint GetMobileStandardScreenSize();// 0x2dffba0522902e
	FString GetNoticeLocalText(int InNoticeID, out const <FString,FString> InNoticeParams);// 0x38ffbc05229065
	void SolarGM_BattleLua(FString CmdName, out const FString[] Params);// 0x24a84051b9008
	void OnNotifyLockPlayer(FString Name);// 0x8ac04f39002
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Controller_BattleRoyale_C.BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe50, Size: 0x8]
	PoseSnapshot Snapshot;//[Offset: 0xe58, Size: 0x38]
	float TempMaxDist;//[Offset: 0xe90, Size: 0x4]
	int TempMaxIndex;//[Offset: 0xe94, Size: 0x4]
	int EnableAiPalRate;//[Offset: 0xe98, Size: 0x4]
	void MeerkatTriggerReport(FString Value);// 0xe330051b9001
	void UpdateAiPalRate(int Rate);// 0xe39e051b9001
	void OnRep_EnableAiPalRate();// 0xdaff04f39041
	void OnNotifyLockPlayer(FString Name);// 0xe328051b9001
	void RequestNotifyLockPlayer(FString Name);// 0xffffff8c04f39044
	void InpActEvt_GMT_K2Node_InputActionEvent(Key Key);// 0xe242051b9001
	void InputReviveSelfReleased();// 0x13d08051b9001
	void AssembleCustomAntiCheatData(SolarWeapon* ActiveWeapon, SolarVehiclePawn* BoardedVehicle);// 0xe44904f39001
	void CustomAntiCheatDataExport(out const FString[] DataName, out const FString[] DataContent);// 0xe418051b9001
	void ClientNotifyLockPlayer(FString Name);// 0x188e104f39041
	void RpcClientRepAceStatusToServer(FString Value);// 0x32ffbd05229065
	void ExecuteUbergraph_BP_Controller_Framework(int EntryPoint, FString K2Node_CustomEvent_Value, const FString[] Temp_string_Variable, enum CallFunc_GetBuildConfiguration_ReturnValue, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Key K2Node_InputActionEvent_Key, byte CallFunc_MakeLiteralByte_ReturnValue, SolarWeapon* K2Node_Event_ActiveWeapon, SolarVehiclePawn* K2Node_Event_BoardedVehicle, const FString[] K2Node_Event_DataName, const FString[] K2Node_Event_DataContent, FString CallFunc_Conv_ByteToString_ReturnValue, FString K2Node_CustomEvent_Name, const FString[] K2Node_MakeArray_Array, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue);// 0xb47704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMPlayerController.SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	SCMPlayerRPCComponent* RpcComponent;//[Offset: 0xe48, Size: 0x8]
	void ServerHandlePlayerLevelLoaded(FString LevelName);// 0x4c2104f39041
	void RequestUpdataDataManager();// 0x4c2004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	delegate OnPawnReplicated;//[Offset: 0x5e8, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x5f8, Size: 0x10]
	delegate OnCatchInputActionDelegate;//[Offset: 0x608, Size: 0x10]
	delegate OnEnterLandingDelegate;//[Offset: 0x618, Size: 0x10]
	SolarInputManager* InputManager;//[Offset: 0x628, Size: 0x8]
	AiPalComponent* AiPalComponent;//[Offset: 0x638, Size: 0x8]
	SolarEasyAntiCheatComponent* AntiCheatComponent;//[Offset: 0x640, Size: 0x8]
	delegate OnHUDSpawnedDelegate;//[Offset: 0x648, Size: 0x10]
	SolarInputModePolicyComponent* SolarInputModePolicyComponent;//[Offset: 0x748, Size: 0x8]
	SolarInputActionContext*[] InputActionContextArray;//[Offset: 0x750, Size: 0x10]
	Vector2D InputMovementVector;//[Offset: 0x768, Size: 0x8]
	float InputRotatePitch;//[Offset: 0x770, Size: 0x4]
	float ActionWheelHoldDownTime;//[Offset: 0x780, Size: 0x4]
	float WorldMarkMessageDelayTime;//[Offset: 0x794, Size: 0x4]
	float WarningMarkRadius;//[Offset: 0x798, Size: 0x4]
	float PingHoldDownTime;//[Offset: 0x79c, Size: 0x4]
	float VoiceWheelMouseMoveRatio;//[Offset: 0x7a0, Size: 0x4]
	float WheelRadius;//[Offset: 0x7a4, Size: 0x4]
	float CancelRadius;//[Offset: 0x7a8, Size: 0x4]
	float OpenMarkWheelRadius;//[Offset: 0x7ac, Size: 0x4]
	float OpenMarkWheelMovement_G;//[Offset: 0x7b0, Size: 0x4]
	ActorMarkBase*[] DeathBoxWorldMarks;//[Offset: 0x828, Size: 0x10]
	float DeathBoxMarksRefreshInterval;//[Offset: 0x83c, Size: 0x4]
	int MaxDeathBoxWorldMarkNumber;//[Offset: 0x844, Size: 0x4]
	class ActorMarkBase* DeathBoxMarkClass;//[Offset: 0x848, Size: 0x8]
	class SolarCharacterSpringArmComponent* FollowArmClass;//[Offset: 0x878, Size: 0x8]
	class SolarCharacterCameraComponent* FollowCameraClass;//[Offset: 0x880, Size: 0x8]
	float FreeLookSmoothSpeed;//[Offset: 0x888, Size: 0x4]
	SolarCharacterSpringArmComponent* FollowArm;//[Offset: 0x8b0, Size: 0x8]
	SolarCharacterCameraComponent* FollowCamera;//[Offset: 0x8b8, Size: 0x8]
	FString PlayerId;//[Offset: 0x968, Size: 0x10]
	float VehicleInteractionDistance;//[Offset: 0x990, Size: 0x4]
	SolarVehiclePawn*[] InteractingVehicles;//[Offset: 0x998, Size: 0x10]
	SolarVehiclePawn* BestInteractingVehicle;//[Offset: 0x9a8, Size: 0x8]
	AbilityCooldownTimer[] ActivedAbilityCooldownArray;//[Offset: 0x9b0, Size: 0x10]
	delegate OnTeammateHUDDodgeSet;//[Offset: 0xa78, Size: 0x10]
	<SolarCharacter*,int> TeammateCandidates;//[Offset: 0xa88, Size: 0x50]
	bool bIsAlreadyParachuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 0x1]
	GameplayHitInfo[] WeaponMessageArray;//[Offset: 0xae0, Size: 0x10]
	Actor*[] UniqueActorArray;//[Offset: 0xb08, Size: 0x10]
	float HangUpTime;//[Offset: 0xb18, Size: 0x4]
	UserWidget* DamageTextWidget;//[Offset: 0xb38, Size: 0x8]
	SolarDamageText[] SameFrameDamageTextDataCache;//[Offset: 0xb40, Size: 0x10]
	TimerHandle SameFrameDamageTextDataHandle;//[Offset: 0xb50, Size: 0x8]
	delegate OnSpectateInfoRep;//[Offset: 0xc00, Size: 0x10]
	SoftClassPath SwitchTargetCameraControlCompClass;//[Offset: 0xc70, Size: 0x18]
	bool bShowCursorWhenSpectateOthers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc88, Size: 0x1]
	float SpectateNetCamUpdatePositionLimit;//[Offset: 0xc8c, Size: 0x4]
	PlayerController* ScoutPlayerController;//[Offset: 0xc98, Size: 0x8]
	Actor* ScoutViewTarget;//[Offset: 0xca0, Size: 0x8]
	SolarSwitchTargetCameraControlComp* SolarSwitchTargetCameraControlComp;//[Offset: 0xca8, Size: 0x8]
	int[] UsableJetpacks;//[Offset: 0xcb8, Size: 0x10]
	int[] UsableTailFlames;//[Offset: 0xcc8, Size: 0x10]
	FName PickUpExpItemSound;//[Offset: 0xcd8, Size: 0x8]
	FString CachedRechamberSound;//[Offset: 0xce0, Size: 0x10]
	FName EMPScreenEffectName;//[Offset: 0xd2c, Size: 0x8]
	float AntiCheatUploadInterval;//[Offset: 0xd34, Size: 0x4]
	FixedAntiCheatData FixedAntiCheatData;//[Offset: 0xd38, Size: 0x1c]
	FString[] CustomAntiCheatNames;//[Offset: 0xdd8, Size: 0x10]
	FString[] CustomAntiCheatContents;//[Offset: 0xde8, Size: 0x10]
	SolarMeerkatManager* GamePlayMeerkatManager;//[Offset: 0xe38, Size: 0x8]
	void WorldMarkWheelYAxis_G(float Movement);// 0x259c04f39041
	void WorldMarkWheelYAxis(float Movement);// 0x259b04f39041
	void WorldMarkWheelXAxis_G(float Movement);// 0x259a04f39041
	void WorldMarkWheelXAxis(float Movement);// 0x259904f39041
	void WorldMarkDelayExecFunction();// 0x259804f39041
	void UseMedicine();// 0x259704f39041
	void UpdateEnableAiPalRate(int Rate);// 0x259604f39041
	void UnMarkWorldInLevel(int64 instanceID);// 0x259504f39041
	void Turn(float Value);// 0x259404f39041
	void TryRecordBattlePlayerData();// 0x259304f39041
	void TryRechargeShield(bool bUseBigRecharger);// 0x259204f39041
	void TriggerVoiceByType(enum VoiceType);// 0x259104f39041
	void TriggerVoiceByNumber(int VoiceIndex);// 0x259004f39041
	void ToggleEMPScreenEffect(bool bInVisible);// 0x258f04f39041
	void ToggleCursor();// 0x258e04f39041
	void TakeOverNextClientSetViewTargetBySwitchTargetComp(bool bRestartBlendEvenIfSameTarget);// 0x258d04f39041
	void SwtichVehicleSeatNotification();// 0x258c04f39041
	void SwitchWeaponByReverseOrder();// 0x258b04f39041
	void SwitchWeaponByOrder();// 0x258a04f39041
	void SwitchSpectatedCharacterInTeam(int PosInTeam);// 0x258904f39041
	void SwitchInputBinding(out const FName InputName, enum SwitchTpye);// 0x258704f39041
	void StopSpectateCountdown();// 0x258604f39041
	void StopRecordingAtDS();// 0x258504f39041
	void StartSpectateCountdown(RepCountdownData InCountdownData);// 0x258404f39041
	void StartRecordingAtDS(FString Filename, FString UploadUrl, enum ForceRecordingType);// 0x258304f39041
	void SolarSlot(int ID);// 0x258204f39041
	void SolarShowPanelUI(int Type);// 0x258104f39041
	void SolarServerNetProfileStop();// 0x258004f39041
	void SolarServerNetProfileStart();// 0x257f04f39041
	void SolarOpenUI(FString UIID, int RootID);// 0x257e04f39041
	void SolarModule(int ID);// 0x257d04f39041
	void SolarISPC(FString _str);// 0x257c04f39041
	void SolarGM_Weapon(FString Type, FString paramOne, FString paramTwo);// 0x257b04f39041
	void SolarGM_UpdateTaskInfo();// 0x257a04f39041
	void SolarGM_TeleportToBotAIServer(uint32 CtrlIndex);// 0x257904f39041
	void SolarGM_StopRecordingAtDS();// 0x257804f39041
	void SolarGM_StopBotAIBehaviorTreeServer(bool bStop);// 0x257704f39041
	void SolarGM_StartShrinkSafeArea();// 0x257604f39041
	void SolarGM_StartRecordingAtDS(FString Filename, FString UploadUrl, enum ForceRecordingType);// 0x257504f39041
	void SolarGM_SpawnBotAIAtCrosshairByNumServer(int Num, int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x257404f39041
	void SolarGM_SpawnBotAIAtCrosshair(int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x257304f39041
	void SolarGM_SpawnAIAtCrosshairServer(int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x257204f39041
	void SolarGM_ShowRedZoneDamage(bool IsShow);// 0x257104f39041
	void SolarGM_ShowNotice(int NoticeId);// 0x257004f39041
	void SolarGM_SetTeamID(int InTeamId);// 0x256f04f39041
	void SolarGM_SetStatDataForDebug();// 0x256e04f39041
	void SolarGM_SetSolarPlayerID(FString InSolarPlayer);// 0x256d04f39041
	void SolarGM_SetReconnection(bool IsReconnection);// 0x256c04f39041
	void SolarGM_SetPlayerData(FString InPlayerID);// 0x256b04f39041
	void SolarGM_SetHitTraceComponentEnable(bool InEnable);// 0x256a04f39041
	void SolarGM_SetGyroscopeTiltZThresholdSwitch(FString bSwitch);// 0x256904f39041
	void SolarGM_SetGyroscopeTiltZThreshold(float Value);// 0x256804f39041
	void SolarGM_SetGyroscopeTiltYThreshold(float Value);// 0x256704f39041
	void SolarGM_SetGyroscopeTiltFrameCount(float Value);// 0x256604f39041
	void SolarGM_SetGyroscopeRotationRateYThreshold(float Value);// 0x256504f39041
	void SolarGM_SetGyroscopeRotationRateXThreshold(float Value);// 0x256404f39041
	void SolarGM_ServerStartShrinkSafeArea();// 0x256304f39041
	void SolarGM_ServerShowRedZoneDamage(bool IsShow);// 0x256204f39041
	void SolarGM_ServerSetTeamID(int InTeamId);// 0x256104f39041
	void SolarGM_ServerSetStatDataForDebug();// 0x256004f39041
	void SolarGM_ServerSetSolarPlayerID(FString InSolarPlayer);// 0x255f04f39041
	void SolarGM_ServerSetReconnection(bool IsReconnection);// 0x255e04f39041
	void SolarGM_ServerSetPlayerData(FString InPlayerID);// 0x255d04f39041
	void SolarGM_ServerPlayerAbnormal();// 0x255c04f39041
	void SolarGM_ServerMarkVehicleSpawnerInMap(int InputIndex);// 0x255b04f39041
	void SolarGM_ServerDumpAllPlayer();// 0x255a04f39041
	void SolarGM_ServerDebugOffline();// 0x255904f39041
	void SolarGM_ServerConsoleCommand(FString InConsoleCommand);// 0x255804f39041
	void SolarGM_ServerClosePoisonDamage(bool isClose);// 0x255704f39041
	void SolarGM_ServerChangeDayLight(int ID);// 0x255604f39041
	void SolarGM_ResetZoneBombsFire();// 0x255504f39041
	void SolarGM_RedZoneServer(const int ZoneId);// 0x255404f39041
	void SolarGM_RedZone(const int ZoneId);// 0x255304f39041
	void SolarGM_PoisonServer(FString GMType);// 0x255204f39041
	void SolarGM_Poison(FString GMType);// 0x255104f39041
	void SolarGM_PlayerUndetectableByAIServer(int debugValue);// 0x255004f39041
	void SolarGM_PlayerUndetectableByAI(int debugValue);// 0x254f04f39041
	void SolarGM_PlayerAbnormal();// 0x254e04f39041
	void SolarGM_NoviceGuidance(int ActionID, bool bOn);// 0x254d04f39041
	void SolarGM_NotifyPlayerHasCheatByNickName(FString NickName);// 0x254c04f39041
	void SolarGM_NotifyPlayerHasCheat(FString SolarPlayerID);// 0x254b04f39041
	void SolarGM_KillAllAIServer(bool KillBot);// 0x254a04f39041
	void SolarGM_KickMeOut();// 0x254904f39041
	void SolarGM_InitTaskInfo();// 0x254804f39041
	void SolarGM_GoPreviousHomeCameraMode();// 0x254704f39041
	void SolarGM_GoNextHomeCameraMode();// 0x254604f39041
	void SolarGM_GoHomeCameraModeByIndex(int Index);// 0x254504f39041
	void SolarGM_GMGoSpectatePreviousPlayer();// 0x254404f39041
	void SolarGM_GMGoSpectatePlayerByIndex(uint32 Index);// 0x254304f39041
	void SolarGM_GMGoSpectateNextPlayer();// 0x254204f39041
	void SolarGM_Freelook(bool Open);// 0x254104f39041
	void SolarGM_DumpAllPlayer(bool bSendToServer);// 0x254004f39041
	void SolarGM_DebugOffline();// 0x253f04f39041
	void SolarGM_DebugAllAIServer(int debugValue);// 0x253e04f39041
	void SolarGM_DebugAllAI(int debugValue);// 0x253d04f39041
	void SolarGM_ClosePoisonDamage(bool isClose);// 0x253c04f39041
	void SolarGM_ClientShowRedZoneDamage(Vector bombLocation, Vector characterlocation, float Distance, float Damage);// 0x253b04f39041
	void SolarGM_ClientSetPlayerData(FString InPlayerID);// 0x253a04f39041
	void SolarGM_ClientMarkVehicleSpawnerInMap(const Vector[] VehicleSpawnerLocations, const int[] VehicleSpawnerSpawnIds, int InputIndex);// 0x253904f39041
	void SolarGM_ClientGotoLogin();// 0x253804f39041
	void SolarGM_ClientDumpAllPlayer(FString DumpString);// 0x253704f39041
	void SolarGM_Character(FString GMType, FString Param1, FString Param2);// 0x253604f39041
	void SolarGM_ChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x253504f39041
	void SolarGM_ChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x253404f39041
	void SolarGM_ChangeVehicleIntProperty(FString InPropertyName, int inInt);// 0x253304f39041
	void SolarGM_ChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x253204f39041
	void SolarGM_ChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x253104f39041
	void SolarGM_ChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x253004f39041
	void SolarGM_ChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x252f04f39041
	void SolarGM_ChangeDayLight(int ID);// 0x252e04f39041
	void SolarGM_BeginHeroPickMySelf();// 0x252d04f39041
	void SolarGM_BattleLua(FString CmdName, out const FString[] Params);// 0x252c04f39041
	void SolarGM_Battle(FString CmdName, out const FString[] Params);// 0x252b04f39041
	void SolarGM(FString _str);// 0x252a04f39041
	void SolarEnergy(int InMode, int ID);// 0x252904f39041
	void SolarCloseUI(FString UIID);// 0x252804f39041
	void SolarClosePanelUI(int Type);// 0x252704f39041
	void SolarClientNetProfileStop();// 0x252604f39041
	void SolarClientNetProfileStart();// 0x252504f39041
	void ShowBackpackUI();// 0x252404f39041
	void SetNativeRequestFreeLook(bool bInFreeLook);// 0x252304f39041
	void SetInputActionSwitch(int ActionID, bool bOn);// 0x252204f39041
	void SetAllTeammateHUDDodge(bool bDodge);// 0x252104f39041
	void ServerUpdateTaskInfo();// 0x252004f39041
	void ServerUnforbidRoleAbilitySkillDebugOnly();// 0x251f04f39041
	void ServerTriggleScreenshotTask(FString TargetPlayerID);// 0x251e04f39041
	void ServerTeleportTo(const Vector DestLocation);// 0x251d04f39041
	void ServerSyncPlayerSelfReport();// 0x251c04f39041
	void ServerSwitchSpectatedCharacterInTeam(int PosInTeam);// 0x251b04f39041
	void ServerSpawnVehicleWithVehicleID(const int VehicleID);// 0x251a04f39041
	void ServerSpawnVehicleWithSkinID(const int SkinId, const Vector InLocation);// 0x251904f39041
	void ServerSpawnVehicle(const int SpawnID);// 0x251804f39041
	void ServerSpawnTreasureBox(const int TreasureBoxID);// 0x251704f39041
	void ServerSpawnSolarRadar(FString BpPath);// 0x251604f39041
	void ServerSpawnPSO_BP_ObjectByPath(FString BpPath, const Vector Location);// 0x251504f39041
	void ServerSpawnOutcomeContent(const int OutcomeID);// 0x251404f39041
	void ServerSpawnChargingPile(FString BpPath);// 0x251304f39041
	void ServerSpawnAirship(float Loc_X, float Loc_Y);// 0x251204f39041
	void ServerSpawnAirdrop(const int AirdropID);// 0x251104f39041
	void ServerSolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed);// 0x251004f39041
	void ServerSolarWeaponReload(int PrimaryAmmoCap, int SecondaryAmmoCap);// 0x250f04f39041
	void ServerSolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);// 0x250e04f39041
	void ServerSolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);// 0x250d04f39041
	void ServerSolarSetPlayerValue(FString InType, FString InValue);// 0x250c04f39041
	void ServerSolarAmmoSpreadPerBullet(int AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);// 0x250b04f39041
	void ServerSolarAmmoRangeSpeedDamage(int AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);// 0x250a04f39041
	void ServerSolarAmmoFiring(int AmmoIndex, int FireCostType, int FireCostPerAttack, int FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);// 0x250904f39041
	void ServerSolarAmmoBoltAndMag(int AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);// 0x250804f39041
	void ServerSolarAmmoBasicMovement(int AmmoIndex, int TimedExplode, int BounceTimes, float LifeTime, float BaseReloadTime, int TrajectoryType, float CustomValue);// 0x250704f39041
	void ServerSetSummonItemIgnoreBombDamage(bool bIgnore);// 0x250604f39041
	void ServerSetRoleAbilitySkillCDDurationDebugOnly(float InCD);// 0x250504f39041
	void ServerSetPlayerLevel(int InLevel);// 0x250404f39041
	void ServerSetHangUpBehavior();// 0x250304f39041
	void ServerSetFreeLook(bool bInFreeLook);// 0x250204f39041
	void ServerSetAppLifetimeState(enum NewLifeState);// 0x250104f39041
	void ServerSetActorOwner(Actor* TargetActor);// 0x250004f39041
	void ServerScreenshotProcessing(const SShotImageInfo ImageInfo);// 0x24fe04f39041
	void ServerRPCResetZoneBombsFire();// 0x24fd04f39041
	void ServerResetUniqueSkillCDDebugOnly();// 0x24fc04f39041
	void ServerRequestTransferSkydivingLeaderTo(byte PosInTeam);// 0x24fb04f39041
	void ServerRequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x24fa04f39041
	void ServerReqStartReviveItemRecycleCountDownData();// 0x24f904f39041
	void ServerPlayerUpgrade(int InLevel);// 0x24f804f39041
	void ServerPlayerResumeSettlement();// 0x24f704f39041
	void ServerPlayerRequestLogout();// 0x24f604f39041
	void ServerPlayerOutBySelf(enum InPath);// 0x24f504f39041
	void ServerPlayerGoToSettlement();// 0x24f404f39041
	void ServerNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance);// 0x24f304f39041
	void ServerNotifyPlayerHasCheatByNickName(FString NickName);// 0x24f204f39041
	void ServerNotifyPlayerHasCheat(FString SolarPlayerID);// 0x24f104f39041
	void ServerNetProfile(bool startOrStop);// 0x24f004f39041
	void ServerInitTaskInfo();// 0x24ef04f39041
	void ServerHandleTimerMessage(const byte[] TimerMessage);// 0x24ee04f39041
	void ServerGoSpectatePreviousPlayer();// 0x24ed04f39041
	void ServerGoSpectatePlayerByPlayerIdInternal(FString SolarPlayerID);// 0x24ec04f39041
	void ServerGoSpectatePlayerByPlayerId(FString SolarPlayerID);// 0x24eb04f39041
	void ServerGoSpectatePlayerByIndex_Internal(int Index);// 0x24ea04f39041
	void ServerGoSpectatePlayerByIndex(int Index);// 0x24e904f39041
	void ServerGoSpectateNextPlayer();// 0x24e804f39041
	void ServerGainExperience(int InExp);// 0x24e704f39041
	void ServerEnableCheats();// 0x24e604f39041
	void ServerCmd(FString Cmd);// 0x24e504f39041
	void ServerClearUniqueSkillCDDebugOnly();// 0x24e404f39041
	void ServerClearTeamSummonItemMark();// 0x24e304f39041
	void ServerChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x24e204f39041
	void ServerChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x24e104f39041
	void ServerChangeVehicleIntProperty(FString InPropertyName, int InFloat);// 0x24e004f39041
	void ServerChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x24df04f39041
	void ServerChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x24de04f39041
	void ServerChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x24dd04f39041
	void ServerChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x24dc04f39041
	void ServerCancelSkydivingFollow();// 0x24db04f39041
	void ServerBeginHeroPickMySelf();// 0x24da04f39041
	void SendRepliableMessageServer(const int Message);// 0x24d904f39041
	void SendRepliableMessageInMsgBucket(out const int[] MessageIDs);// 0x24d804f39041
	void SendRepliableMessageByMessageID(out const int ID);// 0x24d704f39041
	void SendQuickMessageServer(FString Message, bool bSound);// 0x24d604f39041
	void SendQuickMessageNewServer(const int VoiceType);// 0x24d504f39041
	void SendQuickMessageNewClient(FString NickName, const int VoiceType, const int CharID, const int SkinId, bool bGender, const int PosInTeam, bool bLocalPlayer, bool bShowLocMessage);// 0x24d404f39041
	void SendQuickMessageClient(FString NickName, FString Message, bool IsLocalPlayer, bool bSound, int PosInTeam);// 0x24d304f39041
	void SendLocalizationTeamMessageServer(int TextID, const LocTextParam[] TextParams, FString SoundEvent);// 0x24d204f39041
	void SendLocalizationTeamMessageNewServer(const LocTextParam[] TextParams, const int SoundID1, const int SoundDI2);// 0x24d104f39041
	void SendLocalizationTeamMessageNewClient(const int CharacterId, const int SkinId, bool bGender, const int SoundID1, FString NickName, const LocTextParam[] TextParams, int PosInTeam, const int SoundID2);// 0x24d004f39041
	void SendLocalizationTeamMessageClient(const SolarPlayerState* SenderPS, int TextID, const LocTextParam[] TextParams, FString SoundEvent, int PosInTeam);// 0x24ce04f39041
	void SendLocalizationTeamMessage(int TextID, out const <FString,int> TextParamsId, FString SoundEvent1, FString SoundEvent2);// 0x24cd04f39041
	void SendDamageTextDataNextTick(out const SolarDamageText InSolarDamageText);// 0x24cc04f39041
	void ResetJoyStickControlInput();// 0x24cb04f39041
	void ResetAllInput();// 0x24ca04f39041
	void RequestTransferSkydivingLeaderTo(byte PosInTeam);// 0x24c904f39041
	void RequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x24c804f39041
	void RequestNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance);// 0x24c704f39041
	void RecordSpectateInfoToBI(out SpectateReportInfo SpectateReportInfo);// 0x24c604f39041
	void QuickMessageLuaCall(FString Message, bool bSound);// 0x24c504f39041
	int QueryStage();// 0x24c404f39041
	void PushInputModeUIOnly(FName Name, bool bShowCursor, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0x24c304f39041
	void PushInputModeGameOnly(FName Name, bool bShowCursor);// 0x24c204f39041
	void PushInputModeGameAndUI(FName Name, bool bShowCursor, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0x24c104f39041
	void PostInputAction(FName ActionName, byte KeyEvent);// 0x24c004f39041
	void PostAkEventByName(FString EventName1, FString EventName2);// 0x24bf04f39041
	void PopInputMode(FName Name);// 0x24be04f39041
	void PlayVehicleWeakPointBrokenSound(const SolarVehicleSoundDataAsset* VehicleSoundDataAsset);// 0x24bd04f39041
	void PlayerGoToSettleMent();// 0x24bc04f39041
	void PlayerGotoLobbyWithLogout();// 0x24bb04f39041
	void PlayCustomVoiceByID(int VoiceID, bool NeedSendTeamMessage);// 0x24ba04f39041
	void PassiveTriggeredVoice(enum VoiceType);// 0x24b904f39041
	void OnVehiclePitchRotateInputDelegate__DelegateSignature(float InputValue);// 0x24b804f39041
	void OnTeamNumChangeFun(enum ChangeType, int OldValue, int NewValue);// 0x24b704f39041
	void OnTeammateHUDDodgeSet__DelegateSignature(bool bDodge);// 0x24b604f39041
	void OnSuperScaningStart(out const FString[] InScanPlayers);// 0x24b504f39041
	void OnSuperScaningRemovePlayer(FString InRemovePlayer);// 0x24b404f39041
	void OnSuperScaningEnd();// 0x24b304f39041
	void OnStopUpdateSpectateInfo(SolarSpectateInfo* SpecInfo);// 0x24b204f39041
	void OnSpectateTargetItemsChanged(SolarSpectateInfo* SpecInfo);// 0x24b104f39041
	void OnSpectateTargetChangedHandler(SolarPlayerState* OldTarget, SolarSpectateInfo* MySpecInfo);// 0x24b004f39041
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x24af04f39041
	void OnSkydivingStatusUpdated(SolarPlayerState* SelfPlayerState, bool bInIsSkydiving);// 0x24ae04f39041
	void OnShowGameNotice(const int InNoticeID, out const <FString,FString> InNoticeParams);// 0x24ad04f39041
	RotationBarMarkWidget*[] OnShowActorMarkDelegate__DelegateSignature(Actor*[] MarkActors);// 0x24ac04f39041
	void OnSeamlessTravelEnd();// 0x24ab04f39041
	void OnScopeAxisInput(float InAxisValue);// 0x24aa04f39041
	void OnReviveSelfTriggered(bool bAppear);// 0x24a904f39041
	void OnReceiveBattleEnd();// 0x24a804f39041
	void OnPutAwayWeaponPressed();// 0x24a704f39041
	void OnPlayerStateSpectateInfoRepHandler(SolarSpectateInfo* SpecInfo);// 0x24a604f39041
	void OnPlayerStateRepHandlerForSpectate(enum RepType, PlayerState* InPlayerState);// 0x24a504f39041
	void OnPawnReplicated__DelegateSignature();// 0x24a404f39041
	void OnEnterVoyageDelegate__DelegateSignature();// 0x24a304f39041
	void OnEnterLanding();// 0x24a204f39041
	void OnCustomizeLevelLoaded();// 0x24a104f39041
	void OnCleanActorMarkWithWidgetsDelegate__DelegateSignature(RotationBarMarkWidget*[] MarkWidgets);// 0x24a004f39041
	void OnCleanActorMarkWithActorsDelegate__DelegateSignature(Actor*[] MarkActors);// 0x249f04f39041
	void OnCharacterRebirthLua();// 0x249e04f39041
	void OnCharacterDeathLua();// 0x249d04f39041
	void OnCatchInputActionDelegate__DelegateSignature(FName ActionName, byte InputEventType);// 0x249c04f39041
	void OnBeginUpdateSpectateInfo(SolarSpectateInfo* SpecInfo);// 0x249b04f39041
	void OnBeforeSpectateTargetChange(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x249a04f39041
	void OnAppHasReactivated();// 0x249904f39041
	void OnAppHasDeactiveated();// 0x249804f39041
	void OnActionWheelClosed();// 0x249704f39041
	void NotifyMonsterSpawn();// 0x249604f39041
	void NotifyCrouchIsLocked();// 0x249504f39041
	void NotifyAppReactivate();// 0x249404f39041
	void NotifyAppHasDeactivate();// 0x249304f39041
	void NofityCustomizeLevelLoaded();// 0x249204f39041
	void MarkWorldInLevelLuaCall(out const WorldMarkData InWorldMarkedData);// 0x249104f39041
	void MarkWorldInLevel(const WorldMarkData InWorldMarkedData);// 0x249004f39041
	void MarkPointInNavMapLuaCall(out const Vector2D InMarkedPoint);// 0x248f04f39041
	void MarkPointInNavMap(const Vector2D InMarkedPoint, bool bFromWorldMark);// 0x248e04f39041
	void MarkOnWorldByMinimapPosition(int PosInTeam, const Vector2D MinimapPos);// 0x248d04f39041
	void MarkedAsAppHasReactivated();// 0x248c04f39041
	void MarkedAsAppHasDeactivated();// 0x248b04f39041
	void LuaShowUI(FString WidgetPath, FString UIName);// 0x248a04f39041
	void LuaCallInputTouch(uint32 Handle, byte Type, out const Vector2D TouchLocation);// 0x248804f39041
	void LookUp(float Value);// 0x248704f39041
	void LogMarkAndQuickVoice(int Type, int SubType);// 0x248604f39041
	void KickMeOutAtDS(FString InPlayerID);// 0x248504f39041
	void K2_ShowDamageText(float InDamage, out const HitResult InHitResult, Actor* InDamageSource, Controller* InAutonomousController, out const SolarPointDamageEvent InPointDamageEvent);// 0x248404f39041
	bool IsThirdPersonSpectateCameraMode();// 0x248304f39041
	bool IsSpectatingOtherPlayer();// 0x248204f39041
	bool IsMatching();// 0x248104f39041
	bool IsHasSkydiveAndEnd();// 0x248004f39041
	bool IsHasCharacterAndSkin(int CharacterId, int SkinId);// 0x247f04f39041
	void InputWorldMarkReleased();// 0x247e04f39041
	void InputWorldMarkPressed();// 0x247d04f39041
	void InputVerticalJetReleased();// 0x247c04f39041
	void InputVerticalJetPressed();// 0x247b04f39041
	void InputVehicleInteractionReleased();// 0x247a04f39041
	void InputVehicleInteractionPressed();// 0x247904f39041
	void InputUseRecommendBtnPCReleased();// 0x247804f39041
	void InputUseRecommendBtnPCPressed();// 0x247704f39041
	void InputUseMedicineReleased();// 0x247604f39041
	void InputUseMedicinePressed();// 0x247504f39041
	void InputUseMedicineOrItemWheelReleased();// 0x247404f39041
	void InputUseMedicineOrItemWheelPressed();// 0x247304f39041
	void InputToggleTertiaryWeapon_Checkbox();// 0x247204f39041
	void InputToggleSkydivingFollowRouletteTriggered();// 0x247104f39041
	void InputToggleSecondaryWeaponReleased();// 0x247004f39041
	void InputToggleSecondaryWeaponPressed();// 0x246f04f39041
	void InputToggleSecondaryWeapon_Checkbox();// 0x246e04f39041
	void InputTogglePrimaryWeaponReleased();// 0x246d04f39041
	void InputTogglePrimaryWeaponPressed();// 0x246c04f39041
	void InputTogglePrimaryWeapon_Checkbox();// 0x246b04f39041
	void InputTogglePickupReleased();// 0x246a04f39041
	void InputTogglePickupPressed();// 0x246904f39041
	bool InputTestPriority3Pressed();// 0x246804f39041
	bool InputTestPriority2Pressed();// 0x246704f39041
	bool InputTestPriority1Released();// 0x246604f39041
	bool InputTestPriority1Pressed();// 0x246504f39041
	void InputSwitchToSeatTwoPressed();// 0x246404f39041
	void InputSwitchToSeatThreePressed();// 0x246304f39041
	void InputSwitchToSeatOnePressed();// 0x246204f39041
	void InputSwitchToSeatFourPressed();// 0x246104f39041
	void InputSwitchFireModeReleased();// 0x246004f39041
	void InputSwitchFireModePressed();// 0x245f04f39041
	void InputStartRepairVehicleReleased();// 0x245e04f39041
	void InputSprintLockStart();// 0x245d04f39041
	void InputSprintFreeTerminate();// 0x245c04f39041
	void InputSprintFreeStart();// 0x245b04f39041
	void InputSprintFreeReleasedOnPC();// 0x245a04f39041
	void InputSprintFreePressedOnPC();// 0x245904f39041
	void InputSkydivingFollowRouletteSelect4();// 0x245804f39041
	void InputSkydivingFollowRouletteSelect3();// 0x245704f39041
	void InputSkydivingFollowRouletteSelect2();// 0x245604f39041
	void InputSkydivingFollowRouletteSelect1();// 0x245504f39041
	void InputSkydivingFollowRouletteSelect(int PosInTeam);// 0x245404f39041
	void InputShieldUpgradeReleased();// 0x245304f39041
	void InputShieldUpgradePressed();// 0x245204f39041
	void InputShieldUpgradeCancelReleased();// 0x245104f39041
	void InputShieldUpgradeCancelPressed();// 0x245004f39041
	void InputRightMouseButtonReleased();// 0x244f04f39041
	void InputRightMouseButtonPressed();// 0x244e04f39041
	void InputReviveSelfReleased();// 0x244d04f39041
	void InputReloadReleased();// 0x244c04f39041
	void InputReloadPressed();// 0x244b04f39041
	void InputRechargeShieldReleased();// 0x244a04f39041
	void InputRechargeShieldPressed();// 0x244904f39041
	void InputQuickAdsReleased();// 0x244804f39041
	void InputQuickAdsPressed();// 0x244704f39041
	void InputPSTouchpadButton(float InValueX);// 0x244604f39041
	void InputPickupReleased();// 0x244504f39041
	void InputPickupPressed();// 0x244404f39041
	void InputMoveRight(float InValueY);// 0x244304f39041
	void InputMovementYReceived(float InValueY);// 0x244204f39041
	void InputMovementXReceived(float InValueX);// 0x244104f39041
	void InputMoveForward(float InValueX);// 0x244004f39041
	void InputMapPressed();// 0x243f04f39041
	void InputLeftFireReleased();// 0x243e04f39041
	void InputLeftFirePressed();// 0x243d04f39041
	void InputKeepSprintPressed();// 0x243c04f39041
	void InputJumpReleased();// 0x243b04f39041
	void InputJumpPressed();// 0x243a04f39041
	void InputItemActionWheelReleased();// 0x243904f39041
	void InputItemActionWheelPressed();// 0x243804f39041
	void InputInteractPressed();// 0x243704f39041
	void InputInteractAndReloadReleased();// 0x243604f39041
	void InputInteractAndReloadPressed();// 0x243504f39041
	void InputHorizontalJetReleased();// 0x243404f39041
	void InputHorizontalJetPressed();// 0x243304f39041
	void InputGunsightReleased();// 0x243204f39041
	void InputGunsightPressed();// 0x243104f39041
	void InputGetOnVehicleReleased();// 0x243004f39041
	void InputGetOffVehicleReleased();// 0x242f04f39041
	void InputFreeLookReleased();// 0x242e04f39041
	void InputFreeLookPressed();// 0x242d04f39041
	void InputFireReleased();// 0x242c04f39041
	void InputFirePressed();// 0x242b04f39041
	void InputEquip2Released();// 0x242a04f39041
	void InputEquip2Pressed();// 0x242904f39041
	void InputEquip1Released();// 0x242804f39041
	void InputEquip1Pressed();// 0x242704f39041
	void InputEmoteActionWheelReleased();// 0x242604f39041
	void InputEmoteActionWheelPressed();// 0x242504f39041
	void InputEjectReleased();// 0x242404f39041
	void InputEjectPressed();// 0x242304f39041
	void InputDriveVehicleReleased();// 0x242204f39041
	void InputCrouchReleased();// 0x242104f39041
	void InputCrouchPressed();// 0x242004f39041
	void InputCancelSkydivingFollowingTriggered();// 0x241f04f39041
	void InputCancelActionReleased();// 0x241e04f39041
	void InputCancelActionPressed();// 0x241d04f39041
	void InputBuilding();// 0x241c04f39041
	void InputBigRechargeShieldReleased();// 0x241b04f39041
	void InputBigRechargeShieldPressed();// 0x241a04f39041
	void InputBackpackReleased();// 0x241904f39041
	void InputBackpackPressed();// 0x241804f39041
	void InputAltFireReleased();// 0x241704f39041
	void InputAltFirePressed();// 0x241604f39041
	void InputActionWheelPreviousPage();// 0x241504f39041
	void InputActionWheelNextPage();// 0x241404f39041
	void InputActionWheelExec();// 0x241304f39041
	void InputActionWheelCancel();// 0x241204f39041
	bool IfSolarCharacterIsDriver();// 0x241104f39041
	bool HasSkin(int InSkinID);// 0x241004f39041
	void HandleBeginSpectateRequest();// 0x240f04f39041
	void GyroscopeTilt(Vector Tilt);// 0x240e04f39041
	void GyroscopeRotationRate(Vector RotationRate);// 0x240d04f39041
	SolarCharacter* GetViewportFocusedCharacter(bool bReturnPossessedCharacterIfSpectateNull);// 0x240c04f39041
	Vector2D GetViewportCenter();// 0x240b04f39041
	Rotator GetSpectateTargetRotation();// 0x240a04f39041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x240904f39041
	SolarSpectateInfo* GetSpectateInfo();// 0x240804f39041
	SolarCharacter* GetSpectatedCharacter();// 0x240704f39041
	SolarPlayerState* GetSolarViewPlayerState();// 0x240604f39041
	SolarPlayerState* GetSolarPlayerState();// 0x240504f39041
	SolarCharacter* GetSolarCharacter();// 0x240404f39041
	enum GetPlayNetStateInGame();// 0x240304f39041
	Rotator GetPlayerViewRotation(bool bWithoutCameraModifiers, bool bWithRotationInput);// 0x240204f39041
	Vector GetPlayerViewLocation(bool bWithoutCameraModifiers, bool bWithRotationInput);// 0x240104f39041
	PlayerStatisticsData* GetPlayerStatData();// 0x240004f39041
	FString GetPlayerID();// 0x23ff04f39041
	FString GetNoticeLocalText(int InNoticeID, out const <FString,FString> InNoticeParams);// 0x23fe04f39041
	byte GetMyTeamID();// 0x23fd04f39041
	byte GetMyPosInTeam();// 0x23fc04f39041
	Vector2D GetMyMarkedPointInNavMap();// 0x23fb04f39041
	int GetMultiKillNum();// 0x23fa04f39041
	int GetKillNum();// 0x23f904f39041
	int GetKillingSpreesNum();// 0x23f804f39041
	bool GetIsDropAndPickUpItemOrWeaponSwitchOnValue();// 0x23f704f39041
	SolarInputModePolicyComponent* GetInputModePolicyComp();// 0x23f604f39041
	SolarInputModeDataBase GetInputMode(FName Name, out enum OutInputMode, out bool bFound);// 0x23f304f39041
	SolarCameraComponent* GetCurrentCameraComponent();// 0x23f204f39041
	void GetControlledVehiclePropertyContainer(out Object*[] OutObjects);// 0x23f104f39041
	Rotator GetCharacterViewRotation();// 0x23f004f39041
	Rotator GetCameraRotation();// 0x23ef04f39041
	Vector GetCameraLocation();// 0x23ee04f39041
	SolarCharacter* GetCameraFocusedCharacter();// 0x23ed04f39041
	float GetCameraDefaultFOVAngle();// 0x23ec04f39041
	float GetCameraCurrentFOVAngle();// 0x23eb04f39041
	SolarCameraComponent* GetActiveCamera();// 0x23ea04f39041
	void ForceCompleteClientBlendToSpectateTarget();// 0x23e904f39041
	void ExcludeDifferentTeam(int TeamID);// 0x23e804f39041
	void EndOBCurrentBattle();// 0x23e704f39041
	void DropPassengerNotification();// 0x23e604f39041
	void DestroyCharacterCorpse();// 0x23e504f39041
	void DebugUpdateTask();// 0x23e404f39041
	void DebugSetPlayerData();// 0x23e304f39041
	void DebugInitTask();// 0x23e204f39041
	void CustomModeShowNotice(const int InType, const int InNoticeID, class Object InClass, const float InTime, FString InText, Object* InIcon, const int InNoticeColor);// 0x23e104f39041
	void CustomAntiCheatDataExport(out const FString[] DataName, out const FString[] DataContent);// 0x23e004f39041
	void ControlsSwitchWeaponByOrder();// 0x23df04f39041
	void ClientSyncPlayerSelfReport(const SolarPlayerReport SelfReport, const SolarGameModeInfo GameInfo);// 0x23de04f39041
	void ClientStartReviveItemRecycleCountDown(const int CurrentTime, const int DurationTime);// 0x23dd04f39041
	void ClientShowUI(FString WidgetPath, FString UIName);// 0x23dc04f39041
	void ClientShowDiePage();// 0x23db04f39041
	void ClientScreenshotTask(const ScreenshotSetting Setting);// 0x23d804f39041
	void ClientReviveWillBeDisabledHint(const int Duration);// 0x23d704f39041
	void ClientReviveBeDisabledHint();// 0x23d604f39041
	void ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving(SolarPlayerState* NewLeaderPlayerState, SolarPlayerState* OldLeaderPlayerState);// 0x23d504f39041
	void ClientReceviceDamageText(const SolarDamageText[] InSolarDamageTextDatas);// 0x23d304f39041
	void ClientRaiseScreenshotJob(enum ShotMoment);// 0x23d104f39041
	void ClientPlayerGoToSettlement(const SolarPlayerReport[] Reports, const SolarGameModeInfo GameInfo, const int[] InSettlementPageIndexs, bool IsCustomRoom);// 0x23ce04f39041
	void ClientPlayerActivityHeatUpdate(const ReplayActivityHeatFragment ActivityHeatFragment);// 0x23c904f39041
	void ClientNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter);// 0x23c804f39041
	void ClientNotifyCheatedPlayer(const FText OutReason);// 0x23c704f39041
	void ClientNotifyAbnormalPlayer(const FText OutReason);// 0x23c604f39041
	void ClientHandleTimerMessage(const byte[] TimerMessage);// 0x23c504f39041
	void ClientEnableAiPalComponent(int Rate);// 0x23c404f39041
	void ClientDoCharacterOperation(const CharacterOperationEvent ChOperationEvt);// 0x23c304f39041
	void ClientCloseUI(FString UIName);// 0x23c204f39041
	void ClientClearTeamSummonItemMark();// 0x23c104f39041
	void ClientClearAudioListenerOverride();// 0x23c004f39041
	void ClientCharacterIsDead();// 0x23bf04f39041
	void ClientBeginOBCurrentBattleInternal();// 0x23be04f39041
	void ClearWorldMarkCachedData();// 0x23bd04f39041
	void ClearMarkedPointInNavMapLuaCall();// 0x23bc04f39041
	void ClearMarkedPointInNavMap();// 0x23bb04f39041
	void ChangeVehicleVectorPropertyInternal(FString InPropertyName, float InX, float InY, float InZ);// 0x23ba04f39041
	void ChangeVehicleRotatorPropertyInternal(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x23b904f39041
	void ChangeVehicleIntPropertyInternal(FString InPropertyName, int InFloat);// 0x23b804f39041
	void ChangeVehicleFreeLookState(bool bInFreeLook);// 0x23b704f39041
	void ChangeVehicleFloatPropertyInternal(FString InPropertyName, float InFloat);// 0x23b604f39041
	void ChangeVehicleCurvePropertyInternal(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x23b504f39041
	void ChangeVehicleBoolPropertyInternal(FString InPropertyName, bool InBool);// 0x23b404f39041
	bool CanWorldMark();// 0x23b304f39041
	bool CanSolarCharacterLaunchJetPack();// 0x23b204f39041
	bool CanSolarCharacterInput();// 0x23b104f39041
	bool CanSolarCharacterCrouch();// 0x23b004f39041
	void CancelSkydivingFollow();// 0x23af04f39041
	void BuildSkydivingFollowOnLeavingTeam(bool bIgnoreNotification);// 0x23ae04f39041
	void BuildSkydivingFollowOnEnteringTeam();// 0x23ad04f39041
	void BindDelegatesDependGameState();// 0x23ac04f39041
	void BeginOBCurrentBattle();// 0x23ab04f39041
	void BackToLobby();// 0x23aa04f39041
	void AssembleCustomAntiCheatData(SolarWeapon* ActiveWeapon, SolarVehiclePawn* BoardedVehicle);// 0x23a904f39041
	void AntiCheatDataSchedulerUpload(const FString[] DataName, const FString[] DataContent, const FixedAntiCheatData FixedData);// 0x23a604f39041
	void AddTeammateCandidate(SolarCharacter* Candidate, int TeamID);// 0x23a504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	void SolarChangeStandardScreenSize(int SizeX, int SizeY);// 0x23a404f39041
	IntPoint GetMobileStandardScreenSize();// 0x23a304f39041
	IntPoint GetCustomStandardScreenSize();// 0x23a204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RepCountdownData
	int RepTimes;//[Offset: 0x0, Size: 0x4]
	int RepTextID;//[Offset: 0x4, Size: 0x4]
	int RepPassiveTextID;//[Offset: 0x8, Size: 0x4]
	int RepPassiveCharacterID;//[Offset: 0xc, Size: 0x4]
	float RepDuration;//[Offset: 0x10, Size: 0x4]
	float RepRemaining;//[Offset: 0x14, Size: 0x4]
	float RepAmount;//[Offset: 0x18, Size: 0x4]
	float RepStartTime;//[Offset: 0x1c, Size: 0x4]
	float RepEndTime;//[Offset: 0x20, Size: 0x4]
	int RepCancel;//[Offset: 0x24, Size: 0x4]
	float RemainingTime;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PointerToUberGraphFrame
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputManager.ActorComponent.Object
	SolarPlayerSensitivitys* SenSetting;//[Offset: 0xc8, Size: 0x8]
	TouchHandler TouchHandler;//[Offset: 0x108, Size: 0x180]
	void SetTouchScaler(float InVal);// 0x534c04f39041
	void SetNoiseThresholdFactor(float InVal);// 0x534b04f39041
	void SetMouseScaler(Vector2D InVal);// 0x534a04f39041
	void SetMinNoiseMultiplier(float InVal);// 0x534904f39041
	void SetCurveVerticalFix(Vector2D InVec);// 0x534804f39041
	void SetCurveVerticalFactor(Vector2D InVec);// 0x534704f39041
	void SetCurveHorizonFix(Vector2D InVec);// 0x534604f39041
	void SetCurveHorizonFactor(Vector2D InVec);// 0x534504f39041
	void OnCacheNeedUpdate();// 0x534404f39041
	float GetTouchScaler();// 0x534304f39041
	Vector2D GetTouchOutputScale();// 0x534204f39041
	float GetNoiseThresholdFactor();// 0x534104f39041
	Vector2D GetMouseScaler();// 0x534004f39041
	float GetMinNoiseMultiplier();// 0x533f04f39041
	Vector2D GetFixedOutput();// 0x533e04f39041
	Vector2D GetDeltaMove();// 0x533d04f39041
	Vector2D GetCurveVerticalFix();// 0x533c04f39041
	Vector2D GetCurveVerticalFactor();// 0x533b04f39041
	Vector2D GetCurveHorizonFix();// 0x533a04f39041
	Vector2D GetCurveHorizonFactor();// 0x533904f39041
	Vector2D GetAverageDeltaMove();// 0x533804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerSensitivitys.Object
	void InitPlayerSensitivity();// 0x56ce04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TouchHandler.InputHandler
	CurveFloat* HorizCurve;//[Offset: 0x98, Size: 0x8]
	CurveFloat* VertCurve;//[Offset: 0xa0, Size: 0x8]
	CurveFloat* DistHorizCurve;//[Offset: 0xd0, Size: 0x8]
	CurveFloat* DistVertCurve;//[Offset: 0xd8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputHandler
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeapon.Actor.Object
	delegate OnWeaponUnhold;//[Offset: 0x350, Size: 0x10]
	WeaponMechanicalState WeaponState;//[Offset: 0x360, Size: 0x50]
	enum PrimaryShootingOption;//[Offset: 0x3b1, Size: 0x1]
	ImpactDisplayInfo ImpactInfo;//[Offset: 0x3b4, Size: 0x10]
	enum DefaultDamageType;//[Offset: 0x3d0, Size: 0x1]
	SolarVirtualBulletCollector* VirtualBulletCollector;//[Offset: 0x3d8, Size: 0x8]
	enum OverloadState;//[Offset: 0x3f8, Size: 0x1]
	float OverloadAccum;//[Offset: 0x3fc, Size: 0x4]
	CurveFloat* OverloadCurve;//[Offset: 0x410, Size: 0x8]
	float GatlingRollSpeed;//[Offset: 0x41c, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x420, Size: 0x4]
	float GatlingRollSpeedInterp;//[Offset: 0x424, Size: 0x4]
	int GatlingRepState;//[Offset: 0x428, Size: 0x4]
	float FireChargingTime;//[Offset: 0x448, Size: 0x4]
	int FireChargingPhase;//[Offset: 0x44c, Size: 0x4]
	float FireChargingSumTime;//[Offset: 0x450, Size: 0x4]
	float ChargeAnimationRate;//[Offset: 0x45c, Size: 0x4]
	class GameplayEffect* ChargingEffect;//[Offset: 0x460, Size: 0x8]
	AbilitySystemComponent* OwnerGAS;//[Offset: 0x470, Size: 0x8]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x480, Size: 0x8]
	FireMode[] FireModes;//[Offset: 0x490, Size: 0x10]
	Actor* WeaponHolder;//[Offset: 0x4a0, Size: 0x8]
	SolarCharacterBase* ControlWeaponCharacter;//[Offset: 0x4a8, Size: 0x8]
	GameplayAbilitySpecHandle[] EquippedAbilityHandles;//[Offset: 0x4b0, Size: 0x10]
	SolarCharacterBase* OldControlWeaponCharacter;//[Offset: 0x4c8, Size: 0x8]
	Actor* AimTarget;//[Offset: 0x4d0, Size: 0x8]
	class SolarWeaponProjectileSpline* ProjSplineClass;//[Offset: 0x4d8, Size: 0x8]
	SolarWeaponProjectileSpline* ProjSpline;//[Offset: 0x4e0, Size: 0x8]
	enum[] ShootingOptArray;//[Offset: 0x4e8, Size: 0x10]
	bool bShowSpecialEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	SingleWeaponConfig* Config;//[Offset: 0x500, Size: 0x8]
	Texture2D* WeaponIcon;//[Offset: 0x508, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfig;//[Offset: 0x510, Size: 0x8]
	int weaponid;//[Offset: 0x518, Size: 0x4]
	bool bTeamDamageEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 0x1]
	bool bInfinitePackageAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 0x1]
	int ExtraAmmo;//[Offset: 0x528, Size: 0x4]
	<ParticleSystem*,ParticleLoopListener*> LoopParticlesMap;//[Offset: 0x530, Size: 0x50]
	int ClipRemainAmmoCount;//[Offset: 0x580, Size: 0x4]
	<enum,WeaponAnimationInfo> WeaponAnimationMap;//[Offset: 0x588, Size: 0x50]
	bool bResetMuzzleIndexWhenStopFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	bool bResetMuzzleIndexAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 0x1]
	CameraShakeData[] WeaponFireCameraShakes;//[Offset: 0x5e8, Size: 0x10]
	CameraShakeData[] WeaponScopeFireCameraShakes;//[Offset: 0x5f8, Size: 0x10]
	CameraShakeData[] UsingSkillCameraShakes;//[Offset: 0x608, Size: 0x10]
	CameraShakeData[] WeaponChargingCameraShakes;//[Offset: 0x618, Size: 0x10]
	bool bUseEmptyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629, Size: 0x1]
	SoftObjectPath FightMeshPath;//[Offset: 0x630, Size: 0x18]
	SkeletalMeshComponent* Mesh;//[Offset: 0x648, Size: 0x8]
	SkeletalMesh* OriginalMesh;//[Offset: 0x650, Size: 0x8]
	class WeaponAnimInstance* OriginalAnimBP;//[Offset: 0x658, Size: 0x8]
	SolarAkGameObject* SolarAkGameObjectPrivate;//[Offset: 0x660, Size: 0x8]
	int SoundFireAutoCount;//[Offset: 0x668, Size: 0x4]
	bool bTriggerSoundFireAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1]
	int OldSoundFireAutoCount;//[Offset: 0x670, Size: 0x4]
	bool bTriggerSoundB9A04Skill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 0x1]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x675, Size: 0x1]
	int SkillFireCount;//[Offset: 0x678, Size: 0x4]
	int SingleFireCount;//[Offset: 0x67c, Size: 0x4]
	int FireOverloadCount;//[Offset: 0x680, Size: 0x4]
	int FireLastCount;//[Offset: 0x684, Size: 0x4]
	OverrideBulletStruct OverrideBullet;//[Offset: 0x6e8, Size: 0x18]
	bool bLoadInitAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]
	bool bLoadAllCfgAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x701, Size: 0x1]
	<FireUniqueID,float> FireHitVerifyMap;//[Offset: 0x708, Size: 0x50]
	bool bDetectedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 0x1]
	ParticleSystemComponent*[] GatlingOverHeatPSCs;//[Offset: 0x768, Size: 0x10]
	bool bTracingAimTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 0x1]
	MaterialInterface* SpecialFireChargeMaterial;//[Offset: 0x788, Size: 0x8]
	<int,Color> SpecialFireChargeColorMap;//[Offset: 0x790, Size: 0x50]
	bool bPerspectiveForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1]
	enum CurrentSpreadState;//[Offset: 0x800, Size: 0x1]
	int ContinuousAddSpreadByFireCount;//[Offset: 0x804, Size: 0x4]
	bool bLastAddSpreadByFireIsHipFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 0x1]
	int8 LastAddSpreadByFireFireMode;//[Offset: 0x809, Size: 0x1]
	float LastAddSpreadByFireTime;//[Offset: 0x80c, Size: 0x4]
	float SpreadPrepareTimer;//[Offset: 0x810, Size: 0x4]
	float PendingBaseSpread;//[Offset: 0x814, Size: 0x4]
	float TargetBaseSpread;//[Offset: 0x818, Size: 0x4]
	float PendingAddSpread;//[Offset: 0x81c, Size: 0x4]
	float TargetAddSpread;//[Offset: 0x820, Size: 0x4]
	HitResult AimHitResult;//[Offset: 0x880, Size: 0x88]
	void WeaponStateOnRepReload();// 0x56a604f39041
	int WeaponPostAkEventByName(FString InEventName1);// 0x56a504f39041
	bool VerifyLastClipAmmo(int InFireModeType, int InLastClipAmmo);// 0x56a404f39041
	bool UseEnergy(int Mode);// 0x56a304f39041
	bool TryHitOperation(out const FireUniqueID FireUniqueID, const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, const float DamageScale, out const BulletHitDetailData HitDetailData, const bool IsNotDelay);// 0x56a204f39041
	void StopVibrate();// 0x56a104f39041
	void StopSoundDelay(const float DelayTime);// 0x56a004f39041
	void StopSound(enum Opt, int idx);// 0x569f04f39041
	void StopGatlingSound();// 0x569e04f39041
	void StartSound(enum Opt, int idx);// 0x569d04f39041
	void StartAsyncLoading();// 0x569c04f39041
	SolarProjBullet* SpawnProjWithFireID(out const SpawnBulletParam Param, out const FireUniqueID FireID, const bool Local);// 0x569b04f39041
	void ShowSpecialEffect(bool bShow);// 0x569a04f39041
	void SetWeaponAnimState(enum InWeaponAnimState);// 0x569904f39041
	void SetReservedAmmoForce(int InFireModeType, int InAmount);// 0x569804f39041
	void SetPrimaryShootingOption(enum Opt);// 0x569704f39041
	void SetLastFireTime(int InFireModeType, float InFireTime);// 0x569604f39041
	void ServerWeaponSound(const enum Opt, const bool TriggerSound);// 0x569504f39041
	void ServerVirtualBulletShotHit(const SolarVirtualBulletHitParameter[] AllHitParams, Pawn* SourcePawn);// 0x569404f39041
	void ServerVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter, float InTimestamp);// 0x569304f39041
	void ServerUpdateMechanicalState(enum NewMechanicalState, enum NewSubFlags);// 0x569204f39041
	void ServerUpdateGatlingRepState(int InState);// 0x569104f39041
	void ServerSpawnProjWithVelocity(const SpawnProjParam Param);// 0x569004f39041
	void ServerSpawnProjWithFireID(const SpawnBulletParam Param, const FireUniqueID FireID);// 0x568f04f39041
	void ServerSetTracingAimTarget(bool InbTracingAimTarget);// 0x568e04f39041
	void ServerSetPrimaryOption(const enum Opt);// 0x568d04f39041
	void ServerSetHipFire(const bool InbHipFire);// 0x568c04f39041
	void ServerResetFireCount();// 0x568b04f39041
	void ServerRequestDropWeapon();// 0x568a04f39041
	void ServerPlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength);// 0x568904f39041
	void ServerInstantLineShot(const byte ModeIndex, const Vector_NetQuantize Start, const Vector_NetQuantize End, const float DamageScale, const MutiBulletHitData HitData);// 0x568804f39041
	void ServerFireChargeShoot(const AmmoConfig* InAmmo, const int8 InFireChargingPhase, int InFireChargingTime);// 0x568704f39041
	void ServerFireChargePhaseChange(const int8 InFireChargingPhase);// 0x568604f39041
	void ServerChangeOverloadState(const enum InState);// 0x568504f39041
	void ServerCanisterShot(const Vector_NetQuantize Start, const Vector_NetQuantize End, const MutiBulletHitData HitData);// 0x568404f39041
	void ServerAddExpWithReason(int InExp, int InReasonID);// 0x568304f39041
	void RuntimeUpdateData(int Cmd, FString Params);// 0x568204f39041
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0x568104f39041
	void ReceiveChargingState(const int Index, const enum State);// 0x568004f39041
	void PrimaryCost();// 0x567f04f39041
	void PlayVibrate(enum InType);// 0x567e04f39041
	void PlayReloadRestoreVibrate();// 0x567d04f39041
	void PlayReloadGetOldVibrate();// 0x567c04f39041
	void PlayFireVibrate();// 0x567b04f39041
	void PlayChargeVibrate();// 0x567a04f39041
	void PlayBulletHitEffect(out const HitResult HitResult, SolarBullet* Bullet, bool bForce, Pawn* HitCauser, float HitEffectScale);// 0x567904f39041
	void PlayBoltVibrate();// 0x567804f39041
	void PlayAutoSingleSound();// 0x567704f39041
	void PlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength, bool bNeedNetMulticast, int AnimCount);// 0x567604f39041
	void OnRep_WeaponState();// 0x567504f39041
	void OnRep_TracingAimTarget();// 0x567404f39041
	void OnRep_SoundFireSkillCast();// 0x567304f39041
	void OnRep_SoundFireSingle();// 0x567204f39041
	void OnRep_SoundFireOverload();// 0x567104f39041
	void OnRep_SoundFireLast();// 0x567004f39041
	void OnRep_SoundFireBurst();// 0x566f04f39041
	void OnRep_SoundFireAutoCount();// 0x566e04f39041
	void OnRep_SoundB9A04Skill();// 0x566d04f39041
	void OnRep_OverloadStateChange(enum PreviousState);// 0x566c04f39041
	void OnRep_ImpactPosition();// 0x566b04f39041
	void OnRep_FireModes();// 0x566a04f39041
	void OnRep_FireChargingPhase(int InOldFireChargingPhase);// 0x566904f39041
	void OnRep_ExtraAmmo();// 0x566804f39041
	void OnRep_ControlWeaponCharacterChanged(SolarCharacterBase* OldCharacter);// 0x566704f39041
	void OnRep_ClipRemainAmmoCount(int LastClipRemainAmmoCount);// 0x566604f39041
	void OnPlayMuzzleEffect();// 0x566504f39041
	void OnLoadInitAssetComplete();// 0x566404f39041
	void OnLoadCfgAssetsComplete();// 0x566304f39041
	void OnInternalUnControlled();// 0x566204f39041
	void OnInternalControlled(SolarCharacterBase* OwnerChar);// 0x566104f39041
	void OnInstantLineShotHit(out const HitResult InHit, const float DamageScale);// 0x566004f39041
	void OnInitFlowComplete();// 0x565f04f39041
	void OnGatlingRollChange(bool bIncrease);// 0x565e04f39041
	void OnFireChargeBurstCountChange(int BurstSum);// 0x565d04f39041
	enum NextShootingPrimaryOption();// 0x565c04f39041
	void LuaStopSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x565b04f39041
	void LuaStartSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x565a04f39041
	void LoadInitAsset();// 0x565904f39041
	void LoadAllCfgAssets();// 0x565804f39041
	AmmoConfig* K2_GetOverrideAmmoConfigBase(int ModeIndex);// 0x565704f39041
	SingleWeaponConfig* K2_GetCurrentConfig();// 0x565604f39041
	bool IsVisible();// 0x565504f39041
	bool IsShowCoolDownWidget();// 0x565404f39041
	bool IsShotAimEnemy();// 0x565304f39041
	bool IsScopeOpen();// 0x565204f39041
	bool IsOpenedScope();// 0x565104f39041
	bool IsHipFire();// 0x565004f39041
	bool IsEnergyID(const int BulletItemID);// 0x564f04f39041
	bool IsControlled();// 0x564e04f39041
	bool IsCanFire();// 0x564d04f39041
	ParticleSystemComponent* InternalPlayEffectAttached(ParticleSystem* PS, SceneComponent* AttachToComponent, FName AttachPointName, AttachedEffectParam Param);// 0x564c04f39041
	ParticleSystemComponent* InternalPlayEffectAtLocation(const Object* WorldContext, ParticleSystem* PS, out const Vector Location, LocationEffectParam Param, bool bUseDistScale);// 0x564b04f39041
	void InternalClientPlayFiringEffects();// 0x564a04f39041
	bool InSameTeam();// 0x564904f39041
	void InitConfigs();// 0x564804f39041
	bool ImmediatelyFire(int idx, const bool bEnable);// 0x564704f39041
	bool HasLoadInitAsset();// 0x564604f39041
	bool HasLoadAllCfgAssets();// 0x564504f39041
	bool HasInitConfigs();// 0x564404f39041
	enum GetWeaponType();// 0x564304f39041
	FString GetWeaponTextType();// 0x564204f39041
	uint32 GetWeaponNoticeID(out const FName InNoticeType);// 0x564104f39041
	int GetWeaponLevel();// 0x564004f39041
	int GetWeaponID();// 0x563f04f39041
	Texture2D* GetWeaponIcon();// 0x563e04f39041
	enum GetWeaponBrand();// 0x563d04f39041
	AnimMontage* GetWeaponAnimSequence(const enum InMontageType);// 0x563c04f39041
	WeaponAnimationInfo GetWeaponAnimationInfo(const enum InMontageType);// 0x563b04f39041
	SlateBrush GetTriggerIcon(const int InFireModeType);// 0x563a04f39041
	int GetSpareAmmo(int InFireModeType);// 0x563904f39041
	float GetSoundRTPCValue();// 0x563804f39041
	SolarAkGameObject* GetSolarAkGameObject();// 0x563704f39041
	int GetSkinID();// 0x563604f39041
	float GetShotGunSpreadSeed();// 0x563504f39041
	Vector GetShotDir(bool NeedSpread);// 0x563404f39041
	Vector GetShootingTraceStartLocation();// 0x563304f39041
	FString GetShootingPrimaryShootingOptionName(const enum Opt);// 0x563204f39041
	int GetReservedAmmo(int idx);// 0x563104f39041
	float GetReloadProgress();// 0x563004f39041
	int GetPrimaryShootingOptionIndex();// 0x562f04f39041
	float GetPostFireDuration(int idx);// 0x562e04f39041
	WeaponPartsComponent* GetPartsComponent();// 0x562d04f39041
	float GetOverloadPercent();// 0x562c04f39041
	float GetOverloadMaxValue();// 0x562b04f39041
	SolarWeaponProjectileSpline* GetOrCreateWeaponProjectileSpline();// 0x562a04f39041
	int GetMaxAmmo(int idx, bool bWithExtraAmmoByChaAbility);// 0x562904f39041
	float GetLastFireTime(int InFireModeType);// 0x562804f39041
	bool GetIsVehicleMounted();// 0x562704f39041
	bool GetIsSupportSecondaryFire();// 0x562604f39041
	bool GetIsSupportAutoFire();// 0x562504f39041
	bool GetIsSupportAssistAim();// 0x562404f39041
	bool GetIsQuickScope();// 0x562304f39041
	bool GetIsCoolDown(int Mode);// 0x562204f39041
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x562104f39041
	int GetFireModeNameLocalizationID(int InFireModeType);// 0x562004f39041
	float GetFireInterval(int idx);// 0x561f04f39041
	void GetFireChargeInfo(out int OutChargingPhase, out float OutChargingTime, out float OutRate, out FireChargeData OutChargeData);// 0x561e04f39041
	float GetFireCD(int idx);// 0x561d04f39041
	ParticleSystem* GetDedicatedKillEffect();// 0x561c04f39041
	SoftObjectPath GetDedicatedDissolvedDeathFXPath();// 0x561b04f39041
	class ActorEffect GetDedicatedDissolvedDeathActorEffectClass();// 0x561a04f39041
	WeaponDebugFlag GetDebugFlag();// 0x561904f39041
	int GetCurScopeType();// 0x561804f39041
	enum GetCurrentShootingPrimaryOption();// 0x561704f39041
	enum GetCurrentScopeType();// 0x561604f39041
	FireChargeData GetCurrentFireChargeData(const AmmoConfig* InAmmo);// 0x561504f39041
	AmmoConfig* GetCurrentFireChargeAmmoData(const AmmoConfig* InAmmo);// 0x561404f39041
	int GetCurrentClipAmmo(int InFireModeType);// 0x561304f39041
	bool GetCurrentChargeModePercent(int InFireModeType, out int OutChargeMode, out float OutChargePercent);// 0x561204f39041
	int GetCostPerAttack();// 0x561104f39041
	SolarCharacterBase* GetControlWeaponCharacter();// 0x561004f39041
	float GetChargingPercent(int idx);// 0x560f04f39041
	void GetBulletHitEffectRot(out const HitResult HitResult, const SolarBullet* Bullet, out Rotator TargetPos, const bool bIsHittedShield);// 0x560e04f39041
	void GetBulletHitEffectPos(out const HitResult HitResult, out Vector TargetRot, float Offset);// 0x560d04f39041
	SolarBullet* GetBulletDefaultObject(const int idx, const AmmoConfig* AmmoCfg);// 0x560c04f39041
	class SolarBullet GetBulletClass(const int idx, const AmmoConfig* AmmoCfg);// 0x560b04f39041
	float GetBotAIDamageFactor();// 0x560a04f39041
	enum GetAmmoTriggerType(const int fireModeType);// 0x560904f39041
	int GetAmmoItemID(int idx);// 0x560804f39041
	bool GetAllInitAssetPath(out SoftObjectPath[] PathArray);// 0x560704f39041
	bool GetAllCfgAssetsPath(out SoftObjectPath[] PathArray);// 0x560604f39041
	AkComponent* GetAkComponent();// 0x560504f39041
	void GetAimStartEnd(const AmmoConfig* InAmmo, out Vector OutStart, out Vector OutEnd, out Actor* OutTargetActor, bool NeedSpread);// 0x560404f39041
	bool FireVerify_Location(const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x560304f39041
	bool FireVerify_EffectRange(const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x560204f39041
	bool FireVerify_Block(const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x560104f39041
	bool FireValidate(const int idx, const float InLastShootTime);// 0x560004f39041
	enum FindMontageKeyFromWeaponAnim(const AnimMontage* InAnimation);// 0x55ff04f39041
	void EnterOverloadState();// 0x55fe04f39041
	void DestroyWeaponProjectileSpline();// 0x55fd04f39041
	void ClientVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter);// 0x55fc04f39041
	void ClientPlayFiringEffects();// 0x55fb04f39041
	void ClientPlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength);// 0x55fa04f39041
	void ClientNotifyUpdateReservedAmmoForce(int InFireModeType, int InAmount);// 0x55f904f39041
	void ClientInstantLineShot(const byte ModeIndex, const HitResult[] HitResults, const Vector_NetQuantize End, const float DamageScale);// 0x55f804f39041
	void ClientFireChargeShoot(const AmmoConfig* InAmmo, const int8 InFireChargingPhase, int InFireChargingTime);// 0x55f704f39041
	void ClientCanisterShot(const Vector_NetQuantize Start, const WeaponShotHitResult[] ValidHits, const Vector_NetQuantize Target);// 0x55f604f39041
	void ClearFireHitVerify();// 0x55f504f39041
	bool CheckOpenParticleOptimization(int Bias);// 0x55f404f39041
	bool CanOverload();// 0x55f304f39041
	bool CanCauseTeamDamage();// 0x55f204f39041
	float CalcScale(out const FireMode Mode);// 0x55f104f39041
	int CalcCost(out const FireMode Mode);// 0x55f004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FireUniqueID
	uint32 Data;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BulletHitDetailData
	Pawn* SourcePawn;//[Offset: 0x0, Size: 0x8]
	Actor* HitActor;//[Offset: 0x8, Size: 0x8]
	PrimitiveComponent* HitComponent;//[Offset: 0x10, Size: 0x8]
	Vector HitActorLocation;//[Offset: 0x18, Size: 0xc]
	Vector HitLocation;//[Offset: 0x24, Size: 0xc]
	Vector HitNormal;//[Offset: 0x30, Size: 0xc]
	FName HitBone;//[Offset: 0x3c, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x44, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpawnBulletParam
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float SpeedScale;//[Offset: 0x18, Size: 0x4]
	int Mode;//[Offset: 0x1c, Size: 0x4]
	bool TriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float Scale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	bool bStartBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponMechanicalState
	enum UniqueState;//[Offset: 0x0, Size: 0x1]
	enum SideFlags;//[Offset: 0x4, Size: 0x4]
	SolarWeapon* Weapon;//[Offset: 0x10, Size: 0x8]
	SingleWeaponConfig* Config;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SingleWeaponConfig.DataAsset.Object
	WeaponDebugFlag DebugFlag;//[Offset: 0x30, Size: 0x4]
	enum WeaponBrand;//[Offset: 0x34, Size: 0x1]
	enum WeaponType;//[Offset: 0x35, Size: 0x1]
	bool bSupportSecondaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	<FString,float> CharacterStateWeightMap;//[Offset: 0x38, Size: 0x50]
	MoveSpeedReduceCurveConfig[] MoveSpeedReduceCurveConfigs;//[Offset: 0x88, Size: 0x10]
	float MoveSpeedReduceBonusInHipFire;//[Offset: 0x98, Size: 0x4]
	float MoveSpeedReduceBonusInAdsHipFire;//[Offset: 0x9c, Size: 0x4]
	SolarWeaponFireSocketData[] FireSockets;//[Offset: 0xa0, Size: 0x10]
	bool bIsSingleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bCanSuspendBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	bool bIsHeavyFireWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1]
	bool bIsFlamethrowerWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 0x1]
	bool bSupportSingleShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool bSupportAutoShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	bool bSupportBurstShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]
	float MaxSpread;//[Offset: 0xb8, Size: 0x4]
	float MinSpread;//[Offset: 0xbc, Size: 0x4]
	float HipFireBaseSpread;//[Offset: 0xc0, Size: 0x4]
	float ShoulderFireBaseSpread;//[Offset: 0xc4, Size: 0x4]
	float ADSBaseSpread;//[Offset: 0xc8, Size: 0x4]
	float VhADSBaseSpread;//[Offset: 0xcc, Size: 0x4]
	bool bCalcSpreadByStandardDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	float SpreadStandardDistance;//[Offset: 0xd4, Size: 0x4]
	float SpreadStandardOriginMaxRange;//[Offset: 0xd8, Size: 0x4]
	bool bCalcSpreadByDistributionCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	RuntimeFloatCurve SpreadDistributionCurve;//[Offset: 0xe0, Size: 0x88]
	<FString,float> SpreadCOPMap;//[Offset: 0x168, Size: 0x50]
	float SpreadStatuSpeed;//[Offset: 0x1b8, Size: 0x4]
	<FString,float> SpreadStatuIncreaseCoefficient;//[Offset: 0x1c0, Size: 0x50]
	<FString,float> SpreadStatuReduceCoefficient;//[Offset: 0x210, Size: 0x50]
	Vector2D[] CustomSpreadArray;//[Offset: 0x260, Size: 0x10]
	class SolarWeaponAT_CtrlFireBase* CtrlFireTaskClass;//[Offset: 0x270, Size: 0x8]
	class SolarWeaponAT_FireBase* FireTaskClass;//[Offset: 0x278, Size: 0x8]
	AmmoConfig* PrimaryAmmo;//[Offset: 0x280, Size: 0x8]
	int PrimaryAmmoIndex;//[Offset: 0x288, Size: 0x4]
	int PrimaryAmmoCap;//[Offset: 0x28c, Size: 0x4]
	AmmoConfig* SecondaryAmmo;//[Offset: 0x290, Size: 0x8]
	int SecondaryAmmoIndex;//[Offset: 0x298, Size: 0x4]
	int SecondaryAmmoCap;//[Offset: 0x29c, Size: 0x4]
	AmmoConfig* UpgradedSecAmmo;//[Offset: 0x2a0, Size: 0x8]
	LinearColor UpgradedSecAmmoColor;//[Offset: 0x2a8, Size: 0x10]
	bool bNeedOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	float OverloadMaxValue;//[Offset: 0x2bc, Size: 0x4]
	float NormalOverloadCoolingRate;//[Offset: 0x2c0, Size: 0x4]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x2c8, Size: 0x8]
	float OverloadCoolingPeriod;//[Offset: 0x2d0, Size: 0x4]
	CurveFloat* OverloadReduceRateCurve;//[Offset: 0x2d8, Size: 0x8]
	float OverloadWarningRate;//[Offset: 0x2e0, Size: 0x4]
	bool bCanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	float AutoFireDelayMs;//[Offset: 0x2e8, Size: 0x4]
	float AutoFireEndDelayMs;//[Offset: 0x2ec, Size: 0x4]
	float AutoFireCompensationRate;//[Offset: 0x2f0, Size: 0x4]
	class GameplayEffect* AutoFireEffectClass;//[Offset: 0x2f8, Size: 0x8]
	bool bCanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	WeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAll;//[Offset: 0x308, Size: 0x60]
	WeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAllGamepad;//[Offset: 0x368, Size: 0x60]
	SolarWeaponFPPData DefaultFPPData;//[Offset: 0x3c8, Size: 0x68]
	SolarWeaponFPPConfig[] FPPConfigByAspectRatioArray;//[Offset: 0x430, Size: 0x10]
	bool bOneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	float ScopeOpenTime;//[Offset: 0x444, Size: 0x4]
	float ScopeOpenFOVTimeScale;//[Offset: 0x448, Size: 0x4]
	enum[] SupportChangeTypeArray;//[Offset: 0x450, Size: 0x10]
	int[] DefaultPartsArray;//[Offset: 0x460, Size: 0x10]
	bool bIsGatling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	float GatlingRotaryAcceleration;//[Offset: 0x474, Size: 0x4]
	float GatlingFireRotarySpeed;//[Offset: 0x478, Size: 0x4]
	float GatlingMaxRotarySpeed;//[Offset: 0x47c, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x480, Size: 0x4]
	float GatlingRotaryAttenuation;//[Offset: 0x484, Size: 0x4]
	float GatlingScatteringMagnification;//[Offset: 0x488, Size: 0x4]
	ParticleSystem* GatlingOverHeatSmokeEffect;//[Offset: 0x490, Size: 0x8]
	class GameplayAbility[] GasAbilities;//[Offset: 0x498, Size: 0x10]
	float HeadshotDamageFactor;//[Offset: 0x4a8, Size: 0x4]
	bool bShowCoolDownWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 0x1]
	SolarWeaponCrosshairData CrosshairWidgetData;//[Offset: 0x4b0, Size: 0x38]
	SoftObjectPath WeaponIcon;//[Offset: 0x4e8, Size: 0x18]
	SlateBrush PrimaryFireBrush;//[Offset: 0x500, Size: 0xe0]
	int PrimaryFireTxt;//[Offset: 0x5e0, Size: 0x4]
	SlateBrush SecondaryFireBrush;//[Offset: 0x5f0, Size: 0xe0]
	int SecondaryFireTxt;//[Offset: 0x6d0, Size: 0x4]
	FString WeaponTextType;//[Offset: 0x6d8, Size: 0x10]
	SoftObjectPath ItemIcon;//[Offset: 0x6e8, Size: 0x18]
	SoftObjectPath UpgradeParticleSystem;//[Offset: 0x700, Size: 0x18]
	void InitSupportChangeTypeArray(int[] Data);// 0x4d3004f39041
	void InitStatuSpreadCoefficient(out const FString[] Increasekeys, out const float[] Increasevalues, out const FString[] Reducekeys, out const float[] Reducevalues);// 0x4d2f04f39041
	void InitSpreadData(float Max, float Min, float hipbase, float adsbase, float vhadsbase, float statuspeed);// 0x4d2e04f39041
	void InitSpreadCOPMap(out const FString[] Keys, out const float[] Values);// 0x4d2d04f39041
	void InitScopeData(bool onekey, float scopetime);// 0x4d2c04f39041
	void InitOverload(bool InAllow, float InMax, float InNormalCoolingRate, float InCoolingPeriod, float InOverloadWarningRate);// 0x4d2b04f39041
	void InitBase(int WPType);// 0x4d2a04f39041
	bool GetIsSupportPart(enum Type);// 0x4d2904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponDebugFlag
	bool bIgnoreActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bExtraInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bMechanicalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bShowShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MoveSpeedReduceCurveConfig
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	RuntimeFloatCurve MoveSpeedReduceCurveOnHoldingWeapon;//[Offset: 0x50, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTagRequirements
	enum RequireTagCheckRule;//[Offset: 0x0, Size: 0x1]
	GameplayTagContainer RequireTags;//[Offset: 0x8, Size: 0x20]
	enum IgnoreTagCheckRule;//[Offset: 0x28, Size: 0x1]
	GameplayTagContainer IgnoreTags;//[Offset: 0x30, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponFireSocketData
	FName[] MultiBulletSocketNames;//[Offset: 0x0, Size: 0x10]
	FName[] MuzzleSocketNames;//[Offset: 0x10, Size: 0x10]
	FName[] AdsMuzzleSocketNames;//[Offset: 0x20, Size: 0x10]
	FName[] MuzzleBlockCheckSocketNames;//[Offset: 0x30, Size: 0x10]
	FName[] MultiCastShellSocketNames;//[Offset: 0x40, Size: 0x10]
	FName[] AdsMultiCastShellSocketNames;//[Offset: 0x50, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponAT_CtrlFireBase.SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	delegate OnDoFire;//[Offset: 0xa8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	delegate OnTaskEnd;//[Offset: 0x78, Size: 0x10]
	GameplayAbility* OwnerAbility;//[Offset: 0x88, Size: 0x8]
	SolarCharacter* TaskCharacter;//[Offset: 0x90, Size: 0x8]
	WeaponSystemBase* TaskWeaponSysBase;//[Offset: 0x98, Size: 0x8]
	SolarWeaponAT_TaskBase* CreateTaskDynamically(class SolarWeaponAT_TaskBase RealClass, GameplayAbility* OwningAbility, const FName TaskInstanceName, SolarCharacter* InCharacter);// 0x5f4e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbilityTask.AbilityTask.GameplayTask.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AbilityTask.GameplayTask.Object
	GameplayAbility* Ability;//[Offset: 0x60, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x68, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x137104f39041
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x137004f39041
	void EndTask();// 0x136f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbility.Object
	GameplayTagContainer AbilityTags;//[Offset: 0xa8, Size: 0x20]
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	byte ReplicationPolicy;//[Offset: 0xce, Size: 0x1]
	byte InstancingPolicy;//[Offset: 0xcf, Size: 0x1]
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0xd8, Size: 0x20]
	GameplayEventData CurrentEventData;//[Offset: 0xf8, Size: 0xb0]
	byte NetExecutionPolicy;//[Offset: 0x1a8, Size: 0x1]
	byte NetSecurityPolicy;//[Offset: 0x1a9, Size: 0x1]
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x1b0, Size: 0x8]
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x1b8, Size: 0x10]
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x1c8, Size: 0x8]
	GameplayTagQuery CancelAbilitiesMatchingTagQuery;//[Offset: 0x1d0, Size: 0x48]
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x218, Size: 0x20]
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x238, Size: 0x20]
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x258, Size: 0x20]
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x278, Size: 0x20]
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x298, Size: 0x20]
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x2b8, Size: 0x20]
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x2d8, Size: 0x20]
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x2f8, Size: 0x20]
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x318, Size: 0x20]
	GameplayTask*[] ActiveTasks;//[Offset: 0x358, Size: 0x10]
	AnimMontage* CurrentMontage;//[Offset: 0x378, Size: 0x8]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 0x1]
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0x3cd904f39041
	void SetCanBeCanceled(bool bCanBeCanceled);// 0x3cd804f39041
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0x3cd704f39041
	void RemoveGrantedByEffect();// 0x3cd604f39041
	void MontageStop(float OverrideBlendOutTime);// 0x3cd504f39041
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0x3cd404f39041
	void MontageJumpToSection(FName SectionName);// 0x3cd304f39041
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0x3cd204f39041
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0x3cd104f39041
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0x3cd004f39041
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0x3ccf04f39041
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0x3cce04f39041
	void K2_OnEndAbility(bool bWasCancelled);// 0x3ccd04f39041
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x3ccc04f39041
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0x3ccb04f39041
	void K2_EndAbility();// 0x3cca04f39041
	void K2_CommitExecute();// 0x3cc904f39041
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0x3cc804f39041
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0x3cc704f39041
	bool K2_CommitAbility();// 0x3cc604f39041
	bool K2_CheckAbilityCost();// 0x3cc504f39041
	bool K2_CheckAbilityCooldown();// 0x3cc404f39041
	void K2_CancelAbility();// 0x3cc304f39041
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, out GameplayTagContainer RelevantTags);// 0x3cc204f39041
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0x3cc104f39041
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0x3cc004f39041
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0x3cbf04f39041
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0x3cbe04f39041
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0x3cbd04f39041
	void K2_ActivateAbility();// 0x3cbc04f39041
	void InvalidateClientPredictionKey();// 0x3cbb04f39041
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0x3cba04f39041
	Actor* GetOwningActorFromActorInfo();// 0x3cb904f39041
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0x3cb804f39041
	Object* GetCurrentSourceObject();// 0x3cb704f39041
	AnimMontage* GetCurrentMontage();// 0x3cb604f39041
	float GetCooldownTimeRemaining();// 0x3cb504f39041
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0x3cb404f39041
	Actor* GetAvatarActorFromActorInfo();// 0x3cb304f39041
	GameplayAbilityActorInfo GetActorInfo();// 0x3cb204f39041
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0x3cb104f39041
	int GetAbilityLevel();// 0x3cb004f39041
	void EndTaskByInstanceName(FName InstanceName);// 0x3caf04f39041
	void EndAbilityState(FName OptionalStateNameToEnd);// 0x3cae04f39041
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0x3cad04f39041
	void CancelTaskByInstanceName(FName InstanceName);// 0x3cac04f39041
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x3cab04f39041
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0x3caa04f39041
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0x3ca904f39041
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x3ca804f39041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x3ca704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEventData
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	Actor* Instigator;//[Offset: 0x8, Size: 0x8]
	Actor* Target;//[Offset: 0x10, Size: 0x8]
	Object* OptionalObject;//[Offset: 0x18, Size: 0x8]
	Object* OptionalObject2;//[Offset: 0x20, Size: 0x8]
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 0x18]
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 0x20]
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 0x20]
	float EventMagnitude;//[Offset: 0x80, Size: 0x4]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectContextHandle
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityTargetDataHandle
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityActivationInfo
	byte ActivationMode;//[Offset: 0x0, Size: 0x1]
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PredictionKey
	int16 Current;//[Offset: 0x0, Size: 0x2]
	int16 Base;//[Offset: 0x2, Size: 0x2]
	PackageMap* PredictiveConnection;//[Offset: 0x8, Size: 0x8]
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityTargetingLocationInfo
	byte LocationType;//[Offset: 0x8, Size: 0x1]
	Transform LiteralTransform;//[Offset: 0x10, Size: 0x30]
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8]
	MeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8]
	GameplayAbility* SourceAbility;//[Offset: 0x50, Size: 0x8]
	FName SourceSocketName;//[Offset: 0x58, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffect.Object
	enum DurationPolicy;//[Offset: 0x30, Size: 0x1]
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 0x1a8]
	ScalableFloat Period;//[Offset: 0x1e0, Size: 0x20]
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	enum PeriodicInhibitionPolicy;//[Offset: 0x201, Size: 0x1]
	GameplayModifierInfo[] Modifiers;//[Offset: 0x208, Size: 0x10]
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x218, Size: 0x10]
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x228, Size: 0x20]
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x248, Size: 0x10]
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x258, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x268, Size: 0x10]
	class GameplayEffect[] OverflowEffects;//[Offset: 0x278, Size: 0x10]
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x290, Size: 0x10]
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2a0, Size: 0x10]
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	GameplayEffectCue[] GameplayCues;//[Offset: 0x2b8, Size: 0x10]
	GameplayEffectUIData* UIData;//[Offset: 0x2c8, Size: 0x8]
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x2d0, Size: 0x60]
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x330, Size: 0x60]
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x390, Size: 0x50]
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x3e0, Size: 0x50]
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x430, Size: 0x50]
	GameplayTagRequirements RemovalSourceTagRequirements;//[Offset: 0x480, Size: 0x50]
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x4d0, Size: 0x60]
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x530, Size: 0x50]
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x580, Size: 0x150]
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x6d8, Size: 0x150]
	enum StackingType;//[Offset: 0x829, Size: 0x1]
	int StackLimitCount;//[Offset: 0x82c, Size: 0x4]
	enum StackDurationRefreshPolicy;//[Offset: 0x830, Size: 0x1]
	enum StackPeriodResetPolicy;//[Offset: 0x831, Size: 0x1]
	enum StackExpirationPolicy;//[Offset: 0x832, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x838, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x20]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 0xf8]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x120, Size: 0x78]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x198, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 0x20]
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 0x40]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 0x10]
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 0x1]
	enum FinalChannel;//[Offset: 0xb1, Size: 0x1]
	GameplayTagContainer SourceTagFilter;//[Offset: 0xb8, Size: 0x20]
	GameplayTagContainer TargetTagFilter;//[Offset: 0xd8, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectAttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38]
	enum AttributeSource;//[Offset: 0x38, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0x10]
	FieldPathProperty Attribute;//[Size: 0x20]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomCalculationBasedFloat
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 0x20]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0x3cf204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectCalculation.Object
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectSpec
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 0x28]
	float Duration;//[Offset: 0x50, Size: 0x4]
	float Period;//[Offset: 0x54, Size: 0x4]
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 0x4]
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 0x88]
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 0x88]
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 0x20]
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 0x20]
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 0x10]
	int StackCount;//[Offset: 0x1c0, Size: 0x4]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 0x18]
	float Level;//[Offset: 0x290, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectModifiedAttribute
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	float TotalMagnitude;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectAttributeCaptureSpecContainer
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10]
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectAttributeCaptureSpec
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TagContainerAggregator
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilitySpecDef
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 0x8]
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 0x20]
	int InputID;//[Offset: 0x28, Size: 0x4]
	enum RemovalPolicy;//[Offset: 0x2c, Size: 0x1]
	Object* SourceObject;//[Offset: 0x30, Size: 0x8]
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x88, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilitySpecHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 0x20]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x60, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x208, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x210, Size: 0x50]
	GameplayTagRequirements TargetTags;//[Offset: 0x260, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayModEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectExecutionDefinition
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 0x20]
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 0x10]
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0x3cf104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectCustomExecutionParameters
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectCustomExecutionOutput
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 0x10]
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayModifierEvaluatedData
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	float Magnitude;//[Offset: 0x3c, Size: 0x4]
	ActiveGameplayEffectHandle Handle;//[Offset: 0x40, Size: 0x8]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveGameplayEffectHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectExecutionScopedModifierInfo
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 0x40]
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 0x8]
	enum AggregatorType;//[Offset: 0x48, Size: 0x1]
	byte ModifierOp;//[Offset: 0x49, Size: 0x1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1f8, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x200, Size: 0x50]
	GameplayTagRequirements TargetTags;//[Offset: 0x250, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConditionalGameplayEffect
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectCustomApplicationRequirement.Object
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0x3cf004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x130, Size: 0x10]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x140, Size: 0x10]
	FName AffectedAnimInstanceTag;//[Offset: 0x150, Size: 0x8]
	float OutgoingDuration;//[Offset: 0x2f8, Size: 0x4]
	float IncomingDuration;//[Offset: 0x2fc, Size: 0x4]
	FString[] ClientDebugStrings;//[Offset: 0x320, Size: 0x10]
	FString[] ServerDebugStrings;//[Offset: 0x330, Size: 0x10]
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 0x1]
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 0x1]
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 0x1]
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x3a8, Size: 0x10]
	Actor* OwnerActor;//[Offset: 0x3e0, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x3e8, Size: 0x8]
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x400, Size: 0x120]
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x550, Size: 0x10]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x730, Size: 0x38]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 0x1]
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x770, Size: 0x30]
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x840, Size: 0x480]
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xcc0, Size: 0x128]
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xde8, Size: 0x128]
	byte[] BlockedAbilityBindings;//[Offset: 0x1038, Size: 0x10]
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x1170, Size: 0x60]
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x11e0, Size: 0x118]
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0x13c804f39041
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0x13c704f39041
	void TargetConfirm();// 0x13c604f39041
	void TargetCancel();// 0x13c504f39041
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0x13c404f39041
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0x13c304f39041
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0x13c204f39041
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x13c104f39041
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0x13c004f39041
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x13bf04f39041
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0x13be04f39041
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0x13bc04f39041
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x13bb04f39041
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0x13ba04f39041
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0x13b904f39041
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0x13b804f39041
	void ServerPrintDebug_Request();// 0x13b704f39041
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey);// 0x13b604f39041
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0x13b504f39041
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x13b404f39041
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0x13b304f39041
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x13b204f39041
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0x13b004f39041
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0x13af04f39041
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x13ae04f39041
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0x13ad04f39041
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0x13ac04f39041
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0x13ab04f39041
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0x13aa04f39041
	void OnRep_ServerDebugString();// 0x13a904f39041
	void OnRep_ReplicatedAnimMontage();// 0x13a804f39041
	void OnRep_OwningActor();// 0x13a704f39041
	void OnRep_ClientDebugString();// 0x13a604f39041
	void OnRep_ActivateAbilities();// 0x13a504f39041
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x13a404f39041
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x13a304f39041
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x13a204f39041
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x13a104f39041
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x13a004f39041
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x139f04f39041
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x139e04f39041
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x139c04f39041
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0x139904f39041
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x139804f39041
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0x139704f39041
	GameplayEffectContextHandle MakeEffectContext();// 0x139604f39041
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0x139504f39041
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0x139404f39041
	bool GetUserAbilityActivationInhibited();// 0x139304f39041
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0x139204f39041
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0x139104f39041
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0x139004f39041
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0x138d04f39041
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0x138c04f39041
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0x138a04f39041
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0x138904f39041
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo);// 0x138804f39041
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x138504f39041
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x138404f39041
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0x138304f39041
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0x138204f39041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0x138104f39041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0x138004f39041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0x137f04f39041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0x137e04f39041
	void AbilityConfirmOrCancel__DelegateSignature();// 0x137d04f39041
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0x137c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x137b04f39041
	enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x137904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AttributeDefaults
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 0x8]
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AttributeSet.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScriptStruct.Struct.Field.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectQuery
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 0x10]
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 0x48]
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 0x48]
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 0x48]
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 0x38]
	Object* EffectSource;//[Offset: 0x130, Size: 0x8]
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10]
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	FString AutoDescription;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ServerAbilityRPCBatch
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 0x4]
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 0x18]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x20, Size: 0x28]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayCueParameters
	float NormalizedMagnitude;//[Offset: 0x0, Size: 0x4]
	float RawMagnitude;//[Offset: 0x4, Size: 0x4]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18]
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 0x8]
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 0x8]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 0xc]
	Actor* Instigator;//[Offset: 0x88, Size: 0x8]
	Actor* EffectCauser;//[Offset: 0x90, Size: 0x8]
	Object* SourceObject;//[Offset: 0x98, Size: 0x8]
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 0x8]
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 0x4]
	int AbilityLevel;//[Offset: 0xac, Size: 0x4]
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectSpecForRPC
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 0x18]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	float Level;//[Offset: 0x70, Size: 0x4]
	float AbilityLevel;//[Offset: 0x74, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectSpecHandle
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityTargetActor.Actor.Object
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x230, Size: 0x60]
	PlayerController* MasterPC;//[Offset: 0x2c0, Size: 0x8]
	GameplayAbility* OwningAbility;//[Offset: 0x2c8, Size: 0x8]
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	Actor* SourceActor;//[Offset: 0x2d8, Size: 0x8]
	WorldReticleParameters ReticleParams;//[Offset: 0x2e0, Size: 0xc]
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x2f0, Size: 0x8]
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x2f8, Size: 0x10]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	AbilitySystemComponent* GenericDelegateBoundASC;//[Offset: 0x320, Size: 0x8]
	void ConfirmTargeting();// 0x3cdb04f39041
	void CancelTargeting();// 0x3cda04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldReticleParameters
	Vector AOEScale;//[Offset: 0x0, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityWorldReticle.Actor.Object
	WorldReticleParameters Parameters;//[Offset: 0x228, Size: 0xc]
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236, Size: 0x1]
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x237, Size: 0x1]
	PlayerController* MasterPC;//[Offset: 0x238, Size: 0x8]
	Actor* TargetingActor;//[Offset: 0x240, Size: 0x8]
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0x3ce104f39041
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0x3ce004f39041
	void OnValidTargetChanged(bool bNewValue);// 0x3cdf04f39041
	void OnTargetingAnActor(bool bNewValue);// 0x3cde04f39041
	void OnParametersInitialized();// 0x3cdd04f39041
	void FaceTowardSource(bool bFaceIn2D);// 0x3cdc04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTargetDataFilterHandle
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilitySpecContainer.FastArraySerializer
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilitySpec.FastArraySerializerItem
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 0x4]
	GameplayAbility* Ability;//[Offset: 0x10, Size: 0x8]
	int Level;//[Offset: 0x18, Size: 0x4]
	int InputID;//[Offset: 0x1c, Size: 0x4]
	Object* SourceObject;//[Offset: 0x20, Size: 0x8]
	byte ActiveCount;//[Offset: 0x28, Size: 0x1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 0x20]
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x50, Size: 0x10]
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x60, Size: 0x10]
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x70, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityRepAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	float BlendTime;//[Offset: 0x10, Size: 0x4]
	byte NextSectionID;//[Offset: 0x14, Size: 0x1]
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	byte SectionIdToPlay;//[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityLocalAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]
	GameplayAbility* AnimatingAbility;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveGameplayEffectsContainer.FastArraySerializer
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x138, Size: 0x10]
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x458, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveGameplayEffect.FastArraySerializerItem
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 0x298]
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 0x18]
	float StartServerWorldTime;//[Offset: 0x2c8, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0x2cc, Size: 0x4]
	float StartWorldTime;//[Offset: 0x2d0, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveGameplayCueContainer.FastArraySerializer
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveGameplayCue.FastArraySerializerItem
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 0x8]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	GameplayCueParameters Parameters;//[Offset: 0x30, Size: 0xc0]
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MinimalReplicationTagCountMap
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicatedPredictionKeyMap.FastArraySerializer
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicatedPredictionKeyItem.FastArraySerializerItem
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectCue
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 0x38]
	float MinLevel;//[Offset: 0x38, Size: 0x4]
	float MaxLevel;//[Offset: 0x3c, Size: 0x4]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectUIData.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InheritedTagContainer
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer Added;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AbilityTriggerData
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 0x8]
	byte TriggerSource;//[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityActorInfo
	Actor* OwnerActor;//[Offset: 0x8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x10, Size: 0x8]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 0x8]
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 0x8]
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 0x8]
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	delegate OnCharacterAllReadyDelegate;//[Offset: 0x640, Size: 0x10]
	delegate PendingBeginPlay;//[Offset: 0x678, Size: 0x10]
	delegate OnPlayerStatePossessDelegate;//[Offset: 0x6a0, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x6b0, Size: 0x10]
	enum SolarCharacterType;//[Offset: 0x6c0, Size: 0x1]
	Vector2D CharacterCapsuleSizeOverride;//[Offset: 0x6c4, Size: 0x8]
	bool bInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cd, Size: 0x1]
	ReconnectionParams ReconnectionParams;//[Offset: 0x6fb, Size: 0x1]
	SolarAnimInstance* SolarAnimInstance;//[Offset: 0x720, Size: 0x8]
	<enum,AnimInstance*> SolarAnimInstances;//[Offset: 0x728, Size: 0x50]
	HitSoundReplicationData HitSoundData;//[Offset: 0x790, Size: 0x80]
	SolarPile*[] ChargingPileQueue;//[Offset: 0x810, Size: 0x10]
	delegate OnCharacterIDSet;//[Offset: 0x848, Size: 0x10]
	delegate OnSkinIDSet;//[Offset: 0x858, Size: 0x10]
	delegate OnCharacterSkinReset;//[Offset: 0x868, Size: 0x10]
	enum BodyScaleType;//[Offset: 0x878, Size: 0x1]
	int AssignedCharacterID;//[Offset: 0x87c, Size: 0x4]
	int AssignedSkinID;//[Offset: 0x880, Size: 0x4]
	<GameplayTag,SkeletalMeshComponent*> SkeletalOrnaments;//[Offset: 0x890, Size: 0x50]
	<GameplayTag,StaticMeshComponent*> StaticOrnaments;//[Offset: 0x8e0, Size: 0x50]
	<GameplayTag,ChildActorComponent*> ChildActorOrnaments;//[Offset: 0x930, Size: 0x50]
	<GameplayTag,CharacterTagListenerForOrnamentComp> OrnamentCompVisibleTagDependencies;//[Offset: 0x980, Size: 0x50]
	OrnamentMontageInfo OrnamentMontageInfo;//[Offset: 0x9d0, Size: 0x18]
	SolarAttributeSubComponent* AttributeSubComp;//[Offset: 0xb28, Size: 0x8]
	SolarBackpackActor* SolarBackpackActor;//[Offset: 0xb90, Size: 0x8]
	SolarBackpackComponent* SolarBackpackComponent;//[Offset: 0xb98, Size: 0x8]
	delegate OnBackpackItemUpdate;//[Offset: 0xbc0, Size: 0x10]
	delegate OnBackpackEnergyUpdate;//[Offset: 0xbd0, Size: 0x10]
	delegate OnBackpackEquipUpdate;//[Offset: 0xbe0, Size: 0x10]
	delegate OnBatteryIdUpdate;//[Offset: 0xbf0, Size: 0x10]
	delegate OnEnergyStateUpdate;//[Offset: 0xc00, Size: 0x10]
	delegate OnChargeInfoUpdate;//[Offset: 0xc10, Size: 0x10]
	delegate OnConsumableNumUpdated;//[Offset: 0xc20, Size: 0x10]
	delegate OnMaxEnergyUpdate;//[Offset: 0xc30, Size: 0x10]
	delegate OnCurEnergyUpdate;//[Offset: 0xc40, Size: 0x10]
	delegate OnBackpackWeaponPartUpdate;//[Offset: 0xc50, Size: 0x10]
	<int,int> ShieldUpMatCostMap;//[Offset: 0xc60, Size: 0x50]
	<int,int> MaxPileMap;//[Offset: 0xcb0, Size: 0x50]
	ReplicateMaxPileData[] MaxPileArray;//[Offset: 0xd00, Size: 0x10]
	<int,SolarItemData> IdKeyItemMap;//[Offset: 0xd10, Size: 0x50]
	ReplicateItemData[] IdKeyItemArray;//[Offset: 0xd60, Size: 0x10]
	<enum,SolarItemData> TypeKeyItemMap;//[Offset: 0xd70, Size: 0x50]
	ReplicateItemData[] TypeKeyItemArray;//[Offset: 0xdc0, Size: 0x10]
	ReplicateItemData[] WeaponDataArray;//[Offset: 0xdd0, Size: 0x10]
	<int,SolarItemData> WeaponDataMap;//[Offset: 0xde0, Size: 0x50]
	int[] WeaponPartsArray;//[Offset: 0xe80, Size: 0x10]
	WeaponIgnoreScopeLists IgnoreScopeLists;//[Offset: 0xe90, Size: 0x20]
	byte EnergyState;//[Offset: 0xeb0, Size: 0x1]
	float MaxEnergyValue;//[Offset: 0xeb4, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0xeb8, Size: 0x4]
	float MaxExtraEnergyValue;//[Offset: 0xebc, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0xec0, Size: 0x4]
	int EnergyModuleID;//[Offset: 0xec4, Size: 0x4]
	float AddedEnergyMax;//[Offset: 0xec8, Size: 0x4]
	int ExtraEnergyModuleID;//[Offset: 0xecc, Size: 0x4]
	float AddedExtraEnergyMax;//[Offset: 0xed0, Size: 0x4]
	int VJetPackModuleID;//[Offset: 0xed4, Size: 0x4]
	int HJetPackModuleID;//[Offset: 0xed8, Size: 0x4]
	bool bSettingEnergyCostEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedd, Size: 0x1]
	int DayLightID;//[Offset: 0xee0, Size: 0x4]
	float SolarChargeRatio;//[Offset: 0xee4, Size: 0x4]
	bool bReviveItemCleared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee8, Size: 0x1]
	BackpackJetPrepelInfo JetPropellingInfo;//[Offset: 0xeec, Size: 0xc]
	enum BackpackPropellingMode;//[Offset: 0xef8, Size: 0x1]
	Vector2D InputVector;//[Offset: 0xefc, Size: 0x8]
	SolarInputActionContext* InputActionContext;//[Offset: 0xf10, Size: 0x8]
	byte IdleTurnType;//[Offset: 0xf18, Size: 0x1]
	Rotator CharacterLookAt;//[Offset: 0xf20, Size: 0xc]
	CharacterOperationEvent CharacterOperationEvt;//[Offset: 0xf50, Size: 0x10]
	delegate OnHealthUpdateDelegate;//[Offset: 0xf78, Size: 0x10]
	float PendingRegeneration;//[Offset: 0xf88, Size: 0x4]
	float DiedTime;//[Offset: 0xf8c, Size: 0x4]
	bool bIsDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf94, Size: 0x1]
	SolarHitTraceComponent* SolarHitTraceComponent;//[Offset: 0xfa8, Size: 0x8]
	SolarTeamRescueComponent* SolarTeamRescueComponent;//[Offset: 0xfb0, Size: 0x8]
	SolarCharacter* RescuingCharater;//[Offset: 0xfb8, Size: 0x8]
	SolarUAVRescue* RescuingUAV;//[Offset: 0xfc0, Size: 0x8]
	byte CurrentRescueState;//[Offset: 0xfc8, Size: 0x1]
	byte LastRescueState;//[Offset: 0xfc9, Size: 0x1]
	SolarCharacter* RescuedCharater;//[Offset: 0xff8, Size: 0x8]
	float RescuedStartTime;//[Offset: 0x1000, Size: 0x4]
	StaticMeshComponent* RescueInjector;//[Offset: 0x1008, Size: 0x8]
	float RescueTime;//[Offset: 0x1034, Size: 0x4]
	SolarPlayerWeapon*[] DeathBoxWeaponArray;//[Offset: 0x1040, Size: 0x10]
	SolarItemData[] DeathBoxArray;//[Offset: 0x1050, Size: 0x10]
	float DeathBoxEnergy;//[Offset: 0x1060, Size: 0x4]
	ParticleSystemComponent* SwimmingWaterEffect;//[Offset: 0x1068, Size: 0x8]
	ParticleSystemComponent* HeavyJumpWaterEffect;//[Offset: 0x1070, Size: 0x8]
	ParticleSystemComponent*[] HorizontalFlyWaterEffects;//[Offset: 0x1078, Size: 0x10]
	SolarItemComponent* SolarItemComponent;//[Offset: 0x1098, Size: 0x8]
	SolarPickupComponent* SolarPickupComponent;//[Offset: 0x10a0, Size: 0x8]
	bool bIsElectricStoreOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a8, Size: 0x1]
	SolarTreatmentComponent* SolarTreatmentComponent;//[Offset: 0x10b0, Size: 0x8]
	enum CurrentTreatState;//[Offset: 0x10c8, Size: 0x1]
	int TreatmentCount;//[Offset: 0x10cc, Size: 0x4]
	delegate OnShieldRecharge;//[Offset: 0x10d8, Size: 0x10]
	delegate OnShieldBreak;//[Offset: 0x10e8, Size: 0x10]
	delegate OnShowShieldHUD;//[Offset: 0x10f8, Size: 0x10]
	delegate OnShowShieldHUDItem;//[Offset: 0x1108, Size: 0x10]
	delegate OnShieldUpFX;//[Offset: 0x1118, Size: 0x10]
	delegate OnCurShieldValueChanged;//[Offset: 0x1128, Size: 0x10]
	delegate OnShieldIDChanged;//[Offset: 0x1138, Size: 0x10]
	delegate OnShieldValueLow;//[Offset: 0x1148, Size: 0x10]
	delegate OnShieldValueChanged;//[Offset: 0x1158, Size: 0x10]
	int CurrShieldId;//[Offset: 0x116c, Size: 0x4]
	int CurUniqueShieldId;//[Offset: 0x1170, Size: 0x4]
	float MaxShieldValue;//[Offset: 0x1174, Size: 0x4]
	int NextUpgradeShieldID;//[Offset: 0x1178, Size: 0x4]
	int NextUpgradeShieldEnergy;//[Offset: 0x117c, Size: 0x4]
	float CurrShieldValue;//[Offset: 0x1180, Size: 0x4]
	enum CurrShieldState;//[Offset: 0x1184, Size: 0x1]
	int CurrShieldLevel;//[Offset: 0x1188, Size: 0x4]
	bool bHasPreAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1190, Size: 0x1]
	StaticMeshComponent* ShieldRepairOperator;//[Offset: 0x1238, Size: 0x8]
	StaticMesh* ShieldOperatorSM;//[Offset: 0x1240, Size: 0x8]
	StaticMesh* ShieldOperatorBigSM;//[Offset: 0x1248, Size: 0x8]
	ParticleSystemComponent* ShieldRepairFX;//[Offset: 0x1250, Size: 0x8]
	ParticleSystemComponent* ShieldMultiRecoverFX;//[Offset: 0x1258, Size: 0x8]
	ParticleSystemComponent* ShieldUpgradeBodyFX;//[Offset: 0x1260, Size: 0x8]
	StaticMeshComponent* ShieldUpgradeOperator;//[Offset: 0x1268, Size: 0x8]
	StaticMesh* ShieldUpgradeOperatorSM;//[Offset: 0x1270, Size: 0x8]
	Timeline ShieldOperatorExpandTimeline;//[Offset: 0x1278, Size: 0x98]
	Timeline ShieldOperatorNarrowTimeline;//[Offset: 0x1310, Size: 0x98]
	<enum,ShieldSoundData> ShieldSounds;//[Offset: 0x13a8, Size: 0x50]
	StaticMeshComponent* TreasureBoxOperator;//[Offset: 0x1408, Size: 0x8]
	DeathTreasureBox* CurChargingDeathBox;//[Offset: 0x1420, Size: 0x8]
	DeathTreasureBox*[] DeathBoxes;//[Offset: 0x1428, Size: 0x10]
	delegate OnLocalPlayerSpectateMeStatusChanged;//[Offset: 0x1440, Size: 0x10]
	delegate OnHUDNickNameSet;//[Offset: 0x1480, Size: 0x10]
	delegate OnHUDTeamPosSet;//[Offset: 0x1490, Size: 0x10]
	delegate OnHUDDistanceSet;//[Offset: 0x14a0, Size: 0x10]
	delegate OnHUDDistanceDisplaySet;//[Offset: 0x14b0, Size: 0x10]
	delegate OnHUDRescueBtnActivitySet;//[Offset: 0x14c0, Size: 0x10]
	SolarTeammateHUDWidgetComponent* TeammateHUDComp;//[Offset: 0x14d0, Size: 0x8]
	float HUDZNomral;//[Offset: 0x14e0, Size: 0x4]
	float HUDChangeTime;//[Offset: 0x14e4, Size: 0x4]
	SolarRadarComponent* SolarRadarComponent;//[Offset: 0x1500, Size: 0x8]
	RadarDataSpecContainer ActivatedRadars;//[Offset: 0x1508, Size: 0x120]
	SolarRadarStation* TargetRadarStation;//[Offset: 0x1628, Size: 0x8]
	SolarElectricShop* TargetElectricShop;//[Offset: 0x1630, Size: 0x8]
	TimerHandle StatisticsTimerHandle;//[Offset: 0x1648, Size: 0x8]
	SolarCharacter* CachedInstigatorCharacter;//[Offset: 0x16c8, Size: 0x8]
	float ArmorReduceValue;//[Offset: 0x179c, Size: 0x4]
	float HeadHitValue;//[Offset: 0x17a0, Size: 0x4]
	delegate OnTakeDamageDelegate;//[Offset: 0x17a8, Size: 0x10]
	int InstigatorCharacterWeaponItemID;//[Offset: 0x17cc, Size: 0x4]
	CriticalHitInfo[] CriticalHits;//[Offset: 0x17d0, Size: 0x10]
	WorldMarkComponent* WorldMarkComponent;//[Offset: 0x1850, Size: 0x8]
	IMChatObject* IMChatObj;//[Offset: 0x1858, Size: 0x8]
	int AIActorCapacity;//[Offset: 0x1860, Size: 0x4]
	float StandJogSpeed;//[Offset: 0x1910, Size: 0x4]
	float StandRunSpeed;//[Offset: 0x1914, Size: 0x4]
	float StandSprintSpeed;//[Offset: 0x1918, Size: 0x4]
	float CrouchJogSpeed;//[Offset: 0x191c, Size: 0x4]
	float CrouchRunSpeed;//[Offset: 0x1920, Size: 0x4]
	float CrouchSprintSpeed;//[Offset: 0x1924, Size: 0x4]
	delegate OnJogSetClient;//[Offset: 0x1930, Size: 0x10]
	bool bIsSprintingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1940, Size: 0x1]
	SolarCharacterMovementComponent* CachedSolarCharacterMovement;//[Offset: 0x1998, Size: 0x8]
	byte CurrentSteppedSurfaceType;//[Offset: 0x19a0, Size: 0x1]
	bool bIsJog;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19a1, Size: 0x1]
	float MoveSpeedReduceBonusInHipFire;//[Offset: 0x19a4, Size: 0x4]
	float MoveSpeedReduceBonusInAdsHipFire;//[Offset: 0x19a8, Size: 0x4]
	enum CurrentCustomJumpType;//[Offset: 0x19bc, Size: 0x1]
	delegate OnJetFlyStart;//[Offset: 0x19c0, Size: 0x10]
	enum CurrentJetFlyType;//[Offset: 0x19d0, Size: 0x1]
	bool bNewJetFlyCheckFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19d1, Size: 0x1]
	AnimSequence* CruiseStartAnim;//[Offset: 0x1a18, Size: 0x8]
	AnimSequence* CruiseLoopAnim;//[Offset: 0x1a20, Size: 0x8]
	AnimSequence* CruiseEndAnim;//[Offset: 0x1a28, Size: 0x8]
	float PrepareToParachuteStartTime;//[Offset: 0x1a30, Size: 0x4]
	float PrepareToParachuteDuration;//[Offset: 0x1a34, Size: 0x4]
	Vector PrepareToParachuteLocation;//[Offset: 0x1a38, Size: 0xc]
	Vector AgreedParachuteLocation;//[Offset: 0x1a44, Size: 0xc]
	int CapsuleID;//[Offset: 0x1a68, Size: 0x4]
	bool bEnableCruising;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a88, Size: 0x1]
	SolarCapsuleRoot* BoardedRoot;//[Offset: 0x1a90, Size: 0x8]
	enum CruiseState;//[Offset: 0x1a98, Size: 0x1]
	int ForceParachuteCountDown;//[Offset: 0x1a9c, Size: 0x4]
	CharacterCruiseComponent* CruiseComponentPrivate;//[Offset: 0x1aa0, Size: 0x8]
	SingleCruiseBaseParam CurrentSingleCruiseParam;//[Offset: 0x1ac8, Size: 0x20]
	enum SingleCruiseState;//[Offset: 0x1aec, Size: 0x1]
	SolarCapsuleActor* SingleCruiseCapsuleActor;//[Offset: 0x1af0, Size: 0x8]
	SingleCapsuleRootActor* SingleCruiseRootActor;//[Offset: 0x1af8, Size: 0x8]
	delegate OnSkydiveTraced;//[Offset: 0x1b00, Size: 0x10]
	ExponentialHeightFog* HeightFogActor;//[Offset: 0x1b10, Size: 0x8]
	ParticleSystemComponent*[] SkydiveFlyingEffects;//[Offset: 0x1b18, Size: 0x10]
	ParticleSystemComponent*[] SkydiveLandingEffects;//[Offset: 0x1b28, Size: 0x10]
	ParticleSystemComponent*[] SkydiveWholeLifetimeEffects;//[Offset: 0x1b38, Size: 0x10]
	enum BGMInBattle;//[Offset: 0x1b48, Size: 0x1]
	FName SpecialSkydiveTypeName;//[Offset: 0x1b4c, Size: 0x8]
	enum CurrentSkydiveStage;//[Offset: 0x1b54, Size: 0x1]
	delegate OnSkydivingStageChangedDelegate;//[Offset: 0x1b58, Size: 0x10]
	ActorComponent* FollowedLeaderMovementComponent;//[Offset: 0x1b88, Size: 0x8]
	WeaponSystemPlayerBase* WeaponSystemComponent;//[Offset: 0x1bc8, Size: 0x8]
	delegate OnCharacterFired;//[Offset: 0x1bd8, Size: 0x10]
	SkeletalMeshComponent* FirstPersonMesh;//[Offset: 0x1c00, Size: 0x8]
	SolarPlayerWeapon* TempSwitchWeapon;//[Offset: 0x1c18, Size: 0x8]
	SolarPlayerWeapon* CachedCurrentWeapon;//[Offset: 0x1c20, Size: 0x8]
	WeaponSystemVehicleComponent* WeaponSystemVehicle;//[Offset: 0x1cf0, Size: 0x8]
	BoardedVehicleInfo BoardedVehicleInfo;//[Offset: 0x1d10, Size: 0x10]
	bool bOutVehicleShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d20, Size: 0x1]
	StaticMeshComponent* VehicleRepairToolMesh;//[Offset: 0x1de8, Size: 0x8]
	delegate OnCharacterActivateEMP;//[Offset: 0x1e08, Size: 0x10]
	delegate OnCharacterSwitchEMPEffect;//[Offset: 0x1e18, Size: 0x10]
	bool bActiveEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e28, Size: 0x1]
	bool bActiveInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e29, Size: 0x1]
	bool bNoticedCantCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2a, Size: 0x1]
	enum CurrentSkillAnimType;//[Offset: 0x1e40, Size: 0x1]
	enum CurrentSkillAnimRightHandType;//[Offset: 0x1e41, Size: 0x1]
	float SkillAnimDistanceBlendRatio;//[Offset: 0x1e44, Size: 0x4]
	ScoutEnemyObject* ScoutEnemyObj;//[Offset: 0x1e60, Size: 0x8]
	SolarCharacterBillboardIconComponent* BillboardIconComponent;//[Offset: 0x1e68, Size: 0x8]
	int DuckRollingJumpPoseIndex;//[Offset: 0x1e70, Size: 0x4]
	bool bCanSkilledJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e74, Size: 0x1]
	DuckRollingMeshComponent* CachedDuckRollingMeshComponent;//[Offset: 0x1e78, Size: 0x8]
	byte WallRunSurfaceAngle;//[Offset: 0x1ef8, Size: 0x1]
	enum WallRunState;//[Offset: 0x1ef9, Size: 0x1]
	int LeadDanceID;//[Offset: 0x1efc, Size: 0x4]
	FString DebugStringBotAIInfo;//[Offset: 0x1fa0, Size: 0x10]
	FString DebugStringToDrawGASServer;//[Offset: 0x1fb0, Size: 0x10]
	FString DebugStringDSTransferLog;//[Offset: 0x1fc0, Size: 0x10]
	int RoleAbilityCharacterID;//[Offset: 0x1fd0, Size: 0x4]
	int[] RoleAbilityBoundPlayerLevels;//[Offset: 0x1fd8, Size: 0x10]
	GameplayAbilitySpecHandle[] RoleAbilitySpecHandles;//[Offset: 0x1fe8, Size: 0x10]
	float[] RoleAbilityStartCDServerTime;//[Offset: 0x1ff8, Size: 0x10]
	int BattleUpgradeEffectCurrentLevel;//[Offset: 0x2068, Size: 0x4]
	BattleUpgradeEffectContainer BattleUpgradeEffects;//[Offset: 0x2070, Size: 0x120]
	SolarUAVRescue* PermanentRescueUAV;//[Offset: 0x2210, Size: 0x8]
	<SkywardDiveLauncher*,bool> AvailableSkywardDiveLaunchers;//[Offset: 0x2238, Size: 0x50]
	bool WorldToScreen(out const Vector Location, out Vector2D Screen);// 0x223504f39041
	void UseDanceEmoteByID(int ID);// 0x223404f39041
	void UpgradeShieldResponse(const bool bSuccess);// 0x223304f39041
	void UpgradeGenericSkill(int LevelUp);// 0x223204f39041
	void UpgradeClassTypeSkill(int LevelUp);// 0x223104f39041
	void UpdateWeaponCrosshair(float InDeltaTime);// 0x223004f39041
	void UpdateVehicleStealthProgress(float StealthMaterialPercent);// 0x222f04f39041
	void UpdateTeammateHUDData(byte InNewPosInTeam);// 0x222e04f39041
	void UpdateShieldUpgradeMatMaxPile();// 0x222d04f39041
	void UpdateShieldPropertyByAblility();// 0x222c04f39041
	void UpdateRoleAbilityState(byte RoleAbilityIndex, enum Ope);// 0x222b04f39041
	void UpdateJetFlyDataToSpectating();// 0x222a04f39041
	void UpdateExtraMagToSpectateInfo(SolarSpectateInfo* SpectateInfo);// 0x222904f39041
	void UpdateDyingAttr(float DeltaTime);// 0x222804f39041
	float UpdateCurrentHealth(const float UpdateValue, const byte ChangeType, SolarCharacter* InInstigatorCharacter, Actor* InDamageCauserActor, out SolarPointDamageEvent DamageEvent);// 0x222704f39041
	void UpdateBattleUpgradeEffectToSpectateInfo(SolarSpectateInfo* SpectateInfo);// 0x222604f39041
	void UnbindActorToSelfTeam(Actor* Actor);// 0x222504f39041
	void TurnCharacterWithAngle(float Degree, bool bIsYawOrPitch);// 0x222404f39041
	void TurnCharacterToDirection(out const Vector Dir);// 0x222304f39041
	void TryStopSpectateCountdown();// 0x222204f39041
	void TryStopShieldRecharge();// 0x222104f39041
	void TryStatisticsRechargedTimes();// 0x222004f39041
	void TryStartSpectateCountdown();// 0x221f04f39041
	void TryStartShieldRecharge(bool bUseBigRecharger);// 0x221e04f39041
	void TrySetTeammateHUDShow();// 0x221d04f39041
	void TrySetTeammateHUDHide();// 0x221c04f39041
	void TryRefreshTeamateHUDVisiblity();// 0x221b04f39041
	void TryRefreshAllyBillboardIcon();// 0x221a04f39041
	void TryRechargeShield(bool bUseBigRecharger);// 0x221904f39041
	void TryHideShieldOperator();// 0x221804f39041
	void TryDiscardShieldUpgradeMatItems(const int InItemNum);// 0x221704f39041
	void TryCreatingOwnTeammate();// 0x221604f39041
	void TryBreakShieldRecharge();// 0x221504f39041
	void TryBreakScopeStatus();// 0x221404f39041
	void TryBindPowerBarDelegates();// 0x221304f39041
	void TryBindPickupDelegates();// 0x221204f39041
	void TryBindItemPanelDelegates();// 0x221104f39041
	void TryBindHPPanelDelegates();// 0x221004f39041
	void TryAutoMarkItemForTeammateServer(const SolarItemData[] ItemData);// 0x220f04f39041
	void ToggleDebugInfo();// 0x220e04f39041
	void ToggleDebugGASInfo();// 0x220d04f39041
	void TickShieldOperatorTimeline(float InDeltaTime);// 0x220c04f39041
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x220b04f39041
	void Suicide();// 0x220a04f39041
	void StopTreatmentProgressBar();// 0x220904f39041
	void StopTreatment();// 0x220804f39041
	void StopShieldRechargeProgressBar();// 0x220704f39041
	void StopShieldRechargeProgress();// 0x220604f39041
	void StopRescueProgressBar(const int TextID);// 0x220504f39041
	void StopRepairWeakPointProgressBar();// 0x220404f39041
	void StopClimbSound();// 0x220304f39041
	void StatisticElectricShopOnActivated(out const Vector InLocation);// 0x220204f39041
	void StartTreatmentProgressBar(const float Duration);// 0x220104f39041
	void StartTreatment();// 0x220004f39041
	void StartShieldRechargeProgressBar(const float InRechargeDuration, int InContributorCharacterId);// 0x21ff04f39041
	void StartShieldRechargeProgress();// 0x21fe04f39041
	void StartRescueProgressBar(const float Duration, const float RemainingTime, const int TextID, const bool bShowBtn, bool bIsUAV);// 0x21fd04f39041
	void StartRepairWeakPointProgressBar(const float Duration);// 0x21fc04f39041
	void SpecAnimInstStopMontage(enum SpecAnimType, AnimMontage* AnimMontage);// 0x21fb04f39041
	float SpecAnimInstPlayMontage(enum SpecAnimType, AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x21fa04f39041
	AnimMontage* SpecAnimInstGetCurrentMontage(enum SpecAnimType);// 0x21f904f39041
	void SpawnDeathBoxActor(SolarPlayerState* InKillerPS);// 0x21f804f39041
	void SolarLaunchCharacter(out const Vector LaunchVelocity, bool bXYOverride, bool bZOverride, Actor* JumpPad);// 0x21f704f39041
	void ShowShieldUIFX(const int ShiledID);// 0x21f604f39041
	void ShowShieldUI(const bool IsShow);// 0x21f504f39041
	void ShowRevivePickupEffect();// 0x21f404f39041
	void ShowReviveClearEffect();// 0x21f304f39041
	void ShowRescueInjector();// 0x21f204f39041
	void ShowNoticeCantCharge();// 0x21f104f39041
	bool ShouldForceOverrideDamageTaken(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser, out float OverrideDamageTaken);// 0x21f004f39041
	void ShieldUpgradeToNextLevel();// 0x21ef04f39041
	void ShieldOperatorInterpFunc(float InValue);// 0x21ee04f39041
	void SetSpectateTargetCharacter(SolarCharacter* InSpectateTargetCharacter);// 0x21ed04f39041
	void SetSelfEnergyCostEnable(bool bEnable);// 0x21ec04f39041
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x21eb04f39041
	void SetNewCharacterSkin(SkeletalMesh* NewMesh, MaterialInterface* NewMaterial, class Object NewAnimClass);// 0x21ea04f39041
	void SetMaxWalkSpeed(float NewWalkSpeed);// 0x21e904f39041
	void SetInfiniteAmmoState(const bool Enable);// 0x21e804f39041
	void SetCurrShieldValue(const float InValue, bool bFromDamage);// 0x21e704f39041
	void SetCurrExtraEnergy(float Amount);// 0x21e604f39041
	void SetBackpackConfig(const int InCharacterId);// 0x21e504f39041
	void ServerUseItemRequest(int ItemID, int Num);// 0x21e404f39041
	bool ServerUpgradeShield();// 0x21e304f39041
	void ServerUpdateWallRunState(enum NewState);// 0x21e104f39041
	void ServerUpdateWallRunAngle(byte ClientAngle);// 0x21e004f39041
	void ServerUpdateDuckRollingJumpPoseIndex(int Index);// 0x21df04f39041
	void ServerTryRechargeShield(const float InRecoverySpeed);// 0x21de04f39041
	void ServerTriggerRoleAbilityAgain(byte RoleAbilityIndex);// 0x21dd04f39041
	void ServerTriggerRadarStation(SolarRadarStation* InRadarStation);// 0x21dc04f39041
	void ServerSwitchVehicleSeat(float LocalTime, SolarVehiclePawn* InVehicle, int TargetSeatIndex, const Vector_NetQuantize VehicleLocation, const Vector_NetQuantizeNormal VehicleEuler);// 0x21db04f39041
	void ServerSwitchShield(const SolarItemData NewShieldData);// 0x21da04f39041
	void ServerStatisticsRechargedTimes(const int RechargedTimes, const int BigRechargedTimes);// 0x21d904f39041
	void ServerStatisticElectricShopOnActivated(const Vector InLocation);// 0x21d804f39041
	void ServerStartRescue(SolarCharacter* TargetCharacter);// 0x21d704f39041
	void ServerSetTreasureBoxState(SolarTreasureBoxActor* TreasureBox, const enum NewState, SolarCharacter* RequestCharacter);// 0x21d504f39041
	void ServerSetJetPackModule(const int NewJetPackModuleID, const bool bForVertical);// 0x21d404f39041
	void ServerSetInputVector(uint16 AxisX, uint16 AxisY);// 0x21d304f39041
	void ServerSetIdleTurnType(byte TurnType);// 0x21d104f39041
	void ServerSetEnergyState(enum State);// 0x21d004f39041
	void ServerSetDebugCharacterGASValue(int Value);// 0x21cf04f39041
	void ServerSetCurChargingDeathBox(DeathTreasureBox* DeathBox);// 0x21ce04f39041
	void ServerSetChargingPile(const bool bEnter, SolarPile* InChargingPile);// 0x21cd04f39041
	void ServerSetCharacterOperation(enum InType, Object* Target);// 0x21cc04f39041
	void ServerSetCanBeDamaged(bool bInCanBeDamaged);// 0x21cb04f39041
	void ServerSendGameplayEvent(const GameplayTag EventTag, const GameplayEventData Payload);// 0x21ca04f39041
	void ServerSelectLevelSkill(int Level, int SelectedIndex);// 0x21c904f39041
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x21c804f39041
	void ServerRPCUpgradeShield();// 0x21c704f39041
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x21c604f39041
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x21c504f39041
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x21c404f39041
	void ServerRPCSetSelfEnergyCostEnable(bool bEnable);// 0x21c304f39041
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x21c204f39041
	void ServerRPCDisplayAllElectricShops();// 0x21c104f39041
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x21c004f39041
	void ServerRPCDiscardWeapon(const int InSlot);// 0x21bf04f39041
	void ServerRPCDiscardItem(const int InItemID, const int InItemNum);// 0x21be04f39041
	void ServerRequestStartResurrect(DeathTreasureBox* TargetDeathBox);// 0x21bd04f39041
	void ServerRequestCancelResurrect();// 0x21bc04f39041
	void ServerPostAutoFireStatusChanged(bool bInOn);// 0x21bb04f39041
	void ServerPlayTreatmentCancelSound();// 0x21ba04f39041
	void ServerPickUpWeapon(Actor* Actor, bool bIsAutoPickup, const int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x21b904f39041
	void ServerPickUpTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x21b804f39041
	void ServerPickUpItem(SolarItemActor* ItemActor, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x21b704f39041
	void ServerOpenAirDropTreasureBox(AirDropTreasureBox* InAirDropTreasureBox);// 0x21b604f39041
	void ServerOnDestructActor(SolarDestructibleActor* DestructibleActor, SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x21b504f39041
	void ServerMoveNoBaseEx(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode, uint32 ClientCustomMoveData);// 0x21b404f39041
	void ServerMoveDualNoBaseEx(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode, uint32 ClientCustomMoveData);// 0x21b304f39041
	void ServerKillMe(enum DamageType);// 0x21b204f39041
	void ServerInitSheildComp(const int InShiledID);// 0x21b104f39041
	void ServerHideShieldOperator();// 0x21b004f39041
	void ServerGMVehicleSubHealth(int SubHealth);// 0x21af04f39041
	void ServerGetOnVehicle(float LocalTime, SolarVehiclePawn* InVehicle, int SeatIndex);// 0x21ae04f39041
	void ServerGetOffVehicleEjectedByDefaultParams(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection);// 0x21ad04f39041
	void ServerGetOffVehicleEjected(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection, const VehicleEjectParams Params);// 0x21ab04f39041
	void ServerGetOffVehicle(bool bNeedNotify);// 0x21aa04f39041
	void ServerEnableServerGASDebugByDisplayDebug(bool bEnabled);// 0x21a904f39041
	void ServerDetectBlock();// 0x21a804f39041
	void ServerConsumeExtraEnergy(const float InAmount, const enum InUsage);// 0x21a704f39041
	void ServerConsumeEnergy(const float InAmount, const enum InUsage);// 0x21a604f39041
	void ServerClearJetModule();// 0x21a504f39041
	void ServerClearEnergyState(enum State);// 0x21a404f39041
	void ServerChangeRechargeState(const bool bRecharge, const bool bUseBigRecharger);// 0x21a304f39041
	void ServerCancelVehicleAbility(byte AbilityIndex);// 0x21a204f39041
	void ServerCancelVault(float InAnimPosition, Vector InLandLocation);// 0x21a104f39041
	void ServerCancelRescue();// 0x21a004f39041
	void ServerCancelOpenAirDropTreasureBox(AirDropTreasureBox* InAirDropTreasureBox);// 0x219f04f39041
	void ServerCancelMeleeWarp();// 0x219e04f39041
	void ServerBackpackGM(const enum InGmType, const int InItemID, const int InItemNum, const int InSlot);// 0x219d04f39041
	void ServerAskForActiveAbilityInfosToRestoreOnReconnected();// 0x219c04f39041
	void ServerApplyVehicleAbility(byte AbilityIndex);// 0x219b04f39041
	void ServerAddVehicleTime(float InAddTime);// 0x219a04f39041
	void RoleAbilityForbiddenAbilityTagCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x219904f39041
	void RoleAbilityEndedCallBack(GameplayAbility* InAbility);// 0x219804f39041
	void RoleAbilityCoolDownTagCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x219704f39041
	void RoleAbilityCoolDownResetCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x219604f39041
	void RoleAbilityCommittedCallBack(GameplayAbility* InAbility);// 0x219504f39041
	void RoleAbilityActiveCallBack(GameplayAbility* InAbility);// 0x219404f39041
	void ReturnMostValuableItemIDServer(const byte TeammatePosInTeam, const int64 ItemThisID);// 0x219304f39041
	void ResponseChosenMark();// 0x219204f39041
	void RequestUseBackpackItemServer(const int InItemID, const int InItemNum);// 0x219104f39041
	void RequestToStopVehicleRepairing();// 0x219004f39041
	void RequestToStartVehicleRepairing(SolarVehiclePawn* InVehicle);// 0x218f04f39041
	void RequestSingleCruise(out const SingleCruiseBaseParam StartParam);// 0x218d04f39041
	void RequestPlayShieldSound(out ShieldSoundData ShieldSound, bool bIsOnly1P);// 0x218a04f39041
	void RequestDisplayAllElectricShops();// 0x218904f39041
	void RequestCancelRescue();// 0x218804f39041
	void RemoveWorldMarkByRep(out WorldMarkData WorldMarkData);// 0x218704f39041
	void RemoveTreasureBoxOperator();// 0x218604f39041
	void RemoveTempComponent(PrimitiveComponent* TargetComp);// 0x218504f39041
	void RemoveTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag);// 0x218404f39041
	void RemoveShieldUpgradeOperator();// 0x218304f39041
	void RemoveShieldRepairEffectItem();// 0x218204f39041
	void RemoveShieldOperator();// 0x218104f39041
	void RefreshWeaponDataMapAndArray();// 0x218004f39041
	void RefreshTypeItemMapAndArray();// 0x217f04f39041
	void RefreshTeammateHUDUI(SolarPlayerState* SelfData);// 0x217e04f39041
	void RefreshRenderConsoleVarForSkydive();// 0x217d04f39041
	void RefreshMaxPileMapAndArray();// 0x217c04f39041
	void RefreshIdItemMapAndArray();// 0x217b04f39041
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x217a04f39041
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0x217904f39041
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x217804f39041
	void ReceivedOnShieldIdChanged(int LastShieldId);// 0x217704f39041
	void ReceiveAfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x217604f39041
	void QuitVehicleWholeShield();// 0x217504f39041
	void QuitVehicleStealth();// 0x217404f39041
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x217304f39041
	void PostNotEnoughEnergyNotice();// 0x217204f39041
	void PlaySquatSound();// 0x217104f39041
	void PlaySpeedUpEffect(bool bIsUp);// 0x217004f39041
	void PlayShieldSoundByType(enum ShieldSoundType);// 0x216e04f39041
	void PlayParachuteStartSound();// 0x216d04f39041
	void PlayMontageOnOrnament(GameplayTag OrnamentTag, AnimMontage* MontageToPlay);// 0x216c04f39041
	void PlayerStateReplicatedForHUD();// 0x216b04f39041
	void OnVaultInput();// 0x216a04f39041
	void OnUsingSkillStatusChanged(const GameplayTag Tag, int NewCount);// 0x216904f39041
	void OnUpdateShieldId();// 0x216804f39041
	void OnUAVSpawnRelatedTagChange(const GameplayTag Tag, int NewCount);// 0x216704f39041
	void OnTreatmentStop__DelegateSignature(bool bWasCancelled);// 0x216604f39041
	void OnTeamIDChange();// 0x216504f39041
	void OnTakeDamage__DelegateSignature(const SolarCharacter* Character, const SolarCharacter* DamageInstigatorCharacter, out const SolarPointDamageEvent DamageEvent, float HPDamage);// 0x216404f39041
	void OnStartResurrectProgress(const int InTextId, const float InDuration, const float InRemaining, const bool bShowCancel);// 0x216304f39041
	void OnStartRemindTeammateRescue();// 0x216204f39041
	void OnSpawnExpItem();// 0x216104f39041
	void OnSkydiveTraced__DelegateSignature(out const HitResult HitResult);// 0x216004f39041
	void OnSkydiveStageChanged(enum LastStage, enum CurrentStage);// 0x215f04f39041
	void OnShowShieldHUD__DelegateSignature(bool bIsShowShieldHUD);// 0x215e04f39041
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x215d04f39041
	void OnShieldValueLowDelegate__DelegateSignature(bool bIsShieldValueLow);// 0x215c04f39041
	void OnShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, const enum ShieldRechargeState, bool bFixPreAdd);// 0x215b04f39041
	void OnShieldRechargeStart();// 0x215a04f39041
	void OnShieldRechargeProgressBarComplete();// 0x215904f39041
	void OnShieldRechargeProgressBarCancel();// 0x215804f39041
	void OnShieldRechargeEnd();// 0x215704f39041
	void OnShieldIDChangedDelegate__DelegateSignature(bool bShiledAvailable, float CurValue, float MaxValue, int QualityColor, bool bIsAdvancedShield);// 0x215604f39041
	void OnSheildUpFXDelegate__DelegateSignature();// 0x215504f39041
	void OnSheildRechargeDelegate__DelegateSignature();// 0x215404f39041
	void OnSheildBreakDelegate__DelegateSignature();// 0x215304f39041
	void OnSeverRemindTeammateRescueNotify(int RemindRescueSoundID);// 0x215204f39041
	void OnRoleGameplayEffectRemoved(out const ActiveGameplayEffect ActiveGameplayEffect);// 0x215104f39041
	void OnRoleGameplayEffectApplied(AbilitySystemComponent* ASC, out const GameplayEffectSpec InGameplayEffectSpec, ActiveGameplayEffectHandle InGameplayEffectHandle);// 0x215004f39041
	void OnReplayCameraModeChanged(enum OldMode, enum CurMode);// 0x214f04f39041
	void OnRepItemWeaponParts();// 0x214e04f39041
	void OnRepIgnoreScopeSlots();// 0x214d04f39041
	void OnRep_WeaponSystemVehicle();// 0x214c04f39041
	void OnRep_WeaponSystemComponentChanged();// 0x214b04f39041
	void OnRep_WeaponDataMap();// 0x214a04f39041
	void OnRep_VJetPackModuleID();// 0x214904f39041
	void OnRep_TypeKeyItemArrayChange();// 0x214804f39041
	void OnRep_TreatmentState(enum LastState);// 0x214604f39041
	void OnRep_TreatmentCount(int LastCount);// 0x214504f39041
	void OnRep_SkillAnimDistanceBlendRatio();// 0x214404f39041
	void OnRep_SingleCruiseState(enum LastSingleCruiseState);// 0x214204f39041
	void OnRep_SettingEnergyCostChanged();// 0x214104f39041
	void OnRep_RoleAbilityStartCDServerTime();// 0x214004f39041
	void OnRep_RoleAbilitySpecHandles();// 0x213f04f39041
	void OnRep_ReviveItemCleared();// 0x213e04f39041
	void OnRep_RescueState();// 0x213d04f39041
	void OnRep_RescuedStartTime(float LastRescuedStartTime);// 0x213c04f39041
	void OnRep_PendingRegeneration();// 0x213b04f39041
	void OnRep_OutVehicleShotState();// 0x213a04f39041
	void OnRep_OrnamentMontageInfo(OrnamentMontageInfo LastInfo);// 0x213804f39041
	void OnRep_MaxPileArrayChange();// 0x213704f39041
	void OnRep_MaxExtraEnergyChanged();// 0x213604f39041
	void OnRep_JetPropellingInfo();// 0x213504f39041
	void OnRep_IsDeathVerge();// 0x213404f39041
	void OnRep_IdKeyItemArrayChange();// 0x213304f39041
	void OnRep_HJetPackModuleID();// 0x213204f39041
	void OnRep_HitSoundData(out const HitSoundReplicationData LastData);// 0x212d04f39041
	void OnRep_ForceParachuteCountDown();// 0x212c04f39041
	void OnRep_ExtraEnergyModuleIDChanged();// 0x212b04f39041
	void OnRep_EnergyStateChanged();// 0x212a04f39041
	void OnRep_EnableCruising();// 0x212904f39041
	void OnRep_DuckRollingJumpPoseIndex();// 0x212804f39041
	void OnRep_DiedTime();// 0x212704f39041
	void OnRep_CurUniqueShieldId();// 0x212604f39041
	void OnRep_CurrShieldValue(float PreviousValue);// 0x212504f39041
	void OnRep_CurrShieldState(enum LastState);// 0x212304f39041
	void OnRep_CurrShieldId(int InLastShieldId);// 0x212204f39041
	void OnRep_CurrentSkydiveStage(enum LastStage);// 0x212104f39041
	void OnRep_CurrentSkillAnimType();// 0x212004f39041
	void OnRep_CurrentEnergyChanged(float LastEnergyValue);// 0x211f04f39041
	void OnRep_CurChargingDeathBoxChanged(DeathTreasureBox* PreBox);// 0x211e04f39041
	void OnRep_CruiseState();// 0x211d04f39041
	void OnRep_CharacterIsInRoom();// 0x211c04f39041
	void OnRep_CharacterCapsuleSizeOverride();// 0x211b04f39041
	void OnRep_CapsuleID();// 0x211a04f39041
	void OnRep_CanSkilledJump();// 0x211904f39041
	void OnRep_BGMInBattle();// 0x211804f39041
	void OnRep_BackpackPropellingMode();// 0x211704f39041
	void OnRep_AssignedSkinID(int OldSkinID);// 0x211604f39041
	void OnRep_AssignedCharacterID();// 0x211504f39041
	void OnRep_ActiveInfiniteAmmo();// 0x211404f39041
	void OnRep_ActiveEMP();// 0x211304f39041
	void OnPlayingScrubCharactersCreated();// 0x211204f39041
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x211104f39041
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x211004f39041
	void OnPlayerDataRepAsPlayer(byte TeamID);// 0x210f04f39041
	void OnPlayerBackpackEnergyUpdate();// 0x210e04f39041
	void OnPickupSettingChanged();// 0x210d04f39041
	void OnOwnTeammateHUDCreated(SolarPlayerState* SelfData);// 0x210c04f39041
	void OnOutVehicleStateChanged();// 0x210b04f39041
	void OnMultiRemindTeammateRescueNotify();// 0x210a04f39041
	void OnMaxEnergyUpdateEvent__DelegateSignature(float InMaxValue);// 0x210904f39041
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* LocalPlayerSpectateInfo);// 0x210804f39041
	void OnLocalPlayerSpectateMeStatusChanged__DelegateSignature(SolarCharacter* Character, bool bIsSpectating);// 0x210704f39041
	void OnLevelSequence_PlayAirborneJumpSound();// 0x210604f39041
	void OnJogSetClient__DelegateSignature(bool bSet);// 0x210504f39041
	void OnJetFlyStart__DelegateSignature(out const enum Type);// 0x210304f39041
	void OnHUDTeamPosSet__DelegateSignature(byte PosInTeam);// 0x210204f39041
	void OnHUDRescueBtnActivitySet__DelegateSignature(bool bIsActive);// 0x210104f39041
	void OnHUDNickNameSet__DelegateSignature(FString NickName);// 0x210004f39041
	void OnHUDDistanceSet__DelegateSignature(float Distance);// 0x20ff04f39041
	void OnHUDDistanceDisplaySet__DelegateSignature(bool bShown);// 0x20fe04f39041
	void OnHealthUpdated__DelegateSignature(const SolarCharacter* Character);// 0x20fd04f39041
	bool OnExitOpenTreasureBox();// 0x20fc04f39041
	bool OnEnterOpenTreasureBox();// 0x20fb04f39041
	void OnEnterCombat(enum battleType);// 0x20f904f39041
	void OnEnergyStateUpdateEvent__DelegateSignature(byte InEnergyState);// 0x20f804f39041
	void OnDrivingStateChanged(SolarVehiclePawn* SolarVehicle, enum NewDriveState, enum OldDriveState, int NewSeatIndex, int OldSeatIndex);// 0x20f704f39041
	void OnDetectRadarStation(bool bEnter, SolarRadarStation* InRadarStation);// 0x20f604f39041
	void OnDetectElectricShop(bool bEnter, SolarElectricShop* InElectricShop);// 0x20f504f39041
	void OnCurShieldValueChangedDelegate__DelegateSignature(enum WidgetState, float InCurValue, float InChangeValue, FString InSolarPlayerID);// 0x20f304f39041
	void OnCurEnergyUpdateEvent__DelegateSignature(float InCurValue, float InChangeValue);// 0x20f204f39041
	void OnConsumableNumChangedEvent__DelegateSignature();// 0x20f104f39041
	void OnClientMovementComponentEnabled();// 0x20f004f39041
	void OnChargeInfoUpdateEvent__DelegateSignature(SolarCharacter* OwnerCharacter, const float ChargeFrequency, const float ChargeQuantity);// 0x20ef04f39041
	void OnCharacterSpawnDeathBox(const bool bCheat, SolarPlayerState* InKiller);// 0x20ee04f39041
	void OnCharacterSkinReset__DelegateSignature();// 0x20ed04f39041
	void OnCharacterInhibitBattlePromptTagChanged(const GameplayTag Tag, int NewCount);// 0x20ec04f39041
	void OnCharacterDeathEnd();// 0x20eb04f39041
	void OnCharacterDaraSet__DelegateSignature(int DataID);// 0x20ea04f39041
	void OnCancelResurrectProgress(const int InTextId);// 0x20e904f39041
	void OnBatteryIdUpdateEvent__DelegateSignature(int InBatteryId);// 0x20e804f39041
	void OnBackpackWeaponPartUpdateEvent__DelegateSignature();// 0x20e704f39041
	void OnBackpackItemUpdateEvent__DelegateSignature();// 0x20e604f39041
	void OnBackpackEquipUpdateEvent__DelegateSignature();// 0x20e504f39041
	void OnBackpackEnergyUpdateEvent__DelegateSignature();// 0x20e404f39041
	void OnApplyDyingDamage(float DeltaTime);// 0x20e304f39041
	void NotifyLeaveSafeArea();// 0x20e204f39041
	void NotifyEnterSafeArea();// 0x20e104f39041
	void NetTriggerRadarStation();// 0x20e004f39041
	bool NetGetOnVehicle(SolarVehiclePawn* InVehicle, int SeatIndex);// 0x20df04f39041
	bool NetGetOffVehicle(bool bShouldEject, bool bNeedNotify);// 0x20de04f39041
	void MultiSetGetOffVehicleLocationAndRotation(const Vector DropLocation, float TeleportRotYaw);// 0x20dd04f39041
	void MultiResetCharacter(const Vector Location, const Rotator Rotation, bool bClearWeapons);// 0x20dc04f39041
	void MultiOnRebirth();// 0x20db04f39041
	void MulticastPlayDuckRollingHitCharacterEffect(SolarCharacter* TargetCharacter, const Vector HitLocation, bool bNoDamage);// 0x20da04f39041
	void MulticastAddHitTrace(const HitTraceInfo[] Infos);// 0x20d704f39041
	void MarkWorldByRep(out WorldMarkData NewWorldMarkData);// 0x20d604f39041
	void MarkWarningOnWorld();// 0x20d504f39041
	void MarkQuickChatOnWorld(int QuickChatID);// 0x20d404f39041
	void MarkPointOnWorld();// 0x20d304f39041
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x20d204f39041
	void KillMe();// 0x20d104f39041
	void K2_TryRemoveBillboardIcon(GameplayTag IconTag);// 0x20d004f39041
	void K2_SetCanShowBattlePrompt(bool NewValue);// 0x20cf04f39041
	void K2_RemoveGameplayTag(GameplayTag Tag, bool bReplicated);// 0x20ce04f39041
	void K2_PlaySoundGroup(FName SoundGroupName, SoundGroupPlayContextByCharacter Context);// 0x20cb04f39041
	bool K2_IsSwimming();// 0x20ca04f39041
	bool K2_IsInAir();// 0x20c904f39041
	bool K2_HasMatchingGameplayTag(GameplayTag Tag);// 0x20c804f39041
	WidgetComponent* K2_GetTeamHUDComp();// 0x20c704f39041
	HUD* K2_GetControlledHUD();// 0x20c604f39041
	void K2_AddGameplayTag(GameplayTag Tag, bool bReplicated);// 0x20c504f39041
	void K2_AddBillboardIcon(GameplayTag IconTag);// 0x20c404f39041
	bool IsWeaponsAvailable();// 0x20c304f39041
	bool IsWeaponCauseTeamDamage();// 0x20c204f39041
	bool IsViewportFocused();// 0x20c104f39041
	bool IsVerticalJetFlying();// 0x20c004f39041
	bool IsVehicleFire();// 0x20bf04f39041
	bool IsTeammateWithLocalOrSpecTargetPlayer(bool bIncludingSelf);// 0x20be04f39041
	bool IsTeammateWith(const SolarCharacter* Other);// 0x20bd04f39041
	bool IsTeamHUDValid();// 0x20bc04f39041
	bool IsSprinting();// 0x20bb04f39041
	bool IsSpectatingOtherPlayer();// 0x20ba04f39041
	bool IsSkyCharging();// 0x20b904f39041
	bool IsShieldValueLow();// 0x20b804f39041
	bool IsShieldMaxLevel();// 0x20b704f39041
	bool IsShieldFullyCharged();// 0x20b604f39041
	bool IsScopeWantedByWeapon(int Slot, enum ScopeType);// 0x20b504f39041
	bool IsScopeOpening();// 0x20b404f39041
	bool IsRescuing();// 0x20b304f39041
	bool IsReplayPlaying();// 0x20b204f39041
	bool IsReloading();// 0x20b104f39041
	bool IsRechargerEnough();// 0x20b004f39041
	bool IsPlayerLocallyControlledOrSpectated();// 0x20af04f39041
	bool IsPileCharging();// 0x20ae04f39041
	bool IsOwnerOffline();// 0x20ad04f39041
	bool IsOpeningTreasureBox();// 0x20ac04f39041
	bool IsNoCharging();// 0x20ab04f39041
	bool IsMovingOnGround(enum VelocityStatus);// 0x20a904f39041
	bool IsMeleeAttacking();// 0x20a804f39041
	bool IsMaxLevelInGame();// 0x20a704f39041
	bool IsLocalPlayerSpectateAsThirdPerson();// 0x20a604f39041
	bool IsLaunching();// 0x20a504f39041
	bool IsJumping();// 0x20a404f39041
	bool IsJetFlying();// 0x20a304f39041
	bool IsInZoneInvisibility();// 0x20a204f39041
	bool IsInVehicle();// 0x20a104f39041
	bool IsInSkywardDive();// 0x20a004f39041
	bool IsInsideVehicle();// 0x209f04f39041
	bool IsInShoulderOrScopeView();// 0x209e04f39041
	bool IsInScopeView();// 0x209d04f39041
	bool IsInRescueState();// 0x209c04f39041
	bool IsInMassInvisibilityPrepare();// 0x209b04f39041
	bool IsInMassInvisibility();// 0x209a04f39041
	bool IsInInvisibleStatus();// 0x209904f39041
	bool IsInDeathVerge();// 0x209804f39041
	bool IsHumanCharacter();// 0x209704f39041
	bool IsHorizontalJetFlying();// 0x209604f39041
	bool IsHoldingWeapon();// 0x209504f39041
	bool IsFullHealth();// 0x209404f39041
	bool IsFullBodyMeleeAttacking();// 0x209304f39041
	bool IsFiring();// 0x209204f39041
	bool IsExistWeaponSeatedVehicleSeat();// 0x209104f39041
	bool IsEnergyCostAndChargeDisabled();// 0x209004f39041
	bool IsE2M();// 0x208f04f39041
	bool IsDying();// 0x208e04f39041
	bool IsDoingAnyAttack();// 0x208d04f39041
	bool IsCruising();// 0x208c04f39041
	bool IsClimbing(bool bIncludeWallRun);// 0x208b04f39041
	bool IsCharacterDebugBlockDetectionEnabled();// 0x208a04f39041
	bool IsCanShowTeammateHUD();// 0x208904f39041
	bool IsBoxCharging();// 0x208804f39041
	bool IsBolting();// 0x208704f39041
	bool IsBigRechargerEnough();// 0x208604f39041
	bool IsBeingSpectated();// 0x208504f39041
	bool IsBeingRescue();// 0x208404f39041
	bool IsAllyWithPlayerState(const SolarPlayerState* Other);// 0x208304f39041
	bool IsAllyWithLocalPlayer();// 0x208204f39041
	bool IsAllyWithLocalOrSpecTargetPlayer(bool bIncludingSelf);// 0x208104f39041
	bool IsAllyWith(const SolarCharacter* Other);// 0x208004f39041
	bool IsAllEnergyFull();// 0x207f04f39041
	bool IsAiming();// 0x207e04f39041
	bool IsAbleToContinueRecharge();// 0x207d04f39041
	void InputRoleAbilityTacticalReleased();// 0x207c04f39041
	void InputRoleAbilityTacticalPressed();// 0x207b04f39041
	void InputRoleAbilitySuperReleased();// 0x207a04f39041
	void InputRoleAbilitySuperPressed();// 0x207904f39041
	void InputCancelRoleAbility();// 0x207804f39041
	void InitShieldUpgradeMatMaxPile();// 0x207704f39041
	void InitShieldPropertyByConfig();// 0x207604f39041
	void InitShieldOperatorTimeline();// 0x207504f39041
	void InitializeCharacterData(const int InCharacterId, const int InSkinID);// 0x207404f39041
	void InitGameStatisticEquipment();// 0x207304f39041
	void InitCharacterDefaultShield(out const SolarItemData InShiledID);// 0x207204f39041
	void IncreaseRechargedTimes();// 0x207104f39041
	void HideShieldUpgradeOperator();// 0x207004f39041
	void HideShieldRepairEffectItem();// 0x206f04f39041
	void HideShieldOperator();// 0x206e04f39041
	void HideRescueInjector();// 0x206d04f39041
	bool HasBlockBetweenUs(const Actor* A, const Actor* B, const bool bIsVehicle, const bool bShowLog);// 0x206c04f39041
	bool HasAnyShieldEquiped();// 0x206b04f39041
	bool HasAnyRecharger();// 0x206a04f39041
	bool HandleDying(byte ChangeType, Controller* InstigatorController);// 0x206904f39041
	<enum,int> GetWeaponPartsMap();// 0x206704f39041
	int[] GetWeaponPartsArray();// 0x206604f39041
	bool GetWeaponItemDataBySlot(const int InSlot, out SolarItemData ItemData);// 0x206504f39041
	<int,SolarItemData> GetWeaponDataMap();// 0x206404f39041
	int GetVerticalJetFlyTotalTimes();// 0x206304f39041
	int GetVerticalJetFlyRestTimes();// 0x206204f39041
	void GetVerticalJetFlyCharging(out float OutValue, out float OutPercent);// 0x206104f39041
	void GetVerticalJetFlyCD(out float OutValue, out float OutPercent);// 0x206004f39041
	SolarVehicleWeapon* GetVehicleWeapon();// 0x205f04f39041
	byte GetVehicleAbilityCounter();// 0x205e04f39041
	<enum,SolarItemData> GetTypeKeyItemMap();// 0x205d04f39041
	float GetTreatmentRemaining();// 0x205c04f39041
	float GetTreatmentDuration();// 0x205b04f39041
	void GetTeamHUDTranslucentData(out float CheckDistance, out float TranslucentValue);// 0x205a04f39041
	UserWidget* GetTeamHUD();// 0x205904f39041
	byte GetSteppedSurfaceType();// 0x205704f39041
	SolarSpectateInfo* GetSpectateInfo();// 0x205604f39041
	AnimInstance* GetSpecAnimInstance(enum SpecAnimType);// 0x205404f39041
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x205304f39041
	SolarPlayerState* GetSolarPlayerStateFromSameTeam();// 0x205204f39041
	SolarPlayerState* GetSolarPlayerStateFromSameAlly();// 0x205104f39041
	SolarPlayerState* GetSolarPlayerState();// 0x205004f39041
	FString GetSolarPlayerID();// 0x204f04f39041
	SolarPlayerController* GetSolarPlayerController(bool bSkipPossessCheck);// 0x204e04f39041
	SolarCharacterMovementComponent* GetSolarCharacterMovementComponent();// 0x204d04f39041
	SolarBotAIController* GetSolarAIController();// 0x204c04f39041
	SolarAbilitySystemComponent* GetSolarAbilitySystemComponentSimple();// 0x204b04f39041
	Vector GetSocketLocationAtPrimaryMesh(out const FName InSocketName);// 0x204a04f39041
	float GetSkydiveLandingHeight();// 0x204904f39041
	CharacterSkinConfig* GetSkinConfig(const int InSkinID);// 0x204804f39041
	int GetShieldWorthByID(const int InShieldID);// 0x204704f39041
	int GetShieldUpgradeNeedMatNum();// 0x204604f39041
	int GetShieldUpgradeMatNum();// 0x204504f39041
	int GetShieldUpgradeMatMaxPile();// 0x204404f39041
	float GetShieldRecoveryAmount();// 0x204304f39041
	float GetShieldRechargeRemainningTime();// 0x204204f39041
	float GetShieldRechargeDuration();// 0x204104f39041
	int GetShieldMaxLevel();// 0x204004f39041
	SolarCharacterMovementComponent* GetSafeSolarCharacterMovement();// 0x203f04f39041
	enum GetRoleAbilityState(byte RoleAbilityIndex);// 0x203d04f39041
	SolarUAVRescue* GetRescuingUAV();// 0x203c04f39041
	SolarCharacter* GetRescuingCharacter();// 0x203b04f39041
	float GetRescueTime();// 0x203a04f39041
	float GetRecoveryDuartionModify();// 0x203904f39041
	float GetRecoveryAmountModify();// 0x203804f39041
	SolarUAVRescue* GetPermanentRescueUAV();// 0x203704f39041
	Rotator GetNormalizeCameraRotation();// 0x203604f39041
	bool GetNewItemData(int InItemID, int InItemNum, out SolarItemData OutItemData);// 0x203504f39041
	byte GetMyTeamID();// 0x203404f39041
	float GetMaxShieldValue();// 0x203304f39041
	float GetMaxExtraEnergy();// 0x203204f39041
	float GetMaxEnergy();// 0x203104f39041
	SolarPlayerState* GetLastDownBy();// 0x203004f39041
	int GetJetPackModuleLevel(const bool bVertical);// 0x202f04f39041
	int GetItemNumById(const int InItemID);// 0x202e04f39041
	int GetItemMaxPile(int InItemID);// 0x202d04f39041
	bool GetItemDataByType(const enum ItemType, out SolarItemData ItemData);// 0x202c04f39041
	bool GetItemDataById(const int InItemID, out SolarItemData ItemData);// 0x202b04f39041
	bool GetIsActiveEMP();// 0x202a04f39041
	Vector GetInputVector();// 0x202904f39041
	<int,SolarItemData> GetIdKeyItemMap();// 0x202804f39041
	int GetHorizontalJetFlyTotalTimes();// 0x202704f39041
	int GetHorizontalJetFlyRestTimes();// 0x202604f39041
	void GetHorizontalJetFlyCharging(out float OutValue, out float OutPercent);// 0x202504f39041
	void GetHorizontalJetFlyCD(out float OutValue, out float OutPercent);// 0x202404f39041
	int GetGenericSkillLevel();// 0x202304f39041
	SolarCharacter* GetFirstPlayerControllerCharacter(World* World);// 0x202204f39041
	float GetFactorialAttributeModifies(int AttributeID);// 0x202104f39041
	int GetExtraEnergyModuleID();// 0x202004f39041
	float GetEnergyConsumptionModify();// 0x201f04f39041
	enum GetDriveState();// 0x201d04f39041
	Actor* GetDamagerCauserActor();// 0x201c04f39041
	float GetCurrShieldValue();// 0x201b04f39041
	int GetCurrShieldID();// 0x201a04f39041
	float GetCurrExtraEnergy();// 0x201904f39041
	SolarPlayerWeapon* GetCurrentWeapon();// 0x201804f39041
	enum GetCurrentWalkMode();// 0x201704f39041
	float GetCurrentVehicleAbilityCooldownRemaining(byte AbilityIndex);// 0x201604f39041
	float GetCurrentVehicleAbilityCooldownDuration(byte AbilityIndex);// 0x201504f39041
	int GetCurrentShieldLevel();// 0x201404f39041
	enum GetCurrentCustomJumpType();// 0x201204f39041
	float GetCurrEnergy();// 0x201104f39041
	float GetCumulativeAttributeModifies(int AttributeID);// 0x201004f39041
	PlayerController* GetControllingOrReplayController();// 0x200f04f39041
	StaticMesh* GetClipMeshOfHoldingWeapon();// 0x200e04f39041
	int GetClassTypeSkillLevel();// 0x200d04f39041
	void GetChargingStateForUI(out bool IsSky, out bool IsPile, out bool IsBox, out bool IsE2M);// 0x200c04f39041
	Rotator GetCharacterLookAt();// 0x200b04f39041
	int GetCharacterCameraConfigFOVSection();// 0x200a04f39041
	float GetCharacterCameraConfigFOV();// 0x200904f39041
	SolarCharacterCameraComponent* GetCharacterCamera();// 0x200804f39041
	bool GetCanShowBattlePrompt();// 0x200704f39041
	Rotator GetCameraRotation();// 0x200604f39041
	Vector GetCameraLocation();// 0x200504f39041
	void GetAllSkydiveLandingEffects(out ParticleSystemComponent*[] OutEffects);// 0x200404f39041
	void GetAllSkydiveFlyingEffects(out ParticleSystemComponent*[] OutEffects);// 0x200304f39041
	void GatheringDeathBoxItem(const bool bCheat, SolarPlayerState* InKiller);// 0x200204f39041
	void GameStatisticsWeaponHit(SolarCharacterBase* DamageCauserCharacter, out const SolarPointDamageEvent DamageInfo, const float ActualDamage);// 0x200104f39041
	void GameStatisticsVehicleLanded(out const HitResult Hit);// 0x200004f39041
	void GameStatisticsVehicleInAir();// 0x1fff04f39041
	void GameStatisticsVehicleHit(Actor* DamageCauser, float HitDamage);// 0x1ffe04f39041
	void GameStatisticsItemChange(const int ItemID, const enum PickType, const int OldNum, const int NewNum, const int TriggerType);// 0x1ffc04f39041
	void GameStatisticsGodWeapon();// 0x1ffb04f39041
	void GameStatisticsGetOnVehicleReason(int Type, FString Type_Parameter);// 0x1ffa04f39041
	void GameStatisticsGetOffVehicleReason(const SolarWeapon* CurrentWeapon, FString Param);// 0x1ff904f39041
	void GameStatisticsEquipment();// 0x1ff804f39041
	void GameStatisticsElectricShopActivated(out const Vector InLocation);// 0x1ff704f39041
	void GameStatisticsDamageReason(out const SolarPointDamageEvent InDamageEvent, const float ActualDamage);// 0x1ff604f39041
	void GameStatisticsCharacterSkill(bool bIsSuperSkill);// 0x1ff504f39041
	void GameStatisticsBackpackFly(out const BackpackStatisticsInfo InBackpackStatisticsInfo);// 0x1ff304f39041
	void ForceBreakSprintState();// 0x1ff204f39041
	void FindMostValuableItemClient(const SolarItemData[] ItemData, const byte FromWhichTeammate);// 0x1ff104f39041
	void ExitDyingMovement();// 0x1ff004f39041
	void ExitDeathVerge(bool bClientSimulation);// 0x1fef04f39041
	void ExecuteGM(FString GMType, FString Param1, FString Param2);// 0x1fee04f39041
	void EnterVehicleWholeShield(MaterialInterface* ShieldMaterialSource);// 0x1fed04f39041
	void EnterVehicleStealth();// 0x1fec04f39041
	void EnterDyingMovement();// 0x1feb04f39041
	void EnterDeathVerge(bool bClientSimulation);// 0x1fea04f39041
	void EnableCharacterDebugInfo_BlockDetection(bool bEnabled);// 0x1fe904f39041
	void DoReceivingPoisonDamage();// 0x1fe804f39041
	void DoOperation(enum OperationType, Object* Target);// 0x1fe604f39041
	void DisCardShield();// 0x1fe504f39041
	void CreateTreasureBoxOperator();// 0x1fe404f39041
	void CreateShieldUpgradeOperator();// 0x1fe304f39041
	void CreateShieldRepairEffectItem();// 0x1fe204f39041
	void CreateShieldOperator();// 0x1fe104f39041
	WidgetComponent* CreateOwnTeammateHUDInternal(SolarPlayerState* SelfData);// 0x1fe004f39041
	WidgetComponent* CreateOwnTeammateHUD();// 0x1fdf04f39041
	void CompleteRescuingImmediate();// 0x1fde04f39041
	void ClientUpdateTracking(int Mode, int Index, const Vector Location);// 0x1fdd04f39041
	void ClientSuperRadarOnceScanned(int ScannedNum);// 0x1fdc04f39041
	void ClientStartRecharge(const float InCurrentValue, const float InRecoveryDuration, const float InRecoveryAmount, const enum ShieldRechargeType, const int InShieldContributorCharacterId, bool bFixPreAdd);// 0x1fda04f39041
	void ClientSetServerBlockDetectionResult(FString Info);// 0x1fd904f39041
	void ClientRPCDisplayAllElectricShops(const Vector[] AllPositions);// 0x1fd804f39041
	void ClientRestoreActiveAbilitiesOnReconnected(const RestoreAbilityInfo[] SpecHandles);// 0x1fd604f39041
	void ClientRefreshAllShieldShops();// 0x1fd504f39041
	void ClientReceiveVehicleWeaponMessageArray(const PlayerWeaponMsg[] InPlayerWeaponMessageArray);// 0x1fd404f39041
	void ClientReceiveVehicleWeaponMessage(const PlayerWeaponMsg InPlayerWeaponMessage);// 0x1fd304f39041
	void ClientReceiveScanResult(const ScannedInfo_NetQuantize[] ScannedDatas, const float SpanTimer);// 0x1fd104f39041
	void ClientReceiveCharacterWeaponMessageArray(const PlayerWeaponMsg[] InPlayerWeaponMessageArray);// 0x1fd004f39041
	void ClientReceiveCharacterWeaponMessage(const PlayerWeaponMsg InPlayerWeaponMessage);// 0x1fcd04f39041
	void ClientRadarOnceScanned(int ScannedNum);// 0x1fcc04f39041
	void ClientPlaySoundGroup(const FName SoundGroupName);// 0x1fcb04f39041
	void ClientPlayHitEffect(const HitResult InHitResult, enum InHitType, const Vector InRelativeHitLocation, SolarCharacter* InCauserOwner, SolarWeapon* InCauser, int InWeaponID, int InWeaponSkinID);// 0x1fca04f39041
	void ClientPlayDeathShow(enum InHitType, SolarCharacter* InInstigator, Actor* InCauser, int InWeaponID, int InWeaponSkinID, bool bInVictoryDeath);// 0x1fc804f39041
	void ClientOpenAirdropResponse(const bool bIsOpening);// 0x1fc704f39041
	void ClientOnTriggerCharacterDown();// 0x1fc604f39041
	void ClientOnShieldUpgrade(int CurrentShieldLevel);// 0x1fc504f39041
	void ClientOnShieldReduceEffect(bool bBroken);// 0x1fc404f39041
	void ClientOnReconnecting(const ReconnectionParams Params);// 0x1fc204f39041
	void ClientOnContinuousTreatmentStarted();// 0x1fc104f39041
	void ClientNotifyMarkedBySuperRadar(float InRadarLifeTime, const GameplayTag InTag);// 0x1fc004f39041
	void ClientNotifyMarkedByOnceScan(float InRadarLifeTime, const GameplayTag InTag);// 0x1fbf04f39041
	void ClientNotifyGameProgressCondition(out const GameplayTag InProgressTag);// 0x1fbe04f39041
	void ClientNotifyCharacterExposed(float InRadarLifeTime, const GameplayTag InTag);// 0x1fbd04f39041
	void ClientNoticePickup(const int ItemID, const int ItemQuality);// 0x1fbc04f39041
	void ClientLeaveFromSkywardDiveLauncher(SkywardDiveLauncher* InLauncher);// 0x1fbb04f39041
	void ClientKilledCharacter();// 0x1fba04f39041
	void ClientHideShieldOperator();// 0x1fb904f39041
	void ClientEnterAndRefreshSkywardDiveLauncher(SkywardDiveLauncher* InLauncher, bool bInHasAvailableDevice);// 0x1fb804f39041
	void ClientCreateTreatEffect();// 0x1fb704f39041
	void ClientCompleteRecharge(const float InCurrentValue, const float InChangeValue);// 0x1fb604f39041
	void ClientCancelRecharge(const bool BreakAnimOnly, const float InCurrentValue, const float InChangeValue, const float MaxShieldVal, const enum CancelReason);// 0x1fb404f39041
	void ClientBroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, byte RoleAbilityIndex);// 0x1fb304f39041
	void ClientAckValidShieldUpgradeInteract(SolarShieldUpgradeItemShop* InShop, enum AckReason);// 0x1fb104f39041
	void ClearGameStatisticEquipment();// 0x1fb004f39041
	void ClearDeathBoxData();// 0x1faf04f39041
	float CheckSelfAltitudeInstantlyByTrace(out HitResult HitGeography, bool bCheckEveryFrame, float traceDistOverride, bool bSimpleCheck);// 0x1fae04f39041
	void ChangeSeatByIndex(int TargetSeatIndex);// 0x1fad04f39041
	void ChangeSeatByDefault();// 0x1fac04f39041
	void CGM_SpawnDeathBox();// 0x1fab04f39041
	void CGM_EnterDeath();// 0x1faa04f39041
	bool CanStickOutOfVehicle(bool bIgnoreSelfWeaponCheck);// 0x1fa904f39041
	bool CanRebirth();// 0x1fa804f39041
	bool CanOperateBackpack();// 0x1fa704f39041
	bool CanMarkPointOnWorld();// 0x1fa604f39041
	void CancelVehicleAbility();// 0x1fa504f39041
	void CancelTreatment();// 0x1fa404f39041
	void CalculateBubbleKillNum(out SolarCharacter*[] InstigatorCharacters, Actor* AttackWeapon);// 0x1fa304f39041
	void BroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, byte RoleAbilityIndex);// 0x1fa204f39041
	void BreakRechargeShield();// 0x1fa104f39041
	void BindUpdateHUDToOnHealthUpdateDelegateProc(const SolarCharacter* Character);// 0x1fa004f39041
	void BindLocalPlayerSpectateDelegates(SolarSpectateInfo* LocalSpecInfo);// 0x1f9f04f39041
	void BindActorToSelfTeam(Actor* Actor);// 0x1f9e04f39041
	void BeginplayPending__DelegateSignature();// 0x1f9d04f39041
	void BeginPlayBlueprint();// 0x1f9c04f39041
	void AutoMarkItemForTeammateClient(const int64 ItemThisID);// 0x1f9b04f39041
	void ApplyVehicleAbility(byte AbilityIndex);// 0x1f9a04f39041
	void AfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1f9904f39041
	void AfterDealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1f9104f39041
	void AddTrackingTarget(SolarCharacterBase* Tracked);// 0x1f9004f39041
	void AddTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag, float Value);// 0x1f8f04f39041
	void AddDebugString(FString DebugString);// 0x1f8e04f39041
	void AddCurrExtraEnergyValue(float DeltaEnergy);// 0x1f8d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterBase.Character.Pawn.Actor.Object
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x4f8, Size: 0x4]
	SolarAbilityComponent* SolarAbilityComponent;//[Offset: 0x500, Size: 0x8]
	InWaterActorInfo InWaterActorInfo;//[Offset: 0x508, Size: 0x8]
	SolarCharacterBase* InstigatorCharacter;//[Offset: 0x510, Size: 0x8]
	ParticleSystem* DeathEffectSoft;//[Offset: 0x518, Size: 0x28]
	float VehicleCollisionProtectionTimeOnJumpingOff;//[Offset: 0x574, Size: 0x4]
	float PushYScale;//[Offset: 0x578, Size: 0x4]
	float PushXScaleOnSwimming;//[Offset: 0x57c, Size: 0x4]
	float PushYScaleOnSwimming;//[Offset: 0x580, Size: 0x4]
	float PushZScaleOnSwimming;//[Offset: 0x584, Size: 0x4]
	SolarAbilitySystemComponent* SolarAbilitySystemComponent;//[Offset: 0x588, Size: 0x8]
	bool bHoldSignificanceWhenDyingForAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0x5b8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x5c0, Size: 0x8]
	CharacterSoundConfig* CharacterSoundConfig;//[Offset: 0x5c8, Size: 0x8]
	void SetAttributeWithGAS(const GameplayAttribute InAttribute, byte ModifyType, float InValue);// 0x1f8b04f39041
	void ResetAudioComponentTransform();// 0x1f8a04f39041
	void PostAkEventByName(FString EventName1, FString EventName2);// 0x1f8904f39041
	void OnRep_InWaterActorInfo(out const InWaterActorInfo OldInfo);// 0x1f8704f39041
	bool K2_IsInWater();// 0x1f8604f39041
	bool K2_IsAlive();// 0x1f8504f39041
	bool IsPlayerLocallyControlled();// 0x1f8404f39041
	bool IsInWater();// 0x1f8304f39041
	bool IsInSight(out const Vector InTargetPos, const float InMaxAngle, const bool bHorizontalOnly);// 0x1f8204f39041
	bool IsInRoom();// 0x1f8104f39041
	bool IsBlocked(const Actor* InOtherActor);// 0x1f8004f39041
	bool InSameTeamWithFirstPlayerController();// 0x1f7f04f39041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x1f7e04f39041
	FString GetSoundEventString(enum SoundOpt);// 0x1f7c04f39041
	SolarAkGameObject* GetSolarAkGameObject();// 0x1f7b04f39041
	SolarAbilitySystemComponent* GetSafeASC();// 0x1f7a04f39041
	float GetMaxHealth();// 0x1f7904f39041
	float GetLockHealth();// 0x1f7804f39041
	float GetCurrentHealth();// 0x1f7704f39041
	enum GetCharacterType();// 0x1f7504f39041
	Vector GetCharacterLocation(bool bMiddle);// 0x1f7404f39041
	Vector GetCharacterDirection();// 0x1f7304f39041
	SolarBackpackComponent* GetBackpack();// 0x1f7204f39041
	void ClientOnPushedByVehicle();// 0x1f7104f39041
	bool CheckOpenParticleOptimization(int Bias);// 0x1f7004f39041
	void ChangeCurrentHealthWithGAS(byte ModifyType, float InValue);// 0x1f6f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InWaterActorInfo
	bool bIsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float WaterLineHeight;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpawnedActorHandle
	uint32 Handle;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReconnectionParams
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSpectateInfo.Actor.Object
	delegate OnBeginUpdateSpectateInfo;//[Offset: 0x228, Size: 0x10]
	delegate OnStopUpdateSpectateInfo;//[Offset: 0x238, Size: 0x10]
	delegate OnOtherPlayerBeginSpectateMe;//[Offset: 0x248, Size: 0x10]
	delegate OnOtherPlayerStopSpectateMe;//[Offset: 0x258, Size: 0x10]
	delegate OnBeforeSpectateTargetChange;//[Offset: 0x268, Size: 0x10]
	delegate OnSpectateTargetChanged;//[Offset: 0x278, Size: 0x10]
	delegate OnSpectatePhaseChanged;//[Offset: 0x288, Size: 0x10]
	delegate OnSwitchSpectateTargetFailed;//[Offset: 0x298, Size: 0x10]
	delegate OnSpectatorOfMyTargetChanged;//[Offset: 0x2a8, Size: 0x10]
	delegate OnSpectateCharacterOfMyTargetReadied;//[Offset: 0x2b8, Size: 0x10]
	enum SpectatePhase;//[Offset: 0x2c8, Size: 0x1]
	SolarPlayerState* SpectateTargetPlayerState;//[Offset: 0x2d0, Size: 0x8]
	SolarPlayerState*[] PlayersSpectatingMyTarget;//[Offset: 0x2e8, Size: 0x10]
	SolarPlayerState*[] PlayersSpectatingMe;//[Offset: 0x2f8, Size: 0x10]
	bool bIsServerRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	SolarReplayManager* ReplayManager;//[Offset: 0x320, Size: 0x8]
	SpectateConditions SpectateConditions;//[Offset: 0x328, Size: 0x20]
	GiftSenderInfo[] SendGiftPlayerInfo;//[Offset: 0x3c8, Size: 0x10]
	InteractiveTaskStatus TaskStatus;//[Offset: 0x3d8, Size: 0x78]
	DataTable* InteractiveTaskTable;//[Offset: 0x450, Size: 0x8]
	FString TaskTablePath;//[Offset: 0x458, Size: 0x10]
	SolarPlayerState* LatestAttacker;//[Offset: 0x468, Size: 0x8]
	SolarPlayerState* LatestVictim;//[Offset: 0x470, Size: 0x8]
	float TotalCausedDamage;//[Offset: 0x488, Size: 0x4]
	Rotator PlayerCameraRotation;//[Offset: 0x48c, Size: 0xc]
	ReplicateItemData[] CharacterBackpackItems;//[Offset: 0x498, Size: 0x10]
	ReplicateMaxPileData[] CharacterBackpackItemMaxPiles;//[Offset: 0x4a8, Size: 0x10]
	float CharacterVJetChargeTime;//[Offset: 0x4b8, Size: 0x4]
	int CharacterVJetTotalTimes;//[Offset: 0x4bc, Size: 0x4]
	int CharacterVJetRestTimes;//[Offset: 0x4c0, Size: 0x4]
	int CharacterVJetModuleLevel;//[Offset: 0x4c4, Size: 0x4]
	float CharacterVJetStartChargeTime;//[Offset: 0x4c8, Size: 0x4]
	float CharacterHJetChargeTime;//[Offset: 0x4cc, Size: 0x4]
	int CharacterHJetTotalTimes;//[Offset: 0x4d0, Size: 0x4]
	int CharacterHJetRestTimes;//[Offset: 0x4d4, Size: 0x4]
	int CharacterHJetModuleLevel;//[Offset: 0x4d8, Size: 0x4]
	float CharacterHJetStartChargeTime;//[Offset: 0x4dc, Size: 0x4]
	CharacterRoleAbilityInfo[] CharacterRoleAbilitiesInfo;//[Offset: 0x4e0, Size: 0x10]
	float MassInvisibilityEffectRemainingTime;//[Offset: 0x4f0, Size: 0x4]
	RepCountdownData SpectateCountdownData;//[Offset: 0x4f4, Size: 0x2c]
	BattleUpgradeEffectParamData[] BattleUpgradeEffectData;//[Offset: 0x520, Size: 0x10]
	int ExtraARMag;//[Offset: 0x530, Size: 0x4]
	int ExtraSGMag;//[Offset: 0x534, Size: 0x4]
	bool bExposedByRadar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	VehicleSpectateInfo VehicleSpectateInfo;//[Offset: 0x540, Size: 0x30]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 0x1]
	void SetSpectateTargetForPlayingReplay(SolarPlayerState* TargetPlayerState);// 0x1dd504f39041
	void ServerStopSpectateOtherPlayer_Internal();// 0x1dd404f39041
	void ServerStopSpectateOtherPlayer();// 0x1dd304f39041
	void ServerSpectatePreviousPlayer();// 0x1dd204f39041
	void ServerSpectateNextPlayer();// 0x1dd104f39041
	void ServerSetSpectateConditions_Internal(const SpectateConditions InSpectateConditions);// 0x1dd004f39041
	void ServerSetSpectateConditions(out const SpectateConditions InSpectateConditions);// 0x1dcf04f39041
	void ServerSetClientRecording(bool bInIsClientRecording);// 0x1dce04f39041
	void ServerSendGiftAction(const int GiftID, const int Num);// 0x1dcd04f39041
	void ServerRequestSendTask(int InTaskID);// 0x1dcc04f39041
	void ServerRequestIncreaseTargetTaskLevel();// 0x1dcb04f39041
	void ServerRequestAvailableTask();// 0x1dca04f39041
	void ServerChangeLikeValue(const int Value, const int AddInteractValue, enum ActionType);// 0x1dc904f39041
	void ServerBeginSpectateOtherPlayer_Internal();// 0x1dc804f39041
	void ServerBeginSpectateOtherPlayer();// 0x1dc704f39041
	bool SendTask(int InTaskID);// 0x1dc604f39041
	void SendGift(const int GiftID, const int Num);// 0x1dc504f39041
	void RequestSendTask(int InTaskID);// 0x1dc404f39041
	void RequestIncreaseTargetTaskLevel();// 0x1dc304f39041
	void RequestAvailableTask();// 0x1dc204f39041
	void OnTargetSpecInfoSetToItsPlayerState(SolarSpectateInfo* TargetSpecInfo);// 0x1dc104f39041
	void OnSwitchSpectateTargetFailed__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1dc004f39041
	void OnStopUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1dbf04f39041
	void OnStopRecordingReplay();// 0x1dbe04f39041
	void OnStartRecordingReplay();// 0x1dbd04f39041
	void OnSpectatorOfMyTargetChanged__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1dbc04f39041
	void OnSpectateTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x1dbb04f39041
	void OnSpectatePhaseChanged__DelegateSignature(enum CurrentPhase);// 0x1db904f39041
	void OnSpectateCharacterOfMyTargetReadied__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1db804f39041
	void OnRep_VehicleSpectateInfo(out const VehicleSpectateInfo PreviousVehicleSpectateInfo);// 0x1db704f39041
	void OnRep_TotalCausedDamage();// 0x1db604f39041
	void OnRep_TaskStatus();// 0x1db504f39041
	void OnRep_SpectateTargetPlayerState(SolarPlayerState* LastTarget);// 0x1db404f39041
	void OnRep_SpectatePhase();// 0x1db304f39041
	void OnRep_SpectateCountdownData();// 0x1db204f39041
	void OnRep_PlayersSpectatingMyTarget();// 0x1db104f39041
	void OnRep_PlayersSpectatingMe();// 0x1db004f39041
	void OnRep_ExposedByRadar();// 0x1daf04f39041
	void OnRep_CharacterVJetTotalTimes();// 0x1dae04f39041
	void OnRep_CharacterVJetRestTimes();// 0x1dad04f39041
	void OnRep_CharacterVJetModuleLevel();// 0x1dac04f39041
	void OnRep_CharacterRoleAbilitiesInfo();// 0x1dab04f39041
	void OnRep_CharacterHJetTotalTimes();// 0x1daa04f39041
	void OnRep_CharacterHJetRestTimes();// 0x1da904f39041
	void OnRep_CharacterHJetModuleLevel();// 0x1da804f39041
	void OnRep_CharacterBackpackItems();// 0x1da704f39041
	void OnRep_bIsServerRecording();// 0x1da604f39041
	void OnRep_BattleUpgradeEffectData();// 0x1da504f39041
	void OnOtherPlayerStopSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x1da404f39041
	void OnOtherPlayerBeginSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x1da304f39041
	void OnOpenAirBoxNum(enum InStatType);// 0x1da204f39041
	void OnLikeActionCalled(const int Value, const int AddInteractValue, enum ActionType);// 0x1da104f39041
	void OnIncreaseKillNumWithWeaponType(enum InStatType, int InWeaponID);// 0x1da004f39041
	void OnIncreaseKillNumWithPunch(enum InStatType);// 0x1d9f04f39041
	void OnIncreaseKillNumWithAnyVehicle(enum InStatType);// 0x1d9e04f39041
	void OnGiftActionCalled(const int GiftID, const int Num);// 0x1d9d04f39041
	void OnDamageChanged__DelegateSignature(float Damage);// 0x1d9c04f39041
	void OnCurrentPlayerCountChanged();// 0x1d9b04f39041
	void OnBeginUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1d9a04f39041
	void OnBeforeSpectateTargetChange__DelegateSignature(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x1d9904f39041
	void OnAvailableAirDropsNumChanged();// 0x1d9804f39041
	bool NeedUpdateSpectateInfo();// 0x1d9704f39041
	bool IsSpectatingOtherPlayer();// 0x1d9604f39041
	bool IsRecordingReplay();// 0x1d9504f39041
	bool IsClientRecording();// 0x1d9404f39041
	bool IncreaseTaskLevel(SolarPlayerState* SendPlayer);// 0x1d9304f39041
	SolarPlayerState*[] GetSpectatorsOfMyTarget();// 0x1d9204f39041
	SolarPlayerState*[] GetSpectatingMePlayerStates();// 0x1d9104f39041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x1d9004f39041
	SolarCharacter* GetSpectateTargetCharacter();// 0x1d8f04f39041
	void GetSpectateReportInfo(out SpectateReportInfo SpectateReportInfo, bool HasNextTarget);// 0x1d8d04f39041
	SolarSpectateInfo* GetSpectateInfoOfMyTarget();// 0x1d8c04f39041
	SpectateConditions GetSpectateConditions();// 0x1d8904f39041
	SolarPlayerState* GetSolarPlayerState();// 0x1d8804f39041
	bool GetInteractiveTaskConfigByID(int InTaskID, out InteractiveTaskConfig OutConfig);// 0x1d8704f39041
	int[] GetAvailableTaskByRandom();// 0x1d8604f39041
	void GetAllInteractiveTaskConfigFromTable(out InteractiveTaskConfig[] OutAllConfig);// 0x1d8104f39041
	SolarPlayerState*[] GetAllAlivePlayers();// 0x1d8004f39041
	bool CostCurrencyByTaskAction(int InTaskID, int CurTasklevel);// 0x1d7f04f39041
	void ClientSetVehicleSpectateInfo(const VehicleSpectateInfo InSpectateInfo);// 0x1d7c04f39041
	void ClientNotifyTaskActionResult(enum ActionType, int InTaskID, int CurTasklevel, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, int NowLikeValue);// 0x1d7b04f39041
	void ClientNotifySelfTaskActionResult(enum ActionType, int InTaskID, int CurTasklevel, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, int NowLikeValue);// 0x1d7a04f39041
	void ClientNotifySelfLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x1d7904f39041
	void ClientNotifyLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x1d7704f39041
	void ClientNotifyAvailableTaskResult(const int[] AvailableTask);// 0x1d7604f39041
	bool CheckIsCanSpectateOthers();// 0x1d7504f39041
	bool CanISpectate(const SolarPlayerState* Target);// 0x1d7404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerState.PlayerState.Info.Actor.Object
	delegate OnTeammatePlayerStateRepDelegate;//[Offset: 0x328, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate;//[Offset: 0x338, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInBattlePhaseDelegate;//[Offset: 0x348, Size: 0x10]
	delegate OnPlayerChangedGoldsDelegate;//[Offset: 0x358, Size: 0x10]
	delegate OnOBPlayerRepDelegate;//[Offset: 0x368, Size: 0x10]
	int Gold;//[Offset: 0x378, Size: 0x4]
	int[] CostedGolds;//[Offset: 0x380, Size: 0x10]
	int[] ReceivedGolds;//[Offset: 0x390, Size: 0x10]
	int CharacterId;//[Offset: 0x3a0, Size: 0x4]
	int SkinId;//[Offset: 0x3a4, Size: 0x4]
	FString ClanId;//[Offset: 0x3a8, Size: 0x10]
	FString ClanName;//[Offset: 0x3b8, Size: 0x10]
	FString ClanShortName;//[Offset: 0x3c8, Size: 0x10]
	int BagId;//[Offset: 0x3d8, Size: 0x4]
	int CapsuleID;//[Offset: 0x3dc, Size: 0x4]
	FString SolarPlayerID;//[Offset: 0x3e0, Size: 0x10]
	FString NickName;//[Offset: 0x3f0, Size: 0x10]
	uint32 BattleVoiceId;//[Offset: 0x400, Size: 0x4]
	int64 RTCType;//[Offset: 0x408, Size: 0x8]
	uint64 UserId;//[Offset: 0x410, Size: 0x8]
	byte PosInTeam;//[Offset: 0x418, Size: 0x1]
	int CharacterLevel;//[Offset: 0x41c, Size: 0x4]
	int AvatarID;//[Offset: 0x420, Size: 0x4]
	FString AvatarUrl;//[Offset: 0x428, Size: 0x10]
	int AvatarFrameID;//[Offset: 0x438, Size: 0x4]
	int Gender;//[Offset: 0x43c, Size: 0x4]
	int AccountLevel;//[Offset: 0x440, Size: 0x4]
	int FriendNum;//[Offset: 0x444, Size: 0x4]
	int RoleID;//[Offset: 0x448, Size: 0x4]
	MedalInfo[] Medals;//[Offset: 0x450, Size: 0x10]
	BattleCharacterData[] AllCharacterData;//[Offset: 0x460, Size: 0x10]
	CharacterSkin[] AllSkins;//[Offset: 0x470, Size: 0x10]
	int[] AllVoices;//[Offset: 0x480, Size: 0x10]
	BattleCharacterData CurUsedCharacterData;//[Offset: 0x490, Size: 0x60]
	int[] KillReports;//[Offset: 0x4f0, Size: 0x10]
	ExpRankMedalData[] AllExpRankMedalData;//[Offset: 0x500, Size: 0x10]
	LastBattleInfo LastBattleInfo;//[Offset: 0x510, Size: 0x1c]
	FString[] ReCombatLimitPlayer;//[Offset: 0x530, Size: 0x10]
	int RoleUltimateSkillCDState;//[Offset: 0x540, Size: 0x4]
	SettlementParam_ExtraRewardInfo[] ExtraRewards;//[Offset: 0x548, Size: 0x10]
	SettlementReward[] SettlementRewards;//[Offset: 0x558, Size: 0x10]
	SettlementCrateReward[] CrateRewards;//[Offset: 0x568, Size: 0x10]
	uint32 PlayerNumber;//[Offset: 0x578, Size: 0x4]
	<int,int> VehicleSkinData;//[Offset: 0x580, Size: 0x50]
	float CurrentHealth;//[Offset: 0x5d0, Size: 0x4]
	float MaxHealth;//[Offset: 0x5d4, Size: 0x4]
	ShieldInfo CurShieldInfo;//[Offset: 0x5d8, Size: 0x8]
	byte ReviveItemNum;//[Offset: 0x5e0, Size: 0x1]
	byte ReviveCountByItem;//[Offset: 0x5e1, Size: 0x1]
	int TalentID;//[Offset: 0x5e4, Size: 0x4]
	int LikeValue;//[Offset: 0x5e8, Size: 0x4]
	int ReceivedGiftNum;//[Offset: 0x5ec, Size: 0x4]
	int SpectatorNum;//[Offset: 0x5f0, Size: 0x4]
	enum TalentState;//[Offset: 0x5f4, Size: 0x1]
	bool HasBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 0x1]
	bool HasGroupBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f6, Size: 0x1]
	Vector2D MarkedPointInNavMap;//[Offset: 0x5f8, Size: 0x8]
	Vector SelfLastVehicleLocation;//[Offset: 0x600, Size: 0xc]
	Vector TeamLastVehicleLocation;//[Offset: 0x60c, Size: 0xc]
	byte CurrentPlayerStateInGame;//[Offset: 0x618, Size: 0x1]
	byte CurrentCharacterStateInGame;//[Offset: 0x619, Size: 0x1]
	int AccountFlag;//[Offset: 0x61c, Size: 0x4]
	int ClanFlag;//[Offset: 0x620, Size: 0x4]
	int[] EquippedEmotes;//[Offset: 0x628, Size: 0x10]
	<int,EquippedEmotesData> AllCharacterEquippedEmotes;//[Offset: 0x638, Size: 0x50]
	FString OS;//[Offset: 0x688, Size: 0x10]
	FString OsType;//[Offset: 0x698, Size: 0x10]
	FString DeviceModel;//[Offset: 0x6a8, Size: 0x10]
	enum InputType;//[Offset: 0x6b8, Size: 0x1]
	bool bIsSameTeamWithLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b9, Size: 0x1]
	bool HasReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ba, Size: 0x1]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1]
	float HangUpTime;//[Offset: 0x6c4, Size: 0x4]
	float OfflineBattleTime;//[Offset: 0x6c8, Size: 0x4]
	int Elo;//[Offset: 0x6cc, Size: 0x4]
	int RankLevel;//[Offset: 0x6d0, Size: 0x4]
	int RankLevel2;//[Offset: 0x6d4, Size: 0x4]
	int LegendRank;//[Offset: 0x6d8, Size: 0x4]
	float StartWaitTime;//[Offset: 0x6dc, Size: 0x4]
	float ReportedWaitTime;//[Offset: 0x6e0, Size: 0x4]
	byte VipType;//[Offset: 0x6e4, Size: 0x1]
	int WarmupTag;//[Offset: 0x6e8, Size: 0x4]
	float Frustration;//[Offset: 0x6ec, Size: 0x4]
	bool bMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	byte LobbyTeamMemberNum;//[Offset: 0x6f1, Size: 0x1]
	bool bTeamIDHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 0x1]
	int RepliableMessageID;//[Offset: 0x70c, Size: 0x4]
	float RepliableMessageStartTime;//[Offset: 0x710, Size: 0x4]
	bool bIsOBPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 0x1]
	int WarmId;//[Offset: 0x724, Size: 0x4]
	int WarmType;//[Offset: 0x728, Size: 0x4]
	bool AllowOtherJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 0x1]
	FString SocialTeamID;//[Offset: 0x730, Size: 0x10]
	float WaitTimeBeforeEnterSpectateMode;//[Offset: 0x740, Size: 0x4]
	delegate OnSpectateInfoRep;//[Offset: 0x748, Size: 0x10]
	SolarPlayerState* KillerPlayerState;//[Offset: 0x758, Size: 0x8]
	SolarPlayerState* RevengePlayerState;//[Offset: 0x760, Size: 0x8]
	KillEnemySnapshot[] KilledEnemysRecord;//[Offset: 0x768, Size: 0x10]
	SolarSpectateInfo* SpectateInfo;//[Offset: 0x778, Size: 0x8]
	enum NetStateInGame;//[Offset: 0x780, Size: 0x1]
	bool bHasLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x781, Size: 0x1]
	bool bHasUpdateByServerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]
	SolarReplayHighlightComponent* ReplayHightlightComp;//[Offset: 0x798, Size: 0x8]
	int KillNum;//[Offset: 0x7a0, Size: 0x4]
	int AssistNum;//[Offset: 0x7c0, Size: 0x4]
	Vector DeathPos;//[Offset: 0x7e0, Size: 0xc]
	int ReconnectNum;//[Offset: 0x7ec, Size: 0x4]
	float MultiKillDurationTime;//[Offset: 0x800, Size: 0x4]
	float TotalReceivedDamage;//[Offset: 0x818, Size: 0x4]
	float HealSelf;//[Offset: 0x81c, Size: 0x4]
	float ReceivedHeal;//[Offset: 0x820, Size: 0x4]
	float LifeTime;//[Offset: 0x824, Size: 0x4]
	SettlementTempData SettleSyncData;//[Offset: 0x828, Size: 0xd8]
	int PlayerRank;//[Offset: 0x900, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904, Size: 0x1]
	bool bMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x905, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x907, Size: 0x1]
	float MvpScore;//[Offset: 0x908, Size: 0x4]
	float KDA;//[Offset: 0x90c, Size: 0x4]
	int ResurrectionTimes;//[Offset: 0x910, Size: 0x4]
	int CharacterExp;//[Offset: 0x914, Size: 0x4]
	int[] CharacterExpReason;//[Offset: 0x918, Size: 0x10]
	int GainCombatScore;//[Offset: 0x928, Size: 0x4]
	int AccountExp;//[Offset: 0x92c, Size: 0x4]
	<int,int> WeaponExps;//[Offset: 0x930, Size: 0x50]
	int Zomborg;//[Offset: 0x980, Size: 0x4]
	int ZomborgExtra;//[Offset: 0x984, Size: 0x4]
	enum[] SettlePunishTypes;//[Offset: 0x988, Size: 0x10]
	<int,int> CollectionItemRewards;//[Offset: 0x998, Size: 0x50]
	int[] StrategyConditionIDs;//[Offset: 0x9e8, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x9f8, Size: 0x4]
	enum PlayerOutPath;//[Offset: 0x9ff, Size: 0x1]
	int[] UsedCharacterIDs;//[Offset: 0xa00, Size: 0x10]
	bool bPresettling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 0x1]
	bool bHasSettled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 0x1]
	bool bIsPlayerBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa12, Size: 0x1]
	int InteractValue;//[Offset: 0xa14, Size: 0x4]
	float LastInteractTime;//[Offset: 0xa18, Size: 0x4]
	float DamageFactor;//[Offset: 0xa1c, Size: 0x4]
	float VehicleProbability;//[Offset: 0xa20, Size: 0x4]
	bool bIsTimeoutPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24, Size: 0x1]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa25, Size: 0x1]
	ExposeLocationMap ExposeLocationMap;//[Offset: 0xa48, Size: 0x58]
	SolarPlayerState*[] ExposeLocationArray;//[Offset: 0xaa0, Size: 0x10]
	Vector PlayerLocation;//[Offset: 0xab0, Size: 0xc]
	SolarPlayerState* ExposeTo;//[Offset: 0xac0, Size: 0x8]
	int SkydivingLeaderPosInTeam;//[Offset: 0xad0, Size: 0x4]
	byte SkydivingFollowFormationPos;//[Offset: 0xad4, Size: 0x1]
	enum SkydivingState;//[Offset: 0xadc, Size: 0x1]
	SolarAchievementComponent* AchievementComponent;//[Offset: 0xae0, Size: 0x8]
	int[] PreCompletedAchievementIDs;//[Offset: 0xaf0, Size: 0x10]
	int PlayerLevel;//[Offset: 0xb18, Size: 0x4]
	int PlayerExperience;//[Offset: 0xb1c, Size: 0x4]
	int HistoryShieldUpgradeItemNum;//[Offset: 0xb20, Size: 0x4]
	SpatializeInfoTrack* TrackInfo;//[Offset: 0xb40, Size: 0x8]
	float TrackMaxRevealDistance;//[Offset: 0xb48, Size: 0x4]
	enum AppLifetimeState;//[Offset: 0xb4c, Size: 0x1]
	int TailFlameId;//[Offset: 0xb50, Size: 0x4]
	SolarTeamInfo* Team;//[Offset: 0xb58, Size: 0x8]
	SolarBattleWeaponData[] BattleWeaponDataArray;//[Offset: 0xb88, Size: 0x10]
	HeroPickInfo* HeroPickInfo;//[Offset: 0xb98, Size: 0x8]
	bool WillFollowMovementOfSkydivingLeader();// 0x1efe04f39041
	void UpgradePlayerLevel(int LevelAdded);// 0x1efd04f39041
	void UpdateCurUseCharacterData(int InCharacterId);// 0x1efc04f39041
	void UpdateCurUseCharacterAndSkinData(int InCharacterId, int InSkinID);// 0x1efb04f39041
	void UpdateAICharacterDataList(out const BattleCharacterData InCharacterData);// 0x1ef804f39041
	bool TryGetVehicleDamageInfo(out int[] OutVehicleDamageInfo);// 0x1ef704f39041
	bool TryGetSafeAreaInfo(out int[] OutSafeZoneInfo);// 0x1ef604f39041
	bool TryGetPlayerBackpackItems(out int[] OutWeaponIds);// 0x1ef504f39041
	void SyncMarkedWorldData(const WorldMarkData InMarkData);// 0x1ef404f39041
	void SynchronizePlayerStateInGame(enum InEPlayerStateInGame, bool InIfOrNot);// 0x1ef304f39041
	void SynchronizeCharacterStateInGame(enum InECharacterStateInGame, bool InIfOrNot);// 0x1ef204f39041
	void StatWeaponLevelAndTime();// 0x1ef104f39041
	void StatWeaponBattleDetailInfo();// 0x1ef004f39041
	void StatVehicleDriveTypeLuaCall(int DriveType);// 0x1eef04f39041
	void StatVehicleDriveType(int DriveType);// 0x1eee04f39041
	void ShowTeammatesHUD(out const SolarPlayerState*[] TeammateStates, SolarPlayerState* InSpectateTargetPlayerState);// 0x1eed04f39041
	void SetRoleUltimateSkillCDState(const int NewState);// 0x1eec04f39041
	void SetRoleID(const int InRoleID);// 0x1eeb04f39041
	void SetPlayerNetStateInGame(enum InPlayerNetStateInGame);// 0x1eea04f39041
	void SetIsTimeoutPlayer(const bool InValue);// 0x1ee904f39041
	void SetIsPlayerBattleEnd(bool bPlayerBattleEnd);// 0x1ee804f39041
	void SetDeserter(bool InIsDeserter);// 0x1ee704f39041
	void SetDeathboxSkinId(out const int[] InOwnedDeathboxSkinIds);// 0x1ee604f39041
	void ServerUpdateInputType(enum NowInputType);// 0x1ee504f39041
	void ServerUnexposeLocationToOtherOnce(SolarPlayerState* OtherPS);// 0x1ee404f39041
	void ServerUnexposeLocationToOther(SolarPlayerState* OtherPS);// 0x1ee304f39041
	void ServerReportWaitTime();// 0x1ee204f39041
	void ServerPlayerSelectSkin(int InCharacterId, int InSkinID);// 0x1ee104f39041
	void ServerHeroRequest(int InCharacterId);// 0x1ee004f39041
	void ServerExposeLocationToOther(SolarPlayerState* OtherPS);// 0x1edf04f39041
	void ServerChangeRoleID(const int InRoleID);// 0x1ede04f39041
	void ReviseWeaponExp(int weaponid, int WeaponExp, int CurLevel, int CurExp);// 0x1edd04f39041
	void RequestServerUpdateInputType(enum NowInputType);// 0x1edc04f39041
	void ReportWaitTime();// 0x1edb04f39041
	void RemoveMarkedWorldDataFromLua(out const WorldMarkData InMarkData);// 0x1eda04f39041
	void RemoveMarkedWorldData(const WorldMarkData InMarkData);// 0x1ed604f39041
	void ReceiveTeamIdReplicated(bool bRelatedToSelf);// 0x1ed504f39041
	void ReceiveTalentStateSet(enum InState);// 0x1ed304f39041
	void ReceiveTalentIDReplication(enum RepType, PlayerState* ClientOwnerPS);// 0x1ed204f39041
	void ReceiveSideReplicatedAfter();// 0x1ed104f39041
	void ReceivePostInitializeComponents();// 0x1ed004f39041
	bool ReceiveGold(const int InReceivedGold, const bool NeedSyncToServer, const bool NeedSyncToDS);// 0x1ecf04f39041
	void ReceiveClientInitialize(Controller* C);// 0x1ece04f39041
	void PlayerSelectSkin(int InCharacterId, int InSkinID);// 0x1ecd04f39041
	void PlayerSelectHero(int InCharacterId, int InSkinID, bool bConfirm);// 0x1ecc04f39041
	bool PlayerIsResurrecting();// 0x1ecb04f39041
	bool PlayerHasLogin();// 0x1eca04f39041
	bool PlayerCanRebirthByReviveItem(bool bCheckItemNum, bool bIncludingReviving);// 0x1ec904f39041
	bool PlayerCanRebirthByBuyResurrection();// 0x1ec804f39041
	bool PlayerCanRebirthByAllMeans();// 0x1ec704f39041
	bool PlayerCanRebirthBlueprint();// 0x1ec604f39041
	bool PlayerCanRebirth();// 0x1ec504f39041
	bool PlayerCanBuyRescue();// 0x1ec404f39041
	void OnUpdatedPlayerStateLoginData();// 0x1ec304f39041
	void OnTeammatePlayerStateRepDelegate__DelegateSignature();// 0x1ec204f39041
	void OnTeammatePlayerStateRemovedDelegate__DelegateSignature(out const byte InPosInTeam, bool InIsLastOne);// 0x1ec104f39041
	void OnTeamInfoChanged__DelegateSignature(SolarTeamInfo* PreviousTeam, SolarTeamInfo* NowTeam);// 0x1ec004f39041
	void OnStopReceiveExposedLocation(SolarPlayerState* OtherPS);// 0x1ebf04f39041
	void OnStartResurrectProgress(const int InTextId, const float InDuration, const float InRemaining, const bool bShowCancel);// 0x1ebe04f39041
	void OnSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x1ebd04f39041
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1ebc04f39041
	void OnRequestStartResurrect(DeathTreasureBox* InDeatbox);// 0x1ebb04f39041
	void OnRequestCancelResurrect(DeathTreasureBox* InDeatbox);// 0x1eba04f39041
	void OnReplayRecordingStarted();// 0x1eb904f39041
	void OnRep_UserId();// 0x1eb804f39041
	void OnRep_TotalReceivedDamage();// 0x1eb704f39041
	void OnRep_TeammatesState();// 0x1eb604f39041
	void OnRep_TeamLastVehicleLocation();// 0x1eb504f39041
	void OnRep_TeamChanged(SolarTeamInfo* PreviousTeam);// 0x1eb404f39041
	void OnRep_TalentID();// 0x1eb304f39041
	void OnRep_TailFlameId();// 0x1eb204f39041
	void OnRep_SpectateInfo();// 0x1eb104f39041
	void OnRep_SkydivingState();// 0x1eb004f39041
	void OnRep_SkydivingLeaderPosInTeam(int OldValue);// 0x1eaf04f39041
	void OnRep_SkinId();// 0x1eae04f39041
	void OnRep_Side(FString OldSide);// 0x1ead04f39041
	void OnRep_SelfLastVehicleLocation();// 0x1eac04f39041
	void OnRep_RTCType();// 0x1eab04f39041
	void OnRep_RoleID();// 0x1eaa04f39041
	void OnRep_ReviveItemNum();// 0x1ea904f39041
	void OnRep_ReviveCountByItem();// 0x1ea804f39041
	void OnRep_RepliableMsg();// 0x1ea704f39041
	void OnRep_PosInTeam(out const byte InLastPosInTeam);// 0x1ea604f39041
	void OnRep_PlayerLocation();// 0x1ea504f39041
	void OnRep_PlayerLevel();// 0x1ea404f39041
	void OnRep_PlayerExp();// 0x1ea304f39041
	void OnRep_NickName(FString OldNickName);// 0x1ea204f39041
	void OnRep_NetStateInGame();// 0x1ea104f39041
	void OnRep_MaxHealth();// 0x1ea004f39041
	void OnRep_MarkedPointInNavMap();// 0x1e9f04f39041
	void OnRep_KillNum();// 0x1e9e04f39041
	void OnRep_Job();// 0x1e9d04f39041
	void OnRep_IsOBPlayer();// 0x1e9c04f39041
	void OnRep_InputType();// 0x1e9b04f39041
	void OnRep_HeroPickInfo();// 0x1e9a04f39041
	void OnRep_HasSettled();// 0x1e9904f39041
	void OnRep_Gold();// 0x1e9804f39041
	void OnRep_ExposeLocationArray();// 0x1e9704f39041
	void OnRep_EquippedEmotes();// 0x1e9604f39041
	void OnRep_CurShieldInfo(out const ShieldInfo InLastShieldInfo);// 0x1e9404f39041
	void OnRep_CurrentPlayerStateInGame(out const byte InLastPlayerStateInGame);// 0x1e9304f39041
	void OnRep_CurrentHealth();// 0x1e9204f39041
	void OnRep_CurrentCharacterStateInGame(out const byte InLastCharacterStateInGame);// 0x1e9104f39041
	void OnRep_ClanId();// 0x1e9004f39041
	void OnRep_ClanFlag();// 0x1e8f04f39041
	void OnRep_CharacterId(int OldCharacterId);// 0x1e8e04f39041
	void OnRep_BattleVoiceId();// 0x1e8d04f39041
	void OnRep_BagId();// 0x1e8c04f39041
	void OnRep_AssistNum();// 0x1e8b04f39041
	void OnRep_AccountFlag();// 0x1e8a04f39041
	void OnRefreshReviveInfo();// 0x1e8904f39041
	void OnReceiveExposedLocation(SolarPlayerState* OtherPS, out const Vector Location);// 0x1e8804f39041
	FString OnPlayerUpgrade(int NewLevel, bool bFromServer);// 0x1e8704f39041
	void OnPlayerUpdateStatData(enum InType);// 0x1e8604f39041
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x1e8504f39041
	void OnPlayerChangedGolds(enum ChangedGoldType, int CostGoldNum, enum CostResult);// 0x1e8404f39041
	void OnOtherPlayerStopSpectateMyTeam(SolarSpectateInfo* InSpectateInfo);// 0x1e8304f39041
	void OnOtherPlayerStopSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x1e8204f39041
	void OnOtherPlayerBeginSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x1e8104f39041
	void OnOBPlayerRepDelegate__DelegateSignature(bool bIsOBPlayer);// 0x1e8004f39041
	void OnLeaveLocalPlayerTeam(SolarTeamInfo* TeamInfo, SolarPlayerState* PlayerState);// 0x1e7f04f39041
	void OnJoinLocalPlayerTeam(SolarTeamInfo* TeamInfo, SolarPlayerState* PlayerState);// 0x1e7e04f39041
	void OnInputTypeChanged(enum NowInputType);// 0x1e7d04f39041
	void OnEnterHeroPick();// 0x1e7c04f39041
	void OnDamageChanged__DelegateSignature(float Damage);// 0x1e7b04f39041
	void OnClientSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x1e7a04f39041
	void OnCancelResurrectProgress(const int InTextId);// 0x1e7904f39041
	void NotifyUpdateTeamMateLevelUI();// 0x1e7804f39041
	void NotifyAddExperience(int ExpAdded);// 0x1e7704f39041
	bool NeedPerformSpectateInfoOnSimulate();// 0x1e7604f39041
	int LuaGetExpFromWeaponImplementation(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x1e7504f39041
	void LeaveTeam();// 0x1e7404f39041
	void JoinTeamByPolicy(enum TeamType, bool AutoBalance);// 0x1e7304f39041
	void JoinTeamByPolicies(enum[] JoinPolicies, bool AutoBalance);// 0x1e7104f39041
	void JoinTeamByName(FString InTeamName);// 0x1e7004f39041
	void JoinTeamByID(const byte InTeamId);// 0x1e6f04f39041
	void JoinTeam(SolarTeamInfo* InTeam);// 0x1e6e04f39041
	bool IsWaitingLogin();// 0x1e6d04f39041
	bool IsUsingClanForFlag();// 0x1e6c04f39041
	bool IsUnfollowShortcutEnabled();// 0x1e6b04f39041
	bool IsTimeOutPlayer();// 0x1e6a04f39041
	bool IsTeammateWithLocalOrSpecTargetPlayer();// 0x1e6904f39041
	bool IsTeammateWith(const SolarPlayerState* Other);// 0x1e6804f39041
	bool IsSpectatingOtherPlayer();// 0x1e6704f39041
	bool IsSkydivingLeader();// 0x1e6604f39041
	bool IsSkydivingCompleted();// 0x1e6504f39041
	bool IsSkydiving();// 0x1e6404f39041
	bool IsSameTeamWithLocalPlayer();// 0x1e6304f39041
	bool IsReconnecting();// 0x1e6204f39041
	bool IsPreStartSkydiving();// 0x1e6104f39041
	bool IsPlayerWaitingForTeammatesHelp();// 0x1e6004f39041
	bool IsPlayerTeam();// 0x1e5f04f39041
	bool IsPlayerSameTeam(FString TargetPlayerID);// 0x1e5e04f39041
	bool IsPlayerOnline();// 0x1e5d04f39041
	bool IsPlayerOffline();// 0x1e5c04f39041
	bool IsPlayer();// 0x1e5b04f39041
	bool IsOutBySelf();// 0x1e5a04f39041
	bool IsOfflinePlayer();// 0x1e5904f39041
	bool IsOBPlayer();// 0x1e5804f39041
	bool IsMySkydivingLeader(int LeaderPosInTeam);// 0x1e5704f39041
	bool IsMVP();// 0x1e5604f39041
	bool IsMaxLevelInGame();// 0x1e5504f39041
	bool IsLocalPlayerCameraFocusingMe();// 0x1e5404f39041
	bool IsKickOutByServer();// 0x1e5304f39041
	bool IsDeserter();// 0x1e5204f39041
	bool IsBuyingResurrection();// 0x1e5104f39041
	bool IsBeingSpectated();// 0x1e5004f39041
	bool IsAllyWithLocalPlayer();// 0x1e4f04f39041
	bool IsAllyWithLocalOrSpecTargetPlayer();// 0x1e4e04f39041
	bool IsAllyWith(const SolarPlayerState* Other);// 0x1e4d04f39041
	bool IsAIPlayer();// 0x1e4c04f39041
	bool IsACheater();// 0x1e4b04f39041
	void InitInputType();// 0x1e4a04f39041
	void IncreaseReviveCount();// 0x1e4904f39041
	void HideTeammatesHUD(out const SolarPlayerState*[] TeammateStates);// 0x1e4804f39041
	bool HasSkydivingLeader();// 0x1e4704f39041
	bool HasSettled();// 0x1e4604f39041
	bool HasCheatSelf();// 0x1e4504f39041
	int GetWeaponSettlmentExp(int weaponid);// 0x1e4404f39041
	int GetVehicleSkinID(int VehicleID);// 0x1e4304f39041
	FString GetUserID();// 0x1e4204f39041
	int[] GetUsableTailFlameIds();// 0x1e4104f39041
	void GetUsableSkinsForCharacter(const int InCharacterId, out int[] Result, out bool bCharacterUsable);// 0x1e4004f39041
	int[] GetUsableJetpackIds();// 0x1e3f04f39041
	float GetTotalReceivedDamage();// 0x1e3e04f39041
	float GetTotalCausedDamage();// 0x1e3d04f39041
	byte GetTeamRank();// 0x1e3c04f39041
	FString GetTeamName();// 0x1e3b04f39041
	void GetTeammatePlayers(bool bIncludingSelf, out SolarPlayerState*[] OutTeammates);// 0x1e3a04f39041
	SolarPlayerState* GetTeammatePlayerByPosInTeam(int InPosInTeam);// 0x1e3904f39041
	int GetTeammateNum(bool bIncludeSelf);// 0x1e3804f39041
	byte GetTeamID();// 0x1e3704f39041
	SolarGameModeStatisticsComponent* GetStatComponent();// 0x1e3604f39041
	SolarSpectateInfo* GetSpectateTargetSpectateInfo();// 0x1e3504f39041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x1e3404f39041
	SolarCharacter* GetSpectateTargetCharacter();// 0x1e3304f39041
	SolarSpectateInfo* GetSpectateInfo();// 0x1e3204f39041
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x1e3104f39041
	SolarPlayerController* GetSolarPlayerController();// 0x1e3004f39041
	SolarCharacter* GetSolarCharacter();// 0x1e2f04f39041
	SolarBotAIController* GetSolarBotAIController();// 0x1e2e04f39041
	void GetSkinInfo(int InSkinID, out CharacterSkin ResultInfo);// 0x1e2c04f39041
	int GetRankScore();// 0x1e2b04f39041
	int GetRankLevelID();// 0x1e2a04f39041
	SolarCharacter* GetPossessedCharacter();// 0x1e2904f39041
	PlayerStatisticsData* GetPlayerStatData();// 0x1e2804f39041
	enum GetPlayerNetState();// 0x1e2604f39041
	FString GetPlayerNameWithoutUID();// 0x1e2504f39041
	MedalInfo[] GetMedalInfo();// 0x1e2304f39041
	int GetMaxShieldMatCountToDeathbox();// 0x1e2204f39041
	SolarPlayerState* GetLocalPlayerState();// 0x1e2104f39041
	SolarPlayerState* GetLocalOrSpecTargetPlayerState();// 0x1e2004f39041
	SolarCharacter* GetLocalOrSpecTargetCharacter();// 0x1e1f04f39041
	SolarCharacter* GetLocalCharacter();// 0x1e1e04f39041
	int GetLegendRank();// 0x1e1d04f39041
	SolarPlayerState* GetKillerPlayerState();// 0x1e1c04f39041
	bool GetIsPlayerBattleEnd();// 0x1e1b04f39041
	float GetExpSettleModePunishRatio();// 0x1e1a04f39041
	int GetExpItemCount(const int InLevelGap);// 0x1e1904f39041
	int GetExpByBehavior(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x1e1804f39041
	int GetExpAddValueFromItem(int ItemID);// 0x1e1704f39041
	int GetDriveVehicleID();// 0x1e1604f39041
	Vector GetDeathBoxLocation();// 0x1e1504f39041
	float GetCurrentTalentCDDuration();// 0x1e1404f39041
	float GetCurrentTalentActiveDuration();// 0x1e1304f39041
	void GetCurrentSkinForCharacter(const int InCharacterId, out bool bCharacterUsable, out int OutSkinId);// 0x1e1204f39041
	FString GetClanShortName();// 0x1e1104f39041
	int GetCharacterRandomEquippedVoiceByType(enum VoiceType);// 0x1e0f04f39041
	Vector GetCharacterLocation();// 0x1e0e04f39041
	FString[] GetBuyResurrectionSavedTeammateIDArr();// 0x1e0d04f39041
	int[] GetBuyResurrectionSavedTeammateBonusArr();// 0x1e0c04f39041
	void GetAlliesPlayers(bool bIncludingSelf, out SolarPlayerState*[] OutAllies);// 0x1e0b04f39041
	bool CostGold(const int InCostedGold, const bool NeedSyncToServer);// 0x1e0a04f39041
	void ClientNotifyKillNumChanged(const int KillNumber, const int SpreesNum);// 0x1e0904f39041
	void ClientImmediatelyTeammatesSkinID(const SolarPlayerState*[] InTeammates, const int[] InSkinID);// 0x1e0804f39041
	void ClearTeammatesMark();// 0x1e0704f39041
	bool CheckIfTeamLastVehicleLocationValid();// 0x1e0604f39041
	bool CheckIfTeamIdValid();// 0x1e0504f39041
	bool CheckIfSelfLastVehicleLocationValid();// 0x1e0404f39041
	bool CheckIfPosInTeamValid();// 0x1e0304f39041
	bool CheckIfMarkedPointInNavMapValid();// 0x1e0204f39041
	bool CheckIfInactive();// 0x1e0104f39041
	bool CheckIfDataValid();// 0x1e0004f39041
	bool CheckIfBeInSpecifiedPlayerState(enum InEPlayerStateInGame);// 0x1dfe04f39041
	bool CheckIfBeInSpecifiedCharacterState(enum InECharacterStateInGame);// 0x1dfc04f39041
	bool CheckIfBattleVoiceIdValid();// 0x1dfb04f39041
	bool CheckGoldIsEnough(const int InCostedGold);// 0x1dfa04f39041
	void ChangeTailFlameId(int InTailFlameId);// 0x1df904f39041
	void ChangeBagById(int InBagId);// 0x1df804f39041
	bool CanReviveItemPutInDeathBox();// 0x1df704f39041
	bool CanAcceptSkydivingLeaderTransferRequest(const SolarPlayerState* RequesterPlayerState);// 0x1df604f39041
	bool CanAcceptSkydivingFollowRequest(const SolarPlayerState* RequesterPlayerState);// 0x1df504f39041
	bool CanAcceptSkydivingFollowInvitation(const SolarPlayerState* InviterPlayerState);// 0x1df404f39041
	int CalculateZomborg();// 0x1df304f39041
	float CalculateCharacterExp();// 0x1df204f39041
	float CalculateAccountExp();// 0x1df104f39041
	void AddExperience(int InExp, enum InType);// 0x1def04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MedalInfo
	int MedalID;//[Offset: 0x0, Size: 0x4]
	int MedalType;//[Offset: 0x4, Size: 0x4]
	int MedalPos;//[Offset: 0x8, Size: 0x4]
	int MedalLv;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleCharacterData
	int CharacterId;//[Offset: 0x0, Size: 0x4]
	int SkinId;//[Offset: 0x4, Size: 0x4]
	int CharacterLevel;//[Offset: 0x8, Size: 0x4]
	int TalentID;//[Offset: 0xc, Size: 0x4]
	int UseTimes;//[Offset: 0x10, Size: 0x4]
	int CardPose;//[Offset: 0x14, Size: 0x4]
	int Cardbackground;//[Offset: 0x18, Size: 0x4]
	int CharacterExp;//[Offset: 0x1c, Size: 0x4]
	int Title;//[Offset: 0x20, Size: 0x4]
	int64 Expired;//[Offset: 0x28, Size: 0x8]
	int CombatScore;//[Offset: 0x30, Size: 0x4]
	int BagId;//[Offset: 0x34, Size: 0x4]
	int TailFlameId;//[Offset: 0x38, Size: 0x4]
	int CapsuleActorId;//[Offset: 0x3c, Size: 0x4]
	int DeathBoxId;//[Offset: 0x40, Size: 0x4]
	int CharacterOwnerType;//[Offset: 0x44, Size: 0x4]
	EquipVoiceData[] Voice;//[Offset: 0x48, Size: 0x10]
	int KillReport;//[Offset: 0x58, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EquipVoiceData
	int Type;//[Offset: 0x0, Size: 0x4]
	int[] Ids;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterSkin
	int SkinId;//[Offset: 0x0, Size: 0x4]
	int SkinOwnerType;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMarkData.FastArraySerializerItem
	int WorldMarkGUID;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize WorldPos;//[Offset: 0x10, Size: 0xc]
	byte PosInTeam;//[Offset: 0x1c, Size: 0x1]
	Vector2D ScreenCoordinate;//[Offset: 0x20, Size: 0x8]
	enum Type;//[Offset: 0x28, Size: 0x1]
	int ItemID;//[Offset: 0x2c, Size: 0x4]
	int64 ItemInstanceId;//[Offset: 0x30, Size: 0x8]
	int NameLocID;//[Offset: 0x38, Size: 0x4]
	FString IconImg;//[Offset: 0x40, Size: 0x10]
	int WeaponLevel;//[Offset: 0x50, Size: 0x4]
	enum InteractableType;//[Offset: 0x54, Size: 0x1]
	int MarkVoiceEventName;//[Offset: 0x58, Size: 0x4]
	int OuterBoxThisID;//[Offset: 0x5c, Size: 0x4]
	float MarkTimeStamp;//[Offset: 0x60, Size: 0x4]
	float LifeTime;//[Offset: 0x64, Size: 0x4]
	float ExtraLiveTime;//[Offset: 0x68, Size: 0x4]
	Actor* AttachedActor;//[Offset: 0x6c, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExpRankMedalData
	FString Area;//[Offset: 0x0, Size: 0x10]
	FString Country;//[Offset: 0x10, Size: 0x10]
	int Rank;//[Offset: 0x20, Size: 0x4]
	int CharacterId;//[Offset: 0x24, Size: 0x4]
	int CharacterType;//[Offset: 0x28, Size: 0x4]
	int RankScore;//[Offset: 0x2c, Size: 0x4]
	int RankType;//[Offset: 0x30, Size: 0x4]
	int AutoID;//[Offset: 0x34, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LastBattleInfo
	float MvpScore;//[Offset: 0x0, Size: 0x4]
	int KillNum;//[Offset: 0x4, Size: 0x4]
	int HitDown;//[Offset: 0x8, Size: 0x4]
	int AssistNum;//[Offset: 0xc, Size: 0x4]
	int RescueNum;//[Offset: 0x10, Size: 0x4]
	int AliveTime;//[Offset: 0x14, Size: 0x4]
	int CauseDamage;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_ExtraRewardInfo
	int TextID;//[Offset: 0x0, Size: 0x4]
	FString LocVariable;//[Offset: 0x8, Size: 0x10]
	FString Content;//[Offset: 0x18, Size: 0x10]
	FString ItemList;//[Offset: 0x28, Size: 0x10]
	int Order;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementReward
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Amount;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementCrateReward
	int64 crateID;//[Offset: 0x0, Size: 0x8]
	SettlementReward[] Items;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ShieldInfo
	int ShieldID;//[Offset: 0x0, Size: 0x4]
	float CurValue;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EquippedEmotesData
	int[] EmoteData;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KillEnemySnapshot
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarReplayHighlightComponent.ActorComponent.Object
	float RecordAfterSettled;//[Offset: 0xe0, Size: 0x4]
	float SlowMoStartTime;//[Offset: 0xe4, Size: 0x4]
	float SlowMoEndTime;//[Offset: 0xe8, Size: 0x4]
	float SlowMoMultiplier;//[Offset: 0xec, Size: 0x4]
	float KillEffectTime;//[Offset: 0xf0, Size: 0x4]
	OBHighlightOverviewWidget* HighlightOverviewWidget;//[Offset: 0xf8, Size: 0x8]
	void ReceiveHighlightOverviewData(out const PlayerHighlightOverview OverviewData);// 0x573f04f39041
	void ReceiveHighlightData(FString PlayerId, out const ReplayActivityHeatFragment NewFragment);// 0x573e04f39041
	void OnReplayWidgetTranslatePlayEndOver();// 0x573d04f39041
	void OnReplayWidgetTranslatePlayBeginOver();// 0x573c04f39041
	void OnReplayWidgetOverviewPlayEnd();// 0x573b04f39041
	void OnReplayWidgetHighlightPlayEnd();// 0x573a04f39041
	void OnReplayScrubStarted();// 0x573904f39041
	void OnReplayScrubFinished();// 0x573804f39041
	void OnReplayPaused();// 0x573704f39041
	void OnReplayContinued();// 0x573604f39041
	UISubsystem* GetUISubSystem();// 0x573504f39041
	SolarReplayManager* GetReplayManager();// 0x573404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerHighlightOverview
	int KillNum;//[Offset: 0x0, Size: 0x4]
	int AssistNum;//[Offset: 0x4, Size: 0x4]
	int Damage;//[Offset: 0x8, Size: 0x4]
	FString PlayerId;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplayActivityHeatFragment
	int FragmentId;//[Offset: 0x0, Size: 0x4]
	enum ActivityHeatType;//[Offset: 0x4, Size: 0x1]
	float TotalScore;//[Offset: 0x8, Size: 0x4]
	float BeginTime;//[Offset: 0xc, Size: 0x4]
	float EndTime;//[Offset: 0x10, Size: 0x4]
	ReplayActivityKillDetail[] ActivityKillDetails;//[Offset: 0x18, Size: 0x10]
	int KillNum;//[Offset: 0x28, Size: 0x4]
	float ActivityHotTime;//[Offset: 0x2c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplayActivityKillDetail
	float KillTime;//[Offset: 0x0, Size: 0x4]
	enum KillUseType;//[Offset: 0x4, Size: 0x1]
	int KillToolID;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UISubsystem.GameInstanceSubsystem.Subsystem.Object
	UIGlobalConfig* GlobalConfig;//[Offset: 0x30, Size: 0x8]
	UIPanelConfig* UIPanelConfig;//[Offset: 0x38, Size: 0x8]
	<FString,SolarUserWidget*> CacheWidgets;//[Offset: 0x40, Size: 0x50]
	void PostInitializeAfterPatch();// 0x614e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameInstanceSubsystem.Subsystem.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Subsystem.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UIGlobalConfig.DataAsset.Object
	<byte,TeamMemberColor> TeamMemberColors;//[Offset: 0x30, Size: 0x50]
	<byte,ItemQualityData> ItemQualityData;//[Offset: 0x80, Size: 0x50]
	<byte,OBTeamColor> OBTeamColors;//[Offset: 0xd0, Size: 0x50]
	OBTeamColor GetOBTeamColor(const int TeamNum);// 0x60e304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OBTeamColor
	FString Desc;//[Offset: 0x0, Size: 0x10]
	LinearColor Main;//[Offset: 0x10, Size: 0x10]
	LinearColor Vice;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TeamMemberColor
	LinearColor Main;//[Offset: 0x0, Size: 0x10]
	LinearColor Vice;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ItemQualityData
	LinearColor BaseColor;//[Offset: 0x0, Size: 0x10]
	LinearColor HUDColor;//[Offset: 0x10, Size: 0x10]
	LinearColor HighQualityColor;//[Offset: 0x20, Size: 0x10]
	LinearColor LowQualityColor;//[Offset: 0x30, Size: 0x10]
	LinearColor HUDBGColor;//[Offset: 0x40, Size: 0x10]
	LinearColor HUDDecorateColor;//[Offset: 0x50, Size: 0x10]
	SoftObjectPath QualityIcon;//[Offset: 0x60, Size: 0x18]
	FString QualityChar;//[Offset: 0x78, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UIPanelConfig.Object
	<enum,UIPanelConfigEntry> PanelConfigs;//[Offset: 0x28, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UIPanelConfigEntry
	SoftClassPath MobileUIPath;//[Offset: 0x0, Size: 0x18]
	SoftClassPath DesktopUIPath;//[Offset: 0x18, Size: 0x18]
	enum UILayerRoot;//[Offset: 0x30, Size: 0x1]
	bool bPrecache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUserWidget.UserWidget.Widget.Visual.Object
	enum WidgetLayerLevel;//[Offset: 0x260, Size: 0x1]
	bool bIsPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	enum WidgetScope;//[Offset: 0x262, Size: 0x1]
	enum CaptureInput;//[Offset: 0x263, Size: 0x1]
	bool bHideCursorDuringCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	int MyRoot;//[Offset: 0x268, Size: 0x4]
	FString widgetkey;//[Offset: 0x270, Size: 0x10]
	bool bReceiveKeyMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool bReceiveShowMouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	enum ShowScope;//[Offset: 0x282, Size: 0x1]
	enum LayoutPreviewType;//[Offset: 0x283, Size: 0x1]
	bool bShowTransBlackAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	class WidgetInputManager* InputManagerClass;//[Offset: 0x288, Size: 0x8]
	WidgetInputManager* InputManager;//[Offset: 0x290, Size: 0x8]
	<FName,WidgetAnimation*> AnimationsMap;//[Offset: 0x298, Size: 0x50]
	WidgetAnimation* PlayingAnimation;//[Offset: 0x2e8, Size: 0x8]
	PlayAnimationParams[] PendingPlayAnimations;//[Offset: 0x308, Size: 0x10]
	bool WidgetTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	bool bInterestLocalLang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	SolarInputActionContext* InputActionContext;//[Offset: 0x328, Size: 0x8]
	SolarUserWidget*[] AllSolarUserWidgetChilds;//[Offset: 0x3e0, Size: 0x10]
	SolarAdapterWidget*[] AllSolarAdapterWidgetChilds;//[Offset: 0x3f0, Size: 0x10]
	void StopListeningForInputHandle(const int Handle);// 0x28df04f39041
	void StopListeningForInputActionEx(FName ActionName, byte EventType);// 0x28de04f39041
	void ShowSelfPanelUI();// 0x28dd04f39041
	void ShowMouseCursor();// 0x28dc04f39041
	void SetZOrder(int ZOrder);// 0x28db04f39041
	void SetWidgetVisible(Widget* Widget, bool bVisible, bool bHitTest);// 0x28da04f39041
	void SetWidgetTickEnabled(bool bEnabled);// 0x28d904f39041
	void SetWidgetScope(enum InWidgetScope);// 0x28d704f39041
	void SetWidgetLayerLevel(enum InWidgetLayerLevel);// 0x28d504f39041
	void SetWidgetKey(FString InWidgetKey);// 0x28d404f39041
	void SetInputActionIsEnabled(FName ActionName, byte EventType, bool bInIsEnabled);// 0x28d304f39041
	void SetBlockInputForOneTick();// 0x28d204f39041
	void ReceiveTick(out const Geometry MyGeometry, float InDeltaTime);// 0x28d104f39041
	void ReceiveShow();// 0x28d004f39041
	void ReceiveHide();// 0x28cf04f39041
	bool PlayAnimationByName(out const FName AnimationName, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x28ce04f39041
	void PlayAnimationByExclusively(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x28cd04f39041
	void OnTouchManagerInitialized();// 0x28cc04f39041
	void OnSynchronizeProperties();// 0x28cb04f39041
	void OnSolarUIOpened();// 0x28ca04f39041
	void OnSolarUIClosed();// 0x28c904f39041
	void OnShow();// 0x28c804f39041
	void OnLocalLangChangedEx(FString InLang);// 0x28c704f39041
	void OnHide();// 0x28c604f39041
	void OnExclusivelyAnimationFinished();// 0x28c504f39041
	void OnDeinitialize();// 0x28c404f39041
	void OnBackKey(enum BackKeyType);// 0x28c204f39041
	int ListenForInputActionEx(FName ActionName, byte EventType, bool bInIsEnabled, delegate Callback);// 0x28c104f39041
	bool IsWidgetTickEnabled();// 0x28c004f39041
	bool IsSolarUserWidgetAndBindLua(Widget* InWidget);// 0x28bf04f39041
	bool IsPlatformSwitch();// 0x28be04f39041
	bool IsPlatformDesktop();// 0x28bd04f39041
	void HideMouseCursor();// 0x28bc04f39041
	FString GetWidgetKeyByPanelName(enum PanelName);// 0x28ba04f39041
	FString GetWidgetKey();// 0x28b904f39041
	Vector2D[] GetTouchedLocation();// 0x28b804f39041
	enum GetShowScope();// 0x28b704f39041
	Vector2D[] GetPointerLocation();// 0x28b604f39041
	SolarPlayerState* GetOwningSolarPlayerState();// 0x28b504f39041
	SolarCharacter* GetOwningSolarPlayerCharacter();// 0x28b404f39041
	WidgetAnimation* GetAnimationByName(out const FName AnimationName);// 0x28b304f39041
	SolarUserWidget*[] GetAllSolarUserWidgetChilds();// 0x28b204f39041
	Widget* FindWidgetFromName(out const FName Name);// 0x28b104f39041
	void ExecuteSolarUIShow();// 0x28b004f39041
	void ExecuteSolarUIOpened();// 0x28af04f39041
	void ExecuteSolarUIHide();// 0x28ae04f39041
	void ExecuteSolarUIClosed();// 0x28ad04f39041
	void ExecuteSolarUIClean();// 0x28ac04f39041
	void ExecuteBindCustomControl();// 0x28ab04f39041
	void CloseSelfPanelUI();// 0x28aa04f39041
	SolarUserWidget*[] CacheAllSolarUserWidgetChilds();// 0x28a904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetInputManager.Object
	delegate OnTouchStartDetected;//[Offset: 0x28, Size: 0x10]
	delegate OnTouchUpdate;//[Offset: 0x38, Size: 0x10]
	delegate OnTouchEndDetected;//[Offset: 0x48, Size: 0x10]
	delegate OnPointerStartDetected;//[Offset: 0x58, Size: 0x10]
	delegate OnPointerUpdate;//[Offset: 0x68, Size: 0x10]
	delegate OnPointerEndDetected;//[Offset: 0x78, Size: 0x10]
	<int,Vector2D> TouchedList;//[Offset: 0x90, Size: 0x50]
	<int,Vector2D> PointerList;//[Offset: 0xe0, Size: 0x50]
	Widget* K2_GetManagedWidget();// 0x625304f39041
	bool GetWidgetTouchedList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x625204f39041
	bool GetWidgetPointerList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x625104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayAnimationParams
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputActionContext.Object
	InputMappingContext* InputMappingContext;//[Offset: 0x48, Size: 0x8]
	<Key,InputAction*> KeyChordInputActionDict;//[Offset: 0x50, Size: 0x50]
	<FName,SolarInputActionEntry> ActionInputActionDict;//[Offset: 0xa0, Size: 0x50]
	<FName,SolarInputActionEntry> ChordActionInputActionDict;//[Offset: 0xf0, Size: 0x50]
	InputAction* NullInputAction;//[Offset: 0x140, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputMappingContext.DataAsset.Object
	EnhancedActionKeyMapping[] Mappings;//[Offset: 0x30, Size: 0x10]
	FText ContextDescription;//[Offset: 0x40, Size: 0x18]
	void UnmapKey(const InputAction* Action, Key Key);// 0x404604f39041
	void UnmapAll();// 0x404504f39041
	void UnmapAction(const InputAction* Action);// 0x404404f39041
	EnhancedActionKeyMapping MapKey(const InputAction* Action, Key ToKey);// 0x404304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnhancedActionKeyMapping
	InputAction* Action;//[Offset: 0x0, Size: 0x8]
	Key Key;//[Offset: 0x8, Size: 0x18]
	bool bShouldBeIgnored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	InputTrigger*[] Triggers;//[Offset: 0x28, Size: 0x10]
	InputModifier*[] Modifiers;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputAction.DataAsset.Object
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bTriggerWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bReserveAllMappings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	enum ValueType;//[Offset: 0x33, Size: 0x1]
	InputTrigger*[] Triggers;//[Offset: 0x38, Size: 0x10]
	InputModifier*[] Modifiers;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputTrigger.Object
	float ActuationThreshold;//[Offset: 0x28, Size: 0x4]
	InputActionValue LastValue;//[Offset: 0x2c, Size: 0x10]
	enum UpdateState(const EnhancedPlayerInput* PlayerInput, InputActionValue ModifiedValue, float DeltaTime);// 0x404c04f39041
	bool IsActuated(out const InputActionValue ForValue);// 0x404b04f39041
	enum GetTriggerType();// 0x404a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputActionValue
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnhancedPlayerInput.PlayerInput.Object
	<InputMappingContext*,int> AppliedInputContexts;//[Offset: 0x3a8, Size: 0x50]
	EnhancedActionKeyMapping[] EnhancedActionMappings;//[Offset: 0x3f8, Size: 0x10]
	<InputAction*,InputActionInstance> ActionInstanceData;//[Offset: 0x458, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputActionInstance
	InputAction* SourceAction;//[Offset: 0x0, Size: 0x8]
	InputTrigger*[] Triggers;//[Offset: 0x10, Size: 0x10]
	InputModifier*[] Modifiers;//[Offset: 0x20, Size: 0x10]
	InputModifier*[] PerInputModifiers;//[Offset: 0x30, Size: 0x10]
	InputModifier*[] FinalValueModifiers;//[Offset: 0x40, Size: 0x10]
	float ElapsedProcessedTime;//[Offset: 0x60, Size: 0x4]
	float ElapsedTriggeredTime;//[Offset: 0x64, Size: 0x4]
	enum TriggerEvent;//[Offset: 0x68, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputModifier.Object
	InputActionValue ModifyRaw(const EnhancedPlayerInput* PlayerInput, InputActionValue CurrentValue, float DeltaTime);// 0x404904f39041
	LinearColor GetVisualizationColor(InputActionValue SampleValue, InputActionValue FinalValue);// 0x404804f39041
	enum GetExecutionPhase();// 0x404704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputActionEntry
	InputAction* InputAction;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAdapterWidget.ContentWidget.PanelWidget.Widget.Visual.Object
	enum WidgetLoadType;//[Offset: 0x149, Size: 0x1]
	SoftClassPath MobileWidgetPath;//[Offset: 0x150, Size: 0x18]
	SoftClassPath DesktopWidgetPath;//[Offset: 0x168, Size: 0x18]
	WidgetOverrideParam[] OverrideParamList;//[Offset: 0x180, Size: 0x10]
	SoftClassPath CurWidgetPath;//[Offset: 0x190, Size: 0x18]
	UserWidget* AdapteeWidget;//[Offset: 0x1a8, Size: 0x8]
	bool bNeedExecuteWidgetOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	void SetNeedExecuteWidgetOpened(bool bInNeedExecuteWidgetOpened);// 0x4dbd04f39041
	void RefreshUIByOverrideParams(out const WidgetOverrideParam[] WidgetOverrideParams);// 0x4dbc04f39041
	void LoadUserWidgetResource();// 0x4dbb04f39041
	bool IsNeedExecuteWidgetOpened();// 0x4dba04f39041
	UserWidget* GetAdapteeWidget();// 0x4db904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x18a004f39041
	PanelSlot* GetContentSlot();// 0x189f04f39041
	Widget* GetContent();// 0x189e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetOverrideParam
	enum Type;//[Offset: 0x0, Size: 0x1]
	FName ChildName;//[Offset: 0x4, Size: 0x8]
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	FText Text;//[Offset: 0x10, Size: 0x18]
	int LocTextID;//[Offset: 0x28, Size: 0x4]
	SlateBrush Brush;//[Offset: 0x30, Size: 0xe0]
	FString CustomParameter;//[Offset: 0x110, Size: 0x10]
	GameplayTag GameplayTag;//[Offset: 0x120, Size: 0x8]
	FString[] MetaData;//[Offset: 0x128, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarReplayManager.Object
	SoftObjectPath WaitingOBMap;//[Offset: 0x40, Size: 0x18]
	SoftClassPath WaitingReplayStartUIClass;//[Offset: 0x58, Size: 0x18]
	SoftClassPath OBModeSpectatorPawnClass;//[Offset: 0x70, Size: 0x18]
	SoftClassPath OBModeHUDClass;//[Offset: 0x88, Size: 0x18]
	SoftClassPath OBHeadInfoWidgetClass;//[Offset: 0xa0, Size: 0x18]
	GameplayCueTag PerspectiveCueTag;//[Offset: 0xb8, Size: 0x8]
	GameplayCueTag PerspectiveInSmokeCueTag;//[Offset: 0xc0, Size: 0x8]
	SoftObjectPath PerspectiveMaterial;//[Offset: 0xc8, Size: 0x18]
	AddMultiplePassMaterialChangeParams PerspectiveMaterialParams;//[Offset: 0xe0, Size: 0x40]
	SoftClassPath DirectorModeSpectatorPawnClass;//[Offset: 0x120, Size: 0x18]
	FName DirectorModeInputModeName;//[Offset: 0x138, Size: 0x8]
	float UpdateDistanceInterval;//[Offset: 0x140, Size: 0x4]
	float OBTeamListNearbyDistance;//[Offset: 0x144, Size: 0x4]
	float OBHeadInfoNearDistance;//[Offset: 0x148, Size: 0x4]
	float OBHeadInfoFarDistance;//[Offset: 0x14c, Size: 0x4]
	float OBDamageTextHideDistance;//[Offset: 0x150, Size: 0x4]
	float OBDelayTimeForTournament;//[Offset: 0x154, Size: 0x4]
	float OBLivePreDownloadTime;//[Offset: 0x158, Size: 0x4]
	float OBSkipBeginningTime;//[Offset: 0x15c, Size: 0x4]
	float[] OBPlaybackSpeedList;//[Offset: 0x160, Size: 0x10]
	byte OBPlaybackSpeedDefaultIndex;//[Offset: 0x170, Size: 0x1]
	byte OBLiveDelayChunkCount;//[Offset: 0x171, Size: 0x1]
	FName OBLockCameraBindBoneName;//[Offset: 0x174, Size: 0x8]
	Vector OBLockCameraBindBoneOffset;//[Offset: 0x17c, Size: 0xc]
	float OBInitLockDistance;//[Offset: 0x188, Size: 0x4]
	float OBMinLockDistance;//[Offset: 0x18c, Size: 0x4]
	float OBMaxLockDistance;//[Offset: 0x190, Size: 0x4]
	float OBMinLockPitch;//[Offset: 0x194, Size: 0x4]
	float OBMaxLockPitch;//[Offset: 0x198, Size: 0x4]
	float OBPitchAdjustTriggerFloor;//[Offset: 0x19c, Size: 0x4]
	float OBPitchAdjustValue;//[Offset: 0x1a0, Size: 0x4]
	int ReplayCacheFileRetentionTimeInSeconds;//[Offset: 0x1a4, Size: 0x4]
	int HighlightFileRetentionTimeInSeconds;//[Offset: 0x1a8, Size: 0x4]
	int HighlightFileMaxCount;//[Offset: 0x1ac, Size: 0x4]
	int HighlightMinimalDiskSpaceInMB;//[Offset: 0x1b0, Size: 0x4]
	int[] EnableHighlightModeGroups;//[Offset: 0x1b8, Size: 0x10]
	SoftClassPath AutoDirectorComponentClass;//[Offset: 0x1c8, Size: 0x18]
	delegate OnPlayingStartedDelegate;//[Offset: 0x1e8, Size: 0x10]
	delegate OnPlayingLoadLevelsStartedDelegate;//[Offset: 0x1f8, Size: 0x10]
	delegate OnPlayingLevelLoadedDelegate;//[Offset: 0x208, Size: 0x10]
	delegate OnPlayingStreamReadiedDelegate;//[Offset: 0x218, Size: 0x10]
	delegate OnPlayingAtEndDelegate;//[Offset: 0x228, Size: 0x10]
	delegate OnPlayingFinishedDelegate;//[Offset: 0x238, Size: 0x10]
	delegate OnRecordingStartedDelegate;//[Offset: 0x248, Size: 0x10]
	delegate OnRecordingStartFailedDelegate;//[Offset: 0x258, Size: 0x10]
	delegate OnRecordingFinishedDelegate;//[Offset: 0x268, Size: 0x10]
	delegate OnPlayingScrubStartDelegate;//[Offset: 0x278, Size: 0x10]
	delegate OnPlayingPreScrubDelegate;//[Offset: 0x288, Size: 0x10]
	delegate OnPlayingFirstScrubFinishedDelegate;//[Offset: 0x298, Size: 0x10]
	delegate OnPlayingScrubFailedDelegate;//[Offset: 0x2a8, Size: 0x10]
	delegate OnPlayingScrubCharactersCreatedDelegate;//[Offset: 0x2b8, Size: 0x10]
	delegate OnPlayingPauseDelegate;//[Offset: 0x2c8, Size: 0x10]
	delegate OnPlayingContinueDelegate;//[Offset: 0x2d8, Size: 0x10]
	delegate OnPlaybackSpeedChangedDelegate;//[Offset: 0x2e8, Size: 0x10]
	delegate OnCheatersPlayerIDChanged;//[Offset: 0x2f8, Size: 0x10]
	delegate OnAutoPlaybackSpeedUpStart;//[Offset: 0x308, Size: 0x10]
	delegate OnAutoPlaybackSpeedUpStop;//[Offset: 0x318, Size: 0x10]
	delegate OnHighlightListChanged;//[Offset: 0x368, Size: 0x10]
	UserWidget* WaitingReplayStartUI;//[Offset: 0x3f0, Size: 0x8]
	void WriteHeaderData(out FString[] OutHeaderData);// 0x1c9704f39041
	void StopRecording();// 0x1c9604f39041
	void StopPlayReplay();// 0x1c9504f39041
	void StartRecording(FString SessionName, FString UploadUrl, enum ForceRecordingType);// 0x1c9404f39041
	void StartRecordHighlightOfCurrentBattle(FString SessionNameOverride);// 0x1c9304f39041
	void SpeedUpTimeDilation();// 0x1c9204f39041
	void SlowDownTimeDilation();// 0x1c9104f39041
	bool ShouldShowProgressBar();// 0x1c9004f39041
	void SetTimeDilation(float Dilation);// 0x1c8f04f39041
	void SetStartSpectateTournamentTime();// 0x1c8e04f39041
	void SetRequestTryStrategy(float Interval, int Times);// 0x1c8d04f39041
	void SetRecordingType(enum InRecordingType);// 0x1c8c04f39041
	void SetReadyToRecord(bool bIsReady, out const FString[] OBPlayerIDs);// 0x1c8b04f39041
	void SetLiveWatchingPlayerForPlaying(FString BeWatchingPlayerID);// 0x1c8a04f39041
	void SetEnableCompressForHttpReplay(bool bEnable);// 0x1c8904f39041
	void RetryPlayReplayFromServer();// 0x1c8804f39041
	void ResetTimeDilation();// 0x1c8704f39041
	void RequestWatchingLiveOfPlayer(FString SolarPlayerID);// 0x1c8604f39041
	void RequestPlayReplayOfCurrentBattle();// 0x1c8504f39041
	void RequestPlayReplay(FString InBattleID, bool IsLive);// 0x1c8404f39041
	void RequestCheckpointForLiveWatch();// 0x1c8304f39041
	void RequestBattleList(int PageIndex, int PageSize);// 0x1c8204f39041
	void ReplayManagerNoParamDelegate__DelegateSignature();// 0x1c8104f39041
	void RecordReplayInfosOnRecordingStarted();// 0x1c8004f39041
	void ReceivePlayingStartFailed();// 0x1c7f04f39041
	bool ReceivePlayingFinished(enum reason, byte StreamerErrorCode, FString StreamerErrorMsg);// 0x1c7d04f39041
	void ProcessHeaderData(out const FString[] HeaderData, out FString Error);// 0x1c7c04f39041
	void PlayReplayFromServer(FString SessionName, FString DownloadUrl);// 0x1c7b04f39041
	void PlayReplayFromLocal(FString ReplayFileName);// 0x1c7a04f39041
	void PlayingFinishedInternal();// 0x1c7904f39041
	void PlayHighlight(FString InBattleID);// 0x1c7804f39041
	void PausePlayReplay();// 0x1c7704f39041
	void OnPlayingFinished(World* World);// 0x1c7604f39041
	void OnPlayingAtEnd(World* World);// 0x1c7504f39041
	void OnPlayerStopWatchingLive(FString StopWatchingPlayerID);// 0x1c7404f39041
	void OnPlayerStartWatchingLive(FString RequestWatchingPlayerID, FString BeWatchingPlayerID);// 0x1c7304f39041
	void OnLocalStreamerFinishedWriting(FString StreamName, FString FullReplayFile);// 0x1c7204f39041
	void OnLiveWatchTargetLost();// 0x1c7104f39041
	void NotifyTournamentSpectate(bool bIsInLiveReplay);// 0x1c7004f39041
	bool NotifyBackendPlayReplayFinished();// 0x1c6f04f39041
	void LuaOnPostLoadMapWithWorld(FString LevelName);// 0x1c6e04f39041
	void LuaBindDelegates();// 0x1c6d04f39041
	bool IsTournament();// 0x1c6c04f39041
	bool IsScrubing();// 0x1c6b04f39041
	bool IsRequestingReplayDownloadInfo();// 0x1c6a04f39041
	bool IsReplayLive();// 0x1c6904f39041
	bool IsRecordingHighlight();// 0x1c6804f39041
	bool IsRecording();// 0x1c6704f39041
	bool IsReady();// 0x1c6604f39041
	bool IsPlayingHighlight();// 0x1c6504f39041
	bool IsPlaying();// 0x1c6404f39041
	bool IsPlayerBeWatching(FString SolarPlayerID);// 0x1c6304f39041
	bool IsPausing();// 0x1c6204f39041
	bool IsLocal();// 0x1c6104f39041
	bool IsLiveWatchOnly();// 0x1c6004f39041
	bool IsInState(enum CheckState);// 0x1c5e04f39041
	bool IsHighlightVersionOut(FString HighlightFileName);// 0x1c5d04f39041
	bool IsAutoDirecting();// 0x1c5c04f39041
	bool IsAutoDirectable();// 0x1c5b04f39041
	bool IsACheater(FString PlayerId);// 0x1c5a04f39041
	void IgnoreTournamentDelayTimeForNextPlay();// 0x1c5904f39041
	bool HasHighlight(FString InBattleID);// 0x1c5804f39041
	void GotoTimeInSecond(float Second);// 0x1c5704f39041
	float GetTotalSessionTimeInSecond();// 0x1c5604f39041
	float GetTimeDilation();// 0x1c5504f39041
	void GetStartRecordingParams(out StartRecordingParams OutParams);// 0x1c5304f39041
	enum GetRecordingType();// 0x1c5104f39041
	float GetCurrentSessionTimeInSecond();// 0x1c5004f39041
	FString GetCurrentSessionName();// 0x1c4f04f39041
	FString GetBeWatchingPlayerID();// 0x1c4e04f39041
	FString GetBattleIDByIndex(int Index);// 0x1c4d04f39041
	void EnterSettlementStage();// 0x1c4c04f39041
	void DestroyWaitingOBStartUI();// 0x1c4b04f39041
	void DebugAllPlayerIsBeWatching(bool bAllPlayerIsBeWatching);// 0x1c4a04f39041
	void CreateWaitingOBStartUI();// 0x1c4904f39041
	void ContinuePlayReplay();// 0x1c4804f39041
	bool CheckMemoryCanPlayReplay();// 0x1c4704f39041
	void AppendCheatersPlayerID(out const FString[] InCheatersPlayerID);// 0x1c4604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayCueTag
	GameplayTag GameplayCueTag;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AddMultiplePassMaterialChangeParams
	GameplayTag PriorityTag;//[Offset: 0x0, Size: 0x8]
	enum ResolveStrategy;//[Offset: 0x8, Size: 0x1]
	enum CompatibilityMode;//[Offset: 0x9, Size: 0x1]
	GameplayTagContainer SpecifiedPriorityTags;//[Offset: 0x10, Size: 0x20]
	bool bNeedMultiplePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bForceFrontFaceCull;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bIgnoreTranslucentSection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bIgnoreMaskedSection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	bool bSetTranslucencySortPriorityOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	int MainPassDepthStencilValue;//[Offset: 0x34, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x38, Size: 0x4]
	int CustomDepthStencilValue;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StartRecordingParams
	bool bWithLevelStreamingFixes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bEnableCheckpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	uint32 RecordHz;//[Offset: 0x4, Size: 0x4]
	float CheckpointInterval;//[Offset: 0x8, Size: 0x4]
	float ChunkInterval;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OBHighlightOverviewWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	delegate OverviewPlayEnd;//[Offset: 0x400, Size: 0x10]
	delegate TranslatePlayBeginOver;//[Offset: 0x410, Size: 0x10]
	delegate TranslatePlayEndOver;//[Offset: 0x420, Size: 0x10]
	delegate HighlightPlayEnd;//[Offset: 0x430, Size: 0x10]
	void SwitchKillToolData(out const enum ToolType, out const int KillToolID);// 0x4a7f04f39041
	void ShowHighlightTranslateNum(out const int TranslateNum);// 0x4a7e04f39041
	void ShowHighlightOverviewData(out const PlayerHighlightOverview OverviewData);// 0x4a7d04f39041
	void ShowHighlightMarkResult(out const float TotalScore, FString MarkName);// 0x4a7c04f39041
	void ShowHighlightKillToolEffect(FString ToolName, out const Texture2D* ToolIcon);// 0x4a7b04f39041
	void ShowHighlightKillNum(out const int KillNum, out const float KillEffectTime);// 0x4a7a04f39041
	void OnTranslatePlayEndOver();// 0x4a7904f39041
	void OnTranslatePlayBeginOver();// 0x4a7804f39041
	void OnOverviewPlayEnd();// 0x4a7704f39041
	void OnHighlightPlayEnd();// 0x4a7604f39041
	void HighlightOver();// 0x4a7504f39041
	void HighlightFragmentOver();// 0x4a7404f39041
	void ContinueHighlightTranslate();// 0x4a7304f39041
	void CollectReplayPlayerOverviewData(FString PlayerId, out ReplayPlayerOverviewData PlayerOverviewData);// 0x4a7204f39041
	void CalcHighlightMarkResult(float Score, out const ReplayActivityKillDetail[] KillDetails);// 0x4a7104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplayPlayerOverviewData
	FString playerName;//[Offset: 0x0, Size: 0x10]
	FString HeroName;//[Offset: 0x10, Size: 0x10]
	Texture2D* SkinResourcePtr;//[Offset: 0x20, Size: 0x28]
	int PlayerNum;//[Offset: 0x48, Size: 0x4]
	FString GameModeName;//[Offset: 0x50, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementTempData
	int TotalAccountExp;//[Offset: 0x0, Size: 0x4]
	int AccountLevel;//[Offset: 0x4, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0x58, Size: 0x4]
	int TotalCharacterExp;//[Offset: 0x5c, Size: 0x4]
	bool bCharExpFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	int RankBeforeScore;//[Offset: 0x64, Size: 0x4]
	int RankAfterScore;//[Offset: 0x68, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x6c, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x70, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x74, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x78, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x7c, Size: 0x4]
	int RankLegend;//[Offset: 0x80, Size: 0x4]
	byte RankProtectType;//[Offset: 0x84, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	int WinninScoreID;//[Offset: 0x88, Size: 0x4]
	int BattlePassID;//[Offset: 0x8c, Size: 0x4]
	int BattlePassAddExp;//[Offset: 0x90, Size: 0x4]
	int BattlePassExp;//[Offset: 0x94, Size: 0x4]
	int[] BattlePassTaskID;//[Offset: 0x98, Size: 0x10]
	int[] BattlePassTaskWeek;//[Offset: 0xa8, Size: 0x10]
	int[] BattlePassTaskAdd;//[Offset: 0xb8, Size: 0x10]
	int[] BattlePassTaskVal;//[Offset: 0xc8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExposeLocationMap
	<SolarPlayerState*,int> InnerMap;//[Offset: 0x0, Size: 0x50]
	SolarPlayerState* Owner;//[Offset: 0x50, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeamInfo.Info.Actor.Object
	byte TeamID;//[Offset: 0x240, Size: 0x1]
	byte TeamRank;//[Offset: 0x241, Size: 0x1]
	byte KillCount;//[Offset: 0x242, Size: 0x1]
	byte MemberLimit;//[Offset: 0x243, Size: 0x1]
	FText TeamName;//[Offset: 0x248, Size: 0x18]
	byte MatchCount;//[Offset: 0x260, Size: 0x1]
	bool bHasSettled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x261, Size: 0x1]
	delegate OnJoinTeam;//[Offset: 0x262, Size: 0x1]
	delegate OnLeaveTeam;//[Offset: 0x263, Size: 0x1]
	SolarPlayerState*[] BotMembers;//[Offset: 0x268, Size: 0x10]
	SolarPlayerState*[] PlayerMembers;//[Offset: 0x278, Size: 0x10]
	SolarPlayerState*[] TeamMembers;//[Offset: 0x288, Size: 0x10]
	SolarTeamInfoComponent* TeamInfoDetails;//[Offset: 0x298, Size: 0x8]
	enum MatchResult;//[Offset: 0x2a1, Size: 0x1]
	void Settle(byte Rank);// 0x454504f39041
	void RemoveFromTeam(SolarPlayerState* PS);// 0x454404f39041
	void ReceivedTeamID();// 0x454304f39041
	void ReceivedKillCount();// 0x454204f39041
	void ReceivedHasSettled();// 0x454104f39041
	void RearrangeMembersPos();// 0x454004f39041
	void OnPlayerStateEndPlay(Actor* Actor, byte EndPlayReason);// 0x453f04f39041
	bool IsInTeam(const SolarPlayerState* PS);// 0x453e04f39041
	bool IsAPlayerTeam();// 0x453d04f39041
	bool IsAOnlyPlayerTeam();// 0x453c04f39041
	bool IsAOnlyBotTeam();// 0x453b04f39041
	bool IsA(enum TeamType);// 0x453a04f39041
	void InitFromGameModeConfig();// 0x453904f39041
	bool HasBeenEliminated();// 0x453804f39041
	SolarPlayerState* GetTeammatePlayerByPosInTeam(int InPosInTeam);// 0x453704f39041
	int GetSize();// 0x453604f39041
	void GetSCMPlayerStateTeamMembers(out SCMPlayerState*[] OutTeamMembers);// 0x453504f39041
	int GetAliveTeammateNum();// 0x453404f39041
	void AddToTeam(SolarPlayerState* PS);// 0x453304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeamInfoComponent.ActorComponent.Object
	int KillDownCount;//[Offset: 0xb0, Size: 0x4]
	int AssistCount;//[Offset: 0xb4, Size: 0x4]
	int DeathCount;//[Offset: 0xb8, Size: 0x4]
	int SaveCount;//[Offset: 0xbc, Size: 0x4]
	SolarTeamAttributeSet TeamAttributeSet;//[Offset: 0xc0, Size: 0x78]
	WorldMarkDataDetails WorldMarkDatas;//[Offset: 0x138, Size: 0x120]
	void OnWorldMarkAttachedActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x5dd704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeamAttributeSet
	SolarTeamAttribute TeamTreatmentDurationReductionMultiple;//[Offset: 0x0, Size: 0x18]
	SolarTeamAttribute TeamShieldChargeDurationReductionMultiple;//[Offset: 0x18, Size: 0x18]
	SolarTeamAttribute TeamBigShieldChargeDurationReductionMultiple;//[Offset: 0x30, Size: 0x18]
	SolarTeamAttribute TeamItemDiscountMultiple;//[Offset: 0x48, Size: 0x18]
	SolarTeamAttribute TeamItemAdditionMultiple;//[Offset: 0x60, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeamAttribute
	float Value;//[Offset: 0x0, Size: 0x4]
	SCMPlayerState*[] Contributors;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	enum BattleState;//[Offset: 0xbb8, Size: 0x1]
	enum PlayerOutType;//[Offset: 0xbb9, Size: 0x1]
	enum PlayerType;//[Offset: 0xbba, Size: 0x1]
	enum PlayerGameRole;//[Offset: 0xbbb, Size: 0x1]
	SCMReplicateHostData[] ReplicateData;//[Offset: 0xbd0, Size: 0x10]
	float ReviveStartTime;//[Offset: 0xbf0, Size: 0x4]
	SolarPlayerState* RevivingTeammatePS;//[Offset: 0xbf8, Size: 0x8]
	SolarTaskComponent* TaskSystem;//[Offset: 0xc10, Size: 0x8]
	class ActorComponent[] GMComponentClasses;//[Offset: 0xc18, Size: 0x10]
	ActorComponent*[] SpawnedGMComps;//[Offset: 0xc28, Size: 0x10]
	void UpdateTaskInfo(out const TaskUpdateInfo InTaskInfo);// 0x261e04f39041
	void UpDateDataManager(const SCMReplicateHostData[] InReplicateData, bool bInit);// 0x261d04f39041
	void ServerChangePlayerCharacter(int NewCharacterID, int NewSkinID);// 0x261c04f39041
	void ServerBeginSpectate(SCMPlayerState* TargetPlayer);// 0x261b04f39041
	void ReviveSelfAsWinner(bool bOverrideLocation, out const Vector ReviveLocation);// 0x261a04f39041
	void RequestStartGame();// 0x261904f39041
	void RequestSetWeaponTypeAvailableLuaCall(enum WeaponUIType, bool bIsAvailable);// 0x261804f39041
	void RequestSetWeaponTypeAvailable(enum WeaponUIType, bool bIsAvailable);// 0x261704f39041
	void RequestSetWeaponAvailableLuaCall(int weaponid, bool bIsAvailable);// 0x261604f39041
	void RequestSetWeaponAvailable(int weaponid, bool bIsAvailable);// 0x261504f39041
	void RequestSetVehicleTypeAvailableLuaCall(int VehicleTypeID, bool bIsAvailable);// 0x261404f39041
	void RequestSetVehicleTypeAvailable(int VehicleTypeID, bool bIsAvailable);// 0x261304f39041
	void RequestSetVehicleClassAvailableLuaCall(enum VehicleClass, bool bIsAvailable);// 0x261204f39041
	void RequestSetVehicleClassAvailable(enum VehicleClass, bool bIsAvailable);// 0x261104f39041
	void RequestSetUserSettingLuaCall(out const int Category, out const int Name, enum ParamType, out const int Value);// 0x261004f39041
	void RequestSetUserSetting(const int Category, const int Name, enum ParamType, const int Value);// 0x260f04f39041
	void RequestSetRoomPoolPrizeTypeLuaCall(int TypeID);// 0x260e04f39041
	void RequestSetRoomPoolPrizeType(int TypeID);// 0x260d04f39041
	void RequestSetRoomPasswdLuaCall(FString Passwd);// 0x260c04f39041
	void RequestSetRoomPasswd(FString Passwd);// 0x260b04f39041
	void RequestSetRoomNameLuaCall(FString Name);// 0x260a04f39041
	void RequestSetRoomName(FString Name);// 0x260904f39041
	void RequestSetRoomLevelLimitLuaCall(int Level);// 0x260804f39041
	void RequestSetRoomLevelLimit(int Level);// 0x260704f39041
	void RequestSetInviteEnableLuaCall(bool bEnable);// 0x260604f39041
	void RequestSetInviteEnable(bool bEnable);// 0x260504f39041
	void RequestSetExchangeEnableLuaCall(bool bEnable);// 0x260404f39041
	void RequestSetExchangeEnable(bool bEnable);// 0x260304f39041
	void RequestPlayersRandomToTeamLuaCall();// 0x260204f39041
	void RequestPlayersRandomToTeam();// 0x260104f39041
	void RequestPlayersFillTeamLuaCall();// 0x260004f39041
	void RequestPlayersFillTeam();// 0x25ff04f39041
	void RequestKickPlayerOutLuaCall(SCMPlayerState* Player);// 0x25fe04f39041
	void RequestKickPlayerOut(SCMPlayerState* Player);// 0x25fd04f39041
	void RequestExchangeTeamsAndPos(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x25fc04f39041
	void RequestChangeTeam(SCMPlayerState* Player, FString TeamName, const int NewPosInTeam);// 0x25fb04f39041
	void RequesJoinOB(SCMPlayerState* Player);// 0x25fa04f39041
	void OnUpdateLifeTime();// 0x25f904f39041
	void OnRep_RevivingTeammatePS(SolarPlayerState* LastRevivingTeammatePS);// 0x25f804f39041
	void OnRep_BattleState();// 0x25f704f39041
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x25f604f39041
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x25f504f39041
	void NotifyUpdateCGMData(FString InDataName);// 0x25f404f39041
	void NotifyClientUpdateDataManager(bool bInit);// 0x25f304f39041
	bool NeedConsiderRepData();// 0x25f204f39041
	bool IsPreJoinPlayer();// 0x25f104f39041
	void InitTaskInfo(out const BattlePassInfo InTaskInfo);// 0x25ed04f39041
	SCMReplicateHostData[] GetReplicateDataArray();// 0x25e704f39041
	SCMPlayerState*[] GetMyTeamPlayerList();// 0x25e604f39041
	void CanPlayerBattle();// 0x25e504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMReplicateHostData
	enum HostType;//[Offset: 0x0, Size: 0x1]
	FString HostID;//[Offset: 0x8, Size: 0x10]
	SCMRepData[] RepDataArray;//[Offset: 0x18, Size: 0x10]
	SCMRepDataArray[] RepArrDataArray;//[Offset: 0x28, Size: 0x10]
	SCMRepDataMap[] RepMapDataArray;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMRepData
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum DataChangeType;//[Offset: 0x11, Size: 0x1]
	int VInt;//[Offset: 0x14, Size: 0x4]
	float VFloat;//[Offset: 0x18, Size: 0x4]
	Vector_NetQuantize100 VVector;//[Offset: 0x1c, Size: 0xc]
	FString VString;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMRepDataArray
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	uint32[] ChangeIndexArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMRepDataMap
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	FString[] KeyArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TaskUpdateInfo
	bool delAllTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int64[] delIDs;//[Offset: 0x8, Size: 0x10]
	BattlePassInfo Task;//[Offset: 0x18, Size: 0x28]
	FString PlayerId;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattlePassInfo
	TaskBriefData[] tasks;//[Offset: 0x0, Size: 0x10]
	int64 BattlePassID;//[Offset: 0x10, Size: 0x8]
	int64 currWeek;//[Offset: 0x18, Size: 0x8]
	int64 maxWeek;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TaskBriefData
	int64 TaskID;//[Offset: 0x0, Size: 0x8]
	int64 BaseValue;//[Offset: 0x8, Size: 0x8]
	int64 CurValue;//[Offset: 0x10, Size: 0x8]
	int64 status;//[Offset: 0x20, Size: 0x8]
	enum page;//[Offset: 0x28, Size: 0x1]
	int64 week;//[Offset: 0x30, Size: 0x8]
	bool IsMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTaskComponent.ActorComponent.Object
	delegate TaskUpdateDelegate;//[Offset: 0xb8, Size: 0x10]
	delegate TaskCompoleteDelegate;//[Offset: 0xc8, Size: 0x10]
	delegate MarkingTaskChangedDelegate;//[Offset: 0xd8, Size: 0x10]
	delegate ClientTaskUpdatedDelegate;//[Offset: 0xe8, Size: 0x10]
	delegate ClientBattlePassTimeInfoDelegate;//[Offset: 0xf8, Size: 0x10]
	DataTable* TaskTypeHandleConfig;//[Offset: 0x108, Size: 0x8]
	class TaskFormula* TaskFormula;//[Offset: 0x110, Size: 0x8]
	TaskFormula* FormulaInst;//[Offset: 0x118, Size: 0x8]
	int64[] MarkingTask;//[Offset: 0x120, Size: 0x10]
	BattlePassTimeInfo BattlePassTimeInfo;//[Offset: 0x130, Size: 0x18]
	TaskBriefData[] tasks;//[Offset: 0x148, Size: 0x10]
	void ServerEnableMarkTask(int64 InTaskID, bool bMarking);// 0x5d8004f39041
	void OnRep_Tasks();// 0x5d7f04f39041
	void OnRep_MarkingTask();// 0x5d7e04f39041
	void OnRep_BattlePassTimeInfo();// 0x5d7d04f39041
	bool IsMaxLevel();// 0x5d7c04f39041
	bool IsEnable();// 0x5d7b04f39041
	BattlePassTimeInfo GetBattlePassTimeInfo();// 0x5d7a04f39041
	TaskBriefData[] GetAllTaskBriefData();// 0x5d7904f39041
	int64[] GetAllMarkTask();// 0x5d7804f39041
	void EnableMarkTask(int64 InTaskID, bool bMarking);// 0x5d7704f39041
	void ClientNotifyTaskComplete(const TaskBriefData InTaskInfo);// 0x5d7604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattlePassTimeInfo
	int64 BattlePassID;//[Offset: 0x0, Size: 0x8]
	int64 currWeek;//[Offset: 0x8, Size: 0x8]
	int64 maxWeek;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TaskFormula.Info.Actor.Object
	SolarTaskComponent* TaskSystem;//[Offset: 0x228, Size: 0x8]
	void SetTaskProgress(int64 InTaskID, int64 ProgressValue, bool bOverrideLastMatch);// 0x5d7504f39041
	void IncreaseTaskProgress(int64 InTaskID, int64 ProgressValue);// 0x5d7404f39041
	int GetTaskConditionValue(int64 InTaskID, int64 Index);// 0x5d7304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPointDamageEvent.PointDamageEvent.DamageEvent
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bIgnoreShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	float ActualShieldDamage;//[Offset: 0xac, Size: 0x4]
	bool bBreakArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bIgnoreArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	float ActualArmorDamage;//[Offset: 0xb4, Size: 0x4]
	byte SolarAttributeType;//[Offset: 0xb8, Size: 0x1]
	bool bPreFakeInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	byte HealthChangeType;//[Offset: 0xba, Size: 0x1]
	SolarAbility* DamageAbility;//[Offset: 0xc0, Size: 0x8]
	SolarAbilityEffect* DamageAbilityEffect;//[Offset: 0xc8, Size: 0x8]
	enum ResultType;//[Offset: 0xd0, Size: 0x1]
	bool bJustForShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bCanDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	int UseWeaponID;//[Offset: 0xd4, Size: 0x4]
	enum DamageType;//[Offset: 0xd8, Size: 0x1]
	Actor* DamageCauser;//[Offset: 0xdc, Size: 0x8]
	FString HitBoneName;//[Offset: 0xf0, Size: 0x10]
	bool bHitVehicleWeakPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bHitHumanoidTargetHead;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 0xc]
	HitResult HitInfo;//[Offset: 0x20, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbility.Actor.Object
	class SolarAbility* MyAbilityClass;//[Offset: 0x228, Size: 0x8]
	class SolarAbilityEffect[] AbilityEffectClasses;//[Offset: 0x230, Size: 0x10]
	SolarCharacter* AbilitySourceCharacter;//[Offset: 0x240, Size: 0x8]
	Transform SpawnTransform;//[Offset: 0x250, Size: 0x30]
	bool InstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool DoNotAutoApply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	bool ApplyToSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 0x1]
	bool RadialAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 0x1]
	float RadialAbilityRadius;//[Offset: 0x284, Size: 0x4]
	bool bRadialIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bRadialIgnoreVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	bool CheckSourceToTargetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 0x1]
	bool EnableAbilityDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 0x1]
	bool bActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	FString ExtraInfo;//[Offset: 0x290, Size: 0x10]
	Actor* InitiatorActor;//[Offset: 0x2a0, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x2a8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x2b0, Size: 0x8]
	<FString,float> EffectParams;//[Offset: 0x2b8, Size: 0x50]
	void WeaponApplyAbility(const Object* WorldContextObject, class SolarAbility SolarAbilityClass, Actor* SourceActor, Actor* TargetActor, out const Vector HitLocation, out const FName HitBoneName, float Scale, out const Rotator ProjRotator, FString InExtarInfo, PrimitiveComponent* HitComponent);// 0x4d6804f39041
	void StopSound();// 0x4d6704f39041
	void StaticRemoveSolarAbilityFrom(class SolarAbility AbilityClass, Actor* AffectingActor);// 0x4d6604f39041
	void StaticApplySolarAbilityToWithHitResult(class SolarAbility AbilityClass, Actor* AffectingActor, out const HitResult HitResult, const float Scale, FString InExtarInfo, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation);// 0x4d6504f39041
	void StaticApplySolarAbilityTo(class SolarAbility AbilityClass, Actor* AffectingActor, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation, out const Vector HitLocation, out const FName HitBoneName, float Scale, FString InExtraInfo, PrimitiveComponent* HitComponent);// 0x4d6404f39041
	void ServerSetActivated();// 0x4d6304f39041
	void RestoreSound();// 0x4d6204f39041
	void RemoveSolarAbilityFrom(Actor* ApplyToActor);// 0x4d6104f39041
	void PlaySound();// 0x4d6004f39041
	void PauseSound();// 0x4d5f04f39041
	bool IsLocalControl();// 0x4d5e04f39041
	bool InSameTeam();// 0x4d5d04f39041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4d5c04f39041
	bool CheckActor(Actor* SourceActor, Actor* TargetActor);// 0x4d5b04f39041
	void ApplySolarAbilityTo(Actor* ApplyToActor, Actor* SourceActor);// 0x4d5a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbilityEffect.Object
	SoftObjectPath EffectIconPath;//[Offset: 0x28, Size: 0x18]
	SolarAttributeModifier[] AttributeModifiers;//[Offset: 0x40, Size: 0x10]
	bool bAllowMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	SolarCharacterBase* AbilityEffectAffectingCharacter;//[Offset: 0x110, Size: 0x8]
	SolarAbilityComponent* AbilityEffectAffectingAbilityComponent;//[Offset: 0x118, Size: 0x8]
	SolarAbility* AffectingAbility;//[Offset: 0x120, Size: 0x8]
	FString ExtraInfo;//[Offset: 0x128, Size: 0x10]
	<FString,float> AttributeParamMap;//[Offset: 0x138, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeModifier
	byte SolarAttributeType;//[Offset: 0x0, Size: 0x1]
	enum AttributeDurationType;//[Offset: 0x1, Size: 0x1]
	enum AttributeDurationSourceType;//[Offset: 0x2, Size: 0x1]
	float AttributeModifyDuration;//[Offset: 0x4, Size: 0x4]
	FString AttributeModifyDurationSourceKey;//[Offset: 0x8, Size: 0x10]
	float AttributeModifyMinDistance;//[Offset: 0x18, Size: 0x4]
	float AttributeModifyMaxDistance;//[Offset: 0x1c, Size: 0x4]
	CurveFloat* AttributeDistanceScaleCurve;//[Offset: 0x20, Size: 0x8]
	bool AttributeUseTargetValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float AttributeTargetValue;//[Offset: 0x2c, Size: 0x4]
	enum AttributeChangeValueSourceType;//[Offset: 0x30, Size: 0x1]
	float AttributeChangeValue;//[Offset: 0x34, Size: 0x4]
	float AttributeChangeValueForVehicle;//[Offset: 0x38, Size: 0x4]
	FString AttributeChangeValueSourceKey;//[Offset: 0x40, Size: 0x10]
	bool AttributeChangeValueIsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum AttributeChangeSpeedSourceType;//[Offset: 0x58, Size: 0x1]
	FString AttributeChangeSpeedSourceKey;//[Offset: 0x60, Size: 0x10]
	float AttributeChangeSpeed;//[Offset: 0x70, Size: 0x4]
	bool AttributeApplyChargingScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	int[] AttributeExtraIntParam;//[Offset: 0x78, Size: 0x10]
	float[] AttributeExtraFloatParam;//[Offset: 0x88, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbilityComponent.ActorComponent.Object
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectMap;//[Offset: 0xb8, Size: 0x50]
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectsThisTick;//[Offset: 0x108, Size: 0x50]
	ReplicateEffectData[] ReplicateEffectDatas;//[Offset: 0x158, Size: 0x10]
	bool CharacterWeaponDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool CharacterMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	float MoveSpeedCoeffient;//[Offset: 0x174, Size: 0x4]
	MaterialInterface* OriginalMaterial;//[Offset: 0x178, Size: 0x8]
	float ShieldRechargeCostCoefficient;//[Offset: 0x180, Size: 0x4]
	void OnRep_SpeedCoeffient();// 0x4d6b04f39041
	void OnRep_ReplicateEffectData();// 0x4d6a04f39041
	int GetCharacterLevel();// 0x4d6904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicateEffectData
	SoftObjectPath IconPath;//[Offset: 0x0, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 0x1]
	byte OcclusionCollisionChannel;//[Offset: 0x338, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 0x1]
	float OuterRadius;//[Offset: 0x33c, Size: 0x4]
	float InnerRadius;//[Offset: 0x340, Size: 0x4]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x348, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x350, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x360, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x364, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x368, Size: 0x4]
	float roomReverbAuxBusGain;//[Offset: 0x36c, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x370, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x374, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x378, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37c, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37c, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37c, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37c, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x380, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x384, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	bool bIsInDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	bool AutoUpdatePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 0x1]
	bool EnableOccObsRTPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fa, Size: 0x1]
	bool AutoPostEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fb, Size: 0x1]
	float DistanceToListener;//[Offset: 0x4fc, Size: 0x4]
	bool IsListeningToSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x409604f39041
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x409504f39041
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x409404f39041
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x409304f39041
	void SetOutputBusVolume(float BusVolume);// 0x409204f39041
	void SetListeners(out const AkComponent*[] Listeners);// 0x409104f39041
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);// 0x409004f39041
	void SetEarlyReflectionsVolume(float SendVolume);// 0x408f04f39041
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x408e04f39041
	void SetAttenuationScalingFactor(float Value);// 0x408d04f39041
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x408c04f39041
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x408b04f39041
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x408a04f39041
	int PostAkEventByName(FString in_EventName);// 0x408904f39041
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x408804f39041
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x408704f39041
	AkRoomComponent* GetCurrentRoom();// 0x408604f39041
	float GetAttenuationRadius();// 0x408504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x318, Size: 0x8]
	FString EventName;//[Offset: 0x320, Size: 0x10]
	void Stop();// 0x408404f39041
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x408304f39041
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x408204f39041
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x408104f39041
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x408004f39041
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x407f04f39041
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x407e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 0x4]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa0, Size: 0x50]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAssetData.Object
	uint32 CachedHash;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 0x8]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MinimumDuration;//[Offset: 0xc0, Size: 0x4]
	float MaximumDuration;//[Offset: 0xc4, Size: 0x4]
	float GetMinimumDuration();// 0x407d04f39041
	float GetMaximumDuration();// 0x407c04f39041
	float GetMaxAttenuationRadius();// 0x407b04f39041
	bool GetIsInfinite();// 0x407a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkRtpc.AkAudioType.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkSwitchValue.AkGroupValue.AkAudioType.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 0x10]
	uint32 GroupShortID;//[Offset: 0x50, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 0x4]
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkTrigger.AkAudioType.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkExternalMediaAsset.AkMediaAsset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkRoomComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x332, Size: 0x1]
	bool bDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x333, Size: 0x1]
	float Priority;//[Offset: 0x334, Size: 0x4]
	float WallOcclusion;//[Offset: 0x338, Size: 0x4]
	float AuxSendLevel;//[Offset: 0x33c, Size: 0x4]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	AkAcousticTextureSetComponent* GeometryComponent;//[Offset: 0x350, Size: 0x8]
	PrimitiveComponent* GetPrimitiveParent();// 0x411c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAcousticTextureSetComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAkGameObject.Object
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	void Wakeup();// 0x4e5f04f39041
	void UnloadBank(FString InBankName);// 0x4e5e04f39041
	void UnLoadAllBanks();// 0x4e5d04f39041
	void Suspend(bool in_bRenderAnyway);// 0x4e5c04f39041
	int StopSoundByEvent(FString in_EventName);// 0x4e5b04f39041
	int StaticStopSoundByEvent(FString in_EventName);// 0x4e5a04f39041
	void StaticSetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x4e5904f39041
	int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString in_EventName, LatentActionInfo LatentInfo);// 0x4e5804f39041
	int StaticPostAkEventByName(FString in_EventName);// 0x4e5704f39041
	int StaticPlaySoundByEvent(FString in_EventName);// 0x4e5604f39041
	int StaticPlaySoundAtLocationByName(FString AkName, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x4e5504f39041
	int StaticPlaySoundAtLocation(AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x4e5404f39041
	int StaticComponentPostAkEventByName(AkComponent* AkComponent, FString in_EventName);// 0x4e5304f39041
	void SolarLoadAllBanks();// 0x4e5204f39041
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x4e5104f39041
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs, float UpdateThreshold);// 0x4e5004f39041
	void SetMasterRTPCValue(float Value, int InterpolationTimeMs);// 0x4e4f04f39041
	void SetMasterRTPCMute(bool Mute);// 0x4e4e04f39041
	void SetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs, float UpdateThreshold);// 0x4e4d04f39041
	void ReceiveTick(float DeltaTime);// 0x4e4c04f39041
	void ReceiveEndPlay(const byte EndPlayReason);// 0x4e4b04f39041
	void ReceiveBeginPlay();// 0x4e4a04f39041
	int PostAkEventByNameAndWaitForEnd(FString in_EventName, LatentActionInfo LatentInfo);// 0x4e4904f39041
	int PostAkEventByName(FString InEventName1, FString InEventName2);// 0x4e4804f39041
	int PlaySoundByEvent(FString in_EventName);// 0x4e4704f39041
	void LoadBank(FString InBankName);// 0x4e4604f39041
	void LoadAllBanks();// 0x4e4504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMarkDataDetails.FastArraySerializer
	byte PlayerPosMax;//[Offset: 0x101, Size: 0x1]
	WorldMarkData[] AllMarkDatas;//[Offset: 0x108, Size: 0x10]
	SolarTeamInfoComponent* Owner;//[Offset: 0x118, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	float CharacterPickupRange;//[Offset: 0x600, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0x604, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0x608, Size: 0x4]
	FString PlayerId;//[Offset: 0x610, Size: 0x10]
	FString NickName;//[Offset: 0x620, Size: 0x10]
	bool IsPickuped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 0x1]
	SolarPlayerWeapon*[] WeaponList;//[Offset: 0x638, Size: 0x10]
	BoxChargingInfo[] ChargingChars;//[Offset: 0x648, Size: 0x10]
	float PickupRadius;//[Offset: 0x658, Size: 0x4]
	float ResurrectDistance;//[Offset: 0x65c, Size: 0x4]
	byte CurrResurrectionState;//[Offset: 0x660, Size: 0x1]
	float ReviveTotalTime;//[Offset: 0x664, Size: 0x4]
	float ReviveStartTime;//[Offset: 0x668, Size: 0x4]
	SkeletalMeshComponent* PreViewMesh;//[Offset: 0x670, Size: 0x8]
	FName ReviveStartSound;//[Offset: 0x678, Size: 0x8]
	FName ReviveBeforeCompleteSound;//[Offset: 0x680, Size: 0x8]
	FName ReviveCompleteSound;//[Offset: 0x688, Size: 0x8]
	FName ReviveFailedSound;//[Offset: 0x690, Size: 0x8]
	float ResurrectionBeforeSoundTime;//[Offset: 0x698, Size: 0x4]
	ParticleSystem* ReviveCompletePS;//[Offset: 0x6a0, Size: 0x8]
	FName ReviveCompletePSAttachedSocket;//[Offset: 0x6a8, Size: 0x8]
	float PreviewMeshZOffset;//[Offset: 0x6b0, Size: 0x4]
	float PreviewMeshZRotation;//[Offset: 0x6b4, Size: 0x4]
	SceneComponent* FXPosComponent;//[Offset: 0x6c8, Size: 0x8]
	ParticleSystem*[] QualityPS;//[Offset: 0x6d0, Size: 0x10]
	class ActorEffect* RevivePreviewEffectClass;//[Offset: 0x6f0, Size: 0x8]
	<enum,SoftObjectPath> PreviewAnim;//[Offset: 0x700, Size: 0x50]
	float SphereRadius;//[Offset: 0x750, Size: 0x4]
	float UnpickableSphereRadius;//[Offset: 0x754, Size: 0x4]
	void ReceiveSetUIEnable(bool IsShow);// 0x474304f39041
	void ReceiveRemoveEffect(const SolarCharacter* SolarChar);// 0x474204f39041
	void ReceiveRefreshExtraEnergy(FString Message);// 0x474104f39041
	void ReceiveAddEffect(const SolarCharacter* SolarChar);// 0x474004f39041
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x473f04f39041
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x473e04f39041
	void OnRep_ReviveStartTime();// 0x473d04f39041
	void OnRep_PickupedChanged();// 0x473c04f39041
	void OnRep_CurrExtraEnergyValueChanged();// 0x473b04f39041
	void OnRep_BResurrectionStateChanged();// 0x473a04f39041
	void OnRefreshPickupStatusEffect(bool IsShow);// 0x473904f39041
	bool IsInResurrectRange(SolarCharacter* InReqCharacter, out float RealDistance);// 0x473804f39041
	bool CanBuyResurrect(const SolarCharacter* InReqCharacter);// 0x473704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	enum CurrentState;//[Offset: 0x404, Size: 0x1]
	SolarItemDataArray ItemDataList;//[Offset: 0x408, Size: 0x118]
	SolarItemData[] SortedGameItemDatas;//[Offset: 0x520, Size: 0x10]
	int DataLeng;//[Offset: 0x550, Size: 0x4]
	enum CostType;//[Offset: 0x554, Size: 0x1]
	int CostNum;//[Offset: 0x558, Size: 0x4]
	int HighestItemQuality;//[Offset: 0x5b0, Size: 0x4]
	float BurstRadius;//[Offset: 0x5b4, Size: 0x4]
	float BurstRadiusRandScale;//[Offset: 0x5b8, Size: 0x4]
	float BurstLocalHeight;//[Offset: 0x5bc, Size: 0x4]
	float BurstEulerAngle;//[Offset: 0x5c0, Size: 0x4]
	bool bBurstSplitItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 0x1]
	enum BurstMethod;//[Offset: 0x5c5, Size: 0x1]
	float RadSafeSlopeToBurstOn;//[Offset: 0x5c8, Size: 0x4]
	float GoldenSpiralMinRadiusSquared;//[Offset: 0x5cc, Size: 0x4]
	SolarBurstItemActor*[] BurstItemActors;//[Offset: 0x5d0, Size: 0x10]
	Vector MeshBoxExtent;//[Offset: 0x5e0, Size: 0xc]
	AkComponent* AkAudioComponent;//[Offset: 0x5f0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x5f8, Size: 0x8]
	void UpdateTreasureBoxInternal();// 0x449c04f39041
	void UpdateOpenBoxUIByState(const enum NewState);// 0x449b04f39041
	void UpdateItemDataListInternal();// 0x449a04f39041
	void ServerSetState(const enum NewState, SolarCharacter* RequestCharacter);// 0x449904f39041
	void ServerNotifyPlayerOpen(SolarCharacter* RequestCharacter, enum InItemType);// 0x449804f39041
	void PlayOpenAnimation();// 0x449704f39041
	void OnRep_ItemDataList();// 0x449604f39041
	void OnRep_CurrentState();// 0x449504f39041
	void OnClientItemHighestQualityChanged(int NewQuality, int PrevQuality);// 0x449404f39041
	bool IsEmpty();// 0x449304f39041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x449204f39041
	int GetNumCost();// 0x449104f39041
	SolarItemData[] GetItemList();// 0x449004f39041
	enum GetCostType();// 0x448f04f39041
	void ConstructTreasureBoxTest(out int[] itemIdList);// 0x448e04f39041
	void ConstructTreasureBox(int dropId);// 0x448d04f39041
	bool BOpened();// 0x448c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x270, Size: 0xb8]
	Vector_NetQuantize DroppedLocation;//[Offset: 0x328, Size: 0xc]
	float SpawnOffset;//[Offset: 0x334, Size: 0x4]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x338, Size: 0x10]
	SoftObjectPath OutlineMatPath;//[Offset: 0x348, Size: 0x18]
	SoftObjectPath FXPath;//[Offset: 0x360, Size: 0x18]
	float NoneMeshFxOffset;//[Offset: 0x378, Size: 0x4]
	float PositionTolerance;//[Offset: 0x37c, Size: 0x4]
	FString FXBPPath;//[Offset: 0x380, Size: 0x10]
	SphereComponent* SphereComponent;//[Offset: 0x390, Size: 0x8]
	Actor* FXActor;//[Offset: 0x39c, Size: 0x8]
	byte ItemCurrentState;//[Offset: 0x3a4, Size: 0x1]
	byte[] MarkedTeamIdList;//[Offset: 0x3b0, Size: 0x10]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x3c8, Size: 0x8]
	MaterialInstanceDynamic*[] NormalMats;//[Offset: 0x3d0, Size: 0x10]
	MaterialInstanceDynamic*[] OutlineMats;//[Offset: 0x3e0, Size: 0x10]
	bool bAdjustDroppedLocationByLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	SolarLandscapeListenerConfig LandscapeListenerConfig;//[Offset: 0x3f4, Size: 0x10]
	void UnMarkThisItem(byte TeamID);// 0x448b04f39041
	void SwitchDiscardMaterials();// 0x448a04f39041
	void SetOutlineMeshVisible(bool Visible);// 0x448904f39041
	void SetItemData(out const SolarItemData _ItemData);// 0x448804f39041
	void OnServerPawned();// 0x448704f39041
	void OnRep_ItemDataChange();// 0x448604f39041
	void OnRep_ItemCurrentStateChanged();// 0x448504f39041
	void OnRep_DroppedLocation();// 0x448404f39041
	void NotifyThisItemWasPickedUp();// 0x448304f39041
	void MarkThisItem(byte TeamID);// 0x448204f39041
	StaticMeshComponent* GetStaticMeshComp();// 0x448104f39041
	int GetQuality();// 0x448004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarDormantActor.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemData.FastArraySerializerItem
	int ItemID;//[Offset: 0xc, Size: 0x4]
	int64 ThisID;//[Offset: 0x10, Size: 0x8]
	FString Name;//[Offset: 0x18, Size: 0x10]
	FString Icon;//[Offset: 0x28, Size: 0x10]
	FString Info;//[Offset: 0x38, Size: 0x10]
	int count;//[Offset: 0x48, Size: 0x4]
	enum ItemType;//[Offset: 0x4c, Size: 0x4]
	int Quality;//[Offset: 0x50, Size: 0x4]
	int MaxPile;//[Offset: 0x54, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	FString AbilityBP;//[Offset: 0x60, Size: 0x10]
	FString ItemBP;//[Offset: 0x70, Size: 0x10]
	int DropTime;//[Offset: 0x80, Size: 0x4]
	int UnPickupTime;//[Offset: 0x84, Size: 0x4]
	bool IsRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	bool IsPickupLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1]
	int64 UserId;//[Offset: 0x90, Size: 0x8]
	int Level;//[Offset: 0x98, Size: 0x4]
	int Prize;//[Offset: 0x9c, Size: 0x4]
	float CurValue;//[Offset: 0xa0, Size: 0x4]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	enum AppearanceType;//[Offset: 0xa5, Size: 0x1]
	bool bUpdateOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 0x1]
	int SourceType;//[Offset: 0xa8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemDataArray.FastArraySerializer
	SolarItemData[] ItemDatas;//[Offset: 0x108, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerWeapon.SolarWeapon.Actor.Object
	float SpawnOffset;//[Offset: 0x9d8, Size: 0x4]
	SolarItemData ItemData;//[Offset: 0xa00, Size: 0xb8]
	byte[] MarkedTeamIdList;//[Offset: 0xab8, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0xac8, Size: 0x1]
	SphereComponent* SphereComponent;//[Offset: 0xad0, Size: 0x8]
	Vector_NetQuantize DroppedLocation;//[Offset: 0xad8, Size: 0xc]
	SolarCharacter* WeaponOwner;//[Offset: 0xae8, Size: 0x8]
	WeaponAnimationComponent* WeaponAnimationComponent;//[Offset: 0xaf0, Size: 0x8]
	byte WeaponCurrentDiscardState;//[Offset: 0xaf8, Size: 0x1]
	byte WeaponCurrentState;//[Offset: 0xaf9, Size: 0x1]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0xb00, Size: 0x10]
	SoftObjectPath HoldMeshMaterialPath;//[Offset: 0xb10, Size: 0x18]
	MaterialInterface* OutlineBaseMat;//[Offset: 0xb28, Size: 0x8]
	enum AttachState;//[Offset: 0xb30, Size: 0x1]
	ParticleSystemComponent*[] SkinExtraPSCArray;//[Offset: 0xb38, Size: 0x10]
	MaterialInstanceDynamic* MeshSubpassMaterial;//[Offset: 0xb58, Size: 0x8]
	MaterialInstanceDynamic*[] MeshDiscardMaterialArray;//[Offset: 0xb60, Size: 0x10]
	WeaponSkinData* WeaponSkinData;//[Offset: 0xb70, Size: 0x8]
	int WeaponSkinID;//[Offset: 0xb78, Size: 0x4]
	int ScopePartID;//[Offset: 0xb7c, Size: 0x4]
	int GripPartID;//[Offset: 0xb80, Size: 0x4]
	int StockPartID;//[Offset: 0xb84, Size: 0x4]
	int MuzzlePartID;//[Offset: 0xb88, Size: 0x4]
	int ClipPartID;//[Offset: 0xb8c, Size: 0x4]
	int DefaultSkinID;//[Offset: 0xb90, Size: 0x4]
	bool bIsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 0x1]
	float LifespanAfterAutoDrop;//[Offset: 0xba4, Size: 0x4]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba8, Size: 0x1]
	ParticleSystem* SkinDedicatedSpecialEffect;//[Offset: 0xbb0, Size: 0x8]
	ParticleSystem* MeshEffectForFPP;//[Offset: 0xbb8, Size: 0x8]
	ParticleSystem* MeshEffectForTPP;//[Offset: 0xbc0, Size: 0x8]
	ParticleSystemComponent* MeshEffectEmitterForFPP;//[Offset: 0xbc8, Size: 0x8]
	ParticleSystemComponent* MeshEffectEmitterForTPP;//[Offset: 0xbd0, Size: 0x8]
	WeaponRecoilComponent* RecoilComponent;//[Offset: 0xd70, Size: 0x8]
	WeaponSpreadAndRecoil* SpreadAndRecoil;//[Offset: 0xd78, Size: 0x8]
	SolarLandscapeListenerConfig LandscapeListenerConfig;//[Offset: 0xd84, Size: 0x10]
	void UpdateCharacterState(enum CharacterState, bool bIsOnGround, bool bResetState);// 0x56c804f39041
	void UpdateCharacterPosture(bool IsCrouch);// 0x56c704f39041
	void SetOpenScopeOnVehicle(const bool InbOpenScope);// 0x56c604f39041
	void SetDedicatedSkinEffect(const WeaponSkinData* InSkinData);// 0x56c504f39041
	void RequestUnlimitedAmmo(const bool InEnable);// 0x56c404f39041
	void PostUpdateAppearance();// 0x56c304f39041
	void OnSetWeaponSkinMesh(SkeletalMesh* InMesh, class Object InAnimClass);// 0x56c204f39041
	void OnRep_WeaponCurrentStateChanged();// 0x56c104f39041
	void OnRep_WeaponCurrentDiscardStateChanged();// 0x56c004f39041
	void OnRep_AttachState();// 0x56bf04f39041
	void OnClientMeshLodChanged(int LOD);// 0x56be04f39041
	void NotifyThisItemWasPickedUp();// 0x56bd04f39041
	void K2_SwitchDrawDistance(bool Hold);// 0x56bc04f39041
	void K2_PlaySoundGroup(FName SoundGroupName, SoundGroupPlayContextByCharacter Context);// 0x56bb04f39041
	void K2_OnHold(bool bLocal);// 0x56ba04f39041
	void K2_OnDrop();// 0x56b904f39041
	bool IsOpenedScopeOnVehicle();// 0x56b804f39041
	bool IsItemWeapon();// 0x56b704f39041
	bool IsExistPart(out const enum PartType);// 0x56b604f39041
	void Hold(bool bInHold);// 0x56b504f39041
	bool HasScope();// 0x56b404f39041
	float GetWeaponSilencerMagnitude();// 0x56b304f39041
	PlayerWeaponRecoilComponent* GetRecoilComp();// 0x56b204f39041
	int GetQualityByLevel(int Level);// 0x56b104f39041
	int GetQuality();// 0x56b004f39041
	byte GetItemCurrentState();// 0x56af04f39041
	bool GetIsHolded();// 0x56ae04f39041
	Vector GetFPPLocation();// 0x56ad04f39041
	float GetFire2AnimPlayRate();// 0x56ac04f39041
	float GetDistanceToEyeWhenScope();// 0x56ab04f39041
	Vector GetCurrentScopeAimCenterPoint();// 0x56aa04f39041
	WeaponPartClipComp* GetCurrentClip();// 0x56a904f39041
	void ClearSkinExtraPSC();// 0x56a804f39041
	void ClearDedicatedSkinEffect();// 0x56a704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSkinData.DataAsset.Object
	enum WeaponSkinType;//[Offset: 0x30, Size: 0x1]
	WeaponBodyData WeaponData;//[Offset: 0x38, Size: 0xb0]
	WeaponSkinPartData[] WeaponBarMap;//[Offset: 0xe8, Size: 0x10]
	bool WeaponBarLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	WeaponSkinPartData[] WeaponClipMap;//[Offset: 0x100, Size: 0x10]
	bool WeaponClipLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	WeaponSkinPartData[] WeaponGripMap;//[Offset: 0x118, Size: 0x10]
	bool WeaponGripLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bUseGripIkSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	WeaponSkinPartData[] WeaponScopeMap;//[Offset: 0x130, Size: 0x10]
	bool WeaponScopeLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	WeaponSkinPartData[] WeaponStockMap;//[Offset: 0x148, Size: 0x10]
	bool WeaponStockLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	class SolarBullet* DedicatedBulletEffect;//[Offset: 0x160, Size: 0x8]
	class SolarBullet* DedicatedSkillEffect;//[Offset: 0x168, Size: 0x8]
	SoftClassPath DedicatedBulletEffectPath;//[Offset: 0x170, Size: 0x18]
	SoftClassPath DedicatedSkillEffectPath;//[Offset: 0x188, Size: 0x18]
	ParticleSystem* DedicatedKillEffect;//[Offset: 0x1a0, Size: 0x8]
	SoftObjectPath DedicatedKillEffectPath;//[Offset: 0x1a8, Size: 0x18]
	SoftObjectPath DedicatedSpecialEffectPath;//[Offset: 0x1c0, Size: 0x18]
	WeaponMeshEffectData WeaponMeshEffectDataForFPP;//[Offset: 0x1e0, Size: 0x60]
	WeaponMeshEffectData WeaponMeshEffectDataForTPP;//[Offset: 0x240, Size: 0x60]
	class ActorEffect* DedicatedDissolvedDeathActorEffect;//[Offset: 0x2a0, Size: 0x8]
	SoftObjectPath DedicatedDissolvedDeathFXPath;//[Offset: 0x2a8, Size: 0x18]
	SolarCharacterDeathShowConfig* DeathShowConfig;//[Offset: 0x2c0, Size: 0x8]
	FString PlayAudioEventName;//[Offset: 0x2c8, Size: 0x10]
	FString StopAudioEventName;//[Offset: 0x2d8, Size: 0x10]
	AnimSequence* OutsideAnimation;//[Offset: 0x2e8, Size: 0x8]
	void ModifyResPath();// 0x619b04f39041
	bool IsMeshReplace();// 0x619a04f39041
	bool GetPartLockedInfoByType(const enum PartType);// 0x619904f39041
	bool GetPartDataArrayByType(const enum PartType, out WeaponSkinPartData[] PartDataMap);// 0x619804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponBodyData
	int weaponid;//[Offset: 0x0, Size: 0x4]
	SoftObjectPath WeaponMesh;//[Offset: 0x8, Size: 0x18]
	class WeaponAnimInstance* WeaponAnimBP;//[Offset: 0x20, Size: 0x8]
	<enum,SoftObjectPath> OverrideWeaponAnimSequenceMap;//[Offset: 0x28, Size: 0x50]
	SoftObjectPath LodpMesh;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0x90, Size: 0x10]
	WeaponSkinExtraPS[] SkinPSArray;//[Offset: 0xa0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAnimInstance.AnimInstance.Object
	bool bInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	bool bOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	bool bBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1]
	AnimMsgData[] MsgArray;//[Offset: 0x270, Size: 0x10]
	AnimMsgData CurrentMsg;//[Offset: 0x280, Size: 0x8]
	bool bCurrentMsgUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	AnimSequence* IdleAnim;//[Offset: 0x290, Size: 0x8]
	AnimSequence* FireAnim;//[Offset: 0x298, Size: 0x8]
	AnimSequence* AltFireAnim;//[Offset: 0x2a0, Size: 0x8]
	AnimSequence* ReloadAnim;//[Offset: 0x2a8, Size: 0x8]
	AnimSequence* OverloadAnim;//[Offset: 0x2b0, Size: 0x8]
	AnimSequence* OpenScopeAnim;//[Offset: 0x2b8, Size: 0x8]
	AnimSequence* CloseScopeAnim;//[Offset: 0x2c0, Size: 0x8]
	AnimSequence* BoltAnim;//[Offset: 0x2c8, Size: 0x8]
	bool SwitchStateCheck(enum CheckState);// 0x602504f39041
	void SetInterruptIsTrue();// 0x602404f39041
	bool RouterNodeJudge();// 0x602304f39041
	void OnQuitState(enum State);// 0x602204f39041
	void OnEnterState(enum State);// 0x602104f39041
	void Interrupt();// 0x602004f39041
	bool HasMsg();// 0x601f04f39041
	bool ConsumMsg();// 0x601e04f39041
	bool AddMsg(enum State, float Speed);// 0x601d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimMsgData
	enum State;//[Offset: 0x0, Size: 0x1]
	float Speed;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSkinExtraPS
	bool bStimulatedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName Socket;//[Offset: 0x4, Size: 0x8]
	ParticleSystem* PS;//[Offset: 0x10, Size: 0x8]
	SoftObjectPath PSPath;//[Offset: 0x18, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSkinPartData
	int WeaponPartId;//[Offset: 0x0, Size: 0x4]
	FString WeaponPartDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath PartDataAsset;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBullet.Actor.Object
	float TotalEffectTime;//[Offset: 0x228, Size: 0x4]
	bool bAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]
	bool bShowHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1]
	bool bForceShowHitOnPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e, Size: 0x1]
	bool bShowHitToTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f, Size: 0x1]
	bool bShowHitWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	ParticleSystem* BulletEffect;//[Offset: 0x238, Size: 0x8]
	ParticleSystem* TrajectoryEffect;//[Offset: 0x240, Size: 0x8]
	ParticleSystem* TrajectoryEffectOther;//[Offset: 0x248, Size: 0x8]
	SoftObjectPath SimpleCanisterShotEffectPath;//[Offset: 0x250, Size: 0x18]
	ParticleSystem* TrajectoryBeamEffect;//[Offset: 0x268, Size: 0x8]
	ParticleSystem* TrajectoryBeamEffectOther;//[Offset: 0x270, Size: 0x8]
	ParticleSystem* HitEffect;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* MuzzleEffect;//[Offset: 0x280, Size: 0x8]
	bool bKeepOneActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	ParticleSystem* MuzzleEffectScope;//[Offset: 0x290, Size: 0x8]
	ParticleSystem* MuzzleEffectOther;//[Offset: 0x298, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffect;//[Offset: 0x2a0, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectScope;//[Offset: 0x2a8, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectOther;//[Offset: 0x2b0, Size: 0x8]
	ParticleSystem* SpecialEffect;//[Offset: 0x2b8, Size: 0x8]
	ParticleSystem* DecalEffect;//[Offset: 0x2c0, Size: 0x8]
	ParticleSystem* DecalEffect2;//[Offset: 0x2c8, Size: 0x8]
	SoftObjectPath ShieldEffect;//[Offset: 0x2d0, Size: 0x18]
	bool bOverrideCharacterHitFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	<byte,SoftObjectPath> PhysicsHitEffects;//[Offset: 0x2f0, Size: 0x50]
	float DecalLifeSpan;//[Offset: 0x340, Size: 0x4]
	ParticleSystem* ShellCaseEffect;//[Offset: 0x348, Size: 0x8]
	ParticleSystem* ShellCaseEffectOnScope;//[Offset: 0x350, Size: 0x8]
	bool CanExplodeWhenOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	FString HoldingPreViewSound_1P;//[Offset: 0x360, Size: 0x10]
	FString HoldingPreViewSound_3P;//[Offset: 0x370, Size: 0x10]
	byte BulletCollisionType;//[Offset: 0x380, Size: 0x1]
	void OnPlayImpactEffect(ParticleSystemComponent* PSC);// 0x4f6f04f39041
	SoftObjectPath GetHitPhysicEffectPath(out const byte HitSurface);// 0x4f6e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponMeshEffectData
	SoftObjectPath EffectPath;//[Offset: 0x0, Size: 0x18]
	FName SocketName;//[Offset: 0x18, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x20, Size: 0x30]
	CurveVector* ScaleCurveForFOV;//[Offset: 0x50, Size: 0x8]
	CurveVector* LocationCurveForFOV;//[Offset: 0x58, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorEffect.Object
	class ActorEffectController* ControllerClass;//[Offset: 0x28, Size: 0x8]
	ActorEffectController* Controller;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorEffectController.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterDeathShowConfig.DataAsset.Object
	SolarCharacterDeathEffectData[] EffectArrayForKnockDown;//[Offset: 0x30, Size: 0x10]
	SolarCharacterDeathEffectData[] EffectArrayForDeath;//[Offset: 0x40, Size: 0x10]
	bool bPlayCommonComboKillSoundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterDeathEffectData
	SoftObjectPath Path;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath PathForOther;//[Offset: 0x18, Size: 0x18]
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30]
	FName SocketName;//[Offset: 0x60, Size: 0x8]
	bool bAttachToSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAnimationComponent.ActorComponent.Object
	WeaponAnimInstance* WeaponAnimInstance;//[Offset: 0xb0, Size: 0x8]
	SolarWeapon* MyWeapon;//[Offset: 0xb8, Size: 0x8]
	<enum,AnimSequence*> AnimSequenceMap;//[Offset: 0xc0, Size: 0x50]
	void SRecieveProto_SwitchStateAction(FString paramters);// 0x601c04f39041
	void SetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x601b04f39041
	void PostWeaponAnimStateToSimulation(enum InWeaponAnimState, float InAnimPlaySpeed, bool bForceSetAnimState);// 0x601a04f39041
	void InternalSetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x601904f39041
	void InitSkeletaMesh(SkeletalMeshComponent* Mesh);// 0x601804f39041
	void GotoState(enum State, float Interval);// 0x601704f39041
	void CRecieveProto_SwitchStateAction(bool bAutonomous, FString paramters);// 0x601604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponRecoilComponent.ActorComponent.Object
	SolarGameInstanceBase* GameInstance;//[Offset: 0xb8, Size: 0x8]
	bool bHActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bVActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bRActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	SolarWeapon* MyWeaponActor;//[Offset: 0xc8, Size: 0x8]
	SingleWeaponConfig* WeaponConfig;//[Offset: 0xd0, Size: 0x8]
	CurveFloat* YawCurve;//[Offset: 0xd8, Size: 0x8]
	CurveFloat* PitchCurve;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* RollCurve;//[Offset: 0xe8, Size: 0x8]
	CurveFloat* ScopeRollCurve;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* ScopePitchCurve;//[Offset: 0xf8, Size: 0x8]
	RichCurveKey[] OriginalScopePitchKeys;//[Offset: 0x100, Size: 0x10]
	AmmoConfig* CurrentAmmoConfig;//[Offset: 0x110, Size: 0x8]
	CurveFloat*[] YawCurveArray;//[Offset: 0x1e0, Size: 0x10]
	CurveFloat*[] PitchCurveArray;//[Offset: 0x1f0, Size: 0x10]
	CurveFloat* PitchEndCurve;//[Offset: 0x200, Size: 0x8]
	CurveFloat*[] RollCurveArray;//[Offset: 0x208, Size: 0x10]
	CurveFloat*[] ScopeRollCurveArray;//[Offset: 0x218, Size: 0x10]
	void SetRecoilVActive(bool bActive);// 0x4bb404f39041
	void SetRecoilRActive(bool bActive);// 0x4bb304f39041
	void SetRecoilHActive(bool bActive);// 0x4bb204f39041
	void SetRecoilActive(bool bActive);// 0x4bb104f39041
	bool JudgeHorizontalRecoilDir(out const Vector factorVector, bool bCurrentRight, int instantCout);// 0x4bb004f39041
	bool IsRunning();// 0x4baf04f39041
	CurveFloat* GetYawCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x4bae04f39041
	CurveFloat* GetRollCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x4bad04f39041
	CurveFloat* GetPitchCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x4bac04f39041
	Rotator GetCurrentRecoil();// 0x4bab04f39041
	Rotator GetAndClearCurrentRecoil();// 0x4baa04f39041
	void Fire(bool hipfire, bool Primary);// 0x4ba904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmoConfig.DataAsset.Object
	enum HoldAction;//[Offset: 0x30, Size: 0x1]
	FireChargeData[] FireChargeDatas;//[Offset: 0x38, Size: 0x10]
	FString FireChargeStopSoundName;//[Offset: 0x48, Size: 0x10]
	float ChargingToleranceEndTime;//[Offset: 0x58, Size: 0x4]
	float ChargingWorkingEndTime;//[Offset: 0x5c, Size: 0x4]
	float ChargingHoldingEndTime;//[Offset: 0x60, Size: 0x4]
	float ChargingTrajectoryTime;//[Offset: 0x64, Size: 0x4]
	bool bScaleHitEffectByChargingTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x6c, Size: 0x4]
	bool bForceFullShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxChargingDamageScale;//[Offset: 0x74, Size: 0x4]
	float DeltaAngle;//[Offset: 0x78, Size: 0x4]
	FString Name;//[Offset: 0x80, Size: 0x10]
	FString Des;//[Offset: 0x90, Size: 0x10]
	int PropID;//[Offset: 0xa0, Size: 0x4]
	float LifeTime;//[Offset: 0xa4, Size: 0x4]
	enum FireMethodType;//[Offset: 0xa8, Size: 0x1]
	enum TrajectoryType;//[Offset: 0xa9, Size: 0x1]
	float CustomValue;//[Offset: 0xac, Size: 0x4]
	class SolarBullet* BulletClass;//[Offset: 0xb0, Size: 0x8]
	SoftClassPath BulletClassPath;//[Offset: 0xb8, Size: 0x18]
	enum TriggerType;//[Offset: 0xd0, Size: 0x1]
	float MaxRange;//[Offset: 0xd4, Size: 0x4]
	float EffRange;//[Offset: 0xd8, Size: 0x4]
	float Radius;//[Offset: 0xdc, Size: 0x4]
	float InitSpeed;//[Offset: 0xe0, Size: 0x4]
	enum FireCostType;//[Offset: 0xe4, Size: 0x1]
	int FireCostPerAttack;//[Offset: 0xe8, Size: 0x4]
	int FireSpeedChangeTime;//[Offset: 0xec, Size: 0x4]
	float FireSpeedChangeCOP;//[Offset: 0xf0, Size: 0x4]
	float FastestFireInterval;//[Offset: 0xf4, Size: 0x4]
	float SlowestFireInterval;//[Offset: 0xf8, Size: 0x4]
	float BaseFireInterval;//[Offset: 0xfc, Size: 0x4]
	float FireIntervalRevertPreTime;//[Offset: 0x100, Size: 0x4]
	float FireIntervalReavertSpeed;//[Offset: 0x104, Size: 0x4]
	float BoltActionTime;//[Offset: 0x108, Size: 0x4]
	float StartBoltDuration;//[Offset: 0x10c, Size: 0x4]
	float FirePrepareTime;//[Offset: 0x110, Size: 0x4]
	float FireStateBreakTime;//[Offset: 0x114, Size: 0x4]
	float FireStreakBreakTime;//[Offset: 0x118, Size: 0x4]
	float BaseReloadTime;//[Offset: 0x11c, Size: 0x4]
	float ReloadBoltTime;//[Offset: 0x120, Size: 0x4]
	float PostFireOverload;//[Offset: 0x124, Size: 0x4]
	bool bPlayHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bPlayExplodeSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	float FlySoundReceiveRadius;//[Offset: 0x12c, Size: 0x4]
	float FlySoundIgnoreDistance;//[Offset: 0x130, Size: 0x4]
	int SingleSoundCount;//[Offset: 0x134, Size: 0x4]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x138, Size: 0x10]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x148, Size: 0x10]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x158, Size: 0x10]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x168, Size: 0x10]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x178, Size: 0x10]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x188, Size: 0x10]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x198, Size: 0x10]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1a8, Size: 0x10]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1b8, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x1c8, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1d8, Size: 0x10]
	FString Play_Fire_Empty_1p;//[Offset: 0x1e8, Size: 0x10]
	FString Play_Fire_Empty_3p;//[Offset: 0x1f8, Size: 0x10]
	FString Play_Fire_Empty_3p_Enemy;//[Offset: 0x208, Size: 0x10]
	CurveFloat* PostFireSpreadCurveStruct;//[Offset: 0x218, Size: 0x8]
	float VhADSSpreadCOP;//[Offset: 0x220, Size: 0x4]
	float ADSSpreadCOP;//[Offset: 0x224, Size: 0x4]
	float SpreadFirePreTime;//[Offset: 0x228, Size: 0x4]
	float SpreadPostFireSpeed;//[Offset: 0x22c, Size: 0x4]
	float SpreadRestorePreTime;//[Offset: 0x230, Size: 0x4]
	float SpreadRestoreSpeed;//[Offset: 0x234, Size: 0x4]
	WeaponFireTPPAnimConfig TPPRecoilConfig;//[Offset: 0x238, Size: 0x28]
	WeaponFireFPPAnimConfig FPPRecoilConfigNoScope;//[Offset: 0x260, Size: 0x70]
	WeaponFireFPPAnimConfig FPPRecoilConfigWithScope;//[Offset: 0x2d0, Size: 0x70]
	AmmonVerticalRecoilStruct PitchRecoilStruct;//[Offset: 0x340, Size: 0x30]
	AmmonHorizontalRecoilStruct YawRecoilStruct;//[Offset: 0x370, Size: 0x30]
	AmmonRecoilRollStruct RollRecoilStruct;//[Offset: 0x3a0, Size: 0x40]
	AmmonRecoilScope ScopeRecoil;//[Offset: 0x3e0, Size: 0xb8]
	float ADSRecoilCOP;//[Offset: 0x498, Size: 0x4]
	<FString,float> RecoilCOPMap;//[Offset: 0x4a0, Size: 0x50]
	byte[] IgnoreEPhysicalSurface;//[Offset: 0x4f0, Size: 0x10]
	float ProjectileMaxGravity;//[Offset: 0x500, Size: 0x4]
	float ParticleStartDistance;//[Offset: 0x504, Size: 0x4]
	float TrajectoryStartDistance;//[Offset: 0x508, Size: 0x4]
	bool bPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 0x1]
	bool bTakeDamageAfterDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 0x1]
	CurveFloat* PenetrationDamageMultiplierCurve;//[Offset: 0x510, Size: 0x8]
	CurveFloat* CylinderDamageMultiplierCurve;//[Offset: 0x518, Size: 0x8]
	SlateBrush TriggerIcon;//[Offset: 0x520, Size: 0xe0]
	enum VirtualBulletType;//[Offset: 0x600, Size: 0x1]
	bool bStepOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 0x1]
	bool bUseSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x602, Size: 0x1]
	float MaxSimulationTimeStep;//[Offset: 0x604, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x608, Size: 0x4]
	AmmoConfig* TraceOverrideAmmo;//[Offset: 0x610, Size: 0x8]
	byte TraceTargetFlag;//[Offset: 0x618, Size: 0x1]
	TracerBulletData TracerData;//[Offset: 0x620, Size: 0x40]
	CurveFloat* BulletOffsetCurve;//[Offset: 0x660, Size: 0x8]
	Vector2D[] BulletOffsetAngles;//[Offset: 0x668, Size: 0x10]
	CurveFloat* BulletDamageCurve;//[Offset: 0x678, Size: 0x8]
	CurveFloat* BulletScaleCurve;//[Offset: 0x680, Size: 0x8]
	CurveFloat* BulletMovementCurve;//[Offset: 0x688, Size: 0x8]
	bool bThirdPesonViewXScaledByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	bool bForceApplyAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 0x1]
	class SolarAbility[] AmmoAbilityClasses;//[Offset: 0x698, Size: 0x10]
	class SolarAbility[] AmmoAbilityClassesOnDestroyed;//[Offset: 0x6a8, Size: 0x10]
	class SolarAbility* AmmoAbilityClassesOnSelf;//[Offset: 0x6b8, Size: 0x8]
	int NameLocalTextIDNumber;//[Offset: 0x6c0, Size: 0x4]
	int DescriptionLocalTextIDNumber;//[Offset: 0x6c4, Size: 0x4]
	int RangeLocalTextID;//[Offset: 0x6c8, Size: 0x4]
	int DifficultyLocalTextID;//[Offset: 0x6cc, Size: 0x4]
	SolarDamageInfo DamageInfo;//[Offset: 0x6d0, Size: 0x40]
	SolarDamageInfo DestroyDamageInfo;//[Offset: 0x710, Size: 0x40]
	void InitVerticalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x44d304f39041
	void InitSpreadData(float adscop, float vhadscop, float firepre, float changespeed, float restorepre, float restorespeed);// 0x44d204f39041
	void InitScopeRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x44d104f39041
	void InitScopeAndCrossHairVibration(const float ScopeVMaxDistanceOffSet, const float ScopeVVibrationDuration, const float ScopeHMaxDistanceOffSet, const float ScopeHVibrationDuration, const float ScopeVContinuousFallingDuration, const float ScopeVContinuousFallingPointIndex, const float VMaxDistanceOffSetScale, const float VVibrationDurationScale, const float VSingleOffSetScale, const float VContinuousOffSetScale, const float HMaxDistanceOffSetScale, const float HVibrationDurationScale, const float HSingleOffSetScale, const float HContinuousOffSetScale, const float HOffSetProbabilityScale);// 0x44d004f39041
	void InitRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x44cf04f39041
	void InitRecoilCOPMap(out const FString[] Keys, out const float[] Values);// 0x44ce04f39041
	void InitPostFireSpreadCurveStruct(FString Path);// 0x44cd04f39041
	void InitHorizontalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x44cc04f39041
	void InitBaseData(int Trigger);// 0x44cb04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FireChargeData
	bool IfContinuousCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ChargeTime;//[Offset: 0x4, Size: 0x4]
	CurveFloat* ChargeDamageRadiusCurve;//[Offset: 0x8, Size: 0x8]
	CurveFloat* ChargeDamageMagnificationCurve;//[Offset: 0x10, Size: 0x8]
	bool IfPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	AmmoConfig* OverrideAmmo;//[Offset: 0x20, Size: 0x8]
	int OverrideAmmoID;//[Offset: 0x28, Size: 0x4]
	FString ChargeSoundName;//[Offset: 0x30, Size: 0x10]
	FString ChargeSoundEnemyName;//[Offset: 0x40, Size: 0x10]
	FString FireSoundName;//[Offset: 0x50, Size: 0x10]
	FString FireSoundEnemyName;//[Offset: 0x60, Size: 0x10]
	bool IfBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	CurveFloat* BulletBurstCountCurve;//[Offset: 0x78, Size: 0x8]
	bool IfCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x84, Size: 0x4]
	bool IfForceFullShotCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bNeedPlayCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	CurveFloat* AmmoSpeedScaleCurve;//[Offset: 0x90, Size: 0x8]
	CurveFloat* AmmoEffectXScaleCurve;//[Offset: 0x98, Size: 0x8]
	CurveFloat* AmmoEffectYZScaleCurve;//[Offset: 0xa0, Size: 0x8]
	CurveFloat* OverloadCurve;//[Offset: 0xa8, Size: 0x8]
	float ChargeAnimationRate;//[Offset: 0xb0, Size: 0x4]
	CurveFloat* DeflectionAngleCurve;//[Offset: 0xb8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponFireTPPAnimConfig
	float SingleFirePulse;//[Offset: 0x0, Size: 0x4]
	float SingleStiffnessCoefficient;//[Offset: 0x4, Size: 0x4]
	float LoopFirePulse;//[Offset: 0x8, Size: 0x4]
	float LoopStiffnessCoefficient;//[Offset: 0xc, Size: 0x4]
	float RecoverSpeed;//[Offset: 0x10, Size: 0x4]
	float BlendSpaceScale;//[Offset: 0x14, Size: 0x4]
	BlendSpace* BlendSpace;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponFireFPPAnimConfig
	float SingleFireStraightPulse;//[Offset: 0x0, Size: 0x4]
	float SingleStiffnessCoefficient;//[Offset: 0x4, Size: 0x4]
	float SingleFireBackwardOffset;//[Offset: 0x8, Size: 0x4]
	float LoopFireStraightPulse;//[Offset: 0xc, Size: 0x4]
	float LoopStiffnessCoefficient;//[Offset: 0x10, Size: 0x4]
	float LoopFireBackwardOffset;//[Offset: 0x14, Size: 0x4]
	CurveFloat* StraightStiffnessCurve;//[Offset: 0x18, Size: 0x8]
	float StraightRecoverSpeed;//[Offset: 0x20, Size: 0x4]
	Vector ShakePivotOffset;//[Offset: 0x24, Size: 0xc]
	Vector2D[] ShakeOffsets;//[Offset: 0x30, Size: 0x10]
	Rotator[] ShakeRotations;//[Offset: 0x40, Size: 0x10]
	bool bNeedEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	CurveVector* EndShakeOffsetCurve;//[Offset: 0x58, Size: 0x8]
	CurveVector* EndShakeRotateCurve;//[Offset: 0x60, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonVerticalRecoilStruct.AmmonRecoilStruct
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonRecoilStruct
	float CostTime;//[Offset: 0x0, Size: 0x4]
	CurveFloat* RecoilRangeCurve;//[Offset: 0x8, Size: 0x8]
	int APointCurveKeyIndex;//[Offset: 0x10, Size: 0x4]
	float APointMin;//[Offset: 0x14, Size: 0x4]
	float APointMax;//[Offset: 0x18, Size: 0x4]
	int BPointCurveKeyIndex;//[Offset: 0x1c, Size: 0x4]
	float BPointMin;//[Offset: 0x20, Size: 0x4]
	float BPointMax;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonHorizontalRecoilStruct.AmmonRecoilStruct
	CurveVector* ContinuousFireInfoCurve;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonRecoilRollStruct.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	float ADSRollCOP;//[Offset: 0x30, Size: 0x4]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonRecoilScope
	bool EnableScopeVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool EnableCrossHairVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool EnableScopeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x4, Size: 0x4]
	float ScopeVVibrationDuration;//[Offset: 0x8, Size: 0x4]
	CurveFloat* ScopeVSingleOffSetCurve;//[Offset: 0x10, Size: 0x8]
	CurveFloat* ScopeVContinuousOffSetCurve;//[Offset: 0x18, Size: 0x8]
	float ScopeVContinuousFallingDuration;//[Offset: 0x20, Size: 0x4]
	CurveFloat* ScopeVContinuousFallingCurve;//[Offset: 0x28, Size: 0x8]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x30, Size: 0x4]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x34, Size: 0x4]
	float ScopeHVibrationDuration;//[Offset: 0x38, Size: 0x4]
	CurveFloat* ScopeHSingleOffSetCurve;//[Offset: 0x40, Size: 0x8]
	CurveFloat* ScopeHContinuousOffSetCurve;//[Offset: 0x48, Size: 0x8]
	CurveFloat* ScopeHOffSetProbabilityCurve;//[Offset: 0x50, Size: 0x8]
	AmmonRecoilCrossHair CrossHairScaleSettings;//[Offset: 0x58, Size: 0x24]
	AmmonRecoilScopeRoll ScopeRollSettings;//[Offset: 0x80, Size: 0x38]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonRecoilCrossHair
	float VMaxDistanceOffSetScale;//[Offset: 0x0, Size: 0x4]
	float VVibrationDurationScale;//[Offset: 0x4, Size: 0x4]
	float VSingleOffSetScale;//[Offset: 0x8, Size: 0x4]
	float VContinuousOffSetScale;//[Offset: 0xc, Size: 0x4]
	float HMaxDistanceOffSetScale;//[Offset: 0x10, Size: 0x4]
	float HVibrationDurationScale;//[Offset: 0x14, Size: 0x4]
	float HSingleOffSetScale;//[Offset: 0x18, Size: 0x4]
	float HContinuousOffSetScale;//[Offset: 0x1c, Size: 0x4]
	float HOffSetProbabilityScale;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonRecoilScopeRoll.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TracerBulletData
	float DeflectionAnglePerSec;//[Offset: 0x0, Size: 0x4]
	float MaximumDetectionAngle;//[Offset: 0x4, Size: 0x4]
	float HomingRange;//[Offset: 0x8, Size: 0x4]
	bool bTraceTargetOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	FString TracingTargetWarningSound;//[Offset: 0x10, Size: 0x10]
	FString TracingTargetWarningRTPC;//[Offset: 0x20, Size: 0x10]
	FString TracingAuthorPromptSound;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarDamageInfo
	Actor* TargetActor;//[Offset: 0x0, Size: 0x8]
	Actor* SourceActor;//[Offset: 0x8, Size: 0x8]
	Actor* DamageCauserActor;//[Offset: 0x10, Size: 0x8]
	float OriginalDamage;//[Offset: 0x18, Size: 0x4]
	float OriginalDamageForVehicle;//[Offset: 0x1c, Size: 0x4]
	enum DamageType;//[Offset: 0x24, Size: 0x1]
	float DamageRadial;//[Offset: 0x28, Size: 0x4]
	bool bRadialIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	bool bRadialIgnoreVehicle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1]
	bool bEnableSelfDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1]
	bool bCheckSourceToTargetCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 0x1]
	bool bApplyToSource;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 0x1]
	bool bJustForShield;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 0x1]
	float ExplosionMinDistance;//[Offset: 0x30, Size: 0x4]
	float ExplosionMaxDistance;//[Offset: 0x34, Size: 0x4]
	CurveFloat* ExplosionDistanceScaleCurve;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameInstanceBase.SolarArchitecture.GameInstance.Object
	SoftObjectPath LoginMap;//[Offset: 0x350, Size: 0x18]
	SoftObjectPath LobbyMap;//[Offset: 0x368, Size: 0x18]
	SoftObjectPath EntryMap;//[Offset: 0x380, Size: 0x18]
	SoftObjectPath GameMap;//[Offset: 0x398, Size: 0x18]
	SoftObjectPath SettlementMap;//[Offset: 0x3b0, Size: 0x18]
	SoftObjectPath ConfigServerMap;//[Offset: 0x3c8, Size: 0x18]
	FString ConfigBattleAddr;//[Offset: 0x3e0, Size: 0x10]
	int ConfigBattlePort;//[Offset: 0x3f0, Size: 0x4]
	FString ConfigBackendAddr;//[Offset: 0x3f8, Size: 0x10]
	int ConfigBackendPort;//[Offset: 0x408, Size: 0x4]
	int BuildNumber;//[Offset: 0x40c, Size: 0x4]
	class SolarSaveGame* SaveGameClass;//[Offset: 0x410, Size: 0x28]
	SoftClassPath DefaultOperationLayout;//[Offset: 0x438, Size: 0x18]
	SoftClassPath DefaultLockSettings;//[Offset: 0x450, Size: 0x18]
	SoftClassPath ReplayManagerClass;//[Offset: 0x468, Size: 0x18]
	SoftClassPath DefaultGameModeLockSettings;//[Offset: 0x480, Size: 0x18]
	bool bNeedRebootButNot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	int LastChoosedVoiceLangID;//[Offset: 0x49c, Size: 0x4]
	FString CachedNetworkErrorString;//[Offset: 0x4a0, Size: 0x10]
	SolarOperationUIElement* CachedDefaultOperationLayout;//[Offset: 0x4b0, Size: 0x8]
	bool bBaseManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	bool bGameManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 0x1]
	bool bLuaManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 0x1]
	delegate OnBaseManagersInit;//[Offset: 0x4c0, Size: 0x10]
	delegate OnGameManagersInit;//[Offset: 0x4d0, Size: 0x10]
	delegate OnLuaManagersInit;//[Offset: 0x4e0, Size: 0x10]
	GameArgs* GameArgsManager;//[Offset: 0x668, Size: 0x8]
	UIManager* UIManager;//[Offset: 0x670, Size: 0x8]
	UINavigationManager* UINavigationManager;//[Offset: 0x678, Size: 0x8]
	SeparatedPkgManager* SolarSepPkgManager;//[Offset: 0x680, Size: 0x8]
	SolarInputMappingManager* SolarInputMappingManager;//[Offset: 0x688, Size: 0x8]
	SolarTimerManager* SolarTimerManager;//[Offset: 0x690, Size: 0x8]
	SolarMainPlayerModel* MainPlayerModel;//[Offset: 0x698, Size: 0x8]
	SolarGameConfigManager* GameConfigManager;//[Offset: 0x6a0, Size: 0x8]
	BattlePassConfigInfo* BattlePassConfigInfo;//[Offset: 0x6a8, Size: 0x8]
	SolarLuaHelper* SolarLuaHelper;//[Offset: 0x6b0, Size: 0x8]
	SolarAnoHelper* SolarAnoHelper;//[Offset: 0x6b8, Size: 0x8]
	SolarTableManager* SolarTableManager;//[Offset: 0x6c0, Size: 0x8]
	SolarTcpNetworkManager* SolarTcpNetworkManager;//[Offset: 0x6c8, Size: 0x8]
	SolarUDPManager* SolarUDPManager;//[Offset: 0x6d0, Size: 0x8]
	SolarAssetManager* SolarAssetManager;//[Offset: 0x6d8, Size: 0x8]
	SolarItemManager* SolarItemManager;//[Offset: 0x6e0, Size: 0x8]
	SolarInteractableManager* SolarInteractableManager;//[Offset: 0x6e8, Size: 0x8]
	SolarPlatformHelper* SolarPlatformHelper;//[Offset: 0x6f0, Size: 0x8]
	SolarMapManager* SolarMapManager;//[Offset: 0x6f8, Size: 0x8]
	WeaponGrowthManager* WeaponGrowthManager;//[Offset: 0x700, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x708, Size: 0x8]
	IMChatObject* SolarIMChatObject;//[Offset: 0x710, Size: 0x8]
	SolarLuaManager* SolarLuaManager;//[Offset: 0x718, Size: 0x8]
	SolarGameStatistics* SolarGameStatistics;//[Offset: 0x720, Size: 0x8]
	SolarWeaponMergeMeshManager* WeaponMergeMeshManager;//[Offset: 0x728, Size: 0x8]
	CrashReportManager* CrashReportManager;//[Offset: 0x730, Size: 0x8]
	SolarPopPanelManager* SolarPopPanelManager;//[Offset: 0x738, Size: 0x8]
	SolarApplicationLifetimeManager* SolarApplicationLifetimeManager;//[Offset: 0x740, Size: 0x8]
	SolarHomeActorManager* SolarHomeActorManager;//[Offset: 0x748, Size: 0x8]
	SolarGameplayLogger* SolarGameplayLoggger;//[Offset: 0x750, Size: 0x8]
	SolarAttributeSubSystem* SolarAttributeSubSystem;//[Offset: 0x758, Size: 0x8]
	SCustomizedGameModeManager* CustomizedGameManager;//[Offset: 0x760, Size: 0x8]
	SolarRedHintManager* SolarRedHintMgr;//[Offset: 0x768, Size: 0x8]
	SolarGameModeSelectionManager* SolarGameModeSelectionMgr;//[Offset: 0x770, Size: 0x8]
	SolarPingFpsManager* SolarPingFpsMgr;//[Offset: 0x778, Size: 0x8]
	SolarGameUserSettingsMgr* SolarGameUserSettingsMgr;//[Offset: 0x780, Size: 0x8]
	SolarLoginManager* SolarLoginManager;//[Offset: 0x788, Size: 0x8]
	SolarLockSettingsMgr* SolarLockSettingsMgr;//[Offset: 0x790, Size: 0x8]
	SolarGameProgressManager* SolarGameProgressMgr;//[Offset: 0x798, Size: 0x8]
	SolarABTestManager* SolarABTestManager;//[Offset: 0x7a0, Size: 0x8]
	SolarHttpManager* SolarHttpManager;//[Offset: 0x7a8, Size: 0x8]
	SolarActivityManager* SolarActivityManager;//[Offset: 0x7b0, Size: 0x8]
	SolarTutorialManager* SolarTutorialManager;//[Offset: 0x7b8, Size: 0x8]
	SolarReplayManager* SolarReplayManager;//[Offset: 0x7c0, Size: 0x8]
	SolarSaveGame* SolarSaveGame;//[Offset: 0x7c8, Size: 0x8]
	class SettlementStageManager* SettlementManagerClass;//[Offset: 0x7d0, Size: 0x28]
	SettlementStageManager* SettlementManager;//[Offset: 0x7f8, Size: 0x8]
	CGMCrossLevelDataMgr* CrossLevelDataMgr;//[Offset: 0x800, Size: 0x8]
	class SolarGraphicSettings* SolarGraphicSettingsClass;//[Offset: 0x820, Size: 0x28]
	SolarAccessLuaDataUtils* LuaDataAccessUtils;//[Offset: 0x848, Size: 0x8]
	SolarAkSoundManager* SolarAkSoundManager;//[Offset: 0x850, Size: 0x8]
	bool bIsDedicatedServerStressTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 0x1]
	KeyMappingManager* KeyMappingManager;//[Offset: 0x860, Size: 0x8]
	SolarEasyAntiCheatManager* SolarEasyAntiCheatManager;//[Offset: 0x868, Size: 0x8]
	SolarSpecialEffectsMgr* SolarSpecialEffectsManager;//[Offset: 0x870, Size: 0x8]
	SolarFontManager* SolarFontManager;//[Offset: 0x878, Size: 0x8]
	SolarDownloaderManager* SolarDownloaderManager;//[Offset: 0x880, Size: 0x8]
	SolarGraphicSettings* SolarGraphicSettings;//[Offset: 0x890, Size: 0x8]
	AndroidInputManager* AndroidInputManager;//[Offset: 0x898, Size: 0x8]
	ProtectBaseManager* ProtectBaseManager;//[Offset: 0x8a0, Size: 0x8]
	delegate OnPatchComplete;//[Offset: 0x8b8, Size: 0x10]
	delegate OnTouchInputDelegate;//[Offset: 0x8c8, Size: 0x10]
	RegistedActorContainer CachedRegistedActors;//[Offset: 0x8d8, Size: 0x50]
	bool IsHotPatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 0x1]
	bool bCheatedInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x944, Size: 0x1]
	bool bAbnormalInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x945, Size: 0x1]
	FText KickOutReason;//[Offset: 0x948, Size: 0x18]
	AntiCheatSetting[] AntiCheatSettings;//[Offset: 0x960, Size: 0x10]
	ScreenshotConfig ScreenshotConfig;//[Offset: 0x970, Size: 0x50]
	FString AntiCheatConfig;//[Offset: 0x9c0, Size: 0x10]
	bool bLaunchServerTravelSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 0x1]
	void UpdateScreenshotSetting();// 0x1b1204f39041
	void UpdateAntiCheatSetting();// 0x1b1104f39041
	void TestEnsureMsgInternal();// 0x1b1004f39041
	void TestCrashInternal();// 0x1b0f04f39041
	void SolarGm_UploadLogFile();// 0x1b0e04f39041
	void SolarGM_Tut(FString Cmd, out const FString[] Args);// 0x1b0d04f39041
	void SolarGM_TriggerSteamAntiCheat(const int ActionReason, FString ActionDetials);// 0x1b0c04f39041
	void SolarGM_TransmitGMLua(FString playerName, out const FString[] GmArray);// 0x1b0b04f39041
	void SolarGM_TransmitGM(FString playerName, out const FString[] transmitGm);// 0x1b0a04f39041
	void SolarGm_TestGamepadVibrateEffect(FString ClipName, int Duration, int Loop, int Priority, int Interval, int Amplitude);// 0x1b0904f39041
	void SolarGM_TestEnsureMsgWithBP();// 0x1b0804f39041
	void SolarGM_TestEnsureMsg();// 0x1b0704f39041
	void SolarGM_TestCrashWithBP();// 0x1b0604f39041
	void SolarGM_TestCrash();// 0x1b0504f39041
	void SolarGm_SwitchFastFont(bool bIsEnable);// 0x1b0404f39041
	void SolarGM_StopRecordingReplay();// 0x1b0304f39041
	void SolarGM_StopPlayingReplay();// 0x1b0204f39041
	void SolarGM_StartRecordingLocalReplay(FString Filename);// 0x1b0104f39041
	void SolarGM_StartRecordHighlight(FString SessionNameOverride);// 0x1b0004f39041
	void SolarGm_SetSkydivingIconUpdateRate(float InRate);// 0x1aff04f39041
	void SolarGM_SetQuality(int InQuality);// 0x1afe04f39041
	void SolarGM_RequestWatchingLiveOfPlayer(FString PlayerId);// 0x1afd04f39041
	void SolarGM_RequestReplayList(int PageIndex, int PageSize);// 0x1afc04f39041
	void SolarGM_RequestPlayReplayByIdx(uint32 Index);// 0x1afb04f39041
	void SolarGM_RequestPlayReplayByBattleID(FString InBattleID, bool IsLive);// 0x1afa04f39041
	void SolarGM_RequestPlayReplay(FString InBattleID, FString DownloadUrl);// 0x1af904f39041
	void SolarGM_PlayLocalReplay(FString Filename);// 0x1af804f39041
	void SolarGM_PlayHighlight(FString Filename);// 0x1af704f39041
	void SolarGM_LobbyLua(FString CmdName, out const FString[] Params);// 0x1af604f39041
	void SolarGM_Lobby(FString CmdName, out const FString[] Params);// 0x1af504f39041
	void SolarGM_LoadLevelInstance(FString arg1);// 0x1af404f39041
	void SolarGM_KickMeOut();// 0x1af304f39041
	void SolarGM_GoHome();// 0x1af204f39041
	void SolarGm_EnableLuaCallStackProfile(bool bIsEnable);// 0x1af104f39041
	void SolarGM_AddWeaponExpLua(int weaponid, int count);// 0x1af004f39041
	void SolarGM_AddWeaponExp(int weaponid, int count);// 0x1aef04f39041
	void SolarGM_AddItemLua(int ItemID, int count);// 0x1aee04f39041
	void SolarGM_AddItem(int ItemID, int count);// 0x1aed04f39041
	void ShutDownPCSDK();// 0x1aec04f39041
	void ShutDownLimSdk();// 0x1aeb04f39041
	void ShutdownAnoSDK();// 0x1aea04f39041
	void SetIsFirstLaunch(bool bIsFirst);// 0x1ae904f39041
	void SetClientInitConfig(out const byte[] ConfigData);// 0x1ae804f39041
	void SetCleanUpfile(bool bCleanCache);// 0x1ae704f39041
	bool ServerTravel(FString Map, int ListenPort, bool bSpectator, bool bSkipGameNotify, FString options);// 0x1ae604f39041
	void SaveGame();// 0x1ae504f39041
	void RequestShutDown(FString reason);// 0x1ae404f39041
	void ReportLoadingInfoToBI(out FString[] LoadingInfo, float LoadingTime, bool bIsFinished);// 0x1ae304f39041
	void RegisterNetworkManager();// 0x1ae204f39041
	void OnStartBattle(FString InBattleID);// 0x1ae104f39041
	void OnManagersInitialized__DelegateSignature();// 0x1ae004f39041
	void OnHotPatchComplete();// 0x1adf04f39041
	void OnDisconnect();// 0x1ade04f39041
	void LuaStartGameFrameWork();// 0x1add04f39041
	void LuaInitGameFrameWork();// 0x1adc04f39041
	bool IsStandalone();// 0x1adb04f39041
	bool IsSolarServer(const Object* WorldContextObject);// 0x1ada04f39041
	bool IsSkipLogin();// 0x1ad904f39041
	bool IsServerOrStandalone();// 0x1ad804f39041
	bool IsListenServer();// 0x1ad704f39041
	bool IsGIsEditor();// 0x1ad604f39041
	bool IsFirstLaunchAfterVersionUpdate();// 0x1ad504f39041
	bool IsEditor();// 0x1ad404f39041
	bool IsDedicatedServerStressTest();// 0x1ad304f39041
	bool IsDedicatedServer();// 0x1ad204f39041
	bool IsClientOrStandalone();// 0x1ad104f39041
	bool IsClient();// 0x1ad004f39041
	void InitLuaClasses();// 0x1acf04f39041
	void InitGameManagers();// 0x1ace04f39041
	bool HasCommandlineParam(FString Param);// 0x1acd04f39041
	void GoHomeLuaCall();// 0x1acc04f39041
	SolarWeaponMergeMeshManager* GetWeaponMergeMeshManager();// 0x1acb04f39041
	WeaponGrowthManager* GetWeaponGrowthManager();// 0x1aca04f39041
	int GetWarmGameType();// 0x1ac904f39041
	UINavigationManager* GetUINavigationManager();// 0x1ac804f39041
	SolarVibrateManager* GetSolarVibrateManager();// 0x1ac704f39041
	SolarTutorialManager* GetSolarTutorialManager();// 0x1ac604f39041
	SolarTimerManager* GetSolarTimerManager();// 0x1ac504f39041
	SolarTcpNetworkManager* GetSolarTcpNetworkManager();// 0x1ac404f39041
	SolarTableManager* GetSolarTableManager();// 0x1ac304f39041
	SolarSaveGame* GetSolarSaveGame();// 0x1ac204f39041
	SolarReplayManager* GetSolarReplayManager();// 0x1ac104f39041
	SolarRedHintManager* GetSolarRedHintManager();// 0x1ac004f39041
	SolarPopPanelManager* GetSolarPopPanelManager();// 0x1abf04f39041
	SolarPlatformHelper* GetSolarPlatformHelper();// 0x1abe04f39041
	SolarPingFpsManager* GetSolarPingFpsManager();// 0x1abd04f39041
	SolarMapManager* GetSolarMapManager();// 0x1abc04f39041
	SolarMainPlayerModel* GetSolarMainPlayerModel();// 0x1abb04f39041
	SolarLuaManager* GetSolarLuaManager();// 0x1aba04f39041
	SolarLuaHelper* GetSolarLuaHelper();// 0x1ab904f39041
	SolarLoginManager* GetSolarLoginManager();// 0x1ab804f39041
	SolarLockSettingsMgr* GetSolarLockSettingsManager();// 0x1ab704f39041
	SolarItemManager* GetSolarItemManager();// 0x1ab604f39041
	SolarInteractableManager* GetSolarInteractableManager();// 0x1ab504f39041
	SolarInputMappingManager* GetSolarInputMappingManager();// 0x1ab404f39041
	IMChatObject* GetSolarIMChatObject();// 0x1ab304f39041
	SolarHttpManager* GetSolarHttpManager();// 0x1ab204f39041
	SolarHomeActorManager* GetSolarHomeActorManager();// 0x1ab104f39041
	SolarGameUserSettingsMgr* GetSolarGameUserSettingsManager();// 0x1ab004f39041
	SolarGameplayLogger* GetSolarGameplayLogger();// 0x1aaf04f39041
	SolarGameModeSelectionManager* GetSolarGameModeSelectionManager();// 0x1aae04f39041
	SolarGameInstanceBase* GetSolarGameInstanceBase(Object* WorldContextObject);// 0x1aad04f39041
	SolarEasyAntiCheatManager* GetSolarEasyAntiCheatManager();// 0x1aac04f39041
	SolarDownloaderManager* GetSolarDownloaderManager();// 0x1aab04f39041
	SolarAnoHelper* GetSolarAnoHelperStatic(Object* WorldContextObject);// 0x1aaa04f39041
	SolarAnoHelper* GetSolarAnoHelper();// 0x1aa904f39041
	SolarAkSoundManager* GetSolarAkSoundManager();// 0x1aa804f39041
	SolarAkGameObject* GetSolarAkGameObject();// 0x1aa704f39041
	SolarActivityManager* GetSolarActivityManager();// 0x1aa604f39041
	SolarABTestManager* GetSolarABTestManager();// 0x1aa504f39041
	SettlementStageManager* GetSettlementStageManager();// 0x1aa404f39041
	SeparatedPkgManager* GetSeparatedPkgManager();// 0x1aa304f39041
	int GetRuleID();// 0x1aa204f39041
	int GetRTCType();// 0x1aa104f39041
	int GetRankMatchID();// 0x1aa004f39041
	ProtectBaseManager* GetProtectBaseManager();// 0x1a9f04f39041
	int GetPort();// 0x1a9e04f39041
	byte GetPlayStage();// 0x1a9c04f39041
	SolarCharacter* GetPlayerCharacter();// 0x1a9b04f39041
	FString GetPIEServerURL();// 0x1a9a04f39041
	int GetPIEInstance();// 0x1a9904f39041
	int GetNumMode();// 0x1a9804f39041
	FString GetNetModeString();// 0x1a9704f39041
	byte GetNetMode();// 0x1a9504f39041
	int GetMaxPlayer();// 0x1a9404f39041
	FString GetMatchMode();// 0x1a9304f39041
	KeyMappingManager* GetKeyMappingManager();// 0x1a9204f39041
	bool GetIsMutiPlayer();// 0x1a9104f39041
	SolarGameStatistics* GetGameStatistics();// 0x1a9004f39041
	int GetGameModeGroupID();// 0x1a8f04f39041
	SolarGameConfigManager* GetGameConfigManager();// 0x1a8e04f39041
	int GetEntryID();// 0x1a8d04f39041
	int GetEloStart();// 0x1a8c04f39041
	int GetEloEnd();// 0x1a8b04f39041
	SolarOperationUIElement* GetDefaultOperationLayout();// 0x1a8a04f39041
	SCustomizedGameModeManager* GetCustomizedGameManager();// 0x1a8904f39041
	CGMCrossLevelDataMgr* GetCrossLevelDataMgr();// 0x1a8804f39041
	CrashReportManager* GetCrashReportManager();// 0x1a8704f39041
	FString GetCommandlineParam(FString Param);// 0x1a8604f39041
	int GetClientNumber();// 0x1a8504f39041
	void GetCategorizedActorsOfType(const Object* WorldContextObject, enum InActorType, out Actor*[] OutActors);// 0x1a8304f39041
	void GetCategorizedActorsByBits(const Object* WorldContextObject, byte InActorBit, out Actor*[] OutActors);// 0x1a8204f39041
	BlueCircleManager* GetBlueCircleManager();// 0x1a8104f39041
	int GetBattleVoiceID();// 0x1a8004f39041
	BattlePassConfigInfo* GetBattlePassConfigInfo();// 0x1a7f04f39041
	FString GetBattleKey();// 0x1a7e04f39041
	FString GetBattleID();// 0x1a7d04f39041
	SolarAssetManager* GetAssetManager();// 0x1a7c04f39041
	int64 GetAppActiveTimestampInterval();// 0x1a7b04f39041
	void ExecuteCommandArray(out const FString[] cmdArray);// 0x1a7a04f39041
	void ExecuteCommand(FString Cmd);// 0x1a7904f39041
	void ExecuteChangeAudioModeLuaCall(bool bTurnOn);// 0x1a7804f39041
	void ExecuteBackKeyLuaCall();// 0x1a7704f39041
	void ExecGameArgs(FString Args, out FString FailReason, out byte Branches);// 0x1a7504f39041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, int FGuid_A, int FGuid_B, int FGuid_C, int FGuid_D);// 0x1a7404f39041
	void ClearGameManagers();// 0x1a7304f39041
	void CheckSavedDirFiles(out FString[] Files);// 0x1a7204f39041
	void Browse(FString URL, byte TravelType);// 0x1a7004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarArchitecture.GameInstance.Object
	delegate OnOnScopeChangeDelegate;//[Offset: 0x1a0, Size: 0x10]
	void OnScopeChanged(enum InLastScope, enum InCurScope);// 0x1a6f04f39041
	bool IsScopeSettlement();// 0x1a6e04f39041
	bool IsScopeLogin();// 0x1a6d04f39041
	bool IsScopeLobby();// 0x1a6c04f39041
	bool IsScopeBattle();// 0x1a6b04f39041
	bool IsInScope(enum InScopeMask);// 0x1a6a04f39041
	SolarAbstractModel* GetModel(out const class SolarAbstractModel ModelClass);// 0x1a6904f39041
	SolarAbstractManager* GetManager(out const class SolarAbstractManager ManagerClass);// 0x1a6804f39041
	enum GetCurScope();// 0x1a6704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSaveGame.SaveGame.Object
	bool HasShowNewPlayerGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int EditorGameModeId;//[Offset: 0x2c, Size: 0x4]
	NeverShowCheckWindow[] NeverShowCheckWindowList;//[Offset: 0x30, Size: 0x10]
	bool HasReadSurvey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool HasReadSurvey2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool HasPlayedHuntMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	byte MatchTimes;//[Offset: 0x43, Size: 0x1]
	bool HasCompleteTeamUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool IsMorrowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bClickSocialEntranceBtnDiscord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bClickSocialEntranceBtnFacebook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	bool bClickSocialEntranceBtnYouTube;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bClickSocialEntranceBtnTikTok;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bClickSocialEntranceBtnInstagram;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bClickSocialTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bClickLiveBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int64 SocialLinkLastClickTime;//[Offset: 0x50, Size: 0x8]
	bool bHasReportedOnline15min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bHasReportedOnline30min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bHasPlayedPackEnterAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool bHasClickClanPermission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool bHasClickVipCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	int64 PatFaceRefreshTimeStamp;//[Offset: 0x60, Size: 0x8]
	bool bAutoDownloadSepPkgsOnWifi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bHasLobbyDownloadSepPkgsRedDot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	int64 bShowLobbyDownloadSepPkgsRedDotTimeStamp;//[Offset: 0x70, Size: 0x8]
	int BattlePassID;//[Offset: 0x78, Size: 0x4]
	int[] MarkingPassTaskID;//[Offset: 0x80, Size: 0x10]
	int[] DisplayedProductIDs;//[Offset: 0x90, Size: 0x10]
	int[] ClickedPosterRecIDs;//[Offset: 0xa0, Size: 0x10]
	uint32[] ReadMailIds;//[Offset: 0xb8, Size: 0x10]
	bool ValidateNeverShowCheckWindow(int TargetConfirmID);// 0x576c04f39041
	void UpdateNeverShowCheckWindow(int TargetConfirmID, enum NewDuration);// 0x576b04f39041
	void UpdateMarkTask(int InBattlePassID, int TaskID, bool Add);// 0x576a04f39041
	void UpdateDisplayedIDs(out const int[] InIDs);// 0x576904f39041
	void UpdateClickedPosterRecIDs(const int InID);// 0x576804f39041
	void SetMarkingTask(int InBattlePassID, out int[] InTaskID);// 0x576704f39041
	void PrintTwiceConfirmCheckWindowList();// 0x576604f39041
	void GetMarkingTask(int InBattlePassID, out int[] OutTaskID);// 0x576504f39041
	bool DeleteNeverShowCheckWindow(int TargetConfirmID);// 0x576404f39041
	void ClearDisplayIDs();// 0x576304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SaveGame.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NeverShowCheckWindow
	int ConfirmID;//[Offset: 0x0, Size: 0x4]
	DateTime Timestamp;//[Offset: 0x8, Size: 0x8]
	enum Duration;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DateTime
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarOperationUIElement.Object
	OperationUIElement[] CharacterOperationUI;//[Offset: 0x28, Size: 0x10]
	OperationUIElement[] DirectionOperationUI;//[Offset: 0x38, Size: 0x10]
	OperationUIElement[] SteeringOperationUI;//[Offset: 0x48, Size: 0x10]
	OperationUIElement[] JoyStickOperationUI;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OperationUIElement
	FString PanelName;//[Offset: 0x0, Size: 0x10]
	FString PanelAliasName;//[Offset: 0x10, Size: 0x10]
	float CurScale;//[Offset: 0x20, Size: 0x4]
	float MinScale;//[Offset: 0x24, Size: 0x4]
	float MaxScale;//[Offset: 0x28, Size: 0x4]
	float CurOpacity;//[Offset: 0x2c, Size: 0x4]
	float MinOpacity;//[Offset: 0x30, Size: 0x4]
	float MaxOpacity;//[Offset: 0x34, Size: 0x4]
	bool bCanHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bLockAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float minOffsetY;//[Offset: 0x3c, Size: 0x4]
	float maxOffsetY;//[Offset: 0x40, Size: 0x4]
	bool bCannotChangeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bCannotChangeOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bVisibleInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	Vector2D Translation;//[Offset: 0x48, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameArgs.Object
	FString[] CommandLineArgs;//[Offset: 0x30, Size: 0x10]
	bool SkipTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool ExecGameArgs(FString Args, out FString FailReason);// 0x478304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UIManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	delegate[] OnBigMapOpenDelegateGroup;//[Offset: 0x70, Size: 0x10]
	delegate[] OnBigMapVisibilityChangedDelegateGroup;//[Offset: 0x80, Size: 0x10]
	DataTable* BattleWidgetSettings;//[Offset: 0x90, Size: 0x8]
	SolarUIRoot* SolarUIRoot;//[Offset: 0x98, Size: 0x8]
	DestroyObjectStruct[] NeedToDestroyObjects;//[Offset: 0xa0, Size: 0x10]
	void WatchReference();// 0x611b04f39041
	void WatchAllReference();// 0x611a04f39041
	void UpdateButtonSprite(Button* TargetButton, FString AtlasType, FString NormalSpName, FString PressedSpName, FString HoveredSpName, FString DisableSpName);// 0x611904f39041
	void TriggerDelegate();// 0x611804f39041
	SolarUserWidget* ShowUIByName(FString InName, int RootID);// 0x611704f39041
	void SetWidgetLayout(Widget* InWidget, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY);// 0x611604f39041
	void SetWidgetChildrenLayout(UserWidget* InRootWidget, out const FName PanelAliasName, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY);// 0x611504f39041
	SolarUserWidget* SetUIActive(SolarUserWidget* InWidget, const bool Inactive);// 0x611404f39041
	void SetMaterialInstanceParams(Image* Image, FString ParamName, float Value);// 0x611304f39041
	void SetMaterialInstanceColor(Image* Image, FString ParamName, out const LinearColor Value);// 0x611204f39041
	void SetLoadingUIByLevelAndDisplay(int InModelID, int InLevel, int InMapIndex, bool InDisableCustomLoading);// 0x611104f39041
	void SetImageTintColor(Image* Img, out const LinearColor InColor);// 0x611004f39041
	void SetImageTexture(Image* Img, Texture2D* Texture);// 0x610f04f39041
	void SetImageFromTextureOrSprite(Image* DstImage, out const SoftObjectPath Path, bool bMatchSize);// 0x610e04f39041
	void SetImageColor(Image* Img, float R, float G, float B, float A);// 0x610d04f39041
	void SetFireInputStyle(FireInputWidget* FireInput, const SlateWidgetStyleAsset* Style);// 0x610c04f39041
	void SetCheckedState(CheckBox* Box, const enum State);// 0x610b04f39041
	void SetCheckboxStyle(CheckBox* CheckBox, const SlateWidgetStyleAsset* Style);// 0x610a04f39041
	void SetCheckBoxIsChecked(CheckBox* CheckBox, bool Checked);// 0x610904f39041
	void SetButtonStyle(Button* Btn, const SlateWidgetStyleAsset* Style);// 0x610804f39041
	void RemoveAllWidgets();// 0x610704f39041
	void OpenUIGM(FString UIID, int RootID);// 0x610604f39041
	void OpenConfirmUIInLua(int ConfirmID);// 0x610504f39041
	void OnLuaHotReloadFileChanged(FString LuaSysPath, FString LuaPathName);// 0x610404f39041
	void OnInitLuaHotReload();// 0x610304f39041
	void OnGameManagersInitialized();// 0x610204f39041
	void OnClientStartGame();// 0x610104f39041
	void LuaCloseUI(FString MapName);// 0x610004f39041
	Texture2D* LoadTexture2DBySoftPath(out const SoftObjectPath Path);// 0x60ff04f39041
	Texture2D* LoadTexture2DByPath(Object* InOuter, FString FullPath);// 0x60fe04f39041
	Texture2D* LoadTexture2D(Object* InOuter, FString TextureType, FString TexName);// 0x60fd04f39041
	Texture2D* LoadQualityBGPostfix(Object* InOuter, const int InQuality, FString Postfix);// 0x60fc04f39041
	Texture2D* LoadQualityBG(Object* InOuter, const int InQuality);// 0x60fb04f39041
	PaperSprite* LoadPaperSprite(Object* InOuter, FString AtlasPath, FString SpName);// 0x60fa04f39041
	MaterialInterface* LoadMaterialInstance(Object* InOuter, FString MaterialType, FString MaterialName);// 0x60f904f39041
	bool IsWidgetVisibleForDisplay(const Widget* InWidget);// 0x60f804f39041
	void InvalidateWidgetPrepass(Widget* InWidget);// 0x60f704f39041
	void InitLvlTextWidget(TextBlock* InHeadTextWidget, TextBlock* InTrailTextWidget);// 0x60f604f39041
	SolarCharacter* GetWidgetOwningCharacter(const Widget* InWidget);// 0x60f504f39041
	FString GetWeaponTextureFullPath(out FString IconPath);// 0x60f404f39041
	UserWidget* GetUIPanel(FString MapName);// 0x60f304f39041
	FString GetTexture2DFullPath(out FString PrePath, out FString IconPath);// 0x60f204f39041
	FString GetQualityBGFullPath(const int InQuality, const bool bWithSuffix);// 0x60f104f39041
	Texture2D* GetPlayerAvatarByID(int PlayerAvatarID);// 0x60f004f39041
	int GetLobbyID();// 0x60ef04f39041
	bool GetCheckBoxIsChecked(CheckBox* CheckBox);// 0x60ee04f39041
	CanvasPanelSlot* GetCanvasPanelSlotForWidget(Widget* Widget);// 0x60ed04f39041
	CustomWidget_TableRow GetBattleWidgetSetting(FString ConfigName);// 0x60ec04f39041
	UserWidget* GetBattleBackpackWidget();// 0x60eb04f39041
	void ExitSpectateMode();// 0x60ea04f39041
	void EnterSpectateMode();// 0x60e904f39041
	void DestroyWidget(UserWidget* InWidget);// 0x60e804f39041
	void CloseUIGM(FString UIID);// 0x60e704f39041
	void CloseLoadingUI();// 0x60e604f39041
	Margin ClampInScreenOffsets(Widget* WorldContextObject, out const Margin Offsets, out const Anchors Anchors, out const Vector2D Alignment);// 0x60e504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameManager.SolarAbstractManager.SolarContainer.Object
	SolarGameInstanceBase* OwnerGameInstance;//[Offset: 0x28, Size: 0x8]
	void ReceiveManagerIntialized();// 0x26b004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbstractManager.SolarContainer.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarContainer.Object
	void ReceiveInitialize();// 0x26af04f39041
	void ReceiveDeinitialize();// 0x26ae04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x150, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x160, Size: 0x3e0]
	LinearColor ColorAndOpacity;//[Offset: 0x540, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x550, Size: 0x10]
	byte ClickMethod;//[Offset: 0x560, Size: 0x1]
	byte TouchMethod;//[Offset: 0x561, Size: 0x1]
	byte PressMethod;//[Offset: 0x562, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x563, Size: 0x1]
	delegate OnClicked;//[Offset: 0x568, Size: 0x10]
	delegate OnPressed;//[Offset: 0x578, Size: 0x10]
	delegate OnReleased;//[Offset: 0x588, Size: 0x10]
	delegate OnHovered;//[Offset: 0x598, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x5a8, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x3ef604f39041
	void SetStyle(out const ButtonStyle InStyle);// 0x3ef504f39041
	void SetPressMethod(byte InPressMethod);// 0x3ef404f39041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3ef304f39041
	void SetClickMethod(byte InClickMethod);// 0x3ef204f39041
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x3ef104f39041
	bool IsPressed();// 0x3ef004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x10, Size: 0xe0]
	SlateBrush Hovered;//[Offset: 0xf0, Size: 0xe0]
	SlateBrush Pressed;//[Offset: 0x1d0, Size: 0xe0]
	SlateBrush Disabled;//[Offset: 0x2b0, Size: 0xe0]
	Margin NormalPadding;//[Offset: 0x390, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x3a0, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x3b0, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x3c8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateWidgetStyle
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateWidgetStyleContainerBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x140, Size: 0xe0]
	delegate BrushDelegate;//[Offset: 0x220, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x230, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x240, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x254, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x3f3004f39041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3f2f04f39041
	void SetBrushTintColor(SlateColor TintColor);// 0x3f2e04f39041
	void SetBrushSize(Vector2D DesiredSize);// 0x3f2d04f39041
	void SetBrushResourceObject(Object* ResourceObject);// 0x3f2c04f39041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x3f2b04f39041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x3f2a04f39041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x3f2904f39041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x3f2804f39041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x3f2704f39041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x3f2604f39041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x3f2504f39041
	void SetBrush(out const SlateBrush InBrush);// 0x3f2404f39041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x3f2304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xc0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x30, Size: 0xe0]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUIRoot.SolarUserWidget.UserWidget.Widget.Visual.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DestroyObjectStruct
	UserWidget* RootWidget;//[Offset: 0x0, Size: 0x8]
	FString FullPath;//[Offset: 0x8, Size: 0x10]
	DestroyObjectEntry[] Objects;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DestroyObjectEntry
	Object* Object;//[Offset: 0x0, Size: 0x8]
	FString FullPath;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FireInputWidget.Widget.Visual.Object
	SlateBrush JoyStickThumb;//[Offset: 0x140, Size: 0xe0]
	SlateBrush JoyStickThumbPress;//[Offset: 0x220, Size: 0xe0]
	SlateBrush JoyStickIcon;//[Offset: 0x300, Size: 0xe0]
	Vector2D VisualSize;//[Offset: 0x3e0, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x3e8, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x3f0, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x3f8, Size: 0x8]
	float ActiveOpacity;//[Offset: 0x400, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x404, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x408, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 0x1]
	delegate OnJoystickPressed;//[Offset: 0x420, Size: 0x10]
	delegate OnJoystickRelease;//[Offset: 0x430, Size: 0x10]
	delegate OnInputYawAndPitch;//[Offset: 0x440, Size: 0x10]
	void SetJoyStickThumbBrush(out const ButtonStyle ButtonStyle);// 0x478204f39041
	void SetJoyStickIcon(out const SlateBrush Icon);// 0x478104f39041
	void SetInputScale(Vector2D Scale);// 0x478004f39041
	void ResetControlInput();// 0x477f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x149, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x14c, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x160, Size: 0x8a0]
	SlateWidgetStyleAsset* Style;//[Offset: 0xa00, Size: 0x8]
	SlateBrushAsset* UncheckedImage;//[Offset: 0xa08, Size: 0x8]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0xa10, Size: 0x8]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0xa18, Size: 0x8]
	SlateBrushAsset* CheckedImage;//[Offset: 0xa20, Size: 0x8]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0xa28, Size: 0x8]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0xa30, Size: 0x8]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0xa38, Size: 0x8]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0xa40, Size: 0x8]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0xa48, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0xa50, Size: 0x1]
	Margin Padding;//[Offset: 0xa54, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0xa68, Size: 0x28]
	byte ClickMethod;//[Offset: 0xa90, Size: 0x1]
	byte TouchMethod;//[Offset: 0xa91, Size: 0x1]
	byte PressMethod;//[Offset: 0xa92, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa93, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0xa98, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x507d04f39041
	void SetPressMethod(byte InPressMethod);// 0x507c04f39041
	void SetIsChecked(bool InIsChecked);// 0x507b04f39041
	void SetClickMethod(byte InClickMethod);// 0x507a04f39041
	void SetCheckedState(enum InCheckedState);// 0x507904f39041
	bool IsPressed();// 0x507804f39041
	bool IsChecked();// 0x507704f39041
	enum GetCheckedState();// 0x507604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0xe0]
	SlateBrush UncheckedHoveredImage;//[Offset: 0xf0, Size: 0xe0]
	SlateBrush UncheckedPressedImage;//[Offset: 0x1d0, Size: 0xe0]
	SlateBrush CheckedImage;//[Offset: 0x2b0, Size: 0xe0]
	SlateBrush CheckedHoveredImage;//[Offset: 0x390, Size: 0xe0]
	SlateBrush CheckedPressedImage;//[Offset: 0x470, Size: 0xe0]
	SlateBrush UndeterminedImage;//[Offset: 0x550, Size: 0xe0]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x630, Size: 0xe0]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x710, Size: 0xe0]
	Margin Padding;//[Offset: 0x7f0, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x800, Size: 0x28]
	SlateColor BorderBackgroundColor;//[Offset: 0x828, Size: 0x28]
	SlateSound CheckedSlateSound;//[Offset: 0x850, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x868, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x880, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x160, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x178, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x188, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1c0, Size: 0x60]
	SlateBrush StrikeBrush;//[Offset: 0x220, Size: 0xe0]
	SlateBrush BackgroundBrush;//[Offset: 0x300, Size: 0xe0]
	Vector2D ShadowOffset;//[Offset: 0x3e0, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x3e8, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x3f8, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x408, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 0x1]
	enum TextTransformPolicy;//[Offset: 0x40e, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40f, Size: 0x1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x18c204f39041
	void SetText(FText InText);// 0x18c104f39041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x18c004f39041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x18bf04f39041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x18be04f39041
	void SetOpacity(float InOpacity);// 0x18bd04f39041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x18bc04f39041
	void SetFont(SlateFontInfo InFontInfo);// 0x18bb04f39041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x18ba04f39041
	void SetBackgroundBrush(SlateBrush InBackgroundBrush);// 0x18b904f39041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x18b804f39041
	FText GetText();// 0x18b704f39041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x18b604f39041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x18b504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x138, Size: 0x3]
	byte Justification;//[Offset: 0x13b, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x13c, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 0x1]
	float WrapTextAt;//[Offset: 0x140, Size: 0x4]
	Margin Margin;//[Offset: 0x144, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x154, Size: 0x4]
	bool AlwaysKeepJustification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 0x1]
	void SetJustification(byte InJustification);// 0x185204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x28]
	FName TypefaceFontName;//[Offset: 0x48, Size: 0x8]
	int Size;//[Offset: 0x50, Size: 0x4]
	int LetterSpacing;//[Offset: 0x54, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	int OutlineBlur;//[Offset: 0x4, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x10, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x2c]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	int ZOrder;//[Offset: 0x68, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x63f904f39041
	void SetSize(Vector2D InSize);// 0x63f804f39041
	void SetPosition(Vector2D InPosition);// 0x63f704f39041
	void SetOffsets(Margin InOffset);// 0x63f604f39041
	void SetMinimum(Vector2D InMinimumAnchors);// 0x63f504f39041
	void SetMaximum(Vector2D InMaximumAnchors);// 0x63f404f39041
	void SetLayout(out const AnchorData InLayoutData);// 0x63f304f39041
	void SetAutoSize(bool InbAutoSize);// 0x63f204f39041
	void SetAnchors(Anchors InAnchors);// 0x63f104f39041
	void SetAlignment(Vector2D InAlignment);// 0x63f004f39041
	int GetZOrder();// 0x63ef04f39041
	Vector2D GetSize();// 0x63ee04f39041
	Vector2D GetPosition();// 0x63ed04f39041
	Margin GetOffsets();// 0x63ec04f39041
	AnchorData GetLayout();// 0x63eb04f39041
	bool GetAutoSize();// 0x63ea04f39041
	Anchors GetAnchors();// 0x63e904f39041
	Vector2D GetAlignment();// 0x63e804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	Vector2D Alignment;//[Offset: 0x24, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomWidget_TableRow.TableRowBase
	SoftObjectPath TeammateState;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath BattleScore;//[Offset: 0x20, Size: 0x18]
	SoftObjectPath SpectatorListPath;//[Offset: 0x38, Size: 0x18]
	SoftObjectPath SafeAreaProgress;//[Offset: 0x50, Size: 0x18]
	SoftObjectPath JobEffectListPath;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath JobEffectSelectPanelPath;//[Offset: 0x80, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TableRowBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UINavigationManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	<FString,SolarUserWidget*> WidgetOpenedMap;//[Offset: 0x38, Size: 0x50]
	UserWidget*[] TmpRemovedWidgets;//[Offset: 0x88, Size: 0x10]
	SolarUserWidget*[] CachedCreatedWidgets;//[Offset: 0x98, Size: 0x10]
	SolarUIRoot* SolarUIRoot;//[Offset: 0xb8, Size: 0x8]
	void UnbindCustomControlDefine(SolarUserWidget* PanelWidget, SolarUserWidget* UserWidget);// 0x614304f39041
	SolarUserWidget* ShowUIBySubClass(const class SolarUserWidget SubClass, enum RootID);// 0x614204f39041
	bool ShowPanelUI(SolarUserWidget* createWidget, FString UniqueWidgetKey);// 0x614104f39041
	void RemoveUserWidgetLuaRef(SolarUserWidget* UserWidget);// 0x614004f39041
	void RemoveUIFromOpenedMap(FString UniqueWidgetKey);// 0x613f04f39041
	void RemoveAllSolarWidgets();// 0x613e04f39041
	void PrePooledWidgetReset(UserWidget* UserWidget);// 0x613d04f39041
	void OnShowPanelUI(SolarUserWidget* UserWidget);// 0x613c04f39041
	void OnPostLoadMapInitUIRoot(World* InWorld);// 0x613b04f39041
	void OnOpenPanelUI(SolarUserWidget* UserWidget);// 0x613a04f39041
	void OnHidePanelUI(SolarUserWidget* UserWidget);// 0x613904f39041
	void OnDisplayMetricsChanged();// 0x613804f39041
	void OnClosePanelUI(SolarUserWidget* UserWidget);// 0x613704f39041
	bool IsUserWidgetInScope(out const class SolarUserWidget Class, out enum OutCurScope, out enum OutDstScope);// 0x613604f39041
	SolarUserWidget* GetShowTopWidget();// 0x613504f39041
	UserWidget* GetOpenedWidget(FString UniqueWidgetKey);// 0x613404f39041
	void CloseUIBySubClass(const class SolarUserWidget SubClass);// 0x613304f39041
	void ClosePanelUI(SolarUserWidget* closeWidget, FString UniqueWidgetKey);// 0x613204f39041
	void ClearNonPersistentWidget();// 0x613104f39041
	void ClearAllOpenedWidget();// 0x613004f39041
	void BindWidgetVisibilityChangedEvent(out const delegate VisibilityChangedEvent);// 0x612f04f39041
	void BindCustomControlDefine(SolarUserWidget* PanelWidget, SolarUserWidget* UserWidget, FString FullPath);// 0x612e04f39041
	void BatchRemovedWidgets(bool bRemoveAll);// 0x612d04f39041
	void AddUIToOpenedMap(FString UniqueWidgetKey, SolarUserWidget* Widget);// 0x612c04f39041
	void AddBatchRemovedWidget(SolarUserWidget* UserWidget);// 0x612b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SeparatedPkgManager.Object
	delegate OnSepPkgDataInitFinish;//[Offset: 0x30, Size: 0x10]
	<int,SeparatedPkgDownloader*> ActiveDownloaders;//[Offset: 0x70, Size: 0x50]
	bool RequireSeparatedPackageDownload(int InPkgID, out SeparatedPkgDownloader* OutDownloader, bool bIncludeMain, bool bIncludeOptional);// 0x4d0504f39041
	void OnPakFileMounted_Implement(FString PakFilename, const int ChunkID);// 0x4d0404f39041
	bool IsSepareatedPkgDownloading(out const int PkgID);// 0x4d0304f39041
	bool IsSeparatedPackageAvailable(int InPkgID);// 0x4d0204f39041
	void InvokeOnSepPkgDataInitFinish();// 0x4d0104f39041
	bool IfSeparatedPakDownloaded(int PakID, bool bIsOptional);// 0x4d0004f39041
	FString GetSeparetedPkgSavedDirectory();// 0x4cff04f39041
	SeparatedPkgManager* GetSeparatedPackageManager(Object* WorldContextObject);// 0x4cfe04f39041
	FString[] GetContentBasePakNames();// 0x4cfd04f39041
	SeparatedPkgDownloader* GetActiveDownloader(int InPkgID);// 0x4cfc04f39041
	void Deinitialize();// 0x4cfb04f39041
	void ClearSepPkgDownloader(int InPkgID);// 0x4cfa04f39041
	void ClearAllDownloaders();// 0x4cf904f39041
	void BindOnPakFileMounted();// 0x4cf804f39041
	void AllOptionalPaksDownloaded(bool bAllDownloaded);// 0x4cf704f39041
	void AddAvailableChunk(int ChunkID);// 0x4cf604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SeparatedPkgDownloader.Object
	delegate OnDownloadInfoDetected;//[Offset: 0x30, Size: 0x10]
	delegate OnSepPkgDownloading;//[Offset: 0x40, Size: 0x10]
	delegate OnSepPkgReady;//[Offset: 0x50, Size: 0x10]
	delegate OnSepPkgDownloadFailed;//[Offset: 0x60, Size: 0x10]
	delegate OnHashCheckFailedPkgDownloader;//[Offset: 0x70, Size: 0x10]
	enum DownloadState;//[Offset: 0x80, Size: 0x1]
	int PkgID;//[Offset: 0x94, Size: 0x4]
	bool bIncludeMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bIncludeOptional;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int64 StartTimestamp;//[Offset: 0xa8, Size: 0x8]
	PakDownloadInfo[] PakInfosOnServer;//[Offset: 0xb0, Size: 0x10]
	int TotalDownloadSize;//[Offset: 0xc0, Size: 0x4]
	DownloadFileInfo[] NeedDownloadPaks;//[Offset: 0xc8, Size: 0x10]
	void StartMountPaks();// 0x4cf304f39041
	void StartGettingSeparatedPackage();// 0x4cf204f39041
	bool ResumeDownloadSeparatedPaks();// 0x4cf104f39041
	void ResumeDownloading();// 0x4cf004f39041
	void PromptSeparatedPackageDownloadInfo();// 0x4cef04f39041
	bool PauseDownloadSeparatedPaks();// 0x4cee04f39041
	void OnPaksMountFailed();// 0x4ced04f39041
	void OnPaksMountCompleted(int InLastMountOrder);// 0x4cec04f39041
	void OnPaksFailed(enum InErrorType, int InErrorCode, out const FString[] Headers);// 0x4ceb04f39041
	void OnPackageListFailed(enum InErrorType, int InErrorCode, out const FString[] Headers);// 0x4cea04f39041
	void OnHashCheckFailed();// 0x4ce904f39041
	void OnEacPakCompleted(FString LocalFilePath, int64 CDNServerTimeStamp);// 0x4ce804f39041
	void OnEachPakDownloading(FString Filename, int DownloadSize, int TotalSize, int CachedSize);// 0x4ce704f39041
	void OnAllPaksCompleted(out const FString[] LocalFilePaths, int64 CDNServerTimeStamp);// 0x4ce604f39041
	int64 GetLocalTime();// 0x4ce504f39041
	void ClearEvents();// 0x4ce404f39041
	void CheckServerInfo();// 0x4ce304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PakDownloadInfo
	FString Filename;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DownloadFileInfo
	FString URL;//[Offset: 0x0, Size: 0x10]
	FString Filename;//[Offset: 0x10, Size: 0x10]
	FString HashStr;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputMappingManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	delegate OnInputMappingUpdate;//[Offset: 0x38, Size: 0x10]
	delegate OnInputDeviceChanged;//[Offset: 0x48, Size: 0x10]
	<FString,InputKeyMappingEntry> KeyMappingEntryDict;//[Offset: 0x58, Size: 0x50]
	InputKeyMappingEntry[] CacheKeyMappingEntries;//[Offset: 0xa8, Size: 0x10]
	InputAction*[] PreCacheInputActions;//[Offset: 0xb8, Size: 0x10]
	void SplitInputChord(out const InputChord InInputChord, out FString KeyStr1, out FString KeyStr2);// 0x270304f39041
	bool IsInputTypeGamepad();// 0x270204f39041
	void InputDeviceChangedDelegate__DelegateSignature(InputDeviceProxy InputDeviceProxy);// 0x270004f39041
	InputKeyMappingEntry[] GetKeyMappingEntries();// 0x26ff04f39041
	enum GetCurrentInputType();// 0x26fe04f39041
	FName GetCurrentGamepadType();// 0x26fd04f39041
	InputKeyMappingEntry FindKeyMappingEntry(FString ActionID);// 0x26fc04f39041
	InputKeyMappingEntry CreateKeyMappingEntry(FString InActionID, FString InActionName, const enum InActionType, float InScale, FString InKeyStr1, FString InKeyStr2, FString InKeyStr3, const enum InInputTriggerType1, const enum InInputTriggerType2, const enum InInputTriggerType3);// 0x26f704f39041
	bool CreateInputChord(FString KeyStr1, FString KeyStr2, out InputChord OutInputChord);// 0x26f604f39041
	void ApplyKeyMappings();// 0x26f504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputKeyMappingEntry
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString ActionID;//[Offset: 0x8, Size: 0x10]
	FString ActionName;//[Offset: 0x18, Size: 0x10]
	enum ActionType;//[Offset: 0x28, Size: 0x1]
	float Scale;//[Offset: 0x2c, Size: 0x4]
	InputKeyMappingPair[] KeyMappingPairList;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputKeyMappingPair
	FString KeyStr1;//[Offset: 0x0, Size: 0x10]
	FString KeyStr2;//[Offset: 0x10, Size: 0x10]
	enum TriggerType;//[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputDeviceProxy
	enum InputType;//[Offset: 0x0, Size: 0x1]
	FName GamepadType;//[Offset: 0x4, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTimerManager.Object
	bool bFullCleanup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void UnPauseTimerInternal(TimerHandle Handle);// 0x5e2d04f39041
	void TimerCallbackToLuaInternal(FString CallbackKey);// 0x5e2c04f39041
	TimerHandle SetTimerForNextTickInternal(FString CallbackKey);// 0x5e2b04f39041
	void PauseTimerInternal(TimerHandle Handle);// 0x5e2a04f39041
	void OnLuaContextCleanup(const bool InBFullCleanup);// 0x5e2904f39041
	bool IsValidTimerInternal(TimerHandle Handle);// 0x5e2804f39041
	bool IsTimerActiveInternal(TimerHandle Handle);// 0x5e2704f39041
	void ClearTimerInternal(TimerHandle Handle);// 0x5e2604f39041
	TimerHandle AddTimerInternal(FString CallbackKey, const float Rate, const bool IsLoop, const float InitialStartDelay);// 0x5e2504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarMainPlayerModel.Object
	void SyncFromPlayerData(int InAccountFlag);// 0x54c404f39041
	bool IsAccountFlagOn();// 0x54c304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbstractModel.SolarContainer.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameConfigManager.Object
	DataTable* WeaponDTInstance;//[Offset: 0x30, Size: 0x8]
	DataTable* WeaponAppearanceDTInstance;//[Offset: 0x38, Size: 0x8]
	DataTable* ItemActorDTInstance;//[Offset: 0x40, Size: 0x8]
	DataTable* BackpackTrailAssembingDTInstance;//[Offset: 0x48, Size: 0x8]
	DataTable* CharacterDTInstance;//[Offset: 0x50, Size: 0x8]
	DataTable* ItemResourceDTInstance;//[Offset: 0x58, Size: 0x8]
	DataTable* BuffEffectDTInstance;//[Offset: 0x60, Size: 0x8]
	DataTable* ScreenEffectDTInstance;//[Offset: 0x68, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfigAsset;//[Offset: 0x70, Size: 0x8]
	GlobalVehicleWeaponConfig* GlobalVehicleWeaponConfigAsset;//[Offset: 0x78, Size: 0x8]
	GlobalHandheldWeaponConfig* GlobalHandheldWeaponConfigAsset;//[Offset: 0x80, Size: 0x8]
	SolarRoleSkillDataConfig* RoleConfigAsset;//[Offset: 0x88, Size: 0x8]
	float HeadHitValue;//[Offset: 0x90, Size: 0x4]
	float ShieldReducePhy;//[Offset: 0x94, Size: 0x4]
	float ShieldReduceEn;//[Offset: 0x98, Size: 0x4]
	float ArmorReducePhy;//[Offset: 0x9c, Size: 0x4]
	float ArmorReduceEn;//[Offset: 0xa0, Size: 0x4]
	int BackpackEnergyID;//[Offset: 0xa4, Size: 0x4]
	int BackpackExtraEnergyID;//[Offset: 0xa8, Size: 0x4]
	int MedicineItemId;//[Offset: 0xac, Size: 0x4]
	int RadarItemId;//[Offset: 0xb0, Size: 0x4]
	int ShieldRechargerItemId;//[Offset: 0xb4, Size: 0x4]
	int ShieldBigRechargerItemId;//[Offset: 0xb8, Size: 0x4]
	float UnPickupItemTime;//[Offset: 0xbc, Size: 0x4]
	float UnAutoPickupItemTime;//[Offset: 0xc0, Size: 0x4]
	float AutoPickupTime;//[Offset: 0xc4, Size: 0x4]
	float AutoMarkCDTime;//[Offset: 0xc8, Size: 0x4]
	int[] AutoMarkItemTypeList;//[Offset: 0xd0, Size: 0x10]
	float AutoMarkTeammateDistance;//[Offset: 0xe0, Size: 0x4]
	float AutoMarkDamagingCharacterDistance;//[Offset: 0xe4, Size: 0x4]
	float PickupCapsuleRadius;//[Offset: 0xe8, Size: 0x4]
	float PickupCapsuleHalfHeight;//[Offset: 0xec, Size: 0x4]
	void OnInitialized();// 0x517b04f39041
	SolarRoleSkillDataConfig* GetSolarRoleSkillDataConfig();// 0x517a04f39041
	LinearColor GetLowQualityColorByQuality(int Quality);// 0x517904f39041
	LinearColor GetHUDDecorateColorByQuality(int Quality);// 0x517804f39041
	LinearColor GetHUDColorByQuality(int Quality);// 0x517704f39041
	LinearColor GetHUDBGColorByQuality(int Quality);// 0x517604f39041
	LinearColor GetHighQualityColorByQuality(int Quality);// 0x517504f39041
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x517404f39041
	GlobalVehicleWeaponConfig* GetGlobalVehicleWeaponConfig();// 0x517304f39041
	GlobalHandheldWeaponConfig* GetGlobalHandheldWeaponConfig();// 0x517204f39041
	FString GetFGByQuality(int Quality);// 0x517104f39041
	LinearColor GetColorByQuality(int Quality);// 0x517004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarRoleSkillDataConfig.DataAsset.Object
	PassiveSkillDataAsset* ClassCommonPassiveSkill;//[Offset: 0x30, Size: 0x28]
	<enum,HeroClassConfig> HeroClassConfigs;//[Offset: 0x58, Size: 0x50]
	DataTable* RoleSkillDataTable;//[Offset: 0xa8, Size: 0x8]
	DataTable* BattleUpgradeEffectTypeDataTable;//[Offset: 0xb0, Size: 0x8]
	int RoleSkillCannotActiveNoticeID;//[Offset: 0xb8, Size: 0x4]
	SoftClassPath UniqueSkillForbiddenGameplayEffect;//[Offset: 0xc0, Size: 0x18]
	SoftClassPath TacticalSkillForbiddenGameplayEffect;//[Offset: 0xd8, Size: 0x18]
	SoftClassPath InitCDValueGameplayEffect;//[Offset: 0xf0, Size: 0x18]
	SoftClassPath SuperSkillBlockGameplayEffect;//[Offset: 0x108, Size: 0x18]
	SoftClassPath TacticalSkillBlockGameplayEffect;//[Offset: 0x120, Size: 0x18]
	SoftClassPath SuperCanTriggerAgainGameplayEffect;//[Offset: 0x138, Size: 0x18]
	SoftClassPath TacticalCanTriggerAgainGameplayEffect;//[Offset: 0x150, Size: 0x18]
	class GameplayEffect* UsingContinuousSkillStatusEffect;//[Offset: 0x168, Size: 0x8]
	class GameplayEffect* HoldingSkillStatusEffect;//[Offset: 0x170, Size: 0x8]
	DataTable* WeaponUIStyleDataTable;//[Offset: 0x178, Size: 0x8]
	<int,FString> CharacterUpgradeEffects;//[Offset: 0x180, Size: 0x50]
	enum GetLevelUpRewardType(const int CharacterId, const int TargetLevel);// 0x576204f39041
	SoftObjectPath GetLevelUpInnerIconPath(const int CharacterId, const int TargetLevel);// 0x576104f39041
	FString GetLevelUpInnerDescription(const int CharacterId, const int TargetLevel);// 0x576004f39041
	SoftObjectPath[] GetLevelUpAllInnerIconPath(const int CharacterId, const int TargetLevel);// 0x575f04f39041
	FString[] GetLevelUpAllInnerDescription(const int CharacterId, const int TargetLevel);// 0x575e04f39041
	FString GetEffectIdForCharacterUpgrade(const int TargetLevel);// 0x575d04f39041
	enum GetClassTypeForCharacter(const int CharacterId);// 0x575c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PassiveSkillDataAsset.PrimaryDataAsset.DataAsset.Object
	SoftClassPath SkillClassPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SkillIconPath;//[Offset: 0x48, Size: 0x18]
	WrappedLocalTextID SkillName;//[Offset: 0x60, Size: 0x4]
	WrappedLocalTextID SkillDescription;//[Offset: 0x64, Size: 0x4]
	PassiveSkillLevelDescription[] LevelUpConfigs;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PrimaryDataAsset.DataAsset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WrappedLocalTextID
	int LocalTextId;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PassiveSkillLevelDescription
	WrappedLocalTextID InnerDescriptionLocalTextID;//[Offset: 0x0, Size: 0x4]
	WrappedLocalTextID ShortDescriptionLocalTextID;//[Offset: 0x4, Size: 0x4]
	SoftObjectPath InnerIconPath;//[Offset: 0x8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroClassConfig
	PassiveSkillDataAsset* SpecificPassiveSkill;//[Offset: 0x0, Size: 0x28]
	float HPGridUnit;//[Offset: 0x28, Size: 0x4]
	bool bEnableCombatRegeneration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	int RegenGrids;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GlobalWeaponConfig.SolarDataAsset.DataAsset.Object
	Vector2D StandardViewportSize;//[Offset: 0x38, Size: 0x8]
	float StandardDPIScale;//[Offset: 0x40, Size: 0x4]
	bool bWeaponReceiveShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	<class Actor,WeaponHitResponse> WeaponHitResponseClassMap;//[Offset: 0x48, Size: 0x50]
	<FName,WeaponHitResponse> WeaponHitResponseTagMap;//[Offset: 0x98, Size: 0x50]
	<class Actor,WeaponHitResponse> WeaponHitResponseSameTeamClassMap;//[Offset: 0xe8, Size: 0x50]
	<FName,WeaponHitResponse> WeaponHitResponseSameTeamTagMap;//[Offset: 0x138, Size: 0x50]
	RuntimeFloatCurve HitEffectScaleRuntimeCurve;//[Offset: 0x188, Size: 0x88]
	bool bCanOperateWhenOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	RuntimeFloatCurve WeaponCrosshairSpreadSpeedRuntimeCurve;//[Offset: 0x218, Size: 0x88]
	RuntimeFloatCurve WeaponCrosshairBackSpeedRuntimeCurve;//[Offset: 0x2a0, Size: 0x88]
	float PriamayFireIgnoreInterval;//[Offset: 0x328, Size: 0x4]
	Vector AssistAimAutoFireBoxExtent;//[Offset: 0x32c, Size: 0xc]
	byte[] AssistAimAutoFireBlockTypes;//[Offset: 0x338, Size: 0x10]
	WeaponAssistAimConfig* AssistAimConfig;//[Offset: 0x348, Size: 0x8]
	<enum,FString> HitFeedbackMapForUI;//[Offset: 0x350, Size: 0x50]
	float EnableHeadShotDamageMinScale;//[Offset: 0x3a0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarDataAsset.DataAsset.Object
	void InitFromAsset();// 0x47f104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponHitResponse
	bool bForceBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bForcePenetrate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bForceAimIgnore;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectHalo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bTakeDamage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bShowExplode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bShowDecal;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bPlaySound;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAssistAimConfig.DataAsset.Object
	byte AssistAimTargetFlag;//[Offset: 0x30, Size: 0x1]
	byte[] TargetDetectionBlockTypes;//[Offset: 0x38, Size: 0x10]
	byte[] LockAimingBlockTypes;//[Offset: 0x48, Size: 0x10]
	int MaxAllowedTargetCandidateCount;//[Offset: 0x58, Size: 0x4]
	float DistanceToAimCenterWeight;//[Offset: 0x5c, Size: 0x4]
	float DistanceToLocalCharacterWeight;//[Offset: 0x60, Size: 0x4]
	bool bEnableAssistFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bEnableGlobalSensitivityScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	WeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAll;//[Offset: 0x68, Size: 0x60]
	WeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAllGamepad;//[Offset: 0xc8, Size: 0x60]
	bool bEnableAssistAimInSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	WeaponAssistAimWeaponConfigAll AssistAimWeaponConfigSwitch;//[Offset: 0x130, Size: 0x60]
	WeaponAssistAimByCharacterTag[] AssistAimWeaponConfigsByCharacterTag;//[Offset: 0x190, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAssistAimWeaponConfigAll
	WeaponAssistAimWeaponConfig* DefaultConfig;//[Offset: 0x0, Size: 0x8]
	WeaponAssistAimWeaponConfig* DefaultScopeConfig;//[Offset: 0x8, Size: 0x8]
	<enum,WeaponAssistAimWeaponConfig*> ScopeConfigMap;//[Offset: 0x10, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAssistAimWeaponConfig.DataAsset.Object
	float MaxTargetDetectionDistance;//[Offset: 0x30, Size: 0x4]
	BaseFollowSpeedByTag[] BaseFollowSpeedByTags;//[Offset: 0x38, Size: 0x10]
	GameplayTagRequirements TargetVelocityFollowTagRequirements;//[Offset: 0x48, Size: 0x50]
	float TargetVelocityFollowDeactivationDelay;//[Offset: 0x98, Size: 0x4]
	RuntimeFloatCurve TargetVelocityFollowHorizontalRatioCurve;//[Offset: 0xa0, Size: 0x88]
	RuntimeFloatCurve TargetVelocityFollowVerticalRatioCurve;//[Offset: 0x128, Size: 0x88]
	float TargetVelocityFollowHorizontalRatioCurveScale;//[Offset: 0x1b0, Size: 0x4]
	float TargetVelocityFollowVerticalRatioCurveScale;//[Offset: 0x1b4, Size: 0x4]
	float TargetVelocityFollowMaxHorizontalSpeed;//[Offset: 0x1b8, Size: 0x4]
	float TargetVelocityFollowMaxVerticalSpeed;//[Offset: 0x1bc, Size: 0x4]
	RuntimeFloatCurve TargetVelocityFollowRatioScaleByDistanceCurve;//[Offset: 0x1c0, Size: 0x88]
	RuntimeFloatCurve GlobalSensitivityScaleCurve;//[Offset: 0x248, Size: 0x88]
	float GlobalSensitivityScaleCurveScale;//[Offset: 0x2d0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BaseFollowSpeedByTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	float SameTargetTriggerCooldown;//[Offset: 0x50, Size: 0x4]
	float HorizontalSpeed;//[Offset: 0x54, Size: 0x4]
	float VerticalSpeed;//[Offset: 0x58, Size: 0x4]
	RuntimeFloatCurve SpeedScaleByDistanceCurve;//[Offset: 0x60, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAssistAimByCharacterTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	WeaponAssistAimWeaponConfig* AssistAimConfig;//[Offset: 0x50, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GlobalVehicleWeaponConfig.SolarDataAsset.DataAsset.Object
	AssitLockBoneWeight[] AssistLockBoneWeight;//[Offset: 0x38, Size: 0x10]
	AssitLockBoneWeight[] SortAssistLockBoneWeight;//[Offset: 0x48, Size: 0x10]
	float CoefficientHUD;//[Offset: 0x58, Size: 0x4]
	float CoefficientWorld;//[Offset: 0x5c, Size: 0x4]
	float CoefficientHUDUnlock;//[Offset: 0x60, Size: 0x4]
	float CoefficientWorldUnlock;//[Offset: 0x64, Size: 0x4]
	float HudDistFromAssistLockPawnToSecondReticle;//[Offset: 0x68, Size: 0x4]
	RuntimeFloatCurve AssistLockUIScaleCurve;//[Offset: 0x70, Size: 0x88]
	float CrosshairAimEnemyEndTime;//[Offset: 0xf8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AssitLockBoneWeight
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float BoneWeight;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GlobalHandheldWeaponConfig.SolarDataAsset.DataAsset.Object
	DataTable* WeaponLODTable;//[Offset: 0x38, Size: 0x8]
	GameplayTagContainer BlockCharacterSprintTags;//[Offset: 0x40, Size: 0x20]
	DataTable* WeaponPartEffectDescTable;//[Offset: 0x60, Size: 0x8]
	int WeaponPartEffectTipMaxinum;//[Offset: 0x68, Size: 0x4]
	float DoScopeInterval;//[Offset: 0x6c, Size: 0x4]
	float DoScopeMixedTimeThreshold;//[Offset: 0x70, Size: 0x4]
	float SprintingFireDelay;//[Offset: 0x74, Size: 0x4]
	DataTable* WeaponScopeSensitivityTable;//[Offset: 0x78, Size: 0x8]
	float CrosshairAimEnemyEndTime;//[Offset: 0x80, Size: 0x4]
	<enum,FString> CharaterPostureMap;//[Offset: 0x88, Size: 0x50]
	<int,enum> AudioPromptForNoAmmoTable;//[Offset: 0xd8, Size: 0x50]
	DataTable*[] SoundGroupMappings;//[Offset: 0x128, Size: 0x10]
	float ForceStopLoopSoundTime;//[Offset: 0x138, Size: 0x4]
	int WeaponSummonBlockNoticeID;//[Offset: 0x13c, Size: 0x4]
	int WeaponSummonOverRangeNoticeID;//[Offset: 0x140, Size: 0x4]
	DataTable* WeaponSkinTable;//[Offset: 0x148, Size: 0x8]
	<enum,FName> PartSocketNameTable;//[Offset: 0x150, Size: 0x50]
	DataTable* WeaponAttachTransformTable;//[Offset: 0x1a0, Size: 0x8]
	float WeaponOnBackpackCrouchLerpTime;//[Offset: 0x1a8, Size: 0x4]
	float ReconnectReadyTime;//[Offset: 0x1ac, Size: 0x4]
	bool bEnableNewShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	bool bEnableGunEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 0x1]
	bool bEnableRecoilRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b2, Size: 0x1]
	bool bRecoilRecoveryBlockGunEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b3, Size: 0x1]
	float RecoilRecoveryScale;//[Offset: 0x1b4, Size: 0x4]
	enum AimOffsetAdjustType;//[Offset: 0x1b8, Size: 0x1]
	WeaponAttributeGameplayTags WeaponAttributeTags;//[Offset: 0x1bc, Size: 0x18]
	enum AimTraceOriginType;//[Offset: 0x1d4, Size: 0x1]
	float MuzzleInWallCheckDistance;//[Offset: 0x1d8, Size: 0x4]
	float SpreadSmoothSpeed;//[Offset: 0x1dc, Size: 0x4]
	FString GetStateByPosture(enum posture);// 0x47f404f39041
	FString GetStateByAnimState(enum CharacterState);// 0x47f304f39041
	bool GetIsGroundByAnimState(enum CharacterState);// 0x47f204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAttributeGameplayTags
	GameplayTag Spread;//[Offset: 0x0, Size: 0x8]
	GameplayTag HorizontalRecoil;//[Offset: 0x8, Size: 0x8]
	GameplayTag VerticalRecoil;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattlePassConfigInfo.Object
	BattlePassLevelInfo[] BattlePassLevel;//[Offset: 0x28, Size: 0x10]
	bool IsMaxLevelWithExp(int BattlePassID, int TotalExp);// 0x455a04f39041
	void Initialize();// 0x455904f39041
	int GetLevelByTestExp(int BattlePassID, int InTestExp);// 0x455804f39041
	int GetExpNeedForLv(int BattlePassID, int Level);// 0x455704f39041
	int GetBattllePassMaxLevel(int BattlePassID);// 0x455604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattlePassLevelInfo
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLuaHelper.Object
	DataTable* KeyMappingInfoDataTable;//[Offset: 0x30, Size: 0x8]
	DataTable* KeyMappingDisplayInfoDataTable;//[Offset: 0x38, Size: 0x8]
	SolarPlayerReport[] SettleTeamReports;//[Offset: 0x40, Size: 0x10]
	bool WriteFile(FString FilePath, FString Content);// 0x54bd04f39041
	void UnloadCharacterOwnedBanks(Object* WorldContextObject, int CharacterId, byte Mode);// 0x54bc04f39041
	void UnloadAllCharacterOwnedBanks(Object* WorldContextObject, byte Mode);// 0x54bb04f39041
	void UELogWarning(FString str);// 0x54ba04f39041
	void UELogNetwork(FString str);// 0x54b904f39041
	void UELogError(FString str);// 0x54b804f39041
	void UELog(FString str);// 0x54b704f39041
	Object* TryLoadBySoftObjectPath(out const SoftObjectPath ObjectPath);// 0x54b604f39041
	bool TryConvertFilenameToLongPackageName(FString InFilename, out FString OutPackageName);// 0x54b504f39041
	void TryCancelJoinCustomServerRoom();// 0x54b404f39041
	void StaticSetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x54b304f39041
	void StaticSetAkState(FName StateGroup, FName State);// 0x54b204f39041
	void StaticSetAkBusConfig(FString BusName, enum ChannelConfiguration);// 0x54b104f39041
	void StaticPostAkEventByNameGlobal(FString InEventName);// 0x54b004f39041
	int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString InEventName, LatentActionInfo LatentInfo);// 0x54af04f39041
	int StaticPostAkEventByName(FString InEventName);// 0x54ae04f39041
	void SolarSetVSyncEnabled(bool bEnable);// 0x54ad04f39041
	void SolarSetSSRQuality(byte InQuality);// 0x54ac04f39041
	void SolarSetSSGIQuality(byte InQuality);// 0x54ab04f39041
	void SolarSetSSGIEnabled(bool bEnable);// 0x54aa04f39041
	void SolarSetSSAOIntensity(float InIntensity);// 0x54a904f39041
	void SolarSetShadowQuality(int InQuality);// 0x54a804f39041
	void SolarSetShadowFilterMethod(byte InMethod);// 0x54a704f39041
	void SolarSetShadowDistanceScale(float InScale);// 0x54a604f39041
	void SolarSetScreenPercentage(byte InPercentage);// 0x54a504f39041
	void SolarSetResolution(int InWidth, int InHeight);// 0x54a404f39041
	void SolarSetMSAAEnabled(bool bEnable);// 0x54a304f39041
	void SolarSetMotionBlurQuality(byte InQuality);// 0x54a204f39041
	void SolarSetMobileAmbientOcclusionQuality(byte InLevel);// 0x54a104f39041
	void SolarSetMaxCSMResolution(int InResolution);// 0x54a004f39041
	void SolarSetLightShaftEnabled(bool bEnable);// 0x549f04f39041
	void SolarSetGraphicsQuality(enum InLevel);// 0x549e04f39041
	void SolarSetFrameRate(enum FrameRateLevel);// 0x549d04f39041
	void SolarSetFeatureLevel(byte FeatureLevel);// 0x549c04f39041
	void SolarSetColorGrading(enum InTheme);// 0x549b04f39041
	void SolarSetColorGain(float InGainScale);// 0x549a04f39041
	void SolarSetAntiAliasingMethodPC(byte InMethod);// 0x549904f39041
	void SolarSetAnisotropy(byte InAnisotropy);// 0x549804f39041
	void SolarSetAmbientOcclusionRadiusScale(float InScale);// 0x549704f39041
	void SolarSetAmbientOcclusionLevels(byte InLevel);// 0x549604f39041
	void SolarSelectMonitor(byte MonitorIndex);// 0x549504f39041
	void SolarRefreshContentScaleFactorLevel();// 0x549404f39041
	bool SolarGetTextureStreamingEnable();// 0x549304f39041
	byte SolarGetMonitorNum();// 0x549204f39041
	void SolarEnableTextureStreaming(bool bEnable);// 0x549104f39041
	void SolarEnableDynamicShadow(bool bEnable);// 0x549004f39041
	IntPoint SolarCurrMonitorResoluion(byte MonitorIndex);// 0x548f04f39041
	int ShouldEnterLobby();// 0x548e04f39041
	void SetSwitch(SolarAkGameObject* SolarAkGameObject, FString SwitchGroup, FString SwitchState);// 0x548d04f39041
	void SetSkeletalMeshMatFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMatResPath, int ElementIndex);// 0x548c04f39041
	void SetSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMatResPath, int ElementIndex);// 0x548b04f39041
	void SetSkeletalMeshFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMeshResPath);// 0x548a04f39041
	void SetSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMeshResPath);// 0x548904f39041
	void SetSkeletalAnimBPFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewAnimBPResPath);// 0x548804f39041
	void SetSkeletalAnimBP(SkeletalMeshComponent* SkeletalMeshComponent, FString NewAnimBPResPath);// 0x548704f39041
	void SetRenderBatch(int Mode);// 0x548604f39041
	void SetPostProcessSettingsPC();// 0x548504f39041
	void SetPlayerSettlementReport(out const SolarGameModeInfo GameInfo);// 0x548404f39041
	void SetPlayerNameColorByVIPState(TextBlock* TextWidget, byte VipType);// 0x548304f39041
	void SetPatchBuildVersion(FString Version);// 0x548204f39041
	void SetEnableSoftwareCursorWidgets(const bool bIsEnabled);// 0x548104f39041
	void SetCurThirdPartyInfo(FString InCurThirdPartyInfo);// 0x548004f39041
	void SetChangeListNumber(FString ChangeListNum);// 0x547f04f39041
	void SetCanChangeInputType(PlayerController* InPlayerController, const bool bCanChange);// 0x547e04f39041
	void SetActorYawByDeltaRotatedImpl(Actor* InActor, float InDeltaYaw, bool bCheckCharaCanBeRotated);// 0x547d04f39041
	void SetActorYawByDelta(Actor* InActor, float InDeltaYaw);// 0x547c04f39041
	void ResumeBatching();// 0x547b04f39041
	Object* ResolveSoftObjectPath(out const SoftObjectPath ObjectPath);// 0x547a04f39041
	void ResetIOSgestureRecognizers();// 0x547904f39041
	void ReloadVoiceBanks();// 0x547804f39041
	FString ReadFileContent(FString FilePath);// 0x547704f39041
	int PostAkEventByName(SolarAkGameObject* SolarAkGameObject, FString InEventName);// 0x547604f39041
	void PlayVoiceLocaly(int CharacterId, int SkinId, enum Type);// 0x547504f39041
	void PlayMusicByName(const Object* WorldContextObject, FString InEventName);// 0x547404f39041
	void OnBroadcastModeChanged(const bool bOpen);// 0x547304f39041
	bool MoveFile(FString DestFilePath, FString SrcFilePath);// 0x547204f39041
	Object* LoadObject_WithOuter(Object* Outer, FString ObjectName);// 0x547104f39041
	byte[] LoadFileToArray(FString FilePath);// 0x547004f39041
	void LoadCharacterOwnedBanks(Object* WorldContextObject, int CharacterId, byte Mode);// 0x546f04f39041
	void LoadAllCharacterOwnedBanks(Object* WorldContextObject, byte Mode);// 0x546e04f39041
	bool IsWorldTearingDown();// 0x546d04f39041
	bool IsLocalBuild();// 0x546c04f39041
	bool IsInputTypeGamepad(PlayerController* InPlayerController);// 0x546b04f39041
	bool IsBattlePassInfoUpdated(SolarPlayerState* InPlayerState);// 0x546a04f39041
	bool HasReviveItemManager(Object* InWorldContext);// 0x546904f39041
	FString HashMd5(FString InputText);// 0x546804f39041
	int64 GetUtcNowTimestamp();// 0x546704f39041
	FString GetTaskDesc(int TaskID);// 0x546604f39041
	FString GetSourceCommitHash();// 0x546504f39041
	FString GetSourceBuildVersion();// 0x546404f39041
	SolarGameState* GetSolarGameState();// 0x546304f39041
	FString GetShortName(FString LongName);// 0x546204f39041
	FString[] GetServersUrlList();// 0x546104f39041
	FString GetServerEnvTag();// 0x546004f39041
	Vector2D GetScreenSizeXY();// 0x545f04f39041
	FString GetPatchBuildVersion();// 0x545e04f39041
	int GetMonsterDropItemOutcomeID(int MonsterAICharID, int StrengthGrade);// 0x545d04f39041
	int GetMonsterDeathBoxID(int MonsterAICharID);// 0x545c04f39041
	FString GetMainBuildVersion();// 0x545b04f39041
	SolarReplayPlayerController* GetLocalSolarReplayPlayerController();// 0x545a04f39041
	SolarPlayerState* GetLocalSolarPlayerState();// 0x545904f39041
	SolarPlayerController* GetLocalSolarPlayerController();// 0x545804f39041
	PlayerController* GetLocalPlayerController();// 0x545704f39041
	Key GetLeftMouseKeyDown();// 0x545604f39041
	void GetKeyMappingInfoByRowName(FString RowName, out KeyMappingRowInfo OutClassInfo);// 0x545504f39041
	FString GetHostByDomainName(FString DomainName, bool bAppendPort);// 0x545404f39041
	FString GetGameModeParam(int GameModeId, FString Key);// 0x545304f39041
	int GetFileSize(FString FilePath);// 0x545204f39041
	FString GetExtBackdoorUrl();// 0x545104f39041
	EmojiBubbleSubsystem* GetEmojiBubbleSubsystem(SolarGameInstanceBase* GI);// 0x545004f39041
	bool GetCurrentInputType(PlayerController* InPlayerController, out enum OutInputType);// 0x544f04f39041
	CommonInputSubsystem* GetCommonInputSubsystem(PlayerController* PlayerController);// 0x544e04f39041
	FString GetClipboardPasteText();// 0x544d04f39041
	FString GetChangeListNumber();// 0x544c04f39041
	FString GetBuildVariation();// 0x544b04f39041
	FString GetBuildMode();// 0x544a04f39041
	bool GetBroadcastState();// 0x544904f39041
	FString GetBroadcastPlayerName(FString SolarPlayerID);// 0x544804f39041
	int GetBroadcastPlayerId(int PlayerId);// 0x544704f39041
	FString GetBroadcastHeroName(FString SolarPlayerID);// 0x544604f39041
	Vector GetBoneLocationByName(SkeletalMeshComponent* SkeletalMeshComponent, FName BoneName, byte Space);// 0x544504f39041
	FString GetBackdoorUrl();// 0x544404f39041
	FString GetAndroidPkgName();// 0x544304f39041
	FString[] GetAllLoadedPackagesPath();// 0x544204f39041
	void GetAllKeyMappingInfoFromTable(out KeyMappingRowInfo[] OutKeyMappingInfo);// 0x544104f39041
	FString GetActualBuildVersion();// 0x544004f39041
	FString GetAbsolutePathForWrite(FString FilePath);// 0x543f04f39041
	FString GetAbsolutePathForRead(FString FilePath);// 0x543e04f39041
	Color FromHex(FString HexString);// 0x543d04f39041
	FString[] FindFilesRecursive(FString Directory, FString Filename);// 0x543c04f39041
	FString[] FindFiles(FString Directory, FString FileExtension);// 0x543b04f39041
	void EndOfPlayInEditor(Object* InWorldContext, FString EndReason, bool bPopMsgBox);// 0x543a04f39041
	void DoLuaDebug(out const FString[] cmdArray);// 0x543904f39041
	bool DirectoryExist(FString TargetDirectory);// 0x543804f39041
	bool DeleteFile(FString FilePath);// 0x543704f39041
	bool DeleteDirectoryRecursively(FString Path);// 0x543604f39041
	bool DeleteDirectory(FString Path);// 0x543504f39041
	FString DecodeFileRawData(out const byte[] InDonwloadRawData, const bool bNeedDecode);// 0x543404f39041
	FString DecodeFile(FString InFilePath);// 0x543304f39041
	LevelStreamingDynamic* CreateStreamInstance(World* World, FString PackageName);// 0x543204f39041
	Actor* CreateEmptySkeletalMeshActor();// 0x543104f39041
	MaterialInstanceDynamic* CreateDynamicMaterial(CameraActor* CameraActor, FString TemplateMatResPath, const int RTSizeX, const int RTSizeY, byte RenderTargetFormat);// 0x543004f39041
	bool CreateDirectoryTree(FString Path);// 0x542f04f39041
	bool CreateDirectory(FString Path);// 0x542e04f39041
	bool CopyFile(FString DestFilePath, FString SrcFilePath);// 0x542d04f39041
	void ConvertKeyMappingName(out const Key Key, out FString OutDisplayName);// 0x542c04f39041
	void CloseVirtualKeyboard();// 0x542b04f39041
	void ClipboardCopyText(FString Content);// 0x542a04f39041
	void ClearSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent);// 0x542904f39041
	bool CheckIsNeedDownLoad(int ChunkID);// 0x542804f39041
	void ApplyVehicleSkinPreview(Object* PreviewVehicleObj, int SkinId, int PageType, Vector DefaultLoc);// 0x542704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerReport
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	uint64 UserId;//[Offset: 0x10, Size: 0x8]
	FString NickName;//[Offset: 0x18, Size: 0x10]
	int CharacterId;//[Offset: 0x28, Size: 0x4]
	int SkinId;//[Offset: 0x2c, Size: 0x4]
	int PlayerRank;//[Offset: 0x30, Size: 0x4]
	int Gender;//[Offset: 0x34, Size: 0x4]
	int AvatarID;//[Offset: 0x38, Size: 0x4]
	FString AvatarUrl;//[Offset: 0x40, Size: 0x10]
	int AccountFlag;//[Offset: 0x50, Size: 0x4]
	int TeamRank;//[Offset: 0x54, Size: 0x4]
	int TeamID;//[Offset: 0x58, Size: 0x4]
	int PosInTeam;//[Offset: 0x5c, Size: 0x4]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int KillNum;//[Offset: 0x64, Size: 0x4]
	int KillNumToRealPlayer;//[Offset: 0x68, Size: 0x4]
	int[] VehicleKillNum_ID;//[Offset: 0x70, Size: 0x10]
	int[] VehicleKillNum_Value;//[Offset: 0x80, Size: 0x10]
	int KillTeammate;//[Offset: 0x90, Size: 0x4]
	int KillInAirNum;//[Offset: 0x94, Size: 0x4]
	int KillDownInAirNum;//[Offset: 0x98, Size: 0x4]
	int WeaponSkillKillNum;//[Offset: 0x9c, Size: 0x4]
	int P_KillStreak;//[Offset: 0xa0, Size: 0x4]
	int[] KillStreakHistory;//[Offset: 0xa8, Size: 0x10]
	int RevengeNum;//[Offset: 0xb8, Size: 0x4]
	int DeathNum;//[Offset: 0xbc, Size: 0x4]
	int KillDownNum;//[Offset: 0xc0, Size: 0x4]
	int KillDownTeammate;//[Offset: 0xc4, Size: 0x4]
	float AccurateDamage;//[Offset: 0xc8, Size: 0x4]
	int AccurateDameageTimes;//[Offset: 0xcc, Size: 0x4]
	int AccurateKillTimes;//[Offset: 0xd0, Size: 0x4]
	int AccurateKillDownTimes;//[Offset: 0xd4, Size: 0x4]
	float CauseDamage;//[Offset: 0xd8, Size: 0x4]
	float CauseDamageToRealPlayer;//[Offset: 0xdc, Size: 0x4]
	float ReceivedDamage;//[Offset: 0xe0, Size: 0x4]
	int AssistNum;//[Offset: 0xe4, Size: 0x4]
	float CollectEnergy;//[Offset: 0xe8, Size: 0x4]
	int BuyESElectricNum;//[Offset: 0xec, Size: 0x4]
	int ResurrectionCapsule;//[Offset: 0xf0, Size: 0x4]
	int TeamFriendRevive;//[Offset: 0xf4, Size: 0x4]
	float ReceivedHeal;//[Offset: 0xf8, Size: 0x4]
	float HealSelf;//[Offset: 0xfc, Size: 0x4]
	float TeammateHeal;//[Offset: 0x100, Size: 0x4]
	int OpenAirBoxNum;//[Offset: 0x104, Size: 0x4]
	float LifeTime;//[Offset: 0x108, Size: 0x4]
	int SaveCount;//[Offset: 0x10c, Size: 0x4]
	int FlyCount;//[Offset: 0x110, Size: 0x4]
	int VehicleTime;//[Offset: 0x114, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0x118, Size: 0x4]
	int TotalCharacterExp;//[Offset: 0x11c, Size: 0x4]
	bool bCharExpFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	int[] CharacterExpReason;//[Offset: 0x128, Size: 0x10]
	int CharacterExp;//[Offset: 0x138, Size: 0x4]
	int AccountExp;//[Offset: 0x13c, Size: 0x4]
	int TotalAccountExp;//[Offset: 0x140, Size: 0x4]
	int AccountLevel;//[Offset: 0x144, Size: 0x4]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	int RankID;//[Offset: 0x14c, Size: 0x4]
	int RankBeforeScore;//[Offset: 0x150, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x154, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x158, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x15c, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x160, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x164, Size: 0x4]
	int RankAfterScore;//[Offset: 0x168, Size: 0x4]
	int RankLegend;//[Offset: 0x16c, Size: 0x4]
	byte RankProtectType;//[Offset: 0x170, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	int WinninScoreID;//[Offset: 0x174, Size: 0x4]
	int Zomborg;//[Offset: 0x178, Size: 0x4]
	float MvpScore;//[Offset: 0x17c, Size: 0x4]
	float KDA;//[Offset: 0x180, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 0x1]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x186, Size: 0x1]
	int[] SettlementItems;//[Offset: 0x188, Size: 0x10]
	FString[] StringExtraRewards;//[Offset: 0x198, Size: 0x10]
	int[] SendGiftGold;//[Offset: 0x1a8, Size: 0x10]
	int[] SendGiftDiamond;//[Offset: 0x1b8, Size: 0x10]
	FString[] SendGiftPlayerName;//[Offset: 0x1c8, Size: 0x10]
	FString[] SendGiftPlayerID;//[Offset: 0x1d8, Size: 0x10]
	int[] WeaponExpIds;//[Offset: 0x1e8, Size: 0x10]
	int[] WeaponLevel;//[Offset: 0x1f8, Size: 0x10]
	int[] CurWeaponExp;//[Offset: 0x208, Size: 0x10]
	int[] WeaponExps;//[Offset: 0x218, Size: 0x10]
	int[] WeaponKillNum_ID;//[Offset: 0x228, Size: 0x10]
	float[] WeaponKillNum_Value;//[Offset: 0x238, Size: 0x10]
	int[] WeaponDamage_ID;//[Offset: 0x248, Size: 0x10]
	float[] WeaponDamage_Value;//[Offset: 0x258, Size: 0x10]
	int[] VehicleDamage_ID;//[Offset: 0x268, Size: 0x10]
	float[] VehicleDamage_Value;//[Offset: 0x278, Size: 0x10]
	int[] VehicleDistance_ID;//[Offset: 0x288, Size: 0x10]
	int[] VehicleDistance_Value;//[Offset: 0x298, Size: 0x10]
	int GainCombatScore;//[Offset: 0x2a8, Size: 0x4]
	int GameModeSubID;//[Offset: 0x2ac, Size: 0x4]
	FString KillerPlayerId;//[Offset: 0x2b0, Size: 0x10]
	uint64 KillerUserId;//[Offset: 0x2c0, Size: 0x8]
	FString KillerNickName;//[Offset: 0x2c8, Size: 0x10]
	FString KillerOS;//[Offset: 0x2d8, Size: 0x10]
	FString OS;//[Offset: 0x2e8, Size: 0x10]
	int[] CharacterKillNumIDs;//[Offset: 0x2f8, Size: 0x10]
	int[] CharacterKillNumValues;//[Offset: 0x308, Size: 0x10]
	int WarmType;//[Offset: 0x318, Size: 0x4]
	int[] AchievementIDs;//[Offset: 0x320, Size: 0x10]
	int[] AchievementValues;//[Offset: 0x330, Size: 0x10]
	int LikeValue;//[Offset: 0x340, Size: 0x4]
	int[] StrategyConditionIDs;//[Offset: 0x348, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x358, Size: 0x4]
	int LastUseVehicleID;//[Offset: 0x35c, Size: 0x4]
	FString[] SavedTeammateIDArr;//[Offset: 0x360, Size: 0x10]
	int[] SavedTeammateBonusArr;//[Offset: 0x370, Size: 0x10]
	byte[] SettlementRewards;//[Offset: 0x380, Size: 0x10]
	byte[] CrateRewardData;//[Offset: 0x390, Size: 0x10]
	byte[] CollectionItems;//[Offset: 0x3a0, Size: 0x10]
	FString ClanId;//[Offset: 0x3b0, Size: 0x10]
	int KnockoutPoints;//[Offset: 0x3c0, Size: 0x4]
	bool bIsKnockoutPointsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1]
	int BattlePassAddExp;//[Offset: 0x3c8, Size: 0x4]
	int BattlePassExp;//[Offset: 0x3cc, Size: 0x4]
	int BattlePassID;//[Offset: 0x3d0, Size: 0x4]
	int[] BattlePassTaskWeek;//[Offset: 0x3d8, Size: 0x10]
	int[] BattlePassTaskID;//[Offset: 0x3e8, Size: 0x10]
	int[] BattlePassTaskAdd;//[Offset: 0x3f8, Size: 0x10]
	int[] BattlePassTaskVal;//[Offset: 0x408, Size: 0x10]
	int[] UsedCharacterIDs;//[Offset: 0x418, Size: 0x10]
	int CardPose;//[Offset: 0x428, Size: 0x4]
	int Cardbackground;//[Offset: 0x42c, Size: 0x4]
	int SameClanCnt;//[Offset: 0x430, Size: 0x4]
	int CombatScore;//[Offset: 0x434, Size: 0x4]
	bool IsCheater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	byte[] SettlePunishTypes;//[Offset: 0x440, Size: 0x10]
	int MedicineUseCount;//[Offset: 0x450, Size: 0x4]
	int DriveHoverCarInWaterDistance;//[Offset: 0x454, Size: 0x4]
	int SwimDistance;//[Offset: 0x458, Size: 0x4]
	int DanceCount;//[Offset: 0x45c, Size: 0x4]
	int PosionWalkDistance;//[Offset: 0x460, Size: 0x4]
	int ShieldExpGainCount;//[Offset: 0x464, Size: 0x4]
	int UpgradeShieldCount;//[Offset: 0x468, Size: 0x4]
	int UpgradeRedShieldCount;//[Offset: 0x46c, Size: 0x4]
	int JumpBoardUseCount;//[Offset: 0x470, Size: 0x4]
	int TerminaterCount;//[Offset: 0x474, Size: 0x4]
	int CarSkillCount;//[Offset: 0x478, Size: 0x4]
	int UltimateSkillUseCount;//[Offset: 0x47c, Size: 0x4]
	int TacticalSkillUseCount;//[Offset: 0x480, Size: 0x4]
	FString[] ReCombatLimitPlayer;//[Offset: 0x488, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameModeInfo
	int GameModeId;//[Offset: 0x0, Size: 0x4]
	FString MapName;//[Offset: 0x8, Size: 0x10]
	int NumMode;//[Offset: 0x18, Size: 0x4]
	int PlayerCount;//[Offset: 0x1c, Size: 0x4]
	int TeamCount;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameState.GameState.GameStateBase.Info.Actor.Object
	SolarCharacter* LatestKillerCharacter;//[Offset: 0x2d0, Size: 0x8]
	SolarCharacter* LatestDeathCharacter;//[Offset: 0x2d8, Size: 0x8]
	SolarPlayerState*[] SolarPlayerStateArray;//[Offset: 0x300, Size: 0x10]
	SolarPlayerState*[] RealPlayerStateArray;//[Offset: 0x310, Size: 0x10]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	int[] MapVehicleSpawnTypes;//[Offset: 0x328, Size: 0x10]
	PrePooledBundle[] PrePooledBundles;//[Offset: 0x348, Size: 0x10]
	int RemainingPlayersCount;//[Offset: 0x358, Size: 0x4]
	int AlivePlayersCount;//[Offset: 0x35c, Size: 0x4]
	int RemainingTeamCount;//[Offset: 0x360, Size: 0x4]
	int PlayersCount;//[Offset: 0x364, Size: 0x4]
	byte TeamCount;//[Offset: 0x368, Size: 0x1]
	int TotalBoardingNum;//[Offset: 0x36c, Size: 0x4]
	int CapsulePlayerNum;//[Offset: 0x370, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x374, Size: 0x4]
	<class Object> LimitMaxReplicatedNumClasses;//[Offset: 0x378, Size: 0x50]
	float StartTime;//[Offset: 0x3c8, Size: 0x4]
	int NumPlayers;//[Offset: 0x3cc, Size: 0x4]
	SolarPlayerState*[] OBPlayerList;//[Offset: 0x3d0, Size: 0x10]
	int GameWarmID;//[Offset: 0x3e0, Size: 0x4]
	int TeammateNumMode;//[Offset: 0x3e4, Size: 0x4]
	GameStartConditionList GameStartConditions;//[Offset: 0x3e8, Size: 0x58]
	SolarGameplayConfigComponent* GameplayConfigComponent;//[Offset: 0x440, Size: 0x8]
	SolarTeamInfo*[] Teams;//[Offset: 0x448, Size: 0x10]
	byte NumReplicatedTeams;//[Offset: 0x458, Size: 0x1]
	SolarPlayerActivityHeatComponent* SolarPlayerActivityHeatComponent;//[Offset: 0x4a8, Size: 0x8]
	byte Countdown;//[Offset: 0x4b0, Size: 0x1]
	int EndMatchCountdown;//[Offset: 0x4b4, Size: 0x4]
	void SetTeamLastVehicleLocation(byte InTeamId, out const Vector InVehiclePosition);// 0x1bfb04f39041
	void SetSettlementStageConfigID(const int InConfigID);// 0x1bfa04f39041
	void SetCustomConfigValue(enum InType, float InValue);// 0x1bf804f39041
	void ServerUpdateMapVehicleSpawnTypes(out const int[] InSpawnTargetVehicleTypes);// 0x1bf704f39041
	void PlayTeamVictoryVoice();// 0x1bf604f39041
	void OnSafeAreaIndexChanged(int NewIndex);// 0x1bf504f39041
	void OnRep_SettlementStageConfigID();// 0x1bf404f39041
	void OnRep_RemainingTeamCountChange();// 0x1bf304f39041
	void OnRep_PlayersCountChange();// 0x1bf204f39041
	void OnRep_OnPlayersCountChange();// 0x1bf104f39041
	void OnRep_OnAlivePlayersCountChange();// 0x1bf004f39041
	void OnRep_OBPlayerList();// 0x1bef04f39041
	void OnRep_NumReplicatedTeams();// 0x1bee04f39041
	void OnRep_NumPlayers(int PreviousNumPlayers);// 0x1bed04f39041
	void OnRep_EndMatchCountdown();// 0x1bec04f39041
	void OnRep_Countdown();// 0x1beb04f39041
	void OnRep_CapsulePlayerNum();// 0x1bea04f39041
	void OnRecordingConnectionChanged();// 0x1be904f39041
	void OnPlayerStateEndPlay(Actor* Actor, byte EndPlayReason);// 0x1be804f39041
	void OnOBPlayerListChange();// 0x1be704f39041
	void OnLocalSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x1be604f39041
	void NotifyCheatedPlayer(SolarPlayerState* CheatedPlayerState, out const FText OutReason);// 0x1be504f39041
	void NotifyBombingEnd(int BombId);// 0x1be404f39041
	void NotifyBombingBegin(int BombId, const Vector Location, float Radius);// 0x1be304f39041
	void NotifyAbnormalPlayer(SolarPlayerState* AbnormalPlayerState, out const FText OutReason);// 0x1be204f39041
	void NetMulticastVictoryAction(FString WinTeamName, SolarCharacter* LastKiller, SolarCharacter* LastDeath);// 0x1be104f39041
	void NetMulticastNotifyDebugMessage(const int DebugIndex, const Vector SpawnerLocation, FString DebugString);// 0x1be004f39041
	void NetMulticastNotifyCheatedPlayer(SolarPlayerState* CheatedPlayerState, const FText BanReason);// 0x1bdf04f39041
	void K2_SetCanShowBattlePrompt(bool NewValue);// 0x1bde04f39041
	bool IsSupportWeaponUpgrade();// 0x1bdd04f39041
	bool IsSupportCharacterTacticalAbility();// 0x1bdc04f39041
	bool IsSupportCharacterSuperAbility();// 0x1bdb04f39041
	bool IsSupportCharacterRole();// 0x1bda04f39041
	bool IsSupportCharacterInGameLeveling();// 0x1bd904f39041
	float GetWorldStartTimeSeconds();// 0x1bd804f39041
	int GetWatchingPlayerCount(bool IgnoreOffline);// 0x1bd704f39041
	void GetTeams(out SolarTeamInfo*[] OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled);// 0x1bd604f39041
	SolarPlayerState* GetTeamPlayerState(const byte InTeamId, const byte InPosInTeam);// 0x1bd504f39041
	int GetTeamNumCount();// 0x1bd404f39041
	byte GetTeammateNum(const byte InTeamId);// 0x1bd304f39041
	SolarTeamInfo* GetTeamByName(FString InTeamName);// 0x1bd204f39041
	SolarTeamInfo* GetTeam(byte InTeamId);// 0x1bd104f39041
	enum GetTacticalSkillStateOperationOnInit();// 0x1bd004f39041
	enum GetSuperSkillStateOperationOnInit();// 0x1bce04f39041
	SolarPlayerState* GetSpecTargetOrLocalPlayerState();// 0x1bcd04f39041
	SolarSafeArea* GetSolarSafeArea();// 0x1bcc04f39041
	int GetSettlementStageConfigID();// 0x1bcb04f39041
	int GetRemainingTeamCount();// 0x1bca04f39041
	int GetRemainingPlayersCount();// 0x1bc904f39041
	void GetPlayerTeams(out SolarTeamInfo*[] OutTeams, bool FilterAlreadySettled);// 0x1bc804f39041
	SolarPlayerState* GetPlayerStateByPlayerId(FString InPlayerID);// 0x1bc704f39041
	SolarPlayerState* GetPlayerStateByNickName(FString InNickName);// 0x1bc604f39041
	int GetPlayersCount();// 0x1bc504f39041
	SolarCharacter* GetPlayerByPlayerId(FString InPlayerID);// 0x1bc404f39041
	void GetOnlyPlayerTeams(out SolarTeamInfo*[] OutTeams, bool FilterAlreadySettled);// 0x1bc304f39041
	void GetOnlyBotTeams(out SolarTeamInfo*[] OutTeams, bool FilterAlreadySettled);// 0x1bc204f39041
	SolarPlayerState* GetOfflinePlayerState(FString OfflinePlayerId);// 0x1bc104f39041
	bool GetOBPlayerList(out SolarPlayerState*[] OutPlayerList);// 0x1bc004f39041
	SolarPlayerState* GetLocalSolarPlayerState();// 0x1bbf04f39041
	int GetEndMatchCountdown();// 0x1bbe04f39041
	bool GetCanShowBattlePrompt();// 0x1bbd04f39041
	float GetBattleStartTimeSeconds();// 0x1bbc04f39041
	void GetAllCharactersExceptTeammate(out SolarCharacter*[] CharacterArray);// 0x1bbb04f39041
	int GetAliveSolarPlayersCount(bool IgnoreOffline);// 0x1bba04f39041
	int GetAlivePlayersCount();// 0x1bb904f39041
	byte GetAlivePlayerNumInTeamExceptDying(const byte InTeamId, bool bExceptCheater);// 0x1bb804f39041
	void DoVictoryActionOnServer(FString InWinTeamName);// 0x1bb704f39041
	void DoSlomoOnLocalFromConfig();// 0x1bb604f39041
	void DoSlomoOnLocal(float TimeDilation, float TimeDuration, float DelayTime);// 0x1bb504f39041
	void DelayPlayVictoryMusic();// 0x1bb404f39041
	void CelebrateBattleEnd(Vector Location);// 0x1bb304f39041
	byte CalculateTeamNum();// 0x1bb204f39041
	void CacheSafeArea(SolarSafeArea* SafeArea);// 0x1bb104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x294, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x29c, Size: 0x8]
	int ElapsedTime;//[Offset: 0x2a4, Size: 0x4]
	void OnRep_MatchState();// 0x1bb004f39041
	void OnRep_ElapsedTime();// 0x1baf04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PrePooledBundle
	FName ClassPath;//[Offset: 0x0, Size: 0x8]
	int Number;//[Offset: 0x8, Size: 0x4]
	bool bNeedOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bNeedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameStartConditionList
	GameplayTagContainer ServerStartConditionList;//[Offset: 0x8, Size: 0x20]
	GameplayTagContainer ClientStartConditionList;//[Offset: 0x28, Size: 0x20]
	GameStateBase* Owner;//[Offset: 0x48, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameplayConfigComponent.ActorComponent.Object
	bool EnableTestGameplayConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	class GameplayConfigBase* CGMConfig;//[Offset: 0xb8, Size: 0x8]
	class GameplayConfigBase* TestCGMConfig;//[Offset: 0xc0, Size: 0x8]
	GameplayConfigBase* InstGameplayConfig;//[Offset: 0xc8, Size: 0x8]
	GameplayConfigBase* InstTestGameplayConfig;//[Offset: 0xd0, Size: 0x8]
	GameplayConfigBase* GetConfigs();// 0x45db04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayConfigBase.DataAsset.Object
	GameModeGlobalSetting* GameModeSettingTemplate;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameModeGlobalSetting.Object
	delegate OnGlobalSettingChanged;//[Offset: 0x28, Size: 0x10]
	bool bCanVJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bCanHJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bOverrideVJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float OverridenVJetCD;//[Offset: 0x3c, Size: 0x4]
	bool bOverrideHJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float OverridenHJetCD;//[Offset: 0x44, Size: 0x4]
	bool bEnableJetCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	enum JetAltitudeLimitationMode;//[Offset: 0x49, Size: 0x1]
	bool bEnableEnergyCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bEnableTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bEnableMinHPLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	float MinHPToLock;//[Offset: 0x50, Size: 0x4]
	bool bEnableSkydiveFollowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bEnableBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bShowVehicleOnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	int KillStreakEndNoticeNumber;//[Offset: 0x58, Size: 0x4]
	int KillLeaderMinKillNumber;//[Offset: 0x5c, Size: 0x4]
	bool bShowRevengeNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bShowKillStreakEndNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	bool bShowTotalKillNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	bool bShowKillDownNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]
	bool bShowKillLeaderNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bShowKillLeaderShutDownNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool bShowClearTeamNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	enum WeaponInfiniteAmmoMode;//[Offset: 0x67, Size: 0x1]
	bool bEnableWeaponPartEffectTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float[] WeaponLevelDamageFactorArray;//[Offset: 0x70, Size: 0x10]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool bCanRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	bool bCanLoginBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 0x1]
	bool bEnableBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bEnableBattlePrompt_BeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bEnableOpponentPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	bool bKillPlayerWhenOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1]
	int ConfigGameModeId;//[Offset: 0x88, Size: 0x4]
	bool bEnableEnemyNameMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	float EnableEnemyNameMarkDistance;//[Offset: 0x90, Size: 0x4]
	float EnemyNameMarkDuration;//[Offset: 0x94, Size: 0x4]
	int SummonedAirDropMaxSum;//[Offset: 0x98, Size: 0x4]
	float SummonedAirDropLifeTime;//[Offset: 0x9c, Size: 0x4]
	float SummonedAirDropDestroyEffectTime;//[Offset: 0xa0, Size: 0x4]
	enum[] EnableOpponentPerspectiveInGameStates;//[Offset: 0xa8, Size: 0x10]
	void SetWeaponInfiniteAmmoMode(enum NewValue);// 0x47d604f39041
	void SetTeamDamageEnabled(bool bNewValue);// 0x47d504f39041
	void SetSkydiveFollowMovementEnabled(bool bNewValue);// 0x47d404f39041
	void SetShowVehicleOnMap(bool bNewValue);// 0x47d304f39041
	void SetShowTotalKillNotice(bool InShowTotalKillNotice);// 0x47d204f39041
	void SetShowShowClearTeamNotice(bool InShowClearTeamNotice);// 0x47d104f39041
	void SetShowRevengeNotice(bool InShowRevengeNotice);// 0x47d004f39041
	void SetShowKillStreakEndNotice(bool InShowKillStreakEndNotice);// 0x47cf04f39041
	void SetShowKillLeaderShutDownNotice(bool InShowKillLeaderShutDownNotice);// 0x47ce04f39041
	void SetShowKillLeaderNotice(bool InShowKillLeaderNotice);// 0x47cd04f39041
	void SetShowKillDownNotice(bool InShowKillDownNotice);// 0x47cc04f39041
	void SetMinHPToLock(float NewValue);// 0x47cb04f39041
	void SetMinHPLockEnabled(bool bNewValue);// 0x47ca04f39041
	void SetKillStreakEndNoticeNumber(int InKillStreakEndNoticeNumber);// 0x47c904f39041
	void SetKillPlayerWhenOut(bool bNewValue);// 0x47c804f39041
	void SetKillLeaderMinKillNumber(int InKillLeaderMinKillNumber);// 0x47c704f39041
	void SetJetCostEnabled(bool bNewValue);// 0x47c604f39041
	void SetJetAltitudeLimitationMode(enum NewValue);// 0x47c504f39041
	void SetGameCanRebirth(bool bNewValue);// 0x47c404f39041
	void SetEnergyCostEnabled(bool bNewValue);// 0x47c304f39041
	void SetDamageEnabled(bool bNewValue);// 0x47c204f39041
	void SetCanVJetInWater(bool bNewValue);// 0x47c104f39041
	void SetCanLoginBattle(bool bNewValue);// 0x47c004f39041
	void SetCanHJetInWater(bool bNewValue);// 0x47bf04f39041
	void SetBigMapEnabled(bool bNewValue);// 0x47be04f39041
	void ReceiveSettingChanged();// 0x47bd04f39041
	bool IsVJetCDOverriden();// 0x47bc04f39041
	bool IsTeamDamageEnabled();// 0x47bb04f39041
	bool IsSkydiveFollowMovementEnabled();// 0x47ba04f39041
	bool IsShowVehicleOnMap();// 0x47b904f39041
	bool IsShowTotalKillNotice();// 0x47b804f39041
	bool IsShowRevengeNotice();// 0x47b704f39041
	bool IsShowKillStreakEndNotice();// 0x47b604f39041
	bool IsShowKillLeaderShutDownNotice();// 0x47b504f39041
	bool IsShowKillLeaderNotice();// 0x47b404f39041
	bool IsShowKillDownNotice();// 0x47b304f39041
	bool IsShowClearTeamNotice();// 0x47b204f39041
	bool IsOpponentPerspectiveEnabled();// 0x47b104f39041
	bool IsMinHPLockEnabled();// 0x47b004f39041
	bool IsKillPlayerWhenOut();// 0x47af04f39041
	bool IsJetCostEnabledEnabled();// 0x47ae04f39041
	bool IsHJetCDOverriden();// 0x47ad04f39041
	bool IsGameCanRebirth();// 0x47ac04f39041
	bool IsGameCanLoginBattle();// 0x47ab04f39041
	bool IsEnergyCostEnabled();// 0x47aa04f39041
	bool IsEnableWeaponPartEffectTip();// 0x47a904f39041
	bool IsDestroyWeaponOnDiscard();// 0x47a804f39041
	bool IsDestroyItemOnDiscard();// 0x47a704f39041
	bool IsDamageEnabled();// 0x47a604f39041
	bool IsBigMapEnabled();// 0x47a504f39041
	enum GetWeaponInfiniteAmmoMode();// 0x47a404f39041
	float GetOverridenVJetCD();// 0x47a304f39041
	float GetOverridenHJetCD();// 0x47a204f39041
	float GetMinHPToLock();// 0x47a104f39041
	int GetKillStreakEndNoticeNumber();// 0x47a004f39041
	int GetKillLeaderMinKillNumber();// 0x479f04f39041
	enum GetJetAltitudeLimitationMode();// 0x479e04f39041
	float GetDamageFactorByWeaponLevel(int InWeaponLevel);// 0x479d04f39041
	int GetConfigGameModeId();// 0x479c04f39041
	bool CanVJetInWater();// 0x479b04f39041
	bool CanHJetInWater();// 0x479a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerActivityHeatComponent.ActorComponent.Object
	float WeaponScore;//[Offset: 0xc0, Size: 0x4]
	float VehicleScore;//[Offset: 0xc4, Size: 0x4]
	float AbilityScore;//[Offset: 0xc8, Size: 0x4]
	CurveFloat* DistScoreCurve;//[Offset: 0xd0, Size: 0x8]
	float DefenderOrReaperScore;//[Offset: 0xd8, Size: 0x4]
	float FirstKillTimeBefore;//[Offset: 0xdc, Size: 0x4]
	float LastKillTimeLater;//[Offset: 0xe0, Size: 0x4]
	void ReceiveKillInfoNotify(SolarPlayerState* InKiller, SolarPlayerState* InVictim, out const SolarPointDamageEvent DamageEvent);// 0x55cd04f39041
	void ReceiveActivityHeatFragmentsFromReplay(FString PlayerId, out const ReplayActivityHeatFragment NewFragment);// 0x55cc04f39041
	void OnPlayerWin(FString SolarPlayerID);// 0x55cb04f39041
	void OnPlayerResurrectionParachute(FString SolarPlayerID);// 0x55ca04f39041
	void OnPlayerDeath(FString SolarPlayerID);// 0x55c904f39041
	void OnPlayerCruiseEnded(FString SolarPlayerID);// 0x55c804f39041
	ReplayActivityHeatFragment[] GetPlayerActivityHeatFragmentsById(FString SolarPlayerID);// 0x55c704f39041
	void FillInPlayerActivityHeatKillDetail(SolarPlayerState* InKiller, SolarPlayerState* InVictim, out const SolarPointDamageEvent DamageEvent, out PlayerActivityHeatKillDetail OutKillDetail);// 0x55c604f39041
	int AddPlayerActivityHeatRawData(FString SolarPlayerID, enum ActivityHeatType);// 0x55c504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerActivityHeatKillDetail
	float KillTime;//[Offset: 0x0, Size: 0x4]
	Vector VictimPosition;//[Offset: 0x4, Size: 0xc]
	FString KillerID;//[Offset: 0x10, Size: 0x10]
	FString VictimID;//[Offset: 0x20, Size: 0x10]
	bool IsAbilityKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool IsScopedKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool IsVehicleKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	bool IsAbilityActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int weaponid;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSafeArea.SCMMapElementBase.Actor.Object
	int CurrentIndex;//[Offset: 0x280, Size: 0x4]
	float TargetTime;//[Offset: 0x284, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x288, Size: 0x4]
	float DamageValue;//[Offset: 0x28c, Size: 0x4]
	Vector BeginLocation;//[Offset: 0x290, Size: 0xc]
	float BeginScale;//[Offset: 0x29c, Size: 0x4]
	enum AreaStatus;//[Offset: 0x2a0, Size: 0x1]
	bool IsLocalPlayerCameraInSafeArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	bool IsLocalViewFocusedCharacterInSafeArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1]
	bool bCanCausingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	float FirstDamageDelay;//[Offset: 0x30c, Size: 0x4]
	float DamageInterval;//[Offset: 0x310, Size: 0x4]
	FString LeaveSafeAreaSoundName;//[Offset: 0x318, Size: 0x10]
	FString EnterSafeAreaSoundName;//[Offset: 0x328, Size: 0x10]
	FString InPoisonPerSecSoundName;//[Offset: 0x338, Size: 0x10]
	float InPoisonSoundSecond;//[Offset: 0x348, Size: 0x4]
	int WarningNotificationIndex;//[Offset: 0x34c, Size: 0x4]
	<int,int> NoticeDataMap;//[Offset: 0x350, Size: 0x50]
	<int,FString> SoundEventNameDataMap;//[Offset: 0x3a0, Size: 0x50]
	<int,int> QuickVoiceDataMap;//[Offset: 0x3f0, Size: 0x50]
	int ShrinkEndNotificationIndex;//[Offset: 0x440, Size: 0x4]
	int ShrinkEndNoticeId;//[Offset: 0x444, Size: 0x4]
	FString ShrinkEndSoundEventName;//[Offset: 0x448, Size: 0x10]
	SolarPlayerController* LocalController;//[Offset: 0x458, Size: 0x8]
	void StartShrink();// 0x50a604f39041
	void ShowPoisonPerSecond();// 0x50a504f39041
	void ShowPoisonEffect(bool bShow);// 0x50a404f39041
	void ShowEffectInside(bool bInside);// 0x50a304f39041
	void Resume();// 0x50a204f39041
	void ReceiveShrinkEnd();// 0x50a104f39041
	void ReceiveActorLeaveSafeAreaCircle(Actor* Actor);// 0x50a004f39041
	void ReceiveActorEnterSafeAreaCircle(Actor* Actor);// 0x509f04f39041
	void Pause();// 0x509e04f39041
	void OnRep_CurrentIndexChange();// 0x509d04f39041
	bool IsPause();// 0x509c04f39041
	bool IsLocationInTargetSafeArea(out const Vector InLocation);// 0x509b04f39041
	bool IsLocationInSafeAreaDetailed(out const Vector InLocation, out bool OutInTargetSafeArea);// 0x509a04f39041
	bool IsLocationInSafeArea(out const Vector InLocation);// 0x509904f39041
	bool IsLocationInPoisonArea(out const Vector InLocation);// 0x509804f39041
	bool IsLocationInCurrentSafeArea(out const Vector InLocation);// 0x509704f39041
	bool IsActorInSafeArea(const Actor* InActor);// 0x509604f39041
	void GMStartShrinkArea();// 0x509504f39041
	float GetShrinkTargetTime();// 0x509404f39041
	enum GetSafeAreaStatus();// 0x509304f39041
	Vector GetNextAreaLocation();// 0x509204f39041
	int GetCurrentIndex();// 0x509104f39041
	float GetCurrentDamage();// 0x509004f39041
	Vector GetCurrentAreaBeginLocation();// 0x508f04f39041
	float GetBeginShrinkTime();// 0x508e04f39041
	enum GetActorInSafeAreaStatus(Actor* InActor);// 0x508d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMMapElementBase.Actor.Object
	bool bPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	FString Side;//[Offset: 0x230, Size: 0x10]
	FString Job;//[Offset: 0x240, Size: 0x10]
	FString ElementID;//[Offset: 0x250, Size: 0x10]
	enum Type;//[Offset: 0x260, Size: 0x1]
	enum State;//[Offset: 0x261, Size: 0x1]
	enum Visibility;//[Offset: 0x262, Size: 0x1]
	class SCMMapElementRPCComponent* MapElementRPCComponentClass;//[Offset: 0x268, Size: 0x8]
	FName ElementName;//[Offset: 0x270, Size: 0x8]
	byte bUseSceneActorOptimization;//[Offset: 0x278, Size: 0x1]
	enum SetElementVisibility(const enum NewType);// 0x4c1d04f39041
	enum SetElementState(const enum NewState);// 0x4c1c04f39041
	void OnRep_ElementVisibility();// 0x4c1b04f39041
	void OnRep_ElementState();// 0x4c1a04f39041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x4c1904f39041
	void OnElementStateChanged(const enum CurrentState);// 0x4c1804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMMapElementRPCComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarReplayPlayerController.SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	float WaitFirstTeamNumberInputTime;//[Offset: 0xe44, Size: 0x4]
	float WaitTeamNumberInputTime;//[Offset: 0xe48, Size: 0x4]
	SolarReplayCameraControlComp* SolarReplayCameraControlComp;//[Offset: 0xe50, Size: 0x8]
	SolarReplayHighlightComponent* SolarReplayHighlightComponent;//[Offset: 0xe58, Size: 0x8]
	SolarReplayAutoDirectorComponent* SolarReplayAutoDirectorComponent;//[Offset: 0xe60, Size: 0x8]
	delegate OnEmitBulletDelegate;//[Offset: 0xe68, Size: 0x10]
	<FString,float> HorizontalDistanceBetweenPlayerAndOBCamera;//[Offset: 0xe78, Size: 0x50]
	SolarReplayManager* ReplayManager;//[Offset: 0xec8, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xed0, Size: 0x8]
	<byte,MaterialInstanceDynamic*> TeamNumToPerspectiveMaterialMap;//[Offset: 0xef8, Size: 0x50]
	void UpdateDistanceBetweenOBCamAndPlayer();// 0x28a304f39041
	void StopSpectatePlayer();// 0x28a204f39041
	void StopPlayReplay();// 0x28a104f39041
	void SpectateVictim();// 0x28a004f39041
	void SpectatePlayerByPlayerID(FString SolarPlayerID);// 0x289f04f39041
	void SpectateAttacker();// 0x289e04f39041
	void SolarGM_ToggleProgressControlButton();// 0x289d04f39041
	void SolarGM_SetWatchingLiveTarget(FString InPlayerID);// 0x289c04f39041
	void SolarGM_ReplayDebugLog(bool bOpenDebugLog);// 0x289b04f39041
	void ShowDamageText(out SolarDamageText[] InDamageTexts);// 0x289a04f39041
	void SetUISettingHeadInfoStyle(out const enum InType);// 0x289904f39041
	void SetDamageTextVisible(bool bIsVisible);// 0x289804f39041
	void SetBattleOBHUDType(out const enum Type);// 0x289704f39041
	void PauseReplay();// 0x289604f39041
	void OnReplayPlayingLevelLoaded();// 0x289504f39041
	void OnReplayPlayingFirstScrubFinished();// 0x289404f39041
	void OnReplayCameraLostTarget();// 0x289304f39041
	void OnPlayingFinished();// 0x289204f39041
	void OnEmitBulletDelegate__DelegateSignature(Vector StartLoc, Vector AimLoc, FString SolarPlayerID);// 0x289104f39041
	void OnBattleOBHUDTypeChanged(out const enum CurrentType);// 0x289004f39041
	bool IsSpectatingPlayer();// 0x288f04f39041
	SolarPlayerState* GetWatchingLiveTarget();// 0x288e04f39041
	<FString,float> GetHorizontalDistanceBetweenPlayerAndOBCamera();// 0x288d04f39041
	FString GetCurrentSpectatePlayerID();// 0x288c04f39041
	enum GetBattleOBHUDType();// 0x288b04f39041
	void ExitDirectorMode();// 0x288a04f39041
	void EnterDirectorMode();// 0x288904f39041
	void ContinueReplay();// 0x288804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarDamageText
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bBrokenShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int Damage;//[Offset: 0x4, Size: 0x4]
	Actor* Target;//[Offset: 0x8, Size: 0x8]
	Actor* Source;//[Offset: 0x10, Size: 0x8]
	Vector HitLocation;//[Offset: 0x18, Size: 0xc]
	uint32 TargetUniqueID;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarReplayCameraControlComp.ActorComponent.Object
	delegate OnReplayCameraModeChanged;//[Offset: 0xb0, Size: 0x10]
	SolarSpectateInfo* ReplayPCSpectateInfo;//[Offset: 0xf0, Size: 0x8]
	float DefaultSpeed;//[Offset: 0xf8, Size: 0x4]
	float MoveSpeedChangeStep;//[Offset: 0xfc, Size: 0x4]
	float MoveSpeedMin;//[Offset: 0x100, Size: 0x4]
	float MoveSpeedMax;//[Offset: 0x104, Size: 0x4]
	float SpeedUpScale;//[Offset: 0x108, Size: 0x4]
	float DefaultTurnRate;//[Offset: 0x10c, Size: 0x4]
	float TurnRateChangeStep;//[Offset: 0x110, Size: 0x4]
	float TurnSpeedMin;//[Offset: 0x114, Size: 0x4]
	float TurnSpeedMax;//[Offset: 0x118, Size: 0x4]
	float DistanceChangeStep;//[Offset: 0x11c, Size: 0x4]
	SolarReplayCameraBase* ReplayCamera;//[Offset: 0x120, Size: 0x8]
	SolarPlayerState* LastTarget;//[Offset: 0x130, Size: 0x8]
	<enum,SolarReplayCameraBase*> CacheCameras;//[Offset: 0x148, Size: 0x50]
	void OnStreamingReadied();// 0x1f1504f39041
	void OnSpectateInfoRep(SolarSpectateInfo* InSpecInfo);// 0x1f1404f39041
	void OnReplayCameraModeChanged__DelegateSignature(enum OldMode, enum CurMode);// 0x1f1304f39041
	void OnPlayingScrubStart();// 0x1f1204f39041
	void OnPlayingScrubCharactersCreated();// 0x1f1104f39041
	void OnPlayingFirstScrubFinished();// 0x1f1004f39041
	enum GetReplayCameraMode();// 0x1f0e04f39041
	void ChangeLockSpectatorModeDistance(float val);// 0x1f0d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarReplayCameraBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarReplayAutoDirectorComponent.ActorComponent.Object
	<enum,float> AutoDirectorActivityEventScoreSetting;//[Offset: 0xf0, Size: 0x50]
	<SolarPlayerState*> CurrentAllPlayerInAreaRadius;//[Offset: 0x238, Size: 0x50]
	<FString> NarrateInfoEventIDSet;//[Offset: 0x3a8, Size: 0x50]
	NarrateEventInfoResult[] NarrateResultArray;//[Offset: 0x408, Size: 0x10]
	int NextPlayNarrateIndex;//[Offset: 0x418, Size: 0x4]
	TimerHandle NarratePlayingTimerHandle;//[Offset: 0x420, Size: 0x8]
	FString CurrentBattleFilePath;//[Offset: 0x430, Size: 0x10]
	MediaSoundComponent* MediaSoundComponent;//[Offset: 0x440, Size: 0x8]
	void UpdatePlayingNarrateActivityEvent();// 0x573304f39041
	void UpdateCamera();// 0x573204f39041
	void TryPlayNextNode();// 0x573104f39041
	void SetCommentActive(bool bNewActive);// 0x573004f39041
	void OnScrubStart();// 0x572f04f39041
	void OnScrubFinished();// 0x572e04f39041
	void OnScoutPlayerWorkComplete();// 0x572d04f39041
	void OnReplayCameraBlocked();// 0x572c04f39041
	void OnReceiveKillInfoNotify(SolarPlayerState* SourcePlayerState, SolarPlayerState* TargetPlayerState, out const SolarPointDamageEvent PointDamageEvent);// 0x572b04f39041
	void OnPreFreeCameraFinished();// 0x572a04f39041
	void OnPlayingPause();// 0x572904f39041
	void OnPlayingContinue();// 0x572804f39041
	void OnPlayerTakeDamage(SolarPlayerState* SourcePlayerState, SolarPlayerState* TargetPlayerState, out const SolarPointDamageEvent DamageEvent);// 0x572704f39041
	void OnPlayerStartSkydive(SolarCharacter* Character, enum LastStage, enum CurrentStage);// 0x572604f39041
	void OnPlayerResurrectTeammate(SolarCharacter* ImplementResurrectionCharacter);// 0x572504f39041
	void OnPlayerRescueTeammate(SolarCharacter* ImplementRescueCharacter, SolarCharacter* BeingRescuedCharacter);// 0x572404f39041
	void OnPlayerPickupItem(SolarCharacter* Character, Actor* PickupItem);// 0x572304f39041
	void OnPlayerActiveRoleAbility(SolarCharacter* Character, byte AbilityIndex);// 0x572204f39041
	void OnGameVictoryChanged();// 0x572104f39041
	void OnCheckPlayerOut(SCMPlayerState* PlayerState, enum OutType);// 0x572004f39041
	void OnCharacterGetOnVehicle(SolarCharacter* Character, Pawn* Vehicle);// 0x571f04f39041
	void EnumerateAutoDirectorNodeInfo();// 0x571e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NarrateEventInfoResult
	float EventTime;//[Offset: 0x0, Size: 0x4]
	FString NarrateText;//[Offset: 0x8, Size: 0x10]
	FString AudioAssetPath;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object
	enum Channels;//[Offset: 0x7f0, Size: 0x4]
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f4, Size: 0x1]
	float RateAdjustmentFactor;//[Offset: 0x7f8, Size: 0x4]
	FloatRange RateAdjustmentRange;//[Offset: 0x7fc, Size: 0x10]
	MediaPlayer* MediaPlayer;//[Offset: 0x810, Size: 0x8]
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0x65e604f39041
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x65e504f39041
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0x65e404f39041
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0x65e304f39041
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0x65e204f39041
	MediaSoundComponentSpectralData[] GetSpectralData();// 0x65e104f39041
	MediaPlayer* GetMediaPlayer();// 0x65e004f39041
	float GetEnvelopeValue();// 0x65df04f39041
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x65de04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 0x1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 0x1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x318, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x320, Size: 0x3a0]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x6c0, Size: 0x8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x6c8, Size: 0x50]
	SoundClass* SoundClass;//[Offset: 0x718, Size: 0x8]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x720, Size: 0x8]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x728, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x730, Size: 0x10]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x740, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0x750, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x760, Size: 0x10]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x770, Size: 0x1]
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x770, Size: 0x1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x774, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x778, Size: 0x4]
	delegate OnAudioEnvelopeValue;//[Offset: 0x780, Size: 0x10]
	SynthSound* Synth;//[Offset: 0x7b0, Size: 0x8]
	AudioComponent* AudioComponent;//[Offset: 0x7b8, Size: 0x8]
	void Stop();// 0x432704f39041
	void Start();// 0x432604f39041
	void SetVolumeMultiplier(float VolumeMultiplier);// 0x432504f39041
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x432404f39041
	bool IsPlaying();// 0x432304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaPlayer.Object
	delegate OnEndReached;//[Offset: 0x28, Size: 0x10]
	delegate OnMediaClosed;//[Offset: 0x38, Size: 0x10]
	delegate OnMediaOpened;//[Offset: 0x48, Size: 0x10]
	delegate OnMediaOpenFailed;//[Offset: 0x58, Size: 0x10]
	delegate OnPlaybackResumed;//[Offset: 0x68, Size: 0x10]
	delegate OnPlaybackSuspended;//[Offset: 0x78, Size: 0x10]
	delegate OnSeekCompleted;//[Offset: 0x88, Size: 0x10]
	delegate OnTracksChanged;//[Offset: 0x98, Size: 0x10]
	Timespan CacheAhead;//[Offset: 0xa8, Size: 0x8]
	Timespan CacheBehind;//[Offset: 0xb0, Size: 0x8]
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 0x8]
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1]
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1]
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 0x8]
	int PlaylistIndex;//[Offset: 0xd0, Size: 0x4]
	Timespan TimeDelay;//[Offset: 0xd8, Size: 0x8]
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 0x4]
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 0x4]
	Rotator ViewRotation;//[Offset: 0xe8, Size: 0xc]
	Guid PlayerGuid;//[Offset: 0x120, Size: 0x10]
	bool SupportsSeeking();// 0x65d104f39041
	bool SupportsScrubbing();// 0x65d004f39041
	bool SupportsRate(float Rate, bool Unthinned);// 0x65cf04f39041
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0x65ce04f39041
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0x65cd04f39041
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0x65cc04f39041
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0x65cb04f39041
	void SetTimeDelay(Timespan TimeDelay);// 0x65ca04f39041
	bool SetRate(float Rate);// 0x65c904f39041
	bool SetNativeVolume(float Volume);// 0x65c804f39041
	void SetMediaOptions(const MediaSource* options);// 0x65c704f39041
	bool SetLooping(bool Looping);// 0x65c604f39041
	void SetDesiredPlayerName(FName playerName);// 0x65c504f39041
	void SetBlockOnTime(out const Timespan Time);// 0x65c404f39041
	bool SelectTrack(enum TrackType, int TrackIndex);// 0x65c304f39041
	bool Seek(out const Timespan Time);// 0x65c204f39041
	bool Rewind();// 0x65c104f39041
	bool Reopen();// 0x65c004f39041
	bool Previous();// 0x65bf04f39041
	void PlayAndSeek();// 0x65be04f39041
	bool Play();// 0x65bd04f39041
	bool Pause();// 0x65bc04f39041
	bool OpenUrl(FString URL);// 0x65bb04f39041
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions options);// 0x65ba04f39041
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions options, out bool bSuccess);// 0x65b904f39041
	bool OpenSource(MediaSource* MediaSource);// 0x65b804f39041
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0x65b704f39041
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0x65b604f39041
	bool OpenFile(FString FilePath);// 0x65b504f39041
	bool Next();// 0x65b404f39041
	bool IsReady();// 0x65b304f39041
	bool IsPreparing();// 0x65b204f39041
	bool IsPlaying();// 0x65b104f39041
	bool IsPaused();// 0x65b004f39041
	bool IsLooping();// 0x65af04f39041
	bool IsConnecting();// 0x65ae04f39041
	bool IsClosed();// 0x65ad04f39041
	bool IsBuffering();// 0x65ac04f39041
	bool HasError();// 0x65ab04f39041
	Rotator GetViewRotation();// 0x65aa04f39041
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0x65a904f39041
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0x65a804f39041
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0x65a704f39041
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0x65a604f39041
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0x65a504f39041
	float GetVerticalFieldOfView();// 0x65a404f39041
	FString GetUrl();// 0x65a304f39041
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0x65a204f39041
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0x65a104f39041
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0x65a004f39041
	Timespan GetTimeDelay();// 0x659f04f39041
	Timespan GetTime();// 0x659e04f39041
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0x659d04f39041
	int GetSelectedTrack(enum TrackType);// 0x659c04f39041
	float GetRate();// 0x659b04f39041
	int GetPlaylistIndex();// 0x659a04f39041
	MediaPlaylist* GetPlaylist();// 0x659904f39041
	FName GetPlayerName();// 0x659804f39041
	int GetNumTracks(enum TrackType);// 0x659704f39041
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0x659604f39041
	FText GetMediaName();// 0x659504f39041
	Timespan GetLastVideoSampleProcessedTime();// 0x659404f39041
	Timespan GetLastAudioSampleProcessedTime();// 0x659304f39041
	float GetHorizontalFieldOfView();// 0x659204f39041
	Timespan GetDuration();// 0x659104f39041
	FName GetDesiredPlayerName();// 0x659004f39041
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0x658f04f39041
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0x658e04f39041
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0x658d04f39041
	void Close();// 0x658c04f39041
	bool CanPlayUrl(FString URL);// 0x658b04f39041
	bool CanPlaySource(MediaSource* MediaSource);// 0x658a04f39041
	bool CanPause();// 0x658904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Timespan
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaPlaylist.Object
	MediaSource*[] Items;//[Offset: 0x28, Size: 0x10]
	bool Replace(int Index, MediaSource* Replacement);// 0x65dd04f39041
	bool RemoveAt(int Index);// 0x65dc04f39041
	bool Remove(MediaSource* MediaSource);// 0x65db04f39041
	int Num();// 0x65da04f39041
	void Insert(MediaSource* MediaSource, int Index);// 0x65d904f39041
	MediaSource* GetRandom(out int OutIndex);// 0x65d804f39041
	MediaSource* GetPrevious(out int InOutIndex);// 0x65d704f39041
	MediaSource* GetNext(out int InOutIndex);// 0x65d604f39041
	MediaSource* Get(int Index);// 0x65d504f39041
	bool AddUrl(FString URL);// 0x65d404f39041
	bool AddFile(FString FilePath);// 0x65d304f39041
	bool Add(MediaSource* MediaSource);// 0x65d204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaSource.Object
	bool Validate();// 0x42b604f39041
	void SetMediaOptionString(out const FName Key, FString Value);// 0x42b504f39041
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x42b404f39041
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x42b304f39041
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x42b204f39041
	FString GetUrl();// 0x42b104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 0x1c]
	Timespan SeekTime;//[Offset: 0x20, Size: 0x8]
	enum PlayOnOpen;//[Offset: 0x28, Size: 0x1]
	enum Loop;//[Offset: 0x29, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 0x4]
	int Caption;//[Offset: 0x4, Size: 0x4]
	int MetaData;//[Offset: 0x8, Size: 0x4]
	int Script;//[Offset: 0xc, Size: 0x4]
	int Subtitle;//[Offset: 0x10, Size: 0x4]
	int Text;//[Offset: 0x14, Size: 0x4]
	int Video;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaSoundComponentSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4]
	float Magnitude;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object
	SynthComponent* OwningSynthComponent;//[Offset: 0x360, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveProcedural.SoundWave.SoundBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x318, Size: 0x8]
	AudioComponentParam[] InstanceParameters;//[Offset: 0x320, Size: 0x10]
	SoundClass* SoundClassOverride;//[Offset: 0x330, Size: 0x8]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x338, Size: 0x1]
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x338, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x338, Size: 0x1]
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x338, Size: 0x1]
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33a, Size: 0x1]
	FName AudioComponentUserID;//[Offset: 0x340, Size: 0x8]
	float PitchModulationMin;//[Offset: 0x348, Size: 0x4]
	float PitchModulationMax;//[Offset: 0x34c, Size: 0x4]
	float VolumeModulationMin;//[Offset: 0x350, Size: 0x4]
	float VolumeModulationMax;//[Offset: 0x354, Size: 0x4]
	float VolumeMultiplier;//[Offset: 0x358, Size: 0x4]
	int EnvelopeFollowerAttackTime;//[Offset: 0x35c, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x360, Size: 0x4]
	float Priority;//[Offset: 0x364, Size: 0x4]
	float SubtitlePriority;//[Offset: 0x368, Size: 0x4]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x370, Size: 0x8]
	float PitchMultiplier;//[Offset: 0x378, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x37c, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x388, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x390, Size: 0x3a0]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x730, Size: 0x8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x738, Size: 0x50]
	enum AutoAttachLocationRule;//[Offset: 0x794, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x795, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x796, Size: 0x1]
	delegate OnAudioFinished;//[Offset: 0x798, Size: 0x10]
	delegate OnAudioPlaybackPercent;//[Offset: 0x7c0, Size: 0x10]
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x7e8, Size: 0x10]
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0x810, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0x838, Size: 0x10]
	delegate OnQueueSubtitles;//[Offset: 0x848, Size: 0x10]
	SceneComponent* AutoAttachParent;//[Offset: 0x858, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x860, Size: 0x8]
	void StopDelayed(float DelayTime);// 0x429704f39041
	void Stop();// 0x429604f39041
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x429504f39041
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x429404f39041
	void SetUISound(bool bInUISound);// 0x429304f39041
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x429204f39041
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x429104f39041
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x429004f39041
	void SetSound(SoundBase* NewSound);// 0x428f04f39041
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x428e04f39041
	void SetPaused(bool bPause);// 0x428d04f39041
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x428c04f39041
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x428b04f39041
	void SetIntParameter(FName InName, int inInt);// 0x428a04f39041
	void SetFloatParameter(FName InName, float InFloat);// 0x428904f39041
	void SetBoolParameter(FName InName, bool InBool);// 0x428804f39041
	void Play(float StartTime);// 0x428704f39041
	bool IsPlaying();// 0x428604f39041
	bool HasCookedFFTData();// 0x428504f39041
	bool HasCookedAmplitudeEnvelopeData();// 0x428404f39041
	enum GetPlayState();// 0x428304f39041
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x428204f39041
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x428104f39041
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x428004f39041
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x427f04f39041
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x427e04f39041
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x427d04f39041
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x427c04f39041
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x427b04f39041
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x427a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	float FloatParam;//[Offset: 0x8, Size: 0x4]
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int IntParam;//[Offset: 0x10, Size: 0x4]
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 0x10]
	float PlaybackTime;//[Offset: 0x10, Size: 0x4]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4]
	float Magnitude;//[Offset: 0x4, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 0x4]
	float PlaybackTime;//[Offset: 0x4, Size: 0x4]
	SoundWave* SoundWave;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KeyMappingRowInfo.TableRowBase
	FString Label;//[Offset: 0x8, Size: 0x10]
	FString ActionDisplayName;//[Offset: 0x18, Size: 0x10]
	FString ActionName;//[Offset: 0x28, Size: 0x10]
	bool Continuity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float Scale;//[Offset: 0x3c, Size: 0x4]
	FString RealAction;//[Offset: 0x40, Size: 0x10]
	FString[] FirstDefaultKeys;//[Offset: 0x50, Size: 0x10]
	FString[] SecondDefaultKeys;//[Offset: 0x60, Size: 0x10]
	FString Description;//[Offset: 0x70, Size: 0x10]
	FString[] RelatedActions;//[Offset: 0x80, Size: 0x10]
	bool Stationary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EmojiBubbleSubsystem.GameInstanceSubsystem.Subsystem.Object
	DataTable* EmojiTable;//[Offset: 0x30, Size: 0x8]
	void ShowEmojiBubbleToContainerInLobby(int EmojiID, SolarLobbyCharacter* InLobbyCharacter, FString PlayerId);// 0x477404f39041
	void ShowEmojiBubbleToContainer(int EmojiID, SolarCharacter* InCharacter);// 0x477304f39041
	void ResetAllEmojiBubble();// 0x477204f39041
	bool GetEmojiConfigByID(int EmojiID, out EmojiBubbleConfig OutConfig);// 0x477104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLobbyCharacter.Pawn.Actor.Object
	CurveVector* DissolveCurvePath;//[Offset: 0x290, Size: 0x28]
	MaterialInterface* DissolveMatPath;//[Offset: 0x2b8, Size: 0x28]
	CurveVector* FresnelCurvePath;//[Offset: 0x2e0, Size: 0x28]
	MaterialInterface* FresnelMatPath;//[Offset: 0x308, Size: 0x28]
	ParticleSystem* SwitchParticleEffectPath;//[Offset: 0x330, Size: 0x28]
	float SwitchEffectInterval;//[Offset: 0x360, Size: 0x4]
	float SelfDelayShowSeconds;//[Offset: 0x364, Size: 0x4]
	AkComponent* AkAudioComponent;//[Offset: 0x370, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x378, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x380, Size: 0x8]
	SkeletalMeshComponent* MirrorSkeletalMesh;//[Offset: 0x388, Size: 0x8]
	Actor* LobbyAccessory;//[Offset: 0x390, Size: 0x8]
	Actor* MirrorLobbyAccessory;//[Offset: 0x398, Size: 0x8]
	SkeletalMeshComponent* DissovleSkeletalMesh;//[Offset: 0x3a0, Size: 0x8]
	SkeletalMeshComponent* FresnelSkeletalMesh;//[Offset: 0x3a8, Size: 0x8]
	SkeletalMeshComponent* MirrorDissovleSkeletalMesh;//[Offset: 0x3b0, Size: 0x8]
	SkeletalMeshComponent* MirrorFresnelSkeletalMesh;//[Offset: 0x3b8, Size: 0x8]
	MaterialInterface* DissovleMat;//[Offset: 0x3c0, Size: 0x8]
	MaterialInterface* FresnelMat;//[Offset: 0x3c8, Size: 0x8]
	CurveVector* DissovleCurve;//[Offset: 0x3d0, Size: 0x8]
	CurveVector* FresnelCurve;//[Offset: 0x3d8, Size: 0x8]
	MaterialInstanceDynamic*[] DynamicDissovleMats;//[Offset: 0x3e8, Size: 0x10]
	MaterialInstanceDynamic*[] DynamicFresnelMats;//[Offset: 0x3f8, Size: 0x10]
	bool bCanPlayVoiceInIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	bool bOpenMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 0x1]
	bool CharacterIsVisiblity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 0x1]
	int CurSkinId;//[Offset: 0x420, Size: 0x4]
	int CurChunkId;//[Offset: 0x424, Size: 0x4]
	bool bIsPlayIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	class Object* AnimBPClass;//[Offset: 0x430, Size: 0x8]
	void UpdateLobbyAccessory(FString InAccessoryPath);// 0x541e04f39041
	void StopPlayIdleShow();// 0x541d04f39041
	void StartPlaySwitchEffect();// 0x541c04f39041
	void StartPlayFresnelSwitchEffect();// 0x541b04f39041
	void StartPlayDissovleSwitchEffect();// 0x541a04f39041
	void SetSwitchEffetComp(SkeletalMeshComponent* EffectComp, SkeletalMeshComponent* DefaultComp, MaterialInterface* EffectMat, out MaterialInstanceDynamic*[] DyniamEffectMats);// 0x541904f39041
	void SetPropVisiable(bool isVisiable);// 0x541804f39041
	void SetMeshVisibility(bool IsVisible);// 0x541704f39041
	void SetIsPlayIdleShow(bool InIsPlayIdleShow);// 0x541604f39041
	void SetCharacterRotationByDelta(float InDeltaYaw);// 0x541504f39041
	void SetCharacterMeshAndMat(int InSkinID, bool IsForce);// 0x541404f39041
	void SetCharacterByLoadedData(SolarLobbyCharacterData* InData);// 0x541304f39041
	void PlayIdleShow();// 0x541204f39041
	void OpenLookAtAndSetPostProcessABPCameraLocation(const bool bOpen, FString ModuleCameraName);// 0x541104f39041
	bool IsCanOpenMirror();// 0x541004f39041
	bool IsCanOpenChangeAnim();// 0x540f04f39041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x540e04f39041
	void InitCharacterByLua();// 0x540d04f39041
	SolarAkGameObject* GetSolarAkGameObject();// 0x540c04f39041
	SolarLobbyCharacterData* GetLobbySkinResourceBySkinId(int InSkinID, bool IsLowRes);// 0x540b04f39041
	bool GetIsPlayIdleShow();// 0x540a04f39041
	SolarLobbyAnimInstance* GetCharAnimInstance();// 0x540904f39041
	void DetachCharacterSocketPS();// 0x540804f39041
	void DelayShowSelf(SolarLobbyCharacterData* InData);// 0x540704f39041
	void ClearSwitchEffect();// 0x540604f39041
	void ClearCharacterByLua();// 0x540504f39041
	void AttachCharacterSocketPS(out PSAttachElem[] PSAttachArray);// 0x540404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLobbyCharacterData.DataAsset.Object
	SoftObjectPath SkinShareImage;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SkinBackgroundShare;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath Mesh;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath Material;//[Offset: 0x78, Size: 0x18]
	<uint16,CharacterTransformData> CharacterTransformData;//[Offset: 0x90, Size: 0x50]
	SoftObjectPath[] MaterialArray;//[Offset: 0xe0, Size: 0x10]
	<FString,MaterialInterface*> CharacterChangeMat;//[Offset: 0xf0, Size: 0x50]
	SoftObjectPath AnimBlueprint;//[Offset: 0x140, Size: 0x18]
	SoftObjectPath WinAnimation;//[Offset: 0x158, Size: 0x18]
	SoftObjectPath[] IdleShowList;//[Offset: 0x170, Size: 0x10]
	SoftObjectPath LobbyIdleAnimation;//[Offset: 0x180, Size: 0x18]
	SoftObjectPath AccessoryBlueprint;//[Offset: 0x198, Size: 0x18]
	SoftObjectPath EnterAnim;//[Offset: 0x1b0, Size: 0x18]
	SoftObjectPath ExitAnim;//[Offset: 0x1c8, Size: 0x18]
	SoftObjectPath RefuseAnim;//[Offset: 0x1e0, Size: 0x18]
	SoftObjectPath EncounterIdleAnim;//[Offset: 0x1f8, Size: 0x18]
	SoftObjectPath[] EncounterIdleShowList;//[Offset: 0x210, Size: 0x10]
	SoftObjectPath RecommendAnimBlueprint;//[Offset: 0x220, Size: 0x18]
	bool bParameterChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	PSAttachElem[] PSAttachArray;//[Offset: 0x240, Size: 0x10]
	SoftObjectPath IdleShowSequence;//[Offset: 0x250, Size: 0x18]
	SoftObjectPath LeftHandProp;//[Offset: 0x268, Size: 0x18]
	SoftObjectPath RightHandProp;//[Offset: 0x280, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterTransformData
	Vector CharacterOffset;//[Offset: 0x0, Size: 0xc]
	Rotator CharacterRot;//[Offset: 0xc, Size: 0xc]
	Vector CharacterScale;//[Offset: 0x18, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PSAttachElem
	SoftObjectPath ParticleSystemPath;//[Offset: 0x0, Size: 0x18]
	FName SocketName;//[Offset: 0x18, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x20, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x2c, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLobbyAnimInstance.AnimInstance.Object
	bool bPlayIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bInIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	bool bResetToIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	bool EnableAnimSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1]
	void ShowRecommendUI(bool bVisible);// 0x540304f39041
	void SetEnableAnimSound(bool InEnableAnimSound);// 0x540204f39041
	void SetCharacterInIdleShow(bool IsPlayingIdleShow);// 0x540104f39041
	void SetCharacterCanBeLooked(bool IsVisible);// 0x540004f39041
	void ResetToIdle();// 0x53ff04f39041
	void RefreshTick();// 0x53fe04f39041
	void RandIdleShow();// 0x53fd04f39041
	void LookAtFunctionSwitcher(const bool bOpen);// 0x53fc04f39041
	void KawaiiPhysicsSwitcher(const bool bOpen);// 0x53fb04f39041
	void GetCameraLocation(FString ModuleCameraName);// 0x53fa04f39041
	void ExitAnimFinish();// 0x53f904f39041
	void AnimPlayIdleShow(bool Enable);// 0x53f804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EmojiBubbleConfig.TableRowBase
	class SolarUserWidget* EmojiClassType;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CommonInputSubsystem.LocalPlayerSubsystem.Subsystem.Object
	delegate OnInputMethodChanged;//[Offset: 0x50, Size: 0x10]
	int NumberOfInputMethodChangesRecently;//[Offset: 0x60, Size: 0x4]
	double LastInputMethodChangeTime;//[Offset: 0x68, Size: 0x8]
	double LastTimeInputMethodThrashingBegan;//[Offset: 0x70, Size: 0x8]
	enum LastInputType;//[Offset: 0x78, Size: 0x1]
	enum CurrentInputType;//[Offset: 0x79, Size: 0x1]
	FName GamepadInputType;//[Offset: 0x7c, Size: 0x8]
	<FName,enum> CurrentInputLocks;//[Offset: 0x88, Size: 0x50]
	bool bIsGamepadSimulatedClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool ShouldShowInputKeys();// 0x3fbe04f39041
	void SetGamepadInputType(const FName InGamepadInputType);// 0x3fbd04f39041
	bool SetCurrentInputType(enum NewInputType);// 0x3fbc04f39041
	void SetCanChangeInputMethod(const bool bCanChange);// 0x3fbb04f39041
	bool IsUsingPointerInput();// 0x3fba04f39041
	bool IsInputMethodActive(enum InputMethod);// 0x3fb904f39041
	enum GetDefaultInputType();// 0x3fb804f39041
	enum GetCurrentInputType();// 0x3fb704f39041
	FName GetCurrentGamepadName();// 0x3fb604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LocalPlayerSubsystem.Subsystem.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x151, Size: 0x1]
	LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x6bdf04f39041
	LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x6bde04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAnoHelper.Object
	bool bOpenAnoSDK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void SendAntiDataToSsmOnDs(FString AntiDataLog, const SolarPlayerController* PC);// 0x4e8904f39041
	void SendAntiDataToSsmOnClientNative(FString ExtraParam, byte AntiType);// 0x4e8804f39041
	void SendAntiDataToSsmOnClient(FString Param, const byte AntiType);// 0x4e8704f39041
	void InitializeBind();// 0x4e8604f39041
	FString GetAntiLogOnClient(const byte Type);// 0x4e8504f39041
	void AnoUnRegisterCallBack();// 0x4e8404f39041
	void AnoSentDataToSvr(AnoSDKAntiData Data);// 0x4e8304f39041
	void AnoSentCoreTimeData(AnoSDKAntiData AntiData);// 0x4e8204f39041
	void AnoSDKSendData(AnoSDKAntiData AntiData);// 0x4e8104f39041
	void AnoSDKResume();// 0x4e8004f39041
	void AnoSDKPause();// 0x4e7f04f39041
	void AnoChangeAntiDataFlow(AnoSDKAntiData Data);// 0x4e7e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnoSDKAntiData
	int Length;//[Offset: 0x0, Size: 0x4]
	FString AntiData;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTableManager.Object
	enum SystemLang;//[Offset: 0x30, Size: 0x1]
	void SetIMInitFlag(bool Flag);// 0x588d04f39041
	void SetCurrentLangEnum(enum InLang);// 0x588c04f39041
	void SetCurrentLang(FString InLang);// 0x588b04f39041
	void ReceiveInit();// 0x588a04f39041
	void OnSetCurrentLang(FString InLang);// 0x588904f39041
	void MakeUpperLocalTextWithLang(out FString OutLocalText, enum InLang);// 0x588804f39041
	void MakeUpperLocalText(out FString OutLocalText);// 0x588704f39041
	void MakeLowerLocalTextWithLang(out FString OutLocalText, enum InLang);// 0x588604f39041
	void MakeLowerLocalText(out FString OutLocalText);// 0x588504f39041
	bool IsLocalTextIDValid(int ID);// 0x588404f39041
	FString GetLocalTextWithLang(int ID, enum InLang, bool bMakeUpperText);// 0x588304f39041
	FString GetLocalText(int ID, bool bMakeUpperText);// 0x588204f39041
	bool GetIMInitFlag();// 0x588104f39041
	enum GetCurrentLangEnum();// 0x588004f39041
	FString GetCurrentLang();// 0x587f04f39041
	enum ConvertLangNameToEnum(FString LangName);// 0x587e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTcpNetworkManager.Object
	bool bIsSsmMatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	SolarTCPSocketClient* SocketClient;//[Offset: 0x50, Size: 0x8]
	SCMMatchChannelAction* MatchChannelAction;//[Offset: 0x58, Size: 0x8]
	bool IsSsm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FString EncryptKeyClientTCPDynamic;//[Offset: 0x68, Size: 0x10]
	bool bEncrypt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	delegate DisconnectedDelegate;//[Offset: 0x7c, Size: 0x10]
	delegate ConnectedDelegate;//[Offset: 0x8c, Size: 0x10]
	delegate MessageReceivedDelegate;//[Offset: 0x9c, Size: 0x10]
	SolarPlayerReport MyReport;//[Offset: 0xb0, Size: 0x498]
	void UpdateTeamRank(byte TeamID, int Rank);// 0x5dd604f39041
	void UpdateTeamMVPPlayer(const byte TeamID, FString InPlayerID);// 0x5dd504f39041
	void UpdatePlayerData(FString PlayerId, SolarPlayerState* PlayerState);// 0x5dd404f39041
	void UpdatePlayerBattleInfo(SolarPlayerState* PS);// 0x5dd304f39041
	bool UpdateBotAIData(SolarPlayerState* PlayerState);// 0x5dd204f39041
	void TryEndBattle();// 0x5dd104f39041
	void SyncSsmDataToGameState();// 0x5dd004f39041
	void SsmDSSendGiftRequest(const int GiftID, const int Num, FString SendPlayerId, FString RecivePlayerId, SolarPlayerState* SendPlayer);// 0x5dcf04f39041
	void SsmDSChangeRoleIDRequest(FString InPlayerID, int InRoleID);// 0x5dce04f39041
	void SetKnockoutPoints(FString InClanId, const int InKnockoutPoints);// 0x5dcd04f39041
	void SendSceenshot2Server(FString UserId, FString PlayerId, FString BattleID, int64 ScreenshotTime, int ImageSize, int ImageWidth, int ImageHeight, FString ImageType, FString ImageBuffer);// 0x5dcc04f39041
	void SendInputDeviceChangedWrapper(enum NowInputType);// 0x5dcb04f39041
	void RequestOpenMatchChannel(const int InMatchType, out const int[] InPlayerStructure, const int InMaxMatchTime);// 0x5dca04f39041
	void ReportTournamentSpectate(out <FString,FString> TournamentSpectateData);// 0x5dc904f39041
	void ReportPlayerBattleInfo(SolarPlayerState* PS);// 0x5dc804f39041
	void RemovePlayerData(FString PlayerId);// 0x5dc704f39041
	void RecordLastUsedVehicle();// 0x5dc604f39041
	void PlayerRequireToChangeGold(const int InChangedGoldType, const int InGoldNum, FString InPlayerID, SolarPlayerState* InPlayer);// 0x5dc504f39041
	void PlayerCancelJoinRequest(FString PlayerId);// 0x5dc404f39041
	void PlayerCancelJoin(FString PlayerId);// 0x5dc304f39041
	void OpenSupplement(int MaxSecond);// 0x5dc204f39041
	void OnStartBattleResponse();// 0x5dc104f39041
	void OnRecvData(out const byte[] Data);// 0x5dc004f39041
	void OnRecordBattleStartTime(const float InStartTime);// 0x5dbf04f39041
	bool OnReceivedTeamPreJoinRequest(out const FString[] PlayerIds, int TeamID);// 0x5dbe04f39041
	void OnReceivedPlayerJoinData(FString PlayerId);// 0x5dbd04f39041
	void OnReceivedPlayerCancelJoin(FString PlayerId);// 0x5dbc04f39041
	void OnPostLoadMapWithWorld(World* World);// 0x5dbb04f39041
	void OnPlayerLogin(FString PlayerId);// 0x5dba04f39041
	void OnMessageReceived(int ConnId, out const byte[] Message);// 0x5db904f39041
	void OnDisconnected(int ConnId);// 0x5db804f39041
	void OnConnected(int ConnId);// 0x5db704f39041
	void NotifyTournamentSpectateState(bool bIsEnterReplay, out FString BattleID);// 0x5db604f39041
	void NotifyRoomDataChanged(out const CustomRoomData CustomRoomData);// 0x5db504f39041
	void NotifyPlayerReward_CustomMode(out const SCustomMode_PlayerReport Report);// 0x5db404f39041
	void NotifyPlayerReward();// 0x5db304f39041
	void NotifyPlayerOffline(SolarPlayerController* PC);// 0x5db204f39041
	void NotifyPlayerEnterBattle(SolarPlayerController* PC);// 0x5db104f39041
	void NotifyOBPlayersChanged(out FString[] PlayerIds);// 0x5db004f39041
	void NotifyEquipCharacterSkinRequest(FString PlayerId, int CharacterId, int SkinId);// 0x5daf04f39041
	void NotifyClientBattleStateFish();// 0x5dae04f39041
	void NotifyBattleGroupResultRequest(byte TeamID, int Rank);// 0x5dad04f39041
	bool IsEnableAITeamManager();// 0x5dac04f39041
	bool IsAllowReconnectGame();// 0x5dab04f39041
	void HandlePlayerLogoutInPreparatoryPhase(Controller* PC);// 0x5daa04f39041
	void HandlePlayerLogoutInBattlePhase(Controller* PC);// 0x5da904f39041
	void GetWeaponUpgradeSlotByWeaponID(out UpgradeSlotStruct[] OutData, FString PlayerId, const int weaponid);// 0x5da804f39041
	int GetWeaponSkinIDByWeaponID(FString PlayerId, const int weaponid);// 0x5da704f39041
	int GetTournamentID();// 0x5da604f39041
	SolarGameModeInfo GetSolarGameModeInfo();// 0x5da504f39041
	int GetRuleID();// 0x5da404f39041
	void GetReportWeaponExpIds(out int[] OutWeaponExpIds);// 0x5da304f39041
	int GetPort();// 0x5da204f39041
	int[] GetPlayerUsableTailFlameIds(FString PlayerId);// 0x5da104f39041
	int[] GetPlayerUsableJetpackIds(FString PlayerId);// 0x5da004f39041
	byte[] GetPlayerTeamIDs();// 0x5d9f04f39041
	FString[] GetPlayerRoleAndOpenIDs();// 0x5d9e04f39041
	int GetPlayerCount();// 0x5d9d04f39041
	FString GetPlayerClanID(FString PlayerId);// 0x5d9c04f39041
	void GetPlayerBattleRequestInfo(FString InSolarPlayerID, out PlayerBattleRequestInfo OutResult);// 0x5d9b04f39041
	int[] GetMLRelatedAIDataMLRatio();// 0x5d9a04f39041
	int[] GetMLRelatedAIDataMLFeature();// 0x5d9904f39041
	bool GetMLRelatedAIDataMLClosed();// 0x5d9804f39041
	FString GetLocalPlayerID();// 0x5d9704f39041
	FString GetLocalIPAddress();// 0x5d9604f39041
	KnockoutParams GetKnockoutPointParams();// 0x5d9504f39041
	bool GetIsCloseMatch();// 0x5d9404f39041
	bool GetHasMonster();// 0x5d9304f39041
	bool GetHasMachineLearning();// 0x5d9204f39041
	int GetCurrentMatchBotTeamPresetID();// 0x5d9104f39041
	int GetClientRuleID();// 0x5d9004f39041
	int[] GetClientMatchingMapIds();// 0x5d8f04f39041
	int GetClientGameModeGroupId();// 0x5d8e04f39041
	int GetClientEntryID();// 0x5d8d04f39041
	FString GetClientBattleID();// 0x5d8c04f39041
	<int,int> GetAILevelConfig();// 0x5d8b04f39041
	int GetAIAccompanyTimelineID();// 0x5d8a04f39041
	int GetAboutToEnterPlayerCount();// 0x5d8904f39041
	void FreeBotAIData(SolarPlayerState* PlayerState);// 0x5d8804f39041
	void FakePlayerJoin(FString PlayerId, int TeamID);// 0x5d8704f39041
	void DebugData_SetPlayerDataOnLogin(SolarPlayerState* PlayerState);// 0x5d8604f39041
	void CloseSupplement();// 0x5d8504f39041
	bool CheckPlayerLeave(FString PlayerId);// 0x5d8404f39041
	bool CheckJoinToken(FString Token, FString PlayerId);// 0x5d8304f39041
	bool CheckIfPlayerHasJoined(FString PlayerId);// 0x5d8204f39041
	void CheckBattleOver();// 0x5d8104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTCPSocketClient.Actor.Object
	int SendBufferSize;//[Offset: 0x228, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x22c, Size: 0x4]
	float TimeBetweenTicks;//[Offset: 0x230, Size: 0x4]
	bool SendData(int ConnectionId, byte[] Data);// 0x421304f39041
	void Disconnect(int ConnectionId);// 0x421204f39041
	void Connect(FString IP, int Port, out const delegate OnConnected, out const delegate OnDisconnected, out const delegate OnMessageReceived, out int ConnectionId);// 0x421104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomRoomData
	FString Name;//[Offset: 0x0, Size: 0x10]
	int64 MinPlayerLimit;//[Offset: 0x10, Size: 0x8]
	int64 MaxPlayerLimit;//[Offset: 0x18, Size: 0x8]
	FString OwnerID;//[Offset: 0x20, Size: 0x10]
	FString Passwd;//[Offset: 0x30, Size: 0x10]
	int LevelLimit;//[Offset: 0x40, Size: 0x4]
	int64 ShowID;//[Offset: 0x48, Size: 0x8]
	int64 MaxOBPlayerLimit;//[Offset: 0x50, Size: 0x8]
	bool bIsEnabledSwapPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bIsEnabledInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bIsEnableTeamJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	enum RoomType;//[Offset: 0x5b, Size: 0x1]
	TournamentData TournamentData;//[Offset: 0x5c, Size: 0x10]
	int RewardPoolID;//[Offset: 0x6c, Size: 0x4]
	int RewardPoolPrizeType;//[Offset: 0x70, Size: 0x4]
	CustomServerData CustomServerData;//[Offset: 0x78, Size: 0x58]
	int KeepMatchTime;//[Offset: 0xd0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TournamentData
	int StartTime;//[Offset: 0x0, Size: 0x4]
	int DelayTime;//[Offset: 0x4, Size: 0x4]
	int Turn;//[Offset: 0x8, Size: 0x4]
	enum TournamentType;//[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomServerData
	FString ID;//[Offset: 0x0, Size: 0x10]
	int ConfigID;//[Offset: 0x10, Size: 0x4]
	int[] WeaponBlacklist;//[Offset: 0x18, Size: 0x10]
	int[] WeaponTypeBlacklist;//[Offset: 0x28, Size: 0x10]
	int[] VehicleTypeBlacklist;//[Offset: 0x38, Size: 0x10]
	int[] VehicleClassBlacklist;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCustomMode_PlayerReport.SolarPlayerReport
	<int,int> RewardItems;//[Offset: 0x498, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UpgradeSlotStruct
	int SlotID;//[Offset: 0x0, Size: 0x4]
	bool Unlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum AccessoryType;//[Offset: 0x5, Size: 0x1]
	int AccessoryID;//[Offset: 0x8, Size: 0x4]
	SlateBrush IconOverride;//[Offset: 0x10, Size: 0xe0]
	LinearColor IconColorOverride;//[Offset: 0xf0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerBattleRequestInfo
	FString NickName;//[Offset: 0x0, Size: 0x10]
	int AccountLevel;//[Offset: 0x10, Size: 0x4]
	PlatformParams PlatformParams;//[Offset: 0x18, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlatformParams
	int64 UserId;//[Offset: 0x0, Size: 0x8]
	FString OpenId;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KnockoutParams
	float KnockoutKillPoint;//[Offset: 0x0, Size: 0x4]
	float[] KnockoutRankPoints;//[Offset: 0x8, Size: 0x10]
	float KnockoutDamagePoint;//[Offset: 0x18, Size: 0x4]
	float KnockoutDamageTakenPoint;//[Offset: 0x1c, Size: 0x4]
	float ScalarParam;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMMatchChannelAction.BlueprintAsyncActionBase.Object
	Object* WorldContextObject;//[Offset: 0x48, Size: 0x8]
	delegate OnMatchChannelChange;//[Offset: 0x50, Size: 0x10]
	SCMMatchChannelAction* OpenMatchChannel(Object* WorldContextObject, const enum MatchType, out const int[] PlayerStructure, const int MaxMatchTime);// 0x4c1f04f39041
	void HandleMatchChannelChange(bool InMatchResult, int RPCID);// 0x4c1e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x416804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUDPManager.Object
	int SendBufferSize;//[Offset: 0x30, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x34, Size: 0x4]
	void OnMessageReceived(out const byte[] Data);// 0x5ed904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAssetManager.AssetManager.Object
	delegate OnAssetManagerPreloadCompleted;//[Offset: 0x450, Size: 0x10]
	SolarChunkAssignData* ChunkAssignDataCache;//[Offset: 0x460, Size: 0x8]
	<FString,Object*> CachedObjMap;//[Offset: 0x468, Size: 0x50]
	void UnLoadPrimaryAssetByLabelPathForLua(FString PrimaryAssetPath);// 0x4e9204f39041
	void PreloadGameNormalAssets(SolarGameInstanceBase* GameInstancePtr);// 0x4e9104f39041
	void OnBindingActorDestory(Actor* Actor);// 0x4e9004f39041
	float GetPreloadAssetsProgress();// 0x4e8f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarChunkAssignData.DataAsset.Object
	DirectoryPath[] DirectoriesToNeverClean;//[Offset: 0x30, Size: 0x10]
	<FString,ChunkAssignRule> Rules;//[Offset: 0x40, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChunkAssignRule
	FString FullPath;//[Offset: 0x0, Size: 0x10]
	int ChunkID;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemManager.Object
	SolarItemRootActor* RootActor;//[Offset: 0x30, Size: 0x8]
	<int,Actor*> SpawnedActors;//[Offset: 0x38, Size: 0x50]
	SolarItemSpawner*[] ItemSpawners;//[Offset: 0xd8, Size: 0x10]
	SolarItemSpawner*[] NSItemSpanwers;//[Offset: 0xe8, Size: 0x10]
	SolarVehicleSpawnerSets* SolarVehicleSpawnerSets;//[Offset: 0xf8, Size: 0x8]
	<int,SolarItemSpawner*> ItemSpawnersMap;//[Offset: 0x150, Size: 0x50]
	<int,SolarAirDropSpawner*> AirDropSpawnersMap;//[Offset: 0x1a0, Size: 0x50]
	<int,SolarItemSpawnerArray> NSItemSpawnerMap;//[Offset: 0x1f0, Size: 0x50]
	<int,OutcomeData> ItemOutcomeDatas;//[Offset: 0x240, Size: 0x50]
	<int,OutcomeDataCollection> OutcomeCollection;//[Offset: 0x290, Size: 0x50]
	<int,SimpleDropItemDataCollection> OriginDropItemDatas;//[Offset: 0x2e0, Size: 0x50]
	<int,FinalDropDataCollection> AirDropItemDatas;//[Offset: 0x330, Size: 0x50]
	<int,int> AirDropChestIndexMap;//[Offset: 0x380, Size: 0x50]
	<int,int> UsedAirDropChestIndexMap;//[Offset: 0x3d0, Size: 0x50]
	<int,int> MaxPileMap;//[Offset: 0x420, Size: 0x50]
	RandomStream ItemStream;//[Offset: 0x470, Size: 0x8]
	float DelaySpawnTime;//[Offset: 0x478, Size: 0x4]
	FString[] SubLevelNames;//[Offset: 0x480, Size: 0x10]
	bool BInitSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	bool BSpawnerDestoryed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1]
	TimerHandle ItemInitSpawnerHandle;//[Offset: 0x498, Size: 0x8]
	float DelayInitSpawnerTime;//[Offset: 0x4a0, Size: 0x4]
	TimerHandle ItemLoopSpawnHandle;//[Offset: 0x4a8, Size: 0x8]
	float SpawnLoopInterval;//[Offset: 0x4b0, Size: 0x4]
	float SpawnMinDisSquared;//[Offset: 0x4b4, Size: 0x4]
	float SpawnMaxHeightOffset;//[Offset: 0x4b8, Size: 0x4]
	float ChestSpawnMinDisSquared;//[Offset: 0x4bc, Size: 0x4]
	float VehicleSpawnMinDisSquared;//[Offset: 0x4c0, Size: 0x4]
	DataTable* ItemResReferenceTable;//[Offset: 0x4c8, Size: 0x8]
	FString ItemResReferenceTablePath;//[Offset: 0x4d0, Size: 0x10]
	bool BOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	int FirstSpawnerIndex;//[Offset: 0x51c, Size: 0x4]
	int FirstTBoxIndex;//[Offset: 0x520, Size: 0x4]
	int FirstAirDropIndex;//[Offset: 0x524, Size: 0x4]
	int FirstVehicleIndex;//[Offset: 0x528, Size: 0x4]
	int ChestKeyCode;//[Offset: 0x52c, Size: 0x4]
	int Level1OutcomeID;//[Offset: 0x530, Size: 0x4]
	int Level2OutcomeID;//[Offset: 0x534, Size: 0x4]
	int Level3OutcomeID;//[Offset: 0x538, Size: 0x4]
	<int,enum> ItemID2Types;//[Offset: 0x610, Size: 0x50]
	int64 ThisIdRefCount;//[Offset: 0x670, Size: 0x8]
	int64 ServerNowSeconds;//[Offset: 0x678, Size: 0x8]
	FString RootActorBpPath;//[Offset: 0x680, Size: 0x10]
	float CheckDropRadius;//[Offset: 0x690, Size: 0x4]
	float CheckDropHeight;//[Offset: 0x694, Size: 0x4]
	float DropLineTraceLength;//[Offset: 0x698, Size: 0x4]
	float DropUnitOffset;//[Offset: 0x69c, Size: 0x4]
	SolarMapManager* MapManager;//[Offset: 0x6a0, Size: 0x8]
	SolarAirDropSpawner*[] ActiveAirDropBox;//[Offset: 0x6a8, Size: 0x10]
	AirDropTreasureBox*[] AirDropsList;//[Offset: 0x6e8, Size: 0x10]
	DeathTreasureBox*[] DeathTreasureBoxList;//[Offset: 0x6f8, Size: 0x10]
	void UpdateItemParams();// 0x53ee04f39041
	bool TryDropAtLocation(SolarCharacterBase* Owner, out Vector CheckPos, const bool bIsDeathBox);// 0x53ed04f39041
	void SplitBurstItems(const SolarItemData Source, out SolarItemData[] SplitedPile);// 0x53ec04f39041
	void SpawnTreasureBoxByID(const int TreasureId, Transform trans, SolarItemData[] ItemsToSpawn, SolarCharacter* SummonCharacter, const float InSpawnDelay, const float InStartHeight);// 0x53eb04f39041
	void SpawnMutipleItems(SolarCharacter* InCharacter, const int InItemID, const int InPerCount, const int InTotalCount);// 0x53ea04f39041
	void SpawnItemsByOutcomeID(const int OutcomeID, out Transform trans);// 0x53e904f39041
	void SpawnItems(const int ItemID, const int ItemNum, Transform trans);// 0x53e804f39041
	SolarItemData SpawnItemData(int ItemID);// 0x53e704f39041
	void SpawnDeathBox(SolarCharacterBase* Owner, out const Rotator Rotator, out SolarItemData[] DataTarray, out const int DeathBoxId, out const SolarPlayerWeapon*[] DeathBoxWeaponArray, out const float CurrEnergyValue, out const float CurrExtraEnergyValue, out const int MonsterID);// 0x53e604f39041
	void SpawnAirDropByID(const int ChestID, Vector Location, SolarItemData[] ItemsToSpawn);// 0x53e504f39041
	void ServerAddExtraGlobalOutcome(out const int[] InExtraIDs);// 0x53e404f39041
	void ResetThisID();// 0x53e304f39041
	bool RefreshOutcomePoolContent(out OutcomeData InOutcomeData);// 0x53e204f39041
	void OnUpdateServerNowSeconds(const int InNowSeconds);// 0x53e104f39041
	void OnCustomGameStateChanged(const enum InNewState);// 0x53e004f39041
	void OnAsyncLoadTreasureBoxComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Transform trans, SolarCharacter* InCharacter, const float InSpawnDelay, const float InStartHeight);// 0x53df04f39041
	void OnAsyncLoadItemComplete(SoftClassPath SClassPath, SolarItemData ItemData, Transform trans);// 0x53de04f39041
	void OnAsyncLoadDiscardItemComplete(SoftClassPath SClassPath, SolarCharacter* Owner, SolarItemData ItemData);// 0x53dd04f39041
	void OnAsyncLoadDeathBoxComplete(class Object DeathBoxClass, SolarCharacterBase* Owner, Rotator Rotator, SolarItemData[] DataTarray, SolarItemData DeathBoxData, SolarPlayerWeapon*[] DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, const int MonsterID);// 0x53dc04f39041
	void OnAsyncLoadAirdropComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Vector Location);// 0x53db04f39041
	void NotifySpawnerDestroy();// 0x53da04f39041
	void NotifyAvailableAirDropsNumChanged();// 0x53d904f39041
	void NotifyAirDropOpened();// 0x53d804f39041
	void NetStartAirDrops(const int SpawnerID, const int ChestID);// 0x53d704f39041
	bool NetRunSpecOutcomesAndItems(out const <int,int> InOutcomeMap, out const <int,int> InItemMap, out SolarItemData[] OutItemArray);// 0x53d604f39041
	bool NetRunSpecOutcome(const int InData, out SolarItemData[] OutItemArray);// 0x53d504f39041
	void NetRunGlobalDrop();// 0x53d404f39041
	void NetRunDrop(const enum InSpecifiedStage);// 0x53d304f39041
	bool NetDropOutcomeContent(const int TargetContentID, out OutcomeData OutcomeData, out <int,SimpleDropItemDataCollection> InDropItemDatas, bool fromSpawner, out const Transform trans);// 0x53d204f39041
	bool NetDropOutcome(out OutcomeData OutcomeData, out int OutTargetContentID);// 0x53d104f39041
	void NetDropGlobalOutcome(out GlobalOutcomeData GlobalOutcomeData);// 0x53d004f39041
	void LoadSpawnerLevelComplete();// 0x53cf04f39041
	void LoadItemSpawnerLevels();// 0x53ce04f39041
	bool IsPosBlocked(out const Vector CheckPos);// 0x53cd04f39041
	bool IsInSafeArea(out const Vector Location);// 0x53cc04f39041
	void InitWeaponPartLevel(out SolarItemData InItemData);// 0x53cb04f39041
	void InitWeaponLevel(out SolarItemData InItemData);// 0x53ca04f39041
	void InitItemDataShieldValue(out SolarItemData InItemData);// 0x53c904f39041
	int64 IncreaseThisID();// 0x53c804f39041
	int GetVehicleGroupIDByVehicleID(int InVehicleID);// 0x53c704f39041
	SolarVehicleData GetVehicleConfigData(const int InVehicleID);// 0x53c604f39041
	int GetServerNowSeconds();// 0x53c504f39041
	int GetRankSeasonID();// 0x53c404f39041
	int GetRandomIDInMap(const int TotalWeight, out <int,int> WeightIDMap);// 0x53c304f39041
	int GetRandomAirDropIDInMap();// 0x53c204f39041
	int GetOutcomeIdByTreasureBoxId(const int TreasureBoxID);// 0x53c104f39041
	OutcomeData GetOutcomeDataByID(const int OutcomeID);// 0x53c004f39041
	OutcomeContentData GetOutcomeContentDataByID(const int ContentID);// 0x53bf04f39041
	bool GetItemResReference(int InItemID, out ItemResReference OutData);// 0x53be04f39041
	int GetItemPrize(const int InItemID);// 0x53bd04f39041
	int GetItemMaxPileByID(const int InItemID);// 0x53bc04f39041
	bool GetGlobalOutcomeData(const int GamePlayMode, out GlobalOutcomeData[] GlobalOutcomeDatas);// 0x53bb04f39041
	int GetEntryID();// 0x53ba04f39041
	bool GetCurrItemSubLevels(FString InMapName, out FString[] OutSubLevelNames);// 0x53b904f39041
	OutcomeData GetCookedOutcomeDataByID(const int OutcomeID);// 0x53b804f39041
	bool GetChestsFromChestSpawn(const int ChestSpawnID, out int[] ChestIDs);// 0x53b704f39041
	int GetAvailableAirDropsNum();// 0x53b604f39041
	bool GetAirDropChestIDsByGamePlayMode(const int GamePlayMode, out int[] ChestIDs);// 0x53b504f39041
	SolarAirDropSpawner*[] GetActiveAirDropBox();// 0x53b404f39041
	void FindTransformForBoxItem(SolarTreasureBoxActor* TargetActor, out Transform InTrans, bool bUseNewLocation);// 0x53b304f39041
	Rotator FindRotationForDropItem(Actor* TargetActor, out Vector FindTargetPos);// 0x53b204f39041
	bool FindPosForDropItem(SolarCharacterBase* Owner, out Vector FindTargetPos, const bool bPreferCenter, const bool bIsDeathBox);// 0x53b104f39041
	SolarItemData CreateItemDataByKey(const int InItemID);// 0x53b004f39041
	void ConvertToItemdataAndSetToSpawners();// 0x53af04f39041
	void ClearSpawnLoopTimer();// 0x53ae04f39041
	void CheckSpawnItemByDis();// 0x53ad04f39041
	bool CheckPointInCircle(Vector2D Center, float Radius, Vector2D PlayerPoint);// 0x53ac04f39041
	void AddOneDropDataToTempDatas(const int SpawnerID, const int InItemID, const int InItemNum, out <int,SimpleDropItemDataCollection> InDropItemDatas);// 0x53ab04f39041
	bool AddExtraGlobalOutcomeData(const int[] InExtraGlobalOutcomeIDs, out GlobalOutcomeData[] GlobalOutcomeDatas);// 0x53aa04f39041
	void AddAirDropToList(AirDropTreasureBox* AirDrop);// 0x53a904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemRootActor.Actor.Object
	int MAX_LOAD_NUM;//[Offset: 0x228, Size: 0x4]
	int MAX_SPAWN_NUM;//[Offset: 0x22c, Size: 0x4]
	int CurrLoadNum;//[Offset: 0x230, Size: 0x4]
	int CurrSpawnNum;//[Offset: 0x234, Size: 0x4]
	int TempFrame;//[Offset: 0x238, Size: 0x4]
	int FrameInterval;//[Offset: 0x23c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int[] Contents;//[Offset: 0x8, Size: 0x10]
	enum SpawnStage;//[Offset: 0x18, Size: 0x1]
	enum OutcomeType;//[Offset: 0x19, Size: 0x1]
	<int,int> OutcomePools;//[Offset: 0x20, Size: 0x50]
	<int,int> OutcomeDynamicWeights;//[Offset: 0x70, Size: 0x50]
	<int,int> OutcomeSubWeights;//[Offset: 0xc0, Size: 0x50]
	int PoolTotalWeight;//[Offset: 0x110, Size: 0x4]
	int PoolOutcomeID;//[Offset: 0x114, Size: 0x4]
	int MaxTimes;//[Offset: 0x118, Size: 0x4]
	int MinTimes;//[Offset: 0x11c, Size: 0x4]
	int SpawnerID;//[Offset: 0x120, Size: 0x4]
	int NetSetTimes;//[Offset: 0x124, Size: 0x4]
	int DropedTimes;//[Offset: 0x128, Size: 0x4]
	<int,OutcomeContentData> ContentDatas;//[Offset: 0x130, Size: 0x50]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	int GlobalDropTimes;//[Offset: 0x184, Size: 0x4]
	OutcomeTypeLimitData[] LimitTypeDatas;//[Offset: 0x188, Size: 0x10]
	OutcomeIDLimitData[] LimitIDDatas;//[Offset: 0x198, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OutcomeContentData
	int ID;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	int Weight;//[Offset: 0x8, Size: 0x4]
	int[] RandomNums;//[Offset: 0x10, Size: 0x10]
	int MaxTimes;//[Offset: 0x20, Size: 0x4]
	int MinTimes;//[Offset: 0x24, Size: 0x4]
	int RelatedContentID;//[Offset: 0x28, Size: 0x4]
	enum ItemType;//[Offset: 0x2c, Size: 0x4]
	int DropedTimes;//[Offset: 0x30, Size: 0x4]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool IsDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OutcomeTypeLimitData
	enum LimitType;//[Offset: 0x0, Size: 0x4]
	int MinTimes;//[Offset: 0x4, Size: 0x4]
	int MaxTimes;//[Offset: 0x8, Size: 0x4]
	int CurrDropTimes;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OutcomeIDLimitData
	int[] LimitIDs;//[Offset: 0x0, Size: 0x10]
	int MinTimes;//[Offset: 0x10, Size: 0x4]
	int MaxTimes;//[Offset: 0x14, Size: 0x4]
	int CurrDropTimes;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SimpleDropItemDataCollection
	<int,int> Datas;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GlobalOutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int SingleMaxTimes;//[Offset: 0x4, Size: 0x4]
	int TotalMaxTimes;//[Offset: 0x8, Size: 0x4]
	int TotalMinTimes;//[Offset: 0xc, Size: 0x4]
	int NetSetTimes;//[Offset: 0x10, Size: 0x4]
	int DropedTimes;//[Offset: 0x14, Size: 0x4]
	<int,int> ItemIDNumMap;//[Offset: 0x18, Size: 0x50]
	int[] AffectedOutcomes;//[Offset: 0x68, Size: 0x10]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleData
	int VehicleID;//[Offset: 0x0, Size: 0x4]
	FString VehicleBP;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ItemResReference.TableRowBase
	FString Description;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath Icon;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath AbilityBP;//[Offset: 0x30, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAirDropSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	float SpawnDelay;//[Offset: 0x394, Size: 0x4]
	float AudioActorHeightOffset;//[Offset: 0x398, Size: 0x4]
	float AudioActorFallSpeed;//[Offset: 0x39c, Size: 0x4]
	SoftClassPath PillarMeshBPClassPathName;//[Offset: 0x3a0, Size: 0x18]
	int ChestID;//[Offset: 0x3c0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnerID;//[Offset: 0x294, Size: 0x4]
	enum SpawnStage;//[Offset: 0x2c8, Size: 0x1]
	enum SpawnerType;//[Offset: 0x2c9, Size: 0x1]
	enum SpawnerLevel;//[Offset: 0x2ca, Size: 0x1]
	int OutcomeID;//[Offset: 0x2cc, Size: 0x4]
	Vector OriginPos;//[Offset: 0x2d0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0x2dc, Size: 0xc]
	Box SpawnerBox;//[Offset: 0x2e8, Size: 0x1c]
	float RotateAngleRange;//[Offset: 0x304, Size: 0x4]
	bool HasSpawnedItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bActiveSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	FString SyncItemId;//[Offset: 0x310, Size: 0x10]
	bool BOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	bool bRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]
	float RefreshTime;//[Offset: 0x324, Size: 0x4]
	bool bUseSpawnerTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	int NumberOfPoints;//[Offset: 0x32c, Size: 0x4]
	float fScalarParams;//[Offset: 0x330, Size: 0x4]
	enum AppearanceType;//[Offset: 0x334, Size: 0x1]
	bool bUpdateOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 0x1]
	TimerHandle ItemLoadHandle;//[Offset: 0x358, Size: 0x8]
	TimerHandle ItemSpawnHandle;//[Offset: 0x360, Size: 0x8]
	TimerHandle ItemRefreshHandle;//[Offset: 0x368, Size: 0x8]
	void SpawnSingleItem();// 0x4def04f39041
	void SpawnInNextTick();// 0x4dee04f39041
	void SaveSpawnerRange();// 0x4ded04f39041
	void RandomRotatorForItem(enum ItemType, out Quat TargetRotator);// 0x4dec04f39041
	void RandomPosInBoundingBox(out Vector TargetPos);// 0x4deb04f39041
	void PlaceItemToTheGround(out Vector InOutLocation);// 0x4dea04f39041
	void OnItemSpawned(Actor* Item);// 0x4de904f39041
	void OnAsyncLoadComplete(SoftClassPath SClassPath, SolarItemData ItemData);// 0x4de804f39041
	void NetStartSpawnItems(SolarItemRootActor* OwnerActor);// 0x4de704f39041
	void LoadSingleWeaponAsset(out const SolarItemData ItemData);// 0x4de604f39041
	void LoadSingleItemAsset();// 0x4de504f39041
	void LoadInNextTick();// 0x4de404f39041
	void InitSpawnerBound();// 0x4de304f39041
	void GetSuitableDropPos(out Vector TargetPos);// 0x4de204f39041
	void GenerateDropPosition();// 0x4de104f39041
	void ClearUnpickedItems();// 0x4de004f39041
	void ClearLoopTimer();// 0x4ddf04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarMapElementBase.Actor.Object
	FString Side;//[Offset: 0x238, Size: 0x10]
	FString Job;//[Offset: 0x248, Size: 0x10]
	FString ElementID;//[Offset: 0x258, Size: 0x10]
	enum Type;//[Offset: 0x268, Size: 0x1]
	enum State;//[Offset: 0x269, Size: 0x1]
	enum Visibility;//[Offset: 0x26a, Size: 0x1]
	class SolarGameMode_HandleElementRPC* BP_HandleActorRPC;//[Offset: 0x270, Size: 0x8]
	FName ElementTypeName;//[Offset: 0x278, Size: 0x8]
	FString GroupKey;//[Offset: 0x280, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0x290, Size: 0x1]
	void SetElementVisibility(const enum NewType);// 0x494404f39041
	enum SetElementState(const enum NewState);// 0x494304f39041
	void OnRep_ElementVisibility();// 0x494204f39041
	void OnRep_ElementState();// 0x494104f39041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x494004f39041
	void OnElementStateChanged(const enum CurrentState);// 0x493f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameMode_HandleElementRPC.ActorComponent.Object
	FName ComponentTagName;//[Offset: 0xb0, Size: 0x8]
	void OnRep_ComponentName();// 0x517c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSpawnerSets.Actor.Object
	VehicleSpawner[] VehicleSpawnerSets;//[Offset: 0x228, Size: 0x10]
	enum SpawnStage;//[Offset: 0x238, Size: 0x1]
	void OnSpawnVehicleDriverGetOn(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x5f3b04f39041
	void OnSpawnVehicleDestroyed(Actor* DestroyedActor);// 0x5f3a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleSpawner
	SolarVehicleSpawnerSets* SolarVehicleSpawnerSets;//[Offset: 0x0, Size: 0x8]
	Transform VehicleSpawnerTransform;//[Offset: 0x10, Size: 0x30]
	enum VehicleSpawnType;//[Offset: 0x40, Size: 0x1]
	int SpawnerID;//[Offset: 0x44, Size: 0x4]
	bool bVehicleRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	VehicleSpawnRefreshInfo VehicleSpawnRefreshInfo;//[Offset: 0x50, Size: 0x48]
	SolarVehicleSpawnEffect* VehicleSpawnEffect;//[Offset: 0xa0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleSpawnRefreshInfo
	int VehicleRefreshSecond;//[Offset: 0x0, Size: 0x4]
	bool bVehicleRefreshRand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bVehicleRefreshWaitPreBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	int64 VehicleRefreshCheckRoleDisSquared;//[Offset: 0x8, Size: 0x8]
	Vector VehicleCheckBoxSize;//[Offset: 0x10, Size: 0xc]
	class SolarVehicleSpawnEffect* VehicleSpawnEffectClass;//[Offset: 0x20, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSpawnEffect.Actor.Object
	BoxComponent* BoxCollision;//[Offset: 0x228, Size: 0x8]
	FName EffectMaterialParameterName;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent*[] EffectMeshComponentArray;//[Offset: 0x238, Size: 0x10]
	int VehicleID;//[Offset: 0x248, Size: 0x4]
	Vector BoxExtent;//[Offset: 0x24c, Size: 0xc]
	float EffectTime;//[Offset: 0x258, Size: 0x4]
	StaticMesh* GetVehicleMesh(int InVehicleID);// 0x5f3904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x558, Size: 0xc]
	float LineThickness;//[Offset: 0x564, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x66c004f39041
	Vector GetUnscaledBoxExtent();// 0x66bf04f39041
	Vector GetScaledBoxExtent();// 0x66be04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemSpawnerArray
	SolarItemSpawner*[] ItemSpawnerArray;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OutcomeDataCollection
	OutcomeData[] Datas;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FinalDropDataCollection
	SolarItemData[] Datas;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarMapManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	MapData MapData;//[Offset: 0x38, Size: 0x3c]
	VehicleData VehicleData;//[Offset: 0x74, Size: 0x10]
	MiniMapAirlineData CurAirlineData;//[Offset: 0x84, Size: 0x30]
	Vector AirlineActorLoc;//[Offset: 0xb4, Size: 0xc]
	int CurrentMapID;//[Offset: 0xc0, Size: 0x4]
	FString CurrentMapName;//[Offset: 0xc8, Size: 0x10]
	VisualSoundConfig* BattlePromptConfig;//[Offset: 0x148, Size: 0x8]
	GameModeGlobalSetting* GameModeGlobalSetting;//[Offset: 0x150, Size: 0x8]
	BattlePromptData BattlePromptData;//[Offset: 0x158, Size: 0x18]
	Vector2D WorldLocationToMiniMap(Vector WorldLocation);// 0x54dd04f39041
	float WorldLengthToMiniMap(float WorldLength);// 0x54dc04f39041
	void UnInitMapData();// 0x54db04f39041
	void ReceiveInitMapData(int MapId);// 0x54da04f39041
	void OnLeaveParachuting();// 0x54d904f39041
	void OnEnterParachuting();// 0x54d804f39041
	Vector2D Normal2D(Vector2D VectorToTransForm);// 0x54d704f39041
	Vector MiniMapToWorldLocation(Vector2D PositionXY, float Z);// 0x54d604f39041
	bool IsOutOfBound(Vector2D PlayerNavPos);// 0x54d504f39041
	bool IsMiniMapAirlineDataValid(out const MiniMapAirlineData InData);// 0x54d404f39041
	void InitMapData(int MapId);// 0x54d304f39041
	SolarCharacter* GetViewportFocusedCharacter();// 0x54d204f39041
	bool GetSafeAreaInfo(out SafeAreaMapInfo OutAreaInfo);// 0x54d104f39041
	Vector GetRandomVectorFromMapDarkData(Object* WorldContextObject, enum InType, bool GetWhiteArea);// 0x54d004f39041
	CurveFloat* GetMiniMapFOVCurve(float InRadius);// 0x54cf04f39041
	int GetLenegthFromPlayerToMarkPoint(Vector MarkPosRealWorld, Vector CurrentPlayerLocation);// 0x54ce04f39041
	bool GetIntersectionOnMapFrame(Vector2D TeamMatePos, Vector2D MapAPos, float MapFrameHeight, float MapFrameWidth, out Vector2D InterSecionList, out enum CrossDirection);// 0x54cd04f39041
	float GetDistanceToSafeArea(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x54cc04f39041
	int GetCurrentMapID();// 0x54cb04f39041
	MiniMapAirlineData GetCurAirlineData();// 0x54ca04f39041
	VisualSoundConfig* GetBattlePromptConfig();// 0x54c904f39041
	Vector2D FixNavPos(Vector2D PlayerNavPos);// 0x54c804f39041
	bool CheckMapDarkDataWithVector(Vector InVector, enum InType, bool GetWhiteArea);// 0x54c704f39041
	bool CheckIfMarkedPointValid(out const Vector2D InMarkedPoint);// 0x54c604f39041
	float CalculatePoisonDistance(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x54c504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MiniMapAirlineData
	enum AirlineType;//[Offset: 0x0, Size: 0x1]
	Vector2D StartPoint;//[Offset: 0x4, Size: 0x8]
	Vector2D EndPoint;//[Offset: 0xc, Size: 0x8]
	Vector2D RealStartPoint;//[Offset: 0x14, Size: 0x8]
	Vector2D RealEndPoint;//[Offset: 0x1c, Size: 0x8]
	Vector2D AirlineDir;//[Offset: 0x24, Size: 0x8]
	float AirlineLength;//[Offset: 0x2c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MapData
	Vector2D MapTopLeftCoord;//[Offset: 0x0, Size: 0x8]
	Vector2D MapRightBottomCoord;//[Offset: 0x8, Size: 0x8]
	Vector2D MapImageSize;//[Offset: 0x10, Size: 0x8]
	int MapImage;//[Offset: 0x18, Size: 0x4]
	float AirlineZ;//[Offset: 0x1c, Size: 0x4]
	float HorizonLineZ;//[Offset: 0x20, Size: 0x4]
	float TopZ;//[Offset: 0x24, Size: 0x4]
	float BottomZ;//[Offset: 0x28, Size: 0x4]
	float AverageZ;//[Offset: 0x2c, Size: 0x4]
	float InitFogZ;//[Offset: 0x30, Size: 0x4]
	float TargetFogZ;//[Offset: 0x34, Size: 0x4]
	float MapFOV;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleData
	float Speed1;//[Offset: 0x0, Size: 0x4]
	float Fov1;//[Offset: 0x4, Size: 0x4]
	float Speed2;//[Offset: 0x8, Size: 0x4]
	float Fov2;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VisualSoundConfig.DataAsset.Object
	byte ElemMaxCount;//[Offset: 0x30, Size: 0x1]
	float VehicleMoveDecidingSpeed;//[Offset: 0x34, Size: 0x4]
	float IgnoredCheckRate;//[Offset: 0x38, Size: 0x4]
	float IgnoredCheckAngle;//[Offset: 0x3c, Size: 0x4]
	float IgnoredCheckDis_PlayerDefault;//[Offset: 0x40, Size: 0x4]
	float IgnoredCheckDis_VehicleDefault;//[Offset: 0x44, Size: 0x4]
	<int,float> IgnoredCheckDis_VehicleMap;//[Offset: 0x48, Size: 0x50]
	VisualSoundTagData SelfParentTagsData;//[Offset: 0x98, Size: 0x40]
	<enum,VisualSoundTagData> SelfTagsMap;//[Offset: 0xd8, Size: 0x50]
	VisualSoundTagData EnemyParentTagsData;//[Offset: 0x128, Size: 0x40]
	<enum,VisualSoundData> EnemyDataMap;//[Offset: 0x168, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VisualSoundTagData
	GameplayTagContainer RequiredTagsAny;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer BlockedTagsAny;//[Offset: 0x20, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VisualSoundData
	VisualSoundTagData TagsCondition;//[Offset: 0x0, Size: 0x40]
	enum DetectionRule;//[Offset: 0x40, Size: 0x1]
	float DetectionDis;//[Offset: 0x44, Size: 0x4]
	float DetectionZ;//[Offset: 0x48, Size: 0x4]
	float AliveTime;//[Offset: 0x4c, Size: 0x4]
	float CanBreakTime;//[Offset: 0x50, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattlePromptData
	byte MaxLength;//[Offset: 0x0, Size: 0x1]
	BattlePromptElem[] BattlePromptElemArr;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattlePromptElem
	enum RealType;//[Offset: 0x8, Size: 0x1]
	Vector CacheLoc;//[Offset: 0xc, Size: 0xc]
	float Distance;//[Offset: 0x18, Size: 0x4]
	float StartTime;//[Offset: 0x1c, Size: 0x4]
	float DestroyTime;//[Offset: 0x20, Size: 0x4]
	float ReplaceTime;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SafeAreaMapInfo
	Vector CurrentLocation;//[Offset: 0x0, Size: 0xc]
	float CurrentRadius;//[Offset: 0xc, Size: 0x4]
	Vector NextLocation;//[Offset: 0x10, Size: 0xc]
	float NextRadius;//[Offset: 0x1c, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x20, Size: 0x4]
	float TargetShrinkTime;//[Offset: 0x24, Size: 0x4]
	float CurrentConfigRadius;//[Offset: 0x28, Size: 0x4]
	Vector CurrentAreaBeginLocation;//[Offset: 0x2c, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AirDropTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	bool bPendingDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	float openProgress;//[Offset: 0x604, Size: 0x4]
	SolarCharacter* OpeningCharacter;//[Offset: 0x608, Size: 0x8]
	float OpenTime;//[Offset: 0x610, Size: 0x4]
	float ProtectionTime;//[Offset: 0x614, Size: 0x4]
	float StartDropHeight;//[Offset: 0x628, Size: 0x4]
	Vector TargetLocation;//[Offset: 0x62c, Size: 0xc]
	Rotator TargetRotation;//[Offset: 0x638, Size: 0xc]
	Vector SummonCharLocation;//[Offset: 0x644, Size: 0xc]
	float RecordDropTime;//[Offset: 0x650, Size: 0x4]
	enum MovementState;//[Offset: 0x658, Size: 0x1]
	float InitialHeight;//[Offset: 0x65c, Size: 0x4]
	float DropGravity;//[Offset: 0x660, Size: 0x4]
	float MaxDropSpeed;//[Offset: 0x664, Size: 0x4]
	float DecelerateHeight;//[Offset: 0x668, Size: 0x4]
	float ApplyDamageHeight;//[Offset: 0x66c, Size: 0x4]
	float DecelerateTime;//[Offset: 0x670, Size: 0x4]
	CurveFloat* DecelerateCurve;//[Offset: 0x678, Size: 0x8]
	float SqueezePawnRadius;//[Offset: 0x680, Size: 0x4]
	float ThrustPawnStrength;//[Offset: 0x684, Size: 0x4]
	float CollideUpBoundingRatio;//[Offset: 0x688, Size: 0x4]
	float CollidePushUpAngle;//[Offset: 0x68c, Size: 0x4]
	CurveFloat* CollidePushSpeedCurve;//[Offset: 0x690, Size: 0x8]
	float ApplyDamageRate;//[Offset: 0x6d0, Size: 0x4]
	SolarDamageInfo DamageInfo;//[Offset: 0x6d8, Size: 0x40]
	enum OpenState;//[Offset: 0x720, Size: 0x1]
	FString SummonPlayerID;//[Offset: 0x728, Size: 0x10]
	ParticleSystem* OpenAirdropEffect;//[Offset: 0x738, Size: 0x28]
	ParticleSystem* LandHitEffect;//[Offset: 0x760, Size: 0x28]
	ParticleSystem* LandSmokeEffect;//[Offset: 0x788, Size: 0x28]
	ParticleSystem* PendingDestroyEffect;//[Offset: 0x7b0, Size: 0x28]
	ParticleSystem* DestroyEffect;//[Offset: 0x7d8, Size: 0x28]
	ParticleSystem* FallingEffect;//[Offset: 0x800, Size: 0x28]
	ParticleSystem* FallingImpulseEffect;//[Offset: 0x828, Size: 0x28]
	ParticleSystem* LightBeamEffect;//[Offset: 0x850, Size: 0x28]
	Transform FallingEffectOffset;//[Offset: 0x880, Size: 0x30]
	Transform FallingImpulseEffectOffset;//[Offset: 0x8b0, Size: 0x30]
	Transform LightBeamEffectOffset;//[Offset: 0x8e0, Size: 0x30]
	Transform PendingDestroyEffectOffset;//[Offset: 0x910, Size: 0x30]
	AnimationAsset* LandAnimation;//[Offset: 0x940, Size: 0x8]
	AnimationAsset* OpenAnimation;//[Offset: 0x948, Size: 0x8]
	float ShowLandSmokeHeight;//[Offset: 0x950, Size: 0x4]
	float AirDropSpawnDelay;//[Offset: 0x954, Size: 0x4]
	float FallingEffectDelay;//[Offset: 0x958, Size: 0x4]
	bool bSummonBySkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 0x1]
	float YawOffset;//[Offset: 0x960, Size: 0x4]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x968, Size: 0x8]
	ParticleSystemComponent* LandSmokePSC;//[Offset: 0x978, Size: 0x8]
	ParticleSystemComponent* PendingDestroyPSC;//[Offset: 0x980, Size: 0x8]
	ParticleSystemComponent* FallingPSC;//[Offset: 0x988, Size: 0x8]
	ParticleSystemComponent* FallingImpulsePSC;//[Offset: 0x990, Size: 0x8]
	ParticleSystemComponent* LightBeamPSC;//[Offset: 0x998, Size: 0x8]
	SoftClassPath AirDropGuideMeshBPClassPath;//[Offset: 0x9a8, Size: 0x18]
	float GuideArrowDisappearHeight;//[Offset: 0x9c0, Size: 0x4]
	FString SNameAirDropOpen;//[Offset: 0x9c8, Size: 0x10]
	FString SNameLandHit;//[Offset: 0x9d8, Size: 0x10]
	FString SNameAirDropSpawn;//[Offset: 0x9e8, Size: 0x10]
	FString SNameStartDrop;//[Offset: 0x9f8, Size: 0x10]
	FString SNameStopDrop;//[Offset: 0xa08, Size: 0x10]
	FString SNameDecelerateAudio;//[Offset: 0xa18, Size: 0x10]
	FString SNamePlayLandedLoopAudio;//[Offset: 0xa28, Size: 0x10]
	FString SNameStopLandedLoopAudio;//[Offset: 0xa38, Size: 0x10]
	FString SNamePlayOnGroundBroadcastLoopAudio;//[Offset: 0xa48, Size: 0x10]
	FString SNameStopOnGroundBroadcastLoopAudio;//[Offset: 0xa58, Size: 0x10]
	FString SNamePlayStartHackAudio;//[Offset: 0xa68, Size: 0x10]
	FString SNameStopStartHackAudio;//[Offset: 0xa78, Size: 0x10]
	FString SNamePlayHackingLoopAudio;//[Offset: 0xa88, Size: 0x10]
	FString SNameStopHackingLoopAudio;//[Offset: 0xa98, Size: 0x10]
	FString SNameStopHackingLoopAudioAux;//[Offset: 0xaa8, Size: 0x10]
	FString PendingDestroyLoopStart;//[Offset: 0xab8, Size: 0x10]
	FString PendingDestroyLoopEnd;//[Offset: 0xac8, Size: 0x10]
	FString SNameDestroySound;//[Offset: 0xad8, Size: 0x10]
	FName ColorKeyTag1;//[Offset: 0xb50, Size: 0x8]
	FName ColorKeyTag2;//[Offset: 0xb58, Size: 0x8]
	FName ColorKeyGlow;//[Offset: 0xb60, Size: 0x8]
	FName ColorKeyMesh;//[Offset: 0xb68, Size: 0x8]
	FName AlphaKey;//[Offset: 0xb70, Size: 0x8]
	FName LightBeamAlphaKey;//[Offset: 0xb78, Size: 0x8]
	FName ColorKeyTagFlow1;//[Offset: 0xb80, Size: 0x8]
	FName ColorKeyTagFlow2;//[Offset: 0xb88, Size: 0x8]
	FName ColorKeyLightEffect;//[Offset: 0xb90, Size: 0x8]
	float FadeTweenDuration;//[Offset: 0xb98, Size: 0x4]
	float RedTweenDuration;//[Offset: 0xb9c, Size: 0x4]
	LinearColor BlueColorTag1;//[Offset: 0xba0, Size: 0x10]
	LinearColor RedColorTag1;//[Offset: 0xbb0, Size: 0x10]
	LinearColor BlueColorTag2;//[Offset: 0xbc0, Size: 0x10]
	LinearColor RedColorTag2;//[Offset: 0xbd0, Size: 0x10]
	LinearColor BlueColorGlow;//[Offset: 0xbe0, Size: 0x10]
	LinearColor RedColorGlow;//[Offset: 0xbf0, Size: 0x10]
	LinearColor BlueColorMesh;//[Offset: 0xc00, Size: 0x10]
	LinearColor RedColorMesh;//[Offset: 0xc10, Size: 0x10]
	LinearColor RedColorTagFlow1;//[Offset: 0xc20, Size: 0x10]
	LinearColor RedColorTagFlow2;//[Offset: 0xc30, Size: 0x10]
	LinearColor BlueColorTagFlow1;//[Offset: 0xc40, Size: 0x10]
	LinearColor BlueColorTagFlow2;//[Offset: 0xc50, Size: 0x10]
	LinearColor RedColorLightEffect;//[Offset: 0xc60, Size: 0x10]
	LinearColor BlueColorLightEffect;//[Offset: 0xc70, Size: 0x10]
	void ReceiveOnOpenStateChanged(enum InPrevOpenState, enum InCurrOpenState);// 0x44b004f39041
	void PlayLandingAnimation();// 0x44af04f39041
	bool OpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x44ae04f39041
	void OnStateChanged();// 0x44ad04f39041
	void OnRep_TargetLocation(Vector PreTargetLocation);// 0x44ac04f39041
	void OnRep_SummonPlayerID();// 0x44ab04f39041
	void OnRep_SummonCharLocation();// 0x44aa04f39041
	void OnRep_StartDropHeight();// 0x44a904f39041
	void OnRep_RecordDropTime(float PreDropTime);// 0x44a804f39041
	void OnRep_PendingDestroy();// 0x44a704f39041
	void OnRep_OpenState(enum PreOpenState);// 0x44a604f39041
	void OnRep_OpenProgressChange();// 0x44a504f39041
	void OnRep_OpenCharacterChange();// 0x44a404f39041
	void OnRep_MovementState(enum PreMovementState);// 0x44a304f39041
	void OnMovementStateChanged(enum InPrevMovementState, enum InCurrMovementState);// 0x44a204f39041
	void OnFadeOutFallingEffect();// 0x44a104f39041
	bool IsSummonedByCharacter();// 0x44a004f39041
	bool IsOpenningCharacterOffline();// 0x449f04f39041
	bool IsCharacterInRange(SolarCharacter* InCheckCharacter);// 0x449e04f39041
	bool CancelOpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x449d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInteractableManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	int ZoneNum;//[Offset: 0x40, Size: 0x4]
	int TotalNum;//[Offset: 0x44, Size: 0x4]
	RadarStationCollection[] CurrRadarStations;//[Offset: 0x48, Size: 0x10]
	SolarElectricShop*[] CurrElectricShops;//[Offset: 0x58, Size: 0x10]
	SolarShieldUpgradeItemShop*[] ActiveShieldUpgradeItemShopList;//[Offset: 0x68, Size: 0x10]
	FString SceneObjectLevelName;//[Offset: 0x78, Size: 0x10]
	SolarGlobalRepInfo* GlobalMapRepInfo;//[Offset: 0x88, Size: 0x8]
	void OnSceneObjectsLoadComplete(FString LevelName);// 0x535704f39041
	void OnClientShowShieldUpgradeItemShops();// 0x535604f39041
	int GetShieldUpgradeItemShopGroupID();// 0x535504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RadarStationCollection
	int Zone;//[Offset: 0x0, Size: 0x4]
	SolarRadarStation*[] AllRadarStations;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarRadarStation.SolarInteractableActor.Actor.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	int Zone;//[Offset: 0x238, Size: 0x4]
	float MaxTirggerDistance;//[Offset: 0x23c, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x240, Size: 0x4]
	GameplayTag CDTag;//[Offset: 0x244, Size: 0x8]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	bool bInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1]
	float CoolDownTime;//[Offset: 0x250, Size: 0x4]
	float CostEnergy;//[Offset: 0x254, Size: 0x4]
	float RemainCDTime;//[Offset: 0x258, Size: 0x4]
	SphereComponent* CollisionComp;//[Offset: 0x260, Size: 0x8]
	StaticMeshComponent* NormalMesh;//[Offset: 0x268, Size: 0x8]
	SolarObjAbilitySystemComponent* ObjAbilitySystemComp;//[Offset: 0x270, Size: 0x8]
	class SolarObjGameplayAbility* ObjAbilityClass;//[Offset: 0x278, Size: 0x8]
	GameplayAbilitySpecHandle ObjAbilityHandle;//[Offset: 0x280, Size: 0x4]
	bool TryTriggerRadarStation(SolarCharacter* InUser);// 0x571c04f39041
	void ServerInitailizeAbility();// 0x571b04f39041
	void OnResetCD();// 0x571a04f39041
	void OnRep_Broken();// 0x571904f39041
	void OnRep_BInCD();// 0x571804f39041
	void OnRadarStationCDChanged();// 0x571704f39041
	void OnPlayStartScanEffect();// 0x571604f39041
	void OnGameplayTagChanged(GameplayTag Tag, bool bAdd);// 0x571504f39041
	void OnClientStartScan();// 0x571404f39041
	void OnBrokenChanged(bool InBroken);// 0x571304f39041
	void InitailizeAbilityParams();// 0x571204f39041
	float GetAbilityReaminingCD();// 0x571104f39041
	float GetAbilityCostEnergy();// 0x571004f39041
	float GetAbilityCooldown();// 0x570f04f39041
	bool CanActivateNow();// 0x570e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInteractableActor.Actor.Object
	enum InteractType;//[Offset: 0x228, Size: 0x1]
	byte bUseSceneActorOptimization;//[Offset: 0x234, Size: 0x1]
	void SetUserActor(Actor* InUser);// 0x4fb104f39041
	void InteractWithActor(Actor* InActor);// 0x4fb004f39041
	Actor* GetUserActor();// 0x4faf04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarObjAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	GameplayTagContainer NotifyTags;//[Offset: 0x1308, Size: 0x20]
	GameplayTagContainer RepNotifiedTags;//[Offset: 0x1328, Size: 0x20]
	void OnRep_RepNotifiedTags(out const GameplayTagContainer Previous);// 0x551c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarObjGameplayAbility.GameplayAbility.Object
	class GameplayEffect* ActivateEffect;//[Offset: 0x400, Size: 0x8]
	float CostEnergy;//[Offset: 0x408, Size: 0x4]
	SolarInteractableActor* GetAbilityInstigator();// 0x551a04f39041
	Actor* GetAbilityEffectUser();// 0x551904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarElectricShop.SolarInteractableActor.Actor.Object
	int MaxWeaponLevel;//[Offset: 0x238, Size: 0x4]
	int MaxShieldLevel;//[Offset: 0x23c, Size: 0x4]
	float[] UpgradeEnergyCosts;//[Offset: 0x240, Size: 0x10]
	StaticMeshComponent* ShopMesh;//[Offset: 0x250, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x258, Size: 0x8]
	int SpawnID;//[Offset: 0x260, Size: 0x4]
	bool bSpecificShopID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	DataTable* ShopMeshPathTable;//[Offset: 0x268, Size: 0x28]
	bool bIfShowInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	class MapMarkBase* MapIcon;//[Offset: 0x298, Size: 0x28]
	int MapIconID;//[Offset: 0x2c0, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x2c4, Size: 0x4]
	int ShopID;//[Offset: 0x2c8, Size: 0x4]
	bool bIsBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	float TirggerDistance;//[Offset: 0x2d0, Size: 0x4]
	enum CurrentModeAnimType;//[Offset: 0x2d4, Size: 0x1]
	enum WantedModeAnimType;//[Offset: 0x2d5, Size: 0x1]
	SolarCharacter*[] InstigateCharacters;//[Offset: 0x2d8, Size: 0x10]
	DataTable* ShopMeshDataTable;//[Offset: 0x2e8, Size: 0x8]
	ElectricShopSection[] ItemSections;//[Offset: 0x2f0, Size: 0x10]
	ElectricShopCDRecord[] ItemCDRecords;//[Offset: 0x300, Size: 0x10]
	float[] PoolRefreshTimeList;//[Offset: 0x310, Size: 0x10]
	PoolRefreshInfo[] PoolRefreshInfoList;//[Offset: 0x320, Size: 0x10]
	int CurPoolGroupID;//[Offset: 0x330, Size: 0x4]
	MapMarkBase*[] MapMarkArray;//[Offset: 0x348, Size: 0x10]
	TimerHandle[] CachedHandles;//[Offset: 0x358, Size: 0x10]
	float DemoRotationSpeed;//[Offset: 0x368, Size: 0x4]
	float DemoSwtichTime;//[Offset: 0x36c, Size: 0x4]
	float DemoOffsetFromZ;//[Offset: 0x370, Size: 0x4]
	DataTable* ItemDemoBPTable;//[Offset: 0x378, Size: 0x28]
	DataTable* ItemDemoBPDataTable;//[Offset: 0x3a0, Size: 0x8]
	<SoftObjectPath,ElectricShopItemDemo*> DemoActorMap;//[Offset: 0x3a8, Size: 0x50]
	ElectricShopItemDemo* CurDemo;//[Offset: 0x3f8, Size: 0x8]
	TimerHandle DemoLoopPlaybackHandle;//[Offset: 0x400, Size: 0x8]
	ElectricShopItemDemo*[] SpawnedDemoActorList;//[Offset: 0x408, Size: 0x10]
	Object*[] CachedDemoItemsClass;//[Offset: 0x440, Size: 0x10]
	void UpgradeWeaponResponse(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x514c04f39041
	void UpgradeShieldResponse(SolarCharacter* InCharacter);// 0x514b04f39041
	bool ServerUpgradeWeapon(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x514a04f39041
	bool ServerUpgradeShield(SolarCharacter* InCharacter);// 0x514904f39041
	void ServerStatisticElectricShop(const SolarCharacter* ActivateCharacter, enum StatisticType, const int InValueA, const int InValueB);// 0x514804f39041
	bool ServerPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarCharacter* InCharacter);// 0x514704f39041
	bool RemoveInstigator(SolarCharacter* InCharacter);// 0x514604f39041
	bool RefreshSellingItem(const int InProductID);// 0x514504f39041
	void RefreshItemCDRecords(out const ElectricShopItem InItem, FString InPlayerID);// 0x514404f39041
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarCharacter* InCharacter);// 0x514304f39041
	void OnShopIDReplicatedBP();// 0x514204f39041
	void OnRep_ShopID();// 0x514104f39041
	void OnRep_ItemSections();// 0x514004f39041
	void OnRep_ItemCDRecords();// 0x513f04f39041
	void OnRep_CurPoolGroupID(int PrePoolGroupID);// 0x513e04f39041
	void OnPlayWeaponUpgradeAnim();// 0x513d04f39041
	void OnPlayPurchaseAnim();// 0x513c04f39041
	void OnPlayIdleAnim();// 0x513b04f39041
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x513a04f39041
	void OnCurrentAnimFinish();// 0x513904f39041
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x513804f39041
	bool IsProductRecommendEquipType(const enum ProductType);// 0x513704f39041
	bool IsInteractable(SolarCharacter* InCharacter);// 0x513604f39041
	void InitWeaponUpgradeEnergyCost();// 0x513504f39041
	void InitializeElectricShop();// 0x513404f39041
	float GetServerWorldTime();// 0x513304f39041
	float GetRemainingCD(const int ProductID);// 0x513204f39041
	float GetDiscountedPrice(SolarCharacter* BuyerCharacter, float Price);// 0x513104f39041
	void GetDiscountedItem(SolarCharacter* BuyerCharacter, out ElectricShopItem OutItem);// 0x513004f39041
	bool GetCurrentItem(const int InProductID, out ElectricShopItem OutItem);// 0x512f04f39041
	FString GetBuyerID(const int ProductID);// 0x512e04f39041
	ElectricShopItem GenerateNewItem(const int InProductID);// 0x512d04f39041
	void ClientUpgradeWeaponSuccess();// 0x512c04f39041
	void ClientUpgradeShieldSuccess();// 0x512b04f39041
	void ClientUpdateModelAnim();// 0x512a04f39041
	void ClientPurchaseSuccess();// 0x512904f39041
	void ClientHUDUpgradeWeaponSuccess(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x512804f39041
	void ClientHUDUpgradeShieldSuccess(SolarCharacter* InCharacter);// 0x512704f39041
	void ClientHUDPurchaseSuccess(const int InProductID, SolarCharacter* InCharacter);// 0x512604f39041
	void ClientHUDPoolRefresh(SolarCharacter* InCharacter);// 0x512504f39041
	void ClientHUDItemRefresh(SolarCharacter* InCharacter);// 0x512404f39041
	void ClientHUDCDRefresh(SolarCharacter* InCharacter);// 0x512304f39041
	void AddInstigator(SolarCharacter* InCharacter);// 0x512204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	MiniMapBase* MapOwner;//[Offset: 0x400, Size: 0x8]
	Vector2D MarkIconRealLoc;//[Offset: 0x408, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x410, Size: 0x8]
	bool IsOnBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	enum MarkerType;//[Offset: 0x419, Size: 0x1]
	bool IsMapObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41a, Size: 0x1]
	bool MoveAble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41b, Size: 0x1]
	bool SupportEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	bool SupportEdgeWithBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 0x1]
	Actor* TargetActorRef;//[Offset: 0x420, Size: 0x8]
	void UpdateIconWithActor(Actor* InTargetActor);// 0x49d004f39041
	void SetUpdateState(bool ShouldUpdateLocation);// 0x49cf04f39041
	void SetMarkPos(out const Vector Loc);// 0x49ce04f39041
	void SetEdgeSupport(bool IsSupportEdge, bool WithBigMap);// 0x49cd04f39041
	void SetColorOpacityIndex(byte InColorOpacityIndex);// 0x49cc04f39041
	void OnReceivedMarkInit();// 0x49cb04f39041
	void OnBigMapOpen();// 0x49ca04f39041
	void InitVehicleMarkIcon(int VehicleID, int InputIndex, int SpawnerIndex);// 0x49c904f39041
	void InitStaticIcon(int MarkID);// 0x49c804f39041
	void InitMarkIcon(int MarkID, Actor* InTargetActor, bool InMoveable);// 0x49c704f39041
	void EdgeFix(Vector2D Pos);// 0x49c604f39041
	void CleanData();// 0x49c504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MaxPool;//[Offset: 0x400, Size: 0x4]
	<FString,MapMarkElemArray> MapMarkPool;//[Offset: 0x408, Size: 0x50]
	void RemoveMarkIcon(MapMarkBase* InMapMark);// 0x49ed04f39041
	void RemoveDotLineOnMap(int DotLineID);// 0x49ec04f39041
	void RemoveAllMapMarks();// 0x49eb04f39041
	bool RecycleMapMark(FString MapMarkName, MapMarkBase* MapMarkToRecycle);// 0x49ea04f39041
	void MapScaleFormat(MapMarkBase* MapMark);// 0x49e904f39041
	MapMarkBase* InitMarkIconOnMapFrame(class MapMarkBase InMapMarkClass, out const Vector2D Pivot, int ZOrder);// 0x49e804f39041
	MapMarkBase* InitMarkIcon(class MapMarkBase InMapMarkClass, out const Vector2D InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int ZOrder);// 0x49e704f39041
	void InitMapMarkPool();// 0x49e604f39041
	MapMarkBase* GetFreeMapMark(FString MapMarkName);// 0x49e504f39041
	MapMarkBase* CreateMapMark(FString MapMarkName);// 0x49e404f39041
	int AddDotLineOnMap(Actor* StartPointActor, Actor* EndPointActor, LinearColor DotLineColor);// 0x49e304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MapMarkElemArray
	MapMarkElem[] MapMarkElems;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MapMarkElem
	MapMarkBase* MapMark;//[Offset: 0x0, Size: 0x8]
	bool bUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ElectricShopSection
	ElectricShopItem[] Items;//[Offset: 0x0, Size: 0x10]
	float CoolDownDuration;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ElectricShopItem
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float Prize;//[Offset: 0x4, Size: 0x4]
	int Num;//[Offset: 0x8, Size: 0x4]
	int ProductID;//[Offset: 0xc, Size: 0x4]
	float CoolDown;//[Offset: 0x10, Size: 0x4]
	int Generation;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ElectricShopCDRecord
	int ProductID;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	float EndWorldTime;//[Offset: 0x8, Size: 0x4]
	FString BuyerID;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PoolRefreshInfo
	int PoolGroupID;//[Offset: 0x0, Size: 0x4]
	float PoolRefreshTime;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ElectricShopItemDemo.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarShieldUpgradeItemShop.SolarInteractableActor.Actor.Object
	int groupid;//[Offset: 0x238, Size: 0x4]
	int ServerActiveGroupID;//[Offset: 0x23c, Size: 0x4]
	int UpgradeAnimStartFrame;//[Offset: 0x248, Size: 0x4]
	int UpgradeAnimEndFrame;//[Offset: 0x24c, Size: 0x4]
	float UpgradeAnimDuration;//[Offset: 0x250, Size: 0x4]
	int MatPrimitiveDataIndex;//[Offset: 0x254, Size: 0x4]
	StaticMeshComponent* BodyMesh;//[Offset: 0x258, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x260, Size: 0x8]
	StaticMeshComponent* HeadUpIconMesh;//[Offset: 0x268, Size: 0x8]
	StaticMeshComponent* BodyScreenMesh;//[Offset: 0x270, Size: 0x8]
	int UpgradeItemNum;//[Offset: 0x290, Size: 0x4]
	ParticleSystem* InteractionTriggeredEffect;//[Offset: 0x298, Size: 0x28]
	SolarIntArray InteractedPlayerIDList;//[Offset: 0x2c0, Size: 0x130]
	int Uid;//[Offset: 0x3f0, Size: 0x4]
	SphereComponent* AudioTriggerComp;//[Offset: 0x410, Size: 0x8]
	FString SNameHint;//[Offset: 0x418, Size: 0x10]
	FString SNameStopHint;//[Offset: 0x428, Size: 0x10]
	void OnRep_UID();// 0x578b04f39041
	void OnRep_InteractedPlayerIDList();// 0x578a04f39041
	void OnRep_ActiveGroupID();// 0x578904f39041
	void OnOtherPlayerInteracted();// 0x578804f39041
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* InSpectateInfo);// 0x578704f39041
	void OnBindLocalPlayerSpectateTargetChanged(SolarSpectateInfo* SpecInfo);// 0x578604f39041
	void OnActorEndOverlapAudioSphere(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x578504f39041
	void OnActorEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x578404f39041
	void OnActorBeginOverlapAudioSphere(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x578304f39041
	void OnActorBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x578204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarIntArray.FastArraySerializer
	SolarIntEntry[] Elements;//[Offset: 0x108, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarIntEntry.FastArraySerializerItem
	int IntProperty;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGlobalRepInfo.Info.Actor.Object
	SolarShieldItemShopDataArray ShieldItemShopInteractInfo;//[Offset: 0x228, Size: 0x130]
	int ShieldUpgradeItemShopGroupID;//[Offset: 0x358, Size: 0x4]
	void OnRep_ShieldUpgradeItemShopGroupID();// 0x525704f39041
	void OnRep_ShieldItemShopInteractInfo();// 0x525604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarShieldItemShopDataArray.FastArraySerializer
	SolarShieldItemShopDataEntry[] Elements;//[Offset: 0x108, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarShieldItemShopDataEntry.FastArraySerializerItem
	Vector_NetQuantize Pos;//[Offset: 0xc, Size: 0xc]
	int Uid;//[Offset: 0x18, Size: 0x4]
	byte InteractState;//[Offset: 0x1c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlatformHelper.Object
	SolarPlatformStats* SolarPlatformStats;//[Offset: 0x30, Size: 0x8]
	SolarGameInstanceBase* SolarGameInstanceBase;//[Offset: 0x38, Size: 0x8]
	bool UseRenderThread();// 0x55ba04f39041
	bool SupportsMultithreading();// 0x55b904f39041
	double Seconds();// 0x55b804f39041
	void ReceiveShutdown();// 0x55b704f39041
	void ReceiveInit();// 0x55b604f39041
	bool IsThisApplicationForeground();// 0x55b504f39041
	bool IsRunningOnBattery();// 0x55b404f39041
	bool Is64bitOperatingSystem();// 0x55b304f39041
	int64 GetVideoMemory();// 0x55b204f39041
	FString GetUniqueDeviceId();// 0x55b104f39041
	FString GetTimeZoneId();// 0x55b004f39041
	FString GetSuitableStringWithUnitOfBytes(uint64 NumberOfBytes, FString ExtraUnit);// 0x55af04f39041
	SolarPlatformStats* GetSolarPlatformStats();// 0x55ae04f39041
	int GetSimultaneousInstanceId();// 0x55ad04f39041
	FString GetPrimaryGPUBrand();// 0x55ac04f39041
	FString GetPathVarDelimiter();// 0x55ab04f39041
	void GetOSVersions(out FString out_OSVersionLabel, out FString out_OSSubVersionLabel);// 0x55aa04f39041
	FString GetOSVersion();// 0x55a904f39041
	uint32 GetMoniterWidth();// 0x55a804f39041
	int GetMoniterRefreshRate();// 0x55a704f39041
	uint32 GetMoniterHeight();// 0x55a604f39041
	int GetMaxPathLength();// 0x55a504f39041
	GameUserSettings* GetGameUserSettings();// 0x55a404f39041
	FString GetEnvironmentVariable(FString VariableName);// 0x55a304f39041
	Engine* GetEngine();// 0x55a204f39041
	bool GetDiskTotalAndFreeSpace(FString InPath, out uint64 TotalNumberOfBytes, out uint64 NumberOfFreeBytes);// 0x55a104f39041
	float GetDeviceTemperatureLevel();// 0x55a004f39041
	FString GetDeviceMakeAndModel();// 0x559f04f39041
	FString GetDefaultDeviceProfileName();// 0x559e04f39041
	FString GetCPUVendor();// 0x559d04f39041
	uint32 GetCPUInfo();// 0x559c04f39041
	FString GetCPUChipset();// 0x559b04f39041
	FString GetCPUBrand();// 0x559a04f39041
	int GetBatteryLevel();// 0x559904f39041
	FString ClipboardPaste();// 0x559804f39041
	void ClipboardCopy(FString str);// 0x559704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlatformStats.Object
	uint64 MaxUsedPhysical;//[Offset: 0x30, Size: 0x8]
	void ReceiveWorldCleanup(World* World, bool bSessionEnded, bool bCleanupResources);// 0x55c404f39041
	void ReceiveShutdown();// 0x55c304f39041
	void ReceivePostWorldInitialization(World* World);// 0x55c204f39041
	void ReceiveInit();// 0x55c104f39041
	uint64 GetRHIUsedMemory();// 0x55c004f39041
	float GetRenderThreadTime();// 0x55bf04f39041
	int GetNumDrawCalls();// 0x55be04f39041
	int GetMinFPS();// 0x55bd04f39041
	float GetGameThreadTime();// 0x55bc04f39041
	int GetAverageFPS();// 0x55bb04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4]
	int WindowPosX;//[Offset: 0x90, Size: 0x4]
	int WindowPosY;//[Offset: 0x94, Size: 0x4]
	int FullscreenMode;//[Offset: 0x98, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4]
	uint32 Version;//[Offset: 0xa4, Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10]
	void ValidateSettings();// 0x682504f39041
	bool SupportsHDRDisplayOutput();// 0x682404f39041
	void SetVSyncEnabled(bool bEnable);// 0x682304f39041
	void SetVisualEffectQuality(int Value);// 0x682204f39041
	void SetViewDistanceQuality(int Value);// 0x682104f39041
	void SetToDefaults();// 0x682004f39041
	void SetTextureQuality(int Value);// 0x681f04f39041
	void SetShadowQuality(int Value);// 0x681e04f39041
	void SetShadingQuality(int Value);// 0x681d04f39041
	void SetScreenResolution(IntPoint Resolution);// 0x681c04f39041
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x681b04f39041
	void SetResolutionScaleValue(int NewScaleValue);// 0x681a04f39041
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x681904f39041
	void SetPostProcessingQuality(int Value);// 0x681804f39041
	void SetOverallScalabilityLevel(int Value);// 0x681704f39041
	void SetFullscreenMode(byte InFullscreenMode);// 0x681604f39041
	void SetFrameRateLimit(float NewLimit);// 0x681504f39041
	void SetFoliageQuality(int Value);// 0x681404f39041
	void SetDynamicResolutionEnabled(bool bEnable);// 0x681304f39041
	void SetBenchmarkFallbackValues();// 0x681204f39041
	void SetAudioQualityLevel(int QualityLevel);// 0x681104f39041
	void SetAntiAliasingQuality(int Value);// 0x681004f39041
	void SaveSettings();// 0x680f04f39041
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x680e04f39041
	void RevertVideoMode();// 0x680d04f39041
	void ResetToCurrentSettings();// 0x680c04f39041
	void LoadSettings(bool bForceReload);// 0x680b04f39041
	bool IsVSyncEnabled();// 0x680a04f39041
	bool IsVSyncDirty();// 0x680904f39041
	bool IsScreenResolutionDirty();// 0x680804f39041
	bool IsHDREnabled();// 0x680704f39041
	bool IsFullscreenModeDirty();// 0x680604f39041
	bool IsDynamicResolutionEnabled();// 0x680504f39041
	bool IsDynamicResolutionDirty();// 0x680404f39041
	bool IsDirty();// 0x680304f39041
	int GetVisualEffectQuality();// 0x680204f39041
	int GetViewDistanceQuality();// 0x680104f39041
	int GetTextureQuality();// 0x680004f39041
	int GetSyncInterval();// 0x67ff04f39041
	int GetShadowQuality();// 0x67fe04f39041
	int GetShadingQuality();// 0x67fd04f39041
	IntPoint GetScreenResolution();// 0x67fc04f39041
	float GetResolutionScaleNormalized();// 0x67fb04f39041
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x67fa04f39041
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x67f904f39041
	float GetRecommendedResolutionScale();// 0x67f804f39041
	byte GetPreferredFullscreenMode();// 0x67f704f39041
	int GetPostProcessingQuality();// 0x67f604f39041
	int GetOverallScalabilityLevel();// 0x67f504f39041
	IntPoint GetLastConfirmedScreenResolution();// 0x67f404f39041
	byte GetLastConfirmedFullscreenMode();// 0x67f304f39041
	GameUserSettings* GetGameUserSettings();// 0x67f204f39041
	byte GetFullscreenMode();// 0x67f104f39041
	float GetFrameRateLimit();// 0x67f004f39041
	int GetFramePace();// 0x67ef04f39041
	int GetFoliageQuality();// 0x67ee04f39041
	IntPoint GetDesktopResolution();// 0x67ed04f39041
	IntPoint GetDefaultWindowPosition();// 0x67ec04f39041
	byte GetDefaultWindowMode();// 0x67eb04f39041
	float GetDefaultResolutionScale();// 0x67ea04f39041
	IntPoint GetDefaultResolution();// 0x67e904f39041
	int GetCurrentHDRDisplayNits();// 0x67e804f39041
	int GetAudioQualityLevel();// 0x67e704f39041
	int GetAntiAliasingQuality();// 0x67e604f39041
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x67e504f39041
	void ConfirmVideoMode();// 0x67e404f39041
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x67e304f39041
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x67e204f39041
	void ApplyNonResolutionSettings();// 0x67e104f39041
	void ApplyHardwareBenchmarkResults();// 0x67e004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18]
	Font* SmallFont;//[Offset: 0x50, Size: 0x8]
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18]
	Font* MediumFont;//[Offset: 0x70, Size: 0x8]
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18]
	Font* LargeFont;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10]
	FString[] AdditionalFontNames;//[Offset: 0xe8, Size: 0x10]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 0x8]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 0x8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 0x18]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 0x8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 0x8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 0x18]
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x190, Size: 0x8]
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x198, Size: 0x18]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1b0, Size: 0x8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 0x8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 0x8]
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 0x18]
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 0x8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 0x8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x288, Size: 0x8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 0x8]
	SoftClassPath RuntimeAssetsCollectionClassName;//[Offset: 0x2b0, Size: 0x18]
	RuntimeAssetsCollectionBase* RuntimeAssetsCollection;//[Offset: 0x2c8, Size: 0x8]
	Texture2D* DefaultTexture;//[Offset: 0x2d0, Size: 0x8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2d8, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2f0, Size: 0x8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2f8, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x310, Size: 0x8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x318, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x330, Size: 0x8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x338, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x350, Size: 0x8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x358, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x370, Size: 0x8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x378, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x390, Size: 0x8]
	FString WireframeMaterialName;//[Offset: 0x398, Size: 0x10]
	Material* DebugMeshMaterial;//[Offset: 0x3a8, Size: 0x8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x3b0, Size: 0x18]
	Material* EmissiveMeshMaterial;//[Offset: 0x3c8, Size: 0x8]
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3d0, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x3e8, Size: 0x8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3f0, Size: 0x10]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x400, Size: 0x8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x408, Size: 0x10]
	Material* LightingTexelDensityMaterial;//[Offset: 0x418, Size: 0x8]
	FString LightingTexelDensityName;//[Offset: 0x420, Size: 0x10]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x430, Size: 0x8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x438, Size: 0x10]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x448, Size: 0x8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x450, Size: 0x10]
	Material* RemoveSurfaceMaterial;//[Offset: 0x460, Size: 0x8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x468, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x480, Size: 0x8]
	FString VertexColorMaterialName;//[Offset: 0x488, Size: 0x10]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x498, Size: 0x8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x4a0, Size: 0x10]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x4b0, Size: 0x8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x4b8, Size: 0x10]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4c8, Size: 0x8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4d0, Size: 0x10]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4e0, Size: 0x8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4e8, Size: 0x10]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4f8, Size: 0x8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x500, Size: 0x10]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x510, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x528, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x530, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x538, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x540, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x548, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x550, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x558, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x560, Size: 0x8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x568, Size: 0x8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x570, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x588, Size: 0x8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x590, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x5a8, Size: 0x8]
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x5b0, Size: 0x8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x5b8, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x5d0, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5e0, Size: 0x10]
	LinearColor[] QuadComplexityColors;//[Offset: 0x5f0, Size: 0x10]
	LinearColor[] LightComplexityColors;//[Offset: 0x600, Size: 0x10]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x610, Size: 0x10]
	LinearColor[] LODColorationColors;//[Offset: 0x620, Size: 0x10]
	LinearColor[] HLODColorationColors;//[Offset: 0x630, Size: 0x10]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x640, Size: 0x10]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x650, Size: 0x4]
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x654, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x658, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x65c, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x660, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x664, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x668, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x66c, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x670, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x680, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x690, Size: 0x10]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x6a0, Size: 0x8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6a8, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6c0, Size: 0x10]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6d0, Size: 0x10]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6e0, Size: 0x10]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6f0, Size: 0x10]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x700, Size: 0x8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x708, Size: 0x18]
	Texture2D* BlueNoiseTexture;//[Offset: 0x720, Size: 0x8]
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x728, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x740, Size: 0x8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x748, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x760, Size: 0x8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x768, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x780, Size: 0x8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x788, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x7a8, Size: 0x8]
	FString[] DeferredCommands;//[Offset: 0x7b0, Size: 0x10]
	int TickCycles;//[Offset: 0x7c0, Size: 0x4]
	int GameCycles;//[Offset: 0x7c4, Size: 0x4]
	int ClientCycles;//[Offset: 0x7c8, Size: 0x4]
	float NearClipPlane;//[Offset: 0x7cc, Size: 0x4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x7d4, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d8, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d8, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d8, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d8, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d8, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d8, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x7dc, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7e0, Size: 0x10]
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7f0, Size: 0x8]
	FString SkipLODStripStaticMeshNames;//[Offset: 0x818, Size: 0x10]
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x828, Size: 0x18]
	TimecodeProvider* TimecodeProvider;//[Offset: 0x840, Size: 0x8]
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x868, Size: 0x18]
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x884, Size: 0x8]
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x88c, Size: 0x4]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x894, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x89c, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x8a0, Size: 0x4]
	Color C_AddWire;//[Offset: 0x8a4, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x8a8, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x8ac, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x8b0, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x8b4, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x8b8, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x8bc, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x8c0, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x8c4, Size: 0x4]
	Color C_Volume;//[Offset: 0x8c8, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x8cc, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x8d0, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x8d8, Size: 0x10]
	enum TransitionType;//[Offset: 0x8e8, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x8f0, Size: 0x10]
	FString TransitionGameMode;//[Offset: 0x900, Size: 0x10]
	float MeshLODRange;//[Offset: 0x910, Size: 0x4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x914, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x918, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x91c, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x920, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x924, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x92c, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x930, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x938, Size: 0x10]
	float NetClientTicksPerSecond;//[Offset: 0x948, Size: 0x4]
	float DisplayGamma;//[Offset: 0x94c, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x950, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x954, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x964, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x974, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x984, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x994, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a5, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a5, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a5, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9a5, Size: 0x1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x9a8, Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x9b0, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b4, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0x9b8, Size: 0x10]
	float SelectionHighlightIntensity;//[Offset: 0x9c8, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x9cc, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9d0, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc20, Size: 0x10]
	FString[] ServerActors;//[Offset: 0xc30, Size: 0x10]
	FString[] RuntimeServerActors;//[Offset: 0xc40, Size: 0x10]
	float NetErrorLogInterval;//[Offset: 0xc50, Size: 0x4]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc54, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0xc68, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RuntimeAssetsCollectionBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10]
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10]
	FString NewPluginName;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EngineCustomTimeStep.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4]
	Timecode GetTimecode();// 0x6cf204f39041
	enum GetSynchronizationState();// 0x6cf104f39041
	QualifiedFrameTime GetQualifiedFrameTime();// 0x6cf004f39041
	FrameRate GetFrameRate();// 0x6cef04f39041
	Timecode GetDelayedTimecode();// 0x6cee04f39041
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x6ced04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4]
	int Minutes;//[Offset: 0x4, Size: 0x4]
	int Seconds;//[Offset: 0x8, Size: 0x4]
	int Frames;//[Offset: 0xc, Size: 0x4]
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	FString Comment;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponGrowthManager.Object
	FString GetWeaponBpPath(int ID);// 0x619104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: IMChatObject.Object
	bool GMEIsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool NertcIsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	void UnInitEvents();// 0x495504f39041
	void SendPlayerPosToIMServerEveryFrame(out const Vector PlayerPosition, out const Rotator PlayerRotator, float DeltaTime);// 0x495404f39041
	void NotifyBattlePlayerChanged(int NumPlayers, int PreviousNumPlayers);// 0x495304f39041
	void InitEnvents();// 0x495204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLuaManager.Object
	delegate OnHandleLuaException;//[Offset: 0x30, Size: 0x10]
	SoftObjectPath LuaErrorWidgetPath;//[Offset: 0x50, Size: 0x18]
	LuaErrorWidgetBase* LuaErrorWidget;//[Offset: 0x70, Size: 0x8]
	void SetLuaErrorPopWidget(LuaErrorWidgetBase* Widget);// 0x54c204f39041
	void OnLuaContextCleanup(bool bFullCleanup);// 0x54c104f39041
	enum GetBuildConfiguration();// 0x54c004f39041
	void AddToDoNotShowAgainList(FString Msg);// 0x54bf04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LuaErrorWidgetBase.UserWidget.Widget.Visual.Object
	void ShowLuaError(out const FString[] LuaErrorMsgs);// 0x54be04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameStatistics.Object
	FString PlayerIdName;//[Offset: 0x30, Size: 0x10]
	FString LogTypeName;//[Offset: 0x40, Size: 0x10]
	SolarGameInstanceBase* Owner;//[Offset: 0x58, Size: 0x8]
	SolarGameStatisticsLogHeadInfo LogHeadInfo;//[Offset: 0x60, Size: 0x28]
	SolarGameStatisticsLogHeadInfo StaticGetLogHeadInfo();// 0x520004f39041
	void SetSwapLogFileSize(int InSize);// 0x51ff04f39041
	void SetSwapLogFileInterval(int InInterval);// 0x51fe04f39041
	void SetLogValueSeparater(FString InValueSeparater);// 0x51fd04f39041
	void SetLogTerminator(FString InTerminator);// 0x51fc04f39041
	void SetLogFileNameSuffix(FString InLogFileNameSuffix);// 0x51fb04f39041
	void SetLogFileNamePrefix(FString InLogFileNamePrefix);// 0x51fa04f39041
	void SetLogFileExtension(FString InLogFileExtension);// 0x51f904f39041
	void SetLogFileDir(FString InLogFileDir);// 0x51f804f39041
	void SetLogElementSeparater(FString InElementSeparater);// 0x51f704f39041
	void SetLogCheckIntervalMS(int InLogCheckIntervalMS);// 0x51f604f39041
	void ReceiveShutdown();// 0x51f504f39041
	void ReceiveInit();// 0x51f404f39041
	void NotifyBattleStart(FString InBattleID);// 0x51f304f39041
	void NotifyBattleEnd();// 0x51f204f39041
	void LogInternal(FString InLog);// 0x51f104f39041
	void LogGameStats_KeyValues(FString InKey, out const FString[] InValues);// 0x51f004f39041
	void LogGameStats_KeyValue(FString InKey, FString InValue);// 0x51ef04f39041
	void LogGameStats_Key(FString InKey);// 0x51ee04f39041
	bool IsUseEmptyHeadData(FString InPlayerID);// 0x51ed04f39041
	int GetSwapLogFileSize();// 0x51ec04f39041
	int GetSwapLogFileInterval();// 0x51eb04f39041
	FString GetSCMLogDataString(const bool bIncludeStatistics, SolarPlayerState* InPS);// 0x51ea04f39041
	FString GetProperLogElement(FString InElement);// 0x51e904f39041
	FString GetLogValueSeparater();// 0x51e804f39041
	FString GetLogTerminator();// 0x51e704f39041
	SolarGameStatisticsLogHeadInfo GetLogHeadInfo();// 0x51e604f39041
	FString GetLogFileNameSuffix();// 0x51e504f39041
	FString GetLogFileNamePrefix();// 0x51e404f39041
	FString GetLogFileExtension();// 0x51e304f39041
	FString GetLogFileDir();// 0x51e204f39041
	FString GetLogElementSeparater();// 0x51e104f39041
	FString GetLogDataString(const bool bIncludeStatistics, FString InPlayerID);// 0x51e004f39041
	int GetLogCheckIntervalMS();// 0x51df04f39041
	FString GetHeadDataString(FString InPlayerID);// 0x51de04f39041
	FString GetEmptyHeadDataString();// 0x51dd04f39041
	bool CanReportBIWrapper(FString InLogType);// 0x51dc04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameStatisticsLogHeadInfo
	int BattleInstanceId;//[Offset: 0x0, Size: 0x4]
	int PIEInstance;//[Offset: 0x4, Size: 0x4]
	FString BattleID;//[Offset: 0x8, Size: 0x10]
	FString WorldName;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponMergeMeshManager.Object
	WeaponMergeMeshStruct[] MergeMeshArray;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponMergeMeshStruct
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	int weaponid;//[Offset: 0x10, Size: 0x4]
	int SkinId;//[Offset: 0x14, Size: 0x4]
	int[] Parts;//[Offset: 0x18, Size: 0x10]
	SkeletalMesh* MergeMesh;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CrashReportManager.Object
	void SetUserID(FString InUserId);// 0x471304f39041
	void SetDeviceUUID(FString InDeviceUUID);// 0x471204f39041
	void ReportLuaException(FString ErrorMsg, FString Traceback, bool bHandled);// 0x471104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPopPanelManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarApplicationLifetimeManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	int64 AppWillDeactivateTimestamp;//[Offset: 0x38, Size: 0x8]
	int64 AppHasReactivatedTimestamp;//[Offset: 0x40, Size: 0x8]
	void ReceiveOnWindowMinimized(const bool bIsMinimized);// 0x4e8e04f39041
	void ReceiveOnStandardScreenSizeChange(int SizeX, int SizeY);// 0x4e8d04f39041
	void ReceiveOnAppWillDeactivate(int64 InTimestamp);// 0x4e8c04f39041
	void ReceiveOnAppHasReactivated(int64 InTimestamp);// 0x4e8b04f39041
	void ReceiveOnAppActivationStateChanged(bool AppActivated);// 0x4e8a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeActorManager.Object
	<FString,SolarHomeActor*> SpawnedHomeActors;//[Offset: 0x40, Size: 0x50]
	<IntVector,SolarHomeActor*> SpawnedConstructsLocKey;//[Offset: 0x90, Size: 0x50]
	<IntVector,SolarHomeActor*> PreviewConstructsLocKey;//[Offset: 0xe0, Size: 0x50]
	<SolarHomeConnectedGraph*> ConnectedGraphSet;//[Offset: 0x130, Size: 0x50]
	<FString,SolarHomeActor*> ClippingHomeActors;//[Offset: 0x180, Size: 0x50]
	<FString,SolarHomeActor*> InValidHomeActors;//[Offset: 0x1d0, Size: 0x50]
	<FString,SubPoolOfHomeActor*> HomeActorPools;//[Offset: 0x220, Size: 0x50]
	<int,HomeActorStaticData> StaticDataMap;//[Offset: 0x270, Size: 0x50]
	<FString,class Object> HomeActorClassPool;//[Offset: 0x2c0, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> SpawnedSpacesLocKey;//[Offset: 0x378, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> ShowsSpacesLocKey;//[Offset: 0x3c8, Size: 0x50]
	DataTable* HomeObjectTable;//[Offset: 0x470, Size: 0x8]
	SolarHomeShaderConfig* ShaderConfig;//[Offset: 0x478, Size: 0x8]
	DataTable* TextureDataTable;//[Offset: 0x480, Size: 0x8]
	DataTable* IconDataTable;//[Offset: 0x488, Size: 0x8]
	DataTable* PicDataTable;//[Offset: 0x490, Size: 0x8]
	int BuildCountPerFrame;//[Offset: 0x498, Size: 0x4]
	SolarHomeSpaceSpawner* HomeSpaceSpawner;//[Offset: 0x4b0, Size: 0x8]
	SolarHomePlayerController* HomePlayerCtrl;//[Offset: 0x4b8, Size: 0x8]
	SolarWaterActorNew* WaterActor;//[Offset: 0x4e0, Size: 0x8]
	<HomeShaderData,MaterialInstanceDynamic*> HomeObjShadersPool;//[Offset: 0x4e8, Size: 0x50]
	bool bIsConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]
	bool IsLoadingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 0x1]
	<SolarHomeDragUI*> CacheDragUIs;//[Offset: 0x5a8, Size: 0x50]
	<SolarHomeDragUI*> UsedDragUIs;//[Offset: 0x5f8, Size: 0x50]
	void UpdateCanSendSaveMsg();// 0x52c704f39041
	void UpdateCameraLayer(int NewLayer);// 0x52c604f39041
	bool TrySelectHomeActor(out const FString SelectedThisID, bool bSelect);// 0x52c504f39041
	bool TrySaveAllHomeActors();// 0x52c404f39041
	void TryResetAllHomeActors();// 0x52c304f39041
	void TryRemoveHomeActors(out const FString[] RemoveThisID);// 0x52c204f39041
	void TryRemoveHomeActor(out const FString RemoveThisID);// 0x52c104f39041
	void TryRemoveAllInvalidHomeActors();// 0x52c004f39041
	void TryRemoveAllHomeActors();// 0x52bf04f39041
	void TryDyeHomeActor(out const FString DyeThisID, out const FString SlotName, out const FString TexturesID);// 0x52be04f39041
	void TryCreateHomeActorsNoLimit(out const HomeBuildReqData[] ReqDataArr);// 0x52bd04f39041
	void TryCreateHomeActors(out const HomeBuildReqData[] ReqData);// 0x52bc04f39041
	void TryCreateHomeActor(out const HomeBuildReqData ReqData);// 0x52bb04f39041
	void TryConfirmHomeActor(out const FString SelectedThisID, bool bCancel);// 0x52ba04f39041
	void TryCancelHomeActor(out const FString SelectedThisID);// 0x52b904f39041
	void SetLastSelectingThisID(out const FString InThisID);// 0x52b804f39041
	void SetLastCreateThisID(out const FString InThisID);// 0x52b704f39041
	void SetIsConstruct(bool bNewConstruct);// 0x52b604f39041
	void SetHomeActorValid(SolarHomeActor* TargetActor, bool bNewValid);// 0x52b504f39041
	void SetHoldingType(enum NewType);// 0x52b404f39041
	void SetDragUILoc(SolarHomeDragUI* TargetUI, out const Vector NewLoc);// 0x52b304f39041
	void SetCurSelectingThisID(out const FString InThisID, bool bSelected);// 0x52b204f39041
	void SetCurBuildingID(int NewItemID);// 0x52b104f39041
	void SelectHomeActor_Request(out const FString SelectedThisID, bool bSelect);// 0x52b004f39041
	void SelectHomeActor_Other(FString ThisID);// 0x52af04f39041
	void SaveBuilding_Request(bool bSave);// 0x52ae04f39041
	void RotateHomeActor(SolarHomeActor* TargetHomeActor, int DeltaAngle);// 0x52ad04f39041
	void RemoveHomeActors_Request(out const FString[] WillRemoveThisIDs);// 0x52ac04f39041
	void RemoveHomeActor_Request(out const FString WillRemoveThisID);// 0x52ab04f39041
	void RemoveAllHomeActors_Request();// 0x52aa04f39041
	void OnSelectingThisIDChanged(bool bSelect, out const FString NewThisID);// 0x52a904f39041
	void OnSelectingActorCanSaveChanged(bool bNewCanSave);// 0x52a804f39041
	bool OnIsDragChanged(bool bIsDrag);// 0x52a704f39041
	void OnInvalidActorsCountChanged(int NewCount);// 0x52a604f39041
	void OnHoldingTypeChanged(enum OldType, enum NewType);// 0x52a504f39041
	void NotifyWhenWallDevicePutOnOtherPlace();// 0x52a404f39041
	void NotifyWhenFloorDevicePutOnOtherPlace();// 0x52a304f39041
	void NotifyWhenClickActorOnOtherFloor();// 0x52a204f39041
	void NotifyWhenCeilingDevicePutOnOtherPlace();// 0x52a104f39041
	void NotifyLoadingUIChanged(bool bShow);// 0x52a004f39041
	void MoveDevice(SolarHomeActor* TargetHomeActor, const SolarHomeActor* ParHomeActor, enum HitDir, out const Vector NewLoc);// 0x529f04f39041
	void MoveConstruct(SolarHomeActor* TargetHomeActor, SolarHomeBaseSpace* NewSpace);// 0x529e04f39041
	bool HasFoundation();// 0x529d04f39041
	DataTable* GetTextureDataTable();// 0x529c04f39041
	HomeActorStaticData GetStaticDataByItemID(int ItemID);// 0x529b04f39041
	SolarHomeShaderConfig* GetShaderConfig();// 0x529a04f39041
	void GetMeshDefaultMat(int64 InItemID, out BuildMeshSlotData[] OutData);// 0x529904f39041
	FString GetLastCreateThisID();// 0x529804f39041
	int GetInvalidActorsCount();// 0x529704f39041
	SolarHomeSpaceSpawner* GetHomeSpaceSpawner();// 0x529604f39041
	SolarHomePlayerController* GetHomePlayerCtrl();// 0x529504f39041
	bool GetHomePicConfig(FString Name, out HomePic OutConfig);// 0x529404f39041
	bool GetHomeObjectConfig(int InItemID, out HomeObject OutConfig);// 0x529304f39041
	bool GetHomeIconConfig(FString Name, out HomeIcon OutConfig);// 0x529204f39041
	enum GetHomeActorSecondType(int ItemID);// 0x529104f39041
	enum GetHomeActorFirstType(int ItemID);// 0x529004f39041
	SolarHomeActor* GetHomeActorByThisID(out const FString InThisID);// 0x528f04f39041
	SolarHomeActor* GetHomeActorByLoc(out const Vector InLoc);// 0x528e04f39041
	FString GetCurSelectingThisID();// 0x528d04f39041
	enum GetCurHoldingItemType();// 0x528c04f39041
	int GetCurBuildingID();// 0x528b04f39041
	bool GetActorCanSave(SolarHomeActor* InActor);// 0x528a04f39041
	void ExportHomeActorDataToPath(FString FilePath);// 0x528904f39041
	void DyeingHomeActor_Request(out const FString WillDyeingThisID, out const FString SlotName, out const FString TexturesID);// 0x528804f39041
	void DeSelectAllHomeActors_Request();// 0x528704f39041
	void CreateHomeActors_Request(out const HomeBuildReqData[] WillCreateDatas);// 0x528604f39041
	void CreateHomeActor_Request(out const HomeBuildReqData WillCreateData);// 0x528504f39041
	void ClientUpdateHomeActor_UseQueue(out const HomeActorServerData UpdateData);// 0x528404f39041
	void ClientUpdateHomeActor(out const HomeActorServerData UpdateData);// 0x528304f39041
	void ClientRemoveHomeActor_UseQueue(out const HomeActorServerData RemoveData);// 0x528204f39041
	void ClientRemoveHomeActor(out const HomeActorServerData RemoveData);// 0x528104f39041
	void ClientCreateHomeActor_UseQueue(out const HomeActorServerData WillCreateData, enum InLoadingType);// 0x528004f39041
	bool ClientCreateHomeActor(out const HomeActorServerData WillCreateData, bool InIsConstruct);// 0x527f04f39041
	void Clear();// 0x527e04f39041
	void ChangeCameraLayer(int DeltaLayer);// 0x527d04f39041
	bool CanPreviewWithBuilding(int TypeID);// 0x527c04f39041
	bool CanDevicePlace(enum DeviceType, out const SolarHomeActor* HitConstruct, out const enum HitDir);// 0x527b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeBuildReqData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]
	BuildMeshSlotData[] MatDataArr;//[Offset: 0x20, Size: 0x10]
	FString ParentThisID;//[Offset: 0x30, Size: 0x10]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BuildMeshSlotData
	FString SlotName;//[Offset: 0x0, Size: 0x10]
	FString TexturesID;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeActor.Actor.Object
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x228, Size: 0x8]
	HomeActorStaticData HomeActorStaticData;//[Offset: 0x230, Size: 0x38]
	HomeActorServerData HomeActorServerData;//[Offset: 0x268, Size: 0x68]
	<FName,HomeOriginalShader> OriginalShaders;//[Offset: 0x2d0, Size: 0x50]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x330, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x338, Size: 0x10]
	<SolarHomeActor*,int> HitHomeActors;//[Offset: 0x348, Size: 0x50]
	SolarHomeConnectedGraph* CurrentConnectedGraph;//[Offset: 0x398, Size: 0x8]
	SolarHomeActor*[] NeighborFloors;//[Offset: 0x3a0, Size: 0x10]
	SolarHomeActor*[] NeighborWalls;//[Offset: 0x3b0, Size: 0x10]
	void UpdateHomeActor(out const HomeActorServerData NewServerData);// 0x527a04f39041
	void UpdateHitHomeActors(SolarHomeActor* NewActor, bool isAdd);// 0x527904f39041
	void SetStaticData(out const HomeActorStaticData NewData);// 0x527804f39041
	void SetServerData(out const HomeActorServerData NewData);// 0x527704f39041
	void SetMaterial(out const HomeActorServerData InServerData, bool bPlaceable);// 0x527604f39041
	void OnOverlayEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x527504f39041
	void OnOverlayBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x527404f39041
	void OnOverLap(Actor* OtherActor, bool isHitBegin);// 0x527304f39041
	void OnCreatedByServer(out const HomeActorStaticData NewStaticData, out const HomeActorServerData NewServerData);// 0x527204f39041
	void OnCanSaveChanged(bool bNewCanSave);// 0x527104f39041
	DataTable* GetTextureDataTable();// 0x527004f39041
	StaticMeshComponent* GetStaticMeshComp();// 0x526f04f39041
	HomeActorStaticData GetStaticData();// 0x526e04f39041
	SolarHomeShaderConfig* GetShaderConfig();// 0x526d04f39041
	HomeActorServerData GetServerData();// 0x526c04f39041
	bool GetNextLegalRotator(float RotAngle, out Rotator OutNextRot);// 0x526b04f39041
	enum GetHitSurface(out const Vector HitNormal);// 0x526a04f39041
	bool GetCanSave();// 0x526904f39041
	bool CanSelected();// 0x526804f39041
	bool CanRemove();// 0x526704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeActorServerData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	FString ThisID;//[Offset: 0x8, Size: 0x10]
	enum Owner;//[Offset: 0x18, Size: 0x4]
	bool isPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool isDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	Vector CurLocation;//[Offset: 0x20, Size: 0xc]
	Rotator CurRotation;//[Offset: 0x2c, Size: 0xc]
	BuildMeshSlotData[] FacesMatData;//[Offset: 0x38, Size: 0x10]
	FString ParentObject;//[Offset: 0x48, Size: 0x10]
	FString[] ChildObjects;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeActorStaticData
	int64 ItemID;//[Offset: 0x0, Size: 0x8]
	enum FirstType;//[Offset: 0x8, Size: 0x4]
	enum SecondType;//[Offset: 0xc, Size: 0x4]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	FString BpPath;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeOriginalShader
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeConnectedGraph.Object
	<SolarHomeActor*> ConnectedFloors;//[Offset: 0x28, Size: 0x50]
	<SolarHomeActor*> BaseWalls;//[Offset: 0x78, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeShaderConfig.DataAsset.Object
	SoftObjectPath EmissiveMatPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath MaskedMatPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath TranslucentMatPath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath DeleteEmissiveMatPath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath DeleteMaskedMatPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath DeleteTranslucentMatPath;//[Offset: 0xa8, Size: 0x18]
	LinearColor PrdinaryColor;//[Offset: 0xc0, Size: 0x10]
	LinearColor PlaceableColor;//[Offset: 0xd0, Size: 0x10]
	LinearColor UnPlaceableColor;//[Offset: 0xe0, Size: 0x10]
	LinearColor PlaceableColorOther;//[Offset: 0xf0, Size: 0x10]
	float BreathLightTimeScale;//[Offset: 0x100, Size: 0x4]
	float PlaceableEmissveA;//[Offset: 0x104, Size: 0x4]
	float UnPlaceableEmissveA;//[Offset: 0x108, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeDragUI.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeBaseSpace.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x228, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x230, Size: 0x10]
	BaseSpaceData BaseSpaceData;//[Offset: 0x240, Size: 0xc]
	void UpdateHomeSpaceByData(out const BaseSpaceData NewData);// 0x52ce04f39041
	void ShowBaseSpace();// 0x52cd04f39041
	void OnBaseSpaceUnOccupied();// 0x52cc04f39041
	void OnBaseSpaceOccupied();// 0x52cb04f39041
	void OnBaseSpaceCreated(int Layer, enum BaseSpaceType);// 0x52ca04f39041
	void HideBaseSpace();// 0x52c904f39041
	BaseSpaceData GetData();// 0x52c804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BaseSpaceData
	int Layer;//[Offset: 0x0, Size: 0x4]
	enum BaseSpaceType;//[Offset: 0x4, Size: 0x4]
	bool IsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SubPoolOfHomeActor.Object
	SolarHomeActor*[] UseActors;//[Offset: 0x30, Size: 0x10]
	SolarHomeActor*[] UnUseActors;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeSpaceSpawner.SolarMapElementBase.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x298, Size: 0x8]
	<enum,class Object> TypeClassMap;//[Offset: 0x2a0, Size: 0x50]
	<float,int> LayerMap;//[Offset: 0x2f0, Size: 0x50]
	float FloorUnit;//[Offset: 0x360, Size: 0x4]
	float WallUnit;//[Offset: 0x364, Size: 0x4]
	float BaseUnit;//[Offset: 0x368, Size: 0x4]
	float RoundOnBase;//[Offset: 0x36c, Size: 0x4]
	float RoundOnFloor;//[Offset: 0x370, Size: 0x4]
	float ArrowOnBase;//[Offset: 0x374, Size: 0x4]
	float ArrowOnFloor;//[Offset: 0x378, Size: 0x4]
	float ArrowToWall;//[Offset: 0x37c, Size: 0x4]
	Transform[] BasisFloorsTransArr;//[Offset: 0x388, Size: 0x10]
	bool IsAirWallOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	void OpenAirWall();// 0x530304f39041
	void Init(int InBuildWidth, int InBuildHeight);// 0x530204f39041
	bool GetIsAirWallOpen();// 0x530104f39041
	void CloseAirWall();// 0x530004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomePlayerController.SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	InputComponent* ConstructionInputComponent;//[Offset: 0xe48, Size: 0x8]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0xe50, Size: 0x8]
	SolarHomeActor* DragActor;//[Offset: 0xe58, Size: 0x8]
	float MinCheckDistance;//[Offset: 0xe60, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xe64, Size: 0x4]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0xe68, Size: 0x8]
	bool bIsViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe70, Size: 0x1]
	bool bIsConstruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe71, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0xe78, Size: 0x8]
	float MoveCheckDis;//[Offset: 0xe80, Size: 0x4]
	float CheckDis;//[Offset: 0x1018, Size: 0x4]
	SolarHomeCameraManager* CameraManager;//[Offset: 0x10b0, Size: 0x8]
	Vector LookAtLocation;//[Offset: 0x10b8, Size: 0xc]
	Vector OriginalLookAtLocation;//[Offset: 0x10c4, Size: 0xc]
	Actor* CurrentViewTarget;//[Offset: 0x10d0, Size: 0x8]
	Actor* OriginalViewTarget;//[Offset: 0x10d8, Size: 0x8]
	void StopBuilding();// 0x52ff04f39041
	void StartFadeOutEffect();// 0x52fe04f39041
	void StartBuilding();// 0x52fd04f39041
	void SolarGM_Home_ResetLayer(int InLayer);// 0x52fc04f39041
	void SolarGM_FillUpHome();// 0x52fb04f39041
	void SolarGM_ExportHomeActorToPath(FString FilePath);// 0x52fa04f39041
	void ShowBuildMainUI(bool bShow);// 0x52f904f39041
	void SetNormalCameraTarget();// 0x52f804f39041
	void SetConstructionCameraTarget();// 0x52f704f39041
	void SendMoveToBackend(out const ServerMoveData MoveData);// 0x52f604f39041
	void ResetConstructionCamera();// 0x52f504f39041
	void ResetCameraRotation();// 0x52f404f39041
	void OnTouchMove(int Index, out const Vector Location);// 0x52f304f39041
	void OnTouchEnd(int Index, out const Vector Location);// 0x52f204f39041
	void OnTouchBegin(int Index, out const Vector Location);// 0x52f104f39041
	void OnDragBegin(out const Vector Location);// 0x52f004f39041
	void OnCameraRight(const float Value);// 0x52ef04f39041
	void OnCameraForward(const float Value);// 0x52ee04f39041
	bool GetIsConstruction();// 0x52ed04f39041
	int GetCameraCurrentLayer();// 0x52ec04f39041
	void BindConstructionInput();// 0x52eb04f39041
	void BindBattleInput();// 0x52ea04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ServerMoveData
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	int64 ServerTimeStamp;//[Offset: 0x8, Size: 0x8]
	Vector Acceleration;//[Offset: 0x10, Size: 0xc]
	Vector Velocity;//[Offset: 0x1c, Size: 0xc]
	Vector Loction;//[Offset: 0x28, Size: 0xc]
	byte CompressedMoveFlags;//[Offset: 0x34, Size: 0x1]
	byte RollByte;//[Offset: 0x35, Size: 0x1]
	uint32 YawPitchInt;//[Offset: 0x38, Size: 0x4]
	byte MovementMode;//[Offset: 0x3c, Size: 0x1]
	uint32 FullBodyAnimationState;//[Offset: 0x40, Size: 0x4]
	uint32 MontageAnimState;//[Offset: 0x44, Size: 0x4]
	byte JetPackFlag;//[Offset: 0x48, Size: 0x1]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeCameraManager.ActorComponent.Object
	CameraMovementParameters CameraMovementSetting;//[Offset: 0xb8, Size: 0x68]
	Vector LookAtLocation;//[Offset: 0x134, Size: 0xc]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x140, Size: 0x8]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0x150, Size: 0x8]
	CameraActor* BuildCamera;//[Offset: 0x158, Size: 0x8]
	Actor* BattleCamera;//[Offset: 0x160, Size: 0x8]
	CameraComponent* BuildCameraComp;//[Offset: 0x168, Size: 0x8]
	void UpdateSliderScaleUI(float InScale);// 0x52e604f39041
	void UpdateCameraDistanceUI(float InPercent, float InScale);// 0x52e504f39041
	void SetNormalCameraTarget();// 0x52e404f39041
	void SetConstructionCameraTarget();// 0x52e304f39041
	void RotateCameraSpin(const float Value);// 0x52e204f39041
	void RotateCameraPitch(const float Value);// 0x52e104f39041
	void MoveCameraRight(const float Value);// 0x52e004f39041
	void MoveCameraForward(const float Value);// 0x52df04f39041
	void MoveCamera(int Index, out const Vector Location, const <int,Vector> FingerLocations);// 0x52de04f39041
	bool ChangeCameraMode(enum InMode);// 0x52dd04f39041
	void ChangeCameraDistancePercent(bool IsDoubleFinger, float InPercent);// 0x52dc04f39041
	void ChangeCameraDistanceDiff(bool IsDoubleFinger, float InValue);// 0x52db04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraMovementParameters
	float OneFingerMoveScale;//[Offset: 0x0, Size: 0x4]
	float MouseMoveScale;//[Offset: 0x4, Size: 0x4]
	float OneFingerZoomScale;//[Offset: 0x8, Size: 0x4]
	float MouseZoomScale;//[Offset: 0xc, Size: 0x4]
	float DoubleFingerSpinScale;//[Offset: 0x10, Size: 0x4]
	float DoubleFingerPitchScale;//[Offset: 0x14, Size: 0x4]
	float MouseRotateScale;//[Offset: 0x18, Size: 0x4]
	float LookAtLocationHeigh;//[Offset: 0x1c, Size: 0x4]
	float MinPitch;//[Offset: 0x20, Size: 0x4]
	float MaxPitch;//[Offset: 0x24, Size: 0x4]
	float PanoramicDefaultPitch;//[Offset: 0x28, Size: 0x4]
	float homeCameraBoundary;//[Offset: 0x2c, Size: 0x4]
	CurveFloat* DistanceCurve;//[Offset: 0x30, Size: 0x8]
	float DefultTime;//[Offset: 0x38, Size: 0x4]
	CurveFloat* DistanceCurve_Orthographic;//[Offset: 0x40, Size: 0x8]
	float DefaultTime_Orthographic;//[Offset: 0x48, Size: 0x4]
	CurveFloat* LayerTransitionCurve;//[Offset: 0x50, Size: 0x8]
	CurveFloat* CeilingTransitionCurve;//[Offset: 0x58, Size: 0x8]
	CurveFloat* PanoramicTransitionCurve;//[Offset: 0x60, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomePic.TableRowBase
	SoftObjectPath PicPath;//[Offset: 0x8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeObject.TableRowBase
	FString HomeObjectDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath BpPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath PreviewBpPath;//[Offset: 0x30, Size: 0x18]
	BuildMeshSlotData[] DefaultMat;//[Offset: 0x48, Size: 0x10]
	bool IsFocusCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool IsDrawable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool IsRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool IsRotateHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	int RotateAngleSingle;//[Offset: 0x60, Size: 0x4]
	SoftObjectPath Build_SFPath;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath Remove_SFXPath;//[Offset: 0x80, Size: 0x18]
	float FRemove_SFXTime;//[Offset: 0x98, Size: 0x4]
	FString FSBuild_Audio;//[Offset: 0xa0, Size: 0x10]
	FString FSRemove_Audio;//[Offset: 0xb0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeIcon.TableRowBase
	SoftObjectPath NormalIconPath;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath SelectedIconPath;//[Offset: 0x20, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWaterActorNew.Actor.Object
	StaticMesh* VolumeMeshAsset;//[Offset: 0x228, Size: 0x28]
	StaticMesh* SurfaceMeshAsset;//[Offset: 0x250, Size: 0x28]
	MaterialInterface* WaterExtremeMaterial;//[Offset: 0x278, Size: 0x28]
	MaterialInterface* WaterUltraMaterial;//[Offset: 0x2a0, Size: 0x28]
	MaterialInterface* WaterHDRMaterial;//[Offset: 0x2c8, Size: 0x28]
	MaterialInterface* WaterHDMaterial;//[Offset: 0x2f0, Size: 0x28]
	MaterialInterface* WaterBalancedMaterial;//[Offset: 0x318, Size: 0x28]
	MaterialInterface* WaterSmoothMaterial;//[Offset: 0x340, Size: 0x28]
	MaterialInterface* WaterPerformanceMaterial;//[Offset: 0x368, Size: 0x28]
	bool bUnderwater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	MaterialInterface* WaterScreenMaterial;//[Offset: 0x398, Size: 0x28]
	MaterialInterface* WaterVolumeMaterial;//[Offset: 0x3c0, Size: 0x28]
	MaterialParameterCollection* WaterMPC;//[Offset: 0x3e8, Size: 0x8]
	SolarPostProcessSettingItem* SolarPostAsset;//[Offset: 0x3f0, Size: 0x8]
	bool bCutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	LinearColor CutlineColor;//[Offset: 0x3fc, Size: 0x10]
	float CutlineOffset;//[Offset: 0x40c, Size: 0x4]
	float CutlineFadeness;//[Offset: 0x410, Size: 0x4]
	float CutlineThickness;//[Offset: 0x414, Size: 0x4]
	Texture2D* NormalTexture;//[Offset: 0x418, Size: 0x28]
	float Flatten;//[Offset: 0x440, Size: 0x4]
	float Speed;//[Offset: 0x444, Size: 0x4]
	float Tiling;//[Offset: 0x448, Size: 0x4]
	float FarSpeed;//[Offset: 0x44c, Size: 0x4]
	float FarTiling;//[Offset: 0x450, Size: 0x4]
	bool bAddtationNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 0x1]
	Texture2D* AddtationAreaTexture;//[Offset: 0x458, Size: 0x28]
	float AddtationSpeed;//[Offset: 0x480, Size: 0x4]
	float AddtationTiling;//[Offset: 0x484, Size: 0x4]
	float AddtationAreaDistribution;//[Offset: 0x488, Size: 0x4]
	float SpecularIntensity;//[Offset: 0x48c, Size: 0x4]
	float ReflectionDistortion;//[Offset: 0x490, Size: 0x4]
	TextureCube* ReflectionCubemap;//[Offset: 0x498, Size: 0x28]
	bool bSSR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	float SSRFadeness;//[Offset: 0x4c4, Size: 0x4]
	float SSRRaylength;//[Offset: 0x4c8, Size: 0x4]
	bool bIridescence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 0x1]
	float IridescenceIOR;//[Offset: 0x4d0, Size: 0x4]
	Texture2D* IridescenceAreaTexture;//[Offset: 0x4d8, Size: 0x28]
	bool bRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	float RefractionIOR;//[Offset: 0x504, Size: 0x4]
	LinearColor ScatteringColor;//[Offset: 0x508, Size: 0x10]
	float ScatteringScale;//[Offset: 0x518, Size: 0x4]
	float ScatteringDensity;//[Offset: 0x51c, Size: 0x4]
	float ScatteringAnisotropy;//[Offset: 0x520, Size: 0x4]
	LinearColor AbsorptionColor;//[Offset: 0x524, Size: 0x10]
	float AbsorptionDistance;//[Offset: 0x534, Size: 0x4]
	bool bAbsorptionFromTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	Texture2D* AbsorptionTexture;//[Offset: 0x540, Size: 0x28]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x568, Size: 0x4]
	SolarWaterMesh* VolumeMeshComponent;//[Offset: 0x570, Size: 0x8]
	SolarWaterMesh* SurfaceMeshComponent;//[Offset: 0x578, Size: 0x8]
	void OnExitWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x5f4a04f39041
	void OnEnterWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5f4904f39041
	float GetWaterLineHeight();// 0x5f4804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWaterMesh.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeShaderData
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameplayLogger.Object
	enum[] DefaultChannels;//[Offset: 0x28, Size: 0x10]
	void SolarDebugLog(enum Channel, FString Message);// 0x51d804f39041
	void EnableDebugLogChannel(enum Channel);// 0x51d704f39041
	void DisableDebugLogChannel(enum Channel);// 0x51d604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeSubSystem.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	<int,SolarAttributeConfig> AttributeDefaultData;//[Offset: 0x38, Size: 0x50]
	<int,SolarAttributeSubModifierGroup*> GlobalModifiers;//[Offset: 0x88, Size: 0x50]
	float CharacterTakeDamage(SolarAttributeSubComponent* AttributeSubComp, const float Damage);// 0x4e9f04f39041
	float CalcWeaponFireDamage(SolarAttributeSubComponent* AttributeSet, out const int ModeIdx);// 0x4e9e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeConfig
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]
	float BaseValue;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeSubModifierGroup.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeSubComponent.ActorComponent.Object
	<int,SolarAttributeSubData*> AttributeSubs;//[Offset: 0xb0, Size: 0x50]
	SolarAttributeSubReplicateData[] AttributeSubRepData;//[Offset: 0x100, Size: 0x10]
	<int,float> ClientAttributeSubValues;//[Offset: 0x110, Size: 0x50]
	void RemoveModifier(int AttributeSubID, out const FName Name);// 0x4e9c04f39041
	void OnRep_AttributeSubRepDatas();// 0x4e9b04f39041
	void OnAttributeSubChanged();// 0x4e9a04f39041
	float GetValue(int AttributeSubID);// 0x4e9904f39041
	SolarAttributeSubSystem* GetAttributeSubSystem();// 0x4e9804f39041
	SolarAttributeSubComponent* GetAttributeSubComponentFromActor(Actor* InActor);// 0x4e9704f39041
	int AddModifier(int AttributeSubID, byte InOpType, float Magnitude, out const FName Name);// 0x4e9604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeSubData.Object
	SolarAttributeSubModifierGroup* LocalModifier;//[Offset: 0x28, Size: 0x8]
	SolarAttributeSubModifierGroup* GlobalModifier;//[Offset: 0x30, Size: 0x8]
	int AttributeID;//[Offset: 0x50, Size: 0x4]
	float CurrentValue;//[Offset: 0x54, Size: 0x4]
	float MaxValue;//[Offset: 0x58, Size: 0x4]
	float MinValue;//[Offset: 0x5c, Size: 0x4]
	float BaseValue;//[Offset: 0x60, Size: 0x4]
	void OnModifierChanged();// 0x4e9d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeSubReplicateData
	int AttributeID;//[Offset: 0x0, Size: 0x4]
	float AttributeValue;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCustomizedGameModeManager.Object
	SolarGameMode_ElementManager* ElementManager;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameMode_ElementManager.Object
	SolarMapElementBase*[] ElementsList;//[Offset: 0x30, Size: 0x10]
	SolarPlayerStart*[] PlayerStartList;//[Offset: 0x40, Size: 0x10]
	<FName,class SolarGameMode_HandleElementRPC> HandleActorRPCBPs;//[Offset: 0x50, Size: 0x50]
	<FString,SolarMapElementBase*> ElementMap;//[Offset: 0xa0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x260, Size: 0x4]
	FString Side;//[Offset: 0x268, Size: 0x10]
	FString Job;//[Offset: 0x278, Size: 0x10]
	FString ElementID;//[Offset: 0x288, Size: 0x10]
	enum Type;//[Offset: 0x298, Size: 0x1]
	enum State;//[Offset: 0x299, Size: 0x1]
	enum Visibility;//[Offset: 0x29a, Size: 0x1]
	FName ElementTypeName;//[Offset: 0x29c, Size: 0x8]
	FString GroupKey;//[Offset: 0x2a8, Size: 0x10]
	Vector[] PlayerLocations;//[Offset: 0x2b8, Size: 0x10]
	void SetElementVisibility(const enum NewType);// 0x56d404f39041
	enum SetElementState(const enum NewState);// 0x56d304f39041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x56d204f39041
	void OnElementStateChanged(const enum CurrentState);// 0x56d104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x24c, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarRedHintManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameModeSelectionManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	SolarGameModeLockSettings* CurGameModeLockSettings;//[Offset: 0x38, Size: 0x8]
	SolarGameModeLockSettings* DefaultGameModeLockSettings;//[Offset: 0x58, Size: 0x8]
	void SaveGameModeLockSettings();// 0x51c904f39041
	void LoadGameModeLockSettings();// 0x51c804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameModeLockSettings.SaveGame.Object
	<int,bool> GameModeLockStatus;//[Offset: 0x28, Size: 0x50]
	int[] LobbyGameModeRecIDs;//[Offset: 0x78, Size: 0x10]
	int[] GameModeGuideIDs;//[Offset: 0x88, Size: 0x10]
	void CopyFrom(SolarGameModeLockSettings* InLockSettings);// 0x51c704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPingFpsManager.Object
	byte GetPingDS;//[Offset: 0x30, Size: 0x1]
	float GetPingBackend;//[Offset: 0x34, Size: 0x4]
	float Fps;//[Offset: 0x38, Size: 0x4]
	byte GetPingBattleServer();// 0x559304f39041
	float GetPacketsLossRate();// 0x559204f39041
	float GetAverageFPS();// 0x559104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameUserSettingsMgr.Object
	SolarGameUserSettings* MobileGameUserSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameUserSettingsPC* DesktopGameUserSettings;//[Offset: 0x30, Size: 0x8]
	SolarGameUserSettings* CurGameUserSettings;//[Offset: 0x38, Size: 0x8]
	SolarGameSettingsRange* MobileGameSettingsRange;//[Offset: 0x40, Size: 0x8]
	SolarGameSettingsRange* DesktopGameSettingsRange;//[Offset: 0x48, Size: 0x8]
	SolarGameSettingsRange* DefaultGameSettingsRange;//[Offset: 0x50, Size: 0x8]
	bool bIsDefalutSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x60, Size: 0x8]
	void SynchronizeInputSettings();// 0x522b04f39041
	void SaveGameSettingsByPlatform(SolarGameUserSettings* InGameUserSettings);// 0x522a04f39041
	void SaveGameSettings();// 0x522904f39041
	void ResetToDefaultByPlatform(SolarGameUserSettings* InGameUserSettings, enum SettingPart);// 0x522804f39041
	void ResetToDefault(enum SettingPart);// 0x522704f39041
	void RefreshValid(SolarGameInstanceBase* GameInstance, bool SaveIfDirty);// 0x522604f39041
	void RefreshDynamicShadow();// 0x522504f39041
	void RefreshAnalogCursorSpeed();// 0x522404f39041
	void OnSettingConfigSaved();// 0x522304f39041
	void OnScreenDamageEffectSettingChanged();// 0x522204f39041
	void OnPickupSettingChanged();// 0x522104f39041
	void OnOffScreenSettingChanged();// 0x522004f39041
	bool IsLowLevelDevice();// 0x521f04f39041
	bool IsHighlightMomentOpen();// 0x521e04f39041
	bool IsEnableGamepadInput();// 0x521d04f39041
	bool IsDefaultEnableDynamicShadow();// 0x521c04f39041
	void InitializeSettings(SolarGameInstanceBase* GameInstance);// 0x521b04f39041
	void Init(SolarGameInstanceBase* GameInstance);// 0x521a04f39041
	SolarGameUserSettings* GetMobileGameUserSettings();// 0x521904f39041
	SolarGameSettingsRange* GetMobileGameSettingsRange();// 0x521804f39041
	SolarGameUserSettingsPC* GetDesktopGameUserSettings();// 0x521704f39041
	SolarGameSettingsRange* GetDesktopGameSettingsRange();// 0x521604f39041
	int GetCurNativeRefreshRate();// 0x521504f39041
	bool FixConfigVersionByPlatform(SolarGameUserSettings* InGameUserSettings);// 0x521404f39041
	bool FixConfigVersion();// 0x521304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameUserSettings.DeveloperSettings.Object
	PickupUserSettings PickupSettings;//[Offset: 0x38, Size: 0x18]
	GraphicsUserSettings GraphicsSettings;//[Offset: 0x50, Size: 0x60]
	WeaponUserSettings WeaponSettings;//[Offset: 0xb0, Size: 0x20]
	LanguageUserSettings LanguageSettings;//[Offset: 0xd0, Size: 0x3]
	CharacterVoiceUserSettings CharacterVoiceSettings;//[Offset: 0xd3, Size: 0x1]
	SoundUserSettings SoundSettings;//[Offset: 0xd8, Size: 0x60]
	BasicUserSettings BasicSettings;//[Offset: 0x138, Size: 0x11]
	PersonalityUserSettings PersonalitySettings;//[Offset: 0x150, Size: 0x88]
	SensitivityUserSettings SensitivitySettings;//[Offset: 0x1d8, Size: 0x94]
	ShakeUserSettings ShakeSettings;//[Offset: 0x26c, Size: 0x1]
	VehicleControlUserSettings DriverSettings;//[Offset: 0x26d, Size: 0x5]
	ChatOperatorUserSettings ChatOperatorSettings;//[Offset: 0x272, Size: 0x2]
	SoftClassPath DefaultSettingsRangePath;//[Offset: 0x278, Size: 0x18]
	bool bIsSynchronized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	enum ConfigVersion;//[Offset: 0x291, Size: 0x1]
	bool bFirstTimeLanunchGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 0x1]
	FString ToJsonObjectString();// 0x521204f39041
	bool IsEnableGamepadInput();// 0x521104f39041
	WeaponUserSettings GetWeaponSettings();// 0x521004f39041
	SoundUserSettings GetSoundSettings();// 0x520f04f39041
	ShakeUserSettings GetShakeSettings();// 0x520e04f39041
	SensitivityUserSettings GetSensitivitySettings();// 0x520d04f39041
	PickupUserSettings GetPickupSettings();// 0x520c04f39041
	PersonalityUserSettings GetPersonalitySettings();// 0x520b04f39041
	LanguageUserSettings GetLanguageSettings();// 0x520a04f39041
	GraphicsUserSettings GetGraphicsSettings();// 0x520904f39041
	bool GetEnableOpponentPerspectiveByDefault();// 0x520804f39041
	VehicleControlUserSettings GetDriverSettings();// 0x520704f39041
	float GetDefaultCustomizedCharacterCameraFOV();// 0x520604f39041
	ChatOperatorUserSettings GetChatOperatorSettings();// 0x520504f39041
	CharacterVoiceUserSettings GetCharacterVoiceSettings();// 0x520404f39041
	BasicUserSettings GetBasicSettings();// 0x520304f39041
	void FromJsonObjectString(FString JsonStr);// 0x520204f39041
	bool CheckJsonObjectString(FString JsonStr);// 0x520104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DeveloperSettings.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponUserSettings
	bool bAimAssist_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bVehicleWeaponAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bEnableRecoilRecovery_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bAutoScope_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bAutoScope_SpecialButtonGlobal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bAutoScopeRifle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bAutoScopeSubmachinegun_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bAutoScopeShotgunSingle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bAutoScopeShotgunAuto_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bAutoScopeSniperSingle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bAutoScopeSniperAuto_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bAutoScopeSpecial_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bSniperSingleShootOnPressed_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bShotgunSingleShootOnPressed_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	CurveFloat* HitEffectDistanceToScaleCurve;//[Offset: 0x10, Size: 0x8]
	enum DoScopeMode_Global;//[Offset: 0x18, Size: 0x1]
	bool bOpenVehicleWeaponCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bVehicleAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bVehicleAutoScope_SpecialButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bCanScopeButtonRotateView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bShowQuickChangeScopeButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundUserSettings
	ConditionValue Sound_Global;//[Offset: 0x0, Size: 0x8]
	ConditionValue Sound_Action;//[Offset: 0x8, Size: 0x8]
	ConditionValue Sound_BackGround;//[Offset: 0x10, Size: 0x8]
	ConditionValue Sound_Character;//[Offset: 0x18, Size: 0x8]
	int MicroPhoneVolume;//[Offset: 0x20, Size: 0x4]
	int LoudSpeakerVolume;//[Offset: 0x24, Size: 0x4]
	enum Sound_Quality;//[Offset: 0x28, Size: 0x1]
	enum AudioMode;//[Offset: 0x29, Size: 0x1]
	int MicLevel;//[Offset: 0x2c, Size: 0x4]
	int SpeakerLevel;//[Offset: 0x30, Size: 0x4]
	int ChooseMicIndex;//[Offset: 0x34, Size: 0x4]
	int ChooseSpeakerIndex;//[Offset: 0x38, Size: 0x4]
	FString MicDeviceID;//[Offset: 0x40, Size: 0x10]
	FString SpeakerDeviceID;//[Offset: 0x50, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConditionValue
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int CurValue;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PickupUserSettings
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bStopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseTileView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	PickupItemData[] PickupItemList;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PickupItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemNum;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GraphicsUserSettings
	enum FpsLevel;//[Offset: 0x0, Size: 0x1]
	enum ContentScaleFactorLevel;//[Offset: 0x1, Size: 0x1]
	enum ColorThemeType;//[Offset: 0x2, Size: 0x1]
	bool MSAAIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool VSyncIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FloatValue AdaptationUIValue;//[Offset: 0x8, Size: 0x4]
	bool EnableDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	enum SelectQualityLevel;//[Offset: 0xd, Size: 0x1]
	FloatValue CustomizedCharacterCameraFOV;//[Offset: 0x10, Size: 0x4]
	int SavedVersion;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FloatValue
	float Value;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LanguageUserSettings
	enum CurLanguage;//[Offset: 0x0, Size: 0x1]
	enum CurCharacterVoiceLanguage;//[Offset: 0x1, Size: 0x1]
	bool HasLoadedChinese;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterVoiceUserSettings
	enum CurVoiceLanguage;//[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BasicUserSettings
	bool bOpenUniversalMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum OpenOffScreen;//[Offset: 0x1, Size: 0x1]
	bool bOpenQuickChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bAutoOverturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bPowerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bOpenRecruitRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	enum curGyroscpeChooseLevel;//[Offset: 0x6, Size: 0x1]
	bool bHorizontalGyroscopeInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bVerticalGyroscopeInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum CurrentDamageTextDisplayMode;//[Offset: 0x9, Size: 0x1]
	enum OpenHighlightMoment;//[Offset: 0xa, Size: 0x1]
	enum OpenOutline;//[Offset: 0xb, Size: 0x1]
	bool bShowInputKeyTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bEnableGamepadInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	enum OpenScreenDamageEffect;//[Offset: 0xe, Size: 0x1]
	bool bOpenMiniMapRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	bool bOpenDirectionBlood3D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PersonalityUserSettings
	ColorPreset[] TeammatePerspectiveColors;//[Offset: 0x0, Size: 0x10]
	ColorPreset[] OpponentPerspectiveColors;//[Offset: 0x10, Size: 0x10]
	ParticlePreset[] BloodMistColors;//[Offset: 0x20, Size: 0x10]
	ColorValue TeammatePerspectiveColor;//[Offset: 0x30, Size: 0x10]
	ColorValue OpponentPerspectiveColor;//[Offset: 0x40, Size: 0x10]
	ParticleSystem* BloodMistParticle;//[Offset: 0x50, Size: 0x28]
	int TeammateColor;//[Offset: 0x78, Size: 0x4]
	int OpponentColor;//[Offset: 0x7c, Size: 0x4]
	int BloodMistColor;//[Offset: 0x80, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ColorPreset
	int ColorID;//[Offset: 0x0, Size: 0x4]
	ColorValue ModelColor;//[Offset: 0x4, Size: 0x10]
	ColorValue UIColor;//[Offset: 0x14, Size: 0x10]
	int ColorNameLocalText;//[Offset: 0x24, Size: 0x4]
	bool bNotShowDomestic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bDefaultDomestic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ColorValue
	LinearColor Value;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticlePreset
	int ColorID;//[Offset: 0x0, Size: 0x4]
	ParticleSystem* Particle;//[Offset: 0x8, Size: 0x28]
	ColorValue UIColor;//[Offset: 0x30, Size: 0x10]
	int ColorNameLocalText;//[Offset: 0x40, Size: 0x4]
	bool bNotShowDomestic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bDefaultDomestic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SensitivityUserSettings
	enum Sensitivity_AccMode;//[Offset: 0x0, Size: 0x1]
	FloatValue Sensitivity_CurveScale;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_Free;//[Offset: 0x8, Size: 0x4]
	FloatValue Sensitivity_SecondarySkills;//[Offset: 0xc, Size: 0x4]
	FloatValue Sensitivity_SuperSkills;//[Offset: 0x10, Size: 0x4]
	CameraSensitivityData Sensitivity_NoShoot;//[Offset: 0x14, Size: 0x20]
	CameraSensitivityData Sensitivity_Shoot;//[Offset: 0x34, Size: 0x20]
	GyroscopeSensitivityData GyroscopeData;//[Offset: 0x54, Size: 0x20]
	FloatValue Sensitivity_VehicleDriver;//[Offset: 0x74, Size: 0x4]
	FloatValue Sensitivity_VehicleFire;//[Offset: 0x78, Size: 0x4]
	VehicleCameraSensitivityData Sensitivity_Vehicle_NoShoot;//[Offset: 0x7c, Size: 0xc]
	VehicleCameraSensitivityData Sensitivity_Vehicle_Shoot;//[Offset: 0x88, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraSensitivityData
	FloatValue Sensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue Sensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue Sensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue Sensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GyroscopeSensitivityData
	FloatValue GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue GyroscopeSensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue GyroscopeSensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleCameraSensitivityData
	FloatValue Sensitivity_Lens_Two;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ShakeUserSettings
	enum ShakeMainStatus;//[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleControlUserSettings
	enum WheeledVehicleDriveType;//[Offset: 0x0, Size: 0x1]
	bool bCanAdjustInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanAutoSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	enum LastWheeledVehicleDriveType;//[Offset: 0x3, Size: 0x1]
	bool bCanVehicleCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChatOperatorUserSettings
	enum Speaker;//[Offset: 0x0, Size: 0x1]
	enum Mic;//[Offset: 0x1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameUserSettingsPC.SolarGameUserSettings.DeveloperSettings.Object
	SensitivityUserSettings SensitivitySettingsKeyboard;//[Offset: 0x294, Size: 0x94]
	SensitivityUserSettings SensitivitySettingsGamepad;//[Offset: 0x328, Size: 0x94]
	MouseAndKeyboardSettings KeyboardControlSettings;//[Offset: 0x3bc, Size: 0xc]
	GamepadSettings GamepadSettings;//[Offset: 0x3c8, Size: 0xe0]
	GamepadAdvancedSettings GamepadAdvancedSettings;//[Offset: 0x4a8, Size: 0x3c]
	GraphicsUserSettingsPC GraphicsSettingsPC;//[Offset: 0x4e8, Size: 0x58]
	bool bEnableCursorNoticePanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MouseAndKeyboardSettings
	FloatValue MainSensitivity;//[Offset: 0x0, Size: 0x4]
	bool bMouseInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum AimMode;//[Offset: 0x5, Size: 0x1]
	enum SprintMode;//[Offset: 0x6, Size: 0x1]
	enum MedicWheelMode;//[Offset: 0x7, Size: 0x1]
	enum EmojiWheelMode;//[Offset: 0x8, Size: 0x1]
	enum CurrentItemHUDStyle;//[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GamepadSettings
	SolarAimModeWithLocalText[] AimModeMap;//[Offset: 0x0, Size: 0x10]
	SolarSprintModeWithLocalText[] SprintModeMap;//[Offset: 0x10, Size: 0x10]
	FloatWithLocalText[] ViewSensitivityMap;//[Offset: 0x20, Size: 0x10]
	ObjectWithLocalText[] ResponseCurveMap;//[Offset: 0x30, Size: 0x10]
	FloatWithLocalText[] LeftStickDeadzoneMap;//[Offset: 0x40, Size: 0x10]
	FloatWithLocalText[] RightStickDeadzoneMap;//[Offset: 0x50, Size: 0x10]
	FloatWithLocalText[] TriggerDeadzoneMap;//[Offset: 0x60, Size: 0x10]
	FloatWithLocalText[] VibrationLevelMap;//[Offset: 0x70, Size: 0x10]
	RangeData CursorSpeedRange;//[Offset: 0x80, Size: 0x8]
	SolarWheelModeTypeWithLocalText[] WheelModeTypeMap;//[Offset: 0x88, Size: 0x10]
	int AimModeID;//[Offset: 0x98, Size: 0x4]
	int SprintModeID;//[Offset: 0x9c, Size: 0x4]
	ConditionValue MainHorizontalSensitivity;//[Offset: 0xa0, Size: 0x8]
	ConditionValue MainVerticalSensitivity;//[Offset: 0xa8, Size: 0x8]
	int RightStickSensitivityID;//[Offset: 0xb0, Size: 0x4]
	int RightStickResponseCurveID;//[Offset: 0xb4, Size: 0x4]
	bool bInvertedLook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	int LeftStickDeadzoneID;//[Offset: 0xbc, Size: 0x4]
	int RightStickDeadzoneID;//[Offset: 0xc0, Size: 0x4]
	int TriggerDeadzoneID;//[Offset: 0xc4, Size: 0x4]
	FloatValue CursorSpeed;//[Offset: 0xc8, Size: 0x4]
	int VibrationLevelID;//[Offset: 0xcc, Size: 0x4]
	bool bEnableAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bEnableClassicWheeledVehicleControlMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	int MedicWheelModeID;//[Offset: 0xd4, Size: 0x4]
	int EmojiWheelModeID;//[Offset: 0xd8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAimModeWithLocalText
	int LocalText;//[Offset: 0x0, Size: 0x4]
	enum AimMode;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSprintModeWithLocalText
	int LocalText;//[Offset: 0x0, Size: 0x4]
	enum SprintMode;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FloatWithLocalText
	int LocalText;//[Offset: 0x0, Size: 0x4]
	float Value;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ObjectWithLocalText
	int LocalText;//[Offset: 0x0, Size: 0x4]
	SoftObjectPath ObjectPath;//[Offset: 0x8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RangeData
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWheelModeTypeWithLocalText
	int LocalText;//[Offset: 0x0, Size: 0x4]
	enum WheelPadMode;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GamepadAdvancedSettings
	RangeData ScalerRange;//[Offset: 0x0, Size: 0x8]
	RangeData SpeedUpScalerRange;//[Offset: 0x8, Size: 0x8]
	RangeData SpeedUpDelayRange;//[Offset: 0x10, Size: 0x8]
	RangeData SpeedUpStartRange;//[Offset: 0x18, Size: 0x8]
	FloatValue ScalerX;//[Offset: 0x20, Size: 0x4]
	FloatValue ScalerY;//[Offset: 0x24, Size: 0x4]
	FloatValue SpeedUpScalerX;//[Offset: 0x28, Size: 0x4]
	FloatValue SpeedUpScalerY;//[Offset: 0x2c, Size: 0x4]
	FloatValue SpeedUpDelayTime;//[Offset: 0x30, Size: 0x4]
	FloatValue SpeedUpStartTime;//[Offset: 0x34, Size: 0x4]
	bool bEnableAdsSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GraphicsUserSettingsPC
	enum Resolution;//[Offset: 0x0, Size: 0x1]
	DataTable* ResolutionDataTable;//[Offset: 0x8, Size: 0x8]
	enum Monitor;//[Offset: 0x10, Size: 0x1]
	enum Fps;//[Offset: 0x11, Size: 0x1]
	enum GraphicsMode;//[Offset: 0x12, Size: 0x1]
	FloatValue Brightness;//[Offset: 0x14, Size: 0x4]
	enum ROV;//[Offset: 0x18, Size: 0x1]
	enum NvdiaReflex;//[Offset: 0x19, Size: 0x1]
	enum RayTracing;//[Offset: 0x1a, Size: 0x1]
	enum VSync;//[Offset: 0x1b, Size: 0x1]
	enum MotionBlur;//[Offset: 0x1c, Size: 0x1]
	enum AntiAliasing;//[Offset: 0x1d, Size: 0x1]
	enum AnisotropicFiltering;//[Offset: 0x1e, Size: 0x1]
	enum TextureQuality;//[Offset: 0x1f, Size: 0x1]
	enum TextureModel;//[Offset: 0x20, Size: 0x1]
	enum DetailQuality;//[Offset: 0x21, Size: 0x1]
	enum VisualEffects;//[Offset: 0x22, Size: 0x1]
	FloatValue SunlightShadowRange;//[Offset: 0x24, Size: 0x4]
	enum SunlightShadowDetails;//[Offset: 0x28, Size: 0x1]
	DataTable* ShadowDetailLevelDataTable;//[Offset: 0x30, Size: 0x8]
	enum MaxCSMResolutionLevel;//[Offset: 0x38, Size: 0x1]
	enum PointLightShadowDetails;//[Offset: 0x39, Size: 0x1]
	enum AmbientOcclusionQuality;//[Offset: 0x3a, Size: 0x1]
	enum SSGIQuality;//[Offset: 0x3b, Size: 0x1]
	enum Reflection;//[Offset: 0x3c, Size: 0x1]
	bool VolumetricLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool DynamicVolumetricShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	enum PostProcessingEffects;//[Offset: 0x3f, Size: 0x1]
	enum RenderingResolutionScale;//[Offset: 0x40, Size: 0x1]
	enum GrassDensity;//[Offset: 0x41, Size: 0x1]
	enum ColorBlindMode;//[Offset: 0x42, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameSettingsRange.Object
	SoundSettingsRange SoundSettings;//[Offset: 0x28, Size: 0x20]
	SensitivitySettingsRange SensitivitySettings;//[Offset: 0x48, Size: 0x120]
	GraphicsSettingsRange GraphicsSettings;//[Offset: 0x168, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSettingsRange
	RangeData Sound_Global;//[Offset: 0x0, Size: 0x8]
	RangeData Sound_Action;//[Offset: 0x8, Size: 0x8]
	RangeData Sound_BackGround;//[Offset: 0x10, Size: 0x8]
	RangeData Sound_Character;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SensitivitySettingsRange
	RangeData Sensitivity_CurveScale;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Free;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_SecondarySkills;//[Offset: 0x10, Size: 0x8]
	RangeData Sensitivity_SuperSkills;//[Offset: 0x18, Size: 0x8]
	CameraSensitivityRangeData Sensitivity_NoShoot;//[Offset: 0x20, Size: 0x40]
	CameraSensitivityRangeData Sensitivity_Shoot;//[Offset: 0x60, Size: 0x40]
	VehicleCameraSensitivityRangeData Sensitivity_Vehicle_NoShoot;//[Offset: 0xa0, Size: 0x18]
	VehicleCameraSensitivityRangeData Sensitivity_Vehicle_Shoot;//[Offset: 0xb8, Size: 0x18]
	RangeData Sensitivity_VehicleDriver;//[Offset: 0xd0, Size: 0x8]
	RangeData Sensitivity_VehicleFire;//[Offset: 0xd8, Size: 0x8]
	GyroscopeSensitivityRangeData Sensitivity_GyroscopeData;//[Offset: 0xe0, Size: 0x40]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraSensitivityRangeData
	RangeData Sensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData Sensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData Sensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData Sensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleCameraSensitivityRangeData
	RangeData Sensitivity_Lens_Two;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GyroscopeSensitivityRangeData
	RangeData GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData GyroscopeSensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData GyroscopeSensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GraphicsSettingsRange
	RangeData AdaptationUIValue;//[Offset: 0x0, Size: 0x8]
	RangeData FOVRange;//[Offset: 0x8, Size: 0x8]
	RangeData BrightnessRange;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLoginManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	void InitFromLogin();// 0x542604f39041
	void Init(SolarGameInstanceBase* GameInstance);// 0x542504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLockSettingsMgr.Object
	SolarLockSettings* CurLockSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	SolarLockSettings* DefaultLockSettings;//[Offset: 0x48, Size: 0x8]
	void SaveLockSettings();// 0x542404f39041
	void LoadLockSettings();// 0x542304f39041
	void Init(SolarGameInstanceBase* GameInstance);// 0x542204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLockSettings.SaveGame.Object
	<int,bool> FeaturesLockStatus;//[Offset: 0x28, Size: 0x50]
	void CopyFrom(SolarLockSettings* InLockSettings);// 0x542104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameProgressManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	delegate OnGameStart;//[Offset: 0x38, Size: 0x10]
	void OnWorldConditionsCompleted();// 0x26be04f39041
	void OnStreamingLevelComplete();// 0x26bd04f39041
	void OnShadersCompileComplete();// 0x26bc04f39041
	void OnGameStart__DelegateSignature();// 0x26bb04f39041
	void K2_ReceiveGlobalConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x26ba04f39041
	void K2_ReceiveConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x26b904f39041
	void K2_OnGlobalConditionCompleted(GameplayTag CompletedCondition);// 0x26b804f39041
	void K2_OnConditionCompleted(World* CurrentWorld, GameplayTag CompletedCondition);// 0x26b704f39041
	bool IsGameStartNeedCondition(const Object* WorldContextObject, out const GameplayTag InCondition);// 0x26b604f39041
	bool IsConditionInList(out const GameplayTag InCondition, World* WorldCheck);// 0x26b504f39041
	bool IsAllStartGameConditionCompleted(World* WorldCheck);// 0x26b404f39041
	bool InitGameStartCondition(World* CurrentWorld, GameplayTagContainer ConditionList);// 0x26b304f39041
	bool HasGameStarted(const Object* WorldContextObject);// 0x26b204f39041
	SolarGameProgressManager* Get(const Object* WorldContextObject);// 0x26b104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarABTestManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHttpManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	<FString,int> ReportStr2ReprotTimes;//[Offset: 0x48, Size: 0x50]
	int ReportRetryTimes;//[Offset: 0x98, Size: 0x4]
	delegate OnImgUploaded;//[Offset: 0xa0, Size: 0x10]
	int Jank;//[Offset: 0xcc, Size: 0x4]
	int BigJank;//[Offset: 0xd0, Size: 0x4]
	float FPS25;//[Offset: 0xd4, Size: 0x4]
	int PeakPlayerNum;//[Offset: 0x100, Size: 0x4]
	int PeakAINum;//[Offset: 0x104, Size: 0x4]
	int PeakVehicleNum;//[Offset: 0x108, Size: 0x4]
	void UploadToHTTP(FString URL, FString str);// 0x26f204f39041
	void UploadImg(out const int AppId, out const int AppUid, FString AppToken, out const int GameID, out const int Uid, FString SourceImgPath);// 0x26f104f39041
	FString StringToBase64(FString str);// 0x26f004f39041
	void StopRecordJank();// 0x26ef04f39041
	void StartRecordJank();// 0x26ee04f39041
	void ResetPerfData(bool bKeepCurrentData);// 0x26ed04f39041
	void ReportAbnormalPlayerWeaponToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InAttackLocation, FString InHitLocation, FString InHitBoneScale, FString InWeaponBlueprintName);// 0x26ec04f39041
	void ReportAbnormalPlayerVehicleToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InVehiclePreviousLocation, FString InVehiclePresentLocation, FString InVehicleBlueprintName);// 0x26eb04f39041
	void ReportAbnormalPlayerToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue);// 0x26ea04f39041
	void ReportAbnormalPlayerBaittingToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InDamageType, FString InBotLocation, FString InPlayerLocation);// 0x26e904f39041
	void ReCordOnlineError(FString InStr);// 0x26e804f39041
	void OnImgUploaded__DelegateSignature(int RespCode, FString RespMsg, FString ImgUrl);// 0x26e704f39041
	bool IsFileSizeExceedLimit(FString SourceImgPath, out const int64 SizeLimit);// 0x26e604f39041
	void InitializeDelegates();// 0x26e504f39041
	bool GetIsUploading();// 0x26e404f39041
	FString GetHttpReportUrl();// 0x26e304f39041
	float GetAvgNum(int PerfType);// 0x26e204f39041
	void ClearDelegates();// 0x26e104f39041
	void CleanPerfDirtyData();// 0x26e004f39041
	FString Base64ToMD5(FString str);// 0x26df04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarActivityManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	bool IsCollectionRedeemOpen(int ActivityID);// 0x4daf04f39041
	int[] GetActivityItemIDList(int OutcomeID);// 0x4dae04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTutorialManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	enum CurrentTutorialStage;//[Offset: 0x50, Size: 0x1]
	delegate OnRegisterEvent;//[Offset: 0x58, Size: 0x10]
	delegate OnStepActionBegan;//[Offset: 0x68, Size: 0x10]
	delegate OnStepActionEnded;//[Offset: 0x78, Size: 0x10]
	delegate OnStepActionReset;//[Offset: 0x88, Size: 0x10]
	delegate OnStepActionDisposed;//[Offset: 0x98, Size: 0x10]
	TutorialGlobalConfig* TutorialGlobalConfig;//[Offset: 0x118, Size: 0x8]
	<int,TutorialTableRow> TutorialTableMapRows;//[Offset: 0x120, Size: 0x50]
	TutorialActionTableRow[] ActionTableRows;//[Offset: 0x170, Size: 0x10]
	<int,TutorialConditionTableRow> ConditionTableMapRows;//[Offset: 0x180, Size: 0x50]
	<int,Tutorial*> Tutorials;//[Offset: 0x1d0, Size: 0x50]
	bool bIsConditionCheckCodeParsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	FString TutorialDataTablePath;//[Offset: 0x338, Size: 0x10]
	FString ActionDataTablePath;//[Offset: 0x348, Size: 0x10]
	FString ConditionDataTablePath;//[Offset: 0x358, Size: 0x10]
	FString TutorialGlobalConfigPath;//[Offset: 0x368, Size: 0x10]
	<uint16,FName> OriginCheckFuncNames;//[Offset: 0x378, Size: 0x50]
	<uint16,Function*> CheckFuncs;//[Offset: 0x3c8, Size: 0x50]
	<FString,CacheConditionInfo> CacheRanConditions;//[Offset: 0x428, Size: 0x50]
	TutorialLevelSaveGame* CurrentTutorialLevelSaveGame;//[Offset: 0x488, Size: 0x8]
	FString[] TriggerWidgetClicked(out const FString[] Params);// 0x5ec704f39041
	FString[] TriggerWeaponSlotHasSpecifiedItem(out const FString[] Params);// 0x5ec604f39041
	FString[] TriggerUseSpecifiedWeaponAbility(out const FString[] Params);// 0x5ec504f39041
	FString[] TriggerUseSpecifiedVehicleWeapon(out const FString[] Params);// 0x5ec404f39041
	FString[] TriggerUseSpecifiedVehicleAbility(out const FString[] Params);// 0x5ec304f39041
	FString[] TriggerTutorialLevelDone(out const FString[] Params);// 0x5ec204f39041
	void TriggerTutorialInternal(enum TriggerID);// 0x5ec104f39041
	void TriggerTutorialEvents(out enum[] TriggerTypeArrays, bool bPostTrigger);// 0x5ec004f39041
	void TriggerTutorialEvent(enum TriggerType, bool bPostTrigger);// 0x5ebf04f39041
	FString[] TriggerSprintingContinuously(out const FString[] Params);// 0x5ebe04f39041
	FString[] TriggerSpecifiedPlayerProficiency(out const FString[] Params);// 0x5ebd04f39041
	FString[] TriggerShieldNotFull(out const FString[] Params);// 0x5ebc04f39041
	FString[] TriggerRunningStep(out const FString[] Params);// 0x5ebb04f39041
	FString[] TriggerPlayerUpgradeBattleLevel(out const FString[] Params);// 0x5eba04f39041
	FString[] TriggerPlayerInTargetStage(out const FString[] Params);// 0x5eb904f39041
	FString[] TriggerPlayerAcountLevel(out const FString[] Params);// 0x5eb804f39041
	FString[] TriggerOpenTreasureBox(out const FString[] Params);// 0x5eb704f39041
	FString[] TriggerOpenBigMapUMG(out const FString[] Params);// 0x5eb604f39041
	FString[] TriggerNearAirDropBox(out const FString[] Params);// 0x5eb504f39041
	FString[] TriggerJumpBegin(out const FString[] Params);// 0x5eb404f39041
	FString[] TriggerHasUIPanelOpened(out const FString[] Params);// 0x5eb304f39041
	FString[] TriggerHasTakenDamage(out const FString[] Params);// 0x5eb204f39041
	FString[] TriggerHasSpecifiedItem(out const FString[] Params);// 0x5eb104f39041
	FString[] TriggerHasSpecifiedEquipmentByType(out const FString[] Params);// 0x5eb004f39041
	FString[] TriggerFeatureUnlock(out const FString[] Params);// 0x5eaf04f39041
	FString[] TriggerEquipSpecifiedWeapon(out const FString[] Params);// 0x5eae04f39041
	FString[] TriggerBotAIDying(out const FString[] Params);// 0x5ead04f39041
	FString[] TriggerApproachTreasureBox(out const FString[] Params);// 0x5eac04f39041
	FString[] TriggerAlreadyTriggeredMaxCount(out const FString[] Params);// 0x5eab04f39041
	FString[] TriggerAirDropBoxLanded(out const FString[] Params);// 0x5eaa04f39041
	void TickActivatedTutorials();// 0x5ea904f39041
	void SetWidgetInteractionFlag(FString InWidgetName, enum InWidgetInteractionFlag);// 0x5ea804f39041
	void SetTipsUIInteractionFlag(int TutorialID, bool boolChange);// 0x5ea704f39041
	void SetSignNameBool(FString SignName, bool InValue);// 0x5ea604f39041
	void SetFlagNameCount(FString FlagName, int Num);// 0x5ea504f39041
	void SetAirDropBoxLandedAddOneNum(int Value);// 0x5ea404f39041
	void SaveTutorialLevelSaveGame();// 0x5ea304f39041
	void SaveLevelTutorialID(FString InLevelName, int InTutorialID);// 0x5ea204f39041
	void SaveLevelTutorialHasFinished(FString InLevelName, bool InFinished);// 0x5ea104f39041
	void SaveLevelPlayerStartTag(FString InLevelName, FString InPlayerStartTag);// 0x5ea004f39041
	void RequestAddTutorialProgress(int TutorialID, int Progress);// 0x5e9f04f39041
	void ReceiveOnSingleTutorialStart(int TutorialID);// 0x5e9e04f39041
	void ReceiveOnSingleTutorialFinished(int TutorialID);// 0x5e9d04f39041
	void ReceiveLoadTutorialLevelData();// 0x5e9c04f39041
	void ReceiveLoadData();// 0x5e9b04f39041
	void ReceiveClearData();// 0x5e9a04f39041
	void OnPostLoadMap(FString LevelName);// 0x5e9904f39041
	bool IsInTutorialLevel();// 0x5e9804f39041
	void InitGuideActorByActionID(int[] ActionIDs, TutorialLevelInteractableActor* TutorialGuideActor);// 0x5e9704f39041
	bool HasAnyTutorialPlaying();// 0x5e9604f39041
	bool HasAnyMandatoryTutorialPlaying();// 0x5e9504f39041
	void GM_OpenUI(int ID);// 0x5e9404f39041
	void GM_CloseUI(int ID);// 0x5e9304f39041
	enum GetWidgetInteractionFlag(FString InWidgetName);// 0x5e9204f39041
	int GetTutorialSingleRoundTriggerMax(int TutorialID);// 0x5e9104f39041
	TutorialLevelSaveGame* GetTutorialLevelSaveGame();// 0x5e9004f39041
	bool GetTipsUIInteractionFlag(int TutorialID);// 0x5e8f04f39041
	bool GetSignNameBool(FString SignName);// 0x5e8e04f39041
	UserWidget* GetPanelUI(FString PanelName);// 0x5e8d04f39041
	int GetLevelTutorialID(FString InLevelName, int DefaultValue);// 0x5e8c04f39041
	bool GetLevelTutorialHasFinished(FString InLevelName, bool DefaultValue);// 0x5e8b04f39041
	int GetFlagNameCount(FString FlagName);// 0x5e8a04f39041
	byte GetCurrentPlayerLevel();// 0x5e8904f39041
	TutorialActionTableRow GetActionDataByID(int ActionDataID);// 0x5e8804f39041
	Widget* FindWidget(out const FName[] InWidgetLink);// 0x5e8704f39041
	void EnterTutorialLevel(FString LevelName, int Proficiency);// 0x5e8604f39041
	bool CheckTutorialTipUIOnClick(out const FString[] InParams);// 0x5e8504f39041
	bool CheckIfWidgetReleased(out const FString[] InParams);// 0x5e8404f39041
	bool CheckIfWidgetPressed(out const FString[] InParams);// 0x5e8304f39041
	bool CheckIfWidgetPlayAnimationFinish(out const FString[] InParams);// 0x5e8204f39041
	bool CheckIfWidgetClicked(out const FString[] InParams);// 0x5e8104f39041
	bool CheckIfWeaponSlotHasSpecifiedItem(out const FString[] InParams);// 0x5e8004f39041
	bool CheckIfUIPanelOpened(out const FString[] InParams);// 0x5e7f04f39041
	bool CheckIfTutorialLevelDone(out const FString[] InParams);// 0x5e7e04f39041
	bool CheckIfTakeDamage(out const FString[] InParams);// 0x5e7d04f39041
	bool CheckIfSprintingContinuously(out const FString[] InParams);// 0x5e7c04f39041
	bool CheckIfSpecifiedPlayerProficiency(out const FString[] InParams);// 0x5e7b04f39041
	bool CheckIfShieldNotFull();// 0x5e7a04f39041
	bool CheckIfRunningStep(out const FString[] InParams);// 0x5e7904f39041
	bool CheckIfReloading();// 0x5e7804f39041
	bool CheckIfRechargingShield();// 0x5e7704f39041
	bool CheckIfPlayerLevel(out const FString[] InParams);// 0x5e7604f39041
	bool CheckIfPlayerInTargetScene(out const FString[] InParams);// 0x5e7504f39041
	bool CheckIfPlayerInBattling();// 0x5e7404f39041
	bool CheckIfPlayerBattleLevel(out const FString[] InParams);// 0x5e7304f39041
	bool CheckIfOpenBigMapUMG();// 0x5e7204f39041
	bool CheckIfNearAirDropBox();// 0x5e7104f39041
	bool CheckIfJumpBegin();// 0x5e7004f39041
	bool CheckIfJetFlyingVertically();// 0x5e6f04f39041
	bool CheckIfJetFlyingHorizontally();// 0x5e6e04f39041
	bool CheckIfInWater();// 0x5e6d04f39041
	bool CheckIfInVehicle();// 0x5e6c04f39041
	bool CheckIfInAir();// 0x5e6b04f39041
	bool CheckIfHasSpecifiedItem(out const FString[] InParams);// 0x5e6a04f39041
	bool CheckIfHasSpecifiedEquipmentByType(out const FString[] InParams);// 0x5e6904f39041
	bool CheckIfHasSpecifiedEquipmentById(out const FString[] InParams);// 0x5e6804f39041
	bool CheckIfHasShield();// 0x5e6704f39041
	bool CheckIfHasMatched();// 0x5e6604f39041
	bool CheckIfGrowTaskInLevelReceivedAnimationFinish(out const FString[] InParams);// 0x5e6504f39041
	bool CheckIfGrowLevelRewardIsInStatus(out const FString[] InParams);// 0x5e6404f39041
	bool CheckIfFeatureUnlock(out const FString[] InParams);// 0x5e6304f39041
	bool CheckIfFeatureOpen(out const FString[] InParams);// 0x5e6204f39041
	bool CheckIfEquipSpecifiedWeapon(out const FString[] InParams);// 0x5e6104f39041
	bool CheckIfDying();// 0x5e6004f39041
	bool CheckIfDead();// 0x5e5f04f39041
	bool CheckIfCurrentWeaponAmmoFull();// 0x5e5e04f39041
	bool CheckIfConsumingMedicine();// 0x5e5d04f39041
	bool CheckIfClaimBattlePassLevelReward(out const FString[] InParams);// 0x5e5c04f39041
	bool CheckIfCanUseSpecifiedWeaponAbility(out const FString[] InParams);// 0x5e5b04f39041
	bool CheckIfCanUseSpecifiedVehicleWeapon(out const FString[] InParams);// 0x5e5a04f39041
	bool CheckIfCanUseSpecifiedVehicleAbility(out const FString[] InParams);// 0x5e5904f39041
	bool CheckIfCanOpenTreasureBox();// 0x5e5804f39041
	bool CheckIfCanJetFlyVertically();// 0x5e5704f39041
	bool CheckIfCanJetFlyHorizontally();// 0x5e5604f39041
	bool CheckIfBoughtBattlePass();// 0x5e5504f39041
	bool CheckIfBotAIDying(out const FString[] InParams);// 0x5e5404f39041
	bool CheckIfBattlePassLevelGreaterThan(out const FString[] InParams);// 0x5e5304f39041
	bool CheckIfApproachElectronicTreasureBox();// 0x5e5204f39041
	bool CheckIfAlreadyTriggeredMaxCount(out const FString[] InParams);// 0x5e5104f39041
	bool CheckIfAirDropBoxLanded();// 0x5e5004f39041
	bool CheckConsumeItemButtonType(out const FString[] InParams);// 0x5e4f04f39041
	void AddTutorialProgress(int TutorialID, int Progress);// 0x5e4e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialGlobalConfig.DataAsset.Object
	bool bSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	<FString,enum> MapName2TutorialStage;//[Offset: 0x38, Size: 0x50]
	float SubtitleDisappearTime;//[Offset: 0x88, Size: 0x4]
	float AsyncLoadUIDelayTime;//[Offset: 0x8c, Size: 0x4]
	float SameConditionCheckInterval;//[Offset: 0x90, Size: 0x4]
	TutorialLevelConfig TutorialLevelConfig;//[Offset: 0x98, Size: 0x38]
	enum GetTutorialStageByLevelName(FString LevelName);// 0x5e4d04f39041
	FString GetTutorialLevelMainMapPath();// 0x5e4c04f39041
	FString GetTutorialLevelMainMapName();// 0x5e4b04f39041
	TutorialLevelConfigData GetTutorialLevelConfigDataByName(FString LevelName);// 0x5e4a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialLevelConfig
	TutorialLevelConfigData[] LevelConfigDatas;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath MainMapPath;//[Offset: 0x10, Size: 0x18]
	int VeteranTutorialID;//[Offset: 0x28, Size: 0x4]
	float RepeatOperationTime;//[Offset: 0x2c, Size: 0x4]
	float WaitToEndTime;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialLevelConfigData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	int[] TutorialIds;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	enum Type;//[Offset: 0x20, Size: 0x1]
	enum TriggerStage;//[Offset: 0x21, Size: 0x1]
	TutorialSoftCondition TriggerCondition;//[Offset: 0x28, Size: 0x28]
	int EndNum;//[Offset: 0x50, Size: 0x4]
	TutorialSoftCondition ForeverClosedCondition;//[Offset: 0x58, Size: 0x28]
	int[] ActionIDs;//[Offset: 0x80, Size: 0x10]
	bool bUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bMandatory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool bStartUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]
	bool bWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93, Size: 0x1]
	bool biOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAndroid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialTableRowBase.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialSoftCondition
	FString ConditionStr;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ConditionBP;//[Offset: 0x10, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialActionTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	enum UIType;//[Offset: 0x20, Size: 0x1]
	TutorialTipAndEffectUI TutorialTipAndEffectUI;//[Offset: 0x28, Size: 0x70]
	TutorialSpecialUI TutorialSpecialUI;//[Offset: 0x98, Size: 0x18]
	int NoticeLocTextId;//[Offset: 0xb0, Size: 0x4]
	TutorialSubtitle TutorialSubtitle;//[Offset: 0xb8, Size: 0x18]
	bool bRepeatTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	TutorialRepeatTip RepeatTip;//[Offset: 0xd8, Size: 0x18]
	TutorialBackgroundMusicTableRow TutorialBackgroundMusic;//[Offset: 0xf0, Size: 0x20]
	TutorialSoftCondition EndCondition;//[Offset: 0x110, Size: 0x28]
	TutorialSoftCondition InterruptCondition;//[Offset: 0x138, Size: 0x28]
	float WaitTime;//[Offset: 0x160, Size: 0x4]
	float MinExecuteTime;//[Offset: 0x164, Size: 0x4]
	int[] OpenBehaviors;//[Offset: 0x168, Size: 0x10]
	int[] CloseBehaviors;//[Offset: 0x178, Size: 0x10]
	int FixedTriggerAreaID;//[Offset: 0x188, Size: 0x4]
	int[] BotAISpawnIDs;//[Offset: 0x190, Size: 0x10]
	int[] BotAIDeathIDs;//[Offset: 0x1a0, Size: 0x10]
	int[] BotAIOnVehicleSpawnIDs;//[Offset: 0x1b0, Size: 0x10]
	int[] BotAIOnVehicleDeathIDs;//[Offset: 0x1c0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialTipAndEffectUI
	FString LinkedComponent;//[Offset: 0x0, Size: 0x10]
	FString LimitedListView;//[Offset: 0x10, Size: 0x10]
	SoftObjectPath TutorialExpressionBPPath;//[Offset: 0x20, Size: 0x18]
	SoftObjectPath TutorialEffectBPPath;//[Offset: 0x38, Size: 0x18]
	Vector2D TutorialBPLocation;//[Offset: 0x50, Size: 0x8]
	bool HorizontalDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int LocTextID;//[Offset: 0x5c, Size: 0x4]
	float LocTextDuration;//[Offset: 0x60, Size: 0x4]
	float DelayShowUITime;//[Offset: 0x64, Size: 0x4]
	float WaitUIShowTime;//[Offset: 0x68, Size: 0x4]
	enum UIParent;//[Offset: 0x6c, Size: 0x1]
	bool OpenEffectSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	bool NeedMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialSpecialUI
	SoftObjectPath TutorialSpecialUIBPPath;//[Offset: 0x0, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialSubtitle
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x0, Size: 0x10]
	float DelayTime;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialSingleSubtitle
	FString LocalTextId;//[Offset: 0x0, Size: 0x10]
	FString Voice;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialRepeatTip
	float StartTime;//[Offset: 0x0, Size: 0x4]
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialBackgroundMusicTableRow
	FString TutorialPlayMusicName;//[Offset: 0x0, Size: 0x10]
	FString TutorialStopMusicName;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialConditionTableRow.TutorialTableRowBase.TableRowBase
	byte TriggerType;//[Offset: 0xc, Size: 0x1]
	FString[] Parameters;//[Offset: 0x10, Size: 0x10]
	FString Description;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Tutorial.Object
	TutorialTableRow Data;//[Offset: 0x60, Size: 0x98]
	TutorialTriggerCondition* TriggerConditionBP;//[Offset: 0xf8, Size: 0x8]
	TutorialTaskSequenceAction* TutorialTask;//[Offset: 0x100, Size: 0x8]
	void Stop();// 0x604b04f39041
	void OnSingleTaskFinish();// 0x604a04f39041
	TutorialTableRow GetTableRowData();// 0x604904f39041
	int GetCurrentFinishNum();// 0x604804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialTriggerCondition.TutorialCondition.Object
	SolarTutorialManager* GetSolarTutorialManager();// 0x607104f39041
	bool CheckSatisfy(out const TutorialTableRow InData);// 0x607004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialCondition.Object
	FString GetWorldName();// 0x604d04f39041
	SolarCharacter* GetPlayer();// 0x604c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialTaskSequenceAction.SequenceNode.ActionNode.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SequenceNode.ActionNode.Object
	ActionNode*[] Nodes;//[Offset: 0x70, Size: 0x10]
	ActionNode*[] ExecutingNodes;//[Offset: 0x80, Size: 0x10]
	int TotalCount();// 0x4d0804f39041
	ActionNode* GetCurrentExecutingNode();// 0x4d0704f39041
	SequenceNode* Append(ActionNode* Node);// 0x4d0604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActionNode.Object
	delegate OnBeganCallback;//[Offset: 0x28, Size: 0x10]
	delegate OnEndedCallback;//[Offset: 0x38, Size: 0x10]
	delegate OnResetCallback;//[Offset: 0x48, Size: 0x10]
	delegate OnDisposedCallback;//[Offset: 0x58, Size: 0x10]
	void Reset();// 0x442904f39041
	bool Finished();// 0x442804f39041
	void Finish();// 0x442704f39041
	bool Execute(float DeltaTime);// 0x442604f39041
	bool Disposed();// 0x442504f39041
	void Dispose();// 0x442404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialLevelInteractableActor.Actor.Object
	void UnregisterEvent();// 0x605904f39041
	void RegisterEvent();// 0x605804f39041
	SolarTutorialManager* GetSolarTutorialManager();// 0x605704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialLevelSaveGame.SaveGame.Object
	<FString,TutorialLevelSaveData> TutorialLevelSaveDatas;//[Offset: 0x28, Size: 0x50]
	enum PlayerProficiency;//[Offset: 0x78, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialLevelSaveData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	FString PlayerStartTag;//[Offset: 0x10, Size: 0x10]
	bool bTutorialHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int TutorialID;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CacheConditionInfo
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementStageManager.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	int CurStageIndex;//[Offset: 0x38, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x3c, Size: 0x4]
	DataTable* SettlementConfig;//[Offset: 0x40, Size: 0x8]
	SettlementFormula* Formula;//[Offset: 0x48, Size: 0x8]
	void UpdateModeConfig(const int InConfigID);// 0x4d2204f39041
	void SkipToTarget();// 0x4d2104f39041
	void ShowNextStage();// 0x4d2004f39041
	void ShowDiePage();// 0x4d1f04f39041
	void Init();// 0x4d1e04f39041
	class SolarUWSettlementBase GetSettlementUIClass();// 0x4d1d04f39041
	int GetSettlementStageID();// 0x4d1c04f39041
	SettlementConfig GetSettlementConfigRow();// 0x4d1b04f39041
	SettlementFormula* GetFormula();// 0x4d1a04f39041
	FString GetClassRelativePathName(const class Object InClass);// 0x4d1904f39041
	void CloseDiePage();// 0x4d1804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUWSettlementBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MvpCharacterID;//[Offset: 0x400, Size: 0x4]
	int MvpSkinID;//[Offset: 0x404, Size: 0x4]
	SettlementStageManager* SettlementStageManager;//[Offset: 0x408, Size: 0x8]
	void SetStageManager(SettlementStageManager* InStageManager);// 0x5ee904f39041
	void PlayMvpCharacterVoice();// 0x5ee804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementConfig.TableRowBase
	int SettlementID;//[Offset: 0x8, Size: 0x4]
	SettlementStageConfig StageConfig;//[Offset: 0x10, Size: 0x40]
	class SettlementFormula* Formula;//[Offset: 0x50, Size: 0x28]
	bool IsValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementStageConfig
	class SolarUWSettlementBase* Page_Die;//[Offset: 0x0, Size: 0x28]
	int Page_SkipIndex;//[Offset: 0x28, Size: 0x4]
	class SolarUWSettlementBase[] SettlementStage;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementFormula.Actor.Object
	FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x4d1604f39041
	int GetZomborg(out const SettlementParam_Zomborg InParam);// 0x4d1504f39041
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x4d1404f39041
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam);// 0x4d1304f39041
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x4d1204f39041
	int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam);// 0x4d1104f39041
	FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam);// 0x4d1004f39041
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerID, out FString PBName);// 0x4d0f04f39041
	float GetKDA(out const SettlementParam_KDA InParam);// 0x4d0e04f39041
	FString[] GetGroupResultPlayerExData(FString SolarPlayerID, out FString PBName);// 0x4d0d04f39041
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam);// 0x4d0c04f39041
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x4d0b04f39041
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x4d0a04f39041
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param);// 0x4d0904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_Zomborg
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float LifeTime;//[Offset: 0x8, Size: 0x4]
	int PlayerRank;//[Offset: 0xc, Size: 0x4]
	float GoldPunishRate;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_WeaponExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float UseTime;//[Offset: 0x8, Size: 0x4]
	int WeaponKillNum;//[Offset: 0xc, Size: 0x4]
	int WeaponAssitNum;//[Offset: 0x10, Size: 0x4]
	float ExpRatio;//[Offset: 0x14, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_PageParam
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int WeaponExpSettlmentNum;//[Offset: 0x4, Size: 0x4]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_CommonExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float LifeTime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x24, Size: 0x4]
	float CoinPunishRatio;//[Offset: 0x28, Size: 0x4]
	int RankCorePunish;//[Offset: 0x2c, Size: 0x4]
	int BaseExp;//[Offset: 0x30, Size: 0x4]
	float ExpRatio;//[Offset: 0x34, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_KDA
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DeathNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_MVP
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float LifeTime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGMCrossLevelDataMgr.Object
	<FString,Object*> CrossLevelData;//[Offset: 0x28, Size: 0x50]
	void RegistryCrossLevelData(FString InSoltName, Object* InDataObj);// 0x45a404f39041
	Object* GetCrossLevelData(FString InSoltName);// 0x45a304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGraphicSettings.Object
	uint32 CurrentActiveColorThemeIndex;//[Offset: 0x28, Size: 0x4]
	FrameRateLevelItem FrameRateLevelItem;//[Offset: 0x2c, Size: 0x10]
	<enum,enum> DefaultQualityToDefaultFrameRateLevel;//[Offset: 0x80, Size: 0x50]
	<enum,MaxQualityConfig> DefaultAndCurQualityToMaxFrameRateLevel;//[Offset: 0xd0, Size: 0x50]
	int MobileMaxFrameRate;//[Offset: 0x120, Size: 0x4]
	int HighRefreshRateThreshold;//[Offset: 0x124, Size: 0x4]
	int DefaultMSAALevel;//[Offset: 0x128, Size: 0x4]
	ContentScaleFactorLevelItem ContentScaleFactorLevelItems;//[Offset: 0x130, Size: 0x58]
	<enum,enum> DefaultContentScaleFactorLevel;//[Offset: 0x290, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FrameRateLevelItem
	enum FrameRateLevel;//[Offset: 0x0, Size: 0x1]
	float FrameRateLobby;//[Offset: 0x4, Size: 0x4]
	float FrameRateInGame;//[Offset: 0x8, Size: 0x4]
	float FrameRatePC;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaxQualityConfig
	<enum,enum> CurQualityToMaxFrameRateLevel;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ContentScaleFactorLevelItem
	enum ContentScaleFactorLevel;//[Offset: 0x0, Size: 0x1]
	<enum,float> DeviceLevelContentScaleFactorMap;//[Offset: 0x8, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAccessLuaDataUtils.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	void GetMatchResult(out MatchResult MatchResult);// 0x4da504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MatchResult
	FString BattleID;//[Offset: 0x0, Size: 0x10]
	FString BattleAddr;//[Offset: 0x10, Size: 0x10]
	FString Token;//[Offset: 0x20, Size: 0x10]
	int ModeID;//[Offset: 0x30, Size: 0x4]
	int RuleID;//[Offset: 0x34, Size: 0x4]
	FString SelfPlayerID;//[Offset: 0x38, Size: 0x10]
	MatchResult_Group[] Groups;//[Offset: 0x48, Size: 0x10]
	FString MapName;//[Offset: 0x58, Size: 0x10]
	SoftObjectPath MapPath;//[Offset: 0x68, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MatchResult_Group
	int groupid;//[Offset: 0x0, Size: 0x4]
	MatchResult_Player[] Players;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MatchResult_Player
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	FString playerName;//[Offset: 0x10, Size: 0x10]
	int AvatarID;//[Offset: 0x20, Size: 0x4]
	int fightCharacterID;//[Offset: 0x24, Size: 0x4]
	int fightCharacterSkinID;//[Offset: 0x28, Size: 0x4]
	SoftObjectPath SkinConfigPath;//[Offset: 0x30, Size: 0x18]
	FString CharacterName;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAkSoundManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	void UnloadCharacterOwnedBanks(int CharacterId, byte Mode);// 0x4e6e04f39041
	void UnloadBankIgnoreStrategy(out const FName BankName);// 0x4e6d04f39041
	void UnloadAllCharacterOwnedBanksWithResList(byte Mode, out const <byte> ResCategoryList);// 0x4e6c04f39041
	void UnloadAllCharacterOwnedBanks(byte Mode);// 0x4e6b04f39041
	void StopMusicByName(FString MusicEventName);// 0x4e6a04f39041
	void SetVoiceLanguage();// 0x4e6904f39041
	void ReloadVoiceBanks();// 0x4e6804f39041
	void PlayMusicByName(FString MusicEventName);// 0x4e6704f39041
	void OnBankLoadedForEventAtLocationCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x4e6604f39041
	void OnAkBankUnloadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x4e6504f39041
	void OnAkBankLoadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x4e6404f39041
	void LoadCharacterOwnedBanks(int CharacterId, byte Mode);// 0x4e6304f39041
	void LoadBankIgnoreStrategy(out const FName BankName);// 0x4e6204f39041
	void LoadAllCharacterOwnedBanksWithResList(byte Mode, out const <byte> ResCategoryList);// 0x4e6104f39041
	void LoadAllCharacterOwnedBanks(byte Mode);// 0x4e6004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KeyMappingManager.Object
	delegate OnKeyMappingUpdate;//[Offset: 0x120, Size: 0x10]
	delegate OnKeyMappingConfirm;//[Offset: 0x130, Size: 0x10]
	delegate OnKeyboardUpdate;//[Offset: 0x140, Size: 0x10]
	<FString,FString> OccupiedKeyMap;//[Offset: 0x160, Size: 0x50]
	KeyMappingFileMgr* KeyMappingFileMgr;//[Offset: 0x260, Size: 0x8]
	void SwitchKeyMappingPlanIndex(int PlanIndex);// 0x49b104f39041
	void SwitchKeyMapping(FString ActionName, int SettingIndex, bool Enable, bool Force);// 0x49b004f39041
	void ResetKeyMapping();// 0x49af04f39041
	bool IsComboKey(FString KeyName);// 0x49ae04f39041
	void ImportKeyMappingSetting();// 0x49ad04f39041
	bool HasKeyModified();// 0x49ac04f39041
	FString[] GetAllActionNames(int PlanIndex);// 0x49ab04f39041
	FString[] GetActionKeyMapping(FString ActionName, int PlanIndex, int SettingIndex);// 0x49aa04f39041
	void ApplyResult();// 0x49a904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KeyMappingFileMgr.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarEasyAntiCheatManager.Object
	bool EnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bEnableAntiCheatLauncherCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	void TestSendDSAction(const int ActionReason, FString ActionDetials);// 0x511e04f39041
	void SwitchAntiCheatState();// 0x511d04f39041
	void SetEOSOpenIDToken(FString OpenIDToken);// 0x511c04f39041
	void SendSteamAntiCheatRequest(const int ErrorCode);// 0x511b04f39041
	void ReportAntiCheatBI(const int ErrorCode);// 0x511a04f39041
	bool IsLaunchbyEOSBootstrapper();// 0x511904f39041
	bool IsEOSSettingChanged();// 0x511804f39041
	void EasyAntiCheatLogin(FString AppToken);// 0x511704f39041
	void AntiCheatLauncherCheck();// 0x511604f39041
	bool AntiCheatEosSettingCheck();// 0x511504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSpecialEffectsMgr.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarFontManager.Object
	Font* ChineseFont;//[Offset: 0x30, Size: 0x8]
	void SaveChineseFontSetting(bool bHasLoad);// 0x516c04f39041
	bool MergeCompositeFont(FString NewFontAssetPath);// 0x516b04f39041
	Font* LoadNewFont(FString NewFontAssetPath);// 0x516a04f39041
	bool IsNeedMergeChineseFont(bool bAutoLoad);// 0x516904f39041
	void Init();// 0x516804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarDownloaderManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	delegate OnDownloaderProgress;//[Offset: 0x38, Size: 0x10]
	delegate OnDownloaderSuccess;//[Offset: 0x48, Size: 0x10]
	delegate OnDownloaderFailed;//[Offset: 0x58, Size: 0x10]
	bool bIsDownloaderEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bSupportFileCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	int CacheExpiredSeconds;//[Offset: 0x6c, Size: 0x4]
	<FString,DownloaderHttpTask*> TaskMap;//[Offset: 0x70, Size: 0x50]
	void OnDownloaderSuccessBroadcastNextTick(FString InUrl, out const DownloaderResponse InResponse);// 0x50e504f39041
	void OnDownloaderProgressBroadcastNextTick(FString InUrl, out const int BytesSent, out const int BytesReceived);// 0x50e404f39041
	void OnDownloaderFailedBroadcastNextTick(FString InUrl, out const enum InFailedType, out const int InErrorCode);// 0x50e304f39041
	void LaunchTask(FString InUrl);// 0x50e204f39041
	bool IsTaskExist(FString InUrl);// 0x50e104f39041
	bool IsManagerEnable();// 0x50e004f39041
	DownloaderTaskInfo GetTaskInfo(FString InUrl);// 0x50df04f39041
	FString GetTaskCachePath(FString InUrl);// 0x50de04f39041
	SolarDownloaderManager* Get();// 0x50dd04f39041
	void DownloadCallbackToLuaInternal();// 0x50dc04f39041
	void CreateDownloaderTask(out const DownloaderTaskInfo InTaskInfo, out const delegate SuccessHandle, out const delegate FailedHandle, out const delegate ProgressHandle);// 0x50db04f39041
	bool CanTaskLoadFromCache(FString InUrl);// 0x50da04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DownloaderResponse
	FString URL;//[Offset: 0x0, Size: 0x10]
	int ErrorCode;//[Offset: 0x10, Size: 0x4]
	byte[] Data;//[Offset: 0x18, Size: 0x10]
	bool bWasSuccessful;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int ContentLength;//[Offset: 0x2c, Size: 0x4]
	int DataLength;//[Offset: 0x30, Size: 0x4]
	int64 Timestamp;//[Offset: 0x38, Size: 0x8]
	enum RawDataAction;//[Offset: 0x40, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DownloaderTaskInfo
	FString URL;//[Offset: 0x0, Size: 0x10]
	FString JsonRequestStr;//[Offset: 0x10, Size: 0x10]
	bool bCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int64 CompleteTimeStamp;//[Offset: 0x28, Size: 0x8]
	bool bUsingResumeTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bForceRedownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bSaveToCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	FString FileDirectory;//[Offset: 0x38, Size: 0x10]
	FString Filename;//[Offset: 0x48, Size: 0x10]
	FString FileExtension;//[Offset: 0x58, Size: 0x10]
	enum RawDataAction;//[Offset: 0x68, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DownloaderHttpTask.Object
	delegate OnTaskProgress;//[Offset: 0x28, Size: 0x10]
	delegate OnTaskSuccess;//[Offset: 0x38, Size: 0x10]
	delegate OnTaskFailed;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AndroidInputManager.Object
	delegate OnAndroidBackPressed;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ProtectBaseManager.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RegistedActorContainer
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AntiCheatSetting
	int64 ID;//[Offset: 0x0, Size: 0x8]
	int64 ValueType;//[Offset: 0x8, Size: 0x8]
	double ValueStart;//[Offset: 0x10, Size: 0x8]
	double ValueEnd;//[Offset: 0x18, Size: 0x8]
	int64 Tolerance;//[Offset: 0x20, Size: 0x8]
	int64 ProbeInterval;//[Offset: 0x28, Size: 0x8]
	FString VariableName;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScreenshotConfig
	bool EnableOnCurrentReportGameCheating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int MaxCountInRound;//[Offset: 0x4, Size: 0x4]
	FString ScreenshotMoment;//[Offset: 0x8, Size: 0x10]
	int ScreenshotInterval;//[Offset: 0x18, Size: 0x4]
	int ScreenshotWidth;//[Offset: 0x1c, Size: 0x4]
	int ScreenshotQuality;//[Offset: 0x20, Size: 0x4]
	FString ImageSaveType;//[Offset: 0x28, Size: 0x10]
	FString ScreenshotMode;//[Offset: 0x38, Size: 0x10]
	int ImageMaxSize;//[Offset: 0x48, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVibrateManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	GameplayVibrateDataAsset* GameplayVibrateDataAsset;//[Offset: 0x50, Size: 0x8]
	<enum,enum> CurrentVibrateCategoryIntensityMobile;//[Offset: 0x58, Size: 0x50]
	<enum,enum> CurrentVibrateCategoryIntensityGamepad;//[Offset: 0xa8, Size: 0x50]
	DataTable* WeaponVibrateTable;//[Offset: 0xf8, Size: 0x8]
	VibrateConfig* VibrateConfig;//[Offset: 0x100, Size: 0x8]
	enum WeaponVibrateFactorMobile;//[Offset: 0x108, Size: 0x1]
	enum WeaponVibrateFactorGamepad;//[Offset: 0x109, Size: 0x1]
	float CacheWeaponChargeTime;//[Offset: 0x10c, Size: 0x4]
	void Stop();// 0x5f4504f39041
	void SetWeaponVibrateFactor();// 0x5f4404f39041
	void SetVibrateAbilityEnable(bool bOnEnable);// 0x5f4304f39041
	void SetGameplayVibrateIntensityByUserSetting();// 0x5f4204f39041
	void SetGameplayVibrateIntensity(enum Category, enum Intensity);// 0x5f4104f39041
	void SendLoopParam(int Amplitude, int Interval);// 0x5f4004f39041
	void PlayWeaponVibrate(int InWeaponID, enum InType, float InChargeTime);// 0x5f3f04f39041
	void PlayByParams(out const VibratePlayParams Params, const enum DeviceType);// 0x5f3e04f39041
	bool GetVibrateAbilityEnable();// 0x5f3d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VibratePlayParams
	FString ClipToPlay;//[Offset: 0x0, Size: 0x10]
	int Duration;//[Offset: 0x10, Size: 0x4]
	int Loop;//[Offset: 0x14, Size: 0x4]
	int Priority;//[Offset: 0x18, Size: 0x4]
	int Interval;//[Offset: 0x1c, Size: 0x4]
	int Amplitude;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayVibrateDataAsset.DataAsset.Object
	<enum,VibrateIntensityPlayParams> CategoryIntensityMap;//[Offset: 0x30, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VibrateIntensityPlayParams
	<enum,VibrateDevicePlayParams> IntensityMap;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VibrateDevicePlayParams
	<enum,VibratePlayParams> DeviceMap;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VibrateConfig.DataAsset.Object
	DataTable* dataTab;//[Offset: 0x30, Size: 0x8]
	<enum,VibrateWeaponFactorDeviceMap> WeaponVibrateFactorMap;//[Offset: 0x38, Size: 0x50]
	SoftObjectPath WeaponDataTabPath;//[Offset: 0x88, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VibrateWeaponFactorDeviceMap
	<enum,float> DeviceMap;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlueCircleManager.GameManagerBase.Info.Actor.Object
	BlueCircleInfo[] BlueCircleInfoList;//[Offset: 0x228, Size: 0x10]
	SolarBlueCircle* BlueCircle;//[Offset: 0x238, Size: 0x8]
	class Actor* BlueCircleClass;//[Offset: 0x240, Size: 0x8]
	int[] LevelToOutcomIDs;//[Offset: 0x248, Size: 0x10]
	int[] ExtraOutcomeIDs;//[Offset: 0x258, Size: 0x10]
	BlueCircleInfo ActiveBlueCircleInfo;//[Offset: 0x268, Size: 0x14]
	void OnRep_ActiveBlueCircleInfo();// 0x456904f39041
	void OnLevelLoaded(FString LevelName);// 0x456804f39041
	int[] GetExtraOutcomeIDs();// 0x456704f39041
	BlueCircleInfo GetActiveBlueCircleInfo();// 0x456604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameManagerBase.Info.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlueCircleInfo
	Vector CenterLocation;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
	bool bHiddenInLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBlueCircle.Actor.Object
	float HightLimit;//[Offset: 0x228, Size: 0x4]
	float MinimumDistance;//[Offset: 0x22c, Size: 0x4]
	float FadeOutTime;//[Offset: 0x230, Size: 0x4]
	StaticMeshComponent* CenterStaticMeshComponent;//[Offset: 0x238, Size: 0x8]
	StaticMeshComponent* GlowStaticMeshComponent;//[Offset: 0x240, Size: 0x8]
	void SetBlueCircleEnd();// 0x4ec404f39041
	void OnCustomGameStateChanged(const enum NewGameState);// 0x4ec304f39041
	StaticMeshComponent* GetGlowStaticMeshComponent();// 0x4ec204f39041
	StaticMeshComponent* GetCenterStaticMeshComponent();// 0x4ec104f39041
	void BlueCircleFadeout();// 0x4ec004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSpreadAndRecoil.Object
	SolarWeapon* Weapon;//[Offset: 0x28, Size: 0x8]
	WeaponShootSpeedPatternRuntime* ShootSpeedPattern;//[Offset: 0x38, Size: 0x8]
	WeaponSpreadPatternRuntime* SpreadPattern;//[Offset: 0x40, Size: 0x8]
	WeaponRecoilPatternRuntime* RecoilPattern;//[Offset: 0x48, Size: 0x8]
	WeaponTPPKickPatternRuntime* TPPKickPattern;//[Offset: 0x50, Size: 0x8]
	WeaponGunKickPatternRuntime* GunKickPattern;//[Offset: 0x58, Size: 0x8]
	RecoverableRecoilPatternRuntime* CrossHairKickPattern;//[Offset: 0x60, Size: 0x8]
	WeaponCameraShakePatternRuntime* ShakePatternOnShot;//[Offset: 0x68, Size: 0x8]
	WeaponCameraShakePatternRuntime* ShakePatternOnScopeShot;//[Offset: 0x70, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponShootSpeedPatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPatternRuntime.Object
	SolarPattern* PattenData;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPattern.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSpreadPatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponRecoilPatternRuntime.RecoverableRecoilPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RecoverableRecoilPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponTPPKickPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponGunKickPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponCameraShakePatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLandscapeListenerConfig
	bool bListenLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum LSModifiedStrategy;//[Offset: 0x1, Size: 0x1]
	bool bAdjustRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	enum LSDestroyStrategy;//[Offset: 0x3, Size: 0x1]
	Vector FreeFallBoxExtent;//[Offset: 0x4, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundGroupPlayContextByCharacter.SoundGroupPlayContext
	SolarCharacter* Self;//[Offset: 0x8, Size: 0x8]
	SolarCharacter* Instigator;//[Offset: 0x10, Size: 0x8]
	SolarCharacter* LocalCharacter;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundGroupPlayContext
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerWeaponRecoilComponent.WeaponRecoilComponent.ActorComponent.Object
	enum CurrentCharacterState;//[Offset: 0x230, Size: 0x1]
	enum CurrentPostureType;//[Offset: 0x231, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartClipComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool IsSupportExtract();// 0x61a104f39041
	Rotator GetHandRotOffset();// 0x61a004f39041
	Vector GetHandLocOffset();// 0x619f04f39041
	float GetDropLifeSpan();// 0x619e04f39041
	FName GetCharacterHandSocket(enum ClipAttachType);// 0x619d04f39041
	FName GetCharacterHandInverseSocket(enum ClipAttachType);// 0x619c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PartID;//[Offset: 0x5f8, Size: 0x4]
	WeaponPartDataAsset* PartDataAsset;//[Offset: 0x600, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartDataAsset.DataAsset.Object
	bool bOnlyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int[] OnlyDataForWeaponSkinIDArray;//[Offset: 0x38, Size: 0x10]
	SoftObjectPath ViewStaticMeshPath;//[Offset: 0x48, Size: 0x18]
	Transform PreviewTransform;//[Offset: 0x60, Size: 0x30]
	SoftObjectPath FightStaticMeshPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath PartIcon;//[Offset: 0xa8, Size: 0x18]
	<int,Vector> SpecificScaleMap;//[Offset: 0xc0, Size: 0x50]
	WeaponPartWeaponAttributeDataAsset* WeaponAttributeConfig;//[Offset: 0x110, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartWeaponAttributeDataAsset.DataAsset.Object
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x30, Size: 0x10]
	WeaponPartWeaponAttributeByWeaponType[] ModifiersByWeaponType;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAttributeModifierContainer
	WeaponAttributeModifier[] Modifiers;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAttributeModifier
	GameplayTag AttributeTag;//[Offset: 0x0, Size: 0x8]
	WeaponAttributeParam[] Modifiers;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAttributeParam
	enum ParamType;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartWeaponAttributeByWeaponType
	enum WeaponType;//[Offset: 0x0, Size: 0x1]
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x8, Size: 0x10]
	WeaponPartWeaponAttributeByWeaponID[] ModifiersByWeaponID;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartWeaponAttributeByWeaponID
	int weaponid;//[Offset: 0x0, Size: 0x4]
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoxChargingInfo
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBurstItemActor.SolarItemActor.SolarDormantActor.Actor.Object
	SolarTreasureBoxActor* OwnerBox;//[Offset: 0x410, Size: 0x8]
	SolarItemBurstShowComponent* BurstShowComponent;//[Offset: 0x418, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemBurstShowComponent.SceneComponent.ActorComponent.Object
	bool bLandedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	float BurstTimeTotal;//[Offset: 0x344, Size: 0x4]
	SyncBurstItemParam BurstItemParam;//[Offset: 0x348, Size: 0x28]
	void OnRep_BurstItemParam();// 0x539704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SyncBurstItemParam
	Vector_NetQuantize StartLoc;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize MediumLoc;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize EndLoc;//[Offset: 0x18, Size: 0xc]
	float BurstLocalHeight;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAchievementComponent.ActorComponent.Object
	DataTable* AchievementHandleConfig;//[Offset: 0xb0, Size: 0x8]
	class AchievementFormula* AchievementFormulaClass;//[Offset: 0xb8, Size: 0x8]
	AchievementFormula* AchievementFormula;//[Offset: 0xc0, Size: 0x8]
	<int,AchievementResult> AllStatisticAchievement;//[Offset: 0x170, Size: 0x50]
	void UnlockAchievement(int InAchievementID);// 0x4dad04f39041
	void SetAchievementValue(int InAchievementID, int InUpdateValue);// 0x4dac04f39041
	bool IsAchievementCompleted(int InAchievementID);// 0x4dab04f39041
	void IncreaseAchievementValue(int InAchievementID, int InUpdateValue);// 0x4daa04f39041
	int GetAchievementPorgressValue(int InAchievementID);// 0x4da904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AchievementFormula.Actor.Object
	SolarAchievementComponent* GetAchievementComponent();// 0x4da804f39041
	int GetAchievedTargetValue(int InAchievementID);// 0x4da704f39041
	int[] GetAchievedConditionValue(int InAchievementID);// 0x4da604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AchievementResult
	int AchievementID;//[Offset: 0x0, Size: 0x4]
	int ProgressValue;//[Offset: 0x4, Size: 0x4]
	bool IsUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum AchievementReportType;//[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpatializeInfoTrack.SpatializeInfo.Info.Actor.Object
	TrackArray TrackArray;//[Offset: 0x230, Size: 0x130]
	float Timeout;//[Offset: 0x3ec, Size: 0x4]
	float MinRevealDistance;//[Offset: 0x3f0, Size: 0x4]
	int MaxTrackNum;//[Offset: 0x3f4, Size: 0x4]
	<TrackItem,3DMeshWidgetTrack*> CurTrackWidgets;//[Offset: 0x3f8, Size: 0x50]
	void UpdateWidgets(bool bFromNetUpdate);// 0x600304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpatializeInfo.Info.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TrackArray.FastArraySerializer
	TrackItem[] Tracks;//[Offset: 0x108, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TrackItem.SpatializeItem.FastArraySerializerItem
	float Time;//[Offset: 0x18, Size: 0x4]
	FString PID;//[Offset: 0x20, Size: 0x10]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bProjected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	Vector FloorLocation;//[Offset: 0x34, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpatializeItem.FastArraySerializerItem
	Vector Location;//[Offset: 0xc, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: 3DMeshWidgetTrack.3DMeshWidget.Actor.Object
	Vector BoxHalfExtent;//[Offset: 0x240, Size: 0xc]
	float PlayerNearbyAlpha;//[Offset: 0x24c, Size: 0x4]
	bool bDebugCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	FName MaterialAlphaParamName;//[Offset: 0x254, Size: 0x8]
	FName MaterialCountDownName;//[Offset: 0x25c, Size: 0x8]
	float MaxTraceDist;//[Offset: 0x264, Size: 0x4]
	float DistFromGround;//[Offset: 0x268, Size: 0x4]
	StaticMeshComponent* StaticMeshCountDown;//[Offset: 0x270, Size: 0x8]
	TextRenderComponent* DistTextComp;//[Offset: 0x278, Size: 0x8]
	MaterialInstanceDynamic* DynamicMaterialIcon;//[Offset: 0x280, Size: 0x8]
	MaterialInstanceDynamic* DynamicMaterialCountDown;//[Offset: 0x288, Size: 0x8]
	MaterialInstanceDynamic* DynamicMaterialDistText;//[Offset: 0x290, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: 3DMeshWidget.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x230, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x540, Size: 0x18]
	MaterialInterface* TextMaterial;//[Offset: 0x558, Size: 0x8]
	bool bFullyExpandedUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	Font* Font;//[Offset: 0x568, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x570, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x571, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x574, Size: 0x4]
	float XScale;//[Offset: 0x578, Size: 0x4]
	float YScale;//[Offset: 0x57c, Size: 0x4]
	float WorldSize;//[Offset: 0x580, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x584, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x588, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x58c, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x590, Size: 0x1]
	void SetYScale(float Value);// 0x6d0004f39041
	void SetXScale(float Value);// 0x6cff04f39041
	void SetWorldSize(float Value);// 0x6cfe04f39041
	void SetVertSpacingAdjust(float Value);// 0x6cfd04f39041
	void SetVerticalAlignment(byte Value);// 0x6cfc04f39041
	void SetTextRenderColor(Color Value);// 0x6cfb04f39041
	void SetTextMaterial(MaterialInterface* Material);// 0x6cfa04f39041
	void SetText(FString Value);// 0x6cf904f39041
	void SetHorizSpacingAdjust(float Value);// 0x6cf804f39041
	void SetHorizontalAlignment(byte Value);// 0x6cf704f39041
	void SetFont(Font* Value);// 0x6cf604f39041
	void K2_SetText(out const FText Value);// 0x6cf504f39041
	Vector GetTextWorldSize();// 0x6cf404f39041
	Vector GetTextLocalSize();// 0x6cf304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBattleWeaponData
	int weaponid;//[Offset: 0x0, Size: 0x4]
	int SkinId;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickInfo.Info.Actor.Object
	FString TeamName;//[Offset: 0x228, Size: 0x10]
	delegate HeroRequestDelegate;//[Offset: 0x238, Size: 0x10]
	enum HeroPickType;//[Offset: 0x248, Size: 0x1]
	int TeammateNumMode;//[Offset: 0x24c, Size: 0x4]
	HeroPickWidget* HeroPickWidget;//[Offset: 0x250, Size: 0x8]
	PlayerSelectInfo[] PlayerSelectInfos;//[Offset: 0x258, Size: 0x10]
	float HeroPickTime;//[Offset: 0x268, Size: 0x4]
	float WaitingToStartTime;//[Offset: 0x270, Size: 0x4]
	int CurrentPickPlayerIndex;//[Offset: 0x274, Size: 0x4]
	float Duration;//[Offset: 0x278, Size: 0x4]
	void ShowHeroPickView();// 0x481d04f39041
	void OnRep_WaitingToStartTime();// 0x481c04f39041
	void OnRep_SelectPlayerChange();// 0x481b04f39041
	void OnRep_PlayerSelectInfos();// 0x481a04f39041
	void OnRep_HeroPickTime();// 0x481904f39041
	void OnGameStart();// 0x481804f39041
	void NetMulticastHeroRequest(int PlayPos, int CharacterId);// 0x481704f39041
	bool HasConfirmInPos(int Pos);// 0x481604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	HeroPickInfo* PickInfo;//[Offset: 0x408, Size: 0x8]
	TileView* CharacterList;//[Offset: 0x410, Size: 0x8]
	HeroPickPlayerSlot*[] PlayerSlots;//[Offset: 0x418, Size: 0x10]
	<int,HeroPickCharacterData*> SelectDataMap;//[Offset: 0x428, Size: 0x50]
	HeroPickDetail* UI_HeroPick_Detail;//[Offset: 0x490, Size: 0x8]
	int CurrentSelectCharacterID;//[Offset: 0x498, Size: 0x4]
	bool Enable3DLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	bool HasTimelineDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49d, Size: 0x1]
	bool UseOpeningTransitionAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49e, Size: 0x1]
	bool StartSkinUIAtTheBeginning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49f, Size: 0x1]
	void TryToEnableHeroRequest();// 0x484704f39041
	void ShowPlayerConfirm(int Pos);// 0x484604f39041
	void ShowMyTurn(bool bShow);// 0x484504f39041
	void ShowMainUICharacter(bool bShow);// 0x484404f39041
	void ShowHeroRequest(int Pos, int CharacterId);// 0x484304f39041
	void SetMidCharacterNameAndIcon(int InCharacterId, int SkinId);// 0x484204f39041
	void SetHeroHPAndSpeed(const int HP, const int Speed);// 0x484104f39041
	void SetHeroFeatures(out const int[] InHeroFeatures);// 0x484004f39041
	void SetEnableRequestHero(bool Enable);// 0x483f04f39041
	void SetEnabledCountdownDisplay(bool Enable);// 0x483e04f39041
	void SetCountDownText(FString Text);// 0x483d04f39041
	void SetClassNameAndIcon(FString ClassName, out const Texture2D* ClassIcon);// 0x483c04f39041
	void SetCharacterNameAndIcon(FString Name, FString SkinName, out const Texture2D* CharacterIcon);// 0x483b04f39041
	void ServerHeroRequest();// 0x483a04f39041
	void RefreshTacticalSkillIcon(out const Texture2D* TacticalSkillIcon);// 0x483904f39041
	void RefreshSuperSkillIcon(out const Texture2D* SuperSkillIcon);// 0x483804f39041
	void RefreshPassiveSKillIcon(out const Texture2D* PassiveSkillIcon);// 0x483704f39041
	void PlayCharacterConfirmVoice(int SkinId);// 0x483604f39041
	void OnGameStateSet(GameStateBase* GameState);// 0x483504f39041
	int GetTeammateNumMode();// 0x483404f39041
	HeroPickCharacterData* FindCharacterListData(int CharacterId);// 0x483304f39041
	void Enable3DHeroPickLayout(bool Enalbe3DLayout);// 0x483204f39041
	void Display3DHeroSelectedAnim(int CharacterId, int SkinId, bool IsConfirm);// 0x483104f39041
	void ConfirmSelect();// 0x483004f39041
	void BP_OnSelfConfirmSelected();// 0x482f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0xbec, Size: 0x4]
	float EntryWidth;//[Offset: 0xbf0, Size: 0x4]
	enum TileAlignment;//[Offset: 0xbf4, Size: 0x1]
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf5, Size: 0x1]
	void SetEntryWidth(float NewWidth);// 0x3f8604f39041
	void SetEntryHeight(float NewHeight);// 0x3f8504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ListView.ListViewBase.Widget.Visual.Object
	byte Orientation;//[Offset: 0xb28, Size: 0x1]
	byte SelectionMode;//[Offset: 0xb29, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0xb2a, Size: 0x1]
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2b, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 0x1]
	float EntrySpacing;//[Offset: 0xb30, Size: 0x4]
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 0x1]
	float ListItemStartPosOffset;//[Offset: 0xb38, Size: 0x4]
	Object*[] ListItems;//[Offset: 0xb40, Size: 0x10]
	bool EnableDelayAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb60, Size: 0x1]
	float DelayAddInterval;//[Offset: 0xb64, Size: 0x4]
	int NumInPanel;//[Offset: 0xb68, Size: 0x4]
	Object*[] DelayAddedListItems;//[Offset: 0xb70, Size: 0x10]
	bool DelayAddAnimFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb80, Size: 0x1]
	delegate BP_OnEntryInitialized;//[Offset: 0xb88, Size: 0x10]
	delegate BP_OnItemClicked;//[Offset: 0xb98, Size: 0x10]
	delegate BP_OnItemDoubleClicked;//[Offset: 0xba8, Size: 0x10]
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0xbb8, Size: 0x10]
	delegate BP_OnItemSelectionChanged;//[Offset: 0xbc8, Size: 0x10]
	delegate BP_OnItemScrolledIntoView;//[Offset: 0xbd8, Size: 0x10]
	void SetSelectionMode(byte SelectionMode);// 0x3f6104f39041
	void SetSelectedIndex(int Index);// 0x3f6004f39041
	void ScrollIndexIntoView(int Index);// 0x3f5f04f39041
	void RemoveItem(Object* Item);// 0x3f5e04f39041
	void NavigateToIndex(int Index);// 0x3f5d04f39041
	bool IsRefreshPending();// 0x3f5c04f39041
	int GetNumItems();// 0x3f5b04f39041
	Object*[] GetListItems();// 0x3f5a04f39041
	Object* GetItemAt(int Index);// 0x3f5904f39041
	int GetIndexForItem(Object* Item);// 0x3f5804f39041
	Object*[] GetDelayAddedListItems();// 0x3f5704f39041
	void ClearListItems();// 0x3f5604f39041
	void BP_SetSelectedItem(Object* Item);// 0x3f5504f39041
	void BP_SetListItems(out const Object*[] InListItems);// 0x3f5404f39041
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x3f5304f39041
	void BP_SetDelayAddListItems(out const Object*[] InListItems);// 0x3f5204f39041
	void BP_ScrollItemIntoView(Object* Item);// 0x3f5104f39041
	void BP_NavigateToItem(Object* Item);// 0x3f5004f39041
	bool BP_IsItemVisible(Object* Item);// 0x3f4f04f39041
	bool BP_GetSelectedItems(out Object*[] Items);// 0x3f4e04f39041
	Object* BP_GetSelectedItem();// 0x3f4d04f39041
	int BP_GetNumItemsSelected();// 0x3f4c04f39041
	void BP_DoDelayAddTick(float DeltaTime);// 0x3f4b04f39041
	void BP_ClearSelection();// 0x3f4a04f39041
	void BP_CancelScrollIntoView();// 0x3f4904f39041
	void AddItem(Object* Item);// 0x3f4804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x138, Size: 0x8]
	float WheelScrollMultiplier;//[Offset: 0x140, Size: 0x4]
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	bool bClampScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 0x1]
	bool bDisableScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 0x1]
	float FixedLineScrollOffset;//[Offset: 0x148, Size: 0x4]
	delegate BP_OnEntryGeneratedPre;//[Offset: 0x150, Size: 0x10]
	delegate BP_OnEntryGenerated;//[Offset: 0x160, Size: 0x10]
	delegate BP_OnEntryReleased;//[Offset: 0x170, Size: 0x10]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x180, Size: 0x80]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x200, Size: 0x7f0]
	enum ScrollBarVisibility;//[Offset: 0x9f0, Size: 0x1]
	Vector2D ScrollbarThickness;//[Offset: 0x9f4, Size: 0x8]
	Margin ScrollbarPadding;//[Offset: 0x9fc, Size: 0x10]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0c, Size: 0x1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0d, Size: 0x1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x3f4704f39041
	void SetScrollOffset(const float InScrollOffset);// 0x3f4604f39041
	void SetScrollBarVisibility(enum InVisibility);// 0x3f4504f39041
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x3f4404f39041
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x3f4304f39041
	void SetEnableScrollAnimation(bool bNewEnableScrollAnimation);// 0x3f4204f39041
	void SetDisableScroll(bool bInDisableScroll);// 0x3f4104f39041
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x3f4004f39041
	void ScrollToTop();// 0x3f3f04f39041
	void ScrollToBottom();// 0x3f3e04f39041
	void RequestRefresh();// 0x3f3d04f39041
	void RegenerateAllEntries();// 0x3f3c04f39041
	float GetScrollOffset();// 0x3f3b04f39041
	UserWidget*[] GetDisplayedEntryWidgets();// 0x3f3a04f39041
	bool GetDisableScroll();// 0x3f3904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x10, Size: 0xe0]
	SlateBrush VerticalBackgroundImage;//[Offset: 0xf0, Size: 0xe0]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x1d0, Size: 0xe0]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x2b0, Size: 0xe0]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x390, Size: 0xe0]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x470, Size: 0xe0]
	SlateBrush NormalThumbImage;//[Offset: 0x550, Size: 0xe0]
	SlateBrush HoveredThumbImage;//[Offset: 0x630, Size: 0xe0]
	SlateBrush DraggedThumbImage;//[Offset: 0x710, Size: 0xe0]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickPlayerSlot.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum UiState;//[Offset: 0x418, Size: 0x1]
	void UpdateSelectPercent(float Percent);// 0x482d04f39041
	void UpdateIconAndName(FString HeroName, int HeroExpLevel, out const Texture2D* IconPath);// 0x482c04f39041
	void ShowConfirm();// 0x482b04f39041
	void SetPlayerPos(FString playerName, const byte InPosInTeam);// 0x482a04f39041
	void CloseHeroRequest();// 0x482904f39041
	void ChangeUIStage(enum State);// 0x482804f39041
	void BP_ShowHeroRequest(FString HeroName);// 0x482704f39041
	void BP_CloseHeroRequest();// 0x482604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickCharacterData.Object
	int CharacterId;//[Offset: 0x28, Size: 0x4]
	int SkinId;//[Offset: 0x2c, Size: 0x4]
	int CharacterProficiencyLevel;//[Offset: 0x30, Size: 0x4]
	int CharacterOwnerType;//[Offset: 0x34, Size: 0x4]
	enum OwnType;//[Offset: 0x40, Size: 0x1]
	int ConfigSortNum;//[Offset: 0x44, Size: 0x4]
	FString HeroName;//[Offset: 0x48, Size: 0x10]
	int[] SelectedPlayerPos;//[Offset: 0x58, Size: 0x10]
	int ConfirmPos;//[Offset: 0x68, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickDetail.SolarUserWidget.UserWidget.Widget.Visual.Object
	void UpdateCharacterDetails(const int CharacterId);// 0x481504f39041
	void RefreshSkillInfo(int SkillType, FString Attribute, FString SkillName, FString SkillDescription, out const Texture2D* SkillIcon);// 0x481404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerSelectInfo
	SolarPlayerState* Player;//[Offset: 0x0, Size: 0x8]
	int PlayerPos;//[Offset: 0x8, Size: 0x4]
	int CharacterId;//[Offset: 0xc, Size: 0x4]
	int SkinId;//[Offset: 0x10, Size: 0x4]
	int HeroExpLevel;//[Offset: 0x14, Size: 0x4]
	bool HasConfirm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float PlayerSelectTime;//[Offset: 0x1c, Size: 0x4]
	bool IsInHeroPickProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameModeStatisticsComponent.GameModeCompBase.ActorComponent.Object
	<FString,PlayerStatisticsData*> AllPlayerStatData;//[Offset: 0xe0, Size: 0x50]
	enum[] SpecialFuncTag;//[Offset: 0x130, Size: 0x10]
	int[] GetValue_IntArray(FString InPlayerID, enum InType);// 0x51d504f39041
	int GetValue_Int(FString InPlayerID, enum InType);// 0x51d404f39041
	PlayerStatisticsData* GetPlayerStatData(FString InPlayerID);// 0x51d304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameModeCompBase.ActorComponent.Object
	bool bPreStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bTakeChargeStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bPostStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	bool bPreHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]
	bool bTakeChargeHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 0x1]
	bool bPostHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf, Size: 0x1]
	bool bPreRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bTakeChargeRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]
	bool bPostRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bPreEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 0x1]
	bool bTakeChargeEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bPostEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	void PreStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x44c604f39041
	void PreRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x44c504f39041
	void PreHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x44c404f39041
	void PreGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x44c304f39041
	void PreGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x44c204f39041
	void PreGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x44c104f39041
	void PreGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x44c004f39041
	void PreEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x44bf04f39041
	void PostStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x44be04f39041
	void PostRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x44bd04f39041
	void PostHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x44bc04f39041
	void PostGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x44bb04f39041
	void PostGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x44ba04f39041
	void PostGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x44b904f39041
	void PostGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x44b804f39041
	void PostEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x44b704f39041
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x44b604f39041
	void OnGameModeRestartPlayer(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x44b504f39041
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x44b404f39041
	void OnGameModeEndPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x44b304f39041
	SolarGameMode* GetGameModeOwner();// 0x44b204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate PreStartPlay;//[Offset: 0x310, Size: 0x10]
	delegate CalledStartPlay;//[Offset: 0x320, Size: 0x10]
	delegate PostStartPlay;//[Offset: 0x330, Size: 0x10]
	delegate PreHandleMatchHasStarted;//[Offset: 0x340, Size: 0x10]
	delegate CalledHandleMatchHasStarted;//[Offset: 0x350, Size: 0x10]
	delegate PostHandleMatchHasStarted;//[Offset: 0x360, Size: 0x10]
	delegate PreRestartPlayer;//[Offset: 0x370, Size: 0x10]
	delegate CalledRestartPlayer;//[Offset: 0x380, Size: 0x10]
	delegate PostRestartPlayer;//[Offset: 0x390, Size: 0x10]
	delegate PreEndPlay;//[Offset: 0x3a0, Size: 0x10]
	delegate CalledEndPlay;//[Offset: 0x3b0, Size: 0x10]
	delegate PostEndPlay;//[Offset: 0x3c0, Size: 0x10]
	GameModeCompBase*[] GameModeComponents;//[Offset: 0x3d0, Size: 0x10]
	int GamePlayMode;//[Offset: 0x3e4, Size: 0x4]
	class Actor[] ManagerClasses;//[Offset: 0x3e8, Size: 0x10]
	FString CharacterClassPath;//[Offset: 0x3f8, Size: 0x10]
	int CharacterIdInTrainningCourse;//[Offset: 0x408, Size: 0x4]
	int SkinIdInTrainningCourse;//[Offset: 0x40c, Size: 0x4]
	int BagIdInTrainingCourse;//[Offset: 0x410, Size: 0x4]
	bool bManuallyModifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	int SpecifiedCharacterSkinID;//[Offset: 0x418, Size: 0x4]
	bool bManuallyModifyCharacterBagId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	int SpecifiedCharacterBagID;//[Offset: 0x420, Size: 0x4]
	bool bManuallyModifyCharacterBagTrailId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	int SpecifiedCharacterBagTrailID;//[Offset: 0x428, Size: 0x4]
	delegate OnPostSpawnDefaultSolarCharacterAtTransform;//[Offset: 0x430, Size: 0x10]
	SolarGameModeAIComponent* AIMgrComponent;//[Offset: 0x440, Size: 0x8]
	SolarGameModeStatisticsComponent* StatComponent;//[Offset: 0x448, Size: 0x8]
	SolarTeamInfo*[] Teams;//[Offset: 0x450, Size: 0x10]
	SolarTeamInfo*[] AliveTeams;//[Offset: 0x460, Size: 0x10]
	SolarPlayerState*[] AlivePlayers;//[Offset: 0x470, Size: 0x10]
	class SolarTeamInfo* TeamClass;//[Offset: 0x480, Size: 0x8]
	DataTable* TeamDataTable;//[Offset: 0x488, Size: 0x8]
	SolarFlyTrail* FlyTrailActor;//[Offset: 0x548, Size: 0x8]
	FString[] BannedPlayerIDList;//[Offset: 0x590, Size: 0x10]
	SolarCharacterDataCollector* CharacterDataCollector;//[Offset: 0x5a0, Size: 0x8]
	void UpdatePlayerData(int CharacterSkinID, int CharacterBagID, int CharacterBagTrailID, SolarPlayerState* PlayerState);// 0x22ee04f39041
	void UpdateDeserterTag(SolarPlayerState* PlayerState);// 0x22ed04f39041
	void UpdateBotPlayerData(SolarPlayerState* PlayerState);// 0x22ec04f39041
	void UpdateAliveTeamsAndPlayers();// 0x22eb04f39041
	FString TryKickOutOnlinePlayer(FString PlayerId, const bool IsAllowReconnect);// 0x22ea04f39041
	void SolarGM_SetAntiCheatData(FString InVariableName, float InMin, float InMax, float InThreshold, bool bInBanPlayer);// 0x22e904f39041
	void SetGamePlayMode(int InGamePlayMode);// 0x22e804f39041
	void SendHitMsgWithBool(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, bool bo);// 0x22e704f39041
	void SendHitMsg(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, FString Params);// 0x22e604f39041
	void RestartPlayerTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x22e504f39041
	void RestartPlayerEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x22e404f39041
	void PresettleAll();// 0x22e304f39041
	void PreAssignTeam(byte DesiredTeamID, FString[] Players);// 0x22e204f39041
	void PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature(SolarPlayerState* NewPlayer, SolarCharacter* NewCharacter);// 0x22e104f39041
	void OnStartBattleresponded();// 0x22e004f39041
	bool OnPlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x22df04f39041
	void NotifyItemStateChanged(const Actor* Item, const int State);// 0x22de04f39041
	void KickOutPlayerToLobby(FString InPlayerID);// 0x22dd04f39041
	void KickOutAllPlayerToLobby();// 0x22dc04f39041
	bool IsCustomRoom(int InRuleID);// 0x22db04f39041
	bool IsBannedForCheating(FString PlayerId);// 0x22da04f39041
	void InitCharacterClassPath(int CharacterId);// 0x22d904f39041
	void GetTeams(out SolarTeamInfo*[] OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled);// 0x22d804f39041
	int GetRandomCharacterID();// 0x22d704f39041
	int[] GetRandomAISkinIDByEliminateIDs(out const int[] EliminateIDs);// 0x22d604f39041
	int[] GetRandomAISkinID(const SolarPlayerState* InPS, bool bOnlyLowerPos);// 0x22d504f39041
	int GetMatchTeammateCount();// 0x22d404f39041
	int GetGamePlayMode();// 0x22d304f39041
	GameModeGlobalSetting* GetGameModeSetting(const Object* WorldContextObject);// 0x22d204f39041
	void GetEmptyTeams(out SolarTeamInfo*[] OutTeams, bool Reverse);// 0x22d104f39041
	void GameModeComponentTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x22d004f39041
	void GameModeComponentEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection);// 0x22cf04f39041
	void EndPlayTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x22ce04f39041
	void EndPlayEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x22cd04f39041
	void EnableActorChannelCloseDelayForCharacters();// 0x22cc04f39041
	void DisableActorChannelCloseDelayForCharacters(Actor* Actor, byte EndPlayReason);// 0x22cb04f39041
	SolarPlayerState* CreateBotAISingle(int CharacterId, out const Vector Location, enum[] JoinPolicies, class SolarBotAIController ControllerClass, const int Difficultly);// 0x22ca04f39041
	SolarPlayerState* CreateBotAIAndJoinTeamByName(int CharacterId, out const Vector Location, FString TeamName, class SolarBotAIController ControllerClass, const int Difficultly);// 0x22c904f39041
	SolarPlayerState* CreateBotAIAndJoinTeamByID(int CharacterId, out const Vector Location, const byte TeamID, class SolarBotAIController ControllerClass, const int Difficultly);// 0x22c804f39041
	SolarPlayerState* CreateBotAIAndJoinTeam(int CharacterId, out const Vector Location, SolarTeamInfo* TeamInfo, class SolarBotAIController ControllerClass, const int Difficultly);// 0x22c704f39041
	SolarPlayerState* CreateBotAI(int CharacterId, out const Vector Location, const int Difficultly);// 0x22c604f39041
	bool CanPlayerBattle(SolarPlayerState* PlayerState);// 0x22c504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c8, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	int NumSpectators;//[Offset: 0x2d4, Size: 0x4]
	int NumPlayers;//[Offset: 0x2d8, Size: 0x4]
	int NumBots;//[Offset: 0x2dc, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x2e0, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x2e4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e8, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2f0, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x300, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x304, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	void StartMatch();// 0x22c404f39041
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x22c304f39041
	void Say(FString Msg);// 0x22c204f39041
	void RestartGame();// 0x22c104f39041
	bool ReadyToStartMatch();// 0x22c004f39041
	bool ReadyToEndMatch();// 0x22bf04f39041
	void K2_OnSetMatchState(FName NewState);// 0x22be04f39041
	bool IsMatchInProgress();// 0x22bd04f39041
	bool HasMatchEnded();// 0x22bc04f39041
	FName GetMatchState();// 0x22bb04f39041
	void EndMatch();// 0x22ba04f39041
	void AbortMatch();// 0x22b904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	class SolarBotAIController* BotAIControllerClass;//[Offset: 0xd0, Size: 0x8]
	class SolarAIControllerBase* OfflinePlayerAIControllerClass;//[Offset: 0xd8, Size: 0x8]
	SolarGameMode* GameModeOwner;//[Offset: 0xe0, Size: 0x8]
	bool bEnableIrisAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bEnableMLSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	bool bPreserveBotOnMatchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	bool bUseCtrlIndexAsBotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]
	class SolarBotAITeamManager* BotTeamManagerClass;//[Offset: 0xf0, Size: 0x8]
	class SolarPreservedBotManager* BotPreservedManagerClass;//[Offset: 0xf8, Size: 0x8]
	int MaxNumPreservedBots;//[Offset: 0x100, Size: 0x4]
	float MaxRatioPreservedBots;//[Offset: 0x104, Size: 0x4]
	SolarBotAITeamManager* BotTeamManager;//[Offset: 0x108, Size: 0x8]
	SolarPreservedBotManager* BotPreservedManager;//[Offset: 0x110, Size: 0x8]
	bool bInitBotByTeamPreset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bCanBotTeamRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	bool bCanPlayerTeamRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]
	bool bCanBotTeamBuyRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1]
	bool bCanPlayerTeamBuyRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	SolarFuncBotController*[] FunctionalBots;//[Offset: 0x120, Size: 0x10]
	<enum,class SolarBotWarmSystemBase> WarmSystemClassConfig;//[Offset: 0x130, Size: 0x50]
	SolarBotWarmSystemBase* BotWarmSystem;//[Offset: 0x180, Size: 0x8]
	bool bEnableBehaviorMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	bool bOnlyRecordPlayerCombat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1]
	SolarBotBehaviorMonitor* BehaviorMonitor;//[Offset: 0x190, Size: 0x8]
	SolarFuncBotController* SpawnFunctionalBot(out const SolarFuncBotSpawnParam SpawnParam);// 0x4c1104f39041
	void OnBattleStarted();// 0x4c1004f39041
	void OnBattleOver();// 0x4c0f04f39041
	void OnAllBotSpawnFinished();// 0x4c0e04f39041
	void OnAcquiredIrisAIFeedStrategy(out const FeedBotStrategyInfo[] StrategyInfos);// 0x4c0d04f39041
	void GetDeathBoxExtraStuff(SolarPlayerState* BotState, SolarPlayerState* PlayerState, out <int,int> Stuff);// 0x4c0c04f39041
	enum GetCurrentWarmSystemType();// 0x4c0b04f39041
	SolarGameModeAIComponent* Get(const Object* Context);// 0x4c0a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarFuncBotSpawnParam
	class SolarFuncBotController* CtrlSubClass;//[Offset: 0x0, Size: 0x8]
	class SolarCharacter* CharacterSubClass;//[Offset: 0x8, Size: 0x8]
	int CharacterId;//[Offset: 0x10, Size: 0x4]
	int SkinId;//[Offset: 0x14, Size: 0x4]
	SolarBotAIConfig* ConfigPreset;//[Offset: 0x18, Size: 0x8]
	Transform SpawnTrans;//[Offset: 0x20, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarFuncBotController.SolarBotControllerBase.SolarAIControllerBase.AIController.Controller.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotControllerBase.SolarAIControllerBase.AIController.Controller.Actor.Object
	NavAgentProperties VehicleAgentProperties;//[Offset: 0x360, Size: 0x30]
	SolarFollowingComponent* PathFollowingComp;//[Offset: 0x390, Size: 0x8]
	float CharacterLookAtInterpSpeed;//[Offset: 0x3a4, Size: 0x4]
	Vector2D MovementVector;//[Offset: 0x3a8, Size: 0x8]
	SolarBotAIConfig* BotConfigPreset;//[Offset: 0x3d8, Size: 0x8]
	SolarBotBattleConfigNew DefaultBotBattleConfig;//[Offset: 0x3e0, Size: 0xd8]
	SolarBotBattleConfig DefaultBattleConfig;//[Offset: 0x4b8, Size: 0x158]
	bool bAimBoneWhenFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	FName FireTargetBoneName;//[Offset: 0x614, Size: 0x8]
	float BotAIAttackRange;//[Offset: 0x630, Size: 0x4]
	float BotAIAttackRangeUnArm;//[Offset: 0x634, Size: 0x4]
	bool bCanAutoSwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	float MinimumDistanceForRepeatedBoarding;//[Offset: 0x648, Size: 0x4]
	void SetDynamicFireConfig(out const BotSpecifiedFireConfig AdditiveConfig);// 0x4f0d04f39041
	void SetBotConfigPreset(SolarBotAIConfig* InConfig);// 0x4f0c04f39041
	void OnPlayerGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x4f0b04f39041
	SolarFollowingComponent* GetSolarFollowingComponent();// 0x4f0a04f39041
	SolarCharacter* GetPossessedCharacter();// 0x4f0904f39041
	void GetOnVehicle(SolarVehiclePawn* Vehicle);// 0x4f0804f39041
	void GetOffVehicle();// 0x4f0704f39041
	BotFireConfig GetFireConfig(const Actor* InTargetActor, bool bModified);// 0x4f0604f39041
	void ClearAllDynamicFireConfig();// 0x4f0504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAIControllerBase.AIController.Controller.Actor.Object
	BehaviorTree* BehaviorTree;//[Offset: 0x350, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f0, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f0, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f0, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2f8, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x300, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x308, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x310, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x318, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x320, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x328, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x330, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x4dd704f39041
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4dd604f39041
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x4dd504f39041
	void SetMoveBlockDetection(bool bEnable);// 0x4dd404f39041
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x4dd304f39041
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x4dd204f39041
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x4dd104f39041
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4dd004f39041
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4dcf04f39041
	void K2_SetFocus(Actor* NewFocus);// 0x4dce04f39041
	void K2_SetFocalPoint(Vector FP);// 0x4dcd04f39041
	void K2_ClearFocus();// 0x4dcc04f39041
	bool HasPartialPath();// 0x4dcb04f39041
	PathFollowingComponent* GetPathFollowingComponent();// 0x4dca04f39041
	byte GetMoveStatus();// 0x4dc904f39041
	Vector GetImmediateMoveDestination();// 0x4dc804f39041
	Actor* GetFocusActor();// 0x4dc704f39041
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x4dc604f39041
	Vector GetFocalPoint();// 0x4dc504f39041
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x4dc404f39041
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4dc304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BotSpecifiedFireConfig
	enum UsedWeaponType;//[Offset: 0x0, Size: 0x1]
	enum TargetCtlType;//[Offset: 0x1, Size: 0x1]
	enum TargetType;//[Offset: 0x2, Size: 0x1]
	BotFireConfig FireConfig;//[Offset: 0x4, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BotFireConfig
	float ShootDisperse;//[Offset: 0x0, Size: 0x4]
	float HitRate;//[Offset: 0x4, Size: 0x4]
	float ActiveDamageRate;//[Offset: 0x8, Size: 0x4]
	float ActiveDamageFactor;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlackboardKeyType.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x6dfb04f39041
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x6dfa04f39041
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x6df904f39041
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x6df804f39041
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x6df704f39041
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x6df604f39041
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x6df504f39041
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x6df404f39041
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x6df304f39041
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x6df204f39041
	bool IsVectorValueSet(out const FName KeyName);// 0x6df104f39041
	Vector GetValueAsVector(out const FName KeyName);// 0x6df004f39041
	FString GetValueAsString(out const FName KeyName);// 0x6def04f39041
	Rotator GetValueAsRotator(out const FName KeyName);// 0x6dee04f39041
	Object* GetValueAsObject(out const FName KeyName);// 0x6ded04f39041
	FName GetValueAsName(out const FName KeyName);// 0x6dec04f39041
	int GetValueAsInt(out const FName KeyName);// 0x6deb04f39041
	float GetValueAsFloat(out const FName KeyName);// 0x6dea04f39041
	byte GetValueAsEnum(out const FName KeyName);// 0x6de904f39041
	class Object GetValueAsClass(out const FName KeyName);// 0x6de804f39041
	bool GetValueAsBool(out const FName KeyName);// 0x6de704f39041
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x6de604f39041
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x6de504f39041
	void ClearValue(out const FName KeyName);// 0x6de404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8]
	void StopLogic(FString reason);// 0x6ddf04f39041
	void StartLogic();// 0x6dde04f39041
	void RestartLogic();// 0x6ddd04f39041
	bool IsRunning();// 0x6ddc04f39041
	bool IsPaused();// 0x6ddb04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4]
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTAuxiliaryNode.BTNode.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotAIConfig.DataAsset.Object
	GameplayTagContainer IdentifierTags;//[Offset: 0x30, Size: 0x20]
	SolarBotConfigSection_Battle* BattleSection;//[Offset: 0x50, Size: 0x8]
	SolarBotConfigSection_Loot* LootSection;//[Offset: 0x58, Size: 0x8]
	SolarBotConfigSection_Perception* PerceptionSection;//[Offset: 0x60, Size: 0x8]
	SolarBotConfigSection*[] CustomSections;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotConfigSection_Battle.SolarBotConfigSection.Object
	bool bEnableNewBattleConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SolarBotBattleConfigNew BotBattleConfig;//[Offset: 0x38, Size: 0xd8]
	SolarBotBattleConfig BattleConfig;//[Offset: 0x110, Size: 0x158]
	SolarBotUseSniperPosConfig SniperPosConfig;//[Offset: 0x268, Size: 0x1c]
	BehaviorTree* BattleSubTree;//[Offset: 0x288, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotConfigSection.Object
	GameplayTag SectionTag;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotBattleConfigNew
	BotFireConfig DefaultFireConfig;//[Offset: 0x0, Size: 0x10]
	BotSpecifiedFireConfig[] SpecifiedFireConfigs;//[Offset: 0x10, Size: 0x10]
	float DefaultFireLockRadius;//[Offset: 0x20, Size: 0x4]
	<enum,RangeFloat> ShotLockRadiusMap;//[Offset: 0x28, Size: 0x50]
	bool bPreventFatalDamageToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bEnableShootSimulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	SolarBotShootConfig DefaultShootConfig;//[Offset: 0x7c, Size: 0x58]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RangeFloat
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotShootConfig
	enum FirePolicy;//[Offset: 0x0, Size: 0x1]
	float FollowInterpSpeed;//[Offset: 0x4, Size: 0x4]
	float AntiHorizRecoilStrenghth;//[Offset: 0x8, Size: 0x4]
	float AntiVertRecoilStrenghth;//[Offset: 0xc, Size: 0x4]
	float LockHeightOffset;//[Offset: 0x10, Size: 0x4]
	float AimInterpSpeed;//[Offset: 0x14, Size: 0x4]
	float MaxFollowDeltaAngle;//[Offset: 0x18, Size: 0x4]
	float MaxPreciseMoveAngle;//[Offset: 0x1c, Size: 0x4]
	float RoughMoveMaxAngle;//[Offset: 0x20, Size: 0x4]
	float FollowMoveSpeed;//[Offset: 0x24, Size: 0x4]
	float PreciseMoveSpeed;//[Offset: 0x28, Size: 0x4]
	float RoughMoveSpeed;//[Offset: 0x2c, Size: 0x4]
	float LockMoveSpeed;//[Offset: 0x30, Size: 0x4]
	float PreciseMoveDeviationYaw;//[Offset: 0x34, Size: 0x4]
	float PreciseMoveDeviationPitch;//[Offset: 0x38, Size: 0x4]
	float RoughMoveDeviationYaw;//[Offset: 0x3c, Size: 0x4]
	float RoughMoveDeviationPitch;//[Offset: 0x40, Size: 0x4]
	float LockMoveMaxDeltaYaw;//[Offset: 0x44, Size: 0x4]
	float LockMoveMaxDeltaPitch;//[Offset: 0x48, Size: 0x4]
	float RoughMoveReactionTime;//[Offset: 0x4c, Size: 0x4]
	float PreciseMoveReactionTime;//[Offset: 0x50, Size: 0x4]
	float MaxFollowUnreachTime;//[Offset: 0x54, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotBattleConfig
	BotFireConfig DefaultFireConfig;//[Offset: 0x0, Size: 0x10]
	BotFireConfig FireConfigToBot;//[Offset: 0x10, Size: 0x10]
	<enum,BotFireConfig> WeaponFireConfigs;//[Offset: 0x20, Size: 0x50]
	<enum,BotFireConfig> WeaponFireConfigsToBot;//[Offset: 0x70, Size: 0x50]
	BotFireConfig VehicleFireConfig;//[Offset: 0xc0, Size: 0x10]
	BotFireConfig VehicleFireConfigToBot;//[Offset: 0xd0, Size: 0x10]
	bool bPreventFatalDamageToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	float DamageFactorToVehicle;//[Offset: 0xe4, Size: 0x4]
	float DamageFactorToBotVehicle;//[Offset: 0xe8, Size: 0x4]
	float DamageFactorToSummonItem;//[Offset: 0xec, Size: 0x4]
	float DamageFactorToBotSummonItem;//[Offset: 0xf0, Size: 0x4]
	float BotAIAttackRange;//[Offset: 0xf4, Size: 0x4]
	float BotAIAttackRangeUnArm;//[Offset: 0xf8, Size: 0x4]
	bool bEnableShootSimulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	SolarBotShootConfig DefaultShootConfig;//[Offset: 0x100, Size: 0x58]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotUseSniperPosConfig
	int MinNumSpawnerHasSearched;//[Offset: 0x0, Size: 0x4]
	float MinElapsedReachedZone;//[Offset: 0x4, Size: 0x4]
	float MinEnemyDistance;//[Offset: 0x8, Size: 0x4]
	int MinNumBeHitAbandonPos;//[Offset: 0xc, Size: 0x4]
	int MaxDurationOccupyPos;//[Offset: 0x10, Size: 0x4]
	float MaxDurationReachedPos;//[Offset: 0x14, Size: 0x4]
	float IntervalUseNextPos;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotConfigSection_Loot.SolarBotConfigSection.Object
	SolarBotLootValuationConfig ValuationConfig;//[Offset: 0x30, Size: 0x44]
	SolarBotLootSearchConfig SearchConfig;//[Offset: 0x74, Size: 0x44]
	SolarBotLootWeaponFeedConfig WeaponFeedConfig;//[Offset: 0xb8, Size: 0x20]
	BehaviorTree* LootSubTree;//[Offset: 0xd8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotLootValuationConfig
	float MoveCostFactor;//[Offset: 0x0, Size: 0x4]
	float DistSelfToSpawnerFactor;//[Offset: 0x4, Size: 0x4]
	float DistSpawnerOffsetFactor;//[Offset: 0x8, Size: 0x4]
	float AvgDistSpawnerToTeammatesFactor;//[Offset: 0xc, Size: 0x4]
	float AssualtRifleBaseValue;//[Offset: 0x10, Size: 0x4]
	float ShotgunBaseValue;//[Offset: 0x14, Size: 0x4]
	float SubmachinegunBaseValue;//[Offset: 0x18, Size: 0x4]
	float SniperBaseValue;//[Offset: 0x1c, Size: 0x4]
	float WeaponQualityValue;//[Offset: 0x20, Size: 0x4]
	float AmmoBaseValue;//[Offset: 0x24, Size: 0x4]
	float AmmoMatchFactor;//[Offset: 0x28, Size: 0x4]
	float ShieldBaseValue;//[Offset: 0x2c, Size: 0x4]
	float ShieldQualityValue;//[Offset: 0x30, Size: 0x4]
	float JetpackModuleBaseValue;//[Offset: 0x34, Size: 0x4]
	float JetpackModuleQualityValue;//[Offset: 0x38, Size: 0x4]
	float MedkitBaseValue;//[Offset: 0x3c, Size: 0x4]
	float MedkitHPRatioFactor;//[Offset: 0x40, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotLootSearchConfig
	float HPRatioToUseMedicine;//[Offset: 0x0, Size: 0x4]
	float ShieldRatioToRecharge;//[Offset: 0x4, Size: 0x4]
	float MaxSearchRangeNearbyPlayer;//[Offset: 0x8, Size: 0x4]
	float MinSearchRangeNearbyPlayer;//[Offset: 0xc, Size: 0x4]
	float RadiusTolerance;//[Offset: 0x10, Size: 0x4]
	Vector2D NearbyEnemyOuterFactorRange;//[Offset: 0x14, Size: 0x8]
	Vector2D NearbyEnemyInnerFactorRange;//[Offset: 0x1c, Size: 0x8]
	Vector2D NearbyEnemyCountRange;//[Offset: 0x24, Size: 0x8]
	Vector2D NearbySpawnerOuterFactorRange;//[Offset: 0x2c, Size: 0x8]
	Vector2D NearbySpawnerInnerFactorRange;//[Offset: 0x34, Size: 0x8]
	Vector2D NearbySpawnerCountRange;//[Offset: 0x3c, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotLootWeaponFeedConfig
	float MaxNoWeaponTime;//[Offset: 0x0, Size: 0x4]
	int[] FeedWeaponIDs;//[Offset: 0x8, Size: 0x10]
	float CheckPlayerSightInterval;//[Offset: 0x18, Size: 0x4]
	bool bStartFeedAfterSearchedAnySpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotConfigSection_Perception.SolarBotConfigSection.Object
	SolarBotThreatConfig ThreatConfig;//[Offset: 0x30, Size: 0x70]
	<enum,SolarBotThreatConfig> WPSpecificThreatConfig;//[Offset: 0xa0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotThreatConfig
	float ThreatUpdateInterval;//[Offset: 0x0, Size: 0x4]
	float AttackTriggerThreshold;//[Offset: 0x4, Size: 0x4]
	float CancelAttackTriggerThreshold;//[Offset: 0x8, Size: 0x4]
	float SwitchTargetDifferenceValue;//[Offset: 0xc, Size: 0x4]
	float DistanceThreshold;//[Offset: 0x10, Size: 0x4]
	float DistanceThresholdInSmoke;//[Offset: 0x14, Size: 0x4]
	float SightLoseRange;//[Offset: 0x18, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x1c, Size: 0x4]
	float SightIncreaseBase;//[Offset: 0x20, Size: 0x4]
	float SightIncreaseDistanceFactor;//[Offset: 0x24, Size: 0x4]
	float SightDecreaseBase;//[Offset: 0x28, Size: 0x4]
	float SightDecreaseDistanceFactor;//[Offset: 0x2c, Size: 0x4]
	float SightDecreaseMax;//[Offset: 0x30, Size: 0x4]
	float SightMaxValue;//[Offset: 0x34, Size: 0x4]
	float HearingAddBase;//[Offset: 0x38, Size: 0x4]
	float HearingAddDistanceFactor;//[Offset: 0x3c, Size: 0x4]
	float HearingDecreasePerTick;//[Offset: 0x40, Size: 0x4]
	float HearingMaxValue;//[Offset: 0x44, Size: 0x4]
	float HitSoundAlertRange;//[Offset: 0x48, Size: 0x4]
	float BotThreatFactor;//[Offset: 0x4c, Size: 0x4]
	float PlayerThreatFactor;//[Offset: 0x50, Size: 0x4]
	float DeathVergeFactor;//[Offset: 0x54, Size: 0x4]
	float MassInvisibilityPrepareFactor;//[Offset: 0x58, Size: 0x4]
	float MaxDistanceThreatFactor;//[Offset: 0x5c, Size: 0x4]
	float DistanceThreatFactorDecayRate;//[Offset: 0x60, Size: 0x4]
	float AccompanyThreatMaxValue;//[Offset: 0x64, Size: 0x4]
	float AccompanyThreatAddBase;//[Offset: 0x68, Size: 0x4]
	float AccompanyDecreasePerTick;//[Offset: 0x6c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x100, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x516304f39041
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x516204f39041
	Vector GetPathDestination();// 0x516104f39041
	byte GetPathActionType();// 0x516004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x230, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x238, Size: 0x78]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b0, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b0, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2b1, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2b4, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2b8, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3a0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x552a04f39041
	void RequestStimuliListenerUpdate();// 0x552904f39041
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x552804f39041
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x552704f39041
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x552604f39041
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x552504f39041
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x552404f39041
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x552304f39041
	void ForgetAll();// 0x552204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x90, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0xa0, Size: 0x4]
	void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x6dcb04f39041
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x6dca04f39041
	bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x6dc904f39041
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x6dc804f39041
	class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x6dc704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9b, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8]
	void AILoggingVerbose();// 0x6dd804f39041
	void AIIgnorePlayers();// 0x6dd704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x130, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x268, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x6de204f39041
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x6de104f39041
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CoolDownDuration, bool bAddToExistingDuration);// 0x6de004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xb0, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xc0, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xd0, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x134, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x13c, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x140, Size: 0x8]
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x6e3904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] options;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryItemType.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4]
	byte TestPurpose;//[Offset: 0x30, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIDataProvider.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryContext.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x2f8f04f39041
	Vector[] GetResultsAsLocations();// 0x2f8e04f39041
	Actor*[] GetResultsAsActors();// 0x2f8d04f39041
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x2f8c04f39041
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x2f8b04f39041
	float GetItemScore(int ItemIndex);// 0x2f8a04f39041
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x2f8804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x6db504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIHotSpotManager.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavLocalGridManager.Object
	bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x6e4004f39041
	void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x6e3f04f39041
	bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x6e3e04f39041
	int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6e3d04f39041
	int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6e3c04f39041
	int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6e3b04f39041
	int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6e3a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AISenseEvent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x6e4c04f39041
	bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x6e4b04f39041
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x6e4a04f39041
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x6e4904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x6e4304f39041
	void Finish(byte WithResult);// 0x6e4204f39041
	PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x6e4104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayResourceSet
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarFollowingComponent.CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bEnableOffmeshDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	float MinDetectInterval;//[Offset: 0x2a0, Size: 0x4]
	uint32 MaxDetectIteration;//[Offset: 0x2a4, Size: 0x4]
	Vector InitialOffmeshSolveExtent;//[Offset: 0x2a8, Size: 0xc]
	float MinZDiffDetectUndergroud;//[Offset: 0x2b4, Size: 0x4]
	float AgentSwimingHalfHeightPct;//[Offset: 0x2b8, Size: 0x4]
	float AgentNormalHalfHeightPct;//[Offset: 0x2bc, Size: 0x4]
	float ReachTestCheckAngleWV;//[Offset: 0x2c0, Size: 0x4]
	float MinSpeedLastSegmentWV;//[Offset: 0x2c4, Size: 0x4]
	float TurningSpeedWV;//[Offset: 0x2c8, Size: 0x4]
	float TurningSteeringThresholdWV;//[Offset: 0x2cc, Size: 0x4]
	float BlockDetectionDistanceCharacter;//[Offset: 0x2d0, Size: 0x4]
	float BlockDetectionDistanceVehicle;//[Offset: 0x2d4, Size: 0x4]
	bool bEnableSolveBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	SolarVehiclePawn* VehicleActor;//[Offset: 0x320, Size: 0x8]
	float SensorTraceDistance;//[Offset: 0x334, Size: 0x4]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	float RightSensorAlpha;//[Offset: 0x33c, Size: 0x4]
	float CentralSensorAlpha;//[Offset: 0x340, Size: 0x4]
	float LeftSensorAlpha;//[Offset: 0x344, Size: 0x4]
	float SteeringAngle;//[Offset: 0x348, Size: 0x4]
	float VehicleSteeringSensitivity;//[Offset: 0x34c, Size: 0x4]
	float BrakingForce;//[Offset: 0x350, Size: 0x4]
	float DecelerationDistance;//[Offset: 0x354, Size: 0x4]
	float VehicleDecelerationSpeed;//[Offset: 0x358, Size: 0x4]
	float VehicleTurningSpeed;//[Offset: 0x35c, Size: 0x4]
	float CheckReverseDistance;//[Offset: 0x360, Size: 0x4]
	float HoverCheckBlockSpeed;//[Offset: 0x364, Size: 0x4]
	float WheeledCheckBlockSpeed;//[Offset: 0x368, Size: 0x4]
	float LeggedVehicleCheckBlockSpeed;//[Offset: 0x36c, Size: 0x4]
	float CheckBlockTime;//[Offset: 0x374, Size: 0x4]
	int TryReverseTimes;//[Offset: 0x380, Size: 0x4]
	float TryReverseDurationTime;//[Offset: 0x384, Size: 0x4]
	float SolveBlockGoFrontTime;//[Offset: 0x390, Size: 0x4]
	bool bPathFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	bool bKeepVelocityDuringRVO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	VehicleDetector[] DetectorList;//[Offset: 0x3b8, Size: 0x10]
	float BlockAlpha;//[Offset: 0x3c8, Size: 0x4]
	bool bNeedReFindPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 0x1]
	int VehicleBlockedLocationCheckCount;//[Offset: 0x3d0, Size: 0x4]
	float VehicleBlockedLocationDistance;//[Offset: 0x3d4, Size: 0x4]
	void SetVehicle(Actor* VehicleActorIn);// 0x516704f39041
	void OnUpdatedCharacterMovementModeChanged(Character* Character, byte PrevMovementMode, byte PreviousCustomMode);// 0x516604f39041
	void OnUpdatedCharacterLanded(out const HitResult Hit);// 0x516504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x268, Size: 0x8]
	Vector CrowdAgentMoveDirection;//[Offset: 0x270, Size: 0xc]
	void SuspendCrowdSteering(bool bSuspend);// 0x516404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehiclePawn.Pawn.Actor.Object
	PrimitiveComponent* VehicleRoot;//[Offset: 0x2d0, Size: 0x8]
	SkeletalMeshComponentBudgeted* VehicleMesh;//[Offset: 0x2d8, Size: 0x8]
	uint32 VehicleID;//[Offset: 0x2e0, Size: 0x4]
	bool bVehicleMeshAggregationTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	class SkeletalMeshComponentBudgeted* VehicleStencilClass;//[Offset: 0x2e8, Size: 0x28]
	SkeletalMeshComponentBudgeted* VehicleStencilNew;//[Offset: 0x310, Size: 0x8]
	SolarNetMovementComponent* NetMovementComponent;//[Offset: 0x318, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x320, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x328, Size: 0x8]
	SolarVehicleAbilitySystemComponent* VehicleAbilitySystem;//[Offset: 0x330, Size: 0x8]
	SolarVehicleSpringArmComponent* SpringArmComponent;//[Offset: 0x338, Size: 0x8]
	SolarVehicleCameraComponent* CameraComponent;//[Offset: 0x340, Size: 0x8]
	SolarVehicleAttributeSet* VehicleAttributeSet;//[Offset: 0x348, Size: 0x8]
	BasedMovement BasedMovement;//[Offset: 0x350, Size: 0x28]
	VehicleSeatSlot[] SeatSlots;//[Offset: 0x378, Size: 0x10]
	int HealthUIID;//[Offset: 0x388, Size: 0x4]
	Texture2D* VehicleBrandIcon;//[Offset: 0x390, Size: 0x28]
	float OverlapWaterRadius;//[Offset: 0x3b8, Size: 0x4]
	Vector OutVehicleOffset;//[Offset: 0x3bc, Size: 0xc]
	float WaterDraftDepth;//[Offset: 0x3c8, Size: 0x4]
	float CarpadProtectTime;//[Offset: 0x3cc, Size: 0x4]
	float CarPadAccelerationMultiplier;//[Offset: 0x3d0, Size: 0x4]
	class SolarVehicleGA_Carpad* CarPadAbility;//[Offset: 0x3d8, Size: 0x8]
	Vector[] DropPassengerLocations;//[Offset: 0x3e0, Size: 0x10]
	Vector DropPassengerAtTop;//[Offset: 0x3f0, Size: 0xc]
	Vector DamageBoxLocation;//[Offset: 0x3fc, Size: 0xc]
	Vector DamageBoxExtent;//[Offset: 0x408, Size: 0xc]
	FName[] PenetrationDamageBones;//[Offset: 0x418, Size: 0x10]
	float VehicleMaxSpeedOnUI;//[Offset: 0x428, Size: 0x4]
	enum VehicleControlUIType;//[Offset: 0x42c, Size: 0x1]
	enum VehicleAnimationType;//[Offset: 0x42d, Size: 0x1]
	FName VehicleDirectionBoneForPassenger;//[Offset: 0x430, Size: 0x8]
	VehicleVFX GCCameraVFX;//[Offset: 0x440, Size: 0x90]
	float GCCameraEffectAngle;//[Offset: 0x4d0, Size: 0x4]
	VehicleVFX[] NosVFXes;//[Offset: 0x4d8, Size: 0x10]
	<byte,ParticleSystem*> RaiseDustEffects;//[Offset: 0x4e8, Size: 0x50]
	float SpeedThresholdForCollidingDamage;//[Offset: 0x538, Size: 0x4]
	float SpeedThresholdForStandingOn;//[Offset: 0x53c, Size: 0x4]
	float SpeedThresholdForGetOnVehicle;//[Offset: 0x540, Size: 0x4]
	ParticleSystem* EnterWaterVFX;//[Offset: 0x548, Size: 0x28]
	float SprayVelocity;//[Offset: 0x5e8, Size: 0x4]
	float HeavyInSpeed;//[Offset: 0x5ec, Size: 0x4]
	float CriticalAngle;//[Offset: 0x5f0, Size: 0x4]
	Vector OffsetBasedVechileLoction;//[Offset: 0x5f4, Size: 0xc]
	float CollisionSparkThreshold;//[Offset: 0x600, Size: 0x4]
	ParticleSystem* CollisionSparkParticle;//[Offset: 0x608, Size: 0x28]
	FName CollisionSparkParamNowel;//[Offset: 0x630, Size: 0x8]
	FName CollisionSparkParamQuantity;//[Offset: 0x638, Size: 0x8]
	float VehicleSpeedThresholdToPlayVFX;//[Offset: 0x640, Size: 0x4]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToNowel;//[Offset: 0x648, Size: 0x88]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToQuantity;//[Offset: 0x6d0, Size: 0x88]
	VehicleVFX SpeedParticle;//[Offset: 0x760, Size: 0x90]
	VehicleVFXMesh[] DriverOnVFXMeshes;//[Offset: 0x7f0, Size: 0x10]
	VehicleVFX[] DriverOnVFXs;//[Offset: 0x800, Size: 0x10]
	Vector SpawnOffset;//[Offset: 0x810, Size: 0xc]
	VehicleCameraDataAsset* CameraDataAsset;//[Offset: 0x820, Size: 0x8]
	FString SpeedVibrationHeString;//[Offset: 0x828, Size: 0x10]
	RuntimeFloatCurve SpeedVibrationCurve;//[Offset: 0x838, Size: 0x88]
	float MinSpeedDifferenceForCollisionVibration;//[Offset: 0x8c0, Size: 0x4]
	FString CollisionVibrationHeString;//[Offset: 0x8c8, Size: 0x10]
	FString LandingVibrationHeString;//[Offset: 0x8d8, Size: 0x10]
	RuntimeFloatCurve LandingVibrationCurve;//[Offset: 0x8e8, Size: 0x88]
	float MaxSpeedDecelerationRate;//[Offset: 0x970, Size: 0x4]
	SolarVehicleMaterialData BackLampData;//[Offset: 0x978, Size: 0x28]
	SolarVehicleMaterialData[] VehicleMaterialDataArray;//[Offset: 0x9a0, Size: 0x10]
	SolarVehicleSoundDataAsset* VehicleSoundDataAsset;//[Offset: 0x9b0, Size: 0x8]
	class GameplayEffect* DefaultAttributes;//[Offset: 0x9b8, Size: 0x8]
	class GameplayEffect* CanDriveEffect;//[Offset: 0x9c0, Size: 0x8]
	class GameplayEffect* CanGetOnEffect;//[Offset: 0x9c8, Size: 0x8]
	class GameplayEffect* UnderWaterEffect;//[Offset: 0x9d0, Size: 0x8]
	class SolarAbility* ExplosionAbilityClass;//[Offset: 0x9d8, Size: 0x8]
	SolarDamageInfo ExplosionDamageInfo;//[Offset: 0x9e0, Size: 0x40]
	VehicleVFX ExplosionVFX;//[Offset: 0xa20, Size: 0x90]
	VehicleVFXMesh VehicleBrokenMesh;//[Offset: 0xab0, Size: 0x80]
	VehicleVFX VehicleDamagedVFXs;//[Offset: 0xb30, Size: 0x90]
	DamageStatusVehicleVFXs VehicleDamageStatusVFXs;//[Offset: 0xe00, Size: 0x10]
	class GameplayEffect* VehicleDamageStatusEffects;//[Offset: 0xe50, Size: 0x8]
	int MaxLodLevelForUpdateVisual;//[Offset: 0xe78, Size: 0x4]
	VehicleWeakPointSpec[] VehicleWeakPointContainer;//[Offset: 0xe80, Size: 0x10]
	RuntimeFloatCurve[] WeakPointBrokenSpeedCurves;//[Offset: 0xe90, Size: 0x10]
	class GameplayEffect* WeakPointBrokenEffect;//[Offset: 0xea0, Size: 0x8]
	PrimitiveComponent* PlatformComponent;//[Offset: 0xea8, Size: 0x8]
	bool bCanStandOnPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 0x1]
	float DistanceThresholdForAttachPlatform;//[Offset: 0xeb4, Size: 0x4]
	float DegreeThresholdForAttachPlatform;//[Offset: 0xeb8, Size: 0x4]
	float SpeedThresholdForAttachPlatform;//[Offset: 0xebc, Size: 0x4]
	float TimerForPenetration;//[Offset: 0xec0, Size: 0x4]
	float PenetrationThreshold;//[Offset: 0xec4, Size: 0x4]
	float CollideDamage;//[Offset: 0xec8, Size: 0x4]
	float CrashDamageWeight;//[Offset: 0xecc, Size: 0x4]
	float SelfCrashDamageRate;//[Offset: 0xed0, Size: 0x4]
	float PassengerDamageRatio;//[Offset: 0xed4, Size: 0x4]
	float MinPlayerDamageVelocity;//[Offset: 0xed8, Size: 0x4]
	float CollidedCharacterDmgRatio;//[Offset: 0xedc, Size: 0x4]
	float CollideUpBoundingRatio;//[Offset: 0xee0, Size: 0x4]
	CurveFloat* CollidePushSpeedCurve;//[Offset: 0xee8, Size: 0x8]
	float CollidePushUpAngle;//[Offset: 0xef0, Size: 0x4]
	float CharacterProtectTime;//[Offset: 0xef4, Size: 0x4]
	float CollisionLinearVelocityDampingForSimulatedProxy;//[Offset: 0xef8, Size: 0x4]
	float CollisionLinearVelocityDampingSetDelay;//[Offset: 0xefc, Size: 0x4]
	float CollisionCompensationImpulseForSimulatedProxy;//[Offset: 0xf00, Size: 0x4]
	int[] StealthHideMats;//[Offset: 0xf08, Size: 0x10]
	enum ReplicatedAnimState;//[Offset: 0xf20, Size: 0x1]
	bool bRemoveStencil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf21, Size: 0x1]
	delegate OnPlayerGetOnVehicle;//[Offset: 0xf38, Size: 0x1]
	delegate OnPlayerGetOffVehicle;//[Offset: 0xf39, Size: 0x1]
	int[] OccupiedSeats;//[Offset: 0x1008, Size: 0x10]
	SolarInputActionContext* InputActionContext;//[Offset: 0x1018, Size: 0x8]
	Vector_NetQuantizeNormal ReplicatedPlayerInputVector;//[Offset: 0x1024, Size: 0xc]
	Vector_NetQuantize RepLocation;//[Offset: 0x103c, Size: 0xc]
	Actor*[] ActorsOnPlatform;//[Offset: 0x1088, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x10c4, Size: 0x4]
	byte CurPlayerInputMask;//[Offset: 0x10c8, Size: 0x1]
	byte ReplicatedPlayerInputMask;//[Offset: 0x10c9, Size: 0x1]
	SolarNavModifierComponent* SolarNavModifierComp;//[Offset: 0x1150, Size: 0x8]
	bool bDynamicAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1158, Size: 0x1]
	bool bUseCustomCollisionCylinder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1159, Size: 0x1]
	float CustomRadius;//[Offset: 0x115c, Size: 0x4]
	float CustomHalfHeight;//[Offset: 0x1160, Size: 0x4]
	int SkinId;//[Offset: 0x11b8, Size: 0x4]
	bool bVehicleBurningStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d1, Size: 0x1]
	float EnterWaterDuration;//[Offset: 0x12a8, Size: 0x4]
	float WaterLineHeight;//[Offset: 0x12b0, Size: 0x4]
	SolarWaterActorNew* WaterActor;//[Offset: 0x12b8, Size: 0x8]
	CurveFloat* SpeedCameraShakeCurve;//[Offset: 0x12e0, Size: 0x8]
	CurveFloat* SpeedScreenEffectOpacityCurve;//[Offset: 0x12e8, Size: 0x8]
	CurveFloat* SpeedScreenEffectPlayRateCurve;//[Offset: 0x12f0, Size: 0x8]
	float MinCameraShakeSpeed;//[Offset: 0x12f8, Size: 0x4]
	float MinScreenEffectSpeed;//[Offset: 0x12fc, Size: 0x4]
	class CameraShake* VehicleSpeedCameraShake;//[Offset: 0x1300, Size: 0x8]
	FName VehicleSpeedScreenEffectRowId;//[Offset: 0x1308, Size: 0x8]
	bool bEnableHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1330, Size: 0x1]
	HitSoundReplicationData HitSoundData;//[Offset: 0x1338, Size: 0x80]
	float AgentRadiusAdjustment;//[Offset: 0x13b8, Size: 0x4]
	void StatVehicleAutoMove(int MoveTime);// 0x4e3504f39041
	void SetWeakPointHealth(byte WeakPointID, float InHealth);// 0x4e3404f39041
	void SetTakeMoveInput(bool bInTakeDirection, bool bInTakeRotation);// 0x4e3304f39041
	void SetPlayerInputVector(out const Vector2D InputVector, float CameraYaw);// 0x4e3204f39041
	void SetCurrentHealth(float InHealth);// 0x4e3104f39041
	void SetCrossCarpad(SolarCarPad* InCarpad);// 0x4e3004f39041
	void ServerSetPlayerInput(const Vector_NetQuantizeNormal InputVector, const byte InputMask);// 0x4e2f04f39041
	void ServerSetCrossCarpad(SolarCarPad* InCarpad);// 0x4e2e04f39041
	void ServerSendsTransformToEveryoneWithMovementBase(const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x4e2d04f39041
	void ServerSendsTransformToEveryone(const byte[] Value);// 0x4e2c04f39041
	void ServerSendsTeleportStateToEveryone(const Vector_NetQuantize InLocation, const Vector_NetQuantizeNormal InNormalizeEuler, float InServerTimeStamp);// 0x4e2b04f39041
	void ServerSendCorrectionToClient(float ServerTimeStamp, Vector_NetQuantize WorldLocation, Vector_NetQuantizeNormal WorldRotationCompressed);// 0x4e2a04f39041
	void ServerHandleVehicleCollision(const VehicleCollisionInfo InVehicleCollisionInfo);// 0x4e2904f39041
	void ServerDrawActorLocationAndRotationOnClient(const Vector InLocation, const Rotator InRotator);// 0x4e2804f39041
	void ServerApplyDamageToVehilceAndPassenger(SolarVehiclePawn* OtherVehicle, float DamageToSelf, float DamageToOther, const Vector_NetQuantize HitLocation);// 0x4e2704f39041
	void ServerApplyAbilityDamageToTargets(const Pawn*[] Targets, GameplayAbilitySpecHandle AbilityHandle);// 0x4e2604f39041
	void RemoveSeatSlot(byte SeatIndex);// 0x4e2504f39041
	void ReleaseDamagedStatusVFX(byte InDamagedStatus);// 0x4e2404f39041
	void PlayVehicleEjectSound(SolarCharacter* ejectedCharacter);// 0x4e2304f39041
	void PlaySpeedboardSound();// 0x4e2204f39041
	void PlayDamagedStatusVFX(byte InDamagedStatus);// 0x4e2104f39041
	void OverlapTraceOnServer();// 0x4e2004f39041
	void OnStencilLoaded();// 0x4e1f04f39041
	void OnSkinDataAssetLoadedNext(SoftObjectPath SkinVehiclePath);// 0x4e1e04f39041
	void OnSkinDataAssetLoaded(SoftObjectPath SkinVehiclePath);// 0x4e1d04f39041
	void OnRep_WeakPointHealthOrStateChanged(VehicleWeakPointSpec[] OldVehicleWeakPointDatas);// 0x4e1c04f39041
	void OnRep_VehicleBurning();// 0x4e1b04f39041
	void OnRep_SkinId();// 0x4e1a04f39041
	void OnRep_ReplicatedPlayerInputMask(byte OldReplicatedPlayerInputMask);// 0x4e1904f39041
	void OnRep_ReplicatedAnimState(enum PreviousState);// 0x4e1804f39041
	void OnRep_RemoveStencil();// 0x4e1704f39041
	void OnRep_HitSoundData(out const HitSoundReplicationData LastData);// 0x4e1604f39041
	void OnRep_CachedActorHandle();// 0x4e1504f39041
	bool IsVehicleFullHealth();// 0x4e1404f39041
	bool IsVehicleDangerous();// 0x4e1304f39041
	bool IsVehicleCanGetOff();// 0x4e1204f39041
	bool IsVehicleBroken();// 0x4e1104f39041
	bool IsTeammateWith(const Pawn* Pawn);// 0x4e1004f39041
	bool IsManuallyCancelAbilityActive(byte SeatIndex);// 0x4e0f04f39041
	bool IsExistEnemy(const SolarCharacter* Character);// 0x4e0e04f39041
	bool IsAbilityActive(byte SeatIndex, byte AbilityIndex);// 0x4e0d04f39041
	bool InSameTeam();// 0x4e0c04f39041
	VehicleWeakPointSpec[] GetVehicleWeakPoints();// 0x4e0b04f39041
	int GetVehicleTypeID();// 0x4e0a04f39041
	byte GetVehicleTeamId();// 0x4e0904f39041
	PhysicalMaterial* GetVehicleRootPhysMaterial();// 0x4e0804f39041
	int GetVehicleGroupID();// 0x4e0704f39041
	float GetSpeedInKmh();// 0x4e0604f39041
	float GetSpeed();// 0x4e0504f39041
	Vector GetSpawnOffset();// 0x4e0404f39041
	Vector2D GetPlayerInputVector();// 0x4e0304f39041
	int GetPassengerCount();// 0x4e0204f39041
	int GetNextVacantSeat(int InCurrentSeatIndex);// 0x4e0104f39041
	float GetMaxHealth();// 0x4e0004f39041
	int GetManuallyCancelAbilityIndex(byte SeatIndex);// 0x4dff04f39041
	int GetHealthPercentInt();// 0x4dfe04f39041
	SolarCharacter* GetDriverCharacter();// 0x4dfd04f39041
	float GetDangerHealthPrecent();// 0x4dfc04f39041
	float GetCurrentHealth();// 0x4dfb04f39041
	void DeleteStencilMesh();// 0x4dfa04f39041
	void ClientVehicleExplosion();// 0x4df904f39041
	void ClientVehicleBroken();// 0x4df804f39041
	void ClientSendsTransformToServerWithMovementBaseAfterCorrection(float DriverLocalTime, float ServerTimeStamp, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x4df704f39041
	void ClientSendsTransformToServerWithMovementBase(float DriverLocalTime, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x4df604f39041
	void ClientSendsTransformToServerAfterCorrection(float DriverLocalTime, float ServerTimeStamp, const byte[] Value);// 0x4df504f39041
	void ClientSendsTransformToServer(float DriverLocalTime, const byte[] Value);// 0x4df404f39041
	bool CheckUpdateVisual();// 0x4df304f39041
	bool CheckOpenParticleOptimization(int Bias);// 0x4df204f39041
	bool CanActivateAbility(byte SeatIndex, byte AbilityIndex);// 0x4df104f39041
	byte AddSeatSlot(out const VehicleSeatSlot SeatSlot);// 0x4df004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCarPad.SolarInteractableActor.Actor.Object
	float Duration;//[Offset: 0x238, Size: 0x4]
	float SpeedMultiplier;//[Offset: 0x23c, Size: 0x4]
	<uint32,float> SpeedMultipliers;//[Offset: 0x240, Size: 0x50]
	<uint32,float> PitchOffsets;//[Offset: 0x290, Size: 0x50]
	float DistanceThresholdForValidation;//[Offset: 0x2e0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleCollisionInfo
	PrimitiveComponent* CollidedPrimitive;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize SelfPreVelocity;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize SelfCurrentVelocity;//[Offset: 0x14, Size: 0xc]
	Vector_NetQuantize OtherVehicleLinearVelocity;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantize OtherVehicleAngularVelocity;//[Offset: 0x2c, Size: 0xc]
	Vector_NetQuantize OtherVehicleLocation;//[Offset: 0x38, Size: 0xc]
	Vector_NetQuantizeNormal OtherVehicleRotation;//[Offset: 0x44, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleWeakPointSpec
	float CurrentHealth;//[Offset: 0x0, Size: 0x4]
	bool bInRepairing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	SolarVehicleWeakPointComponent* WeakPointMeshComponent;//[Offset: 0x8, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x10, Size: 0x8]
	byte WeakPointID;//[Offset: 0x18, Size: 0x1]
	FName[] WeakPointSockets;//[Offset: 0x20, Size: 0x10]
	Vector WeakPointOffset;//[Offset: 0x30, Size: 0xc]
	StaticMesh* WeakPointStaticMesh;//[Offset: 0x40, Size: 0x28]
	Transform WeakPointRelativeTransform;//[Offset: 0x70, Size: 0x30]
	float MaxWeakPointHealth;//[Offset: 0xa0, Size: 0x4]
	float RepairDuration;//[Offset: 0xa4, Size: 0x4]
	bool bRecoverBoneScaleAfterVFXFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	VehicleVFX BrokenWeakPointVFX;//[Offset: 0xb0, Size: 0x90]
	VehicleVFX RepairingWeakPointVFX;//[Offset: 0x140, Size: 0x90]
	float FacingAngle;//[Offset: 0x1d0, Size: 0x4]
	float DistFromCharacterToWeakPoint;//[Offset: 0x1d4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleWeakPointComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleVFX
	ParticleSystem* Particle;//[Offset: 0x0, Size: 0x28]
	FName AttachedSocket;//[Offset: 0x28, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x30, Size: 0x30]
	CurveFloat* ActivateCurve;//[Offset: 0x60, Size: 0x8]
	FName ParameterName;//[Offset: 0x68, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HitSoundReplicationData
	uint16 HitCount;//[Offset: 0x0, Size: 0x2]
	byte DirtyDataMask;//[Offset: 0x2, Size: 0x1]
	HitSoundData HitData_Default;//[Offset: 0x4, Size: 0x1c]
	HitSoundData HitData_Weapon;//[Offset: 0x20, Size: 0x1c]
	HitSoundData HitData_Melee;//[Offset: 0x3c, Size: 0x1c]
	HitSoundData HitData_Skill;//[Offset: 0x58, Size: 0x1c]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HitSoundData
	Actor* Instigator;//[Offset: 0x0, Size: 0x8]
	enum SourceType;//[Offset: 0x8, Size: 0x1]
	enum TargetType;//[Offset: 0x9, Size: 0x1]
	FName SubTableKey;//[Offset: 0xc, Size: 0x8]
	FName SubTableKey2;//[Offset: 0x14, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleSeatSlot
	FName SeatSocketName;//[Offset: 0x0, Size: 0x8]
	FName SeatWeaponSocket;//[Offset: 0x8, Size: 0x8]
	bool bDisplayBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool SeatStickOutEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	VehicleCameraDataAsset* OutShootCameraData;//[Offset: 0x18, Size: 0x8]
	VehicleCameraDataAsset* OutShootAimCameraData;//[Offset: 0x20, Size: 0x8]
	CurveFloat* OutShootPitchLimitCurve;//[Offset: 0x28, Size: 0x8]
	VehicleSeatAbility[] VechicleAbilities;//[Offset: 0x30, Size: 0x10]
	class SolarVehicleWeapon* VehicleWeaponClass;//[Offset: 0x40, Size: 0x8]
	class SolarVehicleWeapon* VehicleWeaponSkinClass;//[Offset: 0x48, Size: 0x8]
	bool bAutoEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Texture2D* SeatDisplayIcon;//[Offset: 0x58, Size: 0x28]
	float DamageRatio;//[Offset: 0x80, Size: 0x4]
	float PenetrationDamageRatio;//[Offset: 0x84, Size: 0x4]
	BoxSphereBounds PenetrationSphere;//[Offset: 0x88, Size: 0x1c]
	Rotator EjectRotation;//[Offset: 0xa4, Size: 0xc]
	bool bOverrideDefaultEjectParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	VehicleEjectParams EjectParams;//[Offset: 0xb4, Size: 0x10]
	SolarCharacter* SeatPassenger;//[Offset: 0xc4, Size: 0x8]
	SolarVehicleWeapon* SeatWeapon;//[Offset: 0xd0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleCameraDataAsset.DataAsset.Object
	RuntimeFloatCurve TargetArmLengthCurve;//[Offset: 0x30, Size: 0x88]
	float TargetArmLengthInterpSpeed;//[Offset: 0xb8, Size: 0x4]
	Vector TargetOffset;//[Offset: 0xbc, Size: 0xc]
	FName TargetOffsetSocket;//[Offset: 0xc8, Size: 0x8]
	bool bTargetOffsetIgnoreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bTargetOffsetIgnorePitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bCameraRollSameWithVehicleRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	Vector SocketOffset;//[Offset: 0xd4, Size: 0xc]
	float MinPitch;//[Offset: 0xe0, Size: 0x4]
	float MaxPitch;//[Offset: 0xe4, Size: 0x4]
	float MinYaw;//[Offset: 0xe8, Size: 0x4]
	float MaxYaw;//[Offset: 0xec, Size: 0x4]
	RuntimeFloatCurve CameraFovCurve;//[Offset: 0xf0, Size: 0x88]
	float CameraFovInterpSpeed;//[Offset: 0x178, Size: 0x4]
	bool bCameraFollowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]
	float DefaultPitch;//[Offset: 0x180, Size: 0x4]
	RuntimeFloatCurve CameraFollowSpeedCurve;//[Offset: 0x188, Size: 0x88]
	float CameraFollowTimeThreshold;//[Offset: 0x210, Size: 0x4]
	float CameraResetFollowSpeed;//[Offset: 0x214, Size: 0x4]
	float CameraFollowSpeedThreshold;//[Offset: 0x218, Size: 0x4]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1]
	RuntimeFloatCurve CameraLagInterpSpeedCurve;//[Offset: 0x220, Size: 0x88]
	RuntimeFloatCurve CameraLagCurve;//[Offset: 0x2a8, Size: 0x88]
	RuntimeFloatCurve AdditionalTargetOffsetOnZ;//[Offset: 0x330, Size: 0x88]
	float BlendTime;//[Offset: 0x3b8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleSeatAbility
	class SolarVehicleGameplayAbility* AbilityClass;//[Offset: 0x0, Size: 0x8]
	GameplayAbilitySpecHandle ServerOrDriverAbilityHandle;//[Offset: 0x8, Size: 0x4]
	GameplayAbilitySpecHandle SkinPreAbilityHandle;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleGameplayAbility.GameplayAbility.Object
	bool bCancelAfterVacateSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	bool bCancelManually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 0x1]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x400, Size: 0x20]
	FString AbilityActivateVirationHeString;//[Offset: 0x420, Size: 0x10]
	FString AbilityEndVirationHeString;//[Offset: 0x430, Size: 0x10]
	bool bPressToActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool bCheckInstigatorBeforeActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	bool bActivateAbilityOnGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x442, Size: 0x1]
	float DurationTime;//[Offset: 0x444, Size: 0x4]
	class GameplayEffect* ActivateEffect;//[Offset: 0x448, Size: 0x8]
	byte AbilityCount;//[Offset: 0x450, Size: 0x1]
	float AbilityCountRecoverTime;//[Offset: 0x454, Size: 0x4]
	Texture2D* AbilityIcon;//[Offset: 0x458, Size: 0x28]
	Texture2D* AdditionalAbilityIcon;//[Offset: 0x480, Size: 0x28]
	int AbilityDescription;//[Offset: 0x4a8, Size: 0x4]
	FString AbilityTextType;//[Offset: 0x4b0, Size: 0x10]
	float DamageToVehicle;//[Offset: 0x4c0, Size: 0x4]
	float DamageToCharacter;//[Offset: 0x4c4, Size: 0x4]
	class CameraShake* ActivateCameraShake;//[Offset: 0x4c8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleWeapon.SolarWeapon.Actor.Object
	float MaxWeaponPitch;//[Offset: 0x918, Size: 0x4]
	float MinWeaponPitch;//[Offset: 0x91c, Size: 0x4]
	float MaxWeaponYaw;//[Offset: 0x920, Size: 0x4]
	float MinWeaponYaw;//[Offset: 0x924, Size: 0x4]
	float PitchFollowSpeed;//[Offset: 0x928, Size: 0x4]
	float YawFollowSpeed;//[Offset: 0x92c, Size: 0x4]
	float SimulationSmoothLerpSpeed;//[Offset: 0x930, Size: 0x4]
	float SimulationSmoothLerpThreshold;//[Offset: 0x934, Size: 0x4]
	bool bAbsoluteRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 0x1]
	bool bHasScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x939, Size: 0x1]
	bool bHiddenMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93a, Size: 0x1]
	Vector ScopeCameraOffset;//[Offset: 0x93c, Size: 0xc]
	Vector ScopeTargetOffset;//[Offset: 0x948, Size: 0xc]
	float ScopeCameraDistance;//[Offset: 0x954, Size: 0x4]
	float ScopeBlendTime;//[Offset: 0x958, Size: 0x4]
	VehicleCameraDataAsset* ScopeCameraData;//[Offset: 0x960, Size: 0x8]
	float ScopeFOVSwitchSpeed;//[Offset: 0x968, Size: 0x4]
	float QuickAdsFireDelay;//[Offset: 0x96c, Size: 0x4]
	enum DefaultWeaponScopeType;//[Offset: 0x970, Size: 0x1]
	class VehicleWeaponScopeWidget* ScopeUI;//[Offset: 0x978, Size: 0x8]
	float PitchCameraOffset;//[Offset: 0x980, Size: 0x4]
	bool bCameraFocusWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x984, Size: 0x1]
	bool bUseNormalCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x985, Size: 0x1]
	byte FireType;//[Offset: 0x986, Size: 0x1]
	FName FireSocketName;//[Offset: 0x988, Size: 0x8]
	float UpdateShotStartLocThreshold;//[Offset: 0x990, Size: 0x4]
	byte FireAixsType;//[Offset: 0x994, Size: 0x1]
	FName TurretVSocketName;//[Offset: 0x998, Size: 0x8]
	FName TurretHSocketName;//[Offset: 0x9a0, Size: 0x8]
	float ShootTolerance;//[Offset: 0x9a8, Size: 0x4]
	SolarVehiclePawn* AttachedVehicle;//[Offset: 0x9b0, Size: 0x8]
	SolarCharacter* WeaponOwner;//[Offset: 0x9b8, Size: 0x8]
	bool bVehicleWeaponScopeOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]
	bool bActivedWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c1, Size: 0x1]
	uint32 RotationYawAndPitchPacket;//[Offset: 0x9c4, Size: 0x4]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x9e0, Size: 0x8]
	class SkeletalMeshComponent* VehicleStencilClass;//[Offset: 0x9e8, Size: 0x28]
	SkeletalMeshComponent* VehicleStencilNew;//[Offset: 0xa10, Size: 0x8]
	FName AttachBoneName;//[Offset: 0xa18, Size: 0x8]
	bool bUseAssistLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc20, Size: 0x1]
	bool bShowAssistLockUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc20, Size: 0x1]
	Vector2D AssistLockImageSize;//[Offset: 0xc24, Size: 0x8]
	Vector2D PCAssistLockImageSize;//[Offset: 0xc2c, Size: 0x8]
	bool bAutoLockSpreadSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc34, Size: 0x1]
	float AutoLockSpreadDecPerSecond;//[Offset: 0xc38, Size: 0x4]
	float PreSelectProgress;//[Offset: 0xc3c, Size: 0x4]
	RuntimeFloatCurve ProgressUpgradeSpeedCurve;//[Offset: 0xc40, Size: 0x88]
	enum AssistLockState;//[Offset: 0xcc8, Size: 0x1]
	bool bSimulateWeaponFireSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc9, Size: 0x1]
	float TriggerSmoothReticleDistance;//[Offset: 0xccc, Size: 0x4]
	Vector2D SmoothReticleSpeed;//[Offset: 0xcd0, Size: 0x8]
	Transform CachedWeaponRelativeTransform;//[Offset: 0xce0, Size: 0x30]
	Transform CachedFireMuzzleTransform;//[Offset: 0xd10, Size: 0x30]
	Transform CachedTurretVSocketTransform;//[Offset: 0xd40, Size: 0x30]
	Transform CachedTurretHSocketTransform;//[Offset: 0xd70, Size: 0x30]
	float SimulateMuzzleDistanceThreshold;//[Offset: 0xda0, Size: 0x4]
	class SolarBullet* VehicleWeaponPrimaryOverrideBulletClass;//[Offset: 0xe00, Size: 0x8]
	class SolarBullet* VehicleWeaponSecondaryOverrideBulletClass;//[Offset: 0xe08, Size: 0x8]
	class SolarBullet* VehicleWeaponPrimaryOverrideTraceBulletClass;//[Offset: 0xe10, Size: 0x8]
	GameplayTagContainer BlockVehicleWeaponFireTags;//[Offset: 0xe18, Size: 0x20]
	bool bEnablePreAimingLaser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe51, Size: 0x1]
	bool bNotOptTickIntervalPreAimingActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe52, Size: 0x1]
	FName PreAimingLaserLaunchScoket;//[Offset: 0xe54, Size: 0x8]
	ParticleSystem* PreAimingLaserFX;//[Offset: 0xe60, Size: 0x28]
	ParticleSystem* PreAimingLaserEnermyFX;//[Offset: 0xe88, Size: 0x28]
	int PreAimingLaserChagringPhase;//[Offset: 0xeb0, Size: 0x4]
	ParticleSystemComponent* PreAimingLaserEffect;//[Offset: 0xeb8, Size: 0x8]
	bool bEnableBackupAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec0, Size: 0x1]
	int BackupAmmoFireCost;//[Offset: 0xec4, Size: 0x4]
	int MaxBackupAmmo;//[Offset: 0xec8, Size: 0x4]
	float ReloadBackupAmmoInterval;//[Offset: 0xecc, Size: 0x4]
	int ReloadBackupAmmoNum;//[Offset: 0xed0, Size: 0x4]
	int CurrentBackupAmmo;//[Offset: 0xed4, Size: 0x4]
	bool bEnableRechamber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 0x1]
	float PlayRechamberFinishTime;//[Offset: 0xee4, Size: 0x4]
	FString RechamberStartAndStopSound;//[Offset: 0xef0, Size: 0x10]
	FString RechamberFinishSound;//[Offset: 0xf00, Size: 0x10]
	VehicleVFX RechamberAlertVFX;//[Offset: 0xf10, Size: 0x90]
	int RechamberAlertMaterialIndex;//[Offset: 0xfa0, Size: 0x4]
	bool bKeepWeaponStateAfterUncontrolled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa4, Size: 0x1]
	FString ReloadSoundName1P;//[Offset: 0xfa8, Size: 0x10]
	FString ReloadSoundName3P;//[Offset: 0xfb8, Size: 0x10]
	FString ReloadSoundName3PEnemy;//[Offset: 0xfc8, Size: 0x10]
	bool bReloadingAfterUncontrol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd8, Size: 0x1]
	class SolarVehicleGameplayAbility* ReloadAbilityClass;//[Offset: 0xfe0, Size: 0x8]
	bool bIsLargeCaliberWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe8, Size: 0x1]
	CameraShakeData[] LargeCaliberHitCameraShakes;//[Offset: 0xff0, Size: 0x10]
	ParticleSystem* BulletTargetAreaInSameTeam;//[Offset: 0x1000, Size: 0x28]
	MaterialInterface* BulletDecalMaterialInSameTeam;//[Offset: 0x1028, Size: 0x28]
	ParticleSystem* BulletTargetAreaInEnemy;//[Offset: 0x1050, Size: 0x28]
	MaterialInterface* BulletDecalMaterialInEnemy;//[Offset: 0x1078, Size: 0x28]
	float AreaParticleScale;//[Offset: 0x10a0, Size: 0x4]
	Vector AreaDecalSize;//[Offset: 0x10a4, Size: 0xc]
	float AreaFadeOutTime;//[Offset: 0x10b0, Size: 0x4]
	FName AreaFadeOutName;//[Offset: 0x10b4, Size: 0x8]
	float ForceAreaDisplayRange;//[Offset: 0x10bc, Size: 0x4]
	float AreaDisplayMaxRange;//[Offset: 0x10c0, Size: 0x4]
	<FireUniqueID,BulletLandAreaData> BulletLandAreaMap;//[Offset: 0x10c8, Size: 0x50]
	WeaponRecoilComponent* RecoilComponent;//[Offset: 0x1118, Size: 0x8]
	void VehicleWeaponOpenScope();// 0x5f0104f39041
	void VehicleWeaponCloseScope();// 0x5f0004f39041
	void ServerUpdateVehicleWeaponRotate(uint32 PackedRotation);// 0x5eff04f39041
	void ServerSendCurveShotHit(uint32 SpawnID, float InTime, SolarPlayerController* InPlayerController, const HitResult InHit);// 0x5efe04f39041
	void ServerCancelVehicleFireAbility(const GameplayAbilitySpecHandle InAbilityHandle);// 0x5efd04f39041
	void ServerAddWeaponFireTagToCharacter(SolarCharacter* InFiredCharacter);// 0x5efc04f39041
	void ResetWeaponRotation(float DeltaTime);// 0x5efb04f39041
	void OnVehicleWeaponUnControlled();// 0x5efa04f39041
	void OnVehicleWeaponControlled();// 0x5ef904f39041
	void OnStencilLoaded();// 0x5ef804f39041
	void OnRep_BackupAmmoChanged(int InOldAmmo);// 0x5ef704f39041
	void LocallyVehicleWeaponTick(float DeltaTime);// 0x5ef604f39041
	bool IsPlayerLocallyControlledWeapon();// 0x5ef504f39041
	void InitializeVehicleWeapon(SolarVehiclePawn* VehicleWeaponOwner, out const FName WeaponAttachSocket);// 0x5ef404f39041
	Vector GetShotTargetLocation();// 0x5ef304f39041
	byte GetFireType();// 0x5ef204f39041
	Vector GetAimTargetLocation();// 0x5ef104f39041
	void ClientWeaponReloadFailed(float InSpentTime, bool bWasCancelled);// 0x5ef004f39041
	void ClientSendBackupAmmo(int InCurrentAmmo);// 0x5eef04f39041
	void ClientFinishedWeaponReload();// 0x5eee04f39041
	void ClientDrawDebugString(const Vector TextLocation, FString Text, const Color TextColor, float Duration);// 0x5eed04f39041
	bool CheckCanOpenScope();// 0x5eec04f39041
	bool CanEnterFireState();// 0x5eeb04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleWeaponScopeWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum PresetScopeType;//[Offset: 0x400, Size: 0x1]
	Image* img_Vehicle;//[Offset: 0x408, Size: 0x8]
	Image* Img_Weapon;//[Offset: 0x410, Size: 0x8]
	CanvasPanel* Panel_Pitch;//[Offset: 0x418, Size: 0x8]
	WeaponScopeSliderWidget* Crosshair_Slider;//[Offset: 0x420, Size: 0x8]
	SolarCheckBox* Btn_Pitch;//[Offset: 0x428, Size: 0x8]
	CanvasPanel* SecondReticlePanel;//[Offset: 0x430, Size: 0x8]
	CanvasPanel* Panel_BG;//[Offset: 0x438, Size: 0x8]
	CanvasPanel* Panel_Border;//[Offset: 0x440, Size: 0x8]
	Image* ReticleDirection;//[Offset: 0x448, Size: 0x8]
	CanvasPanel* Coredot;//[Offset: 0x450, Size: 0x8]
	SolarWeaponRechamberWidget* HUD_CarFireCD_L;//[Offset: 0x458, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x460, Size: 0x8]
	CanvasPanelSlot* SecondReticleSlot;//[Offset: 0x468, Size: 0x8]
	CanvasPanelSlot* ReticleDirectionSlot;//[Offset: 0x470, Size: 0x8]
	Image* ProgressImage;//[Offset: 0x478, Size: 0x8]
	WidgetAnimation* ProgressAnima;//[Offset: 0x480, Size: 0x8]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x488, Size: 0x8]
	void UpdateScopeUI(SolarVehicleWeapon* VehicleWeapon, out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x617004f39041
	void SetChargeProgress(out Image* InProgressImage, out WidgetAnimation* InProgressAnima);// 0x616f04f39041
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress);// 0x616e04f39041
	void OnScopeTriggerChanged(bool bChecked);// 0x616d04f39041
	void OnScopeOpened();// 0x616c04f39041
	void InitScopeUI(SolarVehiclePawn* InVehicle, bool bSpectate);// 0x616b04f39041
	void ApplyWeaponCrossHairToScope(out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x616a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleWeaponCrossHairInfo
	bool bShowCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D CrossHairPosition;//[Offset: 0x4, Size: 0x8]
	float CrossHairOpacity;//[Offset: 0xc, Size: 0x4]
	bool bShowReticleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D ReticleDirectionPosition;//[Offset: 0x14, Size: 0x8]
	float ReticleDirectionAngle;//[Offset: 0x1c, Size: 0x4]
	bool bCrossHairForbid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	int ReservedLayerSpace;//[Offset: 0x14c, Size: 0x4]
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x471404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponScopeSliderWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	ScopeSliderData[] ScopeSliderDatas;//[Offset: 0x400, Size: 0x10]
	int ScopeSliderType;//[Offset: 0x410, Size: 0x4]
	float SliderAnimPlaySpeed;//[Offset: 0x414, Size: 0x4]
	float SliderValueScale;//[Offset: 0x418, Size: 0x4]
	Slider* Slider_ADS;//[Offset: 0x420, Size: 0x8]
	SolarTextBlock* Txt_Scope;//[Offset: 0x428, Size: 0x8]
	WidgetAnimation* Anim_Type0;//[Offset: 0x430, Size: 0x8]
	WidgetAnimation* Anim_Type1;//[Offset: 0x438, Size: 0x8]
	WidgetAnimation* AnimToPlay;//[Offset: 0x440, Size: 0x8]
	void OnSwitchToNextVehicleScope();// 0x61ea04f39041
	void OnSliderValueChangedOnPC(float InValue);// 0x61e904f39041
	void OnSliderValueChanged(float InValue);// 0x61e804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScopeSliderData
	Vector2D SliderPercentRange;//[Offset: 0x0, Size: 0x8]
	float SliderAnimeTimer;//[Offset: 0x8, Size: 0x4]
	enum ScopeMagnifier;//[Offset: 0xc, Size: 0x1]
	FText DisplayText;//[Offset: 0x10, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x138, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x13c, Size: 0x10]
	float MinValue;//[Offset: 0x14c, Size: 0x4]
	float MaxValue;//[Offset: 0x150, Size: 0x4]
	SliderStyle WidgetStyle;//[Offset: 0x160, Size: 0x560]
	byte Orientation;//[Offset: 0x6c0, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x6c4, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x6d4, Size: 0x10]
	Vector2D SliderHandleOffset;//[Offset: 0x6e4, Size: 0x8]
	bool CommitTouchStartValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 0x1]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ed, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ee, Size: 0x1]
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ef, Size: 0x1]
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	float StepSize;//[Offset: 0x6f4, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x700, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x710, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x720, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x730, Size: 0x10]
	delegate OnValueChanged;//[Offset: 0x740, Size: 0x10]
	void SetValue(float InValue);// 0x3e8e04f39041
	void SetStepSize(float InValue);// 0x3e8d04f39041
	void SetSliderHandleOffset(Vector2D InValue);// 0x3e8c04f39041
	void SetSliderHandleColor(LinearColor InValue);// 0x3e8b04f39041
	void SetSliderBarColor(LinearColor InValue);// 0x3e8a04f39041
	void SetNormalBarImage(out const SlateBrush InImage);// 0x3e8904f39041
	void SetMinValue(float InValue);// 0x3e8804f39041
	void SetMaxValue(float InValue);// 0x3e8704f39041
	void SetLocked(bool InValue);// 0x3e8604f39041
	void SetIndentHandle(bool InValue);// 0x3e8504f39041
	void SetHoveredBarImage(out const SlateBrush InImage);// 0x3e8404f39041
	void SetBarThickness(float InValue);// 0x3e8304f39041
	float GetValue();// 0x3e8204f39041
	float GetNormalizedValue();// 0x3e8104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x10, Size: 0xe0]
	SlateBrush HoveredBarImage;//[Offset: 0xf0, Size: 0xe0]
	SlateBrush DisabledBarImage;//[Offset: 0x1d0, Size: 0xe0]
	SlateBrush NormalThumbImage;//[Offset: 0x2b0, Size: 0xe0]
	SlateBrush HoveredThumbImage;//[Offset: 0x390, Size: 0xe0]
	SlateBrush DisabledThumbImage;//[Offset: 0x470, Size: 0xe0]
	float BarThickness;//[Offset: 0x550, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	FText Text;//[Offset: 0x160, Size: 0x18]
	int LocTextID;//[Offset: 0x178, Size: 0x4]
	enum PreviewLang;//[Offset: 0x17c, Size: 0x1]
	bool bCapitalsLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d, Size: 0x1]
	Vector2D CalcSize;//[Offset: 0x180, Size: 0x8]
	delegate TextDelegate;//[Offset: 0x188, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x198, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1c0, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1d0, Size: 0x60]
	SlateFontSizeForLang SpecialLangFont;//[Offset: 0x230, Size: 0x18]
	SlateBrush StrikeBrush;//[Offset: 0x250, Size: 0xe0]
	SlateBrush BackgroundBrush;//[Offset: 0x330, Size: 0xe0]
	Vector2D ShadowOffset;//[Offset: 0x410, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x418, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x428, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x438, Size: 0x4]
	int MaxRowCount;//[Offset: 0x43c, Size: 0x4]
	int MinFontSize;//[Offset: 0x440, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x445, Size: 0x1]
	bool bUsingAccurateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x446, Size: 0x1]
	bool bEnableCacheSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x447, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool bNeverResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1]
	void SetWrapTextAt(float InWrapTextAt);// 0x5e1f04f39041
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x5e1e04f39041
	void SetText(FText InText);// 0x5e1d04f39041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x5e1c04f39041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x5e1b04f39041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x5e1a04f39041
	void SetOpacity(float InOpacity);// 0x5e1904f39041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x5e1804f39041
	void SetMargin(Margin InMargin);// 0x5e1704f39041
	void SetLocTextID(int InLocTextID);// 0x5e1604f39041
	void SetLocLangTextData(FText InText, bool InEnableLocText, int InLocTextID, enum InPreviewLang, SlateFontSizeForLang InSlateFontSizeForLang);// 0x5e1504f39041
	void SetLineHeightPercentage(float InLineHeightPercentage);// 0x5e1404f39041
	void SetFont(SlateFontInfo InFontInfo);// 0x5e1304f39041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x5e1204f39041
	void SetBackgroundBrush(SlateBrush InBackgroundBrush);// 0x5e1104f39041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x5e1004f39041
	Vector2D GetTextSize();// 0x5e0f04f39041
	FText GetText();// 0x5e0e04f39041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x5e0d04f39041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x5e0c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateFontSizeForLang
	bool bEnableFontForLang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int DefaultFontSize;//[Offset: 0x4, Size: 0x4]
	SlateFontSizeLangData[] FontForLangGroup;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateFontSizeLangData
	enum SpecialLang;//[Offset: 0x0, Size: 0x1]
	int SpecialFontSize;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCheckBox.CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	Widget* OnGroup;//[Offset: 0xac8, Size: 0x8]
	Widget* OffGroup;//[Offset: 0xad0, Size: 0x8]
	enum CheckedGroupVisibility;//[Offset: 0xad8, Size: 0x1]
	enum UncheckedGroupVisibility;//[Offset: 0xad9, Size: 0x1]
	void OnStateChanged(bool bIsChecked);// 0x507f04f39041
	void ManualSetIsChecked(bool InIsChecked, bool bBroadCast);// 0x507e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponRechamberWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* img_FireCD;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* EmptyBullet_Anim;//[Offset: 0x408, Size: 0x8]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x410, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShakeData
	class CameraShake* CameraShakeClass;//[Offset: 0x0, Size: 0x8]
	CurveFloat* CameraShakeScaleCurve;//[Offset: 0x8, Size: 0x8]
	float ScaleMultiplier;//[Offset: 0x10, Size: 0x4]
	float ScopeScaleMultiplier;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BulletLandAreaData
	ParticleSystemComponent* TargetParticleComponent;//[Offset: 0x0, Size: 0x8]
	DecalComponent* TargetDecalComponent;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x318, Size: 0x8]
	int SortOrder;//[Offset: 0x320, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x324, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x328, Size: 0x4]
	float FadeDuration;//[Offset: 0x32c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x330, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x334, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	Vector DecalSize;//[Offset: 0x33c, Size: 0xc]
	void SetSortOrder(int Value);// 0x406504f39041
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x406404f39041
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x406304f39041
	void SetFadeIn(float StartDelay, float Duaration);// 0x406204f39041
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x406104f39041
	float GetFadeStartDelay();// 0x406004f39041
	float GetFadeInStartDelay();// 0x405f04f39041
	float GetFadeInDuration();// 0x405e04f39041
	float GetFadeDuration();// 0x405d04f39041
	MaterialInterface* GetDecalMaterial();// 0x405c04f39041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x405b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleEjectParams
	float EjectTime;//[Offset: 0x0, Size: 0x4]
	float EjectDistance;//[Offset: 0x4, Size: 0x4]
	float EjectBreakableTime;//[Offset: 0x8, Size: 0x4]
	float EjectCameraFadeOutTime;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimDetailMode;//[Offset: 0xc18, Size: 0x1]
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc40, Size: 0x1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc40, Size: 0x1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc40, Size: 0x1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x3bff04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarNetMovementComponent.ActorComponent.Object
	float InterpolatedBackTime;//[Offset: 0xe4, Size: 0x4]
	float ServerBufferCheckMinSpeed;//[Offset: 0xe8, Size: 0x4]
	float ServerBufferIgnoreCheckTimer;//[Offset: 0xec, Size: 0x4]
	float AtRestThresholdCount;//[Offset: 0xf0, Size: 0x4]
	enum ExtrapolationMode;//[Offset: 0xf4, Size: 0x1]
	bool bUseExtrapolationTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	float ExtrapolationTimeLimit;//[Offset: 0xf8, Size: 0x4]
	bool bUseExtrapolationDistanceLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	float ExtrapolationDistanceLimit;//[Offset: 0x100, Size: 0x4]
	float SendPositionThreshold;//[Offset: 0x104, Size: 0x4]
	float SendRotationThreshold;//[Offset: 0x108, Size: 0x4]
	float SendVelocityThreshold;//[Offset: 0x10c, Size: 0x4]
	float SendAngularVelocityThreshold;//[Offset: 0x110, Size: 0x4]
	float ResetTimeOffsetsThreshold;//[Offset: 0x114, Size: 0x4]
	float UsingRepLocationThreshold;//[Offset: 0x118, Size: 0x4]
	float LinearVelcolityForPositionThreshold;//[Offset: 0x11c, Size: 0x4]
	float ReceivedPositionThreshold;//[Offset: 0x120, Size: 0x4]
	float AngularVelocityForRotationThreshold;//[Offset: 0x124, Size: 0x4]
	float ReceivedRotationThreshold;//[Offset: 0x128, Size: 0x4]
	float PositionSnapThreshold;//[Offset: 0x12c, Size: 0x4]
	float RotationSnapThreshold;//[Offset: 0x130, Size: 0x4]
	float PositionLerpSpeed;//[Offset: 0x134, Size: 0x4]
	float RotationLerpSpeed;//[Offset: 0x138, Size: 0x4]
	float SpeedOfLerp;//[Offset: 0x13c, Size: 0x4]
	enum SyncPosition;//[Offset: 0x140, Size: 0x1]
	enum SyncRotation;//[Offset: 0x141, Size: 0x1]
	enum SyncVelocity;//[Offset: 0x142, Size: 0x1]
	enum SyncAngularVelocity;//[Offset: 0x143, Size: 0x1]
	bool bSyncDesiredYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool isPositionCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	bool isRotationCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 0x1]
	bool isVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 0x1]
	bool isAngularVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	float SendRate;//[Offset: 0x14c, Size: 0x4]
	float TimeSmoothing;//[Offset: 0x150, Size: 0x4]
	bool bUsingOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	bool bAlwaysSendOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 0x1]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x190, Size: 0x8]
	SceneComponent* RelativeComponent;//[Offset: 0x198, Size: 0x8]
	SolarVehiclePawn* PreviousBaseVehicleActor;//[Offset: 0x1a0, Size: 0x8]
	float AtRestPositionThreshold;//[Offset: 0x510, Size: 0x4]
	float AtRestRotationThreshold;//[Offset: 0x514, Size: 0x4]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x528, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarVehicleCameraComponent* VehicleCamera;//[Offset: 0x3f8, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x400, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float CameraLocationLagTime;//[Offset: 0x3b0, Size: 0x4]
	bool HandleTargetOffsetAsRelativeValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	SolarSpringArmComponent* GetSpringArmComponentFromActor(const Actor* InActor);// 0x4fc304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x314, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x318, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x324, Size: 0xc]
	float ProbeSize;//[Offset: 0x330, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x334, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x335, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x335, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x335, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x335, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x335, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x335, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x335, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x335, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x336, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x338, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x33c, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x340, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x344, Size: 0x4]
	bool IsCollisionFixApplied();// 0x4fc204f39041
	Vector GetUnfixedCameraPosition();// 0x4fc104f39041
	Rotator GetTargetRotation();// 0x4fc004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarVehiclePawn* Vehicle;//[Offset: 0xa28, Size: 0x8]
	SolarVehicleSpringArmComponent* VehicleSpringArm;//[Offset: 0xa30, Size: 0x8]
	VehicleCameraDataAsset*[] CameraDataAssets;//[Offset: 0xa50, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarSpringArmComponent* SpringArm;//[Offset: 0x950, Size: 0x8]
	float ConfigDistanceToTarget;//[Offset: 0x9f0, Size: 0x4]
	Vector ConfigCameraOffset;//[Offset: 0x9f4, Size: 0xc]
	Vector ConfigTargetOffset;//[Offset: 0xa00, Size: 0xc]
	float ConfigFOV;//[Offset: 0xa0c, Size: 0x4]
	float ViewPitchMax;//[Offset: 0xa10, Size: 0x4]
	float ViewPitchMin;//[Offset: 0xa14, Size: 0x4]
	float ViewYawMax;//[Offset: 0xa18, Size: 0x4]
	float ViewYawMin;//[Offset: 0xa1c, Size: 0x4]
	float CameraOccupiedRoom;//[Offset: 0xa20, Size: 0x4]
	bool EnableDistanceSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24, Size: 0x1]
	bool EnableFOVSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa25, Size: 0x1]
	bool bEnableCameraOffsetSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa26, Size: 0x1]
	bool bEnableTargetOffsetSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa27, Size: 0x1]
	SolarCameraComponent* GetCameraComponentFromActor(const Actor* InActor);// 0x4f9604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData CurrentVehicleHealth;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData MaxVehicleHealth;//[Offset: 0x40, Size: 0x10]
	GameplayAttributeData MaxBrokenHealth;//[Offset: 0x50, Size: 0x10]
	GameplayAttributeData StealthMaterialPercent;//[Offset: 0x60, Size: 0x10]
	GameplayAttributeData SpeedMultiplier;//[Offset: 0x70, Size: 0x10]
	GameplayAttributeData CurrentVehicleWholeShield;//[Offset: 0x80, Size: 0x10]
	GameplayAttributeData MaxVehicleWholeShield;//[Offset: 0x90, Size: 0x10]
	void OnRep_StealthMaterialPercent(out const GameplayAttributeData OldStealthMaterialPercent);// 0x5f0c04f39041
	void OnRep_SpeedMultiplier(out const GameplayAttributeData OldSpeedMultiplier);// 0x5f0b04f39041
	void OnRep_MaxVehicleWholeShield(out const GameplayAttributeData OldMaxVehicleWholeShield);// 0x5f0a04f39041
	void OnRep_MaxVehicleHealth(out const GameplayAttributeData OldMaxVehicleHealth);// 0x5f0904f39041
	void OnRep_MaxBrokenHealth(out const GameplayAttributeData OldMaxBrokenHealth);// 0x5f0804f39041
	void OnRep_CurrentVehicleWholeShield(out const GameplayAttributeData OldVehicleWholeShield);// 0x5f0704f39041
	void OnRep_CurrentVehicleHealth(out const GameplayAttributeData OldVehicleHealth);// 0x5f0604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeSet.AttributeSet.Object
	void K2_SetAttributeValue(FName AttributeName, float NewVal);// 0x450204f39041
	void K2_OnReplicationAttribute(out const GameplayAttributeData OldValue, out const GameplayAttributeData ReplicatedAttribute, FName AttributeName);// 0x450104f39041
	void K2_InitAttributeValue(out GameplayAttributeData OriginAttribute, float NewVal);// 0x450004f39041
	float K2_GetAttributeValue(out const GameplayAttributeData OriginAttribute);// 0x44ff04f39041
	GameplayAttribute K2_GetAttribute(FName AttributeName);// 0x44fe04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x8, Size: 0x4]
	float CurrentValue;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BasedMovement
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x8, Size: 0xc]
	Rotator Rotation;//[Offset: 0x14, Size: 0xc]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleGA_Carpad.SolarVehicleGameplayAbility.GameplayAbility.Object
	float CarpadJumpVelocity;//[Offset: 0x4e8, Size: 0x4]
	float PitchDegree;//[Offset: 0x4ec, Size: 0x4]
	bool bControllableInLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	void CarpadJumpLanding(out const HitResult LandedHit);// 0x5f0f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleVFXMesh
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x28]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x28, Size: 0x10]
	FName AttachedSocket;//[Offset: 0x38, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x40, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleMaterialData
	int8 MaterialIndex;//[Offset: 0x0, Size: 0x1]
	FName ParamName;//[Offset: 0x4, Size: 0x8]
	float OnValue;//[Offset: 0xc, Size: 0x4]
	float OffValue;//[Offset: 0x10, Size: 0x4]
	float ActiveSpeed;//[Offset: 0x14, Size: 0x4]
	MaterialInstanceDynamic* MatInstanceDynamic;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSoundDataAsset.DataAsset.Object
	FString Engine_3P;//[Offset: 0x30, Size: 0x10]
	FString Engine_3P_Enemy;//[Offset: 0x40, Size: 0x10]
	FString Engine_Down_3P;//[Offset: 0x50, Size: 0x10]
	FString Engine_Down_3P_Enemy;//[Offset: 0x60, Size: 0x10]
	FString Engine_RTPC;//[Offset: 0x70, Size: 0x10]
	FString Engine_Stop_3P;//[Offset: 0x80, Size: 0x10]
	FString Engine_Stop_3P_Enemy;//[Offset: 0x90, Size: 0x10]
	FString Engine_Input_RTPC;//[Offset: 0xa0, Size: 0x10]
	float MaxMoveSpeed;//[Offset: 0xb0, Size: 0x4]
	FString MoveSpeed_Acc_RTPC;//[Offset: 0xb8, Size: 0x10]
	FString Tire_3P;//[Offset: 0xc8, Size: 0x10]
	FString Tire_3P_Enemy;//[Offset: 0xd8, Size: 0x10]
	FString Tire_End_3P;//[Offset: 0xe8, Size: 0x10]
	FString Tire_End_3P_Enemy;//[Offset: 0xf8, Size: 0x10]
	FString Tire_RTPC;//[Offset: 0x108, Size: 0x10]
	FString Tire_Group;//[Offset: 0x118, Size: 0x10]
	<byte,FString> Tire_States;//[Offset: 0x128, Size: 0x50]
	bool bUseEngineRpm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	FString Vehicle_Collision_3P;//[Offset: 0x180, Size: 0x10]
	FString Vehicle_Collision_3P_Enemy;//[Offset: 0x190, Size: 0x10]
	FString Vehicle_Collision_RTPC;//[Offset: 0x1a0, Size: 0x10]
	FString Play_Booster_3P;//[Offset: 0x1b0, Size: 0x10]
	FString Play_Booster_3P_Enemy;//[Offset: 0x1c0, Size: 0x10]
	FString Stop_Booster_3P;//[Offset: 0x1d0, Size: 0x10]
	FString Stop_Booster_3P_Enemy;//[Offset: 0x1e0, Size: 0x10]
	FString Vehicle_Speedboard_1P;//[Offset: 0x1f0, Size: 0x10]
	FString Vehicle_Speedboard_3P;//[Offset: 0x200, Size: 0x10]
	FString Vehicle_Speedboard_3P_Enemy;//[Offset: 0x210, Size: 0x10]
	FString Vehicle_Eject_1P;//[Offset: 0x220, Size: 0x10]
	FString Vehicle_Eject_3P;//[Offset: 0x230, Size: 0x10]
	FString Vehicle_Eject_3P_Enemy;//[Offset: 0x240, Size: 0x10]
	FString Play_Vehicle_Destroyed;//[Offset: 0x250, Size: 0x10]
	FString Weakpoint_Broken_3P;//[Offset: 0x260, Size: 0x10]
	FString Weakpoint_Broken_3P_Enemy;//[Offset: 0x270, Size: 0x10]
	FString Weakpoint_Fixed_3P;//[Offset: 0x280, Size: 0x10]
	FString Weakpoint_Fixed_3P_Enemy;//[Offset: 0x290, Size: 0x10]
	FString WeakPoint_Broken_1P_UI;//[Offset: 0x2a0, Size: 0x10]
	<enum,FName> WeakPointHitSoundGroupNames;//[Offset: 0x2b0, Size: 0x50]
	FString Engine_Start_3P;//[Offset: 0x300, Size: 0x10]
	FString Engine_Start_3P_Enemy;//[Offset: 0x310, Size: 0x10]
	FString Braking_Loop_RTPC;//[Offset: 0x320, Size: 0x10]
	FString Play_Braking_Loop_3P;//[Offset: 0x330, Size: 0x10]
	FString Play_Braking_Loop_3P_Enemy;//[Offset: 0x340, Size: 0x10]
	FString Stop_Braking_Loop_3P;//[Offset: 0x350, Size: 0x10]
	FString Stop_Braking_Loop_3P_Enemy;//[Offset: 0x360, Size: 0x10]
	float BrakingLoopSoundDegree;//[Offset: 0x370, Size: 0x4]
	float BrakingLoopSoundSpeed;//[Offset: 0x374, Size: 0x4]
	FString Play_Reverse_Loop;//[Offset: 0x378, Size: 0x10]
	FString Stop_Reverse_Loop;//[Offset: 0x388, Size: 0x10]
	FString Drift_RTPC;//[Offset: 0x398, Size: 0x10]
	FString Drift_Start;//[Offset: 0x3a8, Size: 0x10]
	FString Drift_Stop;//[Offset: 0x3b8, Size: 0x10]
	FString RPMRedLine_Start;//[Offset: 0x3c8, Size: 0x10]
	FString RPMRedLine_Stop;//[Offset: 0x3d8, Size: 0x10]
	byte SpeedDifferenceInKmThresholdForHitSound;//[Offset: 0x3e8, Size: 0x1]
	FString Play_SelfHealing_3P;//[Offset: 0x3f0, Size: 0x10]
	FString Stop_SelfHealing_3P;//[Offset: 0x400, Size: 0x10]
	FString Play_vehicle_crash_ground_3P;//[Offset: 0x410, Size: 0x10]
	FString Play_vehicle_crash_ground_3P_enemy;//[Offset: 0x420, Size: 0x10]
	FString Vehicle_Crash_Ground_RTPC;//[Offset: 0x430, Size: 0x10]
	float VehicleCrashGroundRtpcMultiplier;//[Offset: 0x440, Size: 0x4]
	FString Play_vehicle_crash_water_3P;//[Offset: 0x448, Size: 0x10]
	FString Play_vehicle_crash_water_3P_enemy;//[Offset: 0x458, Size: 0x10]
	FString Play_vehicle_fixing_weakpoint_3P;//[Offset: 0x468, Size: 0x10]
	FString Stop_vehicle_fixing_weakpoint_3P;//[Offset: 0x478, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Start_1P;//[Offset: 0x488, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Loop_1P;//[Offset: 0x498, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Start_3P;//[Offset: 0x4a8, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Loop_3P;//[Offset: 0x4b8, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Start_1P;//[Offset: 0x4c8, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Loop_1P;//[Offset: 0x4d8, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Start_3P;//[Offset: 0x4e8, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Loop_3P;//[Offset: 0x4f8, Size: 0x10]
	FString Play_HitVehicleWholdShield_1P;//[Offset: 0x508, Size: 0x10]
	FString Play_HitVehicleWholdShield_3P;//[Offset: 0x518, Size: 0x10]
	FString HoverJumpOnActive1P;//[Offset: 0x528, Size: 0x10]
	FString HoverJumpOnActive3P;//[Offset: 0x538, Size: 0x10]
	FString HoverJumpWhileActive1P;//[Offset: 0x548, Size: 0x10]
	FString HoverJumpWhileActive3P;//[Offset: 0x558, Size: 0x10]
	FString HoverJumpOnRemove1P;//[Offset: 0x568, Size: 0x10]
	FString HoverJumpOnRemove3P;//[Offset: 0x578, Size: 0x10]
	FString Play_VehicleTrumpet_1P;//[Offset: 0x588, Size: 0x10]
	FString Play_VehicleTrumpet_3P;//[Offset: 0x598, Size: 0x10]
	FString Stop_VehicleTrumpet_1P;//[Offset: 0x5a8, Size: 0x10]
	FString Stop_VehicleTrumpet_3P;//[Offset: 0x5b8, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P;//[Offset: 0x5c8, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x5d8, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P;//[Offset: 0x5e8, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x5f8, Size: 0x10]
	FString Play_Vehicle_UpShift_3P;//[Offset: 0x608, Size: 0x10]
	FString Play_Vehicle_UpShift_3P_Enemy;//[Offset: 0x618, Size: 0x10]
	FString Play_Vehicle_DownShift_3P;//[Offset: 0x628, Size: 0x10]
	FString Play_Vehicle_DownShift_3P_Enemy;//[Offset: 0x638, Size: 0x10]
	FString Play_IronMan_Laser_Hit;//[Offset: 0x648, Size: 0x10]
	FString FootPlant;//[Offset: 0x658, Size: 0x10]
	FString Landing_3P;//[Offset: 0x668, Size: 0x10]
	FString Landing_3P_Enemy;//[Offset: 0x678, Size: 0x10]
	bool bUseDoppler;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	float AddDopplerIntensity;//[Offset: 0x68c, Size: 0x4]
	float MinusDopplerIntensity;//[Offset: 0x690, Size: 0x4]
	float UpdateDopplerTime;//[Offset: 0x694, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DamageStatusVehicleVFXs
	VehicleVFX[] VehicleVFXs;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarNavModifierComponent.NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	void OnVehicleRootHit(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x550e04f39041
	void OnDriverGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x550d04f39041
	void OnDriverGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x550c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe0, Size: 0x8]
	Vector FailsafeExtent;//[Offset: 0xe8, Size: 0xc]
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	void SetAreaClass(class NavArea NewAreaClass);// 0x550b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	Object* CachedNavParent;//[Offset: 0xd8, Size: 0x8]
	void SetNavigationRelevancy(bool bRelevant);// 0x550a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleDetector
	Rotator VehicleLocalRotator;//[Offset: 0x0, Size: 0xc]
	Vector StartLocParameter;//[Offset: 0xc, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotAIController.SolarBotControllerBase.SolarAIControllerBase.AIController.Controller.Actor.Object
	SolarBotLootComponent* BotLootComponent;//[Offset: 0x660, Size: 0x8]
	SolarPerceptionComponent* BotPerceptionComponent;//[Offset: 0x668, Size: 0x8]
	class NavigationQueryFilter* BPDefaultNavigationFilterClass;//[Offset: 0x670, Size: 0x8]
	<GameplayTag,BehaviorTree*> SubTreeMap;//[Offset: 0x678, Size: 0x50]
	float MinSpecVehicleDeltaPitch;//[Offset: 0x6c8, Size: 0x4]
	delegate OnBotAIDeath;//[Offset: 0x6d0, Size: 0x10]
	bool bInitDefaultWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	int BotDefaultWeaponId;//[Offset: 0x6e4, Size: 0x4]
	bool bSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 0x1]
	int UniqueSpawnerID;//[Offset: 0x6ec, Size: 0x4]
	int DefaultDifficultyLevel;//[Offset: 0x6f0, Size: 0x4]
	int CurrentDifficultyLevel;//[Offset: 0x6f4, Size: 0x4]
	SolarBotShootSimulater* ShootSimulater;//[Offset: 0x700, Size: 0x8]
	enum BotAIType;//[Offset: 0x768, Size: 0x1]
	int BotFeature;//[Offset: 0x76c, Size: 0x4]
	NgaiAIControllerComponent* NgaiComponent;//[Offset: 0x778, Size: 0x8]
	float ValidEmojiUseDistance;//[Offset: 0x790, Size: 0x4]
	float WorldMarkMessageDelayTime;//[Offset: 0x860, Size: 0x4]
	void UpdateDynamicSubtree();// 0x4f2104f39041
	void StopBehaviorTree();// 0x4f2004f39041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x4f1f04f39041
	bool SetupBotAITargetSelectConfig();// 0x4f1e04f39041
	bool SetupBotAIDifficulty(int DifficultyLevel, bool bAsDefault);// 0x4f1d04f39041
	bool SetupBotAICanUseCharacterData(int CharacterId, int SkinId);// 0x4f1c04f39041
	void SetLootSubtree(BehaviorTree* BehaviorAsset);// 0x4f1b04f39041
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x4f1a04f39041
	bool SetBotConfigPresetByID(int BotConfigPresetID);// 0x4f1904f39041
	void SetBattleSubtree(BehaviorTree* BehaviorAsset);// 0x4f1804f39041
	void OnReset();// 0x4f1704f39041
	void OnEnterLanding();// 0x4f1604f39041
	bool IsTeamLeader();// 0x4f1504f39041
	bool IsInPlayerTeam();// 0x4f1404f39041
	bool IsIndependent();// 0x4f1304f39041
	bool IsAccompanyingPlayer();// 0x4f1204f39041
	enum[] GetPreferPickHeroTypes();// 0x4f1104f39041
	byte GetMyTeamID();// 0x4f1004f39041
	bool CanActivateVehicleAbility(int SeatIndex, int AbilityIndex);// 0x4f0f04f39041
	float CalculateScoreForAITarget(const Actor* AITargetActor);// 0x4f0e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotLootComponent.ActorComponent.Object
	SolarBotLootValuationConfig DefaultValuationConfig;//[Offset: 0xb0, Size: 0x44]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	SolarBotThreatConfig DefaultThreatConfig;//[Offset: 0x180, Size: 0x70]
	<enum,class Actor> ConfigAreaTypeIdentifyMap;//[Offset: 0x1f0, Size: 0x50]
	PerceivableEAInfluenceConfig EffectAreasInfluenceConfig;//[Offset: 0x240, Size: 0x60]
	float MaxInfluenceRadius;//[Offset: 0x2a0, Size: 0x4]
	float SmokeGrenadeAffectRadius;//[Offset: 0x2a4, Size: 0x4]
	float EnergyBubbleAffectRadius;//[Offset: 0x2a8, Size: 0x4]
	float SummonWallAffectRadius;//[Offset: 0x2ac, Size: 0x4]
	float UAVShieldAffectRadius;//[Offset: 0x2b0, Size: 0x4]
	float UAVRescueAffectRadius;//[Offset: 0x2b4, Size: 0x4]
	bool bTargetSelectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	FName[] ForbiddenTags;//[Offset: 0x2c0, Size: 0x10]
	int MaxNumCachedDamage;//[Offset: 0x308, Size: 0x4]
	void UpdateSenseConfig(float NewSightRadius, float SightLoseRange);// 0x553204f39041
	void SetTargetSelectEnabled(bool bInEnable);// 0x553104f39041
	void SetForbiddenTags(out const FName[] Tags, bool bCleanExists);// 0x553004f39041
	void OnBotPerceptionUpdated(Actor* Actor, AIStimulus Stimulus);// 0x552f04f39041
	bool IsInEffectAreaOfType(enum Type, const Actor* InTestActor);// 0x552e04f39041
	bool IsInAnyEffectArea(out PerceivableEffectArea[] ActiveEffectAreas, const Actor* InTestActor);// 0x552d04f39041
	float GetTargetCurrentThreatValue(SolarCharacter* ThreatTarget);// 0x552c04f39041
	void ClearCurrentThreat(bool bCleanBestTarget);// 0x552b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PerceivableEAInfluenceConfig
	<enum,float> AreaTypeValueMap;//[Offset: 0x0, Size: 0x50]
	float HostileAreaFactor;//[Offset: 0x50, Size: 0x4]
	float NeutralAreaFactor;//[Offset: 0x54, Size: 0x4]
	float FriendlyAreaFactor;//[Offset: 0x58, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PerceivableEffectArea
	enum AreaType;//[Offset: 0x0, Size: 0x1]
	Vector EffectLocation;//[Offset: 0x4, Size: 0xc]
	float EffectRadius;//[Offset: 0x10, Size: 0x4]
	Actor* EffectActor;//[Offset: 0x14, Size: 0x8]
	Actor* Instigator;//[Offset: 0x1c, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotShootSimulater.Object
	SolarBotAIController* OwnerController;//[Offset: 0x28, Size: 0x8]
	Actor* LockedTargetActor;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NgaiAIControllerComponent.ActorComponent.Object
	SolarCharacterBase* EnemyCharacterBase;//[Offset: 0xb0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotAITeamManager.Object
	float UpdateInterval;//[Offset: 0x28, Size: 0x4]
	float DefaultSeparateDistance;//[Offset: 0x2c, Size: 0x4]
	float DefaultReturnDistance;//[Offset: 0x30, Size: 0x4]
	class SolarBotTeamVisualizer* DebugVisualizerClass;//[Offset: 0x90, Size: 0x8]
	SolarBotTeamVisualizer* DebugVisualizer;//[Offset: 0x98, Size: 0x8]
	SolarBotAIConfig*[] CandidateBotConfigs;//[Offset: 0xb0, Size: 0x10]
	<SolarCharacter*,SolarBotAIController*> AllocatedCharacters;//[Offset: 0xc0, Size: 0x50]
	SolarCharacter*[] AbandonedCharacters;//[Offset: 0x110, Size: 0x10]
	<enum,BotEmojiSetting> EmojiTaskSettings;//[Offset: 0x120, Size: 0x50]
	<int,enum> ResponseToVoiceType;//[Offset: 0x170, Size: 0x50]
	<enum,enum> ResponseToMarkType;//[Offset: 0x1c0, Size: 0x50]
	<enum,BotResponseSetting> ResponseTaskSettings;//[Offset: 0x210, Size: 0x50]
	void UpdateAllocatedList(SolarBotAIController* InController, out const SolarCharacter*[] AliveCharacterArray);// 0x4f4304f39041
	bool TryCancelCurrentRescueTarget(SolarBotAIController* InController, const SolarCharacter* CancelledCharacter);// 0x4f4204f39041
	bool ShouldTeamActivate(out const SolarBotTeamInfo BotInfo);// 0x4f4104f39041
	void SetTeamBlackboardValueAsVector(int TeamID, out const FName KeyName, Vector VectorValue, enum InBotState, bool bSkipIndependent);// 0x4f4004f39041
	void SetTeamBlackboardValueAsString(int TeamID, out const FName KeyName, FString StringValue, enum InBotState, bool bSkipIndependent);// 0x4f3f04f39041
	void SetTeamBlackboardValueAsRotator(int TeamID, out const FName KeyName, Rotator VectorValue, enum InBotState, bool bSkipIndependent);// 0x4f3e04f39041
	void SetTeamBlackboardValueAsObject(int TeamID, out const FName KeyName, Object* ObjectValue, enum InBotState, bool bSkipIndependent);// 0x4f3d04f39041
	void SetTeamBlackboardValueAsName(int TeamID, out const FName KeyName, FName NameValue, enum InBotState, bool bSkipIndependent);// 0x4f3c04f39041
	void SetTeamBlackboardValueAsInt(int TeamID, out const FName KeyName, int IntValue, enum InBotState, bool bSkipIndependent);// 0x4f3b04f39041
	void SetTeamBlackboardValueAsFloat(int TeamID, out const FName KeyName, float FloatValue, enum InBotState, bool bSkipIndependent);// 0x4f3a04f39041
	void SetTeamBlackboardValueAsEnum(int TeamID, out const FName KeyName, byte EnumValue, enum InBotState, bool bSkipIndependent);// 0x4f3904f39041
	void SetTeamBlackboardValueAsClass(int TeamID, out const FName KeyName, class Object ClassValue, enum InBotState, bool bSkipIndependent);// 0x4f3804f39041
	void SetTeamBlackboardValueAsBool(int TeamID, out const FName KeyName, bool BoolValue, enum InBotState, bool bSkipIndependent);// 0x4f3704f39041
	void SetBotDropOut(const SolarBotAIController* InController, bool bDropOut);// 0x4f3604f39041
	void OnTeamDeactive(out const SolarBotTeamInfo TeamInfo);// 0x4f3504f39041
	void OnTeamActivate(out const SolarBotTeamInfo TeamInfo);// 0x4f3404f39041
	void OnBotUnRegister(out const SolarBotMemberInfo BotInfo);// 0x4f3304f39041
	void OnBotStateChanged(out const SolarBotMemberInfo BotInfo, enum OldState);// 0x4f3204f39041
	void OnBotRegister(out const SolarBotMemberInfo BotInfo);// 0x4f3104f39041
	bool IsValidTeamID(int InTeamId);// 0x4f3004f39041
	bool IsTeamLeader(const SolarBotAIController* InController);// 0x4f2f04f39041
	bool IsIndependent(const SolarBotAIController* InController);// 0x4f2e04f39041
	bool GetTeamPlayerInfo(const SolarBotAIController* InController, out SolarCharacter*[] PlayerArray);// 0x4f2d04f39041
	bool GetRescueInfo(SolarBotAIController* InController, out SolarCharacter*[] DyingPlayerArray, out SolarCharacter*[] DeadPlayerArray, out SolarCharacter*[] DyingBotArray, out SolarCharacter*[] DeadBotArray);// 0x4f2c04f39041
	bool GetBotTeamInfo(const SolarBotAIController* InController, out SolarBotTeamInfo OutTeamInfo);// 0x4f2b04f39041
	bool GetBotMemberInfo(const SolarBotAIController* InController, out SolarBotMemberInfo OutMemberInfo);// 0x4f2a04f39041
	SolarBotAITeamManager* Get(const Object* Context);// 0x4f2904f39041
	bool CheckBotTeamState(const SolarBotAIController* InController, enum MemberState);// 0x4f2804f39041
	Vector CalculateTeamPosition(out const SolarBotTeamInfo TeamInfo);// 0x4f2704f39041
	bool AllocatedRescueTarget(SolarBotAIController* InController, SolarCharacter* RescuedCharacter);// 0x4f2604f39041
	void AbandonedCurrentRescueTarget(SolarBotAIController* InController, SolarCharacter* AbandonedCharacter);// 0x4f2504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotTeamInfo
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int TeamID;//[Offset: 0x4, Size: 0x4]
	Vector TeamPosition;//[Offset: 0x8, Size: 0xc]
	float SeparateDistance;//[Offset: 0x14, Size: 0x4]
	float ReturnDistance;//[Offset: 0x18, Size: 0x4]
	bool bPlayerNeedPraise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bHasInitByTeamConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	SolarBotMemberInfo[] MemberInfos;//[Offset: 0x20, Size: 0x10]
	<enum,float> TeamEmojiTimeStamp;//[Offset: 0x30, Size: 0x50]
	<enum,float> TeamResponseTimeStamp;//[Offset: 0x80, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotMemberInfo
	SolarBotAIController* BotController;//[Offset: 0x0, Size: 0x8]
	enum MemberState;//[Offset: 0x8, Size: 0x1]
	<enum,float> MemberEmojiTimeStamp;//[Offset: 0x10, Size: 0x50]
	<enum,float> MemberResponseTimeStamp;//[Offset: 0x60, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotTeamVisualizer.Info.Actor.Object
	Color[] DrawDebugColors;//[Offset: 0x228, Size: 0x10]
	Font* TextFont;//[Offset: 0x238, Size: 0x8]
	BotTeamDebugInfo[] BotTeamDebugInfos;//[Offset: 0x240, Size: 0x10]
	float ScreamDebugInfoLifeTime;//[Offset: 0x250, Size: 0x4]
	<int,FString> CharacterIDToNameMap;//[Offset: 0x258, Size: 0x50]
	float DebugTextScale;//[Offset: 0x2a8, Size: 0x4]
	float ScreamDebugInfoTriggerTime;//[Offset: 0x2ac, Size: 0x4]
	WarmBotDebugInfo[] ScreamDebugInfos;//[Offset: 0x2b0, Size: 0x10]
	FString DebugPrefix;//[Offset: 0x2c0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BotTeamDebugInfo
	int TeamID;//[Offset: 0x0, Size: 0x4]
	BotMemberDebugInfo[] MemberDebugInfos;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BotMemberDebugInfo
	Vector MemberLocation;//[Offset: 0x0, Size: 0xc]
	FString IDStr;//[Offset: 0x10, Size: 0x10]
	enum MemberState;//[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WarmBotDebugInfo
	ActiveBotDebugInfo[] PoppedBots;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveBotDebugInfo
	FString BotName;//[Offset: 0x0, Size: 0x10]
	bool bTeleSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int BotCharacterID;//[Offset: 0x14, Size: 0x4]
	int BotTeamID;//[Offset: 0x18, Size: 0x4]
	FString BotConfigName;//[Offset: 0x20, Size: 0x10]
	Vector BotLocation;//[Offset: 0x30, Size: 0xc]
	Vector WarmTargetLocation;//[Offset: 0x3c, Size: 0xc]
	float DistanceToWarmTarget;//[Offset: 0x48, Size: 0x4]
	Vector BotLocationOnTeleport;//[Offset: 0x4c, Size: 0xc]
	Vector WarmTargetLocationOnTeleport;//[Offset: 0x58, Size: 0xc]
	float DistanceToWarmTargetOnTeleport;//[Offset: 0x64, Size: 0x4]
	bool bIsAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BotEmojiSetting
	<int,float> EmojiPool;//[Offset: 0x0, Size: 0x50]
	GameplayTagContainer TagsRequested;//[Offset: 0x50, Size: 0x20]
	float PersonalCD;//[Offset: 0x70, Size: 0x4]
	float TeamCD;//[Offset: 0x74, Size: 0x4]
	float MinTimeDelay;//[Offset: 0x78, Size: 0x4]
	float MaxTimeDelay;//[Offset: 0x7c, Size: 0x4]
	float TriggeredProbability;//[Offset: 0x80, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BotResponseSetting
	float PersonalCD;//[Offset: 0x0, Size: 0x4]
	float TeamCD;//[Offset: 0x4, Size: 0x4]
	float MinTimeDelay;//[Offset: 0x8, Size: 0x4]
	float MaxTimeDelay;//[Offset: 0xc, Size: 0x4]
	float TriggeredProbability;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPreservedBotManager.Object
	<SolarPlayerState*,enum> PreservedBots;//[Offset: 0x38, Size: 0x50]
	SolarPlayerState*[] FailedBots;//[Offset: 0x88, Size: 0x10]
	<int,Vector> SilenceLocationInDiffMap;//[Offset: 0x98, Size: 0x50]
	float MinDetectDistance;//[Offset: 0xec, Size: 0x4]
	SolarPreservedBotPopTask*[] PopTasks;//[Offset: 0x110, Size: 0x10]
	EQSParametrizedQueryExecutionRequest DefaultPopQuery;//[Offset: 0x120, Size: 0x48]
	<enum,EQSParametrizedQueryExecutionRequest> PopQueryMap;//[Offset: 0x168, Size: 0x50]
	EnvQuery* SeparateQuery;//[Offset: 0x1b8, Size: 0x8]
	byte SeparateEQSRunMode;//[Offset: 0x1c0, Size: 0x1]
	SolarBotTimelineAIItemSetting DefaultItemTemplate;//[Offset: 0x1c8, Size: 0xf0]
	float TimeBetweenDyingAndDead;//[Offset: 0x2b8, Size: 0x4]
	delegate OnSendBotsSuccess;//[Offset: 0x2c8, Size: 0x10]
	delegate OnSendBotsFail;//[Offset: 0x2d8, Size: 0x10]
	void TryUpdateEquipment(const Object* Context, out const SolarBotTimelineAIItemSetting ItemSetting);// 0x56e504f39041
	bool TryPopBotByNum(const Object* Context, int PopNum, out const PopParameter InPopParam);// 0x56e404f39041
	void TryPopAllBotByGuarantee(const Object* Context, out const Vector PopLocation);// 0x56e304f39041
	void TryPopAllBot(const Object* Context, out const PopParameter InPopParam);// 0x56e204f39041
	void TryKillOneBot();// 0x56e104f39041
	void TryAddPreservedBot(SolarPlayerState* InBot, const float DelayTime);// 0x56e004f39041
	void OnPopSingleBotSuccess(SolarPreservedBotPopTask* InTask);// 0x56df04f39041
	void OnPopBotsFinished(SolarPreservedBotPopTask* InTask);// 0x56de04f39041
	void OnGetFinalTeleportLocSuccess(SolarPreservedBotPopTask* InTask, SolarPlayerState* BotPS, out const Vector TeleportLoc);// 0x56dd04f39041
	void OnGetFinalTeleportLocFail(SolarPreservedBotPopTask* InTask, SolarPlayerState* BotPS);// 0x56dc04f39041
	void OnCharacterDeath(const SolarPlayerController* InPlayer);// 0x56db04f39041
	void InitBotPreservedManager(byte InActivePlayerNum, int GameModeId);// 0x56da04f39041
	SolarPreservedBotManager* Get(const Object* Context);// 0x56d904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPreservedBotPopTask.Object
	int CurrentTaskID;//[Offset: 0x28, Size: 0x4]
	Vector[] PickedTeleportCenters;//[Offset: 0x40, Size: 0x10]
	SolarPlayerState*[] FailedBots;//[Offset: 0x50, Size: 0x10]
	SolarBotAIController*[] PendingSeparateBots;//[Offset: 0x60, Size: 0x10]
	delegate OnGetTeleportLocationSuccess;//[Offset: 0x70, Size: 0x10]
	delegate OnPopBotsFinished;//[Offset: 0x80, Size: 0x10]
	delegate OnGetFinalTeleportLocSuccess;//[Offset: 0x90, Size: 0x10]
	delegate OnGetFinalTeleportLocFail;//[Offset: 0xa0, Size: 0x10]
	Vector GetWarmTargetTraceCenter();// 0x56e804f39041
	Vector GetWarmTargetLocation();// 0x56e704f39041
	Actor*[] GetWarmTargetActors();// 0x56e604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EQSParametrizedQueryExecutionRequest
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 0x8]
	AIDynamicParam[] QueryConfig;//[Offset: 0x8, Size: 0x10]
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x18, Size: 0x28]
	byte RunMode;//[Offset: 0x40, Size: 0x1]
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	float Value;//[Offset: 0xc, Size: 0x4]
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10]
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8]
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8]
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1]
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotTimelineAIItemSetting
	<enum,SolarBotTimelineEquipmentArray> Equipment;//[Offset: 0x0, Size: 0x50]
	<int,IntPoint> Consumable;//[Offset: 0x50, Size: 0x50]
	<enum,SolarBotTimelineEquipmentArray> WeaponPart;//[Offset: 0xa0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotTimelineEquipmentArray
	<int,int> IDArray;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PopParameter
	SolarPlayerState*[] WarmTargets;//[Offset: 0x0, Size: 0x10]
	Vector PopLocation;//[Offset: 0x10, Size: 0xc]
	TraceRecord[] TargetTraces;//[Offset: 0x20, Size: 0x10]
	EnvQuery* TeleportLocEQS;//[Offset: 0x30, Size: 0x8]
	byte TeleportLocEQSRunMode;//[Offset: 0x38, Size: 0x1]
	bool bPopVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bForcePop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TraceRecord
	Vector[] TargetTrace;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotWarmSystemBase.Object
	float UpdateInterval;//[Offset: 0x28, Size: 0x4]
	int MaxNumExtraExpItem;//[Offset: 0x2c, Size: 0x4]
	int MaxNumExtraWeaponPart;//[Offset: 0x30, Size: 0x4]
	bool bRemoveOriginWeaponParts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	<enum,SolarWeaponPartBonusDropSetting> WeaponPartDropPriorityConfig;//[Offset: 0x38, Size: 0x50]
	float WeaponPartBasePriorityPerLevel;//[Offset: 0x88, Size: 0x4]
	SolarBotTimelineGameSetting WarmSysGameSetting;//[Offset: 0x98, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponPartBonusDropSetting
	<enum,float> PriorityMap;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotTimelineGameSetting.TableRowBase
	enum WarmSystemType;//[Offset: 0x8, Size: 0x1]
	int MaxiumTeam;//[Offset: 0xc, Size: 0x4]
	FString Comment;//[Offset: 0x10, Size: 0x10]
	DataTable* Action;//[Offset: 0x20, Size: 0x8]
	DataTable* Item;//[Offset: 0x28, Size: 0x8]
	DataTable* Downsize;//[Offset: 0x30, Size: 0x8]
	<DataTable*,float> ItemProgressionWeightMap;//[Offset: 0x38, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotBehaviorMonitor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FeedBotStrategyInfo
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	float FeedPriority;//[Offset: 0x10, Size: 0x4]
	float Difficulty;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarFlyTrail.Actor.Object
	SolarTrailProxyComponent*[] CachedProxyComponents;//[Offset: 0x228, Size: 0x10]
	SoftObjectPath TrailEffectClass;//[Offset: 0x238, Size: 0x18]
	class SolarTrailEffect* FallbackTrailEffectClass;//[Offset: 0x250, Size: 0x28]
	class Object* CachedTrailEffectClass;//[Offset: 0x278, Size: 0x8]
	CharacterSkydiveTrailStaticInfoContainer SkydiveTrailStaticInfo;//[Offset: 0x2d0, Size: 0x120]
	PackedSkydiveTrailFrameInfoContainer SkydiveTrailFrameInfo;//[Offset: 0x3f0, Size: 0x120]
	class SkydiveTrailEffect* SkydiveTrailEffectClass;//[Offset: 0x510, Size: 0x8]
	<SolarPlayerState*,CharacterSkydiveTrailData> SkydiveTrailData;//[Offset: 0x518, Size: 0x50]
	SolarPlayerState* LocalPlayerSkydiveTrailProxy;//[Offset: 0x568, Size: 0x8]
	void OnRep_TrailEffectClass();// 0x515f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTrailProxyComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* PlayerBeingTracked;//[Offset: 0x314, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTrailEffect.Actor.Object
	void OnFinished();// 0x515904f39041
	Transform GetTrackingTransform(const SolarCharacter* Character);// 0x515804f39041
	void AttachToCharacter(const SolarCharacter* Character);// 0x515704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterSkydiveTrailStaticInfoContainer.FastArraySerializer
	CharacterSkydiveTrailStaticInfo[] InfoArray;//[Offset: 0x108, Size: 0x10]
	SolarFlyTrail* Owner;//[Offset: 0x118, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterSkydiveTrailStaticInfo.FastArraySerializerItem
	FString CharacterId;//[Offset: 0x10, Size: 0x10]
	SolarPlayerState* PlayerState;//[Offset: 0x20, Size: 0x8]
	FString TrailAssemblingId;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PackedSkydiveTrailFrameInfoContainer.FastArraySerializer
	PackedSkydiveTrailFrameInfo[] InfoArray;//[Offset: 0x108, Size: 0x10]
	SolarFlyTrail* Owner;//[Offset: 0x118, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PackedSkydiveTrailFrameInfo.FastArraySerializerItem
	float Timestamp;//[Offset: 0xc, Size: 0x4]
	SkydiveTrailFrameInfo[] FrameInfos;//[Offset: 0x10, Size: 0x10]
	SolarPlayerState*[] FinishedPlayerStates;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkydiveTrailFrameInfo
	SolarPlayerState* OwnerPlayerState;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize Location;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize Velocity;//[Offset: 0x14, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkydiveTrailEffect.Actor.Object
	SolarFlyTrail* FlyTrailManager;//[Offset: 0x228, Size: 0x8]
	void UpdateTrailEffect(const float CurrentTime);// 0x515e04f39041
	void OnTrailFinish();// 0x515d04f39041
	void InitEffectAppearance(bool IsDefender, bool IsSameTeamWithLocalPlayer);// 0x515c04f39041
	void InitAppearanceByPlayerState(const SolarPlayerState* PlayerState);// 0x515b04f39041
	void AddTrailPoint(float Timestamp, out const Vector Location, out const Vector Velocity);// 0x515a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterSkydiveTrailData
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterDataCollector.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerStatisticsData.Object
	delegate OnPlayerStatDataUpdate;//[Offset: 0x28, Size: 0x10]
	delegate OnIncreaseWeaponKillNum;//[Offset: 0x38, Size: 0x10]
	Vector GetValue_Vector(enum InType);// 0x51d204f39041
	void GetValue_MapKeyWithValueInt(enum InType, out int[] OutValue);// 0x51d104f39041
	void GetValue_MapKeyWithValueFloat(enum InType, out int[] OutValue);// 0x51d004f39041
	int GetValue_IntFromMap(enum InType, int IntKey);// 0x51cf04f39041
	void GetValue_IntArray(enum InType, out int[] OutResult);// 0x51ce04f39041
	int GetValue_Int(enum InType);// 0x51cd04f39041
	float GetValue_FloatFromMap(enum InType, int IntKey, bool Floor);// 0x51cc04f39041
	void GetValue_FloatArray(enum InType, out float[] OutResult);// 0x51cb04f39041
	float GetValue_Float(enum InType, bool Floor);// 0x51ca04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpectateConditions
	bool bCanBeSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bCanBeSpectateByHostilePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanBeSpectateByFriendlyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bCanISpectateBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bCanISpectateHostilePlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float LookAtSelfDeathBoxCountDown;//[Offset: 0x8, Size: 0x4]
	enum[] FindSpectateTargetPolicy;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GiftSenderInfo
	int Gold;//[Offset: 0x0, Size: 0x4]
	int Diamond;//[Offset: 0x4, Size: 0x4]
	FString playerName;//[Offset: 0x8, Size: 0x10]
	FString PlayerId;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InteractiveTaskStatus
	int TaskID;//[Offset: 0x0, Size: 0x4]
	int CurLevel;//[Offset: 0x4, Size: 0x4]
	int ProgressValue;//[Offset: 0x8, Size: 0x4]
	int TargetValue;//[Offset: 0xc, Size: 0x4]
	int Param;//[Offset: 0x10, Size: 0x4]
	bool bAvailableToNxtLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	GiftSenderInfo[] TaskGiftPlayerInfo;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleSpectateInfo
	SolarVehiclePawn* SpectateVehicle;//[Offset: 0x0, Size: 0x8]
	SolarVehicleWeapon* SpectateVehicleWeapon;//[Offset: 0x8, Size: 0x8]
	enum VehicleWeaponScopeType;//[Offset: 0x10, Size: 0x1]
	SolarPlayerWeapon* SpectatePlayerWeapon;//[Offset: 0x14, Size: 0x8]
	int ScopeId;//[Offset: 0x1c, Size: 0x4]
	int[] WeaponIDs;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicateItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]
	int Slot;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicateMaxPileData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int MaxPile;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterRoleAbilityInfo
	bool bHasAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float StartCDTime;//[Offset: 0x4, Size: 0x4]
	float TotalCDTime;//[Offset: 0x8, Size: 0x4]
	int State;//[Offset: 0xc, Size: 0x4]
	bool bOngoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleUpgradeEffectParamData
	enum EffectType;//[Offset: 0x0, Size: 0x1]
	int ParameterSum;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpectateReportInfo
	uint32 RankLevelID;//[Offset: 0x0, Size: 0x4]
	FString TargetUserID;//[Offset: 0x8, Size: 0x10]
	byte TargetType;//[Offset: 0x18, Size: 0x1]
	uint32 SpectateElapsedTime;//[Offset: 0x1c, Size: 0x4]
	byte Type;//[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InteractiveTaskConfig.TableRowBase
	int TaskID;//[Offset: 0x8, Size: 0x4]
	int GiftID;//[Offset: 0xc, Size: 0x4]
	int TaskName;//[Offset: 0x10, Size: 0x4]
	FString Describe;//[Offset: 0x18, Size: 0x10]
	int TaskUpgradeDescribe;//[Offset: 0x28, Size: 0x4]
	SoftObjectPath TaskIcon;//[Offset: 0x30, Size: 0x18]
	enum CurrencyType;//[Offset: 0x48, Size: 0x1]
	int MaxTaskLevel;//[Offset: 0x4c, Size: 0x4]
	int[] TaskTarget;//[Offset: 0x50, Size: 0x10]
	int[] UpgradePrice;//[Offset: 0x60, Size: 0x10]
	int[] TaskReward;//[Offset: 0x70, Size: 0x10]
	enum TaskType;//[Offset: 0x80, Size: 0x1]
	int Param;//[Offset: 0x84, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	SolarGameplayAbilitySet* DefaultAbilitySet;//[Offset: 0x1300, Size: 0x8]
	SkeletalMeshComponent* OptionMeshForRepMontage;//[Offset: 0x13b8, Size: 0x8]
	bool bPendingMontageRepForMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c0, Size: 0x1]
	GameplayAbilityLocalAnimMontageForMesh[] LocalAnimMontageInfoForMeshes;//[Offset: 0x13c8, Size: 0x10]
	GameplayAbilityRepAnimMontageForMesh[] RepAnimMontageInfoForMeshes;//[Offset: 0x13d8, Size: 0x10]
	GameplayAbilitySpecHandle UpgradeAbilityLevelBySpec(GameplayAbilitySpecHandle AbilitySpecHandle, bool bForNextActivate, int LevelUp);// 0x4d8a04f39041
	void UpgradeAbilityLevelByClass(const class GameplayAbility AbilityClass, bool bForNextActivate, int LevelUp);// 0x4d8904f39041
	void UpgradeAbilityLevel(GameplayTagContainer AbilityTags, bool bForNextActivate, int LevelUp);// 0x4d8804f39041
	void ServerCurrentMontageSetPlayRateForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float InPlayRate);// 0x4d8704f39041
	void ServerCurrentMontageSetNextSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x4d8604f39041
	void ServerCurrentMontageJumpToSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, FName SectionName);// 0x4d8504f39041
	void PostDefaultAbilitiesGranted();// 0x4d8404f39041
	void OnSharedCueInstigatorEndPlay(Actor* Actor, byte EndPlayReason);// 0x4d8304f39041
	void OnRep_ReplicatedAnimMontageForMesh();// 0x4d8204f39041
	void OnNotifiedTagChanged(out const GameplayTag Tag, bool bAdded);// 0x4d8104f39041
	void OnInternalMetaAttributeUpdate(SolarMetaAttributeSet* MetaAttributeSet, out GameplayModifierEvaluatedData EvaluatedData, out const GameplayEffectSpec EffectSpec, out MetaAttributeUpdateEvent UpdateEvent);// 0x4d8004f39041
	void NotifySourceMetaAttributeExecution(out const MetaAttributeUpdateEvent UpdateEvent);// 0x4d7f04f39041
	void K2_RemoveGameplayCueLocalShared(Actor* Instigator, const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x4d7e04f39041
	void K2_RemoveGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x4d7d04f39041
	int K2_RemoveActiveEffectsWithTag(GameplayTag GameplayTag);// 0x4d7c04f39041
	void K2_RefreshAbilityActorInfo();// 0x4d7b04f39041
	GameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(const class GameplayAbility AbilityClass, int Level);// 0x4d7a04f39041
	GameplayAbilitySpecHandle K2_GiveAbility(const class GameplayAbility AbilityClass, int Level);// 0x4d7904f39041
	void K2_GetEffectMaxTimeRemainingAndDuration(GameplayTag EffectTag, out float TimeRemaining, out float Duration);// 0x4d7804f39041
	ActiveGameplayEffectHandle K2_GetActiveGameplayEffectHandle(GameplayTag EffectAssetTag);// 0x4d7704f39041
	GameplayEffectContextHandle K2_GetActiveGameplayEffectContext(GameplayTag EffectAssetTag);// 0x4d7604f39041
	AttributeSet* K2_FindOwnedAttributeSetByClass(class AttributeSet Class);// 0x4d7504f39041
	void K2_ExecuteGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x4d7404f39041
	void K2_ClearAbility(out const GameplayAbilitySpecHandle Handle);// 0x4d7304f39041
	void K2_CancelAbilityByTag(GameplayTag AbilityTag);// 0x4d7204f39041
	void K2_AddGameplayCueLocalShared(Actor* Instigator, const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x4d7104f39041
	void K2_AddGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x4d7004f39041
	bool IsNotifiedTagAvailable(out const GameplayTag Tag);// 0x4d6f04f39041
	GameplayAbilitySpecHandle GiveDefaultAbility(const class GameplayAbility AbilityClass);// 0x4d6e04f39041
	ActiveGameplayEffectHandle ChangeActiveEffectRemainTime(ActiveGameplayEffectHandle InEffect, float InValue, byte InOption);// 0x4d6d04f39041
	ActiveGameplayEffectHandle ChangeActiveEffectDuration(ActiveGameplayEffectHandle InEffect, float InDuration, enum InChangeProxy);// 0x4d6c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameplayAbilitySet.DataAsset.Object
	class GameplayAbility[] Abilities;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityLocalAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityLocalAnimMontage LocalMontageInfo;//[Offset: 0x8, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityRepAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityRepAnimMontage RepMontageInfo;//[Offset: 0x8, Size: 0x38]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarMetaAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData Damage;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData ShieldDamage;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MetaAttributeUpdateEvent
	int TypeID;//[Offset: 0x8, Size: 0x4]
	SolarAbilitySystemComponent* TargetASC;//[Offset: 0x10, Size: 0x8]
	SolarMetaAttributeSet* MetaAttributeSet;//[Offset: 0x18, Size: 0x8]
	GameplayAttribute MetaAttribute;//[Offset: 0x20, Size: 0x38]
	float MetaAttributeValue;//[Offset: 0x58, Size: 0x4]
	MetaAttributeProduceEffect[] Effects;//[Offset: 0x60, Size: 0x10]
	MetaAttributeUpdateEvent_Character CharacterEventData;//[Offset: 0x70, Size: 0x3]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MetaAttributeProduceEffect
	SolarAttributeSet* EffectAttributeSet;//[Offset: 0x0, Size: 0x8]
	GameplayAttribute EffectAttribute;//[Offset: 0x8, Size: 0x38]
	float EffectValue;//[Offset: 0x40, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MetaAttributeUpdateEvent_Character
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAnimInstance.AnimInstance.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x268, Size: 0x8]
	byte OwnerRole;//[Offset: 0x270, Size: 0x1]
	FName LeftHandIKSocketName;//[Offset: 0x27c, Size: 0x8]
	FName RightHandWeaponSocketName;//[Offset: 0x284, Size: 0x8]
	Transform LeftHandIKSocket2BoneTrans;//[Offset: 0x290, Size: 0x30]
	Vector LeftHandEffectorLocation;//[Offset: 0x2c0, Size: 0xc]
	Rotator LeftHandEffectorRotation;//[Offset: 0x2cc, Size: 0xc]
	Vector CurrentLeftHandJointLocation;//[Offset: 0x2fc, Size: 0xc]
	Vector RightHandEffectorLocation;//[Offset: 0x308, Size: 0xc]
	Vector RightHandJointLocation;//[Offset: 0x314, Size: 0xc]
	float LeftIKHandWeight;//[Offset: 0x320, Size: 0x4]
	float CurrentReloadTimeRate;//[Offset: 0x324, Size: 0x4]
	float CurrentSwitchWeaponTimeRate;//[Offset: 0x328, Size: 0x4]
	float CurrentBoltTimeRate;//[Offset: 0x32c, Size: 0x4]
	bool IsJog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	float ViewPitch;//[Offset: 0x334, Size: 0x4]
	float ViewYaw;//[Offset: 0x338, Size: 0x4]
	float SimulatedProxyViewSmoothSpeed;//[Offset: 0x33c, Size: 0x4]
	BlendSpace* FireTPPBlendSpace;//[Offset: 0x348, Size: 0x8]
	float FireTPPBlendSpaceX;//[Offset: 0x350, Size: 0x4]
	float FIreTPPBlendSpaceY;//[Offset: 0x354, Size: 0x4]
	float MinSwimSpeed;//[Offset: 0x358, Size: 0x4]
	float Direction;//[Offset: 0x35c, Size: 0x4]
	float Speed;//[Offset: 0x360, Size: 0x4]
	float InputDirection;//[Offset: 0x364, Size: 0x4]
	byte IdleTurnType;//[Offset: 0x368, Size: 0x1]
	float TurnExplicitTime;//[Offset: 0x36c, Size: 0x4]
	float DamageDirection;//[Offset: 0x370, Size: 0x4]
	float DamageReactionAlpha;//[Offset: 0x374, Size: 0x4]
	float DamageNomalizeTime;//[Offset: 0x378, Size: 0x4]
	LeftHandGripConfig CurrentGripData;//[Offset: 0x484, Size: 0x84]
	float Fire2PlayRateStand;//[Offset: 0x58c, Size: 0x4]
	float Fire2PlayRateCrouch;//[Offset: 0x590, Size: 0x4]
	bool bHoldingShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 0x1]
	bool ShieldRechargeIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 0x1]
	float FallingInputScale;//[Offset: 0x5e4, Size: 0x4]
	Vector IKOffsetLeftFootVector;//[Offset: 0x5e8, Size: 0xc]
	Vector IKOffsetRightFootVector;//[Offset: 0x5f4, Size: 0xc]
	Vector JointTargetLeftFootVector;//[Offset: 0x600, Size: 0xc]
	Vector JointTargetRightFootVector;//[Offset: 0x60c, Size: 0xc]
	Rotator LeftFootRotation;//[Offset: 0x618, Size: 0xc]
	Rotator RightFootRotation;//[Offset: 0x624, Size: 0xc]
	Vector HipOffsetVector;//[Offset: 0x630, Size: 0xc]
	float FootIKTraceDistanceRate;//[Offset: 0x63c, Size: 0x4]
	float CrouchFootIKTraceDistanceRate;//[Offset: 0x640, Size: 0x4]
	float FootIKInterpSpeed;//[Offset: 0x644, Size: 0x4]
	FName LeftFootSocket;//[Offset: 0x648, Size: 0x8]
	FName RightFootSocket;//[Offset: 0x650, Size: 0x8]
	bool AnimParam_LeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]
	float LandingBlendWeight;//[Offset: 0x65c, Size: 0x4]
	float DefaultLeftHandWeaponAttachingBlendTime;//[Offset: 0x660, Size: 0x4]
	float DefaultLeftHandWeaponDetachingBlendTime;//[Offset: 0x664, Size: 0x4]
	float CurrentLeftHandWeaponAttachingBlendTime;//[Offset: 0x668, Size: 0x4]
	float CurrentLeftHandWeaponDetachingBlendTime;//[Offset: 0x66c, Size: 0x4]
	float FootIKEnableDelayTime;//[Offset: 0x698, Size: 0x4]
	bool bActiveFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1]
	float FlailRate;//[Offset: 0x6d0, Size: 0x4]
	float ConfigPitchToZeroTime;//[Offset: 0x6d4, Size: 0x4]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeX;//[Offset: 0x6d8, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeY;//[Offset: 0x6e0, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeZ;//[Offset: 0x6e8, Size: 0x8]
	float JetPack2PoseRestoreSmoothSpeed;//[Offset: 0x6f0, Size: 0x4]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeX;//[Offset: 0x6f4, Size: 0x8]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeY;//[Offset: 0x6fc, Size: 0x8]
	bool bNewJet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x712, Size: 0x1]
	bool bIsJetFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x713, Size: 0x1]
	bool bEnableDamageReact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x714, Size: 0x1]
	bool bEnableWeaponAdditiveA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x714, Size: 0x1]
	bool bEnableHandIK;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x714, Size: 0x1]
	bool bEnableFootIK;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x714, Size: 0x1]
	bool bEnableWeaponAdditiveB;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x714, Size: 0x1]
	bool bEnableWeaponJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x714, Size: 0x1]
	byte MaxLODDamageReact;//[Offset: 0x715, Size: 0x1]
	byte MaxLODWeaponAdditiveA;//[Offset: 0x716, Size: 0x1]
	byte MaxLODHandIK;//[Offset: 0x717, Size: 0x1]
	byte MaxLODFootIK;//[Offset: 0x718, Size: 0x1]
	byte MaxLODWeaponAdditiveB;//[Offset: 0x719, Size: 0x1]
	byte MaxLODWeaponJitter;//[Offset: 0x71a, Size: 0x1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71b, Size: 0x1]
	float DeathAnimStartPosition;//[Offset: 0x71c, Size: 0x4]
	<enum,class AnimInstance> SpecAnimBPs;//[Offset: 0x720, Size: 0x50]
	bool bIsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x770, Size: 0x1]
	bool bIsCrouching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x770, Size: 0x1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x770, Size: 0x1]
	bool bIsFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x770, Size: 0x1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x770, Size: 0x1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x770, Size: 0x1]
	bool bIsInhibitSprinting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x770, Size: 0x1]
	bool bIsSixDirRunForward;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x770, Size: 0x1]
	bool bIsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x771, Size: 0x1]
	bool bShouldUpperBodyAdditiveBlend;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x771, Size: 0x1]
	enum CurrentWalkMode;//[Offset: 0x772, Size: 0x1]
	enum LastWalkMode;//[Offset: 0x773, Size: 0x1]
	enum CurrentAirMoveMode;//[Offset: 0x774, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x775, Size: 0x1]
	enum CurrentCruiseState;//[Offset: 0x776, Size: 0x1]
	AnimSequence* CruiseStartSequence;//[Offset: 0x778, Size: 0x8]
	AnimSequence* CruiseLoopSequence;//[Offset: 0x780, Size: 0x8]
	AnimSequence* CruiseEndSequence;//[Offset: 0x788, Size: 0x8]
	float MinSpeedForSkydiveFlyingInputBonus;//[Offset: 0x790, Size: 0x4]
	float MaxSpeedForSkydiveFlyingInputBonus;//[Offset: 0x794, Size: 0x4]
	float InputYThresholdToCalcInputYByCamera;//[Offset: 0x798, Size: 0x4]
	float MinDeltaYawFromCameraToGetMaxInputY;//[Offset: 0x79c, Size: 0x4]
	enum CurrentSkydiveStage;//[Offset: 0x7a0, Size: 0x1]
	float MinWallRunSurfaceAngle;//[Offset: 0x7a4, Size: 0x4]
	float MaxWallRunSurfaceAngle;//[Offset: 0x7a8, Size: 0x4]
	enum WeaponStatus;//[Offset: 0x7b0, Size: 0x1]
	bool bIsBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b1, Size: 0x1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7b1, Size: 0x1]
	bool bIsLeftHandDetaching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7b1, Size: 0x1]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7b1, Size: 0x1]
	enum CurrentSkillAnimType;//[Offset: 0x7b2, Size: 0x1]
	float SkillDistanceBlendRatio;//[Offset: 0x7b4, Size: 0x4]
	void OnMontagePlayEnded(AnimMontage* Montage, bool bInterrupted);// 0x4e7d04f39041
	bool NeedResolveWeaponJitter();// 0x4e7c04f39041
	bool JetPack2IsDashingCompletelyOver();// 0x4e7b04f39041
	bool IsHoldingWeapon();// 0x4e7a04f39041
	bool IsAiming();// 0x4e7904f39041
	float GetWallRunSurfaceAngle();// 0x4e7804f39041
	enum GetWallRunState();// 0x4e7704f39041
	Vector2D GetSkydiveFlyingInput();// 0x4e7604f39041
	int GetOwnerGroupID();// 0x4e7504f39041
	Vector GetJetPackDashAnimationBlend();// 0x4e7404f39041
	Vector GetInputVector();// 0x4e7304f39041
	Vector GetFallingInputVector();// 0x4e7204f39041
	float GenJumpDirection(float InInputDirection);// 0x4e7104f39041
	float GenBackwardDirection(float InInputDirection);// 0x4e7004f39041
	bool CheckNewJetAndReset();// 0x4e6f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LeftHandGripConfig
	Rotator HandL;//[Offset: 0x0, Size: 0xc]
	Rotator Thumbl01;//[Offset: 0xc, Size: 0xc]
	Rotator Thumbl02;//[Offset: 0x18, Size: 0xc]
	Rotator Index01;//[Offset: 0x24, Size: 0xc]
	Rotator Index02;//[Offset: 0x30, Size: 0xc]
	Rotator Middle01;//[Offset: 0x3c, Size: 0xc]
	Rotator Middle02;//[Offset: 0x48, Size: 0xc]
	Rotator Ring01;//[Offset: 0x54, Size: 0xc]
	Rotator Ring02;//[Offset: 0x60, Size: 0xc]
	Rotator Pinky01;//[Offset: 0x6c, Size: 0xc]
	Rotator Pinky02;//[Offset: 0x78, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: JetPackPoseSpeedRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterSoundConfig.DataAsset.Object
	<enum,FString> SoundEventTable;//[Offset: 0x30, Size: 0x50]
	<byte,FName> SurfaceTypeToHitByBulletSoundGroup;//[Offset: 0x80, Size: 0x50]
	Transform DefaultTransform;//[Offset: 0xd0, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPile.SolarMapElementBase.Actor.Object
	StaticMeshComponent* NormalMesh;//[Offset: 0x2b0, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x2b8, Size: 0x8]
	ActorComponent*[] ExtraChargingVFXComps;//[Offset: 0x2c0, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2d0, Size: 0x4]
	enum Channel;//[Offset: 0x2ec, Size: 0x1]
	enum PileType;//[Offset: 0x2ed, Size: 0x1]
	int Zone;//[Offset: 0x2f0, Size: 0x4]
	float MaxEnergy;//[Offset: 0x2f4, Size: 0x4]
	float PowerRecoveryCD;//[Offset: 0x2f8, Size: 0x4]
	float PowerRecoveryFrequency;//[Offset: 0x2fc, Size: 0x4]
	float PowerRecoveryQuantity;//[Offset: 0x300, Size: 0x4]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	bool bCanRecover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 0x1]
	bool bIsActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307, Size: 0x1]
	int Level;//[Offset: 0x308, Size: 0x4]
	bool bIsLosingEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	int OwnerTeam;//[Offset: 0x310, Size: 0x4]
	SolarCharacter* OwnerCharacter;//[Offset: 0x314, Size: 0x8]
	ChargingInfo defaultChargingInfo;//[Offset: 0x320, Size: 0x30]
	ChargingInfo[] ChargingInfoList;//[Offset: 0x350, Size: 0x10]
	float CurrentEnergy;//[Offset: 0x360, Size: 0x4]
	float SphereRadius;//[Offset: 0x368, Size: 0x4]
	TimerHandle RecoveryHandle;//[Offset: 0x370, Size: 0x8]
	TimerHandle ServerChargingTimerHandle;//[Offset: 0x380, Size: 0x8]
	TimerHandle ClientChargingTimerHandle;//[Offset: 0x388, Size: 0x8]
	ParticleSystemComponent*[] ChargeParticleEffects;//[Offset: 0x390, Size: 0x10]
	AkComponent* AkAudioComponent;//[Offset: 0x3a0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x3a8, Size: 0x8]
	bool bEnableHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 0x1]
	float MaxHealth;//[Offset: 0x3b4, Size: 0x4]
	float ReducedHealth;//[Offset: 0x3b8, Size: 0x4]
	float CurrentHealth;//[Offset: 0x3bc, Size: 0x4]
	float TweenTimeSpeed;//[Offset: 0x3c0, Size: 0x4]
	float RestTweenTime;//[Offset: 0x3c4, Size: 0x4]
	float TargetOpacity;//[Offset: 0x3c8, Size: 0x4]
	float CurrentOpacity;//[Offset: 0x3cc, Size: 0x4]
	float OpacityTweenTime;//[Offset: 0x3d0, Size: 0x4]
	MaterialInstanceDynamic* DynamicMatChargingCircle;//[Offset: 0x3d8, Size: 0x8]
	ChargingPilePreset ChargingPilePreset;//[Offset: 0x3e0, Size: 0x150]
	StaticMeshComponent* RangeRingMeshComp;//[Offset: 0x530, Size: 0x8]
	StaticMeshComponent* ChargeCircleMeshComp;//[Offset: 0x538, Size: 0x8]
	bool bCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	void ToggleExtraChargingVFX(bool Toggle);// 0x4fef04f39041
	void SetIsActivated(bool bActivated);// 0x4fee04f39041
	void RemoveChargeParticle(SolarCharacter* InCharacter);// 0x4fed04f39041
	void RemoveAllEffects();// 0x4fec04f39041
	void ReceivePileExpired();// 0x4feb04f39041
	void ReceiveEnergyChanged();// 0x4fea04f39041
	void ReceiveChargingPileInitialize();// 0x4fe904f39041
	void ReceiveCharacterShowEffect(const Actor* Other);// 0x4fe804f39041
	void ReceiveCharacterHideEffect(const Actor* Other);// 0x4fe704f39041
	void PlaySkillStartSound();// 0x4fe604f39041
	void PlaySkillEndSound();// 0x4fe504f39041
	void PlayRecoveryAnim(bool bStart);// 0x4fe404f39041
	void PlayChargingAnimation(bool Reverse);// 0x4fe304f39041
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4fe204f39041
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4fe104f39041
	void OnRep_IsLosingEnergyChanged();// 0x4fe004f39041
	void OnRep_Energy();// 0x4fdf04f39041
	void OnRep_Enable();// 0x4fde04f39041
	void OnRep_CurrentHealth();// 0x4fdd04f39041
	void OnRep_ChargingInfoListChanged();// 0x4fdc04f39041
	void OnRep_CanRecover();// 0x4fdb04f39041
	void OnRep_Broken();// 0x4fda04f39041
	void OnRefreshRangeRing();// 0x4fd904f39041
	void OnRefreshChargeCircle(const bool InCharging);// 0x4fd804f39041
	void OnCharacterBatteryIdChanged(SolarCharacter* InCharacter, float Frequency, float Quantity);// 0x4fd704f39041
	bool IsCharacterInRange(SolarCharacter* InCharacter);// 0x4fd604f39041
	bool IsAnyCharacterInRange();// 0x4fd504f39041
	ChargingInfo GetChargingInfoByCharacter(SolarCharacter* Character);// 0x4fd404f39041
	void GameStatisticsChargingPile(out ChargingInfo ChargingInfo, int pileLevel, Vector Location, float energyUse);// 0x4fd304f39041
	void CreateChargeParticle(SolarCharacter* InCharacter);// 0x4fd204f39041
	void ChangeColor();// 0x4fd104f39041
	bool CanWork();// 0x4fd004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChargingInfo
	SolarCharacter* Ch;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
	float LastChargeTime;//[Offset: 0xc, Size: 0x4]
	bool bShowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float Quantity;//[Offset: 0x14, Size: 0x4]
	float Frequency;//[Offset: 0x18, Size: 0x4]
	enum PileHealingType;//[Offset: 0x1c, Size: 0x1]
	float TotalChargeEnergy;//[Offset: 0x20, Size: 0x4]
	SolarBackpackComponent* BackpackComponent;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBackpackComponent.ActorComponent.Object
	float DeathBoxEnergyRate;//[Offset: 0xb8, Size: 0x4]
	float RebirthEnergyRate;//[Offset: 0xbc, Size: 0x4]
	delegate OnWeaponCreateCompleteDelegate;//[Offset: 0x120, Size: 0x10]
	float InitialSolarCharge;//[Offset: 0x1a8, Size: 0x4]
	float SolarChargeInterval;//[Offset: 0x1ac, Size: 0x4]
	float InitialEnergyLimit;//[Offset: 0x1b0, Size: 0x4]
	float InitialExtraEnergyLimit;//[Offset: 0x1b4, Size: 0x4]
	float InitialExtraEnergyCharge;//[Offset: 0x1b8, Size: 0x4]
	float InitialChargeCD;//[Offset: 0x1bc, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0x1d0, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x1d4, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0x1d8, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0x1dc, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0x1e0, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0x1e4, Size: 0x4]
	float JetPackVerticalDashSpeedScale;//[Offset: 0x278, Size: 0x4]
	float JetPackHorizontalDashSpeedScale;//[Offset: 0x27c, Size: 0x4]
	<int,class GameplayAbility> ItemAbilities;//[Offset: 0x280, Size: 0x50]
	<int,GameplayAbilitySpecHandle> GivenAbilityHandles;//[Offset: 0x2d0, Size: 0x50]
	bool bWeaponPartPickable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	<int,int> defaultDeathBoxEnergyConfig;//[Offset: 0x378, Size: 0x50]
	<int,DateTime> DroppedItemIDMap;//[Offset: 0x3c8, Size: 0x50]
	float DiscardItemDelayNoticeTime;//[Offset: 0x418, Size: 0x4]
	float[] GradeRankProportion;//[Offset: 0x420, Size: 0x10]
	int[] InitialGridNum;//[Offset: 0x430, Size: 0x10]
	int[] CustomMode_Hunt_InitialGridNum;//[Offset: 0x440, Size: 0x10]
	void WeaponCreateCompleteDelegate__DelegateSignature(byte SlotType, SolarPlayerWeapon* WeaponPtr, SolarBackpackComponent* SolarBackpackComponent);// 0x1d7304f39041
	void UpdateCurrentExtraEnergy(float UpdateValue, enum Usage);// 0x1d7204f39041
	void UpdateCurrentEnergy(float UpdateValue, enum Usage);// 0x1d7104f39041
	void UpdateConsumeSlotUI();// 0x1d7004f39041
	bool TryTriggerAbility(const int InItemID);// 0x1d6f04f39041
	void TrySendDropItemTips(const int InDroppedItemID);// 0x1d6e04f39041
	float TakeDeathBoxEnergy();// 0x1d6d04f39041
	void SmoothEnergy(const float Amount);// 0x1d6c04f39041
	void SetMaxPileMap(int ItemID, int MaxNum);// 0x1d6b04f39041
	void SetBoxCharging(bool bSet);// 0x1d6a04f39041
	void SetBackPackGM(enum gmtypy, int ID, int Num, int Slot);// 0x1d6904f39041
	bool ServerUseItem(int ItemID, int Num);// 0x1d6804f39041
	void ServerSetJetPackModule(int NewJetPackModuleID, bool bForVertical);// 0x1d6704f39041
	void ServerSetEnergyState(enum State);// 0x1d6604f39041
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x1d6504f39041
	void ServerRPCUpgradeShield();// 0x1d6404f39041
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x1d6304f39041
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x1d6204f39041
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x1d6104f39041
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x1d6004f39041
	void ServerRPCDisCardWeaponUICall(int Slot);// 0x1d5f04f39041
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x1d5e04f39041
	void ServerRPCDiscardWeapon(const int InSlot);// 0x1d5d04f39041
	void ServerRPCDisCardItemUICall(int ID, int Num);// 0x1d5c04f39041
	void ServerRPCDiscardItem(const int InItemID, const int InItemNum);// 0x1d5b04f39041
	bool ServerDiscardWeapon(const int Slot, const int InTriggerType);// 0x1d5a04f39041
	bool ServerDiscardFromBackpackByType(const enum ItemType, const bool InDropItem, const int InTriggerType);// 0x1d5904f39041
	bool ServerDiscardFromBackpack(const int ItemID, const int Num, const bool InDropItem, const int InTriggerType);// 0x1d5804f39041
	void ServerConsumeExtraEnergy(const float Amount, const enum Usage);// 0x1d5704f39041
	void ServerConsumeEnergy(const float Amount, const enum Usage);// 0x1d5604f39041
	void ServerClearJetModule();// 0x1d5504f39041
	void ServerClearEnergyState(enum State);// 0x1d5304f39041
	void ServerClearAllItems();// 0x1d5204f39041
	void ServerBackpackGM(const enum InGmType, const int InItemID, const int InItemNum, const int InSlot);// 0x1d5004f39041
	bool ServerAddWeaponToWeaponSysByDataCache(const byte SlotType, out const SolarItemData WeaponData, const bool bDestroyPrev, const bool IsAutoPickup, const int InTriggerType, SolarPlayerWeapon* WeaponActorExists);// 0x1d4f04f39041
	int ServerAddToItemMapByIdAndNumForced(const int ItemID, const int Num);// 0x1d4e04f39041
	int ServerAddToItemMap(SolarItemData ItemData);// 0x1d4d04f39041
	void ServerAddToEquipMap(out const SolarItemData ItemData, bool Bydefault, bool InDropItem);// 0x1d4c04f39041
	int ServerAddToBackpackByIdAndNum(const int ItemID, const int Num, const bool Bydefault, const float CurValue, const bool NeedReset, const int UserId, const int TriggerType, const int SourceType);// 0x1d4b04f39041
	int ServerAddToBackpack(out const SolarItemData ItemData, const bool Bydefault, const int TriggerType);// 0x1d4a04f39041
	void ReqUseEnergy(float Amount, enum Usage);// 0x1d4904f39041
	void RequestUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x1d4804f39041
	void RequestUpgradeShield();// 0x1d4704f39041
	void ReqesutPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x1d4604f39041
	void RefreshWeaponPartsInBackPackUI();// 0x1d4504f39041
	void RefreshWeaponInBackPackUIInternal();// 0x1d4404f39041
	void RefreshWeaponInBackPackUI();// 0x1d4304f39041
	void RefreshItemInBackPackUI();// 0x1d4204f39041
	void RefreshEquipInBackPackUI();// 0x1d4104f39041
	void RefreshBackPackUIState();// 0x1d4004f39041
	void PurchaseEShopItemsResponse_Implementation(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x1d3f04f39041
	int PredictEnergy(const float Amount);// 0x1d3e04f39041
	void OnReceiveItemAbilityCoolDown(out const GameplayTag Tags, const bool bAdd);// 0x1d3d04f39041
	bool NetUseEnergy(float InCostEnergy, enum Usage);// 0x1d3c04f39041
	void NetTakeWeaponPartToBagLuaCall(const int Slot, const int WeaponPartType);// 0x1d3b04f39041
	void NetTakeBagPartToWeaponLuaCall(const int Slot, const int WeaponPartType);// 0x1d3a04f39041
	void NetSwitchWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x1d3904f39041
	void NetDiscardWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x1d3804f39041
	bool ModuleOverflow2(int ModuleMax);// 0x1d3704f39041
	bool ModuleOverflow(int ModuleMax);// 0x1d3604f39041
	void LogBackPackItem();// 0x1d3504f39041
	bool IsReviveItemRecommend();// 0x1d3404f39041
	bool IsReviveItemPickable();// 0x1d3304f39041
	bool IsReviveItem(const int InItemID);// 0x1d3204f39041
	bool IsExtraEnergyID(int ID);// 0x1d3104f39041
	bool IsEquippedWeapon(const int InThisID);// 0x1d3004f39041
	bool IsEquippedOrHasBetterPart(const int PartType, const int Level);// 0x1d2f04f39041
	bool IsEnergyID(int ID);// 0x1d2e04f39041
	int IsBetterWeaponThanEquiped(out const SolarItemData InItemData, const int InWeaponLevel, const int InWeaponExp);// 0x1d2d04f39041
	bool IsBetterWeaponForBag(out const SolarItemData InItemData, int InWeaponLevel, int InWeaponExp);// 0x1d2c04f39041
	bool IsBetterScopeForBag(const int PartType, const int Level);// 0x1d2b04f39041
	bool IsBetterPartForBag(const int PartType, const int Level);// 0x1d2a04f39041
	void InitDefaultItem(int ItemID, int Num);// 0x1d2904f39041
	void InitDeathBoxEnergyRate();// 0x1d2804f39041
	bool HasEmptyWeaponSlot();// 0x1d2704f39041
	bool GetWeaponSlotEmpty(int Slot);// 0x1d2604f39041
	bool GetWeaponPartInBagClient(int TargetPartType, out int OutPartLevel, out int OutItemID);// 0x1d2504f39041
	SolarItemData GetWeaponItemDataBySlot(int Slot);// 0x1d2404f39041
	bool GetWeaponDataBySolt(int Slot, out SolarItemData ItemData);// 0x1d2304f39041
	float GetTotalEnergy();// 0x1d2204f39041
	float GetQuantityFrom(enum Usage);// 0x1d2104f39041
	SolarItemData GetNewItemData(int ItemID, int Num);// 0x1d2004f39041
	float GetMaxExtraEnergy();// 0x1d1f04f39041
	float GetMaxEnergy();// 0x1d1e04f39041
	float GetMaxDeathBoxEnergyFromConfig();// 0x1d1d04f39041
	int GetItemNumById(int ItemID);// 0x1d1c04f39041
	int GetItemMaxPile(int ItemID);// 0x1d1b04f39041
	bool GetItemDataByType(enum ItemType, out SolarItemData ItemData);// 0x1d1a04f39041
	bool GetItemDataById(int ItemID, out SolarItemData ItemData);// 0x1d1904f39041
	float GetFrequencyFrom(enum Usage);// 0x1d1804f39041
	SolarItemData GetEquipItemDataByType(enum ItemType);// 0x1d1704f39041
	int GetEquipIdByType(enum ItemType);// 0x1d1604f39041
	float GetCurrExtraEnergy();// 0x1d1504f39041
	SolarItemData GetCurrentWeaponItemData();// 0x1d1404f39041
	bool GetCurrentWeaponIsOverloading();// 0x1d1304f39041
	void GetCurrentEquipItems(out int[] OutArray);// 0x1d1204f39041
	float GetCurrEnergy();// 0x1d1104f39041
	SolarCharacter* GetCharacterOwner();// 0x1d1004f39041
	byte GetBestSuitSlotForCandidateWeapon(out const SolarItemData WeaponData, const bool IsAutoPickup, const byte PreferSlot);// 0x1d0e04f39041
	bool GetAnyScopeInBagClient(out int OutPartType, out int OutPartLevel, out int OutItemID);// 0x1d0d04f39041
	float GetAbilityRemainingCD(const int InItemID);// 0x1d0c04f39041
	float GetAbilityDuration(const int InItemID);// 0x1d0b04f39041
	void GameStatistics_ItemUseCount(out const SolarItemData InItemData);// 0x1d0a04f39041
	void ExecuteGM(FString InStrGM);// 0x1d0904f39041
	void EquipModuleByID(int ModuleID);// 0x1d0804f39041
	int EquipModule(const int ID, const float ModuleMax);// 0x1d0704f39041
	void EquipBatteryByID(int BatteryID);// 0x1d0604f39041
	int EquipBattery(const int ID, const float BatteryMax, const float Charge, const float CD);// 0x1d0504f39041
	void DiscardItemAndResetCharacterData(out const SolarItemData DiscardItem, const bool DiscardDataOnly);// 0x1d0404f39041
	void DiscardItem(SolarItemData DiscardItem);// 0x1d0004f39041
	void DelayCheckClearAbility(const int InItemID);// 0x1cff04f39041
	void CommitEnergy(const int ID);// 0x1cfe04f39041
	bool ClearBackpackItemByID(const int InItemID);// 0x1cfd04f39041
	void CheckToGiveAbility(const int InItemID);// 0x1cfc04f39041
	void CheckToClearAbility(const int InItemID);// 0x1cfb04f39041
	bool CheckIsRecWeaponParts(const int ItemID);// 0x1cfa04f39041
	bool CheckIsEquippedDifferentScope(const int PartID);// 0x1cf904f39041
	bool CheckCanAutoPickupWeaponPart(const int ItemID);// 0x1cf804f39041
	float ChargeMain(const float Amount, enum Usage);// 0x1cf704f39041
	float ChargeExtra(const float Amount, enum Usage);// 0x1cf504f39041
	void CancelEnergy(const int ID);// 0x1cf404f39041
	bool BatteryOverflow(int BatteryMax);// 0x1cf304f39041
	enum AddBackpackItemByID(const int InItemID, const int InItemNum, const bool InDropItem);// 0x1cf104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChargingPilePreset
	SoftObjectPath NormalMeshPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath BrokenMeshPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath BrokenMatPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath RangeRingPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath RangeRingMatPath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath ChargeCirclePath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath ChargeCircleMatPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath ChargeParticleEffectPath;//[Offset: 0xa8, Size: 0x18]
	SoftObjectPath OutlineMatPath;//[Offset: 0xc0, Size: 0x18]
	Transform RangeRingTrans;//[Offset: 0xe0, Size: 0x30]
	Transform ChargeCircleTrans;//[Offset: 0x110, Size: 0x30]
	Vector BeamStartPos;//[Offset: 0x140, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarDestructibleActor.StaticMeshActor.Actor.Object
	byte[] OnHitIgnoreChannels;//[Offset: 0x238, Size: 0x10]
	float AddForceCoefficient;//[Offset: 0x248, Size: 0x4]
	float BrokenDestroyTime;//[Offset: 0x24c, Size: 0x4]
	bool bChildDetachOnBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	FString BrokenSoundName;//[Offset: 0x258, Size: 0x10]
	Vector BrokenSoundLocationOffset;//[Offset: 0x268, Size: 0xc]
	void OnDestructibleActorHit(Actor* SelfActor, Actor* OtherActor, out const HitResult Hit, float SpeedDifference);// 0x50d904f39041
	void OnClientBrokenEffect();// 0x50d804f39041
	void OnBroken(SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x50d704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x228, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x231, Size: 0x1]
	void SetMobility(byte InMobility);// 0x4e9304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterTagListenerForOrnamentComp
	<OrnamentCompAndVisibilityConfigPair> OrnamentCompPairs;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OrnamentCompAndVisibilityConfigPair
	SceneComponent* OrnamentComp;//[Offset: 0x0, Size: 0x8]
	OrnamentComponentVisibilityConfig* VisibilityConfig;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OrnamentComponentVisibilityConfig.DataAsset.Object
	GameplayTagRequirements VisibleTagRequirements;//[Offset: 0x30, Size: 0x50]
	GameplayTag VisibilityFlagTag;//[Offset: 0x80, Size: 0x8]
	GameplayTagRequirements GetVisibleTagRequirements();// 0x4b3504f39041
	GameplayTag GetVisibilityFlagTag();// 0x4b3404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OrnamentMontageInfo
	AnimMontage* ActiveMontage;//[Offset: 0x0, Size: 0x8]
	GameplayTag OrnamentTag;//[Offset: 0x8, Size: 0x8]
	bool bForcePlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBackpackActor.Actor.Object
	SceneComponent* BackpackRoot;//[Offset: 0x228, Size: 0x8]
	BackpackVertAnimMeshComponent* BackpackMesh;//[Offset: 0x230, Size: 0x8]
	SolarCharacter* BackPackActorOwner;//[Offset: 0x238, Size: 0x8]
	SolarBackpackSFX*[] BackpackSFX;//[Offset: 0x240, Size: 0x10]
	SolarBackpackSFX* BackpackOffgasSFX;//[Offset: 0x250, Size: 0x8]
	bool bEnableMeshEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1]
	class SolarBackpackSFX* TrailClass;//[Offset: 0x270, Size: 0x8]
	class SolarBackpackSFX* OffgasClass;//[Offset: 0x278, Size: 0x8]
	<ParticleSystemComponent*> ListenSet;//[Offset: 0x280, Size: 0x50]
	FString AssemblingId;//[Offset: 0x2d8, Size: 0x10]
	FName KnapsackFlySoundName;//[Offset: 0x2e8, Size: 0x8]
	FName StartKnapsackLandingSoundName;//[Offset: 0x2f0, Size: 0x8]
	FName StopKnapsackLandingSoundName;//[Offset: 0x2f8, Size: 0x8]
	FName StartWallRunSoundName;//[Offset: 0x300, Size: 0x8]
	FName StopWallRunSoundName;//[Offset: 0x308, Size: 0x8]
	FName PrimaryWeaponAttachSocketName;//[Offset: 0x310, Size: 0x8]
	FName SecondaryWeaponAttachSocketName;//[Offset: 0x318, Size: 0x8]
	void SetBackpackVisibilityByFlag(bool bNewVisibility, int Flag);// 0x4ea904f39041
	void RefreshActorEffect();// 0x4ea804f39041
	void OnMeshEffectFactorChange();// 0x4ea704f39041
	void OnChildPSCompPreActive(ParticleSystemComponent* PSComponent);// 0x4ea604f39041
	void OnChildPSCompFinish(ParticleSystemComponent* PSComponent);// 0x4ea504f39041
	bool IsFly();// 0x4ea404f39041
	bool IsCharging();// 0x4ea304f39041
	bool HasEnergy();// 0x4ea204f39041
	float GetBackpackOriginScale();// 0x4ea104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BackpackVertAnimMeshComponent.VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VertexAnimInfo DefaultAnimInfo;//[Offset: 0x628, Size: 0x10]
	<byte,VertexAnimInfo> BackPackAnimInfoMap;//[Offset: 0x638, Size: 0x50]
	SolarCharacter* SolarCharacter;//[Offset: 0x688, Size: 0x8]
	SolarBackpackActor* BackPackActor;//[Offset: 0x690, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void PlayInfo(out const VertexAnimInfo InAnimInfo);// 0x44fd04f39041
	void Play(int InStartFrame, int InEndFrame, float InLength, bool InLoop);// 0x44fc04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VertexAnimInfo
	int StartFrame;//[Offset: 0x0, Size: 0x4]
	int EndFrame;//[Offset: 0x4, Size: 0x4]
	float Length;//[Offset: 0x8, Size: 0x4]
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBackpackSFX.Actor.Object
	void OnPropellingModeChanged(enum PropellingMode);// 0x4eb504f39041
	ParticleSystemComponent* GetTrailEffectComponent();// 0x4eb404f39041
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal);// 0x4eb304f39041
	void BackpackSFXEnd();// 0x4eb204f39041
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0x4eb104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponIgnoreScopeLists
	enum[] Weapon1IgnoreList;//[Offset: 0x0, Size: 0x10]
	enum[] Weapon2IgnoreList;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BackpackJetPrepelInfo
	bool IsPropelling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int PropellingCounter;//[Offset: 0x4, Size: 0x4]
	byte JetType;//[Offset: 0x8, Size: 0x1]
	bool bCheckGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterOperationEvent
	enum Name;//[Offset: 0x0, Size: 0x1]
	Object* Target;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHitTraceComponent.ActorComponent.Object
	SolarCharacter* CharacterOwner;//[Offset: 0xc0, Size: 0x8]
	SolarHitTraceActor*[] CreatedHitTraceActors;//[Offset: 0xc8, Size: 0x10]
	void OnHitTraceActorDestroyed(Actor* Actor);// 0x526604f39041
	void OnCharacterTakeDamage(out const HitTraceInfo HitTraceInfo);// 0x526504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHitTraceActor.Actor.Object
	HitTraceInfo HitTraceInfo;//[Offset: 0x228, Size: 0x28]
	float RadiusValue;//[Offset: 0x250, Size: 0x4]
	float HeightValue;//[Offset: 0x254, Size: 0x4]
	float RadiusValueWithCameraSphere;//[Offset: 0x258, Size: 0x4]
	float DistanceFromCamera;//[Offset: 0x25c, Size: 0x4]
	float RestrictedZoneRadius;//[Offset: 0x260, Size: 0x4]
	SolarCharacter* CharacterOwner;//[Offset: 0x268, Size: 0x8]
	CurveFloat* HitDistanceOffsetCurve;//[Offset: 0x270, Size: 0x8]
	CurveFloat* HitPitchVerticalValueCurve;//[Offset: 0x278, Size: 0x8]
	CurveFloat* HitPitchHorizontalValueCurve;//[Offset: 0x280, Size: 0x8]
	void UpdateTraceActor();// 0x526404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HitTraceInfo
	Actor* CausingActor;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantizeNormal TraceDirection;//[Offset: 0x8, Size: 0xc]
	Vector DamageCauserLocation;//[Offset: 0x14, Size: 0xc]
	float Damage;//[Offset: 0x20, Size: 0x4]
	enum WeaponType;//[Offset: 0x24, Size: 0x1]
	bool bIsVehicleHitTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool IsBump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeamRescueComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb8, Size: 0x8]
	float TempReqTime;//[Offset: 0xd4, Size: 0x4]
	float RequestTimeout;//[Offset: 0xd8, Size: 0x4]
	bool bSendRequest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	bool bLastRescueBtnVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]
	SolarCharacter* ClosestTarget;//[Offset: 0xe0, Size: 0x8]
	SolarCharacter*[] NearByDeathVergeTeamMates;//[Offset: 0xf0, Size: 0x10]
	void TryRescueClosestTeammateLuaCall();// 0x5e0b04f39041
	void TryRescueClosestTeammate();// 0x5e0a04f39041
	void ShowTeamRescueToUI(bool IsShow);// 0x5e0904f39041
	void SetRescueBtnVisibility(bool bIsVisible);// 0x5e0804f39041
	void ReqStartTeamRescue(SolarCharacter* TargetCharacter);// 0x5e0704f39041
	void ReqCancelTeamRescure();// 0x5e0604f39041
	void OnRescueStateChangeInternal();// 0x5e0504f39041
	void OnRescueStateChange();// 0x5e0404f39041
	void DetectRescueTeammate(float DeltaTime);// 0x5e0304f39041
	bool CanRescue(SolarCharacter* Player, const bool bStart);// 0x5e0204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUAVRescue.SolarUAV.SummonItemBase.Pawn.Actor.Object
	enum NewState;//[Offset: 0x549, Size: 0x1]
	GameplayTagContainer HideIfCharacterOwnTags;//[Offset: 0x550, Size: 0x20]
	AnimationAsset* SuspendAnim_Active_NotWork;//[Offset: 0x570, Size: 0x8]
	AnimationAsset* SuspendAnim_Active_Work;//[Offset: 0x578, Size: 0x8]
	AnimationAsset* SuspendAnim_Deactive;//[Offset: 0x580, Size: 0x8]
	AnimationAsset* ActiveAnim;//[Offset: 0x588, Size: 0x8]
	AnimationAsset* DeactiveAnim;//[Offset: 0x590, Size: 0x8]
	AnimationAsset* BeginWorkAnim;//[Offset: 0x598, Size: 0x8]
	AnimationAsset* EndWorkAnim;//[Offset: 0x5a0, Size: 0x8]
	AnimationAsset* ExplodeAnim;//[Offset: 0x5a8, Size: 0x8]
	ParticleSystem* ActiveEffect;//[Offset: 0x5b0, Size: 0x8]
	ParticleSystem* AppearBeginEffect;//[Offset: 0x5b8, Size: 0x8]
	FName AppearBeginEffectSocket;//[Offset: 0x5c0, Size: 0x8]
	ParticleSystem* JetEffect;//[Offset: 0x5c8, Size: 0x8]
	FName JetEffectSocket;//[Offset: 0x5d0, Size: 0x8]
	Transform JetEffectTrans;//[Offset: 0x5e0, Size: 0x30]
	ParticleSystem* ActiveLoopEffect;//[Offset: 0x610, Size: 0x8]
	ParticleSystem* ChaActiveEffect;//[Offset: 0x618, Size: 0x8]
	ParticleSystem* ExplodeEffect;//[Offset: 0x620, Size: 0x8]
	ParticleSystem* DeathVergeEffect;//[Offset: 0x628, Size: 0x8]
	FName ChaActiveEffectSocket;//[Offset: 0x630, Size: 0x8]
	float AppearEffectLength;//[Offset: 0x638, Size: 0x4]
	MaterialInstance* MatAppearing;//[Offset: 0x640, Size: 0x8]
	MatAppearingData[] MatAppearingData;//[Offset: 0x648, Size: 0x10]
	MaterialInstance* MatAppearEndBody;//[Offset: 0x658, Size: 0x8]
	MaterialInstance* MatAppearEndEye;//[Offset: 0x660, Size: 0x8]
	FString BeginSound;//[Offset: 0x668, Size: 0x10]
	FString EndSound;//[Offset: 0x678, Size: 0x10]
	FString ActiveChaSound;//[Offset: 0x688, Size: 0x10]
	FString ActiveAnimSound;//[Offset: 0x698, Size: 0x10]
	FString BeginActiveLoopSound;//[Offset: 0x6a8, Size: 0x10]
	FString EndActiveLoopSound;//[Offset: 0x6b8, Size: 0x10]
	FString DeactiveAnimSound;//[Offset: 0x6c8, Size: 0x10]
	FString ExplodeSound;//[Offset: 0x6d8, Size: 0x10]
	FString BeginDeathVergeLoopSound;//[Offset: 0x6e8, Size: 0x10]
	FString EndDeathVergeLoopSound;//[Offset: 0x6f8, Size: 0x10]
	float ChaSpeedThreshold;//[Offset: 0x708, Size: 0x4]
	float RotateSpeed;//[Offset: 0x70c, Size: 0x4]
	float YawOffset;//[Offset: 0x710, Size: 0x4]
	CurveFloat* ActivatingScaleCurve;//[Offset: 0x718, Size: 0x8]
	CurveFloat* DeactivatingScaleCurve;//[Offset: 0x720, Size: 0x8]
	CurveFloat* TargetSpeedByDistance;//[Offset: 0x728, Size: 0x8]
	float Acceleration;//[Offset: 0x730, Size: 0x4]
	float MaxDistance;//[Offset: 0x734, Size: 0x4]
	Vector DefaultLocationOffset;//[Offset: 0x744, Size: 0xc]
	Vector CrouchLocationOffset;//[Offset: 0x750, Size: 0xc]
	float TargetLocationOffsetSpeed;//[Offset: 0x75c, Size: 0x4]
	float ActiveDuration;//[Offset: 0x784, Size: 0x4]
	float ActiveEffectLength;//[Offset: 0x788, Size: 0x4]
	float DeathVergeHealthThreshold;//[Offset: 0x78c, Size: 0x4]
	SoftObjectPath UAVIcon;//[Offset: 0x790, Size: 0x18]
	ParticleSystemComponent* DeathVergeEffectHandle;//[Offset: 0x7b8, Size: 0x8]
	ParticleSystemComponent* ActiveLoopEffectHandle;//[Offset: 0x7c0, Size: 0x8]
	bool bFollowCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1]
	bool bAppearEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cb, Size: 0x1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 0x1]
	bool bPermanent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x831, Size: 0x1]
	bool bExplodeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x832, Size: 0x1]
	float HealTickInterval;//[Offset: 0x858, Size: 0x4]
	float HealFirstTimeDelay;//[Offset: 0x85c, Size: 0x4]
	float HealHealthAmount;//[Offset: 0x860, Size: 0x4]
	float HealShieldAmount;//[Offset: 0x864, Size: 0x4]
	ParticleSystem* HealLineEffect;//[Offset: 0x868, Size: 0x8]
	FName HealMeshSocket;//[Offset: 0x870, Size: 0x8]
	FString BeginHealSound;//[Offset: 0x878, Size: 0x10]
	FString BeginHealLoopSound;//[Offset: 0x888, Size: 0x10]
	FString EndHealSound;//[Offset: 0x898, Size: 0x10]
	FString EndHealLoopSound;//[Offset: 0x8a8, Size: 0x10]
	FString BeginHealHPLoopSound;//[Offset: 0x8b8, Size: 0x10]
	FString EndHealHPLoopSound;//[Offset: 0x8c8, Size: 0x10]
	FString BeginHealShieldLoopSound;//[Offset: 0x8d8, Size: 0x10]
	FString EndHealShieldLoopSound;//[Offset: 0x8e8, Size: 0x10]
	ParticleSystemComponent* HealLineEffectHandle;//[Offset: 0x8f8, Size: 0x8]
	ParticleSystem* RescueEffect;//[Offset: 0x908, Size: 0x8]
	ParticleSystem* RescueEffect_Enermy;//[Offset: 0x910, Size: 0x8]
	Transform RescueEffectTransform;//[Offset: 0x920, Size: 0x30]
	FName RescueMeshSocket;//[Offset: 0x950, Size: 0x8]
	float RescueTime;//[Offset: 0x958, Size: 0x4]
	bool bCheckRescueBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 0x1]
	float CheckRescueBlockInteval;//[Offset: 0x960, Size: 0x4]
	FString BeginRescueLoopSound;//[Offset: 0x968, Size: 0x10]
	FString EndRescueLoopSound;//[Offset: 0x978, Size: 0x10]
	FString CompleteRescueSound;//[Offset: 0x988, Size: 0x10]
	ParticleSystemComponent* RescueEffectHandle;//[Offset: 0x998, Size: 0x8]
	MaterialInstanceDynamic* MatInstanceAppearingBody;//[Offset: 0x9b0, Size: 0x8]
	MaterialInstanceDynamic* MatInstanceAppearingEye;//[Offset: 0x9b8, Size: 0x8]
	bool bNavigateToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]
	float RecordInterval;//[Offset: 0x9c4, Size: 0x4]
	float NavigateInterval;//[Offset: 0x9c8, Size: 0x4]
	float BeginNavigateDistance;//[Offset: 0x9cc, Size: 0x4]
	float EndNavigateDistance;//[Offset: 0x9d0, Size: 0x4]
	class GameplayEffect* UAVHealBuffGameplayEffect;//[Offset: 0xa00, Size: 0x8]
	class GameplayEffect* UAVRescueGameplayEffect;//[Offset: 0xa08, Size: 0x8]
	void TickRescue(float DeltaTime);// 0x5ed704f39041
	void TickNavigate(float DeltaTime);// 0x5ed604f39041
	void TickHeal(float DeltaTime);// 0x5ed504f39041
	void ServerSetRescueBlocked(bool bBlocked);// 0x5ed404f39041
	void OnRescueComplete();// 0x5ed304f39041
	void OnRep_NewState();// 0x5ed204f39041
	void OnRep_Active();// 0x5ed104f39041
	void OnCheckUAVHide(const GameplayTag Tag, int NewCount);// 0x5ed004f39041
	void OnCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x5ecf04f39041
	void OnCharacterDeathVergeStatusTag(const GameplayTag Tag, int NewCount);// 0x5ece04f39041
	void OnCharacterDeathStatusTag(const GameplayTag Tag, int NewCount);// 0x5ecd04f39041
	float GetRescueTime();// 0x5ecc04f39041
	void CompleteRescueImmediate();// 0x5ecb04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUAV.SummonItemBase.Pawn.Actor.Object
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad, Size: 0x1]
	float DebugLineThickness;//[Offset: 0x4b0, Size: 0x4]
	SkeletalMeshComponent* Mesh;//[Offset: 0x4b8, Size: 0x8]
	FName AttachCharacterSocketName;//[Offset: 0x4c0, Size: 0x8]
	AnimationAsset* AppearAnim;//[Offset: 0x4c8, Size: 0x8]
	float AppearAnimLength;//[Offset: 0x4d0, Size: 0x4]
	AnimationAsset* DisappearAnim;//[Offset: 0x4d8, Size: 0x8]
	float DisppearAnimLength;//[Offset: 0x4e0, Size: 0x4]
	bool bProbeCollisionConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	float ProbeCollisionInterval;//[Offset: 0x4f4, Size: 0x4]
	float ProbeCollisionRadius;//[Offset: 0x4f8, Size: 0x4]
	float AvoidCollisionMaxHeight;//[Offset: 0x4fc, Size: 0x4]
	float AvoidCollisionOverTime;//[Offset: 0x500, Size: 0x4]
	float AvoidCollisionCDTime;//[Offset: 0x504, Size: 0x4]
	void UAVDestroy();// 0x5eca04f39041
	void OnCharacterInVehicleTag(const GameplayTag Tag, int NewCount);// 0x5ec904f39041
	void Disappear();// 0x5ec804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SummonItemBase.Pawn.Actor.Object
	delegate OnDeath;//[Offset: 0x2b8, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0x2c0, Size: 0x8]
	StaticMeshComponent* HPBar;//[Offset: 0x2c8, Size: 0x8]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2d0, Size: 0x4]
	SolarCharacter* SourceSummoner;//[Offset: 0x2d4, Size: 0x8]
	SolarPlayerState* SourceSummonerPS;//[Offset: 0x2dc, Size: 0x8]
	enum DeathReason;//[Offset: 0x2e4, Size: 0x1]
	float CurrentHealth;//[Offset: 0x2e8, Size: 0x4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	HitSoundReplicationData HitSoundData;//[Offset: 0x2f0, Size: 0x80]
	float FunctionalTimerMax;//[Offset: 0x374, Size: 0x4]
	float FunctionalTimerDelta;//[Offset: 0x378, Size: 0x4]
	Vector CenterOffset;//[Offset: 0x394, Size: 0xc]
	GameplayEffectSpecHandle GEToSelfHandle;//[Offset: 0x3a0, Size: 0x10]
	GameplayEffectSpecHandle GEToTargetHandle;//[Offset: 0x3b0, Size: 0x10]
	enum SummonItemType;//[Offset: 0x3c0, Size: 0x1]
	float MaxHealth;//[Offset: 0x3c4, Size: 0x4]
	float ReducedHealth;//[Offset: 0x3c8, Size: 0x4]
	float DelayDestroyTime;//[Offset: 0x3cc, Size: 0x4]
	bool bTeammateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	bool bSuicideWithSummonerChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 0x1]
	float TimeDuration;//[Offset: 0x3d4, Size: 0x4]
	bool bOnlyOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	bool bEnableHPBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 0x1]
	bool bHPDefaultVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da, Size: 0x1]
	FName HPBarTagName;//[Offset: 0x3dc, Size: 0x8]
	FName HPBarPercentName;//[Offset: 0x3e4, Size: 0x8]
	FName HPBarColorName;//[Offset: 0x3ec, Size: 0x8]
	LinearColor HPBarColorTeammate;//[Offset: 0x3f4, Size: 0x10]
	LinearColor HPBarColorEnemy;//[Offset: 0x404, Size: 0x10]
	int HPBarMaterialIndex;//[Offset: 0x414, Size: 0x4]
	Vector CenterLocationOffset;//[Offset: 0x418, Size: 0xc]
	float DestroyDeathWithinSeconds;//[Offset: 0x424, Size: 0x4]
	bool bSupportAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	WeaponAssistAimTargetConfig AssistAimTargetConfig;//[Offset: 0x430, Size: 0x48]
	bool bCanAffectedByEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	bool bShowDamageText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	SolarSpawnAdjustConfig* SpawnAdjustConfig;//[Offset: 0x480, Size: 0x8]
	bool bAddCoreToActorCollisionIgnoreSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	bool bDestroyWhenHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1]
	bool bEnableHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48a, Size: 0x1]
	FName HitSoundSubTableKey;//[Offset: 0x48c, Size: 0x8]
	FName HitSoundSubTableKey2;//[Offset: 0x494, Size: 0x8]
	SolarLandscapeListenerConfig LandscapeListenerConfig;//[Offset: 0x49c, Size: 0x10]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 0x1]
	void SwitchFunctionalTimer(bool InbEnable, float InMaxTime);// 0x4d5704f39041
	void Suicide();// 0x4d5604f39041
	bool RequestPlaySoundByTeam(out const <enum,SolarSummonSoundData> InSoundData);// 0x4d5504f39041
	bool RequestPlaySound(out const FString[] InSoundData);// 0x4d5404f39041
	void ReceiveUpdateHealthEvent(float InCurrentHealthRate);// 0x4d5304f39041
	void ReceiveUpdateFunctionalTimerEvent(float InTimerRate);// 0x4d5204f39041
	void ReceiveDeathEvent(enum InDeathReason);// 0x4d5104f39041
	void OnSourceCharacterChange();// 0x4d5004f39041
	void OnRep_HitSoundData(out const HitSoundReplicationData LastData);// 0x4d4f04f39041
	void OnRep_Dead();// 0x4d4e04f39041
	void OnRep_CurrentHealth();// 0x4d4d04f39041
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x4d4c04f39041
	void K2_PlaySoundGroup(FName InSoundGroupName, SoundGroupPlayContextByCharacter InContext);// 0x4d4b04f39041
	bool IsDead();// 0x4d4a04f39041
	SolarCharacter* GetSourceSummoner();// 0x4d4904f39041
	float GetMaxHealth();// 0x4d4804f39041
	float GetCurrentHealth();// 0x4d4704f39041
	class Object GetClassType();// 0x4d4604f39041
	void BindLocalPlayerSpectateDelegates(SolarSpectateInfo* InSpectateInfo);// 0x4d4504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSummonSoundData
	FString[] SoundNames;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MatAppearingData
	CurveFloat* MatCurve;//[Offset: 0x0, Size: 0x8]
	FName MatParam;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAssistAimTargetConfig
	Vector2D BaseFollowTriggerExtent;//[Offset: 0x0, Size: 0x8]
	Vector2D BaseFollowStopExtent;//[Offset: 0x8, Size: 0x8]
	BaseFollowExtentByTag[] BaseFollowExtentByTags;//[Offset: 0x10, Size: 0x10]
	Vector2D TargetVelocityFollowTriggerExtent;//[Offset: 0x20, Size: 0x8]
	Vector2D LockAimingExtent;//[Offset: 0x28, Size: 0x8]
	Vector2D GlobalSensitivityScaleTriggerExtent;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BaseFollowExtentByTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	Vector2D BaseFollowTriggerExtent;//[Offset: 0x50, Size: 0x8]
	Vector2D BaseFollowStopExtent;//[Offset: 0x58, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSpawnAdjustConfig.DataAsset.Object
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	byte[] AdjustBlockTypes;//[Offset: 0x38, Size: 0x10]
	Vector AdjustDetectBoxExtent;//[Offset: 0x48, Size: 0xc]
	Vector AdjustDetectBoxOffset;//[Offset: 0x54, Size: 0xc]
	bool bUseActorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float AdjustVerticalDist;//[Offset: 0x64, Size: 0x4]
	float AdjustHorizonDist;//[Offset: 0x68, Size: 0x4]
	float AdjustFindStep;//[Offset: 0x6c, Size: 0x4]
	float TraceUpLength;//[Offset: 0x70, Size: 0x4]
	float TraceDownLength;//[Offset: 0x74, Size: 0x4]
	float TraceZOffset;//[Offset: 0x78, Size: 0x4]
	byte[] AdjustPlaceTypes;//[Offset: 0x80, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb0, Size: 0x8]
	void UseItemRequestLuaCall(int ItemID, int Num);// 0x53a804f39041
	void OnPlayerBackpackItemUpdate();// 0x53a704f39041
	bool CanUseMedicine();// 0x53a604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPickupComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* OwnerChar;//[Offset: 0x560, Size: 0x8]
	float PickUpHighlyThresholdFactor;//[Offset: 0x570, Size: 0x4]
	bool bWantedClearItemData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 0x1]
	<enum,SolarPickupHandlerBase*> PickupHandlerMap;//[Offset: 0x588, Size: 0x50]
	SolarPickupHandlerBase* NormalPickupHandler;//[Offset: 0x5d8, Size: 0x8]
	bool GlobalPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]
	AirDropTreasureBox* TagetAirDropBox;//[Offset: 0x5e4, Size: 0x8]
	ActorArrayMap NormalPickupItems;//[Offset: 0x5f8, Size: 0x50]
	Actor*[] ProccessedList;//[Offset: 0x648, Size: 0x10]
	Actor*[] SortedPickupActors;//[Offset: 0x658, Size: 0x10]
	bool bPickupListVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 0x1]
	bool bPickupListCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66a, Size: 0x1]
	UIManager* UIManager;//[Offset: 0x670, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x678, Size: 0x8]
	bool GlobalAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d2, Size: 0x1]
	float UnAutoPickupItemTime;//[Offset: 0x6d4, Size: 0x4]
	float AutoPickupTime;//[Offset: 0x6d8, Size: 0x4]
	bool StopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	bool bReqPickItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 0x1]
	bool bPickupCheckBoxOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]
	TimerHandle AutoPickupTimer;//[Offset: 0x708, Size: 0x8]
	delegate OnItemDataSet;//[Offset: 0x748, Size: 0x10]
	delegate UpdateCheckBoxesVisibility;//[Offset: 0x758, Size: 0x10]
	delegate OnUpdateCheckBoxesHighLight;//[Offset: 0x768, Size: 0x10]
	delegate OnUpdateCheckBoxesStates;//[Offset: 0x778, Size: 0x10]
	delegate OnPickupListClear;//[Offset: 0x788, Size: 0x10]
	delegate OnTogglePickupList;//[Offset: 0x798, Size: 0x10]
	bool ListenFireReslutFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 0x1]
	float DelayedDisplayTime;//[Offset: 0x7ac, Size: 0x4]
	TimerHandle AutoShowPickupListHandle;//[Offset: 0x7b0, Size: 0x8]
	TimerHandle DelayProcessFireResultHandle;//[Offset: 0x7b8, Size: 0x8]
	TimerHandle EnsuredAutoShowHandle;//[Offset: 0x7c0, Size: 0x8]
	FString[] FireResultMsgs;//[Offset: 0x7c8, Size: 0x10]
	DeathTreasureBox*[] NearByDeathboxes;//[Offset: 0x7e8, Size: 0x10]
	DeathTreasureBox* NearestResurrectBox;//[Offset: 0x7f8, Size: 0x8]
	bool LastResurrecteBtnVisbile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 0x1]
	float CheckResurrectInterval;//[Offset: 0x804, Size: 0x4]
	float TempResurrectInterval;//[Offset: 0x808, Size: 0x4]
	float CheckStopResurrectInterval;//[Offset: 0x80c, Size: 0x4]
	float TempStopResurrectInterval;//[Offset: 0x810, Size: 0x4]
	int PickupRecommendPriority;//[Offset: 0x818, Size: 0x4]
	<enum,int> ItemPriorityMap;//[Offset: 0x820, Size: 0x50]
	<enum,int> ItemMutiPickupMap;//[Offset: 0x870, Size: 0x50]
	<enum,int> WeaponPartPriorityMap;//[Offset: 0x8c0, Size: 0x50]
	<int,int> WeaponPartIDPriorityMap;//[Offset: 0x910, Size: 0x50]
	Actor* PendingFirstItemActor;//[Offset: 0x960, Size: 0x8]
	void UpdateResurrection(const float InDeltaTime);// 0x559004f39041
	void UpdateItemUI(bool bForce);// 0x558f04f39041
	void UpdateCheckboxSwitches(const bool InPickupOpen);// 0x558e04f39041
	void TryReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x558d04f39041
	void TryPickupTreasureItem(SolarTreasureBoxActor* PickActor, out const SolarItemData ItemData, const int TargetIndex);// 0x558c04f39041
	void TryPickupItem(Actor* PickActor, const int TargetIndex);// 0x558b04f39041
	bool TryOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x558a04f39041
	void TryClearDirtyData(const bool bForce);// 0x558904f39041
	void TryChangePickupListVisibility(const enum InReason, const bool InVisibility);// 0x558804f39041
	bool TryCancelOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x558704f39041
	void TogglePickupList(const bool InVisibility);// 0x558604f39041
	void StopListenFireInput(bool bIsInstantlyStop);// 0x558504f39041
	void StopAutoPickupTimer();// 0x558404f39041
	void StartListenFireInput();// 0x558304f39041
	void StartAutoPickupTimer();// 0x558204f39041
	bool ShouldPickupTreasureBoxItem(SolarTreasureBoxActor* InTreasureBox);// 0x558104f39041
	void SetStopAutoPickupWhenClose(const bool InStopAutoPickupWhenClose);// 0x558004f39041
	void SetPickupSwitchInLua(const bool IsOpen);// 0x557f04f39041
	void SetPickupSwitch(const bool IsOpen);// 0x557e04f39041
	void SetPickupListVisibility(const bool InVisibility);// 0x557d04f39041
	void SetPickupCapsuleSize(out const Vector Size);// 0x557c04f39041
	void SetAutoPickupSwitch(const bool InCanAutoPickup);// 0x557b04f39041
	void RestartPickupTimer();// 0x557a04f39041
	void ReqPickupWeapon(Actor* WeaponData, bool IsAutoPickup, const int TargetIndex);// 0x557904f39041
	void ReqPickupTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool IsAutoPickup, int TargetIndex, enum InItemType, bool bSorted);// 0x557804f39041
	void ReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x557704f39041
	void ReqOpenTreasureBox(SolarTreasureBoxActor* TreasureBox);// 0x557604f39041
	void RemoveNearbyDeathbox(DeathTreasureBox* InDeathBox);// 0x557504f39041
	void RefreshResurrectBtn();// 0x557404f39041
	void RefreshPickupTimer();// 0x557304f39041
	void RefreshItemUI();// 0x557204f39041
	void RecheckPendingActors();// 0x557104f39041
	void ReceiveFireResult(FString InFireResultMsg);// 0x557004f39041
	void ProcessFireResultMsgs();// 0x556f04f39041
	void OnWeaponUpgrade(SolarPlayerWeapon* InWeapon);// 0x556e04f39041
	void OnWeaponSlotEquip(int InWeaponSlotID, SolarPlayerWeapon* InWeapon);// 0x556d04f39041
	void OnUsingSkillStatusChanged();// 0x556c04f39041
	void OnUpdateItemUIDataChanged(Object* Object, int OldItemID, int NewItemID);// 0x556b04f39041
	void OnTreasureBoxStateChange(int64 ThisID, const enum State);// 0x556a04f39041
	void OnPickupSettingChanged();// 0x556904f39041
	void OnPickupConfirmHandle();// 0x556804f39041
	void OnPickupActorEnd(Actor* ItemActor);// 0x556704f39041
	void OnPickupActorBegin(Actor* ItemActor);// 0x556604f39041
	void OnEquipChanged();// 0x556504f39041
	void OnCharacterDeathBegin();// 0x556404f39041
	void OnActorDestroyed(Actor* Actor);// 0x556304f39041
	void MarkDirtyForTick();// 0x556204f39041
	bool IsValidItemActor(const Actor* ItemActor);// 0x556104f39041
	bool IsNeedReplace(const enum InType, out const SolarItemData InItemData);// 0x556004f39041
	bool IsEquipItem(const enum InType);// 0x555f04f39041
	bool IsCharacterInAir();// 0x555e04f39041
	void InitPickupPriorityMaps();// 0x555d04f39041
	SolarItemData GetTreasureItemDataByThisID(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID);// 0x555c04f39041
	int GetPickupWeaponPartTypePriority(out const SolarItemData InItemData);// 0x555b04f39041
	int GetPickupTypePriority(const enum InItemType);// 0x555a04f39041
	Actor* GetPickupTreasureBoxActor();// 0x555904f39041
	int GetPickupPriority(out const SolarItemData InItemType);// 0x555804f39041
	DeathTreasureBox* GetNearestResurrectBox();// 0x555704f39041
	<int,ActorArray> GetItemDataMap();// 0x555604f39041
	int GetItemDataCount(enum PickupItemType);// 0x555504f39041
	bool GetIsGlobalPickup();// 0x555404f39041
	bool GetIsAutoPickupHomeItems();// 0x555304f39041
	void DoStopOpeningAirDropBox();// 0x555204f39041
	void DoOpenAirDropBox();// 0x555104f39041
	void DetectNearestResurrectTarget();// 0x555004f39041
	void CloseItemUI();// 0x554f04f39041
	void ClearAutoShowPickupListHandle();// 0x554e04f39041
	void ClearAllTimer();// 0x554d04f39041
	void CheckToShowConfirm(out const SolarItemData ItemData);// 0x554c04f39041
	bool CheckIsItemMaximizing(const int ItemID);// 0x554b04f39041
	bool CanResurrectOwner(DeathTreasureBox* InDeathBox, out float OutDistance);// 0x554a04f39041
	bool CanMutiAutoPickup(const enum InItemType);// 0x554904f39041
	void CallHUDSetTreasureBoxActor(Actor* InActor);// 0x554804f39041
	void CallHUDSetAirdropBoxActor(Actor* InActor);// 0x554704f39041
	void CallHUDSetActiveResurrectBtn(const bool Inactive);// 0x554604f39041
	void CallHUDSetActiveOpenBoxProgress(const bool Inactive);// 0x554504f39041
	void CallHUDSetActiveOpenBoxBtn(const bool Inactive);// 0x554404f39041
	void CallHUDHideOpenBoxUIByThisID(const int64 InThisID);// 0x554304f39041
	void CallHUDHideAirdropBoxUIByThisID(const int64 InThisID);// 0x554204f39041
	void AddNearbyDeathbox(DeathTreasureBox* InDeathBox);// 0x554104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPickupHandlerBase.Object
	enum Type;//[Offset: 0x28, Size: 0x1]
	SolarPickupComponent* OwnerComponent;//[Offset: 0x30, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorArrayMap
	<int,ActorArray> ActorArrayMap;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorArray
	Actor*[] ActorArray;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTreatmentComponent.ActorComponent.Object
	delegate OnCharacterHealthLow;//[Offset: 0xb0, Size: 0x10]
	SolarCharacter* OwnerCharacter;//[Offset: 0xd0, Size: 0x8]
	void TryStopTreatment();// 0x5e4904f39041
	void TryStatisticsTreatedTimes();// 0x5e4804f39041
	void TryStartTreatment();// 0x5e4704f39041
	void StopProgress();// 0x5e4604f39041
	void StartProgress();// 0x5e4504f39041
	bool IsMedicineEnough();// 0x5e4404f39041
	bool IsFullHealth();// 0x5e4304f39041
	bool IsAbleToContinueTreatment();// 0x5e4204f39041
	void IncreaseTreatedTimes();// 0x5e4104f39041
	bool CanStartTreatment();// 0x5e4004f39041
	bool CanBeTreated();// 0x5e3f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ShieldSoundData
	<enum,enum> SoundData;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeammateHUDWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CheckHUDDistanceToCenter;//[Offset: 0x6a0, Size: 0x4]
	float HUDTranslucentValue;//[Offset: 0x6a4, Size: 0x4]
	float LocationUpdateTolerance;//[Offset: 0x6a8, Size: 0x4]
	float InterpolationTimeRatio;//[Offset: 0x6ac, Size: 0x4]
	float InterpolationSpeed;//[Offset: 0x6b0, Size: 0x4]
	float InterpolationEaseInOutExp;//[Offset: 0x6b4, Size: 0x4]
	CurveFloat* DistanceToScaleCurve;//[Offset: 0x6b8, Size: 0x8]
	bool bUseDistanceToCharacterForScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1]
	class WorldMark_ReviveTeammatesFalling* DyingMarkClass;//[Offset: 0x6c8, Size: 0x8]
	WorldMark_ReviveTeammatesFalling* DyingMark;//[Offset: 0x6d0, Size: 0x8]
	class WorldMark_HUDTeammateOffScreen* TeammateHUDOffScreenClass;//[Offset: 0x6d8, Size: 0x8]
	WorldMark_HUDTeammateOffScreen* OffScreenWorldMark;//[Offset: 0x6e0, Size: 0x8]
	Vector TargetWorldLocation;//[Offset: 0x6ec, Size: 0xc]
	FString NotifyHelpSoundName;//[Offset: 0x718, Size: 0x10]
	void SetHUDVisibilityByGameState(bool bVis);// 0x5e0104f39041
	void SetHUDVisibility(bool bVis);// 0x5e0004f39041
	void SelectHeroStateChangedEvent(bool bHUDVisible);// 0x5dff04f39041
	void RemindTeammateRescueHelp(SolarPlayerState* SolarPlayerState);// 0x5dfe04f39041
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x5dfd04f39041
	void OnRescueStateChanged(byte CurrentRescueState);// 0x5dfc04f39041
	void OnRefreshHUDShouldShowOffScreen();// 0x5dfb04f39041
	void OnGameUserOffScreenChanged();// 0x5dfa04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x571, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x572, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x578, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x580, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1]
	float RedrawTime;//[Offset: 0x58c, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x598, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x5a4, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ad, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x5ae, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5af, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5b0, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x5b8, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x5c8, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x5d8, Size: 0x4]
	enum BlendMode;//[Offset: 0x5dc, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dd, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5de, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x5e0, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x608, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x610, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x618, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x620, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x628, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x630, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x638, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x640, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x648, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x654, Size: 0x8]
	int LayerZOrder;//[Offset: 0x65c, Size: 0x4]
	enum GeometryMode;//[Offset: 0x660, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x664, Size: 0x4]
	void SetWindowVisibility(enum InVisibility);// 0x5df904f39041
	void SetWindowFocusable(bool bInWindowFocusable);// 0x5df804f39041
	void SetWidgetSpace(enum NewSpace);// 0x5df704f39041
	void SetWidget(UserWidget* Widget);// 0x5df604f39041
	void SetTwoSided(const bool bWantTwoSided);// 0x5df504f39041
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x5df404f39041
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x5df304f39041
	void SetRedrawTime(float InRedrawTime);// 0x5df204f39041
	void SetPivot(out const Vector2D InPivot);// 0x5df104f39041
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x5df004f39041
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x5def04f39041
	void SetGeometryMode(enum InGeometryMode);// 0x5dee04f39041
	void SetDrawSize(Vector2D Size);// 0x5ded04f39041
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x5dec04f39041
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x5deb04f39041
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x5dea04f39041
	void RequestRedraw();// 0x5de904f39041
	enum GetWindowVisiblility();// 0x5de804f39041
	bool GetWindowFocusable();// 0x5de704f39041
	enum GetWidgetSpace();// 0x5de604f39041
	UserWidget* GetUserWidgetObject();// 0x5de504f39041
	bool GetTwoSided();// 0x5de404f39041
	bool GetTickWhenOffscreen();// 0x5de304f39041
	TextureRenderTarget2D* GetRenderTarget();// 0x5de204f39041
	float GetRedrawTime();// 0x5de104f39041
	Vector2D GetPivot();// 0x5de004f39041
	LocalPlayer* GetOwnerPlayer();// 0x5ddf04f39041
	MaterialInstanceDynamic* GetMaterialInstance();// 0x5dde04f39041
	bool GetManuallyRedraw();// 0x5ddd04f39041
	enum GetGeometryMode();// 0x5ddc04f39041
	Vector2D GetDrawSize();// 0x5ddb04f39041
	bool GetDrawAtDesiredSize();// 0x5dda04f39041
	float GetCylinderArcAngle();// 0x5dd904f39041
	Vector2D GetCurrentDrawSize();// 0x5dd804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMark_ReviveTeammatesFalling.WorldMark_ReviveBase.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* Panel;//[Offset: 0x4e0, Size: 0x8]
	CanvasPanel* Panel_rotate;//[Offset: 0x4e8, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x4f0, Size: 0x8]
	Image* Img_Light;//[Offset: 0x4f8, Size: 0x8]
	Image* img_HeadBg_Shadow;//[Offset: 0x500, Size: 0x8]
	Image* img_PlayerHead;//[Offset: 0x508, Size: 0x8]
	Image* ProgressCD;//[Offset: 0x510, Size: 0x8]
	MaterialInstanceDynamic* CDMaterial;//[Offset: 0x518, Size: 0x8]
	FName ProgressParamName;//[Offset: 0x520, Size: 0x8]
	LinearColor ProgressParamDefaultValue;//[Offset: 0x528, Size: 0x10]
	FString TimeParamName;//[Offset: 0x538, Size: 0x10]
	int TimeFormatLocalTextID;//[Offset: 0x548, Size: 0x4]
	void SetPlayerRescueState(bool InBeingRescue);// 0x625d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMark_ReviveBase.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	CurveFloat* ScaleChangeDistanceScaleCurve;//[Offset: 0x480, Size: 0x8]
	float LerpSpeed;//[Offset: 0x488, Size: 0x4]
	WidgetAnimation* Occupy_Anim;//[Offset: 0x490, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x498, Size: 0x8]
	WidgetAnimation* Anim_Exit;//[Offset: 0x4a0, Size: 0x8]
	delegate OnExitAnimationFinished;//[Offset: 0x4a8, Size: 0x10]
	FString StartNotifySoundName;//[Offset: 0x4c0, Size: 0x10]
	FString NotifySoundName;//[Offset: 0x4d0, Size: 0x10]
	void SetPlayerIDAndChangeColor(FString PlayerId);// 0x625b04f39041
	void InitBySolarPlayerState(SolarPlayerState* PlayerState);// 0x625a04f39041
	void ExitAnimEnd();// 0x625904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	bool bEnableWeltDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	float LerpAlpha;//[Offset: 0x41c, Size: 0x4]
	float AngleForArrow;//[Offset: 0x420, Size: 0x4]
	Vector2D RectangleOffset;//[Offset: 0x434, Size: 0x8]
	float Radius;//[Offset: 0x43c, Size: 0x4]
	Actor* CurrentFollowActor;//[Offset: 0x440, Size: 0x8]
	PlayerController* CurrentPlayerController;//[Offset: 0x448, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x450, Size: 0x8]
	Vector2D MarkPanelSize;//[Offset: 0x458, Size: 0x8]
	float MaxVisibleDis;//[Offset: 0x478, Size: 0x4]
	void SetUpdateState(bool InShouldUpdateLocation);// 0x444f04f39041
	void InitActorMarkBaseByFixedPos(Vector Pos, PlayerController* Controller);// 0x444e04f39041
	void InitActorMarkBase(Actor* InActor, PlayerController* Controller);// 0x444d04f39041
	Vector GetFollowActorLocation();// 0x444c04f39041
	float GetDistance(bool bIncludeZ);// 0x444b04f39041
	Actor* GetCurrentFollowActor();// 0x444a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x149, Size: 0x1]
	byte StretchDirection;//[Offset: 0x14a, Size: 0x1]
	float UserSpecifiedScale;//[Offset: 0x14c, Size: 0x4]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	float IgnoreSlightScaleModificationPercent;//[Offset: 0x154, Size: 0x4]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x643c04f39041
	void SetStretchDirection(byte InStretchDirection);// 0x643b04f39041
	void SetStretch(byte InStretch);// 0x643a04f39041
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x643904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMark_HUDTeammateOffScreen.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* Panel_Num;//[Offset: 0x480, Size: 0x8]
	CanvasPanel* Panel_Arrow;//[Offset: 0x488, Size: 0x8]
	SolarTextBlock* Txt_Num;//[Offset: 0x490, Size: 0x8]
	void SetPlayerIDAndColor(FString PlayerId);// 0x625804f39041
	void RefreshPosInTeam(const byte PosInTeam);// 0x625704f39041
	void OnUpdateMemberNum(const byte PosInTeam);// 0x625604f39041
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x625504f39041
	void OnRescueStateChanged(byte CurrentRescueState);// 0x625404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xc0, Size: 0x4]
	int SizeY;//[Offset: 0xc4, Size: 0x4]
	bool bAutoRTSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	LinearColor ClearColor;//[Offset: 0xcc, Size: 0x10]
	byte AddressX;//[Offset: 0xdc, Size: 0x1]
	byte AddressY;//[Offset: 0xdd, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xde, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xde, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xde, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xdf, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0xe1, Size: 0x1]
	byte MipsAddressU;//[Offset: 0xe2, Size: 0x1]
	byte MipsAddressV;//[Offset: 0xe3, Size: 0x1]
	byte OverrideFormat;//[Offset: 0xe4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xb8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarRadarComponent.ActorComponent.Object
	RadarScanSoundDataAsset* RadarScanSoundDataAsset;//[Offset: 0xc8, Size: 0x8]
	class UserWidget* ScannedScreenUIClass;//[Offset: 0xd0, Size: 0x8]
	FName ScannedEffectID;//[Offset: 0xd8, Size: 0x8]
	UserWidget* CreatedScreenUI;//[Offset: 0x100, Size: 0x8]
	TimerHandle DetectedTimerHandle;//[Offset: 0x108, Size: 0x8]
	int TimerHandleCounter;//[Offset: 0x110, Size: 0x4]
	<int,TimerHandle> DetectedTimerHandles;//[Offset: 0x118, Size: 0x50]
	SolarCharacter* CharacterOwner;//[Offset: 0x168, Size: 0x8]
	ScannedInfo[] CurrentScanResults;//[Offset: 0x170, Size: 0x10]
	float CurrentSpanTimer;//[Offset: 0x180, Size: 0x4]
	FName[] ActivedRadarTags;//[Offset: 0x188, Size: 0x10]
	MaterialChangeHandle DetectedMaterialHandle;//[Offset: 0x198, Size: 0x8]
	void WarningByRadarNotifation(float InRemainingTime);// 0x570d04f39041
	void OnRecivedScanResults();// 0x570c04f39041
	void OnRecieveOnceScanStart(int ScanedNum, bool bSuperRader);// 0x570b04f39041
	void OnRadarScanStart(out RadarDataSpec RadarDataSpec);// 0x570a04f39041
	void OnRadarScanEnd(out RadarDataSpec RadarDataSpec);// 0x570904f39041
	void OnRadarImmunityTagChanged(const GameplayTag Tag, int NewCount);// 0x570804f39041
	void OnPlayerDeath(SolarCharacter* InPlayer);// 0x570704f39041
	void OnDetectedByRadar(bool bOnceScan, float InDetectedTime, out const GameplayTag InRadarImmunityTag, bool bSuperRader);// 0x570604f39041
	void OnceScanSuccessNotifation(int ScanedNum);// 0x570504f39041
	void OnceScanFailedNotifation();// 0x570404f39041
	void OnAllRadarRemoved();// 0x570304f39041
	void MarkedByOnceScanNotifation();// 0x570204f39041
	FString GetModuleName_Implementation();// 0x570104f39041
	void ExposedByRadarNotifation();// 0x570004f39041
	void ChangeDetectedMaterial(bool bInDetected);// 0x56ff04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RadarDataSpec.FastArraySerializerItem
	GameplayAbilitySpecHandle RadarHandle;//[Offset: 0xc, Size: 0x4]
	byte RadarType;//[Offset: 0x10, Size: 0x1]
	Vector2D RadarRange;//[Offset: 0x14, Size: 0x8]
	Pawn* RadarSpawner;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RadarScanSoundDataAsset.DataAsset.Object
	FString RadarScan_Loop_Start;//[Offset: 0x30, Size: 0x10]
	FString RadarScan_Loop_End;//[Offset: 0x40, Size: 0x10]
	FString RadarScan_Once_Success;//[Offset: 0x50, Size: 0x10]
	FString RadarScan_Once_Failed;//[Offset: 0x60, Size: 0x10]
	FString SuperRadarScan_FoundEnemy;//[Offset: 0x70, Size: 0x10]
	FString SuperRadarScan_FoundByEnemy;//[Offset: 0x80, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScannedInfo
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	enum TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector TargetLocation;//[Offset: 0xc, Size: 0xc]
	float TargetToward;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialChangeHandle
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RadarDataSpecContainer.FastArraySerializer
	RadarDataSpec[] Radars;//[Offset: 0x108, Size: 0x10]
	SolarRadarComponent* Owner;//[Offset: 0x118, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CriticalHitInfo
	SolarPlayerState* Instigator;//[Offset: 0x0, Size: 0x8]
	float Damage;//[Offset: 0x8, Size: 0x4]
	float DamageTime;//[Offset: 0xc, Size: 0x4]
	int LastDamageWeaponID;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMarkComponent.ActorComponent.Object
	SolarCharacter* Owner;//[Offset: 0xc8, Size: 0x8]
	uint32 WorldMarkPoolOriginSize;//[Offset: 0xd0, Size: 0x4]
	float MinCheckDistance;//[Offset: 0xd4, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xd8, Size: 0x4]
	bool AutoMarkIsCoolingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	int AttachedToCharacterNumLimit;//[Offset: 0x138, Size: 0x4]
	HUD_WorldMark*[] ChosenMarksTable;//[Offset: 0x190, Size: 0x10]
	HUD_WorldMark* CurrentChosenMark;//[Offset: 0x1a0, Size: 0x8]
	HitResult CachedHitResult;//[Offset: 0x1d8, Size: 0x88]
	HUD_WorldMark*[] WorldMarkPool;//[Offset: 0x278, Size: 0x10]
	void VehicleNotify(int VehicleID, int NameLocID, SolarPlayerController* Controller);// 0x629304f39041
	bool VagueMarkCharacter();// 0x629204f39041
	void UpdateAttachedMarks();// 0x629104f39041
	void UnMarkItemByIDLuaCall(int64 instanceID);// 0x629004f39041
	void ResponseChosenMark();// 0x628f04f39041
	void RemoveWorldMark(int PosInTeam, out const WorldMarkData InWorldMarkedData);// 0x628e04f39041
	void RemoveItemMarkWhenPlayerPicked(out const int64 InItemInstanceId);// 0x628d04f39041
	void RemoveAttachedMarkByActors(out Actor*[] InActors);// 0x628c04f39041
	void ReleaseWorldMarkPool();// 0x628b04f39041
	void RefreshChosenMark();// 0x628a04f39041
	void RecycleWorldMark(HUD_WorldMark* WorldMark);// 0x628904f39041
	void PushBackQueueGroupMapWidget(enum Type, int PosInTeam, HUD_WorldMark* Widget);// 0x628804f39041
	HUD_WorldMark* PopQueueGroupMapWidget(enum Type, int PosInTeam);// 0x628704f39041
	void OnVehicleEndPlay(Actor* Actor, byte EndPlayReason);// 0x628604f39041
	void OnMarkBeChosen(HUD_WorldMark* MarkWidget, bool IfWasChosen);// 0x628504f39041
	void NotifyThatToFarToMark();// 0x628404f39041
	void MarkWarningOnWorld();// 0x628304f39041
	void MarkQuickChatOnWorld(int QuickChatID);// 0x628204f39041
	void MarkPointOnWorld();// 0x628104f39041
	void MarkOnWorldByMinimapPosition(int PosInTeam, out const Vector2D MinimapPos);// 0x628004f39041
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x627f04f39041
	void MarkActorByAttachToThem(Actor* InActor);// 0x627e04f39041
	void InteractTypeNotify(enum Type, SolarPlayerController* Controller);// 0x627d04f39041
	void InitWorldMarkPool();// 0x627c04f39041
	void Init(SolarCharacter* Character);// 0x627b04f39041
	HUD_WorldMarkPanel* GetWorldMarkPanel();// 0x627a04f39041
	int GetQuickVoiceLocalizationID(out const int VoiceID);// 0x627904f39041
	FString GetQuickVoiceEventName(out const int VoiceID);// 0x627804f39041
	int GetQueueGroupMapSize(enum Type, int PosInTeam);// 0x627704f39041
	FString GetInvalidTypeDefaultIconPath();// 0x627604f39041
	FString GetInteractiveObjectsFullPath(enum Type);// 0x627504f39041
	HUD_WorldMark* GetFreeWorldMark();// 0x627404f39041
	void CreateWorldMarkInternal(int PosInTeam, out const WorldMarkData InWorldMarkedData, Object* IconAsset);// 0x627304f39041
	void CreateWorldMark(int PosInTeam, out WorldMarkData InWorldMarkedData);// 0x627204f39041
	void CreateWarningWidget(out WorldMarkData Data, bool NeedSendMessage);// 0x627104f39041
	void CreateItemMarkWidget(out WorldMarkData Data);// 0x627004f39041
	void CreateInvalidWidget(out WorldMarkData Data, bool bShouldNotify);// 0x626f04f39041
	void ClearCachedWorldMarkLineTraceResult();// 0x626e04f39041
	bool CheckMarkPointIsOutOfMap(out const Vector Location);// 0x626d04f39041
	bool CheckIfWorldPosValid(out WorldMarkData Data, out const int PosInTeam);// 0x626c04f39041
	bool CheckIfThisItemBeenMarkedInternal(int instanceID, int PosInTeam);// 0x626b04f39041
	bool CheckAutoMarkDamagingCharacter();// 0x626a04f39041
	void CacheWorldMarkLineTraceResult();// 0x626904f39041
	void AutoMarkDamagingCharacter();// 0x626804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUD_WorldMark.SolarUserWidget.UserWidget.Widget.Visual.Object
	float LiveTime;//[Offset: 0x400, Size: 0x4]
	float ExtraLiveTime;//[Offset: 0x404, Size: 0x4]
	Vector2D WarningIconOffset;//[Offset: 0x408, Size: 0x8]
	Vector2D PostProcessingRectangleOffset;//[Offset: 0x410, Size: 0x8]
	float PostProcessingRadius;//[Offset: 0x418, Size: 0x4]
	float ResponCheckRangeParam;//[Offset: 0x41c, Size: 0x4]
	float RefreshTime;//[Offset: 0x420, Size: 0x4]
	Vector WorldPos;//[Offset: 0x424, Size: 0xc]
	Vector2D ScreenSize;//[Offset: 0x430, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x440, Size: 0x8]
	bool bIsOutOfRangeLastTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool bHasBeenAnsweredByMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1]
	bool bIfWasChosen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44a, Size: 0x1]
	bool bIsCreateBySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44b, Size: 0x1]
	Image* ImgMarkArrow;//[Offset: 0x450, Size: 0x8]
	Image* ImgItemMarkArrow;//[Offset: 0x458, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x460, Size: 0x8]
	float UpdateIconStyleTime_LowLevel;//[Offset: 0x468, Size: 0x4]
	float UpdateIconStyleTime_HighLevel;//[Offset: 0x46c, Size: 0x4]
	int PosInTeam;//[Offset: 0x474, Size: 0x4]
	WorldMarkData Data;//[Offset: 0x478, Size: 0x78]
	enum Type;//[Offset: 0x4f0, Size: 0x1]
	float MaxWorldDistance;//[Offset: 0x4f4, Size: 0x4]
	float MinWorldDistance;//[Offset: 0x4f8, Size: 0x4]
	CurveFloat* OpacityCurve;//[Offset: 0x500, Size: 0x8]
	bool bAttachToObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	float WarningAnimationTotalTime;//[Offset: 0x524, Size: 0x4]
	float WarningAnimationCurrentTime;//[Offset: 0x528, Size: 0x4]
	bool WarningAnimationNeedPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 0x1]
	void UpdateStyleByScreenPosition(Vector2D ScreenPos, bool bOutOfRange);// 0x48d904f39041
	void UpdateDistance(out const Vector TargetPos);// 0x48d804f39041
	void SwitchWidget(bool bOutOfRange);// 0x48d704f39041
	void SetIfBeChosen(bool bIfChosen);// 0x48d604f39041
	void ResponseByLocal();// 0x48d504f39041
	void RemoveItemMarkWhenPlayerPicked();// 0x48d404f39041
	void OnPlayerDead(out const KillInfo DeathMsgInfo);// 0x48d304f39041
	void LogMarkResponse();// 0x48d204f39041
	void InitWidget(Object* Owner, int InPosInTeam, out const WorldMarkData InWorldMarkedData, Object* IconImg);// 0x48d104f39041
	void InitAttachedWidget(Actor* ActorAttachedTo);// 0x48d004f39041
	void DestroySelf();// 0x48cf04f39041
	bool CheckIsLowLevelDevice();// 0x48ce04f39041
	void CancelResponse();// 0x48cd04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KillInfo
	FString KillerPlayerId;//[Offset: 0x0, Size: 0x10]
	int KillerSkinID;//[Offset: 0x10, Size: 0x4]
	int KillerTeamID;//[Offset: 0x14, Size: 0x4]
	FString KillerName;//[Offset: 0x18, Size: 0x10]
	int KillerFlag;//[Offset: 0x28, Size: 0x4]
	FString VictimPlayerID;//[Offset: 0x30, Size: 0x10]
	int VictimSkinID;//[Offset: 0x40, Size: 0x4]
	int VictimTeamID;//[Offset: 0x44, Size: 0x4]
	FString VictimName;//[Offset: 0x48, Size: 0x10]
	int VictimFlag;//[Offset: 0x58, Size: 0x4]
	FString KillIcon;//[Offset: 0x60, Size: 0x10]
	FString KillLeaderID;//[Offset: 0x70, Size: 0x10]
	enum KillParamsCompressInfo;//[Offset: 0x80, Size: 0x2]
	int KillNum;//[Offset: 0x84, Size: 0x4]
	int WeaponSkinID;//[Offset: 0x88, Size: 0x4]
	byte KillerVipType;//[Offset: 0x8c, Size: 0x1]
	byte VictimVipType;//[Offset: 0x8d, Size: 0x1]
	enum KillerInputType;//[Offset: 0x8e, Size: 0x1]
	enum VictimInputType;//[Offset: 0x8f, Size: 0x1]
	bool bDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bPlayComboKillSoundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	int KillReportID;//[Offset: 0x94, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUD_WorldMarkPanel.SolarUserWidget.UserWidget.Widget.Visual.Object
	HUD_MarkEnemyInfo*[] MarkdEnemyWidgets;//[Offset: 0x400, Size: 0x10]
	CanvasPanel* MarkPanel;//[Offset: 0x410, Size: 0x8]
	class HUD_MarkEnemyInfo* MarkEnemyInfoWidgetClass;//[Offset: 0x418, Size: 0x8]
	class HUD_MarkDoppelganger* MarkDoppelgangerWidgetClass;//[Offset: 0x420, Size: 0x8]
	class HUD_ScanEffect* ScanEffectWidgetClass;//[Offset: 0x428, Size: 0x8]
	HUD_MarkEnemyInfo*[] MarkEnemyWidgets;//[Offset: 0x430, Size: 0x10]
	HUD_MarkDoppelganger* MarkDoppelgangerWidget;//[Offset: 0x440, Size: 0x8]
	MeshRectangleWidget* MeshWidget_Warning;//[Offset: 0x480, Size: 0x8]
	void RegisterDataProvider();// 0x48e504f39041
	void OnSuperRadarStart(out const FString[] InPlayers);// 0x48e404f39041
	void OnSuperRadarRemovePlayer(FString InPlayer);// 0x48e304f39041
	void OnSuperRadarEnd();// 0x48e204f39041
	void OnSpectateTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x48e104f39041
	void OnScoutCharactersChange(FString[] ScoutedCharacters, FString[] ToBeScoutedCharacters);// 0x48e004f39041
	FString OnRegisterPositionMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, out const Vector InPosition);// 0x48df04f39041
	FString OnRegisterActorMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, Actor* FollowActor);// 0x48de04f39041
	void OnDoppelgangerActive(SolarCharacter* InDoppelganger, bool bActive);// 0x48dd04f39041
	void OnDamagingActorsChange();// 0x48dc04f39041
	void OnBattleHUDVisibleChanged(bool Visible);// 0x48db04f39041
	void OnAimingEnemy(SolarCharacter* InEnemy);// 0x48da04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUD_MarkEnemyInfo.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarTextBlock* Txt_Lvl;//[Offset: 0x400, Size: 0x8]
	DeathViewHPWidget* HPAndShield;//[Offset: 0x408, Size: 0x8]
	CanvasPanel* CanvasPanel;//[Offset: 0x410, Size: 0x8]
	WidgetAnimation* Anim_Exit;//[Offset: 0x418, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x420, Size: 0x8]
	float UpdateVisibleInterval;//[Offset: 0x428, Size: 0x4]
	CurveFloat* DistaceToScaleCurve;//[Offset: 0x430, Size: 0x8]
	<class Actor> OcculusionIgnoreClasses;//[Offset: 0x438, Size: 0x50]
	float MinDisplayHpValue;//[Offset: 0x488, Size: 0x4]
	float HPGridUnit;//[Offset: 0x48c, Size: 0x4]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	byte[] OccQueryTypes;//[Offset: 0x498, Size: 0x10]
	FName[] OcclusionCheckBones;//[Offset: 0x4a8, Size: 0x10]
	WidgetAnimation* Anim_Name_Exit;//[Offset: 0x4b8, Size: 0x8]
	WidgetAnimation* Anim_Name_Enter;//[Offset: 0x4c0, Size: 0x8]
	SolarTextBlock* Txt_PlayerName;//[Offset: 0x4c8, Size: 0x8]
	HUD_ScanEffect* ScanEffectWidget;//[Offset: 0x4d0, Size: 0x8]
	float ZOffset;//[Offset: 0x50c, Size: 0x4]
	void HideNameMark();// 0x487904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DeathViewHPWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	bool bSplitHPBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	SolarShieldProgressBoard* AdvBar_Shield;//[Offset: 0x430, Size: 0x8]
	SolarHPProgressBoard* AdvBar_HP;//[Offset: 0x438, Size: 0x8]
	LinearColor HPColorNormal;//[Offset: 0x460, Size: 0x10]
	LinearColor HPColorDying;//[Offset: 0x470, Size: 0x10]
	void UpdateHPBar(const float InCurHealth, const float InMaxHealth, const float InHPGridUnit);// 0x474b04f39041
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x474a04f39041
	void OnShieldValueChanged(const SinglePlayerShieldModel* ShieldModel);// 0x474904f39041
	void OnShieldChanged(const SinglePlayerShieldModel* ShieldModel);// 0x474804f39041
	void OnShieldAvailableChanged(const SinglePlayerShieldModel* ShieldModel);// 0x474704f39041
	void OnHPModelChanged(const SinglePlayerHPModel* HPModel);// 0x474604f39041
	void OnCharacterEndPlay(SolarCharacter* Character);// 0x474504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarShieldProgressBoard.SolarAdvProgressBoard.UserWidget.Widget.Visual.Object
	float AutoRechargeSpeed;//[Offset: 0x2b4, Size: 0x4]
	float RechargeTime;//[Offset: 0x2b8, Size: 0x4]
	float PreChangeSpeed;//[Offset: 0x2bc, Size: 0x4]
	void UpdateCurrentValue(float Current);// 0x578104f39041
	void SetSpeed(float NewSpeed);// 0x578004f39041
	void SetProgressColorByID(out const LinearColor InColor, const int InID);// 0x577f04f39041
	void SetPreAddColor();// 0x577e04f39041
	void PreAddValue(const float InCurrentValue, const float InChangeValue, const enum RechargeState, const bool bInFixPreAdd);// 0x577d04f39041
	void InitProgressBoard(float Current, float Max, int Fragment);// 0x577c04f39041
	void InitProgress();// 0x577b04f39041
	float GetSpeed();// 0x577a04f39041
	void DoMinusValue(const float InCurrentValue, const float InChangeValue);// 0x577904f39041
	void DoAddValue(const float InCurrentValue);// 0x577804f39041
	void CancelAddValue(const float InCurrentValue, const float InChangeValue);// 0x577704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAdvProgressBoard.UserWidget.Widget.Visual.Object
	Image* ProgressBoard;//[Offset: 0x260, Size: 0x8]
	MaterialInstance* ProgressShader;//[Offset: 0x268, Size: 0x8]
	LinearColor IncreaseColor;//[Offset: 0x270, Size: 0x10]
	LinearColor DecreaseColor;//[Offset: 0x280, Size: 0x10]
	AdvProgressChannelInfo[] ChannelList;//[Offset: 0x290, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AdvProgressChannelInfo
	enum State;//[Offset: 0x0, Size: 0x1]
	float Percent;//[Offset: 0x4, Size: 0x4]
	float TargetPercent;//[Offset: 0x8, Size: 0x4]
	float Speed;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHPProgressBoard.UserWidget.Widget.Visual.Object
	Image* ProgressBoard;//[Offset: 0x260, Size: 0x8]
	MaterialInstance* ProgressShader;//[Offset: 0x268, Size: 0x8]
	float Speed;//[Offset: 0x270, Size: 0x4]
	float RechargeSpeed;//[Offset: 0x274, Size: 0x4]
	float RechargeTime;//[Offset: 0x278, Size: 0x4]
	int RechargeIndex;//[Offset: 0x27c, Size: 0x4]
	bool bDebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	float Percent1;//[Offset: 0x284, Size: 0x4]
	float Percent2;//[Offset: 0x288, Size: 0x4]
	float Percent3;//[Offset: 0x28c, Size: 0x4]
	float Percent4;//[Offset: 0x290, Size: 0x4]
	bool bNeedAlternateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	LinearColor IncreaseColor;//[Offset: 0x298, Size: 0x10]
	LinearColor DecreaseColor;//[Offset: 0x2a8, Size: 0x10]
	void UpdateMaxValue(float Max);// 0x532104f39041
	void UpdateCurrentValue(float Current);// 0x532004f39041
	void SetSpacing(const float InValue);// 0x531f04f39041
	void SetProgressColorByID(out const LinearColor InColor, const int InID);// 0x531e04f39041
	void SetPreAddColor();// 0x531d04f39041
	void SetPercentageByIndex(float Percent, int Index);// 0x531c04f39041
	void SetFragment(float Num);// 0x531b04f39041
	void SetCurrentValueInstantly(float Current);// 0x531a04f39041
	void SetAlternateColor(out const LinearColor InColor, bool IsChangeBoth, bool IsForIncrease);// 0x531904f39041
	void PreAddValue(const float InCurrentValue, const float InChangeValue, const enum RechargeState, const bool bInFixPreAdd, const bool bInAdaptiveRecharge);// 0x531804f39041
	void InitProgressBoard(float Current, float Max, float Fragment);// 0x531704f39041
	void InitProgress();// 0x531604f39041
	LinearColor GetAlternateColor(bool bIncrease);// 0x531504f39041
	void DoMinusValue(const float InCurrentValue, const float InChangeValue);// 0x531404f39041
	void DoAddValue(const float InCurrentValue, const float InChangeValue);// 0x531304f39041
	void CancelAddValue(const float InCurrentValue, const float InChangeValue);// 0x531204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SinglePlayerShieldModel.SingleCharacterModelBase.Object
	void ShieldValueChanged(const enum InWidgetState, const float InCurValue, const float InChangeValue, const enum InRechargeState, bool bInFixPreAdd);// 0x56d004f39041
	void ShieldChanged(const bool bInAvailable, const float InCurValue, const float InMaxValue, const int InQualityColor, const bool bInIsAdvancedShield);// 0x56cf04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SingleCharacterModelBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SinglePlayerHPModel.SingleCharacterModelBase.Object
	void OnRescueStateChanged(byte InRescueState);// 0x55ef04f39041
	void OnHPValueChanged(const SolarCharacter* Character);// 0x55ee04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUD_ScanEffect.SolarUserWidget.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_Scan;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_FadeOut;//[Offset: 0x408, Size: 0x8]
	FString ScanSound;//[Offset: 0x410, Size: 0x10]
	float MinAnimLength;//[Offset: 0x420, Size: 0x4]
	FName BoneName;//[Offset: 0x424, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUD_MarkDoppelganger.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasPanel;//[Offset: 0x400, Size: 0x8]
	DeathViewHPWidget* HPAndShield;//[Offset: 0x408, Size: 0x8]
	float ZOffset;//[Offset: 0x410, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeshRectangleWidget.MeshWidgetUWidget.Widget.Visual.Object
	MaterialInterface* BaseMaterial;//[Offset: 0x148, Size: 0x8]
	int NumFloat4PerInstance;//[Offset: 0x150, Size: 0x4]
	void SetInstanceNum(int NewNum);// 0x421604f39041
	void ModifyInstanceNum(int dNum);// 0x421504f39041
	void InitUnitTestProvider();// 0x421404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeshWidgetUWidget.Widget.Visual.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterMovementComponent.SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x6b0, Size: 0x8]
	float DefaultUnscaledCapsuleHalfHeight;//[Offset: 0x6b8, Size: 0x4]
	float DefaultLazyRefreshBonesDelay;//[Offset: 0x6bc, Size: 0x4]
	bool bKeepWalkSpeedOnTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	float MinJogSpeedScaleOnBlocked;//[Offset: 0x6e4, Size: 0x4]
	float MinRunSpeedScaleOnBlocked;//[Offset: 0x6e8, Size: 0x4]
	float MinSprintSpeedScaleOnBlocked;//[Offset: 0x6ec, Size: 0x4]
	float MinCrawlSpeedScaleOnBlocked;//[Offset: 0x6f0, Size: 0x4]
	float MinSwimSpeedScaleOnBlocked;//[Offset: 0x6f4, Size: 0x4]
	float MinAccelerationProjectRatioForValidGroundSlide;//[Offset: 0x6f8, Size: 0x4]
	bool bOverrideFallingGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 0x1]
	float OverriddenFallingGravity;//[Offset: 0x700, Size: 0x4]
	float FallingHorizontalSpeedUpperLimit;//[Offset: 0x704, Size: 0x4]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x708, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x70c, Size: 0x1]
	enum CurrentAirMoveMode;//[Offset: 0x742, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x743, Size: 0x1]
	CustomJumpParams CustomJumpParams;//[Offset: 0x748, Size: 0x98]
	CustomJumpParams CustomLaunchParams;//[Offset: 0x7e0, Size: 0x98]
	JetPackConfig* JetPackConfig;//[Offset: 0x888, Size: 0x8]
	float HinderAngel;//[Offset: 0x8c4, Size: 0x4]
	float HinderPercent;//[Offset: 0x8c8, Size: 0x4]
	float HinderZ;//[Offset: 0x8cc, Size: 0x4]
	float SwimSpeedWhenSprintLockConfig;//[Offset: 0x8d0, Size: 0x4]
	float SwimSpeedConfig;//[Offset: 0x8d4, Size: 0x4]
	float SwimSpeedSmoothSpeed;//[Offset: 0x8d8, Size: 0x4]
	float SwimMaxFloatingUpSpeed;//[Offset: 0x8dc, Size: 0x4]
	float SwimMaxSinkingSpeed;//[Offset: 0x8e0, Size: 0x4]
	PhysicsVolume* NextPhysicsVolume;//[Offset: 0x8e4, Size: 0x8]
	bool bWantDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a9, Size: 0x1]
	float DeathVergeBodyRadius;//[Offset: 0x9ac, Size: 0x4]
	float DeathVergeHalfHeight;//[Offset: 0x9b0, Size: 0x4]
	Actor* HangingTargetObj;//[Offset: 0x9b8, Size: 0x8]
	Vector HangingTargetVelocity;//[Offset: 0x9c0, Size: 0xc]
	bool UseHangingTargetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cc, Size: 0x1]
	bool UseHangingTargetPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cd, Size: 0x1]
	float SkywardFlyVerticalAcceleration;//[Offset: 0x9d0, Size: 0x4]
	float MaxSkywardFlyHorizontalSpeed;//[Offset: 0x9d4, Size: 0x4]
	float MaxSkywardFlyVerticalSpeed;//[Offset: 0x9d8, Size: 0x4]
	float BrakingDecelerationSkywardFlying;//[Offset: 0x9dc, Size: 0x4]
	float SkywardFlyLateralFriction;//[Offset: 0x9e0, Size: 0x4]
	float SkywardFlyAirControl;//[Offset: 0x9e4, Size: 0x4]
	float SkywardFlyAirControlBoostMultiplier;//[Offset: 0x9e8, Size: 0x4]
	float SkywardFlyAirControlBoostVelocityThreshold;//[Offset: 0x9ec, Size: 0x4]
	float HitHeadFallingVerticalSpeed;//[Offset: 0x9f0, Size: 0x4]
	float HitHeadVerticalDeceleration;//[Offset: 0x9f4, Size: 0x4]
	void UpdateCharacterStateAfterMovement__DelegateSignature(SolarCharacterMovementComponent* MovementComponent, float DeltaTime);// 0x1ce204f39041
	void SetHinderZ(float InHinderZ);// 0x1ce104f39041
	void SetHinderAngel(float InHinderAngel);// 0x1ce004f39041
	void OnMovementBaseChanged(Character* Character, PrimitiveComponent* OldBase, PrimitiveComponent* NewBase);// 0x1cdf04f39041
	void HinderUphill(out const Vector SlopeNormal, out Vector MoveVelocity);// 0x1cde04f39041
	enum GetLastWalkMode();// 0x1cdd04f39041
	enum GetCurrentWalkMode();// 0x1cdb04f39041
	void ForcedJump();// 0x1cda04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float SimStepOptimizedDist;//[Offset: 0x618, Size: 0x4]
	int TimeDiscrepancyUploadThres;//[Offset: 0x650, Size: 0x4]
	SolarClientAdjustPositionInfo CachedClientAdjustPositionInfo;//[Offset: 0x658, Size: 0x38]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarClientAdjustPositionInfo
	PrimitiveComponent* NewBase;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomJumpParams
	float JumpHeight;//[Offset: 0x0, Size: 0x4]
	float JumpTime;//[Offset: 0x4, Size: 0x4]
	float JumpDelay;//[Offset: 0x8, Size: 0x4]
	bool bEnableLateralSpeedAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	RuntimeFloatCurve LateralSpeedAdjustCurve;//[Offset: 0x10, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: JetPackConfig.DataAsset.Object
	float CurrentSpeedResidueHorizontal;//[Offset: 0x30, Size: 0x4]
	float CurrentSpeedResidueVertical;//[Offset: 0x34, Size: 0x4]
	float AltitudeLimitation;//[Offset: 0x38, Size: 0x4]
	float DashHeightForLimitedAltitude;//[Offset: 0x3c, Size: 0x4]
	float SlantDashInputThreshold;//[Offset: 0x40, Size: 0x4]
	float VerticalDashTime;//[Offset: 0x44, Size: 0x4]
	float VerticalDashHeight;//[Offset: 0x48, Size: 0x4]
	float VerticalDashAngle;//[Offset: 0x4c, Size: 0x4]
	float VerticalDashMaxHorizontalEndSpeed;//[Offset: 0x50, Size: 0x4]
	float VerticalDashBreakableTime;//[Offset: 0x54, Size: 0x4]
	float VerticalDashCameraFadeOutTime;//[Offset: 0x58, Size: 0x4]
	float SlantDashTime;//[Offset: 0x5c, Size: 0x4]
	float SlantDashHeight;//[Offset: 0x60, Size: 0x4]
	float SlantDashAngle;//[Offset: 0x64, Size: 0x4]
	float SlantDashMaxHorizontalEndSpeed;//[Offset: 0x68, Size: 0x4]
	float SlantDashBreakableTime;//[Offset: 0x6c, Size: 0x4]
	float SlantDashCameraFadeOutTime;//[Offset: 0x70, Size: 0x4]
	float HorizontalDashTime;//[Offset: 0x74, Size: 0x4]
	float HorizontalDashDistance;//[Offset: 0x78, Size: 0x4]
	float HorizontalDashAngle;//[Offset: 0x7c, Size: 0x4]
	float HorizontalDashEndSpeed;//[Offset: 0x80, Size: 0x4]
	float HorizontalDashBreakableTime;//[Offset: 0x84, Size: 0x4]
	float HorizontalDashCameraFadeOutTime;//[Offset: 0x88, Size: 0x4]
	float UnderWaterHorizontalDashTime;//[Offset: 0x8c, Size: 0x4]
	float UnderWaterHorizontalDashDistance;//[Offset: 0x90, Size: 0x4]
	float UnderWaterHorizontalDashBreakableTime;//[Offset: 0x94, Size: 0x4]
	float UnderWaterHorizontalDashCameraFadeOutTime;//[Offset: 0x98, Size: 0x4]
	VehicleEjectParams DefaultVehicleEjectParams;//[Offset: 0x9c, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCapsuleRoot.Actor.Object
	SceneComponent* RootComp;//[Offset: 0x230, Size: 0x8]
	WidgetComponent* LocationSign;//[Offset: 0x238, Size: 0x8]
	float CatchupDuration;//[Offset: 0x250, Size: 0x4]
	float CatchupBaseLerp;//[Offset: 0x254, Size: 0x4]
	MiniMapAirlineData MiniMapData;//[Offset: 0x27c, Size: 0x30]
	UsingAirlineData CurrentAirline;//[Offset: 0x2ac, Size: 0x44]
	float CruiseStartTime;//[Offset: 0x2f0, Size: 0x4]
	Vector CruiseStartLoc;//[Offset: 0x2f4, Size: 0xc]
	Rotator CruiseStartRot;//[Offset: 0x300, Size: 0xc]
	int ForceParachuteWarningTime;//[Offset: 0x30c, Size: 0x4]
	float MaxAllowedSmoothDistance;//[Offset: 0x310, Size: 0x4]
	float ClientSpeedScale;//[Offset: 0x314, Size: 0x4]
	float ClientRotationSmoothSpeed;//[Offset: 0x318, Size: 0x4]
	CapsuleFormationData* CapsuleFormationData;//[Offset: 0x338, Size: 0x8]
	<Vector,TeamFormationUnit> CruiseFormation;//[Offset: 0x340, Size: 0x50]
	BoarderInfo[] BoardingPlayerList;//[Offset: 0x390, Size: 0x10]
	void ServerUnBoardCharacter(SolarCharacter* Character);// 0x4fad04f39041
	void OnRep_MiniMapAirline();// 0x4fac04f39041
	void OnRep_CurrentAirline();// 0x4fab04f39041
	MiniMapAirlineData K2_GetAirlineData();// 0x4faa04f39041
	SolarCapsuleRoot* GetSolarCapsuleRoot(const Object* WorldContextObject);// 0x4fa904f39041
	float GetCruiseProgress();// 0x4fa804f39041
	int BoardingCharacter(out const BoarderInfo BoarderInfo);// 0x4fa704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoarderInfo
	SolarCharacter* Boarder;//[Offset: 0x0, Size: 0x8]
	int BoarderTeamID;//[Offset: 0x8, Size: 0x4]
	int BoarderTeamSize;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UsingAirlineData
	int MapId;//[Offset: 0x0, Size: 0x4]
	Vector StartPoint;//[Offset: 0x4, Size: 0xc]
	Vector EndPoint;//[Offset: 0x10, Size: 0xc]
	Vector2D Direction;//[Offset: 0x1c, Size: 0x8]
	float Speed;//[Offset: 0x24, Size: 0x4]
	float Height;//[Offset: 0x28, Size: 0x4]
	Vector CanParachutePoint;//[Offset: 0x2c, Size: 0xc]
	Vector ForceParachutePoint;//[Offset: 0x38, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CapsuleFormationData.DataAsset.Object
	<byte,EchelonFormation> TeamFormation;//[Offset: 0x30, Size: 0x50]
	CruiseFormation CruiseFormation;//[Offset: 0x80, Size: 0x10]
	void OverrideTeamFormation(out const <byte,EchelonFormation> InNewFormation);// 0x457f04f39041
	void ClearTeamFormationData();// 0x457e04f39041
	void ClearCruiseFormationData();// 0x457d04f39041
	void AddTeamFormationLocation(const byte InEchelon, out const Vector InLocation);// 0x457c04f39041
	void AddLocationToTeamFormation(out <byte,EchelonFormation> InFormation, const byte InEchelon, out const Vector InLocation);// 0x457b04f39041
	void AddEchelonFormation(const byte InEchelon, out const EchelonFormation InFormation);// 0x457a04f39041
	void AddCruiseFormation(out const CruiseFormation InFormation);// 0x457904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EchelonFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CruiseFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TeamFormationUnit
	<byte,EchelonFormationUnit> TeamFormation;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EchelonFormationUnit
	BoardingSpotInfo[] EchelonFormation;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoardingSpotInfo
	Vector SpotLocation;//[Offset: 0x0, Size: 0xc]
	SolarPlayerState* BoardingPlayer;//[Offset: 0x10, Size: 0x8]
	SolarPlayerState* LeaderPlayer;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterCruiseComponent.ActorComponent.Object
	SolarCapsuleActor* BoardedCapsulePrivate;//[Offset: 0xb0, Size: 0x8]
	FName CruiseStartSoundGroupName;//[Offset: 0xc4, Size: 0x8]
	SolarCharacter* GetCharacterOwner();// 0x46dd04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCapsuleActor.Actor.Object
	SoftObjectPath StartCruisingPath;//[Offset: 0x228, Size: 0x18]
	SoftObjectPath StopCruisingPath;//[Offset: 0x240, Size: 0x18]
	FName CruiseCharacterBindingName;//[Offset: 0x258, Size: 0x8]
	FName CruiseCapsuleBindingName;//[Offset: 0x260, Size: 0x8]
	FName CruiseCameraBindingName;//[Offset: 0x268, Size: 0x8]
	float SequenceCameraBlendDuration;//[Offset: 0x270, Size: 0x4]
	AnimationAsset* CapsuleCruisingLoopAnim;//[Offset: 0x278, Size: 0x8]
	AnimSequence* CharacterCruiseLoopAnim;//[Offset: 0x280, Size: 0x8]
	SoftObjectPath CapsuleCruisingStopAnimPath;//[Offset: 0x288, Size: 0x18]
	AnimSequence* CharacterCruiseEndAnim;//[Offset: 0x2a0, Size: 0x8]
	SkeletalMeshComponent* CapsuleSkeletalMesh;//[Offset: 0x2a8, Size: 0x8]
	StaticMeshComponent*[] AirflowMeshEffects;//[Offset: 0x2b0, Size: 0x10]
	ParticleSystemComponent*[] AirflowParticleEffects;//[Offset: 0x2c0, Size: 0x10]
	LevelSequenceActor* SequenceActor;//[Offset: 0x2d0, Size: 0x8]
	CineCameraActor* SequenceCamera;//[Offset: 0x2d8, Size: 0x8]
	LevelSequence* StartCruisingSequence;//[Offset: 0x2e0, Size: 0x8]
	LevelSequence* StopCruisingSequence;//[Offset: 0x2e8, Size: 0x8]
	AnimationAsset* CapsuleCruisingEndAnim;//[Offset: 0x2f0, Size: 0x8]
	SolarCharacter* BoardedCharacterPrivate;//[Offset: 0x2f8, Size: 0x8]
	ParticleSystemComponent* CloudParticleComponent;//[Offset: 0x300, Size: 0x8]
	SoftObjectPath CloudParticlePath;//[Offset: 0x308, Size: 0x18]
	ParticleSystem* CloudParticleAsset;//[Offset: 0x340, Size: 0x8]
	SoftObjectPath CapsuleSinglyCruisingStopAnimPath;//[Offset: 0x350, Size: 0x18]
	AnimationAsset* CapsuleSinglyCruisingEndAnim;//[Offset: 0x368, Size: 0x8]
	FName FX_MashCapsuleActorBindingName;//[Offset: 0x370, Size: 0x8]
	SkeletalMeshActor* FX_MashCapsuleActor;//[Offset: 0x378, Size: 0x8]
	LevelSequence* StartSingleCruiseSequence;//[Offset: 0x380, Size: 0x8]
	float CharacterParachuteAnimTime;//[Offset: 0x388, Size: 0x4]
	void StopCruiseSequenceFinished();// 0x4fa604f39041
	void StartCruiseSequenceFinished();// 0x4fa504f39041
	void PlayStopSinglyCruiseAnimation();// 0x4fa404f39041
	void PlayStopCruiseSequence();// 0x4fa304f39041
	void PlayStopCruiseAnimation();// 0x4fa204f39041
	void PlayStartCruiseSequence();// 0x4fa104f39041
	void PlayCruiseLoopAnimation();// 0x4fa004f39041
	void OnSingleCruiseLevelSequenceFinished();// 0x4f9f04f39041
	void HideCapsuleAirflowVFX();// 0x4f9e04f39041
	SolarCapsuleActor* CreateCapsuleActorForBoarder(SolarCharacter* InBoarder, class SolarCapsuleActor CapsuleActorClass);// 0x4f9d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x238, Size: 0x14]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x250, Size: 0x8]
	SoftObjectPath LevelSequence;//[Offset: 0x258, Size: 0x18]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x270, Size: 0x10]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x280, Size: 0x2]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x288, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x290, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x298, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x298, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x2a0, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2a8, Size: 0x8]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	void ShowBurnin();// 0x38d804f39041
	void SetSequence(LevelSequence* InSequence);// 0x38d704f39041
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x38d604f39041
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x38d504f39041
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x38d404f39041
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x38d304f39041
	void ResetBindings();// 0x38d204f39041
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x38d104f39041
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x38d004f39041
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x38cf04f39041
	void OnLevelSequenceLoaded__DelegateSignature();// 0x38ce04f39041
	LevelSequence* LoadSequence();// 0x38cd04f39041
	void HideBurnin();// 0x38cc04f39041
	LevelSequencePlayer* GetSequencePlayer();// 0x38cb04f39041
	LevelSequence* GetSequence();// 0x38ca04f39041
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x38c904f39041
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x38c804f39041
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x38c704f39041
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x38c604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x888, Size: 0x10]
	CameraComponent* GetActiveCameraComponent();// 0x65f104f39041
	LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x65f004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x408, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x418, Size: 0x10]
	delegate OnStop;//[Offset: 0x428, Size: 0x10]
	delegate OnPause;//[Offset: 0x438, Size: 0x10]
	delegate OnFinished;//[Offset: 0x448, Size: 0x10]
	byte status;//[Offset: 0x458, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x460, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x468, Size: 0x4]
	int DurationFrames;//[Offset: 0x46c, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x470, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x488, Size: 0x14]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4a0, Size: 0x320]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x828, Size: 0x10]
	interface class None* PlaybackClient;//[Offset: 0x838, Size: 0x10]
	void StopAtCurrentTime();// 0x42e604f39041
	void Stop();// 0x42e504f39041
	void SetTimeRange(float StartTime, float Duration);// 0x42e404f39041
	void SetPlayRate(float PlayRate);// 0x42e304f39041
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x42e204f39041
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x42e104f39041
	void SetFrameRate(FrameRate FrameRate);// 0x42e004f39041
	void SetFrameRange(int StartFrame, int Duration);// 0x42df04f39041
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x42de04f39041
	void ScrubToSeconds(float TimeInSeconds);// 0x42dd04f39041
	bool ScrubToMarkedFrame(FString InLabel);// 0x42dc04f39041
	void ScrubToFrame(FrameTime NewPosition);// 0x42db04f39041
	void Scrub();// 0x42da04f39041
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x42d904f39041
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x42d804f39041
	void PlayToSeconds(float TimeInSeconds);// 0x42d704f39041
	bool PlayToMarkedFrame(FString InLabel);// 0x42d604f39041
	void PlayToFrame(FrameTime NewPosition);// 0x42d504f39041
	void PlayReverse();// 0x42d404f39041
	void PlayLooping(int NumLoops);// 0x42d304f39041
	void Play();// 0x42d204f39041
	void Pause();// 0x42d104f39041
	void JumpToSeconds(float TimeInSeconds);// 0x42d004f39041
	void JumpToPosition(float NewPlaybackPosition);// 0x42cf04f39041
	bool JumpToMarkedFrame(FString InLabel);// 0x42ce04f39041
	void JumpToFrame(FrameTime NewPosition);// 0x42cd04f39041
	bool IsReversed();// 0x42cc04f39041
	bool IsPlaying();// 0x42cb04f39041
	bool IsPaused();// 0x42ca04f39041
	void GoToEndAndStop();// 0x42c904f39041
	QualifiedFrameTime GetStartTime();// 0x42c804f39041
	float GetPlayRate();// 0x42c704f39041
	float GetPlaybackStart();// 0x42c604f39041
	float GetPlaybackPosition();// 0x42c504f39041
	float GetPlaybackEnd();// 0x42c404f39041
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x42c304f39041
	float GetLength();// 0x42c204f39041
	FrameRate GetFrameRate();// 0x42c104f39041
	int GetFrameDuration();// 0x42c004f39041
	QualifiedFrameTime GetEndTime();// 0x42bf04f39041
	QualifiedFrameTime GetDuration();// 0x42be04f39041
	bool GetDisableCameraCuts();// 0x42bd04f39041
	QualifiedFrameTime GetCurrentTime();// 0x42bc04f39041
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x42bb04f39041
	void ChangePlaybackDirection();// 0x42ba04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 0x50]
	class Object* DirectorClass;//[Offset: 0x490, Size: 0x8]
	void RemoveMetaDataByClass(class Object InClass);// 0x402104f39041
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x402004f39041
	Object* FindMetaDataByClass(class Object InClass);// 0x401f04f39041
	Object* CopyMetaData(Object* InMetaData);// 0x401e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceObjectReferenceMap
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x65ec04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceBurnInInitSettings.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x260, Size: 0xb8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x318, Size: 0x8]
	void SetSettings(Object* InSettings);// 0x65ee04f39041
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x65ed04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x820, Size: 0x50]
	CineCameraComponent* GetCineCameraComponent();// 0x57ec04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x950, Size: 0xc]
	CameraFilmbackSettings Filmback;//[Offset: 0x95c, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x968, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x980, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x9d8, Size: 0x4]
	float CurrentAperture;//[Offset: 0x9dc, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x9e0, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x9f0, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0xa00, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0xa10, Size: 0x10]
	FString DefaultFilmbackPreset;//[Offset: 0xa20, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0xa30, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0xa40, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0xa44, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x64bf04f39041
	void SetFilmbackPresetByName(FString InPresetName);// 0x64be04f39041
	void SetCurrentFocalLength(out const float InFocalLength);// 0x64bd04f39041
	float GetVerticalFieldOfView();// 0x64bc04f39041
	NamedLensPreset[] GetLensPresetsCopy();// 0x64bb04f39041
	FString GetLensPresetName();// 0x64ba04f39041
	float GetHorizontalFieldOfView();// 0x64b904f39041
	FString GetFilmbackPresetName();// 0x64b804f39041
	FString GetDefaultFilmbackPresetName();// 0x64b704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x238, Size: 0x8]
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x240, Size: 0x8]
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x248, Size: 0x8]
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x250, Size: 0x8]
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x258, Size: 0x8]
	void OnRep_ReplicatedPhysAsset();// 0x6c8104f39041
	void OnRep_ReplicatedMesh();// 0x6c8004f39041
	void OnRep_ReplicatedMaterial1();// 0x6c7f04f39041
	void OnRep_ReplicatedMaterial0();// 0x6c7e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SingleCruiseBaseParam
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SingleCapsuleRootActor.Actor.Object
	SingleCruiseParamForReplicated SingleCruiseParam;//[Offset: 0x230, Size: 0x28]
	float ParachuteTime;//[Offset: 0x258, Size: 0x4]
	enum SingleCruiseState;//[Offset: 0x260, Size: 0x1]
	void OnRep_SingleCruiseState(enum LastCruiseState);// 0x4fae04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SingleCruiseParamForReplicated
	SolarCharacter* CurrentCharacter;//[Offset: 0x0, Size: 0x8]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	Vector EndLocation;//[Offset: 0x14, Size: 0xc]
	float FlyDuringTime;//[Offset: 0x20, Size: 0x4]
	float StartTime;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x228, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	void OnRep_bEnabled();// 0x673904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	bool EnableFarlightMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	SLDistanceFogData DistanceFogData_M;//[Offset: 0x318, Size: 0x18]
	SLHeightFogData HeightFogData_M;//[Offset: 0x330, Size: 0x10]
	SLDirectionalLightScattering ScatteringData_M;//[Offset: 0x340, Size: 0x20]
	LinearColor FogColor_M;//[Offset: 0x360, Size: 0x10]
	float FogDensity;//[Offset: 0x370, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x374, Size: 0x4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x378, Size: 0xc]
	LinearColor FogInscatteringColor;//[Offset: 0x384, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x398, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x3a0, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x3a4, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x3b4, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x3b8, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x3bc, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x3c0, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x3c4, Size: 0x10]
	float FogMaxOpacity;//[Offset: 0x3d4, Size: 0x4]
	float StartDistance;//[Offset: 0x3d8, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x3dc, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x3e4, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x3e8, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x3ec, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x3fc, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x400, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x404, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x676004f39041
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x675f04f39041
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x675e04f39041
	void SetVolumetricFogDistance(float NewValue);// 0x675d04f39041
	void SetVolumetricFogAlbedo(Color NewValue);// 0x675c04f39041
	void SetVolumetricFog(bool bNewValue);// 0x675b04f39041
	void SetStartDistance(float Value);// 0x675a04f39041
	void SetSecondFogData_FogHeightOffset(float Value);// 0x675904f39041
	void SetSecondFogData_FogHeightFalloff(float Value);// 0x675804f39041
	void SetSecondFogData_FogDensity(float Value);// 0x675704f39041
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x675604f39041
	void SetInscatteringTextureTint(LinearColor Value);// 0x675504f39041
	void SetInscatteringColorCubemapAngle(float Value);// 0x675404f39041
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x675304f39041
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x675204f39041
	void SetFogMaxOpacity(float Value);// 0x675104f39041
	void SetFogInscatteringColor(LinearColor Value);// 0x675004f39041
	void SetFogHeightFalloff(float Value);// 0x674f04f39041
	void SetFogDensity(float Value);// 0x674e04f39041
	void SetFogCutoffDistance(float Value);// 0x674d04f39041
	void SetDirectionalInscatteringStartDistance(float Value);// 0x674c04f39041
	void SetDirectionalInscatteringExponent(float Value);// 0x674b04f39041
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x674a04f39041
	void Set_HStartDistance(float _HStartDistance);// 0x674904f39041
	void Set_HMaxFadingDistance(float _HMaxFadingDistance);// 0x674804f39041
	void Set_HFogHeight(float _HFogHeight);// 0x674704f39041
	void Set_HFogFallOff(float _HFogFallOff);// 0x674604f39041
	void Set_FogColor_M(LinearColor _FogColor_M);// 0x674504f39041
	void Set_DStartDistance(float _DStartDistance);// 0x674404f39041
	void Set_DMaxOpacity(float _DMaxOpacity);// 0x674304f39041
	void Set_DMaxDistance(float _DMaxDistance);// 0x674204f39041
	void Set_DirectionalInscatteringStartDistance_M(float _DirectionalInscatteringStartDistance_M);// 0x674104f39041
	void Set_DirectionalInscatteringMaxDistance_M(float _DirectionalInscatteringMaxDistance_M);// 0x674004f39041
	void Set_DirectionalInscatteringGamma_M(float _DirectionalInscatteringGamma_M);// 0x673f04f39041
	void Set_DirectionalInscatteringExponent_M(float _DirectionalInscatteringExponent_M);// 0x673e04f39041
	void Set_DirectionalInscatteringColor_M(LinearColor _DirectionalInscatteringColor_M);// 0x673d04f39041
	void Set_DFogHeight(float _DFogHeight);// 0x673c04f39041
	void Set_DFogGamma(float _DFogGamma);// 0x673b04f39041
	void Set_DFogFallOff(float _DFogFallOff);// 0x673a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SLDistanceFogData
	float DFogHeight;//[Offset: 0x0, Size: 0x4]
	float DFogFallOff;//[Offset: 0x4, Size: 0x4]
	float DMaxDistance;//[Offset: 0x8, Size: 0x4]
	float DFogGamma;//[Offset: 0xc, Size: 0x4]
	float DMaxOpacity;//[Offset: 0x10, Size: 0x4]
	float DStartDistance;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SLHeightFogData
	float HFogHeight;//[Offset: 0x0, Size: 0x4]
	float HFogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float HStartDistance;//[Offset: 0x8, Size: 0x4]
	float HMaxFadingDistance;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SLDirectionalLightScattering
	float DirectionalInscatteringExponent_M;//[Offset: 0x0, Size: 0x4]
	float DirectionalInscatteringStartDistance_M;//[Offset: 0x4, Size: 0x4]
	float DirectionalInscatteringMaxDistance_M;//[Offset: 0x8, Size: 0x4]
	LinearColor DirectionalInscatteringColor_M;//[Offset: 0xc, Size: 0x10]
	float DirectionalInscatteringGamma_M;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSystemPlayerBase.WeaponSystemBase.ActorComponent.Object
	bool bHasPrimarySlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bHasSecondarySlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	bool bHasTertiarySlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1]
	SolarUnArmWeapon* Punch;//[Offset: 0x2a4, Size: 0x8]
	SolarPlayerWeapon* PrimarySlotWeapon;//[Offset: 0x2ac, Size: 0x8]
	SolarPlayerWeapon* SecondarySlotWeapon;//[Offset: 0x2b4, Size: 0x8]
	SolarPlayerWeapon* TertiarySlotWeapon;//[Offset: 0x2bc, Size: 0x8]
	SolarPlayerWeapon* LastHeldWeapon;//[Offset: 0x2c4, Size: 0x8]
	SolarPlayerWeapon* HeldWeapon;//[Offset: 0x2cc, Size: 0x8]
	bool bSwapWeaponSlotBitMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1]
	void TriggerBoltAnim();// 0x622504f39041
	void SpawnMeleeWeapon();// 0x622404f39041
	void ResetCurrentWeaponFireState();// 0x622304f39041
	void RefreshWeaponRelativeTransOnBackpack(byte WeaponSlot);// 0x622204f39041
	void PostBolt();// 0x622104f39041
	void OpenScopeForSpectator();// 0x622004f39041
	void OnRep_TertiarySlotWeapon();// 0x621f04f39041
	void OnRep_SwapWeaponSlotBitMark();// 0x621e04f39041
	void OnRep_SecondarySlotWeapon();// 0x621d04f39041
	void OnRep_Punch();// 0x621c04f39041
	void OnRep_PrimarySlotWeapon();// 0x621b04f39041
	void OnRep_LastHeldWeapon();// 0x621a04f39041
	void OnRep_HeldWeapon();// 0x621904f39041
	SolarPlayerWeapon* GetWeaponBySlot(int InSlotType);// 0x621804f39041
	SolarUnArmWeapon* GetUnArmWeapon();// 0x621704f39041
	SolarPlayerWeapon* GetPackSecondaryWeapon();// 0x621604f39041
	SolarPlayerWeapon* GetPackPrimaryWeapon();// 0x621504f39041
	int GetLastActiveWeaponSlot();// 0x621404f39041
	bool GetIsUnArm();// 0x621304f39041
	float GetCurrentWeaponReloadTime(int Mode);// 0x621204f39041
	bool GetCurrentWeaponIsOverloading();// 0x621104f39041
	Texture2D* GetCurrentWeaponIcon();// 0x621004f39041
	float GetCurrentWeaponBoltTime(int Mode);// 0x620f04f39041
	SolarPlayerWeapon* GetCurrentWeapon();// 0x620e04f39041
	float GetCurrentSwitchWeaponTime();// 0x620d04f39041
	int GetCurrentActiveSlot();// 0x620c04f39041
	StaticMesh* GetClipMeshOfCurrentWeapon();// 0x620b04f39041
	void GameStatisticsWeaponSkill(const int InFireMode);// 0x620a04f39041
	void CrosshairQuitReload();// 0x620904f39041
	void CrosshairEnterReload();// 0x620804f39041
	void CloseScopeForSpectator();// 0x620704f39041
	void CleanWeaponSlotsUI();// 0x620604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSystemBase.ActorComponent.Object
	WeaponSystemAutoFire* WeaponSystemAutoFire;//[Offset: 0xf8, Size: 0x8]
	SolarWeaponFireInputResolver* WeaponSystemFireInputResolver;//[Offset: 0x100, Size: 0x8]
	WeaponSystemAssistAim* WeaponSystemAssistAim;//[Offset: 0x108, Size: 0x8]
	WeaponSystemInteract WeaponSysIneract;//[Offset: 0x110, Size: 0x50]
	Actor* MyPossessPawn;//[Offset: 0x170, Size: 0x8]
	void WeaponAssistSystemTick(float InDeltaTime);// 0x620504f39041
	void SwitchSingleWeaponPressMode();// 0x620404f39041
	void SwitchScopeButtonRotatableMode();// 0x620304f39041
	void SwitchQuickScopeActivited();// 0x620204f39041
	void SwitchDoScopeMode();// 0x620104f39041
	void SwitchAutoScopeEnable();// 0x620004f39041
	void SwitchAutoFire(bool BOpened);// 0x61ff04f39041
	void SwitchAssistAim(bool bOn_Touch, bool bOn_Gamepad);// 0x61fe04f39041
	void SetCurrentActiveWeapon(SolarWeapon* Weapon);// 0x61fd04f39041
	void SetCrosshairVisible(bool InVisible);// 0x61fc04f39041
	void SetAutoScope(bool bOpen);// 0x61fb04f39041
	void ServerPlayNoAmmoSound();// 0x61fa04f39041
	void ReceiveMsgFromPlayer(bool bClient, out const PlayerWeaponMsg Msg);// 0x61f904f39041
	void OnTouchScreen();// 0x61f804f39041
	void OnToggleAutoFire();// 0x61f704f39041
	void OnToggleAssistAim();// 0x61f604f39041
	void OnOtherPlayerSpectateMyOwner();// 0x61f504f39041
	void NetMulticastPlayNoAmmoSound();// 0x61f404f39041
	bool IsUsingSpecialQuickAdsButton();// 0x61f304f39041
	SolarWeaponFireInputResolver* GetFireInputResolver();// 0x61f204f39041
	void GetFireButtonInputState(out enum OutLeftFireButton, out enum OutRightFireButton, out enum OutQuickAdsButton);// 0x61f104f39041
	WeaponSysStateStruct GetCurrentState();// 0x61f004f39041
	bool CheckAutoFire(out bool canfire);// 0x61ef04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerWeaponMsg
	byte MsgType;//[Offset: 0x0, Size: 0x1]
	FString MsgDetail;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUnArmWeapon.Actor.Object
	float Angle;//[Offset: 0x230, Size: 0x4]
	byte[] HitDetectableTypes;//[Offset: 0x238, Size: 0x10]
	float Interval;//[Offset: 0x248, Size: 0x4]
	class UserWidget* CrossHair;//[Offset: 0x250, Size: 0x8]
	SoftObjectPath FireIconPath;//[Offset: 0x258, Size: 0x18]
	GameplayCueTag HitCueTag;//[Offset: 0x270, Size: 0x8]
	SlateBrush FireBtnBrush;//[Offset: 0x280, Size: 0xe0]
	SolarAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x360, Size: 0x8]
	SolarCharacterBase* AttackTargetCharacter;//[Offset: 0x370, Size: 0x8]
	SolarDamageInfo DamageInfo;//[Offset: 0x3c8, Size: 0x40]
	void TryDealMeleeDamage(out const Vector Location, float DetectSphereRadius);// 0x5ede04f39041
	void ServerDealMeleeDamage(SolarCharacterBase* Target, Vector ClientHitLoc, bool bHeavyPunch);// 0x5edd04f39041
	bool HitAnyCharacters(out SolarCharacterBase* HitTarget, out const Vector Location, out const float DetectSphereRadius);// 0x5edc04f39041
	SlateBrush GetFireButtonBrush();// 0x5edb04f39041
	SolarCharacterBase* GetAttackTargetCharacter();// 0x5eda04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponFireInputResolver.Object
	enum GetRightFireButtonState();// 0x5f9704f39041
	enum GetQuickAdsButtonState();// 0x5f9604f39041
	enum GetLeftFireButtonState();// 0x5f9504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSysStateStruct
	int State;//[Offset: 0x0, Size: 0x4]
	bool bPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSystemAutoFire.Object
	void OnWeaponFire();// 0x61ee04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSystemAssistAim.Object
	WeaponAssistAimWeaponConfig* CurrentAssistAimWpnCfg;//[Offset: 0x48, Size: 0x8]
	void RefreshCurrentWeapon(SolarWeapon* Weapon);// 0x61ed04f39041
	bool Init(Actor* InWeaponHolder);// 0x61ec04f39041
	bool GetActive();// 0x61eb04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSystemInteract
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSystemVehicleComponent.WeaponSystemBase.ActorComponent.Object
	WeaponSystemInteract WeaponSystemInteract;//[Offset: 0x180, Size: 0x50]
	SolarVehicleWeapon* CurrentWeapon;//[Offset: 0x1e8, Size: 0x8]
	SolarCharacter* MyPawn;//[Offset: 0x1f0, Size: 0x8]
	WeaponAction WeaponEquipAction;//[Offset: 0x214, Size: 0x8]
	WeaponAction WeaponUnequipAction;//[Offset: 0x21c, Size: 0x8]
	<FName,enum> SavedWeaponScopeMap;//[Offset: 0x228, Size: 0x50]
	bool bQuickAdsHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	float QuickAdsPressedTime;//[Offset: 0x288, Size: 0x4]
	void ServerStatVehicleWeaponFire(const int InFireMode);// 0x625004f39041
	void ServerReload(const byte ModeIndex, const int Need);// 0x624f04f39041
	void ServerChangeWeaponScopeType(enum InScopeType);// 0x624e04f39041
	void OnRep_WeaponUnequipAction();// 0x624d04f39041
	void OnRep_WeaponEquipAction();// 0x624c04f39041
	void OnRep_CurrentWeapon(SolarVehicleWeapon* PreviousWeapon);// 0x624b04f39041
	void OnQuickAdsFire();// 0x624a04f39041
	SolarVehicleWeapon* GetCurrentVehicleWeapon();// 0x624904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAction
	int ActionCount;//[Offset: 0x0, Size: 0x4]
	int ActionParameter;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoardedVehicleInfo
	SolarVehiclePawn* BoardedVehicle;//[Offset: 0x0, Size: 0x8]
	int BoardedSeatIndex;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScoutEnemyObject.Object
	ScoutEnemyConfig* ScoutEnemyConfig;//[Offset: 0x70, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScoutEnemyConfig.DataAsset.Object
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int ScoutMaxNum;//[Offset: 0x34, Size: 0x4]
	float TimeToScanEffect;//[Offset: 0x38, Size: 0x4]
	float MaxDetectionDistance;//[Offset: 0x3c, Size: 0x4]
	Vector2D BondingBoxExtent;//[Offset: 0x40, Size: 0x8]
	bool bSupportHipFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	<enum,float> BoxScaleRatioByScope;//[Offset: 0x50, Size: 0x50]
	byte[] TargetOccBlockTypes;//[Offset: 0xa0, Size: 0x10]
	GameplayTagContainer BlockWithMyTags;//[Offset: 0xb0, Size: 0x20]
	GameplayTagContainer BlockWithEnemyTags;//[Offset: 0xd0, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterBillboardIconComponent.SceneComponent.ActorComponent.Object
	CharacterBillboardIconConfigDataAsset* ConfigDataAsset;//[Offset: 0x318, Size: 0x8]
	enum ActiveMassInVisibilityWarningType;//[Offset: 0x320, Size: 0x1]
	SolarCharacter* CharacterOwner;//[Offset: 0x328, Size: 0x8]
	StaticMeshComponent* BillboardOne;//[Offset: 0x330, Size: 0x8]
	StaticMeshComponent* BillboardTwo;//[Offset: 0x338, Size: 0x8]
	<GameplayTag,SolarCharacterBillboardIconRuntimeInfo> ActiveIcons;//[Offset: 0x340, Size: 0x50]
	StaticMeshComponent*[] IdleComponents;//[Offset: 0x3c0, Size: 0x10]
	void K2_RemoveBillboardIcon(GameplayTag IconTag);// 0x4fb404f39041
	void K2_AddBillboardIcon(GameplayTag IconTag, bool bUsingCount);// 0x4fb304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterBillboardIconConfigDataAsset.DataAsset.Object
	Vector BillboardComponentScale;//[Offset: 0x30, Size: 0xc]
	Vector BillboardOffsetDefault;//[Offset: 0x3c, Size: 0xc]
	Vector BillboardOffsetCrouch;//[Offset: 0x48, Size: 0xc]
	Vector BillboardOffsetCrawl;//[Offset: 0x54, Size: 0xc]
	float BillboardOffsetSmoothSpeed;//[Offset: 0x60, Size: 0x4]
	float BillboardOffsetForceNoSmoothDistance;//[Offset: 0x64, Size: 0x4]
	class StaticMeshComponent* IconComponentClass;//[Offset: 0x68, Size: 0x8]
	SolarCharacterBillboardIconGroupConfig[] IconGroupConfigs;//[Offset: 0x70, Size: 0x10]
	GameplayTag CharacterInvisibilityWarningIconTag;//[Offset: 0x80, Size: 0x8]
	GameplayTag VehicleInvisibilityWarningIconTag;//[Offset: 0x88, Size: 0x8]
	FName IconOffsetYParamName;//[Offset: 0x90, Size: 0x8]
	int CoexistIconMaxCount;//[Offset: 0x98, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterBillboardIconGroupConfig
	SolarCharacterBillboardIconConfig[] IconConfigs;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterBillboardIconConfig
	GameplayTag IconTag;//[Offset: 0x0, Size: 0x8]
	Texture2D* IconSoftPtr;//[Offset: 0x8, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterBillboardIconRuntimeInfo
	StaticMeshComponent* Component;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DuckRollingMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class PrimitiveComponent* ShieldComponentClass;//[Offset: 0xc20, Size: 0x8]
	<SoftObjectPath,SoftObjectPath> MaterialEffectMaterialMapping;//[Offset: 0xc28, Size: 0x50]
	float HeadRelativeHeight;//[Offset: 0xc78, Size: 0x4]
	PrimitiveComponent* ShieldComponent;//[Offset: 0xc80, Size: 0x8]
	Object*[] MeshOverrides;//[Offset: 0xc88, Size: 0x10]
	Object*[] LoadedEffectMaterials;//[Offset: 0xc98, Size: 0x10]
	void ReceiveOnRegister();// 0x476a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleUpgradeEffectContainer.FastArraySerializer
	BattleUpgradeEffect[] DataArray;//[Offset: 0x108, Size: 0x10]
	SolarCharacter* Owner;//[Offset: 0x118, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleUpgradeEffect.FastArraySerializerItem
	int Level;//[Offset: 0xc, Size: 0x4]
	int EffectID;//[Offset: 0x10, Size: 0x4]
	int[] EffectCandidate;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkywardDiveLauncher.SummonItemBase.Pawn.Actor.Object
	SkeletalMeshComponent* GroundMesh;//[Offset: 0x4b0, Size: 0x8]
	BoxComponent* TriggerVolume;//[Offset: 0x4b8, Size: 0x8]
	float SpawnTimeConfig;//[Offset: 0x4c0, Size: 0x4]
	ParticleSystem* AvailableDeviceParticle;//[Offset: 0x4c8, Size: 0x8]
	ParticleSystem* SpawnBeamParticle;//[Offset: 0x4d0, Size: 0x8]
	FString SpawnSoundName;//[Offset: 0x4d8, Size: 0x10]
	AnimSequence* SpawnAnim;//[Offset: 0x4e8, Size: 0x8]
	LaunchDeviceInfo[] LauncherDeviceArray;//[Offset: 0x4f0, Size: 0x10]
	float CharacterLaunchPadHeightOffset;//[Offset: 0x500, Size: 0x4]
	float LowHealthPercentage;//[Offset: 0x504, Size: 0x4]
	ParticleSystem* LowHealthParticle;//[Offset: 0x508, Size: 0x8]
	ParticleSystem* DeathExplodeParticle;//[Offset: 0x510, Size: 0x8]
	FString DeathExplodeSoundName;//[Offset: 0x518, Size: 0x10]
	ParticleSystemComponent* SpawnBeamEffect;//[Offset: 0x528, Size: 0x8]
	ParticleSystemComponent* LowHealthEffect;//[Offset: 0x530, Size: 0x8]
	bool bNewlySpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	void OnTriggerVolumeOverlapedEnd(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4d5904f39041
	void OnTriggerVolumeOverlapedBegin(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4d5804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LaunchDeviceInfo
	bool bIsUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName LaunchPadLocSocketName;//[Offset: 0x4, Size: 0x8]
	FName PrepareEffectLocSocketName;//[Offset: 0xc, Size: 0x8]
	ParticleSystemComponent* AvailableDeviceEffect;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterSkinConfig.DataAsset.Object
	SoftObjectPath SkinIcon;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath DefaultIcon;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath SkinRes;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath CharaSkinRes;//[Offset: 0x78, Size: 0x18]
	SoftClassPath AnimBPRes;//[Offset: 0x90, Size: 0x18]
	<GameplayTag,StaticMeshOrnamentConfig> StaticMeshOrnamentsConfig;//[Offset: 0xa8, Size: 0x50]
	<GameplayTag,SkeletalMeshOrnamentConfig> SkeletalMeshOrnamentsConfig;//[Offset: 0xf8, Size: 0x50]
	<GameplayTag,ChildActorOrnamentConfig> ChildActorOrnamentsConfig;//[Offset: 0x148, Size: 0x50]
	<GameplayTag,StaticMeshOrnamentConfig> GetStaticMeshOrnamentsConfig();// 0x46f004f39041
	SoftObjectPath GetSkinRes();// 0x46ef04f39041
	SoftObjectPath GetSkinIcon();// 0x46ee04f39041
	<GameplayTag,SkeletalMeshOrnamentConfig> GetSkeletalMeshOrnamentsConfig();// 0x46ed04f39041
	<GameplayTag,ChildActorOrnamentConfig> GetChildActorOrnamentsConfig();// 0x46ec04f39041
	SoftObjectPath GetCharaSkinRes();// 0x46eb04f39041
	SoftObjectPath GetAnimBPRes();// 0x46ea04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMeshOrnamentConfig
	SoftObjectPath OrnamentRes;//[Offset: 0x0, Size: 0x18]
	FName OrnamentAttachSocket;//[Offset: 0x18, Size: 0x8]
	Transform OrnamentRelativeTransform;//[Offset: 0x20, Size: 0x30]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x50, Size: 0x18]
	FName[] OrnamentComponentTags;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshOrnamentConfig
	SoftObjectPath OrnamentRes;//[Offset: 0x0, Size: 0x18]
	SoftClassPath OrnamentABPRes;//[Offset: 0x18, Size: 0x18]
	FName OrnamentAttachSocket;//[Offset: 0x30, Size: 0x8]
	Transform OrnamentRelativeTransform;//[Offset: 0x40, Size: 0x30]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x70, Size: 0x18]
	FName[] OrnamentComponentTags;//[Offset: 0x88, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChildActorOrnamentConfig
	SoftClassPath OrnamentRes;//[Offset: 0x0, Size: 0x18]
	FName OrnamentAttachSocket;//[Offset: 0x18, Size: 0x8]
	Transform OrnamentRelativeTransform;//[Offset: 0x20, Size: 0x30]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x50, Size: 0x18]
	FName[] OrnamentComponentTags;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* Character;//[Offset: 0xa28, Size: 0x8]
	SolarCharacterCameraDataAsset* CharacterCameraConfig;//[Offset: 0xa38, Size: 0x8]
	float GetUnscaledFOV();// 0x4fb804f39041
	float GetStandardFOVScale();// 0x4fb704f39041
	float GetStandardFOV();// 0x4fb604f39041
	float GetCustomizedFOV();// 0x4fb504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterCameraDataAsset.DataAsset.Object
	float ThirdPersonVerticalOffset;//[Offset: 0x30, Size: 0x4]
	float ThirdPersonVerticalOffsetWhenCrouched;//[Offset: 0x34, Size: 0x4]
	float ThirdPersonVerticalOffsetWhenCrouchMoving;//[Offset: 0x38, Size: 0x4]
	float ThirdPersonHorizontalOffset;//[Offset: 0x3c, Size: 0x4]
	CurveFloat* FollowForwardOffsetCurve;//[Offset: 0x40, Size: 0x8]
	float FollowForwardOffsetMultiplier;//[Offset: 0x48, Size: 0x4]
	float CrouchCameraLagTime;//[Offset: 0x4c, Size: 0x4]
	float UnCrouchCameraLagTime;//[Offset: 0x50, Size: 0x4]
	float ShoulderShotVerticalOffset;//[Offset: 0x54, Size: 0x4]
	float ShoulderShotVerticalOffsetWhenCrouched;//[Offset: 0x58, Size: 0x4]
	float ShoulderShotHorizontalOffset;//[Offset: 0x5c, Size: 0x4]
	float ShoulderShotDistanceToTarget;//[Offset: 0x60, Size: 0x4]
	CurveFloat* ShoulderShotFollowDistanceCurve;//[Offset: 0x68, Size: 0x8]
	float ShoulderShotCameraFOV;//[Offset: 0x70, Size: 0x4]
	float ShoulderShotCameraZoomInOutTime;//[Offset: 0x74, Size: 0x4]
	float ScopeShotVerticalOffsetWithStanding;//[Offset: 0x78, Size: 0x4]
	float ScopeShotVerticalOffsetWhenCrouch;//[Offset: 0x7c, Size: 0x4]
	float DistanceToScopePivot;//[Offset: 0x80, Size: 0x4]
	float ArmDistanceToCamera;//[Offset: 0x84, Size: 0x4]
	float ScopeHorizontalOffset;//[Offset: 0x88, Size: 0x4]
	float SwimDistanceToTarget;//[Offset: 0x8c, Size: 0x4]
	float SwimDistSwitchSpeed;//[Offset: 0x90, Size: 0x4]
	float TakeOffCamPitchMin;//[Offset: 0x94, Size: 0x4]
	float TakeOffCamPitchMax;//[Offset: 0x98, Size: 0x4]
	float LandingSpeedThreshold;//[Offset: 0x9c, Size: 0x4]
	CamEffectSettings ParkourCamSettings;//[Offset: 0xa0, Size: 0x38]
	Vector CruiseCameraOffset;//[Offset: 0xd8, Size: 0xc]
	Vector CruiseTargetOffset;//[Offset: 0xe4, Size: 0xc]
	float CruiseDistanceToTarget;//[Offset: 0xf0, Size: 0x4]
	Vector SkydiveCameraOffset;//[Offset: 0xf4, Size: 0xc]
	Vector SkydiveTargetOffset;//[Offset: 0x100, Size: 0xc]
	float SkydiveDistanceToTarget;//[Offset: 0x10c, Size: 0x4]
	float SkydiveDistanceToTargetOnBoosting;//[Offset: 0x110, Size: 0x4]
	float SkydiveViewPitchMax;//[Offset: 0x114, Size: 0x4]
	float SkydiveViewPitchMin;//[Offset: 0x118, Size: 0x4]
	CameraSettings JetFlySettingsVertical;//[Offset: 0x11c, Size: 0x20]
	CameraSettings JetFlySettingsFront;//[Offset: 0x13c, Size: 0x20]
	CameraSettings JetFlySettingsBack;//[Offset: 0x15c, Size: 0x20]
	CameraSettings JetFlySettingsLeft;//[Offset: 0x17c, Size: 0x20]
	CameraSettings JetFlySettingsRight;//[Offset: 0x19c, Size: 0x20]
	RuntimeFloatCurve JetFlyFadeInCurve;//[Offset: 0x1c0, Size: 0x88]
	RuntimeFloatCurve JetFlyFadeOutCurve;//[Offset: 0x248, Size: 0x88]
	class CameraShake* CameraShakeSkydiveFlying;//[Offset: 0x2d0, Size: 0x8]
	float CameraShakeSkydiveFlyingSpeedMin;//[Offset: 0x2d8, Size: 0x4]
	float CameraShakeSkydiveFlyingSpeedMax;//[Offset: 0x2dc, Size: 0x4]
	class CameraShake* CameraShakeJetPackLaunch;//[Offset: 0x2e0, Size: 0x8]
	class CameraShake* CameraShakeLand;//[Offset: 0x2e8, Size: 0x8]
	class CameraShake* CameraShakeVehicleEjectLaunch;//[Offset: 0x2f0, Size: 0x8]
	float CameraShakeLandDistanceMin;//[Offset: 0x2f8, Size: 0x4]
	float CameraShakeLandDistanceMax;//[Offset: 0x2fc, Size: 0x4]
	<enum,class CameraShake> CamShakeConfig;//[Offset: 0x300, Size: 0x50]
	float TargetOffsetLerpSpeed;//[Offset: 0x350, Size: 0x4]
	float CustomizedCameraOffsetSmoothFactor;//[Offset: 0x354, Size: 0x4]
	float CustomizedTargetOffsetSmoothFactor;//[Offset: 0x358, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CamEffectSettings
	float FadeIn;//[Offset: 0x0, Size: 0x4]
	float FadeOut;//[Offset: 0x4, Size: 0x4]
	float Duration;//[Offset: 0x8, Size: 0x4]
	bool bEnableOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	CurveVector* OffsetCurve;//[Offset: 0x10, Size: 0x8]
	bool bEnableRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	CurveVector* RotationCurve;//[Offset: 0x20, Size: 0x8]
	bool bEnableFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	CurveFloat* FOVCurve;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraSettings
	float DistanceToTarget;//[Offset: 0x0, Size: 0x4]
	float CameraFOV;//[Offset: 0x4, Size: 0x4]
	Vector TargetOffset;//[Offset: 0x8, Size: 0xc]
	Vector CameraOffset;//[Offset: 0x14, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BackpackStatisticsInfo
	bool IsVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector PlayerStartLocation;//[Offset: 0x4, Size: 0xc]
	Vector PlayerEndLocation;//[Offset: 0x10, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RestoreAbilityInfo
	GameplayAbilitySpecHandle Handle;//[Offset: 0x0, Size: 0x4]
	PredictionKey ActivationPredictionKey;//[Offset: 0x8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScannedInfo_NetQuantize
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	byte TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize TargetLocation;//[Offset: 0xc, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponAT_FireBase.SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	AmmoConfig* Ammo;//[Offset: 0xc0, Size: 0x8]
	void K2_RequireEndFireTask();// 0x5f5204f39041
	void K2_RealFireTick(float DeltaTime);// 0x5f5104f39041
	void K2_PrepareRealFire();// 0x5f5004f39041
	void K2_ActivateRealFire();// 0x5f4f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponFPPData
	<enum,SolarWeaponScopeFPPConfig> ScopeFPPConfigByScopeTypeMap;//[Offset: 0x0, Size: 0x50]
	SolarWeaponScopeFPPData DefaultFPPDataForScopeType;//[Offset: 0x50, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponScopeFPPConfig
	<int,SolarWeaponScopeFPPData> ScopeFPPDataByWeaponSkinIDMap;//[Offset: 0x0, Size: 0x50]
	SolarWeaponScopeFPPData DefaultFPPDataForWeaponSkinID;//[Offset: 0x50, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponScopeFPPData
	Vector RelativeLocation;//[Offset: 0x0, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0xc, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponFPPConfig
	RangeFloat AspectRatioRange;//[Offset: 0x0, Size: 0x8]
	SolarWeaponFPPData FPPData;//[Offset: 0x8, Size: 0x68]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponCrosshairData
	byte HasReload;//[Offset: 0x0, Size: 0x1]
	byte HasForbid;//[Offset: 0x1, Size: 0x1]
	byte HasOverload;//[Offset: 0x2, Size: 0x1]
	byte HasChargeProgress;//[Offset: 0x3, Size: 0x1]
	byte HasFeedback;//[Offset: 0x4, Size: 0x1]
	enum WeaponType;//[Offset: 0x5, Size: 0x1]
	bool bIsEnergyType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	class UserWidget* CrossHairWidget;//[Offset: 0x8, Size: 0x8]
	class UserWidget* BulletContainerWidget;//[Offset: 0x10, Size: 0x8]
	class UserWidget* WeaponRechamberWidget;//[Offset: 0x18, Size: 0x8]
	SolarNoAmmoAlertWidgetLayout AmmoAlertWidgetLayout;//[Offset: 0x20, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarNoAmmoAlertWidgetLayout
	bool bOverrideLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4, Size: 0x8]
	float SpinAngle;//[Offset: 0xc, Size: 0x4]
	Vector2D Scale;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ImpactDisplayInfo
	Vector Pos;//[Offset: 0x0, Size: 0xc]
	float Scale;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarProjBullet.SolarBullet.Actor.Object
	ShapeComponent* CollisionComp;//[Offset: 0x3a0, Size: 0x8]
	ProjectileMovementComponent* MovementComp;//[Offset: 0x3a8, Size: 0x8]
	Vector SpawnedLocation;//[Offset: 0x450, Size: 0xc]
	AkComponent* AkAudioComponent;//[Offset: 0x4b8, Size: 0x8]
	ParticleSystemComponent* CurrentTrajectoryParticle;//[Offset: 0x4c0, Size: 0x8]
	bool bProjectileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	bool bAttachToActorOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	float DeferExplodeTime;//[Offset: 0x4dc, Size: 0x4]
	float FlySoundPlayDistance;//[Offset: 0x4e0, Size: 0x4]
	bool bForceExplodeOnLifeSpanExpired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 0x1]
	class Actor[] HitActorImmediateExplodeArray;//[Offset: 0x4e8, Size: 0x10]
	ParticleSystem* ExplosionParticle;//[Offset: 0x4f8, Size: 0x8]
	FString ExplosionSoundName;//[Offset: 0x500, Size: 0x10]
	float DeferReleaseTrajectoryParticleTime;//[Offset: 0x510, Size: 0x4]
	float ServerWaitClientTime;//[Offset: 0x514, Size: 0x4]
	class GameplayAbility* BulletGameplayAbilityClass;//[Offset: 0x518, Size: 0x8]
	void StopSound(enum Opt);// 0x56f004f39041
	void StartSound(enum Opt);// 0x56ef04f39041
	void ReleaseTrajectoryParticle();// 0x56ee04f39041
	void OnTeamIgnoreCollisionActorChange(bool bAdd, Actor* InActor, byte TeamID);// 0x56ed04f39041
	void OnStop(out const HitResult HitResult);// 0x56ec04f39041
	void OnRep_ProjectileStopped();// 0x56eb04f39041
	void OnAttachedActorDestroyed(Actor* Other);// 0x56ea04f39041
	void K2_OnExplode();// 0x56e904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xec, Size: 0x4]
	float MaxSpeed;//[Offset: 0xf0, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf4, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf4, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf4, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf4, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf4, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf4, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf4, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf5, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf5, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf5, Size: 0x1]
	float PreviousHitTime;//[Offset: 0xf8, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0xfc, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x108, Size: 0x4]
	float Buoyancy;//[Offset: 0x10c, Size: 0x4]
	float Bounciness;//[Offset: 0x110, Size: 0x4]
	float Friction;//[Offset: 0x114, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x118, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x11c, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x120, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x130, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x140, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x144, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x14c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x150, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x154, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x158, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x15c, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x160, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x164, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x121404f39041
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x121304f39041
	void SetInterpolatedComponent(SceneComponent* Component);// 0x121204f39041
	void ResetInterpolation();// 0x121104f39041
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x121004f39041
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x120f04f39041
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x120e04f39041
	Vector LimitVelocity(Vector NewVelocity);// 0x120d04f39041
	bool IsVelocityUnderSimulationThreshold();// 0x120c04f39041
	bool IsInterpolationComplete();// 0x120b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualBulletHitParameter
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	float FireTimeStamp;//[Offset: 0x4, Size: 0x4]
	float HitTimeStamp;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize PlayerViewDir;//[Offset: 0xc, Size: 0xc]
	int8 FireChargePhase;//[Offset: 0x18, Size: 0x1]
	float FireChargeTime;//[Offset: 0x1c, Size: 0x4]
	int HitStartIndex;//[Offset: 0x20, Size: 0x4]
	Vector_NetQuantize StartLoc;//[Offset: 0x24, Size: 0xc]
	Vector_NetQuantize TargetLoc;//[Offset: 0x30, Size: 0xc]
	AmmoConfig* Ammo;//[Offset: 0x40, Size: 0x8]
	SolarWeaponHitAntiData[] HitAntiDatas;//[Offset: 0x48, Size: 0x10]
	HitResult[] Hits;//[Offset: 0x58, Size: 0x10]
	Actor*[] IgnoreHitedActors;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponHitAntiData
	Vector_NetQuantize RelavantHitLocationWithCharacter;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize HitBoneScale;//[Offset: 0xc, Size: 0xc]
	Quat HitBoneRotation;//[Offset: 0x20, Size: 0x10]
	Vector_NetQuantize HitLoc;//[Offset: 0x30, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualBulletCollector.ActorComponent.Object
	SolarWeapon* CacheWeapon;//[Offset: 0xb0, Size: 0x8]
	SolarCharacterBase* CacheCharacter;//[Offset: 0xb8, Size: 0x8]
	World* CacheWorld;//[Offset: 0xc0, Size: 0x8]
	SolarVirtualBullet[] Bullets;//[Offset: 0xc8, Size: 0x10]
	SolarVirtualBullet[] PendingBulletsInSimulated;//[Offset: 0xd8, Size: 0x10]
	SolarVirtualBullet[] BulletsInSimulated;//[Offset: 0xe8, Size: 0x10]
	SolarVirtualBullet[] BulletsInDedicatedServer;//[Offset: 0xf8, Size: 0x10]
	SolarBullet* EffectBulletCDO;//[Offset: 0x138, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualBullet
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	enum BulletType;//[Offset: 0x4, Size: 0x1]
	ParticleSystemComponent* BulletEffect;//[Offset: 0x10, Size: 0x8]
	ParticleSystemComponent* TrajectoryEffect;//[Offset: 0x18, Size: 0x8]
	ParticleSystemComponent* TrajectoryBeamEffect;//[Offset: 0x20, Size: 0x8]
	SolarVirtualBulletAKComponent* AkComponent;//[Offset: 0x28, Size: 0x8]
	Vector_NetQuantize PlayerViewDir;//[Offset: 0x170, Size: 0xc]
	Vector_NetQuantize PlayerViewLoc;//[Offset: 0x17c, Size: 0xc]
	byte IsScopeOpen;//[Offset: 0x188, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualBulletAKComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualBulletSpawnParameter
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	float FireTimeStamp;//[Offset: 0x4, Size: 0x4]
	float PreElapsedTime;//[Offset: 0x8, Size: 0x4]
	Vector PlayerViewDir;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize PlayerViewLoc;//[Offset: 0x18, Size: 0xc]
	byte IsScopeOpen;//[Offset: 0x24, Size: 0x1]
	int8 FireChargePhase;//[Offset: 0x25, Size: 0x1]
	float FireChargeTime;//[Offset: 0x28, Size: 0x4]
	Vector_NetQuantize StartLoc;//[Offset: 0x2c, Size: 0xc]
	Vector_NetQuantize TargetLoc;//[Offset: 0x38, Size: 0xc]
	Vector_NetQuantizeNormal Dir;//[Offset: 0x44, Size: 0xc]
	Vector_NetQuantize MuzzleFxLoc;//[Offset: 0x50, Size: 0xc]
	float CurveOffsetAngle;//[Offset: 0x5c, Size: 0x4]
	SolarVirtualBulletHomingTarget HomingTarget;//[Offset: 0x60, Size: 0x18]
	AmmoConfig* Ammo;//[Offset: 0x78, Size: 0x8]
	FString AntiData;//[Offset: 0x80, Size: 0x10]
	Actor* Target;//[Offset: 0x90, Size: 0x8]
	Vector_NetQuantize HitTargetRelativeLocation;//[Offset: 0x98, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualBulletHomingTarget
	bool bSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bLocalCharacterLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	Actor* HomingTargetActor;//[Offset: 0x4, Size: 0x8]
	Vector CurrentLoc;//[Offset: 0xc, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpawnProjParam
	Vector_NetQuantize Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	byte Mode;//[Offset: 0x18, Size: 0x1]
	byte CurRocketNum;//[Offset: 0x19, Size: 0x1]
	bool bTriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1]
	float Scale;//[Offset: 0x1c, Size: 0x4]
	float SpeedScale;//[Offset: 0x20, Size: 0x4]
	Actor* Target;//[Offset: 0x24, Size: 0x8]
	uint32 SpawnID;//[Offset: 0x2c, Size: 0x4]
	float Timestamp;//[Offset: 0x30, Size: 0x4]
	SolarPlayerController* InstigatorController;//[Offset: 0x34, Size: 0x8]
	Vector_NetQuantize RelativeLocation;//[Offset: 0x3c, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MutiBulletHitData
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	int8 FireMode;//[Offset: 0x4, Size: 0x1]
	int8 IsScopeOpen;//[Offset: 0x5, Size: 0x1]
	bool bValidHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	Vector WeaponLocation;//[Offset: 0x14, Size: 0xc]
	float ServerTimeSeconds;//[Offset: 0x20, Size: 0x4]
	float DamageScale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	SolarWeaponHitAntiData[] HitAntiDatas;//[Offset: 0x30, Size: 0x10]
	BulletHitDetailData[] HitDetailDataArray;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlaySoundParams
	bool HasSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool InSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int SoundFireAutoCount;//[Offset: 0x4, Size: 0x4]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FireMode
	byte Index;//[Offset: 0x0, Size: 0x1]
	float FireRateAccumulation;//[Offset: 0x4, Size: 0x4]
	float FireRateAccumulationBurstInterval;//[Offset: 0x8, Size: 0x4]
	ParticleSystemComponent* ChargingEffect;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponProjectileSpline.Actor.Object
	SplineComponent* Spline;//[Offset: 0x228, Size: 0x8]
	SplineMeshComponent* SplineMeshComponentCache;//[Offset: 0x238, Size: 0x8]
	StaticMeshComponent* PreviewedStaticMesh;//[Offset: 0x240, Size: 0x8]
	SceneComponent* PreviewRoot;//[Offset: 0x248, Size: 0x8]
	void ShowHitPointAt(out const Vector Loc);// 0x5fa904f39041
	void SetPreviewTransform(out const Vector PreviewLoc, out const Vector PreviewUpDir, out const Vector PreviewScale);// 0x5fa804f39041
	void SetPoints(out const Vector[] Points);// 0x5fa704f39041
	void SetNeedUpdateDisplayThrowTrajectory(bool Value);// 0x5fa604f39041
	void K2_OnDisplaySummonPreview();// 0x5fa504f39041
	void HideHitPoint();// 0x5fa404f39041
	void HideAllSummonPreview();// 0x5fa304f39041
	void Hide();// 0x5fa204f39041
	SplineMeshComponent* GetSplineMeshComponent();// 0x5fa104f39041
	void DrawSplineMesh(out const Vector[] InPredictPoints);// 0x5fa004f39041
	void ChangeSummonPreviewAttachParent();// 0x5f9f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x600, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x658, Size: 0xc]
	float SplineBoundaryMin;//[Offset: 0x664, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x668, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x678, Size: 0x8]
	float SplineBoundaryMax;//[Offset: 0x680, Size: 0x4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x684, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x684, Size: 0x1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x684, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x685, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x688, Size: 0x4]
	void UpdateMesh();// 0x6cc304f39041
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x6cc204f39041
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x6cc104f39041
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x6cc004f39041
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x6cbf04f39041
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x6cbe04f39041
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x6cbd04f39041
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x6cbc04f39041
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x6cbb04f39041
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x6cba04f39041
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x6cb904f39041
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x6cb804f39041
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x6cb704f39041
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x6cb604f39041
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x6cb504f39041
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x6cb404f39041
	Vector GetStartTangent();// 0x6cb304f39041
	Vector2D GetStartScale();// 0x6cb204f39041
	float GetStartRoll();// 0x6cb104f39041
	Vector GetStartPosition();// 0x6cb004f39041
	Vector2D GetStartOffset();// 0x6caf04f39041
	Vector GetSplineUpDir();// 0x6cae04f39041
	byte GetForwardAxis();// 0x6cad04f39041
	Vector GetEndTangent();// 0x6cac04f39041
	Vector2D GetEndScale();// 0x6cab04f39041
	float GetEndRoll();// 0x6caa04f39041
	Vector GetEndPosition();// 0x6ca904f39041
	Vector2D GetEndOffset();// 0x6ca804f39041
	float GetBoundaryMin();// 0x6ca704f39041
	float GetBoundaryMax();// 0x6ca604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8]
	Vector EndTangent;//[Offset: 0x40, Size: 0xc]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x540, Size: 0x68]
	InterpCurveVector SplineInfo;//[Offset: 0x5a8, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5c0, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5d8, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x5f0, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x60c, Size: 0x4]
	float Duration;//[Offset: 0x610, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x617, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61a, Size: 0x1]
	float LoopPosition;//[Offset: 0x61c, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x620, Size: 0xc]
	void UpdateSpline();// 0x41f604f39041
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x41f504f39041
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x41f404f39041
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x41f304f39041
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x41f204f39041
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x41f104f39041
	void SetSplineWorldPoints(out const Vector[] Points);// 0x41f004f39041
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x41ef04f39041
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x41ee04f39041
	void SetSplineLocalPoints(out const Vector[] Points);// 0x41ed04f39041
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x41ec04f39041
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x41eb04f39041
	void SetDrawDebug(bool bShow);// 0x41ea04f39041
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x41e904f39041
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x41e804f39041
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x41e704f39041
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x41e604f39041
	bool IsClosedLoop();// 0x41e504f39041
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x41e404f39041
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x41e304f39041
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x41e204f39041
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x41e104f39041
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x41e004f39041
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x41df04f39041
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x41de04f39041
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x41dd04f39041
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x41dc04f39041
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x41db04f39041
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41da04f39041
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41d904f39041
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41d804f39041
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41d704f39041
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x41d604f39041
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x41d504f39041
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x41d404f39041
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x41d304f39041
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41d204f39041
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41d104f39041
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41d004f39041
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41cf04f39041
	byte GetSplinePointType(int PointIndex);// 0x41ce04f39041
	float GetSplineLength();// 0x41cd04f39041
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x41cc04f39041
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x41cb04f39041
	Vector GetScaleAtSplineInputKey(float InKey);// 0x41ca04f39041
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x41c904f39041
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41c804f39041
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41c704f39041
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41c604f39041
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41c504f39041
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41c404f39041
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41c304f39041
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41c204f39041
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41c104f39041
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41c004f39041
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41bf04f39041
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41be04f39041
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41bd04f39041
	int GetNumberOfSplineSegments();// 0x41bc04f39041
	int GetNumberOfSplinePoints();// 0x41bb04f39041
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41ba04f39041
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41b904f39041
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41b804f39041
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41b704f39041
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x41b604f39041
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x41b504f39041
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41b404f39041
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x41b304f39041
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x41b204f39041
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x41b104f39041
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x41b004f39041
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41af04f39041
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41ae04f39041
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41ad04f39041
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41ac04f39041
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x41ab04f39041
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41aa04f39041
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a904f39041
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x41a804f39041
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a704f39041
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x41a604f39041
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a504f39041
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a404f39041
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a304f39041
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a204f39041
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x41a104f39041
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a004f39041
	void ClearSplinePoints(bool bUpdateSpline);// 0x419f04f39041
	void AddSplineWorldPoint(out const Vector Position);// 0x419e04f39041
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x419d04f39041
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x419c04f39041
	void AddSplineLocalPoint(out const Vector Position);// 0x419b04f39041
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x419a04f39041
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x419904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplineMetadata.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleLoopListener.Object
	void OnParticleFinished(ParticleSystemComponent* PS);// 0x5f4b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAnimationInfo
	SoftObjectPath AssetPath;//[Offset: 0x0, Size: 0x18]
	float PlayRate;//[Offset: 0x18, Size: 0x4]
	bool bUseAdaptivePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	AnimMontage* Animation;//[Offset: 0x20, Size: 0x8]
	AnimMontage* AnimOverride;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AttachedEffectParam
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Scale;//[Offset: 0x18, Size: 0xc]
	byte LocationType;//[Offset: 0x24, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x26, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LocationEffectParam
	Rotator Rotation;//[Offset: 0x0, Size: 0xc]
	Vector Scale;//[Offset: 0xc, Size: 0xc]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x19, Size: 0x1]
	bool bAutoActivateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartsComponent.ActorComponent.Object
	WeaponPartScopeComp* ScopeComp;//[Offset: 0xc8, Size: 0x8]
	WeaponPartClipComp* ClipComp;//[Offset: 0xd0, Size: 0x8]
	WeaponPartMuzzleComp* MuzzleComp;//[Offset: 0xd8, Size: 0x8]
	WeaponPartGripComp* GripComp;//[Offset: 0xe0, Size: 0x8]
	WeaponPartGunStockComp* GunStockComp;//[Offset: 0xe8, Size: 0x8]
	StaticMeshComponent* CrossHairPlane;//[Offset: 0xf0, Size: 0x8]
	StaticMeshComponent* RedCrosshairPanel;//[Offset: 0xf8, Size: 0x8]
	bool bQuickScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	FName ScopeSocket;//[Offset: 0x104, Size: 0x8]
	FName GripSocket;//[Offset: 0x10c, Size: 0x8]
	FName ClipSocket;//[Offset: 0x114, Size: 0x8]
	FName OldClipSocket;//[Offset: 0x11c, Size: 0x8]
	FName MuzzleSocket;//[Offset: 0x124, Size: 0x8]
	FName GunStockSocket;//[Offset: 0x12c, Size: 0x8]
	SolarWeapon* MyWeaponActor;//[Offset: 0x138, Size: 0x8]
	void UpdateSinglePartHoldView(WeaponPartComp* PartComp, bool bLocal);// 0x61a904f39041
	void ShowParts(bool Show, enum Flag);// 0x61a804f39041
	bool IsPartExist(int ID);// 0x61a704f39041
	bool IsDefaultPart(const int PartID);// 0x61a604f39041
	bool IsAmmoExist(int ID);// 0x61a504f39041
	WeaponPartComp*[] GetValidWeaponParts();// 0x61a404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartScopeComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	float FovValue;//[Offset: 0x6bc, Size: 0x4]
	float HipToAdsTime;//[Offset: 0x6c0, Size: 0x4]
	CurveFloat* FovChangeCurve;//[Offset: 0x6c8, Size: 0x8]
	float HitEffectScale;//[Offset: 0x6d0, Size: 0x4]
	MaterialInstance* ScopeCrossHairMaterial;//[Offset: 0x7d8, Size: 0x8]
	StaticMesh* ScopeCrossHairMesh;//[Offset: 0x7e0, Size: 0x8]
	MaterialInstance* ScopeEnemyMakerMaterial;//[Offset: 0x7e8, Size: 0x8]
	StaticMesh* ScopeEnemyMakerMesh;//[Offset: 0x7f0, Size: 0x8]
	StaticMesh* ScopeMeshForFPP;//[Offset: 0x7f8, Size: 0x8]
	StaticMesh* ScopeMeshForTPP;//[Offset: 0x800, Size: 0x8]
	void OpenScope(float Time);// 0x61b104f39041
	bool IsOpened();// 0x61b004f39041
	enum GetScopeType();// 0x61af04f39041
	Vector GetScopeAimCenterPoint();// 0x61ae04f39041
	Rotator GetFPPRotation();// 0x61ad04f39041
	Vector GetFPPLocation();// 0x61ac04f39041
	float GetDistanceToEyeWhenScope();// 0x61ab04f39041
	void CloseScope();// 0x61aa04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartMuzzleComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool HasSilencer();// 0x61a304f39041
	bool HasFlameArrester();// 0x61a204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartGripComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartGunStockComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponShotHitResult
	Actor* Actor;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize Location;//[Offset: 0x8, Size: 0xc]
	FName BoneName;//[Offset: 0x14, Size: 0x8]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x1c, Size: 0xc]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	PrimitiveComponent* Component;//[Offset: 0x2c, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x34, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OverrideBulletStruct
	class SolarBullet* PrimaryOverrideBulletClass;//[Offset: 0x0, Size: 0x8]
	class SolarBullet* SecondaryOverrideBulletClass;//[Offset: 0x8, Size: 0x8]
	class SolarBullet* PrimaryOverrideTraceBulletClass;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AiPalComponent.ActorComponent.Object
	void SetUserID(FString UserId);// 0x405304f39041
	void SetThreshold(float ThresholdPer);// 0x405204f39041
	void SetMaxDetectTimes(int DetectGap_ms);// 0x405104f39041
	void SetDetectGap_ms(int DetectGap_ms);// 0x405004f39041
	void EndDetect();// 0x404f04f39041
	void Capture();// 0x404e04f39041
	void BeginDetect();// 0x404d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMPlayerRPCComponent.ActorComponent.Object
	void ReceivedLevelLoaded(FString LevelName);// 0x4c2404f39041
	void ReceivedCharacter();// 0x4c2304f39041
	void ReceivedBeginLevelLoad(FString LevelName);// 0x4c2204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarEasyAntiCheatComponent.ActorComponent.Object
	SolarEasyAntiCheatManager* AntiCheatManager;//[Offset: 0xb8, Size: 0x8]
	Actor* Owner;//[Offset: 0xc0, Size: 0x8]
	void ServerOnUnRegisterClient();// 0x511404f39041
	void ServerOnRegisterClient(FString ProductID);// 0x511304f39041
	void ServerOnReceiveClientNotifyMessage(uint32 DataLenBytes, FString Data);// 0x511204f39041
	void ClientOnReceiveServerNotifyMessage(uint32 DataLenBytes, FString Data);// 0x511104f39041
	void ClientOnActionRequired(const int ClientAction, const int ActionReason, FString Details);// 0x511004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputModePolicyComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarCharacterCameraComponent* Camera;//[Offset: 0x3f8, Size: 0x8]
	SolarCharacter* OwnerCharacter;//[Offset: 0x400, Size: 0x8]
	void UnregisterOverlappingObstacle(const Actor* InObstacle);// 0x4fc504f39041
	void RegisterOverlappingObstacle(const Actor* InObstacle);// 0x4fc404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AbilityCooldownTimer
	GameplayTag AbilityCooldownTag;//[Offset: 0x0, Size: 0x8]
	float AbilityAppliedTime;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayHitInfo
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGlobalEventSystem.GameInstanceSubsystem.Subsystem.Object
	<class SolarGlobalEventBase,ListenerEventsByClass(MulticastInlineDelegateProperty)> ListenerEventsByClass;//[Offset: 0x30, Size: 0x50]
	<FName,ListenerEventsByName(MulticastInlineDelegateProperty)> ListenerEventsByName;//[Offset: 0x80, Size: 0x50]
	<GameplayTag,ListenerEventsByGameplayTag(MulticastInlineDelegateProperty)> ListenerEventsByGameplayTag;//[Offset: 0xd0, Size: 0x50]
	void UnbindGlobalEventByName(FName EventName, out const delegate Event);// 0x525504f39041
	void UnbindGlobalEventByGameplayTag(GameplayTag EventGameplayTag, out const delegate Event);// 0x525404f39041
	void UnbindGlobalEventByClass(class SolarGlobalEventBase EventClass, out const delegate Event);// 0x525304f39041
	void UnbindAllGlobalEventsByName(Object* Unsubscriber, FName EventName);// 0x525204f39041
	void UnbindAllGlobalEventsByGameplayTag(Object* Unsubscriber, GameplayTag EventGameplayTag);// 0x525104f39041
	void UnbindAllGlobalEventsByClass(Object* Unsubscriber, class SolarGlobalEventBase EventClass);// 0x525004f39041
	void GetAllBoundObjectsToEventByName(FName EventName, out Object*[] Objects);// 0x524f04f39041
	void GetAllBoundObjectsToEventByGameplayTag(GameplayTag EventGameplayTag, out Object*[] Objects);// 0x524e04f39041
	void GetAllBoundObjectsToEventByClass(class SolarGlobalEventBase EventClass, out Object*[] Objects);// 0x524d04f39041
	void GetAllActiveGlobalEventsClass(out class SolarGlobalEventBase[] Events);// 0x524c04f39041
	void GetAllActiveGlobalEventNames(out FName[] Events);// 0x524b04f39041
	void GetAllActiveGlobalEventGameplayTag(out GameplayTag[] Events);// 0x524a04f39041
	void ClearGlobalEventByName(FName EventName, const bool bForceClear);// 0x524904f39041
	void ClearGlobalEventByGameplayTag(GameplayTag EventGameplayTag, const bool bForceClear);// 0x524804f39041
	void ClearGlobalEventByClass(class SolarGlobalEventBase EventClass, const bool bForceClear);// 0x524704f39041
	void ClearAllGlobalEventsClass(const bool bForceClear);// 0x524604f39041
	void ClearAllGlobalEventNames(const bool bForceClear);// 0x524504f39041
	void ClearAllGlobalEventGameplayTags(const bool bForceClear);// 0x524404f39041
	void CallGlobalEventByName(Object* Publisher, FName EventName, Object* Payload, out const FString[] MetaData);// 0x524304f39041
	void CallGlobalEventByGameplayTag(Object* Publisher, GameplayTag EventGameplayTag, Object* Payload, out const FString[] MetaData);// 0x524204f39041
	void CallGlobalEventByClass(Object* Publisher, class SolarGlobalEventBase EventClass, Object* Payload, out const FString[] MetaData);// 0x524104f39041
	void BindGlobalEventByName(FName EventName, out const delegate Event);// 0x524004f39041
	void BindGlobalEventByGameplayTag(GameplayTag EventGameplayTag, out const delegate Event);// 0x523f04f39041
	void BindGlobalEventByClass(class SolarGlobalEventBase EventClass, out const delegate Event);// 0x523e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGlobalEventBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSwitchTargetCameraControlComp.ActorComponent.Object
	Actor* IntermediateEndTarget;//[Offset: 0xe4, Size: 0x8]
	void OnScoutPlayerWorkComplete();// 0x581e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FixedAntiCheatData
	int FOV;//[Offset: 0x0, Size: 0x4]
	byte AxisConstraint;//[Offset: 0x4, Size: 0x1]
	bool bAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector HeadBoneScale;//[Offset: 0x8, Size: 0xc]
	bool CurrWeaponRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float LatestTimeDiscrepancyError;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarMeerkatManager.ActorComponent.Object
	MeerkatSubScheduleMB* MBCheckInstance;//[Offset: 0xb0, Size: 0x8]
	MeerkatSubScheduleHp* HpCheckInstance;//[Offset: 0xb8, Size: 0x8]
	MeerkatSubScheduleAE* AECheckInstance;//[Offset: 0xc0, Size: 0x8]
	MeerkatSubScheduleAR* ARCheckInstance;//[Offset: 0xc8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeerkatSubScheduleMB.SolarMeerkatScheduleComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarMeerkatScheduleComponent.ActorComponent.Object
	MeerkatConfig MeerkatData;//[Offset: 0xbc, Size: 0x14]
	void ServerReportRPC(FString Key, FString Value);// 0x44e104f39041
	void ClientUpdateScheduleConfig(const MeerkatConfig AntiCheatConfig);// 0x44e004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeerkatConfig
	int ID;//[Offset: 0x0, Size: 0x4]
	float Min;//[Offset: 0x4, Size: 0x4]
	float Max;//[Offset: 0x8, Size: 0x4]
	int Tolerance;//[Offset: 0xc, Size: 0x4]
	int ProbeInterval;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeerkatSubScheduleHp.SolarMeerkatScheduleComponent.ActorComponent.Object
	void ClientNotifySeverHpExceptionOccur();// 0x44e204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeerkatSubScheduleAE.SolarMeerkatScheduleComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeerkatSubScheduleAR.SolarMeerkatScheduleComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SShotImageInfo
	FString UserId;//[Offset: 0x0, Size: 0x10]
	FString PlayerId;//[Offset: 0x10, Size: 0x10]
	FString BattleID;//[Offset: 0x20, Size: 0x10]
	int64 ScreenshotTime;//[Offset: 0x30, Size: 0x8]
	int ImageSize;//[Offset: 0x38, Size: 0x4]
	int ImageWidth;//[Offset: 0x3c, Size: 0x4]
	int ImageHeight;//[Offset: 0x40, Size: 0x4]
	FString ImageType;//[Offset: 0x48, Size: 0x10]
	FString ImageBuffer;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LocTextParam
	FString ParamName;//[Offset: 0x0, Size: 0x10]
	int LocTextID;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RotationBarMarkWidget.UserWidget.Widget.Visual.Object
	FName FlagName;//[Offset: 0x288, Size: 0x8]
	FName TextName;//[Offset: 0x290, Size: 0x8]
	Image* FlagImage;//[Offset: 0x298, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2a0, Size: 0x8]
	Actor* TargetActor;//[Offset: 0x2a8, Size: 0x8]
	void SetupOrder(int InOrderID);// 0x4bfa04f39041
	void SetUpdateState(bool ShouldUpdateLocation);// 0x4bf904f39041
	void SetPosition(Vector2D InPosition);// 0x4bf804f39041
	void SetFlagIcon(PaperSprite* InSprite);// 0x4bf704f39041
	void InitializeMark(Actor* InTargetActor, bool InMoveable);// 0x4bf604f39041
	float GetAngle();// 0x4bf504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputModeDataBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScreenshotSetting
	bool EnableOnCurrentReportGameCheating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int MaxCountInRound;//[Offset: 0x4, Size: 0x4]
	bool[] ScreenshotMoment;//[Offset: 0x8, Size: 0x10]
	int ScreenshotInterval;//[Offset: 0x18, Size: 0x4]
	int ScreenshotWidth;//[Offset: 0x1c, Size: 0x4]
	int ScreenshotQuality;//[Offset: 0x20, Size: 0x4]
	FString ImageSaveType;//[Offset: 0x28, Size: 0x10]
	enum ScreenshotMode;//[Offset: 0x38, Size: 0x1]
	int ImageMaxSize;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerCameraManager.PlayerCameraManager.Actor.Object
	Actor* OldViewTarget;//[Offset: 0x30a0, Size: 0x8]
	CameraModifier_CameraShakeWithCurve* CachedCameraShakeModWithCurve;//[Offset: 0x30a8, Size: 0x8]
	void OnPlayerGetOnViewTargetVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x55ed04f39041
	MinimalViewInfo GetDebugPOV();// 0x55ec04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraModifier_CameraShakeWithCurve.CameraModifier.Object
	<class CameraShakeWithCurve,CameraShakeWithCurvePool> ShakePoolByClass;//[Offset: 0x48, Size: 0x50]
	CameraShakeWithCurveTemplatePool[] ShakePoolByTemplate;//[Offset: 0x98, Size: 0x10]
	ActiveCameraShakeWithCurve[] ActiveShakes;//[Offset: 0xa8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShakeWithCurve.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bDisableObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	CameraModifier_CameraShakeWithCurve* Modifier;//[Offset: 0x30, Size: 0x8]
	float ShakeTime;//[Offset: 0x38, Size: 0x4]
	RuntimeFloatCurve ShakeCurve;//[Offset: 0x40, Size: 0x88]
	CameraShakeWithCurve_Element*[] ShakeElements;//[Offset: 0xc8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShakeWithCurve_Element.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShakeWithCurvePool
	CameraShakeWithCurve*[] PooledShakes;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShakeWithCurveTemplatePool
	CameraShakeWithCurve*[] PooledShakes;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveCameraShakeWithCurve
	CameraShakeWithCurve* ShakeInstance;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_HUD_BattleRoyaleMap01_C.BP_HUD_BattleRoyale_C.BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_HUD_BattleRoyale_C.BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3b0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3b8, Size: 0x8]
	delegate OnWindowVisibiltyChanged;//[Offset: 0x3c0, Size: 0x10]
	void RemoveInputActionFlagTeamDeath(SolarInputSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffffff4c9cfa60
	void AddInputActionFlagTeamDeath(SolarInputSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x139b2051b9008
	void BP_SCustomHUDBase_AutoGenFunc(Object* Publisher, Object* Payload, out const FString[] MetaData, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x1c008c05089100
	void ReceiveBeginPlay();// 0xf1d0051b9001
	void EventOnWindowVisibiltyChanged(byte UIType, byte Visibility);// 0x13f4c04f39001
	void ExecuteUbergraph_BP_HUD_Framework(int EntryPoint, byte K2Node_CustomEvent_UIType, byte K2Node_CustomEvent_Visibility, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x3f7fff8c04f39001
	void OnWindowVisibiltyChanged__DelegateSignature(byte UIType, byte Visibility);// 0xb0d2051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleHUDBase.SolarHUD.HUD.Actor.Object
	class HUDDispatcherBase* Dispatcher;//[Offset: 0x318, Size: 0x8]
	HUDDispatcherBase* WidgetEventDispatcher;//[Offset: 0x320, Size: 0x8]
	SoftObjectPath TeammateUI;//[Offset: 0x328, Size: 0x18]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	bool bUseBattleDeathView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	SolarPlayersHPModel* PlayersHPModel;//[Offset: 0x348, Size: 0x8]
	SolarPlayersShieldModel* PlayersShieldModel;//[Offset: 0x350, Size: 0x8]
	SolarTeamInfoModel* TeamInfoModelModel;//[Offset: 0x358, Size: 0x8]
	void ShowDiePage_Deprecated();// 0x452904f39041
	void OnPlayerStateRepInController(enum RepType, PlayerState* PlayerState);// 0x452804f39041
	void OnPlayerStateRepInCharacter(enum RepType, PlayerState* PlayerState);// 0x452704f39041
	void OnNewTeamInfo(SolarTeamInfo* TeamInfo);// 0x452604f39041
	void OnCharacterEndPlay(SolarCharacter* Character);// 0x452504f39041
	UISubsystem* GetUISubSystem();// 0x452404f39041
	void CloseDiePage_Deprecated(const class UserWidget InDiePageClass);// 0x452304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHUD.HUD.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputSubsystem.WorldSubsystem.Subsystem.Object
	InputDeviceProxy CurrentInputDeviceProxy;//[Offset: 0x78, Size: 0xc]
	bool TestInputActionFlag(enum InFlagBit);// 0x535404f39041
	void RemoveInputActionFlag(enum InFlagBit);// 0x535304f39041
	void OnLocalPlayerAddedEvent(LocalPlayer* NewLocalPlayer);// 0x535204f39041
	void OnInputMethodChanged(enum InInputType);// 0x535104f39041
	void OnGamepadTypeChanged(FName InGamepadType);// 0x535004f39041
	void OnControllerConnectionChange(bool bIsConnected, int UserId, int ControllerId);// 0x534f04f39041
	void AddInputActionFlag(enum InFlagBit);// 0x534e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldSubsystem.Subsystem.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUDDispatcherBase.Object
	delegate OnSkydivingLeaderIndexReplicated;//[Offset: 0x38, Size: 0x10]
	delegate OnSkydivingMemberStatusUpdated;//[Offset: 0x48, Size: 0x10]
	delegate TrySkydiveUnfollow;//[Offset: 0x58, Size: 0x10]
	float SkydivingLeaderTransferCooldown;//[Offset: 0xc0, Size: 0x4]
	float SkydivingLeaderVoiceCooldown;//[Offset: 0xc4, Size: 0x4]
	delegate OnTeammateStateReplicated;//[Offset: 0x100, Size: 0x10]
	delegate OnTeammatePlayerStateReplicated;//[Offset: 0x110, Size: 0x10]
	delegate OnCharacterPSInGameChanged;//[Offset: 0x120, Size: 0x10]
	delegate OnPlayerOperationInGameChanged;//[Offset: 0x130, Size: 0x10]
	delegate OnTeammatePSRemoveWhenPreparation;//[Offset: 0x140, Size: 0x10]
	delegate OnTeammatePSRemoveWhenBattle;//[Offset: 0x150, Size: 0x10]
	delegate OnTeammateHPChanged;//[Offset: 0x160, Size: 0x10]
	delegate OnTeammateShieldChanged;//[Offset: 0x170, Size: 0x10]
	delegate OnTeammateReviveItemChanged;//[Offset: 0x180, Size: 0x10]
	delegate OnTeammateReviveManagerChanged;//[Offset: 0x190, Size: 0x10]
	delegate OnReviveStateChanged;//[Offset: 0x1a0, Size: 0x10]
	delegate OnTeammateReviveStateChanged;//[Offset: 0x1b0, Size: 0x10]
	delegate OnTeammateResurrectTimeChanged;//[Offset: 0x1c0, Size: 0x10]
	delegate OnTeammateCallForHelpNotify;//[Offset: 0x1d0, Size: 0x10]
	delegate OnRemindTeammateRescueNotify;//[Offset: 0x1e0, Size: 0x10]
	delegate OnTeammateHUDOutScreen;//[Offset: 0x1f0, Size: 0x10]
	delegate OnTeammateHUDIntoScreen;//[Offset: 0x200, Size: 0x10]
	delegate OnKillLeaderChangedNotify;//[Offset: 0x220, Size: 0x10]
	delegate OnTeammateNetStateChanged;//[Offset: 0x270, Size: 0x10]
	delegate OnNavMapMarked;//[Offset: 0x280, Size: 0x10]
	delegate OnNavMapMarkCleared;//[Offset: 0x290, Size: 0x10]
	delegate OnTalentInitialized;//[Offset: 0x2a0, Size: 0x10]
	delegate OnTeammateCharacterIdChanged;//[Offset: 0x2b0, Size: 0x10]
	delegate OnTeammateSkinIdChanged;//[Offset: 0x2c0, Size: 0x10]
	delegate OnLevelChanged;//[Offset: 0x2d0, Size: 0x10]
	delegate OnSkillCDStateChanged;//[Offset: 0x2e0, Size: 0x10]
	delegate OnTeammateTalentStateChanged;//[Offset: 0x2f0, Size: 0x10]
	delegate OnSpecTargetChanged;//[Offset: 0x300, Size: 0x10]
	delegate OnBindHPPanelDelegate;//[Offset: 0x310, Size: 0x10]
	delegate OnBindItemPanelDelegate;//[Offset: 0x320, Size: 0x10]
	delegate OnBindPowerBarDelegate;//[Offset: 0x330, Size: 0x10]
	delegate OnRefreshBackpackItemDelegate;//[Offset: 0x340, Size: 0x10]
	delegate OnRefreshBackpackEquipDelegate;//[Offset: 0x350, Size: 0x10]
	delegate OnRefreshBackpackWeaponDelegate;//[Offset: 0x360, Size: 0x10]
	delegate OnRefreshBackpackWeaponPartDelegate;//[Offset: 0x370, Size: 0x10]
	delegate OnRefreshBroadCastModeDelegate;//[Offset: 0x380, Size: 0x10]
	delegate OnSetActiveOpenBoxBtnDelegate;//[Offset: 0x390, Size: 0x10]
	delegate OnSetActiveOpenBoxProgressDelegate;//[Offset: 0x3a0, Size: 0x10]
	delegate OnSetTreasureBoxActorDelegate;//[Offset: 0x3b0, Size: 0x10]
	delegate OnSetAirdropBoxActorDelegate;//[Offset: 0x3c0, Size: 0x10]
	delegate OnHideTreasureBoxUIDelegate;//[Offset: 0x3d0, Size: 0x10]
	delegate OnHideAirdropBoxUIDelegate;//[Offset: 0x3e0, Size: 0x10]
	delegate OnSetPickupSwitchDelegate;//[Offset: 0x3f0, Size: 0x10]
	delegate OnAirdropCharChangeDelegate;//[Offset: 0x400, Size: 0x10]
	delegate OnAirdropProgressChangeDelegate;//[Offset: 0x410, Size: 0x10]
	delegate OnPlayerNumberChanged;//[Offset: 0x420, Size: 0x10]
	delegate OnCapsulePlayerNumChanged;//[Offset: 0x430, Size: 0x10]
	delegate OnBombingStarted;//[Offset: 0x440, Size: 0x10]
	delegate OnBombingStopped;//[Offset: 0x450, Size: 0x10]
	delegate OnItemDiscarded;//[Offset: 0x460, Size: 0x10]
	delegate OnSettingRequestOpened;//[Offset: 0x470, Size: 0x10]
	delegate OnSettingRequestClosed;//[Offset: 0x480, Size: 0x10]
	delegate OnMigrateAccountVisibilityRequestChanged;//[Offset: 0x490, Size: 0x10]
	delegate OnCustomizeVisibilityRequestChanged;//[Offset: 0x4a0, Size: 0x10]
	delegate OnDriveCustomizeOpened;//[Offset: 0x4b0, Size: 0x10]
	delegate OnDriveCustomizeClosed;//[Offset: 0x4c0, Size: 0x10]
	delegate OnBackpackTookPickup;//[Offset: 0x4d0, Size: 0x10]
	delegate OnBackpackReleasedPickup;//[Offset: 0x4e0, Size: 0x10]
	delegate OnToggleCursorVisibility;//[Offset: 0x4f0, Size: 0x10]
	delegate OnBackpackVisibilitySet;//[Offset: 0x500, Size: 0x10]
	delegate OnElectricShopVisibilitySet;//[Offset: 0x510, Size: 0x10]
	delegate OnBigMapVisibilitySet;//[Offset: 0x520, Size: 0x10]
	delegate OnRescueBtnVisibilitySet;//[Offset: 0x530, Size: 0x10]
	delegate OnBuyResurrectBtnVisibilitySet;//[Offset: 0x540, Size: 0x10]
	delegate OnBigMapCloseButtonClicked;//[Offset: 0x550, Size: 0x10]
	delegate OnPickupFlagChanged;//[Offset: 0x560, Size: 0x10]
	delegate OnPickupListVisibilityChanged;//[Offset: 0x570, Size: 0x10]
	delegate OnPickupItemSet;//[Offset: 0x580, Size: 0x10]
	delegate OnPickupItemCalculated;//[Offset: 0x590, Size: 0x10]
	delegate OnPickupCheckValidUpdated;//[Offset: 0x5a0, Size: 0x10]
	delegate OnPickupCheckHighlightUpdated;//[Offset: 0x5b0, Size: 0x10]
	delegate OnPickupCheckStatesUpdated;//[Offset: 0x5c0, Size: 0x10]
	delegate OnPickupItemSelected;//[Offset: 0x5d0, Size: 0x10]
	delegate OnTogglePickupDelegate;//[Offset: 0x5e0, Size: 0x10]
	delegate OnPickupListDataUpdated;//[Offset: 0x5f0, Size: 0x10]
	delegate OnPickupSingleDataUpdated;//[Offset: 0x600, Size: 0x10]
	delegate OnPlayerDead;//[Offset: 0x610, Size: 0x10]
	delegate OnJoyStickSprintStateReset;//[Offset: 0x620, Size: 0x10]
	delegate OnJoyStickInputReset;//[Offset: 0x630, Size: 0x10]
	delegate OnJoyStickResetAll;//[Offset: 0x640, Size: 0x10]
	delegate OnTutorialSequenceRequested;//[Offset: 0x650, Size: 0x10]
	delegate OnDrivingTutorialStopped;//[Offset: 0x660, Size: 0x10]
	delegate OnFireButtonsInputReset;//[Offset: 0x670, Size: 0x10]
	delegate OnTeamDeathMatchLeaderboard;//[Offset: 0x680, Size: 0x10]
	delegate OnGameModeChangeWeapon;//[Offset: 0x690, Size: 0x10]
	bool bBackpackVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 0x1]
	bool bElectricShopVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a1, Size: 0x1]
	bool bBigMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a2, Size: 0x1]
	bool bMapVehicleSpawnListVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a3, Size: 0x1]
	bool bRescueBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 0x1]
	bool bBuyResurrectBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a5, Size: 0x1]
	delegate OnInBattle;//[Offset: 0x6a8, Size: 0x10]
	delegate OnNotInBattle;//[Offset: 0x6b8, Size: 0x10]
	delegate OnRadarStationUpdated;//[Offset: 0x6c8, Size: 0x10]
	delegate OnAngleViewEnabled;//[Offset: 0x6d8, Size: 0x10]
	delegate OnCharacterSwimStateChanged;//[Offset: 0x6e8, Size: 0x10]
	delegate OnCharacterWaterClimbAvailable;//[Offset: 0x6f8, Size: 0x10]
	delegate OnHitTraceAdded;//[Offset: 0x708, Size: 0x10]
	delegate OnHitTraceCleared;//[Offset: 0x718, Size: 0x10]
	delegate OnProfessionFunctionalChanged;//[Offset: 0x728, Size: 0x10]
	delegate OnPickupListAdd;//[Offset: 0x738, Size: 0x10]
	delegate OnPickupListRemove;//[Offset: 0x748, Size: 0x10]
	delegate OnTeammateStateChanged;//[Offset: 0x758, Size: 0x10]
	delegate OnRepliableMessageChanged;//[Offset: 0x768, Size: 0x10]
	delegate OnPlayerFlagDisplayChanged;//[Offset: 0x778, Size: 0x10]
	delegate OnSpectateModeEntered;//[Offset: 0x788, Size: 0x10]
	delegate OnSpectateModeExited;//[Offset: 0x798, Size: 0x10]
	delegate OnSpectateReferToChanged;//[Offset: 0x7a8, Size: 0x10]
	delegate OnSpectateTargetItemsChanged;//[Offset: 0x7b8, Size: 0x10]
	delegate OnPlayersCountChanged;//[Offset: 0x7c8, Size: 0x10]
	delegate OnEndMatchCountdownChanged;//[Offset: 0x7d8, Size: 0x10]
	delegate OnMarkButtonHoverChanged;//[Offset: 0x7e8, Size: 0x10]
	delegate OnMarkButtonTouchMoved;//[Offset: 0x7f8, Size: 0x10]
	delegate OnMarkButtonTouchMovedByGamepad;//[Offset: 0x808, Size: 0x10]
	delegate OnMarkButtonBeenLongPressed;//[Offset: 0x818, Size: 0x10]
	delegate OnMarkButtonDragSelectEnded;//[Offset: 0x828, Size: 0x10]
	delegate OnBattleModeChanged;//[Offset: 0x838, Size: 0x10]
	delegate OnCharacterSet;//[Offset: 0x850, Size: 0x10]
	delegate OnCharacterIDSet;//[Offset: 0x860, Size: 0x10]
	delegate OnCharacterHPChanged;//[Offset: 0x870, Size: 0x10]
	delegate OnCharacterDead;//[Offset: 0x8a0, Size: 0x10]
	delegate OnCharacterEnterWater;//[Offset: 0x8b0, Size: 0x10]
	delegate OnCharacterSelfRebirth;//[Offset: 0x8c0, Size: 0x10]
	delegate OnCharacterLevelUp;//[Offset: 0x8d0, Size: 0x10]
	delegate OnCharacterGainExp;//[Offset: 0x8e0, Size: 0x10]
	delegate OnCharacterLevelExpChanged;//[Offset: 0x8f0, Size: 0x10]
	delegate OnCharacterAllReady;//[Offset: 0x900, Size: 0x10]
	delegate OnBattleUpgradeEffect;//[Offset: 0x910, Size: 0x10]
	delegate OnSelectingBattleUpgradeEffectBegin;//[Offset: 0x920, Size: 0x10]
	delegate OnSelectingBattleUpgradeEffectFinish;//[Offset: 0x930, Size: 0x10]
	delegate OnSpectateBattleUpgradeEffectUpdate;//[Offset: 0x940, Size: 0x10]
	delegate OnTeammateRebirth;//[Offset: 0x950, Size: 0x10]
	delegate OnDamagingActorsChange;//[Offset: 0x960, Size: 0x10]
	delegate OnAimingEnemy;//[Offset: 0x970, Size: 0x10]
	delegate OnScoutCharactersChange;//[Offset: 0x980, Size: 0x10]
	delegate OnDoppelgangerActive;//[Offset: 0x990, Size: 0x10]
	delegate OnCharacterLevelChanged;//[Offset: 0x9a8, Size: 0x10]
	delegate OnRapidBoostActivationChanged;//[Offset: 0x9c8, Size: 0x10]
	delegate OnTrySpawnSuperRadar;//[Offset: 0x9d8, Size: 0x10]
	delegate OnSuperScaningStart;//[Offset: 0x9e8, Size: 0x10]
	delegate OnSuperScaningRemovePlayer;//[Offset: 0x9f8, Size: 0x10]
	delegate OnSuperScaningEnd;//[Offset: 0xa08, Size: 0x10]
	delegate OnSuperScanCameraMoveForward;//[Offset: 0xa18, Size: 0x10]
	delegate OnSuperScanCameraMoveRight;//[Offset: 0xa28, Size: 0x10]
	delegate OnSuperScaningWidgetShow;//[Offset: 0xa38, Size: 0x10]
	delegate OnRoleAbilityChange;//[Offset: 0xa58, Size: 0x10]
	delegate OnRoleAbilityStartCD;//[Offset: 0xa68, Size: 0x10]
	delegate OnRoleAbilityEndCD;//[Offset: 0xa78, Size: 0x10]
	delegate OnRoleAbilityCDDurationChange;//[Offset: 0xa88, Size: 0x10]
	delegate OnRoleAbilityStartCDUTCTimeUpdate;//[Offset: 0xa98, Size: 0x10]
	delegate OnRoleAbilityStateChange;//[Offset: 0xaa8, Size: 0x10]
	delegate OnRoleAbilityEnd;//[Offset: 0xab8, Size: 0x10]
	delegate OnRoleAbilityContinous;//[Offset: 0xac8, Size: 0x10]
	delegate OnRoleAbilityBuffContinous;//[Offset: 0xad8, Size: 0x10]
	delegate OnRoleAbilityBuffUpdate;//[Offset: 0xae8, Size: 0x10]
	delegate OnRoleAbilityBuffEnd;//[Offset: 0xaf8, Size: 0x10]
	delegate OnRoleAbilityBuffPause;//[Offset: 0xb08, Size: 0x10]
	delegate OnRoleAbilityBuffResume;//[Offset: 0xb18, Size: 0x10]
	delegate OnRoleAbilityHideControlHUD;//[Offset: 0xb28, Size: 0x10]
	delegate OnRoleAbilityInputAction;//[Offset: 0xb38, Size: 0x10]
	delegate OnRoleAbilityAddSummonBuff;//[Offset: 0xb48, Size: 0x10]
	delegate OnRoleAbilityUsingStatusChanged;//[Offset: 0xb58, Size: 0x10]
	delegate OnRoleAbilityCanTriggerAgain;//[Offset: 0xb68, Size: 0x10]
	delegate OnCharacterNightComesActorChanged;//[Offset: 0xb78, Size: 0x10]
	delegate OnMobileWeaponInputAction;//[Offset: 0xb88, Size: 0x10]
	delegate OnCanSkilledJump;//[Offset: 0xb98, Size: 0x10]
	delegate Top3Team;//[Offset: 0xba8, Size: 0x10]
	delegate OnRoleGEShieldMultiRecoverCoolDownEffect;//[Offset: 0xbb8, Size: 0x10]
	delegate OnMemberFlagIDChanged01;//[Offset: 0xbe8, Size: 0x10]
	delegate OnMemberFlagIDChanged02;//[Offset: 0xbf8, Size: 0x10]
	delegate OnMemberFlagIDChanged03;//[Offset: 0xc08, Size: 0x10]
	delegate OnMemberFlagIDChanged04;//[Offset: 0xc18, Size: 0x10]
	delegate OnDrivingStateChanged;//[Offset: 0xc28, Size: 0x10]
	delegate OnVehicleWeaponAbilityActivated;//[Offset: 0xc38, Size: 0x10]
	delegate OnVehicleScopeInitialized;//[Offset: 0xc48, Size: 0x10]
	delegate OnVehicleScopeValueChanged;//[Offset: 0xc58, Size: 0x10]
	delegate OnSwitchToNextVehicleScope;//[Offset: 0xc68, Size: 0x10]
	delegate OnVehicleWeaponScopeDelegate;//[Offset: 0xc78, Size: 0x10]
	delegate OnTransformerChangeWeaponDelegate;//[Offset: 0xc88, Size: 0x10]
	delegate OnVehicleTypeChangeDelegate;//[Offset: 0xc98, Size: 0x10]
	delegate OnVehicleWeaponNoAmmoAlert;//[Offset: 0xca8, Size: 0x10]
	delegate OnVehicleAbilityActivationChanged;//[Offset: 0xcb8, Size: 0x10]
	delegate OnMapVehicleSpawnListInitialized;//[Offset: 0xcc8, Size: 0x10]
	delegate OnVehicleFlyingProgressVisible;//[Offset: 0xcd8, Size: 0x10]
	delegate OnInputSprintLockStart;//[Offset: 0xce8, Size: 0x10]
	delegate OnSprintIconActived;//[Offset: 0xcf8, Size: 0x10]
	delegate OnSprintIconHide;//[Offset: 0xd08, Size: 0x10]
	delegate OnSprintLockIconActived;//[Offset: 0xd18, Size: 0x10]
	delegate OnTeamMessageReceive;//[Offset: 0xd28, Size: 0x10]
	delegate OnVJetForbiddenChanged;//[Offset: 0xd38, Size: 0x10]
	delegate OnHJetForbiddenChanged;//[Offset: 0xd48, Size: 0x10]
	delegate OnVJetTotalTimesSet;//[Offset: 0xd58, Size: 0x10]
	delegate OnHJetTotalTimesSet;//[Offset: 0xd68, Size: 0x10]
	delegate OnVJetRestTimesSet;//[Offset: 0xd78, Size: 0x10]
	delegate OnHJetRestTimesSet;//[Offset: 0xd88, Size: 0x10]
	delegate OnVJetChargeStateChanged;//[Offset: 0xd98, Size: 0x10]
	delegate OnVJetCDStateChanged;//[Offset: 0xda8, Size: 0x10]
	delegate OnHJetChargeStateChanged;//[Offset: 0xdb8, Size: 0x10]
	delegate OnHJetCDStateChanged;//[Offset: 0xdc8, Size: 0x10]
	delegate OnVJetTimesCharging;//[Offset: 0xdd8, Size: 0x10]
	delegate OnHJetTimesCharging;//[Offset: 0xde8, Size: 0x10]
	delegate OnVJetCoolingDown;//[Offset: 0xdf8, Size: 0x10]
	delegate OnHJetCoolingDown;//[Offset: 0xe08, Size: 0x10]
	delegate OnVJetModuleLevelChanged;//[Offset: 0xe18, Size: 0x10]
	delegate OnHJetModuleLevelChanged;//[Offset: 0xe28, Size: 0x10]
	delegate OnSkydiveFlyStateChanged;//[Offset: 0xe38, Size: 0x10]
	delegate OnSkydiveAltitudeUpdate;//[Offset: 0xe48, Size: 0x10]
	delegate OnSkydiveSpeedUpdate;//[Offset: 0xe58, Size: 0x10]
	delegate OnShowGameNoticeDelegate;//[Offset: 0xe68, Size: 0x10]
	delegate OnSetGameNoticeVisibilityDelegate;//[Offset: 0xe78, Size: 0x10]
	delegate OnStartCountDownDelegate;//[Offset: 0xe88, Size: 0x10]
	delegate OnStopCountDownDelegate;//[Offset: 0xe98, Size: 0x10]
	delegate OnHideInteractionListRequested;//[Offset: 0xea8, Size: 0x10]
	delegate OnCancelHideInteractionListRequested;//[Offset: 0xeb8, Size: 0x10]
	delegate OnInteractionTriggerAppear;//[Offset: 0xec8, Size: 0x10]
	delegate OnInteractionTriggerDisappear;//[Offset: 0xed8, Size: 0x10]
	delegate OnStartInteractionCountDown;//[Offset: 0xee8, Size: 0x10]
	delegate OnStopInteractionCountDown;//[Offset: 0xef8, Size: 0x10]
	delegate OnStartReviveTeammateCountDownDelegate;//[Offset: 0xf08, Size: 0x10]
	delegate OnStopReviveTeammateCountDownDelegate;//[Offset: 0xf18, Size: 0x10]
	delegate OnReviveWillBeDisabledHintDelegate;//[Offset: 0xf28, Size: 0x10]
	delegate OnStartReviveItemRecycleCountDownDelegate;//[Offset: 0xf38, Size: 0x10]
	delegate OnOverlapElectricShopDelegate;//[Offset: 0xfa8, Size: 0x10]
	delegate OnUpdateVehicleInteractionDelegate;//[Offset: 0xfb8, Size: 0x10]
	delegate OnCruiseHeightSet;//[Offset: 0xfc8, Size: 0x10]
	delegate OnEnterCruisingDelegate;//[Offset: 0xfd8, Size: 0x10]
	delegate OnEnterParachutingDelegate;//[Offset: 0xfe8, Size: 0x10]
	delegate OnEnterLandingDelegate;//[Offset: 0xff8, Size: 0x10]
	delegate OnMapSkydivingIconsUpdateDelegate;//[Offset: 0x1008, Size: 0x10]
	delegate OnEShopWeaponUpgradeDelegate;//[Offset: 0x1018, Size: 0x10]
	delegate OnEShopShieldUpgradeDelegate;//[Offset: 0x1028, Size: 0x10]
	delegate OnEShopPurchaseSuccessDelegate;//[Offset: 0x1038, Size: 0x10]
	delegate OnEShopItemCDRefreshDelegate;//[Offset: 0x1048, Size: 0x10]
	delegate OnEShopItemRefreshDelegate;//[Offset: 0x1058, Size: 0x10]
	delegate OnEShopSlotWeaponUpgradeDelegate;//[Offset: 0x1068, Size: 0x10]
	delegate OnEShopWeaponChangeDelegate;//[Offset: 0x1078, Size: 0x10]
	delegate OnEShopPoolRefreshDelegate;//[Offset: 0x1088, Size: 0x10]
	delegate TryOpenElectricShopDelegate;//[Offset: 0x1098, Size: 0x10]
	delegate OnTeammateHomePanelGetting;//[Offset: 0x10a8, Size: 0x10]
	delegate OnHomeBattleUIGetting;//[Offset: 0x10b8, Size: 0x10]
	delegate OnHomeMainBuildGetting;//[Offset: 0x10c8, Size: 0x10]
	delegate OnHomeFriendListGetting;//[Offset: 0x10d8, Size: 0x10]
	delegate OnHomeLevelUpUIGetting;//[Offset: 0x10e8, Size: 0x10]
	delegate OnShieldAvailableChanged;//[Offset: 0x10f8, Size: 0x10]
	delegate OnShieldChanged;//[Offset: 0x1108, Size: 0x10]
	delegate OnRechargeShieldEnd;//[Offset: 0x1118, Size: 0x10]
	delegate OnShieldFXUpdated;//[Offset: 0x1128, Size: 0x10]
	delegate OnShieldValueChanged;//[Offset: 0x1138, Size: 0x10]
	delegate OnMaxShieldValueUpdate;//[Offset: 0x1148, Size: 0x10]
	delegate FOnSteamRechargeShield;//[Offset: 0x1158, Size: 0x10]
	delegate TryCancelCountDown;//[Offset: 0x1168, Size: 0x10]
	delegate OnEnemyShieldChanged;//[Offset: 0x1178, Size: 0x10]
	delegate OnEnemyShieldValueChanged;//[Offset: 0x1188, Size: 0x10]
	delegate OnShieldUpgradeStart;//[Offset: 0x1198, Size: 0x10]
	delegate OnShieldUpgradeInterrupt;//[Offset: 0x11a8, Size: 0x10]
	delegate OnShieldUpgradeFinish;//[Offset: 0x11b8, Size: 0x10]
	delegate OnShieldUpgradeItemCountChanged;//[Offset: 0x11c8, Size: 0x10]
	delegate OnShieldUpgradeItemCountChangedBP;//[Offset: 0x11d8, Size: 0x10]
	delegate OnAckShieldUpgradeShopInteract;//[Offset: 0x11e8, Size: 0x10]
	delegate TryOpenTreasureBoxDelegate;//[Offset: 0x11f8, Size: 0x10]
	delegate TryOpenAirDropTreasureBoxDelegate;//[Offset: 0x1208, Size: 0x10]
	delegate TryCancelAirDropTreasureBoxDelegate;//[Offset: 0x1218, Size: 0x10]
	delegate TryPickupFirstItemDelegate;//[Offset: 0x1228, Size: 0x10]
	delegate CheckPickupItemValidDelegate;//[Offset: 0x1238, Size: 0x10]
	delegate CheckPickupItemValidInBackpack;//[Offset: 0x1248, Size: 0x10]
	delegate SelectItemIndex;//[Offset: 0x1258, Size: 0x10]
	delegate SelectPreviousItem;//[Offset: 0x1268, Size: 0x10]
	delegate SelectNextItem;//[Offset: 0x1278, Size: 0x10]
	delegate OnPickupEntryPlayAnim;//[Offset: 0x1298, Size: 0x10]
	delegate OnRequstPickupEntryPlayAnim;//[Offset: 0x12a8, Size: 0x10]
	delegate OnRequstPickupEntryPlayAnimCustom;//[Offset: 0x12b8, Size: 0x10]
	delegate OnRequstPickupSpecificItem;//[Offset: 0x12c8, Size: 0x10]
	delegate NotifyTeammateReviving;//[Offset: 0x12d8, Size: 0x10]
	delegate OnInteractEvent;//[Offset: 0x12e8, Size: 0x10]
	delegate OnSetBackpackDropMaskVisibility;//[Offset: 0x12f8, Size: 0x10]
	delegate OnEndBackpackDragDrop;//[Offset: 0x1308, Size: 0x10]
	delegate OnBackpackHUDVisibilityChanged;//[Offset: 0x1318, Size: 0x10]
	delegate OnBattleHUDVisibilityChanged;//[Offset: 0x1348, Size: 0x10]
	delegate OnMicroPhonePressed;//[Offset: 0x1358, Size: 0x10]
	delegate OnSpeakerPressed;//[Offset: 0x1368, Size: 0x10]
	delegate OnSwitchEMP;//[Offset: 0x1378, Size: 0x10]
	delegate OnToggleAssistAim;//[Offset: 0x1388, Size: 0x10]
	delegate OnToggleAutoFire;//[Offset: 0x1398, Size: 0x10]
	delegate OnTreatmentEnd;//[Offset: 0x13a8, Size: 0x10]
	void VehicleWeaponScopeChanged__DelegateSignature(bool BOpened);// 0x287904f39041
	void VehicleWeaponNoAmmoAlert__DelegateSignature();// 0x287804f39041
	void VehicleTypeChanged__DelegateSignature();// 0x287704f39041
	void VehicleFlyingProgress__DelegateSignature(bool bVisible);// 0x287604f39041
	void VehicleAbilityActivationChanged__DelegateSignature(bool bInActivated, bool bCanCancel, int InAbilityIndex, float InDurationTime);// 0x287504f39041
	void TwoIntUIInteractDelegate__DelegateSignature(int Value01, int Value02);// 0x287404f39041
	void TwoIntImplementableDelegate__DelegateSignature(int Value01, int Value02);// 0x287304f39041
	bool TrySkydiveUnfollow__DelegateSignature();// 0x287204f39041
	void TransformerWeaponChanged__DelegateSignature(enum InType);// 0x287004f39041
	void Top3Team__DelegateSignature();// 0x286f04f39041
	void ToggledBigMapVisibility();// 0x286e04f39041
	void ToggledBackpackVisibility();// 0x286d04f39041
	void StopDrivingTutorial();// 0x286c04f39041
	void SprintLockIconActived__DelegateSignature(out const Vector2D InSprintPosition);// 0x286b04f39041
	void SolarPlayerStateDelegate__DelegateSignature(SolarPlayerState* InPlayerState);// 0x286a04f39041
	void SimpleUIInteractDelegate__DelegateSignature();// 0x286904f39041
	void SimpleTriggerDelegate__DelegateSignature();// 0x286804f39041
	void SimpleStringDelegate__DelegateSignature(FString Value);// 0x286704f39041
	void SimpleSpectatorDelegate__DelegateSignature();// 0x286604f39041
	void SimplePlayerStateDelegate__DelegateSignature(SolarPlayerState* TeammatePS);// 0x286504f39041
	void SimpleOnRefreshDelegate__DelegateSignature();// 0x286404f39041
	bool SimpleOnBindRetOneParamDelegate__DelegateSignature(bool bAutoPickup);// 0x286304f39041
	bool SimpleOnBindRetOneIntParamDelegate__DelegateSignature(int InIthisID);// 0x286204f39041
	bool SimpleOnBindRetDelegate__DelegateSignature();// 0x286104f39041
	void SimpleOnBindDelegate__DelegateSignature();// 0x286004f39041
	void SimpleImplementableDelegate__DelegateSignature();// 0x285f04f39041
	void SimpleFloatDelegate__DelegateSignature(float Value);// 0x285e04f39041
	void SimpleCharacterLuaDelegate__DelegateSignature();// 0x285d04f39041
	void SimpleBoolDelegate__DelegateSignature(bool Value);// 0x285c04f39041
	void ShowSuperScanChooseUI(bool bShow);// 0x285b04f39041
	void ShieldUpgradeItemCntChangedBPDelegate__DelegateSignature(const int ShieldLevel, const int ShieldMaxLevel, const int ShieldUpgradeItemNum, const int NeedShieldUpgradeItemNum, const int MaxShieldUpgradeItemNum);// 0x285a04f39041
	void SetRescueBtnVisibility(bool bVisible);// 0x285904f39041
	void SetMapVehicleSpawnListVisibility(bool bVisible);// 0x285804f39041
	void SetElectricShopVisibility(bool bVisible);// 0x285704f39041
	void SetBuyResurrectBtnVisibility(const bool bVisible);// 0x285604f39041
	void SetBigMapVisibility(bool bVisible);// 0x285504f39041
	void SetBackpackVisibility(bool bInValue);// 0x285404f39041
	void RequestHideInteractionList();// 0x285304f39041
	void RequestCancelHideInteractionList();// 0x285204f39041
	void RemoveItemFromPickup(Object* InCardItem, const bool bPickup);// 0x285104f39041
	void PlayerTutorialSequence(const bool bPlay);// 0x285004f39041
	void PickupListRemoveDelegate__DelegateSignature(Object* CardItem, bool bPickup);// 0x284f04f39041
	void PickupListDelegate__DelegateSignature(Object* CardItem);// 0x284e04f39041
	void OnWidgetVisibilitySet__DelegateSignature(bool bVisible);// 0x284d04f39041
	void OnWidgetButtonClicked__DelegateSignature();// 0x284c04f39041
	void OnVehicleWeaponAbilityActivated__DelegateSignature(bool bInActive);// 0x284b04f39041
	void OnVehicleScopeValueChanged__DelegateSignature(float InValue);// 0x284a04f39041
	void OnVehicleScopeInitialized__DelegateSignature(UserWidget* Widget, bool bInSpectate);// 0x284904f39041
	void OnUpdateVehicleInteractionDelegate__DelegateSignature(enum UiState, SolarVehiclePawn* InVehicleComponent);// 0x284704f39041
	void OnTutorialSequenceRequested__DelegateSignature(bool bPlay);// 0x284604f39041
	void OnTrySpawnSuperRadar__DelegateSignature(bool bSpawn);// 0x284504f39041
	void OnTreatmentDelegate__DelegateSignature(bool bWasCancelled);// 0x284404f39041
	void OnTeamMessageReceive__DelegateSignature(FString MemberName, FString Message1, bool bLocalPlayer, bool bSound, int PosInTeam, FString Message2);// 0x284304f39041
	void OnTeammateTalentStateChanged__DelegateSignature(enum TalentState, byte PosInTeam, float AdditionalParam);// 0x284204f39041
	void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh);// 0x284104f39041
	void OnTeammateShieldChanged__DelegateSignature(byte PosInTeam, out const ShieldInfo OldShield, out const ShieldInfo NewShield);// 0x284004f39041
	void OnTeammateReviveStateChanged__DelegateSignature(SolarPlayerState* RevivingMePlayer, SolarPlayerState* SolarPlayerState);// 0x283f04f39041
	void OnTeammateReviveItemChanged__DelegateSignature(byte PosInTeam, byte ReviveItemNum, bool bCanRebirth);// 0x283e04f39041
	void OnTeammateResurrectTimeChanged__DelegateSignature(SolarPlayerState* SolarPlayerState, int ResurrectTime, int ResurrectTimeCfg);// 0x283d04f39041
	void OnTeammateRescueStateChanged__DelegateSignature(SolarCharacter* InCharacter);// 0x283c04f39041
	void OnTeammatePlatStateRemove__DelegateSignature(byte PosInTeam, bool bLastOne);// 0x283b04f39041
	void OnTeammateIntegerDataChanged__DelegateSignature(int Data, byte PosInTeam);// 0x283a04f39041
	void OnTeammateHUDIntoScreen__DelegateSignature(SolarPlayerState* SolarPlayerState);// 0x283904f39041
	void OnTeammateHPChanged__DelegateSignature(byte PosInTeam, float CurrentHP, float MaxHP);// 0x283804f39041
	void OnTeammateCallForHelpNotify__DelegateSignature(SolarPlayerState* SolarPlayerState);// 0x283704f39041
	void OnTeammateBattleStateChanged__DelegateSignature(SCMPlayerState* TeammateState);// 0x283604f39041
	void OnTeammateActionStateChanged__DelegateSignature(SolarPlayerState* SolarPlayerState, const GameplayTag Tag, int NewCount);// 0x283504f39041
	void OnSwitchToNextVehicleScope__DelegateSignature();// 0x283404f39041
	void OnSwitchEMP__DelegateSignature(SolarCharacter* InCharacter, bool InbSwitchOnEMP);// 0x283304f39041
	void OnSuperScaningWidgetShow__DelegateSignature(bool bShow);// 0x283204f39041
	void OnSuperScaningStart__DelegateSignature(out const FString[] InScanPlayers);// 0x283104f39041
	void OnSuperScaningRemovePlayer__DelegateSignature(FString InRemovePlayer);// 0x283004f39041
	void OnSuperScaningEnd__DelegateSignature();// 0x282f04f39041
	void OnStopCountDownDelegate__DelegateSignature(const int InTextId);// 0x282e04f39041
	void OnSteamRechargeShieldDecl__DelegateSignature(const bool bUseBigRecharger);// 0x282d04f39041
	void OnStartCountDownDelegate__DelegateSignature(out const CountDownInfo InCountDownInfo);// 0x282c04f39041
	void OnSprintIconHide__DelegateSignature();// 0x282b04f39041
	void OnSprintIconActived__DelegateSignature(out const Vector2D InSprintPosition);// 0x282a04f39041
	void OnSpectateTargetItemsChanged__DelegateSignature(ReplicateItemData[] InItemDatas);// 0x282904f39041
	void OnSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x282804f39041
	void OnSpectateReferToChanged__DelegateSignature(const SolarPlayerState* ReferToPlayerState, enum State);// 0x282604f39041
	void OnSpectateBattleUpgradeEffectUpdate__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x282504f39041
	void OnSpecTargetOrLocalCauseDamageChanged__DelegateSignature(float CauseDamage);// 0x282404f39041
	void OnSpecTargetOrLocalAssistChanged__DelegateSignature(int Assist);// 0x282304f39041
	void OnSpecTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x282204f39041
	void OnSkydivingMemberDataUpdated__DelegateSignature(SolarPlayerState* MemberPS);// 0x282104f39041
	void OnSkydivingFollowRequestResponded__DelegateSignature(SolarPlayerState* Follower, bool bAgreed);// 0x282004f39041
	void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed);// 0x281f04f39041
	void OnSkydiveFlyStateChanged__DelegateSignature(SolarCharacter* InCharacter);// 0x281e04f39041
	void OnSkydiveDataUpdate__DelegateSignature(float NewData);// 0x281d04f39041
	void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue);// 0x281c04f39041
	void OnSkillActivationChanged__DelegateSignature(bool bActivated);// 0x281b04f39041
	void OnShowGameNotice__DelegateSignature(const int InNoticeID, out const HUDNoticeParams InNoiceParams);// 0x281a04f39041
	void OnShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, FString SolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x281904f39041
	void OnShieldDelegate__DelegateSignature();// 0x281804f39041
	void OnShieldChanged__DelegateSignature(float CurValue, float MaxValue, int QualityColor, bool bAdvancedShield);// 0x281704f39041
	void OnShieldAvailableChanged__DelegateSignature(bool bAvailable);// 0x281604f39041
	void OnSetTreasureBoxActorDelegate__DelegateSignature(Actor* InActor);// 0x281504f39041
	void OnSetPickupSwitchDelegate__DelegateSignature(enum InType, bool InFlag);// 0x281404f39041
	void OnSetGameNoticeVisibility__DelegateSignature(enum InNoticeType, bool InVisibility);// 0x281304f39041
	void OnSetBackpackDropMaskVisibility__DelegateSignature(bool bVisible);// 0x281204f39041
	void OnSetActiveOpenBoxDelegate__DelegateSignature(bool Inactive);// 0x281104f39041
	void OnSelectItemIndexDelegate__DelegateSignature(int Index);// 0x281004f39041
	void OnSelectingBattleUpgradeEffectFinish__DelegateSignature(int SelectedIndex);// 0x280f04f39041
	void OnSelectingBattleUpgradeEffectBegin__DelegateSignature(SolarCharacter* Target, int Level, out const int[] EffectIDArray);// 0x280e04f39041
	void OnScoutedCharactersChange__DelegateSignature(FString[] ScoutedCharacters, FString[] ToBeScoutedCharacters);// 0x280d04f39041
	void OnRoleRecoveringShieldChange__DelegateSignature(const float InCurrentShieldValue, const float InRecoveringShieldValue);// 0x280c04f39041
	void OnRoleRecoveringHealthChange__DelegateSignature(const float InCurrentHealthValue, const float InRecoveringHealthValue);// 0x280b04f39041
	void OnRoleGEShieldMultiRecoverCoolDownChange__DelegateSignature(int NewCount);// 0x280a04f39041
	void OnRoleAbilityUsingStatusChanged__DelegateSignature(const GameplayTag Tag, int NewCount);// 0x280904f39041
	void OnRoleAbilityStateChange__DelegateSignature(int RoleAbilityIndex, int State);// 0x280804f39041
	void OnRoleAbilityStartCDUTCTimeUpdate__DelegateSignature(int RoleAbilityIndex, float InServerTime);// 0x280704f39041
	void OnRoleAbilityStartCD__DelegateSignature(int RoleAbilityIndex, float StartCDServerTime, float StartCDTimeForReplay);// 0x280604f39041
	void OnRoleAbilityInputAction__DelegateSignature(int RoleAbilityIndex, bool bPress, bool bCanActive);// 0x280504f39041
	void OnRoleAbilityHideControlHUD__DelegateSignature(bool bHide);// 0x280404f39041
	void OnRoleAbilityEndCD__DelegateSignature(int RoleAbilityIndex);// 0x280304f39041
	void OnRoleAbilityEnd__DelegateSignature(int RoleAbilityIndex);// 0x280204f39041
	void OnRoleAbilityContinous__DelegateSignature(int RoleAbilityIndex, bool bTurnOn, float Duration);// 0x280104f39041
	void OnRoleAbilityChange__DelegateSignature(int RoleAbilityIndex, bool bHaveAbility, int CharacterId, int PlayerLevel);// 0x280004f39041
	void OnRoleAbilityCDDurationChange__DelegateSignature(int RoleAbilityIndex, int Duration, bool bDurationReduced);// 0x27ff04f39041
	void OnRoleAbilityCanTriggerAgain__DelegateSignature(int RoleAbilityIndex, bool bCanTriggerAgain, float LeftTime, float Duration);// 0x27fe04f39041
	void OnRoleAbilityBuffUpdate__DelegateSignature(out const ActiveGameplayEffectHandle ActiveEffectHandle, float Duration, float RemainTime, bool bInPrePhase, float PreDuration, float PreRemainTime);// 0x27fd04f39041
	void OnRoleAbilityBuffPause__DelegateSignature(bool bIsMainDuration, const SolarCharacter* SourceCharacter, byte AbilityIndex);// 0x27fc04f39041
	void OnRoleAbilityBuffEnd__DelegateSignature(bool bIsMainDuration, out const ActiveGameplayEffectHandle InGameplayEffectHandle);// 0x27fb04f39041
	void OnRoleAbilityBuffContinous__DelegateSignature(bool bIsMainDuration, const SolarCharacter* SourceCharacter, byte AbilityIndex, float Duration, float PreDuration, out const ActiveGameplayEffectHandle ActiveEffectHandle);// 0x27fa04f39041
	void OnRoleAbilityAddSummonBuff__DelegateSignature(out const SoftObjectPath ImagePath, const Actor* InActor);// 0x27f904f39041
	void OnReviveStateChanged__DelegateSignature(SolarPlayerState* RevivingMePlayer);// 0x27f804f39041
	void OnRepliableMessageChanged__DelegateSignature();// 0x27f704f39041
	void OnRemindTeammateRescueNotify__DelegateSignature(SolarPlayerState* SolarPlayerState);// 0x27f604f39041
	void OnRechargeShieldEnd__DelegateSignature(bool bWasCancelled);// 0x27f504f39041
	void OnQuickVoiceWheelLongPressEnd__DelegateSignature(bool bPlayerDead);// 0x27f404f39041
	void OnPoisonEffectUpdated__DelegateSignature(float PosX, float PosY, float Radius);// 0x27f304f39041
	void OnPlayersCountChanged__DelegateSignature(int Num);// 0x27f204f39041
	void OnPlayerFlagDisplayChanged__DelegateSignature(bool bDisplay);// 0x27f104f39041
	void OnPlayerDead__DelegateSignature(out const KillInfo DeathMsgInfo);// 0x27ee04f39041
	void OnPickupSingleDataUpdated__DelegateSignature(const Object* InPickupItem);// 0x27ed04f39041
	void OnPickupListVisibilityChanged__DelegateSignature(bool bVisible);// 0x27ec04f39041
	void OnPickupListDataUpdated__DelegateSignature(out const Object*[] InPickupItemList, out const int[] InThisIds);// 0x27eb04f39041
	void OnPickupItemSet__DelegateSignature(out const Actor*[] InActorList, const enum InType, const bool bShowPickupList);// 0x27ea04f39041
	void OnPickupItemSelected__DelegateSignature(Object* SelectWidget, int SelectWidgetThisID);// 0x27e904f39041
	void OnPickupFlagChanged__DelegateSignature(bool bFlag, bool bNotSelf);// 0x27e804f39041
	void OnPickupCheckValidUpdated__DelegateSignature(out const ItemCountsList ItemCountsList);// 0x27e704f39041
	void OnPickupCheckStatesUpdated__DelegateSignature(bool bItemUpdate);// 0x27e604f39041
	void OnPickupCheckHighlightUpdated__DelegateSignature(enum Type, bool IsRecommend);// 0x27e504f39041
	void OnOverlapElectricShopDelegate__DelegateSignature(const bool InOverlap);// 0x27e404f39041
	void OnOnTeammateHUDOutScreen__DelegateSignature(SolarPlayerState* SolarPlayerState);// 0x27e304f39041
	void OnNavMapMarked__DelegateSignature(byte PosInTeam, out const Vector2D MarkPosition);// 0x27e204f39041
	void OnNavMapMarkCleared__DelegateSignature(byte PosInTeam);// 0x27e104f39041
	void OnMobileWeaponInputAction__DelegateSignature(byte InButtonType);// 0x27df04f39041
	void OnMemberFlagIDChanged__DelegateSignature(int FlagID, bool bClanFlag);// 0x27de04f39041
	void OnMaxShieldValueUpdate__DelegateSignature(const float MaxShieldVal);// 0x27dd04f39041
	void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter, Vector2D TouchLocalPos);// 0x27dc04f39041
	void OnMarkButtonSimpleTriggered__DelegateSignature();// 0x27db04f39041
	void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered);// 0x27da04f39041
	void OnKillLeaderChangedNotify__DelegateSignature(SolarPlayerState* KillLeader);// 0x27d904f39041
	void OnJetTimesChanged__DelegateSignature(int NewTimes);// 0x27d804f39041
	void OnJetModuleLevelChanged__DelegateSignature(int NewLevel);// 0x27d704f39041
	void OnJetFlyStateChanged__DelegateSignature(bool bStart);// 0x27d604f39041
	void OnJetFlyForbiddenChanged__DelegateSignature(enum ForbiddenType, bool bAdded);// 0x27d504f39041
	void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent);// 0x27d404f39041
	void OnInteractionTriggerDelegate__DelegateSignature(out const InteractionTriggerInfo TriggerInfo);// 0x27d304f39041
	void OnInputTypeChanged__DelegateSignature(SolarPlayerState* PlayerState);// 0x27d204f39041
	void OnInputSprintLockStart__DelegateSignature();// 0x27d104f39041
	void OnInitElectricShopDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x27d004f39041
	void OnInhibitBattlePromptTagChanged__DelegateSignature(const GameplayTag Tag, int NewCount);// 0x27cf04f39041
	UserWidget* OnHomelandGetWidget__DelegateSignature();// 0x27ce04f39041
	void OnHideUIByThisIDDelegate__DelegateSignature(int64 InThisID);// 0x27cd04f39041
	void OnEShopWeaponUpgradeDelegate__DelegateSignature(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x27cc04f39041
	void OnEShopWeaponChangeDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x27cb04f39041
	void OnEShopSlotWeaponUpgradeDelegate__DelegateSignature(int InWeaponSlot);// 0x27ca04f39041
	void OnEShopShieldUpgradeDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x27c904f39041
	void OnEShopPurchaseSuccessDelegate__DelegateSignature(int InProductID, SolarCharacter* InCharacter);// 0x27c804f39041
	void OnEShopInfoUpdateDelegate__DelegateSignature(SolarElectricShop* InElectricShop);// 0x27c704f39041
	void OnEnemyShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, FString SolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x27c604f39041
	void OnEnemyShieldChanged__DelegateSignature(FString SolarPlayerID, float CurValue, float MaxValue, int QualityColor, bool bAdvancedShield);// 0x27c504f39041
	void OnEndMatchCountdownChanged__DelegateSignature(int Seconds);// 0x27c404f39041
	void OnDrivingTutorialStopped__DelegateSignature();// 0x27c304f39041
	void OnDrivingStateChanged__DelegateSignature(enum DriveState);// 0x27c204f39041
	void OnDoppelgangerActive__DelegateSignature(SolarCharacter* InDoppelganger, bool bActive);// 0x27c104f39041
	void OnDamagingActorsChange__DelegateSignature();// 0x27c004f39041
	void OnCreateReviveWorldMarkDelegate__DelegateSignature(SolarPlayerState* InPlayerState, out const Vector InWorldLoc);// 0x27bf04f39041
	void OnCreateCustomMapMarkDelegate__DelegateSignature(class MapMarkBase MapMarkClass, Actor* OwnerActor, out const Vector2D MarkPos, bool bSupportEdge, bool bSupportEdgeInBigMap, int ZOrder);// 0x27be04f39041
	void OnCharacterStateChanged__DelegateSignature();// 0x27bd04f39041
	void OnCharacterSet__DelegateSignature(SolarCharacter* ControlledCharacter);// 0x27bc04f39041
	void OnCharacterSelfRebirth__DelegateSignature(SolarCharacter* RebirthCharacter);// 0x27bb04f39041
	void OnCharacterRescueStateChanged__DelegateSignature(byte NewRescueState);// 0x27ba04f39041
	void OnCharacterNightComesActorChanged__DelegateSignature(Actor* InActor);// 0x27b904f39041
	void OnCharacterLevelUp__DelegateSignature(int NewLevel, int OldLevel);// 0x27b804f39041
	void OnCharacterLevelExpChanged__DelegateSignature(int NewLevel, float NewExpRatio);// 0x27b704f39041
	void OnCharacterLevelChanged__DelegateSignature(int InLevel);// 0x27b604f39041
	void OnCharacterIDSet__DelegateSignature(int CharacterId);// 0x27b504f39041
	void OnCharacterHPChanged__DelegateSignature(float CurrentHP, float MaxHP);// 0x27b404f39041
	void OnCharacterGainExp__DelegateSignature(int ExpAdded);// 0x27b304f39041
	void OnCharacterDead__DelegateSignature(SolarCharacter* InCharacter);// 0x27b204f39041
	void OnCharacterAllReady__DelegateSignature(SolarCharacter* ControlledCharacter);// 0x27b104f39041
	void OnCanSkilledJump__DelegateSignature(bool bValue);// 0x27b004f39041
	void OnBombingStarted__DelegateSignature(int BombId, out const Vector Location, float Radius);// 0x27af04f39041
	void OnBattleUpgradeEffect__DelegateSignature(enum EffectType, int ParamSum);// 0x27ae04f39041
	void OnBattleModeChanged__DelegateSignature(byte NewModeType);// 0x27ad04f39041
	void OnBattleHUDVisibilityChanged__DelegateSignature(bool bVisible);// 0x27ac04f39041
	void OnBackpackTookPickup__DelegateSignature(out const Vector2D NewPosition);// 0x27ab04f39041
	void OnAirdropBoxInfoChangeDelegate__DelegateSignature(AirDropTreasureBox* InAirdropBox);// 0x27aa04f39041
	void OnAimingEnemy__DelegateSignature(SolarCharacter* InEnemy);// 0x27a904f39041
	void MapVehicleSpawnListInitialized__DelegateSignature();// 0x27a804f39041
	void LocalPlayerSkidivingCaptainChanged__DelegateSignature(int TeamIndex, FString playerName, bool IsLocalPlayer);// 0x27a704f39041
	void JoyStickSimpleDeleghate__DelegateSignature();// 0x27a604f39041
	bool IsElectricShopVisible();// 0x27a504f39041
	bool IsBigMapVisible();// 0x27a404f39041
	void IntUIInteractDelegate__DelegateSignature(int Value);// 0x27a304f39041
	void IntImplementableDelegate__DelegateSignature(int Value);// 0x27a204f39041
	void InternalCallSkydiveSpeed();// 0x27a104f39041
	void InternalCallSkydiveFlyStateChanged();// 0x27a004f39041
	void IntCharacterLuaDelegate__DelegateSignature(int Value);// 0x279f04f39041
	void HitTraceInfoDelegate__DelegateSignature(out const HitTraceInfo Info);// 0x279e04f39041
	SolarUserWidget* GetWorldMarkPanel();// 0x279d04f39041
	UserWidget* GetTeammateHomePanel();// 0x279c04f39041
	HUDDispatcherBase* GetHUDDispatcher_FromUI(const Widget* InWidget);// 0x279b04f39041
	HUDDispatcherBase* GetHUDDispatcher_FromPC(const PlayerController* InPC);// 0x279a04f39041
	HUDDispatcherBase* GetHUDDispatcher_FromHUD(const HUD* InHUD);// 0x279904f39041
	HUDDispatcherBase* GetHUDDispatcher_FromCharacter(const SolarCharacter* InCharacter, bool bCheckControlled);// 0x279804f39041
	UserWidget* GetHomeMainBuild();// 0x279704f39041
	UserWidget* GetHomeLevelUpUI();// 0x279604f39041
	UserWidget* GetHomeFriendList();// 0x279504f39041
	UserWidget* GetHomeBattleUI();// 0x279404f39041
	void BroadcastVJetForbiddenChanged(enum Types, bool bAdded);// 0x279304f39041
	void BroadcastVJetCDStateChanged(bool bCD);// 0x279204f39041
	void BroadcastTrySpawnSuperRadar(bool bSpawn);// 0x279104f39041
	bool BroadcastTryPickupFirstItem(const bool bAutoPickup);// 0x279004f39041
	void BroadcastTop3Team();// 0x278f04f39041
	void BroadcastToggleCursorVisibility(const bool bIsVisible);// 0x278e04f39041
	void BroadcastToggleAutoFire();// 0x278d04f39041
	void BroadcastToggleAssistAim();// 0x278c04f39041
	void BroadcastSpectateTargetItemsChanged(out const ReplicateItemData[] InItemDatas);// 0x278b04f39041
	void BroadcastSpectateTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x278a04f39041
	void BroadcastSpectateBattleUpgradeEffectUpdate(SolarSpectateInfo* SpectateInfo);// 0x278904f39041
	void BroadcastSkydiveSpeed();// 0x278804f39041
	bool BroadcastShieldValueChanged(const enum WidgetState, const float InCurValue, const float InChangeValue, FString InSolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x278704f39041
	void BroadcastShieldUpgradeStart();// 0x278604f39041
	void BroadcastShieldUpgradeShopInteract();// 0x278504f39041
	void BroadcastShieldUpgradeItemCountChanged(const int NewCount, const int LastCount);// 0x278404f39041
	void BroadcastShieldUpgradeInterrupt();// 0x278304f39041
	void BroadcastShieldUpgradeFinish();// 0x278204f39041
	void BroadcastShieldFXUpdated();// 0x278104f39041
	bool BroadcastShieldChanged(const float CurValue, const float MaxValue, const int QualityColor, const bool bAdvancedShield);// 0x278004f39041
	bool BroadcastShieldAvailable(const bool bAvailable);// 0x277f04f39041
	void BroadcastSettingRequestOpened(const int InOwnerType);// 0x277e04f39041
	void BroadcastSettingRequestClosed();// 0x277d04f39041
	void BroadcastSetBackpackDropMaskVisibility(const bool bVisible);// 0x277c04f39041
	void BroadcastSelectPreviousItem();// 0x277b04f39041
	void BroadcastSelectNextItem();// 0x277a04f39041
	void BroadcastSelectItemIndex(const int Index);// 0x277904f39041
	void BroadcastSelectingBattleUpgradeEffectFinish(int SelectedIndex);// 0x277804f39041
	void BroadcastSelectingBattleUpgradeEffectBegin(SolarCharacter* Target, int Level, out const int[] EffectIDArray);// 0x277704f39041
	void BroadcastScoutCharactersChange(FString[] ScoutedCharacters, FString[] ToBeScoutedCharacters);// 0x277604f39041
	void BroadcastRescueBtnVisibility();// 0x277504f39041
	void BroadcastRequsetPickupSpecificItem(const int InThisID, const int InPeferSlotIndex);// 0x277404f39041
	void BroadcastRequsetPickupEntryPlayAnimCustom(Object* InCustomObj);// 0x277304f39041
	void BroadcastRequsetPickupEntryPlayAnim(const int InThisID);// 0x277204f39041
	void BroadcastProfessionFunctionalChanged(const bool bEnabled);// 0x277104f39041
	void BroadcastPlayerFlagDisplayChanged(bool bDisplay);// 0x277004f39041
	void BroadcastPickupToggleChanged();// 0x276f04f39041
	void BroadcastPickupEntryPlayAnim(const float InAnimTime);// 0x276e04f39041
	void BroadcastOnTeammateStateChangedDelegate();// 0x276d04f39041
	void BroadcastOnTeammateRebirth();// 0x276c04f39041
	void BroadcastOnStopRescueTeammateCountDown(const int InTextId);// 0x276b04f39041
	void BroadcastOnStopInteractionCountDown(out const CountDownInfo InCountInfo);// 0x276a04f39041
	void BroadcastOnStopCountDownDelegate(const int InTextId);// 0x276904f39041
	void BroadcastOnStartReviveItemRecycleCountDown(const int CurrentTime, const int DurationTime);// 0x276804f39041
	void BroadcastOnStartRescueTeammateCountDown(out const CountDownInfo InCountDownInfo);// 0x276704f39041
	void BroadcastOnStartInteractionCountDown(out const CountDownInfo InCountInfo);// 0x276604f39041
	void BroadcastOnStartCountDownDelegate(out const CountDownInfo InCountDownInfo);// 0x276304f39041
	void BroadcastOnSkydiveFlyStateChanged();// 0x276204f39041
	void BroadcastOnShowGameNoticeDelegate(const int InNoticeID, out const HUDNoticeParams InNoticeParams);// 0x276004f39041
	void BroadcastOnSetTreasureBoxActorDelegate(Actor* InActor);// 0x275f04f39041
	void BroadcastOnSetPickupSwitchDelegate(const enum InType, const bool InFlag);// 0x275e04f39041
	void BroadcastOnSetGameNoticeVisibility(enum InNoticeType, bool InVisibility);// 0x275d04f39041
	void BroadcastOnSetAirdropBoxActorDelegate(Actor* InActor);// 0x275c04f39041
	void BroadcastOnSetActiveOpenBoxProgressDelegate(const bool Inactive);// 0x275b04f39041
	void BroadcastOnSetActiveOpenBoxBtnDelegate(const bool Inactive);// 0x275a04f39041
	void BroadcastOnRightMouseButtonDownEvent();// 0x275904f39041
	void BroadcastOnReviveWorldMarkPlayAnim(SolarPlayerState* InPlayerState);// 0x275804f39041
	void BroadcastOnReviveWillBeDisabledHint(const int HintDuration);// 0x275704f39041
	void BroadcastOnReviveStateChanged(SolarPlayerState* RevivingMeTeammatePlayer);// 0x275604f39041
	void BroadcastOnReviveDisabledHint();// 0x275504f39041
	void BroadcastOnRemoveReviveWorldMark(SolarPlayerState* InPlayerState);// 0x275404f39041
	void BroadcastOnRemoveAllReviveWorldMark();// 0x275304f39041
	void BroadcastOnRefreshBackpackWeaponPartDelegate();// 0x275204f39041
	void BroadcastOnRefreshBackpackWeaponDelegate();// 0x275104f39041
	void BroadcastOnRefreshBackpackItemDelegate();// 0x275004f39041
	void BroadcastOnRefreshBackpackEquipDelegate();// 0x274f04f39041
	void BroadcastOnOverlapElectricShopDelegate(const bool InOverlap);// 0x274e04f39041
	void BroadcastOnOnCreateReviveWorldMark(SolarPlayerState* InPlayerState, out const Vector InWorldLoc);// 0x274d04f39041
	void BroadcastOnInteractionTriggerDisappear(out const InteractionTriggerInfo TriggerInfo);// 0x274c04f39041
	void BroadcastOnInteractionTriggerAppear(out const InteractionTriggerInfo TriggerInfo);// 0x274a04f39041
	bool BroadcastOnInteractEvent();// 0x274904f39041
	void BroadcastOnInitElectricShopDelegate(SolarCharacter* InCharcter);// 0x274804f39041
	void BroadcastOnHideTreasureBoxUIDelegate(const int64 InThisID);// 0x274704f39041
	void BroadcastOnHideAirdropBoxUIDelegate(const int64 InThisID);// 0x274604f39041
	void BroadcastOnGameUserPickupSettingChanged();// 0x274504f39041
	void BroadcastOnEShopWeaponUpgradeDelegate(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x274404f39041
	void BroadcastOnEShopWeaponChangeDelegate(SolarCharacter* InCharacter);// 0x274304f39041
	void BroadcastOnEShopSlotWeaponUpgradeDelegate(int InWeaponSlot);// 0x274204f39041
	void BroadcastOnEShopShieldUpgradeDelegate(SolarCharacter* InCharacter);// 0x274104f39041
	void BroadcastOnEShopPurchaseSuccessDelegate(int InProductID, SolarCharacter* InCharacter);// 0x274004f39041
	void BroadcastOnEShopPoolRefreshDelegate(SolarElectricShop* InElectricShop);// 0x273f04f39041
	void BroadcastOnEShopItemRefreshDelegate(SolarElectricShop* InElectricShop);// 0x273e04f39041
	void BroadcastOnEShopItemCDRefreshDelegate(SolarElectricShop* InElectricShop);// 0x273d04f39041
	void BroadcastOnCreateCustomMapMark(class MapMarkBase MapMarkClass, Actor* OwnerActor, out const Vector2D MarkPos, bool bSupportEdge, bool bSupportEdgeInBigMap, int ZOrder);// 0x273c04f39041
	void BroadcastOnBindPowerBarDelegates();// 0x273b04f39041
	void BroadcastOnBindItemPanelDelegates();// 0x273a04f39041
	void BroadcastOnBindHPPanelDelegates();// 0x273904f39041
	void BroadcastOnBackpackHUDVisibilityChanged(const bool bVisible);// 0x273804f39041
	void BroadcastOnAirdropProgressChangeDelegate(AirDropTreasureBox* InAirdropBox);// 0x273704f39041
	void BroadcastOnAirdropCharChangeDelegate(AirDropTreasureBox* InAirdropBox);// 0x273604f39041
	void BroadcastMigrateAccountVisibilityRequestChanged(const bool bVisible);// 0x273504f39041
	void BroadcastMaxShieldValueUpdate(const float MaxShieldValue);// 0x273404f39041
	void BroadcastJoyStickSprintStateReset();// 0x273304f39041
	void BroadcastJoyStickResetAll();// 0x273204f39041
	void BroadcastJoyStickInputReset();// 0x273104f39041
	void BroadcastItemHUDStyleChange(const enum Style);// 0x272f04f39041
	void BroadcastItemDiscarded(const int InItemID, const int InTotalCount);// 0x272e04f39041
	void BroadcastHJetTimesChargingProgress(float Value, float Percent);// 0x272d04f39041
	void BroadcastHJetForbiddenChanged(enum Types, bool bAdded);// 0x272b04f39041
	void BroadcastHJetCDStateChanged(bool bCD);// 0x272a04f39041
	void BroadcastFireButtonsReset();// 0x272904f39041
	bool BroadcastEnemyShieldValueChanged(const enum WidgetState, const float InCurValue, const float InChangeValue, FString InSolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x272804f39041
	bool BroadcastEnemyShieldChanged(FString InSolarPlayerID, const float CurValue, const float MaxValue, const int QualityColor, const bool bAdvancedShield);// 0x272704f39041
	void BroadcastEndBackpackDragDrop(const bool bVisible);// 0x272604f39041
	void BroadcastDriveCustomizeOpened(const int InLayoutType);// 0x272504f39041
	void BroadcastDriveCustomizeClosed();// 0x272404f39041
	void BroadcastDamagingActorsChange();// 0x272304f39041
	void BroadcastCustomizeVisibilityRequestChanged(const bool bVisible);// 0x272204f39041
	bool BroadcastCheckPickupItemVaildInBackpack(const int InThisID);// 0x272104f39041
	bool BroadcastCheckPickupItemVaild(const int InThisID);// 0x272004f39041
	void BroadcastCharacterRescueStateChanged(const byte NewRescueState);// 0x271f04f39041
	void BroadcastCharacterLevelExpChanged(const int NewLevel, const float NewExpRatio);// 0x271e04f39041
	void BroadcastCharacterHPState();// 0x271d04f39041
	void BroadcastCharacterGainExp(const int ExpAdded);// 0x271c04f39041
	void BroadcastBuyResurrectBtnVisibility();// 0x271b04f39041
	void BroadcastBattleUpgradeEffect(const enum EffectType, const int ParamSum);// 0x271a04f39041
	void BroadcastBattleModeChanged(byte InModeType);// 0x271904f39041
	void BroadcastBattleHUDVisibilityChanged(const bool bVisible);// 0x271804f39041
	void BroadcastBackpackTakesPickup(out const Vector2D NewPosition);// 0x271704f39041
	void BroadcastBackpackReleasesPickup();// 0x271604f39041
	void BroadcastAimingEnemy(SolarCharacter* InEnemy);// 0x271504f39041
	void BoolUIInteractDelegate__DelegateSignature(bool bValue);// 0x271404f39041
	void BoolGameModeLuaDelegate__DelegateSignature(bool bValue);// 0x271304f39041
	void BoolCharacterLuaDelegate__DelegateSignature(bool bValue);// 0x271204f39041
	void BindLocalSpectateDelegates(SolarSpectateInfo* SpectateInfo);// 0x271104f39041
	void AddItemToPickup(Object* InCardItem);// 0x271004f39041
	void ActionWheelCommandExecDelegate__DelegateSignature();// 0x270f04f39041
	void ActionWheelCommandCancelDelegate__DelegateSignature();// 0x270e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CountDownInfo
	int TextID;//[Offset: 0x0, Size: 0x4]
	float Time;//[Offset: 0x4, Size: 0x4]
	float RemainingTime;//[Offset: 0x8, Size: 0x4]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int PassiveTextID;//[Offset: 0x10, Size: 0x4]
	GameplayTag GameplayTag;//[Offset: 0x14, Size: 0x8]
	int ContributorCharacterId;//[Offset: 0x40, Size: 0x4]
	enum State;//[Offset: 0x44, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUDNoticeParams
	<FString,FString> Params;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ItemCountsList
	<enum,int> Type2IntMap;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InteractionTriggerInfo
	GameplayTag GameplayTag;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayersHPModel.SolarCharactersModelBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharactersModelBase.Object
	<FString,SingleCharacterModelBase*> PlayersModel;//[Offset: 0x28, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayersShieldModel.SolarCharactersModelBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeamInfoModel.Object
	delegate OnTeamInfoReplicated;//[Offset: 0x40, Size: 0x10]
	void SimpleTeamInfoDelegate__DelegateSignature(SolarTeamInfo* PreTeamInfo, SolarTeamInfo* NowTeamInfo);// 0x2a0f04f39041
	void OnMyTeamInfoReplicated(SolarTeamInfo* InPreTeamInfo, SolarTeamInfo* InMyTeamInfo);// 0x2a0e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGroundPreviewActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x270, Size: 0xb8]
	float SpawnOffset;//[Offset: 0x328, Size: 0x4]
	SphereComponent* SphereComponent;//[Offset: 0x330, Size: 0x8]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x338, Size: 0x10]
	SoftObjectPath OutlineMatPath;//[Offset: 0x348, Size: 0x18]
	byte[] MarkedTeamIdList;//[Offset: 0x368, Size: 0x10]
	int WeaponLevel;//[Offset: 0x378, Size: 0x4]
	enum WeaponType;//[Offset: 0x37c, Size: 0x1]
	int FireModeNameLocalizationID;//[Offset: 0x380, Size: 0x4]
	SlateBrush TriggerIcon;//[Offset: 0x390, Size: 0xe0]
	int weaponid;//[Offset: 0x470, Size: 0x4]
	bool bIsItemWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 0x1]
	bool bIsSummonVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x475, Size: 0x1]
	bool bIsAntiVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x476, Size: 0x1]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x478, Size: 0x8]
	SolarItemBurstShowComponent* BurstShowComponent;//[Offset: 0x480, Size: 0x8]
	SolarLandscapeListenerConfig LandscapeListenerConfig;//[Offset: 0x490, Size: 0x10]
	void UnMarkThisItem(byte TeamID);// 0x525f04f39041
	void SetItemData(out const SolarItemData _ItemData);// 0x525e04f39041
	void OnRep_ItemDataChange();// 0x525d04f39041
	void NotifyThisItemWasPickedUp();// 0x525c04f39041
	void MarkThisItem(byte TeamID);// 0x525b04f39041
	int GetQuality();// 0x525a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameLevelManager.GameManagerBase.Info.Actor.Object
	FString DesiredLoadLevel;//[Offset: 0x248, Size: 0x10]
	FString[] DesiredLoadElementLevels;//[Offset: 0x268, Size: 0x10]
	FString[] DesiredUnLoadElementLevels;//[Offset: 0x278, Size: 0x10]
	<FString,LevelStreamingDynamic*> LevelKeyToObject;//[Offset: 0x330, Size: 0x50]
	<SolarCharacter*> MovementDisabledCharacters;//[Offset: 0x380, Size: 0x50]
	FString[] LoadingElementLevelNames;//[Offset: 0x430, Size: 0x10]
	FString[] UnLoadingElementLevelNames;//[Offset: 0x440, Size: 0x10]
	GameMapElementManager* MapElementManager;//[Offset: 0x468, Size: 0x8]
	void SetMinimapFootprintVisible(bool bVisible);// 0x479804f39041
	void OnStreamingLevelLoaded();// 0x479704f39041
	void OnScoutPlayerDepart();// 0x479604f39041
	void OnRep_DesiredUnLoadElementLevels();// 0x479504f39041
	void OnRep_DesiredLoadLevel();// 0x479404f39041
	void OnRep_DesiredLoadElementLevels();// 0x479304f39041
	void OnLevelLoaded();// 0x479204f39041
	void OnElementStreamingLevelUnLoaded();// 0x479104f39041
	void OnElementStreamingLevelLoaded();// 0x479004f39041
	void OnCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x478f04f39041
	void LevelManagerTick();// 0x478e04f39041
	int GetCurrentMapID();// 0x478d04f39041
	FString GetCurrentLevel();// 0x478c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameMapElementManager.GameManagerBase.Info.Actor.Object
	<FString,SCMMapElementBase*> MapElementListWithID;//[Offset: 0x228, Size: 0x50]
	SCMMapElementBase*[] MapElementList;//[Offset: 0x278, Size: 0x10]
	SCMPlayerStart*[] PlayerStartList;//[Offset: 0x288, Size: 0x10]
	void OnAddNewMapElement(Actor* InNewActor);// 0x479904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x254, Size: 0x4]
	FString Side;//[Offset: 0x258, Size: 0x10]
	FString Job;//[Offset: 0x268, Size: 0x10]
	FString ElementID;//[Offset: 0x278, Size: 0x10]
	enum Type;//[Offset: 0x288, Size: 0x1]
	enum State;//[Offset: 0x289, Size: 0x1]
	enum Visibility;//[Offset: 0x28a, Size: 0x1]
	FName ElementName;//[Offset: 0x28c, Size: 0x8]
	Vector[] PlayerLocations;//[Offset: 0x298, Size: 0x10]
	enum SetElementVisibility(const enum NewType);// 0x4c2804f39041
	enum SetElementState(const enum NewState);// 0x4c2704f39041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x4c2604f39041
	void OnElementStateChanged(const enum CurrentState);// 0x4c2504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameDataManager.GameManagerBase.Info.Actor.Object
	int[] IntegerValues;//[Offset: 0x230, Size: 0x10]
	float[] FloatValues;//[Offset: 0x240, Size: 0x10]
	byte[] ByteValues;//[Offset: 0x250, Size: 0x10]
	bool[] BoolValues;//[Offset: 0x260, Size: 0x10]
	Vector[] FVectorValues;//[Offset: 0x270, Size: 0x10]
	FString[] FStringValues;//[Offset: 0x280, Size: 0x10]
	SCMHostData GlobalDataMap;//[Offset: 0x2f0, Size: 0x488]
	<FString,SCMHostData> SideDataMap;//[Offset: 0x778, Size: 0x50]
	<FString,SCMHostData> PlayerDataMap;//[Offset: 0x7c8, Size: 0x50]
	SCMHostData SideDataDefaultTemplate;//[Offset: 0x818, Size: 0x488]
	SCMHostData PlayerDataDefaultTemplate;//[Offset: 0xca0, Size: 0x488]
	<FString,Rank*> RanKMap;//[Offset: 0x1128, Size: 0x50]
	DataTable* DataTable;//[Offset: 0x1198, Size: 0x8]
	DataTable* GeneralDataTable;//[Offset: 0x11a0, Size: 0x8]
	void RemoveHost(enum HostType, FString HostID);// 0x478704f39041
	void RemoveData(enum HostType, FString HostID, FString DataName, enum DataSetType);// 0x478604f39041
	void NotifyRemoveHost(enum HostType, FString HostID);// 0x478504f39041
	void AddDataByTableRow(FName RowName, out const SCMDataBoardRow InTableRow);// 0x478404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMHostData
	HostChangeData DataChangeToGlobal;//[Offset: 0x0, Size: 0xf0]
	HostChangeData DataChangeToSide;//[Offset: 0xf0, Size: 0xf0]
	HostChangeData DataChangeToSelf;//[Offset: 0x1e0, Size: 0xf0]
	<FString,SCMSaveData> DataMap;//[Offset: 0x2d0, Size: 0x50]
	<FString,SCMArrayData> ArrayDataMap;//[Offset: 0x320, Size: 0x50]
	<FString,SCMMapData> MapDataMap;//[Offset: 0x370, Size: 0x50]
	delegate SCMDataChangeDelegate;//[Offset: 0x460, Size: 0x10]
	FString Name;//[Offset: 0x470, Size: 0x10]
	enum HostType;//[Offset: 0x480, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HostChangeData
	<FString,enum> DataChangeMap;//[Offset: 0x0, Size: 0x50]
	<FString,SCMChangeDataArray> ArrayChangeMap;//[Offset: 0x50, Size: 0x50]
	<FString,SCMChangeDataMap> MapChangeMap;//[Offset: 0xa0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMChangeDataArray
	enum[] ChangeType;//[Offset: 0x0, Size: 0x10]
	uint32[] ChangeIndexArray;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMChangeDataMap
	enum[] ChangeType;//[Offset: 0x0, Size: 0x10]
	FString[] ChangeKeyArray;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMSaveData.SCMSaveDataBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMSaveDataBase
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum RepType;//[Offset: 0x11, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMArrayData.SCMSaveDataBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMMapData.SCMSaveDataBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMDataBoardRow.TableRowBase
	enum Type;//[Offset: 0x8, Size: 0x1]
	enum DataSetType;//[Offset: 0x9, Size: 0x1]
	FString Default;//[Offset: 0x10, Size: 0x10]
	FString[] DefaultArray;//[Offset: 0x20, Size: 0x10]
	<FString,FString> DefaultMap;//[Offset: 0x30, Size: 0x50]
	enum HostType;//[Offset: 0x80, Size: 0x1]
	enum ReplicateType;//[Offset: 0x81, Size: 0x1]
	enum SettleGatherType;//[Offset: 0x82, Size: 0x1]
	enum Rank;//[Offset: 0x83, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Rank.Object
	<uint32,SpecificRankChangeEventMap(MulticastInlineDelegateProperty)> SpecificRankChangeEventMap;//[Offset: 0x28, Size: 0x50]
	SCMRankListMulticast[] RankListChangeMulticasts;//[Offset: 0x78, Size: 0x10]
	enum RankType;//[Offset: 0xa8, Size: 0x1]
	enum HostType;//[Offset: 0xa9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMRankListMulticast
	int BeginRank;//[Offset: 0x0, Size: 0x4]
	int EndRank;//[Offset: 0x4, Size: 0x4]
	delegate RankListChangeMulticast;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomSettlementManager.GameManagerBase.Info.Actor.Object
	bool HasReportAllCompetitionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	void SettlePlayer(SolarPlayerState* InPlayer);// 0x473604f39041
	void SettleAllPlayer(out SolarPlayerState*[] InAllPlayers);// 0x473504f39041
	void ReportAllPlayerCompetitionData();// 0x473404f39041
	void NormalSettlePlayer(SolarPlayerState* Player);// 0x473304f39041
	void CompetitionSettlePlayer(SolarPlayerState* Player);// 0x473204f39041
	void CompetitionSettleAllPlayer(out SolarPlayerState*[] InAllPlayers);// 0x473104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarItemRoot_C.SolarItemRootActor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_BattleRoylePoisonCircle_C.BP_CustomPoisonCircle_Template_C.SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_CustomPoisonCircle_Template_C.SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4c8, Size: 0x8]
	StaticMeshComponent* StaticMeshCicle;//[Offset: 0x4d0, Size: 0x8]
	StaticMeshComponent* SafeArea;//[Offset: 0x4d8, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x4e0, Size: 0x8]
	float Distance Threshold;//[Offset: 0x4e8, Size: 0x4]
	float InitRadius;//[Offset: 0x4ec, Size: 0x4]
	Vector InitPosition;//[Offset: 0x4f0, Size: 0xc]
	FString GetModuleName();// 0xc062051b9001
	void SetMeshVisibility(float CallFunc_GetCurrentSafeAreaRadius_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0xc063051b9001
	static void DataTrace(int inInt, Vector Vector, float InFloat, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0xc064051b9001
	void OnLoaded_2CF9BD9E4D7B992D773DE7AE62F29135(Object* Loaded);// 0xc065051b9001
	void ReceiveBeginPlay();// 0xc066051b9001
	void ReceiveTick(float DeltaSeconds);// 0xc067051b9001
	void [S]SetNextArea(Vector Center, float Radius, float WaitTime, float MoveTime, int DamageLevel);// 0xc068051b9001
	void ShowEffectInside(bool bInside);// 0x12893051b9008
	void Evnet_ResetMaterial();// 0x15c13051b9001
	static void ExecuteUbergraph_BP_CustomPoisonCircle_Template(int EntryPoint, float CallFunc_GetCurBattleTime_ReturnValue, bool CallFunc_IsServer_ReturnValue, int CallFunc_FTrunc_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, float K2Node_Event_DeltaSeconds, Vector K2Node_CustomEvent_Center, float K2Node_CustomEvent_Radius, float K2Node_CustomEvent_WaitTime, float K2Node_CustomEvent_MoveTime, int K2Node_CustomEvent_DamageLevel, bool K2Node_Event_bInside, float CallFunc_Conv_IntToFloat_ReturnValue, CircleSafeAreaInfo K2Node_MakeStruct_CircleSafeAreaInfo, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_VectorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, Object* Temp_object_Variable, Object* K2Node_CustomEvent_Loaded, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, Material* K2Node_DynamicCast_AsMaterial, bool K2Node_DynamicCast_bSuccess);// 0xc02d051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	<float,CurveFloat*> MiniMapScaleMap;//[Offset: 0x468, Size: 0x50]
	CircleSafeAreaInfo[] SafeAreaConfigArr;//[Offset: 0x4b8, Size: 0x10]
	void SetNextSafeArea(out const CircleSafeAreaInfo AreaInfo);// 0x50ab04f39041
	void Init(out const Vector InSafeAreaCenterPos, float InPoisonCircleRadius);// 0x50aa04f39041
	float GetNextSafeAreaRadius();// 0x50a904f39041
	CurveFloat* GetMiniMapFOVCurveByRadius(float InRadius);// 0x50a804f39041
	float GetCurrentSafeAreaRadius();// 0x50a704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CircleSafeAreaInfo.SafeAreaInfoBase
	float Radius;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SafeAreaInfoBase
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float WaitTime;//[Offset: 0xc, Size: 0x4]
	float ShrinkTime;//[Offset: 0x10, Size: 0x4]
	float DamageValue;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10]
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18]
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_KillinfoManager_C.KillInfoManager.GameManagerBase.Info.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KillInfoManager.GameManagerBase.Info.Actor.Object
	enum[] KillEffectsOrder;//[Offset: 0x228, Size: 0x10]
	enum[] GlobalInfoList;//[Offset: 0x238, Size: 0x10]
	FString KillLeaderID;//[Offset: 0x438, Size: 0x10]
	int KillLeaderKillNum;//[Offset: 0x448, Size: 0x4]
	FString AnnihilatorID;//[Offset: 0x450, Size: 0x10]
	FString KillLeaderChangeVoiceName;//[Offset: 0x468, Size: 0x10]
	FString KillLeaderShutDownVoiceName;//[Offset: 0x478, Size: 0x10]
	FString BeKillLeaderVoiceName;//[Offset: 0x488, Size: 0x10]
	FString ShutDownKillLeaderVoiceName;//[Offset: 0x498, Size: 0x10]
	<int,FString> KillTotalVoiceMap;//[Offset: 0x4a8, Size: 0x50]
	<int,FString> ComboKillSoundEffectMap;//[Offset: 0x4f8, Size: 0x50]
	FString RevengeVoiceName;//[Offset: 0x548, Size: 0x10]
	FString KillDownVoiceName;//[Offset: 0x558, Size: 0x10]
	FString ClearTeamVoiceName;//[Offset: 0x568, Size: 0x10]
	FString ShutDownVoiceName;//[Offset: 0x578, Size: 0x10]
	FString KillDefenderVoiceName;//[Offset: 0x588, Size: 0x10]
	CustomNoticeImageTable* NoticeImageConfig;//[Offset: 0x598, Size: 0x8]
	bool PlayKillInfoVoice(out const NoticeData InNoticeData, out const delegate InDelegate);// 0x49b504f39041
	void OnRep_KillLeaderID();// 0x49b404f39041
	void ClientKillInfoNotify(SolarPlayerState* InKiller, SolarPlayerState* InVictim, int KillExtraInfoHashValue);// 0x49b304f39041
	void ClientKillEffectNotify(SolarPlayerState* InKiller, SolarPlayerState* InVictim, int KillEffectExtraInfoHashValue);// 0x49b204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NoticeData
	int NoticeId;//[Offset: 0x0, Size: 0x4]
	enum NoticeType;//[Offset: 0x4, Size: 0x1]
	float ConfigShowTime;//[Offset: 0x8, Size: 0x4]
	float Duration;//[Offset: 0xc, Size: 0x4]
	FString NoticeText;//[Offset: 0x10, Size: 0x10]
	enum NoticeColor;//[Offset: 0x20, Size: 0x1]
	FString NoticeClassPath;//[Offset: 0x28, Size: 0x10]
	FString NoticeIconPath;//[Offset: 0x38, Size: 0x10]
	UINoticeBase* NoticeWidget;//[Offset: 0x48, Size: 0x8]
	<FString,FString> Param;//[Offset: 0x50, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarRichTextBlock* TextWidget;//[Offset: 0x400, Size: 0x8]
	Image* TxtBg;//[Offset: 0x408, Size: 0x8]
	Image* Icon;//[Offset: 0x410, Size: 0x8]
	Image* IconBg;//[Offset: 0x418, Size: 0x8]
	void ShowEnterAnimation();// 0x454f04f39041
	void SetIconBrush(FString IconPath);// 0x454e04f39041
	void SetColor(out const NoticeColorData InColorData);// 0x454d04f39041
	void ResetIsPlayingVoice(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x454c04f39041
	void ResetIsPlayingBeKillLeaderVoice(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x454b04f39041
	WidgetAnimation* GetExitAnimation();// 0x454a04f39041
	WidgetAnimation* GetEnterAnimation();// 0x454904f39041
	void DefaultClose();// 0x454804f39041
	void CloseNotice();// 0x454704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NoticeColorData
	LinearColor TextBg;//[Offset: 0x0, Size: 0x10]
	LinearColor IconBg;//[Offset: 0x10, Size: 0x10]
	LinearColor Icon;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarRichTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	FText Text;//[Offset: 0x160, Size: 0x18]
	int LocTextID;//[Offset: 0x178, Size: 0x4]
	enum PreviewLang;//[Offset: 0x17c, Size: 0x1]
	DataTable* TextStyleSet;//[Offset: 0x180, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x188, Size: 0x10]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x1a0, Size: 0x460]
	float MinDesiredWidth;//[Offset: 0x600, Size: 0x4]
	int MaxRowCount;//[Offset: 0x604, Size: 0x4]
	int MinFontSize;//[Offset: 0x608, Size: 0x4]
	bool bUsingAccurateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 0x1]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0xa70, Size: 0x10]
	void SetWrapTextAt(float InWrapTextAt);// 0x575804f39041
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x575704f39041
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x575604f39041
	void SetText(out const FText InText);// 0x575504f39041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x575404f39041
	void SetLocTextID(int InLocTextID);// 0x575304f39041
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x575204f39041
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x575104f39041
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x575004f39041
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x574f04f39041
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x574e04f39041
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x574d04f39041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x574c04f39041
	enum GetWrappingPolicy();// 0x574b04f39041
	DataTable* GetTextStyleSet();// 0x574a04f39041
	FText GetText();// 0x574904f39041
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x574804f39041
	void ClearAllDefaultStyleOverrides();// 0x574704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x60]
	SlateColor ColorAndOpacity;//[Offset: 0x68, Size: 0x28]
	Vector2D ShadowOffset;//[Offset: 0x90, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x98, Size: 0x10]
	SlateColor SelectedBackgroundColor;//[Offset: 0xa8, Size: 0x28]
	LinearColor HighlightColor;//[Offset: 0xd0, Size: 0x10]
	SlateBrush HighlightShape;//[Offset: 0xe0, Size: 0xe0]
	SlateBrush StrikeBrush;//[Offset: 0x1c0, Size: 0xe0]
	SlateBrush UnderlineBrush;//[Offset: 0x2a0, Size: 0xe0]
	SlateBrush BackgroundBrush;//[Offset: 0x380, Size: 0xe0]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RichTextBlockDecorator.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomNoticeImageTable.DataTable.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_BlueCircleManager_C.BlueCircleManager.GameManagerBase.Info.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_BlueCircle_C.SolarBlueCircle.Actor.Object
	StaticMeshComponent* FX_Tag_Glow;//[Offset: 0x258, Size: 0x8]
	StaticMeshComponent* FX_Tag_Center;//[Offset: 0x260, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x268, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x270, Size: 0x8]
	StaticMeshComponent* GetGlowStaticMeshComponent();// 0x11d58051b9008
	StaticMeshComponent* GetCenterStaticMeshComponent();// 0x11d54051b9008
	FString GetModuleName();// 0xca1e051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarUnArmWeapon_C.SolarUnArmWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PlayerState_BattleRoyaleMap01_C.BP_PlayerState_BattleRoyale_C.BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	void OnGameStart_3CC5E84508DBDD6BA51B4E1EB5CA5FBB();// 0xffffff8c04f39000
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_3CC4DFC308DBDD6BA51B4C5CB5CA5F8C(out const byte InPosInTeam, bool InIsLastOne);// 0x26282051b9008
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_3CC30AF408DBDD6BA51B4B08B5CA5F6A(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffe8e36d060
	void OnTeammatePlayerStateRepDelegate_3CC2546608DBDD6BA51B48CEB5CA5F33();// 0xfffffffe8e3712e0
	void OnGameStart_362C938108DBDD6AEC28E286A34BBB5D();// 0x2881b051b9008
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_362B09F708DBDD6AEC28E024A34BBB20(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff4b42bc40
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_362AB17108DBDD6AEC28DED0A34BBAFE(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39000
	void OnTeammatePlayerStateRepDelegate_36297AFC08DBDD6AEC28DC6EA34BBAC2();// 0x250b4051b9000
	void OnGameStart_3628ACA708DBDD6AEC24C822A34B5253();// 0xffffff8c04f39000
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_36278C8508DBDD6AEC24C62EA34B5221(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff4ce56ec0
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_3626F45208DBDD6AEC24C4A8A34B51FB(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba0522902e
	void OnTeammatePlayerStateRepDelegate_3625E47808DBDD6AEC24C1CEA34B51B2();// 0xffffff8f04f39002
	void OnGameStart_361F667408DBDD6AEBE3BE22A344D153();// 0xfffffffeed9052c0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_361EE9FD08DBDD6AEBE3BBC0A344D117(out const byte InPosInTeam, bool InIsLastOne);// 0x11377051b9001
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_361DB62E08DBDD6AEBE3BA30A344D0EF(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffed41583d0
	void OnTeammatePlayerStateRepDelegate_361C5EBA08DBDD6AEBE3B616A344D086();// 0x2dffba0522902e
	void OnGameStart_2F02EDFF08DBDD6A4C35BDE4934D0480();// 0xfffffffeeac1f440
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2F01167108DBDD6A4C35BBFA934D044F(out const byte InPosInTeam, bool InIsLastOne);// 0xf11504f5a160
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2F006CE908DBDD6A4C35BA56934D0426(out const byte InPosInTeam, bool InIsLastOne);// 0x2661704f39041
	void OnTeammatePlayerStateRepDelegate_2EFFF52908DBDD6A4C35B812934D03ED();// 0x22eeb04f39041
	void OnGameStart_2EF4B31308DBDD6A4B878F1C933B996C();// 0xffffff8c04f39000
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2EF3D6C808DBDD6A4B878D82933B9943(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffeeac214a0
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2EF2BF0508DBDD6A4B878C1A933B991F(out const byte InPosInTeam, bool InIsLastOne);// 0x20e94051b9008
	void OnTeammatePlayerStateRepDelegate_2EF1A56F08DBDD6A4B87897C933B98DE();// 0xb77fff8c04f39000
	void OnGameStart_2EEE79C608DBDD6A4B785B00933A1437();// 0xfffffffeee505560
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2EED120908DBDD6A4B7858B2933A13FC(out const byte InPosInTeam, bool InIsLastOne);// 0x2e996030
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2EECD5F108DBDD6A4B7856AA933A13C8(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff8c3f0720
	void OnTeammatePlayerStateRepDelegate_2EEB125708DBDD6A4B7853DA933A1381();// 0x24da7051b9008
	void OnGameStart_2EE88C0808DBDD6A4AC656BC932846FC();// 0xfffffffeebb0eaa0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2EE71D9608DBDD6A4AC65504932846D1(out const byte InPosInTeam, bool InIsLastOne);// 0x1666004f39001
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2EE6F6F508DBDD6A4AC65388932846AA(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffeee4ff8a0
	void OnTeammatePlayerStateRepDelegate_2EE556B308DBDD6A4AC650F493284669();// 0x132c304f39041
	void OnGameStart_2EDCDC7F08DBDD6A4A75BE96932037C6();// 0x2ae09ec0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2EDB26E508DBDD6A4A75BB5893203773(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba0522902e
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2EDA30BC08DBDD6A4A75B7F29320371C(out const byte InPosInTeam, bool InIsLastOne);// 0x28cb1051b9008
	void OnTeammatePlayerStateRepDelegate_2ED9281A08DBDD6A4A75AABE932035CB();// 0xfffffffedee4bc40
	void OnGameStart_2ED6EDC008DBDD6A4A283AAE93187762();// 0xfffffffedee4f1a0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2ED5282F08DBDD6A4A28391E93187739(out const byte InPosInTeam, bool InIsLastOne);// 0x290a1051b9008
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2ED484A408DBDD6A4A28373E93187709(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff27de0f40
	void OnTeammatePlayerStateRepDelegate_2ED341E608DBDD6A4A28343C931876BE();// 0xffffff8c04f39000
	void OnGameStart_2ED1E10208DBDD6A49C26062930E47F4();// 0x11104f39185
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2ED09E5808DBDD6A49C25E8C930E47C4(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff175aef00
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2ECF631608DBDD6A49C25C8E930E4792(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39000
	void OnTeammatePlayerStateRepDelegate_2ECE418F08DBDD6A49C259A0930E4747();// 0x1589104f39001
	void OnGameStart_2ECC5EF508DBDD6A496BDBCA9305A117();// 0xffffff8b04f39002
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2ECB565108DBDD6A496BD9A49305A0E0(out const byte InPosInTeam, bool InIsLastOne);// 0x12baa04f39041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2ECA1AEE08DBDD6A496BD81E9305A0BA(out const byte InPosInTeam, bool InIsLastOne);// 0x1f585051b9001
	void OnTeammatePlayerStateRepDelegate_2EC9956E08DBDD6A496BD5C69305A07F();// 0x9b05051b9001
	void OnGameStart_2EC7698308DBDD6A4917E17892FD3B43();// 0xfffffffeeae7eb80
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2EC66C0108DBDD6A4917DFD492FD3B18(out const byte InPosInTeam, bool InIsLastOne);// 0x94a004f568d5
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2EC5AA8808DBDD6A4917DE3092FD3AEE(out const byte InPosInTeam, bool InIsLastOne);// 0x15914051b9001
	void OnTeammatePlayerStateRepDelegate_2EC4DEBA08DBDD6A4917DB4292FD3AA5();// 0x248d504f39041
	void OnGameStart_2EB2341C08DBDD6A487C992A92EDB408();// 0xfffffffef18aa3c0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2EB1FBBE08DBDD6A487C978692EDB3DD(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8f04f39002
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2EB06F3708DBDD6A487C965092EDB3BE(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39000
	void OnTeammatePlayerStateRepDelegate_2EAF970E08DBDD6A487C93EE92EDB383();// 0xffffff8c04f39000
	void OnGameStart_2EAC692108DBDD6A484C270492E8DBD0();// 0x14c12051b9001
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2EABF8D208DBDD6A484C24CA92E8DB97(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2EAA8A1208DBDD6A484C231292E8DB6C(out const byte InPosInTeam, bool InIsLastOne);// 0xabc9051b9001
	void OnTeammatePlayerStateRepDelegate_2EA9B7DE08DBDD6A484C209C92E8DB2E();// 0x1577a04f39001
	void OnGameStart_2EA861F908DBDD6A4837D24092E6D357();// 0x3f7fff8c04f39007
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2EA76AC408DBDD6A4837D05692E6D325(out const byte InPosInTeam, bool InIsLastOne);// 0x159d9051b9001
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2EA6165908DBDD6A4837CE3092E6D2EE(out const byte InPosInTeam, bool InIsLastOne);// 0x15771051b9001
	void OnTeammatePlayerStateRepDelegate_2EA55ADF08DBDD6A4837CB2492E6D2A2();// 0xfffffffef18ada00
	void OnGameStart_2E9D052E08DBDD6A4804CF9E92E1B97A();// 0xffffffff4c9cc880
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2E9C047808DBDD6A4804CDB492E1B948(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2E9BE81C08DBDD6A4804CBDE92E1B919(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff4c9d59c0
	void OnTeammatePlayerStateRepDelegate_2E9A7EBA08DBDD6A4804C92C92E1B8D6();// 0x417fff8c46739000
	void OnGameStart_2E8E57F908DBDD6A47C77B6C92DB9774();// 0x25bec04f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2E8D1F1F08DBDD6A47C7784C92DB9724(out const byte InPosInTeam, bool InIsLastOne);// 0xacd104f5ec59
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2E8C250F08DBDD6A47C7768092DB96F6(out const byte InPosInTeam, bool InIsLastOne);// 0x25bea04f39041
	void OnTeammatePlayerStateRepDelegate_2E8B5E5B08DBDD6A47C7738892DB96AB();// 0x25bee04f39041
	void OnGameStart_2E8A95AC08DBDD6A47C41F3092DB416E();// 0x2887e051b9008
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2E898AD008DBDD6A47C413FA92DB404F(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffef18ac960
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2E8827B008DBDD6A47C411C092DB4017(out const byte InPosInTeam, bool InIsLastOne);// 0x15a4e051b9001
	void OnTeammatePlayerStateRepDelegate_2E87FF0908DBDD6A47C40D6A92DB3FA9();// 0xfffffffeea7158e0
	void OnGameStart_2E7314C608DBDD6A47ABE77692D8D575();// 0xffffffffc94fbee0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2E728FBB08DBDD6A47ABE51E92D8D539(out const byte InPosInTeam, bool InIsLastOne);// 0xf26004f39041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2E7172F108DBDD6A47ABE2E492D8D500(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8f04f39002
	void OnTeammatePlayerStateRepDelegate_2E70A2A708DBDD6A47ABDFBA92D8D4B1();// 0xf149051b9001
	void OnGameStart_2E1AF2F508DBDD6A4730C87A92CC8590();// 0xffffff8f04f39002
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2E19922308DBDD6A4730C4F692CC8536(out const byte InPosInTeam, bool InIsLastOne);// 0x27b8e051b9008
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2E18C7E908DBDD6A4730C1B892CC84E3(out const byte InPosInTeam, bool InIsLastOne);// 0x27b8f051b9008
	void OnTeammatePlayerStateRepDelegate_2E17305C08DBDD6A4730BCFE92CC846B();// 0xfffffffeeeb2b0e0
	void OnGameStart_2E14281A08DBDD6A4692EFE292BCBCB4();// 0x24b1804f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2E13012E08DBDD6A4692EC2292BCBC54(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffeea70d5a0
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2E12533F08DBDD6A4692E88A92BCBBF8(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffeea70e3a0
	void OnTeammatePlayerStateRepDelegate_2E116C4808DBDD6A4692E39E92BCBB7C();// 0xfffffffedd626030
	void OnGameStart_2E0FBA0D08DBDD6A4616A72092B04F07();// 0x24ace04f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2E0E801808DBDD6A4616A31092B04E9F(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffeea8122a0
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2E0D9EA808DBDD6A46169B4A92B04DD8(out const byte InPosInTeam, bool InIsLastOne);// 0x24acc04f39041
	void OnTeammatePlayerStateRepDelegate_2E0C0EF608DBDD6A4616959692B04D47();// 0xfffffffee12f9760
	void OnGameStart_2E0A487E08DBDD6A45DA863292AA4BBC();// 0xfffffffeded04840
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2E09A9FA08DBDD6A45DA821892AA4B53(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffedee58d60
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2E0829DB08DBDD6A45DA7E0892AA4AEB(out const byte InPosInTeam, bool InIsLastOne);// 0x24aae04f39041
	void OnTeammatePlayerStateRepDelegate_2E0710F708DBDD6A45DA757A92AA4A12();// 0x24aad04f39041
	void OnGameStart_2E048FAE08DBDD6A457D064C92A0F224();// 0x239eb04f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2E03154808DBDD6A457D04D092A0F1FE(out const byte InPosInTeam, bool InIsLastOne);// 0x239ea04f39041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2E020DC108DBDD6A457D035E92A0F1DA(out const byte InPosInTeam, bool InIsLastOne);// 0x239e904f39041
	void OnTeammatePlayerStateRepDelegate_2E0134BA08DBDD6A457D015692A0F1A6();// 0xfffffffed01e80a0
	void OnGameStart_2E00A99308DBDD6A45762E6C92A042F4();// 0xfffffffedf109240
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2DFFE26208DBDD6A45762CD292A042CC(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2DFEE5F708DBDD6A45762B8892A042AA(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffedf10f0c0
	void OnTeammatePlayerStateRepDelegate_2DFDCE8508DBDD6A4576295892A04273();// 0xffffffff99b34b00
	void OnGameStart_2DFC684108DBDD6A4575FDDE92A03E19();// 0x28dcd051b9008
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2DFB740C08DBDD6A4575FC3092A03DEE(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffeded06ec0
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2DFA6AE008DBDD6A4575FAC892A03DCB(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffedf7f4300
	void OnTeammatePlayerStateRepDelegate_2DF9D79C08DBDD6A4575F79E92A03D7A();// 0xffffff8d04f39003
	void OnGameStart_2DF7189A08DBDD6A456E5E8A929F7AF7();// 0x2e9959f0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2DF638DC08DBDD6A456E5C82929F7AC3(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2DF5CE6E08DBDD6A456E5B10929F7A9F(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffeea8daf20
	void OnTeammatePlayerStateRepDelegate_2DF4C19808DBDD6A456E5818929F7A53();// 0x2316504f39041
	void OnGameStart_2DD3438908DBDD6A455E04C2929DD863();// 0x22d4204f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2DD2ED4608DBDD6A455E01DE929DD81A(out const byte InPosInTeam, bool InIsLastOne);// 0x22d4104f39041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2DD130C908DBDD6A455DFF18929DD7D3(out const byte InPosInTeam, bool InIsLastOne);// 0x22d4004f39041
	void OnTeammatePlayerStateRepDelegate_2DD023B008DBDD6A455DF8B0929DD730();// 0xffffffff95b2f500
	void OnGameStart_2D26D9D008DBDD6A45540CD8929CD933();// 0x2288804f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2D25A84808DBDD6A45540878929CD8C2(out const byte InPosInTeam, bool InIsLastOne);// 0x2288704f39041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2D24766008DBDD6A45540652929CD88C(out const byte InPosInTeam, bool InIsLastOne);// 0x2288604f39041
	void OnTeammatePlayerStateRepDelegate_2D23151408DBDD6A4554026A929CD828();// 0xfffffffedf7ee800
	void OnGameStart_2D224C1C08DBDD6A4552CC24929CB921();// 0x2286104f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2D21CF4008DBDD6A4552C9A4929CB8E0(out const byte InPosInTeam, bool InIsLastOne);// 0x2285f04f39041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2D20F1B208DBDD6A4552C65C929CB88D(out const byte InPosInTeam, bool InIsLastOne);// 0x2285c04f39041
	void OnTeammatePlayerStateRepDelegate_2D1F7DC108DBDD6A4552BFF4929CB7E9();// 0xffffff8c04f39000
	void OnGameStart_2CBE48D508DBDD6A453EDDF4929ABAE8();// 0xef33051b900b
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CBDD30C08DBDD6A453ED502929ABA03(out const byte InPosInTeam, bool InIsLastOne);// 0x14cfb04f39041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CBC2C5A08DBDD6A453ECFBC929AB97D(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8b04f39002
	void OnTeammatePlayerStateRepDelegate_2CBB4E4708DBDD6A453ECA4E929AB8F3();// 0xffffff8c04f39044
	void OnGameStart_2CBA4BA008DBDD6A453E3F52929AAB0B();// 0x2245f04f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CB9468B08DBDD6A453E3DCC929AAAE4(out const byte InPosInTeam, bool InIsLastOne);// 0x2245e04f39041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CB8FF5F08DBDD6A453E3C0A929AAAB7(out const byte InPosInTeam, bool InIsLastOne);// 0x2245d04f39041
	void OnTeammatePlayerStateRepDelegate_2CB7368608DBDD6A453E3976929AAA77();// 0xfffffffee4348010
	void OnGameStart_2CB6CF5808DBDD6A453E0636929AA555();// 0x2244904f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CA8F7C208DBDD6A453E0442929AA523(out const byte InPosInTeam, bool InIsLastOne);// 0x2257b04f39000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CA4B4CB08DBDD6A453E01E0929AA4E7(out const byte InPosInTeam, bool InIsLastOne);// 0x2243304f39041
	void OnTeammatePlayerStateRepDelegate_2CA3492108DBDD6A453DFED4929AA499();// 0xffffff8c04f39000
	void OnGameStart_2C594A4708DBDD6A45307EF892994B03();// 0x1e03f051b9008
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C58AC8B08DBDD6A45307C6492994AC1(out const byte InPosInTeam, bool InIsLastOne);// 0x1f8ea051b9008
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C579C4308DBDD6A4530767E92994A2A(out const byte InPosInTeam, bool InIsLastOne);// 0x1f954051b9008
	void OnTeammatePlayerStateRepDelegate_2C566F2B08DBDD6A45307444929949F1();// 0x8faf04f41fdd
	void OnGameStart_2C55DDC008DBDD6A45304ABE929945CA();// 0xfffffffef2524bc0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C54A99008DBDD6A453047DA9299457F(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff8c3ec760
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C53C0DB08DBDD6A45303EFC9299449C(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffffc3769000
	void OnTeammatePlayerStateRepDelegate_2C5210D208DBDD6A45303BE69299444E();// 0x1fbf3051b9008
	void OnGameStart_2C517F7708DBDD6A453015D09299407E();// 0x220c504f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C50CD4C08DBDD6A453013E69299404D(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C4F995008DBDD6A453012069299401E(out const byte InPosInTeam, bool InIsLastOne);// 0x220c304f39041
	void OnTeammatePlayerStateRepDelegate_2C4E824608DBDD6A45300F0492993FD1();// 0xfffffffef21ada00
	void OnGameStart_2C48F9CC08DBDD6A452F00D2929924CB();// 0x220b404f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C47853B08DBDD6A452EFE529299248C(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffef21af440
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C46A55B08DBDD6A452EFB469299243E(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffef5188ba0
	void OnTeammatePlayerStateRepDelegate_2C45E1F608DBDD6A452EF3C69299237F();// 0xffffff8c04f39000
	void OnGameStart_2C4421A908DBDD6A452CCD3A9298EC6F();// 0x1fb80051b9008
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C43A35308DBDD6A452CC9A29298EC13(out const byte InPosInTeam, bool InIsLastOne);// 0x1fb84051b9008
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C423E5D08DBDD6A452CC7EA9298EBE8(out const byte InPosInTeam, bool InIsLastOne);// 0x1fb94051b9008
	void OnTeammatePlayerStateRepDelegate_2C41D54108DBDD6A452CC2909298EB60();// 0xffffff8d04f38fff
	void OnPlayerStateRepDelegate_16ABDA1C08DBDD6A43B4D0069273531D(enum RepType, PlayerState* PlayerState);// 0xffffffff46403060
	void OnGameStart_16AA7B7C08DBDD6A43B4C8F492735269();// 0xffffffff4bd4d5a0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_16A9A64408DBDD6A43B4C6C492735230(out const byte InPosInTeam, bool InIsLastOne);// 0x37ffbd05229065
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_16A8763708DBDD6A43B4C5C092735216(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8f04f39002
	void OnTeammatePlayerStateRepDelegate_16A75F1908DBDD6A43B4C476927351F5();// 0xffffffff4bd4cdc0
	void OnPlayerStateRepDelegate_16A6094C08DBDD6A43B4AE8C92734FC4(enum RepType, PlayerState* PlayerState);// 0x73b704f4c7c1
	void OnGameStart_16A5A75F08DBDD6A43B4A79892734F13();// 0xffffffff4b42c180
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_16A4671C08DBDD6A43B4A64E92734EF2(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff05862c40
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_16A38BC108DBDD6A43B4A55E92734EDA(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff8e5e0a90
	void OnTeammatePlayerStateRepDelegate_16A2962708DBDD6A43B4A44692734EBD();// 0xffffffff4b42cdc0
	void OnPlayerStateRepDelegate_16A169B308DBDD6A43B4926292734CF4(enum RepType, PlayerState* PlayerState);// 0x1372204f39041
	void OnGameStart_16A0413D08DBDD6A43B489F292734C1B();// 0x1375304f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_169F812308DBDD6A43B4888092734BF6(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c0509596f
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_169E4AC108DBDD6A43B4875E92734BDA(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff4bd566e0
	void OnTeammatePlayerStateRepDelegate_169D6A5E08DBDD6A43B485B092734BAF();// 0x73b404f4c7b7
	void OnPlayerStateRepDelegate_169C904508DBDD6A43B470529273498C(enum RepType, PlayerState* PlayerState);// 0xffffff8f04f39002
	void OnGameStart_169BF03908DBDD6A43B4676A927348A8();// 0xffffffff4b435fe0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_169AF6DF08DBDD6A43B465DA9273487F(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1699507A08DBDD6A43B463329273483B(out const byte InPosInTeam, bool InIsLastOne);// 0x29667051b9008
	void OnTeammatePlayerStateRepDelegate_1698214408DBDD6A43B4609E927347FA();// 0xffffff8f04f39002
	void OnPlayerStateRepDelegate_1697AFBC08DBDD6A43B3F08292733CC3(enum RepType, PlayerState* PlayerState);// 0x9d36051b9008
	void OnGameStart_1696CA7B08DBDD6A43B3E7CC92733BE5();// 0x9d0b051b900b
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_1695284208DBDD6A43B3E66E92733BC1(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff4b42d5a0
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1694A99008DBDD6A43B3E4DE92733B99(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff355b9400
	void OnTeammatePlayerStateRepDelegate_1693CAC408DBDD6A43B3E2AE92733B63();// 0x25beb04f39041
	void OnPlayerStateRepDelegate_167F472208DBDD6A43B199A4927300E1(enum RepType, PlayerState* PlayerState);// 0xffffff8f04f39002
	void OnGameStart_167E85FF08DBDD6A43B190C69272FFFD();// 0xffffff8f04f39002
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_167DF90208DBDD6A43B18E969272FFC5(out const byte InPosInTeam, bool InIsLastOne);// 0xee04f39161
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_167C062C08DBDD6A43B18CAC9272FF94(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8f04f39002
	void OnTeammatePlayerStateRepDelegate_167BFFB708DBDD6A43B18A9A9272FF60();// 0xffffff8f04f39002
	void OnPlayerStateRepDelegate_167ABB3308DBDD6A43B159C69272FA7E(enum RepType, PlayerState* PlayerState);// 0xffffffff9123dd20
	void OnGameStart_16799AF708DBDD6A43B14EFE9272F969();// 0x1359304f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_16777F5B08DBDD6A43B14CCE9272F932(out const byte InPosInTeam, bool InIsLastOne);// 0x1359904f39041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1676B28C08DBDD6A43B14BC09272F917(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39000
	void OnTeammatePlayerStateRepDelegate_1675592F08DBDD6A43B14A4E9272F8F2();// 0x1ffff205629020
	void OnPlayerStateRepDelegate_167489CF08DBDD6A43B138889272F72A(enum RepType, PlayerState* PlayerState);// 0xaa9c051b9008
	void OnGameStart_16733FAA08DBDD6A43B12F649272F640();// 0xffffff8f04f39002
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_1672435708DBDD6A43B12DFC9272F61C(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8f04f39002
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1671950D08DBDD6A43B12CC69272F5FD(out const byte InPosInTeam, bool InIsLastOne);// 0x14694051b9001
	void OnTeammatePlayerStateRepDelegate_1670246608DBDD6A43B12B369272F5D5();// 0xffffff8f04f39002
	void OnPlayerStateRepDelegate_166EBD9F08DBDD6A43B117A49272F3E0(enum RepType, PlayerState* PlayerState);// 0xffffff8f04f39002
	void OnGameStart_166DFA9408DBDD6A43B10EDA9272F2FF();// 0x32ffbd05229065
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_166C330708DBDD6A43B10D369272F2D5(out const byte InPosInTeam, bool InIsLastOne);// 0x6dfff505659070
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_166BFC3308DBDD6A43B10BF69272F2B5(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39000
	void OnTeammatePlayerStateRepDelegate_166ADE7708DBDD6A43B10A529272F28C();// 0xffffffff4c7be0b0
	void OnPlayerStateRepDelegate_166973A408DBDD6A43B0F6349272F088(enum RepType, PlayerState* PlayerState);// 0xffffffffc3df9000
	void OnGameStart_1668242708DBDD6A43B0ED569272EFA5();// 0xffffffff6dd60f60
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_1667C46A08DBDD6A43B0EBEE9272EF81(out const byte InPosInTeam, bool InIsLastOne);// 0xe9a3051b9001
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1666636008DBDD6A43B0EACC9272EF64(out const byte InPosInTeam, bool InIsLastOne);// 0x12f3a051b9008
	void OnTeammatePlayerStateRepDelegate_1665B11208DBDD6A43B0E9469272EF3E();// 0xfc6f051b9001
	void OnPlayerStateRepDelegate_16648B9308DBDD6A43B0D2DA9272ECFF(enum RepType, PlayerState* PlayerState);// 0x2dffba0522902e
	void OnGameStart_16632C5C08DBDD6A43B0C92A9272EC07();// 0x2dffba0522902e
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_1662B9CC08DBDD6A43B0C7AE9272EBE1(out const byte InPosInTeam, bool InIsLastOne);// 0x951d04f56984
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1661D5F308DBDD6A43B0C6A09272EBC6(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff9c04f3900e
	void OnTeammatePlayerStateRepDelegate_166040F608DBDD6A43B0C5389272EBA2();// 0xffffff8c04f39044
	void OnPlayerStateRepDelegate_165F864708DBDD6A43B0AD3C9272E93D(enum RepType, PlayerState* PlayerState);// 0xf550051b9008
	void OnGameStart_165E3DCE08DBDD6A43B0A3F09272E84E();// 0x2dffba0522902e
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_165D6B3508DBDD6A43B0A18E9272E811(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba0522902e
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_165C6E7108DBDD6A43B09FFE9272E7EA(out const byte InPosInTeam, bool InIsLastOne);// 0x3abfbc3004f39414
	void OnTeammatePlayerStateRepDelegate_165B3BD808DBDD6A43B09DD89272E7B3();// 0x101b404f39001
	void OnPlayerStateRepDelegate_165AF58C08DBDD6A43B01C1E9272DAB9(enum RepType, PlayerState* PlayerState);// 0x6dfff505659070
	void OnGameStart_165972E108DBDD6A43B004049272D850();// 0xffffff8f04f39002
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_165815D808DBDD6A43B002569272D826(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff6e4b9240
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1657F4C108DBDD6A43B000E49272D800(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba0522902e
	void OnTeammatePlayerStateRepDelegate_16561B4408DBDD6A43AFFB8A9272D778();// 0xffffff8c04f39000
	void OnPlayerStateRepDelegate_1650BF6208DBDD6A43AFA9509272CF3E(enum RepType, PlayerState* PlayerState);// 0xffffffff50ea4220
	void OnGameStart_164FD80C08DBDD6A43AFA0549272CE58();// 0xffffffff50ea5d40
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_164D104408DBDD6A43AF9E7E9272CE2A(out const byte InPosInTeam, bool InIsLastOne);// 0x1347d04f39041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_164C731408DBDD6A43AF9C449272CDF0(out const byte InPosInTeam, bool InIsLastOne);// 0x2777c051b9001
	void OnTeammatePlayerStateRepDelegate_164B38D708DBDD6A43AF9A149272CDB8();// 0x1b50404f39041
	void OnPlayerStateRepDelegate_1649F74608DBDD6A43AF877C9272CBDC(enum RepType, PlayerState* PlayerState);// 0x2dffba0522902e
	void OnGameStart_1647EB6608DBDD6A43AF7D409272CAD7();// 0xffffffff4c9ce560
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_1646338408DBDD6A43AF7B4C9272CAA4(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba0522902e
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1645982408DBDD6A43AF79809272CA77(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffffc9a84d60
	void OnTeammatePlayerStateRepDelegate_1644D5C108DBDD6A43AF77789272CA43();// 0xffffff8f04f39035
	void OnPlayerStateRepDelegate_164317D608DBDD6A43AF65269272C86D(enum RepType, PlayerState* PlayerState);// 0xe42104f39001
	void OnGameStart_164201F608DBDD6A43AF5C8E9272C792();// 0x133e204f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_164182CA08DBDD6A43AF5B129272C76B(out const byte InPosInTeam, bool InIsLastOne);// 0xd65b051b9008
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1640365908DBDD6A43AF596E9272C742(out const byte InPosInTeam, bool InIsLastOne);// 0x12c2104f39041
	void OnTeammatePlayerStateRepDelegate_163F464C08DBDD6A43AF55AE9272C6E2();// 0x12d6a051b9001
	void OnPlayerStateRepDelegate_163D223F08DBDD6A43AF38E49272C400(enum RepType, PlayerState* PlayerState);// 0xffffff8c04f39000
	void OnGameStart_163C00CA08DBDD6A43AF2EE49272C301();// 0xde0f051b9001
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_163B579D08DBDD6A43AF2D229272C2D3(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39002
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_163AF1ED08DBDD6A43AF28D69272C265(out const byte InPosInTeam, bool InIsLastOne);// 0x2ead0a20
	void OnTeammatePlayerStateRepDelegate_16391D5308DBDD6A43AF276E9272C242();// 0xffffff8c04f39000
	void OnPlayerStateRepDelegate_1636160208DBDD6A43AF16169272C086(enum RepType, PlayerState* PlayerState);// 0xf3af051b9008
	void OnGameStart_16350DB508DBDD6A43AF09469272BF3E();// 0x12c5b04f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_16342D0308DBDD6A43AF07CA9272BF18(out const byte InPosInTeam, bool InIsLastOne);// 0x12b1304f39041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1633E95F08DBDD6A43AF06449272BEF0(out const byte InPosInTeam, bool InIsLastOne);// 0x6188c04f89100
	void OnTeammatePlayerStateRepDelegate_1632021008DBDD6A43AF043C9272BEBC();// 0xffffff8f04f39002
	void OnPlayerStateRepDelegate_163064F808DBDD6A43AEF4B09272BD2E(enum RepType, PlayerState* PlayerState);// 0x10f47051b9001
	void OnGameStart_162ED94008DBDD6A43AEED4E9272BC71();// 0xffffffffc960ee70
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_162D7BCE08DBDD6A43AEEBFA9272BC50(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffffac19fc80
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_162C833708DBDD6A43AEEAD89272BC32(out const byte InPosInTeam, bool InIsLastOne);// 0x2f6e5460
	void OnTeammatePlayerStateRepDelegate_162B4B9E08DBDD6A43AEE9849272BC11();// 0x6188c04f89100
	void OnPlayerStateRepDelegate_162AC3C208DBDD6A43AED9089272BA6A(enum RepType, PlayerState* PlayerState);// 0x16d0e04f39001
	void OnGameStart_16291D7B08DBDD6A43AED1569272B9A5();// 0xffffff8f04f39002
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_162815A408DBDD6A43AECFEE9272B981(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba0522902e
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_16271BAE08DBDD6A43AECEE09272B966(out const byte InPosInTeam, bool InIsLastOne);// 0x139be051b9008
	void OnTeammatePlayerStateRepDelegate_1626962E08DBDD6A43AECD829272B943();// 0x10e26051b9008
	void OnPlayerStateRepDelegate_162552F708DBDD6A43AEB7DE9272B71A(enum RepType, PlayerState* PlayerState);// 0x10fed051b9001
	void OnGameStart_1624E17D08DBDD6A43AEAE569272B626();// 0x14c52051b9001
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_1623BBA908DBDD6A43AEAB909272B5DE(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c04f39000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_16220D4008DBDD6A43AEAA149272B5B8(out const byte InPosInTeam, bool InIsLastOne);// 0x25f8d04f39041
	void OnTeammatePlayerStateRepDelegate_1621141A08DBDD6A43AEA7D09272B57F();// 0x1375a04f39041
	void OnPlayerStateRepDelegate_1620458208DBDD6A43AE8D4A9272B2D8(enum RepType, PlayerState* PlayerState);// 0x1c285051b9001
	void OnGameStart_161F1DEC08DBDD6A43AE83FE9272B1EA();// 0x132d204f39041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_161E305208DBDD6A43AE81E29272B1B4(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8f04f39002
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_161DE37708DBDD6A43AE7CBA9272B12F(out const byte InPosInTeam, bool InIsLastOne);// 0x9c07051b9008
	void OnTeammatePlayerStateRepDelegate_161C662A08DBDD6A43AE7A949272B0FA();// 0xffffffff175af7c0
	void OnPlayerStateRepDelegate_161B075108DBDD6A43ADC96E92729F41(enum RepType, PlayerState* PlayerState);// 0x9c06051b9008
	void OnGameStart_161AE3BD08DBDD6A43ADB37A92729D10();// 0xffffffff06aa05e0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_16190A8208DBDD6A43ADB04692729CBD(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff8df51670
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_16182CA208DBDD6A43ADAED492729C99(out const byte InPosInTeam, bool InIsLastOne);// 0x730404f4c36b
	void OnTeammatePlayerStateRepDelegate_16170BA508DBDD6A43ADAC5E92729C5B();// 0x2dffba0522902e
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PlayerState_BattleRoyale_C.BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd70, Size: 0x8]
	BPC_BuyResurrection_C* BPC_BuyResurrection;//[Offset: 0xd78, Size: 0x8]
	SolarUserWidget* DeathUI;//[Offset: 0xd80, Size: 0x8]
	byte PlayerBattleState;//[Offset: 0xd88, Size: 0x1]
	delegate OnRequestReplied;//[Offset: 0xd90, Size: 0x10]
	int Intervened By AI;//[Offset: 0xda0, Size: 0x4]
	bool bFirstDive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda4, Size: 0x1]
	bool PlayerCanRebirthBlueprint(bool Temp_bool_Variable, bool Temp_bool_Variable, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_PlayerCanRebirthBlueprint_ReturnValue, bool CallFunc_IsPlayerReviving_ReturnValue, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, bool K2Node_Select_Default);// 0x10dff051b9001
	bool PlayerIsResurrecting();// 0x10e30051b9001
	bool IsPlayerWaitingForTeammatesHelp(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x10e31051b9001
	static void GetItemData(int ItemID, out bool Valid, out int ID, out int Quality, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_ItemInBattle CallFunc_TryGetRowData_ReturnValue);// 0x10e32051b9001
	static void GetPlayerChestOpen(out FString Output, FString[] OutputString, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] K2Node_MakeArray_Array, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_GetItemData_Valid, int CallFunc_GetItemData_ID, int CallFunc_GetItemData_Quality, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xc88d051b9008
	static void GetSinglePlayerItem(int ItemID, out bool HasItem, out int count, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByID_ItemData, bool CallFunc_GetBackpackItemDataByID_ReturnValue);// 0x10e34051b9001
	void GetWeaponPartData(int ItemID, out bool Valid, out int ID, out int Quality, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_WeaponParts CallFunc_GetRowData_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x10e3a051b9001
	static void GetPlayerItems(out FString Output, FString[] OutputString, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] K2Node_MakeArray_Array, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetSinglePlayerItem_HasItem, int CallFunc_GetSinglePlayerItem_Count, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x10e3b051b9001
	static void Get Player Accessories(out FString Output, FString[] OutputString, <IntPoint,int> Accessories, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, FString CallFunc_JoinStringArray_ReturnValue, int Temp_int_Variable, IntPoint[] CallFunc_Map_Keys_Keys, IntPoint CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_NotEqual_IntInt_ReturnValue, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_IsValid_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, int Temp_int_Variable, IntPoint K2Node_MakeStruct_IntPoint, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x10e3c051b9001
	void Set Intervened By AI(int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue);// 0x10e3d051b9001
	static void GetNearestPos(byte Index, Vector Nearest, float Distance, Vector CLocation, byte Temp_byte_Variable, class Actor Temp_class_Variable, class Actor Temp_class_Variable, class Actor Temp_class_Variable, class Actor K2Node_Select_Default, Actor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, Actor* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x10e3e051b9001
	void OnRep_PlayerBattleState(bool CallFunc_IsServer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x10e3f051b9001
	void [s]SetPlayerState(byte State);// 0x10e40051b9001
	void ReceiveBeginPlay();// 0x10e13051b9001
	void Event_RespondReconnection();// 0x13d2f051b9001
	void ResurrectionStateChange(enum NewState);// 0x10e42051b9001
	void RequestNearestPos(byte Type);// 0x10e43051b9001
	void OnNearestPosReceived(byte Type, Vector Pos);// 0xffffff8f04f39002
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x10e14051b9001
	void DelayAndBeginSpectate();// 0x10e45051b9001
	void ExecuteUbergraph_BP_PlayerState_BattleRoyale(int EntryPoint, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, bool CallFunc___A_BindOnBasicSystemReady_bReady, bool CallFunc_IsServer_ReturnValue, enum K2Node_CustomEvent_NewState, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_Type, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Pos, int K2Node_Event_GainedExp, int K2Node_Event_CurrentExp, int K2Node_Event_TotalExp, enum K2Node_Event_BehaviorType, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BeginSpectateOtherPlayer_ReturnValue);// 0x10e02051b9001
	void OnRequestReplied__DelegateSignature(byte Type, Vector Pos);// 0x12b2704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc38, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xc40, Size: 0x8]
	Vector[] DeathLocations;//[Offset: 0xc48, Size: 0x10]
	Vector[] LandLocations;//[Offset: 0xc58, Size: 0x10]
	int ResurrectTime;//[Offset: 0xc68, Size: 0x4]
	Vector ResurrectLocation;//[Offset: 0xc6c, Size: 0xc]
	class SolarUserWidget* ResurrectUI;//[Offset: 0xc78, Size: 0x28]
	S_ResurrectInfo ResurrectOptions;//[Offset: 0xca0, Size: 0x5]
	delegate OnResurrectionBegin;//[Offset: 0xca8, Size: 0x10]
	delegate OnResurrectionFinished;//[Offset: 0xcb8, Size: 0x10]
	UI_Resurrect_C* ResurrectUIObj;//[Offset: 0xcc8, Size: 0x8]
	byte ResurrectType;//[Offset: 0xcd0, Size: 0x1]
	bool bIsResurrecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd1, Size: 0x1]
	BP_Logic_Framework_C* Logic;//[Offset: 0xcd8, Size: 0x8]
	bool bShouldSettle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce0, Size: 0x1]
	UI_MapMark_ReviveTeammates_C*[] UI_MapMark_ReviveTeammatesArr;//[Offset: 0xce8, Size: 0x10]
	ActorMarkBase* DeathBoxMark;//[Offset: 0xcf8, Size: 0x8]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0xd00, Size: 0x8]
	TimerHandle LandedDetectionHandel;//[Offset: 0xd08, Size: 0x8]
	MapMarkBase*[] DeathBoxMiniMapMark;//[Offset: 0xd10, Size: 0x10]
	delegate OnResurrectTimeChange;//[Offset: 0xd20, Size: 0x10]
	int AiCompCd;//[Offset: 0xd30, Size: 0x4]
	ActorMarkBase* RebirthedDeathBoxMark;//[Offset: 0xd38, Size: 0x8]
	bool bIsReviveSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd40, Size: 0x1]
	BP_DBox_Default_C* DeathBoxRef;//[Offset: 0xd48, Size: 0x8]
	Vector DeathBoxLoc;//[Offset: 0xd50, Size: 0xc]
	byte CharacterHealthState;//[Offset: 0xd5c, Size: 0x1]
	enum ResurrectMethod;//[Offset: 0xd5d, Size: 0x1]
	Vector TempDeathBoxLoc;//[Offset: 0xd60, Size: 0xc]
	int ResurrectTimeCfg;//[Offset: 0xd6c, Size: 0x4]
	void OnReceiveExposedLocation(SolarPlayerState* OtherPS, out const Vector Location);// 0x1378304f79008
	void OnRep_TeammatesState();// 0x9ad6051b9001
	float CalculateCharacterExp();// 0x9b2a051b9001
	int GetWeaponSettlmentExp(int weaponid);// 0xffffffff8df4e2e0
	void OnResurrectTimeChangedCopy(int ResurrectTime, int Cfg_ResurrectTime);// 0xfffffffefcea6ad0
	void ReceiveTalentStateSet(enum InState);// 0xfffffffe8a0c8d60
	void OnRep_UserId();// 0x7387fc3cf39000
	int LuaGetExpFromWeaponImplementation(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x132bf04f39041
	void OnRep_BattleVoiceId();// 0xffffffff4c9d8ac0
	void OnRep_RTCType();// 0x132be04f39041
	void ReceivePostInitializeComponents();// 0xffffffff4bd52000
	void ReceiveTeamIdReplicated(bool bRelatedToSelf);// 0xffffffff4cd68040
	int GetExpAddValueFromItem(int ItemID);// 0x132b704f39041
	int CalculateZomborg();// 0x42b3ff8c04f39101
	float GetExpSettleModePunishRatio();// 0x9c38051b9001
	void ReceiveClientInitialize(Controller* C);// 0x1377b04f39041
	void ReceiveEndPlay(byte EndPlayReason);// 0xffffff8f04f39002
	void OnStopReceiveExposedLocation(SolarPlayerState* OtherPS);// 0xffffff8c04f39000
	float CalculateAccountExp();// 0xffffff8f04f39002
	void ReceiveSideReplicatedAfter();// 0xffffff8c04f39000
	void NotifyUpdateTeamMateLevelUI();// 0x15d59051b9001
	FString GetModuleName();// 0x10dfb051b9001
	void OnResurrectTimeChanged(int ResurrectTime, int Cfg_ResurrectTime);// 0x10dfc051b9001
	void GetResurrectLocation(out Vector Location);// 0x10dfd051b9001
	void Remove All Revive Mark(SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x10dfe051b9001
	Vector GetDeathBoxLocation(BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetDeathBoxLoc_ReturnValue);// 0x10e00051b9001
	bool PlayerCanRebirthBlueprint(CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess);// 0x10e01051b9001
	void OnRep_CharacterHealthState(GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess);// 0x1334b04f39041
	void Handling Is Resurrecting(bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue);// 0x10e03051b9001
	void GetSpecialHitTypeArray(out int[] NewParam, byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int[] K2Node_MakeArray_Array);// 0x10e04051b9001
	void Set Death Box Ref(BP_DBox_Default_C* InDeathBox, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x10e05051b9001
	void OnRep_bIsReviveSkydiving(bool CallFunc_IsServer_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x10e06051b9001
	void Remove Punctuation(bool bKeepRebornLine, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x10e07051b9001
	int GetExpByBehavior(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage, int Multiplier, int ID, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, int[] CallFunc_GetSpecialHitTypeArray_NewParam, bool CallFunc_Array_Contains_ReturnValue, int Temp_int_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_Variable, int K2Node_Select_Default, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, const SolarTablesData_Behavior CallFunc_GetRowData_ReturnValue, const SolarTablesData_EscapeExp CallFunc_GetRowData_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_ItemBehavior CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue);// 0x10e08051b9001
	void IsAiCompCdClear(out bool Result, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x10e09051b9001
	void OnRep_bIsResurrecting();// 0x10e0a051b9001
	void Create Punctuation(Vector InputPin, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, UI_WorldMark_ReviveTeammates_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates, bool K2Node_DynamicCast_bSuccess, Transform CallFunc_Conv_VectorToTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SI_RebornLine_C* CallFunc_FinishSpawningActor_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x10e0b051b9001
	void GetLogicBase(out BP_Logic_Framework_C* Output_Get, bool CallFunc_IsValid_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess);// 0x10e0c051b9001
	void OnRep_ResurrectTime(bool CallFunc_IsServer_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x10e0d051b9001
	void Death Cleanup UI(PlayerController* CallFunc_GetPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue);// 0x10e0e051b9001
	void Get Resurrect UI(out UI_Resurrect_C* Output_Get, UserWidget* CallFunc_CreateSolarWidget_ReturnValue, UI_Resurrect_C* K2Node_DynamicCast_AsUI_Resurrect, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess, UI_Resurrect_C* CallFunc_GetResurrectByItemUI_Output_Get);// 0x10e0f051b9001
	void GetLastDeathLocation(out Vector Output, int CallFunc_Array_LastIndex_ReturnValue, Vector CallFunc_Array_Get_Item);// 0x10e10051b9001
	void OnCharacterLanded();// 0x10e11051b9001
	void OnPlayerInteract(byte InteractType);// 0x10e12051b9001
	void ReceiveBeginPlay();// 0x10e15051b9001
	void OnCharacterEjectStateChanged(byte State, SolarCharacter* TargetCharacter);// 0x10e16051b9001
	void OnTimeCut();// 0x10e17051b9001
	void [s]RequestResurrectInTime(int Time, byte Type, Vector Location, S_ResurrectInfo options, bool bUseParamZ);// 0x10e18051b9001
	void [c]ShowResurrectUI(int Time, byte Type);// 0x10e19051b9001
	void DropPickableItem(Object* Item);// 0x10e1a051b9001
	void PickupPickableItem(Object* Item);// 0x10e1b051b9001
	void Event_CreateDeathBoxMark();// 0x10e1c051b9001
	void Event_OnResEnd(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x10e1d051b9001
	void AiCompCountDown();// 0x10e1e051b9001
	void ResetAiCompTimer(int Time);// 0x10e1f051b9001
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x10e20051b9001
	void [C]OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum Type);// 0x10e21051b9001
	void Event_EnterSkydiveFly();// 0x10e22051b9001
	void OnInteractBtnHit(Object* Publisher, Object* Payload, out const FString[] MetaData);// 0x10de204f39041
	void [S] Request Actor Removal(Actor* Target Actor);// 0x12b2a04f39041
	void OnOtherPlayerStopSpectateMyTeam(SolarSpectateInfo* InSpectateInfo);// 0x10e25051b9001
	static void ExecuteUbergraph_BP_PlayerState_Framework(int EntryPoint, int Temp_int_Variable, bool Temp_bool_Variable, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, UI_WorldMark_ReviveTeammatesDeathbox_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates_Deathbox, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameManagerBase* CallFunc_GetGameManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameReviveItemManager* K2Node_DynamicCast_AsGame_Revive_Item_Manager, bool K2Node_DynamicCast_bSuccess, GameManagerBase* CallFunc_GetGameManager_ReturnValue, byte K2Node_CustomEvent_InteractType, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, int Temp_int_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_Add_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Location, S_ResurrectInfo K2Node_CustomEvent_Options, bool K2Node_CustomEvent_bUseParamZ, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_NotEqual_ByteByte_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Vector K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, int CallFunc_Add_IntInt_ReturnValue, UI_Resurrect_C* CallFunc_Get_Resurrect_UI_Output_Get, interface classNone K2Node_DynamicCast_AsI_Resurrect, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsLocalPlayerCameraFocusingMe_ReturnValue, int Temp_int_Variable, Object* K2Node_CustomEvent_Item, Object* K2Node_CustomEvent_Item, interface classNone K2Node_DynamicCast_AsI_Pickable_Item, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsI_Pickable_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsServer_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, int Temp_int_Variable, byte K2Node_CustomEvent_ResurrectType, BP_PlayerState_Framework_C* K2Node_CustomEvent_TargetPlayer, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsServer_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_CustomEvent_Time, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int K2Node_Event_GainedExp, int K2Node_Event_CurrentExp, int K2Node_Event_TotalExp, enum K2Node_Event_BehaviorType, int K2Node_CustomEvent_GainedExp, int K2Node_CustomEvent_CurrentExp, int K2Node_CustomEvent_TotalExp, enum K2Node_CustomEvent_Type, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Object* K2Node_CustomEvent_Publisher, Object* K2Node_CustomEvent_Payload, const FString[] K2Node_CustomEvent_Metadata, int Temp_int_Variable, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, Actor* K2Node_CustomEvent_Target_Actor, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, enum CallFunc_GetBuildConfiguration_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Vector CallFunc_GetDeathBoxLoc_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_SI_RebornLine_C* CallFunc_FinishSpawningActor_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, SolarSpectateInfo* K2Node_Event_InSpectateInfo, Vector CallFunc_GetResurrectLocation_Location, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_ResurrectCharacter_ReturnValue, int Temp_int_Variable, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, SingleCruiseBaseParam CallFunc_GenSingleCruiseParam_ReturnValue, SolarPlayerState* CallFunc_GetLocalPlayerState_ReturnValue, bool CallFunc_IsSpectatingOtherPlayer_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, enum K2Node_Select_Default, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, int Temp_int_Variable, enum Temp_byte_Variable, int K2Node_Select_Default, const SolarTablesData_QuickVoice CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue);// 0xffffff8b04f39002
	void OnResurrectTimeChange__DelegateSignature(int Time);// 0x10e49051b9001
	void OnResurrectionFinished__DelegateSignature(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x10e4a051b9001
	void OnResurrectionBegin__DelegateSignature(int Time, byte Type, Vector Location, S_ResurrectInfo options);// 0x12b2d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_ReviveItemManger_BattleRoyale_C.BP_ReviveItemManger_0_C.GameReviveItemManager.GameManagerBase.Info.Actor.Object
	int PointError;//[Offset: 0x360, Size: 0x4]
	float R;//[Offset: 0x364, Size: 0x4]
	float X;//[Offset: 0x368, Size: 0x4]
	float Y;//[Offset: 0x36c, Size: 0x4]
	Vector LeftUp;//[Offset: 0x370, Size: 0xc]
	Vector RightDown;//[Offset: 0x37c, Size: 0xc]
	static void GetSingleCruiseEndCenter(Vector DeathBoxLocation, out Vector Location, float Local_Length, Vector Local_CurFlyCriclePoint, float Local_Distance, Vector Local_SelfLocation, Vector Local_CircleLocation, float Local_CircleRadius, bool CallFunc_Less_FloatFloat_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_GetCurrentSafeAreaRadius_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Vector_Distance2D_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D[] K2Node_MakeArray_Array, Vector2D CallFunc___S_Get_Point_On_Line_TargetPoint, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x13ca3051b9001
	static void RevivePlayer(SolarCharacter* None, out const Transform None, out bool bool, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, int CallFunc_FTrunc_ReturnValue, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, Vector CallFunc_GetSingleCruiseEndCenter_Location, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo);// 0x11030051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_ReviveItemManger_0_C.GameReviveItemManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x278, Size: 0x8]
	int ReviveItem;//[Offset: 0x280, Size: 0x4]
	<SolarPlayerState*,int> Player_ReviveTimes;//[Offset: 0x288, Size: 0x50]
	int AdvanceNoticeTime;//[Offset: 0x2d8, Size: 0x4]
	F_ReviveItemData[] ReviveItemData;//[Offset: 0x2e0, Size: 0x10]
	bool ClearItemNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool AdvanceNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	int CurTime;//[Offset: 0x2f4, Size: 0x4]
	bool bCanReviveImmediatelyWhenDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	int ReviveDisableCountDown;//[Offset: 0x2fc, Size: 0x4]
	int ReviveStartRecycleTime;//[Offset: 0x300, Size: 0x4]
	<byte,FString> NoticeSound;//[Offset: 0x308, Size: 0x50]
	UI_Resurrect_C* ResurrectByItemUI;//[Offset: 0x358, Size: 0x8]
	void GetResurrectByItemUI(out UI_Resurrect_C* Output_Get, UserWidget* CallFunc_CreateSolarWidget_ReturnValue, UI_Resurrect_C* K2Node_DynamicCast_AsUI_Resurrect, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x1102c051b9001
	void SetPlayerReviveData(SolarPlayerState* Player, F_ReviveItemData Data, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, F_ReviveItemData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x1102d051b9001
	void GetPlayerReviveData(SolarPlayerState* Player, out F_ReviveItemData Data, out bool bFind, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, F_ReviveItemData CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x1102e051b9001
	void RemovePlayerFromRevivingPlayerArr(out const SolarPlayerState* Player, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x1102f051b9001
	void AddPlayerIntoRevivingPlayerArr(out const SolarPlayerState* Player, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x11031051b9001
	void OnRep_AdvanceNotice(bool CallFunc_IsServer_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x11032051b9001
	void OnRep_ClearItemNotice();// 0x11033051b9001
	bool [ S]Try to Revive Player with Item(SolarPlayerState* Player, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, FString CallFunc_Conv_IntToString_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsPlayerReviving_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, bool CallFunc_RevivePlayer_Bool, FString CallFunc_Vector2String_Str, bool CallFunc_PlayerTryUseReviveItem_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_CanPlayerUseReviveItem_ReturnValue);// 0x11034051b9001
	void Set Player Use Revive Item Times(SolarPlayerState* Player, bool Local_Find, F_ReviveItemData CallFunc_GetPlayerReviveData_Data, bool CallFunc_GetPlayerReviveData_bFind, F_ReviveItemData K2Node_MakeStruct_F_ReviveItemData, int CallFunc_Add_IntInt_ReturnValue, F_ReviveItemData K2Node_MakeStruct_F_ReviveItemData);// 0x11035051b9001
	void [ A]Get Player Use Revive Item Times(SolarPlayerState* Player, out int Value, int Local_Times, bool Local_Find, F_ReviveItemData CallFunc_GetPlayerReviveData_Data, bool CallFunc_GetPlayerReviveData_bFind);// 0x11036051b9001
	bool CanPlayerUseReviveItem(const SolarPlayerState* InPlayerState, bool bCheckItemNum, int CallFunc_GetMaxReviveUsage_ReturnValue, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetPlayerReviveItemNum_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, bool CallFunc_IsOutBySelf_ReturnValue, bool CallFunc_IsPlayerOffline_ReturnValue, int CallFunc_GetMaxReviveUsage_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x11037051b9001
	bool CanGlobalUseReviveItem(bool CallFunc_CanGlobalUseReviveItem_ReturnValue);// 0x11038051b9001
	void RevivePlayer(SolarCharacter* None, out const Transform None, out bool bool, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, int CallFunc_FTrunc_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x11039051b9001
	void ReceiveBeginPlay();// 0x1103a051b9001
	void Event_ClearRevive();// 0x1103b051b9001
	void OnPlayerResurrected(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x1103c051b9001
	void Event_ClearReviveNotifyInAdvance();// 0x1103d051b9001
	void Event_InitReviveItem();// 0x11000051b9001
	void UpdateTime();// 0x1103f051b9001
	void DownReviveImmediately(SolarPlayerState* Player);// 0x11040051b9001
	void OnPlayerHealthStateChanged(BP_PlayerState_Framework_C* InPlayerState, byte NewState);// 0x11041051b9001
	void ReviveDisableNotice(int Time);// 0x11042051b9001
	void Event_PlayerReconnect(SCMPlayerState* Player);// 0xc88e051b9008
	void OnStartReviveItemRecycleCountDownDataRequested();// 0xf54f051b9008
	void OnSpecTargetChanged_Event(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x1104b051b9001
	static void ExecuteUbergraph_BP_ReviveItemManger(int EntryPoint, bool Temp_bool_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, const byte[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_IsClosed_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const FString[] Temp_string_Variable, byte Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Has_Been_Initd_Variable, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool Temp_bool_IsClosed_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_IsClosed_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, const byte[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const byte[] Temp_byte_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_GetPlayerReviveItemNum_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_ClearBackpackItem_ReturnValue, byte K2Node_CustomEvent_ResurrectType, BP_PlayerState_Framework_C* K2Node_CustomEvent_TargetPlayer, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetReviveItemRepoTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, const FString[] Temp_string_Variable, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, SolarPlayerState* K2Node_CustomEvent_Player, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_PlayerState_Framework_C* K2Node_CustomEvent_InPlayerState, byte K2Node_CustomEvent_NewState, bool Temp_bool_Has_Been_Initd_Variable, bool K2Node_Select_Default, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetReviveItemRepoTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, int K2Node_CustomEvent_Time, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Round_ReturnValue, const enum[] Temp_byte_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const byte Temp_byte_Variable, const byte Temp_byte_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, SCMPlayerState* K2Node_CustomEvent_Player, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue, SolarPlayerState* K2Node_CustomEvent_OldTarget, SolarPlayerState* K2Node_CustomEvent_NewTarget, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, UI_Resurrect_C* CallFunc_GetResurrectByItemUI_Output_Get, bool CallFunc_IsValid_ReturnValue, const byte Temp_byte_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue);// 0x1332d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameReviveItemManager.GameManagerBase.Info.Actor.Object
	int MaxReviveUsage;//[Offset: 0x228, Size: 0x4]
	float ReviveItemRepoTime;//[Offset: 0x22c, Size: 0x4]
	float ReviveProximityRadius;//[Offset: 0x230, Size: 0x4]
	float ReviveHeight;//[Offset: 0x234, Size: 0x4]
	float ReviveWaitTime;//[Offset: 0x238, Size: 0x4]
	bool bGlobalUseRevieItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	float DownedReviveButtonDelayTime;//[Offset: 0x240, Size: 0x4]
	float MinReviveRadius;//[Offset: 0x244, Size: 0x4]
	float MaxReviveRadius;//[Offset: 0x248, Size: 0x4]
	Vector SingleCruiseDirection;//[Offset: 0x24c, Size: 0xc]
	float CapsuleAirlineTotalTime;//[Offset: 0x258, Size: 0x4]
	float CapsuleAirlineTotalDistance;//[Offset: 0x25c, Size: 0x4]
	float CapsuleExtendRadius;//[Offset: 0x260, Size: 0x4]
	float CapsuleExtendHalfheight;//[Offset: 0x264, Size: 0x4]
	SolarPlayerState*[] InRevivingPlayerState;//[Offset: 0x268, Size: 0x10]
	bool TryToRevivePlayerWithItem(const SolarPlayerState* InPlayerState);// 0x47ec04f39041
	void SetMaxReviveUsage(const int InUsage);// 0x47eb04f39041
	void SetGlobalUseReviveItem(const bool InCanUseItem);// 0x47ea04f39041
	bool PlayerTryUseReviveItem(SolarPlayerState* InPlayerState, const int InUseNum);// 0x47e904f39041
	void OnTeammateReviveManagerRefresh();// 0x47e804f39041
	void OnStartReviveItemRecycleCountDownDataRequested();// 0x47e704f39041
	void OnRep_MaxUseage();// 0x47e604f39041
	void OnRep_GlobalUseRevieItem();// 0x47e504f39041
	bool IsPlayerReviving(const SolarPlayerState* InPlayerState);// 0x47e404f39041
	float GetReviveWaitTime();// 0x47e304f39041
	float GetReviveProximityRadius();// 0x47e204f39041
	float GetReviveItemRepoTime();// 0x47e104f39041
	int GetReviveItemID();// 0x47e004f39041
	float GetReviveHeight();// 0x47df04f39041
	int GetPlayerReviveItemNum(const SolarPlayerState* InPlayerState);// 0x47de04f39041
	int GetMaxReviveUsage();// 0x47dd04f39041
	float GetDownedReviveButtonDelayTime();// 0x47dc04f39041
	SingleCruiseBaseParam GenSingleCruiseParam(Vector DeathLocation);// 0x47db04f39041
	void ClearAllPlayersReviveItem();// 0x47da04f39041
	bool CanPlayerUseReviveItem(const SolarPlayerState* InPlayerState, bool bCheckItemNum);// 0x47d904f39041
	bool CanGlobalUseReviveItem();// 0x47d804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Resurrect_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* CountDown_Progress_Anim;//[Offset: 0x408, Size: 0x8]
	WidgetAnimation* CountDown_Anim;//[Offset: 0x410, Size: 0x8]
	WidgetAnimation* Resurrecting_Enter_Anim;//[Offset: 0x418, Size: 0x8]
	WidgetAnimation* ReliveProp_Anim;//[Offset: 0x420, Size: 0x8]
	Overlay* Countdown;//[Offset: 0x428, Size: 0x8]
	Image* img_Props;//[Offset: 0x430, Size: 0x8]
	Image* Img_RebirthTimeMAT;//[Offset: 0x438, Size: 0x8]
	TextBlock* Txt_RebirthTimeNum;//[Offset: 0x440, Size: 0x8]
	int ReviveWaitTime;//[Offset: 0x448, Size: 0x4]
	BP_PlayerState_Framework_C* Player;//[Offset: 0x450, Size: 0x8]
	TimerHandle HandleEnterAnimEnd;//[Offset: 0x458, Size: 0x8]
	TimerHandle HandleFinishAnimEnd;//[Offset: 0x460, Size: 0x8]
	float FadeDuringTime;//[Offset: 0x468, Size: 0x4]
	void RemoveInputFlag(PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarInputSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsSpectatingOtherPlayer_ReturnValue);// 0x1118d051b9001
	void AddInputFlag(PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarInputSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsSpectatingOtherPlayer_ReturnValue);// 0x1118e051b9001
	void TryCloseByPlayer(BP_PlayerState_Framework_C* OldPlayer, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x1118f051b9001
	void Visible and Invisible Protection(out bool Exec, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocalPlayerCameraFocusingMe_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x11190051b9001
	static void SetIcon(byte Type, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x11191051b9001
	void UIEvent_Show(int ReviveWaitTime);// 0x11192051b9001
	void ShowResurrectUI(int Time, byte Type, BP_PlayerState_Framework_C* Player);// 0x11193051b9001
	void RebirthCountDown(int Time);// 0x11194051b9001
	void CloseUI();// 0xffffff8c04f39000
	void BeginCountDown();// 0xffffffff8cd95a90
	void EndEvent();// 0x11197051b9001
	static void ExecuteUbergraph_UI_Resurrect(int EntryPoint, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_ReviveWaitTime, FText CallFunc_Conv_IntToText_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_SafeDivide_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_Event_Time, byte K2Node_Event_Type, BP_PlayerState_Framework_C* K2Node_Event_Player, delegate K2Node_CreateDelegate_OutputDelegate, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_Visible_and_Invisible_Protection_Exec, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int K2Node_CustomEvent_Time, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_Subtract_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue);// 0x1115c04f39001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x3f8c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3f9704f39041
	void SetPadding(Margin InPadding);// 0x3f9604f39041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3f9504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: F_ReviveItemData
	FString PlayerID_3_454127FA49A9E9B7DFC44B8255034BF1;//[Offset: 0x0, Size: 0x10]
	int Times_5_60AE18DB4EC5A089DB2C648682EFCFC5;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	float TimeOutSeconds;//[Offset: 0xcc, Size: 0x4]
	bool bUseNewAiComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	delegate OnConfigInitiated;//[Offset: 0x138, Size: 0x10]
	delegate OnBattleStart;//[Offset: 0x148, Size: 0x10]
	delegate OnPlayerOut;//[Offset: 0x158, Size: 0x10]
	delegate OnPlayerReconnected;//[Offset: 0x168, Size: 0x10]
	void UpdateAliveTeamsAndPlayers();// 0x45da04f39041
	void ReceiveSpectatorJoinData(SCMPlayerState* Player);// 0x45d904f39041
	void ReceiveServerLevelLoaded(FString LevelName);// 0x45d804f39041
	bool ReceivePlayerTeamPreJoinRequest(out const SCMPlayerState*[] PreJoinPlayers, int TeamID);// 0x45d704f39041
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x45d604f39041
	void ReceivePlayerReJoin(SCMPlayerState* NewPlayer);// 0x45d504f39041
	void ReceivePlayerPreLogin(FString PlayerId, SCMPlayerState* OfflinePlayer, out FString ErrorMsg);// 0x45d404f39041
	void ReceivePlayerNonSpectatorJoinData(SCMPlayerState* Player);// 0x45d304f39041
	void ReceivePlayerLevelLoaded(SCMPlayerController* Player, FString LevelName);// 0x45d204f39041
	void ReceivePlayerJoinData(FString PlayerId);// 0x45d104f39041
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x45d004f39041
	void ReceivePlayerJoin(SCMPlayerState* NewPlayer, bool IsAI);// 0x45cf04f39041
	void ReceivePlayerCancelJoin(FString PlayerId);// 0x45ce04f39041
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x45cd04f39041
	void ReceiveOBPlayersChanged();// 0x45cc04f39041
	void ReceiveGameModeInit();// 0x45cb04f39041
	void ReceiveBattleTick(float BattleTime, float DeltaTime);// 0x45ca04f39041
	void ReceiveBattleEnd();// 0x45c904f39041
	void ReceiveBattleBegin();// 0x45c804f39041
	void OnStartBattle();// 0x45c704f39041
	void OnPlayerSettled(SCMPlayerState* Player);// 0x45c604f39041
	void OnPlayerReconnect(SCMPlayerState* Player);// 0x45c504f39041
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x45c404f39041
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x45c304f39041
	void OnPlayerDisconnect(SCMPlayerState* OfflinePlayer);// 0x45c204f39041
	void OnPlayerCheat(SCMPlayerState* CheatPlayer);// 0x45c104f39041
	void OnPlayerAbnormal(SCMPlayerState* CheatPlayer);// 0x45c004f39041
	void OnMatchEnd(const int RPCID);// 0x45bf04f39041
	void OnDSClose();// 0x45be04f39041
	void OnBotAIDataReady(int AICount);// 0x45bd04f39041
	bool IsAllowReconnectGame(SCMPlayerState* InPC);// 0x45bc04f39041
	void CallOnPlayerReconnected(SCMPlayerState* InPlayerState);// 0x45bb04f39041
	void CallOnPlayerOut(SCMPlayerState* InPlayerState);// 0x45ba04f39041
	void CallOnConfigInitiated();// 0x45b904f39041
	void CallOnBattleStart();// 0x45b804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_ResurrectInfo
	bool bClearWeapons_8_85433FCD494E4E2DDCA2F6AB69D508C9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bClearAllItems_7_1B66870A49E70A4A31DBD1B93C1AE45D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bEmptyEnergy_9_422079A04E20412A0DD60594501D7D8C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bReChargeJetToFull_10_2649F2CB4F2A722D287E91848E966DBF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	enum ResurrectMethod_15_E3E0A84B479C7DB70DAAF88AAF99DA23;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Logic_BattleRoyale_C.BP_Logic_Framework_C.CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1b0, Size: 0x8]
	int WaitTime;//[Offset: 0x1b8, Size: 0x4]
	PlayerStart*[] WaitinglandStart;//[Offset: 0x1c0, Size: 0x10]
	BP_GameState_BattleRoyale_C* GameState;//[Offset: 0x1d0, Size: 0x8]
	delegate OnGoInToBattleState;//[Offset: 0x1d8, Size: 0x10]
	bool bWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	SolarTablesData_WarmGameMode WarmGameInfo;//[Offset: 0x1f0, Size: 0x68]
	DataTable* BattleTimeline;//[Offset: 0x258, Size: 0x8]
	<int,S_EventList_BattleRoyal> EventList;//[Offset: 0x260, Size: 0x50]
	BP_MapInfoComponent_C* MapInfo;//[Offset: 0x2b0, Size: 0x8]
	int ShrinkIndex;//[Offset: 0x2b8, Size: 0x4]
	BP_BattleRoylePoisonCircle_C* PoisonCircle;//[Offset: 0x2c0, Size: 0x8]
	BP_SolarBombingManager_C* BoomingManager;//[Offset: 0x2c8, Size: 0x8]
	byte ModeBattleState;//[Offset: 0x2d0, Size: 0x1]
	Vector[] AirDropPosHistoryRecord;//[Offset: 0x2d8, Size: 0x10]
	int AiLevel;//[Offset: 0x2e8, Size: 0x4]
	int DSTime;//[Offset: 0x2ec, Size: 0x4]
	<byte,bool> ModeEventValid;//[Offset: 0x2f0, Size: 0x50]
	int TotalPlayer;//[Offset: 0x340, Size: 0x4]
	BP_ReviveItemManger_BattleRoyale_C* ReviveManager;//[Offset: 0x348, Size: 0x8]
	BP_Formula_BattleRoyale_C* BR Formula Manager;//[Offset: 0x350, Size: 0x8]
	int TeamMemberCount;//[Offset: 0x358, Size: 0x4]
	BehaviorTree* BotBehaviorTree;//[Offset: 0x360, Size: 0x8]
	SCMPlayerState*[] PlayersQuitOnWaitingLand;//[Offset: 0x368, Size: 0x10]
	int PlayerCountMax;//[Offset: 0x378, Size: 0x4]
	bool bCanSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	class BP_BattleRoylePoisonCircle_C* PoisonCircleClass;//[Offset: 0x380, Size: 0x8]
	class SolarBotAIController* AIController;//[Offset: 0x388, Size: 0x8]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x390, Size: 0x8]
	float[] RadiusArr;//[Offset: 0x398, Size: 0x10]
	int AILevelMax;//[Offset: 0x3a8, Size: 0x4]
	delegate BattleStateChanged;//[Offset: 0x3b0, Size: 0x10]
	int PlayerCountBattleStart;//[Offset: 0x3c0, Size: 0x4]
	int ChestSpawnerID;//[Offset: 0x3c4, Size: 0x4]
	BPC_AiManagerBattleRoyale_C* AiManager;//[Offset: 0x3c8, Size: 0x8]
	class GameplayAbility* CelebrateWinnerGAClass;//[Offset: 0x3d0, Size: 0x8]
	void GetWeaponIDByCharacter(SolarCharacter* InCharacter, int InSlot, out int OutWeaponID, int LocalWeaponID, bool CallFunc_IsValid_ReturnValue, SolarPlayerWeapon* CallFunc_GetWeaponBySlot_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x10fe2051b9001
	void GetPlayerDataTraceByPlayer(BP_PlayerState_BattleRoyale_C* InPlayerState, out <FString,FString> Map, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetPlayerItems_Output, FString CallFunc_Get_Player_Accessories_Output, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetWeaponIDByCharacter_OutWeaponID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponIDByCharacter_OutWeaponID, int CallFunc_GetWeaponIDByCharacter_OutWeaponID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_GetCharacterLocation_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, <FString,FString> K2Node_MakeMap_Map);// 0x10fe3051b9001
	void HandleWinnerTeamPostSlomo(SolarTeamInfo* WinnerTeam);// 0x10fe4051b9001
	static void HandleWinnerTeamPreSlomo(SolarTeamInfo* WinnerTeam, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, SolarPlayerState* CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, GameplayAbilitySpecHandle CallFunc_K2_GiveAbility_ReturnValue);// 0x10fe5051b9001
	void PresettleAll(int TeamRank, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue);// 0x10fc8051b9001
	void DealTeammateAISettle(SolarPlayerState* Player, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, FString CallFunc_Conv_TextToString_ReturnValue, const byte[] K2Node_MakeArray_Array, bool CallFunc_SetDataBool_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x10fe6051b9001
	void Custom Room Start(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x427fff8c47739000
	void SendItemToPlayer(SolarPlayerState* Player, out const <int,int> ItemMap, FString NewLocalVar, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_GetDisplayName_ReturnValue, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Left_ReturnValue, enum CallFunc_AddBackpackItem_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x10fe7051b9001
	static void GetVehicleDataTrace(out const <FString,FString> Map, int NewLocalVar, <int,int> VehicleData, FString[] CarNum, int Temp_int_Array_Index_Variable, SolarVehicleSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, Actor*[] CallFunc_GetActiveVehicleList_OutActiveVehicles, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, Actor* CallFunc_Array_Get_Item, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, SolarVehiclePawn* K2Node_DynamicCast_AsSolar_Vehicle_Pawn, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int CallFunc_GetVehicleTypeID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, class Actor CallFunc_GetObjectClass_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, Actor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int[] CallFunc_Map_Keys_Keys, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x10fe8051b9001
	static void Init Poison Circle(out BP_MapInfoComponent_C* MapInfo, bool CallFunc_IsValid_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, Vector CallFunc_Get_Safe_Area_Center_Pos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool Temp_bool_Variable, Vector CallFunc_MakeVector_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, int CallFunc__S_GetMapIDByName_MapID, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_BattleRoylePoisonCircle_C* CallFunc_FinishSpawningActor_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector K2Node_Select_Default);// 0x10fe9051b9001
	void GetAiManager(out BPC_AiManagerBattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x10fea051b9001
	void SetSkillStateByBattleState(byte Temp_byte_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, bool K2Node_SwitchEnum_CmpSuccess, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, S_SkillState K2Node_Select_Default, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x10feb051b9001
	int Get Shrink Index(bool Temp_bool_Variable, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, int CallFunc_Get_Safe_Area_Centers_Len_Len, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int K2Node_Select_Default);// 0x10fec051b9001
	void TryPushBattleState(byte TargetState, bool ForcePush, byte StateOld, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc__A_GetBattleTime_Time, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, bool CallFunc_BooleanAND_ReturnValue, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc__A_GetDSTime_Time, int CallFunc_Get_Current_Player_Count_Result, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool Temp_bool_Variable, byte Temp_byte_Variable, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Greater_ByteByte_ReturnValue);// 0x1331204f39041
	static void GetWeaponID(int ItemID, out int weaponid, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, const SolarTablesData_GunProperty CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue);// 0x10fee051b9001
	static void VehicleDataTrace(<FString,FString> CallFunc_GetVehicleDataTrace_Map);// 0x10fef051b9001
	static void GetPlayerDataTrace(BP_PlayerState_BattleRoyale_C* Player, out <FString,FString> Map, int CallFunc_GetPlayerStatisticData_OutValue, int CallFunc_GetPlayerStatisticData_OutValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_GetPlayerItems_Output, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Get_Player_Accessories_Output, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_GetCharacterID_CharacterID, int CallFunc_GetCharacterID_SkinID, int CallFunc_GetCharacterID_ColorID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocationInSafeArea_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc_Clamp_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, Vector CallFunc_GetCharacterLocation_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, <FString,FString> K2Node_MakeMap_Map);// 0x10ff0051b9001
	void KickOutExcessAI(BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_DeleteAIFromBattleForPlayer_ReturnValue, int K2Node_Copy_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Greater_IntInt_ReturnValue);// 0x10ff1051b9001
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg, bool Temp_bool_Variable, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, FString Temp_string_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, FString Temp_string_Variable, FString K2Node_Select_Default);// 0x10ff2051b9001
	void GetAiLevel(SolarPlayerState* Target, out int DefaultDifficultyLevel, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x10ff3051b9001
	void Get Config(out CFG_BattleRoyale_C* CFG, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x10ff4051b9001
	void DataTrace(const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarPlayerState*[] K2Node_MakeArray_Array);// 0x10ff5051b9001
	void UpdatePlayerData(SolarPlayerState* Target, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_SetDataByte_ReturnValue);// 0x10ff6051b9001
	void PreSettleDeal(SCMPlayerState* Player, enum OutType, bool Lamster, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool CallFunc_QuitImmediately_SendToSettle, bool CallFunc_IsLamster_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_UpdateTeamData_bAced, bool CallFunc_HasBeenEliminated_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_BoolToString_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, SCMPlayerState*[] K2Node_MakeArray_Array, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool K2Node_Select_Default, byte K2Node_Select_Default);// 0x10ff7051b9001
	void Will Master Leaving Disband Room(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x10ff8051b9001
	void Is Master Disbanding Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x10ff9051b9001
	void Is Kick Out Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x10ffa051b9001
	void Is Side Switch Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x10ffb051b9001
	void BuyResurrectionDeal(PlayerState* Player, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x10ffc051b9001
	void UpdateWinnerData(FString Team, const byte[] Temp_byte_Variable, bool CallFunc_SetDataBool_ReturnValue, bool CallFunc_SetDataBool_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, bool CallFunc_SetDataByte_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue);// 0x10ffd051b9001
	bool IsLamster(SCMPlayerState* Player, enum Index, bool Temp_bool_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0x10ffe051b9001
	bool CanPlayerBattle(SCMPlayerState* Player, byte State, bool IsBot, bool CanRevive, bool Alive, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue);// 0x10fff051b9001
	void UpdateTeamData(FString Team, out bool bAced, SolarTeamInfo* LocalTeam, bool Aced, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, BP_GameState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Game_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasBeenEliminated_ReturnValue, bool CallFunc_SetDataBool_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x10fc2051b9001
	void GetConiReviveManager(out BP_ReviveItemManger_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue);// 0x11001051b9001
	bool IsAllowReconnectGame(SCMPlayerState* InPC, bool Temp_bool_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, bool CallFunc_PlayerCanRebirthByAllMeans_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, bool K2Node_Select_Default, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue);// 0x11002051b9001
	void QuitImmediately(enum Index, SCMPlayerState* InputPin, out bool SendToSettle, bool ToSettle, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0x11003051b9001
	static void Update Player Data Trace(SCMPlayerState* PlayerState, Vector NewLocalVar, FString CallFunc_GetDisplayName_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, SolarGameInstanceBase* CallFunc_GetSolarGameInstanceBase_ReturnValue, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue, BlueCircleManager* CallFunc_GetBlueCircleManager_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarInteractableManager* CallFunc_GetSolarInteractableManager_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, int CallFunc_GetShieldUpgradeItemShopGroupID_ReturnValue, FString CallFunc_Vector2String_Str, FString CallFunc_Conv_IntToString_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, int CallFunc_GetAiLevel_DefaultDifficultyLevel, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_FTrunc_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, FString CallFunc_Conv_IntToString_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetConiReviveManager_Output_Get, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetPlayerForceJumped_ReturnValue, Vector CallFunc_GetPlayerLandLocation_Location, bool CallFunc_GetPlayerLandLocation_Succeed, FString CallFunc_Bool2String_String, FString CallFunc_Conv_BoolToString_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, FString CallFunc_Vector2String_Str, float CallFunc_Distance2D_ReturnValue, Vector CallFunc_GetPlayerEjectLocation_Location, bool CallFunc_GetPlayerEjectLocation_Succeed, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Bool2String_String, FString CallFunc_Vector2String_Str, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_VectorArray2String_Str, FString CallFunc_GetTeamName_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_VectorArray2String_Str, FString CallFunc_Conv_IntToString_ReturnValue, byte CallFunc_GetTeamRank_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, int CallFunc_GetZomborg_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_Conv_IntToString_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int Temp_int_Variable, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x11004051b9001
	void Create Airdrop(int ChestID, Transform TempPos, bool DuplicateFlag, Transform[] TempAirDropPos, int Temp_int_Array_Index_Variable, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, FString CallFunc_Conv_VectorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int Temp_int_Loop_Counter_Variable, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, float CallFunc_GetTimeSeconds_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Transform[] CallFunc_GetSolarItemManagerAirDropRelatedInfo_TransformsArr, int CallFunc_GetSolarItemManagerAirDropRelatedInfo_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Transform CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x11005051b9001
	static void StartCruising(CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, SolarCharacter*[] CallFunc__A_GetCharacters_Characters, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, AirlineData CallFunc_GetAirline_Airline, int CallFunc_GetAirline_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue);// 0x11006051b9001
	void InitElements(Vector CallFunc_MakeVector_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_Formula_BattleRoyale_C* CallFunc_FinishSpawningActor_ReturnValue, BP_SolarBombingManager_C* CallFunc_FinishSpawningActor_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0x11007051b9001
	void Get Map Info(out BP_MapInfoComponent_C* MapInfo, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue);// 0x11008051b9001
	void Init Timeline Event(out DataTable* BattleTimeline, S_Event_BattleRoyale[] TempList, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_Array_Get_Item, S_Event_BattleRoyale CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_Array_Get_Item, S_Event_BattleRoyale CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, S_Event_BattleRoyale[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, S_EventList_BattleRoyal K2Node_MakeStruct_S_EventList_BattleRoyal, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, int Temp_int_Loop_Counter_Variable, const FString Temp_string_Variable, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, S_EventList_BattleRoyal K2Node_MakeStruct_S_EventList_BattleRoyal, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x11009051b9001
	void ExecuteBattleEvent(out const S_Event_BattleRoyale S_Event_BattleRoyale, const FString Temp_string_Variable, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const FString Temp_string_Variable, int CallFunc_Conv_StringToInt_ReturnValue, const FString Temp_string_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const FString Temp_string_Variable, float CallFunc_Conv_StringToFloat_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, const FString Temp_string_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, const byte[] Temp_byte_Variable, const FString[] Temp_string_Variable, bool Temp_bool_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const FString Temp_string_Variable, int CallFunc_Get_Shrink_Index_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Get_Shrink_Index_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, const byte[] Temp_byte_Variable, Vector CallFunc_Random_Get_Fake_Bomb_Point_Pos, bool CallFunc_Random_Get_Fake_Bomb_Point_Success, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_Select_Default, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const FString Temp_string_Variable, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector CallFunc_Get_Safe_Area_Center_Pos, int CallFunc_Conv_StringToInt_ReturnValue);// 0x1100a051b9001
	void UpdateBattleState(byte NewState, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_SetDataByte_ReturnValue, BP_GameState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Game_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x1100b051b9001
	void GetGameState(out BP_GameState_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Game_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x1100c051b9001
	static void GetPlayerStartOnWaitingland(out PlayerStart*[] PlayerStarts, PlayerStart*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1100d051b9001
	void GetBattleRoyaleMode(out BP_Mode_BattleRoyale_C* AsBP SCM Battle Royale, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Mode_BattleRoyale_C* K2Node_DynamicCast_AsBP_Mode_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x1100e051b9001
	static void InitModeSetting(SolarTablesData_WarmGameMode NewLocalVar, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc__S_PlayInEditor_bIsEditor, FString CallFunc_Conv_BoolToString_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetTeamPlayerCount_Num_Mode, FString CallFunc_Conv_IntToString_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_GetAILevelCurrentMatch_ReturnValue, int K2Node_Select_Default, int CallFunc_RandomIntInRange_ReturnValue, int CallFunc_Clamp_ReturnValue, class Object CallFunc_LoadClassAsset_Blocking_ReturnValue, class SolarBotAIController K2Node_ClassDynamicCast_AsSolar_Bot_AIController, bool K2Node_ClassDynamicCast_bSuccess, Object* CallFunc_LoadAsset_Blocking_ReturnValue, BehaviorTree* K2Node_DynamicCast_AsBehavior_Tree, bool K2Node_DynamicCast_bSuccess, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_GetWramGameType_ReturnValue, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1100f051b9001
	void GMSpawnAI();// 0x11010051b9001
	void OnMatchEnd(const int RPCID);// 0x10fc9051b9001
	void OnBattleStateChanged(byte OldState, byte NewState);// 0x11011051b9001
	void ReceiveBattleTick(float BattleTime, float DeltaTime);// 0x11012051b9001
	void PreSettle(SCMPlayerState* Player, enum OutType);// 0x10fca051b9001
	void BattleInitFinished();// 0x10fcb051b9001
	void OnDSClose();// 0x10fcc051b9001
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x10fcd051b9001
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x10fce051b9001
	void UpdateAliveTeamsAndPlayers();// 0x11013051b9001
	void MatchEnd();// 0x11014051b9001
	void VehicleSnapshot();// 0x11015051b9001
	void Snapshot();// 0x11016051b9001
	void CustomEvent();// 0x13d62051b9001
	void OnCountDownFinished();// 0x11018051b9001
	void ExecuteUbergraph_BP_Logic_BattleRoyale(int EntryPoint, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool CallFunc_IsPackagedForDistribution_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, int CallFunc_Array_Length_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, <FString,FString> CallFunc_GetPlayerDataTraceByPlayer_Map, int CallFunc_Array_Length_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, const int K2Node_Event_RPCId, byte K2Node_CustomEvent_OldState, byte K2Node_CustomEvent_NewState, int Temp_int_Variable, float K2Node_Event_BattleTime, float K2Node_Event_deltaTime, int CallFunc_FFloor_ReturnValue, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_OutType, SCMPlayerState*[] K2Node_MakeArray_Array, S_Event_BattleRoyale CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Variable, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_UpdatePlayerCount_Current, int CallFunc_UpdatePlayerCount_Current, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc__s_UpdateTeamCountMax_ReturnValue, int CallFunc__S_UpdateTeamsCount_Current, const <FString,FString> K2Node_MakeMap_Map, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_IsAI, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool K2Node_Select_Default, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc__S_SkyDiveFly_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int64 CallFunc_GetFrameCount_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, bool Temp_bool_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_OutType, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, int CallFunc_GetAIAccompanyTimelineID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_MapInfoComponent_C* CallFunc_Init_Poison_Circle_MapInfo, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc__S_UpdateTeamsCount_Current, int CallFunc_UpdatePlayerCount_Current, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, enum K2Node_Select_Default, bool Temp_bool_Variable, bool K2Node_Select_Default, GameModeGlobalSetting* CallFunc_GetGameModeSetting_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, byte Temp_byte_Variable, bool Temp_bool_Variable, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, S_SkillState K2Node_Select_Default, S_SkillState K2Node_Select_Default, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_Greater_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const Transform CallFunc_GetTransform_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, BP_CustomRoomManager_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, int[] CallFunc_GetSpawnList___ID___, int[] CallFunc_GetSpawnList___ID___, int[] CallFunc_GetSpawnList_____ID___, int[] CallFunc_GetSpawnList_____ID___, GameplayConfigBase* CallFunc_GetConfigs_ReturnValue, CGMGameplayConfig* K2Node_DynamicCast_AsCGMGameplay_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_TryGetCustomParam_OutValue, bool CallFunc_TryGetCustomParam_ReturnValue, byte Temp_byte_Variable, int CallFunc_FTrunc_ReturnValue, bool K2Node_Select_Default, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, SolarTeamInfo* CallFunc_Array_Get_Item, FString CallFunc_Conv_TextToString_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int64 CallFunc_GetFrameCount_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_HeroPickManager_C* K2Node_DynamicCast_AsBP_Hero_Pick_Manager, bool K2Node_DynamicCast_bSuccess, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, float CallFunc_Add_FloatFloat_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, int CallFunc__s_UpdateTeamCountMax_ReturnValue, bool K2Node_Select_Default, float CallFunc_GetTotalTime_TotalTime, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_IsValidIndex_ReturnValue, <FString,FString> CallFunc_GetPlayerDataTraceByPlayer_Map, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x11019051b9001
	void BattleStateChanged__DelegateSignature(byte NewState);// 0x13d5a051b9001
	void OnGoInToBattleState__DelegateSignature();// 0x1101c051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Logic_Framework_C.CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x178, Size: 0x8]
	bool bBattleStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	bool bZeroMatchFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	delegate OnPlayerJoin;//[Offset: 0x188, Size: 0x10]
	delegate OnZeroMatchFinished;//[Offset: 0x198, Size: 0x10]
	bool bConfigInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	bool bDSClosing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1]
	void Custom Room Start(const <FString,FString> K2Node_MakeMap_Map);// 0x10fc7051b9001
	void OnPlayerQuit(SCMPlayerState* Player, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, bool CallFunc_IsInPreparation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x10fcf051b9001
	void PresettleAll(const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_HasSettled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x10fd0051b9001
	void FinishConfigInitiate();// 0x10fd1051b9001
	void Update();// 0x10fd2051b9001
	void Get Current Player Count(out int Result, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x10fd3051b9001
	void ReceiveBeginPlay();// 0x10fd4051b9001
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x10fd5051b9001
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x10fd6051b9001
	void PreSettle(SCMPlayerState* Player, enum OutType);// 0x10fd7051b9001
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x10fd8051b9001
	void BattleInitFinished();// 0x10fd9051b9001
	void ReceiveServerLevelLoaded(FString LevelName);// 0x10fda051b9001
	void ReceiveBattleBegin();// 0x10fdb051b9001
	void OnPlayerDisconnect(SCMPlayerState* OfflinePlayer);// 0x10fdc051b9001
	void OnMatchEnd(const int RPCID);// 0x10fdd051b9001
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x10fde051b9001
	void OnDSClose();// 0x10fdf051b9001
	void OnPlayerCheat(SCMPlayerState* CheatPlayer);// 0x13d5b051b9001
	void OnPlayerReconnect(SCMPlayerState* Player);// 0xffffffff6db9e2c0
	void OnPlayerAbnormal(SCMPlayerState* CheatPlayer);// 0x1101d051b9001
	static void ExecuteUbergraph_BP_Logic_Framework(int EntryPoint, SCMPlayerState* K2Node_Event_OfflineTimeoutPlayer, SCMPlayerState* K2Node_Event_OfflineTimeoutPlayer, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SCMPlayerState* K2Node_CustomEvent_Player, enum K2Node_CustomEvent_OutType, SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_OutType, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, FString K2Node_Event_LevelName, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, SCMPlayerState* K2Node_Event_OfflinePlayer, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const int K2Node_Event_RPCId, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc__A_GetDSTime_Time, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_IsAI, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc__S_PlayInEditor_bIsEditor, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* K2Node_Event_CheatPlayer, SCMPlayerState* K2Node_Event_Player, SCMPlayerState* K2Node_Event_CheatPlayer, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue);// 0x4e904f3955d
	void OnZeroMatchFinished__DelegateSignature();// 0xffffff8b04f39002
	void OnPlayerJoin__DelegateSignature(SCMPlayerState* NewPlayer, bool bIsAi);// 0x2e98f0f0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_GameState_BattleRoyale_C.BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x700, Size: 0x8]
	BPC_CountDown_C* BPC_CountDown;//[Offset: 0x708, Size: 0x8]
	int MapId;//[Offset: 0x710, Size: 0x4]
	int AirlineID;//[Offset: 0x714, Size: 0x4]
	byte BattleState;//[Offset: 0x718, Size: 0x1]
	delegate BroadcastBattleStateChange;//[Offset: 0x720, Size: 0x10]
	FString WinTeam;//[Offset: 0x730, Size: 0x10]
	UI_HUD_Notice_VICTORY_C* VICTORYUI;//[Offset: 0x740, Size: 0x8]
	bool HasTop3Team;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 0x1]
	void Get Actual UICount Down Time(out float CountDownTime, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x112c0051b9001
	void CloseEmptyVictoryUI();// 0x112c1051b9001
	void OnRep_HasTop3Team(UserWidget* CallFunc_ShowSolarWidget_ReturnValue, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, bool CallFunc_DoesDistributeForDomestic_ReturnValue, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, SolarPlayerState* CallFunc_GetLocalOrSpecTargetPlayerState_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte CallFunc_GetTeamRank_ReturnValue, bool CallFunc_LessEqual_ByteByte_ReturnValue);// 0x112c2051b9001
	void ShowEmptyVictoryUI(PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, SolarPlayerState* K2Node_DynamicCast_AsSolar_Player_State, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x112c3051b9001
	static void OnRep_WinTeam(int Temp_int_Array_Index_Variable, const byte[] Temp_byte_Variable, const enum[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x1227b051b9008
	void ShowVictoryUI(bool Temp_bool_Variable, const class SolarUserWidget Temp_class_Variable, const class SolarUserWidget Temp_class_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Get_Actual_UICount_Down_Time_CountDownTime, bool CallFunc_IsPCPlatform_IsPCPlatform, PlayerController* CallFunc_GetPlayerController_ReturnValue, const class SolarUserWidget K2Node_Select_Default, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, SolarPlayerState* K2Node_DynamicCast_AsSolar_Player_State, bool K2Node_DynamicCast_bSuccess, UINoticeVictory* K2Node_DynamicCast_AsUINotice_Victory, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x112ca051b9001
	void OnRep_BattleState();// 0x112cb051b9001
	void OnRep_MapID(bool CallFunc_IsServer_ReturnValue);// 0x112cc051b9001
	void ReceiveBeginPlay();// 0x112cd051b9001
	void OnBattleStateChange(byte ChangeType);// 0x112ce051b9001
	void StartCountdown(int Time);// 0x112cf051b9001
	void BattleEnd(FString WinTeam);// 0x112d0051b9001
	void OnConfigInit();// 0x112d1051b9001
	void OnShowVictoryUI();// 0x12815051b9008
	void NetMulticastCelebrateBattleEnd(Vector Location);// 0x12819051b9008
	void CelebrateBattleEnd(Vector Location);// 0x112d4051b9001
	static void ExecuteUbergraph_BP_GameState_BattleRoyale(int EntryPoint, BP_SetRenderParametersBasedOnDifferentStates_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_Time, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString K2Node_CustomEvent_WinTeam, bool CallFunc_IsSupportCharacterRole_ReturnValue, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, Actor* CallFunc_SolarSpawnActor_ReturnValue, Vector K2Node_CustomEvent_Location, GameplayConfigBase* CallFunc_GetConfigs_ReturnValue, Vector K2Node_Event_Location, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayingReplay_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_IsServer_ReturnValue, SolarCityName*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, SolarCityName* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetCameraFocusedCharacter_ReturnValue);// 0x112d5051b9001
	void BroadcastBattleStateChange__DelegateSignature(byte Now State);// 0x112d7051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x680, Size: 0x8]
	BPC_PlayerManager_C* PlayerManager;//[Offset: 0x688, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x690, Size: 0x8]
	delegate OnBasicSystemReady;//[Offset: 0x698, Size: 0x10]
	bool bBasicSystemReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1]
	delegate OnOBPlayerListChanged;//[Offset: 0x6b0, Size: 0x10]
	delegate OnRoomDataChanged;//[Offset: 0x6c0, Size: 0x10]
	int WarmGameID;//[Offset: 0x6d0, Size: 0x4]
	delegate OnPlayerBattleStateChanged;//[Offset: 0x6d8, Size: 0x10]
	delegate OnGameStateChanged;//[Offset: 0x6e8, Size: 0x10]
	enum GameState;//[Offset: 0x6f8, Size: 0x1]
	void OnRep_GameState();// 0x112db051b9001
	void SetGameState(enum NewState);// 0x112dc051b9001
	void OnDataManagerPrepare();// 0x112dd051b9001
	void ReceiveBeginPlay();// 0x112de051b9001
	void OnOBPlayerListChange();// 0x112df051b9001
	void OnCustomRoomDataChange(out const CustomRoomData InCustomRoomData);// 0x112e0051b9001
	void OnPlayerBattleStateChange(const SCMPlayerState* PlayerState);// 0x112e1051b9001
	static void ExecuteUbergraph_BP_GameState_Framework(int EntryPoint, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsServer_ReturnValue, const CustomRoomData K2Node_Event_InCustomRoomData, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsPlayingReplay_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString Temp_string_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetWramGameType_ReturnValue, const SCMPlayerState* K2Node_Event_PlayerState, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString Temp_string_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x112e2051b9001
	void OnGameStateChanged__DelegateSignature(enum NewState);// 0x112e3051b9001
	void OnPlayerBattleStateChanged__DelegateSignature(SCMPlayerState* Player);// 0x112e4051b9001
	void OnRoomDataChanged__DelegateSignature(CustomRoomData RoomData);// 0xffffffff00577780
	void OnOBPlayerListChanged__DelegateSignature();// 0x1c289051b9001
	void OnBasicSystemReady_0__DelegateSignature();// 0xffffffff8e5ab2c0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	enum InGameState;//[Offset: 0x4e0, Size: 0x1]
	bool bInSelectHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1, Size: 0x1]
	CustomRoomData CustomRoomData;//[Offset: 0x520, Size: 0xd8]
	bool bCustomRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1]
	GameManagerBase*[] GameManagers;//[Offset: 0x600, Size: 0x10]
	GameDataManager* GameDataManager;//[Offset: 0x610, Size: 0x8]
	CustomSettlementManager* SettlementManager;//[Offset: 0x618, Size: 0x8]
	CGMManagerConfigComponent* ManagerConfigComponent;//[Offset: 0x630, Size: 0x8]
	CGFormula* InsFormula;//[Offset: 0x638, Size: 0x8]
	SolarPlayerState*[] PlayersWithTrackingAbility;//[Offset: 0x640, Size: 0x10]
	SpatializeInfoTrack*[] TrackInfos;//[Offset: 0x650, Size: 0x10]
	bool bBasicSystemReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66b, Size: 0x1]
	delegate OnBasicSystemReady;//[Offset: 0x670, Size: 0x10]
	void SetRoomPoolPrizeType(int TypeID);// 0x1c2904f39041
	void SetRoomPasssd(FString Passwd);// 0x1c2804f39041
	void SetRoomName(FString Name);// 0x1c2704f39041
	void SetRoomLevelLimit(int Level);// 0x1c2604f39041
	void SetRoomEnableSwapPos(bool bIsEnabled);// 0x1c2504f39041
	void SetRoomEnableInvite(bool bIsEnabled);// 0x1c2404f39041
	void OnTournamentBattleEnd();// 0x1c2304f39041
	void OnServerCustomRoomDataReady();// 0x1c2204f39041
	void OnRep_InGameState();// 0x1c2104f39041
	void OnRep_GameManagerList();// 0x1c2004f39041
	void OnRep_GameDataManager();// 0x1c1f04f39041
	void OnRep_CustomRoomData();// 0x1c1e04f39041
	void OnRep_bInSelectHero();// 0x1c1d04f39041
	void OnPlayerBattleStateChange(const SCMPlayerState* PlayerState);// 0x1c1c04f39041
	void OnDataManagerPrepare();// 0x1c1b04f39041
	void OnCustomRoomDataChange(out const CustomRoomData InCustomRoomData);// 0x1c1a04f39041
	void NotifyVipPlayerJoin(int FlagID, byte VipType, enum InputType, FString NickName, bool bCustomRoom, bool bInTournament);// 0x1c1904f39041
	void NotifyRoomDataChanged();// 0x1c1804f39041
	void MultiClientAllManagersOnRepDelegate__DelegateSignature();// 0x1c1704f39041
	bool IsNeedCalculateTournamentPoints();// 0x1c1604f39041
	bool IsInTournament();// 0x1c1504f39041
	bool IsInCustomServer();// 0x1c1404f39041
	bool IsCustomRoomMode();// 0x1c1304f39041
	bool IsAtNonSettlementStage();// 0x1c1204f39041
	void InitKnockoutPointParams(out KnockoutParams InParams);// 0x1c1004f39041
	TournamentData GetTournamentData();// 0x1c0f04f39041
	bool GetOBSCMPlayerList(out SCMPlayerState*[] OutPlayerList);// 0x1c0e04f39041
	CGMManagerConfigComponent* GetManagerConfigComponent();// 0x1c0d04f39041
	CGFormula* GetFormula();// 0x1c0c04f39041
	CustomRoomData GetCustomRoomData();// 0x1c0604f39041
	CGMGameplayConfig* GetCGMGameplayConfig();// 0x1c0504f39041
	void ClearCustomRoomData();// 0x1c0404f39041
	void CallOnBasicSystemReady();// 0x1c0304f39041
	int CalculateKnockoutPoints(const int InTeamRank, const int InKillNum, const float InTotalDamage, const float InTotalDamageTaken);// 0x1c0204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	bool IsBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
	bool IsBattleSettlement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 0x1]
	enum BattleEndType;//[Offset: 0x4d2, Size: 0x1]
	bool IsBattleOver();// 0x1c0104f39041
	bool GetIsBattleSettlement();// 0x1c0004f39041
	enum GetBattleEndType();// 0x1bfe04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_CountDown_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	UI_CountDown_C* CountDownWidget;//[Offset: 0xb8, Size: 0x8]
	int Time;//[Offset: 0xc0, Size: 0x4]
	TimerHandle Timer;//[Offset: 0xc8, Size: 0x8]
	int LocalTime;//[Offset: 0xd0, Size: 0x4]
	TimerHandle LocalTimer;//[Offset: 0xd8, Size: 0x8]
	delegate OnLocalTimeChange;//[Offset: 0xe0, Size: 0x10]
	delegate OnCountDownFinished;//[Offset: 0xf0, Size: 0x10]
	int MatchingText;//[Offset: 0x100, Size: 0x4]
	int MatchingTime;//[Offset: 0x104, Size: 0x4]
	delegate OnMatchCountDownFinished;//[Offset: 0x108, Size: 0x10]
	TimerHandle TimerMatch;//[Offset: 0x118, Size: 0x8]
	bool bCountDownFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	FString CountSoundName;//[Offset: 0x128, Size: 0x10]
	void OnRep_CountSoundName(bool CallFunc_NotEqual_StrStr_ReturnValue, bool CallFunc_IsPlayingReplay_ReturnValue);// 0xc041051b9001
	void [C]CountEnd(bool CallFunc_IsPlayingReplay_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue);// 0xc042051b9001
	void [S]StopMatchCountDown(bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0xc043051b9001
	static void [S]StartMatchCountDown(int MatchTime, out const delegate Event, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0xc044051b9001
	static void [S]StartCountDown(int Time, FString SoundName, out const delegate Event, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0xc045051b9001
	static void [C]StopCountDown(const <FString,FString> K2Node_MakeMap_Map, int CallFunc_StopSound2D_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xc046051b9001
	void OnRep_Time(bool CallFunc_IsServer_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0xc047051b9001
	void GetCountDownWidget(out UI_CountDown_C* Output_Get1, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_CountDown_C* K2Node_DynamicCast_AsUI_Count_Down, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0xc048051b9001
	void ReceiveBeginPlay();// 0xc049051b9001
	void StartCountdown(int Time);// 0x12857051b9008
	void OnCountDownTime();// 0xc04b051b9001
	void [C]ClientCountDown();// 0xc04c051b9001
	void CountDownTick();// 0xc04d051b9001
	void MCountDownTick();// 0xc04e051b9001
	void CustomEvent(enum NewState);// 0xc04f051b9001
	static void ExecuteUbergraph_BPC_CountDown(int EntryPoint, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_IntInt_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsServer_ReturnValue, int K2Node_CustomEvent_Time, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, int CallFunc_PlaySound2D_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, GameStateBase* CallFunc_GetGameState_ReturnValue, enum K2Node_CustomEvent_NewState, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0xc050051b9001
	void OnMatchCountDownFinished__DelegateSignature();// 0xc03d051b9001
	void OnCountDownFinished__DelegateSignature();// 0x1289b051b9008
	void OnLocalTimeChange__DelegateSignature(int Time);// 0x1288f051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CountDown_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Flip;//[Offset: 0x408, Size: 0x8]
	TextBlock* Number;//[Offset: 0x410, Size: 0x8]
	UI_HUD_Notice_Lv3_C* UI_HUD_Notice_Lv3;//[Offset: 0x418, Size: 0x8]
	WidgetSwitcher* wStyle;//[Offset: 0x420, Size: 0x8]
	int Time;//[Offset: 0x428, Size: 0x4]
	FString TimeName;//[Offset: 0x430, Size: 0x10]
	void SequenceEvent__ENTRYPOINTUI_CountDown(Overlay* NumberContainer);// 0x13065051b9001
	void SetMiniCountDownText(FString InText);// 0xffffff8c04f39044
	void SetCountDownStyle(byte Style, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x299ca051b9008
	void Finish();// 0x13069051b9001
	void NumberContainer_Event(Overlay* NumberContainer);// 0xffffff8f04f39002
	void PreConstruct(bool IsDesignTime);// 0xd364051b9001
	void None(int Time);// 0x13067051b9001
	void CustomEvent();// 0x13066051b9001
	void None(FString None);// 0x13064051b9001
	void CountDownBySingleNumber(int Number);// 0x13063051b9001
	void CustomEvent(enum ChangeType, int OldValue, int NewValue);// 0xddf8051b9001
	void CustomEvent(enum ChangeType, int OldValue, int NewValue);// 0xffffff8c04f39000
	void ExecuteUbergraph_UI_CountDown(int EntryPoint, enum K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_OldValue, int K2Node_CustomEvent_NewValue, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_IntToText_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Overlay* K2Node_CustomEvent_NumberContainer, bool K2Node_Event_IsDesignTime, FText CallFunc_Conv_IntToText_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_Time, FString K2Node_CustomEvent_____, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BindDataChangeEventInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_CustomEvent_Number, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, enum K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_OldValue, int K2Node_CustomEvent_NewValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_UnbindDataChangeEventInt_ReturnValue);// 0x12748051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_HUD_Notice_Lv3_C.UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x428, Size: 0x8]
	WidgetAnimation* ant_exit;//[Offset: 0x430, Size: 0x8]
	WidgetAnimation* Appear_Anim;//[Offset: 0x438, Size: 0x8]
	Image* Img_Txt_bg;//[Offset: 0x440, Size: 0x8]
	SolarRichTextBlock* Txt_Ballte_Notice;//[Offset: 0x448, Size: 0x8]
	void SetNoticeText(FString InText, FText CallFunc_Conv_StringToText_ReturnValue);// 0x11352051b9001
	void Construct();// 0x1c28b051b9001
	void ShowNotice(FString Text, float Duration);// 0x112c9051b9001
	static void ExecuteUbergraph_UI_HUD_Notice_Lv3(int EntryPoint, FString K2Node_CustomEvent_Text, float K2Node_CustomEvent_Duration, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xf5a304f4a8f5
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x14c, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x3e9f04f39041
	void SetActiveWidget(Widget* Widget);// 0x3e9e04f39041
	Widget* GetWidgetAtIndex(int Index);// 0x3e9d04f39041
	int GetNumWidgets();// 0x3e9c04f39041
	int GetActiveWidgetIndex();// 0x3e9b04f39041
	Widget* GetActiveWidget();// 0x3e9a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_HUD_Notice_VICTORY_C.UINoticeVictory.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4a0, Size: 0x8]
	int CountDownTime;//[Offset: 0x4a8, Size: 0x4]
	FString GetModuleName();// 0xd141051b9001
	void PreConstruct(bool IsDesignTime);// 0x12d69051b9001
	void CloseSelf();// 0xffffff8f04f39002
	void OnEndAnimFinish();// 0xffffff8f04f39002
	static void ExecuteUbergraph_UI_HUD_Notice_VICTORY(int EntryPoint, bool K2Node_Event_IsDesignTime, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0xffffff8c04f39000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UINoticeVictory.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	delegate OnAppearAnimFinishedDelegate;//[Offset: 0x428, Size: 0x10]
	FName BackToLobbyActionName;//[Offset: 0x438, Size: 0x8]
	WidgetAnimation* Appear_Anim;//[Offset: 0x440, Size: 0x8]
	WidgetAnimation* Loop_Anim;//[Offset: 0x448, Size: 0x8]
	WidgetAnimation* Exit_Anim;//[Offset: 0x450, Size: 0x8]
	Button* Btn_Return;//[Offset: 0x458, Size: 0x8]
	SolarTextBlock* Txt_Exit;//[Offset: 0x460, Size: 0x8]
	delegate EndAnimFinishedEvent;//[Offset: 0x468, Size: 0x10]
	delegate AppearAnimFinishedEvent;//[Offset: 0x478, Size: 0x10]
	void PlayAppearAnim(float InTimeToEnd);// 0x614c04f39041
	void OnReturnBtnClick();// 0x614b04f39041
	void OnEndAnimFinish();// 0x614a04f39041
	void OnAppearAnimFinished();// 0x614904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_PlayerManager_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	BP_PlayerState_Framework_C*[] AliveRealPlayers;//[Offset: 0xb8, Size: 0x10]
	BP_PlayerState_Framework_C*[] AliveAiPlayers;//[Offset: 0xc8, Size: 0x10]
	BPC_Death_Framework_C* DeathComponent;//[Offset: 0xd8, Size: 0x8]
	BP_PlayerState_Framework_C*[] RealPlayers;//[Offset: 0xe0, Size: 0x10]
	<FString,int> TeamRealPlayerCount;//[Offset: 0xf0, Size: 0x50]
	static BP_PlayerState_Framework_C*[] GetPlayerList(byte Type, byte Temp_byte_Variable, BP_PlayerState_Framework_C*[] K2Node_Select_Default);// 0x112a8051b9001
	void ReceiveBeginPlay();// 0x112ea051b9001
	void OnPlayerDie(BP_PlayerState_Framework_C* Player);// 0x112eb051b9001
	void OnPlayerResurrect(BP_PlayerState_Framework_C* Player);// 0x112ec051b9001
	void BattleStart();// 0x12a84051f9021
	void PlayerOut(SCMPlayerState* Player);// 0x1c290051b9001
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0x112ef051b9001
	void ExecuteUbergraph_BPC_PlayerManager(int EntryPoint, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Array_Index_Variable, const byte[] Temp_byte_Variable, const FString[] Temp_string_Variable, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, BP_PlayerState_Framework_C*[] K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, SCMPlayerState* K2Node_CustomEvent_Player, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_Framework_C* CallFunc_GetComponentByClass_ReturnValue, BPC_Death_Framework_C* CallFunc_GetComponentByClass_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* K2Node_CustomEvent_NewPlayer, bool K2Node_CustomEvent_bIsAi, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C*[] K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Copy_ReturnValue, int K2Node_Select_Default);// 0x1332804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_Death_Framework_C.CGMDeathComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd0, Size: 0x8]
	delegate OnPlayerDie;//[Offset: 0xd8, Size: 0x10]
	delegate OnPlayerResurrect;//[Offset: 0xe8, Size: 0x10]
	delegate OnPlayerKill;//[Offset: 0xf8, Size: 0x10]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x108, Size: 0x8]
	S_SkillState SkillStateAfterRevive;//[Offset: 0x110, Size: 0x2]
	static void GMRevive(SCMPlayerState* InKilled, out bool AutoRevive, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetLastDeathLocation_Output, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess);// 0x1354504f39041
	void Try Buy Resurrect(SCMPlayerState* Player, SolarPointDamageEvent DamageEvent, out bool Succeed, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsOfflinePlayer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_CheckAllTeammateDied_IfAllDied, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffff8f04f39002
	bool CheckTerminator(SCMPlayerState* InKiller, SCMPlayerState* InKilled, BP_DefenderManager_C* CallFunc_GetDefenderManager_AsBP_Defender_Manager, bool CallFunc_UpdateCheckTerminator_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3f7fff8c04f39003
	void GetDefenderManager(out BP_DefenderManager_C* AsBP Defender Manager, bool CallFunc_IsValid_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0xffffff8f04f39002
	static void UpdateDataTrace(byte Type, SCMPlayerState* Killer, SCMPlayerState* Killed, out const SolarPointDamageEvent DamageEvent, Actor* DamageCauser, <FString,FString> AdditionalData, int MoneyNum, <FString,FString> Temp, byte Temp_byte_Variable, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_DeathReason2String_TraceString, FText CallFunc_Conv_BoolToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_BoolToText_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString K2Node_Select_Default, FString Temp_string_Variable, int Temp_int_Array_Index_Variable, FString K2Node_Select_Default, FString CallFunc_Array_Get_Item, <FString,FString> K2Node_MakeMap_Map, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x11734051b9008
	void ReceivePlayerKill(SCMPlayerState* Killer, SCMPlayerState* Killed, out const SCMPlayerState*[] Assists, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x11736051b9008
	void ReceivePlayerDeathVerge(SCMPlayerState* InAttacker, SCMPlayerState* InDeathVergePlayer, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x1fffed05139073
	void ReceivePlayerResurrect(SolarCharacter* ResurrectCharacter, SCMPlayerState* ResurrectPlayer);// 0x11387051b9001
	void ExecuteUbergraph_BPC_Death_Framework(int EntryPoint, SCMPlayerState* K2Node_Event_Killer, SCMPlayerState* K2Node_Event_Killed, const SCMPlayerState*[] K2Node_Event_Assists, const SolarPointDamageEvent K2Node_Event_InDamageEvent, Actor* K2Node_Event_InDamageCauser, SCMPlayerState* K2Node_Event_InAttacker, SCMPlayerState* K2Node_Event_InDeathVergePlayer, const SolarPointDamageEvent K2Node_Event_InDamageEvent, Actor* K2Node_Event_InDamageCauser, bool CallFunc_CheckTerminator_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue, SolarCharacter* K2Node_Event_ResurrectCharacter, SCMPlayerState* K2Node_Event_ResurrectPlayer, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x11388051b9001
	void OnPlayerKill__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x11389051b9001
	void OnPlayerResurrect__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x1138a051b9001
	void OnPlayerDie__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0xffffffff00574140
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGMDeathComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	void ReceivePlayerResurrect(SolarCharacter* ResurrectCharacter, SCMPlayerState* ResurrectPlayer);// 0x45a704f39041
	void ReceivePlayerKill(SCMPlayerState* Killer, SCMPlayerState* Killed, out const SCMPlayerState*[] Assists, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x45a604f39041
	void ReceivePlayerDeathVerge(SCMPlayerState* InAttacker, SCMPlayerState* InDeathVergePlayer, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x45a504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_DefenderManager_C.DefenderManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b8, Size: 0x8]
	UI_OpeningShow_C* DefenderUI;//[Offset: 0x2c0, Size: 0x8]
	float ShowTime-Defender;//[Offset: 0x2c8, Size: 0x4]
	float ShowTime-Self;//[Offset: 0x2cc, Size: 0x4]
	byte UiState;//[Offset: 0x2d0, Size: 0x1]
	int TerminatorReward;//[Offset: 0x2d4, Size: 0x4]
	bool DataReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	UI_Common_Transition_Anim_C* Anim;//[Offset: 0x2e0, Size: 0x8]
	bool bBattleStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	void OnRep_BattleStarted();// 0x11391051b9001
	void DataTraceDefender(SolarPlayerState* Target, out FString Name, out FString Data, bool Temp_bool_Variable, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_IsDefender_ReturnValue, bool CallFunc_IsTerminator_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString K2Node_Select_Default, FString Temp_string_Variable, FString K2Node_Select_Default);// 0x11392051b9001
	void GetExtraReward(out int Reward);// 0x11393051b9001
	void SetShowTime(float ShowTime-Self, float ShowTime-Defender);// 0x11394051b9001
	void GetTotalTime(out float TotalTime, float CallFunc_Add_FloatFloat_ReturnValue);// 0x11395051b9001
	void GetUI(out UI_OpeningShow_C* Output_Get, const FString[] Temp_string_Variable, UserWidget* CallFunc_CreateSolarWidget_ReturnValue, UI_OpeningShow_C* K2Node_DynamicCast_AsUI_Opening_Show, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, const enum[] Temp_byte_Variable, byte CallFunc_GetTeamID_ReturnValue, const byte[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x11396051b9001
	static void OnRep_UIState(bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsPlayingReplay_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsOBPlayer_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Not_PreBool_ReturnValue);// 0x11397051b9001
	void ReceiveBeginPlay();// 0x11398051b9001
	void [S]ShowDefenderUI();// 0x11399051b9001
	void OnUIStateChanged(byte UiState);// 0x1139a051b9001
	void OnDefenderDataReady();// 0xbb3004f39001
	void ShowDefenderUIForReplay();// 0xffffff8f04f39002
	void OnSideHeroPickEnd_Event(FString Side);// 0xf051051b9001
	void CustomEvent(enum NewState);// 0x1139e051b9001
	void ExecuteUbergraph_BP_DefenderManager(int EntryPoint, GameManagerBase* CallFunc_GetGameManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_HeroPickManager_C* K2Node_DynamicCast_AsBP_Hero_Pick_Manager, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_UIState, UI_OpeningShow_C* CallFunc_GetUI_Output_Get, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, const SolarPlayerState*[] CallFunc_GetDefenderList_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_OpeningShow_C* CallFunc_GetUI_Output_Get, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString K2Node_CustomEvent_Side, bool CallFunc_IsOBPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum CallFunc_GetInGameState_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, enum K2Node_CustomEvent_NewState, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffff8f04f39002
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DefenderManager.GameManagerBase.Info.Actor.Object
	delegate OnRepDefenderListNotify;//[Offset: 0x228, Size: 0x10]
	TerminatorNotifyUIConfig TerminatorNotifyUIConfig;//[Offset: 0x238, Size: 0x28]
	class SolarTrailEffect* TrailEffect;//[Offset: 0x260, Size: 0x8]
	FString DefenderSide;//[Offset: 0x268, Size: 0x10]
	SolarPlayerState*[] DefenderList;//[Offset: 0x278, Size: 0x10]
	FString TerminatorPlayerId;//[Offset: 0x290, Size: 0x10]
	bool UpdateCheckTerminator(SCMPlayerState* InKiller, SCMPlayerState* InKilled);// 0x476104f39041
	void StartConfirmDefender();// 0x476004f39041
	void ShowDefenderUIForReplay();// 0x475f04f39041
	void OnRep_DefenderList();// 0x475e04f39041
	bool IsTerminator(FString InSolarPlayerID);// 0x475d04f39041
	bool IsDefender(FString InPlayerSide);// 0x475c04f39041
	SolarPlayerState*[] GetDefenderList();// 0x475b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TerminatorNotifyUIConfig
	int LocalizationID;//[Offset: 0x0, Size: 0x4]
	class UINoticeBase* TerminatorNotifyUI;//[Offset: 0x18, Size: 0x8]
	enum NoticeType;//[Offset: 0x20, Size: 0x1]
	float NoticeTime;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_OpeningShow_C.UIDefenderTeamShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x520, Size: 0x8]
	WidgetAnimation* Enter_Anim;//[Offset: 0x528, Size: 0x8]
	Image* de_img_Bg;//[Offset: 0x530, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x538, Size: 0x8]
	Image* Img_Flash_Left;//[Offset: 0x540, Size: 0x8]
	Image* Img_Flash_Right;//[Offset: 0x548, Size: 0x8]
	Image* Img_TitleBg;//[Offset: 0x550, Size: 0x8]
	Image* M_Glitch_Blue_Left;//[Offset: 0x558, Size: 0x8]
	Image* M_Glitch_Blue_Right;//[Offset: 0x560, Size: 0x8]
	Image* my_img_Bg;//[Offset: 0x568, Size: 0x8]
	Overlay* Overlay_Tip;//[Offset: 0x570, Size: 0x8]
	RichTextBlock* Txt_Tips;//[Offset: 0x578, Size: 0x8]
	SolarTextBlock* Txt_Title;//[Offset: 0x580, Size: 0x8]
	SolarTextBlock* Txt_Title;//[Offset: 0x588, Size: 0x8]
	SolarTextBlock* Txt_Title_VX;//[Offset: 0x590, Size: 0x8]
	enum BP_TeamType;//[Offset: 0x598, Size: 0x1]
	int TerminatorReward;//[Offset: 0x59c, Size: 0x4]
	void UpdateOpeningShow(enum TeamType);// 0xbc5a051b9001
	void OnSolarUIOpened();// 0xffffffff0a401d60
	void OnSolarUIClosed();// 0x95b804f56a5d
	void ExecuteUbergraph_UI_OpeningShow(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, enum K2Node_Event_TeamType, UIDefenderPlaerShowWidget*[] K2Node_MakeArray_Array, bool CallFunc_GreaterEqual_IntInt_ReturnValue, UIDefenderPlaerShowWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, enum K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue, int K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, int K2Node_Select_Default, bool CallFunc_Conv_IntToBool_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, LinearColor K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, LinearColor K2Node_Select_Default);// 0x21d17051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UIDefenderTeamShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x400, Size: 0x8]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x408, Size: 0x8]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x410, Size: 0x8]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x418, Size: 0x8]
	WidgetAnimation* Exit_Anim;//[Offset: 0x420, Size: 0x8]
	int PlayerNum;//[Offset: 0x428, Size: 0x4]
	bool bIsMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]
	FName LevelName;//[Offset: 0x430, Size: 0x8]
	FString ActorName;//[Offset: 0x438, Size: 0x10]
	FString ActorName;//[Offset: 0x448, Size: 0x10]
	FString ActorName;//[Offset: 0x458, Size: 0x10]
	FString ActorName;//[Offset: 0x468, Size: 0x10]
	FString CameraName;//[Offset: 0x478, Size: 0x10]
	FString CameraName;//[Offset: 0x488, Size: 0x10]
	FString CameraName;//[Offset: 0x498, Size: 0x10]
	FString CameraName;//[Offset: 0x4a8, Size: 0x10]
	SolarPlayerState*[] MyTeamPlayerState;//[Offset: 0x4b8, Size: 0x10]
	SolarPlayerState*[] DefenderTeamPlayerState;//[Offset: 0x4c8, Size: 0x10]
	UIDefenderPlaerShowWidget*[] ShowWidget;//[Offset: 0x4d8, Size: 0x10]
	Actor*[] OutActors;//[Offset: 0x4e8, Size: 0x10]
	SceneCapture2D*[] OutSceneCapture2Ds;//[Offset: 0x4f8, Size: 0x10]
	WidgetTransform[] Transforms;//[Offset: 0x508, Size: 0x10]
	void UpdateOpeningShow(enum TeamType);// 0x60d804f39041
	void SwitchTeamShow(enum TeamType);// 0x60d704f39041
	void ShowPlayerInfo();// 0x60d604f39041
	void SetMyTeamPlayerState(out const SolarPlayerState*[] TeamPlayerState);// 0x60d504f39041
	void SetDefenderTeamPlayerState(out const SolarPlayerState*[] TeamPlayerState);// 0x60d404f39041
	void CloseDefenderTeamShowWidget();// 0x60d304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UIDefenderPlaerShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	ScaleBox* ScaleBox_Card;//[Offset: 0x400, Size: 0x8]
	FString playerName;//[Offset: 0x408, Size: 0x10]
	int Level;//[Offset: 0x418, Size: 0x4]
	int RankLevelID;//[Offset: 0x41c, Size: 0x4]
	int PlayerGender;//[Offset: 0x420, Size: 0x4]
	bool bIsMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	int PlayerSeat;//[Offset: 0x428, Size: 0x4]
	bool bIsMySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]
	int CardPose;//[Offset: 0x430, Size: 0x4]
	int Cardbackground;//[Offset: 0x434, Size: 0x4]
	ExpRankMedalData[] AllExpRankMedalData;//[Offset: 0x438, Size: 0x10]
	int CharacterExp;//[Offset: 0x448, Size: 0x4]
	MedalInfo[] TargetCardMedalArray;//[Offset: 0x450, Size: 0x10]
	SolarPlayerState* PlayerState;//[Offset: 0x460, Size: 0x8]
	SolarBusinessCardCharacter* RTCharacter;//[Offset: 0x468, Size: 0x8]
	Actor* RTCharacterBackground;//[Offset: 0x470, Size: 0x8]
	Vector RTLocation;//[Offset: 0x478, Size: 0xc]
	void SetPlayerShowInfo(SolarPlayerState* PS, bool bIsSelf, int Seat, bool bIsSelfTeam, int SelfLevel, Vector CardRTLocation);// 0x60d204f39041
	void SetPlayerBusinessInfo(SolarPlayerState* PS, int PlayerNumber, ExpRankMedalData ExpRankMedalData);// 0x60d104f39041
	void SetCharacterSkin();// 0x60d004f39041
	void SetBusinessCard(int PoseId, int BackgroundId, int SkinId, ScaleBox* ParentPanel);// 0x60cf04f39041
	void OnRefreshWidget();// 0x60ce04f39041
	FString GetNameCardCharacterPathByCharacterIDAndCardPose(int CharacterId, int CardPoseID);// 0x60cd04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBusinessCardCharacter.Actor.Object
	void SetSkin(SkeletalMesh* LoadedSkinRes, MaterialInterface* LoadedCharaSkinRes);// 0x4f7a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x160, Size: 0x18]
	DataTable* TextStyleSet;//[Offset: 0x178, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x180, Size: 0x10]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x1a0, Size: 0x460]
	float MinDesiredWidth;//[Offset: 0x600, Size: 0x4]
	enum TextTransformPolicy;//[Offset: 0x604, Size: 0x1]
	TextBlockStyle DefaultTextStyle;//[Offset: 0x610, Size: 0x460]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0xa70, Size: 0x10]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x3f7504f39041
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x3f7404f39041
	void SetText(out const FText InText);// 0x3f7304f39041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3f7204f39041
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x3f7104f39041
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x3f7004f39041
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x3f6f04f39041
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x3f6e04f39041
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x3f6d04f39041
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x3f6c04f39041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x3f6b04f39041
	FText GetText();// 0x3f6a04f39041
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x3f6904f39041
	void ClearAllDefaultStyleOverrides();// 0x3f6804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x238, Size: 0x8]
	void OnInterpToggle(bool bEnable);// 0x6c6e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x228, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x3a8, Size: 0x1]
	float FOVAngle;//[Offset: 0x3ac, Size: 0x4]
	float OrthoWidth;//[Offset: 0x3b0, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x3b8, Size: 0x8]
	bool bAutoSceneCapture2DSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	byte CompositeMode;//[Offset: 0x3c1, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x3d0, Size: 0x5c0]
	float PostProcessBlendWeight;//[Offset: 0x990, Size: 0x4]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x994, Size: 0x1]
	float CustomNearClippingPlane;//[Offset: 0x998, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99c, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x9a0, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x9e4, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x9f0, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9fc, Size: 0x1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9fc, Size: 0x1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fd, Size: 0x1]
	bool bControlSceneCaptureComponent2DFPS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fe, Size: 0x1]
	int MaxSceneCaptureComponent2DFPS;//[Offset: 0xa00, Size: 0x4]
	void CaptureScene();// 0x6c7004f39041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x6c6f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x314, Size: 0x1]
	byte CaptureSource;//[Offset: 0x315, Size: 0x1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x316, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x316, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x318, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x328, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x338, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x348, Size: 0x10]
	float LODDistanceFactor;//[Offset: 0x358, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x35c, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x360, Size: 0x4]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x368, Size: 0x10]
	FString ProfilingEventName;//[Offset: 0x388, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x6c4704f39041
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x6c4604f39041
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x6c4504f39041
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x6c4404f39041
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x6c4304f39041
	void HideComponent(PrimitiveComponent* InComponent);// 0x6c4204f39041
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x6c4104f39041
	void ClearShowOnlyComponents();// 0x6c4004f39041
	void ClearHiddenComponents();// 0x6c3f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Common_Transition_Anim_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_Transition;//[Offset: 0x408, Size: 0x8]
	WidgetAnimation* Anim_Transition_Exit;//[Offset: 0x410, Size: 0x8]
	WidgetAnimation* Anim_Transition_Loop;//[Offset: 0x418, Size: 0x8]
	WidgetAnimation* Anim_Transition_Enter;//[Offset: 0x420, Size: 0x8]
	void OnSolarUIOpened();// 0xffffffff0a3ff0c0
	void ExecuteUbergraph_UI_Common_Transition_Anim(int EntryPoint, int CallFunc_StaticPostAkEventByName_ReturnValue, int CallFunc_StaticPostAkEventByName_ReturnValue);// 0x1c01804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_HeroPickManager_C.HeroPickManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f8, Size: 0x8]
	delegate OnAllHeroPickEnd;//[Offset: 0x300, Size: 0x10]
	delegate OnSideHeroPickEnd;//[Offset: 0x310, Size: 0x10]
	void ReceiveAllHeroPickEnd();// 0xbacd051b9001
	void ReceiveTeamPickHeroEnd(FString TeamName);// 0xbace051b9001
	void ExecuteUbergraph_BP_HeroPickManager(int EntryPoint, FString K2Node_Event_TeamName);// 0xffffffff0a3fe1e0
	void OnSideHeroPickEnd__DelegateSignature(FString Side);// 0x1b9c6051b9001
	void OnAllHeroPickEnd__DelegateSignature();// 0xbb5c04f39001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickManager.GameManagerBase.Info.Actor.Object
	delegate OnAllPlayersGotoPickHero;//[Offset: 0x228, Size: 0x1]
	HeroPickInfo*[] HeroPickArray;//[Offset: 0x240, Size: 0x10]
	HeroPickInfo*[] PendingRemoveHeroPickArray;//[Offset: 0x250, Size: 0x10]
	bool EnableLimitPickTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	bool UseOpeningTransitionAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	bool StartSkinUIAtTheBeginning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 0x1]
	float HeroPickTime;//[Offset: 0x264, Size: 0x4]
	float TransitionAnimTime;//[Offset: 0x268, Size: 0x4]
	float WaitingToStartTime;//[Offset: 0x26c, Size: 0x4]
	float WaitingForEndTime;//[Offset: 0x270, Size: 0x4]
	HeroPickRuleBase* AIPickRule;//[Offset: 0x278, Size: 0x8]
	float HeroRequestDuration;//[Offset: 0x280, Size: 0x4]
	SoftObjectPath[] ElementLevels;//[Offset: 0x288, Size: 0x10]
	bool bIsAllPlayerSelecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	<FName,LevelStreamingDynamic*> AllLevelMap;//[Offset: 0x2a0, Size: 0x50]
	bool TeamBeginHeroPick(FString TeamName);// 0x482504f39041
	void SetHeroPickTime(float InHeroPickTime);// 0x482404f39041
	void ReceiveTeamPickHeroEnd(FString TeamName);// 0x482304f39041
	void ReceiveAllHeroPickEnd();// 0x482204f39041
	bool PlayerBeginHeroPick(SolarPlayerState* Player);// 0x482104f39041
	void OnLevelLoaded();// 0x482004f39041
	void On_RepAllPlayerSelectEnd();// 0x481f04f39041
	void AllPlayersGotoPickHero();// 0x481e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickRuleBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_SkillState
	enum UniqueAbility_4_1687CEEF476DE16EEE6A42B53EC116E7;//[Offset: 0x0, Size: 0x1]
	enum TacticsAbility_5_36D081C34231A20607055BA95F67E65B;//[Offset: 0x1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	class CGFormula* Formula;//[Offset: 0x38, Size: 0x8]
	bool bAllowChangePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	SettlementPageConfig* SettlePageConfig;//[Offset: 0x48, Size: 0x8]
	<FString,SCMMapConfig> MapConfig;//[Offset: 0x50, Size: 0x50]
	float VictorySlomoDelay;//[Offset: 0xa0, Size: 0x4]
	float VictorySlomoDilation;//[Offset: 0xa4, Size: 0x4]
	float VictorySlomoDuration;//[Offset: 0xa8, Size: 0x4]
	CharacterMovementNetworkOptions VictoryMovementNetworkOptions;//[Offset: 0xac, Size: 0xc]
	<FString,float> VictorySFXAndVOMap;//[Offset: 0xb8, Size: 0x50]
	float VictoryMusicDelayTime;//[Offset: 0x108, Size: 0x4]
	FString VictoryMusicName;//[Offset: 0x110, Size: 0x10]
	float VictoryUIWaittime;//[Offset: 0x120, Size: 0x4]
	SoftObjectPath VictoryHitEffect;//[Offset: 0x128, Size: 0x18]
	FName VictoryHitSocketName;//[Offset: 0x140, Size: 0x8]
	float VictoryHitEffectDelayTime;//[Offset: 0x148, Size: 0x4]
	SoftObjectPath VictoryDeathEffect;//[Offset: 0x150, Size: 0x18]
	float VictoryDeathEffectDelayTime;//[Offset: 0x168, Size: 0x4]
	DataManagerConfig DataManagerConfig;//[Offset: 0x170, Size: 0x10]
	bool EnableUltimateSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	enum UltimateSkillStateOperationOnInit;//[Offset: 0x181, Size: 0x1]
	bool EnableTacticalSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 0x1]
	enum TacticalSkillStateOperationOnInit;//[Offset: 0x183, Size: 0x1]
	int AirDropSkillMode;//[Offset: 0x184, Size: 0x4]
	class GameplayAbility[] CharacterExtraAbilities;//[Offset: 0x188, Size: 0x10]
	bool EnableWeaponUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	int InitInGamePlayerLevel;//[Offset: 0x19c, Size: 0x4]
	bool EnablePlayerUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	InGameLevelingConfig InGameLevelingConfig;//[Offset: 0x1a8, Size: 0x8]
	enum[] CharacterDamageUpgradeTypes;//[Offset: 0x1b0, Size: 0x10]
	ExpItemConfig ExpItemConfig;//[Offset: 0x1c0, Size: 0x10]
	ExpItemReduceRate ExpItemReduceRateConfig;//[Offset: 0x1d0, Size: 0x8]
	BoxBurstItemConfig BoxBurstItemConfig;//[Offset: 0x1d8, Size: 0x8]
	bool bIfShouldSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bIfSupportDeathverge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 0x1]
	<int,int> DeathBoxEnergyLimitConfig;//[Offset: 0x1e8, Size: 0x50]
	bool bAutoMarkDamagedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	<enum,float> CustomParams;//[Offset: 0x240, Size: 0x50]
	float MoveSpeedScale;//[Offset: 0x290, Size: 0x4]
	float ShieldScale;//[Offset: 0x294, Size: 0x4]
	float HealthScale;//[Offset: 0x298, Size: 0x4]
	int Resurgence;//[Offset: 0x29c, Size: 0x4]
	bool EnableSect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	CustomRoomData CustomRoomData;//[Offset: 0x2a8, Size: 0xd8]
	bool bIsCustomRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool bEnableTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	float InitTrackingDelay;//[Offset: 0x384, Size: 0x4]
	float TrackingTimeInterval;//[Offset: 0x388, Size: 0x4]
	float DefaultTrackMaxRevealDistance;//[Offset: 0x38c, Size: 0x4]
	float TrackReplaceDistance;//[Offset: 0x390, Size: 0x4]
	float MinRevealDistance;//[Offset: 0x394, Size: 0x4]
	float TrackTimeout;//[Offset: 0x398, Size: 0x4]
	int MaxTrackNum;//[Offset: 0x39c, Size: 0x4]
	FinalsBGMData FinalsBGMData;//[Offset: 0x3a0, Size: 0x28]
	bool bEnableSkydivingTrail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	class Actor* FlyTrailClass;//[Offset: 0x3d0, Size: 0x28]
	class Actor* DebugTrailEffectClass;//[Offset: 0x3f8, Size: 0x28]
	bool TryGetCustomParam(enum InType, out float OutValue);// 0x45b704f39041
	void SetCustomParam(enum InType, float InValue);// 0x45b604f39041
	void OnRep_MoveSpeedScale();// 0x45b504f39041
	bool IsEnableSect();// 0x45b404f39041
	bool IsCustomRoomMode();// 0x45b304f39041
	int GetRequiredExpForLevel(int InLevel);// 0x45b204f39041
	int GetMaxShieldMatCountToDeathbox(const int InLevel);// 0x45b104f39041
	int GetMaxInGameLevel();// 0x45b004f39041
	float GetExpItemReduceRate(int DeathCount);// 0x45af04f39041
	int GetExpItemCountByLevel(const int InLevel, const int InLevelGap);// 0x45ae04f39041
	CustomRoomData GetCustomRoomData();// 0x45ad04f39041
	int[] GetBurstItemSplitPiles(const int ItemID);// 0x45ac04f39041
	Rotator GetBurstItemRotator(const int ItemID);// 0x45ab04f39041
	float[] GetBurstItemModelScale(const int ItemID);// 0x45aa04f39041
	int GetBurstItemMaxPileNum(const int ItemID);// 0x45a904f39041
	int[] GetBurstItemIDs();// 0x45a804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGFormula.Info.Actor.Object
	KnockoutParams KnockoutParams;//[Offset: 0x228, Size: 0x28]
	bool bInitKnockParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x45a204f39041
	bool IsSettlementBagItem(SolarPlayerState* InPS);// 0x45a104f39041
	void InitKnockoutPointParams(out KnockoutParams InParams);// 0x45a004f39041
	int GetZomborg(SolarPlayerState* InPS);// 0x459f04f39041
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x459e04f39041
	int GetWeaponExp(SolarPlayerState* InPS, int InWeaponID);// 0x459d04f39041
	void GetTeamScoreComparison(SolarPlayerState* InPS, out FString OutTeamScore);// 0x459c04f39041
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x459b04f39041
	void GetShowPageIndexs(SolarPlayerState* InPS, out const SettlePageParam InParam, out int[] OutResult);// 0x459a04f39041
	SettlementReward[] GetSettlementRewards(SolarPlayerState* InPS);// 0x459904f39041
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerID, out FString InPBName);// 0x459804f39041
	float GetKDA(SolarPlayerState* InPS);// 0x459704f39041
	FString[] GetGroupResultPlayerExData(FString SolarPlayerID, out FString InPBName);// 0x459604f39041
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(SolarPlayerState* InPS);// 0x459504f39041
	int GetCombatScore(SolarPlayerState* InPS);// 0x459404f39041
	<int,int> GetCollectionItemRewards(SolarPlayerState* InPS);// 0x459304f39041
	void GetCharacterExp(SolarPlayerState* InPS, out int OutGetExp, out int[] OutReason);// 0x459204f39041
	int GetAccountExp(SolarPlayerState* InPS);// 0x459104f39041
	int CalculateTeamRank(SolarPlayerState* InPS);// 0x459004f39041
	enum[] CalculatePunish(SolarPlayerState* InPS);// 0x458f04f39041
	int CalculatePlayerRank(SolarPlayerState* InPS);// 0x458e04f39041
	float CalculateMVPScore(SolarPlayerState* InPS);// 0x458d04f39041
	int CalculateKnockoutPoints(const int InTeamRank, const int InKillNum, const float InTotalDamage, const float InTotalDamageTaken);// 0x458c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlePageParam
	int WeaponExpSettlmentNum;//[Offset: 0x0, Size: 0x4]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementPageConfig.DataAsset.Object
	int PageSkipIndex;//[Offset: 0x30, Size: 0x4]
	class SolarUWSettlementBase[] SettlementPage;//[Offset: 0x38, Size: 0x10]
	FString EnterSettleSoundEvent;//[Offset: 0x48, Size: 0x10]
	FString ExitSettleSoundEvent;//[Offset: 0x58, Size: 0x10]
	int[] PageIndexs;//[Offset: 0x68, Size: 0x10]
	bool IsCustomRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool IsSoloModePlayerDropout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool IsSoloModeAIEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMMapConfig
	FString Desc;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath LevelMap;//[Offset: 0x10, Size: 0x18]
	int MiniMapId;//[Offset: 0x28, Size: 0x4]
	bool IsStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	<FString,SCMElementMapConfig> ElementGroups;//[Offset: 0x30, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMElementMapConfig
	SoftObjectPath ElementLevel;//[Offset: 0x0, Size: 0x18]
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum LoadType;//[Offset: 0x19, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterMovementNetworkOptions
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x4, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DataManagerConfig
	DataTable* GeneralDataTable;//[Offset: 0x0, Size: 0x8]
	DataTable* DataTable;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InGameLevelingConfig
	DataTable* ExpTable;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExpItemConfig
	DataTable* ConfigTable;//[Offset: 0x0, Size: 0x8]
	DataTable* KilledConfigTable;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExpItemReduceRate
	DataTable* ConfigTable;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoxBurstItemConfig
	DataTable* ConfigTable;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FinalsBGMData
	bool bEnableFinalsBGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte FinalsBGMSafeAreaIndex;//[Offset: 0x1, Size: 0x1]
	byte FinalsBGMPlayTeamCount;//[Offset: 0x2, Size: 0x1]
	byte FinalsBGMStopTeamCount;//[Offset: 0x3, Size: 0x1]
	FString FinalsBGMName_Play;//[Offset: 0x8, Size: 0x10]
	FString FinalsBGMName_Stop;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CFG_Framework_C.CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	BP_ConfigSave_C* ModeConfig;//[Offset: 0x420, Size: 0x8]
	bool None;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	void GetSkillStateByNameEnum(byte Enum, out S_SkillState Out);// 0x10fc1051b9001
	CustomRoomData GetCustomRoomData(bool Temp_bool_Variable, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, CustomRoomData K2Node_Select_Default);// 0x13f5404f39001
	bool IsCustomRoomMode(bool Temp_bool_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default);// 0x7a7fff8c04f39000
	void GetSavedConfig(out BP_ConfigSave_C* AsBP Config Save, out bool bSuccess, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ConfigSave_C* K2Node_DynamicCast_AsBP_Config_Save, bool K2Node_DynamicCast_bSuccess);// 0x10fc5051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_ConfigSave_C.SaveGame.Object
	bool bEnableAiTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bEnableCustomRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	CustomRoomData CustomRoomConfig;//[Offset: 0x30, Size: 0xd8]
	bool bIsCustomRoomHost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_BuyResurrection_C.SolarResurrectionComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x150, Size: 0x8]
	UI_BuyResurrectionPanel_C* UI_BuyResurrectionPanel;//[Offset: 0x158, Size: 0x8]
	BP_ReviveItemManger_BattleRoyale_C* ReviveItemManger;//[Offset: 0x160, Size: 0x8]
	int SuccessTime;//[Offset: 0x168, Size: 0x4]
	bool BuyResurrectionSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]
	float RemindTeammateEffectCooldown;//[Offset: 0x170, Size: 0x4]
	float BuyResurrectionInvincibleTime;//[Offset: 0x174, Size: 0x4]
	Vector RebornLoc;//[Offset: 0x178, Size: 0xc]
	void CheckAllTeammateDied(out bool IfAllDied, int CallFunc_Get_Alive_Team_Player_Num_Num, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x13d5d051b9001
	void RefreshUI(Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x10f58051b9001
	static SCMPlayerState*[] GetTeammatesArr(const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetTeamID_ReturnValue, const byte[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x10f59051b9001
	static void On All Teammates Killed(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_ObjectToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x10f5a051b9001
	static void Get Alive Team Player Num(SCMPlayerState* OutPlayer, out int Num, int NumberOfSurvivingTeammates, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsPlayerReviving_ReturnValue, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x10f5b051b9001
	void Show Buy Resurrection UI(bool Visible, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, UI_BuyResurrectionPanel_C* K2Node_DynamicCast_AsUI_Buy_Resurrection_Panel, bool K2Node_DynamicCast_bSuccess);// 0x10f5c051b9001
	void Event_LeaveWhileWaiting();// 0x10f5d051b9001
	void ClientDoCameraFade();// 0x10f5e051b9001
	void Event_OnRevivingComplete(FString PlayerId);// 0x10f5f051b9001
	void Event_OnRevivedComplete();// 0x10f60051b9001
	void Event_OnResurrectionStateChanged(enum LastState);// 0xffffff8c04f39044
	void SetCharacterResVis(bool Vis);// 0x11738051b9008
	void OnReviveSelf(bool bOverrideLocation, out const Vector ReviveLocation);// 0x10f63051b9001
	void ExecuteUbergraph_BPC_BuyResurrection(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, GameplayEventData K2Node_MakeStruct_GameplayEventData, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_Get_Alive_Team_Player_Num_Num, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsServer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, const <FString,FString> K2Node_MakeMap_Map, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsValid_ReturnValue, FString K2Node_Event_PlayerID, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum K2Node_Event_LastState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_CustomEvent_Vis, GameplayEventData K2Node_MakeStruct_GameplayEventData, int Temp_int_Variable, bool K2Node_Event_bOverrideLocation, const Vector K2Node_Event_ReviveLocation, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x18c04f39000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarResurrectionComponent.ActorComponent.Object
	byte bEnableResurrection;//[Offset: 0xb0, Size: 0x1]
	DeathTreasureBox* DeathBox;//[Offset: 0xb8, Size: 0x8]
	Vector DeathBoxLoc;//[Offset: 0xc0, Size: 0xc]
	enum ResurrectionState;//[Offset: 0xcc, Size: 0x1]
	delegate OnResurrectionStateChanged;//[Offset: 0xd0, Size: 0x10]
	float CurrentCountDownStartTime;//[Offset: 0xe0, Size: 0x4]
	float CountDownAccTime;//[Offset: 0xe4, Size: 0x4]
	float ConfigCountDownTime;//[Offset: 0xf0, Size: 0x4]
	float ResurrectionClutchTime;//[Offset: 0xf4, Size: 0x4]
	bool bIsTimeoutCountDownPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	delegate OnTimeoutCountDownStateChanged;//[Offset: 0x108, Size: 0x10]
	WorldMark_ReviveTeammates* DeathBoxMark;//[Offset: 0x118, Size: 0x8]
	class WorldMark_ReviveTeammates* DeathBoxMarkClass;//[Offset: 0x120, Size: 0x8]
	Actor* RebornLine;//[Offset: 0x128, Size: 0x8]
	class Actor* RebornLineClass;//[Offset: 0x130, Size: 0x8]
	int RemindTeammateRescueSoundID;//[Offset: 0x138, Size: 0x4]
	void TryContinueTimeoutCountDown();// 0x25e004f39041
	void SetResurrectionState(enum NewState, bool bShouldNotifyOnServer);// 0x25df04f39041
	void SetDeathBox(DeathTreasureBox* InDeathBox);// 0x25de04f39041
	void ServerNotifyTeammatesHelp();// 0x25dd04f39041
	void OnTimeoutCountDownStateChanged__DelegateSignature(bool bPaused);// 0x25dc04f39041
	void OnReviveSelf(bool bOverrideLocation, out const Vector ReviveLocation);// 0x25db04f39041
	void OnResurrectionStateChanged__DelegateSignature(enum NewState);// 0x25da04f39041
	void OnRep_ResurrectionState(enum LastState);// 0x25d904f39041
	void OnRep_DeathBox(DeathTreasureBox* LastDeathBox);// 0x25d804f39041
	void OnRep_bIsTimeoutCountDownPaused();// 0x25d704f39041
	void MulticastPlayMarkNotify();// 0x25d604f39041
	void LazyPauseTimeoutCountDownByClutchTime();// 0x25d504f39041
	float GetWaitTimeRemaining();// 0x25d404f39041
	SolarCharacter* GetRevivingCharacter();// 0x25d304f39041
	SolarCharacter* GetOwnerCharacter();// 0x25d204f39041
	Vector GetDeathBoxLoc();// 0x25d104f39041
	void Event_OnRevivingComplete(FString PlayerId);// 0x25d004f39041
	void Event_OnRevivedComplete();// 0x25cf04f39041
	void Event_OnResurrectionStateChanged(enum LastState);// 0x25cd04f39041
	void EnterBuyResurrectionProcess();// 0x25cc04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_BuyResurrectionPanel_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	Panel_Interact_Progress_C* Panel_Interact_Progress;//[Offset: 0x408, Size: 0x8]
	CanvasPanel* Root;//[Offset: 0x410, Size: 0x8]
	UI_HUD_Notice_BuyResurrection_C* UI_HUD_Notice_BuyResurrection;//[Offset: 0x418, Size: 0x8]
	BPC_BuyResurrection_C* BuyComp;//[Offset: 0x420, Size: 0x8]
	FString NotifyString;//[Offset: 0x428, Size: 0x10]
	bool IsBeingRevived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	void Set Btn Vis(bool Show);// 0x1140b051b9001
	void Set Btna And Tip Visibility(bool Visibility, Actor* CallFunc_GetOwner_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x1140c051b9001
	void Event_Init(BPC_BuyResurrection_C* BuyComp);// 0x1140d051b9001
	void EventOnStateChange(enum NewState);// 0x1140e051b9001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1140f051b9001
	void OnReviveStateChange(SolarPlayerState* RevivingMePlayer);// 0xffffff8f04f39002
	void BndEvt__Panel_Interact_Progress_K2Node_ComponentBoundEvent_1_SimpleDynamicMulticastDelegate__DelegateSignature();// 0xffffff8f04f39002
	void Notify Teammate Revive();// 0x11412051b9001
	void ExecuteUbergraph_UI_BuyResurrectionPanel(int EntryPoint, const <FString,FString> Temp_string_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_GetNoticeFormatText_ReturnValue, BPC_BuyResurrection_C* K2Node_CustomEvent_BuyComp, enum K2Node_CustomEvent_NewState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_GetWaitTimeRemaining_ReturnValue, int CallFunc_FTrunc_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_IsValid_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromUI_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarPlayerState* K2Node_CustomEvent_RevivingMePlayer, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromUI_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffff8f04f39002
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Panel_Interact_Progress_C.SolarProgressiveInteractButton.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4b0, Size: 0x8]
	WidgetAnimation* Enter_Anim;//[Offset: 0x4b8, Size: 0x8]
	WidgetAnimation* Select_Anim;//[Offset: 0x4c0, Size: 0x8]
	SolarButton* Btn_Interact;//[Offset: 0x4c8, Size: 0x8]
	WidgetSwitcher* CancelableSwitcher;//[Offset: 0x4d0, Size: 0x8]
	Image* Img_Icon;//[Offset: 0x4d8, Size: 0x8]
	Image* img_Icon_Light;//[Offset: 0x4e0, Size: 0x8]
	Image* Img_Light;//[Offset: 0x4e8, Size: 0x8]
	Image* Img_Light;//[Offset: 0x4f0, Size: 0x8]
	WidgetSwitcher* InteractableSwitcher;//[Offset: 0x4f8, Size: 0x8]
	CanvasPanel* Panel_CD;//[Offset: 0x500, Size: 0x8]
	SolarAdapterWidget* Panel_Interact_KeyMapping;//[Offset: 0x508, Size: 0x8]
	CanvasPanel* Panel_Progress_CountDown;//[Offset: 0x510, Size: 0x8]
	CanvasPanel* Panel_ReduceCD;//[Offset: 0x518, Size: 0x8]
	UI_Button_ReduceCD_Clock_C* ReduceCD_Clock;//[Offset: 0x520, Size: 0x8]
	UI_Button_ReduceCD_Light_C* ReduceCD_Light;//[Offset: 0x528, Size: 0x8]
	SolarTextBlock* Txt_Cancel;//[Offset: 0x530, Size: 0x8]
	SolarTextBlock* Txt_Interact;//[Offset: 0x538, Size: 0x8]
	SolarTextBlock* Txt_Interact_Desktop;//[Offset: 0x540, Size: 0x8]
	UI_Button_Selected_Anim_C* UI_Button_Selected_Anim;//[Offset: 0x548, Size: 0x8]
	UI_Skill_CDRefresh_Anim_C* UI_Skill_CDRefresh_Anim;//[Offset: 0x550, Size: 0x8]
	enum State;//[Offset: 0x558, Size: 0x1]
	byte InteractType;//[Offset: 0x559, Size: 0x1]
	bool ShowProgressBarPrevInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55a, Size: 0x1]
	bool NonProgressText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55b, Size: 0x1]
	bool HideNonCancellableTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 0x1]
	void RefreshToNonCancellableInteracting();// 0x1152d051b9001
	void RefreshToCancellableInteracting();// 0x1152e051b9001
	void RefreshToPreInteract();// 0x1152f051b9001
	void PlayFadeInAnim();// 0x11530051b9001
	void HidePassiveBuff();// 0x11531051b9001
	void ShowPassiveBuff(int CharacterId, int LocalTextId);// 0x11532051b9001
	void EnablePassiveBuffDisplay(int CharacterId, int LocalTextId);// 0x11533051b9001
	void SetProgressBarRatio(float Ratio);// 0x11534051b9001
	void SetProgressBarVisiblity(bool bShow, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x11535051b9001
	void SetInteractType(byte InteractType, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, byte Temp_byte_Variable, int K2Node_Select_Default, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, byte Temp_byte_Variable, Vector2D K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default);// 0x11536051b9001
	void UpdateStateView(enum InState, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte K2Node_Select_Default, byte K2Node_Select_Default);// 0x11537051b9001
	void PreConstruct(bool IsDesignTime);// 0x11538051b9001
	void Construct();// 0x11539051b9001
	void BP_UpdateStateView(enum InState);// 0x1153a051b9001
	void BndEvt__Btn_Interact_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x1153b051b9001
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0xffffff8f04f39002
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0xffffffffc4612de0
	void ExecuteUbergraph_Panel_Interact_Progress(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, enum K2Node_Event_InState, bool CallFunc_IsPlatformDesktop_ReturnValue, enum K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, const WidgetAnimation* K2Node_Event_Animation, enum K2Node_Select_Default, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, const WidgetAnimation* K2Node_Event_Animation, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0xffffff8c04f39000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarProgressiveInteractButton.SolarUserWidget.UserWidget.Widget.Visual.Object
	delegate OnCompleteDelegate;//[Offset: 0x400, Size: 0x10]
	delegate OnCancelDelegate;//[Offset: 0x410, Size: 0x10]
	delegate OnStartInteract;//[Offset: 0x420, Size: 0x10]
	bool bIsInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 0x1]
	GaugeImage* Image_GameProgressBar;//[Offset: 0x468, Size: 0x8]
	SolarTextBlock* Text_GameProgressTime;//[Offset: 0x470, Size: 0x8]
	Button* BTN_GameProgressCancel;//[Offset: 0x478, Size: 0x8]
	TextBlock* Text_GameProgressTips;//[Offset: 0x480, Size: 0x8]
	HorizontalBox* HorizontalBox_Cancel;//[Offset: 0x488, Size: 0x8]
	HUDPassiveHeadWidget* Panel_PassiveBuff;//[Offset: 0x490, Size: 0x8]
	Overlay* Overlay_CD;//[Offset: 0x498, Size: 0x8]
	GaugeImage* Image_CD;//[Offset: 0x4a0, Size: 0x8]
	SolarTextBlock* Txt_CDTime;//[Offset: 0x4a8, Size: 0x8]
	void UpdateGameProgressTipsText(const int InTextId);// 0x28f604f39041
	void UpdateGameProgressText();// 0x28f504f39041
	void UpdateGameProgressBarPercent(const float InPercent);// 0x28f404f39041
	void UpdateGameProgress(const float InAddition);// 0x28f304f39041
	void TryCancelInteraction();// 0x28f204f39041
	void StopGameProgress(const int InActionID);// 0x28f104f39041
	void StopCountDownProgress(const int InActionID);// 0x28f004f39041
	void StartCountDownProgress(out const CountDownInfo InCountInfo);// 0x28ef04f39041
	void SimpleDynamicMulticastDelegate__DelegateSignature();// 0x28ee04f39041
	void ShowPassiveBuff(int CharacterId, int LocalTextId);// 0x28ed04f39041
	void RefreshToPreInteract();// 0x28ec04f39041
	void RefreshToNonCancellableInteracting();// 0x28eb04f39041
	void RefreshToCancellableInteracting();// 0x28ea04f39041
	void OnSteamCancelCountDown();// 0x28e904f39041
	void OnParentVisibilityChanged(const bool bVisible);// 0x28e804f39041
	void OnCompleteInternal();// 0x28e704f39041
	void OnCancelButtonClicked();// 0x28e604f39041
	void HidePassiveBuff();// 0x28e504f39041
	void EnterCD(float TotalTime, float StartTime);// 0x28e404f39041
	void BP_UpdateStateView(enum InState);// 0x28e304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GaugeImage.UserWidget.Widget.Visual.Object
	enum GaugeType;//[Offset: 0x260, Size: 0x1]
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	Vector2D ImageSize;//[Offset: 0x264, Size: 0x8]
	float InitialDegree;//[Offset: 0x26c, Size: 0x4]
	bool bSymmetric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	Vector2D CenterOffset;//[Offset: 0x274, Size: 0x8]
	Object* ResourceObject;//[Offset: 0x280, Size: 0x8]
	float Progress;//[Offset: 0x288, Size: 0x4]
	MaterialInterface* MaterialDegree360;//[Offset: 0x290, Size: 0x8]
	MaterialInterface* MaterialDegree180;//[Offset: 0x298, Size: 0x8]
	MaterialInterface* MaterialDegree90;//[Offset: 0x2a0, Size: 0x8]
	MaterialInterface* MaterialDegreeLR;//[Offset: 0x2a8, Size: 0x8]
	MaterialInterface* MaterialDegreeUD;//[Offset: 0x2b0, Size: 0x8]
	Image* TargetImage;//[Offset: 0x2b8, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x2c0, Size: 0x8]
	void UpdateProgress(float InProgress);// 0x47f004f39041
	void SetProgress(float InProgress);// 0x47ef04f39041
	void SetImage(Object* RO);// 0x47ee04f39041
	Image* GetInternalImage();// 0x47ed04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x641404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x641804f39041
	void SetSize(SlateChildSize InSize);// 0x641704f39041
	void SetPadding(Margin InPadding);// 0x641604f39041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x641504f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4]
	byte SizeRule;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUDPassiveHeadWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* Img_Head;//[Offset: 0x400, Size: 0x8]
	SolarTextBlock* Txt_Buff;//[Offset: 0x408, Size: 0x8]
	void SetData(int InContributorCharacterId, int InLocalTipsID);// 0x493904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarButton.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x150, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x160, Size: 0x3e0]
	byte ImageFillType;//[Offset: 0x540, Size: 0x1]
	float ImageFillRatioHorizontal;//[Offset: 0x544, Size: 0x4]
	float ImageFillRatioVertical;//[Offset: 0x548, Size: 0x4]
	float ImageFillPixelLeft;//[Offset: 0x54c, Size: 0x4]
	float ImageFillPixelTop;//[Offset: 0x550, Size: 0x4]
	float ImageFillPixelRight;//[Offset: 0x554, Size: 0x4]
	float ImageFillPixelBottom;//[Offset: 0x558, Size: 0x4]
	LinearColor ColorAndOpacity;//[Offset: 0x55c, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x56c, Size: 0x10]
	bool bReleaseUnfocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 0x1]
	bool bEnableClickSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57d, Size: 0x1]
	FString ClickSoundEventName;//[Offset: 0x580, Size: 0x10]
	byte ClickMethod;//[Offset: 0x590, Size: 0x1]
	byte TouchMethod;//[Offset: 0x591, Size: 0x1]
	byte PressMethod;//[Offset: 0x592, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x593, Size: 0x1]
	delegate OnClicked;//[Offset: 0x598, Size: 0x10]
	delegate OnPressed;//[Offset: 0x5a8, Size: 0x10]
	delegate OnReleased;//[Offset: 0x5b8, Size: 0x10]
	delegate OnHovered;//[Offset: 0x5c8, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x5d8, Size: 0x10]
	delegate OnFocusLosted;//[Offset: 0x5e8, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x4f8204f39041
	void SetStyle(out const ButtonStyle InStyle);// 0x4f8104f39041
	void SetPressMethod(byte InPressMethod);// 0x4f8004f39041
	void SetImageFillType(byte InImageFillType);// 0x4f7f04f39041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4f7e04f39041
	void SetClickMethod(byte InClickMethod);// 0x4f7d04f39041
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x4f7c04f39041
	bool IsPressed();// 0x4f7b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Button_ReduceCD_Clock_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	Image* Img_Light;//[Offset: 0x408, Size: 0x8]
	Image* MI_Clock;//[Offset: 0x410, Size: 0x8]
	LinearColor ClockColor;//[Offset: 0x418, Size: 0x10]
	LinearColor LightColor;//[Offset: 0x428, Size: 0x10]
	void PreConstruct(bool IsDesignTime);// 0x29c6a051b9008
	void ExecuteUbergraph_UI_Button_ReduceCD_Clock(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xffffff8c04f39000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Button_ReduceCD_Light_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* MI_RingGlow;//[Offset: 0x268, Size: 0x8]
	Image* MI_RingGlow;//[Offset: 0x270, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8]
	float Size;//[Offset: 0x280, Size: 0x4]
	LinearColor Color;//[Offset: 0x284, Size: 0x10]
	void RefreshColor();// 0x945f04f5687a
	void PreConstruct(bool IsDesignTime);// 0x21d20051b9008
	void ExecuteUbergraph_UI_Button_ReduceCD_Light(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xffffffff94119780
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x160, Size: 0x4]
	float HeightOverride;//[Offset: 0x164, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0x168, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0x16c, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0x170, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x174, Size: 0x4]
	float MinAspectRatio;//[Offset: 0x178, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0x17c, Size: 0x4]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x180, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x180, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x180, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x180, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x180, Size: 0x1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x180, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x180, Size: 0x1]
	void SetWidthOverride(float InWidthOverride);// 0x3fa804f39041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3fa704f39041
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x3fa604f39041
	void SetMinAspectRatio(float InMinAspectRatio);// 0x3fa504f39041
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x3fa404f39041
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x3fa304f39041
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x3fa204f39041
	void SetHeightOverride(float InHeightOverride);// 0x3fa104f39041
	void ClearWidthOverride();// 0x3fa004f39041
	void ClearMinDesiredWidth();// 0x3f9f04f39041
	void ClearMinDesiredHeight();// 0x3f9e04f39041
	void ClearMinAspectRatio();// 0x3f9d04f39041
	void ClearMaxDesiredWidth();// 0x3f9c04f39041
	void ClearMaxDesiredHeight();// 0x3f9b04f39041
	void ClearMaxAspectRatio();// 0x3f9a04f39041
	void ClearHeightOverride();// 0x3f9904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Button_Selected_Anim_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	WidgetAnimation* Select_Anim;//[Offset: 0x268, Size: 0x8]
	Image* MI_Circle_01;//[Offset: 0x270, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8]
	float Size;//[Offset: 0x280, Size: 0x4]
	LinearColor Color;//[Offset: 0x284, Size: 0x10]
	void PreConstruct(bool IsDesignTime);// 0xb9e1051b9001
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0xffffffff0a3fad60
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0xffffffff6db9ca40
	void ExecuteUbergraph_UI_Button_Selected_Anim(int EntryPoint, const WidgetAnimation* K2Node_Event_Animation, bool K2Node_Event_IsDesignTime, const WidgetAnimation* K2Node_Event_Animation, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0xffffffff0a3fa3c0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Skill_CDRefresh_Anim_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	WidgetAnimation* Refresh_Anim;//[Offset: 0x268, Size: 0x8]
	Image* MI_Glow;//[Offset: 0x270, Size: 0x8]
	Image* MI_RingGlow;//[Offset: 0x278, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x280, Size: 0x8]
	float Size;//[Offset: 0x288, Size: 0x4]
	LinearColor Color;//[Offset: 0x28c, Size: 0x10]
	void SetColor(LinearColor Color);// 0xba14051b9001
	void Play(bool CallFunc_IsAnimationPlaying_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0xba15051b9001
	void RefreshColor();// 0xffffff8f04f39002
	void PreConstruct(bool IsDesignTime);// 0xbacc051b9001
	void Construct();// 0x21c9c051b9008
	void ExecuteUbergraph_UI_Skill_CDRefresh_Anim(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xffffff8f04f39002
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_HUD_Notice_BuyResurrection_C.UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x428, Size: 0x8]
	WidgetAnimation* ant_exit;//[Offset: 0x430, Size: 0x8]
	WidgetAnimation* Appear_Anim;//[Offset: 0x438, Size: 0x8]
	Image* Img_Txt_bg;//[Offset: 0x440, Size: 0x8]
	RichTextBlock* Txt_Ballte_Notice;//[Offset: 0x448, Size: 0x8]
	SolarTextBlock* Txt_Ballte_Notice;//[Offset: 0x450, Size: 0x8]
	SolarTextBlock* Txt_Ballte_Notice;//[Offset: 0x458, Size: 0x8]
	void Construct();// 0x28825051b9008
	void ShowNotice(FString Text, float Duration);// 0xe297051b9001
	static void ExecuteUbergraph_UI_HUD_Notice_BuyResurrection(int EntryPoint, FString K2Node_CustomEvent_Text, float K2Node_CustomEvent_Duration, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x32ffbd05229065
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMark_ReviveTeammates.WorldMark_ReviveBase.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* Panel;//[Offset: 0x4e0, Size: 0x8]
	CanvasPanel* Panel_rotate;//[Offset: 0x4e8, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x4f0, Size: 0x8]
	Image* Img_Light;//[Offset: 0x4f8, Size: 0x8]
	Image* img_HeadBg_Shadow;//[Offset: 0x500, Size: 0x8]
	Image* img_PlayerHead;//[Offset: 0x508, Size: 0x8]
	Image* ProgressCD;//[Offset: 0x510, Size: 0x8]
	SolarTextBlock* Txt_Recover;//[Offset: 0x518, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x520, Size: 0x8]
	SolarTextBlock* Txt_Recover_Off;//[Offset: 0x528, Size: 0x8]
	MaterialInstanceDynamic* CDMaterial;//[Offset: 0x530, Size: 0x8]
	SolarResurrectionComponent* ResurrectionComp;//[Offset: 0x538, Size: 0x8]
	FName ProgressParamName;//[Offset: 0x540, Size: 0x8]
	LinearColor ProgressParamDefaultValue;//[Offset: 0x548, Size: 0x10]
	FString TimeParamName;//[Offset: 0x558, Size: 0x10]
	int DistanceLocalTextID;//[Offset: 0x568, Size: 0x4]
	int RecoverLocalTextID;//[Offset: 0x56c, Size: 0x4]
	int TimeFormatLocalTextID;//[Offset: 0x570, Size: 0x4]
	float TickInterval;//[Offset: 0x574, Size: 0x4]
	float TickDeltaTime;//[Offset: 0x578, Size: 0x4]
	void SetOutOfScreen(bool OutOfScreen);// 0x625c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGMManagerConfigComponent.SolarGameplayConfigComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CFG_BattleRoyale_C.CFG_Framework_C.CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	int None;//[Offset: 0x42c, Size: 0x4]
	int None;//[Offset: 0x430, Size: 0x4]
	int None;//[Offset: 0x434, Size: 0x4]
	BehaviorTree* None;//[Offset: 0x438, Size: 0x28]
	BehaviorTree* None;//[Offset: 0x460, Size: 0x28]
	BehaviorTree* None;//[Offset: 0x488, Size: 0x28]
	int None;//[Offset: 0x4b0, Size: 0x4]
	DataTable* None;//[Offset: 0x4b8, Size: 0x8]
	int None;//[Offset: 0x4c0, Size: 0x4]
	class SolarBotAIController* AIController;//[Offset: 0x4c8, Size: 0x28]
	bool None;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	float None;//[Offset: 0x4f4, Size: 0x4]
	float None;//[Offset: 0x4f8, Size: 0x4]
	int None;//[Offset: 0x4fc, Size: 0x4]
	int None;//[Offset: 0x500, Size: 0x4]
	int None;//[Offset: 0x504, Size: 0x4]
	int None;//[Offset: 0x508, Size: 0x4]
	int None;//[Offset: 0x50c, Size: 0x4]
	Int32Range None;//[Offset: 0x510, Size: 0x10]
	Int32Range None;//[Offset: 0x520, Size: 0x10]
	float None;//[Offset: 0x530, Size: 0x4]
	S_SkillState None;//[Offset: 0x534, Size: 0x2]
	S_SkillState None;//[Offset: 0x536, Size: 0x2]
	<int,int> None;//[Offset: 0x538, Size: 0x50]
	<int,int> None;//[Offset: 0x588, Size: 0x50]
	S_SkillState None;//[Offset: 0x5d8, Size: 0x2]
	S_SkillState None;//[Offset: 0x5da, Size: 0x2]
	bool None;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 0x1]
	S_SkillState None;//[Offset: 0x5dd, Size: 0x2]
	int TopVictoryTeamRank;//[Offset: 0x5e0, Size: 0x4]
	int MaxBattleCountDown;//[Offset: 0x5e4, Size: 0x4]
	void GetSkillStateByNameEnum(byte Enum, out S_SkillState Out, bool K2Node_SwitchEnum_CmpSuccess);// 0x1477904f39001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SetRenderParametersBasedOnDifferentStates_C.SolarRenderParametersBasedOnDifferentStates.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x230, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x238, Size: 0x8]
	SolarCharacter* Solar Character;//[Offset: 0x240, Size: 0x8]
	TimerHandle Loop Timer;//[Offset: 0x248, Size: 0x8]
	float Min Skydiving Height;//[Offset: 0x250, Size: 0x4]
	ExponentialHeightFog* Height Fog;//[Offset: 0x258, Size: 0x8]
	bool Interpolate Fog Color;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	LinearColor Default Fog Color;//[Offset: 0x264, Size: 0x10]
	LinearColor Landing Fog Color;//[Offset: 0x274, Size: 0x10]
	float Characte Start  Skydiving Height;//[Offset: 0x284, Size: 0x4]
	float Max Skydiving Height;//[Offset: 0x288, Size: 0x4]
	bool Interpolate Fog Density;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	float Default Fog Density;//[Offset: 0x290, Size: 0x4]
	float Landing Fog Density;//[Offset: 0x294, Size: 0x4]
	bool Interpolate Fog Height Falloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	float Default Fog Height Falloff;//[Offset: 0x29c, Size: 0x4]
	float Landing Fog Height Falloff;//[Offset: 0x2a0, Size: 0x4]
	bool Interpolate Start Distance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float Default Start Distance;//[Offset: 0x2a8, Size: 0x4]
	float Landing Start Distance;//[Offset: 0x2ac, Size: 0x4]
	enum Character Skydiving State;//[Offset: 0x2b0, Size: 0x1]
	enum BeginPlayState;//[Offset: 0x2b1, Size: 0x1]
	TimerHandle Reset Fog Loop Timer;//[Offset: 0x2b8, Size: 0x8]
	TimerHandle Fog Loop Timer;//[Offset: 0x2c0, Size: 0x8]
	void Interpolation Start Distance(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0x10de9051b9001
	void Interpolation Fog Height Falloff(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0x10dea051b9001
	void Interpolation Fog Density(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0x10deb051b9001
	void Interpolation Fog Color(out LinearColor Fog Color after Interpolation, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue);// 0x10dec051b9001
	static void HeightFog(enum Character Skydiving State, bool K2Node_SwitchEnum_CmpSuccess, LinearColor CallFunc_Interpolation_Fog_Color_Fog_Color_after_Interpolation, LinearColor CallFunc_Interpolation_Fog_Color_Fog_Color_after_Interpolation, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors, ExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue);// 0x10ded051b9001
	void MaterialShadowDistance_Change(enum Character Skydiving State, float CallFunc_GetConsoleVariableFloatValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x10dee051b9001
	void TreeCullDistance_Change(enum Character Skydiving State, bool K2Node_SwitchEnum_CmpSuccess);// 0x10def051b9001
	void SetRenderParamerts(SolarCharacter* Solar Character);// 0x10df0051b9001
	void Set Render Paramerts With Height();// 0x10df1051b9001
	void ReceiveBeginPlay();// 0x10df2051b9001
	void ResetToInitialState(SolarCharacter* Solar Character);// 0x10df3051b9001
	void Reset Set Fog();// 0xffffff8c04f39000
	void Flying set Fog();// 0xffffffff8eb2d5c0
	static void ExecuteUbergraph_BP_SetRenderParametersBasedOnDifferentStates(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, SolarCharacter* K2Node_CustomEvent_Solar_Character, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_LessEqual_FloatFloat_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool Temp_bool_IsClosed_Variable, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetCameraFocusedCharacter_ReturnValue, SolarCharacter* K2Node_CustomEvent_Solar_Character, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetCameraFocusedCharacter_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0xf7def80c0652a600
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarRenderParametersBasedOnDifferentStates.Actor.Object
	DataTable* StreamingDistanceDataTable;//[Offset: 0x228, Size: 0x8]
	void SetRelativeStreamingDistanceScale(enum InCharacterSkydivingState);// 0x571d04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCityName.Actor.Object
	SolarStrongholdNamesConfig* NameConfigCN;//[Offset: 0x228, Size: 0x8]
	SolarStrongholdNamesConfig* NameConfigEN;//[Offset: 0x230, Size: 0x8]
	Texture* NameTextureCN;//[Offset: 0x238, Size: 0x8]
	Texture* NameTextureEN;//[Offset: 0x240, Size: 0x8]
	MaterialInterface* NameMaterial;//[Offset: 0x248, Size: 0x8]
	FString PointName;//[Offset: 0x250, Size: 0x10]
	MaterialInterface* TextMaterial;//[Offset: 0x260, Size: 0x8]
	SoftObjectPath FontPath;//[Offset: 0x268, Size: 0x18]
	float BaseScale;//[Offset: 0x280, Size: 0x4]
	float HightLimit;//[Offset: 0x284, Size: 0x4]
	float MinimumDistance;//[Offset: 0x288, Size: 0x4]
	int LocTextID;//[Offset: 0x28c, Size: 0x4]
	bool bCapitalsLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	float GradientFadeTime;//[Offset: 0x294, Size: 0x4]
	enum PreviewLang;//[Offset: 0x298, Size: 0x1]
	SoftObjectPath PreviewFontPath;//[Offset: 0x2a0, Size: 0x18]
	MaterialInstanceDynamic* MaterialDynamic;//[Offset: 0x2c0, Size: 0x8]
	MaterialInstanceDynamic* TextMaterialDynamic;//[Offset: 0x2c8, Size: 0x8]
	void SetSolarCityNameTickAndShow(enum OldMode, enum CurMode);// 0x50b104f39041
	void SetSolarCityNameTick(bool bNeedTick);// 0x50b004f39041
	void SetForceDisplay(bool bDisplay);// 0x50af04f39041
	void OnCharacterOnRep();// 0x50ae04f39041
	FString[] GetLocalizationCityNamesWithAllLanguages();// 0x50ad04f39041
	FString GetLocalizationCityName(bool bGetNameWithLang);// 0x50ac04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarStrongholdNamesConfig.DataAsset.Object
	<FString,Vector4> NamesMap;//[Offset: 0x30, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WarmGameMode.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int UniqueId;//[Offset: 0x10, Size: 0x4]
	int CCUStart;//[Offset: 0x14, Size: 0x4]
	int CCUEnd;//[Offset: 0x18, Size: 0x4]
	int NumOfAI;//[Offset: 0x1c, Size: 0x4]
	int AiLevel;//[Offset: 0x20, Size: 0x4]
	FString AILevelConfig;//[Offset: 0x28, Size: 0x10]
	int AITeamPresetsID;//[Offset: 0x38, Size: 0x4]
	bool EnableTeamManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int MinPlayer;//[Offset: 0x40, Size: 0x4]
	int MaxRealGroup;//[Offset: 0x44, Size: 0x4]
	int LeastRealPlayer;//[Offset: 0x48, Size: 0x4]
	int MaxWait;//[Offset: 0x4c, Size: 0x4]
	bool HasMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int ReadyStateTime;//[Offset: 0x54, Size: 0x4]
	int StopMatchTime;//[Offset: 0x58, Size: 0x4]
	bool HasAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool AIAccompany;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	int AIAccompanyTimeline;//[Offset: 0x60, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesDataBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomRoomManager.GameManagerBase.Info.Actor.Object
	int RoomTeamMemberLimit;//[Offset: 0x230, Size: 0x4]
	int RoomLeftTime;//[Offset: 0x234, Size: 0x4]
	bool bIsGameStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	bool bIsWeaponSettingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]
	bool bIsVehicleSettingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a, Size: 0x1]
	CategoryConfig[] CustomCategoryConfigs;//[Offset: 0x240, Size: 0x10]
	byte[] WeaponTypeAvailableList;//[Offset: 0x250, Size: 0x10]
	byte[] VehicleClassAvailableList;//[Offset: 0x260, Size: 0x10]
	int[] WeaponSettingBlacklist;//[Offset: 0x270, Size: 0x10]
	int[] VehicleTypeSettingBlacklist;//[Offset: 0x280, Size: 0x10]
	UserSetting[] UserSettingList;//[Offset: 0x290, Size: 0x10]
	delegate WeaponTypeAvailableChangedEvent;//[Offset: 0x2a0, Size: 0x10]
	delegate WeaponSettingBlacklistChangedEvent;//[Offset: 0x2b0, Size: 0x10]
	delegate VehicleClassAvailableChangedEvent;//[Offset: 0x2c0, Size: 0x10]
	delegate VehicleTypeSettingBlacklistChangedEvent;//[Offset: 0x2d0, Size: 0x10]
	delegate UserSettingsChangedEvent;//[Offset: 0x2e0, Size: 0x10]
	CustomRoomData RoomData;//[Offset: 0x300, Size: 0xd8]
	void WeaponTypeAvailableChangedEvent__DelegateSignature(out const byte[] WeaponTypeAvailableList);// 0x229504f39041
	void WeaponSettingBlacklistChangedEvent__DelegateSignature(out const int[] WeaponSettingBlacklist);// 0x229404f39041
	void VehicleTypeSettingBlacklistChangedEvent__DelegateSignature(out const int[] VehicleTypeSettingBlacklist);// 0x229304f39041
	void VehicleClassAvailableChangedEvent__DelegateSignature(out const byte[] VehicleClassAvailableList);// 0x229204f39041
	void UserSettingsChangedEvent__DelegateSignature(out const UserSetting[] UserSettingList);// 0x229004f39041
	void SetTimerToNoticeTeamsInfoChanged();// 0x228f04f39041
	void ReceiveUserSettingChanged(const int Category, const int Name, const int NewIndex);// 0x228e04f39041
	void ReceiveTournamentDealy();// 0x228d04f39041
	void ReceivePlayerRemoved(FString SolarPlayerID, enum reason);// 0x228c04f39041
	void OnUserSettingChangedEvent(out const int Name, CustomParamConfig ConfigInfo, out const int Value);// 0x228b04f39041
	void OnTournamentDealy();// 0x228a04f39041
	void OnTeamsInfoPostChanged();// 0x228904f39041
	void OnServerPreKickPlayer(SolarPlayerState* PS);// 0x228804f39041
	void OnRoomOwnerLeftRoom();// 0x228704f39041
	void OnRep_WeaponTypeAvailableList();// 0x228604f39041
	void OnRep_WeaponSettingBlacklist();// 0x228504f39041
	void OnRep_VehicleTypeSettingBlacklist();// 0x228404f39041
	void OnRep_VehicleClassAvailableList();// 0x228304f39041
	void OnRep_SettingsValueList();// 0x228204f39041
	void OnPlayerRemovedFromRoom(FString SolarPlayerID, enum reason);// 0x228004f39041
	bool OnGameStart();// 0x227f04f39041
	void OnClientRoomDataReadyLuaCall();// 0x227e04f39041
	void OnClientRoomDataReady();// 0x227d04f39041
	bool IsWeaponTypeAvailable(byte WeaponType);// 0x227c04f39041
	bool IsWeaponSettingOpen();// 0x227b04f39041
	bool IsWeaponAvailable(int weaponid);// 0x227a04f39041
	bool IsVehicleTypeAvailable(int VehicleTypeID);// 0x227904f39041
	bool IsVehicleSettingOpen();// 0x227804f39041
	bool IsVehicleClassAvailable(byte VehicleClassValue);// 0x227704f39041
	bool IsRoomOwner(const SCMPlayerState* Player);// 0x227604f39041
	bool IsRoomHasMinimalSides();// 0x227504f39041
	bool IsRoomHasEnoughPlayers();// 0x227404f39041
	byte[] GetWeaponTypeAvailableList();// 0x227304f39041
	void GetWeaponSettingLists(out int[] OutWeaponBlacklist, out int[] OutWeaponWhitelist);// 0x227204f39041
	int[] GetWeaponSettingBlacklist();// 0x227104f39041
	void GetVehicleTypeSettingLists(out int[] OutVehicleBlacklist, out int[] OutVehicleWhitelist);// 0x227004f39041
	int[] GetVehicleTypeSettingBlacklist();// 0x226f04f39041
	byte[] GetVehicleClassAvailableList();// 0x226e04f39041
	float GetModeParam(int Category, int Name, out CustomParamConfig ParamInfo);// 0x226b04f39041
	int GetCustomParamIndex(int Category, int Name);// 0x226a04f39041
	void ExecuteGameStart();// 0x226904f39041
	bool CheckWeaponTypeCanSetting(enum WeaponUIType);// 0x226704f39041
	bool CheckWeaponCanSetting(int weaponid);// 0x226604f39041
	bool CheckVehicleTypeCanSetting(int VehicleTypeID);// 0x226504f39041
	bool CheckVehicleClassCanSetting(enum VehicleClass);// 0x226304f39041
	bool CheckCustomServerOwnerAuthority(const SCMPlayerState* Player);// 0x226204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UserSetting
	int Name;//[Offset: 0x0, Size: 0x4]
	int Category;//[Offset: 0x4, Size: 0x4]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	enum ValueType;//[Offset: 0x9, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]
	float[] ValueRange;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomParamConfig
	int DisplayName;//[Offset: 0x0, Size: 0x4]
	int Desc;//[Offset: 0x4, Size: 0x4]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	enum ValueType;//[Offset: 0x9, Size: 0x1]
	int DefaultIndex;//[Offset: 0xc, Size: 0x4]
	float[] ValueRange;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CategoryConfig
	int Category;//[Offset: 0x0, Size: 0x4]
	CustomParamConfig[] Configs;//[Offset: 0x8, Size: 0x10]
	class UserWidget* StyleClass;//[Offset: 0x18, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_EventList_BattleRoyal
	S_Event_BattleRoyale[] EventList_3_9C55B4BD476EE1024C917DAC11DB6F31;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_Event_BattleRoyale
	int BattleTime_15_6488AAB44E84633B11E7DF844AD3B376;//[Offset: 0x0, Size: 0x4]
	byte EventType_11_8FC191774137C63ED18FD5987B59941D;//[Offset: 0x4, Size: 0x1]
	<FString,FString> EventParam_10_DC47076342DAE72F001FD1A032026480;//[Offset: 0x8, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_MapInfoComponent_C.CGMMapInfo.GameModeCompBase.ActorComponent.Object
	AirlineData Airline;//[Offset: 0x180, Size: 0x28]
	Vector[] SafeAreaCenters;//[Offset: 0x1a8, Size: 0x10]
	bool StaticAirline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	bool StaticSafeArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 0x1]
	DataTable* DT_EventTimeline_BattleRoyale;//[Offset: 0x1c0, Size: 0x8]
	bool UsePoisonCircleMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	Vector2D TempDir;//[Offset: 0x1cc, Size: 0x8]
	bool UseFakePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	<int,Vector2D> FakePointRangeArr;//[Offset: 0x1d8, Size: 0x50]
	bool UseFakeBombPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	<int,Vector2D> FakeBombPointRangeArr;//[Offset: 0x230, Size: 0x50]
	Vector PreCirclePoint;//[Offset: 0x280, Size: 0xc]
	float[] CircleRadiusArr;//[Offset: 0x290, Size: 0x10]
	int StaticAirlineID;//[Offset: 0x2a0, Size: 0x4]
	Int32Range OverrideCenterIndex;//[Offset: 0x2a4, Size: 0x10]
	void Calculate Required Parameters(out float[] RadiusArr, int Index, out float Radius, out float MaxOffset, out float GoToTheCentreRadius, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_FMin_ReturnValue);// 0xc004051b9001
	static void Random Get Fake Bomb Point(out const int Key, out Vector Pos, out bool Success, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_RandomUnitVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0xc005051b9001
	void SetFakeBombPointRangeArrr(<int,Vector2D> FakeBombPointRangeArr);// 0xc006051b9001
	void SetFakePointRnageArr(<int,Vector2D> FakePointRnageArr);// 0xc007051b9001
	void Get Safe Area Centers Len(out int Len, int CallFunc_Array_Length_ReturnValue);// 0xc008051b9001
	void CalculateFakePoint(Vector Centre, float SmallRadiu, float LargeRadiu, int Index, out Vector Pos, Vector TempPos, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Max_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Normal_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_VSize2D_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Multiply_VectorInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FMin_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0xc009051b9001
	static void Join Next(float Radius, float MaxOffset, int LastIndex, out Vector[] TargetArray, float GoToTheCentreRadius, bool AddFlag, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, Vector CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_RandomFloatInRange_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Conv_FloatToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int Temp_int_Variable, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Vector_Normal2D_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Random_Selection_Add, int CallFunc_Array_Add_ReturnValue);// 0xc00a051b9001
	void Random Selection(float TargetDisMax, float Radius, out Vector[] TargetArray, bool NeedCheckBoundary, out bool Add, int CallFunc_Array_LastIndex_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Array_Get_Item, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, int CallFunc_Array_Add_ReturnValue);// 0xc00b051b9001
	void JudgeBoundary(Vector Pos, float Radius, out bool DontInBoundary, Vector2D NewLocalVar, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, bool CallFunc_CheckMapDarkDataWithVector_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsPointInBox_ReturnValue);// 0xc00c051b9001
	void Calculate Poison Circle Point Array(out float[] RadiusArr, Vector FirstPoint, bool Failed, int Index, Vector[] TempAreaPosArray, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Calculate_Required_Parameters_Radius, float CallFunc_Calculate_Required_Parameters_MaxOffset, float CallFunc_Calculate_Required_Parameters_GoToTheCentreRadius, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_PoisonCircleMarker_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_GetRandomVectorFromMapDarkData_ReturnValue, int CallFunc_Max_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xc00d051b9001
	static void Get Safe Area Center(int Index, out Vector Pos, Vector Point, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_StructToJson_Json, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_InRange_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, const <FString,FString> K2Node_MakeMap_Map, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D[] CallFunc_Map_Values_Values, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector2D CallFunc_Array_Get_Item, Vector2D K2Node_Select_Default, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_CalculateFakePoint_Pos, Vector[] K2Node_Select_Default, Vector CallFunc_Array_Get_Item);// 0xc00e051b9001
	int GetAirline(out AirlineData Airline, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue);// 0xbda2051b9001
	void SetStaticSafeArea(out Vector[] SafeAreaCenters, Int32Range OverrideIndexRange);// 0x1281b051b9008
	void SetStaticAirline(AirlineData Airline, int StaticAirlineID);// 0x1286b051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGMMapInfo.GameModeCompBase.ActorComponent.Object
	Vector[] AreaPosArray;//[Offset: 0xd0, Size: 0x10]
	int MapId;//[Offset: 0xe0, Size: 0x4]
	int UsedAirlineID;//[Offset: 0xe4, Size: 0x4]
	AirlineData UsedAirlineData;//[Offset: 0xe8, Size: 0x28]
	<int,AirlineData> AirlineDataList;//[Offset: 0x120, Size: 0x50]
	int MaskWidth;//[Offset: 0x170, Size: 0x4]
	float MaskScale;//[Offset: 0x174, Size: 0x4]
	int MapWidth;//[Offset: 0x178, Size: 0x4]
	int MapHeight;//[Offset: 0x17c, Size: 0x4]
	void LoadAirlineData();// 0x45df04f39041
	void InitInfo(int InMapID);// 0x45de04f39041
	int GetUsedAirlineData(out AirlineData OutData);// 0x45dd04f39041
	int GetMapIDByName(SCustomGameState* InGameState, FString Name);// 0x45dc04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AirlineData
	float AirlineHeight;//[Offset: 0x0, Size: 0x4]
	float AirlineSpeed;//[Offset: 0x4, Size: 0x4]
	Vector2D StartPoint;//[Offset: 0x8, Size: 0x8]
	Vector2D EndPoint;//[Offset: 0x10, Size: 0x8]
	Vector2D RealStartPoint;//[Offset: 0x18, Size: 0x8]
	Vector2D RealEndPoint;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PoisonCircleMarker_C.SolarMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x298, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a0, Size: 0x8]
	void ReceiveBeginPlay();// 0x2dffba0522902e
	void ExecuteUbergraph_BP_PoisonCircleMarker(int EntryPoint);// 0x166a5051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarBombingManager_C.SolarBombingZoneManager.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 0x8]
	FString GetModuleName();// 0x12799051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBombingZoneManager.Actor.Object
	class SolarBombActor* BPClass;//[Offset: 0x228, Size: 0x8]
	BombingZone[] ZoneArray;//[Offset: 0x230, Size: 0x10]
	int WeightInCar;//[Offset: 0x244, Size: 0x4]
	int WeightInPoision;//[Offset: 0x248, Size: 0x4]
	int WeightInRoom;//[Offset: 0x24c, Size: 0x4]
	Vector2D LocationLimit;//[Offset: 0x250, Size: 0x8]
	float NotifyTime;//[Offset: 0x258, Size: 0x4]
	void OnCreateBombingZone(int ID, bool bSpecificLocation, Vector TargetLocation);// 0x4f0404f39041
	BombingZoneBomb GetBombData(int ZoneId);// 0x4f0304f39041
	bool CreateBombingZone(out BombingZone Zone, bool bSpecificLocation, Vector TargetLocation);// 0x4f0204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BombingZoneBomb
	float Radius;//[Offset: 0x0, Size: 0x4]
	float MaxDamage;//[Offset: 0x4, Size: 0x4]
	float MinDamage;//[Offset: 0x8, Size: 0x4]
	float VehicleMaxDamage;//[Offset: 0xc, Size: 0x4]
	float VehicleMinDamage;//[Offset: 0x10, Size: 0x4]
	float InVehicleDamageScale;//[Offset: 0x14, Size: 0x4]
	float LandingTime;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BombingZone
	int instanceID;//[Offset: 0x0, Size: 0x4]
	int ConfigID;//[Offset: 0x4, Size: 0x4]
	float Radius;//[Offset: 0x8, Size: 0x4]
	float Duration;//[Offset: 0xc, Size: 0x4]
	int MinBomb;//[Offset: 0x10, Size: 0x4]
	int MaxBomb;//[Offset: 0x14, Size: 0x4]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	BombingZoneBomb Bomb;//[Offset: 0x24, Size: 0x1c]
	enum State;//[Offset: 0x40, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBombActor.Actor.Object
	bool bFireWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	BombingZoneBomb BombConfig;//[Offset: 0x22c, Size: 0x1c]
	bool bAutoDestroyAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float TargetLandingTime;//[Offset: 0x254, Size: 0x4]
	ParticleSystem* WaterBombEffect;//[Offset: 0x258, Size: 0x8]
	ParticleSystem* BombEffect;//[Offset: 0x260, Size: 0x8]
	MaterialInstanceDynamic* GuideLine;//[Offset: 0x268, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x270, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x278, Size: 0x8]
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4f0104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Formula_BattleRoyale_C.BP_FormulaBase_C.CGFormula.Info.Actor.Object
	int WarmGameExp;//[Offset: 0x25c, Size: 0x4]
	<SolarPlayerState*,bool> WeaponExp;//[Offset: 0x260, Size: 0x50]
	<int> WarmGameIdSet;//[Offset: 0x2b0, Size: 0x50]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x300, Size: 0x8]
	static SettlementReward[] GetSettlementRewards(SolarPlayerState* InPS, int MatchRuleID, int MaxRealPersonIndex, int MaxRealPerson, int ItemID, int[] ItemDrop, SolarPlayerState* PS, int RealPersonCount, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_Greater_IntInt_ReturnValue, const SolarTablesData_BattleEndRankSettlement CallFunc_GetRowData_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, SolarGameState* K2Node_DynamicCast_AsSolar_Game_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SettlementReward K2Node_MakeStruct_SettlementReward, int CallFunc_Array_Get_Item, SettlementReward[] K2Node_MakeArray_Array, int CallFunc_Array_Get_Item, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_LessEqual_IntInt_ReturnValue, int[] CallFunc_GetRowKeys_OutKeys, int CallFunc_GetRowKeys_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, const SolarTablesData_BattleEndRankSettlement CallFunc_GetRowData_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffff8f04f39002
	bool IsSettlementBagItem(SolarPlayerState* InPS, byte CallFunc_GetBattleState_State, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x13092051b9008
	void GetDefenderManager(out BP_DefenderManager_C* Output_Get, bool CallFunc_IsValid_ReturnValue, DefenderManager* CallFunc_GetDefenderManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0x130d5051b9008
	void MVPLifeTimeScore(float Life Time, out float LTMVPScore, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x11367051b9001
	static void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult, int[] Result, const int Temp_int_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int[] CallFunc_GetStrategyGuideConditions_OutResult, int CallFunc_Array_Add_ReturnValue);// 0x11368051b9001
	static int CalculateTeamRank(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, FString CallFunc_GetTeamName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x11369051b9001
	static int CalculatePlayerRank(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1136a051b9001
	float BattleStateDealFloat(float Input, byte Temp_byte_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, byte CallFunc_GetBattleState_State, float K2Node_Select_Default);// 0x1136b051b9001
	int BattleStateDealInt(int Input, byte Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_GetBattleState_State, int K2Node_Select_Default);// 0x1136c051b9001
	void GetBattleState(out byte State, byte CallFunc_GetDataByte_OutValue, bool CallFunc_GetDataByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x1136d051b9001
	float GetKDA(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float Temp_float_Variable, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BattleStateDealFloat_ReturnValue);// 0x1136e051b9001
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(SolarPlayerState* InPS, SettlementParam_ExtraRewardInfo[] CommonRewards, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString Temp_string_Variable, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, bool Temp_bool_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default, byte CallFunc_GetBattleState_State, FString CallFunc_FormatRewardItem_ItemString, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString[] K2Node_MakeArray_Array, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Combine_Reward_Item_RewardString, int Temp_int_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, int K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo[] Temp_struct_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, bool Temp_bool_Variable, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, SettlementParam_ExtraRewardInfo[] K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_FormatRewardItem_ItemString, FString K2Node_Select_Default, FString[] K2Node_MakeArray_Array, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo[] K2Node_MakeArray_Array);// 0x1136f051b9001
	void GetPlayerData(SolarPlayerState* Player, out int KillCount, out int KillDown, out int Assist, out int SaveCount, out float LifeTime, out float CauseDamage, out int Rank, out int TeamRank, out int DeathCount, out bool TeamAced, out bool IsMVP, out bool IsCustomRoomActive, out byte DefenderType, FString TeamName, FString PlayerId, FString CallFunc_GetTeamName_ReturnValue, byte CallFunc_GetDataByte_OutValue, bool CallFunc_GetDataByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue);// 0x11370051b9001
	float CalculateMVPScore(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_MVPLifeTimeScore_LTMVPScore, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BattleStateDealFloat_ReturnValue);// 0x11371051b9001
	int GetZomborg(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool Temp_bool_Variable, int CallFunc_FTrunc_ReturnValue, int Temp_int_Variable, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int K2Node_Select_Default);// 0x11372051b9001
	int GetWeaponExp(SolarPlayerState* InPS, int InWeaponID, int Exp, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float CallFunc_GetMapDataFloat_OutValue, bool CallFunc_GetMapDataFloat_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int Temp_int_Variable, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, const bool Temp_bool_Variable, int CallFunc_Round_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue);// 0x11373051b9001
	static void GetCharacterExp(SolarPlayerState* InPS, out int OutGetExp, out int[] OutReason, int[] ExpReason, int Exp, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x11374051b9001
	int GetAccountExp(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int CallFunc_GetFixedLevelExp_ReturnValue, int K2Node_Select_Default);// 0x11375051b9001
	static void GetShowPageIndexs(SolarPlayerState* InPS, out const SettlePageParam InParam, out int[] OutResult, SolarPlayerState* PlayerState, int[] SettlePages, const int Temp_int_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, const int Temp_int_Variable, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const int Temp_int_Variable, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, SolarGameInstanceBase* CallFunc_GetSolarGameInstanceBase_ReturnValue, SolarLuaHelper* CallFunc_GetSolarLuaHelper_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_IsBattlePassInfoUpdated_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int[] K2Node_MakeArray_Array);// 0x297c304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_FormulaBase_C.CGFormula.Info.Actor.Object
	float ExpGain-LifeTimeLimit;//[Offset: 0x258, Size: 0x4]
	<int,int> GetCollectionItemRewards(SolarPlayerState* InPS, <int,int> CollectionItemOutBattle, int Temp_int_Array_Index_Variable, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, int Temp_int_Loop_Counter_Variable, FText CallFunc_Format_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_Collect CallFunc_TryGetRowData_ReturnValue);// 0xffffffff3c4f60c0
	int GetFixedLevelExp(int Origin, SolarPlayerState* Player, int finalExp, bool Temp_bool_Variable, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_AccountFixedExp CallFunc_TryGetRowData_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default);// 0x2c9c204f39040
	static void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult, int[] Result, const int Temp_int_Variable, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_Greater_IntInt_ReturnValue, PlayerStatisticsData* CallFunc_GetPlayerStatData_ReturnValue, int[] CallFunc_GetValue_IntArray_OutResult, int CallFunc_GetPlayerStatisticData_OutValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const int Temp_int_Variable, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x112e9051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_TablesReader.Object
	SolarTables_Reader_AccountFixedExp* AccountFixedExp;//[Offset: 0x28, Size: 0x8]
	SolarTables_Reader_AccountFlag* AccountFlag;//[Offset: 0x30, Size: 0x8]
	SolarTables_Reader_Airline* Airline;//[Offset: 0x38, Size: 0x8]
	SolarTables_Reader_Armory* Armory;//[Offset: 0x40, Size: 0x8]
	SolarTables_Reader_BattleUpgradeContent* BattleUpgradeContent;//[Offset: 0x48, Size: 0x8]
	SolarTables_Reader_BattleUpgradeEffect* BattleUpgradeEffect;//[Offset: 0x50, Size: 0x8]
	SolarTables_Reader_BattleUpgradeEffectPool* BattleUpgradeEffectPool;//[Offset: 0x58, Size: 0x8]
	SolarTables_Reader_BattleEndRankSettlement* BattleEndRankSettlement;//[Offset: 0x60, Size: 0x8]
	SolarTables_Reader_BpAward* BpAward;//[Offset: 0x68, Size: 0x8]
	SolarTables_Reader_Behavior* Behavior;//[Offset: 0x70, Size: 0x8]
	SolarTables_Reader_EscapeExp* EscapeExp;//[Offset: 0x78, Size: 0x8]
	SolarTables_Reader_CaseToggleAlphabet* CaseToggleAlphabet;//[Offset: 0x80, Size: 0x8]
	SolarTables_Reader_UnitCharacter* UnitCharacter;//[Offset: 0x88, Size: 0x8]
	SolarTables_Reader_CharacterAbility* CharacterAbility;//[Offset: 0x90, Size: 0x8]
	SolarTables_Reader_CharacterPassiveAbility* CharacterPassiveAbility;//[Offset: 0x98, Size: 0x8]
	SolarTables_Reader_GetPoint* GetPoint;//[Offset: 0xa0, Size: 0x8]
	SolarTables_Reader_ChestSpawn* ChestSpawn;//[Offset: 0xa8, Size: 0x8]
	SolarTables_Reader_ChestSpawnGroup* ChestSpawnGroup;//[Offset: 0xb0, Size: 0x8]
	SolarTables_Reader_ClanFlag* ClanFlag;//[Offset: 0xb8, Size: 0x8]
	SolarTables_Reader_DayAndNight* DayAndNight;//[Offset: 0xc0, Size: 0x8]
	SolarTables_Reader_DsVariableRange* DsVariableRange;//[Offset: 0xc8, Size: 0x8]
	SolarTables_Reader_EShop* EShop;//[Offset: 0xd0, Size: 0x8]
	SolarTables_Reader_EShopDemoModel* EShopDemoModel;//[Offset: 0xd8, Size: 0x8]
	SolarTables_Reader_EShopGoodsPool* EShopGoodsPool;//[Offset: 0xe0, Size: 0x8]
	SolarTables_Reader_EShopGoodsPoolGroup* EShopGoodsPoolGroup;//[Offset: 0xe8, Size: 0x8]
	SolarTables_Reader_EShopSpawn* EShopSpawn;//[Offset: 0xf0, Size: 0x8]
	SolarTables_Reader_BattleRoyaleMode* BattleRoyaleMode;//[Offset: 0xf8, Size: 0x8]
	SolarTables_Reader_GameModeGroup* GameModeGroup;//[Offset: 0x100, Size: 0x8]
	SolarTables_Reader_GameModeMain* GameModeMain;//[Offset: 0x108, Size: 0x8]
	SolarTables_Reader_OutcomeSet* OutcomeSet;//[Offset: 0x110, Size: 0x8]
	SolarTables_Reader_GameTimeLine* GameTimeLine;//[Offset: 0x118, Size: 0x8]
	SolarTables_Reader_GlobalOutcome* GlobalOutcome;//[Offset: 0x120, Size: 0x8]
	SolarTables_Reader_GlobalSensitivity* GlobalSensitivity;//[Offset: 0x128, Size: 0x8]
	SolarTables_Reader_HeroPowerFormula* HeroPowerFormula;//[Offset: 0x130, Size: 0x8]
	SolarTables_Reader_InputAction* InputAction;//[Offset: 0x138, Size: 0x8]
	SolarTables_Reader_InputMapping* InputMapping;//[Offset: 0x140, Size: 0x8]
	SolarTables_Reader_Item* Item;//[Offset: 0x148, Size: 0x8]
	SolarTables_Reader_BackpackProperty* BackpackProperty;//[Offset: 0x150, Size: 0x8]
	SolarTables_Reader_BackpackTrailProperty* BackpackTrailProperty;//[Offset: 0x158, Size: 0x8]
	SolarTables_Reader_CapsuleProperty* CapsuleProperty;//[Offset: 0x160, Size: 0x8]
	SolarTables_Reader_Dance* Dance;//[Offset: 0x168, Size: 0x8]
	SolarTables_Reader_Emote* Emote;//[Offset: 0x170, Size: 0x8]
	SolarTables_Reader_KillNotify* KillNotify;//[Offset: 0x178, Size: 0x8]
	SolarTables_Reader_MaterialProperty* MaterialProperty;//[Offset: 0x180, Size: 0x8]
	SolarTables_Reader_VehicleSkinProperty* VehicleSkinProperty;//[Offset: 0x188, Size: 0x8]
	SolarTables_Reader_Voice* Voice;//[Offset: 0x190, Size: 0x8]
	SolarTables_Reader_WeaponSkinProperty* WeaponSkinProperty;//[Offset: 0x198, Size: 0x8]
	SolarTables_Reader_ItemCustomType* ItemCustomType;//[Offset: 0x1a0, Size: 0x8]
	SolarTables_Reader_ItemInBattle* ItemInBattle;//[Offset: 0x1a8, Size: 0x8]
	SolarTables_Reader_ArmorProperty* ArmorProperty;//[Offset: 0x1b0, Size: 0x8]
	SolarTables_Reader_Chest* Chest;//[Offset: 0x1b8, Size: 0x8]
	SolarTables_Reader_Collect* Collect;//[Offset: 0x1c0, Size: 0x8]
	SolarTables_Reader_EnergyProperty* EnergyProperty;//[Offset: 0x1c8, Size: 0x8]
	SolarTables_Reader_ExtraEnergyProperty* ExtraEnergyProperty;//[Offset: 0x1d0, Size: 0x8]
	SolarTables_Reader_GunProperty* GunProperty;//[Offset: 0x1d8, Size: 0x8]
	SolarTables_Reader_ItemBehavior* ItemBehavior;//[Offset: 0x1e0, Size: 0x8]
	SolarTables_Reader_ItemWeaponParts* ItemWeaponParts;//[Offset: 0x1e8, Size: 0x8]
	SolarTables_Reader_JetPackModuleProperty* JetPackModuleProperty;//[Offset: 0x1f0, Size: 0x8]
	SolarTables_Reader_ShieldProperty* ShieldProperty;//[Offset: 0x1f8, Size: 0x8]
	SolarTables_Reader_ItemQuality* ItemQuality;//[Offset: 0x200, Size: 0x8]
	SolarTables_Reader_ItemSound* ItemSound;//[Offset: 0x208, Size: 0x8]
	SolarTables_Reader_LobbyAutoDownload* LobbyAutoDownload;//[Offset: 0x210, Size: 0x8]
	SolarTables_Reader_LanguageSwitcher* LanguageSwitcher;//[Offset: 0x218, Size: 0x8]
	SolarTables_Reader_Localization* Localization;//[Offset: 0x220, Size: 0x8]
	SolarTables_Reader_Localization_BattleUI* Localization_BattleUI;//[Offset: 0x228, Size: 0x8]
	SolarTables_Reader_Localization_EventSystem* Localization_EventSystem;//[Offset: 0x230, Size: 0x8]
	SolarTables_Reader_Localization_General* Localization_General;//[Offset: 0x238, Size: 0x8]
	SolarTables_Reader_Localization_Heroes* Localization_Heroes;//[Offset: 0x240, Size: 0x8]
	SolarTables_Reader_Localization_Item* Localization_Item;//[Offset: 0x248, Size: 0x8]
	SolarTables_Reader_Localization_Tournament* Localization_Tournament;//[Offset: 0x250, Size: 0x8]
	SolarTables_Reader_Localization_Uncategorized* Localization_Uncategorized;//[Offset: 0x258, Size: 0x8]
	SolarTables_Reader_GameMap* GameMap;//[Offset: 0x260, Size: 0x8]
	SolarTables_Reader_MapMarkIcon* MapMarkIcon;//[Offset: 0x268, Size: 0x8]
	SolarTables_Reader_MatchRule* MatchRule;//[Offset: 0x270, Size: 0x8]
	SolarTables_Reader_RankMatch* RankMatch;//[Offset: 0x278, Size: 0x8]
	SolarTables_Reader_NameCardBackground* NameCardBackground;//[Offset: 0x280, Size: 0x8]
	SolarTables_Reader_NameCardPose* NameCardPose;//[Offset: 0x288, Size: 0x8]
	SolarTables_Reader_ObGift* ObGift;//[Offset: 0x290, Size: 0x8]
	SolarTables_Reader_OBSubtitle_Action2Feature* OBSubtitle_Action2Feature;//[Offset: 0x298, Size: 0x8]
	SolarTables_Reader_OBSubtitle_Feature2Emotion* OBSubtitle_Feature2Emotion;//[Offset: 0x2a0, Size: 0x8]
	SolarTables_Reader_OBSubtitle_Emotion2Pattern* OBSubtitle_Emotion2Pattern;//[Offset: 0x2a8, Size: 0x8]
	SolarTables_Reader_OBSubtitle_Pattern2Subtitle* OBSubtitle_Pattern2Subtitle;//[Offset: 0x2b0, Size: 0x8]
	SolarTables_Reader_Outcome* Outcome;//[Offset: 0x2b8, Size: 0x8]
	SolarTables_Reader_OutcomeContent* OutcomeContent;//[Offset: 0x2c0, Size: 0x8]
	SolarTables_Reader_PickupPriorityItem* PickupPriorityItem;//[Offset: 0x2c8, Size: 0x8]
	SolarTables_Reader_PickupPriorityWeaponPart* PickupPriorityWeaponPart;//[Offset: 0x2d0, Size: 0x8]
	SolarTables_Reader_CharacterVoiceover* CharacterVoiceover;//[Offset: 0x2d8, Size: 0x8]
	SolarTables_Reader_QuickChat* QuickChat;//[Offset: 0x2e0, Size: 0x8]
	SolarTables_Reader_QuickVoice* QuickVoice;//[Offset: 0x2e8, Size: 0x8]
	SolarTables_Reader_VODownload* VODownload;//[Offset: 0x2f0, Size: 0x8]
	SolarTables_Reader_RankLevel* RankLevel;//[Offset: 0x2f8, Size: 0x8]
	SolarTables_Reader_AutoDirector* AutoDirector;//[Offset: 0x300, Size: 0x8]
	SolarTables_Reader_AutoDirectorActivityScore* AutoDirectorActivityScore;//[Offset: 0x308, Size: 0x8]
	SolarTables_Reader_CircularCameras* CircularCameras;//[Offset: 0x310, Size: 0x8]
	SolarTables_Reader_HotSpot* HotSpot;//[Offset: 0x318, Size: 0x8]
	SolarTables_Reader_LookAtCameras* LookAtCameras;//[Offset: 0x320, Size: 0x8]
	SolarTables_Reader_Rescue* Rescue;//[Offset: 0x328, Size: 0x8]
	SolarTables_Reader_Skin* Skin;//[Offset: 0x330, Size: 0x8]
	SolarTables_Reader_Achievement* Achievement;//[Offset: 0x338, Size: 0x8]
	SolarTables_Reader_TaskProgress* TaskProgress;//[Offset: 0x340, Size: 0x8]
	SolarTables_Reader_TaskSystem* TaskSystem;//[Offset: 0x348, Size: 0x8]
	SolarTables_Reader_PlayerOperationListLayout* PlayerOperationListLayout;//[Offset: 0x350, Size: 0x8]
	SolarTables_Reader_Variables* Variables;//[Offset: 0x358, Size: 0x8]
	SolarTables_Reader_Vehicle* Vehicle;//[Offset: 0x360, Size: 0x8]
	SolarTables_Reader_VehicleSkin* VehicleSkin;//[Offset: 0x368, Size: 0x8]
	SolarTables_Reader_VehicleType* VehicleType;//[Offset: 0x370, Size: 0x8]
	SolarTables_Reader_VehicleSpawn* VehicleSpawn;//[Offset: 0x378, Size: 0x8]
	SolarTables_Reader_VehicleSpawnGroup* VehicleSpawnGroup;//[Offset: 0x380, Size: 0x8]
	SolarTables_Reader_WarmGame* WarmGame;//[Offset: 0x388, Size: 0x8]
	SolarTables_Reader_WarmGameMode* WarmGameMode;//[Offset: 0x390, Size: 0x8]
	SolarTables_Reader_WeaponDamage* WeaponDamage;//[Offset: 0x398, Size: 0x8]
	SolarTables_Reader_Weapon* Weapon;//[Offset: 0x3a0, Size: 0x8]
	SolarTables_Reader_WeaponAmmo* WeaponAmmo;//[Offset: 0x3a8, Size: 0x8]
	SolarTables_Reader_WeaponBattleUpgrade* WeaponBattleUpgrade;//[Offset: 0x3b0, Size: 0x8]
	SolarTables_Reader_WeaponDefault* WeaponDefault;//[Offset: 0x3b8, Size: 0x8]
	SolarTables_Reader_WeaponKillTip* WeaponKillTip;//[Offset: 0x3c0, Size: 0x8]
	SolarTables_Reader_WeaponParts* WeaponParts;//[Offset: 0x3c8, Size: 0x8]
	SolarTables_Reader_WeaponPartsOp* WeaponPartsOp;//[Offset: 0x3d0, Size: 0x8]
	SolarTables_Reader_WeaponQuality* WeaponQuality;//[Offset: 0x3d8, Size: 0x8]
	SolarTables_Reader_SecondMode* SecondMode;//[Offset: 0x3e0, Size: 0x8]
	SolarTables_Reader_WeaponSkin* WeaponSkin;//[Offset: 0x3e8, Size: 0x8]
	SolarTables_Reader_WeaponSound* WeaponSound;//[Offset: 0x3f0, Size: 0x8]
	SolarTables_Reader_WeaponStatu* WeaponStatu;//[Offset: 0x3f8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_AccountFixedExp.SolarTableReaderBase.Object
	SolarTablesData_AccountFixedExp TryGetRowData(int Key, out bool HasKey);// 0x58ab04f39041
	bool HasRowKey(int Key);// 0x58aa04f39041
	bool HasColKey(FString Key);// 0x58a904f39041
	FString GetTableName();// 0x58a804f39041
	int GetRowKeys(out int[] OutKeys);// 0x58a704f39041
	SolarTablesData_AccountFixedExp GetRowData(int Key);// 0x58a604f39041
	int GetRowCount();// 0x58a504f39041
	int GetDataNum();// 0x58a404f39041
	FString[] GetColKeys();// 0x58a304f39041
	int GetColCount();// 0x58a204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTableReaderBase.Object
	int RandomRangeInt(out const SolarTablesRangeInt InData);// 0x58a104f39041
	float RandomRangeFloat(out const SolarTablesRangeFloat InData);// 0x58a004f39041
	bool IsReaderValid();// 0x589f04f39041
	FString GetLocText(out const SolarTablesLocalText InData);// 0x589e04f39041
	FString GetDeviceRes(out const SolarTablesDeviceRes InData);// 0x589d04f39041
	bool ContainsRangeInt(out const SolarTablesRangeInt InData, int In, bool bEqualMin, bool bEqualMax);// 0x589c04f39041
	bool ContainsRangeFloat(out const SolarTablesRangeFloat InData, float In, bool bEqualMin, bool bEqualMax);// 0x589b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_AccountFixedExp.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Exp;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesRangeInt
	int Left;//[Offset: 0x0, Size: 0x4]
	int Right;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesRangeFloat
	float Left;//[Offset: 0x0, Size: 0x4]
	float Right;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesLocalText
	int ID;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesDeviceRes
	FString res;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_AccountFlag.SolarTableReaderBase.Object
	SolarTablesData_AccountFlag TryGetRowData(int Key, out bool HasKey);// 0x58b504f39041
	bool HasRowKey(int Key);// 0x58b404f39041
	bool HasColKey(FString Key);// 0x58b304f39041
	FString GetTableName();// 0x58b204f39041
	int GetRowKeys(out int[] OutKeys);// 0x58b104f39041
	SolarTablesData_AccountFlag GetRowData(int Key);// 0x58b004f39041
	int GetRowCount();// 0x58af04f39041
	int GetDataNum();// 0x58ae04f39041
	FString[] GetColKeys();// 0x58ad04f39041
	int GetColCount();// 0x58ac04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_AccountFlag.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int FlagType;//[Offset: 0x10, Size: 0x4]
	FString FlagIcon;//[Offset: 0x18, Size: 0x10]
	FString StateName;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Airline.SolarTableReaderBase.Object
	SolarTablesData_Airline TryGetRowData(int Key, out bool HasKey);// 0x58c904f39041
	bool HasRowKey(int Key);// 0x58c804f39041
	bool HasColKey(FString Key);// 0x58c704f39041
	FString GetTableName();// 0x58c604f39041
	int GetRowKeys(out int[] OutKeys);// 0x58c504f39041
	SolarTablesData_Airline GetRowData(int Key);// 0x58c404f39041
	int GetRowCount();// 0x58c304f39041
	int GetDataNum();// 0x58c204f39041
	FString[] GetColKeys();// 0x58c104f39041
	int GetColCount();// 0x58c004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Airline.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float[] AirlineCoordinateA;//[Offset: 0x10, Size: 0x10]
	float[] RealPointA;//[Offset: 0x20, Size: 0x10]
	float[] AirlineCoordinateB;//[Offset: 0x30, Size: 0x10]
	float[] RealPointB;//[Offset: 0x40, Size: 0x10]
	int UseGameMode;//[Offset: 0x50, Size: 0x4]
	int MapId;//[Offset: 0x54, Size: 0x4]
	float AirlineAltitude;//[Offset: 0x58, Size: 0x4]
	float CapsuleSpeed;//[Offset: 0x5c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Armory.SolarTableReaderBase.Object
	SolarTablesData_Armory TryGetRowData(int Key, out bool HasKey);// 0x58dd04f39041
	bool HasRowKey(int Key);// 0x58dc04f39041
	bool HasColKey(FString Key);// 0x58db04f39041
	FString GetTableName();// 0x58da04f39041
	int GetRowKeys(out int[] OutKeys);// 0x58d904f39041
	SolarTablesData_Armory GetRowData(int Key);// 0x58d804f39041
	int GetRowCount();// 0x58d704f39041
	int GetDataNum();// 0x58d604f39041
	FString[] GetColKeys();// 0x58d504f39041
	int GetColCount();// 0x58d404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Armory.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WeaponType;//[Offset: 0x10, Size: 0x4]
	int WeaponDescription;//[Offset: 0x14, Size: 0x4]
	int SkillName;//[Offset: 0x18, Size: 0x4]
	int SkillDescription;//[Offset: 0x1c, Size: 0x4]
	FString UrlName;//[Offset: 0x20, Size: 0x10]
	FString WeaponMovie;//[Offset: 0x30, Size: 0x10]
	FString WeaponConfig;//[Offset: 0x40, Size: 0x10]
	int WeaponUnlockLevel;//[Offset: 0x50, Size: 0x4]
	int WeaponDamage;//[Offset: 0x54, Size: 0x4]
	int WeaponRateOfFire;//[Offset: 0x58, Size: 0x4]
	int WeaponRecoil;//[Offset: 0x5c, Size: 0x4]
	int WeaponSpread;//[Offset: 0x60, Size: 0x4]
	int WeaponRange;//[Offset: 0x64, Size: 0x4]
	int WeaponMobility;//[Offset: 0x68, Size: 0x4]
	FString SilhouetteIcon;//[Offset: 0x70, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BattleUpgradeContent.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeContent TryGetRowData(int Key, out bool HasKey);// 0x592304f39041
	bool HasRowKey(int Key);// 0x592204f39041
	bool HasColKey(FString Key);// 0x592104f39041
	FString GetTableName();// 0x592004f39041
	int GetRowKeys(out int[] OutKeys);// 0x591f04f39041
	SolarTablesData_BattleUpgradeContent GetRowData(int Key);// 0x591e04f39041
	int GetRowCount();// 0x591d04f39041
	int GetDataNum();// 0x591c04f39041
	FString[] GetColKeys();// 0x591b04f39041
	int GetColCount();// 0x591a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BattleUpgradeContent.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ModelID;//[Offset: 0x10, Size: 0x10]
	int Grade;//[Offset: 0x20, Size: 0x4]
	int[] UpgradeContent;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BattleUpgradeEffect.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeEffect TryGetRowData(int Key, out bool HasKey);// 0x592d04f39041
	bool HasRowKey(int Key);// 0x592c04f39041
	bool HasColKey(FString Key);// 0x592b04f39041
	FString GetTableName();// 0x592a04f39041
	int GetRowKeys(out int[] OutKeys);// 0x592904f39041
	SolarTablesData_BattleUpgradeEffect GetRowData(int Key);// 0x592804f39041
	int GetRowCount();// 0x592704f39041
	int GetDataNum();// 0x592604f39041
	FString[] GetColKeys();// 0x592504f39041
	int GetColCount();// 0x592404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BattleUpgradeEffect.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum Effect;//[Offset: 0x10, Size: 0x1]
	int EffectValue;//[Offset: 0x14, Size: 0x4]
	int StackingTimes;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BattleUpgradeEffectPool.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeEffectPool TryGetRowData(int Key, out bool HasKey);// 0x593704f39041
	bool HasRowKey(int Key);// 0x593604f39041
	bool HasColKey(FString Key);// 0x593504f39041
	FString GetTableName();// 0x593404f39041
	int GetRowKeys(out int[] OutKeys);// 0x593304f39041
	SolarTablesData_BattleUpgradeEffectPool GetRowData(int Key);// 0x593204f39041
	int GetRowCount();// 0x593104f39041
	int GetDataNum();// 0x593004f39041
	FString[] GetColKeys();// 0x592f04f39041
	int GetColCount();// 0x592e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BattleUpgradeEffectPool.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] Pool;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BattleEndRankSettlement.SolarTableReaderBase.Object
	SolarTablesData_BattleEndRankSettlement TryGetRowData(int Key, out bool HasKey);// 0x590f04f39041
	bool HasRowKey(int Key);// 0x590e04f39041
	bool HasColKey(FString Key);// 0x590d04f39041
	FString GetTableName();// 0x590c04f39041
	int GetRowKeys(out int[] OutKeys);// 0x590b04f39041
	SolarTablesData_BattleEndRankSettlement GetRowData(int Key);// 0x590a04f39041
	int GetRowCount();// 0x590904f39041
	int GetDataNum();// 0x590804f39041
	FString[] GetColKeys();// 0x590704f39041
	int GetColCount();// 0x590604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BattleEndRankSettlement.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int RuleID;//[Offset: 0x10, Size: 0x4]
	int RealPerson;//[Offset: 0x14, Size: 0x4]
	int[] ItemDrop;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BpAward.SolarTableReaderBase.Object
	SolarTablesData_BpAward TryGetRowData(int Key, out bool HasKey);// 0x594b04f39041
	bool HasRowKey(int Key);// 0x594a04f39041
	bool HasColKey(FString Key);// 0x594904f39041
	FString GetTableName();// 0x594804f39041
	int GetRowKeys(out int[] OutKeys);// 0x594704f39041
	SolarTablesData_BpAward GetRowData(int Key);// 0x594604f39041
	int GetRowCount();// 0x594504f39041
	int GetDataNum();// 0x594404f39041
	FString[] GetColKeys();// 0x594304f39041
	int GetColCount();// 0x594204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BpAward.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int BpID;//[Offset: 0x10, Size: 0x4]
	int Level;//[Offset: 0x14, Size: 0x4]
	int Exp;//[Offset: 0x18, Size: 0x4]
	int UpdateValue;//[Offset: 0x1c, Size: 0x4]
	int[] FreeAward;//[Offset: 0x20, Size: 0x10]
	int[] PayAward;//[Offset: 0x30, Size: 0x10]
	bool UnlockExtraTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool BuyLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool LoopReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Behavior.SolarTableReaderBase.Object
	SolarTablesData_Behavior TryGetRowData(int Key, out bool HasKey);// 0x594104f39041
	bool HasRowKey(int Key);// 0x594004f39041
	bool HasColKey(FString Key);// 0x593f04f39041
	FString GetTableName();// 0x593e04f39041
	int GetRowKeys(out int[] OutKeys);// 0x593d04f39041
	SolarTablesData_Behavior GetRowData(int Key);// 0x593c04f39041
	int GetRowCount();// 0x593b04f39041
	int GetDataNum();// 0x593a04f39041
	FString[] GetColKeys();// 0x593904f39041
	int GetColCount();// 0x593804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Behavior.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum BehaviorType;//[Offset: 0x10, Size: 0x1]
	int CharacterGetExp;//[Offset: 0x14, Size: 0x4]
	int WeaponGetExp;//[Offset: 0x18, Size: 0x4]
	int WeaponExp;//[Offset: 0x1c, Size: 0x4]
	int WeaponExp;//[Offset: 0x20, Size: 0x4]
	int WeaponExp;//[Offset: 0x24, Size: 0x4]
	SolarTablesLocalText CharaGetExpText;//[Offset: 0x28, Size: 0x4]
	int WeaponGetExpText;//[Offset: 0x2c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EscapeExp.SolarTableReaderBase.Object
	SolarTablesData_EscapeExp TryGetRowData(int Key, out bool HasKey);// 0x59f504f39041
	bool HasRowKey(int Key);// 0x59f404f39041
	bool HasColKey(FString Key);// 0x59f304f39041
	FString GetTableName();// 0x59f204f39041
	int GetRowKeys(out int[] OutKeys);// 0x59f104f39041
	SolarTablesData_EscapeExp GetRowData(int Key);// 0x59f004f39041
	int GetRowCount();// 0x59ef04f39041
	int GetDataNum();// 0x59ee04f39041
	FString[] GetColKeys();// 0x59ed04f39041
	int GetColCount();// 0x59ec04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EscapeExp.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum BehaviorType;//[Offset: 0x10, Size: 0x1]
	int CharacterGetExp;//[Offset: 0x14, Size: 0x4]
	int WeaponGetExp;//[Offset: 0x18, Size: 0x4]
	int WeaponExp;//[Offset: 0x1c, Size: 0x4]
	int WeaponExp;//[Offset: 0x20, Size: 0x4]
	int WeaponExp;//[Offset: 0x24, Size: 0x4]
	SolarTablesLocalText CharaGetExpText;//[Offset: 0x28, Size: 0x4]
	int WeaponGetExpText;//[Offset: 0x2c, Size: 0x4]
	int ExpID;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_CaseToggleAlphabet.SolarTableReaderBase.Object
	SolarTablesData_CaseToggleAlphabet TryGetRowData(int Key, out bool HasKey);// 0x595f04f39041
	bool HasRowKey(int Key);// 0x595e04f39041
	bool HasColKey(FString Key);// 0x595d04f39041
	FString GetTableName();// 0x595c04f39041
	int GetRowKeys(out int[] OutKeys);// 0x595b04f39041
	SolarTablesData_CaseToggleAlphabet GetRowData(int Key);// 0x595a04f39041
	int GetRowCount();// 0x595904f39041
	int GetDataNum();// 0x595804f39041
	FString[] GetColKeys();// 0x595704f39041
	int GetColCount();// 0x595604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_CaseToggleAlphabet.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	bool IsLower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString de;//[Offset: 0x18, Size: 0x10]
	FString fr;//[Offset: 0x28, Size: 0x10]
	FString es;//[Offset: 0x38, Size: 0x10]
	FString pt;//[Offset: 0x48, Size: 0x10]
	FString it;//[Offset: 0x58, Size: 0x10]
	FString pl;//[Offset: 0x68, Size: 0x10]
	FString tr;//[Offset: 0x78, Size: 0x10]
	FString ru;//[Offset: 0x88, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_UnitCharacter.SolarTableReaderBase.Object
	SolarTablesData_UnitCharacter TryGetRowData(int Key, out bool HasKey);// 0x5c7f04f39041
	bool HasRowKey(int Key);// 0x5c7e04f39041
	bool HasColKey(FString Key);// 0x5c7d04f39041
	FString GetTableName();// 0x5c7c04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c7b04f39041
	SolarTablesData_UnitCharacter GetRowData(int Key);// 0x5c7a04f39041
	int GetRowCount();// 0x5c7904f39041
	int GetDataNum();// 0x5c7804f39041
	FString[] GetColKeys();// 0x5c7704f39041
	int GetColCount();// 0x5c7604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_UnitCharacter.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText name_extra;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText Info;//[Offset: 0x18, Size: 0x4]
	int Gender;//[Offset: 0x1c, Size: 0x4]
	int Body;//[Offset: 0x20, Size: 0x4]
	enum CharacterType;//[Offset: 0x24, Size: 0x1]
	FString ClassTypeIcon;//[Offset: 0x28, Size: 0x10]
	SolarTablesLocalText ClassTypeInfo;//[Offset: 0x38, Size: 0x4]
	bool defaultChara;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int defaultSkin;//[Offset: 0x40, Size: 0x4]
	int defaultPose;//[Offset: 0x44, Size: 0x4]
	int defaultBackground;//[Offset: 0x48, Size: 0x4]
	bool usableChara;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	FString CharacterProtrait;//[Offset: 0x50, Size: 0x10]
	FString UrlName;//[Offset: 0x60, Size: 0x10]
	<FString,FString> CharacterAttributesID;//[Offset: 0x70, Size: 0x50]
	float MaxNormalHP;//[Offset: 0xc0, Size: 0x4]
	int defaultArmor;//[Offset: 0xc4, Size: 0x4]
	int defaultShield;//[Offset: 0xc8, Size: 0x4]
	int defaultJetPackModule;//[Offset: 0xcc, Size: 0x4]
	FString BasicItemMax;//[Offset: 0xd0, Size: 0x10]
	float InitialSolarCharge;//[Offset: 0xe0, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0xe4, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0xe8, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0xec, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0xf0, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0xf4, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0xf8, Size: 0x4]
	float InitialEnergyLimit;//[Offset: 0xfc, Size: 0x4]
	float InitialExtraEnergyLimit;//[Offset: 0x100, Size: 0x4]
	float InitialExtraEnergyCharge;//[Offset: 0x104, Size: 0x4]
	float InitialChargeCD;//[Offset: 0x108, Size: 0x4]
	int ExpID;//[Offset: 0x10c, Size: 0x4]
	float ExpBonus;//[Offset: 0x110, Size: 0x4]
	int CharaGiftID;//[Offset: 0x114, Size: 0x4]
	FString CharacterIngameBP;//[Offset: 0x118, Size: 0x10]
	FString AnimBPResPath;//[Offset: 0x128, Size: 0x10]
	int StandJogSpeed;//[Offset: 0x138, Size: 0x4]
	int StandRunSpeed;//[Offset: 0x13c, Size: 0x4]
	int StandSprintSpeed;//[Offset: 0x140, Size: 0x4]
	int CrouchJogSpeed;//[Offset: 0x144, Size: 0x4]
	int CrouchRunSpeed;//[Offset: 0x148, Size: 0x4]
	int CrouchSprintSpeed;//[Offset: 0x14c, Size: 0x4]
	int ItemID;//[Offset: 0x150, Size: 0x4]
	float BackpackScale;//[Offset: 0x154, Size: 0x4]
	int CharacterSize;//[Offset: 0x158, Size: 0x4]
	int BotConfigID;//[Offset: 0x15c, Size: 0x4]
	int CharacterSort;//[Offset: 0x160, Size: 0x4]
	int CharacterTag1;//[Offset: 0x164, Size: 0x4]
	int CharacterTag2;//[Offset: 0x168, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_CharacterAbility.SolarTableReaderBase.Object
	SolarTablesData_CharacterAbility TryGetRowData(int Key, out bool HasKey);// 0x596904f39041
	bool HasRowKey(int Key);// 0x596804f39041
	bool HasColKey(FString Key);// 0x596704f39041
	FString GetTableName();// 0x596604f39041
	int GetRowKeys(out int[] OutKeys);// 0x596504f39041
	SolarTablesData_CharacterAbility GetRowData(int Key);// 0x596404f39041
	int GetRowCount();// 0x596304f39041
	int GetDataNum();// 0x596204f39041
	FString[] GetColKeys();// 0x596104f39041
	int GetColCount();// 0x596004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_CharacterAbility.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int CharacterId;//[Offset: 0x10, Size: 0x4]
	FString DataAssetsPath;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Name;//[Offset: 0x28, Size: 0x4]
	SolarTablesLocalText Info;//[Offset: 0x2c, Size: 0x4]
	int DataID;//[Offset: 0x30, Size: 0x4]
	FString AbilityBP;//[Offset: 0x38, Size: 0x10]
	FString Icon;//[Offset: 0x48, Size: 0x10]
	int Data;//[Offset: 0x58, Size: 0x4]
	bool IfActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_CharacterPassiveAbility.SolarTableReaderBase.Object
	SolarTablesData_CharacterPassiveAbility TryGetRowData(int Key, out bool HasKey);// 0x597304f39041
	bool HasRowKey(int Key);// 0x597204f39041
	bool HasColKey(FString Key);// 0x597104f39041
	FString GetTableName();// 0x597004f39041
	int GetRowKeys(out int[] OutKeys);// 0x596f04f39041
	SolarTablesData_CharacterPassiveAbility GetRowData(int Key);// 0x596e04f39041
	int GetRowCount();// 0x596d04f39041
	int GetDataNum();// 0x596c04f39041
	FString[] GetColKeys();// 0x596b04f39041
	int GetColCount();// 0x596a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_CharacterPassiveAbility.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString DataAssetsPath;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GetPoint.SolarTableReaderBase.Object
	SolarTablesData_GetPoint TryGetRowData(int Key, out bool HasKey);// 0x5a6304f39041
	bool HasRowKey(int Key);// 0x5a6204f39041
	bool HasColKey(FString Key);// 0x5a6104f39041
	FString GetTableName();// 0x5a6004f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a5f04f39041
	SolarTablesData_GetPoint GetRowData(int Key);// 0x5a5e04f39041
	int GetRowCount();// 0x5a5d04f39041
	int GetDataNum();// 0x5a5c04f39041
	FString[] GetColKeys();// 0x5a5b04f39041
	int GetColCount();// 0x5a5a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GetPoint.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Point;//[Offset: 0x10, Size: 0x4]
	int TaskValue;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText TaskText;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ChestSpawn.SolarTableReaderBase.Object
	SolarTablesData_ChestSpawn TryGetRowData(int Key, out bool HasKey);// 0x599104f39041
	bool HasRowKey(int Key);// 0x599004f39041
	bool HasColKey(FString Key);// 0x598f04f39041
	FString GetTableName();// 0x598e04f39041
	int GetRowKeys(out int[] OutKeys);// 0x598d04f39041
	SolarTablesData_ChestSpawn GetRowData(int Key);// 0x598c04f39041
	int GetRowCount();// 0x598b04f39041
	int GetDataNum();// 0x598a04f39041
	FString[] GetColKeys();// 0x598904f39041
	int GetColCount();// 0x598804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ChestSpawn.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum ChestType;//[Offset: 0x10, Size: 0x1]
	int[] Chests;//[Offset: 0x18, Size: 0x10]
	int[] Weight;//[Offset: 0x28, Size: 0x10]
	int SpawnCount;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ChestSpawnGroup.SolarTableReaderBase.Object
	SolarTablesData_ChestSpawnGroup TryGetRowData(int Key, out bool HasKey);// 0x599b04f39041
	bool HasRowKey(int Key);// 0x599a04f39041
	bool HasColKey(FString Key);// 0x599904f39041
	FString GetTableName();// 0x599804f39041
	int GetRowKeys(out int[] OutKeys);// 0x599704f39041
	SolarTablesData_ChestSpawnGroup GetRowData(int Key);// 0x599604f39041
	int GetRowCount();// 0x599504f39041
	int GetDataNum();// 0x599404f39041
	FString[] GetColKeys();// 0x599304f39041
	int GetColCount();// 0x599204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ChestSpawnGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ChestGroup;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ClanFlag.SolarTableReaderBase.Object
	SolarTablesData_ClanFlag TryGetRowData(int Key, out bool HasKey);// 0x59af04f39041
	bool HasRowKey(int Key);// 0x59ae04f39041
	bool HasColKey(FString Key);// 0x59ad04f39041
	FString GetTableName();// 0x59ac04f39041
	int GetRowKeys(out int[] OutKeys);// 0x59ab04f39041
	SolarTablesData_ClanFlag GetRowData(int Key);// 0x59aa04f39041
	int GetRowCount();// 0x59a904f39041
	int GetDataNum();// 0x59a804f39041
	FString[] GetColKeys();// 0x59a704f39041
	int GetColCount();// 0x59a604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ClanFlag.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString FlagIcon;//[Offset: 0x10, Size: 0x10]
	FString WebIcon;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_DayAndNight.SolarTableReaderBase.Object
	SolarTablesData_DayAndNight TryGetRowData(int Key, out bool HasKey);// 0x59cd04f39041
	bool HasRowKey(int Key);// 0x59cc04f39041
	bool HasColKey(FString Key);// 0x59cb04f39041
	FString GetTableName();// 0x59ca04f39041
	int GetRowKeys(out int[] OutKeys);// 0x59c904f39041
	SolarTablesData_DayAndNight GetRowData(int Key);// 0x59c804f39041
	int GetRowCount();// 0x59c704f39041
	int GetDataNum();// 0x59c604f39041
	FString[] GetColKeys();// 0x59c504f39041
	int GetColCount();// 0x59c404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_DayAndNight.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int TimeOfDays;//[Offset: 0x10, Size: 0x4]
	int ChangingSpeed;//[Offset: 0x14, Size: 0x4]
	float ChargingRate;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_DsVariableRange.SolarTableReaderBase.Object
	SolarTablesData_DsVariableRange TryGetRowData(int Key, out bool HasKey);// 0x59d704f39041
	bool HasRowKey(int Key);// 0x59d604f39041
	bool HasColKey(FString Key);// 0x59d504f39041
	FString GetTableName();// 0x59d404f39041
	int GetRowKeys(out int[] OutKeys);// 0x59d304f39041
	SolarTablesData_DsVariableRange GetRowData(int Key);// 0x59d204f39041
	int GetRowCount();// 0x59d104f39041
	int GetDataNum();// 0x59d004f39041
	FString[] GetColKeys();// 0x59cf04f39041
	int GetColCount();// 0x59ce04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_DsVariableRange.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString VariableName;//[Offset: 0x10, Size: 0x10]
	float ValueStart;//[Offset: 0x20, Size: 0x4]
	float ValueEnd;//[Offset: 0x24, Size: 0x4]
	int ValueType;//[Offset: 0x28, Size: 0x4]
	int Tolerance;//[Offset: 0x2c, Size: 0x4]
	int ProbeInterval;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EShop.SolarTableReaderBase.Object
	SolarTablesData_EShop TryGetRowData(int Key, out bool HasKey);// 0x59ff04f39041
	bool HasRowKey(int Key);// 0x59fe04f39041
	bool HasColKey(FString Key);// 0x59fd04f39041
	FString GetTableName();// 0x59fc04f39041
	int GetRowKeys(out int[] OutKeys);// 0x59fb04f39041
	SolarTablesData_EShop GetRowData(int Key);// 0x59fa04f39041
	int GetRowCount();// 0x59f904f39041
	int GetDataNum();// 0x59f804f39041
	FString[] GetColKeys();// 0x59f704f39041
	int GetColCount();// 0x59f604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EShop.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] PoolGroupID;//[Offset: 0x10, Size: 0x10]
	bool IfMapShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int[] PoolRefreshTime;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EShopDemoModel.SolarTableReaderBase.Object
	SolarTablesData_EShopDemoModel TryGetRowData(int Key, out bool HasKey);// 0x5a0904f39041
	bool HasRowKey(int Key);// 0x5a0804f39041
	bool HasColKey(FString Key);// 0x5a0704f39041
	FString GetTableName();// 0x5a0604f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a0504f39041
	SolarTablesData_EShopDemoModel GetRowData(int Key);// 0x5a0404f39041
	int GetRowCount();// 0x5a0304f39041
	int GetDataNum();// 0x5a0204f39041
	FString[] GetColKeys();// 0x5a0104f39041
	int GetColCount();// 0x5a0004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EShopDemoModel.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ModelID;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EShopGoodsPool.SolarTableReaderBase.Object
	SolarTablesData_EShopGoodsPool TryGetRowData(int Key, out bool HasKey);// 0x5a1304f39041
	bool HasRowKey(int Key);// 0x5a1204f39041
	bool HasColKey(FString Key);// 0x5a1104f39041
	FString GetTableName();// 0x5a1004f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a0f04f39041
	SolarTablesData_EShopGoodsPool GetRowData(int Key);// 0x5a0e04f39041
	int GetRowCount();// 0x5a0d04f39041
	int GetDataNum();// 0x5a0c04f39041
	FString[] GetColKeys();// 0x5a0b04f39041
	int GetColCount();// 0x5a0a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EShopGoodsPool.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] Equipments;//[Offset: 0x10, Size: 0x10]
	int[] Prize;//[Offset: 0x20, Size: 0x10]
	int[] Nums;//[Offset: 0x30, Size: 0x10]
	int[] Weight;//[Offset: 0x40, Size: 0x10]
	int NumbersToDisplay;//[Offset: 0x50, Size: 0x4]
	int ColdDown;//[Offset: 0x54, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EShopGoodsPoolGroup.SolarTableReaderBase.Object
	SolarTablesData_EShopGoodsPoolGroup TryGetRowData(int Key, out bool HasKey);// 0x5a1d04f39041
	bool HasRowKey(int Key);// 0x5a1c04f39041
	bool HasColKey(FString Key);// 0x5a1b04f39041
	FString GetTableName();// 0x5a1a04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a1904f39041
	SolarTablesData_EShopGoodsPoolGroup GetRowData(int Key);// 0x5a1804f39041
	int GetRowCount();// 0x5a1704f39041
	int GetDataNum();// 0x5a1604f39041
	FString[] GetColKeys();// 0x5a1504f39041
	int GetColCount();// 0x5a1404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EShopGoodsPoolGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] PoolIDs;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EShopSpawn.SolarTableReaderBase.Object
	SolarTablesData_EShopSpawn TryGetRowData(int Key, out bool HasKey);// 0x5a2704f39041
	bool HasRowKey(int Key);// 0x5a2604f39041
	bool HasColKey(FString Key);// 0x5a2504f39041
	FString GetTableName();// 0x5a2404f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a2304f39041
	SolarTablesData_EShopSpawn GetRowData(int Key);// 0x5a2204f39041
	int GetRowCount();// 0x5a2104f39041
	int GetDataNum();// 0x5a2004f39041
	FString[] GetColKeys();// 0x5a1f04f39041
	int GetColCount();// 0x5a1e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EShopSpawn.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] Eshops;//[Offset: 0x10, Size: 0x10]
	int[] Weight;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BattleRoyaleMode.SolarTableReaderBase.Object
	SolarTablesData_BattleRoyaleMode TryGetRowData(int Key, out bool HasKey);// 0x591904f39041
	bool HasRowKey(int Key);// 0x591804f39041
	bool HasColKey(FString Key);// 0x591704f39041
	FString GetTableName();// 0x591604f39041
	int GetRowKeys(out int[] OutKeys);// 0x591504f39041
	SolarTablesData_BattleRoyaleMode GetRowData(int Key);// 0x591404f39041
	int GetRowCount();// 0x591304f39041
	int GetDataNum();// 0x591204f39041
	FString[] GetColKeys();// 0x591104f39041
	int GetColCount();// 0x591004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BattleRoyaleMode.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] GlobalOutcomes;//[Offset: 0x10, Size: 0x10]
	int BattleMap;//[Offset: 0x20, Size: 0x4]
	int ReadyMap;//[Offset: 0x24, Size: 0x4]
	float ReadyStateTime;//[Offset: 0x28, Size: 0x4]
	int StartTime;//[Offset: 0x2c, Size: 0x4]
	float EenTime;//[Offset: 0x30, Size: 0x4]
	int CharacterEXPCoefficient;//[Offset: 0x34, Size: 0x4]
	FString[] EventSets;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GameModeGroup.SolarTableReaderBase.Object
	SolarTablesData_GameModeGroup TryGetRowData(int Key, out bool HasKey);// 0x5a4504f39041
	bool HasRowKey(int Key);// 0x5a4404f39041
	bool HasColKey(FString Key);// 0x5a4304f39041
	FString GetTableName();// 0x5a4204f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a4104f39041
	SolarTablesData_GameModeGroup GetRowData(int Key);// 0x5a4004f39041
	int GetRowCount();// 0x5a3f04f39041
	int GetDataNum();// 0x5a3e04f39041
	FString[] GetColKeys();// 0x5a3d04f39041
	int GetColCount();// 0x5a3c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GameModeGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText ModeGroupName;//[Offset: 0x10, Size: 0x4]
	int SortId;//[Offset: 0x14, Size: 0x4]
	int[] ModeID;//[Offset: 0x18, Size: 0x10]
	FString GroupBg;//[Offset: 0x28, Size: 0x10]
	FString Icon_s;//[Offset: 0x38, Size: 0x10]
	FString Icon_mini;//[Offset: 0x48, Size: 0x10]
	FString Icon_recruit;//[Offset: 0x58, Size: 0x10]
	int DefaultSelect;//[Offset: 0x68, Size: 0x4]
	bool IfMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	FString GuideVideoUrl;//[Offset: 0x70, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GameModeMain.SolarTableReaderBase.Object
	SolarTablesData_GameModeMain TryGetRowData(int Key, out bool HasKey);// 0x5a4f04f39041
	bool HasRowKey(int Key);// 0x5a4e04f39041
	bool HasColKey(FString Key);// 0x5a4d04f39041
	FString GetTableName();// 0x5a4c04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a4b04f39041
	SolarTablesData_GameModeMain GetRowData(int Key);// 0x5a4a04f39041
	int GetRowCount();// 0x5a4904f39041
	int GetDataNum();// 0x5a4804f39041
	FString[] GetColKeys();// 0x5a4704f39041
	int GetColCount();// 0x5a4604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GameModeMain.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int groupid;//[Offset: 0x10, Size: 0x4]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	int DefaultSelect;//[Offset: 0x18, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x1c, Size: 0x4]
	SolarTablesLocalText Desc;//[Offset: 0x20, Size: 0x4]
	SolarTablesLocalText DetailDes;//[Offset: 0x24, Size: 0x4]
	FString Icon;//[Offset: 0x28, Size: 0x10]
	FString Icon_s;//[Offset: 0x38, Size: 0x10]
	FString Icon_recruit;//[Offset: 0x48, Size: 0x10]
	FString Icon_recruit_issue;//[Offset: 0x58, Size: 0x10]
	FString Icon_mini;//[Offset: 0x68, Size: 0x10]
	bool IfRecruitShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	int ModeType;//[Offset: 0x7c, Size: 0x4]
	int OutcomeSet;//[Offset: 0x80, Size: 0x4]
	int LifeTime;//[Offset: 0x84, Size: 0x4]
	int[] AccessClient;//[Offset: 0x88, Size: 0x10]
	int[] AccessServer;//[Offset: 0x98, Size: 0x10]
	int[] AccessAccount;//[Offset: 0xa8, Size: 0x10]
	int[] AccessActivity;//[Offset: 0xb8, Size: 0x10]
	int UnlockLvl;//[Offset: 0xc8, Size: 0x4]
	int[] MatchRule;//[Offset: 0xd0, Size: 0x10]
	int DefaultMatchRule;//[Offset: 0xe0, Size: 0x4]
	int Backpack;//[Offset: 0xe4, Size: 0x4]
	FString UIConfig;//[Offset: 0xe8, Size: 0x10]
	FString ModeConfig;//[Offset: 0xf8, Size: 0x10]
	FString Parameters;//[Offset: 0x108, Size: 0x10]
	bool AIMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	FString SettlementBPPath;//[Offset: 0x120, Size: 0x10]
	bool ReEnterBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool IsAutoFillTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	int[] CustomRoomNum;//[Offset: 0x138, Size: 0x10]
	bool GetSupplyBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	int ChunkID;//[Offset: 0x14c, Size: 0x4]
	int[] ChunkIdList;//[Offset: 0x150, Size: 0x10]
	enum ClassModeType;//[Offset: 0x160, Size: 0x1]
	bool WarmUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 0x1]
	bool EnableCustomRoomReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x162, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_OutcomeSet.SolarTableReaderBase.Object
	SolarTablesData_OutcomeSet TryGetRowData(int Key, out bool HasKey);// 0x5bf304f39041
	bool HasRowKey(int Key);// 0x5bf204f39041
	bool HasColKey(FString Key);// 0x5bf104f39041
	FString GetTableName();// 0x5bf004f39041
	int GetRowKeys(out int[] OutKeys);// 0x5bef04f39041
	SolarTablesData_OutcomeSet GetRowData(int Key);// 0x5bee04f39041
	int GetRowCount();// 0x5bed04f39041
	int GetDataNum();// 0x5bec04f39041
	FString[] GetColKeys();// 0x5beb04f39041
	int GetColCount();// 0x5bea04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_OutcomeSet.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] OutcomeRef;//[Offset: 0x10, Size: 0x10]
	int[] GlobalOutcome;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GameTimeLine.SolarTableReaderBase.Object
	SolarTablesData_GameTimeLine TryGetRowData(int Key, out bool HasKey);// 0x5a5904f39041
	bool HasRowKey(int Key);// 0x5a5804f39041
	bool HasColKey(FString Key);// 0x5a5704f39041
	FString GetTableName();// 0x5a5604f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a5504f39041
	SolarTablesData_GameTimeLine GetRowData(int Key);// 0x5a5404f39041
	int GetRowCount();// 0x5a5304f39041
	int GetDataNum();// 0x5a5204f39041
	FString[] GetColKeys();// 0x5a5104f39041
	int GetColCount();// 0x5a5004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GameTimeLine.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] CheckEvent;//[Offset: 0x10, Size: 0x10]
	int GameMode;//[Offset: 0x20, Size: 0x4]
	int StartTime;//[Offset: 0x24, Size: 0x4]
	int DaylightChange;//[Offset: 0x28, Size: 0x4]
	int AirDrops;//[Offset: 0x2c, Size: 0x4]
	bool IfPoisonShrink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int[] RedZone;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GlobalOutcome.SolarTableReaderBase.Object
	SolarTablesData_GlobalOutcome TryGetRowData(int Key, out bool HasKey);// 0x5a6d04f39041
	bool HasRowKey(int Key);// 0x5a6c04f39041
	bool HasColKey(FString Key);// 0x5a6b04f39041
	FString GetTableName();// 0x5a6a04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a6904f39041
	SolarTablesData_GlobalOutcome GetRowData(int Key);// 0x5a6804f39041
	int GetRowCount();// 0x5a6704f39041
	int GetDataNum();// 0x5a6604f39041
	FString[] GetColKeys();// 0x5a6504f39041
	int GetColCount();// 0x5a6404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GlobalOutcome.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ItemIDs;//[Offset: 0x10, Size: 0x10]
	int[] ItemNums;//[Offset: 0x20, Size: 0x10]
	int SingleMaxTimes;//[Offset: 0x30, Size: 0x4]
	int TotalMaxTimes;//[Offset: 0x34, Size: 0x4]
	int TotalMinTimes;//[Offset: 0x38, Size: 0x4]
	int[] AffectedOutcomes;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GlobalSensitivity.SolarTableReaderBase.Object
	SolarTablesData_GlobalSensitivity TryGetRowData(int Key, out bool HasKey);// 0x5a7704f39041
	bool HasRowKey(int Key);// 0x5a7604f39041
	bool HasColKey(FString Key);// 0x5a7504f39041
	FString GetTableName();// 0x5a7404f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a7304f39041
	SolarTablesData_GlobalSensitivity GetRowData(int Key);// 0x5a7204f39041
	int GetRowCount();// 0x5a7104f39041
	int GetDataNum();// 0x5a7004f39041
	FString[] GetColKeys();// 0x5a6f04f39041
	int GetColCount();// 0x5a6e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GlobalSensitivity.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float[] HoldWeaponSensitivity;//[Offset: 0x10, Size: 0x10]
	float[] FireWeaponSensitivity;//[Offset: 0x20, Size: 0x10]
	float ShoulderShootSenSItivity;//[Offset: 0x30, Size: 0x4]
	float ShoulderShootFireSenSItivity;//[Offset: 0x34, Size: 0x4]
	float[] SkillSensitivity;//[Offset: 0x38, Size: 0x10]
	float[] SightSensitivity;//[Offset: 0x48, Size: 0x10]
	float[] VehicleDriverSensitivity;//[Offset: 0x58, Size: 0x10]
	float[] VehicleFireSensitivity;//[Offset: 0x68, Size: 0x10]
	float[] SuperSkillSensitivity;//[Offset: 0x78, Size: 0x10]
	float[] TacticalSkillSensitivity;//[Offset: 0x88, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_HeroPowerFormula.SolarTableReaderBase.Object
	SolarTablesData_HeroPowerFormula TryGetRowData(int Key, out bool HasKey);// 0x5a8b04f39041
	bool HasRowKey(int Key);// 0x5a8a04f39041
	bool HasColKey(FString Key);// 0x5a8904f39041
	FString GetTableName();// 0x5a8804f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a8704f39041
	SolarTablesData_HeroPowerFormula GetRowData(int Key);// 0x5a8604f39041
	int GetRowCount();// 0x5a8504f39041
	int GetDataNum();// 0x5a8404f39041
	FString[] GetColKeys();// 0x5a8304f39041
	int GetColCount();// 0x5a8204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_HeroPowerFormula.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MatchRuleID;//[Offset: 0x10, Size: 0x4]
	int Battlerank;//[Offset: 0x14, Size: 0x4]
	int RankScore;//[Offset: 0x18, Size: 0x4]
	float KillRealConfig;//[Offset: 0x1c, Size: 0x4]
	float KillAiConfig;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_InputAction.SolarTableReaderBase.Object
	SolarTablesData_InputAction TryGetRowData(FString Key, out bool HasKey);// 0x5a9f04f39041
	bool HasRowKey(FString Key);// 0x5a9e04f39041
	bool HasColKey(FString Key);// 0x5a9d04f39041
	FString GetTableName();// 0x5a9c04f39041
	int GetRowKeys(out FString[] OutKeys);// 0x5a9b04f39041
	SolarTablesData_InputAction GetRowData(FString Key);// 0x5a9a04f39041
	int GetRowCount();// 0x5a9904f39041
	int GetDataNum();// 0x5a9804f39041
	FString[] GetColKeys();// 0x5a9704f39041
	int GetColCount();// 0x5a9604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_InputAction.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	bool bFlagBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bFlagBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool bFlagChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	bool bFlagParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]
	bool bFlagSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bFlagTeamDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool bFlagRelive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_InputMapping.SolarTableReaderBase.Object
	SolarTablesData_InputMapping TryGetRowData(FString Key, out bool HasKey);// 0x5aa904f39041
	bool HasRowKey(FString Key);// 0x5aa804f39041
	bool HasColKey(FString Key);// 0x5aa704f39041
	FString GetTableName();// 0x5aa604f39041
	int GetRowKeys(out FString[] OutKeys);// 0x5aa504f39041
	SolarTablesData_InputMapping GetRowData(FString Key);// 0x5aa404f39041
	int GetRowCount();// 0x5aa304f39041
	int GetDataNum();// 0x5aa204f39041
	FString[] GetColKeys();// 0x5aa104f39041
	int GetColCount();// 0x5aa004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_InputMapping.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	FString ActionName;//[Offset: 0x20, Size: 0x10]
	enum ActionType;//[Offset: 0x30, Size: 0x1]
	float Scale;//[Offset: 0x34, Size: 0x4]
	enum TriggerType;//[Offset: 0x38, Size: 0x1]
	FString FirstDefaultKeys;//[Offset: 0x40, Size: 0x10]
	FString SecondDefaultKeys;//[Offset: 0x50, Size: 0x10]
	FString ThirdDefaultKeys;//[Offset: 0x60, Size: 0x10]
	enum CtrlType;//[Offset: 0x70, Size: 0x1]
	enum ContextType;//[Offset: 0x71, Size: 0x1]
	enum RelatedType;//[Offset: 0x72, Size: 0x1]
	SolarTablesLocalText ActionDisplayName;//[Offset: 0x74, Size: 0x4]
	SolarTablesLocalText ActionTipsDesc;//[Offset: 0x78, Size: 0x4]
	enum TabType;//[Offset: 0x7c, Size: 0x1]
	int GroupIndex;//[Offset: 0x80, Size: 0x4]
	SolarTablesLocalText GroupTitle;//[Offset: 0x84, Size: 0x4]
	enum GroupType;//[Offset: 0x88, Size: 0x1]
	int GroupPriority;//[Offset: 0x8c, Size: 0x4]
	bool AffectedByActionTipsSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Item.SolarTableReaderBase.Object
	SolarTablesData_Item TryGetRowData(int Key, out bool HasKey);// 0x5ab304f39041
	bool HasRowKey(int Key);// 0x5ab204f39041
	bool HasColKey(FString Key);// 0x5ab104f39041
	FString GetTableName();// 0x5ab004f39041
	int GetRowKeys(out int[] OutKeys);// 0x5aaf04f39041
	SolarTablesData_Item GetRowData(int Key);// 0x5aae04f39041
	int GetRowCount();// 0x5aad04f39041
	int GetDataNum();// 0x5aac04f39041
	FString[] GetColKeys();// 0x5aab04f39041
	int GetColCount();// 0x5aaa04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Item.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BackpackProperty.SolarTableReaderBase.Object
	SolarTablesData_BackpackProperty TryGetRowData(int Key, out bool HasKey);// 0x58fb04f39041
	bool HasRowKey(int Key);// 0x58fa04f39041
	bool HasColKey(FString Key);// 0x58f904f39041
	FString GetTableName();// 0x58f804f39041
	int GetRowKeys(out int[] OutKeys);// 0x58f704f39041
	SolarTablesData_BackpackProperty GetRowData(int Key);// 0x58f604f39041
	int GetRowCount();// 0x58f504f39041
	int GetDataNum();// 0x58f404f39041
	FString[] GetColKeys();// 0x58f304f39041
	int GetColCount();// 0x58f204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BackpackProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	FString BackpackMeshPath;//[Offset: 0x50, Size: 0x10]
	FString PreviewBpPath;//[Offset: 0x60, Size: 0x10]
	int StartFrame;//[Offset: 0x70, Size: 0x4]
	int EndFrame;//[Offset: 0x74, Size: 0x4]
	float Length;//[Offset: 0x78, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BackpackTrailProperty.SolarTableReaderBase.Object
	SolarTablesData_BackpackTrailProperty TryGetRowData(int Key, out bool HasKey);// 0x590504f39041
	bool HasRowKey(int Key);// 0x590404f39041
	bool HasColKey(FString Key);// 0x590304f39041
	FString GetTableName();// 0x590204f39041
	int GetRowKeys(out int[] OutKeys);// 0x590104f39041
	SolarTablesData_BackpackTrailProperty GetRowData(int Key);// 0x590004f39041
	int GetRowCount();// 0x58ff04f39041
	int GetDataNum();// 0x58fe04f39041
	FString[] GetColKeys();// 0x58fd04f39041
	int GetColCount();// 0x58fc04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BackpackTrailProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	FString PreviewTrailPath;//[Offset: 0x50, Size: 0x10]
	FString AssemblingId;//[Offset: 0x60, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_CapsuleProperty.SolarTableReaderBase.Object
	SolarTablesData_CapsuleProperty TryGetRowData(int Key, out bool HasKey);// 0x595504f39041
	bool HasRowKey(int Key);// 0x595404f39041
	bool HasColKey(FString Key);// 0x595304f39041
	FString GetTableName();// 0x595204f39041
	int GetRowKeys(out int[] OutKeys);// 0x595104f39041
	SolarTablesData_CapsuleProperty GetRowData(int Key);// 0x595004f39041
	int GetRowCount();// 0x594f04f39041
	int GetDataNum();// 0x594e04f39041
	FString[] GetColKeys();// 0x594d04f39041
	int GetColCount();// 0x594c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_CapsuleProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	FString CapsuleBPPath;//[Offset: 0x50, Size: 0x10]
	FString PreviewBpPath;//[Offset: 0x60, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Dance.SolarTableReaderBase.Object
	SolarTablesData_Dance TryGetRowData(int Key, out bool HasKey);// 0x59c304f39041
	bool HasRowKey(int Key);// 0x59c204f39041
	bool HasColKey(FString Key);// 0x59c104f39041
	FString GetTableName();// 0x59c004f39041
	int GetRowKeys(out int[] OutKeys);// 0x59bf04f39041
	SolarTablesData_Dance GetRowData(int Key);// 0x59be04f39041
	int GetRowCount();// 0x59bd04f39041
	int GetDataNum();// 0x59bc04f39041
	FString[] GetColKeys();// 0x59bb04f39041
	int GetColCount();// 0x59ba04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Dance.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int LoopTime;//[Offset: 0x50, Size: 0x4]
	FString BlueprintPath;//[Offset: 0x58, Size: 0x10]
	int ShopID;//[Offset: 0x68, Size: 0x4]
	bool IfDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	FString BeginTime;//[Offset: 0x70, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Emote.SolarTableReaderBase.Object
	SolarTablesData_Emote TryGetRowData(int Key, out bool HasKey);// 0x59e104f39041
	bool HasRowKey(int Key);// 0x59e004f39041
	bool HasColKey(FString Key);// 0x59df04f39041
	FString GetTableName();// 0x59de04f39041
	int GetRowKeys(out int[] OutKeys);// 0x59dd04f39041
	SolarTablesData_Emote GetRowData(int Key);// 0x59dc04f39041
	int GetRowCount();// 0x59db04f39041
	int GetDataNum();// 0x59da04f39041
	FString[] GetColKeys();// 0x59d904f39041
	int GetColCount();// 0x59d804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Emote.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int EmoteType;//[Offset: 0x50, Size: 0x4]
	FString EmoteBlueprintPath;//[Offset: 0x58, Size: 0x10]
	FString EmoteResourcePath;//[Offset: 0x68, Size: 0x10]
	float EmoteDuration;//[Offset: 0x78, Size: 0x4]
	FString EmoteAppearSound;//[Offset: 0x80, Size: 0x10]
	FString EmoteSound;//[Offset: 0x90, Size: 0x10]
	int ShopID;//[Offset: 0xa0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_KillNotify.SolarTableReaderBase.Object
	SolarTablesData_KillNotify TryGetRowData(int Key, out bool HasKey);// 0x5b0304f39041
	bool HasRowKey(int Key);// 0x5b0204f39041
	bool HasColKey(FString Key);// 0x5b0104f39041
	FString GetTableName();// 0x5b0004f39041
	int GetRowKeys(out int[] OutKeys);// 0x5aff04f39041
	SolarTablesData_KillNotify GetRowData(int Key);// 0x5afe04f39041
	int GetRowCount();// 0x5afd04f39041
	int GetDataNum();// 0x5afc04f39041
	FString[] GetColKeys();// 0x5afb04f39041
	int GetColCount();// 0x5afa04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_KillNotify.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	FString KillNotifyPath;//[Offset: 0x50, Size: 0x10]
	FString KillNotifySpecialPath;//[Offset: 0x60, Size: 0x10]
	FString KillNotifyBackGroundPath;//[Offset: 0x70, Size: 0x10]
	FString KillNotifyBackground;//[Offset: 0x80, Size: 0x10]
	FString TextColor;//[Offset: 0x90, Size: 0x10]
	FString IconColor;//[Offset: 0xa0, Size: 0x10]
	FString Param;//[Offset: 0xb0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_MaterialProperty.SolarTableReaderBase.Object
	SolarTablesData_MaterialProperty TryGetRowData(int Key, out bool HasKey);// 0x5b8f04f39041
	bool HasRowKey(int Key);// 0x5b8e04f39041
	bool HasColKey(FString Key);// 0x5b8d04f39041
	FString GetTableName();// 0x5b8c04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b8b04f39041
	SolarTablesData_MaterialProperty GetRowData(int Key);// 0x5b8a04f39041
	int GetRowCount();// 0x5b8904f39041
	int GetDataNum();// 0x5b8804f39041
	FString[] GetColKeys();// 0x5b8704f39041
	int GetColCount();// 0x5b8604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_MaterialProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int Prize;//[Offset: 0x50, Size: 0x4]
	bool IfCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	int Level;//[Offset: 0x58, Size: 0x4]
	SolarTablesLocalText CoverName;//[Offset: 0x5c, Size: 0x4]
	int Substitution;//[Offset: 0x60, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_VehicleSkinProperty.SolarTableReaderBase.Object
	SolarTablesData_VehicleSkinProperty TryGetRowData(int Key, out bool HasKey);// 0x5ca704f39041
	bool HasRowKey(int Key);// 0x5ca604f39041
	bool HasColKey(FString Key);// 0x5ca504f39041
	FString GetTableName();// 0x5ca404f39041
	int GetRowKeys(out int[] OutKeys);// 0x5ca304f39041
	SolarTablesData_VehicleSkinProperty GetRowData(int Key);// 0x5ca204f39041
	int GetRowCount();// 0x5ca104f39041
	int GetDataNum();// 0x5ca004f39041
	FString[] GetColKeys();// 0x5c9f04f39041
	int GetColCount();// 0x5c9e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_VehicleSkinProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int VehicleSkinId;//[Offset: 0x50, Size: 0x4]
	int VehicleSkinAquiredThre;//[Offset: 0x54, Size: 0x4]
	int JumpPage;//[Offset: 0x58, Size: 0x4]
	FString KillBroadcast;//[Offset: 0x60, Size: 0x10]
	bool DisplayInVehiclery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Voice.SolarTableReaderBase.Object
	SolarTablesData_Voice TryGetRowData(int Key, out bool HasKey);// 0x5cd904f39041
	bool HasRowKey(int Key);// 0x5cd804f39041
	bool HasColKey(FString Key);// 0x5cd704f39041
	FString GetTableName();// 0x5cd604f39041
	int GetRowKeys(out int[] OutKeys);// 0x5cd504f39041
	SolarTablesData_Voice GetRowData(int Key);// 0x5cd404f39041
	int GetRowCount();// 0x5cd304f39041
	int GetDataNum();// 0x5cd204f39041
	FString[] GetColKeys();// 0x5cd104f39041
	int GetColCount();// 0x5cd004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Voice.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int Type;//[Offset: 0x50, Size: 0x4]
	int VoiceID;//[Offset: 0x54, Size: 0x4]
	int CharacterId;//[Offset: 0x58, Size: 0x4]
	bool IfBotUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool IfDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	bool IfDefaultEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponSkinProperty.SolarTableReaderBase.Object
	SolarTablesData_WeaponSkinProperty TryGetRowData(int Key, out bool HasKey);// 0x5d5b04f39041
	bool HasRowKey(int Key);// 0x5d5a04f39041
	bool HasColKey(FString Key);// 0x5d5904f39041
	FString GetTableName();// 0x5d5804f39041
	int GetRowKeys(out int[] OutKeys);// 0x5d5704f39041
	SolarTablesData_WeaponSkinProperty GetRowData(int Key);// 0x5d5604f39041
	int GetRowCount();// 0x5d5504f39041
	int GetDataNum();// 0x5d5404f39041
	FString[] GetColKeys();// 0x5d5304f39041
	int GetColCount();// 0x5d5204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponSkinProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int WeaponSkinID;//[Offset: 0x50, Size: 0x4]
	FString WeaponIcon_M;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ItemCustomType.SolarTableReaderBase.Object
	SolarTablesData_ItemCustomType TryGetRowData(int Key, out bool HasKey);// 0x5ac704f39041
	bool HasRowKey(int Key);// 0x5ac604f39041
	bool HasColKey(FString Key);// 0x5ac504f39041
	FString GetTableName();// 0x5ac404f39041
	int GetRowKeys(out int[] OutKeys);// 0x5ac304f39041
	SolarTablesData_ItemCustomType GetRowData(int Key);// 0x5ac204f39041
	int GetRowCount();// 0x5ac104f39041
	int GetDataNum();// 0x5ac004f39041
	FString[] GetColKeys();// 0x5abf04f39041
	int GetColCount();// 0x5abe04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ItemCustomType.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ItemIDs;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ItemInBattle.SolarTableReaderBase.Object
	SolarTablesData_ItemInBattle TryGetRowData(int Key, out bool HasKey);// 0x5ad104f39041
	bool HasRowKey(int Key);// 0x5ad004f39041
	bool HasColKey(FString Key);// 0x5acf04f39041
	FString GetTableName();// 0x5ace04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5acd04f39041
	SolarTablesData_ItemInBattle GetRowData(int Key);// 0x5acc04f39041
	int GetRowCount();// 0x5acb04f39041
	int GetDataNum();// 0x5aca04f39041
	FString[] GetColKeys();// 0x5ac904f39041
	int GetColCount();// 0x5ac804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ItemInBattle.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ArmorProperty.SolarTableReaderBase.Object
	SolarTablesData_ArmorProperty TryGetRowData(int Key, out bool HasKey);// 0x58d304f39041
	bool HasRowKey(int Key);// 0x58d204f39041
	bool HasColKey(FString Key);// 0x58d104f39041
	FString GetTableName();// 0x58d004f39041
	int GetRowKeys(out int[] OutKeys);// 0x58cf04f39041
	SolarTablesData_ArmorProperty GetRowData(int Key);// 0x58ce04f39041
	int GetRowCount();// 0x58cd04f39041
	int GetDataNum();// 0x58cc04f39041
	FString[] GetColKeys();// 0x58cb04f39041
	int GetColCount();// 0x58ca04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ArmorProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxValue;//[Offset: 0x74, Size: 0x4]
	float RecoverySpeed;//[Offset: 0x78, Size: 0x4]
	float EnergyCost;//[Offset: 0x7c, Size: 0x4]
	float MaterialCost;//[Offset: 0x80, Size: 0x4]
	float MinMaterialCost;//[Offset: 0x84, Size: 0x4]
	int ArmorWorth;//[Offset: 0x88, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Chest.SolarTableReaderBase.Object
	SolarTablesData_Chest TryGetRowData(int Key, out bool HasKey);// 0x598704f39041
	bool HasRowKey(int Key);// 0x598604f39041
	bool HasColKey(FString Key);// 0x598504f39041
	FString GetTableName();// 0x598404f39041
	int GetRowKeys(out int[] OutKeys);// 0x598304f39041
	SolarTablesData_Chest GetRowData(int Key);// 0x598204f39041
	int GetRowCount();// 0x598104f39041
	int GetDataNum();// 0x598004f39041
	FString[] GetColKeys();// 0x597f04f39041
	int GetColCount();// 0x597e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Chest.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int openType;//[Offset: 0x74, Size: 0x4]
	int CostQuantity;//[Offset: 0x78, Size: 0x4]
	int CostType;//[Offset: 0x7c, Size: 0x4]
	int OpenTime;//[Offset: 0x80, Size: 0x4]
	int Drop;//[Offset: 0x84, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Collect.SolarTableReaderBase.Object
	SolarTablesData_Collect TryGetRowData(int Key, out bool HasKey);// 0x59b904f39041
	bool HasRowKey(int Key);// 0x59b804f39041
	bool HasColKey(FString Key);// 0x59b704f39041
	FString GetTableName();// 0x59b604f39041
	int GetRowKeys(out int[] OutKeys);// 0x59b504f39041
	SolarTablesData_Collect GetRowData(int Key);// 0x59b404f39041
	int GetRowCount();// 0x59b304f39041
	int GetDataNum();// 0x59b204f39041
	FString[] GetColKeys();// 0x59b104f39041
	int GetColCount();// 0x59b004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Collect.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int lobbyCollectId;//[Offset: 0x74, Size: 0x4]
	int Level;//[Offset: 0x78, Size: 0x4]
	int EventId;//[Offset: 0x7c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EnergyProperty.SolarTableReaderBase.Object
	SolarTablesData_EnergyProperty TryGetRowData(int Key, out bool HasKey);// 0x59eb04f39041
	bool HasRowKey(int Key);// 0x59ea04f39041
	bool HasColKey(FString Key);// 0x59e904f39041
	FString GetTableName();// 0x59e804f39041
	int GetRowKeys(out int[] OutKeys);// 0x59e704f39041
	SolarTablesData_EnergyProperty GetRowData(int Key);// 0x59e604f39041
	int GetRowCount();// 0x59e504f39041
	int GetDataNum();// 0x59e404f39041
	FString[] GetColKeys();// 0x59e304f39041
	int GetColCount();// 0x59e204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EnergyProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float AddedEnergyMax;//[Offset: 0x74, Size: 0x4]
	int EnergyModuleWorth;//[Offset: 0x78, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ExtraEnergyProperty.SolarTableReaderBase.Object
	SolarTablesData_ExtraEnergyProperty TryGetRowData(int Key, out bool HasKey);// 0x5a3104f39041
	bool HasRowKey(int Key);// 0x5a3004f39041
	bool HasColKey(FString Key);// 0x5a2f04f39041
	FString GetTableName();// 0x5a2e04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a2d04f39041
	SolarTablesData_ExtraEnergyProperty GetRowData(int Key);// 0x5a2c04f39041
	int GetRowCount();// 0x5a2b04f39041
	int GetDataNum();// 0x5a2a04f39041
	FString[] GetColKeys();// 0x5a2904f39041
	int GetColCount();// 0x5a2804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ExtraEnergyProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int QualityColor;//[Offset: 0x74, Size: 0x4]
	float ExtraEnergyMax;//[Offset: 0x78, Size: 0x4]
	float ExtraEnergyCharge;//[Offset: 0x7c, Size: 0x4]
	float ChargeCD;//[Offset: 0x80, Size: 0x4]
	int ExtraEnergyWorth;//[Offset: 0x84, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0x88, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x8c, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0x90, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0x94, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0x98, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0x9c, Size: 0x4]
	FString Sketch;//[Offset: 0xa0, Size: 0x10]
	int SketchLevel;//[Offset: 0xb0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GunProperty.SolarTableReaderBase.Object
	SolarTablesData_GunProperty TryGetRowData(int Key, out bool HasKey);// 0x5a8104f39041
	bool HasRowKey(int Key);// 0x5a8004f39041
	bool HasColKey(FString Key);// 0x5a7f04f39041
	FString GetTableName();// 0x5a7e04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a7d04f39041
	SolarTablesData_GunProperty GetRowData(int Key);// 0x5a7c04f39041
	int GetRowCount();// 0x5a7b04f39041
	int GetDataNum();// 0x5a7a04f39041
	FString[] GetColKeys();// 0x5a7904f39041
	int GetColCount();// 0x5a7804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GunProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int weaponid;//[Offset: 0x74, Size: 0x4]
	bool Disused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	FString BigIcon;//[Offset: 0x80, Size: 0x10]
	int WeaponLv;//[Offset: 0x90, Size: 0x4]
	bool UseWeaponAccessory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	int WeaponAccessory1;//[Offset: 0x98, Size: 0x4]
	int WeaponAccessory2;//[Offset: 0x9c, Size: 0x4]
	int WeaponAccessory3;//[Offset: 0xa0, Size: 0x4]
	int WeaponAccessory4;//[Offset: 0xa4, Size: 0x4]
	int WeaponAccessory5;//[Offset: 0xa8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ItemBehavior.SolarTableReaderBase.Object
	SolarTablesData_ItemBehavior TryGetRowData(int Key, out bool HasKey);// 0x5abd04f39041
	bool HasRowKey(int Key);// 0x5abc04f39041
	bool HasColKey(FString Key);// 0x5abb04f39041
	FString GetTableName();// 0x5aba04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5ab904f39041
	SolarTablesData_ItemBehavior GetRowData(int Key);// 0x5ab804f39041
	int GetRowCount();// 0x5ab704f39041
	int GetDataNum();// 0x5ab604f39041
	FString[] GetColKeys();// 0x5ab504f39041
	int GetColCount();// 0x5ab404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ItemBehavior.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int BehaviorExpID;//[Offset: 0x74, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ItemWeaponParts.SolarTableReaderBase.Object
	SolarTablesData_ItemWeaponParts TryGetRowData(int Key, out bool HasKey);// 0x5aef04f39041
	bool HasRowKey(int Key);// 0x5aee04f39041
	bool HasColKey(FString Key);// 0x5aed04f39041
	FString GetTableName();// 0x5aec04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5aeb04f39041
	SolarTablesData_ItemWeaponParts GetRowData(int Key);// 0x5aea04f39041
	int GetRowCount();// 0x5ae904f39041
	int GetDataNum();// 0x5ae804f39041
	FString[] GetColKeys();// 0x5ae704f39041
	int GetColCount();// 0x5ae604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ItemWeaponParts.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int PartsType;//[Offset: 0x74, Size: 0x4]
	int Level;//[Offset: 0x78, Size: 0x4]
	FString PreviewIcon;//[Offset: 0x80, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_JetPackModuleProperty.SolarTableReaderBase.Object
	SolarTablesData_JetPackModuleProperty TryGetRowData(int Key, out bool HasKey);// 0x5af904f39041
	bool HasRowKey(int Key);// 0x5af804f39041
	bool HasColKey(FString Key);// 0x5af704f39041
	FString GetTableName();// 0x5af604f39041
	int GetRowKeys(out int[] OutKeys);// 0x5af504f39041
	SolarTablesData_JetPackModuleProperty GetRowData(int Key);// 0x5af404f39041
	int GetRowCount();// 0x5af304f39041
	int GetDataNum();// 0x5af204f39041
	FString[] GetColKeys();// 0x5af104f39041
	int GetColCount();// 0x5af004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_JetPackModuleProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int VerticalDashSpeedTimes;//[Offset: 0x74, Size: 0x4]
	int HorizontalDashSpeedTimes;//[Offset: 0x78, Size: 0x4]
	float VerticalDashSpeedScale;//[Offset: 0x7c, Size: 0x4]
	float HorizontalDashSpeedScale;//[Offset: 0x80, Size: 0x4]
	float VerticalDashCoolDownScale;//[Offset: 0x84, Size: 0x4]
	float HorizontalDashCoolDownScale;//[Offset: 0x88, Size: 0x4]
	float VerticalDashEnergyScale;//[Offset: 0x8c, Size: 0x4]
	float HorizontalDashEnergyScale;//[Offset: 0x90, Size: 0x4]
	float VerticalChargingScale;//[Offset: 0x94, Size: 0x4]
	float HorizontalChargingScale;//[Offset: 0x98, Size: 0x4]
	int JetPackModuleWorth;//[Offset: 0x9c, Size: 0x4]
	FString Sketch;//[Offset: 0xa0, Size: 0x10]
	int SketchLevel;//[Offset: 0xb0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ShieldProperty.SolarTableReaderBase.Object
	SolarTablesData_ShieldProperty TryGetRowData(int Key, out bool HasKey);// 0x5c5704f39041
	bool HasRowKey(int Key);// 0x5c5604f39041
	bool HasColKey(FString Key);// 0x5c5504f39041
	FString GetTableName();// 0x5c5404f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c5304f39041
	SolarTablesData_ShieldProperty GetRowData(int Key);// 0x5c5204f39041
	int GetRowCount();// 0x5c5104f39041
	int GetDataNum();// 0x5c5004f39041
	FString[] GetColKeys();// 0x5c4f04f39041
	int GetColCount();// 0x5c4e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ShieldProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxValue;//[Offset: 0x74, Size: 0x4]
	float RecoverySpeed;//[Offset: 0x78, Size: 0x4]
	float EnergyCost;//[Offset: 0x7c, Size: 0x4]
	int CoolDownTime;//[Offset: 0x80, Size: 0x4]
	float RecoveryDuration;//[Offset: 0x84, Size: 0x4]
	float RecoveryDurationB;//[Offset: 0x88, Size: 0x4]
	float RecoveryAmount;//[Offset: 0x8c, Size: 0x4]
	float EnergyConsumption;//[Offset: 0x90, Size: 0x4]
	int ShieldWorth;//[Offset: 0x94, Size: 0x4]
	FString Sketch;//[Offset: 0x98, Size: 0x10]
	int SketchLevel;//[Offset: 0xa8, Size: 0x4]
	int QualityColor;//[Offset: 0xac, Size: 0x4]
	int AutoRecharge;//[Offset: 0xb0, Size: 0x4]
	float LeaveCombatTime;//[Offset: 0xb4, Size: 0x4]
	float AutoRechargeInterval;//[Offset: 0xb8, Size: 0x4]
	float AutoRechargeValue;//[Offset: 0xbc, Size: 0x4]
	int NextUpgradeCost;//[Offset: 0xc0, Size: 0x4]
	int NextUpgradeItemID;//[Offset: 0xc4, Size: 0x4]
	int UpgradeItemCost;//[Offset: 0xc8, Size: 0x4]
	float UpgradeTimeCost;//[Offset: 0xcc, Size: 0x4]
	float ShieldRechargeDelayTime;//[Offset: 0xd0, Size: 0x4]
	float ShieldRecoveryTime;//[Offset: 0xd4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ItemQuality.SolarTableReaderBase.Object
	SolarTablesData_ItemQuality TryGetRowData(int Key, out bool HasKey);// 0x5adb04f39041
	bool HasRowKey(int Key);// 0x5ada04f39041
	bool HasColKey(FString Key);// 0x5ad904f39041
	FString GetTableName();// 0x5ad804f39041
	int GetRowKeys(out int[] OutKeys);// 0x5ad704f39041
	SolarTablesData_ItemQuality GetRowData(int Key);// 0x5ad604f39041
	int GetRowCount();// 0x5ad504f39041
	int GetDataNum();// 0x5ad404f39041
	FString[] GetColKeys();// 0x5ad304f39041
	int GetColCount();// 0x5ad204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ItemQuality.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float[] Color;//[Offset: 0x10, Size: 0x10]
	float[] HUDColor;//[Offset: 0x20, Size: 0x10]
	float[] OutsideColor;//[Offset: 0x30, Size: 0x10]
	float[] InsideColor;//[Offset: 0x40, Size: 0x10]
	float[] HighQualityColor;//[Offset: 0x50, Size: 0x10]
	float[] LowQualityColor;//[Offset: 0x60, Size: 0x10]
	float[] HUDBGColor;//[Offset: 0x70, Size: 0x10]
	float[] HUDDecorateColor;//[Offset: 0x80, Size: 0x10]
	FString Qualitypic;//[Offset: 0x90, Size: 0x10]
	FString QualityColor;//[Offset: 0xa0, Size: 0x10]
	FString Qualitystr;//[Offset: 0xb0, Size: 0x10]
	FString QualityBG;//[Offset: 0xc0, Size: 0x10]
	FString QualityBG2;//[Offset: 0xd0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ItemSound.SolarTableReaderBase.Object
	SolarTablesData_ItemSound TryGetRowData(int Key, out bool HasKey);// 0x5ae504f39041
	bool HasRowKey(int Key);// 0x5ae404f39041
	bool HasColKey(FString Key);// 0x5ae304f39041
	FString GetTableName();// 0x5ae204f39041
	int GetRowKeys(out int[] OutKeys);// 0x5ae104f39041
	SolarTablesData_ItemSound GetRowData(int Key);// 0x5ae004f39041
	int GetRowCount();// 0x5adf04f39041
	int GetDataNum();// 0x5ade04f39041
	FString[] GetColKeys();// 0x5add04f39041
	int GetColCount();// 0x5adc04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ItemSound.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString PickupSound;//[Offset: 0x10, Size: 0x10]
	FString EquippedSound;//[Offset: 0x20, Size: 0x10]
	FString PassiveSound;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_LobbyAutoDownload.SolarTableReaderBase.Object
	SolarTablesData_LobbyAutoDownload TryGetRowData(int Key, out bool HasKey);// 0x5b1704f39041
	bool HasRowKey(int Key);// 0x5b1604f39041
	bool HasColKey(FString Key);// 0x5b1504f39041
	FString GetTableName();// 0x5b1404f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b1304f39041
	SolarTablesData_LobbyAutoDownload GetRowData(int Key);// 0x5b1204f39041
	int GetRowCount();// 0x5b1104f39041
	int GetDataNum();// 0x5b1004f39041
	FString[] GetColKeys();// 0x5b0f04f39041
	int GetColCount();// 0x5b0e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_LobbyAutoDownload.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ChunkID;//[Offset: 0x10, Size: 0x4]
	int ChunkName;//[Offset: 0x14, Size: 0x4]
	bool IncludeMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool IncludeOptional;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_LanguageSwitcher.SolarTableReaderBase.Object
	SolarTablesData_LanguageSwitcher TryGetRowData(FString Key, out bool HasKey);// 0x5b0d04f39041
	bool HasRowKey(FString Key);// 0x5b0c04f39041
	bool HasColKey(FString Key);// 0x5b0b04f39041
	FString GetTableName();// 0x5b0a04f39041
	int GetRowKeys(out FString[] OutKeys);// 0x5b0904f39041
	SolarTablesData_LanguageSwitcher GetRowData(FString Key);// 0x5b0804f39041
	int GetRowCount();// 0x5b0704f39041
	int GetDataNum();// 0x5b0604f39041
	FString[] GetColKeys();// 0x5b0504f39041
	int GetColCount();// 0x5b0404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_LanguageSwitcher.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	FString ButtonText;//[Offset: 0x20, Size: 0x10]
	bool IfOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int LanguageIndex;//[Offset: 0x34, Size: 0x4]
	FString MarqueeDirection;//[Offset: 0x38, Size: 0x10]
	FString TextAbbr;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization.SolarTableReaderBase.Object
	SolarTablesData_Localization TryGetRowData(int Key, out bool HasKey);// 0x5b2104f39041
	bool HasRowKey(int Key);// 0x5b2004f39041
	bool HasColKey(FString Key);// 0x5b1f04f39041
	FString GetTableName();// 0x5b1e04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b1d04f39041
	SolarTablesData_Localization GetRowData(int Key);// 0x5b1c04f39041
	int GetRowCount();// 0x5b1b04f39041
	int GetDataNum();// 0x5b1a04f39041
	FString[] GetColKeys();// 0x5b1904f39041
	int GetColCount();// 0x5b1804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_BattleUI.SolarTableReaderBase.Object
	SolarTablesData_Localization_BattleUI TryGetRowData(int Key, out bool HasKey);// 0x5b2b04f39041
	bool HasRowKey(int Key);// 0x5b2a04f39041
	bool HasColKey(FString Key);// 0x5b2904f39041
	FString GetTableName();// 0x5b2804f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b2704f39041
	SolarTablesData_Localization_BattleUI GetRowData(int Key);// 0x5b2604f39041
	int GetRowCount();// 0x5b2504f39041
	int GetDataNum();// 0x5b2404f39041
	FString[] GetColKeys();// 0x5b2304f39041
	int GetColCount();// 0x5b2204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_BattleUI.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_EventSystem.SolarTableReaderBase.Object
	SolarTablesData_Localization_EventSystem TryGetRowData(int Key, out bool HasKey);// 0x5b3504f39041
	bool HasRowKey(int Key);// 0x5b3404f39041
	bool HasColKey(FString Key);// 0x5b3304f39041
	FString GetTableName();// 0x5b3204f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b3104f39041
	SolarTablesData_Localization_EventSystem GetRowData(int Key);// 0x5b3004f39041
	int GetRowCount();// 0x5b2f04f39041
	int GetDataNum();// 0x5b2e04f39041
	FString[] GetColKeys();// 0x5b2d04f39041
	int GetColCount();// 0x5b2c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_EventSystem.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_General.SolarTableReaderBase.Object
	SolarTablesData_Localization_General TryGetRowData(int Key, out bool HasKey);// 0x5b3f04f39041
	bool HasRowKey(int Key);// 0x5b3e04f39041
	bool HasColKey(FString Key);// 0x5b3d04f39041
	FString GetTableName();// 0x5b3c04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b3b04f39041
	SolarTablesData_Localization_General GetRowData(int Key);// 0x5b3a04f39041
	int GetRowCount();// 0x5b3904f39041
	int GetDataNum();// 0x5b3804f39041
	FString[] GetColKeys();// 0x5b3704f39041
	int GetColCount();// 0x5b3604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_General.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_Heroes.SolarTableReaderBase.Object
	SolarTablesData_Localization_Heroes TryGetRowData(int Key, out bool HasKey);// 0x5b4904f39041
	bool HasRowKey(int Key);// 0x5b4804f39041
	bool HasColKey(FString Key);// 0x5b4704f39041
	FString GetTableName();// 0x5b4604f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b4504f39041
	SolarTablesData_Localization_Heroes GetRowData(int Key);// 0x5b4404f39041
	int GetRowCount();// 0x5b4304f39041
	int GetDataNum();// 0x5b4204f39041
	FString[] GetColKeys();// 0x5b4104f39041
	int GetColCount();// 0x5b4004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_Heroes.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_Item.SolarTableReaderBase.Object
	SolarTablesData_Localization_Item TryGetRowData(int Key, out bool HasKey);// 0x5b5304f39041
	bool HasRowKey(int Key);// 0x5b5204f39041
	bool HasColKey(FString Key);// 0x5b5104f39041
	FString GetTableName();// 0x5b5004f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b4f04f39041
	SolarTablesData_Localization_Item GetRowData(int Key);// 0x5b4e04f39041
	int GetRowCount();// 0x5b4d04f39041
	int GetDataNum();// 0x5b4c04f39041
	FString[] GetColKeys();// 0x5b4b04f39041
	int GetColCount();// 0x5b4a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_Item.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_Tournament.SolarTableReaderBase.Object
	SolarTablesData_Localization_Tournament TryGetRowData(int Key, out bool HasKey);// 0x5b5d04f39041
	bool HasRowKey(int Key);// 0x5b5c04f39041
	bool HasColKey(FString Key);// 0x5b5b04f39041
	FString GetTableName();// 0x5b5a04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b5904f39041
	SolarTablesData_Localization_Tournament GetRowData(int Key);// 0x5b5804f39041
	int GetRowCount();// 0x5b5704f39041
	int GetDataNum();// 0x5b5604f39041
	FString[] GetColKeys();// 0x5b5504f39041
	int GetColCount();// 0x5b5404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_Tournament.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_Uncategorized.SolarTableReaderBase.Object
	SolarTablesData_Localization_Uncategorized TryGetRowData(int Key, out bool HasKey);// 0x5b6704f39041
	bool HasRowKey(int Key);// 0x5b6604f39041
	bool HasColKey(FString Key);// 0x5b6504f39041
	FString GetTableName();// 0x5b6404f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b6304f39041
	SolarTablesData_Localization_Uncategorized GetRowData(int Key);// 0x5b6204f39041
	int GetRowCount();// 0x5b6104f39041
	int GetDataNum();// 0x5b6004f39041
	FString[] GetColKeys();// 0x5b5f04f39041
	int GetColCount();// 0x5b5e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_Uncategorized.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GameMap.SolarTableReaderBase.Object
	SolarTablesData_GameMap TryGetRowData(int Key, out bool HasKey);// 0x5a3b04f39041
	bool HasRowKey(int Key);// 0x5a3a04f39041
	bool HasColKey(FString Key);// 0x5a3904f39041
	FString GetTableName();// 0x5a3804f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a3704f39041
	SolarTablesData_GameMap GetRowData(int Key);// 0x5a3604f39041
	int GetRowCount();// 0x5a3504f39041
	int GetDataNum();// 0x5a3404f39041
	FString[] GetColKeys();// 0x5a3304f39041
	int GetColCount();// 0x5a3204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GameMap.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString MapName;//[Offset: 0x18, Size: 0x10]
	FString ResPath;//[Offset: 0x28, Size: 0x10]
	int MapImage;//[Offset: 0x38, Size: 0x4]
	float[] MapImageSize;//[Offset: 0x40, Size: 0x10]
	float[] MapTopLeftCoord;//[Offset: 0x50, Size: 0x10]
	float[] MapRightBottomCoord;//[Offset: 0x60, Size: 0x10]
	int[] LocationIcon;//[Offset: 0x70, Size: 0x10]
	FString[] ItemSubLevels;//[Offset: 0x80, Size: 0x10]
	float HorizonLineZ;//[Offset: 0x90, Size: 0x4]
	float TopZ;//[Offset: 0x94, Size: 0x4]
	float BottomZ;//[Offset: 0x98, Size: 0x4]
	float AverageZ;//[Offset: 0x9c, Size: 0x4]
	float InitFogZ;//[Offset: 0xa0, Size: 0x4]
	float TargetFogZ;//[Offset: 0xa4, Size: 0x4]
	float MapFOV;//[Offset: 0xa8, Size: 0x4]
	int Speed1;//[Offset: 0xac, Size: 0x4]
	int Speed2;//[Offset: 0xb0, Size: 0x4]
	float MapFOV1;//[Offset: 0xb4, Size: 0x4]
	float MapFOV2;//[Offset: 0xb8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_MapMarkIcon.SolarTableReaderBase.Object
	SolarTablesData_MapMarkIcon TryGetRowData(int Key, out bool HasKey);// 0x5b7b04f39041
	bool HasRowKey(int Key);// 0x5b7a04f39041
	bool HasColKey(FString Key);// 0x5b7904f39041
	FString GetTableName();// 0x5b7804f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b7704f39041
	SolarTablesData_MapMarkIcon GetRowData(int Key);// 0x5b7604f39041
	int GetRowCount();// 0x5b7504f39041
	int GetDataNum();// 0x5b7404f39041
	FString[] GetColKeys();// 0x5b7304f39041
	int GetColCount();// 0x5b7204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_MapMarkIcon.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString AtlasPath;//[Offset: 0x10, Size: 0x10]
	float[] IconSize;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_MatchRule.SolarTableReaderBase.Object
	SolarTablesData_MatchRule TryGetRowData(int Key, out bool HasKey);// 0x5b8504f39041
	bool HasRowKey(int Key);// 0x5b8404f39041
	bool HasColKey(FString Key);// 0x5b8304f39041
	FString GetTableName();// 0x5b8204f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b8104f39041
	SolarTablesData_MatchRule GetRowData(int Key);// 0x5b8004f39041
	int GetRowCount();// 0x5b7f04f39041
	int GetDataNum();// 0x5b7e04f39041
	FString[] GetColKeys();// 0x5b7d04f39041
	int GetColCount();// 0x5b7c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_MatchRule.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MatchType;//[Offset: 0x10, Size: 0x4]
	int MinPlayer;//[Offset: 0x14, Size: 0x4]
	int MaxPlayer;//[Offset: 0x18, Size: 0x4]
	int NumMode;//[Offset: 0x1c, Size: 0x4]
	int StopMatchTime;//[Offset: 0x20, Size: 0x4]
	int[] PlayerStructure;//[Offset: 0x28, Size: 0x10]
	int MinGroup;//[Offset: 0x38, Size: 0x4]
	int EloSettleType;//[Offset: 0x3c, Size: 0x4]
	int RankSettleType;//[Offset: 0x40, Size: 0x4]
	int groupid;//[Offset: 0x44, Size: 0x4]
	int RankGroupNameID;//[Offset: 0x48, Size: 0x4]
	bool MatchSameBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int KeepMatchTimeID;//[Offset: 0x50, Size: 0x4]
	int OBNum;//[Offset: 0x54, Size: 0x4]
	bool MaxPlayerStopMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int StatisticsType;//[Offset: 0x5c, Size: 0x4]
	int HistoryModeType;//[Offset: 0x60, Size: 0x4]
	bool HeroCombatAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	int RestartMatchTime;//[Offset: 0x68, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_RankMatch.SolarTableReaderBase.Object
	SolarTablesData_RankMatch TryGetRowData(int Key, out bool HasKey);// 0x5c3904f39041
	bool HasRowKey(int Key);// 0x5c3804f39041
	bool HasColKey(FString Key);// 0x5c3704f39041
	FString GetTableName();// 0x5c3604f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c3504f39041
	SolarTablesData_RankMatch GetRowData(int Key);// 0x5c3404f39041
	int GetRowCount();// 0x5c3304f39041
	int GetDataNum();// 0x5c3204f39041
	FString[] GetColKeys();// 0x5c3104f39041
	int GetColCount();// 0x5c3004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_RankMatch.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MatchType;//[Offset: 0x10, Size: 0x4]
	int NumOfAI;//[Offset: 0x14, Size: 0x4]
	int AiLevel;//[Offset: 0x18, Size: 0x4]
	FString AILevelConfig;//[Offset: 0x20, Size: 0x10]
	int AITeamPresetsID;//[Offset: 0x30, Size: 0x4]
	bool EnableTeamManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int[] MLApplication;//[Offset: 0x38, Size: 0x10]
	int MLApply;//[Offset: 0x48, Size: 0x4]
	int MaxWait;//[Offset: 0x4c, Size: 0x4]
	int StopMatchTime;//[Offset: 0x50, Size: 0x4]
	bool HasAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool AIAccompany;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	int AIAccompanyTimeline;//[Offset: 0x58, Size: 0x4]
	int MinPlayer;//[Offset: 0x5c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_NameCardBackground.SolarTableReaderBase.Object
	SolarTablesData_NameCardBackground TryGetRowData(int Key, out bool HasKey);// 0x5b9904f39041
	bool HasRowKey(int Key);// 0x5b9804f39041
	bool HasColKey(FString Key);// 0x5b9704f39041
	FString GetTableName();// 0x5b9604f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b9504f39041
	SolarTablesData_NameCardBackground GetRowData(int Key);// 0x5b9404f39041
	int GetRowCount();// 0x5b9304f39041
	int GetDataNum();// 0x5b9204f39041
	FString[] GetColKeys();// 0x5b9104f39041
	int GetColCount();// 0x5b9004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_NameCardBackground.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	int ShopID;//[Offset: 0x18, Size: 0x4]
	int Exclusive;//[Offset: 0x1c, Size: 0x4]
	int IsAIEquiped;//[Offset: 0x20, Size: 0x4]
	FString BackgroundPath;//[Offset: 0x28, Size: 0x10]
	FString BackgroundTexturePath;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_NameCardPose.SolarTableReaderBase.Object
	SolarTablesData_NameCardPose TryGetRowData(int Key, out bool HasKey);// 0x5ba304f39041
	bool HasRowKey(int Key);// 0x5ba204f39041
	bool HasColKey(FString Key);// 0x5ba104f39041
	FString GetTableName();// 0x5ba004f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b9f04f39041
	SolarTablesData_NameCardPose GetRowData(int Key);// 0x5b9e04f39041
	int GetRowCount();// 0x5b9d04f39041
	int GetDataNum();// 0x5b9c04f39041
	FString[] GetColKeys();// 0x5b9b04f39041
	int GetColCount();// 0x5b9a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_NameCardPose.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	int ShopID;//[Offset: 0x18, Size: 0x4]
	int Exclusive;//[Offset: 0x1c, Size: 0x4]
	int IsAIEquiped;//[Offset: 0x20, Size: 0x4]
	FString PosePath;//[Offset: 0x28, Size: 0x10]
	FString PosePath_M;//[Offset: 0x38, Size: 0x10]
	FString PosePath_F;//[Offset: 0x48, Size: 0x10]
	FString PosePath_MCP;//[Offset: 0x58, Size: 0x10]
	FString PosePath_FFM;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ObGift.SolarTableReaderBase.Object
	SolarTablesData_ObGift TryGetRowData(int Key, out bool HasKey);// 0x5bad04f39041
	bool HasRowKey(int Key);// 0x5bac04f39041
	bool HasColKey(FString Key);// 0x5bab04f39041
	FString GetTableName();// 0x5baa04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5ba904f39041
	SolarTablesData_ObGift GetRowData(int Key);// 0x5ba804f39041
	int GetRowCount();// 0x5ba704f39041
	int GetDataNum();// 0x5ba604f39041
	FString[] GetColKeys();// 0x5ba504f39041
	int GetColCount();// 0x5ba404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ObGift.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int gift_type;//[Offset: 0x10, Size: 0x4]
	FString item_name;//[Offset: 0x18, Size: 0x10]
	FString item_back_res;//[Offset: 0x28, Size: 0x10]
	FString item_text_res;//[Offset: 0x38, Size: 0x10]
	int gift_hot_num;//[Offset: 0x48, Size: 0x4]
	int currency_type;//[Offset: 0x4c, Size: 0x4]
	int item_price;//[Offset: 0x50, Size: 0x4]
	float item_back;//[Offset: 0x54, Size: 0x4]
	int item_show_time;//[Offset: 0x58, Size: 0x4]
	int item_id;//[Offset: 0x5c, Size: 0x4]
	int small_time;//[Offset: 0x60, Size: 0x4]
	int interact_num;//[Offset: 0x64, Size: 0x4]
	int CD;//[Offset: 0x68, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_OBSubtitle_Action2Feature.SolarTableReaderBase.Object
	SolarTablesData_OBSubtitle_Action2Feature TryGetRowData(int Key, out bool HasKey);// 0x5bb704f39041
	bool HasRowKey(int Key);// 0x5bb604f39041
	bool HasColKey(FString Key);// 0x5bb504f39041
	FString GetTableName();// 0x5bb404f39041
	int GetRowKeys(out int[] OutKeys);// 0x5bb304f39041
	SolarTablesData_OBSubtitle_Action2Feature GetRowData(int Key);// 0x5bb204f39041
	int GetRowCount();// 0x5bb104f39041
	int GetDataNum();// 0x5bb004f39041
	FString[] GetColKeys();// 0x5baf04f39041
	int GetColCount();// 0x5bae04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_OBSubtitle_Action2Feature.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString ActionName;//[Offset: 0x10, Size: 0x10]
	int Priority;//[Offset: 0x20, Size: 0x4]
	int DefualtEmotion;//[Offset: 0x24, Size: 0x4]
	int MaxSuccessiveCount;//[Offset: 0x28, Size: 0x4]
	int[] FeatureList;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_OBSubtitle_Feature2Emotion.SolarTableReaderBase.Object
	SolarTablesData_OBSubtitle_Feature2Emotion TryGetRowData(int Key, out bool HasKey);// 0x5bcb04f39041
	bool HasRowKey(int Key);// 0x5bca04f39041
	bool HasColKey(FString Key);// 0x5bc904f39041
	FString GetTableName();// 0x5bc804f39041
	int GetRowKeys(out int[] OutKeys);// 0x5bc704f39041
	SolarTablesData_OBSubtitle_Feature2Emotion GetRowData(int Key);// 0x5bc604f39041
	int GetRowCount();// 0x5bc504f39041
	int GetDataNum();// 0x5bc404f39041
	FString[] GetColKeys();// 0x5bc304f39041
	int GetColCount();// 0x5bc204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_OBSubtitle_Feature2Emotion.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString FeatureName;//[Offset: 0x10, Size: 0x10]
	int[] EmotionList;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_OBSubtitle_Emotion2Pattern.SolarTableReaderBase.Object
	SolarTablesData_OBSubtitle_Emotion2Pattern TryGetRowData(int Key, out bool HasKey);// 0x5bc104f39041
	bool HasRowKey(int Key);// 0x5bc004f39041
	bool HasColKey(FString Key);// 0x5bbf04f39041
	FString GetTableName();// 0x5bbe04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5bbd04f39041
	SolarTablesData_OBSubtitle_Emotion2Pattern GetRowData(int Key);// 0x5bbc04f39041
	int GetRowCount();// 0x5bbb04f39041
	int GetDataNum();// 0x5bba04f39041
	FString[] GetColKeys();// 0x5bb904f39041
	int GetColCount();// 0x5bb804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_OBSubtitle_Emotion2Pattern.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int EmotionLevel;//[Offset: 0x10, Size: 0x4]
	int[] PatternList;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_OBSubtitle_Pattern2Subtitle.SolarTableReaderBase.Object
	SolarTablesData_OBSubtitle_Pattern2Subtitle TryGetRowData(int Key, out bool HasKey);// 0x5bd504f39041
	bool HasRowKey(int Key);// 0x5bd404f39041
	bool HasColKey(FString Key);// 0x5bd304f39041
	FString GetTableName();// 0x5bd204f39041
	int GetRowKeys(out int[] OutKeys);// 0x5bd104f39041
	SolarTablesData_OBSubtitle_Pattern2Subtitle GetRowData(int Key);// 0x5bd004f39041
	int GetRowCount();// 0x5bcf04f39041
	int GetDataNum();// 0x5bce04f39041
	FString[] GetColKeys();// 0x5bcd04f39041
	int GetColCount();// 0x5bcc04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_OBSubtitle_Pattern2Subtitle.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText[] SubTitleList;//[Offset: 0x10, Size: 0x10]
	int[] ENLengthList;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Outcome.SolarTableReaderBase.Object
	SolarTablesData_Outcome TryGetRowData(int Key, out bool HasKey);// 0x5bdf04f39041
	bool HasRowKey(int Key);// 0x5bde04f39041
	bool HasColKey(FString Key);// 0x5bdd04f39041
	FString GetTableName();// 0x5bdc04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5bdb04f39041
	SolarTablesData_Outcome GetRowData(int Key);// 0x5bda04f39041
	int GetRowCount();// 0x5bd904f39041
	int GetDataNum();// 0x5bd804f39041
	FString[] GetColKeys();// 0x5bd704f39041
	int GetColCount();// 0x5bd604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Outcome.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int OutcomeType;//[Offset: 0x10, Size: 0x4]
	int MaxTimes;//[Offset: 0x14, Size: 0x4]
	int MinTimes;//[Offset: 0x18, Size: 0x4]
	int[] Contents;//[Offset: 0x20, Size: 0x10]
	int[] LimitId;//[Offset: 0x30, Size: 0x10]
	int[] LimitIdMax;//[Offset: 0x40, Size: 0x10]
	int[] LimitIdMin;//[Offset: 0x50, Size: 0x10]
	FString Refresh;//[Offset: 0x60, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_OutcomeContent.SolarTableReaderBase.Object
	SolarTablesData_OutcomeContent TryGetRowData(int Key, out bool HasKey);// 0x5be904f39041
	bool HasRowKey(int Key);// 0x5be804f39041
	bool HasColKey(FString Key);// 0x5be704f39041
	FString GetTableName();// 0x5be604f39041
	int GetRowKeys(out int[] OutKeys);// 0x5be504f39041
	SolarTablesData_OutcomeContent GetRowData(int Key);// 0x5be404f39041
	int GetRowCount();// 0x5be304f39041
	int GetDataNum();// 0x5be204f39041
	FString[] GetColKeys();// 0x5be104f39041
	int GetColCount();// 0x5be004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_OutcomeContent.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	int Weight;//[Offset: 0x14, Size: 0x4]
	int[] RandomNum;//[Offset: 0x18, Size: 0x10]
	int MaxTimes;//[Offset: 0x28, Size: 0x4]
	int MinTimes;//[Offset: 0x2c, Size: 0x4]
	int RelatedContentID;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_PickupPriorityItem.SolarTableReaderBase.Object
	SolarTablesData_PickupPriorityItem TryGetRowData(int Key, out bool HasKey);// 0x5bfd04f39041
	bool HasRowKey(int Key);// 0x5bfc04f39041
	bool HasColKey(FString Key);// 0x5bfb04f39041
	FString GetTableName();// 0x5bfa04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5bf904f39041
	SolarTablesData_PickupPriorityItem GetRowData(int Key);// 0x5bf804f39041
	int GetRowCount();// 0x5bf704f39041
	int GetDataNum();// 0x5bf604f39041
	FString[] GetColKeys();// 0x5bf504f39041
	int GetColCount();// 0x5bf404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_PickupPriorityItem.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int PriorityValue;//[Offset: 0x10, Size: 0x4]
	int MutiAutoPickup;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_PickupPriorityWeaponPart.SolarTableReaderBase.Object
	SolarTablesData_PickupPriorityWeaponPart TryGetRowData(int Key, out bool HasKey);// 0x5c0704f39041
	bool HasRowKey(int Key);// 0x5c0604f39041
	bool HasColKey(FString Key);// 0x5c0504f39041
	FString GetTableName();// 0x5c0404f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c0304f39041
	SolarTablesData_PickupPriorityWeaponPart GetRowData(int Key);// 0x5c0204f39041
	int GetRowCount();// 0x5c0104f39041
	int GetDataNum();// 0x5c0004f39041
	FString[] GetColKeys();// 0x5bff04f39041
	int GetColCount();// 0x5bfe04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_PickupPriorityWeaponPart.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int PriorityValue;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_CharacterVoiceover.SolarTableReaderBase.Object
	SolarTablesData_CharacterVoiceover TryGetRowData(int Key, out bool HasKey);// 0x597d04f39041
	bool HasRowKey(int Key);// 0x597c04f39041
	bool HasColKey(FString Key);// 0x597b04f39041
	FString GetTableName();// 0x597a04f39041
	int GetRowKeys(out int[] OutKeys);// 0x597904f39041
	SolarTablesData_CharacterVoiceover GetRowData(int Key);// 0x597804f39041
	int GetRowCount();// 0x597704f39041
	int GetDataNum();// 0x597604f39041
	FString[] GetColKeys();// 0x597504f39041
	int GetColCount();// 0x597404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_CharacterVoiceover.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int QuickVoiceID;//[Offset: 0x10, Size: 0x4]
	int CharacterId;//[Offset: 0x14, Size: 0x4]
	int SkinId;//[Offset: 0x18, Size: 0x4]
	FString AudioEventName;//[Offset: 0x20, Size: 0x10]
	int LocalizationID;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_QuickChat.SolarTableReaderBase.Object
	SolarTablesData_QuickChat TryGetRowData(int Key, out bool HasKey);// 0x5c1b04f39041
	bool HasRowKey(int Key);// 0x5c1a04f39041
	bool HasColKey(FString Key);// 0x5c1904f39041
	FString GetTableName();// 0x5c1804f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c1704f39041
	SolarTablesData_QuickChat GetRowData(int Key);// 0x5c1604f39041
	int GetRowCount();// 0x5c1504f39041
	int GetDataNum();// 0x5c1404f39041
	FString[] GetColKeys();// 0x5c1304f39041
	int GetColCount();// 0x5c1204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_QuickChat.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int LocalizationID;//[Offset: 0x10, Size: 0x4]
	FString zh_CN;//[Offset: 0x18, Size: 0x10]
	FString en;//[Offset: 0x28, Size: 0x10]
	FString pt;//[Offset: 0x38, Size: 0x10]
	FString ind;//[Offset: 0x48, Size: 0x10]
	FString fr;//[Offset: 0x58, Size: 0x10]
	FString de;//[Offset: 0x68, Size: 0x10]
	FString ru;//[Offset: 0x78, Size: 0x10]
	FString ar;//[Offset: 0x88, Size: 0x10]
	FString es;//[Offset: 0x98, Size: 0x10]
	FString hi;//[Offset: 0xa8, Size: 0x10]
	FString it;//[Offset: 0xb8, Size: 0x10]
	FString ja;//[Offset: 0xc8, Size: 0x10]
	FString ko;//[Offset: 0xd8, Size: 0x10]
	FString ms;//[Offset: 0xe8, Size: 0x10]
	FString pl;//[Offset: 0xf8, Size: 0x10]
	FString th;//[Offset: 0x108, Size: 0x10]
	FString tl;//[Offset: 0x118, Size: 0x10]
	FString tr;//[Offset: 0x128, Size: 0x10]
	FString vi;//[Offset: 0x138, Size: 0x10]
	FString zh_TW;//[Offset: 0x148, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_QuickVoice.SolarTableReaderBase.Object
	SolarTablesData_QuickVoice TryGetRowData(int Key, out bool HasKey);// 0x5c2504f39041
	bool HasRowKey(int Key);// 0x5c2404f39041
	bool HasColKey(FString Key);// 0x5c2304f39041
	FString GetTableName();// 0x5c2204f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c2104f39041
	SolarTablesData_QuickVoice GetRowData(int Key);// 0x5c2004f39041
	int GetRowCount();// 0x5c1f04f39041
	int GetDataNum();// 0x5c1e04f39041
	FString[] GetColKeys();// 0x5c1d04f39041
	int GetColCount();// 0x5c1c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_QuickVoice.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString Icon;//[Offset: 0x10, Size: 0x10]
	int LocalizationID;//[Offset: 0x20, Size: 0x4]
	FString AudioEventName;//[Offset: 0x28, Size: 0x10]
	FString AudioEventNameFemale;//[Offset: 0x38, Size: 0x10]
	int IsMarkIcon;//[Offset: 0x48, Size: 0x4]
	int PassiveTriggeredCD;//[Offset: 0x4c, Size: 0x4]
	int PassiveTriggeredProb;//[Offset: 0x50, Size: 0x4]
	FString ReplyMessageID;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_VODownload.SolarTableReaderBase.Object
	SolarTablesData_VODownload TryGetRowData(int Key, out bool HasKey);// 0x5ccf04f39041
	bool HasRowKey(int Key);// 0x5cce04f39041
	bool HasColKey(FString Key);// 0x5ccd04f39041
	FString GetTableName();// 0x5ccc04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5ccb04f39041
	SolarTablesData_VODownload GetRowData(int Key);// 0x5cca04f39041
	int GetRowCount();// 0x5cc904f39041
	int GetDataNum();// 0x5cc804f39041
	FString[] GetColKeys();// 0x5cc704f39041
	int GetColCount();// 0x5cc604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_VODownload.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString ChunkDir;//[Offset: 0x10, Size: 0x10]
	int ChunkID;//[Offset: 0x20, Size: 0x4]
	FString ButtonText;//[Offset: 0x28, Size: 0x10]
	int LanguageIndex;//[Offset: 0x38, Size: 0x4]
	int IsDefaultChunk;//[Offset: 0x3c, Size: 0x4]
	FString WwiseLanguageCode;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_RankLevel.SolarTableReaderBase.Object
	SolarTablesData_RankLevel TryGetRowData(int Key, out bool HasKey);// 0x5c2f04f39041
	bool HasRowKey(int Key);// 0x5c2e04f39041
	bool HasColKey(FString Key);// 0x5c2d04f39041
	FString GetTableName();// 0x5c2c04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c2b04f39041
	SolarTablesData_RankLevel GetRowData(int Key);// 0x5c2a04f39041
	int GetRowCount();// 0x5c2904f39041
	int GetDataNum();// 0x5c2804f39041
	FString[] GetColKeys();// 0x5c2704f39041
	int GetColCount();// 0x5c2604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_RankLevel.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int RankID;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText RankName;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x18, Size: 0x4]
	int LevelID;//[Offset: 0x1c, Size: 0x4]
	int RankStart;//[Offset: 0x20, Size: 0x4]
	int RankEnd;//[Offset: 0x24, Size: 0x4]
	int RankProtect;//[Offset: 0x28, Size: 0x4]
	int FrustrationValue;//[Offset: 0x2c, Size: 0x4]
	int RankReduce;//[Offset: 0x30, Size: 0x4]
	FString Icon;//[Offset: 0x38, Size: 0x10]
	FString Icon_s;//[Offset: 0x48, Size: 0x10]
	FString IconWord;//[Offset: 0x58, Size: 0x10]
	FString IconWord_s;//[Offset: 0x68, Size: 0x10]
	int RandomLowerLimit;//[Offset: 0x78, Size: 0x4]
	int RandomUpLimit;//[Offset: 0x7c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_AutoDirector.SolarTableReaderBase.Object
	SolarTablesData_AutoDirector TryGetRowData(int Key, out bool HasKey);// 0x58e704f39041
	bool HasRowKey(int Key);// 0x58e604f39041
	bool HasColKey(FString Key);// 0x58e504f39041
	FString GetTableName();// 0x58e404f39041
	int GetRowKeys(out int[] OutKeys);// 0x58e304f39041
	SolarTablesData_AutoDirector GetRowData(int Key);// 0x58e204f39041
	int GetRowCount();// 0x58e104f39041
	int GetDataNum();// 0x58e004f39041
	FString[] GetColKeys();// 0x58df04f39041
	int GetColCount();// 0x58de04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_AutoDirector.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int SpectateAreaRadius;//[Offset: 0x10, Size: 0x4]
	int CollectScoreWindow;//[Offset: 0x14, Size: 0x4]
	float MinFocusTime;//[Offset: 0x18, Size: 0x4]
	float MaxFocusTime;//[Offset: 0x1c, Size: 0x4]
	float NewCutThreshold;//[Offset: 0x20, Size: 0x4]
	float PreFreeCameraTime;//[Offset: 0x24, Size: 0x4]
	int AutoDirectorMinEnableTime;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_AutoDirectorActivityScore.SolarTableReaderBase.Object
	SolarTablesData_AutoDirectorActivityScore TryGetRowData(int Key, out bool HasKey);// 0x58f104f39041
	bool HasRowKey(int Key);// 0x58f004f39041
	bool HasColKey(FString Key);// 0x58ef04f39041
	FString GetTableName();// 0x58ee04f39041
	int GetRowKeys(out int[] OutKeys);// 0x58ed04f39041
	SolarTablesData_AutoDirectorActivityScore GetRowData(int Key);// 0x58ec04f39041
	int GetRowCount();// 0x58eb04f39041
	int GetDataNum();// 0x58ea04f39041
	FString[] GetColKeys();// 0x58e904f39041
	int GetColCount();// 0x58e804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_AutoDirectorActivityScore.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float Score;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_CircularCameras.SolarTableReaderBase.Object
	SolarTablesData_CircularCameras TryGetRowData(int Key, out bool HasKey);// 0x59a504f39041
	bool HasRowKey(int Key);// 0x59a404f39041
	bool HasColKey(FString Key);// 0x59a304f39041
	FString GetTableName();// 0x59a204f39041
	int GetRowKeys(out int[] OutKeys);// 0x59a104f39041
	SolarTablesData_CircularCameras GetRowData(int Key);// 0x59a004f39041
	int GetRowCount();// 0x599f04f39041
	int GetDataNum();// 0x599e04f39041
	FString[] GetColKeys();// 0x599d04f39041
	int GetColCount();// 0x599c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_CircularCameras.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MiniDistance;//[Offset: 0x10, Size: 0x4]
	float BorderRatio;//[Offset: 0x14, Size: 0x4]
	int FOV;//[Offset: 0x18, Size: 0x4]
	int Pitch;//[Offset: 0x1c, Size: 0x4]
	int InitAngleWithMainDir;//[Offset: 0x20, Size: 0x4]
	float BlendAlpha;//[Offset: 0x24, Size: 0x4]
	float AngularSpeed;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_HotSpot.SolarTableReaderBase.Object
	SolarTablesData_HotSpot TryGetRowData(int Key, out bool HasKey);// 0x5a9504f39041
	bool HasRowKey(int Key);// 0x5a9404f39041
	bool HasColKey(FString Key);// 0x5a9304f39041
	FString GetTableName();// 0x5a9204f39041
	int GetRowKeys(out int[] OutKeys);// 0x5a9104f39041
	SolarTablesData_HotSpot GetRowData(int Key);// 0x5a9004f39041
	int GetRowCount();// 0x5a8f04f39041
	int GetDataNum();// 0x5a8e04f39041
	FString[] GetColKeys();// 0x5a8d04f39041
	int GetColCount();// 0x5a8c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_HotSpot.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString UIResource;//[Offset: 0x10, Size: 0x10]
	float JumpTime;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_LookAtCameras.SolarTableReaderBase.Object
	SolarTablesData_LookAtCameras TryGetRowData(int Key, out bool HasKey);// 0x5b7104f39041
	bool HasRowKey(int Key);// 0x5b7004f39041
	bool HasColKey(FString Key);// 0x5b6f04f39041
	FString GetTableName();// 0x5b6e04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5b6d04f39041
	SolarTablesData_LookAtCameras GetRowData(int Key);// 0x5b6c04f39041
	int GetRowCount();// 0x5b6b04f39041
	int GetDataNum();// 0x5b6a04f39041
	FString[] GetColKeys();// 0x5b6904f39041
	int GetColCount();// 0x5b6804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_LookAtCameras.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MiniDistance;//[Offset: 0x10, Size: 0x4]
	float BorderRatio;//[Offset: 0x14, Size: 0x4]
	int FOV;//[Offset: 0x18, Size: 0x4]
	int Pitch;//[Offset: 0x1c, Size: 0x4]
	int InitAngleWithMainDir;//[Offset: 0x20, Size: 0x4]
	float BlendAlpha;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Rescue.SolarTableReaderBase.Object
	SolarTablesData_Rescue TryGetRowData(int Key, out bool HasKey);// 0x5c4304f39041
	bool HasRowKey(int Key);// 0x5c4204f39041
	bool HasColKey(FString Key);// 0x5c4104f39041
	FString GetTableName();// 0x5c4004f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c3f04f39041
	SolarTablesData_Rescue GetRowData(int Key);// 0x5c3e04f39041
	int GetRowCount();// 0x5c3d04f39041
	int GetDataNum();// 0x5c3c04f39041
	FString[] GetColKeys();// 0x5c3b04f39041
	int GetColCount();// 0x5c3a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Rescue.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float RescueMaxDistance;//[Offset: 0x10, Size: 0x4]
	float FallenHp;//[Offset: 0x14, Size: 0x4]
	float RescueRecoveryHp;//[Offset: 0x18, Size: 0x4]
	int RescueTime;//[Offset: 0x1c, Size: 0x4]
	float[] FallenLossHp;//[Offset: 0x20, Size: 0x10]
	float[] FallenMoveLossHp;//[Offset: 0x30, Size: 0x10]
	float FallenMoveSpeed;//[Offset: 0x40, Size: 0x4]
	float RescueMoveSpeed;//[Offset: 0x44, Size: 0x4]
	float InvincibleTime;//[Offset: 0x48, Size: 0x4]
	float MaxRescueAngle;//[Offset: 0x4c, Size: 0x4]
	float RemindRescueCooldownTime;//[Offset: 0x50, Size: 0x4]
	float RemindRescueSoundCD;//[Offset: 0x54, Size: 0x4]
	int RemindRescueSoundIndex;//[Offset: 0x58, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Skin.SolarTableReaderBase.Object
	SolarTablesData_Skin TryGetRowData(int Key, out bool HasKey);// 0x5c6104f39041
	bool HasRowKey(int Key);// 0x5c6004f39041
	bool HasColKey(FString Key);// 0x5c5f04f39041
	FString GetTableName();// 0x5c5e04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c5d04f39041
	SolarTablesData_Skin GetRowData(int Key);// 0x5c5c04f39041
	int GetRowCount();// 0x5c5b04f39041
	int GetDataNum();// 0x5c5a04f39041
	FString[] GetColKeys();// 0x5c5904f39041
	int GetColCount();// 0x5c5804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Skin.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int CharaId;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FString BeginTime;//[Offset: 0x20, Size: 0x10]
	int ShopPropertyid;//[Offset: 0x30, Size: 0x4]
	int ItemID;//[Offset: 0x34, Size: 0x4]
	FString MVPDataAssetPath;//[Offset: 0x38, Size: 0x10]
	FString MVPSequencePath;//[Offset: 0x48, Size: 0x10]
	int SceneId;//[Offset: 0x58, Size: 0x4]
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	FString CharacterSkinResource;//[Offset: 0x60, Size: 0x10]
	FString CharacterLobbySkinResource;//[Offset: 0x70, Size: 0x10]
	FString ChunkDir;//[Offset: 0x80, Size: 0x10]
	int ChunkID;//[Offset: 0x90, Size: 0x4]
	FString CharacterLowSkinResource;//[Offset: 0x98, Size: 0x10]
	int[] CharacterPrologue;//[Offset: 0xa8, Size: 0x10]
	FString CharacterProtrait;//[Offset: 0xb8, Size: 0x10]
	int SkinSort;//[Offset: 0xc8, Size: 0x4]
	int MVPSettlementStartFrame;//[Offset: 0xcc, Size: 0x4]
	int MVPSettlementEndFrame;//[Offset: 0xd0, Size: 0x4]
	int MVPAnchorPoint;//[Offset: 0xd4, Size: 0x4]
	FString IdleShowSequencePath;//[Offset: 0xd8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Achievement.SolarTableReaderBase.Object
	SolarTablesData_Achievement TryGetRowData(int Key, out bool HasKey);// 0x58bf04f39041
	bool HasRowKey(int Key);// 0x58be04f39041
	bool HasColKey(FString Key);// 0x58bd04f39041
	FString GetTableName();// 0x58bc04f39041
	int GetRowKeys(out int[] OutKeys);// 0x58bb04f39041
	SolarTablesData_Achievement GetRowData(int Key);// 0x58ba04f39041
	int GetRowCount();// 0x58b904f39041
	int GetDataNum();// 0x58b804f39041
	FString[] GetColKeys();// 0x58b704f39041
	int GetColCount();// 0x58b604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Achievement.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Order;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText AchieveName;//[Offset: 0x14, Size: 0x4]
	int AchieveTab;//[Offset: 0x18, Size: 0x4]
	int AchieveType;//[Offset: 0x1c, Size: 0x4]
	int AchieveScore;//[Offset: 0x20, Size: 0x4]
	int[] AwardList;//[Offset: 0x28, Size: 0x10]
	FString AchieveIcon;//[Offset: 0x38, Size: 0x10]
	FString AchieveIconS;//[Offset: 0x48, Size: 0x10]
	int AchieveTask;//[Offset: 0x58, Size: 0x4]
	int[] AchieveTV;//[Offset: 0x60, Size: 0x10]
	int AchieveTT;//[Offset: 0x70, Size: 0x4]
	int ReportType;//[Offset: 0x74, Size: 0x4]
	SolarTablesLocalText AchieveTC;//[Offset: 0x78, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_TaskProgress.SolarTableReaderBase.Object
	SolarTablesData_TaskProgress TryGetRowData(int Key, out bool HasKey);// 0x5c6b04f39041
	bool HasRowKey(int Key);// 0x5c6a04f39041
	bool HasColKey(FString Key);// 0x5c6904f39041
	FString GetTableName();// 0x5c6804f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c6704f39041
	SolarTablesData_TaskProgress GetRowData(int Key);// 0x5c6604f39041
	int GetRowCount();// 0x5c6504f39041
	int GetDataNum();// 0x5c6404f39041
	FString[] GetColKeys();// 0x5c6304f39041
	int GetColCount();// 0x5c6204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_TaskProgress.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int isRefresh;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_TaskSystem.SolarTableReaderBase.Object
	SolarTablesData_TaskSystem TryGetRowData(int Key, out bool HasKey);// 0x5c7504f39041
	bool HasRowKey(int Key);// 0x5c7404f39041
	bool HasColKey(FString Key);// 0x5c7304f39041
	FString GetTableName();// 0x5c7204f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c7104f39041
	SolarTablesData_TaskSystem GetRowData(int Key);// 0x5c7004f39041
	int GetRowCount();// 0x5c6f04f39041
	int GetDataNum();// 0x5c6e04f39041
	FString[] GetColKeys();// 0x5c6d04f39041
	int GetColCount();// 0x5c6c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_TaskSystem.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int taskDesc;//[Offset: 0x10, Size: 0x4]
	int Task;//[Offset: 0x14, Size: 0x4]
	int TaskType;//[Offset: 0x18, Size: 0x4]
	FString cond1_sheet;//[Offset: 0x20, Size: 0x10]
	int cond1;//[Offset: 0x30, Size: 0x4]
	FString cond2_sheet;//[Offset: 0x38, Size: 0x10]
	int cond2;//[Offset: 0x48, Size: 0x4]
	FString cond3_sheet;//[Offset: 0x50, Size: 0x10]
	int cond3;//[Offset: 0x60, Size: 0x4]
	int Target;//[Offset: 0x64, Size: 0x4]
	int[] Item;//[Offset: 0x68, Size: 0x10]
	int MinLevel;//[Offset: 0x78, Size: 0x4]
	int[] link;//[Offset: 0x80, Size: 0x10]
	int Weight;//[Offset: 0x90, Size: 0x4]
	int sort;//[Offset: 0x94, Size: 0x4]
	bool Progress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool isCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	int circleTimes;//[Offset: 0x9c, Size: 0x4]
	int resetType;//[Offset: 0xa0, Size: 0x4]
	int[] taskTips;//[Offset: 0xa8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_PlayerOperationListLayout.SolarTableReaderBase.Object
	SolarTablesData_PlayerOperationListLayout TryGetRowData(int Key, out bool HasKey);// 0x5c1104f39041
	bool HasRowKey(int Key);// 0x5c1004f39041
	bool HasColKey(FString Key);// 0x5c0f04f39041
	FString GetTableName();// 0x5c0e04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c0d04f39041
	SolarTablesData_PlayerOperationListLayout GetRowData(int Key);// 0x5c0c04f39041
	int GetRowCount();// 0x5c0b04f39041
	int GetDataNum();// 0x5c0a04f39041
	FString[] GetColKeys();// 0x5c0904f39041
	int GetColCount();// 0x5c0804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_PlayerOperationListLayout.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString UIName;//[Offset: 0x10, Size: 0x10]
	int Normal;//[Offset: 0x20, Size: 0x4]
	int Driver;//[Offset: 0x24, Size: 0x4]
	int Passgner;//[Offset: 0x28, Size: 0x4]
	int EquipVehicleWeapon;//[Offset: 0x2c, Size: 0x4]
	int Cruising;//[Offset: 0x30, Size: 0x4]
	int Parachuting;//[Offset: 0x34, Size: 0x4]
	int Swimming;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Variables.SolarTableReaderBase.Object
	SolarTablesData_Variables TryGetRowData(FString Key, out bool HasKey);// 0x5c8904f39041
	bool HasRowKey(FString Key);// 0x5c8804f39041
	bool HasColKey(FString Key);// 0x5c8704f39041
	FString GetTableName();// 0x5c8604f39041
	int GetRowKeys(out FString[] OutKeys);// 0x5c8504f39041
	SolarTablesData_Variables GetRowData(FString Key);// 0x5c8404f39041
	int GetRowCount();// 0x5c8304f39041
	int GetDataNum();// 0x5c8204f39041
	FString[] GetColKeys();// 0x5c8104f39041
	int GetColCount();// 0x5c8004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Variables.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	FString Value;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Vehicle.SolarTableReaderBase.Object
	SolarTablesData_Vehicle TryGetRowData(int Key, out bool HasKey);// 0x5c9304f39041
	bool HasRowKey(int Key);// 0x5c9204f39041
	bool HasColKey(FString Key);// 0x5c9104f39041
	FString GetTableName();// 0x5c9004f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c8f04f39041
	SolarTablesData_Vehicle GetRowData(int Key);// 0x5c8e04f39041
	int GetRowCount();// 0x5c8d04f39041
	int GetDataNum();// 0x5c8c04f39041
	FString[] GetColKeys();// 0x5c8b04f39041
	int GetColCount();// 0x5c8a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Vehicle.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString VehicleBP;//[Offset: 0x18, Size: 0x10]
	int groupid;//[Offset: 0x28, Size: 0x4]
	int VehicleTypeID;//[Offset: 0x2c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_VehicleSkin.SolarTableReaderBase.Object
	SolarTablesData_VehicleSkin TryGetRowData(int Key, out bool HasKey);// 0x5c9d04f39041
	bool HasRowKey(int Key);// 0x5c9c04f39041
	bool HasColKey(FString Key);// 0x5c9b04f39041
	FString GetTableName();// 0x5c9a04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c9904f39041
	SolarTablesData_VehicleSkin GetRowData(int Key);// 0x5c9804f39041
	int GetRowCount();// 0x5c9704f39041
	int GetDataNum();// 0x5c9604f39041
	FString[] GetColKeys();// 0x5c9504f39041
	int GetColCount();// 0x5c9404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_VehicleSkin.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int VehicleTypeID;//[Offset: 0x10, Size: 0x4]
	int ItemID;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText SkinName;//[Offset: 0x18, Size: 0x4]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	FString BeginTime;//[Offset: 0x20, Size: 0x10]
	int[] JumpLink;//[Offset: 0x30, Size: 0x10]
	FString VehicleSkinBPPath;//[Offset: 0x40, Size: 0x10]
	FString VehiclePreviewBP;//[Offset: 0x50, Size: 0x10]
	FString VehicleIcon;//[Offset: 0x60, Size: 0x10]
	FString VehicleSound;//[Offset: 0x70, Size: 0x10]
	int AIRandomWeight;//[Offset: 0x80, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_VehicleType.SolarTableReaderBase.Object
	SolarTablesData_VehicleType TryGetRowData(int Key, out bool HasKey);// 0x5cc504f39041
	bool HasRowKey(int Key);// 0x5cc404f39041
	bool HasColKey(FString Key);// 0x5cc304f39041
	FString GetTableName();// 0x5cc204f39041
	int GetRowKeys(out int[] OutKeys);// 0x5cc104f39041
	SolarTablesData_VehicleType GetRowData(int Key);// 0x5cc004f39041
	int GetRowCount();// 0x5cbf04f39041
	int GetDataNum();// 0x5cbe04f39041
	FString[] GetColKeys();// 0x5cbd04f39041
	int GetColCount();// 0x5cbc04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_VehicleType.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int DefaultId;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	FString VehicleIcon;//[Offset: 0x18, Size: 0x10]
	FString AudioEventName;//[Offset: 0x28, Size: 0x10]
	int VehicleClass;//[Offset: 0x38, Size: 0x4]
	float LobbyDurability;//[Offset: 0x3c, Size: 0x4]
	float LobbySpeed;//[Offset: 0x40, Size: 0x4]
	float LobbyFirepower;//[Offset: 0x44, Size: 0x4]
	float LobbyControl;//[Offset: 0x48, Size: 0x4]
	int SeatNum;//[Offset: 0x4c, Size: 0x4]
	int[] Seat1WeaponID;//[Offset: 0x50, Size: 0x10]
	int[] Seat2WeaponID;//[Offset: 0x60, Size: 0x10]
	int[] Seat3WeaponID;//[Offset: 0x70, Size: 0x10]
	int[] Seat4WeaponID;//[Offset: 0x80, Size: 0x10]
	int[] Seat1SkillID;//[Offset: 0x90, Size: 0x10]
	int[] Seat2SkillID;//[Offset: 0xa0, Size: 0x10]
	int[] Seat3SkillID;//[Offset: 0xb0, Size: 0x10]
	int[] Seat4SkillID;//[Offset: 0xc0, Size: 0x10]
	FString VehicleLink;//[Offset: 0xd0, Size: 0x10]
	FString SilhouetteIcon;//[Offset: 0xe0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_VehicleSpawn.SolarTableReaderBase.Object
	SolarTablesData_VehicleSpawn TryGetRowData(int Key, out bool HasKey);// 0x5cb104f39041
	bool HasRowKey(int Key);// 0x5cb004f39041
	bool HasColKey(FString Key);// 0x5caf04f39041
	FString GetTableName();// 0x5cae04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5cad04f39041
	SolarTablesData_VehicleSpawn GetRowData(int Key);// 0x5cac04f39041
	int GetRowCount();// 0x5cab04f39041
	int GetDataNum();// 0x5caa04f39041
	FString[] GetColKeys();// 0x5ca904f39041
	int GetColCount();// 0x5ca804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_VehicleSpawn.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] VehicleSet;//[Offset: 0x10, Size: 0x10]
	int[] WeightSet;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_VehicleSpawnGroup.SolarTableReaderBase.Object
	SolarTablesData_VehicleSpawnGroup TryGetRowData(int Key, out bool HasKey);// 0x5cbb04f39041
	bool HasRowKey(int Key);// 0x5cba04f39041
	bool HasColKey(FString Key);// 0x5cb904f39041
	FString GetTableName();// 0x5cb804f39041
	int GetRowKeys(out int[] OutKeys);// 0x5cb704f39041
	SolarTablesData_VehicleSpawnGroup GetRowData(int Key);// 0x5cb604f39041
	int GetRowCount();// 0x5cb504f39041
	int GetDataNum();// 0x5cb404f39041
	FString[] GetColKeys();// 0x5cb304f39041
	int GetColCount();// 0x5cb204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_VehicleSpawnGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] VehicleIDs;//[Offset: 0x10, Size: 0x10]
	int[] VehicleCounts;//[Offset: 0x20, Size: 0x10]
	int[] VehicleSum;//[Offset: 0x30, Size: 0x10]
	FString VehicleWeightSet;//[Offset: 0x40, Size: 0x10]
	int[] AlternateId;//[Offset: 0x50, Size: 0x10]
	FString AlternateType;//[Offset: 0x60, Size: 0x10]
	FString AlternateTime;//[Offset: 0x70, Size: 0x10]
	FString AlternateDate;//[Offset: 0x80, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WarmGame.SolarTableReaderBase.Object
	SolarTablesData_WarmGame TryGetRowData(int Key, out bool HasKey);// 0x5ce304f39041
	bool HasRowKey(int Key);// 0x5ce204f39041
	bool HasColKey(FString Key);// 0x5ce104f39041
	FString GetTableName();// 0x5ce004f39041
	int GetRowKeys(out int[] OutKeys);// 0x5cdf04f39041
	SolarTablesData_WarmGame GetRowData(int Key);// 0x5cde04f39041
	int GetRowCount();// 0x5cdd04f39041
	int GetDataNum();// 0x5cdc04f39041
	FString[] GetColKeys();// 0x5cdb04f39041
	int GetColCount();// 0x5cda04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WarmGame.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WarmType;//[Offset: 0x10, Size: 0x4]
	int MatchType;//[Offset: 0x14, Size: 0x4]
	int EloStart;//[Offset: 0x18, Size: 0x4]
	int EloEnd;//[Offset: 0x1c, Size: 0x4]
	int NumStart;//[Offset: 0x20, Size: 0x4]
	int NumEnd;//[Offset: 0x24, Size: 0x4]
	int KillStart;//[Offset: 0x28, Size: 0x4]
	int KillEnd;//[Offset: 0x2c, Size: 0x4]
	FString WarmSubType;//[Offset: 0x30, Size: 0x10]
	int UniqueId;//[Offset: 0x40, Size: 0x4]
	FString Abid;//[Offset: 0x48, Size: 0x10]
	FString WarmGameFillCheckBox;//[Offset: 0x58, Size: 0x10]
	FString WarmGameFillTeammate;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WarmGameMode.SolarTableReaderBase.Object
	SolarTablesData_WarmGameMode TryGetRowData(int Key, out bool HasKey);// 0x5ced04f39041
	bool HasRowKey(int Key);// 0x5cec04f39041
	bool HasColKey(FString Key);// 0x5ceb04f39041
	FString GetTableName();// 0x5cea04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5ce904f39041
	SolarTablesData_WarmGameMode GetRowData(int Key);// 0x5ce804f39041
	int GetRowCount();// 0x5ce704f39041
	int GetDataNum();// 0x5ce604f39041
	FString[] GetColKeys();// 0x5ce504f39041
	int GetColCount();// 0x5ce404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponDamage.SolarTableReaderBase.Object
	SolarTablesData_WeaponDamage TryGetRowData(int Key, out bool HasKey);// 0x5d1504f39041
	bool HasRowKey(int Key);// 0x5d1404f39041
	bool HasColKey(FString Key);// 0x5d1304f39041
	FString GetTableName();// 0x5d1204f39041
	int GetRowKeys(out int[] OutKeys);// 0x5d1104f39041
	SolarTablesData_WeaponDamage GetRowData(int Key);// 0x5d1004f39041
	int GetRowCount();// 0x5d0f04f39041
	int GetDataNum();// 0x5d0e04f39041
	FString[] GetColKeys();// 0x5d0d04f39041
	int GetColCount();// 0x5d0c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponDamage.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float NpcDamageFactor;//[Offset: 0x10, Size: 0x4]
	float BotDamageFactor;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Weapon.SolarTableReaderBase.Object
	SolarTablesData_Weapon TryGetRowData(int Key, out bool HasKey);// 0x5cf704f39041
	bool HasRowKey(int Key);// 0x5cf604f39041
	bool HasColKey(FString Key);// 0x5cf504f39041
	FString GetTableName();// 0x5cf404f39041
	int GetRowKeys(out int[] OutKeys);// 0x5cf304f39041
	SolarTablesData_Weapon GetRowData(int Key);// 0x5cf204f39041
	int GetRowCount();// 0x5cf104f39041
	int GetDataNum();// 0x5cf004f39041
	FString[] GetColKeys();// 0x5cef04f39041
	int GetColCount();// 0x5cee04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Weapon.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	enum WeaponType;//[Offset: 0x14, Size: 0x1]
	int WeaponBrand;//[Offset: 0x18, Size: 0x4]
	bool SupportSecondaryAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int[] AccessoryID;//[Offset: 0x20, Size: 0x10]
	FString WeaponIcon;//[Offset: 0x30, Size: 0x10]
	bool Single;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool Burst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool Automatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool OneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	float HitHead;//[Offset: 0x44, Size: 0x4]
	int SecModeLimitTypeID;//[Offset: 0x48, Size: 0x4]
	int BurstMaxCount;//[Offset: 0x4c, Size: 0x4]
	FString WeaponDamage;//[Offset: 0x50, Size: 0x10]
	float MaxSpread;//[Offset: 0x60, Size: 0x4]
	float MinSpread;//[Offset: 0x64, Size: 0x4]
	float HipFireBaseSpread;//[Offset: 0x68, Size: 0x4]
	float VhADSBaseSpread;//[Offset: 0x6c, Size: 0x4]
	float ADSBaseSpread;//[Offset: 0x70, Size: 0x4]
	float SpreadStatuSpeed;//[Offset: 0x74, Size: 0x4]
	float SpreadStatuIncreaseID;//[Offset: 0x78, Size: 0x4]
	float SpreadStatuReduceID;//[Offset: 0x7c, Size: 0x4]
	int SpreadCOPID;//[Offset: 0x80, Size: 0x4]
	int PrimaryAmmo;//[Offset: 0x84, Size: 0x4]
	int PrimaryAmmoCap;//[Offset: 0x88, Size: 0x4]
	int SecondaryAmmo;//[Offset: 0x8c, Size: 0x4]
	int SecondaryAmmoCap;//[Offset: 0x90, Size: 0x4]
	bool CanOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	float OverloadMaxValue;//[Offset: 0x98, Size: 0x4]
	float NormalOverloadCoolingRate;//[Offset: 0x9c, Size: 0x4]
	float OverloadCoolingPeriod;//[Offset: 0xa0, Size: 0x4]
	float OverloadWarningRate;//[Offset: 0xa4, Size: 0x4]
	bool CanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	float AutoFireDelayMs;//[Offset: 0xac, Size: 0x4]
	float AutoFireEndDelayMs;//[Offset: 0xb0, Size: 0x4]
	bool CanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	float[] HipSoftZone;//[Offset: 0xb8, Size: 0x10]
	float HipAimAssistStepRatio;//[Offset: 0xc8, Size: 0x4]
	float HipMinAssistStepRatio;//[Offset: 0xcc, Size: 0x4]
	float HipAimAssistStepSpeed;//[Offset: 0xd0, Size: 0x4]
	float[] AdsSoftZone;//[Offset: 0xd8, Size: 0x10]
	float AdsAimAssistStepRatio;//[Offset: 0xe8, Size: 0x4]
	float AdsMinAssistStepRatio;//[Offset: 0xec, Size: 0x4]
	float AdsAimAssistStepSpeed;//[Offset: 0xf0, Size: 0x4]
	bool CanOpenScopeAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	float OpenScopeAimAssistStepRatio;//[Offset: 0xf8, Size: 0x4]
	float OpenScopeMinAssistStepRatio;//[Offset: 0xfc, Size: 0x4]
	float OpenScopeAssistStepSpeed;//[Offset: 0x100, Size: 0x4]
	float OnVehicleAssistStepRatio;//[Offset: 0x104, Size: 0x4]
	float Weight;//[Offset: 0x108, Size: 0x4]
	float HipFireSpeed;//[Offset: 0x10c, Size: 0x4]
	float ADSFireSpeed;//[Offset: 0x110, Size: 0x4]
	int[] DefaultParts;//[Offset: 0x118, Size: 0x10]
	float ScopeOpenTime;//[Offset: 0x128, Size: 0x4]
	float FovFactor;//[Offset: 0x12c, Size: 0x4]
	float WeaponSwitchTime;//[Offset: 0x130, Size: 0x4]
	float WeaponUnequipTime;//[Offset: 0x134, Size: 0x4]
	int[] PartSlots;//[Offset: 0x138, Size: 0x10]
	<FString,FString> EquipAttributeSub;//[Offset: 0x148, Size: 0x50]
	<FString,FString> HoldAttributeSub;//[Offset: 0x198, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponAmmo.SolarTableReaderBase.Object
	SolarTablesData_WeaponAmmo TryGetRowData(int Key, out bool HasKey);// 0x5d0104f39041
	bool HasRowKey(int Key);// 0x5d0004f39041
	bool HasColKey(FString Key);// 0x5cff04f39041
	FString GetTableName();// 0x5cfe04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5cfd04f39041
	SolarTablesData_WeaponAmmo GetRowData(int Key);// 0x5cfc04f39041
	int GetRowCount();// 0x5cfb04f39041
	int GetDataNum();// 0x5cfa04f39041
	FString[] GetColKeys();// 0x5cf904f39041
	int GetColCount();// 0x5cf804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponAmmo.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int AmmoType;//[Offset: 0x10, Size: 0x4]
	int PropID;//[Offset: 0x14, Size: 0x4]
	int SoundID;//[Offset: 0x18, Size: 0x4]
	bool IfTimedExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int BounceTimes;//[Offset: 0x20, Size: 0x4]
	float LifeTime;//[Offset: 0x24, Size: 0x4]
	float BaseReloadTime;//[Offset: 0x28, Size: 0x4]
	float ReloadBoltTime;//[Offset: 0x2c, Size: 0x4]
	enum FireMethodType;//[Offset: 0x30, Size: 0x1]
	enum TrajectoryType;//[Offset: 0x31, Size: 0x1]
	float CustomValue;//[Offset: 0x34, Size: 0x4]
	enum TriggerType;//[Offset: 0x38, Size: 0x1]
	float MaxRange;//[Offset: 0x3c, Size: 0x4]
	float EffRange;//[Offset: 0x40, Size: 0x4]
	float ProjectileMaxGravity;//[Offset: 0x44, Size: 0x4]
	float DamageMaxRange;//[Offset: 0x48, Size: 0x4]
	float DamageEffRange;//[Offset: 0x4c, Size: 0x4]
	float Radius;//[Offset: 0x50, Size: 0x4]
	float PostFireOverload;//[Offset: 0x54, Size: 0x4]
	float InitSpeed;//[Offset: 0x58, Size: 0x4]
	float FireStreakBreakTime;//[Offset: 0x5c, Size: 0x4]
	enum FireCostType;//[Offset: 0x60, Size: 0x1]
	int FireCostPerAttack;//[Offset: 0x64, Size: 0x4]
	int FireSpeedChangeTime;//[Offset: 0x68, Size: 0x4]
	float FireSpeedChangeCOP;//[Offset: 0x6c, Size: 0x4]
	float FireIntervalRevertPreTime;//[Offset: 0x70, Size: 0x4]
	float FireIntervalReavertSpeed;//[Offset: 0x74, Size: 0x4]
	float FastestFireInterval;//[Offset: 0x78, Size: 0x4]
	float SlowestFireInterval;//[Offset: 0x7c, Size: 0x4]
	float BaseFireInterval;//[Offset: 0x80, Size: 0x4]
	float BoltActionTime;//[Offset: 0x84, Size: 0x4]
	float BurstShootInterval;//[Offset: 0x88, Size: 0x4]
	float BurstFireInterval;//[Offset: 0x8c, Size: 0x4]
	float StartBoltDuration;//[Offset: 0x90, Size: 0x4]
	bool UsePrimaryModeAmmoCap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool UseBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	float[] SkillCDDiscountArray;//[Offset: 0x98, Size: 0x10]
	int SkillType;//[Offset: 0xa8, Size: 0x4]
	float VhADSSpreadCOP;//[Offset: 0xac, Size: 0x4]
	float ADSSpreadCOP;//[Offset: 0xb0, Size: 0x4]
	float SpreadFirePreTime;//[Offset: 0xb4, Size: 0x4]
	float SpreadPostFireSpeed;//[Offset: 0xb8, Size: 0x4]
	float SpreadRestorePreTime;//[Offset: 0xbc, Size: 0x4]
	float SpreadRestoreSpeed;//[Offset: 0xc0, Size: 0x4]
	float VRecoilCostTime;//[Offset: 0xc4, Size: 0x4]
	int VRecoilAPoint;//[Offset: 0xc8, Size: 0x4]
	float VRecoilAPointMax;//[Offset: 0xcc, Size: 0x4]
	float VRecoilAPointMin;//[Offset: 0xd0, Size: 0x4]
	int VRecoilBPoint;//[Offset: 0xd4, Size: 0x4]
	float VRecoilBPointMax;//[Offset: 0xd8, Size: 0x4]
	float VRecoilBPointMin;//[Offset: 0xdc, Size: 0x4]
	float HRecoilCostTime;//[Offset: 0xe0, Size: 0x4]
	int HRecoilAPoint;//[Offset: 0xe4, Size: 0x4]
	float HRecoilAPointMax;//[Offset: 0xe8, Size: 0x4]
	float HRecoilAPointMin;//[Offset: 0xec, Size: 0x4]
	int HRecoilBPoint;//[Offset: 0xf0, Size: 0x4]
	float HRecoilBPointMax;//[Offset: 0xf4, Size: 0x4]
	float HRecoilBPointMin;//[Offset: 0xf8, Size: 0x4]
	int RecoilCOP;//[Offset: 0xfc, Size: 0x4]
	float ADSRecoilCOP;//[Offset: 0x100, Size: 0x4]
	float RollCostTime;//[Offset: 0x104, Size: 0x4]
	int RollAPoint;//[Offset: 0x108, Size: 0x4]
	int RollBPoint;//[Offset: 0x10c, Size: 0x4]
	float RollHightestPointMax;//[Offset: 0x110, Size: 0x4]
	float RollHightestPointMin;//[Offset: 0x114, Size: 0x4]
	float RollLowesttPointMax;//[Offset: 0x118, Size: 0x4]
	float RollLowesttPointMin;//[Offset: 0x11c, Size: 0x4]
	float ADSRollCOP;//[Offset: 0x120, Size: 0x4]
	float ScopeRollCostTime;//[Offset: 0x124, Size: 0x4]
	int ScopeRollAPoint;//[Offset: 0x128, Size: 0x4]
	int ScopeRollBPoint;//[Offset: 0x12c, Size: 0x4]
	float ScopeRollHightestPointMax;//[Offset: 0x130, Size: 0x4]
	float ScopeRollHightestPointMin;//[Offset: 0x134, Size: 0x4]
	float ScopeRollLowesttPointMax;//[Offset: 0x138, Size: 0x4]
	float ScopeRollLowesttPointMin;//[Offset: 0x13c, Size: 0x4]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x140, Size: 0x4]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x144, Size: 0x4]
	float ScopeVVibrationDuration;//[Offset: 0x148, Size: 0x4]
	float ScopeHVibrationDuration;//[Offset: 0x14c, Size: 0x4]
	float CrossHairVibrationScale;//[Offset: 0x150, Size: 0x4]
	float ScopeVContinuousFallingDuration;//[Offset: 0x154, Size: 0x4]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x158, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponBattleUpgrade.SolarTableReaderBase.Object
	SolarTablesData_WeaponBattleUpgrade TryGetRowData(int Key, out bool HasKey);// 0x5d0b04f39041
	bool HasRowKey(int Key);// 0x5d0a04f39041
	bool HasColKey(FString Key);// 0x5d0904f39041
	FString GetTableName();// 0x5d0804f39041
	int GetRowKeys(out int[] OutKeys);// 0x5d0704f39041
	SolarTablesData_WeaponBattleUpgrade GetRowData(int Key);// 0x5d0604f39041
	int GetRowCount();// 0x5d0504f39041
	int GetDataNum();// 0x5d0404f39041
	FString[] GetColKeys();// 0x5d0304f39041
	int GetColCount();// 0x5d0204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponBattleUpgrade.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Exp;//[Offset: 0x10, Size: 0x4]
	int Retrofit;//[Offset: 0x14, Size: 0x4]
	int UpgradeCost;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponDefault.SolarTableReaderBase.Object
	SolarTablesData_WeaponDefault TryGetRowData(int Key, out bool HasKey);// 0x5d1f04f39041
	bool HasRowKey(int Key);// 0x5d1e04f39041
	bool HasColKey(FString Key);// 0x5d1d04f39041
	FString GetTableName();// 0x5d1c04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5d1b04f39041
	SolarTablesData_WeaponDefault GetRowData(int Key);// 0x5d1a04f39041
	int GetRowCount();// 0x5d1904f39041
	int GetDataNum();// 0x5d1804f39041
	FString[] GetColKeys();// 0x5d1704f39041
	int GetColCount();// 0x5d1604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponDefault.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum AccessoryType1;//[Offset: 0x10, Size: 0x1]
	int[] SlotSubtype1;//[Offset: 0x18, Size: 0x10]
	int AccessoryID1;//[Offset: 0x28, Size: 0x4]
	enum AccessoryType2;//[Offset: 0x2c, Size: 0x1]
	int[] SlotSubtype2;//[Offset: 0x30, Size: 0x10]
	int AccessoryID2;//[Offset: 0x40, Size: 0x4]
	enum AccessoryType3;//[Offset: 0x44, Size: 0x1]
	int[] SlotSubtype3;//[Offset: 0x48, Size: 0x10]
	int AccessoryID3;//[Offset: 0x58, Size: 0x4]
	enum AccessoryType4;//[Offset: 0x5c, Size: 0x1]
	int[] SlotSubtype4;//[Offset: 0x60, Size: 0x10]
	int AccessoryID4;//[Offset: 0x70, Size: 0x4]
	enum AccessoryType5;//[Offset: 0x74, Size: 0x1]
	int[] SlotSubtype5;//[Offset: 0x78, Size: 0x10]
	int AccessoryID5;//[Offset: 0x88, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponKillTip.SolarTableReaderBase.Object
	SolarTablesData_WeaponKillTip TryGetRowData(int Key, out bool HasKey);// 0x5d2904f39041
	bool HasRowKey(int Key);// 0x5d2804f39041
	bool HasColKey(FString Key);// 0x5d2704f39041
	FString GetTableName();// 0x5d2604f39041
	int GetRowKeys(out int[] OutKeys);// 0x5d2504f39041
	SolarTablesData_WeaponKillTip GetRowData(int Key);// 0x5d2404f39041
	int GetRowCount();// 0x5d2304f39041
	int GetDataNum();// 0x5d2204f39041
	FString[] GetColKeys();// 0x5d2104f39041
	int GetColCount();// 0x5d2004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponKillTip.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int KillTipType;//[Offset: 0x10, Size: 0x4]
	int KillTipValue;//[Offset: 0x14, Size: 0x4]
	FString KillTipIcon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText KillTipname;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponParts.SolarTableReaderBase.Object
	SolarTablesData_WeaponParts TryGetRowData(int Key, out bool HasKey);// 0x5d3304f39041
	bool HasRowKey(int Key);// 0x5d3204f39041
	bool HasColKey(FString Key);// 0x5d3104f39041
	FString GetTableName();// 0x5d3004f39041
	int GetRowKeys(out int[] OutKeys);// 0x5d2f04f39041
	SolarTablesData_WeaponParts GetRowData(int Key);// 0x5d2e04f39041
	int GetRowCount();// 0x5d2d04f39041
	int GetDataNum();// 0x5d2c04f39041
	FString[] GetColKeys();// 0x5d2b04f39041
	int GetColCount();// 0x5d2a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponParts.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WeaponLevel;//[Offset: 0x10, Size: 0x4]
	enum PartsType;//[Offset: 0x14, Size: 0x1]
	<FString,FString> AttributeSub;//[Offset: 0x18, Size: 0x50]
	int PartsQuality;//[Offset: 0x68, Size: 0x4]
	FString PartsBPResource;//[Offset: 0x70, Size: 0x10]
	FString PartsIcon;//[Offset: 0x80, Size: 0x10]
	int EffectCondition;//[Offset: 0x90, Size: 0x4]
	int[] PartsEffect;//[Offset: 0x98, Size: 0x10]
	float[] PartsValue;//[Offset: 0xa8, Size: 0x10]
	int[] PartsWeaponID;//[Offset: 0xb8, Size: 0x10]
	int PartsName;//[Offset: 0xc8, Size: 0x4]
	FString[] PartsDesc;//[Offset: 0xd0, Size: 0x10]
	int WeaponPartDamage;//[Offset: 0xe0, Size: 0x4]
	int WeaponPartRateOfFire;//[Offset: 0xe4, Size: 0x4]
	int WeaponPartRecoil;//[Offset: 0xe8, Size: 0x4]
	int WeaponPartSpread;//[Offset: 0xec, Size: 0x4]
	int WeaponPartRange;//[Offset: 0xf0, Size: 0x4]
	int WeaponPartMobility;//[Offset: 0xf4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponPartsOp.SolarTableReaderBase.Object
	SolarTablesData_WeaponPartsOp TryGetRowData(int Key, out bool HasKey);// 0x5d3d04f39041
	bool HasRowKey(int Key);// 0x5d3c04f39041
	bool HasColKey(FString Key);// 0x5d3b04f39041
	FString GetTableName();// 0x5d3a04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5d3904f39041
	SolarTablesData_WeaponPartsOp GetRowData(int Key);// 0x5d3804f39041
	int GetRowCount();// 0x5d3704f39041
	int GetDataNum();// 0x5d3604f39041
	FString[] GetColKeys();// 0x5d3504f39041
	int GetColCount();// 0x5d3404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponPartsOp.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int EffectOperator;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponQuality.SolarTableReaderBase.Object
	SolarTablesData_WeaponQuality TryGetRowData(int Key, out bool HasKey);// 0x5d4704f39041
	bool HasRowKey(int Key);// 0x5d4604f39041
	bool HasColKey(FString Key);// 0x5d4504f39041
	FString GetTableName();// 0x5d4404f39041
	int GetRowKeys(out int[] OutKeys);// 0x5d4304f39041
	SolarTablesData_WeaponQuality GetRowData(int Key);// 0x5d4204f39041
	int GetRowCount();// 0x5d4104f39041
	int GetDataNum();// 0x5d4004f39041
	FString[] GetColKeys();// 0x5d3f04f39041
	int GetColCount();// 0x5d3e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponQuality.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Quality;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_SecondMode.SolarTableReaderBase.Object
	SolarTablesData_SecondMode TryGetRowData(int Key, out bool HasKey);// 0x5c4d04f39041
	bool HasRowKey(int Key);// 0x5c4c04f39041
	bool HasColKey(FString Key);// 0x5c4b04f39041
	FString GetTableName();// 0x5c4a04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5c4904f39041
	SolarTablesData_SecondMode GetRowData(int Key);// 0x5c4804f39041
	int GetRowCount();// 0x5c4704f39041
	int GetDataNum();// 0x5c4604f39041
	FString[] GetColKeys();// 0x5c4504f39041
	int GetColCount();// 0x5c4404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_SecondMode.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int UpperLimit;//[Offset: 0x10, Size: 0x4]
	float RestoreProgressPerSec;//[Offset: 0x14, Size: 0x4]
	float RestoreProgressPerKill;//[Offset: 0x18, Size: 0x4]
	float RestoreProgressPerDmg;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponSkin.SolarTableReaderBase.Object
	SolarTablesData_WeaponSkin TryGetRowData(int Key, out bool HasKey);// 0x5d5104f39041
	bool HasRowKey(int Key);// 0x5d5004f39041
	bool HasColKey(FString Key);// 0x5d4f04f39041
	FString GetTableName();// 0x5d4e04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5d4d04f39041
	SolarTablesData_WeaponSkin GetRowData(int Key);// 0x5d4c04f39041
	int GetRowCount();// 0x5d4b04f39041
	int GetDataNum();// 0x5d4a04f39041
	FString[] GetColKeys();// 0x5d4904f39041
	int GetColCount();// 0x5d4804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponSkin.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WeaponSkinType;//[Offset: 0x10, Size: 0x4]
	FString WeaponSkillQuality;//[Offset: 0x18, Size: 0x10]
	int SortId;//[Offset: 0x28, Size: 0x4]
	int weaponid;//[Offset: 0x2c, Size: 0x4]
	FString WeaponSkinResource;//[Offset: 0x30, Size: 0x10]
	int WeaponSkinAquiredThru;//[Offset: 0x40, Size: 0x4]
	int JumpPage;//[Offset: 0x44, Size: 0x4]
	FString KillBroadcast;//[Offset: 0x48, Size: 0x10]
	int ShopPropertyid;//[Offset: 0x58, Size: 0x4]
	int ItemID;//[Offset: 0x5c, Size: 0x4]
	bool DisplayInWeaponry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FString ChunkDir;//[Offset: 0x68, Size: 0x10]
	int ChunkID;//[Offset: 0x78, Size: 0x4]
	int AIRandomWeight;//[Offset: 0x7c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponSound.SolarTableReaderBase.Object
	SolarTablesData_WeaponSound TryGetRowData(int Key, out bool HasKey);// 0x5d6504f39041
	bool HasRowKey(int Key);// 0x5d6404f39041
	bool HasColKey(FString Key);// 0x5d6304f39041
	FString GetTableName();// 0x5d6204f39041
	int GetRowKeys(out int[] OutKeys);// 0x5d6104f39041
	SolarTablesData_WeaponSound GetRowData(int Key);// 0x5d6004f39041
	int GetRowCount();// 0x5d5f04f39041
	int GetDataNum();// 0x5d5e04f39041
	FString[] GetColKeys();// 0x5d5d04f39041
	int GetColCount();// 0x5d5c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponSound.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString Play_Fire_Auto_1P;//[Offset: 0x10, Size: 0x10]
	FString Play_Fire_Auto_3P;//[Offset: 0x20, Size: 0x10]
	FString Play_Fire_Auto_3P_Enemy;//[Offset: 0x30, Size: 0x10]
	FString Stop_Fire_Auto_1P;//[Offset: 0x40, Size: 0x10]
	FString Stop_Fire_Auto_3P;//[Offset: 0x50, Size: 0x10]
	FString Stop_Fire_Auto_3P_Enemy;//[Offset: 0x60, Size: 0x10]
	FString Play_Fire_Sigle_1P;//[Offset: 0x70, Size: 0x10]
	FString Play_Fire_Sigle_3P;//[Offset: 0x80, Size: 0x10]
	FString Play_Fire_Sigle_3P_Enemy;//[Offset: 0x90, Size: 0x10]
	FString Play_Fire_Burst_1P;//[Offset: 0xa0, Size: 0x10]
	FString Play_Fire_Burst_3P;//[Offset: 0xb0, Size: 0x10]
	FString Play_Fire_Burst_3P_Enemy;//[Offset: 0xc0, Size: 0x10]
	FString Stop_Fire_Burst_1P;//[Offset: 0xd0, Size: 0x10]
	FString Stop_Fire_Burst_3P;//[Offset: 0xe0, Size: 0x10]
	FString Stop_Fire_Burst_3P_Enemy;//[Offset: 0xf0, Size: 0x10]
	FString Play_FIRE_LAST_1P;//[Offset: 0x100, Size: 0x10]
	FString Play_FIRE_LAST_3P;//[Offset: 0x110, Size: 0x10]
	FString Play_FIRE_LAST_3P_Enemy;//[Offset: 0x120, Size: 0x10]
	FString Remain_Gun_RTPC_NAME;//[Offset: 0x130, Size: 0x10]
	FString Play_Skill_Cast_1P;//[Offset: 0x140, Size: 0x10]
	FString Play_Skill_Cast_3P;//[Offset: 0x150, Size: 0x10]
	FString Play_Skill_Cast_3P_Enemy;//[Offset: 0x160, Size: 0x10]
	FString Play_Fire_Lay_Tl_1P;//[Offset: 0x170, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P;//[Offset: 0x180, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P_Enemy;//[Offset: 0x190, Size: 0x10]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x1a0, Size: 0x10]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x1b0, Size: 0x10]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x1c0, Size: 0x10]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x1d0, Size: 0x10]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1e0, Size: 0x10]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1f0, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x200, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x210, Size: 0x10]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x220, Size: 0x10]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x230, Size: 0x10]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x240, Size: 0x10]
	FString Play_Fire_Overload_1P;//[Offset: 0x250, Size: 0x10]
	FString Play_Fire_Overload_3P;//[Offset: 0x260, Size: 0x10]
	FString Play_Fire_Overload_3P_Enemy;//[Offset: 0x270, Size: 0x10]
	FString Play_Reload_01_1P;//[Offset: 0x280, Size: 0x10]
	FString Play_Reload_01_3P;//[Offset: 0x290, Size: 0x10]
	FString Play_Reload_01_3P_Enemy;//[Offset: 0x2a0, Size: 0x10]
	FString Play_Reload_02_1P;//[Offset: 0x2b0, Size: 0x10]
	FString Play_Reload_02_3P;//[Offset: 0x2c0, Size: 0x10]
	FString Play_Reload_02_3P_Enemy;//[Offset: 0x2d0, Size: 0x10]
	FString Play_Reload_03_1P;//[Offset: 0x2e0, Size: 0x10]
	FString Play_Reload_03_3P;//[Offset: 0x2f0, Size: 0x10]
	FString Play_Reload_03_3P_Enemy;//[Offset: 0x300, Size: 0x10]
	FString Play_Bolt_1P;//[Offset: 0x310, Size: 0x10]
	FString Play_Bolt_3P;//[Offset: 0x320, Size: 0x10]
	FString Play_Bolt_3P_Enemy;//[Offset: 0x330, Size: 0x10]
	FString Play_Vehicle_Gun_On_3P;//[Offset: 0x340, Size: 0x10]
	FString Play_Vehicle_Gun_On_3P_Enemy;//[Offset: 0x350, Size: 0x10]
	FString Play_Vehicle_Gun_Loop_3P;//[Offset: 0x360, Size: 0x10]
	FString Play_Vehicle_Gun_Loop_3P_Enemy;//[Offset: 0x370, Size: 0x10]
	FString Play_Vehicle_Gun_Off_3P;//[Offset: 0x380, Size: 0x10]
	FString Play_Vehicle_Gun_Off_3P_Enemy;//[Offset: 0x390, Size: 0x10]
	FString Play_Fire_Auto_1P_Mute;//[Offset: 0x3a0, Size: 0x10]
	FString Play_Fire_Auto_3P_Mute;//[Offset: 0x3b0, Size: 0x10]
	FString Play_Fire_Auto_3P_Enemy_Mute;//[Offset: 0x3c0, Size: 0x10]
	FString Stop_Fire_Auto_1P_Mute;//[Offset: 0x3d0, Size: 0x10]
	FString Stop_Fire_Auto_3P_Mute;//[Offset: 0x3e0, Size: 0x10]
	FString Stop_Fire_Auto_3P_Enemy_Mute;//[Offset: 0x3f0, Size: 0x10]
	FString Play_Fire_Sigle_1P_Mute;//[Offset: 0x400, Size: 0x10]
	FString Play_Fire_Sigle_3P_Mute;//[Offset: 0x410, Size: 0x10]
	FString Play_Fire_Sigle_3P_Enemy_Mute;//[Offset: 0x420, Size: 0x10]
	FString Play_Fire_Burst_1P_Mute;//[Offset: 0x430, Size: 0x10]
	FString Play_Fire_Burst_3P_Mute;//[Offset: 0x440, Size: 0x10]
	FString Play_Fire_Burst_3P_Enemy_Mute;//[Offset: 0x450, Size: 0x10]
	FString Stop_Fire_Burst_1P_Mute;//[Offset: 0x460, Size: 0x10]
	FString Stop_Fire_Burst_3P_Mute;//[Offset: 0x470, Size: 0x10]
	FString Stop_Fire_Burst_3P_Enemy_Mute;//[Offset: 0x480, Size: 0x10]
	FString Play_Fire_Lay_Tl_1P_Mute;//[Offset: 0x490, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P_Mute;//[Offset: 0x4a0, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P_Enemy_Mute;//[Offset: 0x4b0, Size: 0x10]
	FString Play_Fire_Empty_1p;//[Offset: 0x4c0, Size: 0x10]
	FString Play_Fire_Empty_3p;//[Offset: 0x4d0, Size: 0x10]
	FString Play_Fire_Empty_3p_Enemy;//[Offset: 0x4e0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponStatu.SolarTableReaderBase.Object
	SolarTablesData_WeaponStatu TryGetRowData(int Key, out bool HasKey);// 0x5d6f04f39041
	bool HasRowKey(int Key);// 0x5d6e04f39041
	bool HasColKey(FString Key);// 0x5d6d04f39041
	FString GetTableName();// 0x5d6c04f39041
	int GetRowKeys(out int[] OutKeys);// 0x5d6b04f39041
	SolarTablesData_WeaponStatu GetRowData(int Key);// 0x5d6a04f39041
	int GetRowCount();// 0x5d6904f39041
	int GetDataNum();// 0x5d6804f39041
	FString[] GetColKeys();// 0x5d6704f39041
	int GetColCount();// 0x5d6604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponStatu.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float Stand;//[Offset: 0x10, Size: 0x4]
	float CrouchDown;//[Offset: 0x14, Size: 0x4]
	float Still;//[Offset: 0x18, Size: 0x4]
	float Run;//[Offset: 0x1c, Size: 0x4]
	float Spint;//[Offset: 0x20, Size: 0x4]
	float Jump;//[Offset: 0x24, Size: 0x4]
	float Fly;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2388, Size: 0x8]
	class GameplayAbility[] DefaultAbilitiesExtra;//[Offset: 0x2390, Size: 0x10]
	S_AiItem NewVar;//[Offset: 0x23a0, Size: 0xc]
	void GetWeaponLevelDamageBonus(out float Result, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, int CallFunc_GetCurrentActiveSlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0xde10051b9001
	byte [A]GetHealthState(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, bool CallFunc_IsDying_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, byte K2Node_Select_Default, byte K2Node_Select_Default);// 0xde11051b9001
	bool [S]SkyDiveFly(Vector Location, float Height, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool Temp_bool_Variable, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, bool K2Node_Select_Default);// 0xde12051b9001
	bool [S]Set Sky Dive State(bool CallFunc_TryActivateAbilityByClass_ReturnValue);// 0xde13051b9001
	void OnCompleted_84F20D844D539263D5B45F9EDF867241(SolarPlayerWeapon* Weapon);// 0xde14051b9001
	void OnCompleted_C9B9AA40496B70A95EF897A2092C6753(SolarPlayerWeapon* Weapon);// 0xde15051b9001
	void OnCompleted_9F8149E84A6F3575574B32ADD8BF2960(SolarPlayerWeapon* Weapon);// 0xde16051b9001
	void BeginPlayBlueprint();// 0x2dffba0522902e
	void SetWeapon(byte Slot, int WeapoinId, out const WeaponPartsData Parts);// 0xde18051b9001
	void BatchSetItem(out const S_AiItem[] ItemList);// 0xffffff8f04f39002
	void [s]GiveWeapon(const bool bDestroyPrevWeapon, const byte Slot, const int ItemID);// 0xde1a051b9001
	static void ExecuteUbergraph_BP_Character_Framework(int EntryPoint, const byte Temp_byte_Variable, byte Temp_byte_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const int K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, SolarPlayerWeapon* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, SolarPlayerWeapon* Temp_object_Variable, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, const byte Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const byte Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const byte Temp_byte_Variable, const byte Temp_byte_Variable, const byte Temp_byte_Variable, byte Temp_byte_Variable, int Temp_int_Variable, const byte K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, const byte[] K2Node_MakeArray_Array, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_AddBackpackItem_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_SetWeaponPartByPartID_Success, FString CallFunc_Conv_BoolToString_ReturnValue, SolarPlayerWeapon* Temp_object_Variable, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Variable, class GameplayAbility CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameplayAbilitySpecHandle CallFunc_K2_GiveAbility_ReturnValue, byte K2Node_CustomEvent_Slot, int K2Node_CustomEvent_WeapoinId, const WeaponPartsData K2Node_CustomEvent_Parts, bool CallFunc_SetWeaponParts_ReturnValue, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, const S_AiItem[] K2Node_CustomEvent_ItemList, S_AiItem CallFunc_Array_Get_Item, S_AiItem CallFunc_Array_Get_Item, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, const bool K2Node_CustomEvent_bDestroyPrevWeapon, const byte K2Node_CustomEvent_Slot, const int K2Node_CustomEvent_ItemID, const <FString,FString> K2Node_MakeMap_Map, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xde1c051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x22d0, Size: 0x8]
	SolarAbilityComponent* SolarAbility;//[Offset: 0x22d8, Size: 0x8]
	Vector PreviousLocation;//[Offset: 0x22e0, Size: 0xc]
	float Time;//[Offset: 0x22ec, Size: 0x4]
	float CurrentTime;//[Offset: 0x22f0, Size: 0x4]
	float PreviousTime;//[Offset: 0x22f4, Size: 0x4]
	float DeltaTime;//[Offset: 0x22f8, Size: 0x4]
	Vector DeltaLocation;//[Offset: 0x22fc, Size: 0xc]
	bool OnTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2308, Size: 0x1]
	float Speed;//[Offset: 0x230c, Size: 0x4]
	Vector2D Direction;//[Offset: 0x2310, Size: 0x8]
	float[] SpeedRecord;//[Offset: 0x2318, Size: 0x10]
	Vector[] LocationRecord;//[Offset: 0x2328, Size: 0x10]
	float[] Record_X;//[Offset: 0x2338, Size: 0x10]
	float[] Record_y;//[Offset: 0x2348, Size: 0x10]
	float SpeedFixBase;//[Offset: 0x2358, Size: 0x4]
	CurveFloat* SpeedFix;//[Offset: 0x2360, Size: 0x8]
	delegate OnEjectingStateChanged;//[Offset: 0x2368, Size: 0x10]
	byte EjectState;//[Offset: 0x2378, Size: 0x1]
	int PoisonDamageNum;//[Offset: 0x237c, Size: 0x4]
	SolarCharacter* Shadow AI;//[Offset: 0x2380, Size: 0x8]
	SolarCameraComponent* GetSolarCameraComponent();// 0xdc4a051b9008
	SolarSpringArmComponent* GetSolarSpringArmComponent();// 0xdddf051b9001
	void RefreshRenderConsoleVarForSkydive(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarCityName*[] CallFunc_GetAllActorsOfClass_OutActors, SolarCityName* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetRenderParametersBasedOnDifferentStates_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xdde0051b9001
	bool Is Observation Target(bool CallFunc_IsBeingSpectated_ReturnValue, bool CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xdde1051b9001
	float FixSpeed(float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0xdde2051b9001
	void FigureSpeed(float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_GetFixedSpeed_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0xdde3051b9001
	float GetFixedY(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue);// 0xdde4051b9001
	float GetFixedX(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue);// 0xdde5051b9001
	void SetCameraInput(Vector NewLocalVar, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector Temp_struct_Variable, float CallFunc_GetFixedY_ReturnValue, float CallFunc_GetFixedX_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Multiply_VectorFloat_ReturnValue);// 0xdde6051b9001
	void SetCameraInput(float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, FString CallFunc_Conv_Vector2dToString_ReturnValue);// 0xdde7051b9001
	Vector GetFixedLocation(Vector InLocation, int NewLocalVar, Vector NewLocalVar, bool Temp_bool_Variable, bool Temp_bool_Variable, Vector Temp_struct_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector CallFunc_Divide_VectorInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Array_Get_Item, Vector K2Node_Select_Default, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0xdde9051b9001
	float GetFixedSpeed(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xddea051b9001
	void DecelerationEffectUpdate(out float Altitude, out ParticleSystemComponent*[] Effects, float tmpAltitudePercent, float CallFunc_GetSkydiveLandingHeight_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0xddeb051b9001
	void UndecelerationEffectUpdate(out float Altitude, out ParticleSystemComponent*[] Effects, float L_Var, CurveFloat* UndecelerationEffectCurve, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetFloatValue_ReturnValue);// 0xddec051b9001
	void InpActEvt_BackSpace_K2Node_InputKeyEvent(Key Key);// 0xdded051b9001
	void InpActEvt_Home_K2Node_InputKeyEvent(Key Key);// 0xddee051b9001
	void InpActEvt_End_K2Node_InputKeyEvent(Key Key);// 0xddef051b9001
	void InpActEvt_Delete_K2Node_InputKeyEvent(Key Key);// 0xddf0051b9001
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0xddf1051b9001
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0xddf2051b9001
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0xddf3051b9001
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0xddf4051b9001
	void ReceiveEndPlay(byte EndPlayReason);// 0xddf5051b9001
	void ReceiveBeginPlay();// 0xddf6051b9001
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x12afb04f39041
	void Event_UseReviveItem(SCMPlayerState* Player);// 0x13060051b9001
	void OnSkydiveStageChanged(enum LastStage, enum CurrentStage);// 0x1c008c05089100
	void OnCharacterEjectStateChanged(byte State);// 0xde1d051b9001
	void ExecuteUbergraph_BP_SolarCharacterPlayer(int EntryPoint, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, ParticleSystemComponent*[] CallFunc_GetAllSkydiveFlyingEffects_OutEffects, float K2Node_Event_DistanceToGround, ParticleSystemComponent*[] CallFunc_GetAllSkydiveLandingEffects_OutEffects, bool K2Node_Event_bIsInWater, Key K2Node_InputKeyEvent_Key, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, float K2Node_Event_FallingRate, byte K2Node_Event_EndPlayReason, bool CallFunc_IsEditor_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Key K2Node_InputKeyEvent_Key, float K2Node_Event_InDuration, bool K2Node_Event_bInOpenScope, SCMPlayerState* K2Node_CustomEvent_Player, bool CallFunc_HasAuthority_ReturnValue, Key K2Node_InputKeyEvent_Key, bool CallFunc_IsEditor_ReturnValue, bool CallFunc_IsEditor_ReturnValue, bool CallFunc_IsEditor_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, enum K2Node_Event_LastStage, enum K2Node_Event_CurrentStage, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte K2Node_Select_Default, bool CallFunc_BooleanOR_ReturnValue, byte K2Node_CustomEvent_State, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, ABP_SolarCharacter_FPP_C* K2Node_DynamicCast_AsABP_Solar_Character_FPP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsBeingSpectated_ReturnValue, Key K2Node_InputKeyEvent_Key);// 0xde1e051b9001
	void OnEjectingStateChanged__DelegateSignature(byte State, SolarCharacter* TargetCharacter);// 0x13057051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartsData
	int ScopeId;//[Offset: 0x0, Size: 0x4]
	int GripID;//[Offset: 0x4, Size: 0x4]
	int GunStockID;//[Offset: 0x8, Size: 0x4]
	int MuzzleID;//[Offset: 0xc, Size: 0x4]
	int ClipID;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_AiItem
	byte ItemType_2_314140C646418678444E9DB5DBB9CB11;//[Offset: 0x0, Size: 0x1]
	int ItemID_5_9414785640F928576D3321856C20F5FD;//[Offset: 0x4, Size: 0x4]
	int Count_7_49130AA64D9339657AC5579D1E066466;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameModeWeaponAction.BlueprintAsyncActionBase.Object
	delegate OnCompleted;//[Offset: 0x30, Size: 0x10]
	SolarGameModeWeaponAction* SetCharacterWeaponBySeq(Object* WorldContextObject, SolarCharacter* TargetCharacter, const bool bDestroyPrevWeapon, const byte Slot, const int ItemID);// 0x4c2b04f39041
	void OnWeaponCreated(byte SlotIndex, SolarPlayerWeapon* WeaponPtr, SolarBackpackComponent* SolarBackpackComponent);// 0x4c2a04f39041
	void CreateWeaponAsync(const byte SlotIndex, bool bDestroyPrevWeapon, out const SolarItemData InItemData, SolarBackpackComponent* InSolarBackpackComponent);// 0x4c2904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ABP_SolarCharacter_FPP_C.AnimInstance.Object
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x268, Size: 0x30]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x298, Size: 0x28]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2c0, Size: 0x28]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2e8, Size: 0x78]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x360, Size: 0x30]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x390, Size: 0x78]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x408, Size: 0x30]
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x438, Size: 0xb0]
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x4e8, Size: 0x48]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x530, Size: 0x78]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x5a8, Size: 0xa8]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x650, Size: 0x20]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x670, Size: 0x20]
	SolarCharacter* SolarCharacter;//[Offset: 0x690, Size: 0x8]
	bool IsScopeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	float ScopeFadeTime;//[Offset: 0x69c, Size: 0x4]
	bool IsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 0x1]
	bool IsShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a1, Size: 0x1]
	bool ShootDouble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a2, Size: 0x1]
	float Horizontal;//[Offset: 0x6a4, Size: 0x4]
	float Vertical;//[Offset: 0x6a8, Size: 0x4]
	bool bUseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 0x1]
	float K2Node_Event_DeltaTimeX;//[Offset: 0x6b0, Size: 0x4]
	SolarCharacter* K2Node_DynamicCast_AsSolar_Character;//[Offset: 0x6b8, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1]
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_TransitionResult_768665AB4918F96C9C3C8F92EF926EE4();// 0x10ddd04f39041
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_TransitionResult_01B670704C4A0F8E519CD8A192C5E1D6();// 0x10dde04f39041
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_BlendListByBool_F136F87A4DDCD2678555C9B592100DA7();// 0x10ddf04f39041
	void BlueprintUpdateAnimation(float bpp__DeltaTimeX__pf);// 0x10de004f39041
	void BlueprintInitializeAnimation();// 0x10de104f39041
	void BlueprintBeginPlay();// 0xdee2051b9008
	void AnimGraph(out PoseLink bpp__AnimGraph__pf);// 0x13d2d051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PoseLink.PoseLinkBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x10, Size: 0x10]
	FName Name;//[Offset: 0x20, Size: 0x8]
	FName Group;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_Base
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x30, Size: 0x8]
	float PlayRateBasis;//[Offset: 0x38, Size: 0x4]
	float PlayRate;//[Offset: 0x3c, Size: 0x4]
	InputScaleBiasClamp PlayRateScaleBiasClamp;//[Offset: 0x40, Size: 0x30]
	float StartPosition;//[Offset: 0x70, Size: 0x4]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_AssetPlayerBase.AnimNode_Base
	int GroupIndex;//[Offset: 0x10, Size: 0x4]
	byte GroupRole;//[Offset: 0x14, Size: 0x1]
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	float BlendWeight;//[Offset: 0x18, Size: 0x4]
	float InternalTimeAccumulator;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputScaleBiasClamp
	bool bMapRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bInterpResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	InputRange InRange;//[Offset: 0x4, Size: 0x8]
	InputRange OutRange;//[Offset: 0xc, Size: 0x8]
	float Scale;//[Offset: 0x14, Size: 0x4]
	float Bias;//[Offset: 0x18, Size: 0x4]
	float ClampMin;//[Offset: 0x1c, Size: 0x4]
	float ClampMax;//[Offset: 0x20, Size: 0x4]
	float InterpSpeedIncreasing;//[Offset: 0x24, Size: 0x4]
	float InterpSpeedDecreasing;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_StateResult.AnimNode_Root.AnimNode_Base
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x10, Size: 0x4]
	int MaxTransitionsPerFrame;//[Offset: 0x14, Size: 0x4]
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x10, Size: 0x10]
	FName SlotName;//[Offset: 0x20, Size: 0x8]
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x10, Size: 0x10]
	float[] BlendTime;//[Offset: 0x20, Size: 0x10]
	enum TransitionType;//[Offset: 0x30, Size: 0x1]
	enum BlendType;//[Offset: 0x31, Size: 0x1]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	CurveFloat* CustomBlendCurve;//[Offset: 0x38, Size: 0x8]
	BlendProfile* BlendProfile;//[Offset: 0x40, Size: 0x8]
	int LODThreshold;//[Offset: 0x48, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_ConvertLocalToComponentSpace.AnimNode_Base
	PoseLink LocalPose;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_ConvertComponentToLocalSpace.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ComponentSpacePoseLink.PoseLinkBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSubsystem.WorldSubsystem.Subsystem.Object
	delegate OnVehicleSpawned;//[Offset: 0x30, Size: 0x10]
	delegate OnVehicleDestroyed;//[Offset: 0x40, Size: 0x10]
	void GetActiveVehicleList(out Actor*[] OutActiveVehicles);// 0x5f3c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_AiManagerBattleRoyale_C.BPC_AiManagerBase_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe8, Size: 0x8]
	SCMPlayerState*[] TempAI;//[Offset: 0xf0, Size: 0x10]
	<FString,int> MemberAIOrder;//[Offset: 0x100, Size: 0x50]
	int SpawnIndex;//[Offset: 0x150, Size: 0x4]
	bool bCanSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	<FString,int> PureAIOrder;//[Offset: 0x158, Size: 0x50]
	bool bSpawnPlayerTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	int AiCountPreSpawn;//[Offset: 0x1ac, Size: 0x4]
	int RealPlayer;//[Offset: 0x1b0, Size: 0x4]
	SCMPlayerState*[] TeammateAI;//[Offset: 0x1b8, Size: 0x10]
	bool bTeammateAiFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	S_WarmGameConfig WarmGameConfig;//[Offset: 0x1d0, Size: 0x18]
	bool bIsWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	FString[] PureAiTeams;//[Offset: 0x1f0, Size: 0x10]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	static void ReplenishAITeammate(byte[] NewLocalVar, SolarTeamInfo*[] emptyTeam, FString[] AITeam, const enum[] Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, const byte[] Temp_byte_Variable, int CallFunc_Add_IntInt_ReturnValue, const enum[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, int CallFunc_GetMatchTeamMateCount_ReturnValue, const FString[] Temp_string_Variable, SolarTeamInfo* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsAPlayerTeam_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, <FString,int> CallFunc_GetMemberAIOrder_Team_Count, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const enum[] Temp_byte_Variable, SolarTeamInfo* CallFunc_Array_Get_Item, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SolarPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsAOnlyBotTeam_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, const FString[] Temp_string_Variable, SCMPlayerState* CallFunc_Array_Get_Item, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Map_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Pick_Team_Team);// 0xbfe4051b9001
	BPC_CountDown_C* GetCountDownComponent(GameStateBase* CallFunc_GetGameState_ReturnValue, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue);// 0xbfe5051b9001
	void StopAiBehavior(SCMPlayerState*[] Temp, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarBotAIController* CallFunc_GetAIController_Controller, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xbfe6051b9001
	bool CanModeSpawnAiTeammate(bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, bool CallFunc__S_PlayInEditor_bIsEditor, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0xbfe7051b9001
	void GetAIController(SolarPlayerState* PlayerState, out SolarBotAIController* Controller, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue);// 0xbfe8051b9001
	static void SpawnAI(bool bTeammateAI, FString Team, out SCMPlayerState* PlayerState, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetSolarGameMode_ReturnValue, int CallFunc_Map_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const SCMPlayerState*[] K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_GetRandomCharacter_Output, int CallFunc_GetRandomDifficulty_Difficulty, Object* CallFunc_LoadAsset_Blocking_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, BehaviorTree* K2Node_DynamicCast_AsBehavior_Tree, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_SpawnLocation_ReturnValue, SolarPlayerState* CallFunc_CreateBotAIAndJoinTeamByName_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue);// 0xbfe9051b9001
	void GetSpawnInterval(out float Interval, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, BPC_CountDown_C* CallFunc_GetCountDownComponent_ReturnValue, BPC_CountDown_C* CallFunc_GetCountDownComponent_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, float K2Node_Select_Default, float K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0xbfea051b9001
	void UpdatePureAiOrder(int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetMatchTeamMateCount_ReturnValue, int K2Node_Select_Default, FString[] CallFunc_Map_Keys_Keys);// 0xbfeb051b9001
	static void Pick Team(bool RealPlayerTeam, out FString Team, FString tempTeam, bool Temp_bool_Variable, <FString,int> K2Node_Select_Default, FString[] CallFunc_Map_Keys_Keys, bool CallFunc_Map_Remove_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0xfffffffee9501080
	void DeleteTempAI(int count, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, const SCMPlayerState*[] K2Node_MakeArray_Array, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_DeleteAIFromBattleForPlayer_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xbfed051b9001
	void RunBehaviourTree(SCMPlayerState* Player, BehaviorTree* BTAsset, enum CallFunc_GetPlayerPawn_outType, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xbfee051b9001
	Vector SpawnLocation(BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0xbfef051b9001
	bool IsPlayerFull(BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xbff0051b9001
	BP_Logic_BattleRoyale_C* GetLogicComponent(GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0xbff1051b9001
	void MatchFinished();// 0xbff2051b9001
	void PreSpawnAI();// 0xbff3051b9001
	void ReceiveBeginPlay();// 0x1279e051b9008
	void SpawnAIDynamic();// 0xbff5051b9001
	void OnBattleStateChanged(byte NewState);// 0x1279d051b9008
	void CustomEvent();// 0xbff7051b9001
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0x1281a051b9008
	static void ExecuteUbergraph_BPC_AiManagerBattleRoyale(int EntryPoint, bool Temp_bool_Variable, bool CallFunc_IsPlayerFull_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Map_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsPlayerFull_ReturnValue, SCMPlayerState* CallFunc_SpawnAI_PlayerState, int CallFunc_Map_Length_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_RandomIntInRange_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_NewState, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BehaviorTree* K2Node_Select_Default, Object* CallFunc_LoadAsset_Blocking_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BehaviorTree* K2Node_DynamicCast_AsBehavior_Tree, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetSpawnInterval_Interval, FString CallFunc_Pick_Team_Team, int Temp_int_Variable, SCMPlayerState* CallFunc_SpawnAI_PlayerState, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_bIsAi, bool CallFunc_Not_PreBool_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_CanModeSpawnAiTeammate_ReturnValue, <FString,int> CallFunc_GetMemberAIOrder_Team_Count, bool Temp_bool_Variable, int K2Node_Select_Default);// 0x1c01f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_AiManagerBase_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	FString PreSpawnAiTeams;//[Offset: 0xb8, Size: 0x10]
	int TeammateCount;//[Offset: 0xc8, Size: 0x4]
	SCMPlayerState*[] AIList;//[Offset: 0xd0, Size: 0x10]
	int AILevelMax;//[Offset: 0xe0, Size: 0x4]
	int DefaultAiLevel;//[Offset: 0xe4, Size: 0x4]
	int GetMatchTeammateCount(GameInstance* CallFunc_GetGameInstance_ReturnValue, SolarGameInstanceBase* K2Node_DynamicCast_AsSolar_Game_Instance_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetNumMode_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0xc06d051b9001
	void GetRandomDifficulty(out int Difficulty, <int,int> CallFunc_GetAILevelConfigCurrentMatch_AILevelConfig, bool CallFunc_GetAILevelConfigCurrentMatch_ReturnValue, int CallFunc_GetRandomKeyInWidget_HitKey);// 0xc06e051b9001
	static void GetMemberAIOrder(out <FString,int> Team-Count, SolarTeamInfo* NewLocalVar, SolarTeamInfo*[] RealPlayerTeams, <FString,int> TempTeamCount, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetMatchTeamMateCount_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo*[] CallFunc_GetPlayerTeams_OutTeams, int CallFunc_Array_Length_ReturnValue, SolarTeamInfo* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_HasTeammatesAI_ReturnValue);// 0xc06f051b9001
	void ReceiveBeginPlay();// 0x1288b051b9008
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0x12897051b9008
	void CustomEvent();// 0xc072051b9001
	static void ExecuteUbergraph_BPC_AiManagerBase(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, GameModeBase* CallFunc_GetGameMode_ReturnValue, SCMPlayerState* K2Node_CustomEvent_NewPlayer, bool K2Node_CustomEvent_bIsAi, BP_Logic_Framework_C* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_Array_Add_ReturnValue, <int,int> CallFunc_GetAILevelConfigCurrentMatch_AILevelConfig, bool CallFunc_GetAILevelConfigCurrentMatch_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_MaxOfIntArray_IndexOfMaxValue, int CallFunc_MaxOfIntArray_MaxValue);// 0x1336d051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_WarmGameConfig
	class BP_WarmGameLogicBase_C* WarmGameLogic_11_C4D3600041B8F0E806BDC09E30D6C1D0;//[Offset: 0x0, Size: 0x8]
	S_WarmGameAiConfig[] AiTeammates_15_B5CA8DEC448F508FECCA08B77C240AFC;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_WarmGameLogicBase_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
	void Event_ExecLogic();// 0x954a04f569c3
	void ExecuteUbergraph_BP_WarmGameLogicBase(int EntryPoint);// 0x1c01904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_WarmGameAiConfig
	SolarBotAIConfig* ConfigPreset_9_3A28EF82445B053255E222A49DE8116E;//[Offset: 0x0, Size: 0x8]
	int Difficulty_2_BC1C176F4C7CBB4D6FC889B2806BF007;//[Offset: 0x8, Size: 0x4]
	int Preference_6_7DE61082428EF32F3BEFE6AFA07875B9;//[Offset: 0xc, Size: 0x4]
	int Substitute_5_5FA843ED4EF730ADF049548C170D13E7;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_AirlineCruise_C.AirlineCruiseComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x140, Size: 0x8]
	int AirlineID;//[Offset: 0x148, Size: 0x4]
	<SolarPlayerState*,Vector> EjectLocation;//[Offset: 0x150, Size: 0x50]
	<SolarPlayerState*,Vector> LandLocation;//[Offset: 0x1a0, Size: 0x50]
	SolarPlayerState*[] ForceJumpPlayerList;//[Offset: 0x1f0, Size: 0x10]
	SolarCharacter*[] CruisePlayers;//[Offset: 0x200, Size: 0x10]
	AirlineData AirlineData;//[Offset: 0x210, Size: 0x28]
	float Height;//[Offset: 0x238, Size: 0x4]
	float Speed;//[Offset: 0x23c, Size: 0x4]
	bool ClearAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	bool bUseSpecificAirlineData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1]
	AirlineData SpecificAirlineData;//[Offset: 0x244, Size: 0x28]
	bool GetPlayerForceJumped(out const SolarPlayerState* TargetPlayer, bool CallFunc_Array_Contains_ReturnValue);// 0xc036051b9001
	void GetPlayerLandLocation(out const SolarPlayerState* TargetPlayer, out Vector Location, out bool Succeed, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0xc037051b9001
	void GetPlayerEjectLocation(out const SolarPlayerState* TargetPlayer, out Vector Location, out bool Succeed, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0xc038051b9001
	void GetAirlineData_RealWorld(out const AirlineData AirlineData, out Vector2D LineStart, out Vector2D LineEnd, out Vector2D JumpStart, out Vector2D JumpEnd, out float Speed, out float Hight, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue);// 0xc039051b9001
	void MiniMap2RealWorld(Vector2D JumpStart, Vector2D JumpEnd, Vector2D LineStart, Vector2D LineEnd, out Vector2D JumpStartR, out Vector2D JumpEndR, out Vector2D LineStartR, out Vector2D LineEndR, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue);// 0xc03a051b9001
	static void StartParachutingWithRandomAirline(out SolarCharacter*[] TargetCharacters, out int Air Line ID, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SolarCharacter* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_BeginCruise_IntoParachuteZoneTime, float CallFunc_BeginCruise_ForceParachuteTime, float CallFunc_BeginCruise_CruiseEndTime, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue, Vector2D CallFunc_GetAirlineData_RealWorld_LineStart, Vector2D CallFunc_GetAirlineData_RealWorld_LineEnd, Vector2D CallFunc_GetAirlineData_RealWorld_JumpStart, Vector2D CallFunc_GetAirlineData_RealWorld_JumpEnd, float CallFunc_GetAirlineData_RealWorld_Speed, float CallFunc_GetAirlineData_RealWorld_Hight, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x12873051b9008
	void StartParachuting(out const SolarCharacter*[] TargetCharacters, bool ClearAllItems, int AirlineID, out const AirlineData AirlineData);// 0xc03c051b9001
	void OnPlayerEjectingStateChanged(byte State, SolarCharacter* TargetCharacter);// 0x1286f051b9008
	void SetSpecificAirlineData(out const AirlineData AirlineData);// 0xc051051b9001
	void ExecuteUbergraph_BPC_AirlineCruise(int EntryPoint, int Temp_int_Array_Index_Variable, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, const SolarCharacter*[] K2Node_CustomEvent_TargetCharacters, bool K2Node_CustomEvent_ClearAllItems, int K2Node_CustomEvent_AirlineID, const AirlineData K2Node_CustomEvent_AirlineData, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, byte Temp_byte_Variable, <SolarPlayerState*,Vector> K2Node_Select_Default, BoarderInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, SolarCharacter* CallFunc_Array_Get_Item, const Transform CallFunc_GetTransform_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, float CallFunc_BeginCruise_IntoParachuteZoneTime, float CallFunc_BeginCruise_ForceParachuteTime, float CallFunc_BeginCruise_CruiseEndTime, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, const AirlineData K2Node_CustomEvent_AirlineData, const AirlineData K2Node_Select_Default, Vector2D CallFunc_GetAirlineData_RealWorld_LineStart, Vector2D CallFunc_GetAirlineData_RealWorld_LineEnd, Vector2D CallFunc_GetAirlineData_RealWorld_JumpStart, Vector2D CallFunc_GetAirlineData_RealWorld_JumpEnd, float CallFunc_GetAirlineData_RealWorld_Speed, float CallFunc_GetAirlineData_RealWorld_Hight, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue);// 0x12867051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AirlineCruiseComponent.GameModeCompBase.ActorComponent.Object
	int UsedAirlineID;//[Offset: 0xcc, Size: 0x4]
	class SolarCapsuleRoot* CapsuleRootClass;//[Offset: 0xd0, Size: 0x8]
	SolarCapsuleRoot* CapsuleRoot;//[Offset: 0xd8, Size: 0x8]
	<int,AirlineData> AirlineDataList;//[Offset: 0xe0, Size: 0x50]
	SolarCharacter* CruiseTemplate;//[Offset: 0x130, Size: 0x8]
	void OnPlayerJoin(SCMPlayerState* PlayerState);// 0x44ca04f39041
	void OnCruiseCompleted(Actor* DestroyedRoot);// 0x44c904f39041
	void OnAIJoin(SCMPlayerState* PlayerState);// 0x44c804f39041
	int GetUsedAirlineData(out AirlineData OutData);// 0x44c704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SBattleRoyaleGameModeAIComp.SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	bool bBotSkipAICruise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	float MaxLootDistanceToAirline;//[Offset: 0x19c, Size: 0x4]
	bool bCanSelectLootZoneOutPoisonCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Mode_BattleRoyale_C.BP_Mode_Framework_C.SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x798, Size: 0x8]
	BPC_WarmGame_BattleRoyale_C* BPC_WarmGame_BattleRoyale;//[Offset: 0x7a0, Size: 0x8]
	BPC_AiManagerBattleRoyale_C* BPC_AiManagerBattleRoyale;//[Offset: 0x7a8, Size: 0x8]
	NgaiGameModeComponent* NgaiGameMode;//[Offset: 0x7b0, Size: 0x8]
	BattleRoyaleGameModeAIComp_Custom_C* BattleRoyaleGameModeAIComp_Custom;//[Offset: 0x7b8, Size: 0x8]
	BPC_AirlineCruise_C* BPC_AirlineCruise;//[Offset: 0x7c0, Size: 0x8]
	BP_MapInfoComponent_C* BP_MapInfoComponent;//[Offset: 0x7c8, Size: 0x8]
	AirlineCruiseComponent* GetAirlineCruiseComponent();// 0x2ad42b20
	bool IsKillWhenPlayerOut(SolarPlayerState* PlayerState, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsKillWhenPlayerOut_ReturnValue, bool CallFunc_IsKillWhenPlayerOut_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_DoesDistributeForDomestic_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, int CallFunc_GetRemainingTeamCount_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x28850051b9008
	void ReceiveBeginPlay();// 0x130df051b9001
	void UpdateDeserterTag(SolarPlayerState* PlayerState);// 0xbda6051b9001
	void ExecuteUbergraph_BP_Mode_BattleRoyale(int EntryPoint, bool CallFunc_DoesDistributeForDomestic_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, int CallFunc_GetRemainingTeamCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, SolarPlayerState* K2Node_Event_PlayerState, byte CallFunc_GetTeamRank_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_LessEqual_ByteByte_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, bool CallFunc_HasSettled_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_GetRemainingTeamCount_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x15bbc051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Mode_Framework_C.SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x790, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	float TimeOutSeconds;//[Offset: 0x5e0, Size: 0x4]
	CGMLogicComponent* LogicComponent;//[Offset: 0x698, Size: 0x8]
	CGMDeathComponent* DeathComponent;//[Offset: 0x6a0, Size: 0x8]
	SCMPlayerController*[] WaitingPlayers;//[Offset: 0x6b8, Size: 0x10]
	delegate OnPlayerJoin;//[Offset: 0x6d8, Size: 0x10]
	delegate OnAIJoin;//[Offset: 0x6e8, Size: 0x10]
	delegate OnPlayerOutEvent;//[Offset: 0x6f8, Size: 0x10]
	class GameManagerBase[] GameManagerClasses;//[Offset: 0x708, Size: 0x10]
	class CGMLogicComponent* LogicComponentClass;//[Offset: 0x718, Size: 0x8]
	class CGMDeathComponent* DeathComponentClass;//[Offset: 0x720, Size: 0x8]
	class SCMPlayerRPCComponent* PlayerRPCComponentClass;//[Offset: 0x728, Size: 0x8]
	void TimerStartGame();// 0x266d04f39041
	void StartBattle();// 0x266c04f39041
	void ResendResurrectCoin(SolarCharacter* ResurrectCharacter, SCMPlayerState* ResurrectPlayer);// 0x266b04f39041
	bool RequestAllowReconnectGame(SCMPlayerState* InPC);// 0x266a04f39041
	void ReceiveSpectatorJoinData(SCMPlayerState* Player);// 0x266904f39041
	void ReceiveServerLevelLoaded(FString LevelName);// 0x266804f39041
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x266704f39041
	void ReceivePlayerReJoin(SCMPlayerState* NewPlayer);// 0x266604f39041
	void ReceivePlayerPreLogin(FString PlayerId, SCMPlayerState* OfflinePlayer, out FString ErrorMsg);// 0x266504f39041
	void ReceivePlayerNonSpectatorJoinData(SCMPlayerState* Player);// 0x266404f39041
	void ReceivePlayerLevelLoaded(SCMPlayerController* Player, FString LevelName);// 0x266304f39041
	void ReceivePlayerJoinData(FString PlayerId);// 0x266204f39041
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x266104f39041
	void ReceivePlayerJoin(SCMPlayerState* NewPlayer, bool IsAI);// 0x266004f39041
	void ReceivePlayerCheat(SolarPlayerState* InCheater);// 0x265f04f39041
	void ReceivePlayerCancelJoin(FString PlayerId);// 0x265e04f39041
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x265d04f39041
	void ReceivePlayerAbnormal(SolarPlayerState* InAbnormalPlayer);// 0x265c04f39041
	void ReceiveOBPlayersChanged();// 0x265b04f39041
	void ReceiveGameModeInit();// 0x265a04f39041
	void ReceiveBattleTick(float InBattleTime, float DeltaTime);// 0x265904f39041
	void ReceiveBattleEnd();// 0x265804f39041
	void ReceiveBattleBegin();// 0x265704f39041
	void OnTeamInTournamentSettled(FString Side, byte TeamID);// 0x265604f39041
	void OnReceivePlayerLogin(PlayerController* PlayerController);// 0x265504f39041
	void OnReceivePlayerBattleStart(PlayerController* PlayerController);// 0x265404f39041
	void OnReceiveBattleStart();// 0x265304f39041
	void OnPlayerSettled(SCMPlayerState* Player);// 0x265204f39041
	void OnPlayerOut__DelegateSignature(SCMPlayerState* Player, enum OutType);// 0x265104f39041
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x265004f39041
	void OnPlayerJoin__DelegateSignature(SCMPlayerState* Player);// 0x264f04f39041
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x264e04f39041
	void OnMatchEnd(const int RPCID);// 0x264d04f39041
	void OnDSClose();// 0x264c04f39041
	void OnBotAIDataReady(int AICount);// 0x264b04f39041
	void OnAIJoin__DelegateSignature(SCMPlayerState* BotAI);// 0x264a04f39041
	void NotifyDSBattleOver();// 0x264904f39041
	void NotifyBotAIDataReady(int AICount);// 0x264804f39041
	bool IsKillWhenPlayerOut(SolarPlayerState* PlayerState);// 0x264704f39041
	bool IsEnableLogicComp();// 0x264604f39041
	int GetCurMapID();// 0x264504f39041
	void CreateHomeActor(FString Path);// 0x264404f39041
	bool CheckLogicComponentIsA(class CGMLogicComponent ClassPath);// 0x264304f39041
	bool ChangePlayerCharacter(SCMPlayerState* Player, int CharacterId, int SkinId);// 0x264204f39041
	bool ChangeBotAICharacter(SolarPlayerState* Player, int CharacterId, int SkinId);// 0x264104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnPlayerDisconnectedGame;//[Offset: 0x5a8, Size: 0x10]
	delegate OnPlayerReconnectedGame;//[Offset: 0x5b8, Size: 0x10]
	int SettlementStageConfigID;//[Offset: 0x5d0, Size: 0x4]
	void SettlePlayerBattleData(SolarPlayerState* Player);// 0x264004f39041
	void ReceiveBattleSettlement();// 0x263f04f39041
	void ReceiveBattleOver();// 0x263e04f39041
	void OnPlayerLeaveDSTimeOut(SolarPlayerState* PlayerState);// 0x263d04f39041
	bool IsAutoSettlementWhenKilled();// 0x263c04f39041
	bool IsAllowReconnectGame(SolarPlayerState* Player);// 0x263b04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_WarmGame_BattleRoyale_C.SolarWarmGameComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	BP_Logic_BattleRoyale_C* MainLogic;//[Offset: 0xb8, Size: 0x8]
	SCMPlayerState* RealPlayer;//[Offset: 0xc0, Size: 0x8]
	Vector[] VehiclePos;//[Offset: 0xc8, Size: 0x10]
	bool GuidArrowVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	Vector[] SafeAreaCenter;//[Offset: 0xe0, Size: 0x10]
	Vector[] WeaponPos;//[Offset: 0xf0, Size: 0x10]
	Vector[] ItemPos;//[Offset: 0x100, Size: 0x10]
	SolarCharacter* LocalCharacter;//[Offset: 0x110, Size: 0x8]
	UI_WorldMark_Common_C* WorldMark;//[Offset: 0x118, Size: 0x8]
	Vector SafeCenter;//[Offset: 0x120, Size: 0xc]
	UI_HUD_Notice_Lv3_C* Notice;//[Offset: 0x130, Size: 0x8]
	Margin NoticePadding;//[Offset: 0x138, Size: 0x10]
	float ArrowScale;//[Offset: 0x148, Size: 0x4]
	BP_DirectionArrow_C* DirectionArrow;//[Offset: 0x150, Size: 0x8]
	bool isShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	<int,S_WarmGameConfig> None;//[Offset: 0x160, Size: 0x50]
	<int,SolarBotAIConfig*> TeammatesAIConfig;//[Offset: 0x1b0, Size: 0x50]
	bool bCanAiReviveByItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	SolarBotAIConfig* DefaultAccompanyBotConfig;//[Offset: 0x208, Size: 0x8]
	bool IsWarmGame(int CallFunc_GetWramGameType_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0xc013051b9001
	static void GetAIPickResult(out const int[] InCharactetIDs, out int OutCharacterID, out int OutSkinId, int SelectedSkin, int cid, S_WarmGameAiConfig[] NewLocalVar, int CallFunc_Array_Length_ReturnValue, int CallFunc__a_GetCharacterIDBySkinID_CharacterID, int CallFunc_Subtract_IntInt_ReturnValue, bool Temp_bool_Variable, int CallFunc_GetWramGameType_ReturnValue, S_WarmGameConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, S_WarmGameAiConfig CallFunc_Array_Get_Item, int CallFunc__a_GetCharacterIDBySkinID_CharacterID, bool CallFunc_Array_Contains_ReturnValue, int K2Node_Select_Default);// 0xc014051b9001
	static void Create Warm Logic Actor And Exec(out bool Success, Transform CallFunc_MakeTransform_ReturnValue, int CallFunc_GetWramGameType_ReturnValue, bool CallFunc_IsWarmGame_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, S_WarmGameConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_WarmGameLogicBase_C* CallFunc_FinishSpawningActor_ReturnValue);// 0xc015051b9001
	void CheckSpAIForWarmGame(out bool SpecialAI, int CallFunc_GetWramGameType_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xc016051b9001
	void [s]SetBotBT(BehaviorTree* BotBehaviorTree, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, FString CallFunc_GetDisplayName_ReturnValue, bool K2Node_Select_Default, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0xc017051b9001
	void [c]ShowNotice(bool Visible, FString Text, float Duration, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_HUD_Notice_Lv3_C* K2Node_DynamicCast_AsUI_HUD_Notice_Lv, bool K2Node_DynamicCast_bSuccess);// 0xc018051b9001
	void [c]RequestNearestPosition(byte Target, float Distance, Vector nearestLocation, Vector PlayerLocation, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0xc019051b9001
	void OnRep_WeaponPos();// 0xc01a051b9001
	void UpdatePos();// 0xc01b051b9001
	void [c]CreateWorldMark(Vector Pos, int None, out UI_WorldMark_Common_C* AsUI World Mark Common, SlateBrush K2Node_MakeStruct_SlateBrush, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, UI_WorldMark_Common_C* K2Node_DynamicCast_AsUI_World_Mark_Common, bool K2Node_DynamicCast_bSuccess, Image* CallFunc_SpawnObject_ReturnValue);// 0xc01c051b9001
	SolarCharacter* [c]LocalCharacter(bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue);// 0xc01d051b9001
	void [c]PlayerHasWeapon(out bool HasWeapon, out bool HasVehicleWeapon, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xc01e051b9001
	void UpdateArrowDirection(SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, BP_DirectionArrow_C* CallFunc_GetGuidArrow_Output_Get);// 0xc01f051b9001
	void UpdateItemPos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_SolarItemSpawner_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_SolarItemSpawner_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xc020051b9001
	void UpdateWeaponPos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarGroundPreviewActor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, SolarGroundPreviewActor* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xc021051b9001
	void GetGuidArrow(out BP_DirectionArrow_C* Output_Get, SolarPlayerCameraManager* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_DirectionArrow_C* CallFunc_FinishSpawningActor_ReturnValue);// 0xc022051b9001
	void [C]ShowArrow(bool bNewVisibility, BP_DirectionArrow_C* CallFunc_GetGuidArrow_Output_Get);// 0xc023051b9001
	void UpdateVehiclePos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_SolarVehicleSpawner_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_SolarVehicleSpawner_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xc024051b9001
	static void GetNearestPosition(byte Target, out Vector Location, float Distance, Vector nearestLocation, Vector PlayerLocation, byte Temp_byte_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector[] K2Node_Select_Default, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0xc025051b9001
	void [A]GetPlayBattleCount(out int count);// 0xc026051b9001
	static void [ S]Game Mode Special Config(out bool SpecialConfig, out int Order, out bool isB, <int> B_id, <int> A_id, <int> order3, <int> order2, <int> order1, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, int CallFunc_GetWramGameType_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xc027051b9001
	void [C]PlayerABTest(out bool SpecialConfig);// 0xc028051b9001
	void GetMainLogic(out BP_Logic_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0xc029051b9001
	void ReceiveBeginPlay();// 0xc02a051b9001
	void ReceiveTick(float DeltaSeconds);// 0xc02b051b9001
	void OnSystemReady();// 0xc02c051b9001
	void PlanyerEnterSafeArea(Actor* Actor);// 0x37ffbd05229065
	void PlayerLeaveSafeArea(Actor* Actor);// 0xc02e051b9001
	void OnNextSafeAreaSetted(Vector Center, float Radius, float WaitTime, float MoveTime, int Index);// 0xc02f051b9001
	void OnRequestReceived(byte Type, Vector Pos);// 0xc030051b9001
	void OnEjectStateChanged(byte State, SolarCharacter* TargetCharacter);// 0x1285f051b9008
	void ConfigFinished();// 0x1285b051b9008
	void CustomEvent();// 0xc033051b9001
	static void ExecuteUbergraph_BPC_WarmGame_BattleRoyale(int EntryPoint, bool CallFunc_IsWarmGame_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, const byte[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, const enum[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Array_Index_Variable, Actor* K2Node_CustomEvent_Actor, Actor* K2Node_CustomEvent_Actor, delegate K2Node_CreateDelegate_OutputDelegate, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector K2Node_CustomEvent_Center, float K2Node_CustomEvent_Radius, float K2Node_CustomEvent_WaitTime, float K2Node_CustomEvent_MoveTime, int K2Node_CustomEvent_Index, bool CallFunc_IsServer_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc___S_Game_Mode_Special_Config_SpecialConfig, int CallFunc___S_Game_Mode_Special_Config_Order, bool CallFunc___S_Game_Mode_Special_Config_isB, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Pos, UI_WorldMark_Common_C* CallFunc__c_CreateWorldMark_AsUI_World_Mark_Common, bool K2Node_SwitchEnum_CmpSuccess, const <FString,FString> Temp_string_Variable, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocationInTargetSafeArea_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_CheckSpAIForWarmGame_SpecialAI, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Create_Warm_Logic_Actor_And_Exec_Success, bool CallFunc_IsServer_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, SolarGameModeAIComponent* CallFunc_GetComponentByClass_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, FString[] CallFunc_Map_Keys_Keys, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, FString CallFunc_Array_Get_Item, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, SolarCharacter* CallFunc_GetPossessedCharacter_ReturnValue, int CallFunc_GetCharacterID_CharacterID, int CallFunc_GetCharacterID_SkinID, int CallFunc_GetCharacterID_ColorID, Actor* CallFunc_GetOwner_ReturnValue, SolarBotAIConfig* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, SolarBotAIController* K2Node_DynamicCast_AsSolar_Bot_AIController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xffffff8b04f39002
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWarmGameComponent.ActorComponent.Object
	bool IsWarmGame();// 0x5f4704f39041
	void GetAIPickResult(out const int[] InCharactetIDs, out int OutCharacterID, out int OutSkinId);// 0x5f4604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_WorldMark_Common_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x480, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x488, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x490, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x498, Size: 0x8]
	int HideDistance;//[Offset: 0x4a0, Size: 0x4]
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0xc20f051b9001
	static FText Get_Distance_Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0xc210051b9001
	void SetIcon(Widget* Content, int None, PanelSlot* CallFunc_AddChild_ReturnValue);// 0xc211051b9001
	void PreConstruct(bool IsDesignTime);// 0x12b6004f39041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xfffdff8d04f39000
	static void ExecuteUbergraph_UI_WorldMark_Common(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, enum K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue);// 0xffffffff0a3f8ac0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x646904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8]
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x646d04f39041
	void SetSize(SlateChildSize InSize);// 0x646c04f39041
	void SetPadding(Margin InPadding);// 0x646b04f39041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x646a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_DirectionArrow_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* FX_G_Mesh_Arrow_Guide_001;//[Offset: 0x230, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x238, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
	void Init(Actor* AttachTarget, float Scale, Vector Position);// 0xc1e1051b9001
	void SetVisiblity(bool NewVisiblity);// 0x12709051b9008
	void UpdateDirection(Rotator Rotation);// 0x125e2051b9008
	static void ExecuteUbergraph_BP_DirectionArrow(int EntryPoint, Actor* K2Node_CustomEvent_AttachTarget, float K2Node_CustomEvent_Scale, Vector K2Node_CustomEvent_Position, Vector CallFunc_MakeVector_ReturnValue, bool K2Node_CustomEvent_NewVisiblity, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, Rotator K2Node_CustomEvent_Rotation, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x1635d051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarItemSpawner_C.SolarItemSpawner.SolarMapElementBase.Actor.Object
	StaticMeshComponent* Cube;//[Offset: 0x390, Size: 0x8]
	BillboardComponent* Billboard;//[Offset: 0x398, Size: 0x8]
	SceneComponent* SceneRoot;//[Offset: 0x3a0, Size: 0x8]
	void UserConstructionScript(enum Temp_byte_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, Vector CallFunc_Divide_VectorFloat_ReturnValue, MaterialInterface* K2Node_Select_Default, int K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0xffffffff8db4fa00
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarVehicleSpawner_C.SolarVehicleSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	None* SolarVehicleSpawnerVis;//[Offset: 0x3f0, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x3f8, Size: 0x8]
	StaticMeshComponent* Cube1;//[Offset: 0x400, Size: 0x8]
	StaticMeshComponent* Cube;//[Offset: 0x408, Size: 0x8]
	SceneComponent* SceneRoot;//[Offset: 0x410, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnID;//[Offset: 0x390, Size: 0x4]
	enum VehicleSpawnType;//[Offset: 0x394, Size: 0x1]
	bool bVehicleRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 0x1]
	int VehicleRefreshSecond;//[Offset: 0x398, Size: 0x4]
	bool bVehicleRefreshRand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	bool bVehicleRefreshWaitPreBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 0x1]
	int64 VehicleRefreshCheckRoleDisSquared;//[Offset: 0x3a0, Size: 0x8]
	byte[] VehicleCheckObjectTypes;//[Offset: 0x3a8, Size: 0x10]
	Vector VehicleCheckBoxSize;//[Offset: 0x3b8, Size: 0xc]
	class SolarVehicleSpawnEffect* VehicleSpawnEffectClass;//[Offset: 0x3c8, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NgaiGameModeComponent.GameModeCompBase.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleRoyaleGameModeAIComp_Custom_C.SBattleRoyaleGameModeAIComp.SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1b8, Size: 0x8]
	int AllBOT_Num;//[Offset: 0x1c0, Size: 0x4]
	BP_SolarCharacterPlayer_C*[] AllBOT_Falling;//[Offset: 0x1c8, Size: 0x10]
	BP_SolarCharacterPlayer_C* Player;//[Offset: 0x1d8, Size: 0x8]
	bool IsCustomMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	SCMPlayerState*[] AllRealPlayers;//[Offset: 0x1e8, Size: 0x10]
	static void Get All Bot Character and Set Bt Tree(BehaviorTree* BTAsset, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, BP_SolarCharacterPlayer_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Controller* CallFunc_GetController_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, AIController* K2Node_DynamicCast_AsAIController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_RunBehaviorTree_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xc075051b9001
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, bool CallFunc_OnGameModeHandleMatchHasStarted_bOutSuccess);// 0xc076051b9001
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, bool CallFunc_OnGameModeStartPlay_bOutSuccess);// 0x128a3051b9008
	void Event_AIBeginPlay();// 0xfffffffedc710f60
	void MainTick();// 0xc079051b9001
	void ExecuteUbergraph_BattleRoyaleGameModeAIComp_Custom(int EntryPoint, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x13369051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_CustomRoomManager_BattleRoyale_C.BP_CustomroomManager_C.CustomRoomManager.GameManagerBase.Info.Actor.Object
	void OnPlayerRemovedFromRoom(FString SolarPlayerID, enum reason);// 0x1c04054053390c7
	void OnClientRoomDataReadyLuaCall();// 0xffffffff8e577660
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_CustomroomManager_C.CustomRoomManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x440, Size: 0x8]
	bool HUD Initialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	UI_CreateRoom_HUD_C* UI_RoomHUD;//[Offset: 0x450, Size: 0x8]
	UI_CreateRoom_Management_Main_C* UI_RoomOperate;//[Offset: 0x458, Size: 0x8]
	byte TeamMemberCount;//[Offset: 0x460, Size: 0x1]
	bool IsLocalPlayerOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 0x1]
	bool TEMP Flag UI Refreshed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 0x1]
	FString[] PlayerPendingRemoval;//[Offset: 0x468, Size: 0x10]
	int TeamCount;//[Offset: 0x478, Size: 0x4]
	int DeathmatchModeGroupID;//[Offset: 0x47c, Size: 0x4]
	int SoloGameModeID;//[Offset: 0x480, Size: 0x4]
	void GetSpawnList(out int[] None, out int[] None, out int[] None, out int[] None, bool Temp_bool_Variable, int[] Temp_int_Variable, bool Temp_bool_Variable, int[] Temp_int_Variable, bool Temp_bool_Variable, int[] Temp_int_Variable, bool Temp_bool_Variable, int[] Temp_int_Variable, int[] CallFunc_GetVehicleTypeSettingLists_OutVehicleBlacklist, int[] CallFunc_GetVehicleTypeSettingLists_OutVehicleWhitelist, int[] K2Node_Select_Default, int[] CallFunc_GetWeaponSettingLists_OutWeaponBlacklist, int[] CallFunc_GetWeaponSettingLists_OutWeaponWhitelist, int[] K2Node_Select_Default, int[] K2Node_Select_Default, int[] K2Node_Select_Default);// 0xcefa051b9001
	void GetModeRoomUIType(out byte NewParam, int CallFunc_GetGameModeGroupID_ReturnValue, int CallFunc_GetGameModeID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0xcefb051b9001
	CustomRoomData GetRoomInfo(CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool CallFunc__S_PlayInEditor_bIsEditor);// 0xcefc051b9001
	void IsPlayerLocalPendingKill(SCMPlayerState* Player, out bool Result, int CallFunc_Array_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0xcefd051b9001
	static bool IsRoomOwner(const SCMPlayerState* Player, bool Temp_bool_Variable, bool CallFunc_IsRoomOwner_ReturnValue, bool Temp_bool_Variable, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, bool CallFunc__S_PlayInEditor_bIsEditor, bool CallFunc_EqualEqual_ByteByte_ReturnValue, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue);// 0xcefe051b9001
	void Switch Mgmt UI Display(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue);// 0xceff051b9001
	void RemoveRoomUI(bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xcf00051b9001
	void Get Team Member Count(out int Result, byte Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default);// 0xcf01051b9001
	static void TEMP Delayed Flag Update(const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, bool CallFunc_IsRoomHasMinimalSides_ReturnValue, bool CallFunc_IsRoomHasEnoughPlayers_ReturnValue, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue);// 0xcf02051b9001
	void PreUpdateOB(FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SCMPlayerState*[] CallFunc_GetOBPlayers_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xcf03051b9001
	static void Refresh All Teams on UI(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, byte CallFunc_GetModeRoomUIType_NewParam, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Not_PreBool_ReturnValue, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, SolarTeamInfo* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, TileView* CallFunc_Get_Active_TileView_Result, TileView* CallFunc_Get_Active_TileView_Result, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_CreateRoom_Management_Team_1M_C* CallFunc_Create_ReturnValue, UI_CreateRoom_Management_Team_2M_C* CallFunc_Create_ReturnValue, UI_CreateRoom_Management_Team_4M_C* CallFunc_Create_ReturnValue, int CallFunc_Get_Team_Member_Count_Result, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte K2Node_Select_Default);// 0xcf04051b9001
	static void Init CustomRoom Info(bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool CallFunc__S_PlayInEditor_bIsEditor, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int CallFunc_GetMatchRuleID_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_MatchRule CallFunc_TryGetRowData_ReturnValue, int K2Node_Select_Default, byte K2Node_Select_Default);// 0xcf05051b9001
	static void Get Custom Room Mode(out byte RoomMode, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0xcf06051b9001
	void Get Mode Name Localization(out int Mode Local ID, out int Group Local ID, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int CallFunc_GetGameModeID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, const SolarTablesData_GameModeMain CallFunc_GetRowData_ReturnValue, int K2Node_Select_Default);// 0xcf07051b9001
	void Refresh START in Top HUD(bool CallFunc_IsRoomHasMinimalSides_ReturnValue, bool CallFunc_IsRoomHasEnoughPlayers_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xcf08051b9001
	void Create Room Manager Operate UI(byte CallFunc_GetModeRoomUIType_NewParam, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, byte CallFunc_Get_Custom_Room_Mode_RoomMode, int CallFunc_Conv_Int64ToInt_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, int CallFunc_Get_Mode_Name_Localization_Mode_Local_ID, int CallFunc_Get_Mode_Name_Localization_Group_Local_ID, UI_CreateRoom_Management_Main_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Main, bool K2Node_DynamicCast_bSuccess);// 0x32ffbd05229065
	void Create Room Manager HUD(SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_CreateRoom_HUD_C* K2Node_DynamicCast_AsUI_Create_Room_HUD, bool K2Node_DynamicCast_bSuccess);// 0xcf0a051b9001
	bool OnGameStart(bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xcf0b051b9001
	void OnTournamentDealy();// 0xcf0c051b9001
	void Manual Trigger Refresh(FString DEBUG Reason);// 0xcf0d051b9001
	void RefreshOB();// 0xcf0e051b9001
	void RefreshRoomData(CustomRoomData RoomData);// 0xcf0f051b9001
	void UnbaindAllEvents();// 0xcf10051b9001
	void RefreshTeamPlayers(SCMPlayerState* Player);// 0xcf11051b9001
	void OnClientRoomDataReady();// 0x1710f04f39001
	void ReceiveBeginPlay();// 0x1835e051b9001
	void OnTeamsInfoPostChanged();// 0xffffff8c04f39000
	static void ExecuteUbergraph_BP_CustomroomManager(int EntryPoint, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsServer_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FString K2Node_CustomEvent_DEBUG_Reason, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, CustomRoomData K2Node_CustomEvent_RoomData, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* K2Node_CustomEvent_Player, bool CallFunc_IsInPreparation_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc__S_PlayInEditor_bIsEditor, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue);// 0x1b1db04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_HUD_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	UI_Component_Btn_C* Btn_GameStart;//[Offset: 0x408, Size: 0x8]
	UI_Component_Btn_C* Btn_RoomManage;//[Offset: 0x410, Size: 0x8]
	UI_KeyPrompt_C* Panel_Shortcut;//[Offset: 0x418, Size: 0x8]
	UI_KeyPrompt_C* Panel_Shortcut;//[Offset: 0x420, Size: 0x8]
	HorizontalBox* panel_spectators;//[Offset: 0x428, Size: 0x8]
	UI_CreateRoom_HUD_Prize_C* PrizePool;//[Offset: 0x430, Size: 0x8]
	SolarRichTextBlock* Txt_Countdown;//[Offset: 0x438, Size: 0x8]
	SolarTextBlock* Txt_Spectators;//[Offset: 0x440, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_Manage;//[Offset: 0x448, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_Start;//[Offset: 0x450, Size: 0x8]
	bool bIsOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	FString GetModuleName();// 0xcf2d051b9001
	void SetOnwerMode(bool IsOwner, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue);// 0xcf2e051b9001
	void ShowSpectator(bool Show);// 0xcf2f051b9001
	void Construct();// 0xcf30051b9001
	void Start Ticking();// 0xcf31051b9001
	void TikTok();// 0xcf32051b9001
	void BndEvt__UI_Component_Btn_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature();// 0xcf33051b9001
	void BndEvt__UI_Component_Btn_1_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature();// 0xcf34051b9001
	void Update Button State(bool Can Start);// 0xcf35051b9001
	void OnRoomInfoSwitch();// 0xcf36051b9001
	void OnStartGame();// 0x1b1e004f39041
	void Event_RoomInfoSwitch();// 0xcf38051b9001
	void Event_GameStart();// 0x6188c04f89100
	void OnShow();// 0xffffff8c04f39000
	void OnHide();// 0xcf66051b9001
	static void ExecuteUbergraph_UI_CreateRoom_HUD(int EntryPoint, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, byte Temp_byte_Variable, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, byte Temp_byte_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_ListenForInputActionEx_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_ListenForInputActionEx_ReturnValue, bool K2Node_CustomEvent_Can_Start, byte K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsPlatformDesktop_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, bool CallFunc_IsAvailable_Availble, FText CallFunc___________, FString CallFunc_Conv_TextToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xcf7d051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_Btn_C.ComponentButtonBaseWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x408, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x410, Size: 0x8]
	WidgetAnimation* Anim_Remind;//[Offset: 0x418, Size: 0x8]
	WidgetAnimation* Anim_Hold;//[Offset: 0x420, Size: 0x8]
	WidgetAnimation* Anim_Hover;//[Offset: 0x428, Size: 0x8]
	SolarImage* Img_Btn;//[Offset: 0x430, Size: 0x8]
	SolarImage* Img_Icon;//[Offset: 0x438, Size: 0x8]
	SolarImage* img_Mask;//[Offset: 0x440, Size: 0x8]
	SolarImage* Img_Shadow;//[Offset: 0x448, Size: 0x8]
	CanvasPanel* Panel_Press;//[Offset: 0x450, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x458, Size: 0x8]
	SizeBox* Size_Btn;//[Offset: 0x460, Size: 0x8]
	SizeBox* Size_Icon;//[Offset: 0x468, Size: 0x8]
	SolarTextBlock* Text_Btn;//[Offset: 0x470, Size: 0x8]
	NamedSlot* WidgetSlot;//[Offset: 0x478, Size: 0x8]
	byte BtnType;//[Offset: 0x480, Size: 0x1]
	byte BtnState;//[Offset: 0x481, Size: 0x1]
	Vector2D BtnSize;//[Offset: 0x484, Size: 0x8]
	bool IsUseBtnImag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	bool IsUseText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 0x1]
	FString Text;//[Offset: 0x490, Size: 0x10]
	bool IsUseLocID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	int LocID;//[Offset: 0x4a4, Size: 0x4]
	enum PreviewLang;//[Offset: 0x4a8, Size: 0x1]
	delegate OnClicked;//[Offset: 0x4b0, Size: 0x10]
	delegate OnPressed;//[Offset: 0x4c0, Size: 0x10]
	delegate OnReleased;//[Offset: 0x4d0, Size: 0x10]
	bool IsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]
	Object* Icon;//[Offset: 0x4e8, Size: 0x8]
	Vector2D Icon_Size;//[Offset: 0x4f0, Size: 0x8]
	void StopAnims();// 0xfc47051b9001
	void IsAvailable(out bool Availble, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x2dffba0522902e
	void SetBtnTxt(FString NewParam, FText CallFunc_Conv_StringToText_ReturnValue);// 0xffffffff8df4d110
	void SetBtnState(byte State, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0xfc44051b9001
	FString GetLocalText(FString CallFunc_GetLocalText_ReturnValue);// 0xfc75051b9001
	void PreConstruct(bool IsDesignTime);// 0x28891051b9008
	void Update(bool IsDesignTime);// 0x996f04f421e4
	void SetBtnText(FString None, byte None);// 0x2dffba0522902e
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x2dffba0522902e
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();// 0x2dffba0522902e
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_8_OnButtonReleasedEvent__DelegateSignature();// 0xffffffff06957300
	void OnLocalLangChangedEx(FString InLang);// 0xfc43051b9001
	void ExecuteUbergraph_UI_Component_Btn(int EntryPoint, FString K2Node_Event_InLang, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, bool K2Node_CustomEvent_IsDesignTime, FString K2Node_CustomEvent_____, byte K2Node_CustomEvent_____, FString CallFunc_GetLocalText_ReturnValue, FString K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, enum K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, enum K2Node_Select_Default, LinearColor K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, enum K2Node_Select_Default);// 0xfc3f051b9001
	void OnReleased__DelegateSignature();// 0xfc41051b9001
	void OnClicked__DelegateSignature();// 0x2dffba0522902e
	void OnPressed__DelegateSignature();// 0xa47f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ComponentButtonBaseWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarButton* OperateArea;//[Offset: 0x400, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarImage.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x140, Size: 0xe0]
	byte FillType;//[Offset: 0x220, Size: 0x1]
	SolarImageProgressInfo ImageProgressInfo;//[Offset: 0x228, Size: 0x20]
	delegate BrushDelegate;//[Offset: 0x248, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x258, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x268, Size: 0x10]
	bool bEnableLocImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	FText ImagePath;//[Offset: 0x280, Size: 0x18]
	int LocTextID;//[Offset: 0x298, Size: 0x4]
	enum PreviewLang;//[Offset: 0x29c, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x2a0, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x2b0, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x2c0, Size: 0x10]
	void UpdateImageAsync(int NewLocTextID);// 0x533604f39041
	void UpdateImage(int NewLocTextID);// 0x533504f39041
	void SetOpacity(float InOpacity);// 0x533404f39041
	void SetImageProgressInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x533304f39041
	void SetImageProgressByInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x533204f39041
	void SetImageProgress(float InProgress);// 0x533104f39041
	void SetImageFillType(byte InImageFillType);// 0x533004f39041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x532f04f39041
	void SetBrushTintColor(SlateColor TintColor);// 0x532e04f39041
	void SetBrushSize(Vector2D DesiredSize);// 0x532d04f39041
	void SetBrushResourceObject(Object* ResourceObject);// 0x532c04f39041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x532b04f39041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x532a04f39041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x532904f39041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x532804f39041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x532704f39041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x532604f39041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x532504f39041
	void SetBrush(out const SlateBrush InBrush);// 0x532404f39041
	float GetImageProgressByInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x532304f39041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x532204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarImageProgressInfo
	byte ProgressType;//[Offset: 0x0, Size: 0x1]
	byte LineProgressDir;//[Offset: 0x1, Size: 0x1]
	byte QuaterProgressPrivot;//[Offset: 0x2, Size: 0x1]
	byte HalfProgressPrivot;//[Offset: 0x3, Size: 0x1]
	float CircleProgressInitDegree;//[Offset: 0x4, Size: 0x4]
	bool bInvertProgressDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float Progress;//[Offset: 0xc, Size: 0x4]
	Material* Material;//[Offset: 0x10, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_KeyPrompt_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* BtnKey;//[Offset: 0x268, Size: 0x8]
	Overlay* Overlay;//[Offset: 0x270, Size: 0x8]
	SolarAdapterWidget* Panel_Shortcut;//[Offset: 0x278, Size: 0x8]
	byte None;//[Offset: 0x280, Size: 0x1]
	FString ActionName;//[Offset: 0x288, Size: 0x10]
	byte None;//[Offset: 0x298, Size: 0x1]
	bool bEnableBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1]
	bool bDisableEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 0x1]
	delegate OnClicked;//[Offset: 0x2a0, Size: 0x10]
	bool bEnableInputSettingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	int ActionDescLocID;//[Offset: 0x2b4, Size: 0x4]
	bool bEnableHighResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	void SetActionName(FString InActionName);// 0xce40051b9001
	static void RefreshKeyPromptUI(WidgetOverrideParam[] CallFunc_BuildOverrideParams_Array, UserWidget* CallFunc_GetAdapteeWidget_ReturnValue, UI_KeyMappingPrompt_C* K2Node_DynamicCast_AsUI_Key_Mapping_Prompt, bool K2Node_DynamicCast_bSuccess);// 0xce41051b9001
	void GetSplitActionName(FString SourceString, out FString NewParam, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue);// 0xce42051b9001
	void BuildOverrideActionDescParam(int LocTextID, out WidgetOverrideParam WidgetOverrideParam, WidgetOverrideParam K2Node_MakeStruct_WidgetOverrideParam);// 0xce43051b9001
	static void BuildOverrideParams(out const WidgetOverrideParam[] Array, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_EqualEqual_IntInt_ReturnValue, WidgetOverrideParam CallFunc_BuildOverrideActionDescParam_WidgetOverrideParam, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_GetSplitActionName_NewParam, WidgetOverrideParam K2Node_MakeStruct_WidgetOverrideParam, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_InputMapping CallFunc_TryGetRowData_ReturnValue, WidgetOverrideParam CallFunc_BuildOverrideActionDescParam_WidgetOverrideParam, const WidgetOverrideParam[] K2Node_MakeArray_Array);// 0xce44051b9001
	void SetOperationType(byte Type, UserWidget* CallFunc_GetAdapteeWidget_ReturnValue, UI_KeyMappingPrompt_C* K2Node_DynamicCast_AsUI_Key_Mapping_Prompt, bool K2Node_DynamicCast_bSuccess);// 0xce45051b9001
	void PreConstruct(bool IsDesignTime);// 0xce46051b9001
	void BndEvt__BtnKey_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x169d204f39001
	void ExecuteUbergraph_UI_KeyPrompt(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x16646051b9001
	void OnClicked__DelegateSignature();// 0x16699051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_KeyMappingPrompt_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_Press;//[Offset: 0x408, Size: 0x8]
	Overlay* Empty;//[Offset: 0x410, Size: 0x8]
	Overlay* EmptyDisable;//[Offset: 0x418, Size: 0x8]
	UI_Component_Gamepad_C* Gamepad;//[Offset: 0x420, Size: 0x8]
	HorizontalBox* HorizontalLayout;//[Offset: 0x428, Size: 0x8]
	SizeBox* Icon;//[Offset: 0x430, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x438, Size: 0x8]
	UI_Component_Keyboard_C* Keyboard;//[Offset: 0x440, Size: 0x8]
	WidgetSwitcher* KeySwitcher;//[Offset: 0x448, Size: 0x8]
	UI_Component_Mouse_C* Mouse;//[Offset: 0x450, Size: 0x8]
	Overlay* Overlay_Root;//[Offset: 0x458, Size: 0x8]
	SolarTextBlock* Txt_Hold;//[Offset: 0x460, Size: 0x8]
	TextBlock* Txt_Key;//[Offset: 0x468, Size: 0x8]
	SolarTextBlock* Txt_Shortcut;//[Offset: 0x470, Size: 0x8]
	VerticalBox* VerticalLayOut;//[Offset: 0x478, Size: 0x8]
	byte Style;//[Offset: 0x480, Size: 0x1]
	bool bDisableEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1]
	bool bEnableInputSettingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 0x1]
	FString GetModuleName();// 0xce72051b9001
	void SetEnableInputSettingHide(bool bEnable);// 0xce73051b9001
	void SetOperationTypeImpl(byte InType, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0xce74051b9001
	void RefreshEmptyDisplay(bool bInEmpty, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, HorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue);// 0xce75051b9001
	void SetEnableEmptyDispaly(bool bEnable);// 0xce76051b9001
	void SetStyle(byte Style, Margin Temp_struct_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, byte Temp_byte_Variable, Margin Temp_struct_Variable, Margin Temp_struct_Variable, Margin Temp_struct_Variable, byte Temp_byte_Variable, PanelWidget* Temp_object_Variable, byte Temp_byte_Variable, Widget* Temp_object_Variable, byte Temp_byte_Variable, Widget* Temp_object_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, enum K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, VerticalBoxSlot* CallFunc_SlotAsVerticalBoxSlot_ReturnValue, Margin K2Node_MakeStruct_Margin, HorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue, Margin K2Node_Select_Default, Margin Temp_struct_Variable, Margin Temp_struct_Variable, byte Temp_byte_Variable, PanelWidget* K2Node_Select_Default, Margin K2Node_Select_Default, Widget* K2Node_Select_Default, Widget* K2Node_Select_Default, PanelSlot* CallFunc_AddChild_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, VerticalBoxSlot* K2Node_DynamicCast_AsVertical_Box_Slot, bool K2Node_DynamicCast_bSuccess, VerticalBoxSlot* K2Node_DynamicCast_AsVertical_Box_Slot, bool K2Node_DynamicCast_bSuccess, HorizontalBoxSlot* K2Node_DynamicCast_AsHorizontal_Box_Slot, bool K2Node_DynamicCast_bSuccess, HorizontalBoxSlot* K2Node_DynamicCast_AsHorizontal_Box_Slot, bool K2Node_DynamicCast_bSuccess);// 0xce77051b9001
	void OnChangeAdapterSlotWidgetGameplayTag(out const GameplayTag InGameplayTag, out const FString[] MetaData);// 0xce78051b9001
	void OnChangeAdapterSlotWidgetParameters(out const WidgetOverrideParam[] Params);// 0xce79051b9001
	void OnLoadAdapterSlotWidgetFinished();// 0x165a2051b9001
	void PreConstruct(bool IsDesignTime);// 0xffffff8c04f39000
	static void ExecuteUbergraph_UI_KeyMappingPrompt(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, const GameplayTag K2Node_Event_InGameplayTag, const FString[] K2Node_Event_MetaData, const WidgetOverrideParam[] K2Node_Event_Params, bool K2Node_Event_IsDesignTime, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x16767051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_Gamepad_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	Image* img_DoubleClick;//[Offset: 0x408, Size: 0x8]
	Image* img_Hold;//[Offset: 0x410, Size: 0x8]
	Image* Img_MainKey;//[Offset: 0x418, Size: 0x8]
	Image* Img_ModifierKey;//[Offset: 0x420, Size: 0x8]
	SolarImage* Img_PlusIcon;//[Offset: 0x428, Size: 0x8]
	Overlay* Overlay_Normal;//[Offset: 0x430, Size: 0x8]
	SizeBox* SizeBox_MainKey;//[Offset: 0x438, Size: 0x8]
	SizeBox* SizeBox_ModifierKey;//[Offset: 0x440, Size: 0x8]
	bool bCustomRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	FString ActionName;//[Offset: 0x450, Size: 0x10]
	float Size;//[Offset: 0x460, Size: 0x4]
	FString GetModuleName();// 0xce95051b9001
	void SetMainKeySelection();// 0xce96051b9001
	void SetMainKeyNormal();// 0xce97051b9001
	void GetGamepadIconByKey(Key InKey, out PaperSprite* GamepadIcon);// 0xce98051b9001
	static void SetData(Key ModifierKey, Key MainKey, Key LocalMainKey, Key LocalModifierKey, PaperSprite* CallFunc_GetGamepadIconByKey_GamepadIcon, bool CallFunc_EqualEqual_KeyKey_ReturnValue, PaperSprite* CallFunc_GetGamepadIconByKey_GamepadIcon, bool CallFunc_EqualEqual_KeyKey_ReturnValue);// 0x16869051b9001
	void PreConstruct(bool IsDesignTime);// 0x1477504f39001
	void ExecuteUbergraph_UI_Component_Gamepad(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xceba051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_Keyboard_C.SolarComponentKeyWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x2a8, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x2b0, Size: 0x8]
	Image* Img_Bg_Frame;//[Offset: 0x2b8, Size: 0x8]
	Image* Img_Bg_Frame;//[Offset: 0x2c0, Size: 0x8]
	SolarImage* Img_PlusIcon;//[Offset: 0x2c8, Size: 0x8]
	WidgetSwitcher* KeyAndMouseSwitcher;//[Offset: 0x2d0, Size: 0x8]
	UI_Component_Mouse_C* Mouse;//[Offset: 0x2d8, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x2e0, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x2e8, Size: 0x8]
	TextBlock* Txt_Key;//[Offset: 0x2f0, Size: 0x8]
	TextBlock* Txt_Key;//[Offset: 0x2f8, Size: 0x8]
	bool Red;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool Yellow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	int Font_Size;//[Offset: 0x304, Size: 0x4]
	Vector2D BG_Size;//[Offset: 0x308, Size: 0x8]
	bool bCustomRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	TextBlock* NewVar;//[Offset: 0x318, Size: 0x8]
	FString GetModuleName();// 0xceb8051b9001
	void BP_RefreshKeyboardUI(TextBlock* InTxtKey, Image* InImgBg, SizeBox* InSizeBox, Image* LocalImgBg, SizeBox* LocalSizeBox, TextBlock* LocalTxtKey, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue);// 0xceb9051b9001
	void PreConstruct(bool IsDesignTime);// 0xce9a051b9001
	void Construct();// 0xcebb051b9001
	void ExecuteUbergraph_UI_Component_Keyboard(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x1a37f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarComponentKeyWidget.UserWidget.Widget.Visual.Object
	FString ActionName;//[Offset: 0x260, Size: 0x10]
	FString KeyBoardText;//[Offset: 0x270, Size: 0x10]
	FString[] KeyBoardTextArray;//[Offset: 0x280, Size: 0x10]
	delegate UpdateKeyboardMappingDelegate;//[Offset: 0x290, Size: 0x10]
	void UpdateKeyboardMappingInternal(FString ModifyActionName);// 0x50b504f39041
	void OnUpdateKeyboardMapping(out const <FString> ActionNames);// 0x50b404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_Mouse_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	CanvasPanel* Direction;//[Offset: 0x268, Size: 0x8]
	Image* Img_Mouse;//[Offset: 0x270, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8]
	byte Mouse;//[Offset: 0x280, Size: 0x1]
	bool HUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	FString ActionName;//[Offset: 0x288, Size: 0x10]
	bool bCustomRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	Vector2D Size;//[Offset: 0x29c, Size: 0x8]
	FString GetModuleName();// 0xcec9051b9001
	void SetData(Key KeySetting, out byte Type, out bool Succeed, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_Key_IsMouseButton_ReturnValue);// 0xceca051b9001
	void UpdateImage(byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool K2Node_SwitchEnum_CmpSuccess, enum K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default);// 0x1b1cc04f39041
	void PreConstruct(bool IsDesignTime);// 0x869604f4155e
	void ExecuteUbergraph_UI_Component_Mouse(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x1b1e2051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_HUD_Prize_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	WidgetAnimation* Anim_Fold_Expanded;//[Offset: 0x268, Size: 0x8]
	WidgetAnimation* Anim_Refresh_Folded;//[Offset: 0x270, Size: 0x8]
	UI_Component_Btn_C* Btn_Details;//[Offset: 0x278, Size: 0x8]
	SolarInputButton* Btn_Expand;//[Offset: 0x280, Size: 0x8]
	SolarInputButton* Btn_Fold;//[Offset: 0x288, Size: 0x8]
	Image* Img_Arrow;//[Offset: 0x290, Size: 0x8]
	Image* Img_Arrow;//[Offset: 0x298, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x2a0, Size: 0x8]
	Image* img_Btn_Bg;//[Offset: 0x2a8, Size: 0x8]
	Image* img_Btn_Bg;//[Offset: 0x2b0, Size: 0x8]
	Image* img_ExpandedBg;//[Offset: 0x2b8, Size: 0x8]
	Image* img_PlayerPrize;//[Offset: 0x2c0, Size: 0x8]
	Image* img_PlayerPrize;//[Offset: 0x2c8, Size: 0x8]
	Image* img_PlayerPrize;//[Offset: 0x2d0, Size: 0x8]
	Image* img_Prize;//[Offset: 0x2d8, Size: 0x8]
	Image* Img_Refresh_Light;//[Offset: 0x2e0, Size: 0x8]
	Image* Img_Refresh_Wipes;//[Offset: 0x2e8, Size: 0x8]
	WidgetSwitcher* Switcher_Prize;//[Offset: 0x2f0, Size: 0x8]
	SolarTextBlock* Txt_Prize;//[Offset: 0x2f8, Size: 0x8]
	SolarTextBlock* Txt_Prize;//[Offset: 0x300, Size: 0x8]
	SolarTextBlock* Txt_Prize;//[Offset: 0x308, Size: 0x8]
	SolarTextBlock* Txt_Prize;//[Offset: 0x310, Size: 0x8]
	SolarTextBlock* Txt_PrizePool;//[Offset: 0x318, Size: 0x8]
	int PrizeType;//[Offset: 0x320, Size: 0x4]
	FString GetModuleName();// 0xd224051b9001
	void SetPrizeType(int PrizeType, int Temp_int_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, Object* Temp_object_Variable, Object* Temp_object_Variable, int Temp_int_Variable, Object* K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, int Temp_int_Variable, Object* K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default);// 0xffffffff175d8200
	void PreConstruct(bool IsDesignTime);// 0xffffff8f04f39002
	void ExecuteUbergraph_UI_CreateRoom_HUD_Prize(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xffffff8c04f39044
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SolarVirtualInput VirtualActionInput;//[Offset: 0x5c8, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualInput
	enum InputBindType;//[Offset: 0x0, Size: 0x1]
	Key VirtualKey;//[Offset: 0x8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Main_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_OB_Exit;//[Offset: 0x408, Size: 0x8]
	WidgetAnimation* Anim_OB_Enter;//[Offset: 0x410, Size: 0x8]
	WidgetAnimation* Enter_Anim;//[Offset: 0x418, Size: 0x8]
	UI_CreateRoom_Mangement_Btn_C* Btn_Fill;//[Offset: 0x420, Size: 0x8]
	SolarButton* Btn_Fill1;//[Offset: 0x428, Size: 0x8]
	UI_CreateRoom_Mangement_Btn_C* Btn_Invite;//[Offset: 0x430, Size: 0x8]
	SolarButton* Btn_Invite1;//[Offset: 0x438, Size: 0x8]
	UI_CreateRoom_Mangement_Btn_C* Btn_Invite2;//[Offset: 0x440, Size: 0x8]
	UI_CreateRoom_Mangement_Btn_C* Btn_Random;//[Offset: 0x448, Size: 0x8]
	SolarButton* Btn_Random1;//[Offset: 0x450, Size: 0x8]
	UI_Component_Btn_C* Btn_Setting;//[Offset: 0x458, Size: 0x8]
	SolarButton* Btn_SpectateList;//[Offset: 0x460, Size: 0x8]
	UI_Component_Btn_C* Btn_StartGame;//[Offset: 0x468, Size: 0x8]
	Button* Button_BanSwap;//[Offset: 0x470, Size: 0x8]
	SolarCheckBox* Guest_Invite;//[Offset: 0x478, Size: 0x8]
	SolarCheckBox* Guest_Swap;//[Offset: 0x480, Size: 0x8]
	HorizontalBox* HorizontalBox_SubGameModeInfo;//[Offset: 0x488, Size: 0x8]
	Overlay* MessageBox;//[Offset: 0x490, Size: 0x8]
	UI_Component_Option_C* Option_Invite;//[Offset: 0x498, Size: 0x8]
	UI_Component_Option_C* Option_Swap;//[Offset: 0x4a0, Size: 0x8]
	CanvasPanel* Panel_Guest;//[Offset: 0x4a8, Size: 0x8]
	CanvasPanel* Panel_Homeowner;//[Offset: 0x4b0, Size: 0x8]
	CanvasPanel* panel_Spectate;//[Offset: 0x4b8, Size: 0x8]
	ParticleSystemWidget* Par_Spark;//[Offset: 0x4c0, Size: 0x8]
	SolarRichTextBlock* RichText_Members;//[Offset: 0x4c8, Size: 0x8]
	UI_CreateRoom_Management_Solo_C* Solo;//[Offset: 0x4d0, Size: 0x8]
	WidgetSwitcher* Switcher_Mode;//[Offset: 0x4d8, Size: 0x8]
	UI_CreateRoom_Management_TDM_C* TDM;//[Offset: 0x4e0, Size: 0x8]
	TileView* TileView_Player_Info_1M;//[Offset: 0x4e8, Size: 0x8]
	TileView* TileView_Player_Info_2M;//[Offset: 0x4f0, Size: 0x8]
	TileView* TileView_Player_Info_4M;//[Offset: 0x4f8, Size: 0x8]
	SolarTextBlock* Txt_Countdown;//[Offset: 0x500, Size: 0x8]
	SolarTextBlock* Txt_Map;//[Offset: 0x508, Size: 0x8]
	SolarTextBlock* Txt_Members;//[Offset: 0x510, Size: 0x8]
	SolarTextBlock* Txt_Mode;//[Offset: 0x518, Size: 0x8]
	SolarTextBlock* Txt_Password;//[Offset: 0x520, Size: 0x8]
	SolarTextBlock* Txt_RankedMatch;//[Offset: 0x528, Size: 0x8]
	SolarTextBlock* Txt_Room_ID;//[Offset: 0x530, Size: 0x8]
	SolarRichTextBlock* Txt_Viewer_Num;//[Offset: 0x538, Size: 0x8]
	UI_Component_ReturnBtn_C* UI_Component_ReturnBtn;//[Offset: 0x540, Size: 0x8]
	UI_CreateRoom_SocialList_C* UI_CreateRoom_SocialList;//[Offset: 0x548, Size: 0x8]
	UI_CreateRoom_Management_Team_OB_C* UI_Management_OB;//[Offset: 0x550, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_Down;//[Offset: 0x558, Size: 0x8]
	byte Team_Member_Count;//[Offset: 0x560, Size: 0x1]
	int Max Member Count;//[Offset: 0x564, Size: 0x4]
	FString Selected Player;//[Offset: 0x568, Size: 0x10]
	int SelcetedPos;//[Offset: 0x578, Size: 0x4]
	FString SelectedTeam;//[Offset: 0x580, Size: 0x10]
	UI_CreateRoom_Management_Player_Info_C* SelectedInfoWidget;//[Offset: 0x590, Size: 0x8]
	FString ToDeletePlayer;//[Offset: 0x598, Size: 0x10]
	int MaxOBPlayerCount;//[Offset: 0x5a8, Size: 0x4]
	bool SelectedOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	int NowOBPlayerCount;//[Offset: 0x5b0, Size: 0x4]
	UI_CreateRoom_Management_Team_C*[] All Team Widgets;//[Offset: 0x5b8, Size: 0x10]
	Object* _TileViewInitItem;//[Offset: 0x5c8, Size: 0x8]
	Object* _TileViewInitWidget;//[Offset: 0x5d0, Size: 0x8]
	delegate OnEnableInviteChanged;//[Offset: 0x5d8, Size: 0x10]
	byte RoomMode;//[Offset: 0x5e8, Size: 0x1]
	byte ModeRoomUIType;//[Offset: 0x5e9, Size: 0x1]
	FString GetModuleName();// 0xcf67051b9001
	void SetModeRoomUI(byte ModeRoomUIType, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Conv_ByteToInt_ReturnValue, UI_CreateRoom_Management_Team_C*[] CallFunc_GetTeams_Teams, UI_CreateRoom_Management_Team_C*[] CallFunc_GetTeams_Teams);// 0xcf68051b9001
	void OnConfirmKickPlayerOut(SCMPlayerState* Player, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue);// 0xcf69051b9001
	void RestoreSelectedWidgets(bool CallFunc_IsValid_ReturnValue);// 0xcf6a051b9001
	void RestoreSelectedParams();// 0xcf6b051b9001
	void CallLuaShowKickConfirmWindow(SCMPlayerState* PS);// 0xcf6c051b9001
	void IsGuestSwapOpen(out bool bIsOpen, bool CallFunc_IsChecked_ReturnValue);// 0xcf6d051b9001
	void CallLuaOnGuestInviteChanged(bool bIsChecked);// 0xcf6e051b9001
	void RefreshGuestData(bool bEnableSwap, bool bEnableInvite, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0xcf6f051b9001
	void Get Active TileView(out TileView* Result, byte Temp_byte_Variable, TileView* K2Node_Select_Default);// 0xcf70051b9001
	static void Trim Pending Removal Players(out SCMPlayerState*[] Player List, out SCMPlayerState*[] Trimmed Player List, SCMPlayerState*[] LOCAL Player List, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayerLocalPendingKill_Result, int CallFunc_Array_Add_ReturnValue);// 0xcf71051b9001
	void PlayEnter(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0xcf72051b9001
	void Set Room Mode(byte RoomMode, bool K2Node_SwitchEnum_CmpSuccess);// 0xcf73051b9001
	void GetPlayerByIDAndOB(FString PlayerId, bool bIsOB, out SCMPlayerState* Player, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SCMPlayerState* CallFunc_FindOBPlayerByPlayerID_ReturnValue);// 0xcf74051b9001
	static void RefreshOB(SCMPlayerState*[] CallFunc_GetOBPlayers_ReturnValue, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xcf75051b9001
	void Init OB(int OBPlayerCount, bool CallFunc_Greater_IntInt_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xcf76051b9001
	void Update Button State(bool Can Start, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte K2Node_Select_Default);// 0xcf77051b9001
	void State Team();// 0xcf78051b9001
	void Init Room Mgmt UI(byte Team Type, FString Master Name, FString Room PW, FString Room ID, int ModeName LocalID, int ModeGroup LocalID, int MaxOBPlayerCount, byte RoomMode, byte ModeRoomUIType, FText Temp_text_Variable, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText Temp_text_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, const <FString,FString> Temp_string_Variable, const <FString,FString> Temp_string_Variable, bool K2Node_SwitchEnum_CmpSuccess, FText Temp_text_Variable, byte Temp_byte_Variable, FText K2Node_Select_Default, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, enum K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xcf79051b9001
	void PreConstruct(bool IsDesignTime);// 0xcf7a051b9001
	void Start Ticking();// 0xcf7b051b9001
	void TikTok();// 0xcf7c051b9001
	void OnMemberCountChanged(int NowCount, int MaxCount, bool Can Start);// 0xcf3b051b9001
	void BndEvt__Btn_StartGame_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature();// 0xcf7e051b9001
	void BndEvt__TileView_Player_Info_K2Node_ComponentBoundEvent_2_OnListEntryInitializedDynamic__DelegateSignature(Object* Item, UserWidget* Widget);// 0xcf7f051b9001
	void BndEvt__TileView_Player_Info_K2Node_ComponentBoundEvent_4_OnListEntryGeneratedDynamic__DelegateSignature(UserWidget* Widget);// 0xcf09051b9001
	void InitDeletePanel();// 0xffffff8f04f39002
	void ALL_WIDGET Selection(bool Selection is OB, UI_CreateRoom_Management_Player_Info_C* SelectedInfoWidget);// 0xcf82051b9001
	void ALL_WIDGET Deselection();// 0xcf83051b9001
	void ALL_WIDGET Update();// 0xcf84051b9001
	void BndEvt__TileView_Player_Info_2M_K2Node_ComponentBoundEvent_5_OnListEntryInitializedDynamic__DelegateSignature(Object* Item, UserWidget* Widget);// 0xcf85051b9001
	void BndEvt__TileView_Player_Info_4M_K2Node_ComponentBoundEvent_6_OnListEntryInitializedDynamic__DelegateSignature(Object* Item, UserWidget* Widget);// 0xcf86051b9001
	void BndEvt__TileView_Player_Info_2M_K2Node_ComponentBoundEvent_7_OnListEntryGeneratedDynamic__DelegateSignature(UserWidget* Widget);// 0xcf87051b9001
	void BndEvt__TileView_Player_Info_4M_K2Node_ComponentBoundEvent_8_OnListEntryGeneratedDynamic__DelegateSignature(UserWidget* Widget);// 0xcf88051b9001
	void BndEvt__Option_Swap_K2Node_ComponentBoundEvent_12_OnOptionCheckStateChanged__DelegateSignature(bool bIsChecked);// 0xcf89051b9001
	void BndEvt__Option_Invite_K2Node_ComponentBoundEvent_13_OnOptionCheckStateChanged__DelegateSignature(bool bIsChecked);// 0xcf8a051b9001
	void BndEvt__Button_BanSwap_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();// 0xcf8b051b9001
	void BndEvt__Guest_Invite_K2Node_ComponentBoundEvent_9_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0xcf8c051b9001
	void Side_WIDGET Update(FString Side);// 0xcf8d051b9001
	void BndEvt__UI_Component_ReturnBtn_K2Node_ComponentBoundEvent_11_OnClicked__DelegateSignature();// 0xcf8e051b9001
	void OnShow();// 0xcf8f051b9001
	void OnEvnetCloseAction();// 0xcf90051b9001
	void ReceiveHide();// 0xcf91051b9001
	void BindTeams(out const UI_CreateRoom_Management_Team_C*[] Teams);// 0xcf92051b9001
	void BindSimpleTeam(UI_CreateRoom_Management_Team_C* Team);// 0xcf93051b9001
	void OB UI EventBinding();// 0xcf94051b9001
	void Trigger Flag Update();// 0xcf95051b9001
	void OnDeleteClicked(FString Clicked Player, FString Clicked Side);// 0xffffffff92b34c80
	void OnSlotClicked(FString Clicked Player, FString Clicked Side, bool Is OB, int PosIndex, UI_CreateRoom_Management_Team_C* TeamWidget, UI_CreateRoom_Management_Player_Info_C* InfoWidget);// 0xcf97051b9001
	void ExecuteUbergraph_UI_CreateRoom_Management_Main(int EntryPoint, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool K2Node_Event_IsDesignTime, int K2Node_CustomEvent_NowCount, int K2Node_CustomEvent_MaxCount, bool K2Node_CustomEvent_Can_Start, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, Object* K2Node_ComponentBoundEvent_Item, UserWidget* K2Node_ComponentBoundEvent_Widget, UserWidget* K2Node_ComponentBoundEvent_Widget, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_CustomEvent_Selection_is_OB, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_SelectedInfoWIdget, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UI_CreateRoom_Management_Team_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Team, bool K2Node_DynamicCast_bSuccess, UI_CreateRoom_Management_Team_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Team, bool K2Node_DynamicCast_bSuccess, Object* K2Node_ComponentBoundEvent_Item, UserWidget* K2Node_ComponentBoundEvent_Widget, Object* K2Node_ComponentBoundEvent_Item, UserWidget* K2Node_ComponentBoundEvent_Widget, UI_CreateRoom_Management_Team_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Team, bool K2Node_DynamicCast_bSuccess, UserWidget* K2Node_ComponentBoundEvent_Widget, UserWidget* K2Node_ComponentBoundEvent_Widget, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_ComponentBoundEvent_bIsChecked, FString K2Node_CustomEvent_Side, int Temp_int_Array_Index_Variable, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, FText CallFunc___________, bool K2Node_SwitchEnum_CmpSuccess, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, const UI_CreateRoom_Management_Team_C*[] K2Node_CustomEvent_Teams, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UI_CreateRoom_Management_Team_C* K2Node_CustomEvent_Team, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString K2Node_CustomEvent_Clicked_Player, FString K2Node_CustomEvent_Clicked_Side, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_CustomEvent_Clicked_Player, FString K2Node_CustomEvent_Clicked_Side, bool K2Node_CustomEvent_Is_OB, int K2Node_CustomEvent_PosIndex, UI_CreateRoom_Management_Team_C* K2Node_CustomEvent_TeamWidget, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_InfoWidget, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_ListenForInputActionEx_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_BooleanAND_ReturnValue, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item);// 0x6188c04f89100
	void OnEnableInviteChanged__DelegateSignature(bool bEnable);// 0xcfb2051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	bool Team_Owner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1]
	FString TeamName;//[Offset: 0x410, Size: 0x10]
	FString[] SolarPlayerID;//[Offset: 0x420, Size: 0x10]
	byte Initial State;//[Offset: 0x430, Size: 0x1]
	bool HUD Initialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 0x1]
	bool bIsOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 0x1]
	UI_CreateRoom_Management_Player_Info_C*[] Player Info Widget List;//[Offset: 0x438, Size: 0x10]
	int MaxOBCount;//[Offset: 0x448, Size: 0x4]
	delegate OnSlotClicked;//[Offset: 0x450, Size: 0x10]
	delegate OnDeleteClicked;//[Offset: 0x460, Size: 0x10]
	delegate OnTeamUpdated;//[Offset: 0x470, Size: 0x10]
	FString Room Master Player ID;//[Offset: 0x480, Size: 0x10]
	byte RoomMode;//[Offset: 0x490, Size: 0x1]
	void IsPreJobInThePos(out SCMPlayerState*[] PreJob, int Pos, out bool _Have, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x1345a051b9008
	void IsPlayerInThePos(out SCMPlayerState*[] PS, int Pos, out bool _Have, out SCMPlayerState* _OutPS, bool _IsHave, SCMPlayerState* _PS, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffffb904f39400
	void CanBeSelected(FString SelectedPlayer, out bool bResult, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xd007051b9001
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0xd008051b9001
	void InitOBCount(int count, byte RoomMode, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Texture2D* CallFunc_Get_Portrait_from_Avatar_ID_Portrait_Texture, int CallFunc_Array_Length_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0xd009051b9001
	void Try Update Team Widget(out SCMPlayerState*[] Updated Player List, out UI_CreateRoom_Management_Player_Info_C*[] Player Info Widget List, SCMPlayerState* _CACHE_PS, bool _CACHE_Have, bool _CACHE_IsPreJoin, int _CACHE_PreJoinedNum, int _CACHE_PosInTeam, bool _CACHE Is Owner, FString _CACHE Player ID, FText _CACHE Player Name, bool Have New Player, FString[] Player ID Array, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, SCMPlayerState* CallFunc_Array_Get_Item, FString CallFunc_GetTeamName_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsPreJoinPlayer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, byte Temp_byte_Variable, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString Temp_string_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, SolarTextBlock* CallFunc_Get_SideText_by_Panel_Target_Panel, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Len_ReturnValue, bool K2Node_Select_Default, int Temp_int_Variable, FString K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsPreJoinPlayer_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_IsPlayerInThePos__Have, SCMPlayerState* CallFunc_IsPlayerInThePos__OutPS, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, FString CallFunc_SelectString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xd00a051b9001
	void Get SideText by Panel(out SolarTextBlock* Target Panel);// 0xcf81051b9001
	void Init Data(FString Team Name, byte Init State);// 0xd00c051b9001
	void Set State(bool Team Owner, bool Locked, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, Widget* CallFunc_Get_UI_Refs_from_Panel_Horizontal_Box_Ref, WidgetSwitcher* CallFunc_Get_UI_Refs_from_Panel_WidgetSwitcher_IsOwner, bool CallFunc_IsValid_ReturnValue, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0xd00d051b9001
	void BP_OnEntryReleased();// 0xd00e051b9001
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0xd00f051b9001
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0xd010051b9001
	void OnListItemObjectSet(Object* ListItemObject);// 0xd011051b9001
	void PreConstruct(bool IsDesignTime);// 0xd012051b9001
	void Construct();// 0xd013051b9001
	void Update Team UI(out const SCMPlayerState*[] Team Players);// 0xd014051b9001
	void Do Deselection();// 0xd015051b9001
	void Portrait Clicked(FString Solar Player ID, int PosIndex, UI_CreateRoom_Management_Player_Info_C* InfoWidget);// 0xd016051b9001
	void Delete Clicked(FString Solar Player ID);// 0xd017051b9001
	void Do Selection(bool SelectedOB, UI_CreateRoom_Management_Player_Info_C* SelectedInfoWidget, FString SelectedSide);// 0xd018051b9001
	void Init OB UI();// 0x1b1e404f39041
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team(int EntryPoint, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool K2Node_Event_bIsExpanded, bool K2Node_Event_bIsSelected, Object* K2Node_Event_ListItemObject, bool K2Node_Event_IsDesignTime, const SCMPlayerState*[] K2Node_CustomEvent_Team_Players, FString K2Node_CustomEvent_Solar_Player_ID, int K2Node_CustomEvent_PosIndex, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_InfoWidget, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_CustomEvent_Solar_Player_ID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_CustomEvent_SelectedOB, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_SelectedInfoWIdget, FString K2Node_CustomEvent_SelectedSide, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xd049051b9001
	void OnTeamUpdated__DelegateSignature();// 0xfffdff8d04f39000
	void OnDeleteClicked__DelegateSignature(FString Clicked Player, FString Clicked Side);// 0x73c4b508255b9000
	void OnSlotClicked__DelegateSignature(FString Clicked Player, FString Clicked Side, bool Is OB, int PosIndex, UI_CreateRoom_Management_Team_C* TeamWidget, UI_CreateRoom_Management_Player_Info_C* InfoWidget);// 0x13419051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Player_Info_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	Button* Btn_Delete;//[Offset: 0x408, Size: 0x8]
	Button* Btn_Portrait;//[Offset: 0x410, Size: 0x8]
	SolarImage* Img_Frame;//[Offset: 0x418, Size: 0x8]
	SolarImage* Img_Owner;//[Offset: 0x420, Size: 0x8]
	SolarImage* Img_Portrait;//[Offset: 0x428, Size: 0x8]
	SolarImage* Img_Selected;//[Offset: 0x430, Size: 0x8]
	Overlay* Overlay_Change;//[Offset: 0x438, Size: 0x8]
	Overlay* Overlay_Closed;//[Offset: 0x440, Size: 0x8]
	CanvasPanel* Overlay_Delete;//[Offset: 0x448, Size: 0x8]
	Overlay* Overlay_Locked;//[Offset: 0x450, Size: 0x8]
	Overlay* Overlay_Owner;//[Offset: 0x458, Size: 0x8]
	Overlay* Overlay_Portrait;//[Offset: 0x460, Size: 0x8]
	Overlay* overlay_yourself;//[Offset: 0x468, Size: 0x8]
	CanvasPanel* Panel_Name;//[Offset: 0x470, Size: 0x8]
	SolarTextBlock* Txt_PlayerName;//[Offset: 0x478, Size: 0x8]
	SolarTextBlock* Txt_YourSelf;//[Offset: 0x480, Size: 0x8]
	UI_Anim_Waiting_C* UI_Anim_Waiting;//[Offset: 0x488, Size: 0x8]
	UI_Component_PlayerHead_C* UI_Component_PlayerHead;//[Offset: 0x490, Size: 0x8]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 0x1]
	bool Owner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 0x1]
	bool Change_Btn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49b, Size: 0x1]
	bool Delete_Btn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	FString Current_Player_ID;//[Offset: 0x4a0, Size: 0x10]
	UI_CreateRoom_Management_Team_C* Team UI Ref;//[Offset: 0x4b0, Size: 0x8]
	bool Yourself;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	bool Closed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 0x1]
	bool Waiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 0x1]
	int PosIndex;//[Offset: 0x4bc, Size: 0x4]
	byte RoomMode;//[Offset: 0x4c0, Size: 0x1]
	bool IsHaveName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 0x1]
	FString GetModuleName();// 0xcfb5051b9001
	void IsSoloMode(out bool bIsSoloMode, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetModeRoomUIType_NewParam, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0xd073051b9001
	void RestoreSelcetion();// 0xd0c2051b9001
	void SetSelectedState(bool bSelected, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0xd071051b9001
	void SetDeleteState(bool bDelete, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0xd072051b9001
	void SetChangeState(bool bChange, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0xd070051b9001
	void RefreshState(bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0xd074051b9001
	void CallLuaRefreshByPS(SCMPlayerState* PS);// 0xd075051b9001
	void GetClickedEnable(out bool Enable, bool CallFunc_IsSoloMode_bIsSoloMode, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xd076051b9001
	void Setup State(bool Locked, bool Selected, bool Owner, bool Change_Btn, bool Delete_Btn, bool Yourself, bool Closed, bool Waiting);// 0xd077051b9001
	void BP_OnEntryReleased();// 0xd078051b9001
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0xd07b051b9001
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0xd07c051b9001
	void OnListItemObjectSet(Object* ListItemObject);// 0xd07d051b9001
	void PreConstruct(bool IsDesignTime);// 0xd07e051b9001
	void BndEvt__Btn_Portrait_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xc508051b9001
	void BndEvt__Btn_Delete_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0xffffff8c04f38fff
	static void ExecuteUbergraph_UI_CreateRoom_Management_Player_Info(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, bool K2Node_Event_bIsExpanded, bool K2Node_Event_bIsSelected, Object* K2Node_Event_ListItemObject, bool K2Node_Event_IsDesignTime, bool CallFunc_GetClickedEnable_Enable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x16fcb04f39001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Anim_Waiting_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_Loop;//[Offset: 0x408, Size: 0x8]
	void PreConstruct(bool IsDesignTime);// 0xffffffc604f3903a
	void Construct();// 0xffffff8c04f39000
	void ExecuteUbergraph_UI_Anim_Waiting(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x68038c060b9003
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_PlayerHead_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	SolarButton* Btn_ShowCard;//[Offset: 0x408, Size: 0x8]
	CanvasPanel* Canvas_Frame;//[Offset: 0x410, Size: 0x8]
	SolarImageURL* Img_Avatar;//[Offset: 0x418, Size: 0x8]
	Image* Img_AvatarFrame;//[Offset: 0x420, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x428, Size: 0x8]
	Image* Img_BGLine;//[Offset: 0x430, Size: 0x8]
	Image* Img_Empty;//[Offset: 0x438, Size: 0x8]
	Image* Img_Gender;//[Offset: 0x440, Size: 0x8]
	Image* Img_Gender_Bg;//[Offset: 0x448, Size: 0x8]
	Image* Img_Hover;//[Offset: 0x450, Size: 0x8]
	Image* Img_Social;//[Offset: 0x458, Size: 0x8]
	Overlay* Overlay_Normal;//[Offset: 0x460, Size: 0x8]
	CanvasPanel* Panel_FrameAnim;//[Offset: 0x468, Size: 0x8]
	SizeBox* Size;//[Offset: 0x470, Size: 0x8]
	SizeBox* Size;//[Offset: 0x478, Size: 0x8]
	SizeBox* Size_Avatar;//[Offset: 0x480, Size: 0x8]
	SizeBox* Size_Vip;//[Offset: 0x488, Size: 0x8]
	UI_Vip_Icon_Type_C* UI_Vip;//[Offset: 0x490, Size: 0x8]
	bool ShowBusinessCardBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	delegate OnClicked;//[Offset: 0x4a0, Size: 0x10]
	delegate OnReleased;//[Offset: 0x4b0, Size: 0x10]
	bool IsNonuseFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	bool Empty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 0x1]
	byte Social;//[Offset: 0x4c2, Size: 0x1]
	bool GenderOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c3, Size: 0x1]
	byte Gender;//[Offset: 0x4c4, Size: 0x1]
	float Size;//[Offset: 0x4c8, Size: 0x4]
	bool Vip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 0x1]
	byte StateHD;//[Offset: 0x4cd, Size: 0x1]
	bool IsCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ce, Size: 0x1]
	void OnURLDownloadFinish_25FFB23E08DBDD6A4478878A9286E578(bool bSuccess);// 0xfffffffef968ad40
	void OnClicked_25FE126E08DBDD6A447885B49286E548();// 0xd154051b9001
	void OnURLDownloadFinish_25FD9F5B08DBDD6A44787D629286E473(bool bSuccess);// 0x2f713ce0
	void OnClicked_25FC543508DBDD6A44787AE29286E433();// 0xffffff8c04f39000
	void OnURLDownloadFinish_25F7820D08DBDD6A447836C29286DD63(bool bSuccess);// 0x13cab051b9001
	void OnClicked_25F6A33808DBDD6A447834889286DD2B();// 0x15d30051b9001
	void OnURLDownloadFinish_25F53BF708DBDD6A44782A6A9286DC27(bool bSuccess);// 0xbac9051b9008
	void OnClicked_25F4008208DBDD6A447827189286DBD3();// 0xffffffff0a401040
	void OnURLDownloadFinish_25EFB97D08DBDD6A4477C0DE9286D199(bool bSuccess);// 0x15bb5051b9001
	void OnClicked_25EE146508DBDD6A4477BEB89286D162();// 0xffffff8c04f39000
	void OnURLDownloadFinish_25EDEC9E08DBDD6A4477AFA49286CFE0(bool bSuccess);// 0x948204f568ab
	void OnClicked_25EC9F4808DBDD6A4477ABBC9286CF7E();// 0xffffffff0a405560
	void SetAvatarCopy(int AvatarID, FString AvatarUrl);// 0xffffff8c84f39000
	void Destruct();// 0xffffff8c04f39000
	void OnSolarUIClosed();// 0xffffffff6e4bf360
	void OnInitialized();// 0xffffffffc3496ad0
	void ConstructCopy();// 0xffffff8c04f39000
	void ForceShowFrameCopy(int FrameID);// 0x1ce0f051b9008
	void OnSolarUIOpened();// 0xffffff8c04f39000
	void SetVipTypeCopy(byte VipType, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x965204f56b2a
	void RefreshByPSCopy(SolarPlayerState* PS, bool bWithoutGender);// 0xcf12051b9001
	FString GetModuleName();// 0xd0c1051b9001
	void ForceShowFrame(int FrameID);// 0x1857704f39041
	void RefreshByPS(SolarPlayerState* PS, bool bWithoutGender);// 0xd0c3051b9001
	void SetAvatarSize(bool IsCustom, bool Temp_bool_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D K2Node_Select_Default);// 0xd0c4051b9001
	void SetAvatar(int AvatarID, FString AvatarUrl);// 0xd0c5051b9001
	void SetStateHD(byte StateHD, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0xd0c6051b9001
	void SetDefaultSteamAvatar();// 0xd0c7051b9001
	void SetVipType(byte VipType, int CallFunc_Conv_ByteToInt_ReturnValue);// 0xd0c8051b9001
	static EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Unhandled_ReturnValue);// 0xd0c9051b9001
	void SetAvatarState(bool IsCollapsed, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0xd0ca051b9001
	void SetAvatarIcon(int InAvatarID, Texture2D* CallFunc_GetAvatarIconWithID_OutAvatar);// 0xd0cb051b9001
	static void SetEmptyState(bool IsEmpty, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, enum K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, SlateBrush K2Node_MakeStruct_SlateBrush);// 0xd0cc051b9001
	void SetPlayerGender(byte Gender, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, Object* K2Node_Select_Default, enum Temp_byte_Variable, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Margin K2Node_MakeStruct_Margin, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default);// 0xd0cd051b9001
	void SetSocialIcon(byte Social, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin, enum K2Node_Select_Default, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue);// 0xd0ce051b9001
	void Update();// 0xd0cf051b9001
	void PreConstruct(bool IsDesignTime);// 0xd0d0051b9001
	void BndEvt__Btn_PlayerInfo_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0xd0d1051b9001
	void BndEvt__Btn_PlayerInfo_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xd0d2051b9001
	void Construct();// 0xd0d3051b9001
	void ExecuteUbergraph_UI_Component_PlayerHead(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, enum K2Node_Select_Default, bool K2Node_Event_IsDesignTime, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, enum K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin);// 0x1a38004f39041
	void OnReleased__DelegateSignature();// 0x32ffbd05229065
	void OnClicked__DelegateSignature();// 0x32ffbd05229065
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarImageURL.Widget.Visual.Object
	FString URL;//[Offset: 0x138, Size: 0x10]
	bool bDownloadFailedResetToPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	bool bDownloadFailedAutoRetry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]
	int AutoRetryDelayTime;//[Offset: 0x14c, Size: 0x4]
	int AutoRetryTimes;//[Offset: 0x150, Size: 0x4]
	SlateBrush Brush;//[Offset: 0x160, Size: 0xe0]
	SlateBrush PlaceholderBrush;//[Offset: 0x240, Size: 0xe0]
	byte Filter;//[Offset: 0x320, Size: 0x1]
	delegate BrushDelegate;//[Offset: 0x324, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x334, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x344, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x358, Size: 0x10]
	delegate OnURLDownloadFinish;//[Offset: 0x368, Size: 0x10]
	void URLDownloadFinish__DelegateSignature(bool bSuccess);// 0x29bd04f39041
	void UpdateURLImage();// 0x29bc04f39041
	void SetURLForNextTick(FString URLForNextTick);// 0x29bb04f39041
	void SetOpacity(float InOpacity);// 0x29ba04f39041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x29b904f39041
	void SetBrushTintColor(SlateColor TintColor);// 0x29b804f39041
	void SetBrushSize(Vector2D DesiredSize);// 0x29b704f39041
	void SetBrushResourceObject(Object* ResourceObject);// 0x29b604f39041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x29b504f39041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x29b404f39041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x29b304f39041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x29b204f39041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x29b104f39041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x29b004f39041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x29af04f39041
	void SetBrush(out const SlateBrush InBrush);// 0x29ae04f39041
	void ResetToPlaceholder();// 0x29ad04f39041
	void OnDownloadImageSuccess(FString InUrl, out const DownloaderResponse InResponse);// 0x29ac04f39041
	void OnDownloadImageFailed(FString InUrl, out const enum InFailedType, out const int InErrorCode);// 0x29ab04f39041
	void LoadURLImage(Texture2DDynamic* Texture);// 0x29aa04f39041
	FString GetUrl();// 0x29a904f39041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x29a804f39041
	enum GetDownloadState();// 0x29a604f39041
	void DownloadImage(FString InUrl);// 0x29a504f39041
	void CancelDownload();// 0x29a404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Vip_Icon_Type_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	SolarImage* Img_Vip_Icon;//[Offset: 0x408, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x410, Size: 0x8]
	int Type;//[Offset: 0x418, Size: 0x4]
	void SetType(int Type, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Object* Temp_object_Variable, enum K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default);// 0xd07a051b9001
	void PreConstruct(bool IsDesignTime);// 0xffffff8c04f39000
	void ExecuteUbergraph_UI_Vip_Icon_Type(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x28851051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Mangement_Btn_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	SolarButton* Btn_Common;//[Offset: 0x268, Size: 0x8]
	SolarImage* Image_Icon;//[Offset: 0x270, Size: 0x8]
	Overlay* Overlay_Mask;//[Offset: 0x278, Size: 0x8]
	SolarTextBlock* Txt_Btn;//[Offset: 0x280, Size: 0x8]
	bool CD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	FText Type;//[Offset: 0x290, Size: 0x18]
	int LocID;//[Offset: 0x2a8, Size: 0x4]
	bool None;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	Object* Icon;//[Offset: 0x2b0, Size: 0x8]
	delegate OnClicked;//[Offset: 0x2b8, Size: 0x10]
	void SetBtnTxt(FString NewParam, FText CallFunc_Conv_StringToText_ReturnValue);// 0xd1c6051b9001
	void SetInCD(bool CD, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float K2Node_Select_Default, enum K2Node_Select_Default);// 0xd1c7051b9001
	void PreConstruct(bool IsDesignTime);// 0xd1c8051b9001
	void BndEvt__Btn_Random_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xc54b051b9001
	void ExecuteUbergraph_UI_CreateRoom_Mangement_Btn(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xc54a051b9001
	void OnClicked__DelegateSignature();// 0x157b0051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_Option_C.SolarCheckButtonWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x420, Size: 0x8]
	CanvasPanel* Panel_Disabled;//[Offset: 0x428, Size: 0x8]
	SolarCheckBox* SolarCheckBox_Option;//[Offset: 0x430, Size: 0x8]
	SolarTextBlock* Txt_Option;//[Offset: 0x438, Size: 0x8]
	bool UseText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	FText Text;//[Offset: 0x448, Size: 0x18]
	int TextID;//[Offset: 0x460, Size: 0x4]
	enum TextPreviewLang;//[Offset: 0x464, Size: 0x1]
	SlateFontSizeForLang SpecialLangFont;//[Offset: 0x468, Size: 0x18]
	bool Disabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	delegate OnOptionCheckStateChanged;//[Offset: 0x488, Size: 0x10]
	bool bCustomClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	int OptionType;//[Offset: 0x49c, Size: 0x4]
	FString GetModuleName();// 0x16abb04f39001
	void SetTextID(int LocTextID);// 0x12d51051b9001
	void SetText(FString NewParam, FText CallFunc_Conv_StringToText_ReturnValue);// 0x12d53051b9001
	void SetEnabled(bool Enabled, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum CallFunc_GetCheckedState_ReturnValue, LinearColor K2Node_Select_Default, enum K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, enum K2Node_Select_Default);// 0x139a0051b9008
	void SetOptionType(int OptionType, int Temp_int_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, CheckBoxStyle K2Node_MakeStruct_CheckBoxStyle);// 0x1153c051b9001
	void ManualOptionSetIsChecked(bool bIsChecked);// 0xdb8c051b9001
	void BP_OnEntryReleased();// 0xdb8e051b9001
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x12d4e051b9001
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0x12d4f051b9001
	void OnListItemObjectSet(Object* ListItemObject);// 0x12d4c051b9001
	void PreConstruct(bool IsDesignTime);// 0xffffff8c04f39000
	void BndEvt__SolarCheckBox_Option_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0xe3e9051b9001
	void OnSelected(bool bSelected);// 0xffffff8c0509490d
	void SetDisbaled(bool Disabled);// 0x12d46051b9001
	void RefreshOptionTxtUI();// 0xffffff8f04f39002
	static void ExecuteUbergraph_UI_Component_Option(int EntryPoint, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, bool K2Node_Event_bIsExpanded, bool K2Node_Event_bIsSelected, Object* K2Node_Event_ListItemObject, bool K2Node_Event_IsDesignTime, enum K2Node_Select_Default, enum K2Node_Select_Default, enum CallFunc_GetCheckedState_ReturnValue, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_Event_bSelected, bool K2Node_CustomEvent_Disabled);// 0x12e54051b9001
	void OnOptionCheckStateChanged__DelegateSignature(bool bIsChecked);// 0x1827b04f39001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCheckButtonWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	delegate OnClickedEvent;//[Offset: 0x408, Size: 0x10]
	void SetButtonIndex(int InButtonIndex);// 0x508c04f39041
	void PostClickedEvent();// 0x508b04f39041
	void OnStateChanged(bool bIsChecked);// 0x508a04f39041
	void OnSelected(bool bSelected);// 0x508904f39041
	ReturnValue(MulticastInlineDelegateProperty) GetOnClickedEvent();// 0x508804f39041
	int GetButtonIndex();// 0x508704f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSystemWidget.Widget.Visual.Object
	ParticleSystem* ParticleSystemTemplate;//[Offset: 0x138, Size: 0x8]
	bool bReactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	bool bActiveSysWhenInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
	ParticleSystemComponent* WorldParticleComponent;//[Offset: 0x148, Size: 0x8]
	Actor* WorldParticleActor;//[Offset: 0x150, Size: 0x8]
	void SetReactivate(bool bActivateAndReset);// 0x3d0004f39041
	void ActivateParticles(bool bActive, bool bReset);// 0x3cff04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Solo_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_Loop;//[Offset: 0x408, Size: 0x8]
	UI_CreateRoom_Management_Team_Solo_C* Team;//[Offset: 0x410, Size: 0x8]
	UI_CreateRoom_Management_Team_Solo_C* Team;//[Offset: 0x418, Size: 0x8]
	void GetTeams(out UI_CreateRoom_Management_Team_C*[] Teams, UI_CreateRoom_Management_Team_C*[] K2Node_MakeArray_Array);// 0xd175051b9001
	void InitTeams(SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, SolarTeamInfo* CallFunc_Array_Get_Item, SolarTeamInfo* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x1821304f39001
	void PreConstruct(bool IsDesignTime);// 0x93a104f56770
	void ExecuteUbergraph_UI_CreateRoom_Management_Solo(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x2dffba0522902e
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_Solo_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x498, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x4a0, Size: 0x8]
	void Construct();// 0x32ffbd05229065
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_Solo(int EntryPoint, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0xd048051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_TDM_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_Loop;//[Offset: 0x408, Size: 0x8]
	UI_CreateRoom_Management_Team_TDM_C* Team;//[Offset: 0x410, Size: 0x8]
	UI_CreateRoom_Management_Team_TDM_C* Team;//[Offset: 0x418, Size: 0x8]
	static void GetTeams(out UI_CreateRoom_Management_Team_C*[] Teams, UI_CreateRoom_Management_Team_C*[] K2Node_MakeArray_Array);// 0xd1aa051b9001
	static void InitTeams(SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, SolarTeamInfo* CallFunc_Array_Get_Item, SolarTeamInfo* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x198f504f39041
	void PreConstruct(bool IsDesignTime);// 0x182a504f39001
	void ExecuteUbergraph_UI_CreateRoom_Management_TDM(int EntryPoint, bool K2Node_Event_IsDesignTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x133fc051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_TDM_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x498, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x4a0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x4a8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x4b0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x4b8, Size: 0x8]
	void Construct();// 0xffffff8f04f39002
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_TDM(int EntryPoint, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0xd046051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_ReturnBtn_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	SolarButton* Btn_Return;//[Offset: 0x268, Size: 0x8]
	Image* Image;//[Offset: 0x270, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8]
	SolarTextBlock* Txt_Title;//[Offset: 0x280, Size: 0x8]
	delegate OnClicked;//[Offset: 0x288, Size: 0x10]
	delegate OnPressed;//[Offset: 0x298, Size: 0x10]
	bool UseTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	FText Title;//[Offset: 0x2b0, Size: 0x18]
	int TitleID;//[Offset: 0x2c8, Size: 0x4]
	bool UseID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	enum PreviewLang;//[Offset: 0x2cd, Size: 0x1]
	float SizeX;//[Offset: 0x2d0, Size: 0x4]
	void PreConstruct(bool IsDesignTime);// 0xd151051b9001
	void BndEvt__Btn_Return_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xd152051b9001
	void BndEvt__Btn_Return_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0xd153051b9001
	void ExecuteUbergraph_UI_Component_ReturnBtn(int EntryPoint, int CallFunc_PlaySound2D_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, enum K2Node_Select_Default);// 0x1b1c804f39041
	void OnPressed__DelegateSignature();// 0xd0c0051b9001
	void OnClicked__DelegateSignature();// 0x32ffbd05229065
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_SocialList_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	Button* Btn_LeftTeam;//[Offset: 0x400, Size: 0x8]
	FString GetModuleName();// 0xffffff8c04f39044
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_OB_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x498, Size: 0x8]
	Overlay* Panel_Spectator;//[Offset: 0x4a0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4a8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4b0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4b8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4c0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4c8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4d0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4d8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4e0, Size: 0x8]
	void UpdateOB(out SCMPlayerState*[] PlayerStateList, bool T_Waiting, FString T_PlayerID, SCMPlayerState* T_PS, int T_Index, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, byte Temp_byte_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsPreJoinPlayer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_Select_Default, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xd03a051b9001
	void PreConstruct(bool IsDesignTime);// 0xd1ca051b9001
	void Construct();// 0xd1c9051b9001
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_OB(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0xffffff8f04f39002
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_1M_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x498, Size: 0x8]
	HorizontalBox* HorizontalBox;//[Offset: 0x4a0, Size: 0x8]
	CanvasPanel* Panel_Owner;//[Offset: 0x4a8, Size: 0x8]
	Overlay* Panel_Team;//[Offset: 0x4b0, Size: 0x8]
	SolarTextBlock* Txt_SideName_P1;//[Offset: 0x4b8, Size: 0x8]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x4c0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4c8, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_IsOwner;//[Offset: 0x4d0, Size: 0x8]
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0xcfb3051b9001
	void Get SideText by Panel(out SolarTextBlock* Target Panel, bool Temp_bool_Variable, SolarTextBlock* K2Node_Select_Default);// 0xcfb4051b9001
	void PreConstruct(bool IsDesignTime);// 0x21c4d051b9000
	void Construct();// 0x6188c04f89100
	void ExecuteUbergraph_UI_CreateRoom_Management_Team_1M(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0xcfd2051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_2M_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x498, Size: 0x8]
	HorizontalBox* HorizontalBox;//[Offset: 0x4a0, Size: 0x8]
	CanvasPanel* Panel_Owner;//[Offset: 0x4a8, Size: 0x8]
	Overlay* Panel_Team;//[Offset: 0x4b0, Size: 0x8]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x4b8, Size: 0x8]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x4c0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4c8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4d0, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_IsOwner;//[Offset: 0x4d8, Size: 0x8]
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0xcfd3051b9001
	void Get SideText by Panel(out SolarTextBlock* Target Panel, bool Temp_bool_Variable, SolarTextBlock* K2Node_Select_Default);// 0xcfd4051b9001
	void PreConstruct(bool IsDesignTime);// 0xcfd5051b9001
	void Construct();// 0xc4d204f39001
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_2M(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x3abfbc3004f39414
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_4M_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x498, Size: 0x8]
	HorizontalBox* HorizontalBox;//[Offset: 0x4a0, Size: 0x8]
	CanvasPanel* Panel_Owner;//[Offset: 0x4a8, Size: 0x8]
	Overlay* Panel_Team;//[Offset: 0x4b0, Size: 0x8]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x4b8, Size: 0x8]
	SolarTextBlock* Txt_SideName_P4;//[Offset: 0x4c0, Size: 0x8]
	SolarTextBlock* Txt_Team_P4;//[Offset: 0x4c8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4d0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4d8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4e0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4e8, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_IsOwner;//[Offset: 0x4f0, Size: 0x8]
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0xcff9051b9001
	void Get SideText by Panel(out SolarTextBlock* Target Panel, bool Temp_bool_Variable, SolarTextBlock* K2Node_Select_Default);// 0xcffa051b9001
	void PreConstruct(bool IsDesignTime);// 0xcffc051b9001
	void Construct();// 0x1b1dc04f39041
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_4M(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0xcf4304f39001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_DBox_Default_C.DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x760, Size: 0x8]
	SceneComponent* FX_Position;//[Offset: 0x768, Size: 0x8]
	bool ResurrectionComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 0x1]
	LinearColor[] QualityMap;//[Offset: 0x778, Size: 0x10]
	ParticleSystem*[] DeadBox_Particle;//[Offset: 0x788, Size: 0x10]
	ParticleSystemComponent* QualityEffect;//[Offset: 0x798, Size: 0x8]
	int NewBoxParticle;//[Offset: 0x7a0, Size: 0x4]
	bool CanBuyResurrect(const SolarCharacter* InReqCharacter, SCMPlayerState* OwnerPlayer, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SolarResurrectionComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue);// 0x10f45051b9001
	bool IsSameTeam(byte CharacterTeamID, FString CallFunc_Conv_ByteToString_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x12b5c04f39041
	void UserConstructionScript();// 0xffffffff4c9d20e0
	void ReceiveBeginPlay();// 0x10f48051b9001
	void ExecuteUbergraph_BP_DBox_Default(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarResurrectionComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0xffffffff0085af20
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_WorldMark_ReviveTeammates_C.WorldMark_ReviveTeammates.WorldMark_ReviveBase.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5b0, Size: 0x8]
	CanvasPanel* CanvasPanel;//[Offset: 0x5b8, Size: 0x8]
	Image* Img_Arrow;//[Offset: 0x5c0, Size: 0x8]
	Image* Img_Arrow_Light_Off;//[Offset: 0x5c8, Size: 0x8]
	Image* Img_BG_Off;//[Offset: 0x5d0, Size: 0x8]
	CanvasPanel* Panel_Off_Screen;//[Offset: 0x5d8, Size: 0x8]
	int HideDistance;//[Offset: 0x5e0, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x5e8, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x5f8, Size: 0x10]
	bool IsOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	void SetIsOnScreen(bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, enum K2Node_Select_Default, float K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, Vector2D K2Node_Select_Default, enum K2Node_Select_Default);// 0x11206051b9001
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, CharacterSkinConfig* CallFunc_GetSkinConfig_ReturnValue, SoftObjectPath CallFunc_GetSkinIcon_ReturnValue, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, Texture2D* CallFunc_LoadTexture2DBySoftPath_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, SolarResurrectionComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x11207051b9001
	void SetColor(byte Index, byte CallFunc_Subtract_ByteByte_ReturnValue, byte CallFunc_BMax_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, SlateColor K2Node_MakeStruct_SlateColor);// 0x11208051b9001
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x11209051b9001
	void SetIcon(Widget* Content, int None, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x1120a051b9001
	void PreConstruct(bool IsDesignTime);// 0x1120b051b9001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1120c051b9001
	void OnInitialized();// 0x1120d051b9001
	void SetPlayerIDAndChangeColor(FString PlayerId);// 0x1114c04f39001
	void SetOutOfScreen(bool OutOfScreen);// 0x111b404f39001
	static void ExecuteUbergraph_UI_WorldMark_ReviveTeammates(int EntryPoint, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, FString K2Node_Event_PlayerID, Vector2D CallFunc_GetSize_ReturnValue, bool K2Node_Event_OutOfScreen, bool CallFunc_Not_PreBool_ReturnValue);// 0x110de04f39001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SI_RebornLine_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* FX_Tag;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent* FX_Tag_Glow;//[Offset: 0x238, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
	void ReceiveBeginPlay();// 0x10f52051b9001
	void Event_SetWaitingColor();// 0x13d5e051b9001
	void Event_SetFinishColor();// 0xffffffff4c9cbb60
	void ExecuteUbergraph_BP_SI_RebornLine(int EntryPoint);// 0x1af6604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_WorldMark_ReviveTeammatesDeathbox_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x480, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x488, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x490, Size: 0x8]
	Image* Img_Light;//[Offset: 0x498, Size: 0x8]
	Image* Img_Light;//[Offset: 0x4a0, Size: 0x8]
	Image* Img_Revival;//[Offset: 0x4a8, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x4b0, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x4b8, Size: 0x8]
	int HideDistance;//[Offset: 0x4c0, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x4c8, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x4d8, Size: 0x10]
	FString PlayerId;//[Offset: 0x4e8, Size: 0x10]
	FString DistanceLocalString;//[Offset: 0x4f8, Size: 0x10]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x11228051b9001
	static void SetColor(byte Index, byte CallFunc_Subtract_ByteByte_ReturnValue, byte CallFunc_BMax_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, SlateColor K2Node_MakeStruct_SlateColor);// 0x11229051b9001
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x1122a051b9001
	static FText Get_Distance_Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x1122b051b9001
	void SetIcon(Widget* Content, int None, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x1122c051b9001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1122d051b9001
	void PreConstruct(bool IsDesignTime);// 0x110e204f39001
	void OnInitialized();// 0x111ed04f39001
	static void ExecuteUbergraph_UI_WorldMark_ReviveTeammatesDeathbox(int EntryPoint, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, FText CallFunc_Get_Distance_Text_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, bool K2Node_Event_IsDesignTime);// 0xffffffff0056a120
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_MapMark_ReviveTeammates_C.MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x440, Size: 0x8]
	WidgetAnimation* Occupy_Loop_Anim;//[Offset: 0x448, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x450, Size: 0x8]
	Image* Img_Light;//[Offset: 0x458, Size: 0x8]
	Image* Img_Light;//[Offset: 0x460, Size: 0x8]
	Image* Img_Revival;//[Offset: 0x468, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x470, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x478, Size: 0x8]
	int HideDistance;//[Offset: 0x480, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x488, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x498, Size: 0x10]
	FString PlayerId;//[Offset: 0x4a8, Size: 0x10]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x111bd051b9001
	void SetColor(byte Index, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default);// 0x111be051b9001
	void SetIcon(Widget* Content, int None, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x111bf051b9001
	void Event_PlayAnim();// 0x1115404f39001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1118404f39001
	static void ExecuteUbergraph_UI_MapMark_ReviveTeammates(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue);// 0x1116004f39001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_GameState_BattleRoyaleMap01_C.BP_GameState_BattleRoyale_C.BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	void NotifyCheatedPlayer(SolarPlayerState* CheatedPlayerState, out const FText OutReason);// 0xffffff8f04f39002
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBagsTrail_Common_C.SolarBackpackSFX.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_WallRunLoop;//[Offset: 0x288, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_Trail;//[Offset: 0x290, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_DropSlowDown;//[Offset: 0x298, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_SkyDivingLanding;//[Offset: 0x2a0, Size: 0x8]
	SceneComponent* VFX;//[Offset: 0x2a8, Size: 0x8]
	float TrailFade_Size_581709C845BD673DB0841C82710F99F1;//[Offset: 0x2b0, Size: 0x4]
	byte TrailFade__Direction_581709C845BD673DB0841C82710F99F1;//[Offset: 0x2b4, Size: 0x1]
	TimelineComponent* TrailFade;//[Offset: 0x2b8, Size: 0x8]
	void OnWallRun();// 0x1cd99051b9008
	void BackpackSFXEnd();// 0xfffffffef18aa2e0
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal, Rotator CallFunc_MakeRotFromZ_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue);// 0xffffff8b04f39002
	void BackpackSFXBegin(byte InJetType, bool GroundDetected, bool K2Node_SwitchEnum_CmpSuccess);// 0x1d9d104f5dc22
	void UpdateTrailParticle(BackpackTrailAssemblingParams SoftObjectRef, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1d1a8051b9008
	ParticleSystemComponent* GetTrailEffectComponent();// 0xffffff8f04f39002
	void FX_FinishDeactive();// 0xffffffff058676a0
	void SkyDivingLanding();// 0xffffff8f04f39002
	void DropSlowDown();// 0xffffff8f04f39002
	void Normal Jet Fly();// 0xffffff8c04f39000
	void FX_InitializeDeactive();// 0x908604f42034
	void TrailFade__FinishedFunc();// 0xffffff8f04f39002
	void TrailFade__UpdateFunc();// 0xffffff8f04f39002
	void OnBackpackTrailAssembling(out const BackpackTrailAssemblingParams Params, enum PropellingMode);// 0x20166051b9008
	void TryFadeOutTrail();// 0x1ceea051b9001
	void ExecuteUbergraph_BP_PBagsTrail_Common(int EntryPoint, const BackpackTrailAssemblingParams K2Node_Event_Params, enum K2Node_Event_PropellingMode, bool CallFunc_IsActive_ReturnValue);// 0x1f578051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BackpackTrailAssemblingParams.TableRowBase
	ParticleSystem* TrailParticle;//[Offset: 0x8, Size: 0x28]
	ParticleSystem* WallRunTrailParticle;//[Offset: 0x30, Size: 0x28]
	ParticleSystem* OffgasParticle;//[Offset: 0x58, Size: 0x28]
	ParticleSystem* WallRunOffgasParticle;//[Offset: 0x80, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	void Stop();// 0x6d1704f39041
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x6d1604f39041
	void SetTimelineLengthMode(byte NewLengthMode);// 0x6d1504f39041
	void SetTimelineLength(float NewLength);// 0x6d1404f39041
	void SetPlayRate(float NewRate);// 0x6d1304f39041
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x6d1204f39041
	void SetNewTime(float NewTime);// 0x6d1104f39041
	void SetLooping(bool bNewLooping);// 0x6d1004f39041
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x6d0f04f39041
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x6d0e04f39041
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x6d0d04f39041
	void ReverseFromEnd();// 0x6d0c04f39041
	void Reverse();// 0x6d0b04f39041
	void PlayFromStart();// 0x6d0a04f39041
	void Play();// 0x6d0904f39041
	void OnRep_Timeline();// 0x6d0804f39041
	bool IsReversing();// 0x6d0704f39041
	bool IsPlaying();// 0x6d0604f39041
	bool IsLooping();// 0x6d0504f39041
	float GetTimelineLength();// 0x6d0404f39041
	float GetPlayRate();// 0x6d0304f39041
	float GetPlaybackPosition();// 0x6d0204f39041
	bool GetIgnoreTimeDilation();// 0x6d0104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBagsOffgas_Common_C.SolarBackpackSFX.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	ParticleSystemComponent* FX_BoostClimb_Start;//[Offset: 0x288, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_MainJet;//[Offset: 0x290, Size: 0x8]
	SceneComponent* VFX;//[Offset: 0x298, Size: 0x8]
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0xffffff8f04f39002
	void BackpackSFXEnd();// 0xffffff8f04f39002
	void OnBackpackTrailAssembling(out const BackpackTrailAssemblingParams Params, enum PropellingMode);// 0xffffffff8e5e1850
	void ExecuteUbergraph_BP_PBagsOffgas_Common(int EntryPoint, byte K2Node_Event_InJetType, bool K2Node_Event_GroundDetected, bool K2Node_SwitchEnum_CmpSuccess, const BackpackTrailAssemblingParams K2Node_Event_Params, enum K2Node_Event_PropellingMode, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1ce95051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SETTFormula_BigEscape_C.SettlementFormula.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]
	int[] PersonalRankExpReward;//[Offset: 0x230, Size: 0x10]
	SettlementParam_ExtraRewardInfo RankReward;//[Offset: 0x240, Size: 0x40]
	SettlementParam_ExtraRewardInfo[] CommonRewards;//[Offset: 0x280, Size: 0x10]
	int WarmGame Account Exp;//[Offset: 0x290, Size: 0x4]
	float GetKDA(out const SettlementParam_KDA InParam, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x1f496051b9001
	void TEMP Is Player In NewPlayer Games(out bool Result, int CallFunc_GetWramGameType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x1f495051b9001
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam, int Temp_int_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, byte CallFunc_GetTeamRank_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, int Temp_int_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, int K2Node_Select_Default, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, int Temp_int_Variable, bool Temp_bool_Variable, FString CallFunc_FormatRewardItem_ItemString, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo[] K2Node_MakeArray_Array);// 0x1f494051b9001
	void MVPLifeTimeScore(float Life Time, out float LTMVPScore, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x1f493051b9001
	FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam, FString[] K2Node_MakeArray_Array);// 0x1f492051b9001
	int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam, int[] FullPage, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, int[] K2Node_MakeArray_Array, int K2Node_Select_Default, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x1f491051b9001
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_MVPLifeTimeScore_LTMVPScore, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x1f490051b9001
	int GetZomborg(out const SettlementParam_Zomborg InParam, int Result, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Round_ReturnValue);// 0x1f48f051b9001
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue);// 0xffffff8c04f39000
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo, int CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xfffffffef1bf6b40
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_TEMP_Is_Player_In_NewPlayer_Games_Result, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue);// 0xffffff8c04f39000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Character_BattleRoyaleMap01_C.BP_Character_BattleRoyale_C.BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Character_BattleRoyale_C.BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x23b0, Size: 0x8]
	delegate OnPlayerRevive;//[Offset: 0x23b8, Size: 0x10]
	ActorMarkBase* DeathBoxMark;//[Offset: 0x23c8, Size: 0x8]
	MapMarkBase*[] DeathBoxMiniMapMark;//[Offset: 0x23d0, Size: 0x10]
	int Index;//[Offset: 0x23e0, Size: 0x4]
	int UI_Relive_StartTime;//[Offset: 0x23e4, Size: 0x4]
	TimerHandle LandedDetectionHandel;//[Offset: 0x23e8, Size: 0x8]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0x23f0, Size: 0x8]
	<int,float> Level-Damage;//[Offset: 0x23f8, Size: 0x50]
	void GetWeaponLevelDamageBonus(out float Result, bool Temp_bool_Variable, float Temp_float_Variable, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, int CallFunc_GetCurrentActiveSlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, float CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default);// 0xddff051b9001
	void Death Cleanup UI(SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue);// 0xde00051b9001
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0xde01051b9001
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0xde03051b9001
	void SetReviveCameraFade(float Time);// 0xde04051b9001
	void ReceiveBeginPlay();// 0xdde8051b9001
	void Debug Set DayAndNightTime(float Time);// 0xffffff8c04f39001
	void SetMapID(int MapId);// 0xde06051b9001
	void Event_OnResBegin(int Time, byte Type, Vector Location, S_ResurrectInfo options);// 0xde07051b9001
	void BeginPlayBlueprint();// 0xde08051b9001
	void OnCharacterEjectStateChanged(byte State);// 0xde09051b9001
	static void ExecuteUbergraph_BP_Character_BattleRoyale(int EntryPoint, bool CallFunc_IsInSkywardDive_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, float K2Node_Event_Time, float K2Node_CustomEvent_Time, GameInstance* CallFunc_GetGameInstance_ReturnValue, int K2Node_CustomEvent_MapID, bool CallFunc_IsValid_ReturnValue, SolarGameInstanceBase* K2Node_DynamicCast_AsSolar_Game_Instance_Base, bool K2Node_DynamicCast_bSuccess, SolarMapManager* CallFunc_GetSolarMapManager_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Location, S_ResurrectInfo K2Node_CustomEvent_Options, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, float CallFunc_GetCurBattleTime_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_FTrunc_ReturnValue, S_SkillState CallFunc_GetSkillStateByNameEnum_Out, S_SkillState CallFunc_GetSkillStateByNameEnum_Out, byte K2Node_Event_State, bool K2Node_SwitchEnum_CmpSuccess, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, S_SkillState K2Node_Select_Default);// 0xdb16051f9021
	void OnPlayerRevive__DelegateSignature(SolarCharacter* TargetCharacter);// 0x1338904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_MC_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	void LobbyForceSetLOD();// 0xffffffff6da476a0
	MaterialInstanceDynamic* TryCreateDynamicMaterialInstance(PrimitiveComponent* Component, int ElementIndex, MaterialInterface* SourceMaterial, FName OptionlName, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xffffff8f04f39002
	void FX_Idle();// 0x13641051b9008
	void FX_Flying();// 0xffffffff6da44760
	void FX_Charging();// 0xffffffff6da3f280
	void FX_LowPower();// 0xffffffff8c3ec710
	void FX_Default(bool CallFunc_IsFly_ReturnValue);// 0xffffffff6da45fe0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_TeamPerspective_LocalPlayer_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	CueContent[] CueContents;//[Offset: 0x298, Size: 0x10]
	bool WhileActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x46cb04f39041
	bool OnRemoveInternal(SolarCharacter* NullableCharacter, out const GameplayCueParameters Parameters);// 0x46ca04f39041
	void OnLocalPlayerSpectateMeStatusChanged(SolarCharacter* Character, bool bIsSpectating);// 0x46c904f39041
	bool OnExecuteInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x46c804f39041
	bool OnActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x46c704f39041
	bool ListenLocalPlayerSpectateMeStatus();// 0x46c604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayCueNotify_Actor.Actor.Object
	bool bAutoDestroyOnRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	float AutoDestroyDelay;//[Offset: 0x22c, Size: 0x4]
	bool WarnIfTimelineIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool WarnIfLatentActionIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	GameplayTag GameplayCueTag;//[Offset: 0x234, Size: 0x8]
	GameplayTagReferenceHelper ReferenceHelper;//[Offset: 0x240, Size: 0x10]
	FName GameplayCueName;//[Offset: 0x250, Size: 0x8]
	bool bAutoAttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool IsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	bool bUniqueInstancePerInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 0x1]
	bool bUniqueInstancePerSourceObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 0x1]
	bool bAllowMultipleOnActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	bool bAllowMultipleWhileActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	int NumPreallocatedInstances;//[Offset: 0x260, Size: 0x4]
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x3cea04f39041
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x3ce904f39041
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x3ce804f39041
	bool OnExecute(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x3ce704f39041
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x3ce604f39041
	void K2_HandleGameplayCue(Actor* MyTarget, byte EventType, out const GameplayCueParameters Parameters);// 0x3ce504f39041
	void K2_EndGameplayCue();// 0x3ce404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CueContent
	enum PlayTiming;//[Offset: 0x0, Size: 0x1]
	FName CustomEvent;//[Offset: 0x4, Size: 0x8]
	byte VisibleTargetFlag;//[Offset: 0xc, Size: 0x1]
	GameplayTagRequirements PlayTagRequirements;//[Offset: 0x10, Size: 0x50]
	ActorEffectContent[] ActorEffectContents;//[Offset: 0x60, Size: 0x10]
	BuffEffectContent[] BuffEffectContents;//[Offset: 0x70, Size: 0x10]
	SoundContent[] SoundContents;//[Offset: 0x80, Size: 0x10]
	HeadIconContent[] HeadIconContents;//[Offset: 0x90, Size: 0x10]
	ParticleSystemContent[] ParticleSystemContents;//[Offset: 0xa0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorEffectContent
	class ActorEffect* ActorEffectClass;//[Offset: 0x0, Size: 0x8]
	enum AffectedActorType;//[Offset: 0x8, Size: 0x1]
	bool bHideFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	GameplayTag VisibilityFlagTag;//[Offset: 0xc, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BuffEffectContent
	FName BuffEffectID;//[Offset: 0x0, Size: 0x8]
	bool bStopOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum BuffEffectType;//[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundContent
	FName SoundGroupName;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeadIconContent
	GameplayTag HeadIconTag;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSystemContent
	ActorParticleEffectSpawnInfo SpawnInfo;//[Offset: 0x0, Size: 0x70]
	bool bStopOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorParticleEffectSpawnInfo
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 0x28]
	enum AttachOption;//[Offset: 0x28, Size: 0x1]
	FName AttachPointName;//[Offset: 0x2c, Size: 0x8]
	byte LocationType;//[Offset: 0x34, Size: 0x1]
	Vector Location;//[Offset: 0x38, Size: 0xc]
	Rotator Rotation;//[Offset: 0x44, Size: 0xc]
	Vector Scale;//[Offset: 0x50, Size: 0xc]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	bool bEnablePooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 0x1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTagReferenceHelper
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_TeamPerspective_Teammate_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_ParkourVertAcc_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_ParkourHoriAcc_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarFlyTrail_C.SolarFlyTrail.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x570, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_SkydiveSound_C.ChaGC_SkydiveSound.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGC_SkydiveSound.GameplayCueNotify_Actor.Actor.Object
	FName[] StartSoundGroups;//[Offset: 0x298, Size: 0x10]
	FName[] StopSoundGroups;//[Offset: 0x2a8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_SkydiveFly_C.ChaGC_SkydiveFly.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x308, Size: 0x8]
	ParticleSystemComponent* Particle;//[Offset: 0x310, Size: 0x8]
	ParticleSystem* EnemyParticleAsset;//[Offset: 0x318, Size: 0x8]
	ParticleSystem* FriendParticleAsset;//[Offset: 0x320, Size: 0x8]
	ParticleSystem* DefenderParticleAsset;//[Offset: 0x328, Size: 0x8]
	bool ShowParticleInLowLevelGraphicsQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	void ShowEncircleParticle(bool bIsLocalTeam, bool bIsDefender, bool Temp_bool_Variable, bool CallFunc_IsLowLevelGraphicsQuality_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ParticleSystem* K2Node_Select_Default, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue);// 0xe2c4051b9001
	bool OnRemoveInternal(SolarCharacter* NullableCharacter, out const GameplayCueParameters Parameters, bool CallFunc_OnRemoveInternal_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xe4ea04f39001
	bool WhileActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters, bool CallFunc_WhileActiveInternal_ReturnValue);// 0xb0f5051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGC_SkydiveFly.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	float MinBoostDuration;//[Offset: 0x2b0, Size: 0x4]
	bool bIsBoost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	SoftObjectPath SkywardDiveParticle;//[Offset: 0x2c8, Size: 0x18]
	FName[] SkywardDiveParticlePackageSocketNames;//[Offset: 0x2e0, Size: 0x10]
	ParticleSystemComponent*[] CacheSkywardDiveEffects;//[Offset: 0x2f0, Size: 0x10]
	void ShowEncircleParticle(bool bIsLocalTeam, bool bIsDefender);// 0x46cd04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_TeamPerspective_Opponent_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_FX_Def_C.SolarItemCountActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 0x8]
	StaticMeshComponent* 3DIcon;//[Offset: 0x250, Size: 0x8]
	TextRenderComponent* TextRender;//[Offset: 0x258, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 0x8]
	void ReceiveBeginPlay();// 0xffffff8b04f39002
	void SetItemCount(int count);// 0xffffffff4c9d8ac0
	static void ExecuteUbergraph_BP_FX_Def(int EntryPoint, int K2Node_Event_Count, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x3f49888a434dcf0d
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemCountActor.Actor.Object
	TextRenderComponent* TextPtr;//[Offset: 0x230, Size: 0x8]
	FString TextPrefix;//[Offset: 0x238, Size: 0x10]
	void SetItemCount(int count);// 0x516f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_FX_Exp_C.SolarItemCountActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 0x8]
	StaticMeshComponent* 3DIcon;//[Offset: 0x250, Size: 0x8]
	TextRenderComponent* TextRender;//[Offset: 0x258, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 0x8]
	void ReceiveBeginPlay();// 0xfffffffedf7f5fe0
	void SetItemCount(int count);// 0xfffffffef18ae720
	void ExecuteUbergraph_BP_FX_Exp(int EntryPoint, int K2Node_Event_Count, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xfffffffedf7f3500
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplineActor_C.SolarWeaponProjectileSpline.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8]
	StaticMeshComponent* Sphere;//[Offset: 0x258, Size: 0x8]
	SplineMeshComponent* SplineMesh;//[Offset: 0x260, Size: 0x8]
	SplineMeshComponent* GetSplineMeshComponent();// 0xfffffffeeec93500
	void CreateSpline(out Vector[] Pos);// 0x26ecd051b9008
	void ReceiveBeginPlay();// 0xffffff8c04f39000
	void SetPoints(out const Vector[] Points);// 0x21cad051b9008
	void Hide();// 0x1bc5a051b9001
	void ShowHitPointAt(out const Vector Loc);// 0xfffffffeda0bb0e0
	void HideHitPoint();// 0x130fb051b9001
	void ExecuteUbergraph_SplineActor(int EntryPoint, const Vector[] K2Node_Event_Points, const Vector K2Node_Event_Loc, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult);// 0xace1051b9001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Rifle_B9A03_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0xfffffffeee4fd3e0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xdb0, Size: 0x8]
	WeaponPartStaticMeshComponent* RedCrosshair;//[Offset: 0xdb8, Size: 0x8]
	WeaponPartStaticMeshComponent* CrossHair;//[Offset: 0xdc0, Size: 0x8]
	WeaponPartMuzzleComp* WeaponPartMuzzleComp;//[Offset: 0xdc8, Size: 0x8]
	WeaponPartGripComp* WeaponPartGripComp;//[Offset: 0xdd0, Size: 0x8]
	WeaponPartGunStockComp* WeaponPartGunStockComp;//[Offset: 0xdd8, Size: 0x8]
	WeaponPartClipComp* WeaponPartClipComp;//[Offset: 0xde0, Size: 0x8]
	WeaponPartScopeComp* WeaponPartScopeComp;//[Offset: 0xde8, Size: 0x8]
	void ReceiveBeginPlay();// 0xffffffff8cd8ae60
	void K2_SwitchDrawDistance(bool Hold);// 0xffffff8c04f39000
	void ExecuteUbergraph_BP_SolarPlayerWeapon(int EntryPoint, bool K2Node_Event_hold);// 0x24b6104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	WeaponPartsComponent* WeaponPartsComponent;//[Offset: 0xda0, Size: 0x8]
	bool QueryCanEquipPart(const enum Type, const int InWeaponID);// 0x56cd04f39041
	bool GetEquippedScopeTypeAndLevel(out enum Type, out int Level);// 0x56cc04f39041
	int GetEquippedPartLevel(const enum Type);// 0x56cb04f39041
	void GameStatisticsWeaponAddExp(float newExp, float AddExp, int OldLevel, int NewLevel, int reason);// 0x56ca04f39041
	bool CanEquipPart(const enum Type);// 0x56c904f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_MassInvisibility_C.ChaGC_MassInvisibility.ChaGC_SuperSkillActorCueBase.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x368, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGC_MassInvisibility.ChaGC_SuperSkillActorCueBase.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	class MaterialEffectBase* InvisibilityEffectClass;//[Offset: 0x2b8, Size: 0x8]
	GameplayTag InvisibilityOrnamentTag;//[Offset: 0x2c0, Size: 0x8]
	FName BeginInvisibleCueEvent;//[Offset: 0x2c8, Size: 0x8]
	int SprintingStatusNotificationID;//[Offset: 0x2d0, Size: 0x4]
	int SprintingStatusTipShowInterval;//[Offset: 0x2d4, Size: 0x4]
	float WarningOtherRange;//[Offset: 0x2d8, Size: 0x4]
	float WarningOtherRangeOutThreshold;//[Offset: 0x2dc, Size: 0x4]
	float PrepareWarningCueEventTriggerPoint;//[Offset: 0x2e0, Size: 0x4]
	FName PrepareWarningCueEvent;//[Offset: 0x2e4, Size: 0x8]
	float TimeBeforeEndToStartEndWarning;//[Offset: 0x2ec, Size: 0x4]
	FName EndWarningMaterialParameterName;//[Offset: 0x2f0, Size: 0x8]
	float EndWarningRate;//[Offset: 0x2f8, Size: 0x4]
	float EndWarningCueEventTriggerPoint;//[Offset: 0x2fc, Size: 0x4]
	FName EndWarningCueEvent;//[Offset: 0x300, Size: 0x8]
	class CameraShake* CameraModifierClass;//[Offset: 0x308, Size: 0x8]
	GameplayTag SkillBuffGameplayEffectTag;//[Offset: 0x310, Size: 0x8]
	GameplayTag SkillPreGameplayEffectTag;//[Offset: 0x318, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGC_SuperSkillActorCueBase.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	GameplayTag SuperSkillGameplayEffectTag;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialEffectBase.ActorEffect.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SMG_WL04_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0xfffffffeeee8c880
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Rifle_B9A05_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x24da4051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_SkywardDivePrepare_C.ChaGC_SkywardDivePrepare.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2c8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGC_SkywardDivePrepare.GameplayCueNotify_Actor.Actor.Object
	SkywardDiveConfig* SkillConfig;//[Offset: 0x298, Size: 0x8]
	ParticleSystemComponent* PrepareBeamEffect;//[Offset: 0x2a0, Size: 0x8]
	CameraShake* PrepareCameraShakeInstance;//[Offset: 0x2a8, Size: 0x8]
	ParticleSystemComponent*[] PreparePackageEffect;//[Offset: 0x2b0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkywardDiveConfig.DataAsset.Object
	GameplayTag SkywardDivePrepareCueTag;//[Offset: 0x30, Size: 0x8]
	GameplayTag SkywardDiveLaunchCueTag;//[Offset: 0x38, Size: 0x8]
	float PrepareTimeConfig;//[Offset: 0x40, Size: 0x4]
	float MaxSkywardHeightConfig;//[Offset: 0x44, Size: 0x4]
	float EndingAnimTime;//[Offset: 0x48, Size: 0x4]
	RuntimeFloatCurve LaunchSpeedCurveConfig;//[Offset: 0x50, Size: 0x88]
	class GameplayEffect* SkywardDiveEffectClass;//[Offset: 0xd8, Size: 0x8]
	FName CancelActionName;//[Offset: 0xe0, Size: 0x8]
	AnimMontage* CharacterPrepareMontage;//[Offset: 0xe8, Size: 0x8]
	ParticleSystem* PrepareBeamParticle;//[Offset: 0xf0, Size: 0x8]
	ParticleSystem* PreparePackageParticle;//[Offset: 0xf8, Size: 0x8]
	FName[] PreparePackageSocketNames;//[Offset: 0x100, Size: 0x10]
	FName StartPrepareLaunchSoundGroupName;//[Offset: 0x110, Size: 0x8]
	FName StopPrepareLaunchSoundGroupName;//[Offset: 0x118, Size: 0x8]
	class CameraShake* CameraShakePrepare;//[Offset: 0x120, Size: 0x8]
	AnimMontage* CharacterSkywardMontage;//[Offset: 0x128, Size: 0x8]
	AnimMontage* CharacterEndingMontage;//[Offset: 0x130, Size: 0x8]
	SoftObjectPath LaunchDeviceRealLaunchParticle;//[Offset: 0x138, Size: 0x18]
	SoftObjectPath SkywardLaunchParticle;//[Offset: 0x150, Size: 0x18]
	FName[] LaunchParticlePackageSocketNames;//[Offset: 0x168, Size: 0x10]
	FName StartRealLaunchLoopSoundGroupName;//[Offset: 0x178, Size: 0x8]
	FName StopRealLaunchLoopSoundGroupName;//[Offset: 0x180, Size: 0x8]
	class CameraShake* CameraShakeLaunch;//[Offset: 0x188, Size: 0x8]
	float LaunchShakeEndMaxHeightOffset;//[Offset: 0x190, Size: 0x4]
	float LaunchShakeEndDistance;//[Offset: 0x194, Size: 0x4]
	RuntimeFloatCurve LaunchShakeEndScaleCurve;//[Offset: 0x198, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_SkywardDiveLaunch_C.ChaGC_SkywardDiveLaunch.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2d0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGC_SkywardDiveLaunch.GameplayCueNotify_Actor.Actor.Object
	SkywardDiveConfig* SkillConfig;//[Offset: 0x298, Size: 0x8]
	ParticleSystemComponent*[] CacheSkywardExtraEffects;//[Offset: 0x2a0, Size: 0x10]
	CameraShake* LaunchCameraShakeInstance;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_InSmokeBase_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Rifle_WL05_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0xfffffffeea8de100
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_InWater_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SI_AirdropBox_TreasureBox_C.AirDropTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc90, Size: 0x8]
	StaticMeshComponent* SqueezeSphere;//[Offset: 0xc98, Size: 0x8]
	StaticMeshComponent* BoxExtent;//[Offset: 0xca0, Size: 0x8]
	SceneComponent* AuxiliaryShape;//[Offset: 0xca8, Size: 0x8]
	ParticleSystemComponent* TrailFlame4;//[Offset: 0xcb0, Size: 0x8]
	ParticleSystemComponent* TrailFlame3;//[Offset: 0xcb8, Size: 0x8]
	ParticleSystemComponent* TrailFlame2;//[Offset: 0xcc0, Size: 0x8]
	ParticleSystemComponent* TrailFlame1;//[Offset: 0xcc8, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0xcd0, Size: 0x8]
	StaticMeshComponent* FX_Light_Flow02;//[Offset: 0xcd8, Size: 0x8]
	StaticMeshComponent* FX_Light_Flow01;//[Offset: 0xce0, Size: 0x8]
	StaticMeshComponent* FX_Mesh_000;//[Offset: 0xce8, Size: 0x8]
	StaticMeshComponent* FX_Mesh_001;//[Offset: 0xcf0, Size: 0x8]
	StaticMeshComponent* FX_Tag_Glow;//[Offset: 0xcf8, Size: 0x8]
	StaticMeshComponent* FX_Tag;//[Offset: 0xd00, Size: 0x8]
	SceneComponent* Position;//[Offset: 0xd08, Size: 0x8]
	SceneComponent* VFX;//[Offset: 0xd10, Size: 0x8]
	StaticMeshComponent* FX_Mesh_002;//[Offset: 0xd18, Size: 0x8]
	float FallingTrialFade_FadeAlpha_1A747A8947E4DBF6C38523A7ADB44EA3;//[Offset: 0xd20, Size: 0x4]
	byte FallingTrialFade__Direction_1A747A8947E4DBF6C38523A7ADB44EA3;//[Offset: 0xd24, Size: 0x1]
	TimelineComponent* FallingTrialFade;//[Offset: 0xd28, Size: 0x8]
	void UserConstructionScript(Vector PreviewLocation, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_Conv_FloatToVector_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue);// 0xfffffffeeef73960
	void FallingTrialFade__FinishedFunc();// 0x2dffba0522902e
	void FallingTrialFade__UpdateFunc();// 0xffffff8c84f39000
	void PlayOpenAnimation();// 0xfffffffeeef73880
	void PlayLandingAnimation();// 0xfffffffeeef6f7c0
	void OnMovementStateChanged(enum InPrevMovementState, enum InCurrMovementState);// 0xfffffffeeef6e3a0
	void OnFadeOutFallingEffect();// 0x230fb051b9001
	void ReceiveBeginPlay();// 0x230ef051b9001
	void ReceiveOnOpenStateChanged(enum InPrevOpenState, enum InCurrOpenState);// 0xfffffffeeef73dc0
	void ExecuteUbergraph_BP_SI_AirdropBox_TreasureBox(int EntryPoint, enum K2Node_Event_InPrevOpenState, enum K2Node_Event_InCurrOpenState, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, enum K2Node_Event_InPrevMovementState, enum K2Node_Event_InCurrMovementState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsActive_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, SCustomGameMode* K2Node_DynamicCast_AsSCustom_Game_Mode, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CheckLogicComponentIsA_ReturnValue, bool CallFunc_CheckLogicComponentIsA_ReturnValue, bool CallFunc_CheckLogicComponentIsA_ReturnValue);// 0xfffffffeeef70be0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FX_BP_AirDrop_Range_C.AirDropAudioActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	CapsuleComponent* Capsule;//[Offset: 0x268, Size: 0x8]
	StaticMeshComponent* FX_Spread_OutSide;//[Offset: 0x270, Size: 0x8]
	StaticMeshComponent* Arrow_Bright;//[Offset: 0x278, Size: 0x8]
	SceneComponent* AbsoluteRotation;//[Offset: 0x280, Size: 0x8]
	ActorSequenceComponent* Show;//[Offset: 0x288, Size: 0x8]
	StaticMeshComponent* fx_ring_small;//[Offset: 0x290, Size: 0x8]
	StaticMeshComponent* fx_ring_big;//[Offset: 0x298, Size: 0x8]
	StaticMeshComponent* fx_spread;//[Offset: 0x2a0, Size: 0x8]
	SceneComponent* Range;//[Offset: 0x2a8, Size: 0x8]
	float ArrowDisappear_FadeAlpha_C86D16DE42B775E284B561B357D0E147;//[Offset: 0x2b0, Size: 0x4]
	byte ArrowDisappear__Direction_C86D16DE42B775E284B561B357D0E147;//[Offset: 0x2b4, Size: 0x1]
	TimelineComponent* ArrowDisappear;//[Offset: 0x2b8, Size: 0x8]
	void ArrowDisappear__FinishedFunc();// 0xffffffff69f3f7c0
	void ArrowDisappear__UpdateFunc();// 0xfffffffeeef6c260
	void DisappearAirDropArrow();// 0xfffffffe8cca6480
	void ExecuteUbergraph_FX_BP_AirDrop_Range(int EntryPoint);// 0xfffffffeeef761a0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AirDropAudioActor.Actor.Object
	int ThisID;//[Offset: 0x238, Size: 0x4]
	bool bSummonedByCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0x248, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x250, Size: 0x8]
	bool bHasLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x447f04f39041
	void DisappearAirDropArrow();// 0x447e04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorSequenceComponent.ActorComponent.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0xb0, Size: 0x14]
	ActorSequence* Sequence;//[Offset: 0xc8, Size: 0x8]
	ActorSequencePlayer* SequencePlayer;//[Offset: 0xd0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	ActorSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorSequenceObjectReferenceMap
	Guid[] BindingIds;//[Offset: 0x0, Size: 0x10]
	ActorSequenceObjectReferences[] References;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorSequenceObjectReferences
	ActorSequenceObjectReference[] Array;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorSequenceObjectReference
	enum Type;//[Offset: 0x0, Size: 0x1]
	Guid ActorId;//[Offset: 0x4, Size: 0x10]
	FString PathToComponent;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorSequencePlayer.MovieSceneSequencePlayer.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Tire_WL02_TurretA1_C.BP_SolarVehicleSiegeWeapon_C.SolarVehicleSiegeWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarVehicleSiegeWeapon_C.SolarVehicleSiegeWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSiegeWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarVH_Tire_9A04_new_C.BP_SiegeVehicleBase_C.SolarSiegeVehicle.SolarWheeledVehicle.SolarVehiclePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1440, Size: 0x8]
	void ReceiveTick(float DeltaSeconds);// 0xffffff8c04f39000
	void ExecuteUbergraph_BP_SolarVH_Tire_9A04_new(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x9f657ea45324889f
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SiegeVehicleBase_C.SolarSiegeVehicle.SolarWheeledVehicle.SolarVehiclePawn.Pawn.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSiegeVehicle.SolarWheeledVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SiegeVehicleOpenTraceData[] CheckOpenTraceBox;//[Offset: 0x13e8, Size: 0x10]
	float CheckOffsetZ;//[Offset: 0x13f8, Size: 0x4]
	SolarSiegeVehicleAnimInstance* SolarVehicleAnimInstance;//[Offset: 0x1400, Size: 0x8]
	FName[] HolerBoneNames;//[Offset: 0x1408, Size: 0x10]
	ParticleSystem* SiegeWeaponFire;//[Offset: 0x1418, Size: 0x8]
	class CameraShake* OpenCameraShake;//[Offset: 0x1428, Size: 0x8]
	float OpenCameraShakeSpeed;//[Offset: 0x1430, Size: 0x4]
	ParticleSystemComponent* MuzzlePSC;//[Offset: 0x1438, Size: 0x8]
	bool IsSiegeWeaponOpened();// 0x579204f39041
	byte GetCurrentVehicleAnimation();// 0x579104f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWheeledVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SolarWheeledVehicleMovement* VehicleMovement;//[Offset: 0x13c8, Size: 0x8]
	bool bReplicatedDrift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d0, Size: 0x1]
	bool bReplicatedIsBurnout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d1, Size: 0x1]
	float PlatformDetachImpulse;//[Offset: 0x13d4, Size: 0x4]
	void StatVehicleAutoSteering(bool bInSameDirection);// 0x579004f39041
	void ServerSetIsDrift(bool bInDrift, byte InDriveType);// 0x578f04f39041
	void ServerSetIsBurnout(bool bInBurnout);// 0x578e04f39041
	void OnRep_IsBurnout();// 0x578d04f39041
	void OnRep_Drift();// 0x578c04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SiegeVehicleOpenTraceData
	Vector BoxPostion;//[Offset: 0x0, Size: 0xc]
	Vector TraceBox;//[Offset: 0xc, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSiegeVehicleAnimInstance.SolarWheeledVehicleAnimInstance.SolarVehicleAnimInstance.AnimInstance.Object
	Vector[] SiegeHolderLocations;//[Offset: 0x428, Size: 0x10]
	float PreStopSpeed;//[Offset: 0x43c, Size: 0x4]
	float WeaponFireAlphaF;//[Offset: 0x440, Size: 0x4]
	float WeaponFireAlphaB;//[Offset: 0x444, Size: 0x4]
	float WeaponFireAlphaR;//[Offset: 0x448, Size: 0x4]
	float WeaponFireAlphaL;//[Offset: 0x44c, Size: 0x4]
	float StopSoundMinSpeed;//[Offset: 0x450, Size: 0x4]
	void AnimNotify_StopLeft();// 0x579804f39041
	void AnimNotify_CloseIdleLeft();// 0x579704f39041
	void AnimNotify_CloseIdleEnter();// 0x579604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWheeledVehicleAnimInstance.SolarVehicleAnimInstance.AnimInstance.Object
	Vector FLWheelBoneScale;//[Offset: 0x348, Size: 0xc]
	Vector FRWheelBoneScale;//[Offset: 0x354, Size: 0xc]
	Vector MLWheelBoneScale;//[Offset: 0x360, Size: 0xc]
	Vector MRWheelBoneScale;//[Offset: 0x36c, Size: 0xc]
	Vector BLWheelBoneScale;//[Offset: 0x378, Size: 0xc]
	Vector BRWheelBoneScale;//[Offset: 0x384, Size: 0xc]
	Vector FLWheelBoneLocation;//[Offset: 0x390, Size: 0xc]
	Vector FRWheelBoneLocation;//[Offset: 0x39c, Size: 0xc]
	Vector MLWheelBoneLocation;//[Offset: 0x3a8, Size: 0xc]
	Vector MRWheelBoneLocation;//[Offset: 0x3b4, Size: 0xc]
	Vector BLWheelBoneLocation;//[Offset: 0x3c0, Size: 0xc]
	Vector BRWheelBoneLocation;//[Offset: 0x3cc, Size: 0xc]
	Rotator FLWheelBoneRotation;//[Offset: 0x3d8, Size: 0xc]
	Rotator FRWheelBoneRotation;//[Offset: 0x3e4, Size: 0xc]
	Rotator MLWheelBoneRotation;//[Offset: 0x3f0, Size: 0xc]
	Rotator MRWheelBoneRotation;//[Offset: 0x3fc, Size: 0xc]
	Rotator BLWheelBoneRotation;//[Offset: 0x408, Size: 0xc]
	Rotator BRWheelBoneRotation;//[Offset: 0x414, Size: 0xc]
	void AnimNotify_EnablePlatform();// 0x579504f39041
	void AnimNotify_DisablePlatform();// 0x579404f39041
	void AnimNotify_ClosePlatform();// 0x579304f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleAnimInstance.AnimInstance.Object
	Rotator VehicleRudderRotator;//[Offset: 0x270, Size: 0xc]
	float VehicleRotationValue;//[Offset: 0x27c, Size: 0x4]
	float VehicleRotationPercent;//[Offset: 0x280, Size: 0x4]
	float VehicleCameraYaw;//[Offset: 0x284, Size: 0x4]
	float VehicleCameraPitch;//[Offset: 0x288, Size: 0x4]
	bool bWithDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	bool bAbilityActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 0x1]
	float Speed;//[Offset: 0x290, Size: 0x4]
	Vector Velocity;//[Offset: 0x294, Size: 0xc]
	float VelocityDegree;//[Offset: 0x2a0, Size: 0x4]
	Vector2D PlayerInputVector;//[Offset: 0x2a4, Size: 0x8]
	bool bVehicleInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1]
	enum AnimState;//[Offset: 0x2ae, Size: 0x1]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0x2b0, Size: 0x8]
	AnimMontage* VehicleWeaponRechamberMontage;//[Offset: 0x2b8, Size: 0x8]
	AnimMontage* VehicleWeaponChargingMontage;//[Offset: 0x2c0, Size: 0x8]
	Rotator VehicleWeaponPitchRot;//[Offset: 0x2c8, Size: 0xc]
	Rotator VehicleWeaponYawRot;//[Offset: 0x2d4, Size: 0xc]
	Vector LeftBoneIKOffset;//[Offset: 0x2e0, Size: 0xc]
	Vector RightBoneIKOffset;//[Offset: 0x2ec, Size: 0xc]
	bool bUpdateVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	Vector ExternalForceScale;//[Offset: 0x2fc, Size: 0xc]
	FName MoveReferenceBone;//[Offset: 0x308, Size: 0x8]
	float AlphaBlendInSpeed;//[Offset: 0x310, Size: 0x4]
	float AlphaBlendOutSpeed;//[Offset: 0x314, Size: 0x4]
	Vector AnimExternalForce;//[Offset: 0x318, Size: 0xc]
	float AnimDynamicAlpha;//[Offset: 0x324, Size: 0x4]
	void OnFireMontageStart(float InMontageLength);// 0x4e3d04f39041
	void OnFireMontageEnd(AnimMontage* InMontage, bool bInterrupted);// 0x4e3c04f39041
	SolarVehiclePawn* GetVehiclePawnOwner();// 0x4e3b04f39041
	float GetPlayTimeAgainstFootLocationCurve(AnimSequence* InAnimSequence, out const FName InCurveName, float InFootLocationValue);// 0x4e3a04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWheeledVehicleMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float LowFrameRateDeltaTime;//[Offset: 0x138, Size: 0x4]
	float MinLocationDiffForSuspensionTrace;//[Offset: 0x13c, Size: 0x4]
	float Mass;//[Offset: 0x140, Size: 0x4]
	float CenterOfMassOffsetOnZ;//[Offset: 0x144, Size: 0x4]
	float CenterOfMassOffsetOnX;//[Offset: 0x148, Size: 0x4]
	float SuspensionClampRatioInLowFrame;//[Offset: 0x14c, Size: 0x4]
	RuntimeFloatCurve AccelerationCurve;//[Offset: 0x150, Size: 0x88]
	RuntimeFloatCurve AccelerationCurveReverse;//[Offset: 0x1d8, Size: 0x88]
	int ReverseEvaluationAccuracy;//[Offset: 0x260, Size: 0x4]
	RuntimeFloatCurve SteerAngleLimit;//[Offset: 0x268, Size: 0x88]
	RuntimeFloatCurve SteeringResetSpeed;//[Offset: 0x2f0, Size: 0x88]
	RuntimeFloatCurve SteeringSpeed;//[Offset: 0x378, Size: 0x88]
	RuntimeFloatCurve SteeringFraction;//[Offset: 0x400, Size: 0x88]
	RuntimeFloatCurve SteerAngleMutiplier;//[Offset: 0x488, Size: 0x88]
	float LowSteeringSpeed;//[Offset: 0x510, Size: 0x4]
	float LowSteeringSpeedAccelerationMultiplier;//[Offset: 0x514, Size: 0x4]
	float LowSteeringSpeedAngleLimitMultiplier;//[Offset: 0x518, Size: 0x4]
	float LowSpeedSteeringThresholdOnHorizontalInput;//[Offset: 0x51c, Size: 0x4]
	float FlightStabilizationDamping;//[Offset: 0x520, Size: 0x4]
	float LateralFrictionWhenOnlySteeringWheelsOnGround;//[Offset: 0x524, Size: 0x4]
	WheelData[] Wheels;//[Offset: 0x528, Size: 0x10]
	float DepenetrationForceMultiplierForVelocityUp;//[Offset: 0x538, Size: 0x4]
	float RotationMinAngle;//[Offset: 0x53c, Size: 0x4]
	float MaxPitchRotation;//[Offset: 0x540, Size: 0x4]
	float MaxRollRotation;//[Offset: 0x544, Size: 0x4]
	float RotationTimeLimit;//[Offset: 0x548, Size: 0x4]
	bool bOpenTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 0x1]
	float PitchTorqueInDegree;//[Offset: 0x550, Size: 0x4]
	float RollTorqueInDegree;//[Offset: 0x554, Size: 0x4]
	float TorqueForUpsideDown;//[Offset: 0x558, Size: 0x4]
	float MaxAngularVelocityInAir;//[Offset: 0x55c, Size: 0x4]
	float TorqueLerpAcceleration;//[Offset: 0x560, Size: 0x4]
	float BalanceAngularVelocityWheelsOnGround;//[Offset: 0x564, Size: 0x4]
	CurveFloat* DustEffectScaleCurve;//[Offset: 0x568, Size: 0x8]
	<byte,ParticleSystem*> BrokenWheelDustEffect;//[Offset: 0x570, Size: 0x50]
	float WheelDecelerationInBrakeLock;//[Offset: 0x5c0, Size: 0x4]
	float WheelLerpSpeedInSlip;//[Offset: 0x5c4, Size: 0x4]
	float GravityAcceleration;//[Offset: 0x5c8, Size: 0x4]
	float GravityAccelerationInAir;//[Offset: 0x5cc, Size: 0x4]
	float MinHeightForGravityAccelerationInAir;//[Offset: 0x5d0, Size: 0x4]
	float MaxHeightForGravityAccelerationInAir;//[Offset: 0x5d4, Size: 0x4]
	float GravityTransitionDuration;//[Offset: 0x5d8, Size: 0x4]
	float MaxStaticDegree;//[Offset: 0x5dc, Size: 0x4]
	RuntimeFloatCurve GravityMultiplierForAcceleration;//[Offset: 0x5e0, Size: 0x88]
	float DecelerationUnderWater;//[Offset: 0x668, Size: 0x4]
	bool bAutoSteeringEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1]
	float AutoSteeringThresholdTime;//[Offset: 0x670, Size: 0x4]
	float AutoSteeringSpeedThreshold;//[Offset: 0x674, Size: 0x4]
	float AutoSteeringTraceRadius;//[Offset: 0x678, Size: 0x4]
	Vector LeftAutoSteeringTraceStart;//[Offset: 0x67c, Size: 0xc]
	Vector RightAutoSteeringTraceStart;//[Offset: 0x688, Size: 0xc]
	float LeftToRightTangentDegree;//[Offset: 0x694, Size: 0x4]
	float AutoSteeringAngleLimit;//[Offset: 0x698, Size: 0x4]
	float AutoSteeringSpeed;//[Offset: 0x69c, Size: 0x4]
	float AutoSteeringResetSpeed;//[Offset: 0x6a0, Size: 0x4]
	float AutoSteeringLimitInputY;//[Offset: 0x6a4, Size: 0x4]
	WheeledVehicleInputDataAsset* InputData;//[Offset: 0x6a8, Size: 0x8]
	float SteeringLimitMultiplierInDrift;//[Offset: 0x6b0, Size: 0x4]
	float AccelerationMultiplierInDrift;//[Offset: 0x6b4, Size: 0x4]
	float AccelerationInDriftLerpSpeed;//[Offset: 0x6b8, Size: 0x4]
	float AccelerationOutDriftLerpSpeed;//[Offset: 0x6bc, Size: 0x4]
	float MinDriftSpeed;//[Offset: 0x6c0, Size: 0x4]
	float DriftCompensationRate;//[Offset: 0x6c4, Size: 0x4]
	float DriftCancelTimeWithoutInput;//[Offset: 0x6c8, Size: 0x4]
	<byte,ParticleSystem*> DriftParticles;//[Offset: 0x6d0, Size: 0x50]
	float TimerForAntiStuck;//[Offset: 0x720, Size: 0x4]
	float StuckAcceleration;//[Offset: 0x724, Size: 0x4]
	float StuckAccelerationLerpSpeed;//[Offset: 0x728, Size: 0x4]
	float MinAntiRollThreshold;//[Offset: 0x72c, Size: 0x4]
	float MaxAntiRollThreshold;//[Offset: 0x730, Size: 0x4]
	GearSetting[] ForwardGears;//[Offset: 0x738, Size: 0x10]
	float ReverseRpm;//[Offset: 0x748, Size: 0x4]
	float SlipRpmMultiplier;//[Offset: 0x74c, Size: 0x4]
	float RpmSlipSpeed;//[Offset: 0x750, Size: 0x4]
	bool bCanInRPMRedLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 0x1]
	float BurnoutDelayTime;//[Offset: 0x758, Size: 0x4]
	float BurnoutSoundRatio;//[Offset: 0x75c, Size: 0x4]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x8c8, Size: 0x8]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x8d0, Size: 0x8]
	float InputVecXForRotateInAir;//[Offset: 0x8d8, Size: 0x4]
	float InputVecYForRotateInAir;//[Offset: 0x8dc, Size: 0x4]
	float BalanceRotateSpendTime;//[Offset: 0x8e0, Size: 0x4]
	float InputRotateSpendTime;//[Offset: 0x8e4, Size: 0x4]
	byte[] InAirWheelsIndex;//[Offset: 0x8e8, Size: 0x10]
	AkComponent* AkAudioComponent;//[Offset: 0x908, Size: 0x8]
	void SetIsDrift(bool bInDrift, bool bResetDrift);// 0x5ff004f39041
	void SetIsBurnout(bool bInBurnout);// 0x5fef04f39041
	void SetDriveType(enum InType);// 0x5fee04f39041
	void SetCanAutoSteering(bool bCan);// 0x5fed04f39041
	void SetCanAdjustInAir(bool bCan);// 0x5fec04f39041
	void OnVehicleSkinSoundUpdate(SolarVehicleSoundDataAsset* OldVehicleSoundDataAsset, SolarVehicleSoundDataAsset* NewVehicleSoundDataAsset);// 0x5feb04f39041
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x5fea04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WheelData
	bool bIsPowered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsPoweredInDrift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]
	Vector Offset;//[Offset: 0xc, Size: 0xc]
	Vector WheelForceOffset;//[Offset: 0x18, Size: 0xc]
	float Radius;//[Offset: 0x24, Size: 0x4]
	float RadiusAfterBroken;//[Offset: 0x28, Size: 0x4]
	float Width;//[Offset: 0x2c, Size: 0x4]
	float MaxRaise;//[Offset: 0x30, Size: 0x4]
	float MaxDrop;//[Offset: 0x34, Size: 0x4]
	float SpringStiffness;//[Offset: 0x38, Size: 0x4]
	float DamperStiffness;//[Offset: 0x3c, Size: 0x4]
	float LaterialFriction;//[Offset: 0x40, Size: 0x4]
	float LaterialFrictionAfterBroken;//[Offset: 0x44, Size: 0x4]
	float LaterialFrictionInDrift;//[Offset: 0x48, Size: 0x4]
	float DriftingLaterialFrictionLerpSpeed;//[Offset: 0x4c, Size: 0x4]
	RuntimeFloatCurve EndDriftFrictionCurve;//[Offset: 0x50, Size: 0x88]
	VehicleVFX DriftDecal;//[Offset: 0xe0, Size: 0x90]
	float RollingFriction;//[Offset: 0x170, Size: 0x4]
	float BrakeDeceleration;//[Offset: 0x174, Size: 0x4]
	float DustEffectScale;//[Offset: 0x178, Size: 0x4]
	float DustEffectScaleAfterBroken;//[Offset: 0x17c, Size: 0x4]
	float DriftEffectScale;//[Offset: 0x180, Size: 0x4]
	ParticleSystemComponent* RaiseDustParticleComponent;//[Offset: 0x260, Size: 0x8]
	ParticleSystemComponent* DriftParticleComponent;//[Offset: 0x268, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WheeledVehicleInputDataAsset.DataAsset.Object
	float BrakeDelayTime;//[Offset: 0x30, Size: 0x4]
	float ThrottleReleaseDelayTime;//[Offset: 0x34, Size: 0x4]
	float MicroThrottleInputThreshold;//[Offset: 0x38, Size: 0x4]
	float MicroThrottleInputSpeed;//[Offset: 0x3c, Size: 0x4]
	RuntimeFloatCurve JoyStickSteeringInputCurve;//[Offset: 0x40, Size: 0x88]
	RuntimeFloatCurve KeyboardSteeringInputCurve;//[Offset: 0xc8, Size: 0x88]
	RuntimeFloatCurve GamepadThrottleInputCurve;//[Offset: 0x150, Size: 0x88]
	RuntimeFloatCurve GamepadBrakeInputCurve;//[Offset: 0x1d8, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GearSetting
	float MinSpeed;//[Offset: 0x0, Size: 0x4]
	float MaxSpeed;//[Offset: 0x4, Size: 0x4]
	float StartRpm;//[Offset: 0x8, Size: 0x4]
	float MaxRpm;//[Offset: 0xc, Size: 0x4]
	float RpmDescendSpeed;//[Offset: 0x10, Size: 0x4]
	float MinDescendRPM;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_ORB_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8]
	void FX_Flying(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0xffffffff0085b700
	void FX_Idle(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0xffffff8f04f39002
	void FX_LowPower(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x16946051b9001
	void FX_Charging(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x253fb051b9008
	void OnMeshEffectFactorChange();// 0x271e504f39041
	void ExecuteUbergraph_BP_PBags_ORB_Set01(int EntryPoint, bool CallFunc_IsCharging_ReturnValue, bool CallFunc_HasEnergy_ReturnValue);// 0x6188c04f89100
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SMG_B9A04_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0xfffffffeef0789e0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_Default_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_BDogRM_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_HMF_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_BlackHole_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_Burning_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Hover_Soroll04_C.SolarIronManVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1920, Size: 0x8]
	ActiveGameplayEffectHandle InhibitDamageReactionGEHandle;//[Offset: 0x1928, Size: 0x8]
	void ReceiveBeginPlay();// 0xfffffffeeeb35fe0
	void ApplyInhibitDamageReactionGameplayEffect(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0xfffffffeeeb30940
	void RemoveInhibitDamageReactionGameplayEffect(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0xfffffffeea8e8120
	void ExecuteUbergraph_BP_VH_Hover_Soroll04(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, int K2Node_CustomEvent_GetOnSeatIndex, SolarCharacter* K2Node_CustomEvent_GetOnPlayer, int K2Node_CustomEvent_GetOffSeatIndex, SolarCharacter* K2Node_CustomEvent_GetOffPlayer, AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, ActiveGameplayEffectHandle CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue, bool CallFunc_RemoveActiveGameplayEffect_ReturnValue);// 0xfffffffe8e36de60
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarIronManVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	FName LeftHandSocket;//[Offset: 0x13e0, Size: 0x8]
	FName RightHandSocket;//[Offset: 0x13e8, Size: 0x8]
	FName LeftFootSocket;//[Offset: 0x13f0, Size: 0x8]
	FName RightFootSocket;//[Offset: 0x13f8, Size: 0x8]
	FName BackPackSocket;//[Offset: 0x1400, Size: 0x8]
	AnimMontage* RotationLaserMontage;//[Offset: 0x1408, Size: 0x28]
	Vector BoxHalfSize;//[Offset: 0x1430, Size: 0xc]
	int QuerySameActorMaxNum;//[Offset: 0x143c, Size: 0x4]
	float VehicleSpeedThresholdFromStandToLie;//[Offset: 0x1440, Size: 0x4]
	VehicleVFX LeftHandBulletEffect;//[Offset: 0x1450, Size: 0x90]
	VehicleVFX LeftHandMuzzleEffect;//[Offset: 0x14e0, Size: 0x90]
	VehicleVFX RightHandBulletEffect;//[Offset: 0x1570, Size: 0x90]
	VehicleVFX RightHandMuzzleEffect;//[Offset: 0x1600, Size: 0x90]
	VehicleVFX HitEffect;//[Offset: 0x1690, Size: 0x90]
	VehicleVFX[] IronManJetEffectInfo;//[Offset: 0x1720, Size: 0x10]
	byte[] HitDecalExceptObjTypes;//[Offset: 0x1730, Size: 0x10]
	ParticleSystem* HitDecalParticle;//[Offset: 0x1740, Size: 0x28]
	Vector HitDecalScale;//[Offset: 0x1768, Size: 0xc]
	float HitDecalInterval;//[Offset: 0x1774, Size: 0x4]
	float HitDecalBeginTime;//[Offset: 0x1778, Size: 0x4]
	float HitDecalEndTime;//[Offset: 0x177c, Size: 0x4]
	float HitDecalLength;//[Offset: 0x1780, Size: 0x4]
	float SmoothRotationSpeed;//[Offset: 0x1788, Size: 0x4]
	float MaxJetEffectFXkgValue;//[Offset: 0x178c, Size: 0x4]
	FName JetEffectFXkgName;//[Offset: 0x1790, Size: 0x8]
	class GameplayEffect* CanNotSwitchSeat;//[Offset: 0x1798, Size: 0x8]
	StaticMesh* IronManStaticMeshWithDriver;//[Offset: 0x17f0, Size: 0x28]
	StaticMesh* IronManStaticMeshWithNoDriver;//[Offset: 0x1818, Size: 0x28]
	float MaxSpeedAfterCollision;//[Offset: 0x1840, Size: 0x4]
	bool bAddRiderSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1844, Size: 0x1]
	VehicleSeatSlot RiderSeatSlot;//[Offset: 0x1848, Size: 0xd8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SolarHoverVehicleMovement* VehicleMovement;//[Offset: 0x13c0, Size: 0x8]
	void OnVehicleRootHitForAttachPlatform(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x4e3704f39041
	void OnPlatformActorEndplay(Actor* Actor, byte EndPlayReason);// 0x4e3604f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHoverVehicleMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x230, Size: 0x8]
	float MinLocationDiffForThrusterTrace;//[Offset: 0x238, Size: 0x4]
	float MinRotationDiffForThrusterTrace;//[Offset: 0x23c, Size: 0x4]
	float DriverJustOnTimer;//[Offset: 0x240, Size: 0x4]
	Vector MassOffset;//[Offset: 0x244, Size: 0xc]
	float HoverForce;//[Offset: 0x250, Size: 0x4]
	float HoverSpringCoefficient;//[Offset: 0x254, Size: 0x4]
	float HoverDampingCoefficient;//[Offset: 0x258, Size: 0x4]
	float HoverHeight;//[Offset: 0x25c, Size: 0x4]
	float MinHoverHeight;//[Offset: 0x260, Size: 0x4]
	float BouncinessForMinHoverHeight;//[Offset: 0x264, Size: 0x4]
	ThrusterData[] ThrusterDataArray;//[Offset: 0x268, Size: 0x10]
	CurveFloat* DustEffectScaleCurve;//[Offset: 0x278, Size: 0x8]
	float HoverHeightBlendSpeed;//[Offset: 0x280, Size: 0x4]
	float ThrusterTargetAnimationBlendSpeed;//[Offset: 0x284, Size: 0x4]
	float YawDegreeDifference;//[Offset: 0x288, Size: 0x4]
	float SpoilerRotateSpeed;//[Offset: 0x28c, Size: 0x4]
	float MaxRudderRoll;//[Offset: 0x290, Size: 0x4]
	float MinRudderRoll;//[Offset: 0x294, Size: 0x4]
	float MaxRudderYaw;//[Offset: 0x298, Size: 0x4]
	float MinRudderYaw;//[Offset: 0x29c, Size: 0x4]
	float MeshLeaningTime;//[Offset: 0x2a0, Size: 0x4]
	float MeshRecoverTime;//[Offset: 0x2a4, Size: 0x4]
	float MeshRotateThreshold;//[Offset: 0x2a8, Size: 0x4]
	Rotator ClockwiseMeshRotator;//[Offset: 0x2ac, Size: 0xc]
	RuntimeFloatCurve AccelerationCurve;//[Offset: 0x2b8, Size: 0x88]
	float MaxSideMovingSpeed;//[Offset: 0x340, Size: 0x4]
	float MaxBackwardMovingSpeed;//[Offset: 0x344, Size: 0x4]
	float DecelerationDegree;//[Offset: 0x348, Size: 0x4]
	float DecelerationOnInput;//[Offset: 0x34c, Size: 0x4]
	float DecelerationOnMovingDirection;//[Offset: 0x350, Size: 0x4]
	float MinDecelerationOnMovingDirection;//[Offset: 0x354, Size: 0x4]
	GameplayTagContainer IgnoreDecelerationOnMovingDirectionTags;//[Offset: 0x358, Size: 0x20]
	RuntimeFloatCurve DecelerationOnSide;//[Offset: 0x378, Size: 0x88]
	RuntimeFloatCurve AccelerationMultiplierForSideVelocity;//[Offset: 0x400, Size: 0x88]
	float MaxControllableDegree;//[Offset: 0x488, Size: 0x4]
	GameplayTagContainer InAirControllableTags;//[Offset: 0x490, Size: 0x20]
	float AdditionalDegreeForStabilize;//[Offset: 0x4b0, Size: 0x4]
	RuntimeFloatCurve StabilizeDampingCurve;//[Offset: 0x4b8, Size: 0x88]
	RuntimeFloatCurve StabilizeSpeedCurve;//[Offset: 0x540, Size: 0x88]
	float TimerForAntiStuck;//[Offset: 0x5c8, Size: 0x4]
	float StuckAcceleration;//[Offset: 0x5cc, Size: 0x4]
	float StuckAccelerationLerpSpeed;//[Offset: 0x5d0, Size: 0x4]
	float GravityAcceleration;//[Offset: 0x5d4, Size: 0x4]
	float GravityWithoutDriver;//[Offset: 0x5d8, Size: 0x4]
	float LandingDuration;//[Offset: 0x5dc, Size: 0x4]
	float MaximumVelocityOnZWithoutDriver;//[Offset: 0x5e0, Size: 0x4]
	float DecelerationRateWithoutDriver;//[Offset: 0x5e4, Size: 0x4]
	float AngularDampingWithoutDriver;//[Offset: 0x5e8, Size: 0x4]
	float WaterLineForFloatingForce;//[Offset: 0x5ec, Size: 0x4]
	float UpwardAccelerationFloatingOnWater;//[Offset: 0x5f0, Size: 0x4]
	float WaterAlignSpeed;//[Offset: 0x5f4, Size: 0x4]
	float WaterHeightWithoutDriver;//[Offset: 0x5f8, Size: 0x4]
	PIDController UpwardForcePIDController;//[Offset: 0x5fc, Size: 0x1c]
	float RotateAccelaration;//[Offset: 0x618, Size: 0x4]
	float RotateDecelaration;//[Offset: 0x61c, Size: 0x4]
	float MaxAngularSpeed;//[Offset: 0x620, Size: 0x4]
	float HoverHeightMultiplierAfterBroken;//[Offset: 0x624, Size: 0x4]
	float ParticleMultiplierAfterBroken;//[Offset: 0x628, Size: 0x4]
	VehicleVFX[] ThrusterParticles;//[Offset: 0x630, Size: 0x10]
	VehicleVFX MovementParticles;//[Offset: 0x640, Size: 0x90]
	ThrusterState[] ThrusterStateArray;//[Offset: 0x910, Size: 0x10]
	SolarHoverVehicle* VehiclePawn;//[Offset: 0x920, Size: 0x8]
	SolarNetMovementComponent* VehicleNetMovement;//[Offset: 0x928, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x930, Size: 0x8]
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x531104f39041
	void OnDriverGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x531004f39041
	void OnDriverGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x530f04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ThrusterData
	float HoverHeightMultiplierInForward;//[Offset: 0x0, Size: 0x4]
	float HoverHeightMultiplierInBackward;//[Offset: 0x4, Size: 0x4]
	float HoverHeightMultiplierInLeft;//[Offset: 0x8, Size: 0x4]
	float HoverHeightMultiplierInRight;//[Offset: 0xc, Size: 0x4]
	bool bRaiseDust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float DustEffectScale;//[Offset: 0x14, Size: 0x4]
	Vector DustEffectOffest;//[Offset: 0x18, Size: 0xc]
	FName ThrusterSocket;//[Offset: 0x24, Size: 0x8]
	Vector ThrusterOffsetIfNoValidSocket;//[Offset: 0x2c, Size: 0xc]
	float SweepRadius;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PIDController
	float PCoeff;//[Offset: 0x0, Size: 0x4]
	float ICoeff;//[Offset: 0x4, Size: 0x4]
	float DCoeff;//[Offset: 0x8, Size: 0x4]
	float Minimum;//[Offset: 0xc, Size: 0x4]
	float Maximum;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ThrusterState
	HitResult TouchGroundHit;//[Offset: 0x38, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Hover_Soroll04_ShapedGun_C.SolarVehicleIronManWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleIronManWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	WeaponFireLaserCollector* LaserCollector;//[Offset: 0x1120, Size: 0x8]
	AnimMontage* DriverStandAttackRight;//[Offset: 0x1130, Size: 0x28]
	AnimMontage* DriverLieAttackRight;//[Offset: 0x1158, Size: 0x28]
	FName AttackSectionName;//[Offset: 0x1180, Size: 0x8]
	void ServerUpdateLaserInfo(const Vector InTarget, Actor* InTargetActor);// 0x5f2804f39041
	void ServerLaserHit(const HitResult[] Hits, float InActivateTime);// 0x5f2704f39041
	void ServerInterruptLaser();// 0x5f2604f39041
	void ServerActivateLaserShot(const Vector InTarget, Actor* InTargetActor);// 0x5f2504f39041
	SkeletalMeshComponent* GetDriverCharacterMesh();// 0x5f2404f39041
	void ClientUpdateLaserInfo(const Vector InTarget, Actor* InTargetActor);// 0x5f2304f39041
	void ClientLaserHit(const HitResult[] Hits, float InActivateTime);// 0x5f2204f39041
	void ClientInterruptLaser();// 0x5f2104f39041
	void ClientActivateLaserShot(const Vector InTarget, Actor* InTargetActor);// 0x5f2004f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponFireLaserCollector.ActorComponent.Object
	SolarWeapon* OwnerWeapon;//[Offset: 0xb8, Size: 0x8]
	AkComponent* FireAkComponent;//[Offset: 0xc0, Size: 0x8]
	AkComponent* ImpactAkComponent;//[Offset: 0xc8, Size: 0x8]
	WeaponFireLaserElement ActElement;//[Offset: 0xd0, Size: 0x48]
	WeaponFireLaserElement[] FadingElements;//[Offset: 0x118, Size: 0x10]
	ParticleSystem* ExplodeEffectParticle;//[Offset: 0x140, Size: 0x8]
	ParticleSystem* DecalsEffectParticle;//[Offset: 0x148, Size: 0x8]
	ParticleSystemComponent*[] CacheParticles;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponFireLaserElement
	ParticleSystemComponent* BeamEffect;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SI_ElectricboxB_C.ElectronicTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x640, Size: 0x8]
	BoxComponent* SummonCollision;//[Offset: 0x648, Size: 0x8]
	StaticMeshComponent* 3DIcon;//[Offset: 0x650, Size: 0x8]
	float OpenAnimation_OpenCurve_D871E75F4C49C735C04C6C90FE58E949;//[Offset: 0x658, Size: 0x4]
	byte OpenAnimation__Direction_D871E75F4C49C735C04C6C90FE58E949;//[Offset: 0x65c, Size: 0x1]
	TimelineComponent* OpenAnimation;//[Offset: 0x660, Size: 0x8]
	void OpenAnimation__FinishedFunc();// 0xc9f0051b9001
	void OpenAnimation__UpdateFunc();// 0x1840804f39001
	void PlayOpenAnimation();// 0x1d9cf04f5dc3b
	void ExecuteUbergraph_BP_SI_ElectricboxB(int EntryPoint);// 0xb950ac4c4addb994
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ElectronicTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	FString OnFinishSpawnLoopAudio;//[Offset: 0x600, Size: 0x10]
	FString OnStopLoopAudio;//[Offset: 0x610, Size: 0x10]
	FString OnOpenAudio;//[Offset: 0x620, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x630, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Rifle_WL03_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x217ee051b900b
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_CM_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8]
	void FX_Flying();// 0xfffffffe887fffa0
	void FX_Idle();// 0x267c7051b9008
	void FX_LowPower();// 0x2277e051b9001
	void FX_Charging();// 0xfffffffe8cc7d920
	void FX_Default();// 0xfffffffe8479d220
	void OnMeshEffectFactorChange();// 0xfffffffe87e21900
	void ExecuteUbergraph_BP_PBags_CM_Set01(int EntryPoint, bool CallFunc_IsCharging_ReturnValue, bool CallFunc_HasEnergy_ReturnValue);// 0xfffffffe87e21820
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_RifleShotgun_WL02_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xdf0, Size: 0x8]
	FString GetModuleName();// 0xfffffffeef06efe0
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0xffffff8c04f39000
	void ExecuteUbergraph_BP_RifleShotgun_WL02_Set00(int EntryPoint, ParticleSystemComponent* K2Node_Event_PSC, const Vector K2Node_Event_Position, const float K2Node_Event_Scale, bool CallFunc_IsValid_ReturnValue);// 0xfffffffeef075640
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Rifle_Mphy03_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0xfffffffeef06e480
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_HOD_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_GM_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8]
	PrimitiveComponent* PBags_GM_Set01;//[Offset: 0x328, Size: 0x8]
	void FX_Default();// 0xffffff8f04f39002
	void FX_Idle(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0xfffffffeea70fec0
	void FX_Flying(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0xfffffffe87e1b000
	void FX_LowPower(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0xfffffffe8479ed40
	void FX_Charging(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x24894051b9001
	void OnMeshEffectFactorChange();// 0x274e6051b9008
	void ExecuteUbergraph_BP_PBags_GM_Set01(int EntryPoint, bool CallFunc_IsCharging_ReturnValue, bool CallFunc_HasEnergy_ReturnValue);// 0xffffff8c04f39000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Sniper_Mphy02_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x2c9f3051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Hover_Soroll03_C.BP_HoverVehicleBase_C.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x13e0, Size: 0x8]
	BoxComponent* CollisionForDriver;//[Offset: 0x13e8, Size: 0x8]
	ActiveGameplayEffectHandle InhibitDamageReactionGEHandle;//[Offset: 0x13f0, Size: 0x8]
	void Circle Y(float Z, float X, out float Y, float CallFunc_Square_ReturnValue, float CallFunc_Square_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Sqrt_ReturnValue);// 0x25681051b9008
	void OnPlayerGetOnVehicle_Event(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0xfffffffe847a29a0
	void OnPlayerGetOffVehicle_Event(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x3abfbc3004f39414
	void ReceiveBeginPlay();// 0x2dffba0522902e
	void ReceiveEndPlay(byte EndPlayReason);// 0x25280051b9008
	void ApplyInhibitDamageReactionGameplayEffect(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0xd82af7d58f322daf
	void RemoveInhibitDamageReactionGameplayEffect(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0xfffffffe884d1ba0
	static void ExecuteUbergraph_BP_VH_Hover_Soroll03(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, int K2Node_CustomEvent_GetOnSeatIndex, SolarCharacter* K2Node_CustomEvent_GetOnPlayer, int K2Node_CustomEvent_GetOffSeatIndex, SolarCharacter* K2Node_CustomEvent_GetOffPlayer, byte K2Node_Event_EndPlayReason, int K2Node_CustomEvent_GetOnSeatIndex, SolarCharacter* K2Node_CustomEvent_GetOnPlayer, int K2Node_CustomEvent_GetOffSeatIndex, SolarCharacter* K2Node_CustomEvent_GetOffPlayer, AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, ActiveGameplayEffectHandle CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue, bool CallFunc_RemoveActiveGameplayEffect_ReturnValue);// 0x258ae04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_HoverVehicleBase_C.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Hover_Soroll03_TurretA1_C.BP_SolarVehicleHoverWeapon_C.SolarVehicleHoverWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarVehicleHoverWeapon_C.SolarVehicleHoverWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleHoverWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	float MoveDelayTime;//[Offset: 0x1120, Size: 0x4]
	float InterpSpeed;//[Offset: 0x1124, Size: 0x4]
	Vector WeaponOpenOffset;//[Offset: 0x1128, Size: 0xc]
	CurveFloat* WeaponHoverOffsetCurve;//[Offset: 0x1138, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Hover_Soroll05_C.SolarAirPlaneVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAirPlaneVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	StaticMeshComponent* WingCollisionComponent;//[Offset: 0x13e0, Size: 0x8]
	AirPlaneVehicleDataAsset* AirPlaneData;//[Offset: 0x13e8, Size: 0x8]
	float MaxTakingOffTime;//[Offset: 0x13f0, Size: 0x4]
	float TakingOffHeight;//[Offset: 0x13f4, Size: 0x4]
	float TakingOffGravity;//[Offset: 0x13f8, Size: 0x4]
	float CruisingGravity;//[Offset: 0x13fc, Size: 0x4]
	float CrusingPitchOffSetBasedOnCamera;//[Offset: 0x1400, Size: 0x4]
	class GameplayEffect* CruisingEffect;//[Offset: 0x1408, Size: 0x8]
	VehicleCameraDataAsset* CruisingCameraData;//[Offset: 0x1410, Size: 0x8]
	float StartRollingServerWorldTime;//[Offset: 0x1418, Size: 0x4]
	byte RollingCount;//[Offset: 0x141c, Size: 0x1]
	ParticleSystemComponent*[] ThrusterParticleComponents;//[Offset: 0x14a0, Size: 0x10]
	ParticleSystemComponent*[] WingParticleComponents;//[Offset: 0x14b0, Size: 0x10]
	ParticleSystemComponent*[] BulletParticleComponents;//[Offset: 0x14c0, Size: 0x10]
	MaterialInstanceDynamic* AmmoMatInstanceDynamic;//[Offset: 0x14d0, Size: 0x8]
	void NetMulticastPlayAnim(enum RollDirection);// 0x4e3904f39041
	void ClientResetCruising(SolarCharacter* InDriver);// 0x4e3804f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AirPlaneVehicleDataAsset.DataAsset.Object
	RuntimeFloatCurve AdditionalLiftCurveBasedOnVelocity;//[Offset: 0x30, Size: 0x88]
	RuntimeFloatCurve AdditionalLiftCurveBasedOnVelocityZ;//[Offset: 0xb8, Size: 0x88]
	RuntimeFloatCurve AdditionalLiftCurveBasedOnPitch;//[Offset: 0x140, Size: 0x88]
	RuntimeFloatCurve AdditionalLiftForPitchUpFactorCurve;//[Offset: 0x1c8, Size: 0x88]
	float AdditionalLiftForClampGravity;//[Offset: 0x250, Size: 0x4]
	RuntimeFloatCurve AdditionalLiftCurveForPitchUp;//[Offset: 0x258, Size: 0x88]
	RuntimeFloatCurve CruisingSpeedMultiplier;//[Offset: 0x2e0, Size: 0x88]
	GameplayTag RollingCostTag;//[Offset: 0x368, Size: 0x8]
	float CruisingRotateAccelaration;//[Offset: 0x370, Size: 0x4]
	float CruisingRotateDecelaration;//[Offset: 0x374, Size: 0x4]
	float CruisingMaxAngularSpeed;//[Offset: 0x378, Size: 0x4]
	float CruisingClampMaxSpeedMultiplier;//[Offset: 0x37c, Size: 0x4]
	GameplayTagContainer CancelCruisingTags;//[Offset: 0x380, Size: 0x20]
	float RollBackEndSpeed;//[Offset: 0x3a0, Size: 0x4]
	float RollBackCameraDuration;//[Offset: 0x3a4, Size: 0x4]
	VehicleVFX[] ThrusterParticles;//[Offset: 0x3a8, Size: 0x10]
	float ThrusterParticleWithThrottle;//[Offset: 0x3b8, Size: 0x4]
	float ThrusterParticleWithoutThrottle;//[Offset: 0x3bc, Size: 0x4]
	float ThrusterParticleSpeed;//[Offset: 0x3c0, Size: 0x4]
	float ThrusterParticleDeactivateSpeed;//[Offset: 0x3c4, Size: 0x4]
	VehicleVFX[] WingParticles;//[Offset: 0x3c8, Size: 0x10]
	float WingParticleSpeed;//[Offset: 0x3d8, Size: 0x4]
	float WingParticleDeactivateSpeed;//[Offset: 0x3dc, Size: 0x4]
	float PreTakeOffDuration;//[Offset: 0x3e0, Size: 0x4]
	float PreTakeOffHoverForceMultiplier;//[Offset: 0x3e4, Size: 0x4]
	float TakingOffPitchOffset;//[Offset: 0x3e8, Size: 0x4]
	RuntimeFloatCurve TakingOffStabilizeSpeedCurve;//[Offset: 0x3f0, Size: 0x88]
	int AmmoMaterialIndex;//[Offset: 0x478, Size: 0x4]
	FName MataterialProgressParam;//[Offset: 0x47c, Size: 0x8]
	FName MataterialColorParam;//[Offset: 0x484, Size: 0x8]
	LinearColor NormalColor;//[Offset: 0x48c, Size: 0x10]
	LinearColor ReloadingColor;//[Offset: 0x49c, Size: 0x10]
	FloatRange MataterialProgressRange;//[Offset: 0x4ac, Size: 0x10]
	VehicleVFX[] BulletSocketParticles;//[Offset: 0x4c0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Hover_Soroll05_AirPlaneWeapon_C.SolarVehicleAirPlaneWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleAirPlaneWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	SolarAirPlaneMissileConfig* MissileDataAsset;//[Offset: 0x1120, Size: 0x8]
	float ProjectileGravityScale;//[Offset: 0x1128, Size: 0x4]
	float ProjectileSpeed;//[Offset: 0x112c, Size: 0x4]
	float ProjectileMaxRange;//[Offset: 0x1130, Size: 0x4]
	float RandomConeHalfAngle;//[Offset: 0x1134, Size: 0x4]
	int ScatterProjectileCounter;//[Offset: 0x1138, Size: 0x4]
	float BulletSplitMinTime;//[Offset: 0x113c, Size: 0x4]
	float BulletSplitCheckDistance;//[Offset: 0x1140, Size: 0x4]
	float HitEndDelayTime;//[Offset: 0x1144, Size: 0x4]
	float ExpectEndTime;//[Offset: 0x1148, Size: 0x4]
	ClusterBombBullet[] ClusterBombBullets;//[Offset: 0x1150, Size: 0x10]
	void ServerClusterBombShot(const SpawnClusterBombParam InClusterBomb);// 0x5f0504f39041
	void MulticastDrawExplosionDebug(const HitResult DebugResult);// 0x5f0404f39041
	void ClientScatterBulletSpawn(const SolarVirtualBulletSpawnParameter[] InSpawnParameters);// 0x5f0304f39041
	void ClientClusterBombShot(const SpawnClusterBombParam InClusterBomb);// 0x5f0204f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpawnClusterBombParam
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	float FireTimeStamp;//[Offset: 0x4, Size: 0x4]
	Vector_NetQuantize StartLoc;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantizeNormal StartDir;//[Offset: 0x14, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAirPlaneMissileConfig.DataAsset.Object
	ParticleSystem* ProjectileParticle;//[Offset: 0x30, Size: 0x28]
	SolarDamageInfo MissileDamageInfo;//[Offset: 0x58, Size: 0x40]
	class SolarBullet* MissileBulletClass;//[Offset: 0x98, Size: 0x8]
	FString BulletExplosionSound3P;//[Offset: 0xa0, Size: 0x10]
	FString BulletExplosionSound3PEnemy;//[Offset: 0xb0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ClusterBombBullet
	SolarVirtualBulletHitParameter CacheHitParam;//[Offset: 0x0, Size: 0x78]
	ParticleSystemComponent* BulletEffectComponent;//[Offset: 0x110, Size: 0x8]
	SolarAirPlaneMissileConfig* MissileDataAsset;//[Offset: 0x118, Size: 0x8]
	SolarVirtualBulletAKComponent* BulletAkComponent;//[Offset: 0x120, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SMG_9A02_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x3abfbc3004f39214
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Leg_WL06_Shotgun_C.SolarVehicleLegTurretWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1180, Size: 0x8]
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0xffffff8c04f39000
	void ExecuteUbergraph_BP_VH_Leg_WL06_Shotgun(int EntryPoint, ParticleSystemComponent* K2Node_Event_PSC, const Vector K2Node_Event_Position, const float K2Node_Event_Scale, bool CallFunc_IsValid_ReturnValue);// 0x25820051b9008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleLegTurretWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	BoneIKPreset[] TargetIKSettings;//[Offset: 0x1120, Size: 0x10]
	float IKBlendSpeed;//[Offset: 0x1130, Size: 0x4]
	FName LeftMuzzleName;//[Offset: 0x1134, Size: 0x8]
	FName RightMuzzleName;//[Offset: 0x113c, Size: 0x8]
	Vector TargetLeftBoneIK;//[Offset: 0x1144, Size: 0xc]
	Vector TargetRightBoneIK;//[Offset: 0x1150, Size: 0xc]
	Vector CurrentLeftBoneIK;//[Offset: 0x115c, Size: 0xc]
	Vector CurrentRightBoneIK;//[Offset: 0x1168, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoneIKPreset
	Vector LeftIKTarget;//[Offset: 0x0, Size: 0xc]
	Vector RightIKTarget;//[Offset: 0xc, Size: 0xc]
	Vector2D ChangeIKThreshold;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Leg_WL06_New_C.BP_LeggedVehicleBase_C.SolarLeggedVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SphereComponent* BlockForVehicle;//[Offset: 0x1400, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_LeggedVehicleBase_C.SolarLeggedVehicle.SolarVehiclePawn.Pawn.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLeggedVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SolarLeggedVehicleMovement* LeggedVehicleMovement;//[Offset: 0x13c0, Size: 0x8]
	CapsuleComponent* VehicleCapsule;//[Offset: 0x13c8, Size: 0x8]
	PrimitiveComponent* BlockForVehicleComp;//[Offset: 0x13d0, Size: 0x8]
	float BlockForVehicleCollisionDelay;//[Offset: 0x13d8, Size: 0x4]
	Vector_NetQuantize[] InitialFootIkLocations;//[Offset: 0x13e8, Size: 0x10]
	float StandOnVehicleRadiusMultiplier;//[Offset: 0x13f8, Size: 0x4]
	void OnStandOnVehicle(bool bOnVehicle);// 0x4ead04f39041
	void OnRep_InitialFootIkLocations();// 0x4eac04f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLeggedVehicleMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float LandingSweepTraceDistance;//[Offset: 0x138, Size: 0x4]
	float LandedVFXHeightThreshold;//[Offset: 0x13c, Size: 0x4]
	<byte,VehicleVFX> JumpLandedVFXs;//[Offset: 0x140, Size: 0x50]
	VehicleLocomotionData LocomotionDatas;//[Offset: 0x190, Size: 0x1c]
	float MaxControllableDegreeOffset;//[Offset: 0x1e4, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x1e8, Size: 0x4]
	float GravityZ;//[Offset: 0x1ec, Size: 0x4]
	bool bDelayInputForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	bool bEnableProceduralAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1]
	bool bAdvancedProceduralAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1]
	float StepHeight;//[Offset: 0x1f4, Size: 0x4]
	float StepDistanceForward;//[Offset: 0x1f8, Size: 0x4]
	float StepDistanceRight;//[Offset: 0x1fc, Size: 0x4]
	float StepSequencePercent;//[Offset: 0x200, Size: 0x4]
	float MinStepDuration;//[Offset: 0x204, Size: 0x4]
	float MinDistanceToUnplant;//[Offset: 0x208, Size: 0x4]
	float MinDistanceToUnplantInStatic;//[Offset: 0x20c, Size: 0x4]
	float FixFeetTargetsAfterPercent;//[Offset: 0x210, Size: 0x4]
	float FeetTipBonesRotationInterpSpeed;//[Offset: 0x214, Size: 0x4]
	RuntimeFloatCurve SpeedCurve;//[Offset: 0x218, Size: 0x88]
	RuntimeFloatCurve HeightCurve;//[Offset: 0x2a0, Size: 0x88]
	RuntimeFloatCurve BodyRelativeZCurve;//[Offset: 0x328, Size: 0x88]
	float AdditionalBodyRelativeZ;//[Offset: 0x3b0, Size: 0x4]
	CurveVector* BodyRelativeRotatorCurve;//[Offset: 0x3b8, Size: 0x8]
	float BodyTransformLerpSpeedWithoutDriver;//[Offset: 0x3c0, Size: 0x4]
	float TraceLength;//[Offset: 0x3c4, Size: 0x4]
	float DistanceCheckMultiplier;//[Offset: 0x3c8, Size: 0x4]
	float RadiusCheckMultiplier;//[Offset: 0x3cc, Size: 0x4]
	float BodyAlignTerrainBlendSpeed;//[Offset: 0x3d0, Size: 0x4]
	float BodyZOffsetMultiplier;//[Offset: 0x3d4, Size: 0x4]
	float MaxBodyZOffset;//[Offset: 0x3d8, Size: 0x4]
	float MinBodyZOffset;//[Offset: 0x3dc, Size: 0x4]
	float MinBodyAlignPitchDegree;//[Offset: 0x3e0, Size: 0x4]
	float MaxBodyAlignPitchDegree;//[Offset: 0x3e4, Size: 0x4]
	float MinBodyAlignRollDegree;//[Offset: 0x3e8, Size: 0x4]
	float MaxBodyAlignRollDegree;//[Offset: 0x3ec, Size: 0x4]
	float SkipIkTraceDurationWhenReceiveUpdateFromServer;//[Offset: 0x3f0, Size: 0x4]
	bool bRotateOnInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 0x1]
	float MinRotateDegree;//[Offset: 0x3f8, Size: 0x4]
	float LerpSpeedWithinMinRotateDegree;//[Offset: 0x3fc, Size: 0x4]
	float DegreeForRotatePiAnimation;//[Offset: 0x400, Size: 0x4]
	float DegreeForRotateHalfPiAnimation;//[Offset: 0x404, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x408, Size: 0x94]
	LeggedVehiclePostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4a0, Size: 0x30]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	float MaxStepHeight;//[Offset: 0x5a4, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x5a8, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x5ac, Size: 0x4]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 0x1]
	float LedgeCheckThreshold;//[Offset: 0x5b4, Size: 0x4]
	bool bJumpIgnoreInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	float JumpZVelocity;//[Offset: 0x5bc, Size: 0x4]
	float JumpXYVelocityOnInput;//[Offset: 0x5c0, Size: 0x4]
	GameplayTag JumpFailedTagForNotice;//[Offset: 0x5c4, Size: 0x8]
	int JumpFailedNoticeID;//[Offset: 0x5cc, Size: 0x4]
	VehicleLocomotionData LandBrakingLocomotion;//[Offset: 0x5d0, Size: 0x1c]
	float AirControl;//[Offset: 0x5ec, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x5f0, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x5f4, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x5f8, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x5fc, Size: 0x4]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	float JumpOffJumpZFactor;//[Offset: 0x604, Size: 0x4]
	float JumpVelocityBasedOnCamera;//[Offset: 0x608, Size: 0x4]
	RuntimeFloatCurve JumpVelocityPitchBasedOnCamera;//[Offset: 0x610, Size: 0x88]
	float MoveSpeedFactorForPiRotation;//[Offset: 0x698, Size: 0x4]
	float MoveSpeedFactorForHalfPiRotation;//[Offset: 0x69c, Size: 0x4]
	float MinFootIKEffectorZ;//[Offset: 0x6a0, Size: 0x4]
	float MaxFootIKEffectorZ;//[Offset: 0x6a4, Size: 0x4]
	VehicleFootIKData[] FootIKDataArray;//[Offset: 0x6a8, Size: 0x10]
	float IKSweepTraceRadius;//[Offset: 0x6b8, Size: 0x4]
	float IKEffectorBlendSpeed;//[Offset: 0x6bc, Size: 0x4]
	float FloorAndMeshAngleForDoubleSweep;//[Offset: 0x6c0, Size: 0x4]
	int MaxBrokenWeakPointForLocomotion;//[Offset: 0x6c4, Size: 0x4]
	float RefreshBoneTransformTimerForDedicatedServer;//[Offset: 0x6c8, Size: 0x4]
	VehicleVFX[] WeakPointParticles;//[Offset: 0x6d0, Size: 0x10]
	float MaxJoyStickYaw;//[Offset: 0x6e0, Size: 0x4]
	float MinJoyStickYaw;//[Offset: 0x6e4, Size: 0x4]
	float MaxJoyStickPitch;//[Offset: 0x6e8, Size: 0x4]
	float MinJoyStickPitch;//[Offset: 0x6ec, Size: 0x4]
	float RotationBlendSpeed;//[Offset: 0x6f0, Size: 0x4]
	float MaxFootZValueForAlignGround;//[Offset: 0x6f4, Size: 0x4]
	FName LeaningBone;//[Offset: 0x6f8, Size: 0x8]
	byte LeaningBoneForwardAxis;//[Offset: 0x700, Size: 0x1]
	float SpeedThresholdForLeaning;//[Offset: 0x704, Size: 0x4]
	float LeaningAnimationBlendSpeed;//[Offset: 0x708, Size: 0x4]
	float LeaningDegree;//[Offset: 0x70c, Size: 0x4]
	float BaseDegreeForLeaningDegree;//[Offset: 0x710, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x714, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x718, Size: 0x4]
	float LandingTimerForAnitCheating;//[Offset: 0x71c, Size: 0x4]
	float EnablePhysicsCollisionTimer;//[Offset: 0x720, Size: 0x4]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x728, Size: 0x8]
	CapsuleComponent* UpdatedCapsule;//[Offset: 0x730, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x738, Size: 0x8]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x740, Size: 0x8]
	SolarVehicleStateMachine* VehicleStateMachine;//[Offset: 0x748, Size: 0x8]
	void OnPlayerGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x53f604f39041
	void OnCapsuleComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x53f504f39041
	void EnableFootIK(bool bEnable, bool bResetAlpha, bool bResetStandOnStatic);// 0x53f404f39041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleLocomotionData
	float Speed;//[Offset: 0x0, Size: 0x4]
	float Acceleration;//[Offset: 0x4, Size: 0x4]
	float Deceleration;//[Offset: 0x8, Size: 0x4]
	float Friction;//[Offset: 0xc, Size: 0x4]
	float RotateFriction;//[Offset: 0x10, Size: 0x4]
	float RotationSpeed;//[Offset: 0x14, Size: 0x4]
	float MovementDegree;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LeggedVehiclePostPhysicsTickFunction.TickFunction
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleFootIKData
	FName LegBoneName;//[Offset: 0x0, Size: 0x8]
	FName FootBoneName;//[Offset: 0x8, Size: 0x8]
	FName FootVirtualBoneName;//[Offset: 0x10, Size: 0x8]
	FName FootVirtualBoneForGround;//[Offset: 0x18, Size: 0x8]
	FName FootIKBoneName;//[Offset: 0x20, Size: 0x8]
	float FootHorizontalOffsetAfterBroken;//[Offset: 0x28, Size: 0x4]
	float FootVerticalOffsetAfterBroken;//[Offset: 0x2c, Size: 0x4]
	float FootUnderWaterOffset;//[Offset: 0x30, Size: 0x4]
	float RaiseDustEffectScale;//[Offset: 0x34, Size: 0x4]
	float BrokenFootMultiplier;//[Offset: 0x38, Size: 0x4]
	Vector FootBoneOffset;//[Offset: 0x3c, Size: 0xc]
	FName ParentBone;//[Offset: 0x48, Size: 0x8]
	int GroupIndex;//[Offset: 0x50, Size: 0x4]
	float StepDistanceMultiplier;//[Offset: 0x54, Size: 0x4]
	float StepDistanceMultiplierForVelocity;//[Offset: 0x58, Size: 0x4]
	float MinVelocityDegreeForStepDistance;//[Offset: 0x5c, Size: 0x4]
	float MaxVelocityDegreeForStepDistance;//[Offset: 0x60, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleStateMachine.Object
	SolarVehiclePawn* Owner;//[Offset: 0x28, Size: 0x8]
	SolarLeggedVehicleMovement* MovementComponent;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Hover_Soroll02_AutoGun_C.BP_SolarVehicleWeapon_C.SolarVehicleWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1120, Size: 0x8]
	float Timeline_NewTrack_0_DE7B3CD04D17559AA815FB881A64E7DE;//[Offset: 0x1128, Size: 0x4]
	byte Timeline__Direction_DE7B3CD04D17559AA815FB881A64E7DE;//[Offset: 0x112c, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x1130, Size: 0x8]
	int Which?;//[Offset: 0x1138, Size: 0x4]
	void Timeline__FinishedFunc();// 0xfffffffe88802000
	void Timeline__UpdateFunc();// 0xffffff8c04f39000
	void OnVehicleWeaponControlled();// 0x2dffba0522902e
	void OnVehicleWeaponUnControlled();// 0x2dffba0522902e
	static void ExecuteUbergraph_BP_VH_Hover_Soroll02_AutoGun(int EntryPoint, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0xfffffffe84f7dae0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarVehicleWeapon_C.SolarVehicleWeapon.SolarWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


