Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x120, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x130, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0x168, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x178, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x180, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x188, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x190, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x198, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b6, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x1b8, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x1c0, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x1c8, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x1d0, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x1d8, Size: 0x8]
	Level*[] Levels;//[Offset: 0x1e0, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x1f0, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x220, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x228, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x238, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x240, Size: 0x8]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x298, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x2a8, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x660, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x6f0, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x67c023bfa041
	void HandleTimelineScrubbed();// 0x67bf23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x105e23bfa031
<----------Generated by SSpawner v1.0.2---------->


Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	<FName,LevelSolarDecorationLightMapGUIDArray> LevelSolarDecorationLightMapGUIDs;//[Offset: 0x1e8, Size: 0x50]
	IntVector LightBuildLevelOffset;//[Offset: 0x238, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x298, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x2a8, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x2c8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Model.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x558, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x320, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x324, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x328, Size: 0x4]
	float MinScreenSizeCulling;//[Offset: 0x32c, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x330, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x331, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x332, Size: 0x1]
	enum LightmapType;//[Offset: 0x333, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x334, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x334, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x335, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x335, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x335, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x335, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x335, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x335, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x335, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x335, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x336, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x336, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x336, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x336, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x336, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x336, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x336, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x336, Size: 0x1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x337, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x337, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x337, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x337, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x337, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x337, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x337, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x337, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	bool bForceGenLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x338, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x338, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x338, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x338, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x339, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x339, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x339, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x339, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x339, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x339, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33a, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33a, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33a, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33a, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33a, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33a, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33a, Size: 0x1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33a, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x33c, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x33e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x33f, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x340, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x344, Size: 0x4]
	int MainPassDepthStencilValue;//[Offset: 0x348, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x350, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x360, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x370, Size: 0x4]
	int VisibilityId;//[Offset: 0x374, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x378, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x388, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x389, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x38a, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x38b, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x390, Size: 0x4]
	float BoundsScale;//[Offset: 0x39c, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x3b0, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x3c0, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x3e0, Size: 0x130]
	delegate OnComponentHit;//[Offset: 0x510, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x511, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x512, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x513, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x514, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x516, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x517, Size: 0x1]
	delegate OnClicked;//[Offset: 0x518, Size: 0x1]
	delegate OnReleased;//[Offset: 0x519, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x51a, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x51b, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x51c, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x51d, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x538, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0x2cad23bfa041
	void WakeRigidBody(FName BoneName);// 0x2cac23bfa041
	void WakeAllRigidBodies();// 0x2cab23bfa041
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x2caa23bfa041
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x2ca923bfa041
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x2ca823bfa041
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x2ca723bfa041
	void SetSimulatePhysics(bool bSimulate);// 0x2ca623bfa041
	void SetRenderMainPassStencil(bool bValue);// 0x2ca523bfa041
	void SetRenderInMainPass(bool bValue);// 0x2ca423bfa041
	void SetRenderCustomDepth(bool bValue);// 0x2ca323bfa041
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x2ca223bfa041
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x2ca123bfa041
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2ca023bfa041
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2c9f23bfa041
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2c9e23bfa041
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x2c9d23bfa041
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2c9c23bfa041
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2c9b23bfa041
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2c9a23bfa041
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x2c9923bfa041
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x2c9823bfa041
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x2c9723bfa041
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x2c9623bfa041
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x2c9523bfa041
	void SetMassScale(FName BoneName, float InMassScale);// 0x2c9423bfa041
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x2c9323bfa041
	void SetMainPassStencilValue(int Value);// 0x2c9223bfa041
	void SetLinearDamping(float InDamping);// 0x2c9123bfa041
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x2c9023bfa041
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x2c8f23bfa041
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x2c8e23bfa041
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x2c8d23bfa041
	void SetEnableGravity(bool bGravityEnabled);// 0x2c8c23bfa041
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x2c8b23bfa041
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x2c8a23bfa041
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x2c8923bfa041
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x2c8823bfa041
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x2c8723bfa041
	void SetCustomDepthStencilValue(int Value);// 0x2c8623bfa041
	void SetCullDistance(float NewCullDistance);// 0x2c8523bfa041
	void SetConstraintMode(byte ConstraintMode);// 0x2c8423bfa041
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x2c8323bfa041
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x2c8223bfa041
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x2c8123bfa041
	void SetCollisionObjectType(byte Channel);// 0x2c8023bfa041
	void SetCollisionEnabled(byte NewType);// 0x2c7f23bfa041
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x2c7e23bfa041
	void SetCastShadow(bool NewCastShadow);// 0x2c7d23bfa041
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x2c7c23bfa041
	void SetBoundsScale(float NewBoundsScale);// 0x2c7b23bfa041
	void SetAngularDamping(float InDamping);// 0x2c7a23bfa041
	void SetAllUseCCD(bool InUseCCD);// 0x2c7923bfa041
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x2c7823bfa041
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x2c7723bfa041
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x2c7623bfa041
	void SetAllMassScale(float InMassScale);// 0x2c7523bfa041
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x2c7423bfa041
	void PutRigidBodyToSleep(FName BoneName);// 0x2c7323bfa041
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2c7223bfa041
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2c7123bfa041
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2c7023bfa041
	bool K2_IsQueryCollisionEnabled();// 0x2c6f23bfa041
	bool K2_IsPhysicsCollisionEnabled();// 0x2c6e23bfa041
	bool K2_IsCollisionEnabled();// 0x2c6d23bfa041
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2c6c23bfa041
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x2c6b23bfa041
	bool IsOverlappingActor(const Actor* Other);// 0x2c6a23bfa041
	bool IsGravityEnabled();// 0x2c6923bfa041
	bool IsAnyRigidBodyAwake();// 0x2c6823bfa041
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x2c6723bfa041
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x2c6623bfa041
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x2c6423bfa041
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x2c6323bfa041
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x2c6223bfa041
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x2c6123bfa041
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x2c6023bfa041
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x2c5f23bfa041
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x2c5e23bfa041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x2c5d23bfa041
	int GetNumMaterials();// 0x2c5c23bfa041
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x2c5b23bfa041
	MaterialInterface* GetMaterial(int ElementIndex);// 0x2c5a23bfa041
	float GetMassScale(FName BoneName);// 0x2c5923bfa041
	float GetMass();// 0x2c5823bfa041
	float GetLinearDamping();// 0x2c5723bfa041
	Vector GetInertiaTensor(FName BoneName);// 0x2c5623bfa041
	bool GetGenerateOverlapEvents();// 0x2c5523bfa041
	byte GetCollisionResponseToChannel(byte Channel);// 0x2c5423bfa041
	FName GetCollisionProfileName();// 0x2c5323bfa041
	byte GetCollisionObjectType();// 0x2c5223bfa041
	byte GetCollisionEnabled();// 0x2c5123bfa041
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x2c5023bfa041
	Vector GetCenterOfMass(FName BoneName);// 0x2c4f23bfa041
	float GetAngularDamping();// 0x2c4e23bfa041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x2c4d23bfa041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x2c4c23bfa041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x2c4b23bfa041
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x2c4a23bfa041
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x2c4923bfa041
	void ClearMoveIgnoreComponents();// 0x2c4823bfa041
	void ClearMoveIgnoreActors();// 0x2c4723bfa041
	bool CanCharacterStepUp(Pawn* Pawn);// 0x2c4623bfa041
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x2c4523bfa041
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x2c4423bfa041
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x2c4323bfa041
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x2c4223bfa041
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x2c4123bfa041
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x2c4023bfa041
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2c3f23bfa041
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x2c3e23bfa041
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x2c3d23bfa041
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x2c3c23bfa041
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x2c3b23bfa041
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x2c3a23bfa041
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2c3923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfNotVisiable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14d, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfTickStateCoolingDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14d, Size: 0x1]
	bool bDisableDeferredUpdateComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14d, Size: 0x1]
	byte Mobility;//[Offset: 0x14f, Size: 0x1]
	byte DetailMode;//[Offset: 0x150, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x2a1623bfa041
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x2a1523bfa041
	void SetWorldScale3D(Vector NewScale);// 0x2a1423bfa041
	void SetVisibilityByFlag(bool bNewVisibility, int Flag, bool bPropagateToChildren);// 0x2a1323bfa041
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x2a1223bfa041
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x2a1123bfa041
	void SetRelativeScale3D(Vector NewScale3D);// 0x2a1023bfa041
	void SetMobility(byte NewMobility);// 0x2a0e23bfa041
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x2a0d23bfa041
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x2a0c23bfa041
	void ResetRelativeTransform();// 0x2a0b23bfa041
	void OnRep_Visibility(bool OldValue);// 0x2a0a23bfa041
	void OnRep_Transform();// 0x2a0923bfa041
	void OnRep_AttachSocketName();// 0x2a0823bfa041
	void OnRep_AttachParent();// 0x2a0723bfa041
	void OnRep_AttachChildren();// 0x2a0623bfa041
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2a0523bfa041
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2a0423bfa041
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2a0323bfa041
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2a0223bfa041
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2a0123bfa041
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2a0023bfa041
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x29ff23bfa041
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x29fe23bfa041
	Transform K2_GetComponentToWorld();// 0x29fd23bfa041
	Vector K2_GetComponentScale();// 0x29fc23bfa041
	Rotator K2_GetComponentRotation();// 0x29fb23bfa041
	Vector K2_GetComponentLocation();// 0x29fa23bfa041
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x29f923bfa041
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x29f823bfa041
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x29f723bfa041
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x29f623bfa041
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x29f523bfa041
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x29f423bfa041
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x29f323bfa041
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x29f223bfa041
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x29f123bfa041
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x29f023bfa041
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x29ef23bfa041
	bool IsVisible();// 0x29ee23bfa041
	bool IsSimulatingPhysics(FName BoneName);// 0x29ed23bfa041
	bool IsAnySimulatingPhysics();// 0x29ec23bfa041
	Vector GetUpVector();// 0x29eb23bfa041
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace, bool bDoParallel);// 0x29e923bfa041
	Rotator GetSocketRotation(FName InSocketName);// 0x29e823bfa041
	Quat GetSocketQuaternion(FName InSocketName);// 0x29e723bfa041
	Vector GetSocketLocation(FName InSocketName);// 0x29e623bfa041
	bool GetShouldUpdatePhysicsVolume();// 0x29e523bfa041
	Vector GetRightVector();// 0x29e423bfa041
	Transform GetRelativeTransform();// 0x29e323bfa041
	PhysicsVolume* GetPhysicsVolume();// 0x29e223bfa041
	void GetParentComponents(out SceneComponent*[] Parents);// 0x29e123bfa041
	int GetNumChildrenComponents();// 0x29e023bfa041
	Vector GetForwardVector();// 0x29df23bfa041
	Vector GetComponentVelocity();// 0x29de23bfa041
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x29dd23bfa041
	SceneComponent* GetChildComponent(int ChildIndex);// 0x29dc23bfa041
	FName GetAttachSocketName();// 0x29db23bfa041
	SceneComponent* GetAttachParent();// 0x29da23bfa041
	FName[] GetAllSocketNames();// 0x29d923bfa041
	bool DoesSocketExist(FName InSocketName);// 0x29d823bfa041
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x29d723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1]
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10]
	void ToggleActive();// 0x10e123bfa041
	void SetTickGroup(byte NewTickGroup);// 0x10df23bfa041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x10de23bfa041
	void SetIsReplicated(bool ShouldReplicate);// 0x10dd23bfa041
	void SetComponentTickInterval(float TickInterval);// 0x10dc23bfa041
	void SetComponentTickEnabled(bool bEnabled);// 0x10db23bfa041
	void SetAutoActivate(bool bNewAutoActivate);// 0x10da23bfa041
	void SetActive(bool bNewActive, bool bReset);// 0x10d923bfa041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x10d823bfa041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x10d723bfa041
	void ReceiveTick(float DeltaSeconds);// 0x10d623bfa041
	void ReceiveEndPlay(byte EndPlayReason);// 0x10d523bfa041
	void ReceiveBeginPlay();// 0x10d423bfa041
	void OnRep_IsActive();// 0x10d323bfa041
	void K2_DestroyComponent(Object* Object);// 0x10d223bfa041
	bool IsComponentTickEnabled();// 0x10d123bfa041
	bool IsBeingDestroyed();// 0x10d023bfa041
	bool IsActive();// 0x10cf23bfa041
	Actor* GetOwner();// 0x10ce23bfa041
	float GetComponentTickInterval();// 0x10cd23bfa041
	void Deactivate();// 0x10cc23bfa041
	bool ComponentHasTag(FName Tag);// 0x10cb23bfa041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x10ca23bfa041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x10c923bfa041
	void Activate(bool bReset);// 0x10c823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ActorComponentTickFunction.TickFunction
<----------Generated by SSpawner v1.0.2---------->


Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x120, Size: 0x130]
	Vector BuildScale3D;//[Offset: 0x258, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]
<----------Generated by SSpawner v1.0.2---------->


Class: Box
	Vector Min;//[Offset: 0x0, Size: 0xc]
	Vector Max;//[Offset: 0xc, Size: 0xc]
	byte IsValid;//[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicalMaterialPropertyBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x260, Size: 0x4]
	int Priority;//[Offset: 0x264, Size: 0x4]
	float FluidFriction;//[Offset: 0x268, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Volume.Brush.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x228, Size: 0x1]
	Color BrushColor;//[Offset: 0x22c, Size: 0x4]
	int PolyFlags;//[Offset: 0x230, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x234, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x234, Size: 0x1]
	Model* Brush;//[Offset: 0x238, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x240, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x250, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfHiddenInGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x62, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x63, Size: 0x1]
	byte RemoteRole;//[Offset: 0x64, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x68, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0x9c, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xa0, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xa8, Size: 0x40]
	Actor* Owner;//[Offset: 0xe8, Size: 0x8]
	FName NetDriverName;//[Offset: 0xf0, Size: 0x8]
	byte Role;//[Offset: 0xf8, Size: 0x1]
	byte NetDormancy;//[Offset: 0xf9, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xfa, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0xfb, Size: 0x1]
	int InputPriority;//[Offset: 0xfc, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x100, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x108, Size: 0x4]
	int NetTag;//[Offset: 0x10c, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x110, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x114, Size: 0x4]
	float NetPriority;//[Offset: 0x118, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x120, Size: 0x8]
	Actor*[] Children;//[Offset: 0x128, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x138, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x140, Size: 0x10]
	FName[] Layers;//[Offset: 0x158, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x168, Size: 0x8]
	FName[] Tags;//[Offset: 0x178, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x188, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x189, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x18a, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x18b, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x18c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x18d, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x18e, Size: 0x1]
	delegate OnClicked;//[Offset: 0x18f, Size: 0x1]
	delegate OnReleased;//[Offset: 0x190, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x191, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x192, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x193, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x194, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x195, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x196, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x197, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f8, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x208, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x19d323bfa041
	void UserConstructionScript();// 0x19d223bfa041
	void TearOff();// 0x19d123bfa041
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x19d023bfa041
	void SetTickGroup(byte NewTickGroup);// 0x19cf23bfa041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x19ce23bfa041
	void SetReplicates(bool bInReplicates);// 0x19cd23bfa041
	void SetReplicateMovement(bool bInReplicateMovement);// 0x19cc23bfa041
	void SetOwner(Actor* NewOwner);// 0x19cb23bfa041
	void SetNetDormancy(byte NewDormancy);// 0x19c923bfa041
	void SetLifeSpan(float InLifespan);// 0x19c823bfa041
	void SetAutoDestroyWhenFinished(bool bVal);// 0x19c723bfa041
	void SetActorTickInterval(float TickInterval);// 0x19c623bfa041
	void SetActorTickEnabled(bool bEnabled);// 0x19c523bfa041
	void SetActorScale3D(Vector NewScale3D);// 0x19c423bfa041
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x19c323bfa041
	void SetActorHiddenInGame(bool bNewHidden);// 0x19c223bfa041
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x19c123bfa041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x19c023bfa041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x19bf23bfa041
	void ReceiveTick(float DeltaSeconds);// 0x19be23bfa041
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x19bd23bfa041
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x19bc23bfa041
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x19bb23bfa041
	void ReceiveEndPlay(byte EndPlayReason);// 0x19ba23bfa041
	void ReceiveDestroyed();// 0x19b923bfa041
	void ReceiveBeginPlay();// 0x19b823bfa041
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x19b723bfa041
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x19b623bfa041
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x19b523bfa041
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x19b423bfa041
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x19b323bfa041
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x19b223bfa041
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x19b123bfa041
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x19b023bfa041
	void ReceiveActorEndCursorOver();// 0x19af23bfa041
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x19ae23bfa041
	void ReceiveActorBeginCursorOver();// 0x19ad23bfa041
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x19ac23bfa041
	void OnRep_ReplicateMovement();// 0x19ab23bfa041
	void OnRep_ReplicatedMovement();// 0x19aa23bfa041
	void OnRep_Owner();// 0x19a923bfa041
	void OnRep_Instigator();// 0x19a823bfa041
	void OnRep_AttachmentReplication();// 0x19a723bfa041
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x19a623bfa041
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x19a523bfa041
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x19a423bfa041
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x19a323bfa041
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x19a223bfa041
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x19a123bfa041
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x19a023bfa041
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x199f23bfa041
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x199e23bfa041
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x199d23bfa041
	void K2_OnReset();// 0x199c23bfa041
	void K2_OnEndViewTarget(PlayerController* PC);// 0x199b23bfa041
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x199a23bfa041
	SceneComponent* K2_GetRootComponent();// 0x199923bfa041
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x199823bfa041
	Rotator K2_GetActorRotation();// 0x199723bfa041
	Vector K2_GetActorLocation();// 0x199623bfa041
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x199423bfa041
	void K2_DestroyComponent(ActorComponent* Component);// 0x199323bfa041
	void K2_DestroyActor();// 0x199223bfa041
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x199123bfa041
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x198f23bfa041
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x198e23bfa041
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x198c23bfa041
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x198b23bfa041
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x198a23bfa041
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x198923bfa041
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x198823bfa041
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x198723bfa041
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x198623bfa041
	bool IsOverlappingActor(const Actor* Other);// 0x198523bfa041
	bool IsChildActor();// 0x198423bfa041
	bool IsActorTickEnabled();// 0x198323bfa041
	bool IsActorBeingDestroyed();// 0x198223bfa041
	bool HasAuthority();// 0x198123bfa041
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x198023bfa041
	Vector GetVelocity();// 0x197f23bfa041
	Transform GetTransform();// 0x197e23bfa041
	bool GetTickableWhenPaused();// 0x197d23bfa041
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x197c23bfa041
	byte GetRemoteRole();// 0x197b23bfa041
	ChildActorComponent* GetParentComponent();// 0x197a23bfa041
	Actor* GetParentActor();// 0x197923bfa041
	Actor* GetOwner();// 0x197823bfa041
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x197723bfa041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x197623bfa041
	byte GetLocalRole();// 0x197423bfa041
	float GetLifeSpan();// 0x197323bfa041
	Controller* GetInstigatorController();// 0x197223bfa041
	Pawn* GetInstigator();// 0x197123bfa041
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x197023bfa041
	float GetInputAxisValue(const FName InputAxisName);// 0x196f23bfa041
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x196e23bfa041
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x196d23bfa041
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x196c23bfa041
	float GetGameTimeSinceCreation();// 0x196b23bfa041
	float GetDotProductTo(const Actor* OtherActor);// 0x196a23bfa041
	float GetDistanceTo(const Actor* OtherActor);// 0x196923bfa041
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x196823bfa041
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x196723bfa041
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x196623bfa041
	FName GetAttachParentSocketName();// 0x196523bfa041
	Actor* GetAttachParentActor();// 0x196423bfa041
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x196323bfa041
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x196223bfa041
	Vector GetActorUpVector();// 0x196123bfa041
	float GetActorTimeDilation();// 0x196023bfa041
	float GetActorTickInterval();// 0x195f23bfa041
	Vector GetActorScale3D();// 0x195e23bfa041
	Vector GetActorRightVector();// 0x195d23bfa041
	Vector GetActorRelativeScale3D();// 0x195c23bfa041
	Vector GetActorForwardVector();// 0x195b23bfa041
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x195a23bfa041
	bool GetActorEnableCollision();// 0x195923bfa041
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x195823bfa041
	void ForceNetUpdate();// 0x195723bfa041
	void FlushNetDormancy();// 0x195623bfa041
	void EnableInput(PlayerController* PlayerController);// 0x195523bfa041
	void DisableInput(PlayerController* PlayerController);// 0x195423bfa041
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x195323bfa041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x195223bfa041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x195123bfa041
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x195023bfa041
	bool ActorHasTag(FName Tag);// 0x194f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ActorTickFunction.TickFunction
<----------Generated by SSpawner v1.0.2---------->


Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Vector_NetQuantize100.Vector
<----------Generated by SSpawner v1.0.2---------->


Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x540, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x548, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x3d0e23bfa041
	bool WasControllerKeyJustPressed(Key Key);// 0x3d0d23bfa041
	bool IsControllerKeyDown(Key Key);// 0x3d0c23bfa041
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x3d0b23bfa041
	Vector GetControllerVectorKeyState(Key Key);// 0x3d0a23bfa041
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x3d0923bfa041
	float GetControllerKeyTimeDown(Key Key);// 0x3d0823bfa041
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x3d0723bfa041
	float GetControllerAnalogKeyState(Key Key);// 0x3d0623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x3d2423bfa041
	void SetBind(FName BindName, FString Command);// 0x3d2323bfa041
	void InvertAxisKey(const Key AxisKey);// 0x3d2223bfa041
	void InvertAxis(const FName AxisName);// 0x3d2123bfa041
	void ClearSmoothing();// 0x3d2023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x230, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x234, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x238, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x239, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x23a, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x240, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x248, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x258, Size: 0x8]
	Controller* Controller;//[Offset: 0x260, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x26c, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x278, Size: 0xc]
	void SpawnDefaultController();// 0x1dda23bfa041
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x1dd923bfa041
	void ReceiveUnpossessed(Controller* OldController);// 0x1dd823bfa041
	void ReceivePossessed(Controller* NewController);// 0x1dd723bfa041
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x1dd623bfa041
	void OnRep_PlayerState();// 0x1dd523bfa041
	void OnRep_Controller();// 0x1dd423bfa041
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1dd323bfa041
	Vector K2_GetMovementInputVector();// 0x1dd223bfa041
	bool IsPlayerControlled();// 0x1dd123bfa041
	bool IsPawnControlled();// 0x1dd023bfa041
	bool IsMoveInputIgnored();// 0x1dcf23bfa041
	bool IsLocallyControlled();// 0x1dce23bfa041
	bool IsControlled();// 0x1dcd23bfa041
	bool IsBotControlled();// 0x1dcc23bfa041
	Vector GetPendingMovementInputVector();// 0x1dcb23bfa041
	Vector GetNavAgentLocation();// 0x1dca23bfa041
	PawnMovementComponent* GetMovementComponent();// 0x1dc923bfa041
	Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x1dc823bfa041
	Vector GetLastMovementInputVector();// 0x1dc723bfa041
	Rotator GetControlRotation();// 0x1dc623bfa041
	Controller* GetController();// 0x1dc523bfa041
	Rotator GetBaseAimRotation();// 0x1dc423bfa041
	void DetachFromControllerPendingDestroy();// 0x1dc323bfa041
	Vector ConsumeMovementInputVector();// 0x1dc223bfa041
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x1dc123bfa041
	void AddControllerYawInput(float val);// 0x1dc023bfa041
	void AddControllerRollInput(float val);// 0x1dbf23bfa041
	void AddControllerPitchInput(float val);// 0x1dbe23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x230, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x240, Size: 0x10]
	FName StateName;//[Offset: 0x250, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x258, Size: 0x8]
	Character* Character;//[Offset: 0x268, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x270, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x2a8, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	void UnPossess();// 0x215823bfa041
	void StopMovement();// 0x215723bfa041
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x215623bfa041
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x215523bfa041
	void SetIgnoreLookInput(bool bNewLookInput);// 0x215423bfa041
	void SetControlRotation(out const Rotator NewRotation);// 0x215323bfa041
	void ResetIgnoreMoveInput();// 0x215223bfa041
	void ResetIgnoreLookInput();// 0x215123bfa041
	void ResetIgnoreInputFlags();// 0x215023bfa041
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x214f23bfa041
	void ReceivePossess(Pawn* PossessedPawn);// 0x214e23bfa041
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x214d23bfa041
	void Possess(Pawn* InPawn);// 0x214c23bfa041
	void OnRep_PlayerState();// 0x214b23bfa041
	void OnRep_Pawn();// 0x214a23bfa041
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x214923bfa041
	Pawn* K2_GetPawn();// 0x214823bfa041
	bool IsPlayerController();// 0x214723bfa041
	bool IsMoveInputIgnored();// 0x214623bfa041
	bool IsLookInputIgnored();// 0x214523bfa041
	bool IsLocalPlayerController();// 0x214423bfa041
	bool IsLocalController();// 0x214323bfa041
	Actor* GetViewTarget();// 0x214223bfa041
	Rotator GetDesiredRotation();// 0x214123bfa041
	Rotator GetControlRotation();// 0x214023bfa041
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x213f23bfa041
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x213e23bfa041
	PlayerController* CastToPlayerController();// 0x213d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x228, Size: 0x4]
	int PlayerId;//[Offset: 0x22c, Size: 0x4]
	byte Ping;//[Offset: 0x230, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x232, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x232, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x232, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x232, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x232, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x232, Size: 0x1]
	int StartTime;//[Offset: 0x234, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x238, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x250, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x260, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x290, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x308, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x1cac23bfa041
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x1cab23bfa041
	void OnRep_UniqueId();// 0x1caa23bfa041
	void OnRep_Score();// 0x1ca923bfa041
	void OnRep_PlayerName();// 0x1ca823bfa041
	void OnRep_PlayerId();// 0x1ca723bfa041
	void OnRep_bIsInactive();// 0x1ca623bfa041
	FString GetPlayerName();// 0x1ca523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Info.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: LocalMessage.Object
<----------Generated by SSpawner v1.0.2---------->


Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: UniqueNetIdWrapper
<----------Generated by SSpawner v1.0.2---------->


Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x288, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x290, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x298, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2a0, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2d0, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x300, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x304, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x344, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x348, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x350, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x370, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x380, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x390, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x1e0923bfa041
	void StopJumping();// 0x1e0823bfa041
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x1e0723bfa041
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x1e0623bfa041
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x1e0523bfa041
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x1e0423bfa041
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1e0323bfa041
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1e0223bfa041
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1e0123bfa041
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x1e0023bfa041
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x1dff23bfa041
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x1dfe23bfa041
	void OnRep_RootMotion();// 0x1dfd23bfa041
	void OnRep_ReplicatedBasedMovement();// 0x1dfc23bfa041
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x1dfb23bfa041
	void OnRep_IsCrouched();// 0x1dfa23bfa041
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1df923bfa041
	void OnLanded(out const HitResult Hit);// 0x1df823bfa041
	void OnJumped();// 0x1df723bfa041
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1df623bfa041
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1df523bfa041
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1df423bfa041
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1df323bfa041
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1df223bfa041
	void Jump();// 0x1df123bfa041
	bool IsPlayingRootMotion();// 0x1df023bfa041
	bool IsPlayingNetworkedRootMotionMontage();// 0x1def23bfa041
	bool IsJumpProvidingForce();// 0x1dee23bfa041
	bool HasAnyRootMotion();// 0x1ded23bfa041
	AnimMontage* GetCurrentMontage();// 0x1dec23bfa041
	Vector GetBaseTranslationOffset();// 0x1deb23bfa041
	Rotator GetBaseRotationOffsetRotator();// 0x1dea23bfa041
	float GetAnimRootMotionTranslationScale();// 0x1de923bfa041
	void Crouch(bool bClientSimulation);// 0x1de823bfa041
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1de723bfa041
	void ClientCheatWalk();// 0x1de623bfa041
	void ClientCheatGhost();// 0x1de523bfa041
	void ClientCheatFly();// 0x1de423bfa041
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1de323bfa041
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1de223bfa041
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1de123bfa041
	void ClientAckGoodMove(float Timestamp);// 0x1de023bfa041
	bool CanJumpInternal();// 0x1ddf23bfa041
	bool CanJump();// 0x1dde23bfa041
	bool CanCrouch();// 0x1ddd23bfa041
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x1ddc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x609a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x609923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x615f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x615e23bfa041
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x615d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]
<----------Generated by SSpawner v1.0.2---------->


Class: KeyHandleMap
<----------Generated by SSpawner v1.0.2---------->


Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	int NotifyFilterSignificanceLevel;//[Offset: 0xa0, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	int TrackIndex;//[Offset: 0xa8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x417923bfa041
	FString GetNotifyName();// 0x417823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x790, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x798, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x7a0, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x7a8, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x7b0, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x7d8, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x7e4, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0x810, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x820, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x830, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x860, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x864, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x865, Size: 0x1]
	byte AnimationMode;//[Offset: 0x867, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x869, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x869, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x869, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x869, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x869, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86a, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86a, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86a, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86a, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x86a, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86b, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86b, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86b, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86b, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x86b, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x86b, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x86b, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86c, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86c, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x874, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x874, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x874, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x874, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x874, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x874, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x874, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x874, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x875, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x875, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x875, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x875, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x875, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x875, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x875, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x875, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x876, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x876, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x878, Size: 0x2]
	enum MassMode;//[Offset: 0x87a, Size: 0x1]
	float UniformMass;//[Offset: 0x87c, Size: 0x4]
	float TotalMass;//[Offset: 0x880, Size: 0x4]
	float Density;//[Offset: 0x884, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0x888, Size: 0x4]
	float ClothBlendWeight;//[Offset: 0x88c, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x890, Size: 0x4]
	float BendingStiffness;//[Offset: 0x894, Size: 0x4]
	float AreaStiffness;//[Offset: 0x898, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x89c, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x8a0, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x8a4, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x8a8, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x8b8, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x8c8, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x8d8, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x9a8, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x9ac, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x9b8, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa10, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xae0, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x38e323bfa041
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x38e223bfa041
	void ToggleDisablePostProcessBlueprint();// 0x38e123bfa041
	void TermBodiesBelow(FName ParentBoneName);// 0x38e023bfa041
	void SuspendClothingSimulation();// 0x38df23bfa041
	void Stop();// 0x38de23bfa041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x38dd23bfa041
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x38dc23bfa041
	void SetTeleportRotationThreshold(float Threshold);// 0x38db23bfa041
	void SetTeleportDistanceThreshold(float Threshold);// 0x38da23bfa041
	void SetPosition(float InPos, bool bFireNotifies);// 0x38d923bfa041
	void SetPlayRate(float Rate);// 0x38d823bfa041
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x38d723bfa041
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x38d623bfa041
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x38d523bfa041
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x38d423bfa041
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x38d323bfa041
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x38d223bfa041
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x38d123bfa041
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x38d023bfa041
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x38cf23bfa041
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x38ce23bfa041
	void SetClothMaxDistanceScale(float Scale);// 0x38cd23bfa041
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x38cc23bfa041
	void SetAnimClass(class Object NewClass);// 0x38cb23bfa041
	void SetAnimationMode(byte InAnimationMode);// 0x38ca23bfa041
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x38c923bfa041
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x38c823bfa041
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x38c723bfa041
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x38c623bfa041
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x38c523bfa041
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x38c423bfa041
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x38c323bfa041
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x38c223bfa041
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x38c123bfa041
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x38c023bfa041
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x38bf23bfa041
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x38be23bfa041
	void ResumeClothingSimulation();// 0x38bd23bfa041
	void ResetClothTeleportMode();// 0x38bc23bfa041
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x38bb23bfa041
	void ResetAllowedAnimCurveEvaluation();// 0x38ba23bfa041
	void ResetAllBodiesSimulatePhysics();// 0x38b923bfa041
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x38b823bfa041
	void Play(bool bLooping);// 0x38b723bfa041
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x38b623bfa041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x38b523bfa041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x38b423bfa041
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x38b323bfa041
	bool IsPlaying();// 0x38b223bfa041
	bool IsClothingSimulationSuspended();// 0x38b123bfa041
	bool IsBodyGravityEnabled(FName BoneName);// 0x38b023bfa041
	bool HasValidAnimationInstance();// 0x38af23bfa041
	float GetTeleportRotationThreshold();// 0x38ae23bfa041
	float GetTeleportDistanceThreshold();// 0x38ad23bfa041
	Vector GetSkeletalCenterOfMass();// 0x38ac23bfa041
	AnimInstance* GetPostProcessInstance();// 0x38ab23bfa041
	float GetPosition();// 0x38aa23bfa041
	float GetPlayRate();// 0x38a923bfa041
	float GetMorphTarget(FName MorphTargetName);// 0x38a823bfa041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x38a723bfa041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x38a623bfa041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x38a523bfa041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x38a423bfa041
	bool GetDisablePostProcessBlueprint();// 0x38a323bfa041
	bool GetDisableAnimCurves();// 0x38a223bfa041
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x38a123bfa041
	float GetClothMaxDistanceScale();// 0x38a023bfa041
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x389f23bfa041
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x389e23bfa041
	AnimInstance* GetAnimInstance();// 0x389d23bfa041
	class Object GetAnimClass();// 0x389c23bfa041
	byte GetAnimationMode();// 0x389b23bfa041
	bool GetAllowRigidBodyAnimNode();// 0x389a23bfa041
	bool GetAllowedAnimCurveEvaluate();// 0x389923bfa041
	void ForceClothNextUpdateTeleportAndReset();// 0x389823bfa041
	void ForceClothNextUpdateTeleport();// 0x389723bfa041
	FName FindConstraintBoneName(int ConstraintIndex);// 0x389623bfa041
	void ClearMorphTargets();// 0x389523bfa041
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x389423bfa041
	void BindClothToMasterPoseComponent();// 0x389323bfa041
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x389223bfa041
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x389123bfa041
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x389023bfa041
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x388f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x578, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x580, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x588, Size: 0x10]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x690, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x698, Size: 0x4]
	int MinLodModel;//[Offset: 0x69c, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x6ac, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x6b8, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x6ec, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ee, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6ee, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6ee, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6ee, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6ee, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6ee, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ef, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ef, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ef, Size: 0x1]
	bool bOverrideMeshMinScreenSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6ef, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6ef, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6ef, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6ef, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6ef, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f0, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f0, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f0, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f0, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f0, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f0, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f1, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f1, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x6f4, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x708, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x730, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x388e23bfa041
	void UnHideBoneByName(FName BoneName);// 0x388d23bfa041
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x388c23bfa041
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x388b23bfa041
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x388a23bfa041
	void ShowAllMaterialSections(int LODIndex);// 0x388923bfa041
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x388823bfa041
	bool SetSkinWeightProfile(FName InProfileName);// 0x388723bfa041
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x388623bfa041
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation);// 0x388523bfa041
	void SetRenderStatic(bool bNewValue);// 0x388423bfa041
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x388323bfa041
	void SetMinLOD(int InNewMinLOD);// 0x388223bfa041
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x388123bfa041
	void SetForcedLOD(int InNewForcedLOD);// 0x388023bfa041
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x387f23bfa041
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x387e23bfa041
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x387d23bfa041
	bool IsUsingSkinWeightProfile();// 0x387c23bfa041
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x387b23bfa041
	bool IsBoneHiddenByName(FName BoneName);// 0x387a23bfa041
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x387923bfa041
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x387823bfa041
	FName GetSocketBoneName(FName InSocketName);// 0x387723bfa041
	Vector GetRefPosePosition(int BoneIndex);// 0x387623bfa041
	FName GetParentBone(FName BoneName);// 0x387523bfa041
	int GetNumLODs();// 0x387423bfa041
	int GetNumBones();// 0x387323bfa041
	int GetForcedLOD();// 0x387223bfa041
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x387123bfa041
	FName GetCurrentSkinWeightProfileName();// 0x387023bfa041
	FName GetBoneName(int BoneIndex);// 0x386f23bfa041
	int GetBoneIndex(FName BoneName);// 0x386e23bfa041
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x386d23bfa041
	void ClearVertexColorOverride(int LODIndex);// 0x386c23bfa041
	void ClearSkinWeightProfile();// 0x386b23bfa041
	void ClearSkinWeightOverride(int LODIndex);// 0x386a23bfa041
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x386923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x540, Size: 0x10]
	bool bNeedMultiplePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	bool bForceFrontFaceCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	bool bIgnoreTranslucentSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 0x1]
	bool bIgnoreMaskedSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 0x1]
	MaterialInterface* MultiplePassMaterial;//[Offset: 0x558, Size: 0x8]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x2cba23bfa041
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x2cb923bfa041
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x2cb823bfa041
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x2cb723bfa041
	FName[] GetMaterialSlotNames();// 0x2cb623bfa041
	MaterialInterface*[] GetMaterials();// 0x2cb523bfa041
	int GetMaterialIndex(FName MaterialSlotName);// 0x2cb423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x5e1923bfa041
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x5e1823bfa041
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x5e1723bfa041
	PhysicalMaterial* GetPhysicalMaterial();// 0x5e1623bfa041
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x5e1523bfa041
	Material* GetBaseMaterial();// 0x5e1423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c5, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1c6, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c7, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fe, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fe, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fe, Size: 0x1]
	bool bZWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ff, Size: 0x1]
	byte DepthCompare;//[Offset: 0x200, Size: 0x1]
	bool bMainPassStencilWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bMainPassStencilCompareEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	byte MainPassStencilCompare;//[Offset: 0x202, Size: 0x1]
	byte MainPassStencilRefValue;//[Offset: 0x203, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x204, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x204, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x204, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x205, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x206, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x206, Size: 0x1]
	byte StencilCompare;//[Offset: 0x207, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x208, Size: 0x1]
	byte RefractionMode;//[Offset: 0x209, Size: 0x1]
	int BlendablePriority;//[Offset: 0x20c, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x214, Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x218, Size: 0x4]
	Guid StateId;//[Offset: 0x21c, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x22c, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2b8, Size: 0x228]
<----------Generated by SSpawner v1.0.2---------->


Class: ScalarMaterialInput.MaterialInput
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: VectorMaterialInput.MaterialInput
<----------Generated by SSpawner v1.0.2---------->


Class: ColorMaterialInput.MaterialInput
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ShadingModelMaterialInput.MaterialInput
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialCachedParameters
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 0x40]
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]
	bool[] Overrides;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x48, Size: 0x10]
	int LODBias;//[Offset: 0x58, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x5c, Size: 0x1]
	byte Filter;//[Offset: 0x5d, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x5e, Size: 0x1]
	byte LODGroup;//[Offset: 0x5f, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 0x4]
	int StreamingIndex;//[Offset: 0x34, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 0x4]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 0x1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AssetUserData.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]
<----------Generated by SSpawner v1.0.2---------->


Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xb8, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xbc, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte AddressX;//[Offset: 0xc1, Size: 0x1]
	byte AddressY;//[Offset: 0xc2, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xc4, Size: 0x8]
	int Blueprint_GetSizeY();// 0x616323bfa041
	int Blueprint_GetSizeX();// 0x616223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	int Size;//[Offset: 0x30, Size: 0x4]
	int TileCount;//[Offset: 0x34, Size: 0x4]
	int TileSize;//[Offset: 0x38, Size: 0x4]
	int TileBorderSize;//[Offset: 0x3c, Size: 0x4]
	int StreamLowMips;//[Offset: 0x40, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x54, Size: 0x4]
	int GetTileSize();// 0x66fa23bfa041
	int GetTileCount();// 0x66f923bfa041
	int GetTileBorderSize();// 0x66f823bfa041
	int GetSize();// 0x66f723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0xf0, Size: 0xc]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	uint32 BuildHash;//[Offset: 0x100, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4]
	int TileBorderSize;//[Offset: 0x4, Size: 0x4]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float PlacementJitter;//[Offset: 0x10, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 0x4]
	int MinLOD;//[Offset: 0x1c, Size: 0x4]
	enum Scaling;//[Offset: 0x20, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMesh.StreamableRenderAsset.Object
	byte LODGroupAsInt;//[Offset: 0x60, Size: 0x1]
	bool bStripLastLODLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0x64, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x68, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x70, Size: 0x10]
	StaticMaterial[] PhysicalMaterialsOverride;//[Offset: 0x80, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x90, Size: 0x4]
	int LightMapResolution;//[Offset: 0x94, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x98, Size: 0x4]
	bool bForceLODsShareLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa0, Size: 0x4]
	float MinScreenSize;//[Offset: 0xa4, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 0x8]
	int LODForCollision;//[Offset: 0xb0, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb4, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x148, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x150, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x676023bfa041
	int GetNumSections(int InLOD);// 0x675f23bfa041
	int GetNumLODs();// 0x675e23bfa041
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x675d23bfa041
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x675c23bfa041
	int GetMaterialIndex(FName MaterialSlotName);// 0x675b23bfa041
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x675a23bfa041
	BoxSphereBounds GetBounds();// 0x675923bfa041
	Box GetBoundingBox();// 0x675823bfa041
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x675723bfa041
	StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x675623bfa041
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x675523bfa041
	void AddSocket(StaticMeshSocket* Socket);// 0x675423bfa041
	FName AddMaterial(MaterialInterface* Material);// 0x675323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]
<----------Generated by SSpawner v1.0.2---------->


Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x5ff723bfa041
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x5ff623bfa041
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x5ff523bfa041
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x5ff423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x5ff323bfa041
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x5ff223bfa041
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x5ff123bfa041
	void ReversePolygonFacing(PolygonID PolygonID);// 0x5ff023bfa041
	void ReserveNewVertices(int NumberOfNewVertices);// 0x5fef23bfa041
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x5fee23bfa041
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x5fed23bfa041
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x5fec23bfa041
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x5feb23bfa041
	void ReserveNewEdges(int NumberOfNewEdges);// 0x5fea23bfa041
	bool IsVertexValid(VertexID VertexID);// 0x5fe923bfa041
	bool IsVertexOrphaned(VertexID VertexID);// 0x5fe823bfa041
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x5fe723bfa041
	bool IsTriangleValid(const TriangleID TriangleID);// 0x5fe623bfa041
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x5fe523bfa041
	bool IsPolygonValid(PolygonID PolygonID);// 0x5fe423bfa041
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x5fe323bfa041
	bool IsEmpty();// 0x5fe223bfa041
	bool IsEdgeValid(EdgeID EdgeID);// 0x5fe123bfa041
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x5fe023bfa041
	bool IsEdgeInternal(EdgeID EdgeID);// 0x5fdf23bfa041
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x5fde23bfa041
	Vector GetVertexPosition(VertexID VertexID);// 0x5fdd23bfa041
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x5fdc23bfa041
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x5fdb23bfa041
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x5fda23bfa041
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x5fd923bfa041
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x5fd823bfa041
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x5fd723bfa041
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x5fd623bfa041
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x5fd523bfa041
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x5fd423bfa041
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x5fd323bfa041
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x5fd223bfa041
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x5fd123bfa041
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x5fd023bfa041
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x5fcf23bfa041
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x5fce23bfa041
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x5fcd23bfa041
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x5fcc23bfa041
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x5fcb23bfa041
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x5fca23bfa041
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x5fc923bfa041
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x5fc823bfa041
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x5fc723bfa041
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x5fc623bfa041
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x5fc523bfa041
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x5fc423bfa041
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x5fc323bfa041
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x5fc223bfa041
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x5fc123bfa041
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x5fc023bfa041
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x5fbf23bfa041
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x5fbe23bfa041
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x5fbd23bfa041
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x5fbc23bfa041
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x5fbb23bfa041
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x5fba23bfa041
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x5fb923bfa041
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x5fb823bfa041
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x5fb723bfa041
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x5fb623bfa041
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x5fb523bfa041
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x5fb423bfa041
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x5fb323bfa041
	void Empty();// 0x5fb223bfa041
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x5fb123bfa041
	void DeleteVertex(VertexID VertexID);// 0x5fb023bfa041
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x5faf23bfa041
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x5fae23bfa041
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x5fad23bfa041
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x5fac23bfa041
	void CreateVertexWithID(VertexID VertexID);// 0x5fab23bfa041
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x5faa23bfa041
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x5fa923bfa041
	VertexID CreateVertex();// 0x5fa823bfa041
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x5fa723bfa041
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x5fa623bfa041
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x5fa523bfa041
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x5fa423bfa041
	PolygonGroupID CreatePolygonGroup();// 0x5fa323bfa041
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x5fa223bfa041
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x5fa123bfa041
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x5fa023bfa041
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x5f9f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: VertexID.ElementID
<----------Generated by SSpawner v1.0.2---------->


Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PolygonID.ElementID
<----------Generated by SSpawner v1.0.2---------->


Class: VertexInstanceID.ElementID
<----------Generated by SSpawner v1.0.2---------->


Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PolygonGroupID.ElementID
<----------Generated by SSpawner v1.0.2---------->


Class: TriangleID.ElementID
<----------Generated by SSpawner v1.0.2---------->


Class: EdgeID.ElementID
<----------Generated by SSpawner v1.0.2---------->


Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]
<----------Generated by SSpawner v1.0.2---------->


Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x60, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x68, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x84, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xa0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xac, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x138, Size: 0x4]
	byte LODGroup;//[Offset: 0x13c, Size: 0x1]
	float MinScreenSize;//[Offset: 0x140, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x144, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x145, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x146, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x147, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x147, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x147, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x147, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x147, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x148, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x150, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x158, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x160, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x170, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2f8, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x300, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x310, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x340, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x358, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x378, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x670b23bfa041
	int NumSockets();// 0x670a23bfa041
	FString[] K2_GetAllMorphTargetNames();// 0x670923bfa041
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x670823bfa041
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x670723bfa041
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x670623bfa041
	BoxSphereBounds GetImportedBounds();// 0x670523bfa041
	BoxSphereBounds GetBounds();// 0x670423bfa041
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x670323bfa041
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x670223bfa041
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x670123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x671123bfa041
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x671023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SmartNameContainer
<----------Generated by SSpawner v1.0.2---------->


Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]
<----------Generated by SSpawner v1.0.2---------->


Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	enum Interpolation;//[Offset: 0x16c, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimCurveCompressionCodec.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x18]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x278, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]
<----------Generated by SSpawner v1.0.2---------->


Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]
<----------Generated by SSpawner v1.0.2---------->


Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 0x4]
	int JointIterations;//[Offset: 0x4, Size: 0x4]
	int CollisionIterations;//[Offset: 0x8, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ThumbnailInfo.Object
<----------Generated by SSpawner v1.0.2---------->


Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
<----------Generated by SSpawner v1.0.2---------->


Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x35, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]
<----------Generated by SSpawner v1.0.2---------->


Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x3cfd23bfa041
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3cfc23bfa041
	Pawn* TryGetPawnOwner();// 0x3cfb23bfa041
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x3cfa23bfa041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x3cf923bfa041
	void SetRootMotionMode(byte Value);// 0x3cf823bfa041
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x3cf723bfa041
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x3cf623bfa041
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x3cf523bfa041
	void SavePoseSnapshot(FName SnapshotName);// 0x3cf423bfa041
	void ResetDynamics(enum InTeleportType);// 0x3cf323bfa041
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x3cf223bfa041
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x3cf123bfa041
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x3cf023bfa041
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x3cef23bfa041
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x3cee23bfa041
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x3ced23bfa041
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x3cec23bfa041
	void Montage_Resume(const AnimMontage* Montage);// 0x3ceb23bfa041
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x3cea23bfa041
	void Montage_Pause(const AnimMontage* Montage);// 0x3ce923bfa041
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x3ce823bfa041
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x3ce723bfa041
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x3ce623bfa041
	bool Montage_IsActive(const AnimMontage* Montage);// 0x3ce523bfa041
	float Montage_GetPosition(const AnimMontage* Montage);// 0x3ce423bfa041
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x3ce323bfa041
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x3ce223bfa041
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x3ce123bfa041
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x3ce023bfa041
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x3cdf23bfa041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3cde23bfa041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3cdd23bfa041
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x3cdc23bfa041
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x3cdb23bfa041
	bool IsAnyMontagePlaying();// 0x3cda23bfa041
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x3cd923bfa041
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x3cd823bfa041
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x3cd723bfa041
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x3cd623bfa041
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x3cd523bfa041
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x3cd423bfa041
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x3cd323bfa041
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x3cd223bfa041
	bool GetReceiveNotifiesFromLinkedInstances();// 0x3cd123bfa041
	bool GetPropagateNotifiesToLinkedInstances();// 0x3cd023bfa041
	SkeletalMeshComponent* GetOwningComponent();// 0x3ccf23bfa041
	Actor* GetOwningActor();// 0x3cce23bfa041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3ccd23bfa041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3ccc23bfa041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3ccb23bfa041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3cca23bfa041
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x3cc923bfa041
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x3cc823bfa041
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x3cc723bfa041
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x3cc623bfa041
	float GetInstanceMachineWeight(int MachineIndex);// 0x3cc523bfa041
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x3cc423bfa041
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x3cc323bfa041
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x3cc223bfa041
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x3cc123bfa041
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x3cc023bfa041
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x3cbf23bfa041
	float GetCurveValue(FName CurveName);// 0x3cbe23bfa041
	FName GetCurrentStateName(int MachineIndex);// 0x3cbd23bfa041
	AnimMontage* GetCurrentActiveMontage();// 0x3cbc23bfa041
	void GetAllCurveNames(out FName[] OutNames);// 0x3cbb23bfa041
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x3cba23bfa041
	void ClearMorphTargets();// 0x3cb923bfa041
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x3cb823bfa041
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x3cb723bfa041
	void BlueprintPostEvaluateAnimation();// 0x3cb623bfa041
	void BlueprintLinkedAnimationLayersInitialized();// 0x3cb523bfa041
	void BlueprintInitializeAnimation();// 0x3cb423bfa041
	void BlueprintBeginPlay();// 0x3cb323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingLODBuiltData
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingRegionBuiltData
<----------Generated by SSpawner v1.0.2---------->


Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Struct.Field.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Field.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x616823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x616123bfa041
	LinearColor GetClampedLinearColorValue(float InTime);// 0x616023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]
<----------Generated by SSpawner v1.0.2---------->


Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ClothingSimulationFactory.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x5ffc23bfa041
	void PhysicsAssetUpdated();// 0x5ffb23bfa041
	void EnableGravityOverride(out const Vector InVector);// 0x5ffa23bfa041
	void DisableGravityOverride();// 0x5ff923bfa041
	void ClothConfigUpdated();// 0x5ff823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x3a4223bfa041
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x3a4123bfa041
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x3a4023bfa041
	FString GetNotifyName();// 0x3a3f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimMetaData.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: Vector_NetQuantize10.Vector
<----------Generated by SSpawner v1.0.2---------->


Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Vector_NetQuantize.Vector
<----------Generated by SSpawner v1.0.2---------->


Class: Vector_NetQuantizeNormal.Vector
<----------Generated by SSpawner v1.0.2---------->


Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 0x8]
	float GravityScale;//[Offset: 0x150, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x154, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x158, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x164, Size: 0x4]
	byte MovementMode;//[Offset: 0x168, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 0x1]
	float GroundFriction;//[Offset: 0x16c, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x198, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1ac, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 0x4]
	float AirControl;//[Offset: 0x1c4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1d8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 0x1]
	bool bNetworkEnableProxyPrediction;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f3, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x204, Size: 0x4]
	float Mass;//[Offset: 0x208, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 0x4]
	float PushForceFactor;//[Offset: 0x214, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x21c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x220, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x224, Size: 0x4]
	float RepulsionForce;//[Offset: 0x228, Size: 0x4]
	Vector Acceleration;//[Offset: 0x22c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 0x4]
	float NetworkLinearSmoothingLerpLimit;//[Offset: 0x2d8, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2dc, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2e0, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e4, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e8, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2ec, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2f0, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x2f4, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x388, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x389, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x38a, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38b, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38b, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38b, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38b, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38c, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38c, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38c, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38c, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38d, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38d, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38d, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38d, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38d, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38d, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38d, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38e, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38e, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38e, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38e, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38e, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38e, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3a0, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3a4, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3b0, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b4, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b8, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3bc, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3c0, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3c4, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 0x30]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4d8, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5a0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x5e0, Size: 0xc]
	bool bCanAdjustWalkingVelocityOnSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	bool bCanAdjustFallingVelocityOnSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 0x1]
	float LimitedNewVelocityZOnTwoWallAdjust;//[Offset: 0x614, Size: 0x4]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x1af123bfa041
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x1af023bfa041
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x1aef23bfa041
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x1aee23bfa041
	void SetGroupsToIgnore(int GroupFlags);// 0x1aed23bfa041
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x1aec23bfa041
	void SetGroupsToAvoid(int GroupFlags);// 0x1aeb23bfa041
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x1ae923bfa041
	void SetAvoidanceGroup(int GroupFlags);// 0x1ae823bfa041
	void SetAvoidanceEnabled(bool bEnable);// 0x1ae723bfa041
	float K2_GetWalkableFloorZ();// 0x1ae623bfa041
	float K2_GetWalkableFloorAngle();// 0x1ae523bfa041
	float K2_GetModifiedMaxAcceleration();// 0x1ae423bfa041
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x1ae323bfa041
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x1ae123bfa041
	bool IsWalking();// 0x1ae023bfa041
	bool IsWalkable(out const HitResult Hit);// 0x1adf23bfa041
	float GetValidPerchRadius();// 0x1ade23bfa041
	float GetPerchRadiusThreshold();// 0x1add23bfa041
	PrimitiveComponent* GetMovementBase();// 0x1adc23bfa041
	float GetMinAnalogSpeed();// 0x1adb23bfa041
	float GetMaxJumpHeightWithJumpTime();// 0x1ada23bfa041
	float GetMaxJumpHeight();// 0x1ad923bfa041
	float GetMaxBrakingDeceleration();// 0x1ad823bfa041
	float GetMaxAcceleration();// 0x1ad723bfa041
	Vector GetLastUpdateVelocity();// 0x1ad623bfa041
	Rotator GetLastUpdateRotation();// 0x1ad523bfa041
	Vector GetLastUpdateLocation();// 0x1ad423bfa041
	Vector GetImpartedMovementBaseVelocity();// 0x1ad323bfa041
	Vector GetCurrentAcceleration();// 0x1ad223bfa041
	Character* GetCharacterOwner();// 0x1ad123bfa041
	float GetAnalogInputModifier();// 0x1ad023bfa041
	void DisableMovement();// 0x1acf23bfa041
	void ClearAccumulatedForces();// 0x1ace23bfa041
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1acd23bfa041
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x1acc23bfa041
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x1acb23bfa041
	void AddForce(Vector Force);// 0x1aca23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 0x8]
	Vector K2_GetInputVector();// 0x1ac923bfa041
	bool IsMoveInputIgnored();// 0x1ac823bfa041
	Vector GetPendingInputVector();// 0x1ac723bfa041
	Pawn* GetPawnOwner();// 0x1ac623bfa041
	Vector GetLastInputVector();// 0x1ac523bfa041
	Vector ConsumeInputVector();// 0x1ac423bfa041
	void AddInputVector(Vector WorldVector, bool bForce);// 0x1ac323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 0x8]
	void StopMovementKeepPathing();// 0x1ac023bfa041
	void StopActiveMovement();// 0x1abf23bfa041
	bool IsSwimming();// 0x1abe23bfa041
	bool IsMovingOnGround();// 0x1abd23bfa041
	bool IsFlying();// 0x1abc23bfa041
	bool IsFalling();// 0x1abb23bfa041
	bool IsCrouching();// 0x1aba23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8]
	Vector Velocity;//[Offset: 0xc4, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 0x1]
	void StopMovementImmediately();// 0x110e23bfa041
	void SnapUpdatedComponentToPlane();// 0x110d23bfa041
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x110c23bfa041
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x110b23bfa041
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x110a23bfa041
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x110923bfa041
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x110823bfa041
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x110723bfa041
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x110623bfa041
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x110523bfa041
	float K2_GetModifiedMaxSpeed();// 0x110423bfa041
	float K2_GetMaxSpeedModifier();// 0x110323bfa041
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x110223bfa041
	Vector GetPlaneConstraintOrigin();// 0x110123bfa041
	Vector GetPlaneConstraintNormal();// 0x110023bfa041
	enum GetPlaneConstraintAxisSetting();// 0x10fe23bfa041
	PhysicsVolume* GetPhysicsVolume();// 0x10fd23bfa041
	float GetMaxSpeed();// 0x10fc23bfa041
	float GetGravityZ();// 0x10fb23bfa041
	Vector ConstrainNormalToPlane(Vector Normal);// 0x10fa23bfa041
	Vector ConstrainLocationToPlane(Vector Location);// 0x10f923bfa041
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x10f823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SoftClassPath.SoftObjectPath
<----------Generated by SSpawner v1.0.2---------->


Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction
<----------Generated by SSpawner v1.0.2---------->


Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]
<----------Generated by SSpawner v1.0.2---------->


Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x558, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x55c, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x507523bfa041
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x507423bfa041
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x507323bfa041
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x507223bfa041
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x507123bfa041
	float GetUnscaledCapsuleRadius();// 0x507023bfa041
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x506f23bfa041
	float GetUnscaledCapsuleHalfHeight();// 0x506e23bfa041
	float GetShapeScale();// 0x506d23bfa041
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x506c23bfa041
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x506b23bfa041
	float GetScaledCapsuleRadius();// 0x506a23bfa041
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x506923bfa041
	float GetScaledCapsuleHalfHeight();// 0x506823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x540, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x548, Size: 0x8]
	Color ShapeColor;//[Offset: 0x550, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x554, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x554, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x554, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: NavAreaBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]
<----------Generated by SSpawner v1.0.2---------->


Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x2b8, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x2c0, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2c8, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x2d0, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2d8, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2e0, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x2ec, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x304, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x310, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x320, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x334, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x338, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x344, Size: 0xc]
	int ClientCap;//[Offset: 0x350, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x358, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x360, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x368, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x370, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x3f1, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x430, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x438, Size: 0x8]
	float InputYawScale;//[Offset: 0x44c, Size: 0x4]
	float InputPitchScale;//[Offset: 0x450, Size: 0x4]
	float InputRollScale;//[Offset: 0x454, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x458, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x458, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x458, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x458, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x45c, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x460, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x470, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x471, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x472, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x473, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x474, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x478, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x47a, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x508, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x510, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x528, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x580, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x590, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x21e923bfa041
	bool WasInputKeyJustPressed(Key Key);// 0x21e823bfa041
	void ToggleSpeaking(bool bInSpeaking);// 0x21e723bfa041
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x21e623bfa041
	void SwitchLevel(FString URL);// 0x21e523bfa041
	void StopHapticEffect(enum Hand);// 0x21e423bfa041
	void StartFire(byte FireModeNum);// 0x21e323bfa041
	void SetVirtualJoystickVisibility(bool bVisible);// 0x21e223bfa041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x21e123bfa041
	void SetName(FString S);// 0x21e023bfa041
	void SetMouseLocation(const int X, const int Y);// 0x21df23bfa041
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x21de23bfa041
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x21dd23bfa041
	void SetDisableHaptics(bool bNewDisabled);// 0x21dc23bfa041
	void SetControllerLightColor(Color Color);// 0x21db23bfa041
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x21da23bfa041
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x21d923bfa041
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x21d823bfa041
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x21d723bfa041
	void ServerViewPrevPlayer();// 0x21d623bfa041
	void ServerViewNextPlayer();// 0x21d523bfa041
	void ServerVerifyViewTarget();// 0x21d423bfa041
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x21d323bfa041
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x21d123bfa041
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x21d023bfa041
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x21cf23bfa041
	void ServerToggleAILogging();// 0x21ce23bfa041
	void ServerShortTimeout();// 0x21cd23bfa041
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x21cc23bfa041
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x21cb23bfa041
	void ServerRestartPlayer();// 0x21ca23bfa041
	void ServerPause();// 0x21c923bfa041
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x21c823bfa041
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x21c723bfa041
	void ServerExecRPC(FString Msg);// 0x21c623bfa041
	void ServerExec(FString Msg);// 0x21c523bfa041
	void ServerCheckClientPossessionReliable();// 0x21c423bfa041
	void ServerCheckClientPossession();// 0x21c323bfa041
	void ServerChangeName(FString S);// 0x21c223bfa041
	void ServerCamera(FName NewMode);// 0x21c123bfa041
	void ServerAcknowledgePossession(Pawn* P);// 0x21c023bfa041
	void SendToConsole(FString Command);// 0x21bf23bfa041
	void RestartLevel();// 0x21be23bfa041
	void ResetControllerLightColor();// 0x21bd23bfa041
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x21bc23bfa041
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x21ba23bfa041
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x21b823bfa041
	void Pause();// 0x21b723bfa041
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x21b623bfa041
	void LocalTravel(FString URL);// 0x21b523bfa041
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x21b423bfa041
	bool IsInputKeyDown(Key Key);// 0x21b323bfa041
	void GetViewportSize(out int SizeX, out int SizeY);// 0x21b223bfa041
	SpectatorPawn* GetSpectatorPawn();// 0x21b123bfa041
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x21b023bfa041
	Vector GetInputVectorKeyState(Key Key);// 0x21af23bfa041
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x21ae23bfa041
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x21ad23bfa041
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x21ac23bfa041
	float GetInputKeyTimeDown(Key Key);// 0x21ab23bfa041
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x21a923bfa041
	float GetInputAnalogKeyState(Key Key);// 0x21a823bfa041
	HUD* GetHUD();// 0x21a723bfa041
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x21a623bfa041
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x21a523bfa041
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x21a423bfa041
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x21a323bfa041
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x21a223bfa041
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x21a023bfa041
	Vector GetFocalLocation();// 0x219f23bfa041
	void FOV(float NewFOV);// 0x219e23bfa041
	void EnableCheats();// 0x219d23bfa041
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x219c23bfa041
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x219b23bfa041
	void ConsoleKey(Key Key);// 0x219a23bfa041
	void ClientWasKicked(const FText KickReason);// 0x219923bfa041
	void ClientVoiceHandshakeComplete();// 0x219823bfa041
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x219623bfa041
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x219523bfa041
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x219423bfa041
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x219323bfa041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x219223bfa041
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x219123bfa041
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x219023bfa041
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x218f23bfa041
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x218e23bfa041
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x218d23bfa041
	void ClientStartOnlineSession();// 0x218c23bfa041
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x218b23bfa041
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x218823bfa041
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x218723bfa041
	void ClientSetHUD(class HUD NewHUDClass);// 0x218623bfa041
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x218523bfa041
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x218423bfa041
	void ClientSetCameraMode(FName NewCamMode);// 0x218323bfa041
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x218223bfa041
	void ClientSetBlockOnAsyncLoading();// 0x218123bfa041
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x218023bfa041
	void ClientReturnToMainMenu(FString ReturnReason);// 0x217f23bfa041
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x217e23bfa041
	void ClientRestart(Pawn* NewPawn);// 0x217d23bfa041
	void ClientReset();// 0x217c23bfa041
	void ClientRepObjRef(Object* Object);// 0x217b23bfa041
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x217a23bfa041
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x217923bfa041
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x217823bfa041
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x217723bfa041
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x217623bfa041
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x217423bfa041
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x217323bfa041
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x217223bfa041
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x217023bfa041
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x216f23bfa041
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x216e23bfa041
	void ClientIgnoreMoveInput(bool bIgnore);// 0x216d23bfa041
	void ClientIgnoreLookInput(bool bIgnore);// 0x216c23bfa041
	void ClientGotoState(FName NewState);// 0x216b23bfa041
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x216a23bfa041
	void ClientForceGarbageCollection();// 0x216923bfa041
	void ClientFlushLevelStreaming();// 0x216823bfa041
	void ClientEndOnlineSession();// 0x216723bfa041
	void ClientEnableNetworkVoice(bool bEnable);// 0x216623bfa041
	void ClientCommitMapChange();// 0x216523bfa041
	void ClientClearCameraLensEffects();// 0x216423bfa041
	void ClientCapBandwidth(int Cap);// 0x216323bfa041
	void ClientCancelPendingMapChange();// 0x216223bfa041
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x216123bfa041
	void ClearAudioListenerOverride();// 0x216023bfa041
	void ClearAudioListenerAttenuationOverride();// 0x215f23bfa041
	bool CanRestartPlayer();// 0x215e23bfa041
	void Camera(FName NewMode);// 0x215d23bfa041
	void AddYawInput(float val);// 0x215c23bfa041
	void AddRollInput(float val);// 0x215b23bfa041
	void AddPitchInput(float val);// 0x215a23bfa041
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x215923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpTrackInst.Object
<----------Generated by SSpawner v1.0.2---------->


Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x140, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x150, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x160, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x188, Size: 0x10]
	Margin Padding;//[Offset: 0x198, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a8, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 0x8]
	int Priority;//[Offset: 0x1e0, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1f0, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 0x10]
	void UnregisterInputComponent();// 0x183923bfa041
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x183823bfa041
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x183723bfa041
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x183623bfa041
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x183523bfa041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x183423bfa041
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x183323bfa041
	void StopListeningForAllInputActions();// 0x183223bfa041
	void StopAnimationsAndLatentActions();// 0x183123bfa041
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x183023bfa041
	void StopAllAnimations();// 0x182f23bfa041
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x182e23bfa041
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x182d23bfa041
	void SetPadding(Margin InPadding);// 0x182c23bfa041
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x182b23bfa041
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x182a23bfa041
	void SetInputActionPriority(int NewPriority);// 0x182923bfa041
	void SetInputActionBlocking(bool bShouldBlock);// 0x182823bfa041
	void SetForegroundColor(SlateColor InForegroundColor);// 0x182723bfa041
	void SetDesiredSizeInViewport(Vector2D Size);// 0x182623bfa041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x182523bfa041
	void SetAnchorsInViewport(Anchors Anchors);// 0x182423bfa041
	void SetAlignmentInViewport(Vector2D Alignment);// 0x182323bfa041
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x182223bfa041
	void RemoveFromViewport();// 0x182123bfa041
	void RegisterInputComponent();// 0x182023bfa041
	void PreConstruct(bool IsDesignTime);// 0x181f23bfa041
	void PlaySound(SoundBase* SoundToPlay);// 0x181e23bfa041
	void PlayEnterAnim();// 0x181d23bfa041
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x181c23bfa041
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x181b23bfa041
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x181a23bfa041
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x181823bfa041
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x181723bfa041
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x181623bfa041
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x181523bfa041
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x181423bfa041
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x181323bfa041
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x181223bfa041
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x181123bfa041
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x181023bfa041
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x180f23bfa041
	void OnPaint(out PaintContext Context);// 0x180e23bfa041
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x180d23bfa041
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x180c23bfa041
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x180b23bfa041
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x180a23bfa041
	void OnMouseCaptureLost();// 0x180923bfa041
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x180823bfa041
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x180723bfa041
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x180623bfa041
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x180423bfa041
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x180323bfa041
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x180223bfa041
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x180123bfa041
	void OnInitialized();// 0x180023bfa041
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x17ff23bfa041
	void OnFocusLost(FocusEvent InFocusEvent);// 0x17fe23bfa041
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x17fd23bfa041
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x17fc23bfa041
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x17fb23bfa041
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x17fa23bfa041
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x17f923bfa041
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x17f823bfa041
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x17f723bfa041
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x17f623bfa041
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x17f523bfa041
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x17f323bfa041
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x17f123bfa041
	bool IsPlayingAnimation();// 0x17f023bfa041
	bool IsListeningForInputAction(FName ActionName);// 0x17ef23bfa041
	bool IsInViewport();// 0x17ee23bfa041
	bool IsInteractable();// 0x17ed23bfa041
	bool IsAnyAnimationPlaying();// 0x17ec23bfa041
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x17eb23bfa041
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x17ea23bfa041
	Pawn* GetOwningPlayerPawn();// 0x17e923bfa041
	HUD* GetOwningHUD();// 0x17e823bfa041
	bool GetIsVisible();// 0x17e723bfa041
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x17e623bfa041
	Anchors GetAnchorsInViewport();// 0x17e423bfa041
	Vector2D GetAlignmentInViewport();// 0x17e323bfa041
	void DoPlayEnterAnim(bool InPlayFlag);// 0x17e223bfa041
	void Destruct();// 0x17e123bfa041
	void Construct();// 0x17e023bfa041
	void CancelLatentActions();// 0x17df23bfa041
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x17de23bfa041
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x17dd23bfa041
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x17db23bfa041
	void AddToViewport(int ZOrder);// 0x17da23bfa041
	bool AddToPlayerScreen(int ZOrder);// 0x17d923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte Cursor;//[Offset: 0xc1, Size: 0x1]
	enum Clipping;//[Offset: 0xc2, Size: 0x1]
	enum Visibility;//[Offset: 0xc3, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4]
	byte DetailMode;//[Offset: 0xc8, Size: 0x1]
	bool bSelectedDetailModeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	int WidthDivisor;//[Offset: 0xcc, Size: 0x4]
	int HeightDivisor;//[Offset: 0xd0, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xd8, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xe0, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x128, Size: 0x10]
	void SetWidthHeightDivisors(int InWidthDivisor, int InHeightDivisor);// 0x16bc23bfa041
	void SetVisibility(enum InVisibility);// 0x16bb23bfa041
	void SetUserFocus(PlayerController* PlayerController);// 0x16ba23bfa041
	void SetToolTipText(out const FText InToolTipText);// 0x16b923bfa041
	void SetToolTip(Widget* Widget);// 0x16b823bfa041
	void SetSelectedDetailModeOnly(bool InSelectedDetailModeOnly);// 0x16b723bfa041
	void SetRenderTranslation(Vector2D Translation);// 0x16b623bfa041
	void SetRenderTransformPivot(Vector2D Pivot);// 0x16b523bfa041
	void SetRenderTransformAngle(float Angle);// 0x16b423bfa041
	void SetRenderTransform(WidgetTransform InTransform);// 0x16b223bfa041
	void SetRenderShear(Vector2D Shear);// 0x16b123bfa041
	void SetRenderScale(Vector2D Scale);// 0x16b023bfa041
	void SetRenderOpacity(float InOpacity);// 0x16af23bfa041
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x16ae23bfa041
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x16ad23bfa041
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x16ac23bfa041
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x16ab23bfa041
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x16aa23bfa041
	void SetKeyboardFocus();// 0x16a923bfa041
	void SetIsEnabled(bool bInIsEnabled);// 0x16a823bfa041
	void SetFocus();// 0x16a723bfa041
	void SetDetailMode(byte InDetailMode);// 0x16a523bfa041
	void SetCursor(byte InCursor);// 0x16a423bfa041
	void SetClipping(enum InClipping);// 0x16a323bfa041
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x16a123bfa041
	void ResetCursor();// 0x16a023bfa041
	void RemoveFromParent();// 0x169f23bfa041
	EventReply OnReply__DelegateSignature();// 0x169e23bfa041
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x169a23bfa041
	bool IsVisible();// 0x169923bfa041
	bool IsHovered();// 0x169823bfa041
	void InvalidateLayoutAndVolatility();// 0x169723bfa041
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x169623bfa041
	bool HasUserFocus(PlayerController* PlayerController);// 0x169523bfa041
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x169423bfa041
	bool HasMouseCapture();// 0x169323bfa041
	bool HasKeyboardFocus();// 0x169223bfa041
	bool HasFocusedDescendants();// 0x169123bfa041
	bool HasAnyUserFocus();// 0x169023bfa041
	Widget* GetWidget__DelegateSignature();// 0x168f23bfa041
	enum GetVisibility();// 0x168e23bfa041
	Geometry GetTickSpaceGeometry();// 0x168d23bfa041
	FText GetText__DelegateSignature();// 0x168c23bfa041
	enum GetSlateVisibility__DelegateSignature();// 0x168a23bfa041
	SlateColor GetSlateColor__DelegateSignature();// 0x168923bfa041
	SlateBrush GetSlateBrush__DelegateSignature();// 0x168023bfa041
	float GetRenderTransformAngle();// 0x167f23bfa041
	float GetRenderOpacity();// 0x167e23bfa041
	PanelWidget* GetParent();// 0x167d23bfa041
	Geometry GetPaintSpaceGeometry();// 0x167c23bfa041
	PlayerController* GetOwningPlayer();// 0x167b23bfa041
	LocalPlayer* GetOwningLocalPlayer();// 0x167a23bfa041
	byte GetMouseCursor__DelegateSignature();// 0x167823bfa041
	LinearColor GetLinearColor__DelegateSignature();// 0x167723bfa041
	bool GetIsEnabled();// 0x167623bfa041
	int GetInt32__DelegateSignature();// 0x167523bfa041
	GameInstance* GetGameInstance();// 0x167423bfa041
	float GetFloat__DelegateSignature();// 0x167323bfa041
	Vector2D GetDesiredSize();// 0x167223bfa041
	enum GetClipping();// 0x167023bfa041
	enum GetCheckBoxState__DelegateSignature();// 0x166e23bfa041
	Geometry GetCachedGeometry();// 0x166c23bfa041
	bool GetBool__DelegateSignature();// 0x166b23bfa041
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x166a23bfa041
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x166923bfa041
	void ForceVolatile(bool bForce);// 0x166823bfa041
	void ForceLayoutPrepass();// 0x166723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Visual.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10]
	byte DetailMode;//[Offset: 0x378, Size: 0x1]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x5efc23bfa041
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x5efb23bfa041
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x5efa23bfa041
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x5ef923bfa041
	void SetDetailMode(byte InDetailMode);// 0x5ef823bfa041
	float GetStartTime();// 0x5ef723bfa041
	float GetEndTime();// 0x5ef623bfa041
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x5ef523bfa041
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x5ef423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x3cff23bfa041
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x3cfe23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSegment
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SectionEvaluationDataTree
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvalTemplatePtr
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTrackImplementationPtr
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneFrameRange
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x94, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequenceInstanceDataPtr
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTrackFieldData
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSubSectionFieldData
<----------Generated by SSpawner v1.0.2---------->


Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Geometry
<----------Generated by SSpawner v1.0.2---------->


Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0x5edf23bfa041
	FName GetUserTag();// 0x5ede23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x138, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x17a223bfa041
	bool RemoveChild(Widget* Content);// 0x17a123bfa041
	bool HasChild(Widget* Content);// 0x17a023bfa041
	bool HasAnyChildren();// 0x179f23bfa041
	int GetChildrenCount();// 0x179e23bfa041
	int GetChildIndex(const Widget* Content);// 0x179d23bfa041
	Widget* GetChildAt(int Index);// 0x179c23bfa041
	Widget*[] GetAllChildren();// 0x179b23bfa041
	void ClearChildren();// 0x179a23bfa041
	PanelSlot* AddChild(Widget* Content);// 0x179923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: DynamicPropertyPath.CachedPropertyPath
<----------Generated by SSpawner v1.0.2---------->


Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Function.Struct.Field.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 0x1c]
	float Duration;//[Offset: 0xf4, Size: 0x4]
	float MaxDistance;//[Offset: 0xf8, Size: 0x4]
	float TotalSamples;//[Offset: 0xfc, Size: 0x4]
	float Priority;//[Offset: 0x100, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 0x8]
	SoundModulation Modulation;//[Offset: 0x110, Size: 0x10]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x58]
	SoundClass*[] ChildClasses;//[Offset: 0x80, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x90, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0xa0, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xb0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float StereoBleed;//[Offset: 0x10, Size: 0x4]
	float LFEBleed;//[Offset: 0x14, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4]
	byte OutputTarget;//[Offset: 0x2c, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x2d, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	float OutputVolume;//[Offset: 0x68, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x70, Size: 0x10]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x673223bfa041
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x673123bfa041
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x673023bfa041
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x672f23bfa041
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x672e23bfa041
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x672d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundEffectSubmixPreset.SoundEffectPreset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SoundEffectPreset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SoundfieldEncodingSettingsBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x160, Size: 0x4]
	int StreamingPriority;//[Offset: 0x164, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x168, Size: 0x1]
	byte SoundGroup;//[Offset: 0x16a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x16c, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1a0, Size: 0x4]
	FString SpokenText;//[Offset: 0x1e8, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x1f8, Size: 0x4]
	float Volume;//[Offset: 0x1fc, Size: 0x4]
	float Pitch;//[Offset: 0x200, Size: 0x4]
	int NumChannels;//[Offset: 0x204, Size: 0x4]
	int SampleRate;//[Offset: 0x208, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x228, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveTable.Object
<----------Generated by SSpawner v1.0.2---------->


Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AudioEffectParameters
<----------Generated by SSpawner v1.0.2---------->


Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundModulationPluginSourceSettingsBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x1c]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0xc, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x14, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30]
<----------Generated by SSpawner v1.0.2---------->


Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AttenuationSubmixSendSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SpatializationPluginSourceSettingsBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: OcclusionPluginSourceSettingsBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ReverbPluginSourceSettingsBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundEffectSourcePreset.SoundEffectPreset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x304, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x308, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PointerEvent.InputEvent
<----------Generated by SSpawner v1.0.2---------->


Class: InputEvent
<----------Generated by SSpawner v1.0.2---------->


Class: EventReply
<----------Generated by SSpawner v1.0.2---------->


Class: FocusEvent
<----------Generated by SSpawner v1.0.2---------->


Class: KeyEvent.InputEvent
<----------Generated by SSpawner v1.0.2---------->


Class: PaintContext
<----------Generated by SSpawner v1.0.2---------->


Class: MotionEvent.InputEvent
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterEvent.InputEvent
<----------Generated by SSpawner v1.0.2---------->


Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D LockedSize;//[Offset: 0x14, Size: 0x8]
	Margin Margin;//[Offset: 0x1c, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x30, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x58, Size: 0x8]
	FName ResourceName;//[Offset: 0x60, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x68, Size: 0x14]
	byte DrawAs;//[Offset: 0x7c, Size: 0x1]
	byte Tiling;//[Offset: 0x7d, Size: 0x1]
	byte Mirroring;//[Offset: 0x7e, Size: 0x1]
	byte ImageType;//[Offset: 0x7f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x3bf523bfa041
	void ShowTitleSafeArea();// 0x3bf423bfa041
	void SetConsoleTarget(int PlayerIndex);// 0x3bf323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ScriptViewportClient.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0x114523bfa041
	void ReceiveInit();// 0x114423bfa041
	void HandleTravelError(byte FailureType);// 0x114223bfa041
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x114023bfa041
	void DebugRemovePlayer(int ControllerId);// 0x113f23bfa041
	void DebugCreatePlayer(int ControllerId);// 0x113e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: OnlineSession.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x4c6223bfa041
	void Dragged(out const PointerEvent PointerEvent);// 0x4c6123bfa041
	void DragCancelled(out const PointerEvent PointerEvent);// 0x4c6023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AnalogInputEvent.KeyEvent.InputEvent
<----------Generated by SSpawner v1.0.2---------->


Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x228, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x234, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x238, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x238, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x240, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x258, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x268, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x278, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x280, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x288, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x298, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x2a0, Size: 0x8]
	void ShowHUD();// 0x26cf23bfa041
	void ShowDebugToggleSubCategory(FName Category);// 0x26ce23bfa041
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x26cd23bfa041
	void ShowDebug(FName DebugType);// 0x26cc23bfa041
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x26cb23bfa041
	void RemoveAllDebugStrings();// 0x26ca23bfa041
	void ReceiveHitBoxRelease(const FName BoxName);// 0x26c923bfa041
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x26c823bfa041
	void ReceiveHitBoxClick(const FName BoxName);// 0x26c723bfa041
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x26c623bfa041
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x26c523bfa041
	Vector Project(Vector Location);// 0x26c423bfa041
	void PreviousDebugTarget();// 0x26c323bfa041
	void NextDebugTarget();// 0x26c223bfa041
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x26c123bfa041
	PlayerController* GetOwningPlayerController();// 0x26c023bfa041
	Pawn* GetOwningPawn();// 0x26bf23bfa041
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x26be23bfa041
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x26bd23bfa041
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x26bb23bfa041
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x26ba23bfa041
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x26b923bfa041
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x26b823bfa041
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x26b723bfa041
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x26b623bfa041
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x26b523bfa041
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x26b423bfa041
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x26b323bfa041
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x26b223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x615723bfa041
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x615623bfa041
	Vector K2_Project(Vector WorldLocation);// 0x615523bfa041
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x615423bfa041
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x615323bfa041
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x615223bfa041
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x615123bfa041
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x615023bfa041
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x614f23bfa041
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x614e23bfa041
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x614d23bfa041
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x614c23bfa041
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x614b23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ReporterGraph.ReporterBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ReporterBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0xc]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 0xc]
	FString DebugText;//[Offset: 0x20, Size: 0x10]
	float TimeRemaining;//[Offset: 0x30, Size: 0x4]
	float Duration;//[Offset: 0x34, Size: 0x4]
	Color TextColor;//[Offset: 0x38, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 0xc]
	Font* Font;//[Offset: 0x50, Size: 0x8]
	float FontScale;//[Offset: 0x58, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x228, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x230, Size: 0x8]
	float DefaultFOV;//[Offset: 0x240, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x248, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x250, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2a0, Size: 0x640]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8e0, Size: 0x640]
	TViewTarget ViewTarget;//[Offset: 0xf20, Size: 0x650]
	TViewTarget PendingViewTarget;//[Offset: 0x1570, Size: 0x650]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1bf0, Size: 0x640]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2230, Size: 0x640]
	CameraModifier*[] ModifierList;//[Offset: 0x2870, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2880, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2890, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2894, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x28a0, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x28c0, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x28d0, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x28d8, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2918, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2938, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2948, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2958, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2960, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2960, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2960, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2960, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2961, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2964, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2968, Size: 0x4]
	float ViewYawMin;//[Offset: 0x296c, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2970, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2974, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2978, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2980, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x511f23bfa041
	void StopCameraFade();// 0x511e23bfa041
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x511d23bfa041
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x511c23bfa041
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x511b23bfa041
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x511a23bfa041
	void StopAllCameraShakes(bool bImmediately);// 0x511923bfa041
	void StopAllCameraAnims(bool bImmediate);// 0x511823bfa041
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x511723bfa041
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x511623bfa041
	void SetGameCameraCutThisFrame();// 0x511523bfa041
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x511423bfa041
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x511323bfa041
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x511223bfa041
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x511123bfa041
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x511023bfa041
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x510f23bfa041
	void OnPhotographySessionStart();// 0x510e23bfa041
	void OnPhotographySessionEnd();// 0x510d23bfa041
	void OnPhotographyMultiPartCaptureStart();// 0x510c23bfa041
	void OnPhotographyMultiPartCaptureEnd();// 0x510b23bfa041
	PlayerController* GetOwningPlayerController();// 0x510a23bfa041
	float GetFOVAngle();// 0x510923bfa041
	Rotator GetCameraRotation();// 0x510823bfa041
	Vector GetCameraLocation();// 0x510723bfa041
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x510623bfa041
	void ClearCameraLensEffects();// 0x510523bfa041
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x510423bfa041
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x510323bfa041
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x510223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x614623bfa041
	void ReceivePlayShake(float Scale);// 0x614523bfa041
	bool ReceiveIsFinished();// 0x614423bfa041
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x614323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x5a0]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5e0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PostProcessSettings
	bool bOverride_LDRSaturation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellOpacity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellFadeness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellSecondRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellLocation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellSecondLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	byte BloomMethod;//[Offset: 0x18, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x19, Size: 0x1]
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4]
	float WhiteTint;//[Offset: 0x20, Size: 0x4]
	Vector4 LDRSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 LDRContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 LDRBrightness;//[Offset: 0x50, Size: 0x10]
	float NightfellRadius;//[Offset: 0x60, Size: 0x4]
	float NightfellSecondRadius;//[Offset: 0x64, Size: 0x4]
	float NightfellOpacity;//[Offset: 0x68, Size: 0x4]
	float NightfellFadeness;//[Offset: 0x6c, Size: 0x4]
	Vector4 NightfellLocation;//[Offset: 0x70, Size: 0x10]
	Vector4 NightfellSecondLocation;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorSaturation;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x160, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x170, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x180, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x190, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x1a0, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x1b0, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x1c0, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x1d0, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x1d4, Size: 0x4]
	float BlueCorrection;//[Offset: 0x1d8, Size: 0x4]
	float ExpandGamut;//[Offset: 0x1dc, Size: 0x4]
	float FilmSlope;//[Offset: 0x1e0, Size: 0x4]
	float FilmToe;//[Offset: 0x1e4, Size: 0x4]
	float FilmShoulder;//[Offset: 0x1e8, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x1ec, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x1f0, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x1f4, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x204, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x214, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x218, Size: 0x4]
	float FilmSaturation;//[Offset: 0x21c, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x220, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x230, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x240, Size: 0x10]
	float FilmContrast;//[Offset: 0x250, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x254, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x258, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x25c, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x260, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x270, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x274, Size: 0x4]
	float BloomIntensity;//[Offset: 0x278, Size: 0x4]
	float BloomThreshold;//[Offset: 0x27c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x280, Size: 0x4]
	float Bloom1Size;//[Offset: 0x284, Size: 0x4]
	float Bloom2Size;//[Offset: 0x288, Size: 0x4]
	float Bloom3Size;//[Offset: 0x28c, Size: 0x4]
	float Bloom4Size;//[Offset: 0x290, Size: 0x4]
	float Bloom5Size;//[Offset: 0x294, Size: 0x4]
	float Bloom6Size;//[Offset: 0x298, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x29c, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x2ac, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x2bc, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x2cc, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2dc, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2ec, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2fc, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x300, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x308, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x310, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x314, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x318, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x31c, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x320, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x328, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x32c, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x33c, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x34c, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x350, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x358, Size: 0x4]
	float CameraISO;//[Offset: 0x35c, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x360, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x364, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x368, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x36c, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x370, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x374, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x378, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x380, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x388, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x38c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x390, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x394, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x398, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x39c, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x3a0, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x3a4, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x3a8, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x3ac, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x3b0, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x3c0, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x3c4, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x3c8, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x3d0, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x450, Size: 0x4]
	float GrainJitter;//[Offset: 0x454, Size: 0x4]
	float GrainIntensity;//[Offset: 0x458, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x45c, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x460, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x464, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x46c, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x470, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x474, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x478, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x47c, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x480, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x484, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x488, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x48c, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x490, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x494, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x498, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x4a8, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x4ac, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x4b0, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x4b4, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x4b8, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x4c0, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x4c8, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x4cc, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x4d0, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x4d4, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x4d8, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x4dc, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x4e0, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x4e4, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4e8, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4ec, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x4f0, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4f4, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4f8, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4fc, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x500, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x504, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x508, Size: 0x4]
	float LPVIntensity;//[Offset: 0x50c, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x510, Size: 0x4]
	float LPVSize;//[Offset: 0x514, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x518, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x51c, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x520, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x524, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x528, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x52c, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x530, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x534, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x538, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x53c, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x540, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x544, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x548, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x54c, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x550, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x554, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x558, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x55c, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55d, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x55e, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x560, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x564, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x568, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x56c, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56d, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x570, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x574, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x578, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x57c, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x580, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x588, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TextureCube.Texture.StreamableRenderAsset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x5a0]
	float BasePostProcessBlendWeight;//[Offset: 0x600, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x614223bfa041
	void SetScale(float NewDuration);// 0x614123bfa041
	void SetDuration(float NewDuration);// 0x614023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x314, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x318, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x31c, Size: 0x4]
	class CameraShake* CameraShake;//[Offset: 0x320, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	void StopAllCameraShakes(bool bImmediately);// 0x614a23bfa041
	void PlayCameraShake(class CameraShake InCameraShake);// 0x614923bfa041
	void Play();// 0x614823bfa041
	float GetAttenuationFactor(out const Vector Location);// 0x614723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x41e323bfa041
	Actor* GetViewTarget();// 0x41e223bfa041
	void EnableModifier();// 0x41e123bfa041
	void DisableModifier(bool bImmediate);// 0x41e023bfa041
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x41df23bfa041
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x41de23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x280, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x288, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x290, Size: 0x30]
	float BaseFOV;//[Offset: 0x2c0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x2d8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x228, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x238, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x248, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x258, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x268, Size: 0x10]
	void ToggleActive();// 0x61c623bfa041
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x61c523bfa041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x61c423bfa041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x61c323bfa041
	void SetFloatParameter(FName ParameterName, float Param);// 0x61c223bfa041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x61c123bfa041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x61c023bfa041
	void OnRep_bCurrentlyActive();// 0x61bf23bfa041
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x61be23bfa041
	bool IsActive();// 0x61bd23bfa041
	void Deactivate();// 0x61bc23bfa041
	void Activate();// 0x61bb23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4]
	float Delay;//[Offset: 0xa8, Size: 0x4]
	float DelayLow;//[Offset: 0xac, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1]
	byte LODMethod;//[Offset: 0xb3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x669023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Distribution.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleBurst
	int count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleTypeDataBase.ParticleModule.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleEventBase.ParticleModule.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleEventSendToGame.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x540, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x548, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x558, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x569, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x569, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x569, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x569, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x569, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56a, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56a, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56a, Size: 0x1]
	byte LODMethod;//[Offset: 0x575, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x576, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x578, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x588, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x598, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x5a8, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x5b8, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	Vector OldPosition;//[Offset: 0x5cc, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x5d8, Size: 0xc]
	float WarmupTime;//[Offset: 0x5e4, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x5e8, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x5f0, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x5f8, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x618, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x630, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x688, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x690, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x698, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x699, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x69a, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x6c8, Size: 0x10]
	delegate OnPreSystemActivated;//[Offset: 0x6d8, Size: 0x10]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3a0723bfa041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x3a0623bfa041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x3a0523bfa041
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x3a0423bfa041
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x3a0323bfa041
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x3a0223bfa041
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x3a0123bfa041
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x3a0023bfa041
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x39ff23bfa041
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x39fe23bfa041
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x39fd23bfa041
	int GetNumActiveParticles();// 0x39fc23bfa041
	MaterialInterface* GetNamedMaterial(FName InName);// 0x39fb23bfa041
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x39fa23bfa041
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x39f923bfa041
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x39f823bfa041
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x39f723bfa041
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x39f623bfa041
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x39f523bfa041
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x39f423bfa041
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x39f323bfa041
	void EndTrails();// 0x39f223bfa041
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x39f123bfa041
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x39f023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x39ef23bfa041
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x39ee23bfa041
	void SetFloatParameter(FName ParameterName, float Param);// 0x39ed23bfa041
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x39ec23bfa041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x39eb23bfa041
	void SetBoolParameter(FName ParameterName, bool Param);// 0x39ea23bfa041
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x39e923bfa041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x39e823bfa041
	void ReleaseToPool();// 0x39e723bfa041
	FXSystemAsset* GetFXSystemAsset();// 0x39e623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x668223bfa041
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x668123bfa041
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x668023bfa041
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x667f23bfa041
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x667e23bfa041
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x667d23bfa041
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x667c23bfa041
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x667b23bfa041
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x667a23bfa041
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x667923bfa041
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x667823bfa041
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x667723bfa041
	float K2_GetScalarParameterValue(FName ParameterName);// 0x667623bfa041
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x667523bfa041
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x667423bfa041
	void CopyInterpParameters(MaterialInstance* Source);// 0x667323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x1a0]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_AllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSystemLOD
<----------Generated by SSpawner v1.0.2---------->


Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x630]
<----------Generated by SSpawner v1.0.2---------->


Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x630]
	PlayerState* PlayerState;//[Offset: 0x640, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x228, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x230, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x238, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	float AspectRatio;//[Offset: 0x24c, Size: 0x4]
	float FOVAngle;//[Offset: 0x250, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x254, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 0x5a0]
	int GetAutoActivatePlayerIndex();// 0x530523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x314, Size: 0x4]
	float OrthoWidth;//[Offset: 0x318, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x31c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x320, Size: 0x4]
	float AspectRatio;//[Offset: 0x324, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x328, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x328, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x328, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x329, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x360, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x390, Size: 0x5a0]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x4b3023bfa041
	void SetProjectionMode(byte InProjectionMode);// 0x4b2f23bfa041
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x4b2e23bfa041
	void SetOrthoWidth(float InOrthoWidth);// 0x4b2d23bfa041
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x4b2c23bfa041
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x4b2b23bfa041
	void SetFieldOfView(float InFieldOfView);// 0x4b2a23bfa041
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x4b2923bfa041
	void SetAspectRatio(float InAspectRatio);// 0x4b2823bfa041
	void RemoveBlendable(interface classNone InBlendableObject);// 0x4b2723bfa041
	void OnCameraMeshHiddenChanged();// 0x4b2623bfa041
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x4b2523bfa041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x4b2423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: HapticFeedbackEffect_Base.Object
<----------Generated by SSpawner v1.0.2---------->


Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x284, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x288, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x290, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x298, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2a0, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	void TurnAtRate(float Rate);// 0x393a23bfa041
	void MoveUp_World(float val);// 0x393923bfa041
	void MoveRight(float val);// 0x393823bfa041
	void MoveForward(float val);// 0x393723bfa041
	void LookUpAtRate(float Rate);// 0x393623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x558, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x454423bfa041
	float GetUnscaledSphereRadius();// 0x454323bfa041
	float GetShapeScale();// 0x454223bfa041
	float GetScaledSphereRadius();// 0x454123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x574, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x578, Size: 0x4]
	int MinLOD;//[Offset: 0x57c, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x580, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x588, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x590, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x594, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x594, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x594, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x594, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x594, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x594, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x594, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x594, Size: 0x1]
	bool bOverrideShadowMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x595, Size: 0x1]
	bool bMinimizeLightmapRes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x595, Size: 0x1]
	bool bOverrideMeshMinScreenSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x595, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x595, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x595, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x595, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x595, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x595, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x598, Size: 0x4]
	float LightmapPrecision;//[Offset: 0x59c, Size: 0x4]
	float ShadowmapPrecision;//[Offset: 0x5a0, Size: 0x4]
	int OverriddenShadowMapRes;//[Offset: 0x5a4, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x5a8, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x5ac, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x5b0, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x5b8, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5c8, Size: 0x10]
	bool bClearStaticLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x5dc, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x419c23bfa041
	void SetShadowmapPrecision(float InShadowMapPrecision);// 0x419b23bfa041
	void SetReverseCulling(bool ReverseCulling);// 0x419a23bfa041
	void SetOverrideShadowMapRes(int InOverridShadowMapRes);// 0x419923bfa041
	void SetOverrideMinLOD(bool bInOverrideMinLOD, int InMinLOD);// 0x419823bfa041
	void SetOverrideLightMapRes(int InOverrideLightMapRes);// 0x419723bfa041
	void SetLightmapPrecision(float InLightMapPrecision);// 0x419623bfa041
	void SetForcedLodModel(int NewForcedLodModel);// 0x419523bfa041
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x419423bfa041
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x419323bfa041
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x419223bfa041
	void EnableShadowmapResOverride(bool bInOverrideShadowMapRes);// 0x419123bfa041
	void EnableLightmapResOverride(bool bInOverrideLightMapRes);// 0x419023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMeshComponentLODInfo
<----------Generated by SSpawner v1.0.2---------->


Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x4bb423bfa041
	void ViewSelf();// 0x4bb323bfa041
	void ViewPlayer(FString S);// 0x4bb223bfa041
	void ViewClass(class Actor DesiredClass);// 0x4bb123bfa041
	void ViewActor(FName ActorName);// 0x4bb023bfa041
	void UpdateSafeArea();// 0x4baf23bfa041
	void ToggleServerStatReplicatorUpdateStatNet();// 0x4bae23bfa041
	void ToggleServerStatReplicatorClientOverwrite();// 0x4bad23bfa041
	void ToggleDebugCamera();// 0x4bac23bfa041
	void ToggleAILogging();// 0x4bab23bfa041
	void TestCollisionDistance();// 0x4baa23bfa041
	void Teleport();// 0x4ba923bfa041
	void Summon(FString ClassName);// 0x4ba823bfa041
	void StreamLevelOut(FName PackageName);// 0x4ba723bfa041
	void StreamLevelIn(FName PackageName);// 0x4ba623bfa041
	void SpawnServerStatReplicator();// 0x4ba523bfa041
	void Slomo(float NewTimeDilation);// 0x4ba423bfa041
	void SetWorldOrigin();// 0x4ba323bfa041
	void SetMouseSensitivityToDefault();// 0x4ba223bfa041
	void ServerToggleAILogging();// 0x4ba123bfa041
	void ReceiveInitCheatManager();// 0x4ba023bfa041
	void ReceiveEndPlay();// 0x4b9f23bfa041
	void PlayersOnly();// 0x4b9e23bfa041
	void OnlyLoadLevel(FName PackageName);// 0x4b9d23bfa041
	void LogLoc();// 0x4b9c23bfa041
	void InvertMouse();// 0x4b9b23bfa041
	void God();// 0x4b9a23bfa041
	void Ghost();// 0x4b9923bfa041
	void FreezeFrame(float Delay);// 0x4b9823bfa041
	void Fly();// 0x4b9723bfa041
	void FlushLog();// 0x4b9623bfa041
	void EnableDebugCamera();// 0x4b9523bfa041
	void DumpVoiceMutingState();// 0x4b9423bfa041
	void DumpPartyState();// 0x4b9323bfa041
	void DumpOnlineSessionState();// 0x4b9223bfa041
	void DumpChatState();// 0x4b9123bfa041
	void DisableDebugCamera();// 0x4b9023bfa041
	void DestroyTarget();// 0x4b8f23bfa041
	void DestroyServerStatReplicator();// 0x4b8e23bfa041
	void DestroyPawns(class Pawn aClass);// 0x4b8d23bfa041
	void DestroyAllPawnsExceptTarget();// 0x4b8c23bfa041
	void DestroyAll(class Actor aClass);// 0x4b8b23bfa041
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x4b8a23bfa041
	void DebugCapsuleSweepPawn();// 0x4b8923bfa041
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x4b8823bfa041
	void DebugCapsuleSweepClear();// 0x4b8723bfa041
	void DebugCapsuleSweepChannel(byte Channel);// 0x4b8623bfa041
	void DebugCapsuleSweepCapture();// 0x4b8523bfa041
	void DebugCapsuleSweep();// 0x4b8423bfa041
	void DamageTarget(float DamageAmount);// 0x4b8323bfa041
	void CheatScript(FString ScriptName);// 0x4b8223bfa041
	void ChangeSize(float F);// 0x4b8123bfa041
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x4b8023bfa041
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x4b7f23bfa041
	void BugIt(FString ScreenShotDescription);// 0x4b7e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a5, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a5, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a5, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a5, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a5, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a5, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a5, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a5, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5a8, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x5b0, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x5b8, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x5c0, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x648, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x650, Size: 0x8]
	float SpeedScale;//[Offset: 0x658, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x65c, Size: 0x4]
	float InitialAccel;//[Offset: 0x660, Size: 0x4]
	float InitialDecel;//[Offset: 0x664, Size: 0x4]
	void ToggleDisplay();// 0x617423bfa041
	void ShowDebugSelectedInfo();// 0x617323bfa041
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x617223bfa041
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x617123bfa041
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x617023bfa041
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x616f23bfa041
	Actor* GetSelectedActor();// 0x616e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x540, Size: 0x4]
	float FrustumAngle;//[Offset: 0x544, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x548, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x54c, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x550, Size: 0x4]
	Texture* Texture;//[Offset: 0x558, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x170, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1f0, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1530, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1b10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x210, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Package.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ReplicationDriver.Object
<----------Generated by SSpawner v1.0.2---------->


Class: PackageMap.Object
<----------Generated by SSpawner v1.0.2---------->


Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x228, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x230, Size: 0x8]
	float PlayRate;//[Offset: 0x238, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x240, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x244, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x244, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x248, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x250, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x268, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x278, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	float InterpPosition;//[Offset: 0x28c, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x294, Size: 0x1]
	delegate OnPlay;//[Offset: 0x298, Size: 0x10]
	delegate OnStop;//[Offset: 0x2a8, Size: 0x10]
	delegate OnPause;//[Offset: 0x2b8, Size: 0x10]
	void Stop();// 0x668a23bfa041
	void SetPosition(float NewPosition, bool bJump);// 0x668923bfa041
	void SetLoopingState(bool bNewLooping);// 0x668823bfa041
	void Reverse();// 0x668723bfa041
	void Play();// 0x668623bfa041
	void Pause();// 0x668523bfa041
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x668423bfa041
	void ChangePlaybackDirection();// 0x668323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpGroupDirector.InterpGroup.Object
<----------Generated by SSpawner v1.0.2---------->


Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x318, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x320, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x328, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x615c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Interface.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x665f23bfa041
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x665e23bfa041
	bool RemoteEvent(FName EventName);// 0x665d23bfa041
	void LevelReset();// 0x665c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x238, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x240, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x540, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1]
	float ScreenSize;//[Offset: 0x54c, Size: 0x4]
	float U;//[Offset: 0x550, Size: 0x4]
	float UL;//[Offset: 0x554, Size: 0x4]
	float V;//[Offset: 0x558, Size: 0x4]
	float VL;//[Offset: 0x55c, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x60cc23bfa041
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x60cb23bfa041
	void SetSprite(Texture2D* NewSprite);// 0x60ca23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSolarDecorationLightMapGUIDArray
	Guid[] MapBuildDataIdArray;//[Offset: 0x0, Size: 0x10]
	uint32[] LODNumArray;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x230, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x234, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x235, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x235, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x235, Size: 0x1]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0x238, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0x248, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0x258, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0x268, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0x278, Size: 0x10]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x288, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x288, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x288, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x288, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x289, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x290, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x298, Size: 0x8]
	float WorldToMeters;//[Offset: 0x2a0, Size: 0x4]
	float KillZ;//[Offset: 0x2a4, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x2a8, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x2b0, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x2b4, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2b8, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2c0, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2c8, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2d0, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2d8, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x2dc, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x2e8, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x2ec, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x2f0, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x2f8, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x318, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x33c, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x340, Size: 0x8]
	float TimeDilation;//[Offset: 0x348, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x34c, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x350, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x354, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x358, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x35c, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x360, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x364, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x3a8, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x3b0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c0, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x3d0, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x3d8, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x3e0, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x3e8, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x3f8, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x5aa723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x228, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x238, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x240, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x248, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x250, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x258, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x260, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x268, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x270, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x278, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x280, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x288, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x290, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x298, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	void StartPlay();// 0x20ef23bfa041
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x20ee23bfa041
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x20ed23bfa041
	bool ShouldReset(Actor* ActorToReset);// 0x20ec23bfa041
	void ReturnToMainMenuHost();// 0x20eb23bfa041
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x20ea23bfa041
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x20e923bfa041
	void RestartPlayer(Controller* NewPlayer);// 0x20e823bfa041
	void ResetLevel();// 0x20e723bfa041
	bool PlayerCanRestart(PlayerController* Player);// 0x20e623bfa041
	bool MustSpectate(PlayerController* NewPlayerController);// 0x20e523bfa041
	void K2_PostLogin(PlayerController* NewPlayer);// 0x20e423bfa041
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x20e323bfa041
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x20e223bfa041
	void K2_OnLogout(Controller* ExitingController);// 0x20e123bfa041
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x20e023bfa041
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x20df23bfa041
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x20de23bfa041
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x20dd23bfa041
	bool HasMatchStarted();// 0x20dc23bfa041
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x20db23bfa041
	int GetNumSpectators();// 0x20da23bfa041
	int GetNumPlayers();// 0x20d923bfa041
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x20d823bfa041
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x20d723bfa041
	Actor* ChoosePlayerStart(Controller* Player);// 0x20d623bfa041
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x20d523bfa041
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x20d423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x228, Size: 0x4]
	int MaxPlayers;//[Offset: 0x22c, Size: 0x4]
	int MaxPartySize;//[Offset: 0x230, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x234, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	FName SessionName;//[Offset: 0x238, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x228, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x230, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x238, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x240, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x254, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x258, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x25c, Size: 0x4]
	void OnRep_SpectatorClass();// 0x19e423bfa041
	void OnRep_ReplicatedWorldTimeSeconds();// 0x19e323bfa041
	void OnRep_ReplicatedHasBegunPlay();// 0x19e223bfa041
	void OnRep_GameModeClass();// 0x19e123bfa041
	bool HasMatchStarted();// 0x19e023bfa041
	bool HasBegunPlay();// 0x19df23bfa041
	float GetServerWorldTimeSeconds();// 0x19de23bfa041
	float GetPlayerStartTime(Controller* Controller);// 0x19dd23bfa041
	float GetPlayerRespawnDelay(Controller* Controller);// 0x19dc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	uint32 Channels;//[Offset: 0x22c, Size: 0x4]
	uint32 InRate;//[Offset: 0x230, Size: 0x4]
	uint32 OutRate;//[Offset: 0x234, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x23c, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x240, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x244, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x248, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x24c, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x250, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x254, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x258, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x25c, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x260, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x264, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x268, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x26c, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x270, Size: 0x4]
	uint32 InPackets;//[Offset: 0x274, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x278, Size: 0x4]
	uint32 InBunches;//[Offset: 0x27c, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x280, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x284, Size: 0x4]
	uint32 InLoss;//[Offset: 0x288, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x28c, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x290, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x294, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x298, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x29c, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2a0, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2a4, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2a8, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2ac, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x2b0, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2b4, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b8, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x2bc, Size: 0x4]
	uint32 NumActors;//[Offset: 0x2c0, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x2c4, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x2c8, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2cc, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2d0, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x2d4, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d8, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x2dc, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x2e0, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x2e4, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x2e8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x228, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x22c, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x230, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x234, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x238, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x23c, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x240, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x244, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x248, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x250, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x254, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x258, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x25c, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x260, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x264, Size: 0x4]
	float MoveRepSize;//[Offset: 0x268, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x26c, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x270, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x274, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x278, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x27c, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x280, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x284, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x288, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x28c, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x290, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x294, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x298, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x29c, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2a0, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a8, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2ac, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2b0, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b8, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2bc, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2c0, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2c4, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: BookmarkBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xf0, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x100, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x110, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x120, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x130, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x138, Size: 0x8]
	bool ShouldBeLoaded();// 0x666b23bfa041
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x666a23bfa041
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x666923bfa041
	void SetPriority(int NewPriority);// 0x666823bfa041
	void SetLevelLODIndex(int LODIndex);// 0x666723bfa041
	bool IsStreamingStatePending();// 0x666623bfa041
	bool IsLevelVisible();// 0x666523bfa041
	bool IsLevelLoaded();// 0x666423bfa041
	FName GetWorldAssetPackageFName();// 0x666323bfa041
	Level* GetLoadedLevel();// 0x666223bfa041
	LevelScriptActor* GetLevelScriptActor();// 0x666123bfa041
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x666023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x260, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x271, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x850, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9fc, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa20, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleEventManager.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationSystemBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x60c923bfa041
	int GetObjectCount();// 0x60c823bfa041
	int GetNewAvoidanceUID();// 0x60c723bfa041
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x60c623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x88, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x98, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0xa4, Size: 0x4]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0xa8, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0xb8, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0xc8, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0xd8, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0xe8, Size: 0x10]
	void OnStreamingLevelShownHandle(FName LevelPackageName, LevelStreaming* LevelStreaming);// 0x67c123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWorldSettings.WorldSettings.Info.Actor.Object
	int MapID;//[Offset: 0x400, Size: 0x4]
	SoftObjectPath PreloadAssets;//[Offset: 0x408, Size: 0x18]
	bool bAsyncPreload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool bHoldAllMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
	class SolarPostProcessSettingItem* PostProcessItemClass;//[Offset: 0x428, Size: 0x8]
	int CurrentActiveColorThemeIndex;//[Offset: 0x430, Size: 0x4]
	int SolarMapTypeValue;//[Offset: 0x434, Size: 0x4]
	bool MapEnableLowMemoryGraphOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	Transform SpectatorPawnStartPoint;//[Offset: 0x440, Size: 0x30]
	SolarPostProcessSettingItem* PostProcessItem;//[Offset: 0x470, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPostProcessSettingItem.Object
	ColorGradingItem ColorGradingItem;//[Offset: 0x30, Size: 0x5b0]
<----------Generated by SSpawner v1.0.2---------->


Class: ColorGradingItem
	enum ColorTheme;//[Offset: 0x0, Size: 0x1]
	PostProcessSettings PPSettings;//[Offset: 0x10, Size: 0x5a0]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Controller_BattleRoyaleMap01_C.BP_Controller_BattleRoyale_C.BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Controller_BattleRoyale_C.BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe90, Size: 0x8]
	PoseSnapshot Snapshot;//[Offset: 0xe98, Size: 0x38]
	float TempMaxDist;//[Offset: 0xed0, Size: 0x4]
	int TempMaxIndex;//[Offset: 0xed4, Size: 0x4]
	int EnableAiPalRate;//[Offset: 0xed8, Size: 0x4]
	int AimbotSwitch;//[Offset: 0xedc, Size: 0x4]
	int AimbotWindowSize;//[Offset: 0xee0, Size: 0x4]
	int AimbotMaxMutation;//[Offset: 0xee4, Size: 0x4]
	void ClientHighlightDataReceive_Imp(FString HighlightDataStr);// 0xffffff9223bfa002
	void ServerSetClientRecording(bool IsRecording);// 0x107c223e7a001
	void BpRepPolicyParmToClient(int Switch, int WindowSize, int MaxMutation);// 0x9b5c23e7a008
	void OnRep_AimbotMaxMutation();// 0x14af223e7a008
	void OnRep_AimbotWindowSize();// 0x9e9523e7a008
	void OnRep_AimbotSwitch();// 0xbd4823e7a008
	void UpdateAiPalRate(int Rate);// 0x107c723e7a001
	void OnRep_EnableAiPalRate();// 0x153e923bfa041
	void OnNotifyLockPlayer(FString Name);// 0x107c423e7a001
	void RequestNotifyLockPlayer(FString Name);// 0x9ba923e7a008
	void InpActEvt_GMT_K2Node_InputActionEvent(Key Key);// 0x153f823bfa041
	void InputReviveSelfReleased();// 0x1543723bfa041
	void AssembleCustomAntiCheatData(SolarWeapon* ActiveWeapon, SolarVehiclePawn* BoardedVehicle);// 0x1543b23bfa041
	void CustomAntiCheatDataExport(out const FString[] DataName, out const FString[] DataContent);// 0x9c1923e7a008
	void ClientNotifyLockPlayer(FString Name);// 0xffffff8f23bfa000
	void ServerRPC_SetClientRecording(bool IsClientRecording);// 0x9c3e23e7a008
	void ClientHighlightDataReceive(FString HighlightDataStr);// 0x107e623e7a001
	void ExecuteUbergraph_BP_Controller_Framework(int EntryPoint, FString K2Node_CustomEvent_HighlightDataStr, const FString[] Temp_string_Variable, enum CallFunc_GetBuildConfiguration_ReturnValue, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Key K2Node_InputActionEvent_Key, byte CallFunc_MakeLiteralByte_ReturnValue, SolarWeapon* K2Node_Event_ActiveWeapon, SolarVehiclePawn* K2Node_Event_BoardedVehicle, const FString[] K2Node_Event_DataName, const FString[] K2Node_Event_DataContent, FString CallFunc_Conv_ByteToString_ReturnValue, FString K2Node_CustomEvent_Name, const FString[] K2Node_MakeArray_Array, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool K2Node_CustomEvent_IsClientRecording);// 0x107ef23e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	SCMPlayerRPCComponent* RpcComponent;//[Offset: 0xe88, Size: 0x8]
	void ServerHandlePlayerLevelLoaded(FString LevelName);// 0x47b623bfa041
	void RequestUpdataDataManager();// 0x47b523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlayerController.PlayerController.Controller.Actor.Object
	delegate OnPawnReplicated;//[Offset: 0x5e8, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x5f8, Size: 0x10]
	delegate OnCatchInputActionDelegate;//[Offset: 0x608, Size: 0x10]
	delegate OnEnterLandingDelegate;//[Offset: 0x618, Size: 0x10]
	delegate OnNotifiedMarkedItemWasPickedUpDelegate;//[Offset: 0x628, Size: 0x10]
	SolarInputManager* InputManager;//[Offset: 0x638, Size: 0x8]
	AiPalComponent* AiPalComponent;//[Offset: 0x648, Size: 0x8]
	SolarEasyAntiCheatComponent* AntiCheatComponent;//[Offset: 0x650, Size: 0x8]
	delegate OnHUDSpawnedDelegate;//[Offset: 0x658, Size: 0x10]
	SolarInputModePolicyComponent* SolarInputModePolicyComponent;//[Offset: 0x758, Size: 0x8]
	SolarInputActionContext*[] InputActionContextArray;//[Offset: 0x760, Size: 0x10]
	Vector2D InputMovementVector;//[Offset: 0x778, Size: 0x8]
	float InputRotatePitch;//[Offset: 0x780, Size: 0x4]
	float ActionWheelHoldDownTime;//[Offset: 0x790, Size: 0x4]
	float WorldMarkMessageDelayTime;//[Offset: 0x7a4, Size: 0x4]
	float WarningMarkRadius;//[Offset: 0x7a8, Size: 0x4]
	float PingHoldDownTime;//[Offset: 0x7ac, Size: 0x4]
	float VoiceWheelMouseMoveRatio;//[Offset: 0x7b0, Size: 0x4]
	float WheelRadius;//[Offset: 0x7b4, Size: 0x4]
	float CancelRadius;//[Offset: 0x7b8, Size: 0x4]
	float OpenMarkWheelRadius;//[Offset: 0x7bc, Size: 0x4]
	ActorMarkBase*[] DeathBoxWorldMarks;//[Offset: 0x828, Size: 0x10]
	float DeathBoxMarksRefreshInterval;//[Offset: 0x83c, Size: 0x4]
	int MaxDeathBoxWorldMarkNumber;//[Offset: 0x844, Size: 0x4]
	class ActorMarkBase* DeathBoxMarkClass;//[Offset: 0x848, Size: 0x8]
	class SolarCharacterSpringArmComponent* FollowArmClass;//[Offset: 0x878, Size: 0x8]
	class SolarCharacterCameraComponent* FollowCameraClass;//[Offset: 0x880, Size: 0x8]
	float FreeLookSmoothSpeed;//[Offset: 0x888, Size: 0x4]
	SolarCharacterSpringArmComponent* FollowArm;//[Offset: 0x8a8, Size: 0x8]
	SolarCharacterCameraComponent* FollowCamera;//[Offset: 0x8b0, Size: 0x8]
	FString PlayerId;//[Offset: 0x960, Size: 0x10]
	float VehicleInteractionDistance;//[Offset: 0x988, Size: 0x4]
	SolarVehiclePawn*[] InteractingVehicles;//[Offset: 0x990, Size: 0x10]
	SolarVehiclePawn* BestInteractingVehicle;//[Offset: 0x9a0, Size: 0x8]
	delegate OnTeammateHUDDodgeSet;//[Offset: 0xa10, Size: 0x10]
	<SolarCharacter*,int> TeammateCandidates;//[Offset: 0xa20, Size: 0x50]
	bool bIsAlreadyParachuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 0x1]
	GameplayHitInfo[] WeaponMessageArray;//[Offset: 0xa78, Size: 0x10]
	Actor*[] UniqueActorArray;//[Offset: 0xaa0, Size: 0x10]
	float HangUpTime;//[Offset: 0xab0, Size: 0x4]
	UserWidget* DamageTextWidget;//[Offset: 0xad0, Size: 0x8]
	SolarDamageText[] SameFrameDamageTextDataCache;//[Offset: 0xad8, Size: 0x10]
	TimerHandle SameFrameDamageTextDataHandle;//[Offset: 0xae8, Size: 0x8]
	delegate OnSpectateInfoRep;//[Offset: 0xb98, Size: 0x10]
	SoftClassPath SwitchTargetCameraControlCompClass;//[Offset: 0xc08, Size: 0x18]
	bool bShowCursorWhenSpectateOthers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20, Size: 0x1]
	float SpectateNetCamUpdatePositionLimit;//[Offset: 0xc24, Size: 0x4]
	PlayerController* ScoutPlayerController;//[Offset: 0xc30, Size: 0x8]
	Actor* ScoutViewTarget;//[Offset: 0xc38, Size: 0x8]
	SolarSwitchTargetCameraControlComp* SolarSwitchTargetCameraControlComp;//[Offset: 0xc40, Size: 0x8]
	int[] UsableJetpacks;//[Offset: 0xc50, Size: 0x10]
	int[] UsableTailFlames;//[Offset: 0xc60, Size: 0x10]
	int[] AllCharacterSkins;//[Offset: 0xc70, Size: 0x10]
	FName PickUpExpItemSound;//[Offset: 0xc80, Size: 0x8]
	FString CachedRechamberSound;//[Offset: 0xc88, Size: 0x10]
	FName EMPScreenEffectName;//[Offset: 0xcd4, Size: 0x8]
	float AntiCheatUploadInterval;//[Offset: 0xcdc, Size: 0x4]
	FixedAntiCheatData FixedAntiCheatData;//[Offset: 0xce0, Size: 0x1c]
	FString[] CustomAntiCheatNames;//[Offset: 0xd80, Size: 0x10]
	FString[] CustomAntiCheatContents;//[Offset: 0xd90, Size: 0x10]
	void WorldMarkWheelYAxis(float Movement);// 0x23d523bfa041
	void WorldMarkWheelXAxis(float Movement);// 0x23d423bfa041
	void WorldMarkDelayExecFunction();// 0x23d323bfa041
	void UseMedicine();// 0x23d223bfa041
	void UpdateEnableAiPalRate(int Rate);// 0x23d123bfa041
	void UnMarkWorldInLevel(int64 instanceID);// 0x23d023bfa041
	void Turn(float Value);// 0x23cf23bfa041
	void TryRecordBattlePlayerData();// 0x23ce23bfa041
	void TryRechargeShield(bool bUseBigRecharger);// 0x23cd23bfa041
	void TriggerVoiceByType(enum VoiceType);// 0x23cc23bfa041
	void TriggerVoiceByNumber(int VoiceIndex);// 0x23cb23bfa041
	void ToggleEMPScreenEffect(bool bInVisible);// 0x23ca23bfa041
	void ToggleCursor();// 0x23c923bfa041
	void TakeOverNextClientSetViewTargetBySwitchTargetComp(bool bRestartBlendEvenIfSameTarget);// 0x23c823bfa041
	void SwtichVehicleSeatNotification();// 0x23c723bfa041
	void SwitchWeaponByReverseOrder();// 0x23c623bfa041
	void SwitchWeaponByOrder();// 0x23c523bfa041
	void SwitchSpectatedCharacterInTeam(int PosInTeam);// 0x23c423bfa041
	void SwitchInputBinding(out const FName InputName, enum SwitchTpye);// 0x23c223bfa041
	void StopSpectateCountdown();// 0x23c123bfa041
	void StopRecordingAtDS();// 0x23c023bfa041
	void StartSpectateCountdown(RepCountdownData InCountdownData);// 0x23bf23bfa041
	void StartRecordingAtDS(FString Filename, FString UploadUrl, enum ForceRecordingType);// 0x23be23bfa041
	void SolarSlot(int ID);// 0x23bd23bfa041
	void SolarShowPanelUI(int Type);// 0x23bc23bfa041
	void SolarServerNetProfileStop();// 0x23bb23bfa041
	void SolarServerNetProfileStart();// 0x23ba23bfa041
	void SolarOpenUI(FString UIID, int RootID);// 0x23b923bfa041
	void SolarModule(int ID);// 0x23b823bfa041
	void SolarISPC(FString _str);// 0x23b723bfa041
	void SolarGM_Weapon(FString Type, FString paramOne, FString paramTwo);// 0x23b623bfa041
	void SolarGM_UpdateTaskInfo();// 0x23b523bfa041
	void SolarGM_TeleportToBotAIServer(uint32 CtrlIndex);// 0x23b423bfa041
	void SolarGM_StopRecordingAtDS();// 0x23b323bfa041
	void SolarGM_StopBotAIBehaviorTreeServer(bool bStop);// 0x23b223bfa041
	void SolarGM_StartShrinkSafeArea();// 0x23b123bfa041
	void SolarGM_StartRecordingAtDS(FString Filename, FString UploadUrl, enum ForceRecordingType);// 0x23b023bfa041
	void SolarGM_SpawnBotAIAtCrosshairByNumServer(int Num, int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x23af23bfa041
	void SolarGM_SpawnBotAIAtCrosshair(int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x23ae23bfa041
	void SolarGM_SpawnAIAtCrosshairServer(int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x23ad23bfa041
	void SolarGM_ShowRedZoneDamage(bool IsShow);// 0x23ac23bfa041
	void SolarGM_ShowNotice(int NoticeId);// 0x23ab23bfa041
	void SolarGM_SetTeamID(int InTeamId);// 0x23aa23bfa041
	void SolarGM_SetStatDataForDebug();// 0x23a923bfa041
	void SolarGM_SetSolarPlayerID(FString InSolarPlayer);// 0x23a823bfa041
	void SolarGM_SetReconnection(bool IsReconnection);// 0x23a723bfa041
	void SolarGM_SetPlayerData(FString InPlayerID);// 0x23a623bfa041
	void SolarGM_SetGyroscopeTiltZThresholdSwitch(FString bSwitch);// 0x23a523bfa041
	void SolarGM_SetGyroscopeTiltZThreshold(float Value);// 0x23a423bfa041
	void SolarGM_SetGyroscopeTiltYThreshold(float Value);// 0x23a323bfa041
	void SolarGM_SetGyroscopeTiltFrameCount(float Value);// 0x23a223bfa041
	void SolarGM_SetGyroscopeRotationRateYThreshold(float Value);// 0x23a123bfa041
	void SolarGM_SetGyroscopeRotationRateXThreshold(float Value);// 0x23a023bfa041
	void SolarGM_ServerStartShrinkSafeArea();// 0x239f23bfa041
	void SolarGM_ServerShowRedZoneDamage(bool IsShow);// 0x239e23bfa041
	void SolarGM_ServerSetTeamID(int InTeamId);// 0x239d23bfa041
	void SolarGM_ServerSetStatDataForDebug();// 0x239c23bfa041
	void SolarGM_ServerSetSolarPlayerID(FString InSolarPlayer);// 0x239b23bfa041
	void SolarGM_ServerSetReconnection(bool IsReconnection);// 0x239a23bfa041
	void SolarGM_ServerSetPlayerData(FString InPlayerID);// 0x239923bfa041
	void SolarGM_ServerMarkVehicleSpawnerInMap();// 0x239823bfa041
	void SolarGM_ServerDumpAllPlayer();// 0x239723bfa041
	void SolarGM_ServerDebugOffline();// 0x239623bfa041
	void SolarGM_ServerConsoleCommand(FString InConsoleCommand);// 0x239523bfa041
	void SolarGM_ServerClosePoisonDamage(bool isClose);// 0x239423bfa041
	void SolarGM_ServerChangeDayLight(int ID);// 0x239323bfa041
	void SolarGM_ResetZoneBombsFire();// 0x239223bfa041
	void SolarGM_RedZoneServer(const int ZoneId);// 0x239123bfa041
	void SolarGM_RedZone(const int ZoneId);// 0x239023bfa041
	void SolarGM_PoisonServer(FString GMType);// 0x238f23bfa041
	void SolarGM_Poison(FString GMType);// 0x238e23bfa041
	void SolarGM_PlayerUndetectableByAIServer(int debugValue);// 0x238d23bfa041
	void SolarGM_PlayerUndetectableByAI(int debugValue);// 0x238c23bfa041
	void SolarGM_NoviceGuidance(int ActionID, bool bOn);// 0x238b23bfa041
	void SolarGM_NotifyPlayerHasCheatByNickName(FString NickName);// 0x238a23bfa041
	void SolarGM_NotifyPlayerHasCheat(FString SolarPlayerID);// 0x238923bfa041
	void SolarGM_KillAllAIServer(bool KillBot);// 0x238823bfa041
	void SolarGM_KickMeOut();// 0x238723bfa041
	void SolarGM_InitTaskInfo();// 0x238623bfa041
	void SolarGM_GoPreviousHomeCameraMode();// 0x238523bfa041
	void SolarGM_GoNextHomeCameraMode();// 0x238423bfa041
	void SolarGM_GoHomeCameraModeByIndex(int Index);// 0x238323bfa041
	void SolarGM_GMGoSpectatePreviousPlayer();// 0x238223bfa041
	void SolarGM_GMGoSpectatePlayerByIndex(uint32 Index);// 0x238123bfa041
	void SolarGM_GMGoSpectateNextPlayer();// 0x238023bfa041
	void SolarGM_Freelook(bool Open);// 0x237f23bfa041
	void SolarGM_DumpAllPlayer(bool bSendToServer);// 0x237e23bfa041
	void SolarGM_DebugOffline();// 0x237d23bfa041
	void SolarGM_DebugAllAIServer(int debugValue);// 0x237c23bfa041
	void SolarGM_DebugAllAI(int debugValue);// 0x237b23bfa041
	void SolarGM_ClosePoisonDamage(bool isClose);// 0x237a23bfa041
	void SolarGM_ClientShowRedZoneDamage(Vector bombLocation, Vector characterlocation, float Distance, float Damage);// 0x237923bfa041
	void SolarGM_ClientSetPlayerData(FString InPlayerID);// 0x237823bfa041
	void SolarGM_ClientMarkVehicleSpawnerInMap(const Vector[] VehicleSpawnerLocations, const int[] VehicleSpawnerSpawnIds);// 0x237723bfa041
	void SolarGM_ClientGotoLogin();// 0x237623bfa041
	void SolarGM_ClientDumpAllPlayer(FString DumpString);// 0x237523bfa041
	void SolarGM_Character(FString GMType, FString Param1, FString Param2);// 0x237423bfa041
	void SolarGM_ChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x237323bfa041
	void SolarGM_ChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x237223bfa041
	void SolarGM_ChangeVehicleIntProperty(FString InPropertyName, int inInt);// 0x237123bfa041
	void SolarGM_ChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x237023bfa041
	void SolarGM_ChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x236f23bfa041
	void SolarGM_ChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x236e23bfa041
	void SolarGM_ChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x236d23bfa041
	void SolarGM_ChangeDayLight(int ID);// 0x236c23bfa041
	void SolarGM_BattleLua(FString CmdName, out const FString[] Params);// 0x236b23bfa041
	void SolarGM_Battle(FString CmdName, out const FString[] Params);// 0x236a23bfa041
	void SolarGM(FString _str);// 0x236923bfa041
	void SolarEnergy(int InMode, int ID);// 0x236823bfa041
	void SolarCloseUI(FString UIID);// 0x236723bfa041
	void SolarClosePanelUI(int Type);// 0x236623bfa041
	void SolarClientNetProfileStop();// 0x236523bfa041
	void SolarClientNetProfileStart();// 0x236423bfa041
	void ShowBackpackUI();// 0x236323bfa041
	void SetInputActionSwitch(int ActionID, bool bOn);// 0x236223bfa041
	void SetAllTeammateHUDDodge(bool bDodge);// 0x236123bfa041
	void ServerUpdateTaskInfo();// 0x236023bfa041
	void ServerUnforbidRoleAbilitySkillDebugOnly();// 0x235f23bfa041
	void ServerTriggleScreenshotTask(FString TargetPlayerId);// 0x235e23bfa041
	void ServerTeleportTo(const Vector DestLocation);// 0x235d23bfa041
	void ServerSyncPlayerSelfReport();// 0x235c23bfa041
	void ServerSwitchSpectatedCharacterInTeam(int PosInTeam);// 0x235b23bfa041
	void ServerSpawnVehicleWithVehicleID(const int VehicleID);// 0x235a23bfa041
	void ServerSpawnVehicle(const int SpawnID);// 0x235923bfa041
	void ServerSpawnTreasureBox(const int TreasureBoxID);// 0x235823bfa041
	void ServerSpawnSolarRadar(FString BpPath);// 0x235723bfa041
	void ServerSpawnOutcomeContent(const int OutcomeID);// 0x235623bfa041
	void ServerSpawnChargingPile(FString BpPath);// 0x235523bfa041
	void ServerSpawnAirship(float Loc_X, float Loc_Y);// 0x235423bfa041
	void ServerSpawnAirdrop(const int AirdropID);// 0x235323bfa041
	void ServerSolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed);// 0x235223bfa041
	void ServerSolarWeaponReload(int PrimaryAmmoCap, int SecondaryAmmoCap);// 0x235123bfa041
	void ServerSolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);// 0x235023bfa041
	void ServerSolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);// 0x234f23bfa041
	void ServerSolarSetPlayerValue(FString InType, FString InValue);// 0x234e23bfa041
	void ServerSolarAmmoSpreadPerBullet(int AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);// 0x234d23bfa041
	void ServerSolarAmmoRangeSpeedDamage(int AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);// 0x234c23bfa041
	void ServerSolarAmmoFiring(int AmmoIndex, int FireCostType, int FireCostPerAttack, int FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);// 0x234b23bfa041
	void ServerSolarAmmoBoltAndMag(int AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);// 0x234a23bfa041
	void ServerSolarAmmoBasicMovement(int AmmoIndex, int TimedExplode, int BounceTimes, float LifeTime, float BaseReloadTime, int TrajectoryType, float CustomValue);// 0x234923bfa041
	void ServerSetRoleAbilitySkillCDDurationDebugOnly(float InCD);// 0x234823bfa041
	void ServerSetPlayerLevel(int InLevel);// 0x234723bfa041
	void ServerSetHangUpBehavior();// 0x234623bfa041
	void ServerSetFreeLook(bool bInFreeLook);// 0x234523bfa041
	void ServerSetClientRecording_Impl(bool bInRecording);// 0x234423bfa041
	void ServerSetAppLifetimeState(enum NewLifeState);// 0x234323bfa041
	void ServerSetActorOwner(Actor* TargetActor);// 0x234223bfa041
	void ServerScreenshotProcessing(const SShotImageInfo ImageInfo);// 0x234023bfa041
	void ServerRPCResetZoneBombsFire();// 0x233f23bfa041
	void ServerResetUniqueSkillCDDebugOnly();// 0x233e23bfa041
	void ServerRequestTransferSkydivingLeaderTo(byte PosInTeam);// 0x233d23bfa041
	void ServerRequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x233c23bfa041
	void ServerReqStartReviveItemRecycleCountDownData();// 0x233b23bfa041
	void ServerPlayerUpgrade(int InLevel);// 0x233a23bfa041
	void ServerPlayerResumeSettlement();// 0x233923bfa041
	void ServerPlayerRequestLogout();// 0x233823bfa041
	void ServerPlayerOutBySelf(enum InPath);// 0x233723bfa041
	void ServerPlayerGoToSettlement();// 0x233623bfa041
	void ServerNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance);// 0x233523bfa041
	void ServerNotifyPlayerHasCheatByNickName(FString NickName);// 0x233423bfa041
	void ServerNotifyPlayerHasCheat(FString SolarPlayerID);// 0x233323bfa041
	void ServerNetProfile(bool startOrStop);// 0x233223bfa041
	void ServerInitTaskInfo();// 0x233123bfa041
	void ServerGoSpectatePreviousPlayer();// 0x233023bfa041
	void ServerGoSpectatePlayerByPlayerIdInternal(FString SolarPlayerID);// 0x232f23bfa041
	void ServerGoSpectatePlayerByPlayerId(FString SolarPlayerID);// 0x232e23bfa041
	void ServerGoSpectatePlayerByIndex_Internal(int Index);// 0x232d23bfa041
	void ServerGoSpectatePlayerByIndex(int Index);// 0x232c23bfa041
	void ServerGoSpectateNextPlayer();// 0x232b23bfa041
	void ServerGainExperience(int InExp);// 0x232a23bfa041
	void ServerEnableCheats();// 0x232923bfa041
	void ServerCmd(FString Cmd);// 0x232823bfa041
	void ServerClearUniqueSkillCDDebugOnly();// 0x232723bfa041
	void ServerChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x232623bfa041
	void ServerChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x232523bfa041
	void ServerChangeVehicleIntProperty(FString InPropertyName, int InFloat);// 0x232423bfa041
	void ServerChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x232323bfa041
	void ServerChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x232223bfa041
	void ServerChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x232123bfa041
	void ServerChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x232023bfa041
	void ServerCancelSkydivingFollow();// 0x231f23bfa041
	void SendRepliableMessageServer(const int Message);// 0x231e23bfa041
	void SendRepliableMessageInMsgBucket(out const int[] MessageIDs);// 0x231d23bfa041
	void SendRepliableMessageByMessageID(out const int ID);// 0x231c23bfa041
	void SendQuickMessageServer(FString Message, bool bSound);// 0x231b23bfa041
	void SendQuickMessageNewServer(const int VoiceType);// 0x231a23bfa041
	void SendQuickMessageNewClient(FString NickName, const int VoiceType, const int CharID, const int SkinId, bool bGender, const int PosInTeam, bool bLocalPlayer, bool bShowLocMessage);// 0x231923bfa041
	void SendQuickMessageClient(FString NickName, FString Message, bool IsLocalPlayer, bool bSound, int PosInTeam);// 0x231823bfa041
	void SendLocalizationTeamMessageServer(int TextID, const LocTextParam[] TextParams, FString SoundEvent);// 0x231723bfa041
	void SendLocalizationTeamMessageNewServer(const LocTextParam[] TextParams, const int SoundID1, const int SoundDI2);// 0x231623bfa041
	void SendLocalizationTeamMessageNewClient(const int CharacterId, const int SkinId, bool bGender, const int SoundID1, FString NickName, const LocTextParam[] TextParams, int PosInTeam, const int SoundID2);// 0x231523bfa041
	void SendLocalizationTeamMessageClient(const SolarPlayerState* SenderPS, int TextID, const LocTextParam[] TextParams, FString SoundEvent, int PosInTeam);// 0x231323bfa041
	void SendLocalizationTeamMessage(int TextID, out const <FString,int> TextParamsId, FString SoundEvent1, FString SoundEvent2);// 0x231223bfa041
	void SendDamageTextDataNextTick(out const SolarDamageText InSolarDamageText);// 0x231123bfa041
	void ResetJoyStickControlInput();// 0x231023bfa041
	void ResetAllInput();// 0x230f23bfa041
	void RequestTransferSkydivingLeaderTo(byte PosInTeam);// 0x230e23bfa041
	void RequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x230d23bfa041
	void RequestNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance);// 0x230c23bfa041
	void RecordSpectateInfoToBI(out SpectateReportInfo SpectateReportInfo);// 0x230b23bfa041
	void QuickMessageLuaCall(FString Message, bool bSound);// 0x230a23bfa041
	int QueryStage();// 0x230923bfa041
	void PushInputModeUIOnly(FName Name, bool bShowCursor, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0x230823bfa041
	void PushInputModeGameOnly(FName Name, bool bShowCursor);// 0x230723bfa041
	void PushInputModeGameAndUI(FName Name, bool bShowCursor, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0x230623bfa041
	void PostInputAction(FName ActionName, byte KeyEvent);// 0x230523bfa041
	void PostAkEventByName(FString EventName1, FString EventName2);// 0x230423bfa041
	void PopInputMode(FName Name);// 0x230323bfa041
	void PlayerGoToSettleMent();// 0x230223bfa041
	void PlayerGotoLobbyWithLogout();// 0x230123bfa041
	void PassiveTriggeredVoice(enum VoiceType);// 0x22ff23bfa041
	void OnVehiclePitchRotateInputDelegate__DelegateSignature(float InputValue);// 0x22fe23bfa041
	void OnTeamNumChangeFun(enum ChangeType, int OldValue, int NewValue);// 0x22fd23bfa041
	void OnTeammateHUDDodgeSet__DelegateSignature(bool bDodge);// 0x22fc23bfa041
	void OnSuperScaningStart(out const FString[] InScanPlayers);// 0x22fb23bfa041
	void OnSuperScaningRemovePlayer(FString InRemovePlayer);// 0x22fa23bfa041
	void OnSuperScaningEnd();// 0x22f923bfa041
	void OnStopUpdateSpectateInfo(SolarSpectateInfo* SpecInfo);// 0x22f823bfa041
	void OnSpectateTargetItemsChanged(SolarSpectateInfo* SpecInfo);// 0x22f723bfa041
	void OnSpectateTargetChangedHandler(SolarPlayerState* OldTarget, SolarSpectateInfo* MySpecInfo);// 0x22f623bfa041
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x22f523bfa041
	void OnSkydivingStatusUpdated(SolarPlayerState* SelfPlayerState, bool bInIsSkydiving);// 0x22f423bfa041
	void OnShowGameNotice(const int InNoticeID, out const <FString,FString> InNoticeParams);// 0x22f323bfa041
	RotationBarMarkWidget*[] OnShowActorMarkDelegate__DelegateSignature(Actor*[] MarkActors);// 0x22f223bfa041
	void OnSeamlessTravelEnd();// 0x22f123bfa041
	void OnScopeAxisInput(float InAxisValue);// 0x22f023bfa041
	void OnReviveSelfTriggered(bool bAppear);// 0x22ef23bfa041
	void OnReceiveBattleEnd();// 0x22ee23bfa041
	void OnPutAwayWeaponPressed();// 0x22ed23bfa041
	void OnPlayerStateSpectateInfoRepHandler(SolarSpectateInfo* SpecInfo);// 0x22ec23bfa041
	void OnPlayerStateRepHandlerForSpectate(enum RepType, PlayerState* InPlayerState);// 0x22eb23bfa041
	void OnPawnReplicated__DelegateSignature();// 0x22ea23bfa041
	void OnNotifiedMarkedItemWasPickedUpDelegate__DelegateSignature(out const int64 InItemInstanceId);// 0x22e923bfa041
	void OnEnterVoyageDelegate__DelegateSignature();// 0x22e823bfa041
	void OnEnterLanding();// 0x22e723bfa041
	void OnCustomizeLevelLoaded();// 0x22e623bfa041
	void OnClientRecordingChanged(bool bInRecording);// 0x22e523bfa041
	void OnCleanActorMarkWithWidgetsDelegate__DelegateSignature(RotationBarMarkWidget*[] MarkWidgets);// 0x22e423bfa041
	void OnCleanActorMarkWithActorsDelegate__DelegateSignature(Actor*[] MarkActors);// 0x22e323bfa041
	void OnCharacterRebirthLua();// 0x22e223bfa041
	void OnCharacterDeathLua();// 0x22e123bfa041
	void OnCatchInputActionDelegate__DelegateSignature(FName ActionName, byte InputEventType);// 0x22e023bfa041
	void OnBeginUpdateSpectateInfo(SolarSpectateInfo* SpecInfo);// 0x22df23bfa041
	void OnBeforeSpectateTargetChange(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x22de23bfa041
	void OnAppHasReactivated();// 0x22dd23bfa041
	void OnAppHasDeactiveated();// 0x22dc23bfa041
	void OnActionWheelClosed();// 0x22db23bfa041
	void NotifyMonsterSpawn();// 0x22da23bfa041
	void NotifyCrouchIsLocked();// 0x22d923bfa041
	void NotifyAppReactivate();// 0x22d823bfa041
	void NotifyAppHasDeactivate();// 0x22d723bfa041
	void NofityCustomizeLevelLoaded();// 0x22d623bfa041
	void MarkWorldInLevelLuaCall(out const WorldMarkData InWorldMarkedData);// 0x22d523bfa041
	void MarkWorldInLevel(const WorldMarkData InWorldMarkedData);// 0x22d423bfa041
	void MarkPointInNavMapLuaCall(out const Vector2D InMarkedPoint);// 0x22d323bfa041
	void MarkPointInNavMap(const Vector2D InMarkedPoint, bool bFromWorldMark);// 0x22d223bfa041
	void MarkOnWorldByMinimapPosition(int PosInTeam, const Vector2D MinimapPos);// 0x22d123bfa041
	void MarkedAsAppHasReactivated();// 0x22d023bfa041
	void MarkedAsAppHasDeactivated();// 0x22cf23bfa041
	void LuaShowUI(FString WidgetPath, FString UIName);// 0x22ce23bfa041
	void LuaClientUpdateAimbotSlidingWindowPolicyParm(int AimbotSwitch, int WindowSize, int MaxMutation);// 0x22cd23bfa041
	void LuaCallInputTouch(uint32 Handle, byte Type, out const Vector2D TouchLocation);// 0x22cb23bfa041
	void LookUp(float Value);// 0x22ca23bfa041
	void LogMarkAndQuickVoice(int Type, int SubType);// 0x22c923bfa041
	void KickMeOutAtDS(FString InPlayerID);// 0x22c823bfa041
	void K2_ShowDamageText(float InDamage, out const HitResult InHitResult, Actor* InDamageSource, Controller* InAutonomousController, out const SolarPointDamageEvent InPointDamageEvent);// 0x22c723bfa041
	bool IsThirdPersonSpectateCameraMode();// 0x22c623bfa041
	bool IsSpectatingOtherPlayer();// 0x22c523bfa041
	bool IsMatching();// 0x22c423bfa041
	bool IsHasSkydiveAndEnd();// 0x22c323bfa041
	bool IsHasCharacterAndSkin(int CharacterId, int SkinId);// 0x22c223bfa041
	void InputWorldMarkReleased();// 0x22c123bfa041
	void InputWorldMarkPressed();// 0x22c023bfa041
	void InputVerticalJetReleased();// 0x22bf23bfa041
	void InputVerticalJetPressed();// 0x22be23bfa041
	void InputVehicleInteractionReleased();// 0x22bd23bfa041
	void InputVehicleInteractionPressed();// 0x22bc23bfa041
	void InputUseMedicineReleased();// 0x22bb23bfa041
	void InputUseMedicinePressed();// 0x22ba23bfa041
	void InputToggleTertiaryWeapon_Checkbox();// 0x22b923bfa041
	void InputToggleSkydivingFollowRouletteTriggered();// 0x22b823bfa041
	void InputToggleSecondaryWeaponReleased();// 0x22b723bfa041
	void InputToggleSecondaryWeaponPressed();// 0x22b623bfa041
	void InputToggleSecondaryWeapon_Checkbox();// 0x22b523bfa041
	void InputTogglePrimaryWeaponReleased();// 0x22b423bfa041
	void InputTogglePrimaryWeaponPressed();// 0x22b323bfa041
	void InputTogglePrimaryWeapon_Checkbox();// 0x22b223bfa041
	void InputTogglePickupReleased();// 0x22b123bfa041
	void InputTogglePickupPressed();// 0x22b023bfa041
	bool InputTestPriority3Pressed();// 0x22af23bfa041
	bool InputTestPriority2Pressed();// 0x22ae23bfa041
	bool InputTestPriority1Released();// 0x22ad23bfa041
	bool InputTestPriority1Pressed();// 0x22ac23bfa041
	void InputSwitchToSeatTwoPressed();// 0x22ab23bfa041
	void InputSwitchToSeatThreePressed();// 0x22aa23bfa041
	void InputSwitchToSeatOnePressed();// 0x22a923bfa041
	void InputSwitchToSeatFourPressed();// 0x22a823bfa041
	void InputSwitchFireModeReleased();// 0x22a723bfa041
	void InputSwitchFireModePressed();// 0x22a623bfa041
	void InputStartRepairVehicleReleased();// 0x22a523bfa041
	void InputSprintLockStart();// 0x22a423bfa041
	void InputSprintFreeTerminate();// 0x22a323bfa041
	void InputSprintFreeStart();// 0x22a223bfa041
	void InputSprintFreeReleasedOnPC();// 0x22a123bfa041
	void InputSprintFreePressedOnPC();// 0x22a023bfa041
	void InputSkydivingFollowRouletteSelect4();// 0x229f23bfa041
	void InputSkydivingFollowRouletteSelect3();// 0x229e23bfa041
	void InputSkydivingFollowRouletteSelect2();// 0x229d23bfa041
	void InputSkydivingFollowRouletteSelect1();// 0x229c23bfa041
	void InputSkydivingFollowRouletteSelect(int PosInTeam);// 0x229b23bfa041
	void InputShieldUpgradeReleased();// 0x229a23bfa041
	void InputShieldUpgradePressed();// 0x229923bfa041
	void InputShieldUpgradeCancelReleased();// 0x229823bfa041
	void InputShieldUpgradeCancelPressed();// 0x229723bfa041
	void InputRightMouseButtonReleased();// 0x229623bfa041
	void InputRightMouseButtonPressed();// 0x229523bfa041
	void InputReviveSelfReleased();// 0x229423bfa041
	void InputReloadReleased();// 0x229323bfa041
	void InputReloadPressed();// 0x229223bfa041
	void InputRechargeShieldReleased();// 0x229123bfa041
	void InputRechargeShieldPressed();// 0x229023bfa041
	void InputQuickAdsReleased();// 0x228f23bfa041
	void InputQuickAdsPressed();// 0x228e23bfa041
	void InputPSTouchpadButton(float InValueX);// 0x228d23bfa041
	void InputPickupReleased();// 0x228c23bfa041
	void InputPickupPressed();// 0x228b23bfa041
	void InputMoveRight(float InValueY);// 0x228a23bfa041
	void InputMovementYReceived(float InValueY);// 0x228923bfa041
	void InputMovementXReceived(float InValueX);// 0x228823bfa041
	void InputMoveForward(float InValueX);// 0x228723bfa041
	void InputMapPressed();// 0x228623bfa041
	void InputLeftFireReleased();// 0x228523bfa041
	void InputLeftFirePressed();// 0x228423bfa041
	void InputKeepSprintPressed();// 0x228323bfa041
	void InputJumpReleased();// 0x228223bfa041
	void InputJumpPressed();// 0x228123bfa041
	void InputItemActionWheelReleased();// 0x228023bfa041
	void InputItemActionWheelPressed();// 0x227f23bfa041
	void InputInteractPressed();// 0x227e23bfa041
	void InputInteractAndReloadReleased();// 0x227d23bfa041
	void InputInteractAndReloadPressed();// 0x227c23bfa041
	void InputHorizontalJetReleased();// 0x227b23bfa041
	void InputHorizontalJetPressed();// 0x227a23bfa041
	void InputGunsightReleased();// 0x227923bfa041
	void InputGunsightPressed();// 0x227823bfa041
	void InputGetOnVehicleReleased();// 0x227723bfa041
	void InputGetOffVehicleReleased();// 0x227623bfa041
	void InputFreeLookReleased();// 0x227523bfa041
	void InputFreeLookPressed();// 0x227423bfa041
	void InputFireReleased();// 0x227323bfa041
	void InputFirePressed();// 0x227223bfa041
	void InputEquip2Released();// 0x227123bfa041
	void InputEquip2Pressed();// 0x227023bfa041
	void InputEquip1Released();// 0x226f23bfa041
	void InputEquip1Pressed();// 0x226e23bfa041
	void InputEmoteActionWheelReleased();// 0x226d23bfa041
	void InputEmoteActionWheelPressed();// 0x226c23bfa041
	void InputEjectReleased();// 0x226b23bfa041
	void InputEjectPressed();// 0x226a23bfa041
	void InputDriveVehicleReleased();// 0x226923bfa041
	void InputCrouchReleased();// 0x226823bfa041
	void InputCrouchPressed();// 0x226723bfa041
	void InputCancelVehicleAbilityReleased();// 0x226623bfa041
	void InputCancelSkydivingFollowingTriggered();// 0x226523bfa041
	void InputBuilding();// 0x226423bfa041
	void InputBigRechargeShieldReleased();// 0x226323bfa041
	void InputBigRechargeShieldPressed();// 0x226223bfa041
	void InputBackpackReleased();// 0x226123bfa041
	void InputBackpackPressed();// 0x226023bfa041
	void InputAltFireReleased();// 0x225f23bfa041
	void InputAltFirePressed();// 0x225e23bfa041
	void InputActiveVehicleSecondAbilityReleased();// 0x225d23bfa041
	void InputActiveVehicleSecondAbilityPressed();// 0x225c23bfa041
	void InputActiveVehicleFirstAbilityReleased();// 0x225b23bfa041
	void InputActiveVehicleFirstAbilityPressed();// 0x225a23bfa041
	void InputActionWheelPreviousPage();// 0x225923bfa041
	void InputActionWheelNextPage();// 0x225823bfa041
	void InputActionWheelExec();// 0x225723bfa041
	void InputActionWheelCancel();// 0x225623bfa041
	void InputActionSecondaryReleased();// 0x225523bfa041
	void InputActionSecondaryPressed();// 0x225423bfa041
	void InputActionPrimaryReleased();// 0x225323bfa041
	void InputActionPrimaryPressed();// 0x225223bfa041
	bool IfSolarCharacterIsDriver();// 0x225123bfa041
	void HighlightDataRpcConnection(FString HighlightDataStr);// 0x225023bfa041
	bool HasSkin(int InSkinID);// 0x224f23bfa041
	void HandleBeginSpectateRequest();// 0x224e23bfa041
	void GyroscopeTilt(Vector Tilt);// 0x224d23bfa041
	void GyroscopeRotationRate(Vector RotationRate);// 0x224c23bfa041
	SolarCharacter* GetViewportFocusedCharacter(bool bReturnPossessedCharacterIfSpectateNull);// 0x224b23bfa041
	Vector2D GetViewportCenter();// 0x224a23bfa041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x224923bfa041
	SolarSpectateInfo* GetSpectateInfo();// 0x224823bfa041
	SolarCharacter* GetSpectatedCharacter();// 0x224723bfa041
	SolarPlayerState* GetSolarViewPlayerState();// 0x224623bfa041
	SolarPlayerState* GetSolarPlayerState();// 0x224523bfa041
	SolarCharacter* GetSolarCharacter();// 0x224423bfa041
	enum GetPlayNetStateInGame();// 0x224323bfa041
	Rotator GetPlayerViewRotation(bool bWithoutCameraModifiers, bool bWithRotationInput);// 0x224223bfa041
	Vector GetPlayerViewLocation(bool bWithoutCameraModifiers, bool bWithRotationInput);// 0x224123bfa041
	PlayerStatisticsData* GetPlayerStatData();// 0x224023bfa041
	FString GetPlayerID();// 0x223f23bfa041
	FString GetNoticeLocalText(int InNoticeID, out const <FString,FString> InNoticeParams);// 0x223e23bfa041
	byte GetMyTeamID();// 0x223d23bfa041
	byte GetMyPosInTeam();// 0x223c23bfa041
	Vector2D GetMyMarkedPointInNavMap();// 0x223b23bfa041
	int GetMultiKillNum();// 0x223a23bfa041
	int GetKillNum();// 0x223923bfa041
	int GetKillingSpreesNum();// 0x223823bfa041
	bool GetIsDropAndPickUpItemOrWeaponSwitchOnValue();// 0x223723bfa041
	SolarInputModePolicyComponent* GetInputModePolicyComp();// 0x223623bfa041
	SolarInputModeDataBase GetInputMode(FName Name, out enum OutInputMode, out bool bFound);// 0x223323bfa041
	SolarCameraComponent* GetCurrentCameraComponent();// 0x223223bfa041
	void GetControlledVehiclePropertyContainer(out Object*[] OutObjects);// 0x223123bfa041
	Rotator GetCharacterViewRotation();// 0x223023bfa041
	Rotator GetCameraRotation();// 0x222f23bfa041
	Vector GetCameraLocation();// 0x222e23bfa041
	SolarCharacter* GetCameraFocusedCharacter();// 0x222d23bfa041
	float GetCameraDefaultFOVAngle();// 0x222c23bfa041
	float GetCameraCurrentFOVAngle();// 0x222b23bfa041
	SolarCameraComponent* GetActiveCamera();// 0x222a23bfa041
	void ForceCompleteClientBlendToSpectateTarget();// 0x222923bfa041
	void ExcludeDifferentTeam(int TeamID);// 0x222823bfa041
	void EndOBCurrentBattle();// 0x222723bfa041
	void DropPassengerNotification();// 0x222623bfa041
	void DestroyCharacterCorpse();// 0x222523bfa041
	void DebugUpdateTask();// 0x222423bfa041
	void DebugSetPlayerData();// 0x222323bfa041
	void DebugInitTask();// 0x222223bfa041
	void CustomModeShowNotice(const int InType, const int InNoticeID, class Object InClass, const float InTime, FString InText, Object* InIcon, const int InNoticeColor);// 0x222123bfa041
	void CustomAntiCheatDataExport(out const FString[] DataName, out const FString[] DataContent);// 0x222023bfa041
	void ClientSyncPlayerSelfReport(const SolarPlayerReport SelfReport, const SolarGameModeInfo GameInfo);// 0x221f23bfa041
	void ClientStartReviveItemRecycleCountDown(const int CurrentTime, const int DurationTime);// 0x221e23bfa041
	void ClientShowUI(FString WidgetPath, FString UIName);// 0x221d23bfa041
	void ClientShowDiePage();// 0x221c23bfa041
	void ClientScreenshotTask(const ScreenshotSetting Setting);// 0x221923bfa041
	void ClientReviveWillBeDisabledHint(const int Duration);// 0x221823bfa041
	void ClientReviveBeDisabledHint();// 0x221723bfa041
	void ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving(SolarPlayerState* NewLeaderPlayerState, SolarPlayerState* OldLeaderPlayerState);// 0x221623bfa041
	void ClientReplacePlayerKillEffect(Actor* InSource, Actor* InTarget);// 0x221523bfa041
	void ClientReceviceDamageText(const SolarDamageText[] InSolarDamageTextDatas);// 0x221323bfa041
	void ClientRaiseScreenshotJob(enum ShotMoment);// 0x221123bfa041
	void ClientPlayerGoToSettlement(const SolarPlayerReport[] Reports, const SolarGameModeInfo GameInfo, const int[] InSettlementPageIndexs, bool IsCustomRoom);// 0x220e23bfa041
	void ClientPlayerActivityHeatUpdate(FString ActivityHeatFragmentStr);// 0x220d23bfa041
	void ClientNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter);// 0x220c23bfa041
	void ClientNotifyCheatedPlayer(const FText OutReason);// 0x220b23bfa041
	void ClientNotifyAbnormalPlayer(const FText OutReason);// 0x220a23bfa041
	void ClientEnableAiPalComponent(int Rate);// 0x220923bfa041
	void ClientDoCharacterOperation(const CharacterOperationEvent ChOperationEvt);// 0x220823bfa041
	void ClientCloseUI(FString UIName);// 0x220723bfa041
	void ClientClearAudioListenerOverride();// 0x220623bfa041
	void ClientCharacterIsDead();// 0x220523bfa041
	void ClientBeginOBCurrentBattleInternal();// 0x220423bfa041
	void ClearMarkedPointInNavMapLuaCall();// 0x220323bfa041
	void ClearMarkedPointInNavMap();// 0x220223bfa041
	void ChangeVehicleVectorPropertyInternal(FString InPropertyName, float InX, float InY, float InZ);// 0x220123bfa041
	void ChangeVehicleRotatorPropertyInternal(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x220023bfa041
	void ChangeVehicleIntPropertyInternal(FString InPropertyName, int InFloat);// 0x21ff23bfa041
	void ChangeVehicleFloatPropertyInternal(FString InPropertyName, float InFloat);// 0x21fe23bfa041
	void ChangeVehicleCurvePropertyInternal(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x21fd23bfa041
	void ChangeVehicleBoolPropertyInternal(FString InPropertyName, bool InBool);// 0x21fc23bfa041
	bool CanWorldMark();// 0x21fb23bfa041
	bool CanSolarCharacterLaunchJetPack();// 0x21fa23bfa041
	bool CanSolarCharacterInput();// 0x21f923bfa041
	bool CanSolarCharacterCrouch();// 0x21f823bfa041
	void CancelSkydivingFollow();// 0x21f723bfa041
	void BuildSkydivingFollowOnLeavingTeam(bool bIgnoreNotification);// 0x21f623bfa041
	void BuildSkydivingFollowOnEnteringTeam();// 0x21f523bfa041
	void BpServerCheckAndUpdateAimbotSlidingWindowPolicyParm(int AimbotSwitch, int WindowSize, int MaxMutation);// 0x21f423bfa041
	void BindDelegatesDependGameState();// 0x21f323bfa041
	void BeNotifiedMarkedItemWasPickedUp(const int64 InItemInstanceId);// 0x21f223bfa041
	void BeginOBCurrentBattle();// 0x21f123bfa041
	void BackToLobby();// 0x21f023bfa041
	void AssembleCustomAntiCheatData(SolarWeapon* ActiveWeapon, SolarVehiclePawn* BoardedVehicle);// 0x21ef23bfa041
	void AntiCheatDataSchedulerUpload(const FString[] DataName, const FString[] DataContent, const FixedAntiCheatData FixedData);// 0x21ec23bfa041
	void AddTeammateCandidate(SolarCharacter* Candidate, int TeamID);// 0x21eb23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: RepCountdownData
	int RepTimes;//[Offset: 0x0, Size: 0x4]
	int RepTextID;//[Offset: 0x4, Size: 0x4]
	int RepPassiveTextID;//[Offset: 0x8, Size: 0x4]
	int RepPassiveCharacterID;//[Offset: 0xc, Size: 0x4]
	float RepDuration;//[Offset: 0x10, Size: 0x4]
	float RepRemaining;//[Offset: 0x14, Size: 0x4]
	float RepAmount;//[Offset: 0x18, Size: 0x4]
	float RepStartTime;//[Offset: 0x1c, Size: 0x4]
	float RepEndTime;//[Offset: 0x20, Size: 0x4]
	int RepCancel;//[Offset: 0x24, Size: 0x4]
	float RemainingTime;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PointerToUberGraphFrame
<----------Generated by SSpawner v1.0.2---------->


Class: SCMPlayerRPCComponent.ActorComponent.Object
	void ReceivedLevelLoaded(FString LevelName);// 0x47b923bfa041
	void ReceivedCharacter();// 0x47b823bfa041
	void ReceivedBeginLevelLoad(FString LevelName);// 0x47b723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarInputManager.ActorComponent.Object
	SolarPlayerSensitivitys* SenSetting;//[Offset: 0xc8, Size: 0x8]
	TouchHandler TouchHandler;//[Offset: 0x108, Size: 0x178]
	void SetTouchScaler(float InVal);// 0x4eac23bfa041
	void SetNoiseThresholdFactor(float InVal);// 0x4eab23bfa041
	void SetMouseScaler(Vector2D InVal);// 0x4eaa23bfa041
	void SetMinNoiseMultiplier(float InVal);// 0x4ea923bfa041
	void SetCurveVerticalFix(Vector2D InVec);// 0x4ea823bfa041
	void SetCurveVerticalFactor(Vector2D InVec);// 0x4ea723bfa041
	void SetCurveHorizonFix(Vector2D InVec);// 0x4ea623bfa041
	void SetCurveHorizonFactor(Vector2D InVec);// 0x4ea523bfa041
	void OnCacheNeedUpdate();// 0x4ea423bfa041
	float GetTouchScaler();// 0x4ea323bfa041
	Vector2D GetTouchOutputScale();// 0x4ea223bfa041
	float GetNoiseThresholdFactor();// 0x4ea123bfa041
	Vector2D GetMouseScaler();// 0x4ea023bfa041
	float GetMinNoiseMultiplier();// 0x4e9f23bfa041
	Vector2D GetFixedOutput();// 0x4e9e23bfa041
	Vector2D GetDeltaMove();// 0x4e9d23bfa041
	Vector2D GetCurveVerticalFix();// 0x4e9c23bfa041
	Vector2D GetCurveVerticalFactor();// 0x4e9b23bfa041
	Vector2D GetCurveHorizonFix();// 0x4e9a23bfa041
	Vector2D GetCurveHorizonFactor();// 0x4e9923bfa041
	Vector2D GetAverageDeltaMove();// 0x4e9823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlayerSensitivitys.Object
	void InitPlayerSensitivity();// 0x521523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TouchHandler.InputHandler
	CurveFloat* HorizCurve;//[Offset: 0x98, Size: 0x8]
	CurveFloat* VertCurve;//[Offset: 0xa0, Size: 0x8]
	CurveFloat* DistHorizCurve;//[Offset: 0xd0, Size: 0x8]
	CurveFloat* DistVertCurve;//[Offset: 0xd8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: InputHandler
<----------Generated by SSpawner v1.0.2---------->


Class: AiPalComponent.ActorComponent.Object
	void SetUserID(FString UserId);// 0x3d3523bfa041
	void SetThreshold(float ThresholdPer);// 0x3d3423bfa041
	void SetMaxDetectTimes(int DetectGap_ms);// 0x3d3323bfa041
	void SetDetectGap_ms(int DetectGap_ms);// 0x3d3223bfa041
	void EndDetect();// 0x3d3123bfa041
	void Capture();// 0x3d3023bfa041
	void BeginDetect();// 0x3d2f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarEasyAntiCheatComponent.ActorComponent.Object
	SolarEasyAntiCheatManager* AntiCheatManager;//[Offset: 0xb8, Size: 0x8]
	Actor* Owner;//[Offset: 0xc0, Size: 0x8]
	void ServerOnUnRegisterClient();// 0x4c9223bfa041
	void ServerOnRegisterClient(FString ProductID);// 0x4c9123bfa041
	void ServerOnReceiveClientNotifyMessage(uint32 DataLenBytes, FString Data);// 0x4c9023bfa041
	void ClientOnReceiveServerNotifyMessage(uint32 DataLenBytes, FString Data);// 0x4c8f23bfa041
	void ClientOnActionRequired(const int ClientAction, const int ActionReason, FString Details);// 0x4c8e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarEasyAntiCheatManager.Object
	bool EnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bEnableAntiCheatLauncherCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	void TestSendDSAction(const int ActionReason, FString ActionDetials);// 0x4c9c23bfa041
	void SwitchAntiCheatState();// 0x4c9b23bfa041
	void SetEOSOpenIDToken(FString OpenIDToken);// 0x4c9a23bfa041
	void SendSteamAntiCheatRequest(const int ErrorCode);// 0x4c9923bfa041
	void ReportAntiCheatBI(const int ErrorCode);// 0x4c9823bfa041
	bool IsLaunchbyEOSBootstrapper();// 0x4c9723bfa041
	bool IsEOSSettingChanged();// 0x4c9623bfa041
	void EasyAntiCheatLogin(FString AppToken);// 0x4c9523bfa041
	void AntiCheatLauncherCheck();// 0x4c9423bfa041
	bool AntiCheatEosSettingCheck();// 0x4c9323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarInputModePolicyComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarInputActionContext.Object
	InputMappingContext* InputMappingContext;//[Offset: 0x48, Size: 0x8]
	<Key,InputAction*> KeyChordInputActionDict;//[Offset: 0x50, Size: 0x50]
	<FName,SolarInputActionEntry> ActionInputActionDict;//[Offset: 0xa0, Size: 0x50]
	<FName,SolarInputActionEntry> ChordActionInputActionDict;//[Offset: 0xf0, Size: 0x50]
	InputAction* NullInputAction;//[Offset: 0x140, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: InputMappingContext.DataAsset.Object
	EnhancedActionKeyMapping[] Mappings;//[Offset: 0x30, Size: 0x10]
	FText ContextDescription;//[Offset: 0x40, Size: 0x18]
	void UnmapKey(const InputAction* Action, Key Key);// 0x3d2823bfa041
	void UnmapAll();// 0x3d2723bfa041
	void UnmapAction(const InputAction* Action);// 0x3d2623bfa041
	EnhancedActionKeyMapping MapKey(const InputAction* Action, Key ToKey);// 0x3d2523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: EnhancedActionKeyMapping
	InputAction* Action;//[Offset: 0x0, Size: 0x8]
	Key Key;//[Offset: 0x8, Size: 0x18]
	bool bShouldBeIgnored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	InputTrigger*[] Triggers;//[Offset: 0x28, Size: 0x10]
	InputModifier*[] Modifiers;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: InputAction.DataAsset.Object
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bTriggerWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bReserveAllMappings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	enum ValueType;//[Offset: 0x33, Size: 0x1]
	InputTrigger*[] Triggers;//[Offset: 0x38, Size: 0x10]
	InputModifier*[] Modifiers;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: InputTrigger.Object
	float ActuationThreshold;//[Offset: 0x28, Size: 0x4]
	InputActionValue LastValue;//[Offset: 0x2c, Size: 0x10]
	enum UpdateState(const EnhancedPlayerInput* PlayerInput, InputActionValue ModifiedValue, float DeltaTime);// 0x3d2e23bfa041
	bool IsActuated(out const InputActionValue ForValue);// 0x3d2d23bfa041
	enum GetTriggerType();// 0x3d2c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: InputActionValue
<----------Generated by SSpawner v1.0.2---------->


Class: EnhancedPlayerInput.PlayerInput.Object
	<InputMappingContext*,int> AppliedInputContexts;//[Offset: 0x3a8, Size: 0x50]
	EnhancedActionKeyMapping[] EnhancedActionMappings;//[Offset: 0x3f8, Size: 0x10]
	<InputAction*,InputActionInstance> ActionInstanceData;//[Offset: 0x458, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: InputActionInstance
	InputAction* SourceAction;//[Offset: 0x0, Size: 0x8]
	InputTrigger*[] Triggers;//[Offset: 0x10, Size: 0x10]
	InputModifier*[] Modifiers;//[Offset: 0x20, Size: 0x10]
	InputModifier*[] PerInputModifiers;//[Offset: 0x30, Size: 0x10]
	InputModifier*[] FinalValueModifiers;//[Offset: 0x40, Size: 0x10]
	float ElapsedProcessedTime;//[Offset: 0x60, Size: 0x4]
	float ElapsedTriggeredTime;//[Offset: 0x64, Size: 0x4]
	enum TriggerEvent;//[Offset: 0x68, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: InputModifier.Object
	InputActionValue ModifyRaw(const EnhancedPlayerInput* PlayerInput, InputActionValue CurrentValue, float DeltaTime);// 0x3d2b23bfa041
	LinearColor GetVisualizationColor(InputActionValue SampleValue, InputActionValue FinalValue);// 0x3d2a23bfa041
	enum GetExecutionPhase();// 0x3d2923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarInputActionEntry
	InputAction* InputAction;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	Actor* CurrentFollowActor;//[Offset: 0x360, Size: 0x8]
	PlayerController* CurrentPlayerController;//[Offset: 0x368, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x370, Size: 0x8]
	Vector2D MarkPanelSize;//[Offset: 0x378, Size: 0x8]
	float MaxVisibleDis;//[Offset: 0x398, Size: 0x4]
	void SetUpdateState(bool InShouldUpdateLocation);// 0x40f623bfa041
	void InitActorMarkBaseByFixedPos(Vector Pos, PlayerController* Controller);// 0x40f523bfa041
	void InitActorMarkBase(Actor* InActor, PlayerController* Controller);// 0x40f423bfa041
	Vector GetFollowActorLocation();// 0x40f323bfa041
	float GetDistance(bool bIncludeZ);// 0x40f223bfa041
	Actor* GetCurrentFollowActor();// 0x40f123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarUserWidget.UserWidget.Widget.Visual.Object
	enum WidgetLayerLevel;//[Offset: 0x260, Size: 0x1]
	bool bIsPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	enum WidgetScope;//[Offset: 0x262, Size: 0x1]
	enum CaptureInput;//[Offset: 0x263, Size: 0x1]
	bool bHideCursorDuringCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	int MyRoot;//[Offset: 0x268, Size: 0x4]
	FString widgetkey;//[Offset: 0x270, Size: 0x10]
	bool bReceiveKeyMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool bReceiveShowMouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	enum ShowScope;//[Offset: 0x282, Size: 0x1]
	bool bShowTransBlackAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 0x1]
	class WidgetInputManager* InputManagerClass;//[Offset: 0x288, Size: 0x8]
	WidgetInputManager* InputManager;//[Offset: 0x290, Size: 0x8]
	<FName,WidgetAnimation*> AnimationsMap;//[Offset: 0x298, Size: 0x50]
	WidgetAnimation* PlayingAnimation;//[Offset: 0x2e8, Size: 0x8]
	PlayAnimationParams[] PendingPlayAnimations;//[Offset: 0x308, Size: 0x10]
	bool WidgetTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	SolarInputActionContext* InputActionContext;//[Offset: 0x320, Size: 0x8]
	SolarUserWidget*[] AllSolarUserWidgetChilds;//[Offset: 0x338, Size: 0x10]
	void StopListeningForInputHandle(const int Handle);// 0x269323bfa041
	void StopListeningForInputActionEx(FName ActionName, byte EventType);// 0x269223bfa041
	void ShowSelfPanelUI();// 0x269123bfa041
	void ShowMouseCursor();// 0x269023bfa041
	void SetZOrder(int ZOrder);// 0x268f23bfa041
	void SetWidgetVisible(Widget* Widget, bool bVisible, bool bHitTest);// 0x268e23bfa041
	void SetWidgetTickEnabled(bool bEnabled);// 0x268d23bfa041
	void SetWidgetKey(FString InWidgetKey);// 0x268c23bfa041
	void SetInputActionIsEnabled(FName ActionName, byte EventType, bool bInIsEnabled);// 0x268b23bfa041
	void SetBlockInputForOneTick();// 0x268a23bfa041
	void ReceiveTick(out const Geometry MyGeometry, float InDeltaTime);// 0x268923bfa041
	void ReceiveShow();// 0x268823bfa041
	void ReceiveHide();// 0x268723bfa041
	bool PlayAnimationByName(out const FName AnimationName, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x268623bfa041
	void PlayAnimationByExclusively(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x268523bfa041
	void OnTouchManagerInitialized();// 0x268423bfa041
	void OnSynchronizeProperties();// 0x268323bfa041
	void OnSolarUIOpened();// 0x268223bfa041
	void OnSolarUIClosed();// 0x268123bfa041
	void OnShow();// 0x268023bfa041
	void OnHide();// 0x267f23bfa041
	void OnExclusivelyAnimationFinished();// 0x267e23bfa041
	void OnDeinitialize();// 0x267d23bfa041
	void OnBackKey(enum BackKeyType);// 0x267b23bfa041
	int ListenForInputActionEx(FName ActionName, byte EventType, bool bInIsEnabled, delegate Callback);// 0x267a23bfa041
	bool IsWidgetTickEnabled();// 0x267923bfa041
	bool IsSolarUserWidgetAndBindLua(Widget* InWidget);// 0x267823bfa041
	bool IsPlatformDesktop();// 0x267723bfa041
	void HideMouseCursor();// 0x267623bfa041
	FString GetWidgetKeyByPanelName(enum PanelName);// 0x267423bfa041
	FString GetWidgetKey();// 0x267323bfa041
	Vector2D[] GetTouchedLocation();// 0x267223bfa041
	enum GetShowScope();// 0x267123bfa041
	Vector2D[] GetPointerLocation();// 0x267023bfa041
	SolarPlayerState* GetOwningSolarPlayerState();// 0x266f23bfa041
	SolarCharacter* GetOwningSolarPlayerCharacter();// 0x266e23bfa041
	WidgetAnimation* GetAnimationByName(out const FName AnimationName);// 0x266d23bfa041
	SolarUserWidget*[] GetAllSolarUserWidgetChilds();// 0x266c23bfa041
	Widget* FindWidgetFromName(out const FName Name);// 0x266b23bfa041
	void ExecuteSolarUIShow();// 0x266a23bfa041
	void ExecuteSolarUIOpened();// 0x266923bfa041
	void ExecuteSolarUIHide();// 0x266823bfa041
	void ExecuteSolarUIClosed();// 0x266723bfa041
	void ExecuteSolarUIClean();// 0x266623bfa041
	void ExecuteBindCustomControl();// 0x266523bfa041
	void CloseSelfPanelUI();// 0x266423bfa041
	SolarUserWidget*[] CacheAllSolarUserWidgetChilds();// 0x266323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetInputManager.Object
	delegate OnTouchStartDetected;//[Offset: 0x28, Size: 0x10]
	delegate OnTouchUpdate;//[Offset: 0x38, Size: 0x10]
	delegate OnTouchEndDetected;//[Offset: 0x48, Size: 0x10]
	delegate OnPointerStartDetected;//[Offset: 0x58, Size: 0x10]
	delegate OnPointerUpdate;//[Offset: 0x68, Size: 0x10]
	delegate OnPointerEndDetected;//[Offset: 0x78, Size: 0x10]
	<int,Vector2D> TouchedList;//[Offset: 0x90, Size: 0x50]
	<int,Vector2D> PointerList;//[Offset: 0xe0, Size: 0x50]
	Widget* K2_GetManagedWidget();// 0x5cdd23bfa041
	bool GetWidgetTouchedList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x5cdc23bfa041
	bool GetWidgetPointerList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x5cdb23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PlayAnimationParams
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlayerState.PlayerState.Info.Actor.Object
	delegate OnTeammatePlayerStateRepDelegate;//[Offset: 0x328, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate;//[Offset: 0x338, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInBattlePhaseDelegate;//[Offset: 0x348, Size: 0x10]
	delegate OnPlayerChangedGoldsDelegate;//[Offset: 0x358, Size: 0x10]
	delegate OnOBPlayerRepDelegate;//[Offset: 0x368, Size: 0x10]
	int Gold;//[Offset: 0x378, Size: 0x4]
	int[] CostedGolds;//[Offset: 0x380, Size: 0x10]
	int[] ReceivedGolds;//[Offset: 0x390, Size: 0x10]
	int CharacterId;//[Offset: 0x3a0, Size: 0x4]
	int SkinId;//[Offset: 0x3a4, Size: 0x4]
	FString ClanId;//[Offset: 0x3a8, Size: 0x10]
	FString ClanName;//[Offset: 0x3b8, Size: 0x10]
	FString ClanShortName;//[Offset: 0x3c8, Size: 0x10]
	int BagId;//[Offset: 0x3d8, Size: 0x4]
	int CapsuleID;//[Offset: 0x3dc, Size: 0x4]
	FString SolarPlayerID;//[Offset: 0x3e0, Size: 0x10]
	FString NickName;//[Offset: 0x3f0, Size: 0x10]
	uint32 BattleVoiceId;//[Offset: 0x400, Size: 0x4]
	int64 RTCType;//[Offset: 0x408, Size: 0x8]
	uint64 UserId;//[Offset: 0x410, Size: 0x8]
	byte PosInTeam;//[Offset: 0x418, Size: 0x1]
	FString Side;//[Offset: 0x420, Size: 0x10]
	FString Job;//[Offset: 0x430, Size: 0x10]
	int CharacterLevel;//[Offset: 0x440, Size: 0x4]
	int AvatarID;//[Offset: 0x444, Size: 0x4]
	int AvatarFrameID;//[Offset: 0x448, Size: 0x4]
	int Gender;//[Offset: 0x44c, Size: 0x4]
	int AccountLevel;//[Offset: 0x450, Size: 0x4]
	int FriendNum;//[Offset: 0x454, Size: 0x4]
	int RoleID;//[Offset: 0x458, Size: 0x4]
	MedalInfo[] Medals;//[Offset: 0x460, Size: 0x10]
	BattleCharacterData[] AllCharacterData;//[Offset: 0x470, Size: 0x10]
	BattleCharacterData CurUsedCharacterData;//[Offset: 0x480, Size: 0x40]
	ExpRankMedalData[] AllExpRankMedalData;//[Offset: 0x4c0, Size: 0x10]
	LastBattleInfo LastBattleInfo;//[Offset: 0x4d0, Size: 0x1c]
	int RoleUltimateSkillCDState;//[Offset: 0x4ec, Size: 0x4]
	SettlementParam_ExtraRewardInfo[] ExtraRewards;//[Offset: 0x4f0, Size: 0x10]
	SettlementReward[] SettlementRewards;//[Offset: 0x500, Size: 0x10]
	SettlementCrateReward[] CrateRewards;//[Offset: 0x510, Size: 0x10]
	uint32 PlayerNumber;//[Offset: 0x520, Size: 0x4]
	<int,int> VehicleSkinData;//[Offset: 0x528, Size: 0x50]
	float CurrentHealth;//[Offset: 0x578, Size: 0x4]
	float MaxHealth;//[Offset: 0x57c, Size: 0x4]
	ShieldInfo CurShieldInfo;//[Offset: 0x580, Size: 0x8]
	byte ReviveItemNum;//[Offset: 0x588, Size: 0x1]
	byte ReviveCountByItem;//[Offset: 0x589, Size: 0x1]
	int TalentID;//[Offset: 0x58c, Size: 0x4]
	int LikeValue;//[Offset: 0x590, Size: 0x4]
	int ReceivedGiftNum;//[Offset: 0x594, Size: 0x4]
	int SpectatorNum;//[Offset: 0x598, Size: 0x4]
	enum TalentState;//[Offset: 0x59c, Size: 0x1]
	bool HasBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59d, Size: 0x1]
	bool HasGroupBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59e, Size: 0x1]
	Vector2D MarkedPointInNavMap;//[Offset: 0x5a0, Size: 0x8]
	Vector SelfLastVehicleLocation;//[Offset: 0x5a8, Size: 0xc]
	Vector TeamLastVehicleLocation;//[Offset: 0x5b4, Size: 0xc]
	byte CurrentPlayerStateInGame;//[Offset: 0x5c0, Size: 0x1]
	byte CurrentCharacterStateInGame;//[Offset: 0x5c1, Size: 0x1]
	int AccountFlag;//[Offset: 0x618, Size: 0x4]
	int ClanFlag;//[Offset: 0x61c, Size: 0x4]
	int[] EquippedEmotes;//[Offset: 0x620, Size: 0x10]
	FString OS;//[Offset: 0x630, Size: 0x10]
	FString OsType;//[Offset: 0x640, Size: 0x10]
	FString DeviceModel;//[Offset: 0x650, Size: 0x10]
	enum InputType;//[Offset: 0x660, Size: 0x1]
	bool bIsSameTeamWithLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x661, Size: 0x1]
	bool HasReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x662, Size: 0x1]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1]
	float HangUpTime;//[Offset: 0x66c, Size: 0x4]
	float OfflineBattleTime;//[Offset: 0x670, Size: 0x4]
	int Elo;//[Offset: 0x674, Size: 0x4]
	int RankLevel;//[Offset: 0x678, Size: 0x4]
	int RankLevel2;//[Offset: 0x67c, Size: 0x4]
	int LegendRank;//[Offset: 0x680, Size: 0x4]
	byte VipType;//[Offset: 0x684, Size: 0x1]
	int WarmupTag;//[Offset: 0x688, Size: 0x4]
	float Frustration;//[Offset: 0x68c, Size: 0x4]
	bool bMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	byte LobbyTeamMemberNum;//[Offset: 0x691, Size: 0x1]
	bool bTeamIDHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1]
	int RepliableMessageID;//[Offset: 0x6ac, Size: 0x4]
	float RepliableMessageStartTime;//[Offset: 0x6b0, Size: 0x4]
	bool bIsOBPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1]
	int WarmId;//[Offset: 0x6c4, Size: 0x4]
	int WarmType;//[Offset: 0x6c8, Size: 0x4]
	bool AllowOtherJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 0x1]
	float WaitTimeBeforeEnterSpectateMode;//[Offset: 0x6d0, Size: 0x4]
	delegate OnSpectateInfoRep;//[Offset: 0x6d8, Size: 0x10]
	SolarPlayerState* KillerPlayerState;//[Offset: 0x6e8, Size: 0x8]
	SolarPlayerState* RevengePlayerState;//[Offset: 0x6f0, Size: 0x8]
	KillEnemySnapshot[] KilledEnemysRecord;//[Offset: 0x6f8, Size: 0x10]
	SolarSpectateInfo* SpectateInfo;//[Offset: 0x708, Size: 0x8]
	enum NetStateInGame;//[Offset: 0x710, Size: 0x1]
	bool bHasLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x711, Size: 0x1]
	bool bHasUpdateByServerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 0x1]
	SolarReplayHighlightComponent* ReplayHightlightComp;//[Offset: 0x728, Size: 0x8]
	int KillNum;//[Offset: 0x730, Size: 0x4]
	int AssistNum;//[Offset: 0x750, Size: 0x4]
	Vector DeathPos;//[Offset: 0x770, Size: 0xc]
	int ReconnectNum;//[Offset: 0x77c, Size: 0x4]
	float MultiKillDurationTime;//[Offset: 0x790, Size: 0x4]
	float TotalReceivedDamage;//[Offset: 0x7a8, Size: 0x4]
	float HealSelf;//[Offset: 0x7ac, Size: 0x4]
	float ReceivedHeal;//[Offset: 0x7b0, Size: 0x4]
	float LifeTime;//[Offset: 0x7b4, Size: 0x4]
	SettlementTempData SettleSyncData;//[Offset: 0x7b8, Size: 0xd8]
	int PlayerRank;//[Offset: 0x890, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 0x1]
	bool bMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x895, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x897, Size: 0x1]
	float MvpScore;//[Offset: 0x898, Size: 0x4]
	float KDA;//[Offset: 0x89c, Size: 0x4]
	int ResurrectionTimes;//[Offset: 0x8a0, Size: 0x4]
	int CharacterExp;//[Offset: 0x8a4, Size: 0x4]
	int[] CharacterExpReason;//[Offset: 0x8a8, Size: 0x10]
	int GainCombatScore;//[Offset: 0x8b8, Size: 0x4]
	int AccountExp;//[Offset: 0x8bc, Size: 0x4]
	<int,int> WeaponExps;//[Offset: 0x8c0, Size: 0x50]
	int Zomborg;//[Offset: 0x910, Size: 0x4]
	int ZomborgExtra;//[Offset: 0x914, Size: 0x4]
	enum[] SettlePunishTypes;//[Offset: 0x918, Size: 0x10]
	int[] StrategyConditionIDs;//[Offset: 0x928, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x938, Size: 0x4]
	enum PlayerOutPath;//[Offset: 0x93f, Size: 0x1]
	int[] UsedCharacterIDs;//[Offset: 0x940, Size: 0x10]
	bool bPresettling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 0x1]
	bool bHasSettled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951, Size: 0x1]
	bool bIsPlayerBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x952, Size: 0x1]
	int InteractValue;//[Offset: 0x954, Size: 0x4]
	float LastInteractTime;//[Offset: 0x958, Size: 0x4]
	float DamageFactor;//[Offset: 0x95c, Size: 0x4]
	float VehicleProbability;//[Offset: 0x960, Size: 0x4]
	bool bIsTimeoutPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x964, Size: 0x1]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x965, Size: 0x1]
	ExposeLocationMap ExposeLocationMap;//[Offset: 0x988, Size: 0x58]
	SolarPlayerState*[] ExposeLocationArray;//[Offset: 0x9e0, Size: 0x10]
	Vector PlayerLocation;//[Offset: 0x9f0, Size: 0xc]
	SolarPlayerState* ExposeTo;//[Offset: 0xa00, Size: 0x8]
	int SkydivingLeaderPosInTeam;//[Offset: 0xa10, Size: 0x4]
	byte SkydivingFollowFormationPos;//[Offset: 0xa14, Size: 0x1]
	enum SkydivingState;//[Offset: 0xa1c, Size: 0x1]
	SolarAchievementComponent* AchievementComponent;//[Offset: 0xa20, Size: 0x8]
	int[] PreCompletedAchievementIDs;//[Offset: 0xa30, Size: 0x10]
	int PlayerLevel;//[Offset: 0xa40, Size: 0x4]
	int PlayerExperience;//[Offset: 0xa44, Size: 0x4]
	int HistoryShieldUpgradeItemNum;//[Offset: 0xa48, Size: 0x4]
	SpatializeInfoTrack* TrackInfo;//[Offset: 0xa68, Size: 0x8]
	float TrackMaxRevealDistance;//[Offset: 0xa70, Size: 0x4]
	enum AppLifetimeState;//[Offset: 0xa74, Size: 0x1]
	int TailFlameId;//[Offset: 0xa78, Size: 0x4]
	SolarTeamInfo* Team;//[Offset: 0xa80, Size: 0x8]
	SolarBattleWeaponData[] BattleWeaponDataArray;//[Offset: 0xa98, Size: 0x10]
	HeroPickInfo* HeroPickInfo;//[Offset: 0xaa8, Size: 0x8]
	bool WillFollowMovementOfSkydivingLeader();// 0x1da123bfa041
	void UpgradePlayerLevel(int LevelAdded);// 0x1da023bfa041
	void UpdateCurUseCharacterData(int InCharacterId);// 0x1d9f23bfa041
	void UpdateCurUseCharacterAndSkinData(int InCharacterId, int InSkinID);// 0x1d9e23bfa041
	void UpdateAICharacterDataList(out const BattleCharacterData InCharacterData);// 0x1d9c23bfa041
	void SyncMarkedWorldData(const WorldMarkData InMarkData);// 0x1d9b23bfa041
	void SynchronizePlayerStateInGame(enum InEPlayerStateInGame, bool InIfOrNot);// 0x1d9a23bfa041
	void SynchronizeCharacterStateInGame(enum InECharacterStateInGame, bool InIfOrNot);// 0x1d9923bfa041
	void StatVehicleDriveTypeLuaCall(int DriveType);// 0x1d9823bfa041
	void StatVehicleDriveType(int DriveType);// 0x1d9723bfa041
	void ShowTeammatesHUD(out const SolarPlayerState*[] TeammateStates, SolarPlayerState* InSpectateTargetPlayerState);// 0x1d9623bfa041
	void SetRoleUltimateSkillCDState(const int NewState);// 0x1d9523bfa041
	void SetRoleID(const int InRoleID);// 0x1d9423bfa041
	void SetPlayerNetStateInGame(enum InPlayerNetStateInGame);// 0x1d9323bfa041
	void SetIsTimeoutPlayer(const bool InValue);// 0x1d9223bfa041
	void SetIsPlayerBattleEnd(bool bPlayerBattleEnd);// 0x1d9123bfa041
	void ServerUpdateInputType(enum NowInputType);// 0x1d9023bfa041
	void ServerUnexposeLocationToOtherOnce(SolarPlayerState* OtherPS);// 0x1d8f23bfa041
	void ServerUnexposeLocationToOther(SolarPlayerState* OtherPS);// 0x1d8e23bfa041
	void ServerPlayerSelectSkin(int InCharacterId, int InSkinID);// 0x1d8d23bfa041
	void ServerExposeLocationToOther(SolarPlayerState* OtherPS);// 0x1d8c23bfa041
	void ServerChangeRoleID(const int InRoleID);// 0x1d8b23bfa041
	void ReviseWeaponExp(int weaponid, int WeaponExp, int CurLevel, int CurExp);// 0x1d8a23bfa041
	void RequestServerUpdateInputType(enum NowInputType);// 0x1d8923bfa041
	void ReceiveTeamIdReplicated();// 0x1d8823bfa041
	void ReceiveTalentStateSet(enum InState);// 0x1d8623bfa041
	void ReceiveTalentIDReplication(enum RepType, PlayerState* ClientOwnerPS);// 0x1d8523bfa041
	void ReceiveSideReplicatedAfter();// 0x1d8423bfa041
	void ReceivePostInitializeComponents();// 0x1d8323bfa041
	bool ReceiveGold(const int InReceivedGold, const bool NeedSyncToServer, const bool NeedSyncToDS);// 0x1d8223bfa041
	void ReceiveClientInitialize(Controller* C);// 0x1d8123bfa041
	void PlayerSelectSkin(int InCharacterId, int InSkinID);// 0x1d8023bfa041
	void PlayerSelectHero(int InCharacterId, int InSkinID, bool bConfirm);// 0x1d7f23bfa041
	bool PlayerIsResurrecting();// 0x1d7e23bfa041
	bool PlayerHasLogin();// 0x1d7d23bfa041
	bool PlayerCanRebirthByReviveItem(bool bCheckItemNum, bool bIncludingReviving);// 0x1d7c23bfa041
	bool PlayerCanRebirthByBuyResurrection();// 0x1d7b23bfa041
	bool PlayerCanRebirthByAllMeans();// 0x1d7a23bfa041
	bool PlayerCanRebirthBlueprint();// 0x1d7923bfa041
	bool PlayerCanRebirth();// 0x1d7823bfa041
	bool PlayerCanBuyRescue();// 0x1d7723bfa041
	void OnUpdatedPlayerStateLoginData();// 0x1d7623bfa041
	void OnTeammatePlayerStateRepDelegate__DelegateSignature();// 0x1d7523bfa041
	void OnTeammatePlayerStateRemovedDelegate__DelegateSignature(out const byte InPosInTeam, bool InIsLastOne);// 0x1d7423bfa041
	void OnTeamInfoChanged__DelegateSignature(SolarTeamInfo* PreviousTeam, SolarTeamInfo* NowTeam);// 0x1d7323bfa041
	void OnStopReceiveExposedLocation(SolarPlayerState* OtherPS);// 0x1d7223bfa041
	void OnStartResurrectProgress(const int InTextId, const float InDuration, const float InRemaining, const bool bShowCancel);// 0x1d7123bfa041
	void OnSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x1d7023bfa041
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1d6f23bfa041
	void OnRequestStartResurrect(DeathTreasureBox* InDeatbox);// 0x1d6e23bfa041
	void OnRequestCancelResurrect(DeathTreasureBox* InDeatbox);// 0x1d6d23bfa041
	void OnReplayRecordingStarted();// 0x1d6c23bfa041
	void OnRep_UserId();// 0x1d6b23bfa041
	void OnRep_TotalReceivedDamage();// 0x1d6a23bfa041
	void OnRep_TeammatesState();// 0x1d6923bfa041
	void OnRep_TeamLastVehicleLocation();// 0x1d6823bfa041
	void OnRep_TeamChanged(SolarTeamInfo* PreviousTeam);// 0x1d6723bfa041
	void OnRep_TalentID();// 0x1d6623bfa041
	void OnRep_TailFlameId();// 0x1d6523bfa041
	void OnRep_SpectateInfo();// 0x1d6423bfa041
	void OnRep_SkydivingState();// 0x1d6323bfa041
	void OnRep_SkydivingLeaderPosInTeam(int OldValue);// 0x1d6223bfa041
	void OnRep_SkinId();// 0x1d6123bfa041
	void OnRep_Side(FString OldSide);// 0x1d6023bfa041
	void OnRep_SelfLastVehicleLocation();// 0x1d5f23bfa041
	void OnRep_RTCType();// 0x1d5e23bfa041
	void OnRep_RoleID();// 0x1d5d23bfa041
	void OnRep_ReviveItemNum();// 0x1d5c23bfa041
	void OnRep_ReviveCountByItem();// 0x1d5b23bfa041
	void OnRep_RepliableMsg();// 0x1d5a23bfa041
	void OnRep_PosInTeam(out const byte InLastPosInTeam);// 0x1d5923bfa041
	void OnRep_PlayerLocation();// 0x1d5823bfa041
	void OnRep_PlayerLevel();// 0x1d5723bfa041
	void OnRep_PlayerExp();// 0x1d5623bfa041
	void OnRep_NickName(FString OldNickName);// 0x1d5523bfa041
	void OnRep_NetStateInGame();// 0x1d5423bfa041
	void OnRep_MaxHealth();// 0x1d5323bfa041
	void OnRep_MarkedPointInNavMap();// 0x1d5223bfa041
	void OnRep_KillNum();// 0x1d5123bfa041
	void OnRep_Job();// 0x1d5023bfa041
	void OnRep_IsOBPlayer();// 0x1d4f23bfa041
	void OnRep_InputType();// 0x1d4e23bfa041
	void OnRep_HeroPickInfo();// 0x1d4d23bfa041
	void OnRep_HasSettled();// 0x1d4c23bfa041
	void OnRep_Gold();// 0x1d4b23bfa041
	void OnRep_ExposeLocationArray();// 0x1d4a23bfa041
	void OnRep_CurShieldInfo(out const ShieldInfo InLastShieldInfo);// 0x1d4823bfa041
	void OnRep_CurrentPlayerStateInGame(out const byte InLastPlayerStateInGame);// 0x1d4723bfa041
	void OnRep_CurrentHealth();// 0x1d4623bfa041
	void OnRep_CurrentCharacterStateInGame(out const byte InLastCharacterStateInGame);// 0x1d4523bfa041
	void OnRep_ClanId();// 0x1d4423bfa041
	void OnRep_ClanFlag();// 0x1d4323bfa041
	void OnRep_CharacterId();// 0x1d4223bfa041
	void OnRep_BattleVoiceId();// 0x1d4123bfa041
	void OnRep_BagId();// 0x1d4023bfa041
	void OnRep_AssistNum();// 0x1d3f23bfa041
	void OnRep_AccountFlag();// 0x1d3e23bfa041
	void OnRefreshReviveInfo();// 0x1d3d23bfa041
	void OnReceiveExposedLocation(SolarPlayerState* OtherPS, out const Vector Location);// 0x1d3c23bfa041
	FString OnPlayerUpgrade(int NewLevel, bool bFromServer);// 0x1d3b23bfa041
	void OnPlayerUpdateStatData(enum InType);// 0x1d3a23bfa041
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x1d3923bfa041
	void OnPlayerChangedGolds(enum ChangedGoldType, int CostGoldNum, enum CostResult);// 0x1d3823bfa041
	void OnOtherPlayerStopSpectateMyTeam(SolarSpectateInfo* InSpectateInfo);// 0x1d3723bfa041
	void OnOtherPlayerStopSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x1d3623bfa041
	void OnOtherPlayerBeginSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x1d3523bfa041
	void OnOBPlayerRepDelegate__DelegateSignature(bool bIsOBPlayer);// 0x1d3423bfa041
	void OnInputTypeChanged(enum NowInputType);// 0x1d3323bfa041
	void OnDamageChanged__DelegateSignature(float Damage);// 0x1d3223bfa041
	void OnClientSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x1d3123bfa041
	void OnCancelResurrectProgress(const int InTextId);// 0x1d3023bfa041
	void NotifyUpdateTeamMateLevelUI();// 0x1d2f23bfa041
	void NotifyAddExperience(int ExpAdded);// 0x1d2e23bfa041
	void NewMarkedWorldDataInClient(const int InPosInTeam, const WorldMarkData InMarkData);// 0x1d2d23bfa041
	bool NeedPerformSpectateInfoOnSimulate();// 0x1d2c23bfa041
	int LuaGetExpFromWeaponImplementation(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x1d2b23bfa041
	void LeaveTeam();// 0x1d2a23bfa041
	void JoinTeamByPolicies(enum[] JoinPolicies);// 0x1d2823bfa041
	void JoinTeamByName(FString InTeamName);// 0x1d2723bfa041
	void JoinTeamByID(const byte InTeamId);// 0x1d2623bfa041
	void JoinTeam(SolarTeamInfo* InTeam);// 0x1d2523bfa041
	bool IsWaitingLogin();// 0x1d2423bfa041
	bool IsUsingClanForFlag();// 0x1d2323bfa041
	bool IsUnfollowShortcutEnabled();// 0x1d2223bfa041
	bool IsTimeOutPlayer();// 0x1d2123bfa041
	bool IsTeammateWithLocalOrSpecTargetPlayer();// 0x1d2023bfa041
	bool IsTeammateWith(const SolarPlayerState* Other);// 0x1d1f23bfa041
	bool IsSpectatingOtherPlayer();// 0x1d1e23bfa041
	bool IsSkydivingLeader();// 0x1d1d23bfa041
	bool IsSkydivingCompleted();// 0x1d1c23bfa041
	bool IsSkydiving();// 0x1d1b23bfa041
	bool IsSameTeamWithLocalPlayer();// 0x1d1a23bfa041
	bool IsReconnecting();// 0x1d1923bfa041
	bool IsPreStartSkydiving();// 0x1d1823bfa041
	bool IsPlayerWaitingForTeammatesHelp();// 0x1d1723bfa041
	bool IsPlayerTeam();// 0x1d1623bfa041
	bool IsPlayerOnline();// 0x1d1523bfa041
	bool IsPlayerOffline();// 0x1d1423bfa041
	bool IsPlayer();// 0x1d1323bfa041
	bool IsOutBySelf();// 0x1d1223bfa041
	bool IsOfflinePlayer();// 0x1d1123bfa041
	bool IsOBPlayer();// 0x1d1023bfa041
	bool IsMySkydivingLeader(int LeaderPosInTeam);// 0x1d0f23bfa041
	bool IsMVP();// 0x1d0e23bfa041
	bool IsMaxLevelInGame();// 0x1d0d23bfa041
	bool IsLocalPlayerCameraFocusingMe();// 0x1d0c23bfa041
	bool IsKickOutByServer();// 0x1d0b23bfa041
	bool IsBuyingResurrection();// 0x1d0a23bfa041
	bool IsBeingSpectated();// 0x1d0923bfa041
	bool IsAIPlayer();// 0x1d0823bfa041
	bool IsACheater();// 0x1d0723bfa041
	void InitInputType();// 0x1d0623bfa041
	void IncreaseReviveCount();// 0x1d0523bfa041
	void HideTeammatesHUD(out const SolarPlayerState*[] TeammateStates);// 0x1d0423bfa041
	bool HasSkydivingLeader();// 0x1d0323bfa041
	bool HasSettled();// 0x1d0223bfa041
	bool HasCheatSelf();// 0x1d0123bfa041
	int GetWeaponSettlmentExp(int weaponid);// 0x1d0023bfa041
	int GetVehicleSkinID(int VehicleID);// 0x1cff23bfa041
	FString GetUserID();// 0x1cfe23bfa041
	int[] GetUsableTailFlameIds();// 0x1cfd23bfa041
	void GetUsableSkinsForCharacter(const int InCharacterId, out int[] Result, out bool bCharacterUsable);// 0x1cfc23bfa041
	int[] GetUsableJetpackIds();// 0x1cfb23bfa041
	float GetTotalReceivedDamage();// 0x1cfa23bfa041
	float GetTotalCausedDamage();// 0x1cf923bfa041
	byte GetTeamRank();// 0x1cf823bfa041
	void GetTeammatePlayers(bool bIncludingSelf, out SolarPlayerState*[] OutTeammates);// 0x1cf723bfa041
	SolarPlayerState* GetTeammatePlayerByPosInTeam(int InPosInTeam);// 0x1cf623bfa041
	int GetTeammateNum(bool bIncludeSelf);// 0x1cf523bfa041
	byte GetTeamID();// 0x1cf423bfa041
	SolarGameModeStatisticsComponent* GetStatComponent();// 0x1cf323bfa041
	SolarSpectateInfo* GetSpectateTargetSpectateInfo();// 0x1cf223bfa041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x1cf123bfa041
	SolarCharacter* GetSpectateTargetCharacter();// 0x1cf023bfa041
	SolarSpectateInfo* GetSpectateInfo();// 0x1cef23bfa041
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x1cee23bfa041
	SolarPlayerController* GetSolarPlayerController();// 0x1ced23bfa041
	SolarCharacter* GetSolarCharacter();// 0x1cec23bfa041
	SolarBotAIController* GetSolarBotAIController();// 0x1ceb23bfa041
	int GetRankScore();// 0x1cea23bfa041
	int GetRankLevelID();// 0x1ce923bfa041
	SolarCharacter* GetPossessedCharacter();// 0x1ce823bfa041
	PlayerStatisticsData* GetPlayerStatData();// 0x1ce723bfa041
	enum GetPlayerNetState();// 0x1ce523bfa041
	FString GetPlayerNameWithoutUID();// 0x1ce423bfa041
	MedalInfo[] GetMedalInfo();// 0x1ce223bfa041
	int GetMaxShieldMatCountToDeathbox();// 0x1ce123bfa041
	SolarPlayerState* GetLocalPlayerState();// 0x1ce023bfa041
	SolarPlayerState* GetLocalOrSpecTargetPlayerState();// 0x1cdf23bfa041
	SolarCharacter* GetLocalOrSpecTargetCharacter();// 0x1cde23bfa041
	SolarCharacter* GetLocalCharacter();// 0x1cdd23bfa041
	int GetLegendRank();// 0x1cdc23bfa041
	SolarPlayerState* GetKillerPlayerState();// 0x1cdb23bfa041
	bool GetIsPlayerBattleEnd();// 0x1cda23bfa041
	float GetExpSettleModePunishRatio();// 0x1cd923bfa041
	int GetExpItemCount(const int InLevelGap);// 0x1cd823bfa041
	int GetExpByBehavior(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x1cd723bfa041
	int GetDriveVehicleID();// 0x1cd623bfa041
	Vector GetDeathBoxLocation();// 0x1cd523bfa041
	float GetCurrentTalentCDDuration();// 0x1cd423bfa041
	float GetCurrentTalentActiveDuration();// 0x1cd323bfa041
	void GetCurrentSkinForCharacter(const int InCharacterId, out bool bCharacterUsable, out int OutSkinId);// 0x1cd223bfa041
	Vector GetCharacterLocation();// 0x1cd123bfa041
	FString[] GetBuyResurrectionSavedTeammateIDArr();// 0x1cd023bfa041
	int[] GetBuyResurrectionSavedTeammateBonusArr();// 0x1ccf23bfa041
	bool CostGold(const int InCostedGold, const bool NeedSyncToServer);// 0x1cce23bfa041
	void ClientNotifyKillNumChanged(const int KillNumber, const int SpreesNum);// 0x1ccd23bfa041
	void ClientImmediatelyTeammatesSkinID(const SolarPlayerState*[] InTeammates, const int[] InSkinID);// 0x1ccc23bfa041
	void ClearTeammatesMark();// 0x1ccb23bfa041
	bool CheckIfTeamLastVehicleLocationValid();// 0x1cca23bfa041
	bool CheckIfTeamIdValid();// 0x1cc923bfa041
	bool CheckIfSelfLastVehicleLocationValid();// 0x1cc823bfa041
	bool CheckIfPosInTeamValid();// 0x1cc723bfa041
	bool CheckIfMarkedPointInNavMapValid();// 0x1cc623bfa041
	bool CheckIfInactive();// 0x1cc523bfa041
	bool CheckIfDataValid();// 0x1cc423bfa041
	bool CheckIfBeInSpecifiedPlayerState(enum InEPlayerStateInGame);// 0x1cc223bfa041
	bool CheckIfBeInSpecifiedCharacterState(enum InECharacterStateInGame);// 0x1cc023bfa041
	bool CheckIfBattleVoiceIdValid();// 0x1cbf23bfa041
	bool CheckGoldIsEnough(const int InCostedGold);// 0x1cbe23bfa041
	void ChangeTailFlameId(int InTailFlameId);// 0x1cbd23bfa041
	void ChangeBagById(int InBagId);// 0x1cbc23bfa041
	bool CanReviveItemPutInDeathBox();// 0x1cbb23bfa041
	bool CanAcceptSkydivingLeaderTransferRequest(const SolarPlayerState* RequesterPlayerState);// 0x1cba23bfa041
	bool CanAcceptSkydivingFollowRequest(const SolarPlayerState* RequesterPlayerState);// 0x1cb923bfa041
	bool CanAcceptSkydivingFollowInvitation(const SolarPlayerState* InviterPlayerState);// 0x1cb823bfa041
	int CalculateZomborg();// 0x1cb723bfa041
	float CalculateCharacterExp();// 0x1cb623bfa041
	float CalculateAccountExp();// 0x1cb523bfa041
	void AssignPosInTeam();// 0x1cb423bfa041
	void AddMarkedWorldData(const int InPosInTeam, out const WorldMarkData InMarkData);// 0x1cb023bfa041
	void AddExperience(int InExp, enum InType);// 0x1cae23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MedalInfo
	int MedalID;//[Offset: 0x0, Size: 0x4]
	int MedalType;//[Offset: 0x4, Size: 0x4]
	int MedalPos;//[Offset: 0x8, Size: 0x4]
	int MedalLv;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BattleCharacterData
	int CharacterId;//[Offset: 0x0, Size: 0x4]
	int SkinId;//[Offset: 0x4, Size: 0x4]
	int CharacterLevel;//[Offset: 0x8, Size: 0x4]
	int TalentID;//[Offset: 0xc, Size: 0x4]
	int UseTimes;//[Offset: 0x10, Size: 0x4]
	int CardPose;//[Offset: 0x14, Size: 0x4]
	int Cardbackground;//[Offset: 0x18, Size: 0x4]
	int CharacterExp;//[Offset: 0x1c, Size: 0x4]
	int Title;//[Offset: 0x20, Size: 0x4]
	int64 Expired;//[Offset: 0x28, Size: 0x8]
	int CombatCore;//[Offset: 0x30, Size: 0x4]
	int BagId;//[Offset: 0x34, Size: 0x4]
	int TailFlameId;//[Offset: 0x38, Size: 0x4]
	int CapsuleActorId;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WorldMarkData
	Vector WorldPos;//[Offset: 0x0, Size: 0xc]
	Vector2D ScreenCoordinate;//[Offset: 0xc, Size: 0x8]
	enum Type;//[Offset: 0x14, Size: 0x1]
	int ItemID;//[Offset: 0x18, Size: 0x4]
	int64 ItemInstanceId;//[Offset: 0x20, Size: 0x8]
	int NameLocID;//[Offset: 0x28, Size: 0x4]
	FString IconImg;//[Offset: 0x30, Size: 0x10]
	int WeaponLevel;//[Offset: 0x40, Size: 0x4]
	enum InteractableType;//[Offset: 0x44, Size: 0x1]
	int OuterBoxThisID;//[Offset: 0x48, Size: 0x4]
	float MarkTimeStamp;//[Offset: 0x4c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ExpRankMedalData
	FString Area;//[Offset: 0x0, Size: 0x10]
	FString Country;//[Offset: 0x10, Size: 0x10]
	int Rank;//[Offset: 0x20, Size: 0x4]
	int CharacterId;//[Offset: 0x24, Size: 0x4]
	int CharacterType;//[Offset: 0x28, Size: 0x4]
	int RankScore;//[Offset: 0x2c, Size: 0x4]
	int RankType;//[Offset: 0x30, Size: 0x4]
	int AutoID;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LastBattleInfo
	float MvpScore;//[Offset: 0x0, Size: 0x4]
	int KillNum;//[Offset: 0x4, Size: 0x4]
	int HitDown;//[Offset: 0x8, Size: 0x4]
	int AssistNum;//[Offset: 0xc, Size: 0x4]
	int RescueNum;//[Offset: 0x10, Size: 0x4]
	int AliveTime;//[Offset: 0x14, Size: 0x4]
	int CauseDamage;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementParam_ExtraRewardInfo
	int TextID;//[Offset: 0x0, Size: 0x4]
	FString LocVariable;//[Offset: 0x8, Size: 0x10]
	FString Content;//[Offset: 0x18, Size: 0x10]
	FString ItemList;//[Offset: 0x28, Size: 0x10]
	int Order;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementReward
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Amount;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementCrateReward
	int64 crateID;//[Offset: 0x0, Size: 0x8]
	SettlementReward[] Items;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ShieldInfo
	int ShieldID;//[Offset: 0x0, Size: 0x4]
	float CurValue;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: KillEnemySnapshot
<----------Generated by SSpawner v1.0.2---------->


Class: SolarSpectateInfo.Actor.Object
	delegate OnBeginUpdateSpectateInfo;//[Offset: 0x228, Size: 0x10]
	delegate OnStopUpdateSpectateInfo;//[Offset: 0x238, Size: 0x10]
	delegate OnOtherPlayerBeginSpectateMe;//[Offset: 0x248, Size: 0x10]
	delegate OnOtherPlayerStopSpectateMe;//[Offset: 0x258, Size: 0x10]
	delegate OnBeforeSpectateTargetChange;//[Offset: 0x268, Size: 0x10]
	delegate OnSpectateTargetChanged;//[Offset: 0x278, Size: 0x10]
	delegate OnSpectatePhaseChanged;//[Offset: 0x288, Size: 0x10]
	delegate OnSwitchSpectateTargetFailed;//[Offset: 0x298, Size: 0x10]
	delegate OnSpectatorOfMyTargetChanged;//[Offset: 0x2a8, Size: 0x10]
	delegate OnSpectateCharacterOfMyTargetReadied;//[Offset: 0x2b8, Size: 0x10]
	enum SpectatePhase;//[Offset: 0x2c8, Size: 0x1]
	SolarPlayerState* SpectateTargetPlayerState;//[Offset: 0x2d0, Size: 0x8]
	SolarPlayerState*[] PlayersSpectatingMyTarget;//[Offset: 0x2e8, Size: 0x10]
	SolarPlayerState*[] PlayersSpectatingMe;//[Offset: 0x2f8, Size: 0x10]
	bool bIsServerRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	SolarReplayManager* ReplayManager;//[Offset: 0x320, Size: 0x8]
	SpectateConditions SpectateConditions;//[Offset: 0x328, Size: 0x20]
	GiftSenderInfo[] SendGiftPlayerInfo;//[Offset: 0x3c8, Size: 0x10]
	InteractiveTaskStatus TaskStatus;//[Offset: 0x3d8, Size: 0x78]
	DataTable* InteractiveTaskTable;//[Offset: 0x450, Size: 0x8]
	FString TaskTablePath;//[Offset: 0x458, Size: 0x10]
	SolarPlayerState* LatestAttacker;//[Offset: 0x468, Size: 0x8]
	SolarPlayerState* LatestVictim;//[Offset: 0x470, Size: 0x8]
	float TotalCausedDamage;//[Offset: 0x488, Size: 0x4]
	Rotator PlayerCameraRotation;//[Offset: 0x48c, Size: 0xc]
	ReplicateItemData[] CharacterBackpackItems;//[Offset: 0x498, Size: 0x10]
	ReplicateMaxPileData[] CharacterBackpackItemMaxPiles;//[Offset: 0x4a8, Size: 0x10]
	float CharacterVJetChargeTime;//[Offset: 0x4b8, Size: 0x4]
	int CharacterVJetTotalTimes;//[Offset: 0x4bc, Size: 0x4]
	int CharacterVJetRestTimes;//[Offset: 0x4c0, Size: 0x4]
	int CharacterVJetModuleLevel;//[Offset: 0x4c4, Size: 0x4]
	float CharacterVJetStartChargeTime;//[Offset: 0x4c8, Size: 0x4]
	float CharacterHJetChargeTime;//[Offset: 0x4cc, Size: 0x4]
	int CharacterHJetTotalTimes;//[Offset: 0x4d0, Size: 0x4]
	int CharacterHJetRestTimes;//[Offset: 0x4d4, Size: 0x4]
	int CharacterHJetModuleLevel;//[Offset: 0x4d8, Size: 0x4]
	float CharacterHJetStartChargeTime;//[Offset: 0x4dc, Size: 0x4]
	CharacterRoleAbilityInfo[] CharacterRoleAbilitiesInfo;//[Offset: 0x4e0, Size: 0x10]
	RepCountdownData SpectateCountdownData;//[Offset: 0x4f0, Size: 0x2c]
	BattleUpgradeEffectParamData[] BattleUpgradeEffectData;//[Offset: 0x520, Size: 0x10]
	int ExtraARMag;//[Offset: 0x530, Size: 0x4]
	int ExtraSGMag;//[Offset: 0x534, Size: 0x4]
	bool bExposedByRadar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	VehicleSpectateInfo VehicleSpectateInfo;//[Offset: 0x540, Size: 0x30]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 0x1]
	void SetSpectateTargetForPlayingReplay(SolarPlayerState* TargetPlayerState);// 0x1c9423bfa041
	void ServerStopSpectateOtherPlayer_Internal();// 0x1c9323bfa041
	void ServerStopSpectateOtherPlayer();// 0x1c9223bfa041
	void ServerSpectatePreviousPlayer();// 0x1c9123bfa041
	void ServerSpectateNextPlayer();// 0x1c9023bfa041
	void ServerSetSpectateConditions_Internal(const SpectateConditions InSpectateConditions);// 0x1c8f23bfa041
	void ServerSetSpectateConditions(out const SpectateConditions InSpectateConditions);// 0x1c8e23bfa041
	void ServerSendGiftAction(const int GiftID, const int Num);// 0x1c8d23bfa041
	void ServerRequestSendTask(int InTaskID);// 0x1c8c23bfa041
	void ServerRequestIncreaseTargetTaskLevel();// 0x1c8b23bfa041
	void ServerRequestAvailableTask();// 0x1c8a23bfa041
	void ServerChangeLikeValue(const int Value, const int AddInteractValue, enum ActionType);// 0x1c8923bfa041
	void ServerBeginSpectateOtherPlayer_Internal();// 0x1c8823bfa041
	void ServerBeginSpectateOtherPlayer();// 0x1c8723bfa041
	bool SendTask(int InTaskID);// 0x1c8623bfa041
	void SendGift(const int GiftID, const int Num);// 0x1c8523bfa041
	void RequestSendTask(int InTaskID);// 0x1c8423bfa041
	void RequestIncreaseTargetTaskLevel();// 0x1c8323bfa041
	void RequestAvailableTask();// 0x1c8223bfa041
	void OnTargetSpecInfoSetToItsPlayerState(SolarSpectateInfo* TargetSpecInfo);// 0x1c8123bfa041
	void OnSwitchSpectateTargetFailed__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1c8023bfa041
	void OnStopUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1c7f23bfa041
	void OnStopRecordingReplay();// 0x1c7e23bfa041
	void OnStartRecordingReplay();// 0x1c7d23bfa041
	void OnSpectatorOfMyTargetChanged__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1c7c23bfa041
	void OnSpectateTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x1c7b23bfa041
	void OnSpectatePhaseChanged__DelegateSignature(enum CurrentPhase);// 0x1c7923bfa041
	void OnSpectateCharacterOfMyTargetReadied__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1c7823bfa041
	void OnRep_VehicleSpectateInfo(out const VehicleSpectateInfo PreviousVehicleSpectateInfo);// 0x1c7523bfa041
	void OnRep_TotalCausedDamage();// 0x1c7423bfa041
	void OnRep_TaskStatus();// 0x1c7323bfa041
	void OnRep_SpectateTargetPlayerState(SolarPlayerState* LastTarget);// 0x1c7223bfa041
	void OnRep_SpectatePhase();// 0x1c7123bfa041
	void OnRep_SpectateCountdownData();// 0x1c7023bfa041
	void OnRep_PlayersSpectatingMyTarget();// 0x1c6f23bfa041
	void OnRep_PlayersSpectatingMe();// 0x1c6e23bfa041
	void OnRep_ExposedByRadar();// 0x1c6d23bfa041
	void OnRep_CharacterVJetTotalTimes();// 0x1c6c23bfa041
	void OnRep_CharacterVJetRestTimes();// 0x1c6b23bfa041
	void OnRep_CharacterVJetModuleLevel();// 0x1c6a23bfa041
	void OnRep_CharacterRoleAbilitiesInfo();// 0x1c6923bfa041
	void OnRep_CharacterHJetTotalTimes();// 0x1c6823bfa041
	void OnRep_CharacterHJetRestTimes();// 0x1c6723bfa041
	void OnRep_CharacterHJetModuleLevel();// 0x1c6623bfa041
	void OnRep_CharacterBackpackItems();// 0x1c6523bfa041
	void OnRep_bIsServerRecording();// 0x1c6423bfa041
	void OnRep_BattleUpgradeEffectData();// 0x1c6323bfa041
	void OnOtherPlayerStopSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x1c6223bfa041
	void OnOtherPlayerBeginSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x1c6123bfa041
	void OnOpenAirBoxNum(enum InStatType);// 0x1c6023bfa041
	void OnLikeActionCalled(const int Value, const int AddInteractValue, enum ActionType);// 0x1c5f23bfa041
	void OnIncreaseKillNumWithWeaponType(enum InStatType, int InWeaponID);// 0x1c5e23bfa041
	void OnIncreaseKillNumWithPunch(enum InStatType);// 0x1c5d23bfa041
	void OnIncreaseKillNumWithAnyVehicle(enum InStatType);// 0x1c5c23bfa041
	void OnGiftActionCalled(const int GiftID, const int Num);// 0x1c5b23bfa041
	void OnDamageChanged__DelegateSignature(float Damage);// 0x1c5a23bfa041
	void OnCurrentPlayerCountChanged();// 0x1c5923bfa041
	void OnBeginUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1c5823bfa041
	void OnBeforeSpectateTargetChange__DelegateSignature(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x1c5723bfa041
	void OnAvailableAirDropsNumChanged();// 0x1c5623bfa041
	bool NeedUpdateSpectateInfo();// 0x1c5523bfa041
	bool IsSpectatingOtherPlayer();// 0x1c5423bfa041
	bool IsRecordingReplay();// 0x1c5323bfa041
	bool IsClientRecording();// 0x1c5223bfa041
	bool IncreaseTaskLevel(SolarPlayerState* SendPlayer);// 0x1c5123bfa041
	SolarPlayerState*[] GetSpectatorsOfMyTarget();// 0x1c5023bfa041
	SolarPlayerState*[] GetSpectatingMePlayerStates();// 0x1c4f23bfa041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x1c4e23bfa041
	SolarCharacter* GetSpectateTargetCharacter();// 0x1c4d23bfa041
	void GetSpectateReportInfo(out SpectateReportInfo SpectateReportInfo, bool HasNextTarget);// 0x1c4b23bfa041
	SolarSpectateInfo* GetSpectateInfoOfMyTarget();// 0x1c4a23bfa041
	SpectateConditions GetSpectateConditions();// 0x1c4723bfa041
	SolarPlayerState* GetSolarPlayerState();// 0x1c4623bfa041
	bool GetInteractiveTaskConfigByID(int InTaskID, out InteractiveTaskConfig OutConfig);// 0x1c4523bfa041
	int[] GetAvailableTaskByRandom();// 0x1c4423bfa041
	void GetAllInteractiveTaskConfigFromTable(out InteractiveTaskConfig[] OutAllConfig);// 0x1c3f23bfa041
	SolarPlayerState*[] GetAllAlivePlayers();// 0x1c3e23bfa041
	bool CostCurrencyByTaskAction(int InTaskID, int CurTasklevel);// 0x1c3d23bfa041
	void ClientNotifyTaskActionResult(enum ActionType, int InTaskID, int CurTasklevel, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, int NowLikeValue);// 0x1c3c23bfa041
	void ClientNotifySelfTaskActionResult(enum ActionType, int InTaskID, int CurTasklevel, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, int NowLikeValue);// 0x1c3b23bfa041
	void ClientNotifySelfLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x1c3a23bfa041
	void ClientNotifyLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x1c3823bfa041
	void ClientNotifyAvailableTaskResult(const int[] AvailableTask);// 0x1c3723bfa041
	bool CheckIsCanSpectateOthers();// 0x1c3623bfa041
	bool CanISpectate(const SolarPlayerState* Target);// 0x1c3523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SpectateConditions
	bool bCanBeSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bCanBeSpectateByHostilePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanBeSpectateByFriendlyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bCanISpectateBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bCanISpectateHostilePlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float LookAtSelfDeathBoxCountDown;//[Offset: 0x8, Size: 0x4]
	enum[] FindSpectateTargetPolicy;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarReplayManager.Object
	SoftObjectPath WaitingOBMap;//[Offset: 0x40, Size: 0x18]
	SoftClassPath WaitingReplayStartUIClass;//[Offset: 0x58, Size: 0x18]
	SoftClassPath OBModeSpectatorPawnClass;//[Offset: 0x70, Size: 0x18]
	SoftClassPath OBModeHUDClass;//[Offset: 0x88, Size: 0x18]
	SoftClassPath OBHeadInfoWidgetClass;//[Offset: 0xa0, Size: 0x18]
	GameplayCueTag PerspectiveCueTag;//[Offset: 0xb8, Size: 0x8]
	GameplayCueTag PerspectiveInSmokeCueTag;//[Offset: 0xc0, Size: 0x8]
	SoftObjectPath PerspectiveMaterial;//[Offset: 0xc8, Size: 0x18]
	AddMultiplePassMaterialChangeParams PerspectiveMaterialParams;//[Offset: 0xe0, Size: 0x40]
	SoftClassPath DirectorModeSpectatorPawnClass;//[Offset: 0x120, Size: 0x18]
	FName DirectorModeInputModeName;//[Offset: 0x138, Size: 0x8]
	float UpdateDistanceInterval;//[Offset: 0x140, Size: 0x4]
	float OBTeamListNearbyDistance;//[Offset: 0x144, Size: 0x4]
	float OBHeadInfoNearDistance;//[Offset: 0x148, Size: 0x4]
	float OBHeadInfoFarDistance;//[Offset: 0x14c, Size: 0x4]
	float OBDamageTextHideDistance;//[Offset: 0x150, Size: 0x4]
	float OBDelayTimeForTournament;//[Offset: 0x154, Size: 0x4]
	float OBLivePreDownloadTime;//[Offset: 0x158, Size: 0x4]
	float OBSkipBeginningTime;//[Offset: 0x15c, Size: 0x4]
	float[] OBPlaybackSpeedList;//[Offset: 0x160, Size: 0x10]
	byte OBPlaybackSpeedDefaultIndex;//[Offset: 0x170, Size: 0x1]
	byte OBLiveDelayChunkCount;//[Offset: 0x171, Size: 0x1]
	FName OBLockCameraBindBoneName;//[Offset: 0x174, Size: 0x8]
	Vector OBLockCameraBindBoneOffset;//[Offset: 0x17c, Size: 0xc]
	float OBInitLockDistance;//[Offset: 0x188, Size: 0x4]
	float OBMinLockDistance;//[Offset: 0x18c, Size: 0x4]
	float OBMaxLockDistance;//[Offset: 0x190, Size: 0x4]
	float OBMinLockPitch;//[Offset: 0x194, Size: 0x4]
	float OBMaxLockPitch;//[Offset: 0x198, Size: 0x4]
	float OBPitchAdjustTriggerFloor;//[Offset: 0x19c, Size: 0x4]
	float OBPitchAdjustValue;//[Offset: 0x1a0, Size: 0x4]
	int ReplayCacheFileRetentionTimeInSeconds;//[Offset: 0x1a4, Size: 0x4]
	int HighlightFileRetentionTimeInSeconds;//[Offset: 0x1a8, Size: 0x4]
	int HighlightFileMaxCount;//[Offset: 0x1ac, Size: 0x4]
	int HighlightMinimalDiskSpaceInMB;//[Offset: 0x1b0, Size: 0x4]
	int[] EnableHighlightModeGroups;//[Offset: 0x1b8, Size: 0x10]
	delegate OnPlayingStartedDelegate;//[Offset: 0x1d0, Size: 0x10]
	delegate OnPlayingLoadLevelsStartedDelegate;//[Offset: 0x1e0, Size: 0x10]
	delegate OnPlayingLevelLoadedDelegate;//[Offset: 0x1f0, Size: 0x10]
	delegate OnPlayingStreamReadiedDelegate;//[Offset: 0x200, Size: 0x10]
	delegate OnPlayingAtEndDelegate;//[Offset: 0x210, Size: 0x10]
	delegate OnPlayingFinishedDelegate;//[Offset: 0x220, Size: 0x10]
	delegate OnRecordingStartedDelegate;//[Offset: 0x230, Size: 0x10]
	delegate OnRecordingStartFailedDelegate;//[Offset: 0x240, Size: 0x10]
	delegate OnRecordingFinishedDelegate;//[Offset: 0x250, Size: 0x10]
	delegate OnPlayingScrubStartDelegate;//[Offset: 0x260, Size: 0x10]
	delegate OnPlayingPreScrubDelegate;//[Offset: 0x270, Size: 0x10]
	delegate OnPlayingFirstScrubFinishedDelegate;//[Offset: 0x280, Size: 0x10]
	delegate OnPlayingScrubFailedDelegate;//[Offset: 0x290, Size: 0x10]
	delegate OnPlayingScrubCharactersCreatedDelegate;//[Offset: 0x2a0, Size: 0x10]
	delegate OnPlayingPauseDelegate;//[Offset: 0x2b0, Size: 0x10]
	delegate OnPlayingContinueDelegate;//[Offset: 0x2c0, Size: 0x10]
	delegate OnPlaybackSpeedChangedDelegate;//[Offset: 0x2d0, Size: 0x10]
	delegate OnCheatersPlayerIDChanged;//[Offset: 0x2e0, Size: 0x10]
	delegate OnAutoPlaybackSpeedUpStart;//[Offset: 0x2f0, Size: 0x10]
	delegate OnAutoPlaybackSpeedUpStop;//[Offset: 0x300, Size: 0x10]
	delegate OnHighlightListChanged;//[Offset: 0x350, Size: 0x10]
	UserWidget* WaitingReplayStartUI;//[Offset: 0x3d8, Size: 0x8]
	void WriteHeaderData(out FString[] OutHeaderData);// 0x1ab523bfa041
	void StopRecording();// 0x1ab423bfa041
	void StopPlayReplay();// 0x1ab323bfa041
	void StartRecording(FString SessionName, FString UploadUrl, enum ForceRecordingType);// 0x1ab223bfa041
	void StartRecordHighlightOfCurrentBattle(FString SessionNameOverride);// 0x1ab123bfa041
	void SpeedUpTimeDilation();// 0x1ab023bfa041
	void SlowDownTimeDilation();// 0x1aaf23bfa041
	bool ShouldShowProgressBar();// 0x1aae23bfa041
	void SetTimeDilation(float Dilation);// 0x1aad23bfa041
	void SetStartSpectateTournamentTime();// 0x1aac23bfa041
	void SetRequestTryStrategy(float Interval, int Times);// 0x1aab23bfa041
	void SetRecordingType(enum InRecordingType);// 0x1aaa23bfa041
	void SetReadyToRecord(bool bIsReady, out const FString[] OBPlayerIDs);// 0x1aa923bfa041
	void SetLiveWatchingPlayerForPlaying(FString BeWatchingPlayerID);// 0x1aa823bfa041
	void SetEnableCompressForHttpReplay(bool bEnable);// 0x1aa723bfa041
	void RetryPlayReplayFromServer();// 0x1aa623bfa041
	void RequestWatchingLiveOfPlayer(FString SolarPlayerID);// 0x1aa523bfa041
	void RequestPlayReplayOfCurrentBattle();// 0x1aa423bfa041
	void RequestPlayReplay(FString InBattleID, bool IsLive);// 0x1aa323bfa041
	void RequestBattleList(int PageIndex, int PageSize);// 0x1aa223bfa041
	void ReplayManagerNoParamDelegate__DelegateSignature();// 0x1aa123bfa041
	void RecordReplayInfosOnRecordingStarted();// 0x1aa023bfa041
	void ReceivePlayingStartFailed();// 0x1a9f23bfa041
	bool ReceivePlayingFinished(enum reason, byte StreamerErrorCode, FString StreamerErrorMsg);// 0x1a9d23bfa041
	void ProcessHeaderData(out const FString[] HeaderData, out FString Error);// 0x1a9c23bfa041
	void PlayReplayFromServer(FString SessionName, FString DownloadUrl);// 0x1a9b23bfa041
	void PlayReplayFromLocal(FString ReplayFileName);// 0x1a9a23bfa041
	void PlayingFinishedInternal();// 0x1a9923bfa041
	void PlayHighlight(FString InBattleID);// 0x1a9823bfa041
	void PausePlayReplay();// 0x1a9723bfa041
	void OnPlayingFinished(World* World);// 0x1a9623bfa041
	void OnPlayingAtEnd(World* World);// 0x1a9523bfa041
	void OnPlayerStopWatchingLive(FString StopWatchingPlayerID);// 0x1a9423bfa041
	void OnPlayerStartWatchingLive(FString RequestWatchingPlayerID, FString BeWatchingPlayerID);// 0x1a9323bfa041
	void OnLiveWatchTargetLost();// 0x1a9223bfa041
	void NotifyTournamentSpectate(bool bIsInLiveReplay);// 0x1a9123bfa041
	bool NotifyBackendPlayReplayFinished();// 0x1a9023bfa041
	void LuaOnPostLoadMapWithWorld(FString LevelName);// 0x1a8f23bfa041
	void LuaBindDelegates();// 0x1a8e23bfa041
	bool IsTournament();// 0x1a8d23bfa041
	bool IsScrubing();// 0x1a8c23bfa041
	bool IsReplayLive();// 0x1a8b23bfa041
	bool IsRecordingHighlight();// 0x1a8a23bfa041
	bool IsRecording();// 0x1a8923bfa041
	bool IsReady();// 0x1a8823bfa041
	bool IsPlayingHighlight();// 0x1a8723bfa041
	bool IsPlaying();// 0x1a8623bfa041
	bool IsPlayerBeWatching(FString SolarPlayerID);// 0x1a8523bfa041
	bool IsPausing();// 0x1a8423bfa041
	bool IsLocal();// 0x1a8323bfa041
	bool IsLiveWatchOnly();// 0x1a8223bfa041
	bool IsInState(enum CheckState);// 0x1a8023bfa041
	bool IsACheater(FString PlayerId);// 0x1a7f23bfa041
	bool HasHighlight(FString InBattleID);// 0x1a7e23bfa041
	void GotoTimeInSecond(float Second);// 0x1a7d23bfa041
	float GetTotalSessionTimeInSecond();// 0x1a7c23bfa041
	float GetTimeDilation();// 0x1a7b23bfa041
	void GetStartRecordingParams(out StartRecordingParams OutParams);// 0x1a7923bfa041
	enum GetRecordingType();// 0x1a7723bfa041
	float GetCurrentSessionTimeInSecond();// 0x1a7623bfa041
	FString GetCurrentSessionName();// 0x1a7523bfa041
	FString GetBeWatchingPlayerID();// 0x1a7423bfa041
	FString GetBattleIDByIndex(int Index);// 0x1a7323bfa041
	void EnterSettlementStage();// 0x1a7223bfa041
	void DestroyWaitingOBStartUI();// 0x1a7123bfa041
	void DebugAllPlayerIsBeWatching(bool bAllPlayerIsBeWatching);// 0x1a7023bfa041
	void CreateWaitingOBStartUI();// 0x1a6f23bfa041
	void ContinuePlayReplay();// 0x1a6e23bfa041
	void AppendCheatersPlayerID(out const FString[] InCheatersPlayerID);// 0x1a6d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayCueTag
	GameplayTag GameplayCueTag;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AddMultiplePassMaterialChangeParams
	GameplayTag PriorityTag;//[Offset: 0x0, Size: 0x8]
	enum ResolveStrategy;//[Offset: 0x8, Size: 0x1]
	enum CompatibilityMode;//[Offset: 0x9, Size: 0x1]
	GameplayTagContainer SpecifiedPriorityTags;//[Offset: 0x10, Size: 0x20]
	bool bNeedMultiplePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bForceFrontFaceCull;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bIgnoreTranslucentSection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bIgnoreMaskedSection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	int MainPassDepthStencilValue;//[Offset: 0x34, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: StartRecordingParams
	bool bWithLevelStreamingFixes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bEnableCheckpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	uint32 RecordHz;//[Offset: 0x4, Size: 0x4]
	float CheckpointInterval;//[Offset: 0x8, Size: 0x4]
	float ChunkInterval;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GiftSenderInfo
	int Gold;//[Offset: 0x0, Size: 0x4]
	int Diamond;//[Offset: 0x4, Size: 0x4]
	FString playerName;//[Offset: 0x8, Size: 0x10]
	FString PlayerId;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: InteractiveTaskStatus
	int TaskID;//[Offset: 0x0, Size: 0x4]
	int CurLevel;//[Offset: 0x4, Size: 0x4]
	int ProgressValue;//[Offset: 0x8, Size: 0x4]
	int TargetValue;//[Offset: 0xc, Size: 0x4]
	int Param;//[Offset: 0x10, Size: 0x4]
	bool bAvailableToNxtLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	GiftSenderInfo[] TaskGiftPlayerInfo;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ScriptStruct.Struct.Field.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ReplicateItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]
	int Slot;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ReplicateMaxPileData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int MaxPile;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterRoleAbilityInfo
	bool bHasAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float StartCDTime;//[Offset: 0x4, Size: 0x4]
	float TotalCDTime;//[Offset: 0x8, Size: 0x4]
	int State;//[Offset: 0xc, Size: 0x4]
	bool bOngoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BattleUpgradeEffectParamData
	enum EffectType;//[Offset: 0x0, Size: 0x1]
	int ParameterSum;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleSpectateInfo
	SolarVehiclePawn* SpectateVehicle;//[Offset: 0x0, Size: 0x8]
	SolarVehicleWeapon* SpectateVehicleWeapon;//[Offset: 0x8, Size: 0x8]
	enum VehicleWeaponScopeType;//[Offset: 0x10, Size: 0x1]
	SolarPlayerWeapon* SpectatePlayerWeapon;//[Offset: 0x14, Size: 0x8]
	int ScopeId;//[Offset: 0x1c, Size: 0x4]
	int[] WeaponIDs;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehiclePawn.Pawn.Actor.Object
	PrimitiveComponent* VehicleRoot;//[Offset: 0x2b8, Size: 0x8]
	SkeletalMeshComponentBudgeted* VehicleMesh;//[Offset: 0x2c0, Size: 0x8]
	uint32 VehicleID;//[Offset: 0x2c8, Size: 0x4]
	bool bVehicleMeshAggregationTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	class SkeletalMeshComponentBudgeted* VehicleStencilClass;//[Offset: 0x2d0, Size: 0x28]
	SkeletalMeshComponentBudgeted* VehicleStencilNew;//[Offset: 0x2f8, Size: 0x8]
	SolarNetMovementComponent* NetMovementComponent;//[Offset: 0x300, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x308, Size: 0x8]
	SolarVehicleAbilitySystemComponent* VehicleAbilitySystem;//[Offset: 0x310, Size: 0x8]
	SolarVehicleSpringArmComponent* SpringArmComponent;//[Offset: 0x318, Size: 0x8]
	SolarVehicleCameraComponent* CameraComponent;//[Offset: 0x320, Size: 0x8]
	SolarVehicleAttributeSet* VehicleAttributeSet;//[Offset: 0x328, Size: 0x8]
	BasedMovement BasedMovement;//[Offset: 0x330, Size: 0x28]
	VehicleSeatSlot[] SeatSlots;//[Offset: 0x358, Size: 0x10]
	int HealthUIID;//[Offset: 0x368, Size: 0x4]
	Texture2D* VehicleBrandIcon;//[Offset: 0x370, Size: 0x28]
	float OverlapWaterRadius;//[Offset: 0x398, Size: 0x4]
	Vector OutVehicleOffset;//[Offset: 0x39c, Size: 0xc]
	float WaterDraftDepth;//[Offset: 0x3a8, Size: 0x4]
	float CarpadProtectTime;//[Offset: 0x3ac, Size: 0x4]
	float CarPadAccelerationMultiplier;//[Offset: 0x3b0, Size: 0x4]
	Vector[] DropPassengerLocations;//[Offset: 0x3b8, Size: 0x10]
	Vector DropPassengerAtTop;//[Offset: 0x3c8, Size: 0xc]
	FName BodySocketName;//[Offset: 0x3d4, Size: 0x8]
	Vector DamageBoxLocation;//[Offset: 0x3dc, Size: 0xc]
	Vector DamageBoxExtent;//[Offset: 0x3e8, Size: 0xc]
	FName[] PenetrationDamageBones;//[Offset: 0x3f8, Size: 0x10]
	float VehicleMaxSpeedOnUI;//[Offset: 0x408, Size: 0x4]
	enum VehicleControlUIType;//[Offset: 0x40c, Size: 0x1]
	enum VehicleAnimationType;//[Offset: 0x40d, Size: 0x1]
	FName VehicleDirectionBoneForPassenger;//[Offset: 0x410, Size: 0x8]
	VehicleVFX NosCameraVFX;//[Offset: 0x420, Size: 0x90]
	float NOSCameraEffectAngle;//[Offset: 0x4b0, Size: 0x4]
	VehicleVFX GCCameraVFX;//[Offset: 0x4c0, Size: 0x90]
	float GCCameraEffectAngle;//[Offset: 0x550, Size: 0x4]
	VehicleVFX[] NosVFXes;//[Offset: 0x558, Size: 0x10]
	<byte,ParticleSystem*> RaiseDustEffects;//[Offset: 0x568, Size: 0x50]
	float SpeedThresholdForCollidingDamage;//[Offset: 0x5b8, Size: 0x4]
	float SpeedThresholdForStandingOn;//[Offset: 0x5bc, Size: 0x4]
	float SpeedThresholdForGetOnVehicle;//[Offset: 0x5c0, Size: 0x4]
	ParticleSystem* EnterWaterVFX;//[Offset: 0x5c8, Size: 0x28]
	float SprayVelocity;//[Offset: 0x668, Size: 0x4]
	float HeavyInSpeed;//[Offset: 0x66c, Size: 0x4]
	float CriticalAngle;//[Offset: 0x670, Size: 0x4]
	Vector OffsetBasedVechileLoction;//[Offset: 0x674, Size: 0xc]
	float CollisionSparkThreshold;//[Offset: 0x680, Size: 0x4]
	ParticleSystem* CollisionSparkParticle;//[Offset: 0x688, Size: 0x28]
	FName CollisionSparkParamNowel;//[Offset: 0x6b0, Size: 0x8]
	FName CollisionSparkParamQuantity;//[Offset: 0x6b8, Size: 0x8]
	float VehicleSpeedThresholdToPlayVFX;//[Offset: 0x6c0, Size: 0x4]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToNowel;//[Offset: 0x6c8, Size: 0x88]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToQuantity;//[Offset: 0x750, Size: 0x88]
	VehicleVFX SpeedParticle;//[Offset: 0x7e0, Size: 0x90]
	VehicleVFXMesh[] DriverOnVFXMeshes;//[Offset: 0x870, Size: 0x10]
	VehicleVFX[] DriverOnVFXs;//[Offset: 0x880, Size: 0x10]
	Vector SpawnOffset;//[Offset: 0x890, Size: 0xc]
	VehicleCameraDataAsset* CameraDataAsset;//[Offset: 0x8a0, Size: 0x8]
	FString SpeedVibrationHeString;//[Offset: 0x8a8, Size: 0x10]
	RuntimeFloatCurve SpeedVibrationCurve;//[Offset: 0x8b8, Size: 0x88]
	float MinSpeedDifferenceForCollisionVibration;//[Offset: 0x940, Size: 0x4]
	FString CollisionVibrationHeString;//[Offset: 0x948, Size: 0x10]
	FString LandingVibrationHeString;//[Offset: 0x958, Size: 0x10]
	RuntimeFloatCurve LandingVibrationCurve;//[Offset: 0x968, Size: 0x88]
	float MaxSpeedDecelerationRate;//[Offset: 0x9f0, Size: 0x4]
	SolarVehicleMaterialData BackLampData;//[Offset: 0x9f8, Size: 0x28]
	SolarVehicleMaterialData[] VehicleMaterialDataArray;//[Offset: 0xa20, Size: 0x10]
	SolarVehicleSoundDataAsset* VehicleSoundDataAsset;//[Offset: 0xa30, Size: 0x8]
	class GameplayEffect* DefaultAttributes;//[Offset: 0xa38, Size: 0x8]
	class GameplayEffect* CanDriveEffect;//[Offset: 0xa40, Size: 0x8]
	class GameplayEffect* CanGetOnEffect;//[Offset: 0xa48, Size: 0x8]
	class GameplayEffect* UnderWaterEffect;//[Offset: 0xa50, Size: 0x8]
	class SolarAbility* ExplosionAbilityClass;//[Offset: 0xa58, Size: 0x8]
	SolarDamageInfo ExplosionDamageInfo;//[Offset: 0xa60, Size: 0x40]
	VehicleVFX ExplosionVFX;//[Offset: 0xaa0, Size: 0x90]
	VehicleVFXMesh VehicleBrokenMesh;//[Offset: 0xb30, Size: 0x80]
	VehicleVFX VehicleDamagedVFXs;//[Offset: 0xbb0, Size: 0x90]
	class GameplayEffect* VehicleDamageStatusEffects;//[Offset: 0xe80, Size: 0x8]
	int MaxLodLevelForUpdateVisual;//[Offset: 0xea8, Size: 0x4]
	VehicleWeakPointSpec[] VehicleWeakPointContainer;//[Offset: 0xeb0, Size: 0x10]
	PrimitiveComponent* PlatformComponent;//[Offset: 0xec0, Size: 0x8]
	bool bCanStandOnPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 0x1]
	float DistanceThresholdForAttachPlatform;//[Offset: 0xecc, Size: 0x4]
	float DegreeThresholdForAttachPlatform;//[Offset: 0xed0, Size: 0x4]
	float SpeedThresholdForAttachPlatform;//[Offset: 0xed4, Size: 0x4]
	float TimerForPenetration;//[Offset: 0xed8, Size: 0x4]
	float PenetrationThreshold;//[Offset: 0xedc, Size: 0x4]
	float CollideDamage;//[Offset: 0xee0, Size: 0x4]
	float CrashDamageWeight;//[Offset: 0xee4, Size: 0x4]
	float SelfCrashDamageRate;//[Offset: 0xee8, Size: 0x4]
	float PassengerDamageRatio;//[Offset: 0xeec, Size: 0x4]
	float MinPlayerDamageVelocity;//[Offset: 0xef0, Size: 0x4]
	float CollidedCharacterDmgRatio;//[Offset: 0xef4, Size: 0x4]
	float CollideUpBoundingRatio;//[Offset: 0xef8, Size: 0x4]
	CurveFloat* CollidePushSpeedCurve;//[Offset: 0xf00, Size: 0x8]
	float CollidePushUpAngle;//[Offset: 0xf08, Size: 0x4]
	float CharacterProtectTime;//[Offset: 0xf0c, Size: 0x4]
	float CollisionLinearVelocityDampingForSimulatedProxy;//[Offset: 0xf10, Size: 0x4]
	float CollisionLinearVelocityDampingSetDelay;//[Offset: 0xf14, Size: 0x4]
	float CollisionCompensationImpulseForSimulatedProxy;//[Offset: 0xf18, Size: 0x4]
	int[] StealthHideMats;//[Offset: 0xf20, Size: 0x10]
	bool bRemoveStencil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf38, Size: 0x1]
	bool IsLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf50, Size: 0x1]
	delegate OnPlayerGetOnVehicle;//[Offset: 0xf70, Size: 0x1]
	delegate OnPlayerGetOffVehicle;//[Offset: 0xf71, Size: 0x1]
	int[] OccupiedSeats;//[Offset: 0x1088, Size: 0x10]
	SolarInputActionContext* InputActionContext;//[Offset: 0x1098, Size: 0x8]
	Vector_NetQuantizeNormal ReplicatedPlayerInputVector;//[Offset: 0x10a4, Size: 0xc]
	Vector_NetQuantize RepLocation;//[Offset: 0x10bc, Size: 0xc]
	Actor*[] ActorsOnPlatform;//[Offset: 0x1108, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x113c, Size: 0x4]
	byte CurPlayerInputMask;//[Offset: 0x1140, Size: 0x1]
	byte ReplicatedPlayerInputMask;//[Offset: 0x1141, Size: 0x1]
	SolarNavModifierComponent* SolarNavModifierComp;//[Offset: 0x11b0, Size: 0x8]
	bool bDynamicAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b8, Size: 0x1]
	int SkinId;//[Offset: 0x1208, Size: 0x4]
	AbilityCooldownTimer[] ActivedAbilityCooldownArray;//[Offset: 0x1220, Size: 0x10]
	bool bVehicleBurningStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1231, Size: 0x1]
	float EnterWaterDuration;//[Offset: 0x12f8, Size: 0x4]
	float WaterLineHeight;//[Offset: 0x1300, Size: 0x4]
	SolarWaterActorNew* WaterActor;//[Offset: 0x1308, Size: 0x8]
	CurveFloat* SpeedCameraShakeCurve;//[Offset: 0x1330, Size: 0x8]
	CurveFloat* SpeedScreenEffectOpacityCurve;//[Offset: 0x1338, Size: 0x8]
	CurveFloat* SpeedScreenEffectPlayRateCurve;//[Offset: 0x1340, Size: 0x8]
	float MinCameraShakeSpeed;//[Offset: 0x1348, Size: 0x4]
	float MinScreenEffectSpeed;//[Offset: 0x134c, Size: 0x4]
	class CameraShake* VehicleSpeedCameraShake;//[Offset: 0x1350, Size: 0x8]
	FName VehicleSpeedScreenEffectRowId;//[Offset: 0x1358, Size: 0x8]
	void UpdateRequiredAbilityInfo(const GameplayTag Tag, int NewCount);// 0x49f023bfa041
	void UpdateBlockedAbilityInfo(const GameplayTag Tag, int NewCount);// 0x49ef23bfa041
	void StatVehicleAutoMove(int MoveTime);// 0x49ee23bfa041
	void SetWeakPointHealth(byte WeakPointID, float InHealth);// 0x49ed23bfa041
	void SetTakeMoveInput(bool bInTakeDirection, bool bInTakeRotation);// 0x49ec23bfa041
	void SetPlayerInputVector(out const Vector2D InputVector, float CameraYaw);// 0x49eb23bfa041
	void SetCurrentHealth(float InHealth);// 0x49ea23bfa041
	void SetCrossCarpad(SolarCarPad* InCarpad);// 0x49e923bfa041
	void ServerSetPlayerInput(const Vector_NetQuantizeNormal InputVector, const byte InputMask);// 0x49e823bfa041
	void ServerSetCrossCarpad(SolarCarPad* InCarpad);// 0x49e723bfa041
	void ServerSendsTransformToEveryoneWithMovementBase(const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x49e623bfa041
	void ServerSendsTransformToEveryone(const byte[] Value);// 0x49e523bfa041
	void ServerSendsTeleportStateToEveryone(const Vector_NetQuantize InLocation, const Vector_NetQuantizeNormal InNormalizeEuler, float InServerTimeStamp);// 0x49e423bfa041
	void ServerSendCorrectionToClient(float ServerTimeStamp, Vector_NetQuantize WorldLocation, Vector_NetQuantizeNormal WorldRotationCompressed);// 0x49e323bfa041
	void ServerHandleVehicleCollision(const VehicleCollisionInfo InVehicleCollisionInfo);// 0x49e223bfa041
	void ServerDrawActorLocationAndRotationOnClient(const Vector InLocation, const Rotator InRotator);// 0x49e123bfa041
	void ServerApplyVehicleSkin(int InSkinID);// 0x49e023bfa041
	void ServerApplyDamageToVehilceAndPassenger(SolarVehiclePawn* OtherVehicle, float DamageToSelf, float DamageToOther, const Vector_NetQuantize HitLocation);// 0x49df23bfa041
	void ServerApplyAbilityDamageToTargets(const Pawn*[] Targets, GameplayAbilitySpecHandle AbilityHandle);// 0x49de23bfa041
	void RemoveSeatSlot(byte SeatIndex);// 0x49dd23bfa041
	void ReleaseDamagedStatusVFX(byte InDamagedStatus);// 0x49dc23bfa041
	void PlayVehicleEjectSound(SolarCharacter* ejectedCharacter);// 0x49db23bfa041
	void PlaySpeedboardSound();// 0x49da23bfa041
	void PlayDamagedStatusVFX(byte InDamagedStatus);// 0x49d923bfa041
	void OverlapWater();// 0x49d823bfa041
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x49d723bfa041
	void OnStencilLoaded();// 0x49d623bfa041
	void OnSkinDataAssetLoadedNext(SoftClassPath SkinVehiclePath);// 0x49d523bfa041
	void OnRep_WeakPointHealthOrStateChanged(VehicleWeakPointSpec[] OldVehicleWeakPointDatas);// 0x49d423bfa041
	void OnRep_VehicleBurning();// 0x49d323bfa041
	void OnRep_SkinId();// 0x49d223bfa041
	void OnRep_ReplicatedPlayerInputMask(byte OldReplicatedPlayerInputMask);// 0x49d123bfa041
	void OnRep_RemoveStencil();// 0x49d023bfa041
	void OnRep_CachedActorHandle();// 0x49cf23bfa041
	bool IsVehicleFullHealth();// 0x49ce23bfa041
	bool IsVehicleDangerous();// 0x49cd23bfa041
	bool IsVehicleBroken();// 0x49cc23bfa041
	bool IsTeammateWith(const Pawn* Pawn);// 0x49cb23bfa041
	bool IsManuallyCancelAbilityActive(byte SeatIndex);// 0x49ca23bfa041
	bool IsExistEnemy(const SolarCharacter* Character);// 0x49c923bfa041
	bool IsAbilityActive(byte SeatIndex, byte AbilityIndex);// 0x49c823bfa041
	bool InSameTeam();// 0x49c723bfa041
	VehicleWeakPointSpec[] GetVehicleWeakPoints();// 0x49c623bfa041
	int GetVehicleTypeID();// 0x49c523bfa041
	byte GetVehicleTeamId();// 0x49c423bfa041
	PhysicalMaterial* GetVehicleRootPhysMaterial();// 0x49c323bfa041
	int GetVehicleGroupID();// 0x49c223bfa041
	float GetSpeedInKmh();// 0x49c123bfa041
	float GetSpeed();// 0x49c023bfa041
	Vector GetSpawnOffset();// 0x49bf23bfa041
	Vector2D GetPlayerInputVector();// 0x49be23bfa041
	int GetPassengerCount();// 0x49bd23bfa041
	int GetNextVacantSeat(int InCurrentSeatIndex);// 0x49bc23bfa041
	float GetMaxHealth();// 0x49bb23bfa041
	int GetManuallyCancelAbilityIndex(byte SeatIndex);// 0x49ba23bfa041
	int GetHealthPercentInt();// 0x49b923bfa041
	SolarCharacter* GetDriverCharacter();// 0x49b823bfa041
	float GetDangerHealthPrecent();// 0x49b723bfa041
	float GetCurrentHealth();// 0x49b623bfa041
	bool DoesAbilityRequiredTagMissing(int CurSeatIndex, byte AbilityIndex);// 0x49b523bfa041
	bool DoesAbilityActivationTagBlocked(int CurSeatIndex, byte AbilityIndex);// 0x49b423bfa041
	void DeleteStencilMesh();// 0x49b323bfa041
	void ClientVehicleExplosion();// 0x49b223bfa041
	void ClientVehicleBroken();// 0x49b123bfa041
	void ClientSendsTransformToServerWithMovementBaseAfterCorrection(float DriverLocalTime, float ServerTimeStamp, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x49b023bfa041
	void ClientSendsTransformToServerWithMovementBase(float DriverLocalTime, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x49af23bfa041
	void ClientSendsTransformToServerAfterCorrection(float DriverLocalTime, float ServerTimeStamp, const byte[] Value);// 0x49ae23bfa041
	void ClientSendsTransformToServer(float DriverLocalTime, const byte[] Value);// 0x49ad23bfa041
	bool CheckUpdateVisual();// 0x49ac23bfa041
	bool CheckOpenParticleOptimization(int Bias);// 0x49ab23bfa041
	bool CanActivateAbility(byte SeatIndex, byte AbilityIndex);// 0x49aa23bfa041
	void ApplySkinFromCDO(SolarVehiclePawn* SkinVehiclePawnCDO);// 0x49a923bfa041
	byte AddSeatSlot(out const VehicleSeatSlot SeatSlot);// 0x49a823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCarPad.SolarInteractableActor.Actor.Object
	float Duration;//[Offset: 0x238, Size: 0x4]
	float SpeedMultiplier;//[Offset: 0x23c, Size: 0x4]
	float DistanceThresholdForValidation;//[Offset: 0x240, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarInteractableActor.Actor.Object
	enum InteractType;//[Offset: 0x228, Size: 0x1]
	byte bUseSceneActorOptimization;//[Offset: 0x234, Size: 0x1]
	void SetUserActor(Actor* InUser);// 0x4b4523bfa041
	void InteractWithActor(Actor* InActor);// 0x4b4423bfa041
	Actor* GetUserActor();// 0x4b4323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleCollisionInfo
	PrimitiveComponent* CollidedPrimitive;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize SelfPreVelocity;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize SelfCurrentVelocity;//[Offset: 0x14, Size: 0xc]
	Vector_NetQuantize OtherVehicleLinearVelocity;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantize OtherVehicleAngularVelocity;//[Offset: 0x2c, Size: 0xc]
	Vector_NetQuantize OtherVehicleLocation;//[Offset: 0x38, Size: 0xc]
	Vector_NetQuantizeNormal OtherVehicleRotation;//[Offset: 0x44, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilitySpecHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	delegate PendingBeginPlay;//[Offset: 0x660, Size: 0x10]
	delegate OnPlayerStatePossessDelegate;//[Offset: 0x688, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x698, Size: 0x10]
	enum SolarCharacterType;//[Offset: 0x6a8, Size: 0x1]
	Vector2D CharacterCapsuleSizeOverride;//[Offset: 0x704, Size: 0x8]
	bool bInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70d, Size: 0x1]
	ReconnectionParams ReconnectionParams;//[Offset: 0x73b, Size: 0x1]
	SolarAnimInstance* SolarAnimInstance;//[Offset: 0x758, Size: 0x8]
	<enum,AnimInstance*> SolarAnimInstances;//[Offset: 0x760, Size: 0x50]
	int BodyHitSoundCount;//[Offset: 0x7c4, Size: 0x4]
	int BodyHitByPunchSoundCount;//[Offset: 0x7c8, Size: 0x4]
	SolarPile*[] ChargingPileQueue;//[Offset: 0x7d0, Size: 0x10]
	delegate OnCharacterIDSet;//[Offset: 0x808, Size: 0x10]
	delegate OnSkinIDSet;//[Offset: 0x818, Size: 0x10]
	delegate OnCharacterSkinReset;//[Offset: 0x828, Size: 0x10]
	enum BodyScaleType;//[Offset: 0x838, Size: 0x1]
	int AssignedCharacterID;//[Offset: 0x83c, Size: 0x4]
	int AssignedSkinID;//[Offset: 0x840, Size: 0x4]
	<GameplayTag,SkeletalMeshComponent*> SkeletalOrnaments;//[Offset: 0x850, Size: 0x50]
	<GameplayTag,StaticMeshComponent*> StaticOrnaments;//[Offset: 0x8a0, Size: 0x50]
	<GameplayTag,ChildActorComponent*> ChildActorOrnaments;//[Offset: 0x8f0, Size: 0x50]
	<GameplayTag,CharacterTagListenerForOrnamentComp> OrnamentCompVisibleTagDependencies;//[Offset: 0x940, Size: 0x50]
	OrnamentMontageInfo OrnamentMontageInfo;//[Offset: 0x990, Size: 0x18]
	SolarAttributeSubComponent* AttributeSubComp;//[Offset: 0xae8, Size: 0x8]
	SolarBackpackActor* SolarBackpackActor;//[Offset: 0xb28, Size: 0x8]
	SolarBackpackComponent* SolarBackpackComponent;//[Offset: 0xb30, Size: 0x8]
	delegate OnBackpackItemUpdate;//[Offset: 0xb58, Size: 0x10]
	delegate OnBackpackEnergyUpdate;//[Offset: 0xb68, Size: 0x10]
	delegate OnBackpackEquipUpdate;//[Offset: 0xb78, Size: 0x10]
	delegate OnBatteryIdUpdate;//[Offset: 0xb88, Size: 0x10]
	delegate OnEnergyStateUpdate;//[Offset: 0xb98, Size: 0x10]
	delegate OnChargeInfoUpdate;//[Offset: 0xba8, Size: 0x10]
	delegate OnConsumableNumUpdated;//[Offset: 0xbb8, Size: 0x10]
	delegate OnMaxEnergyUpdate;//[Offset: 0xbc8, Size: 0x10]
	delegate OnCurEnergyUpdate;//[Offset: 0xbd8, Size: 0x10]
	delegate OnBackpackWeaponPartUpdate;//[Offset: 0xbe8, Size: 0x10]
	<int,int> ShieldUpMatCostMap;//[Offset: 0xbf8, Size: 0x50]
	<int,int> MaxPileMap;//[Offset: 0xc48, Size: 0x50]
	ReplicateMaxPileData[] MaxPileArray;//[Offset: 0xc98, Size: 0x10]
	<int,SolarItemData> IdKeyItemMap;//[Offset: 0xca8, Size: 0x50]
	ReplicateItemData[] IdKeyItemArray;//[Offset: 0xcf8, Size: 0x10]
	<enum,SolarItemData> TypeKeyItemMap;//[Offset: 0xd08, Size: 0x50]
	ReplicateItemData[] TypeKeyItemArray;//[Offset: 0xd58, Size: 0x10]
	ReplicateItemData[] WeaponDataArray;//[Offset: 0xd68, Size: 0x10]
	<int,SolarItemData> WeaponDataMap;//[Offset: 0xd78, Size: 0x50]
	int[] WeaponPartsArray;//[Offset: 0xe18, Size: 0x10]
	byte[] IgnoreScopeSlots;//[Offset: 0xe30, Size: 0x10]
	byte EnergyState;//[Offset: 0xe40, Size: 0x1]
	float MaxEnergyValue;//[Offset: 0xe44, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0xe48, Size: 0x4]
	float MaxExtraEnergyValue;//[Offset: 0xe4c, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0xe50, Size: 0x4]
	int EnergyModuleID;//[Offset: 0xe54, Size: 0x4]
	float AddedEnergyMax;//[Offset: 0xe58, Size: 0x4]
	int ExtraEnergyModuleID;//[Offset: 0xe5c, Size: 0x4]
	float AddedExtraEnergyMax;//[Offset: 0xe60, Size: 0x4]
	int VJetPackModuleID;//[Offset: 0xe64, Size: 0x4]
	int HJetPackModuleID;//[Offset: 0xe68, Size: 0x4]
	bool bSettingEnergyCostEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6d, Size: 0x1]
	int DayLightID;//[Offset: 0xe70, Size: 0x4]
	float SolarChargeRatio;//[Offset: 0xe74, Size: 0x4]
	bool bReviveItemCleared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe78, Size: 0x1]
	BackpackJetPrepelInfo JetPropellingInfo;//[Offset: 0xe7c, Size: 0xc]
	enum BackpackPropellingMode;//[Offset: 0xe88, Size: 0x1]
	Vector2D InputVector;//[Offset: 0xe8c, Size: 0x8]
	SolarInputActionContext* InputActionContext;//[Offset: 0xea0, Size: 0x8]
	byte IdleTurnType;//[Offset: 0xea8, Size: 0x1]
	Rotator CharacterLookAt;//[Offset: 0xeb0, Size: 0xc]
	CharacterOperationEvent CharacterOperationEvt;//[Offset: 0xee0, Size: 0x10]
	delegate OnHealthUpdateDelegate;//[Offset: 0xf08, Size: 0x10]
	float PendingRegeneration;//[Offset: 0xf18, Size: 0x4]
	float DiedTime;//[Offset: 0xf1c, Size: 0x4]
	bool bIsDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf24, Size: 0x1]
	SolarTeamRescueComponent* SolarTeamRescueComponent;//[Offset: 0xf38, Size: 0x8]
	SolarCharacter* RescuingCharater;//[Offset: 0xf40, Size: 0x8]
	SolarUAVRescue* RescuingUAV;//[Offset: 0xf48, Size: 0x8]
	byte CurrentRescueState;//[Offset: 0xf50, Size: 0x1]
	byte LastRescueState;//[Offset: 0xf51, Size: 0x1]
	SolarCharacter* RescuedCharater;//[Offset: 0xf80, Size: 0x8]
	float RescuedStartTime;//[Offset: 0xf88, Size: 0x4]
	StaticMeshComponent* RescueInjector;//[Offset: 0xf90, Size: 0x8]
	float RescueTime;//[Offset: 0xfbc, Size: 0x4]
	SolarPlayerWeapon*[] DeathBoxWeaponArray;//[Offset: 0xfc8, Size: 0x10]
	SolarItemData[] DeathBoxArray;//[Offset: 0xfd8, Size: 0x10]
	float DeathBoxEnergy;//[Offset: 0xfe8, Size: 0x4]
	SolarWaterActorNew* WaterActor;//[Offset: 0xff0, Size: 0x8]
	ParticleSystemComponent* SwimmingWaterEffect;//[Offset: 0xff8, Size: 0x8]
	ParticleSystemComponent* HeavyJumpWaterEffect;//[Offset: 0x1000, Size: 0x8]
	ParticleSystemComponent*[] HorizontalFlyWaterEffects;//[Offset: 0x1008, Size: 0x10]
	SolarItemComponent* SolarItemComponent;//[Offset: 0x1028, Size: 0x8]
	SolarPickupComponent* SolarPickupComponent;//[Offset: 0x1030, Size: 0x8]
	bool bIsElectricStoreOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1038, Size: 0x1]
	SolarTreatmentComponent* SolarTreatmentComponent;//[Offset: 0x1040, Size: 0x8]
	enum CurrentTreatState;//[Offset: 0x1048, Size: 0x1]
	int TreatmentCount;//[Offset: 0x104c, Size: 0x4]
	delegate OnShieldRecharge;//[Offset: 0x1058, Size: 0x10]
	delegate OnShieldBreak;//[Offset: 0x1068, Size: 0x10]
	delegate OnShowShieldHUD;//[Offset: 0x1078, Size: 0x10]
	delegate OnShowShieldHUDItem;//[Offset: 0x1088, Size: 0x10]
	delegate OnShieldUpFX;//[Offset: 0x1098, Size: 0x10]
	delegate OnCurShieldValueChanged;//[Offset: 0x10a8, Size: 0x10]
	delegate OnShieldIDChanged;//[Offset: 0x10b8, Size: 0x10]
	delegate OnShieldValueLow;//[Offset: 0x10c8, Size: 0x10]
	delegate OnShieldValueChanged;//[Offset: 0x10d8, Size: 0x10]
	int CurrShieldId;//[Offset: 0x10ec, Size: 0x4]
	int CurUniqueShieldId;//[Offset: 0x10f0, Size: 0x4]
	float MaxShieldValue;//[Offset: 0x10f4, Size: 0x4]
	int NextUpgradeShieldID;//[Offset: 0x10f8, Size: 0x4]
	int NextUpgradeShieldEnergy;//[Offset: 0x10fc, Size: 0x4]
	float CurrShieldValue;//[Offset: 0x1100, Size: 0x4]
	enum CurrShieldState;//[Offset: 0x1104, Size: 0x1]
	int CurrShieldLevel;//[Offset: 0x1108, Size: 0x4]
	bool bHasPreAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1110, Size: 0x1]
	StaticMeshComponent* ShieldRepairOperator;//[Offset: 0x11b8, Size: 0x8]
	StaticMesh* ShieldOperatorSM;//[Offset: 0x11c0, Size: 0x8]
	StaticMesh* ShieldOperatorBigSM;//[Offset: 0x11c8, Size: 0x8]
	ParticleSystemComponent* ShieldRepairFX;//[Offset: 0x11d0, Size: 0x8]
	ParticleSystemComponent* ShieldMultiRecoverFX;//[Offset: 0x11d8, Size: 0x8]
	ParticleSystemComponent* ShieldUpgradeBodyFX;//[Offset: 0x11e0, Size: 0x8]
	StaticMeshComponent* ShieldUpgradeOperator;//[Offset: 0x11e8, Size: 0x8]
	StaticMesh* ShieldUpgradeOperatorSM;//[Offset: 0x11f0, Size: 0x8]
	Timeline ShieldOperatorExpandTimeline;//[Offset: 0x11f8, Size: 0x98]
	Timeline ShieldOperatorNarrowTimeline;//[Offset: 0x1290, Size: 0x98]
	<enum,ShieldSoundData> ShieldSounds;//[Offset: 0x1328, Size: 0x50]
	StaticMeshComponent* TreasureBoxOperator;//[Offset: 0x1380, Size: 0x8]
	DeathTreasureBox* CurChargingDeathBox;//[Offset: 0x1388, Size: 0x8]
	DeathTreasureBox*[] DeathBoxes;//[Offset: 0x1390, Size: 0x10]
	delegate OnLocalPlayerSpectateMeStatusChanged;//[Offset: 0x13a8, Size: 0x10]
	delegate OnHUDNickNameSet;//[Offset: 0x13e8, Size: 0x10]
	delegate OnHUDTeamPosSet;//[Offset: 0x13f8, Size: 0x10]
	delegate OnHUDDistanceSet;//[Offset: 0x1408, Size: 0x10]
	delegate OnHUDDistanceDisplaySet;//[Offset: 0x1418, Size: 0x10]
	delegate OnHUDRescueBtnActivitySet;//[Offset: 0x1428, Size: 0x10]
	SolarTeammateHUDWidgetComponent* TeammateHUDComp;//[Offset: 0x1438, Size: 0x8]
	float HUDZNomral;//[Offset: 0x1448, Size: 0x4]
	float HUDChangeTime;//[Offset: 0x144c, Size: 0x4]
	SolarRadarComponent* SolarRadarComponent;//[Offset: 0x1468, Size: 0x8]
	RadarDataSpecContainer ActivatedRadars;//[Offset: 0x1470, Size: 0x120]
	SolarRadarStation* TargetRadarStation;//[Offset: 0x1590, Size: 0x8]
	SolarElectricShop* TargetElectricShop;//[Offset: 0x1598, Size: 0x8]
	TimerHandle StatisticsTimerHandle;//[Offset: 0x15b0, Size: 0x8]
	SolarCharacter* CachedInstigatorCharacter;//[Offset: 0x1628, Size: 0x8]
	float ArmorReduceValue;//[Offset: 0x1644, Size: 0x4]
	float HeadHitValue;//[Offset: 0x1648, Size: 0x4]
	delegate OnTakeDamageDelegate;//[Offset: 0x1650, Size: 0x10]
	int InstigatorCharacterWeaponItemID;//[Offset: 0x1674, Size: 0x4]
	CriticalHitInfo[] CriticalHits;//[Offset: 0x1678, Size: 0x10]
	WorldMarkComponent* WorldMarkComponent;//[Offset: 0x16f0, Size: 0x8]
	IMChatObject* IMChatObj;//[Offset: 0x16f8, Size: 0x8]
	int AIActorCapacity;//[Offset: 0x1700, Size: 0x4]
	float StandJogSpeed;//[Offset: 0x17b0, Size: 0x4]
	float StandRunSpeed;//[Offset: 0x17b4, Size: 0x4]
	float StandSprintSpeed;//[Offset: 0x17b8, Size: 0x4]
	float CrouchJogSpeed;//[Offset: 0x17bc, Size: 0x4]
	float CrouchRunSpeed;//[Offset: 0x17c0, Size: 0x4]
	float CrouchSprintSpeed;//[Offset: 0x17c4, Size: 0x4]
	delegate OnJogSetClient;//[Offset: 0x17d0, Size: 0x10]
	bool bIsSprintingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e0, Size: 0x1]
	SolarCharacterMovementComponent* CachedSolarCharacterMovement;//[Offset: 0x1838, Size: 0x8]
	bool bIsJog;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1840, Size: 0x1]
	float MoveSpeedReduceBonusInHipFire;//[Offset: 0x1844, Size: 0x4]
	float MoveSpeedReduceBonusInAdsHipFire;//[Offset: 0x1848, Size: 0x4]
	enum CurrentCustomJumpType;//[Offset: 0x185c, Size: 0x1]
	enum CurrentJetFlyType;//[Offset: 0x185f, Size: 0x1]
	bool bNewJetFlyCheckFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1860, Size: 0x1]
	AnimSequence* CruiseStartAnim;//[Offset: 0x18a8, Size: 0x8]
	AnimSequence* CruiseLoopAnim;//[Offset: 0x18b0, Size: 0x8]
	AnimSequence* CruiseEndAnim;//[Offset: 0x18b8, Size: 0x8]
	float PrepareToParachuteStartTime;//[Offset: 0x18c0, Size: 0x4]
	float PrepareToParachuteDuration;//[Offset: 0x18c4, Size: 0x4]
	Vector PrepareToParachuteLocation;//[Offset: 0x18c8, Size: 0xc]
	Vector AgreedParachuteLocation;//[Offset: 0x18d4, Size: 0xc]
	int CapsuleID;//[Offset: 0x18f8, Size: 0x4]
	bool bEnableCruising;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18fc, Size: 0x1]
	SolarCapsuleRoot* BoardedRoot;//[Offset: 0x1900, Size: 0x8]
	enum CruiseState;//[Offset: 0x1908, Size: 0x1]
	int ForceParachuteCountDown;//[Offset: 0x190c, Size: 0x4]
	CharacterCruiseComponent* CruiseComponentPrivate;//[Offset: 0x1910, Size: 0x8]
	delegate OnSkydiveTraced;//[Offset: 0x1920, Size: 0x10]
	ExponentialHeightFog* HeightFogActor;//[Offset: 0x1930, Size: 0x8]
	ParticleSystemComponent*[] SkydiveFlyingEffects;//[Offset: 0x1938, Size: 0x10]
	ParticleSystemComponent*[] SkydiveLandingEffects;//[Offset: 0x1948, Size: 0x10]
	ParticleSystemComponent*[] SkydiveWholeLifetimeEffects;//[Offset: 0x1958, Size: 0x10]
	enum CurrentSkydiveStage;//[Offset: 0x1968, Size: 0x1]
	delegate OnSkydivingStageChangedDelegate;//[Offset: 0x1970, Size: 0x10]
	ActorComponent* FollowedLeaderMovementComponent;//[Offset: 0x19a0, Size: 0x8]
	WeaponSystemPlayerBase* WeaponSystemComponent;//[Offset: 0x19d8, Size: 0x8]
	delegate OnCharacterFired;//[Offset: 0x19e8, Size: 0x10]
	SkeletalMeshComponent* FirstPersonMesh;//[Offset: 0x1a10, Size: 0x8]
	SolarPlayerWeapon* TempSwitchWeapon;//[Offset: 0x1a28, Size: 0x8]
	SolarPlayerWeapon* CachedCurrentWeapon;//[Offset: 0x1a30, Size: 0x8]
	WeaponSystemVehicleComponent* WeaponSystemVehicle;//[Offset: 0x1b00, Size: 0x8]
	BoardedVehicleInfo BoardedVehicleInfo;//[Offset: 0x1b20, Size: 0x10]
	bool bOutVehicleShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b30, Size: 0x1]
	StaticMeshComponent* VehicleRepairToolMesh;//[Offset: 0x1bf8, Size: 0x8]
	delegate OnCharacterActivateEMP;//[Offset: 0x1c18, Size: 0x10]
	delegate OnCharacterSwitchEMPEffect;//[Offset: 0x1c28, Size: 0x10]
	bool bActiveEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c38, Size: 0x1]
	bool bActiveInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c39, Size: 0x1]
	bool bNoticedCantCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c3a, Size: 0x1]
	enum CurrentSkillAnimType;//[Offset: 0x1c3b, Size: 0x1]
	enum CurrentSkillAnimRightHandType;//[Offset: 0x1c3c, Size: 0x1]
	StaticMeshComponent* MassInvWarningIconComponent;//[Offset: 0x1c40, Size: 0x8]
	ScoutEnemyObject* ScoutEnemyObj;//[Offset: 0x1c80, Size: 0x8]
	DuckRollingMeshComponent* CachedDuckRollingMeshComponent;//[Offset: 0x1c88, Size: 0x8]
	byte WallRunSurfaceAngle;//[Offset: 0x1d08, Size: 0x1]
	enum WallRunState;//[Offset: 0x1d09, Size: 0x1]
	int LeadDanceID;//[Offset: 0x1d0c, Size: 0x4]
	FString DebugStringBotAIInfo;//[Offset: 0x1db0, Size: 0x10]
	FString DebugStringToDrawGASServer;//[Offset: 0x1dc0, Size: 0x10]
	FString DebugStringDSTransferLog;//[Offset: 0x1dd0, Size: 0x10]
	int RoleAbilityCharacterID;//[Offset: 0x1de0, Size: 0x4]
	int[] RoleAbilityBoundPlayerLevels;//[Offset: 0x1de8, Size: 0x10]
	GameplayAbilitySpecHandle[] RoleAbilitySpecHandles;//[Offset: 0x1df8, Size: 0x10]
	float[] RoleAbilityStartCDServerTime;//[Offset: 0x1e08, Size: 0x10]
	int BattleUpgradeEffectCurrentLevel;//[Offset: 0x1e58, Size: 0x4]
	BattleUpgradeEffectContainer BattleUpgradeEffects;//[Offset: 0x1e60, Size: 0x120]
	SolarUAVRescue* PermanentRescueUAV;//[Offset: 0x2000, Size: 0x8]
	<SkywardDiveLauncher*,bool> AvailableSkywardDiveLaunchers;//[Offset: 0x2028, Size: 0x50]
	bool WorldToScreen(out const Vector Location, out Vector2D Screen);// 0x20a423bfa041
	void UseDanceEmoteByID(int ID);// 0x20a323bfa041
	void UpgradeShieldResponse(const bool bSuccess);// 0x20a223bfa041
	void UpgradeGenericSkill(int LevelUp);// 0x20a123bfa041
	void UpgradeClassTypeSkill(int LevelUp);// 0x20a023bfa041
	void UpdateWeaponCrosshair(float InDeltaTime);// 0x209f23bfa041
	void UpdateVehicleStealthProgress(float StealthMaterialPercent);// 0x209e23bfa041
	void UpdateTeammateHUDData(byte InNewPosInTeam);// 0x209d23bfa041
	void UpdateShieldUpgradeMatMaxPile();// 0x209c23bfa041
	void UpdateShieldPropertyByAblility();// 0x209b23bfa041
	void UpdateRoleAbilityState(byte RoleAbilityIndex, enum Ope);// 0x209a23bfa041
	void UpdateJetFlyDataToSpectating();// 0x209923bfa041
	void UpdateExtraMagToSpectateInfo(SolarSpectateInfo* SpectateInfo);// 0x209823bfa041
	void UpdateDyingAttr(float DeltaTime);// 0x209723bfa041
	float UpdateCurrentHealth(const float UpdateValue, const byte ChangeType, SolarCharacter* InInstigatorCharacter, Actor* InDamageCauserActor, out SolarPointDamageEvent DamageEvent);// 0x209623bfa041
	void UpdateBattleUpgradeEffectToSpectateInfo(SolarSpectateInfo* SpectateInfo);// 0x209523bfa041
	void UnbindActorToSelfTeam(Actor* Actor);// 0x209423bfa041
	void TurnCharacterWithAngle(float Degree, bool bIsYawOrPitch);// 0x209323bfa041
	void TurnCharacterToDirection(out const Vector Dir);// 0x209223bfa041
	void TryStopSpectateCountdown();// 0x209123bfa041
	void TryStopShieldRecharge();// 0x209023bfa041
	void TryStatisticsRechargedTimes();// 0x208f23bfa041
	void TryStartSpectateCountdown();// 0x208e23bfa041
	void TryStartShieldRecharge(bool bUseBigRecharger);// 0x208d23bfa041
	void TrySetTeammateHUDShow();// 0x208c23bfa041
	void TrySetTeammateHUDHide();// 0x208b23bfa041
	void TrySetTeamateHUDVisiblity();// 0x208a23bfa041
	void TryRechargeShield(bool bUseBigRecharger);// 0x208923bfa041
	void TryHideShieldOperator();// 0x208823bfa041
	void TryDiscardShieldUpgradeMatItems(const int InItemNum);// 0x208723bfa041
	void TryCreatingOwnTeammate();// 0x208623bfa041
	void TryBreakShieldRecharge();// 0x208523bfa041
	void TryBreakScopeStatus();// 0x208423bfa041
	void TryBindPowerBarDelegates();// 0x208323bfa041
	void TryBindPickupDelegates();// 0x208223bfa041
	void TryBindItemPanelDelegates();// 0x208123bfa041
	void TryBindHPPanelDelegates();// 0x208023bfa041
	void TryAutoMarkItemForTeammateServer(const SolarItemData[] ItemData);// 0x207f23bfa041
	void ToggleDebugInfo();// 0x207e23bfa041
	void ToggleDebugGASInfo();// 0x207d23bfa041
	void TickShieldOperatorTimeline(float InDeltaTime);// 0x207c23bfa041
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x207b23bfa041
	void Suicide();// 0x207a23bfa041
	void StopTreatmentProgressBar();// 0x207923bfa041
	void StopTreatment();// 0x207823bfa041
	void StopShieldRechargeProgressBar();// 0x207723bfa041
	void StopShieldRechargeProgress();// 0x207623bfa041
	void StopRescueProgressBar(const int TextID);// 0x207523bfa041
	void StopRepairWeakPointProgressBar();// 0x207423bfa041
	void StopClimbSound();// 0x207323bfa041
	void StatisticElectricShopOnActivated(out const Vector InLocation);// 0x207223bfa041
	void StartTreatmentProgressBar(const float Duration);// 0x207123bfa041
	void StartTreatment();// 0x207023bfa041
	void StartShieldRechargeProgressBar(const float InRechargeDuration, int InContributorCharacterId);// 0x206f23bfa041
	void StartShieldRechargeProgress();// 0x206e23bfa041
	void StartRescueProgressBar(const float Duration, const float RemainingTime, const int TextID, const bool bShowBtn, bool bIsUAV);// 0x206d23bfa041
	void StartRepairWeakPointProgressBar(const float Duration);// 0x206c23bfa041
	void SpecAnimInstStopMontage(enum SpecAnimType, AnimMontage* AnimMontage);// 0x206b23bfa041
	float SpecAnimInstPlayMontage(enum SpecAnimType, AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x206a23bfa041
	AnimMontage* SpecAnimInstGetCurrentMontage(enum SpecAnimType);// 0x206923bfa041
	void SpawnDeathBoxActor();// 0x206823bfa041
	void SolarLaunchCharacter(out const Vector LaunchVelocity, bool bXYOverride, bool bZOverride, Actor* JumpPad);// 0x206723bfa041
	void ShowShieldUIFX(const int ShiledID);// 0x206623bfa041
	void ShowShieldUI(const bool IsShow);// 0x206523bfa041
	void ShowRevivePickupEffect();// 0x206423bfa041
	void ShowReviveClearEffect();// 0x206323bfa041
	void ShowRescueInjector();// 0x206223bfa041
	void ShowNoticeCantCharge();// 0x206123bfa041
	bool ShouldForceOverrideDamageTaken(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser, out float OverrideDamageTaken);// 0x206023bfa041
	void ShieldUpgradeToNextLevel();// 0x205f23bfa041
	void ShieldOperatorInterpFunc(float InValue);// 0x205e23bfa041
	void SetSpectateTargetCharacter(SolarCharacter* InSpectateTargetCharacter);// 0x205d23bfa041
	void SetSelfEnergyCostEnable(bool bEnable);// 0x205c23bfa041
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x205b23bfa041
	void SetNewCharacterSkin(SkeletalMesh* NewMesh, MaterialInterface* NewMaterial, class Object NewAnimClass);// 0x205a23bfa041
	void SetMaxWalkSpeed(float NewWalkSpeed);// 0x205923bfa041
	void SetInfiniteAmmoState(const bool Enable);// 0x205823bfa041
	void SetCurrShieldValue(const float InValue);// 0x205723bfa041
	void SetCurrExtraEnergy(float Amount);// 0x205623bfa041
	void SetBackpackConfig(const int InCharacterId);// 0x205523bfa041
	void SetActiveRescueBtn(bool bIsActive);// 0x205423bfa041
	void ServerUseItemRequest(int ItemID, int Num);// 0x205323bfa041
	bool ServerUpgradeShield();// 0x205223bfa041
	void ServerUpdateWallRunState(enum NewState);// 0x205023bfa041
	void ServerUpdateWallRunAngle(byte ClientAngle);// 0x204f23bfa041
	void ServerTryRechargeShield(const float InRecoverySpeed);// 0x204e23bfa041
	void ServerTriggerRadarStation(SolarRadarStation* InRadarStation);// 0x204d23bfa041
	void ServerSwitchVehicleSeat(float LocalTime, SolarVehiclePawn* InVehicle, int TargetSeatIndex, const Vector_NetQuantize VehicleLocation, const Vector_NetQuantizeNormal VehicleEuler);// 0x204c23bfa041
	void ServerSwitchShield(const SolarItemData NewShieldData);// 0x204b23bfa041
	void ServerStatisticsRechargedTimes(const int RechargedTimes, const int BigRechargedTimes);// 0x204a23bfa041
	void ServerStatisticElectricShopOnActivated(const Vector InLocation);// 0x204923bfa041
	void ServerStartRescue(SolarCharacter* TargetCharacter);// 0x204823bfa041
	void ServerSetTreasureBoxState(SolarTreasureBoxActor* TreasureBox, const enum NewState, SolarCharacter* RequestCharacter);// 0x204623bfa041
	void ServerSetJetPackModule(const int NewJetPackModuleID, const bool bForVertical);// 0x204523bfa041
	void ServerSetInputVector(uint16 AxisX, uint16 AxisY);// 0x204423bfa041
	void ServerSetIdleTurnType(byte TurnType);// 0x204223bfa041
	void ServerSetEnergyState(enum State);// 0x204123bfa041
	void ServerSetDebugCharacterGASValue(int Value);// 0x204023bfa041
	void ServerSetCurChargingDeathBox(DeathTreasureBox* DeathBox);// 0x203f23bfa041
	void ServerSetChargingPile(const bool bEnter, SolarPile* InChargingPile);// 0x203e23bfa041
	void ServerSetCharacterOperation(enum InType, Object* Target);// 0x203d23bfa041
	void ServerSetCanBeDamaged(bool bInCanBeDamaged);// 0x203c23bfa041
	void ServerSendGameplayEvent(const GameplayTag EventTag, const GameplayEventData Payload);// 0x203b23bfa041
	void ServerSelectLevelSkill(int Level, int SelectedIndex);// 0x203a23bfa041
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x203923bfa041
	void ServerRPCUpgradeShield();// 0x203823bfa041
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x203723bfa041
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x203623bfa041
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x203523bfa041
	void ServerRPCSetSelfEnergyCostEnable(bool bEnable);// 0x203423bfa041
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x203323bfa041
	void ServerRPCDisplayAllElectricShops();// 0x203223bfa041
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x203123bfa041
	void ServerRPCDiscardWeapon(const int InSlot);// 0x203023bfa041
	void ServerRPCDiscardItem(const int InItemID, const int InItemNum);// 0x202f23bfa041
	void ServerRequestStartResurrect(DeathTreasureBox* TargetDeathBox);// 0x202e23bfa041
	void ServerRequestCancelResurrect();// 0x202d23bfa041
	void ServerPlayTreatmentCancelSound();// 0x202c23bfa041
	void ServerPickUpWeapon(Actor* Actor, bool bIsAutoPickup, Vector ClientCharPos, Vector ClientItemPos);// 0x202b23bfa041
	void ServerPickUpTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x202a23bfa041
	void ServerPickUpItem(SolarItemActor* ItemActor, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x202923bfa041
	void ServerPerformShieldUpgradeInteract(SolarShieldUpgradeItemShop* InShop);// 0x202823bfa041
	void ServerOpenAirDropTreasureBox(AirDropTreasureBox* InAirDropTreasureBox);// 0x202723bfa041
	void ServerOnDestructActor(SolarDestructibleActor* DestructibleActor, SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x202623bfa041
	void ServerMoveNoBaseEx(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode, uint32 ClientCustomMoveData);// 0x202523bfa041
	void ServerMoveDualNoBaseEx(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode, uint32 ClientCustomMoveData);// 0x202423bfa041
	void ServerKillMe(enum DamageType);// 0x202323bfa041
	void ServerInitSheildComp(const int InShiledID);// 0x202223bfa041
	void ServerHideShieldOperator();// 0x202123bfa041
	void ServerGMVehicleSubHealth(int SubHealth);// 0x202023bfa041
	void ServerGetOnVehicle(float LocalTime, SolarVehiclePawn* InVehicle, int SeatIndex);// 0x201f23bfa041
	void ServerGetOffVehicleEjectedByDefaultParams(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection);// 0x201e23bfa041
	void ServerGetOffVehicleEjected(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection, const VehicleEjectParams Params);// 0x201c23bfa041
	void ServerGetOffVehicle(bool bNeedNotify);// 0x201b23bfa041
	void ServerDetectBlock();// 0x201a23bfa041
	void ServerConsumeExtraEnergy(const float InAmount, const enum InUsage);// 0x201923bfa041
	void ServerConsumeEnergy(const float InAmount, const enum InUsage);// 0x201823bfa041
	void ServerClearJetModule();// 0x201723bfa041
	void ServerClearEnergyState(enum State);// 0x201623bfa041
	void ServerChangeRechargeState(const bool bRecharge, const bool bUseBigRecharger);// 0x201523bfa041
	void ServerCancelVehicleAbility(byte AbilityIndex);// 0x201423bfa041
	void ServerCancelVault(float InAnimPosition, Vector InLandLocation);// 0x201323bfa041
	void ServerCancelRescue();// 0x201223bfa041
	void ServerCancelOpenAirDropTreasureBox(AirDropTreasureBox* InAirDropTreasureBox);// 0x201123bfa041
	void ServerCancelMeleeWarp();// 0x201023bfa041
	void ServerBackpackGM(const enum InGmType, const int InItemID, const int InItemNum, const int InSlot);// 0x200f23bfa041
	void ServerAskForActiveAbilityInfosToRestoreOnReconnected();// 0x200e23bfa041
	void ServerApplyVehicleAbility(byte AbilityIndex);// 0x200d23bfa041
	void ServerAddVehicleTime(float InAddTime);// 0x200c23bfa041
	void RoleAbilityForbiddenAbilityTagCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x200b23bfa041
	void RoleAbilityEndedCallBack(GameplayAbility* InAbility);// 0x200a23bfa041
	void RoleAbilityCoolDownTagCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x200923bfa041
	void RoleAbilityCoolDownResetCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x200823bfa041
	void RoleAbilityCommittedCallBack(GameplayAbility* InAbility);// 0x200723bfa041
	void RoleAbilityActiveCallBack(GameplayAbility* InAbility);// 0x200623bfa041
	void ReturnMostValuableItemIDServer(const byte TeammatePosInTeam, const int64 ItemThisID);// 0x200523bfa041
	void ResponseChosenMark();// 0x200423bfa041
	void RequestUseBackpackItemServer(const int InItemID, const int InItemNum);// 0x200323bfa041
	void RequestToStopVehicleRepairing();// 0x200223bfa041
	void RequestToStartVehicleRepairing(SolarVehiclePawn* InVehicle);// 0x200123bfa041
	void RequestPlayShieldSound(out ShieldSoundData ShieldSound, bool bIsOnly1P);// 0x1ffe23bfa041
	void RequestDisplayAllElectricShops();// 0x1ffd23bfa041
	void RequestCancelRescue();// 0x1ffc23bfa041
	void RemoveTreasureBoxOperator();// 0x1ffb23bfa041
	void RemoveTempComponent(PrimitiveComponent* TargetComp);// 0x1ffa23bfa041
	void RemoveTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag);// 0x1ff923bfa041
	void RemoveShieldUpgradeOperator();// 0x1ff823bfa041
	void RemoveShieldRepairEffectItem();// 0x1ff723bfa041
	void RemoveShieldOperator();// 0x1ff623bfa041
	void RefreshWeaponDataMapAndArray();// 0x1ff523bfa041
	void RefreshTypeItemMapAndArray();// 0x1ff423bfa041
	void RefreshTeammateHUDUI(SolarPlayerState* SelfData);// 0x1ff323bfa041
	void RefreshRenderConsoleVarForSkydive();// 0x1ff223bfa041
	void RefreshMaxPileMapAndArray();// 0x1ff123bfa041
	void RefreshIdItemMapAndArray();// 0x1ff023bfa041
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x1fef23bfa041
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0x1fee23bfa041
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x1fed23bfa041
	void ReceivedOnShieldIdChanged(int LastShieldId);// 0x1fec23bfa041
	void ReceiveAfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1feb23bfa041
	void QuitVehicleWholeShield();// 0x1fea23bfa041
	void QuitVehicleStealth();// 0x1fe923bfa041
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x1fe823bfa041
	void PostNotEnoughEnergyNotice();// 0x1fe723bfa041
	void PlaySquatSound();// 0x1fe623bfa041
	void PlaySpeedUpEffect(bool bIsUp);// 0x1fe523bfa041
	void PlayShieldSoundByType(enum ShieldSoundType);// 0x1fe323bfa041
	void PlayParachuteStartSound();// 0x1fe223bfa041
	void PlayMontageOnOrnament(GameplayTag OrnamentTag, AnimMontage* MontageToPlay);// 0x1fe123bfa041
	void PlayerStateReplicatedForHUD();// 0x1fe023bfa041
	void OnVaultInput();// 0x1fdf23bfa041
	void OnUsingSkillStatusChanged(const GameplayTag Tag, int NewCount);// 0x1fde23bfa041
	void OnUpdateShieldId();// 0x1fdd23bfa041
	void OnUIDurationGameplayEffectRemoved(out const ActiveGameplayEffect ActiveGameplayEffect);// 0x1fdc23bfa041
	void OnUIDurationGameplayEffectApplied(AbilitySystemComponent* ASC, out const GameplayEffectSpec InGameplayEffectSpec, ActiveGameplayEffectHandle InGameplayEffectHandle);// 0x1fdb23bfa041
	void OnUAVSpawnRelatedTagChange(const GameplayTag Tag, int NewCount);// 0x1fda23bfa041
	void OnTeamIDChange();// 0x1fd923bfa041
	void OnTakeDamage__DelegateSignature(const SolarCharacter* Character, out const SolarPointDamageEvent DamageEvent, float HPDamage);// 0x1fd823bfa041
	void OnStartResurrectProgress(const int InTextId, const float InDuration, const float InRemaining, const bool bShowCancel);// 0x1fd723bfa041
	void OnSpawnExpItem();// 0x1fd623bfa041
	void OnSkydiveTraced__DelegateSignature(out const HitResult HitResult);// 0x1fd523bfa041
	void OnSkydiveStageChanged(enum LastStage, enum CurrentStage);// 0x1fd423bfa041
	void OnShowShieldHUD__DelegateSignature(bool bIsShowShieldHUD);// 0x1fd323bfa041
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1fd223bfa041
	void OnShieldValueLowDelegate__DelegateSignature(bool bIsShieldValueLow);// 0x1fd123bfa041
	void OnShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, const enum ShieldRechargeState, bool bFixPreAdd);// 0x1fd023bfa041
	void OnShieldRechargeStart();// 0x1fcf23bfa041
	void OnShieldRechargeProgressBarComplete();// 0x1fce23bfa041
	void OnShieldRechargeProgressBarCancel();// 0x1fcd23bfa041
	void OnShieldRechargeEnd();// 0x1fcc23bfa041
	void OnShieldIDChangedDelegate__DelegateSignature(bool bShiledAvailable, float CurValue, float MaxValue, int QualityColor, bool bIsAdvancedShield);// 0x1fcb23bfa041
	void OnSheildUpFXDelegate__DelegateSignature();// 0x1fca23bfa041
	void OnSheildRechargeDelegate__DelegateSignature();// 0x1fc923bfa041
	void OnSheildBreakDelegate__DelegateSignature();// 0x1fc823bfa041
	void OnReplayCameraModeChanged(enum OldMode, enum CurMode);// 0x1fc723bfa041
	void OnRepItemWeaponParts();// 0x1fc623bfa041
	void OnRepIgnoreScopeSlots();// 0x1fc523bfa041
	void OnRep_WeaponSystemVehicle();// 0x1fc423bfa041
	void OnRep_WeaponSystemComponentChanged();// 0x1fc323bfa041
	void OnRep_WeaponDataMap();// 0x1fc223bfa041
	void OnRep_VJetPackModuleID();// 0x1fc123bfa041
	void OnRep_TypeKeyItemArrayChange();// 0x1fc023bfa041
	void OnRep_TreatmentState(enum LastState);// 0x1fbe23bfa041
	void OnRep_TreatmentCount(int LastCount);// 0x1fbd23bfa041
	void OnRep_SettingEnergyCostChanged();// 0x1fbc23bfa041
	void OnRep_RoleAbilityStartCDServerTime();// 0x1fbb23bfa041
	void OnRep_RoleAbilitySpecHandles();// 0x1fba23bfa041
	void OnRep_ReviveItemCleared();// 0x1fb923bfa041
	void OnRep_RescueState();// 0x1fb823bfa041
	void OnRep_RescuedStartTime(float LastRescuedStartTime);// 0x1fb723bfa041
	void OnRep_PlayBodyHitSound(int LastBodyHitSoundCount);// 0x1fb623bfa041
	void OnRep_PlayBodyHitByPunchSound(int LastBodyHitByPunchSoundCount);// 0x1fb523bfa041
	void OnRep_PendingRegeneration();// 0x1fb423bfa041
	void OnRep_OutVehicleShotState();// 0x1fb323bfa041
	void OnRep_OrnamentMontageInfo(OrnamentMontageInfo LastInfo);// 0x1fb123bfa041
	void OnRep_MaxPileArrayChange();// 0x1fb023bfa041
	void OnRep_MaxExtraEnergyChanged();// 0x1faf23bfa041
	void OnRep_JetPropellingInfo();// 0x1fae23bfa041
	void OnRep_IsDeathVerge();// 0x1fad23bfa041
	void OnRep_IdKeyItemArrayChange();// 0x1fac23bfa041
	void OnRep_HJetPackModuleID();// 0x1fab23bfa041
	void OnRep_ForceParachuteCountDown();// 0x1faa23bfa041
	void OnRep_ExtraEnergyModuleIDChanged();// 0x1fa923bfa041
	void OnRep_EnergyStateChanged();// 0x1fa823bfa041
	void OnRep_EnableCruising();// 0x1fa723bfa041
	void OnRep_DiedTime();// 0x1fa623bfa041
	void OnRep_CurUniqueShieldId();// 0x1fa523bfa041
	void OnRep_CurrShieldValue(float PreviousValue);// 0x1fa423bfa041
	void OnRep_CurrShieldState(enum LastState);// 0x1fa223bfa041
	void OnRep_CurrShieldId(int InLastShieldId);// 0x1fa123bfa041
	void OnRep_CurrentSkydiveStage(enum LastStage);// 0x1fa023bfa041
	void OnRep_CurrentSkillAnimType();// 0x1f9f23bfa041
	void OnRep_CurrentEnergyChanged(float LastEnergyValue);// 0x1f9e23bfa041
	void OnRep_CurChargingDeathBoxChanged(DeathTreasureBox* PreBox);// 0x1f9d23bfa041
	void OnRep_CruiseState();// 0x1f9c23bfa041
	void OnRep_CharacterCapsuleSizeOverride();// 0x1f9b23bfa041
	void OnRep_CapsuleID();// 0x1f9a23bfa041
	void OnRep_BackpackPropellingMode();// 0x1f9923bfa041
	void OnRep_AssignedCharacterID();// 0x1f9823bfa041
	void OnRep_ActiveInfiniteAmmo();// 0x1f9723bfa041
	void OnRep_ActiveEMP();// 0x1f9623bfa041
	void OnPlayingScrubCharactersCreated();// 0x1f9523bfa041
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x1f9423bfa041
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x1f9323bfa041
	void OnPlayerDataRepAsPlayer(byte TeamID);// 0x1f9223bfa041
	void OnPlayerBackpackEnergyUpdate();// 0x1f9123bfa041
	void OnPickupSettingChanged();// 0x1f9023bfa041
	void OnOwnTeammateHUDCreated(SolarPlayerState* SelfData);// 0x1f8f23bfa041
	void OnOutVehicleStateChanged();// 0x1f8e23bfa041
	void OnMaxEnergyUpdateEvent__DelegateSignature(float InMaxValue);// 0x1f8d23bfa041
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* LocalPlayerSpectateInfo);// 0x1f8c23bfa041
	void OnLocalPlayerSpectateMeStatusChanged__DelegateSignature(SolarCharacter* Character, bool bIsSpectating);// 0x1f8b23bfa041
	void OnLevelSequence_PlayAirborneJumpSound();// 0x1f8a23bfa041
	void OnJogSetClient__DelegateSignature(bool bSet);// 0x1f8923bfa041
	void OnHUDTeamPosSet__DelegateSignature(byte PosInTeam);// 0x1f8823bfa041
	void OnHUDRescueBtnActivitySet__DelegateSignature(bool bIsActive);// 0x1f8723bfa041
	void OnHUDNickNameSet__DelegateSignature(FString NickName);// 0x1f8623bfa041
	void OnHUDDistanceSet__DelegateSignature(float Distance);// 0x1f8523bfa041
	void OnHUDDistanceDisplaySet__DelegateSignature(bool bShown);// 0x1f8423bfa041
	void OnHealthUpdated__DelegateSignature(const SolarCharacter* Character);// 0x1f8323bfa041
	bool OnExitOpenTreasureBox();// 0x1f8223bfa041
	bool OnEnterOpenTreasureBox();// 0x1f8123bfa041
	void OnEnterCombat(enum battleType);// 0x1f7f23bfa041
	void OnEnergyStateUpdateEvent__DelegateSignature(byte InEnergyState);// 0x1f7e23bfa041
	void OnDrivingStateChanged(SolarVehiclePawn* SolarVehicle, enum NewDriveState, enum OldDriveState, int NewSeatIndex, int OldSeatIndex);// 0x1f7d23bfa041
	void OnDetectRadarStation(bool bEnter, SolarRadarStation* InRadarStation);// 0x1f7c23bfa041
	void OnDetectElectricShop(bool bEnter, SolarElectricShop* InElectricShop);// 0x1f7b23bfa041
	void OnCurShieldValueChangedDelegate__DelegateSignature(enum WidgetState, float InCurValue, float InChangeValue, FString InSolarPlayerID);// 0x1f7923bfa041
	void OnCurEnergyUpdateEvent__DelegateSignature(float InCurValue, float InChangeValue);// 0x1f7823bfa041
	void OnConsumableNumChangedEvent__DelegateSignature();// 0x1f7723bfa041
	void OnClientMovementComponentEnabled();// 0x1f7623bfa041
	void OnChargeInfoUpdateEvent__DelegateSignature(SolarCharacter* OwnerCharacter, const float ChargeFrequency, const float ChargeQuantity);// 0x1f7523bfa041
	void OnCharacterSpawnDeathBox(const bool bCheat, const bool bKilledByTeammate, const int InExpItemCount, const int InMaxSheildMatCount);// 0x1f7423bfa041
	void OnCharacterSkinReset__DelegateSignature();// 0x1f7323bfa041
	void OnCharacterDeathEnd();// 0x1f7223bfa041
	void OnCharacterDaraSet__DelegateSignature(int DataID);// 0x1f7123bfa041
	void OnCancelResurrectProgress(const int InTextId);// 0x1f7023bfa041
	void OnBatteryIdUpdateEvent__DelegateSignature(int InBatteryId);// 0x1f6f23bfa041
	void OnBackpackWeaponPartUpdateEvent__DelegateSignature();// 0x1f6e23bfa041
	void OnBackpackItemUpdateEvent__DelegateSignature();// 0x1f6d23bfa041
	void OnBackpackEquipUpdateEvent__DelegateSignature();// 0x1f6c23bfa041
	void OnBackpackEnergyUpdateEvent__DelegateSignature();// 0x1f6b23bfa041
	void OnApplyDyingDamage(float DeltaTime);// 0x1f6a23bfa041
	void NotifyLeaveSafeArea();// 0x1f6923bfa041
	void NotifyEnterSafeArea();// 0x1f6823bfa041
	void NetTriggerRadarStation();// 0x1f6723bfa041
	bool NetGetOnVehicle(SolarVehiclePawn* InVehicle, int SeatIndex);// 0x1f6623bfa041
	bool NetGetOffVehicle(bool bShouldEject, bool bNeedNotify);// 0x1f6523bfa041
	void MultiSetGetOffVehicleLocationAndRotation(const Vector DropLocation, float TeleportRotYaw);// 0x1f6423bfa041
	void MultiResetCharacter(const Vector Location, const Rotator Rotation, bool bClearWeapons);// 0x1f6323bfa041
	void MultiOnRebirth();// 0x1f6223bfa041
	void MulticastPlayDuckRollingHitCharacterEffect(SolarCharacter* TargetCharacter, const Vector HitLocation, bool bNoDamage);// 0x1f6123bfa041
	void MarkWarningOnWorld();// 0x1f6023bfa041
	void MarkQuickChatOnWorld(FString IconImg);// 0x1f5f23bfa041
	void MarkPointOnWorld();// 0x1f5e23bfa041
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x1f5d23bfa041
	void K2_SetCanShowBattlePrompt(bool NewValue);// 0x1f5c23bfa041
	void K2_RemoveGameplayTag(GameplayTag Tag, bool bReplicated);// 0x1f5b23bfa041
	void K2_PlaySoundGroup(FName GroupName, SoundGroupPlayContext Context);// 0x1f5923bfa041
	bool K2_IsSwimming();// 0x1f5823bfa041
	bool K2_IsInAir();// 0x1f5723bfa041
	bool K2_HasMatchingGameplayTag(GameplayTag Tag);// 0x1f5623bfa041
	WidgetComponent* K2_GetTeamHUDComp();// 0x1f5523bfa041
	HUD* K2_GetControlledHUD();// 0x1f5423bfa041
	void K2_AddGameplayTag(GameplayTag Tag, bool bReplicated);// 0x1f5323bfa041
	bool IsWeaponsAvailable();// 0x1f5223bfa041
	bool IsWeaponCauseTeamDamage();// 0x1f5123bfa041
	bool IsViewportFocused();// 0x1f5023bfa041
	bool IsVerticalJetFlying();// 0x1f4f23bfa041
	bool IsVehicleFire();// 0x1f4e23bfa041
	bool IsTeammateWithLocalOrSpecTargetPlayer(bool bIncludingSelf);// 0x1f4d23bfa041
	bool IsTeammateWith(const SolarCharacter* Other);// 0x1f4c23bfa041
	bool IsTeamHUDValid();// 0x1f4b23bfa041
	bool IsSprinting();// 0x1f4a23bfa041
	bool IsSpectatingOtherPlayer();// 0x1f4923bfa041
	bool IsSkyCharging();// 0x1f4823bfa041
	bool IsShieldValueLow();// 0x1f4723bfa041
	bool IsShieldMaxLevel();// 0x1f4623bfa041
	bool IsShieldFullyCharged();// 0x1f4523bfa041
	bool IsScopeOpening();// 0x1f4423bfa041
	bool IsRescuing();// 0x1f4323bfa041
	bool IsReplayPlaying();// 0x1f4223bfa041
	bool IsReloading();// 0x1f4123bfa041
	bool IsRechargerEnough();// 0x1f4023bfa041
	bool IsPlayerLocallyControlledOrSpectated();// 0x1f3f23bfa041
	bool IsPileCharging();// 0x1f3e23bfa041
	bool IsOwnerOffline();// 0x1f3d23bfa041
	bool IsOpeningTreasureBox();// 0x1f3c23bfa041
	bool IsNoCharging();// 0x1f3b23bfa041
	bool IsMovingOnGround(enum VelocityStatus);// 0x1f3923bfa041
	bool IsMeleeAttacking();// 0x1f3823bfa041
	bool IsMaxLevelInGame();// 0x1f3723bfa041
	bool IsLocalPlayerSpectateAsThirdPerson();// 0x1f3623bfa041
	bool IsLaunching();// 0x1f3523bfa041
	bool IsJumping();// 0x1f3423bfa041
	bool IsJetFlying();// 0x1f3323bfa041
	bool IsInVehicle();// 0x1f3223bfa041
	bool IsInSkywardDive();// 0x1f3123bfa041
	bool IsInsideVehicle();// 0x1f3023bfa041
	bool IsInShoulderOrScopeView();// 0x1f2f23bfa041
	bool IsInScopeView();// 0x1f2e23bfa041
	bool IsInRescueState();// 0x1f2d23bfa041
	bool IsInMassInvisibilityPrepare();// 0x1f2c23bfa041
	bool IsInMassInvisibility();// 0x1f2b23bfa041
	bool IsInInvisibleStatus();// 0x1f2a23bfa041
	bool IsInDeathVerge();// 0x1f2923bfa041
	bool IsHumanCharacter();// 0x1f2823bfa041
	bool IsHorizontalJetFlying();// 0x1f2723bfa041
	bool IsHoldingWeapon();// 0x1f2623bfa041
	bool IsFullHealth();// 0x1f2523bfa041
	bool IsFullBodyMeleeAttacking();// 0x1f2423bfa041
	bool IsFiring();// 0x1f2323bfa041
	bool IsExistWeaponSeatedVehicleSeat();// 0x1f2223bfa041
	bool IsEnergyCostAndChargeDisabled();// 0x1f2123bfa041
	bool IsE2M();// 0x1f2023bfa041
	bool IsDying();// 0x1f1f23bfa041
	bool IsDoingAnyAttack();// 0x1f1e23bfa041
	bool IsCruising();// 0x1f1d23bfa041
	bool IsClimbing(bool bIncludeWallRun);// 0x1f1c23bfa041
	bool IsCharacterDebugBlockDetectionEnabled();// 0x1f1b23bfa041
	bool IsCanShowTeammateHUD();// 0x1f1a23bfa041
	bool IsBoxCharging();// 0x1f1923bfa041
	bool IsBolting();// 0x1f1823bfa041
	bool IsBigRechargerEnough();// 0x1f1723bfa041
	bool IsBeingSpectated();// 0x1f1623bfa041
	bool IsBeingRescue();// 0x1f1523bfa041
	bool IsAllEnergyFull();// 0x1f1423bfa041
	bool IsAiming();// 0x1f1323bfa041
	bool IsAbleToContinueRecharge();// 0x1f1223bfa041
	void InputRoleAbilityTacticalReleased();// 0x1f1123bfa041
	void InputRoleAbilityTacticalPressed();// 0x1f1023bfa041
	void InputRoleAbilitySuperReleased();// 0x1f0f23bfa041
	void InputRoleAbilitySuperPressed();// 0x1f0e23bfa041
	void InputCancelRoleAbility();// 0x1f0d23bfa041
	void InitShieldUpgradeMatMaxPile();// 0x1f0c23bfa041
	void InitShieldPropertyByConfig();// 0x1f0b23bfa041
	void InitShieldOperatorTimeline();// 0x1f0a23bfa041
	void InitializeCharacterData(const int InCharacterId, const int InSkinID);// 0x1f0923bfa041
	void InitGameStatisticEquipment();// 0x1f0823bfa041
	void InitCharacterDefaultShield(out const SolarItemData InShiledID);// 0x1f0723bfa041
	void IncreaseRechargedTimes();// 0x1f0623bfa041
	void HideShieldUpgradeOperator();// 0x1f0523bfa041
	void HideShieldRepairEffectItem();// 0x1f0423bfa041
	void HideShieldOperator();// 0x1f0323bfa041
	void HideRescueInjector();// 0x1f0223bfa041
	bool HasBlockBetweenUs(const Actor* A, const Actor* B, const bool bIsVehicle, const bool bShowLog);// 0x1f0123bfa041
	bool HasAnyShieldEquiped();// 0x1f0023bfa041
	bool HasAnyRecharger();// 0x1eff23bfa041
	bool HandleDying(byte ChangeType, Controller* InstigatorController);// 0x1efe23bfa041
	<enum,int> GetWeaponPartsMap();// 0x1efc23bfa041
	int[] GetWeaponPartsArray();// 0x1efb23bfa041
	bool GetWeaponItemDataBySlot(const int InSlot, out SolarItemData ItemData);// 0x1efa23bfa041
	<int,SolarItemData> GetWeaponDataMap();// 0x1ef923bfa041
	int GetVerticalJetFlyTotalTimes();// 0x1ef823bfa041
	int GetVerticalJetFlyRestTimes();// 0x1ef723bfa041
	void GetVerticalJetFlyCharging(out float OutValue, out float OutPercent);// 0x1ef623bfa041
	void GetVerticalJetFlyCD(out float OutValue, out float OutPercent);// 0x1ef523bfa041
	SolarVehicleWeapon* GetVehicleWeapon();// 0x1ef423bfa041
	byte GetVehicleAbilityCounter();// 0x1ef323bfa041
	<enum,SolarItemData> GetTypeKeyItemMap();// 0x1ef223bfa041
	float GetTreatmentRemaining();// 0x1ef123bfa041
	float GetTreatmentDuration();// 0x1ef023bfa041
	void GetTeamHUDTranslucentData(out float CheckDistance, out float TranslucentValue);// 0x1eef23bfa041
	UserWidget* GetTeamHUD();// 0x1eee23bfa041
	SolarSpectateInfo* GetSpectateInfo();// 0x1eed23bfa041
	AnimInstance* GetSpecAnimInstance(enum SpecAnimType);// 0x1eeb23bfa041
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x1eea23bfa041
	SolarPlayerState* GetSolarPlayerState();// 0x1ee923bfa041
	FString GetSolarPlayerID();// 0x1ee823bfa041
	SolarPlayerController* GetSolarPlayerController(bool bSkipPossessCheck);// 0x1ee723bfa041
	SolarCharacterMovementComponent* GetSolarCharacterMovementComponent();// 0x1ee623bfa041
	SolarBotAIController* GetSolarAIController();// 0x1ee523bfa041
	SolarAbilitySystemComponent* GetSolarAbilitySystemComponentSimple();// 0x1ee423bfa041
	Vector GetSocketLocationAtPrimaryMesh(out const FName InSocketName);// 0x1ee323bfa041
	float GetSkydiveLandingHeight();// 0x1ee223bfa041
	CharacterSkinConfig* GetSkinConfig(const int InSkinID);// 0x1ee123bfa041
	int GetShieldWorthByID(const int InShieldID);// 0x1ee023bfa041
	int GetShieldUpgradeNeedMatNum();// 0x1edf23bfa041
	int GetShieldUpgradeMatNum();// 0x1ede23bfa041
	int GetShieldUpgradeMatMaxPile();// 0x1edd23bfa041
	float GetShieldRecoveryAmount();// 0x1edc23bfa041
	float GetShieldRechargeRemainningTime();// 0x1edb23bfa041
	float GetShieldRechargeDuration();// 0x1eda23bfa041
	int GetShieldMaxLevel();// 0x1ed923bfa041
	SolarCharacterMovementComponent* GetSafeSolarCharacterMovement();// 0x1ed823bfa041
	enum GetRoleAbilityState(byte RoleAbilityIndex);// 0x1ed623bfa041
	SolarUAVRescue* GetRescuingUAV();// 0x1ed523bfa041
	SolarCharacter* GetRescuingCharacter();// 0x1ed423bfa041
	float GetRescueTime();// 0x1ed323bfa041
	float GetRecoveryDuartionModify();// 0x1ed223bfa041
	float GetRecoveryAmountModify();// 0x1ed123bfa041
	SolarUAVRescue* GetPermanentRescueUAV();// 0x1ed023bfa041
	Rotator GetNormalizeCameraRotation();// 0x1ecf23bfa041
	bool GetNewItemData(int InItemID, int InItemNum, out SolarItemData OutItemData);// 0x1ece23bfa041
	byte GetMyTeamID();// 0x1ecd23bfa041
	float GetMaxShieldValue();// 0x1ecc23bfa041
	float GetMaxExtraEnergy();// 0x1ecb23bfa041
	float GetMaxEnergy();// 0x1eca23bfa041
	SolarPlayerState* GetLastDownBy();// 0x1ec923bfa041
	int GetJetPackModuleLevel(const bool bVertical);// 0x1ec823bfa041
	int GetItemNumById(const int InItemID);// 0x1ec723bfa041
	int GetItemMaxPile(int InItemID);// 0x1ec623bfa041
	bool GetItemDataByType(const enum ItemType, out SolarItemData ItemData);// 0x1ec523bfa041
	bool GetItemDataById(const int InItemID, out SolarItemData ItemData);// 0x1ec423bfa041
	bool GetIsActiveEMP();// 0x1ec323bfa041
	Vector GetInputVector();// 0x1ec223bfa041
	<int,SolarItemData> GetIdKeyItemMap();// 0x1ec123bfa041
	int GetHorizontalJetFlyTotalTimes();// 0x1ec023bfa041
	int GetHorizontalJetFlyRestTimes();// 0x1ebf23bfa041
	void GetHorizontalJetFlyCharging(out float OutValue, out float OutPercent);// 0x1ebe23bfa041
	void GetHorizontalJetFlyCD(out float OutValue, out float OutPercent);// 0x1ebd23bfa041
	int GetGenericSkillLevel();// 0x1ebc23bfa041
	float GetFactorialAttributeModifies(int AttributeID);// 0x1ebb23bfa041
	int GetExtraEnergyModuleID();// 0x1eba23bfa041
	float GetEnergyConsumptionModify();// 0x1eb923bfa041
	enum GetDriveState();// 0x1eb723bfa041
	Actor* GetDamagerCauserActor();// 0x1eb623bfa041
	float GetCurrShieldValue();// 0x1eb523bfa041
	int GetCurrShieldID();// 0x1eb423bfa041
	float GetCurrExtraEnergy();// 0x1eb323bfa041
	SolarPlayerWeapon* GetCurrentWeapon();// 0x1eb223bfa041
	enum GetCurrentWalkMode();// 0x1eb123bfa041
	float GetCurrentVehicleAbilityCooldownRemaining(byte AbilityIndex);// 0x1eb023bfa041
	float GetCurrentVehicleAbilityCooldownDuration(byte AbilityIndex);// 0x1eaf23bfa041
	int GetCurrentShieldLevel();// 0x1eae23bfa041
	enum GetCurrentCustomJumpType();// 0x1eac23bfa041
	float GetCurrEnergy();// 0x1eab23bfa041
	float GetCumulativeAttributeModifies(int AttributeID);// 0x1eaa23bfa041
	PlayerController* GetControllingOrReplayController();// 0x1ea923bfa041
	StaticMesh* GetClipMeshOfHoldingWeapon();// 0x1ea823bfa041
	int GetClassTypeSkillLevel();// 0x1ea723bfa041
	void GetChargingStateForUI(out bool IsSky, out bool IsPile, out bool IsBox, out bool IsE2M);// 0x1ea623bfa041
	Rotator GetCharacterLookAt();// 0x1ea523bfa041
	bool GetCanShowBattlePrompt();// 0x1ea423bfa041
	Rotator GetCameraRotation();// 0x1ea323bfa041
	Vector GetCameraLocation();// 0x1ea223bfa041
	void GetAllSkydiveLandingEffects(out ParticleSystemComponent*[] OutEffects);// 0x1ea123bfa041
	void GetAllSkydiveFlyingEffects(out ParticleSystemComponent*[] OutEffects);// 0x1ea023bfa041
	void GatheringDeathBoxItem(const bool bCheat, const bool bKilledByTeammate, const int InExpItemCount, const int InMaxSheildMatCount);// 0x1e9f23bfa041
	void GameStatisticsWeaponHit(SolarCharacterBase* DamageCauserCharacter, out const SolarPointDamageEvent DamageInfo, const float ActualDamage);// 0x1e9e23bfa041
	void GameStatisticsVehicleLanded(out const HitResult Hit);// 0x1e9d23bfa041
	void GameStatisticsVehicleInAir();// 0x1e9c23bfa041
	void GameStatisticsVehicleHit(Actor* DamageCauser, float HitDamage);// 0x1e9b23bfa041
	void GameStatisticsItemChange(const int ItemID, const enum PickType, const int OldNum, const int NewNum, const int TriggerType);// 0x1e9923bfa041
	void GameStatisticsGodWeapon();// 0x1e9823bfa041
	void GameStatisticsGetOnVehicleReason(int Type, FString Type_Parameter);// 0x1e9723bfa041
	void GameStatisticsGetOffVehicleReason(const SolarWeapon* CurrentWeapon, FString Param);// 0x1e9623bfa041
	void GameStatisticsEquipment();// 0x1e9523bfa041
	void GameStatisticsElectricShopActivated(out const Vector InLocation);// 0x1e9423bfa041
	void GameStatisticsDamageReason(out const SolarPointDamageEvent InDamageEvent, const float ActualDamage);// 0x1e9323bfa041
	void GameStatisticsCharacterSkill(bool bIsSuperSkill);// 0x1e9223bfa041
	void GameStatisticsBackpackFly(out const BackpackStatisticsInfo InBackpackStatisticsInfo);// 0x1e9023bfa041
	void ForceBreakSprintState();// 0x1e8f23bfa041
	void FindMostValuableItemClient(const SolarItemData[] ItemData, const byte FromWhichTeammate);// 0x1e8e23bfa041
	void ExitDyingMovement();// 0x1e8d23bfa041
	void ExitDeathVerge(bool bClientSimulation);// 0x1e8c23bfa041
	void ExecuteGM(FString GMType, FString Param1, FString Param2);// 0x1e8b23bfa041
	void EnterVehicleWholeShield(MaterialInterface* ShieldMaterialSource);// 0x1e8a23bfa041
	void EnterVehicleStealth();// 0x1e8923bfa041
	void EnterDyingMovement();// 0x1e8823bfa041
	void EnterDeathVerge(bool bClientSimulation);// 0x1e8723bfa041
	void EnableCharacterDebugInfo_BlockDetection(bool bEnabled);// 0x1e8623bfa041
	void DoReceivingPoisonDamage();// 0x1e8523bfa041
	void DoOperation(enum OperationType, Object* Target);// 0x1e8323bfa041
	void DisCardShield();// 0x1e8223bfa041
	void CreateTreasureBoxOperator();// 0x1e8123bfa041
	void CreateShieldUpgradeOperator();// 0x1e8023bfa041
	void CreateShieldRepairEffectItem();// 0x1e7f23bfa041
	void CreateShieldOperator();// 0x1e7e23bfa041
	WidgetComponent* CreateOwnTeammateHUDInternal(SolarPlayerState* SelfData);// 0x1e7d23bfa041
	WidgetComponent* CreateOwnTeammateHUD();// 0x1e7c23bfa041
	void ClientUpdateTracking(int Mode, int Index, const Vector Location);// 0x1e7b23bfa041
	void ClientSuperRadarOnceScanned(int ScannedNum);// 0x1e7a23bfa041
	void ClientStartRecharge(const float InCurrentValue, const float InRecoveryDuration, const float InRecoveryAmount, const enum ShieldRechargeType, const int InShieldContributorCharacterId, bool bFixPreAdd);// 0x1e7823bfa041
	void ClientSetServerBlockDetectionResult(FString Info);// 0x1e7723bfa041
	void ClientRPCDisplayAllElectricShops(const Vector[] AllPositions);// 0x1e7623bfa041
	void ClientRestoreActiveAbilitiesOnReconnected(const RestoreAbilityInfo[] SpecHandles);// 0x1e7423bfa041
	void ClientReceiveVehicleWeaponMessageArray(const PlayerWeaponMsg[] InPlayerWeaponMessageArray);// 0x1e7323bfa041
	void ClientReceiveVehicleWeaponMessage(const PlayerWeaponMsg InPlayerWeaponMessage);// 0x1e7223bfa041
	void ClientReceiveScanResult(const ScannedInfo_NetQuantize[] ScannedDatas, const float SpanTimer);// 0x1e7023bfa041
	void ClientReceiveCharacterWeaponMessageArray(const PlayerWeaponMsg[] InPlayerWeaponMessageArray);// 0x1e6f23bfa041
	void ClientReceiveCharacterWeaponMessage(const PlayerWeaponMsg InPlayerWeaponMessage);// 0x1e6c23bfa041
	void ClientRadarOnceScanned(int ScannedNum);// 0x1e6b23bfa041
	void ClientPlaySoundGroup(const FName GroupName);// 0x1e6a23bfa041
	void ClientPlayKillEffect(const SolarWeapon* AttackerWeapon);// 0x1e6923bfa041
	void ClientPlayHitEffect(const HitResult HitResult, class SolarBullet BulletClass, const enum HitType, const PlayerController* Attacker, const Vector RelativeVector, const float VFXScale, const SolarWeapon* AttackerWeapon);// 0x1e6723bfa041
	void ClientOpenAirdropResponse(const bool bIsOpening);// 0x1e6623bfa041
	void ClientOnTriggerCharacterDown();// 0x1e6523bfa041
	void ClientOnShieldUpgrade();// 0x1e6423bfa041
	void ClientOnReconnecting(const ReconnectionParams Params);// 0x1e6223bfa041
	void ClientOnContinuousTreatmentStarted();// 0x1e6123bfa041
	void ClientNotifyMarkedBySuperRadar(float InRadarLifeTime, const GameplayTag InTag);// 0x1e6023bfa041
	void ClientNotifyMarkedByOnceScan(float InRadarLifeTime, const GameplayTag InTag);// 0x1e5f23bfa041
	void ClientNotifyGameProgressCondition(out const GameplayTag InProgressTag);// 0x1e5e23bfa041
	void ClientNotifyCharacterExposed(float InRadarLifeTime, const GameplayTag InTag);// 0x1e5d23bfa041
	void ClientNoticePickup(const int ItemID, const int ItemQuality);// 0x1e5c23bfa041
	void ClientLeaveFromSkywardDiveLauncher(SkywardDiveLauncher* InLauncher);// 0x1e5b23bfa041
	void ClientKilledCharacter();// 0x1e5a23bfa041
	void ClientHideShieldOperator();// 0x1e5923bfa041
	void ClientEnterAndRefreshSkywardDiveLauncher(SkywardDiveLauncher* InLauncher, bool bInHasAvailableDevice);// 0x1e5823bfa041
	void ClientCreateTreatEffect();// 0x1e5723bfa041
	void ClientCompleteRecharge(const float InCurrentValue, const float InChangeValue);// 0x1e5623bfa041
	void ClientCancelRecharge(const bool BreakAnimOnly, const float InCurrentValue, const float InChangeValue, const float MaxShieldVal, const enum CancelReason);// 0x1e5423bfa041
	void ClientBroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, byte RoleAbilityIndex);// 0x1e5323bfa041
	void ClientAddHitTrace(const HitTraceInfo Info);// 0x1e5223bfa041
	void ClientAckValidShieldUpgradeInteract(SolarShieldUpgradeItemShop* InShop, enum AckReason);// 0x1e5023bfa041
	void ClearGameStatisticEquipment();// 0x1e4f23bfa041
	void ClearDeathBoxData();// 0x1e4e23bfa041
	float CheckSelfAltitudeInstantlyByTrace(out HitResult HitGeography, bool bCheckEveryFrame, float traceDistOverride, bool bSimpleCheck);// 0x1e4d23bfa041
	void ChangeSeatByIndex(int TargetSeatIndex);// 0x1e4c23bfa041
	void ChangeSeatByDefault();// 0x1e4b23bfa041
	void CGM_SpawnDeathBox();// 0x1e4a23bfa041
	void CGM_EnterDeath();// 0x1e4923bfa041
	bool CanStickOutOfVehicle(bool bIgnoreSelfWeaponCheck);// 0x1e4823bfa041
	bool CanRebirth();// 0x1e4723bfa041
	bool CanOperateBackpack();// 0x1e4623bfa041
	bool CanMarkPointOnWorld();// 0x1e4523bfa041
	void CancelVehicleAbility();// 0x1e4423bfa041
	void CancelTreatment();// 0x1e4323bfa041
	void CalculateBubbleKillNum(out SolarCharacter*[] InstigatorCharacters, Actor* AttackWeapon);// 0x1e4223bfa041
	void BroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, byte RoleAbilityIndex);// 0x1e4123bfa041
	void BreakRechargeShield();// 0x1e4023bfa041
	void BindUpdateHUDToOnHealthUpdateDelegateProc(const SolarCharacter* Character);// 0x1e3f23bfa041
	void BindLocalPlayerSpectateDelegates(SolarSpectateInfo* LocalSpecInfo);// 0x1e3e23bfa041
	void BindActorToSelfTeam(Actor* Actor);// 0x1e3d23bfa041
	void BeginplayPending__DelegateSignature();// 0x1e3c23bfa041
	void BeginPlayBlueprint();// 0x1e3b23bfa041
	void AutoMarkItemForTeammateClient(const int64 ItemThisID);// 0x1e3a23bfa041
	void ApplyVehicleAbility(byte AbilityIndex);// 0x1e3923bfa041
	void AfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1e3823bfa041
	void AfterDealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1e3023bfa041
	void AddTrackingTarget(SolarCharacterBase* Tracked);// 0x1e2f23bfa041
	void AddTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag, float Value);// 0x1e2e23bfa041
	void AddDebugString(FString DebugString);// 0x1e2d23bfa041
	void AddCurrExtraEnergyValue(float DeltaEnergy);// 0x1e2c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCharacterBase.Character.Pawn.Actor.Object
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x4f4, Size: 0x4]
	SolarAbilityComponent* SolarAbilityComponent;//[Offset: 0x4f8, Size: 0x8]
	bool bPendingEnterWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	SolarCharacterBase* InstigatorCharacter;//[Offset: 0x508, Size: 0x8]
	ParticleSystem* DedicatedDeathEffect;//[Offset: 0x510, Size: 0x8]
	ParticleSystem* DeathEffectSoft;//[Offset: 0x518, Size: 0x28]
	float VehicleCollisionProtectionTimeOnJumpingOff;//[Offset: 0x574, Size: 0x4]
	float PushYScale;//[Offset: 0x578, Size: 0x4]
	float PushXScaleOnSwimming;//[Offset: 0x57c, Size: 0x4]
	float PushYScaleOnSwimming;//[Offset: 0x580, Size: 0x4]
	float PushZScaleOnSwimming;//[Offset: 0x584, Size: 0x4]
	SolarAbilitySystemComponent* SolarAbilitySystemComponent;//[Offset: 0x588, Size: 0x8]
	bool bHoldSignificanceWhenDyingForAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0x5b8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x5c0, Size: 0x8]
	CharacterSoundConfig* CharacterSoundConfig;//[Offset: 0x5c8, Size: 0x8]
	void SetAttributeWithGAS(const GameplayAttribute InAttribute, byte ModifyType, float InValue);// 0x1e2a23bfa041
	void ResetAudioComponentTransform();// 0x1e2923bfa041
	void PostAkEventByName(FString EventName1, FString EventName2);// 0x1e2823bfa041
	void OnRep_PendingEnterWater();// 0x1e2723bfa041
	void MulticastAddHitTrace(const HitTraceInfo Info);// 0x1e2423bfa041
	bool K2_IsInWater();// 0x1e2323bfa041
	bool K2_IsAlive();// 0x1e2223bfa041
	bool IsPlayerLocallyControlled();// 0x1e2123bfa041
	bool IsInWater();// 0x1e2023bfa041
	bool IsInSight(out const Vector InTargetPos, const float InMaxAngle, const bool bHorizontalOnly);// 0x1e1f23bfa041
	bool IsInRoom();// 0x1e1e23bfa041
	bool IsBlocked(const Actor* InOtherActor);// 0x1e1d23bfa041
	bool InSameTeamWithFirstPlayerController();// 0x1e1c23bfa041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x1e1b23bfa041
	FString GetSoundEventString(enum SoundOpt);// 0x1e1923bfa041
	SolarAkGameObject* GetSolarAkGameObject();// 0x1e1823bfa041
	SolarAbilitySystemComponent* GetSafeASC();// 0x1e1723bfa041
	float GetMaxHealth();// 0x1e1623bfa041
	float GetCurrentHealth();// 0x1e1523bfa041
	enum GetCharacterType();// 0x1e1323bfa041
	Vector GetCharacterLocation(bool bMiddle);// 0x1e1223bfa041
	Vector GetCharacterDirection();// 0x1e1123bfa041
	SolarBackpackComponent* GetBackpack();// 0x1e1023bfa041
	void ClientOnPushedByVehicle();// 0x1e0f23bfa041
	bool CheckOpenParticleOptimization(int Bias);// 0x1e0e23bfa041
	void ChangeCurrentHealthWithGAS(byte ModifyType, float InValue);// 0x1e0d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0x10]
	FieldPathProperty Attribute;//[Size: 0x20]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: HitTraceInfo
	Vector_NetQuantizeNormal TraceDirection;//[Offset: 0x0, Size: 0xc]
	float Damage;//[Offset: 0xc, Size: 0x4]
	enum WeaponType;//[Offset: 0x10, Size: 0x1]
	bool bIsVehicleHitTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SpawnedActorHandle
	uint32 Handle;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ReconnectionParams
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAbilityComponent.ActorComponent.Object
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectMap;//[Offset: 0xb8, Size: 0x50]
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectsThisTick;//[Offset: 0x108, Size: 0x50]
	ReplicateEffectData[] ReplicateEffectDatas;//[Offset: 0x158, Size: 0x10]
	bool CharacterWeaponDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool CharacterMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	float MoveSpeedCoeffient;//[Offset: 0x174, Size: 0x4]
	MaterialInterface* OriginalMaterial;//[Offset: 0x178, Size: 0x8]
	float ShieldRechargeCostCoefficient;//[Offset: 0x180, Size: 0x4]
	void OnRep_SpeedCoeffient();// 0x492f23bfa041
	void OnRep_ReplicateEffectData();// 0x492e23bfa041
	int GetCharacterLevel();// 0x492d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAbilityEffect.Object
	SoftObjectPath EffectIconPath;//[Offset: 0x28, Size: 0x18]
	SolarAttributeModifier[] AttributeModifiers;//[Offset: 0x40, Size: 0x10]
	bool bAllowMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	SolarCharacterBase* AbilityEffectAffectingCharacter;//[Offset: 0x110, Size: 0x8]
	SolarAbilityComponent* AbilityEffectAffectingAbilityComponent;//[Offset: 0x118, Size: 0x8]
	SolarAbility* AffectingAbility;//[Offset: 0x120, Size: 0x8]
	FString ExtraInfo;//[Offset: 0x128, Size: 0x10]
	<FString,float> AttributeParamMap;//[Offset: 0x138, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAttributeModifier
	byte SolarAttributeType;//[Offset: 0x0, Size: 0x1]
	enum AttributeDurationType;//[Offset: 0x1, Size: 0x1]
	enum AttributeDurationSourceType;//[Offset: 0x2, Size: 0x1]
	float AttributeModifyDuration;//[Offset: 0x4, Size: 0x4]
	FString AttributeModifyDurationSourceKey;//[Offset: 0x8, Size: 0x10]
	float AttributeModifyMinDistance;//[Offset: 0x18, Size: 0x4]
	float AttributeModifyMaxDistance;//[Offset: 0x1c, Size: 0x4]
	CurveFloat* AttributeDistanceScaleCurve;//[Offset: 0x20, Size: 0x8]
	bool AttributeUseTargetValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float AttributeTargetValue;//[Offset: 0x2c, Size: 0x4]
	enum AttributeChangeValueSourceType;//[Offset: 0x30, Size: 0x1]
	float AttributeChangeValue;//[Offset: 0x34, Size: 0x4]
	float AttributeChangeValueForVehicle;//[Offset: 0x38, Size: 0x4]
	FString AttributeChangeValueSourceKey;//[Offset: 0x40, Size: 0x10]
	bool AttributeChangeValueIsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum AttributeChangeSpeedSourceType;//[Offset: 0x58, Size: 0x1]
	FString AttributeChangeSpeedSourceKey;//[Offset: 0x60, Size: 0x10]
	float AttributeChangeSpeed;//[Offset: 0x70, Size: 0x4]
	bool AttributeApplyChargingScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	int[] AttributeExtraIntParam;//[Offset: 0x78, Size: 0x10]
	float[] AttributeExtraFloatParam;//[Offset: 0x88, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAbility.Actor.Object
	class SolarAbility* MyAbilityClass;//[Offset: 0x228, Size: 0x8]
	class SolarAbilityEffect[] AbilityEffectClasses;//[Offset: 0x230, Size: 0x10]
	SolarCharacter* AbilitySourceCharacter;//[Offset: 0x240, Size: 0x8]
	Transform SpawnTransform;//[Offset: 0x250, Size: 0x30]
	bool InstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool DoNotAutoApply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	bool ApplyToSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 0x1]
	bool RadialAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 0x1]
	float RadialAbilityRadius;//[Offset: 0x284, Size: 0x4]
	bool bRadialIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bRadialIgnoreVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	bool CheckSourceToTargetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 0x1]
	bool EnableAbilityDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 0x1]
	bool bActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	FString ExtraInfo;//[Offset: 0x290, Size: 0x10]
	Actor* InitiatorActor;//[Offset: 0x2a0, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x2a8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x2b0, Size: 0x8]
	<FString,float> EffectParams;//[Offset: 0x2b8, Size: 0x50]
	void WeaponApplyAbility(const Object* WorldContextObject, class SolarAbility SolarAbilityClass, Actor* SourceActor, Actor* TargetActor, out const Vector HitLocation, out const FName HitBoneName, float Scale, out const Rotator ProjRotator, FString InExtarInfo, PrimitiveComponent* HitComponent);// 0x492c23bfa041
	void StopSound();// 0x492b23bfa041
	void StaticRemoveSolarAbilityFrom(class SolarAbility AbilityClass, Actor* AffectingActor);// 0x492a23bfa041
	void StaticApplySolarAbilityToWithHitResult(class SolarAbility AbilityClass, Actor* AffectingActor, out const HitResult HitResult, const float Scale, FString InExtarInfo, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation);// 0x492923bfa041
	void StaticApplySolarAbilityTo(class SolarAbility AbilityClass, Actor* AffectingActor, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation, out const Vector HitLocation, out const FName HitBoneName, float Scale, FString InExtraInfo, PrimitiveComponent* HitComponent);// 0x492823bfa041
	void ServerSetActivated();// 0x492723bfa041
	void RestoreSound();// 0x492623bfa041
	void RemoveSolarAbilityFrom(Actor* ApplyToActor);// 0x492523bfa041
	void PlaySound();// 0x492423bfa041
	void PauseSound();// 0x492323bfa041
	bool IsLocalControl();// 0x492223bfa041
	bool InSameTeam();// 0x492123bfa041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x492023bfa041
	bool CheckActor(Actor* SourceActor, Actor* TargetActor);// 0x491f23bfa041
	void ApplySolarAbilityTo(Actor* ApplyToActor, Actor* SourceActor);// 0x491e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 0x1]
	bool bIsInDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	byte OcclusionCollisionChannel;//[Offset: 0x339, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33a, Size: 0x1]
	float OuterRadius;//[Offset: 0x33c, Size: 0x4]
	float InnerRadius;//[Offset: 0x340, Size: 0x4]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x348, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x350, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x360, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x364, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x368, Size: 0x4]
	float roomReverbAuxBusGain;//[Offset: 0x36c, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x370, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x374, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x378, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37c, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37c, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37c, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37c, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x380, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x384, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x3d5d23bfa041
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x3d5c23bfa041
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x3d5b23bfa041
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x3d5a23bfa041
	void SetOutputBusVolume(float BusVolume);// 0x3d5923bfa041
	void SetListeners(out const AkComponent*[] Listeners);// 0x3d5823bfa041
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);// 0x3d5723bfa041
	void SetEarlyReflectionsVolume(float SendVolume);// 0x3d5623bfa041
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x3d5523bfa041
	void SetAttenuationScalingFactor(float Value);// 0x3d5423bfa041
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x3d5323bfa041
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3d5223bfa041
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3d5123bfa041
	int PostAkEventByName(FString in_EventName);// 0x3d5023bfa041
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3d4f23bfa041
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3d4e23bfa041
	float GetAttenuationRadius();// 0x3d4d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x318, Size: 0x8]
	FString EventName;//[Offset: 0x320, Size: 0x10]
	void Stop();// 0x3d4c23bfa041
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x3d4b23bfa041
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x3d4a23bfa041
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x3d4923bfa041
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3d4823bfa041
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x3d4723bfa041
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x3d4623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 0x8]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MinimumDuration;//[Offset: 0xc0, Size: 0x4]
	float MaximumDuration;//[Offset: 0xc4, Size: 0x4]
	float GetMinimumDuration();// 0x3d4523bfa041
	float GetMaximumDuration();// 0x3d4423bfa041
	float GetMaxAttenuationRadius();// 0x3d4323bfa041
	bool GetIsInfinite();// 0x3d4223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 0x4]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AkAssetData.Object
	uint32 CachedHash;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa0, Size: 0x50]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AkSwitchValue.AkGroupValue.AkAudioType.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 0x10]
	uint32 GroupShortID;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 0x4]
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AkTrigger.AkAudioType.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AkExternalMediaAsset.AkMediaAsset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AkRtpc.AkAudioType.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAkGameObject.Object
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	void Wakeup();// 0x4a1b23bfa041
	void UnloadBank(FString InBankName);// 0x4a1a23bfa041
	void UnLoadAllBanks();// 0x4a1923bfa041
	void Suspend(bool in_bRenderAnyway);// 0x4a1823bfa041
	int StopSoundByEvent(FString in_EventName);// 0x4a1723bfa041
	int StaticStopSoundByEvent(FString in_EventName);// 0x4a1623bfa041
	void StaticSetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x4a1523bfa041
	int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString in_EventName, LatentActionInfo LatentInfo);// 0x4a1423bfa041
	int StaticPostAkEventByName(FString in_EventName);// 0x4a1323bfa041
	int StaticPlaySoundByEvent(FString in_EventName);// 0x4a1223bfa041
	int StaticPlaySoundAtLocationByName(FString AkName, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x4a1123bfa041
	int StaticPlaySoundAtLocation(AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x4a1023bfa041
	int StaticComponentPostAkEventByName(AkComponent* AkComponent, FString in_EventName);// 0x4a0f23bfa041
	void SolarLoadAllBanks();// 0x4a0e23bfa041
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x4a0d23bfa041
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x4a0c23bfa041
	void SetMasterRTPCValue(float Value, int InterpolationTimeMs);// 0x4a0b23bfa041
	void SetMasterRTPCMute(bool Mute);// 0x4a0a23bfa041
	void SetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x4a0923bfa041
	void ReceiveTick(float DeltaTime);// 0x4a0823bfa041
	void ReceiveEndPlay(const byte EndPlayReason);// 0x4a0723bfa041
	void ReceiveBeginPlay();// 0x4a0623bfa041
	int PostAkEventByNameAndWaitForEnd(FString in_EventName, LatentActionInfo LatentInfo);// 0x4a0523bfa041
	int PostAkEventByName(FString InEventName1, FString InEventName2);// 0x4a0423bfa041
	int PlaySoundByEvent(FString in_EventName);// 0x4a0323bfa041
	void LoadBank(FString InBankName);// 0x4a0223bfa041
	void LoadAllBanks();// 0x4a0123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ReplicateEffectData
	SoftObjectPath IconPath;//[Offset: 0x0, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	SolarGameplayAbilitySet* DefaultAbilitySet;//[Offset: 0x1300, Size: 0x8]
	SkeletalMeshComponent* OptionMeshForRepMontage;//[Offset: 0x13b8, Size: 0x8]
	bool bPendingMontageRepForMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c0, Size: 0x1]
	GameplayAbilityLocalAnimMontageForMesh[] LocalAnimMontageInfoForMeshes;//[Offset: 0x13c8, Size: 0x10]
	GameplayAbilityRepAnimMontageForMesh[] RepAnimMontageInfoForMeshes;//[Offset: 0x13d8, Size: 0x10]
	GameplayAbilitySpecHandle UpgradeAbilityLevelBySpec(GameplayAbilitySpecHandle AbilitySpecHandle, bool bForNextActivate, int LevelUp);// 0x494a23bfa041
	void UpgradeAbilityLevelByClass(const class GameplayAbility AbilityClass, bool bForNextActivate, int LevelUp);// 0x494923bfa041
	void UpgradeAbilityLevel(GameplayTagContainer AbilityTags, bool bForNextActivate, int LevelUp);// 0x494823bfa041
	void ServerCurrentMontageSetPlayRateForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float InPlayRate);// 0x494723bfa041
	void ServerCurrentMontageSetNextSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x494623bfa041
	void ServerCurrentMontageJumpToSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, FName SectionName);// 0x494523bfa041
	void PostDefaultAbilitiesGranted();// 0x494423bfa041
	void OnRep_ReplicatedAnimMontageForMesh();// 0x494323bfa041
	void OnNotifiedTagChanged(out const GameplayTag Tag, bool bAdded);// 0x494223bfa041
	void OnInternalMetaAttributeUpdate(SolarMetaAttributeSet* MetaAttributeSet, out GameplayModifierEvaluatedData EvaluatedData, out const GameplayEffectSpec EffectSpec, out MetaAttributeUpdateEvent UpdateEvent);// 0x494123bfa041
	void NotifySourceMetaAttributeExecution(out const MetaAttributeUpdateEvent UpdateEvent);// 0x494023bfa041
	void K2_RemoveGameplayCueLocalShared(Object* Instigator, const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x493f23bfa041
	void K2_RemoveGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x493e23bfa041
	int K2_RemoveActiveEffectsWithTag(GameplayTag GameplayTag);// 0x493d23bfa041
	GameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(const class GameplayAbility AbilityClass, int Level);// 0x493c23bfa041
	GameplayAbilitySpecHandle K2_GiveAbility(const class GameplayAbility AbilityClass, int Level);// 0x493b23bfa041
	void K2_GetEffectMaxTimeRemainingAndDuration(GameplayTag EffectTag, out float TimeRemaining, out float Duration);// 0x493a23bfa041
	AttributeSet* K2_FindOwnedAttributeSetByClass(class AttributeSet Class);// 0x493923bfa041
	void K2_ExecuteGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x493823bfa041
	void K2_ClearAbility(out const GameplayAbilitySpecHandle Handle);// 0x493723bfa041
	void K2_CancelAbilityByTag(GameplayTag AbilityTag);// 0x493623bfa041
	void K2_AddGameplayCueLocalShared(Object* Instigator, const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x493523bfa041
	void K2_AddGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x493423bfa041
	bool IsNotifiedTagAvailable(out const GameplayTag Tag);// 0x493323bfa041
	GameplayAbilitySpecHandle GiveDefaultAbility(const class GameplayAbility AbilityClass);// 0x493223bfa041
	ActiveGameplayEffectHandle ChangeActiveEffectRemainTime(ActiveGameplayEffectHandle InEffect, float InValue, byte InOption);// 0x493123bfa041
	ActiveGameplayEffectHandle ChangeActiveEffectDuration(ActiveGameplayEffectHandle InEffect, float InDuration, enum InChangeProxy);// 0x493023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x130, Size: 0x10]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x140, Size: 0x10]
	FName AffectedAnimInstanceTag;//[Offset: 0x150, Size: 0x8]
	float OutgoingDuration;//[Offset: 0x2f8, Size: 0x4]
	float IncomingDuration;//[Offset: 0x2fc, Size: 0x4]
	FString[] ClientDebugStrings;//[Offset: 0x320, Size: 0x10]
	FString[] ServerDebugStrings;//[Offset: 0x330, Size: 0x10]
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 0x1]
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 0x1]
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 0x1]
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x3a8, Size: 0x10]
	Actor* OwnerActor;//[Offset: 0x3e0, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x3e8, Size: 0x8]
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x400, Size: 0x120]
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x550, Size: 0x10]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x730, Size: 0x38]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 0x1]
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x770, Size: 0x30]
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x840, Size: 0x480]
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xcc0, Size: 0x128]
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xde8, Size: 0x128]
	byte[] BlockedAbilityBindings;//[Offset: 0x1038, Size: 0x10]
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x1170, Size: 0x60]
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x11e0, Size: 0x118]
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0x12f123bfa041
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0x12f023bfa041
	void TargetConfirm();// 0x12ef23bfa041
	void TargetCancel();// 0x12ee23bfa041
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0x12ed23bfa041
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0x12ec23bfa041
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0x12eb23bfa041
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x12ea23bfa041
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0x12e923bfa041
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x12e823bfa041
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0x12e723bfa041
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0x12e523bfa041
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x12e423bfa041
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0x12e323bfa041
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0x12e223bfa041
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0x12e123bfa041
	void ServerPrintDebug_Request();// 0x12e023bfa041
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey);// 0x12df23bfa041
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0x12de23bfa041
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x12dd23bfa041
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0x12dc23bfa041
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x12db23bfa041
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0x12d923bfa041
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0x12d823bfa041
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x12d723bfa041
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0x12d623bfa041
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0x12d523bfa041
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0x12d423bfa041
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0x12d323bfa041
	void OnRep_ServerDebugString();// 0x12d223bfa041
	void OnRep_ReplicatedAnimMontage();// 0x12d123bfa041
	void OnRep_OwningActor();// 0x12d023bfa041
	void OnRep_ClientDebugString();// 0x12cf23bfa041
	void OnRep_ActivateAbilities();// 0x12ce23bfa041
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x12cd23bfa041
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x12cc23bfa041
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x12cb23bfa041
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x12ca23bfa041
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x12c923bfa041
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x12c823bfa041
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x12c723bfa041
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x12c523bfa041
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0x12c223bfa041
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x12c123bfa041
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0x12c023bfa041
	GameplayEffectContextHandle MakeEffectContext();// 0x12bf23bfa041
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0x12be23bfa041
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0x12bd23bfa041
	bool GetUserAbilityActivationInhibited();// 0x12bc23bfa041
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0x12bb23bfa041
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0x12ba23bfa041
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0x12b923bfa041
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0x12b623bfa041
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0x12b523bfa041
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0x12b323bfa041
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0x12b223bfa041
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo);// 0x12b123bfa041
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x12ae23bfa041
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x12ad23bfa041
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0x12ac23bfa041
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0x12ab23bfa041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0x12aa23bfa041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0x12a923bfa041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0x12a823bfa041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0x12a723bfa041
	void AbilityConfirmOrCancel__DelegateSignature();// 0x12a623bfa041
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0x12a523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x12a423bfa041
	enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x12a223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AttributeDefaults
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 0x8]
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AttributeSet.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameplayAbilitySet.DataAsset.Object
	class GameplayAbility[] Abilities;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbility.Object
	GameplayTagContainer AbilityTags;//[Offset: 0xa8, Size: 0x20]
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	byte ReplicationPolicy;//[Offset: 0xce, Size: 0x1]
	byte InstancingPolicy;//[Offset: 0xcf, Size: 0x1]
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0xd8, Size: 0x20]
	GameplayEventData CurrentEventData;//[Offset: 0xf8, Size: 0xb0]
	byte NetExecutionPolicy;//[Offset: 0x1a8, Size: 0x1]
	byte NetSecurityPolicy;//[Offset: 0x1a9, Size: 0x1]
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x1b0, Size: 0x8]
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x1b8, Size: 0x10]
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x1c8, Size: 0x8]
	GameplayTagQuery CancelAbilitiesMatchingTagQuery;//[Offset: 0x1d0, Size: 0x48]
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x218, Size: 0x20]
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x238, Size: 0x20]
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x258, Size: 0x20]
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x278, Size: 0x20]
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x298, Size: 0x20]
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x2b8, Size: 0x20]
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x2d8, Size: 0x20]
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x2f8, Size: 0x20]
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x318, Size: 0x20]
	GameplayTask*[] ActiveTasks;//[Offset: 0x358, Size: 0x10]
	AnimMontage* CurrentMontage;//[Offset: 0x378, Size: 0x8]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 0x1]
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0x39be23bfa041
	void SetCanBeCanceled(bool bCanBeCanceled);// 0x39bd23bfa041
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0x39bc23bfa041
	void RemoveGrantedByEffect();// 0x39bb23bfa041
	void MontageStop(float OverrideBlendOutTime);// 0x39ba23bfa041
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0x39b923bfa041
	void MontageJumpToSection(FName SectionName);// 0x39b823bfa041
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0x39b723bfa041
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0x39b623bfa041
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0x39b523bfa041
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0x39b423bfa041
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0x39b323bfa041
	void K2_OnEndAbility(bool bWasCancelled);// 0x39b223bfa041
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x39b123bfa041
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0x39b023bfa041
	void K2_EndAbility();// 0x39af23bfa041
	void K2_CommitExecute();// 0x39ae23bfa041
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0x39ad23bfa041
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0x39ac23bfa041
	bool K2_CommitAbility();// 0x39ab23bfa041
	bool K2_CheckAbilityCost();// 0x39aa23bfa041
	bool K2_CheckAbilityCooldown();// 0x39a923bfa041
	void K2_CancelAbility();// 0x39a823bfa041
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, out GameplayTagContainer RelevantTags);// 0x39a723bfa041
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0x39a623bfa041
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0x39a523bfa041
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0x39a423bfa041
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0x39a323bfa041
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0x39a223bfa041
	void K2_ActivateAbility();// 0x39a123bfa041
	void InvalidateClientPredictionKey();// 0x39a023bfa041
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0x399f23bfa041
	Actor* GetOwningActorFromActorInfo();// 0x399e23bfa041
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0x399d23bfa041
	Object* GetCurrentSourceObject();// 0x399c23bfa041
	AnimMontage* GetCurrentMontage();// 0x399b23bfa041
	float GetCooldownTimeRemaining();// 0x399a23bfa041
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0x399923bfa041
	Actor* GetAvatarActorFromActorInfo();// 0x399823bfa041
	GameplayAbilityActorInfo GetActorInfo();// 0x399723bfa041
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0x399623bfa041
	int GetAbilityLevel();// 0x399523bfa041
	void EndTaskByInstanceName(FName InstanceName);// 0x399423bfa041
	void EndAbilityState(FName OptionalStateNameToEnd);// 0x399323bfa041
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0x399223bfa041
	void CancelTaskByInstanceName(FName InstanceName);// 0x399123bfa041
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x399023bfa041
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0x398f23bfa041
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0x398e23bfa041
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x398d23bfa041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x398c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEventData
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	Actor* Instigator;//[Offset: 0x8, Size: 0x8]
	Actor* Target;//[Offset: 0x10, Size: 0x8]
	Object* OptionalObject;//[Offset: 0x18, Size: 0x8]
	Object* OptionalObject2;//[Offset: 0x20, Size: 0x8]
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 0x18]
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 0x20]
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 0x20]
	float EventMagnitude;//[Offset: 0x80, Size: 0x4]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectContextHandle
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilityTargetDataHandle
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilityActivationInfo
	byte ActivationMode;//[Offset: 0x0, Size: 0x1]
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: PredictionKey
	int16 Current;//[Offset: 0x0, Size: 0x2]
	int16 Base;//[Offset: 0x2, Size: 0x2]
	PackageMap* PredictiveConnection;//[Offset: 0x8, Size: 0x8]
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilityTargetingLocationInfo
	byte LocationType;//[Offset: 0x8, Size: 0x1]
	Transform LiteralTransform;//[Offset: 0x10, Size: 0x30]
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8]
	MeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8]
	GameplayAbility* SourceAbility;//[Offset: 0x50, Size: 0x8]
	FName SourceSocketName;//[Offset: 0x58, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffect.Object
	enum DurationPolicy;//[Offset: 0x30, Size: 0x1]
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 0x1a8]
	ScalableFloat Period;//[Offset: 0x1e0, Size: 0x20]
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	enum PeriodicInhibitionPolicy;//[Offset: 0x201, Size: 0x1]
	GameplayModifierInfo[] Modifiers;//[Offset: 0x208, Size: 0x10]
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x218, Size: 0x10]
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x228, Size: 0x20]
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x248, Size: 0x10]
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x258, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x268, Size: 0x10]
	class GameplayEffect[] OverflowEffects;//[Offset: 0x278, Size: 0x10]
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x290, Size: 0x10]
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2a0, Size: 0x10]
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	GameplayEffectCue[] GameplayCues;//[Offset: 0x2b8, Size: 0x10]
	GameplayEffectUIData* UIData;//[Offset: 0x2c8, Size: 0x8]
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x2d0, Size: 0x60]
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x330, Size: 0x60]
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x390, Size: 0x50]
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x3e0, Size: 0x50]
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x430, Size: 0x50]
	GameplayTagRequirements RemovalSourceTagRequirements;//[Offset: 0x480, Size: 0x50]
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x4d0, Size: 0x60]
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x530, Size: 0x50]
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x580, Size: 0x150]
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x6d8, Size: 0x150]
	enum StackingType;//[Offset: 0x829, Size: 0x1]
	int StackLimitCount;//[Offset: 0x82c, Size: 0x4]
	enum StackDurationRefreshPolicy;//[Offset: 0x830, Size: 0x1]
	enum StackPeriodResetPolicy;//[Offset: 0x831, Size: 0x1]
	enum StackExpirationPolicy;//[Offset: 0x832, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x838, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x20]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 0xf8]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x120, Size: 0x78]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x198, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 0x20]
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 0x40]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 0x10]
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 0x1]
	enum FinalChannel;//[Offset: 0xb1, Size: 0x1]
	GameplayTagContainer SourceTagFilter;//[Offset: 0xb8, Size: 0x20]
	GameplayTagContainer TargetTagFilter;//[Offset: 0xd8, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectAttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38]
	enum AttributeSource;//[Offset: 0x38, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CustomCalculationBasedFloat
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 0x20]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0x39d723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectCalculation.Object
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectSpec
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 0x28]
	float Duration;//[Offset: 0x50, Size: 0x4]
	float Period;//[Offset: 0x54, Size: 0x4]
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 0x4]
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 0x88]
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 0x88]
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 0x20]
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 0x20]
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 0x10]
	int StackCount;//[Offset: 0x1c0, Size: 0x4]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 0x18]
	float Level;//[Offset: 0x290, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectModifiedAttribute
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	float TotalMagnitude;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectAttributeCaptureSpecContainer
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10]
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectAttributeCaptureSpec
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40]
<----------Generated by SSpawner v1.0.2---------->


Class: TagContainerAggregator
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilitySpecDef
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 0x8]
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 0x20]
	int InputID;//[Offset: 0x28, Size: 0x4]
	enum RemovalPolicy;//[Offset: 0x2c, Size: 0x1]
	Object* SourceObject;//[Offset: 0x30, Size: 0x8]
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x88, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 0x20]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x60, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x208, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x210, Size: 0x50]
	GameplayTagRequirements TargetTags;//[Offset: 0x260, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayModEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayTagRequirements
	enum RequireTagCheckRule;//[Offset: 0x0, Size: 0x1]
	GameplayTagContainer RequireTags;//[Offset: 0x8, Size: 0x20]
	enum IgnoreTagCheckRule;//[Offset: 0x28, Size: 0x1]
	GameplayTagContainer IgnoreTags;//[Offset: 0x30, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectExecutionDefinition
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 0x20]
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 0x10]
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0x39d623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectCustomExecutionParameters
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectCustomExecutionOutput
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 0x10]
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayModifierEvaluatedData
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	float Magnitude;//[Offset: 0x3c, Size: 0x4]
	ActiveGameplayEffectHandle Handle;//[Offset: 0x40, Size: 0x8]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ActiveGameplayEffectHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectExecutionScopedModifierInfo
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 0x40]
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 0x8]
	enum AggregatorType;//[Offset: 0x48, Size: 0x1]
	byte ModifierOp;//[Offset: 0x49, Size: 0x1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1f8, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x200, Size: 0x50]
	GameplayTagRequirements TargetTags;//[Offset: 0x250, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: ConditionalGameplayEffect
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectCustomApplicationRequirement.Object
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0x39d523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectCue
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 0x38]
	float MinLevel;//[Offset: 0x38, Size: 0x4]
	float MaxLevel;//[Offset: 0x3c, Size: 0x4]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectUIData.Object
<----------Generated by SSpawner v1.0.2---------->


Class: InheritedTagContainer
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer Added;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectQuery
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 0x10]
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 0x48]
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 0x48]
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 0x48]
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 0x38]
	Object* EffectSource;//[Offset: 0x130, Size: 0x8]
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10]
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	FString AutoDescription;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AbilityTriggerData
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 0x8]
	byte TriggerSource;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectSpecHandle
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilityActorInfo
	Actor* OwnerActor;//[Offset: 0x8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x10, Size: 0x8]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 0x8]
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 0x8]
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 0x8]
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayCueParameters
	float NormalizedMagnitude;//[Offset: 0x0, Size: 0x4]
	float RawMagnitude;//[Offset: 0x4, Size: 0x4]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18]
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 0x8]
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 0x8]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 0xc]
	Actor* Instigator;//[Offset: 0x88, Size: 0x8]
	Actor* EffectCauser;//[Offset: 0x90, Size: 0x8]
	Object* SourceObject;//[Offset: 0x98, Size: 0x8]
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 0x8]
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 0x4]
	int AbilityLevel;//[Offset: 0xac, Size: 0x4]
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x129a23bfa041
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x129923bfa041
	void EndTask();// 0x129823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilityLocalAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityLocalAnimMontage LocalMontageInfo;//[Offset: 0x8, Size: 0x30]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilityLocalAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]
	GameplayAbility* AnimatingAbility;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilityRepAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityRepAnimMontage RepMontageInfo;//[Offset: 0x8, Size: 0x38]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilityRepAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	float BlendTime;//[Offset: 0x10, Size: 0x4]
	byte NextSectionID;//[Offset: 0x14, Size: 0x1]
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	byte SectionIdToPlay;//[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarMetaAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData Damage;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData ShieldDamage;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAttributeSet.AttributeSet.Object
	void K2_SetAttributeValue(FName AttributeName, float NewVal);// 0x41a323bfa041
	void K2_OnReplicationAttribute(out const GameplayAttributeData OldValue, out const GameplayAttributeData ReplicatedAttribute, FName AttributeName);// 0x41a223bfa041
	void K2_InitAttributeValue(out GameplayAttributeData OriginAttribute, float NewVal);// 0x41a123bfa041
	float K2_GetAttributeValue(out const GameplayAttributeData OriginAttribute);// 0x41a023bfa041
	GameplayAttribute K2_GetAttribute(FName AttributeName);// 0x419f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x8, Size: 0x4]
	float CurrentValue;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MetaAttributeUpdateEvent
	int TypeID;//[Offset: 0x8, Size: 0x4]
	SolarAbilitySystemComponent* TargetASC;//[Offset: 0x10, Size: 0x8]
	SolarMetaAttributeSet* MetaAttributeSet;//[Offset: 0x18, Size: 0x8]
	GameplayAttribute MetaAttribute;//[Offset: 0x20, Size: 0x38]
	float MetaAttributeValue;//[Offset: 0x58, Size: 0x4]
	MetaAttributeProduceEffect[] Effects;//[Offset: 0x60, Size: 0x10]
	MetaAttributeUpdateEvent_Character CharacterEventData;//[Offset: 0x70, Size: 0x3]
<----------Generated by SSpawner v1.0.2---------->


Class: MetaAttributeProduceEffect
	SolarAttributeSet* EffectAttributeSet;//[Offset: 0x0, Size: 0x8]
	GameplayAttribute EffectAttribute;//[Offset: 0x8, Size: 0x38]
	float EffectValue;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MetaAttributeUpdateEvent_Character
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ServerAbilityRPCBatch
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 0x4]
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 0x18]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x20, Size: 0x28]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayEffectSpecForRPC
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 0x18]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	float Level;//[Offset: 0x70, Size: 0x4]
	float AbilityLevel;//[Offset: 0x74, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilityTargetActor.Actor.Object
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x230, Size: 0x60]
	PlayerController* MasterPC;//[Offset: 0x2c0, Size: 0x8]
	GameplayAbility* OwningAbility;//[Offset: 0x2c8, Size: 0x8]
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	Actor* SourceActor;//[Offset: 0x2d8, Size: 0x8]
	WorldReticleParameters ReticleParams;//[Offset: 0x2e0, Size: 0xc]
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x2f0, Size: 0x8]
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x2f8, Size: 0x10]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	AbilitySystemComponent* GenericDelegateBoundASC;//[Offset: 0x320, Size: 0x8]
	void ConfirmTargeting();// 0x39c023bfa041
	void CancelTargeting();// 0x39bf23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WorldReticleParameters
	Vector AOEScale;//[Offset: 0x0, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilityWorldReticle.Actor.Object
	WorldReticleParameters Parameters;//[Offset: 0x228, Size: 0xc]
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236, Size: 0x1]
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x237, Size: 0x1]
	PlayerController* MasterPC;//[Offset: 0x238, Size: 0x8]
	Actor* TargetingActor;//[Offset: 0x240, Size: 0x8]
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0x39c623bfa041
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0x39c523bfa041
	void OnValidTargetChanged(bool bNewValue);// 0x39c423bfa041
	void OnTargetingAnActor(bool bNewValue);// 0x39c323bfa041
	void OnParametersInitialized();// 0x39c223bfa041
	void FaceTowardSource(bool bFaceIn2D);// 0x39c123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayTargetDataFilterHandle
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilitySpecContainer.FastArraySerializer
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayAbilitySpec.FastArraySerializerItem
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 0x4]
	GameplayAbility* Ability;//[Offset: 0x10, Size: 0x8]
	int Level;//[Offset: 0x18, Size: 0x4]
	int InputID;//[Offset: 0x1c, Size: 0x4]
	Object* SourceObject;//[Offset: 0x20, Size: 0x8]
	byte ActiveCount;//[Offset: 0x28, Size: 0x1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 0x20]
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x50, Size: 0x10]
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x60, Size: 0x10]
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x70, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ActiveGameplayEffectsContainer.FastArraySerializer
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x138, Size: 0x10]
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x458, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ActiveGameplayEffect.FastArraySerializerItem
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 0x298]
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 0x18]
	float StartServerWorldTime;//[Offset: 0x2c8, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0x2cc, Size: 0x4]
	float StartWorldTime;//[Offset: 0x2d0, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ActiveGameplayCueContainer.FastArraySerializer
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ActiveGameplayCue.FastArraySerializerItem
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 0x8]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	GameplayCueParameters Parameters;//[Offset: 0x30, Size: 0xc0]
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MinimalReplicationTagCountMap
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ReplicatedPredictionKeyMap.FastArraySerializer
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ReplicatedPredictionKeyItem.FastArraySerializerItem
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAnimInstance.AnimInstance.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x268, Size: 0x8]
	byte OwnerRole;//[Offset: 0x270, Size: 0x1]
	FName LeftHandIKSocketName;//[Offset: 0x27c, Size: 0x8]
	FName RightHandWeaponSocketName;//[Offset: 0x284, Size: 0x8]
	Transform LeftHandIKSocket2BoneTrans;//[Offset: 0x290, Size: 0x30]
	Vector LeftHandEffectorLocation;//[Offset: 0x2c0, Size: 0xc]
	Rotator LeftHandEffectorRotation;//[Offset: 0x2cc, Size: 0xc]
	Vector CurrentLeftHandJointLocation;//[Offset: 0x2fc, Size: 0xc]
	Vector RightHandEffectorLocation;//[Offset: 0x308, Size: 0xc]
	Vector RightHandJointLocation;//[Offset: 0x314, Size: 0xc]
	float LeftIKHandWeight;//[Offset: 0x320, Size: 0x4]
	float CurrentReloadTimeRate;//[Offset: 0x324, Size: 0x4]
	float CurrentSwitchWeaponTimeRate;//[Offset: 0x328, Size: 0x4]
	float CurrentBoltTimeRate;//[Offset: 0x32c, Size: 0x4]
	bool IsJog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	float ViewPitch;//[Offset: 0x334, Size: 0x4]
	float ViewYaw;//[Offset: 0x338, Size: 0x4]
	float SimulatedProxyViewSmoothSpeed;//[Offset: 0x33c, Size: 0x4]
	BlendSpace* FireTPPBlendSpace;//[Offset: 0x348, Size: 0x8]
	float FireTPPBlendSpaceX;//[Offset: 0x350, Size: 0x4]
	float FIreTPPBlendSpaceY;//[Offset: 0x354, Size: 0x4]
	float MinSwimSpeed;//[Offset: 0x358, Size: 0x4]
	float Direction;//[Offset: 0x35c, Size: 0x4]
	float Speed;//[Offset: 0x360, Size: 0x4]
	float InputDirection;//[Offset: 0x364, Size: 0x4]
	byte IdleTurnType;//[Offset: 0x368, Size: 0x1]
	float TurnExplicitTime;//[Offset: 0x36c, Size: 0x4]
	float DamageDirection;//[Offset: 0x370, Size: 0x4]
	float DamageReactionAlpha;//[Offset: 0x374, Size: 0x4]
	float DamageNomalizeTime;//[Offset: 0x378, Size: 0x4]
	LeftHandGripConfig CurrentGripData;//[Offset: 0x484, Size: 0x84]
	float Fire2PlayRateStand;//[Offset: 0x58c, Size: 0x4]
	float Fire2PlayRateCrouch;//[Offset: 0x590, Size: 0x4]
	bool bHoldingShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 0x1]
	bool ShieldRechargeIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 0x1]
	float FallingInputScale;//[Offset: 0x5e4, Size: 0x4]
	Vector IKOffsetLeftFootVector;//[Offset: 0x5e8, Size: 0xc]
	Vector IKOffsetRightFootVector;//[Offset: 0x5f4, Size: 0xc]
	Vector JointTargetLeftFootVector;//[Offset: 0x600, Size: 0xc]
	Vector JointTargetRightFootVector;//[Offset: 0x60c, Size: 0xc]
	Rotator LeftFootRotation;//[Offset: 0x618, Size: 0xc]
	Rotator RightFootRotation;//[Offset: 0x624, Size: 0xc]
	Vector HipOffsetVector;//[Offset: 0x630, Size: 0xc]
	float FootIKTraceDistanceRate;//[Offset: 0x63c, Size: 0x4]
	float CrouchFootIKTraceDistanceRate;//[Offset: 0x640, Size: 0x4]
	float FootIKInterpSpeed;//[Offset: 0x644, Size: 0x4]
	FName LeftFootSocket;//[Offset: 0x648, Size: 0x8]
	FName RightFootSocket;//[Offset: 0x650, Size: 0x8]
	bool AnimParam_LeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]
	float LandingBlendWeight;//[Offset: 0x65c, Size: 0x4]
	float DefaultLeftHandWeaponAttachingBlendTime;//[Offset: 0x660, Size: 0x4]
	float DefaultLeftHandWeaponDetachingBlendTime;//[Offset: 0x664, Size: 0x4]
	float CurrentLeftHandWeaponAttachingBlendTime;//[Offset: 0x668, Size: 0x4]
	float CurrentLeftHandWeaponDetachingBlendTime;//[Offset: 0x66c, Size: 0x4]
	float FootIKEnableDelayTime;//[Offset: 0x698, Size: 0x4]
	bool bActiveFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1]
	float FlailRate;//[Offset: 0x6d0, Size: 0x4]
	float ConfigPitchToZeroTime;//[Offset: 0x6d4, Size: 0x4]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeX;//[Offset: 0x6d8, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeY;//[Offset: 0x6e0, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeZ;//[Offset: 0x6e8, Size: 0x8]
	float JetPack2PoseRestoreSmoothSpeed;//[Offset: 0x6f0, Size: 0x4]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeX;//[Offset: 0x6f4, Size: 0x8]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeY;//[Offset: 0x6fc, Size: 0x8]
	bool bNewJet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x712, Size: 0x1]
	bool bIsJetFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x713, Size: 0x1]
	bool bEnableDamageReact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x714, Size: 0x1]
	bool bEnableWeaponAdditiveA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x714, Size: 0x1]
	bool bEnableHandIK;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x714, Size: 0x1]
	bool bEnableFootIK;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x714, Size: 0x1]
	bool bEnableWeaponAdditiveB;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x714, Size: 0x1]
	bool bEnableWeaponJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x714, Size: 0x1]
	byte MaxLODDamageReact;//[Offset: 0x715, Size: 0x1]
	byte MaxLODWeaponAdditiveA;//[Offset: 0x716, Size: 0x1]
	byte MaxLODHandIK;//[Offset: 0x717, Size: 0x1]
	byte MaxLODFootIK;//[Offset: 0x718, Size: 0x1]
	byte MaxLODWeaponAdditiveB;//[Offset: 0x719, Size: 0x1]
	byte MaxLODWeaponJitter;//[Offset: 0x71a, Size: 0x1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71b, Size: 0x1]
	float DeathAnimStartPosition;//[Offset: 0x71c, Size: 0x4]
	<enum,class AnimInstance> SpecAnimBPs;//[Offset: 0x720, Size: 0x50]
	bool bIsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x770, Size: 0x1]
	bool bIsCrouching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x770, Size: 0x1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x770, Size: 0x1]
	bool bIsFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x770, Size: 0x1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x770, Size: 0x1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x770, Size: 0x1]
	bool bIsInhibitSprinting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x770, Size: 0x1]
	bool bIsSixDirRunForward;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x770, Size: 0x1]
	bool bIsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x771, Size: 0x1]
	enum CurrentWalkMode;//[Offset: 0x772, Size: 0x1]
	enum LastWalkMode;//[Offset: 0x773, Size: 0x1]
	enum CurrentAirMoveMode;//[Offset: 0x774, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x775, Size: 0x1]
	enum CurrentCruiseState;//[Offset: 0x776, Size: 0x1]
	AnimSequence* CruiseStartSequence;//[Offset: 0x778, Size: 0x8]
	AnimSequence* CruiseLoopSequence;//[Offset: 0x780, Size: 0x8]
	AnimSequence* CruiseEndSequence;//[Offset: 0x788, Size: 0x8]
	float MinSpeedForSkydiveFlyingInputBonus;//[Offset: 0x790, Size: 0x4]
	float MaxSpeedForSkydiveFlyingInputBonus;//[Offset: 0x794, Size: 0x4]
	float InputYThresholdToCalcInputYByCamera;//[Offset: 0x798, Size: 0x4]
	float MinDeltaYawFromCameraToGetMaxInputY;//[Offset: 0x79c, Size: 0x4]
	enum CurrentSkydiveStage;//[Offset: 0x7a0, Size: 0x1]
	float MinWallRunSurfaceAngle;//[Offset: 0x7a4, Size: 0x4]
	float MaxWallRunSurfaceAngle;//[Offset: 0x7a8, Size: 0x4]
	enum WeaponStatus;//[Offset: 0x7b0, Size: 0x1]
	bool bIsBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b1, Size: 0x1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7b1, Size: 0x1]
	bool bIsLeftHandDetaching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7b1, Size: 0x1]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7b1, Size: 0x1]
	enum CurrentSkillAnimType;//[Offset: 0x7b2, Size: 0x1]
	void OnMontagePlayEnded(AnimMontage* Montage, bool bInterrupted);// 0x4a3123bfa041
	bool NeedResolveWeaponJitter();// 0x4a3023bfa041
	bool JetPack2IsDashingCompletelyOver();// 0x4a2f23bfa041
	bool IsHoldingWeapon();// 0x4a2e23bfa041
	bool IsAiming();// 0x4a2d23bfa041
	float GetWallRunSurfaceAngle();// 0x4a2c23bfa041
	enum GetWallRunState();// 0x4a2b23bfa041
	Vector2D GetSkydiveFlyingInput();// 0x4a2a23bfa041
	int GetOwnerGroupID();// 0x4a2923bfa041
	Vector GetJetPackDashAnimationBlend();// 0x4a2823bfa041
	Vector GetInputVector();// 0x4a2723bfa041
	Vector GetFallingInputVector();// 0x4a2623bfa041
	float GenJumpDirection(float InInputDirection);// 0x4a2523bfa041
	float GenBackwardDirection(float InInputDirection);// 0x4a2423bfa041
	bool CheckNewJetAndReset();// 0x4a2323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LeftHandGripConfig
	Rotator HandL;//[Offset: 0x0, Size: 0xc]
	Rotator Thumbl01;//[Offset: 0xc, Size: 0xc]
	Rotator Thumbl02;//[Offset: 0x18, Size: 0xc]
	Rotator Index01;//[Offset: 0x24, Size: 0xc]
	Rotator Index02;//[Offset: 0x30, Size: 0xc]
	Rotator Middle01;//[Offset: 0x3c, Size: 0xc]
	Rotator Middle02;//[Offset: 0x48, Size: 0xc]
	Rotator Ring01;//[Offset: 0x54, Size: 0xc]
	Rotator Ring02;//[Offset: 0x60, Size: 0xc]
	Rotator Pinky01;//[Offset: 0x6c, Size: 0xc]
	Rotator Pinky02;//[Offset: 0x78, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: JetPackPoseSpeedRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterSoundConfig.DataAsset.Object
	<enum,FString> SoundEventTable;//[Offset: 0x30, Size: 0x50]
	<FName,SoundGroupBase*> SoundGroupTable;//[Offset: 0x80, Size: 0x50]
	<byte,FName> SurfaceTypeToHitByBulletSoundGroup;//[Offset: 0xd0, Size: 0x50]
	Transform DefaultTransform;//[Offset: 0x120, Size: 0x30]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundGroupBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPile.SolarMapElementBase.Actor.Object
	StaticMeshComponent* NormalMesh;//[Offset: 0x2b0, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x2b8, Size: 0x8]
	ActorComponent*[] ExtraChargingVFXComps;//[Offset: 0x2c0, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2d0, Size: 0x4]
	enum Channel;//[Offset: 0x2ec, Size: 0x1]
	enum PileType;//[Offset: 0x2ed, Size: 0x1]
	int Zone;//[Offset: 0x2f0, Size: 0x4]
	float MaxEnergy;//[Offset: 0x2f4, Size: 0x4]
	float PowerRecoveryCD;//[Offset: 0x2f8, Size: 0x4]
	float PowerRecoveryFrequency;//[Offset: 0x2fc, Size: 0x4]
	float PowerRecoveryQuantity;//[Offset: 0x300, Size: 0x4]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	bool bCanRecover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 0x1]
	bool bIsActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307, Size: 0x1]
	int Level;//[Offset: 0x308, Size: 0x4]
	bool bIsLosingEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	int OwnerTeam;//[Offset: 0x310, Size: 0x4]
	SolarCharacter* OwnerCharacter;//[Offset: 0x314, Size: 0x8]
	ChargingInfo defaultChargingInfo;//[Offset: 0x320, Size: 0x30]
	ChargingInfo[] ChargingInfoList;//[Offset: 0x350, Size: 0x10]
	float CurrentEnergy;//[Offset: 0x360, Size: 0x4]
	float SphereRadius;//[Offset: 0x368, Size: 0x4]
	TimerHandle RecoveryHandle;//[Offset: 0x370, Size: 0x8]
	TimerHandle ServerChargingTimerHandle;//[Offset: 0x380, Size: 0x8]
	TimerHandle ClientChargingTimerHandle;//[Offset: 0x388, Size: 0x8]
	ParticleSystemComponent*[] ChargeParticleEffects;//[Offset: 0x390, Size: 0x10]
	AkComponent* AkAudioComponent;//[Offset: 0x3a0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x3a8, Size: 0x8]
	bool bEnableHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 0x1]
	float MaxHealth;//[Offset: 0x3b4, Size: 0x4]
	float ReducedHealth;//[Offset: 0x3b8, Size: 0x4]
	float CurrentHealth;//[Offset: 0x3bc, Size: 0x4]
	float TweenTimeSpeed;//[Offset: 0x3c0, Size: 0x4]
	float RestTweenTime;//[Offset: 0x3c4, Size: 0x4]
	float TargetOpacity;//[Offset: 0x3c8, Size: 0x4]
	float CurrentOpacity;//[Offset: 0x3cc, Size: 0x4]
	float OpacityTweenTime;//[Offset: 0x3d0, Size: 0x4]
	MaterialInstanceDynamic* DynamicMatChargingCircle;//[Offset: 0x3d8, Size: 0x8]
	ChargingPilePreset ChargingPilePreset;//[Offset: 0x3e0, Size: 0x150]
	StaticMeshComponent* RangeRingMeshComp;//[Offset: 0x530, Size: 0x8]
	StaticMeshComponent* ChargeCircleMeshComp;//[Offset: 0x538, Size: 0x8]
	bool bCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	void ToggleExtraChargingVFX(bool Toggle);// 0x4b7d23bfa041
	void SetIsActivated(bool bActivated);// 0x4b7c23bfa041
	void RemoveChargeParticle(SolarCharacter* InCharacter);// 0x4b7b23bfa041
	void RemoveAllEffects();// 0x4b7a23bfa041
	void ReceivePileExpired();// 0x4b7923bfa041
	void ReceiveEnergyChanged();// 0x4b7823bfa041
	void ReceiveChargingPileInitialize();// 0x4b7723bfa041
	void ReceiveCharacterShowEffect(const Actor* Other);// 0x4b7623bfa041
	void ReceiveCharacterHideEffect(const Actor* Other);// 0x4b7523bfa041
	void PlaySkillStartSound();// 0x4b7423bfa041
	void PlaySkillEndSound();// 0x4b7323bfa041
	void PlayRecoveryAnim(bool bStart);// 0x4b7223bfa041
	void PlayChargingAnimation(bool Reverse);// 0x4b7123bfa041
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4b7023bfa041
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4b6f23bfa041
	void OnRep_IsLosingEnergyChanged();// 0x4b6e23bfa041
	void OnRep_Energy();// 0x4b6d23bfa041
	void OnRep_Enable();// 0x4b6c23bfa041
	void OnRep_CurrentHealth();// 0x4b6b23bfa041
	void OnRep_ChargingInfoListChanged();// 0x4b6a23bfa041
	void OnRep_CanRecover();// 0x4b6923bfa041
	void OnRep_Broken();// 0x4b6823bfa041
	void OnRefreshRangeRing();// 0x4b6723bfa041
	void OnRefreshChargeCircle(const bool InCharging);// 0x4b6623bfa041
	void OnCharacterBatteryIdChanged(SolarCharacter* InCharacter, float Frequency, float Quantity);// 0x4b6523bfa041
	bool IsCharacterInRange(SolarCharacter* InCharacter);// 0x4b6423bfa041
	bool IsAnyCharacterInRange();// 0x4b6323bfa041
	ChargingInfo GetChargingInfoByCharacter(SolarCharacter* Character);// 0x4b6223bfa041
	void GameStatisticsChargingPile(out ChargingInfo ChargingInfo, int pileLevel, Vector Location, float energyUse);// 0x4b6123bfa041
	void CreateChargeParticle(SolarCharacter* InCharacter);// 0x4b6023bfa041
	void ChangeColor();// 0x4b5f23bfa041
	bool CanWork();// 0x4b5e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarMapElementBase.Actor.Object
	FString Side;//[Offset: 0x238, Size: 0x10]
	FString Job;//[Offset: 0x248, Size: 0x10]
	FString ElementID;//[Offset: 0x258, Size: 0x10]
	enum Type;//[Offset: 0x268, Size: 0x1]
	enum State;//[Offset: 0x269, Size: 0x1]
	enum Visibility;//[Offset: 0x26a, Size: 0x1]
	class SolarGameMode_HandleElementRPC* BP_HandleActorRPC;//[Offset: 0x270, Size: 0x8]
	FName ElementTypeName;//[Offset: 0x278, Size: 0x8]
	FString GroupKey;//[Offset: 0x280, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0x290, Size: 0x1]
	void SetElementVisibility(const enum NewType);// 0x452f23bfa041
	enum SetElementState(const enum NewState);// 0x452e23bfa041
	void OnRep_ElementVisibility();// 0x452d23bfa041
	void OnRep_ElementState();// 0x452c23bfa041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x452b23bfa041
	void OnElementStateChanged(const enum CurrentState);// 0x452a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameMode_HandleElementRPC.ActorComponent.Object
	FName ComponentTagName;//[Offset: 0xb0, Size: 0x8]
	void OnRep_ComponentName();// 0x4cf623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ChargingInfo
	SolarCharacter* Ch;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
	float LastChargeTime;//[Offset: 0xc, Size: 0x4]
	bool bShowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float Quantity;//[Offset: 0x14, Size: 0x4]
	float Frequency;//[Offset: 0x18, Size: 0x4]
	enum PileHealingType;//[Offset: 0x1c, Size: 0x1]
	float TotalChargeEnergy;//[Offset: 0x20, Size: 0x4]
	SolarBackpackComponent* BackpackComponent;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBackpackComponent.ActorComponent.Object
	float DeathBoxEnergyRate;//[Offset: 0xb8, Size: 0x4]
	float RebirthEnergyRate;//[Offset: 0xbc, Size: 0x4]
	delegate OnWeaponCreateCompleteDelegate;//[Offset: 0xc8, Size: 0x10]
	float InitialSolarCharge;//[Offset: 0x150, Size: 0x4]
	float SolarChargeInterval;//[Offset: 0x154, Size: 0x4]
	float InitialEnergyLimit;//[Offset: 0x158, Size: 0x4]
	float InitialExtraEnergyLimit;//[Offset: 0x15c, Size: 0x4]
	float InitialExtraEnergyCharge;//[Offset: 0x160, Size: 0x4]
	float InitialChargeCD;//[Offset: 0x164, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0x178, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x17c, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0x180, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0x184, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0x188, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0x18c, Size: 0x4]
	float JetPackVerticalDashSpeedScale;//[Offset: 0x220, Size: 0x4]
	float JetPackHorizontalDashSpeedScale;//[Offset: 0x224, Size: 0x4]
	<int,class GameplayAbility> ItemAbilities;//[Offset: 0x228, Size: 0x50]
	<int,GameplayAbilitySpecHandle> GivenAbilityHandles;//[Offset: 0x278, Size: 0x50]
	bool bWeaponPartPickable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	<int,int> defaultDeathBoxEnergyConfig;//[Offset: 0x320, Size: 0x50]
	<int,DateTime> DroppedItemIDMap;//[Offset: 0x370, Size: 0x50]
	float DiscardItemDelayNoticeTime;//[Offset: 0x3c0, Size: 0x4]
	float[] GradeRankProportion;//[Offset: 0x3c8, Size: 0x10]
	int[] InitialGridNum;//[Offset: 0x3d8, Size: 0x10]
	int[] CustomMode_Hunt_InitialGridNum;//[Offset: 0x3e8, Size: 0x10]
	void WeaponCreateCompleteDelegate__DelegateSignature(byte SlotType, SolarPlayerWeapon* WeaponPtr, SolarBackpackComponent* SolarBackpackComponent);// 0x1c3423bfa041
	void UpdateCurrentExtraEnergy(float UpdateValue, enum Usage);// 0x1c3323bfa041
	void UpdateCurrentEnergy(float UpdateValue, enum Usage);// 0x1c3223bfa041
	void UpdateConsumeSlotUI();// 0x1c3123bfa041
	bool TryTriggerAbility(const int InItemID);// 0x1c3023bfa041
	void TrySendDropItemTips(const int InDroppedItemID);// 0x1c2f23bfa041
	float TakeDeathBoxEnergy();// 0x1c2e23bfa041
	void SmoothEnergy(const float Amount);// 0x1c2d23bfa041
	void SetMaxPileMap(int ItemID, int MaxNum);// 0x1c2c23bfa041
	void SetBoxCharging(bool bSet);// 0x1c2b23bfa041
	void SetBackPackGM(enum gmtypy, int ID, int Num, int Slot);// 0x1c2a23bfa041
	bool ServerUseItem(int ItemID, int Num);// 0x1c2923bfa041
	void ServerSetJetPackModule(int NewJetPackModuleID, bool bForVertical);// 0x1c2823bfa041
	void ServerSetEnergyState(enum State);// 0x1c2723bfa041
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x1c2623bfa041
	void ServerRPCUpgradeShield();// 0x1c2523bfa041
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x1c2423bfa041
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x1c2323bfa041
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x1c2223bfa041
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x1c2123bfa041
	void ServerRPCDisCardWeaponUICall(int Slot);// 0x1c2023bfa041
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x1c1f23bfa041
	void ServerRPCDiscardWeapon(const int InSlot);// 0x1c1e23bfa041
	void ServerRPCDisCardItemUICall(int ID, int Num);// 0x1c1d23bfa041
	void ServerRPCDiscardItem(const int InItemID, const int InItemNum);// 0x1c1c23bfa041
	bool ServerDiscardWeapon(const int Slot, const int InTriggerType);// 0x1c1b23bfa041
	bool ServerDiscardFromBackpackByType(const enum ItemType, const bool InDropItem, const int InTriggerType);// 0x1c1a23bfa041
	bool ServerDiscardFromBackpack(const int ItemID, const int Num, const bool InDropItem, const int InTriggerType);// 0x1c1923bfa041
	void ServerConsumeExtraEnergy(const float Amount, const enum Usage);// 0x1c1823bfa041
	void ServerConsumeEnergy(const float Amount, const enum Usage);// 0x1c1723bfa041
	void ServerClearJetModule();// 0x1c1623bfa041
	void ServerClearEnergyState(enum State);// 0x1c1423bfa041
	void ServerClearAllItems();// 0x1c1323bfa041
	void ServerBackpackGM(const enum InGmType, const int InItemID, const int InItemNum, const int InSlot);// 0x1c1123bfa041
	bool ServerAddWeaponToWeaponSysByDataCache(const byte SlotType, out const SolarItemData WeaponData, const bool bDestroyPrev, const bool IsAutoPickup, const int InTriggerType, SolarPlayerWeapon* WeaponActorExists);// 0x1c1023bfa041
	int ServerAddToItemMapByIdAndNumForced(const int ItemID, const int Num);// 0x1c0f23bfa041
	int ServerAddToItemMap(SolarItemData ItemData);// 0x1c0e23bfa041
	void ServerAddToEquipMap(out const SolarItemData ItemData, bool Bydefault, bool InDropItem);// 0x1c0d23bfa041
	int ServerAddToBackpackByIdAndNum(const int ItemID, const int Num, const bool Bydefault, const float CurValue, const bool NeedReset, const int UserId, const int TriggerType, const int SourceType);// 0x1c0c23bfa041
	int ServerAddToBackpack(out const SolarItemData ItemData, const bool Bydefault, const int TriggerType);// 0x1c0b23bfa041
	void ReqUseEnergy(float Amount, enum Usage);// 0x1c0a23bfa041
	void RequestUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x1c0923bfa041
	void RequestUpgradeShield();// 0x1c0823bfa041
	void ReqesutPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x1c0723bfa041
	void RefreshWeaponPartsInBackPackUI();// 0x1c0623bfa041
	void RefreshWeaponInBackPackUIInternal();// 0x1c0523bfa041
	void RefreshWeaponInBackPackUI();// 0x1c0423bfa041
	void RefreshItemInBackPackUI();// 0x1c0323bfa041
	void RefreshEquipInBackPackUI();// 0x1c0223bfa041
	void RefreshBackPackUIState();// 0x1c0123bfa041
	void PurchaseEShopItemsResponse_Implementation(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x1c0023bfa041
	int PredictEnergy(const float Amount);// 0x1bff23bfa041
	void OnReceiveItemAbilityCoolDown(out const GameplayTag Tags, const bool bAdd);// 0x1bfe23bfa041
	bool NetUseEnergy(float InCostEnergy, enum Usage);// 0x1bfd23bfa041
	void NetTakeWeaponPartToBagLuaCall(const int Slot, const int WeaponPartType);// 0x1bfc23bfa041
	void NetTakeBagPartToWeaponLuaCall(const int Slot, const int WeaponPartType);// 0x1bfb23bfa041
	void NetSwitchWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x1bfa23bfa041
	void NetDiscardWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x1bf923bfa041
	bool ModuleOverflow2(int ModuleMax);// 0x1bf823bfa041
	bool ModuleOverflow(int ModuleMax);// 0x1bf723bfa041
	void LogBackPackItem();// 0x1bf623bfa041
	bool IsReviveItemRecommend();// 0x1bf523bfa041
	bool IsReviveItemPickable();// 0x1bf423bfa041
	bool IsReviveItem(const int InItemID);// 0x1bf323bfa041
	bool IsExtraEnergyID(int ID);// 0x1bf223bfa041
	bool IsEquippedWeapon(const int InThisID);// 0x1bf123bfa041
	bool IsEquippedOrHasBetterPart(const int PartType, const int Level);// 0x1bf023bfa041
	bool IsEnergyID(int ID);// 0x1bef23bfa041
	int IsBetterWeaponThanEquiped(out const SolarItemData InItemData, const int InWeaponLevel, const int InWeaponExp);// 0x1bee23bfa041
	bool IsBetterWeaponForBag(out const SolarItemData InItemData, int InWeaponLevel, int InWeaponExp);// 0x1bed23bfa041
	bool IsBetterScopeForBag(const int PartType, const int Level);// 0x1bec23bfa041
	bool IsBetterPartForBag(const int PartType, const int Level);// 0x1beb23bfa041
	void InitDefaultItem(int ItemID, int Num);// 0x1bea23bfa041
	void InitDeathBoxEnergyRate();// 0x1be923bfa041
	bool HasEmptyWeaponSlot();// 0x1be823bfa041
	bool GetWeaponSlotEmpty(int Slot);// 0x1be723bfa041
	bool GetWeaponPartInBagClient(int TargetPartType, out int OutPartLevel, out int OutItemID);// 0x1be623bfa041
	SolarItemData GetWeaponItemDataBySlot(int Slot);// 0x1be523bfa041
	bool GetWeaponDataBySolt(int Slot, out SolarItemData ItemData);// 0x1be423bfa041
	float GetTotalEnergy();// 0x1be323bfa041
	float GetQuantityFrom(enum Usage);// 0x1be223bfa041
	SolarItemData GetNewItemData(int ItemID, int Num);// 0x1be123bfa041
	float GetMaxExtraEnergy();// 0x1be023bfa041
	float GetMaxEnergy();// 0x1bdf23bfa041
	float GetMaxDeathBoxEnergyFromConfig();// 0x1bde23bfa041
	int GetItemNumById(int ItemID);// 0x1bdd23bfa041
	int GetItemMaxPile(int ItemID);// 0x1bdc23bfa041
	bool GetItemDataByType(enum ItemType, out SolarItemData ItemData);// 0x1bdb23bfa041
	bool GetItemDataById(int ItemID, out SolarItemData ItemData);// 0x1bda23bfa041
	float GetFrequencyFrom(enum Usage);// 0x1bd923bfa041
	SolarItemData GetEquipItemDataByType(enum ItemType);// 0x1bd823bfa041
	int GetEquipIdByType(enum ItemType);// 0x1bd723bfa041
	float GetCurrExtraEnergy();// 0x1bd623bfa041
	SolarItemData GetCurrentWeaponItemData();// 0x1bd523bfa041
	bool GetCurrentWeaponIsOverloading();// 0x1bd423bfa041
	void GetCurrentEquipItems(out int[] OutArray);// 0x1bd323bfa041
	float GetCurrEnergy();// 0x1bd223bfa041
	SolarCharacter* GetCharacterOwner();// 0x1bd123bfa041
	byte GetBestSuitSlotForCandidateWeapon(out const SolarItemData WeaponData, const bool IsAutoPickup);// 0x1bcf23bfa041
	bool GetAnyScopeInBagClient(out int OutPartType, out int OutPartLevel, out int OutItemID);// 0x1bce23bfa041
	float GetAbilityRemainingCD(const int InItemID);// 0x1bcd23bfa041
	float GetAbilityDuration(const int InItemID);// 0x1bcc23bfa041
	void GameStatistics_ItemUseCount(out const SolarItemData InItemData);// 0x1bcb23bfa041
	void ExecuteGM(FString InStrGM);// 0x1bca23bfa041
	void EquipModuleByID(int ModuleID);// 0x1bc923bfa041
	int EquipModule(const int ID, const float ModuleMax);// 0x1bc823bfa041
	void EquipBatteryByID(int BatteryID);// 0x1bc723bfa041
	int EquipBattery(const int ID, const float BatteryMax, const float Charge, const float CD);// 0x1bc623bfa041
	void DiscardItemAndResetCharacterData(out const SolarItemData DiscardItem, const bool DiscardDataOnly);// 0x1bc523bfa041
	void DiscardItem(SolarItemData DiscardItem);// 0x1bc123bfa041
	void DelayCheckClearAbility(const int InItemID);// 0x1bc023bfa041
	void CommitEnergy(const int ID);// 0x1bbf23bfa041
	bool ClearBackpackItemByID(const int InItemID);// 0x1bbe23bfa041
	void CheckToGiveAbility(const int InItemID);// 0x1bbd23bfa041
	void CheckToClearAbility(const int InItemID);// 0x1bbc23bfa041
	bool CheckIsRecWeaponParts(const int ItemID);// 0x1bbb23bfa041
	bool CheckIsEquippedDifferentScope(const int PartID);// 0x1bba23bfa041
	bool CheckCanAutoPickupWeaponPart(const int ItemID);// 0x1bb923bfa041
	float ChargeMain(const float Amount, enum Usage);// 0x1bb823bfa041
	float ChargeExtra(const float Amount, enum Usage);// 0x1bb623bfa041
	void CancelEnergy(const int ID);// 0x1bb523bfa041
	bool BatteryOverflow(int BatteryMax);// 0x1bb423bfa041
	enum AddBackpackItemByID(const int InItemID, const int InItemNum, const bool InDropItem);// 0x1bb223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlayerWeapon.SolarWeapon.Actor.Object
	float SpawnOffset;//[Offset: 0xb50, Size: 0x4]
	SolarItemData ItemData;//[Offset: 0xb58, Size: 0xb8]
	byte[] MarkedTeamIdList;//[Offset: 0xc10, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0xc20, Size: 0x1]
	SphereComponent* SphereComponent;//[Offset: 0xc28, Size: 0x8]
	Vector DroppedLocation;//[Offset: 0xc30, Size: 0xc]
	SolarCharacterBase* WeaponOwner;//[Offset: 0xc40, Size: 0x8]
	WeaponAnimationComponent* WeaponAnimationComponent;//[Offset: 0xc48, Size: 0x8]
	byte WeaponCurrentDiscardState;//[Offset: 0xc50, Size: 0x1]
	byte WeaponCurrentState;//[Offset: 0xc51, Size: 0x1]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0xc58, Size: 0x10]
	SoftObjectPath HoldMeshMaterialPath;//[Offset: 0xc68, Size: 0x18]
	MaterialInterface* OutlineBaseMat;//[Offset: 0xc80, Size: 0x8]
	ParticleSystemComponent*[] SkinExtraPSCArray;//[Offset: 0xc90, Size: 0x10]
	ParticleSystemComponent* SkinSpecialEffect;//[Offset: 0xca0, Size: 0x8]
	MaterialInstanceDynamic* MeshSubpassMaterial;//[Offset: 0xcb8, Size: 0x8]
	MaterialInstanceDynamic*[] MeshDiscardMaterialArray;//[Offset: 0xcc0, Size: 0x10]
	WeaponSkinData* WeaponSkinData;//[Offset: 0xcd0, Size: 0x8]
	int WeaponSkinID;//[Offset: 0xcd8, Size: 0x4]
	int ScopePartID;//[Offset: 0xcdc, Size: 0x4]
	int GripPartID;//[Offset: 0xce0, Size: 0x4]
	int StockPartID;//[Offset: 0xce4, Size: 0x4]
	int MuzzlePartID;//[Offset: 0xce8, Size: 0x4]
	int ClipPartID;//[Offset: 0xcec, Size: 0x4]
	int DefaultSkinID;//[Offset: 0xcf0, Size: 0x4]
	bool bIsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf9, Size: 0x1]
	float LifespanAfterAutoDrop;//[Offset: 0xcfc, Size: 0x4]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd00, Size: 0x1]
	ParticleSystem* SkinDedicatedKillEffect;//[Offset: 0xd08, Size: 0x8]
	ParticleSystem* SkinDedicatedSpecialEffect;//[Offset: 0xd10, Size: 0x8]
	void UpdateCharacterState(enum CharacterState, bool bIsOnGround, bool bResetState);// 0x520f23bfa041
	void UpdateCharacterPosture(bool IsCrouch);// 0x520e23bfa041
	void SetOpenScopeOnVehicle(const bool InbOpenScope);// 0x520d23bfa041
	void SetDedicatedSkinEffect(const WeaponSkinData* InSkinData);// 0x520c23bfa041
	void RequestUnlimitedAmmo(const bool InEnable);// 0x520b23bfa041
	void PostUpdateAppearance();// 0x520a23bfa041
	void OnSetWeaponSkinMesh(SkeletalMesh* InMesh, class Object InAnimClass);// 0x520923bfa041
	void OnRep_WeaponCurrentStateChanged();// 0x520823bfa041
	void OnRep_WeaponCurrentDiscardStateChanged();// 0x520723bfa041
	void OnClientMeshLodChanged(int LOD);// 0x520623bfa041
	void NotifyThisItemWasPickedUp();// 0x520523bfa041
	void K2_SwitchDrawDistance(bool Hold);// 0x520423bfa041
	void K2_OnHold(bool bLocal);// 0x520323bfa041
	void K2_OnDrop();// 0x520223bfa041
	bool IsOpenedScopeOnVehicle();// 0x520123bfa041
	bool IsItemWeapon();// 0x520023bfa041
	bool IsExistPart(out const enum PartType);// 0x51ff23bfa041
	void Hold(bool bInHold);// 0x51fe23bfa041
	bool HasScope();// 0x51fd23bfa041
	float GetWeaponSilencerMagnitude();// 0x51fc23bfa041
	PlayerWeaponRecoilComponent* GetRecoilComp();// 0x51fb23bfa041
	int GetQualityByLevel(int Level);// 0x51fa23bfa041
	int GetQuality();// 0x51f923bfa041
	byte GetItemCurrentState();// 0x51f823bfa041
	bool GetIsHolded();// 0x51f723bfa041
	Vector GetFPPLocation();// 0x51f623bfa041
	float GetFire2AnimPlayRate();// 0x51f523bfa041
	float GetDistanceToEyeWhenScope();// 0x51f423bfa041
	Vector GetCurrentScopeAimCenterPoint();// 0x51f323bfa041
	WeaponPartClipComp* GetCurrentClip();// 0x51f223bfa041
	void ClearSkinExtraPSC();// 0x51f123bfa041
	void ClearDedicatedSkinEffect();// 0x51f023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeapon.Actor.Object
	delegate OnWeaponUnhold;//[Offset: 0x378, Size: 0x10]
	WeaponMechanicalState WeaponState;//[Offset: 0x388, Size: 0x50]
	enum PrimaryShootingOption;//[Offset: 0x3d9, Size: 0x1]
	ImpactDisplayInfo ImpactInfo;//[Offset: 0x3dc, Size: 0x10]
	enum DefaultDamageType;//[Offset: 0x3f8, Size: 0x1]
	SolarVirtualBulletCollector* VirtualBulletCollector;//[Offset: 0x400, Size: 0x8]
	WeaponFireLaserCollector* LaserCollector;//[Offset: 0x408, Size: 0x8]
	int ExtraPoints;//[Offset: 0x414, Size: 0x4]
	int ExtraPointsForInit;//[Offset: 0x418, Size: 0x4]
	bool bUseSkillStateMachine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	int ExtraPointsLimit;//[Offset: 0x420, Size: 0x4]
	int SecModeLimitTypeID;//[Offset: 0x424, Size: 0x4]
	float RestoreProgressPerSec;//[Offset: 0x428, Size: 0x4]
	float RestoreProgressPerKill;//[Offset: 0x438, Size: 0x4]
	float RestoreProgressPerDmg;//[Offset: 0x43c, Size: 0x4]
	float RestoreProgressAccumulation;//[Offset: 0x440, Size: 0x4]
	float RestoreProgressAccumulationForInit;//[Offset: 0x444, Size: 0x4]
	byte FireModeIndex;//[Offset: 0x451, Size: 0x1]
	enum OverloadState;//[Offset: 0x464, Size: 0x1]
	float OverloadAccum;//[Offset: 0x468, Size: 0x4]
	CurveFloat* OverloadCurve;//[Offset: 0x478, Size: 0x8]
	float GatlingRollSpeed;//[Offset: 0x484, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x488, Size: 0x4]
	float GatlingRollSpeedInterp;//[Offset: 0x48c, Size: 0x4]
	int GatlingRepState;//[Offset: 0x490, Size: 0x4]
	float FireChargingTime;//[Offset: 0x4b8, Size: 0x4]
	int FireChargingPhase;//[Offset: 0x4bc, Size: 0x4]
	float FireChargingSumTime;//[Offset: 0x4c0, Size: 0x4]
	float ChargeAnimationRate;//[Offset: 0x4cc, Size: 0x4]
	class GameplayEffect* ChargingEffect;//[Offset: 0x4d0, Size: 0x8]
	AbilitySystemComponent* OwnerGAS;//[Offset: 0x4e0, Size: 0x8]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x4f0, Size: 0x8]
	int CurrentMode;//[Offset: 0x4f8, Size: 0x4]
	FireMode[] FireModes;//[Offset: 0x508, Size: 0x10]
	Actor* WeaponHolder;//[Offset: 0x518, Size: 0x8]
	SolarCharacterBase* ControlWeaponCharacter;//[Offset: 0x520, Size: 0x8]
	GameplayAbilitySpecHandle[] EquippedAbilityHandles;//[Offset: 0x528, Size: 0x10]
	bool bControlWeaponCharacterChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	Actor* AimTarget;//[Offset: 0x540, Size: 0x8]
	class SolarWeaponProjectileSpline* ProjSplineClass;//[Offset: 0x548, Size: 0x8]
	SolarWeaponProjectileSpline* ProjSpline;//[Offset: 0x550, Size: 0x8]
	enum[] ShootingOptArray;//[Offset: 0x558, Size: 0x10]
	bool bShowSpecialEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	SingleWeaponConfig* Config;//[Offset: 0x570, Size: 0x8]
	Texture2D* WeaponIcon;//[Offset: 0x578, Size: 0x8]
	SlateWidgetStyleAsset* PrimaryFireBtnStyle;//[Offset: 0x580, Size: 0x8]
	SlateWidgetStyleAsset* SecondaryFireBtnStyle;//[Offset: 0x588, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfig;//[Offset: 0x590, Size: 0x8]
	WeaponRecoilComponent* RecoilComponent;//[Offset: 0x598, Size: 0x8]
	int weaponid;//[Offset: 0x5a0, Size: 0x4]
	WeaponSpreadAndRecoil* SpreadAndRecoil;//[Offset: 0x5a8, Size: 0x8]
	bool bTeamDamageEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 0x1]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bd, Size: 0x1]
	bool bInfinitePackageAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5be, Size: 0x1]
	int ExtraAmmo;//[Offset: 0x5c0, Size: 0x4]
	<ParticleSystem*,ParticleLoopListener*> LoopParticlesMap;//[Offset: 0x5c8, Size: 0x50]
	int CurrentClipAmmo;//[Offset: 0x618, Size: 0x4]
	<enum,WeaponAnimationInfo> WeaponAnimationMap;//[Offset: 0x728, Size: 0x50]
	bool bResetMuzzleIndexWhenStopFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 0x1]
	CameraShakeData[] WeaponFireCameraShakes;//[Offset: 0x788, Size: 0x10]
	CameraShakeData[] WeaponScopeFireCameraShakes;//[Offset: 0x798, Size: 0x10]
	CameraShakeData[] UsingSkillCameraShakes;//[Offset: 0x7a8, Size: 0x10]
	CameraShakeData[] WeaponChargingCameraShakes;//[Offset: 0x7b8, Size: 0x10]
	bool bUseEmptyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1]
	SoftObjectPath FightMeshPath;//[Offset: 0x7d0, Size: 0x18]
	SkeletalMeshComponent* Mesh;//[Offset: 0x7e8, Size: 0x8]
	SkeletalMesh* OriginalMesh;//[Offset: 0x7f0, Size: 0x8]
	class WeaponAnimInstance* OriginalAnimBP;//[Offset: 0x7f8, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x800, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x808, Size: 0x8]
	int SoundFireAutoCount;//[Offset: 0x810, Size: 0x4]
	bool bTriggerSoundFireAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x814, Size: 0x1]
	int OldSoundFireAutoCount;//[Offset: 0x818, Size: 0x4]
	bool bTriggerSoundB9A04Skill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c, Size: 0x1]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81d, Size: 0x1]
	int SkillFireCount;//[Offset: 0x820, Size: 0x4]
	int SingleFireCount;//[Offset: 0x824, Size: 0x4]
	int FireOverloadCount;//[Offset: 0x828, Size: 0x4]
	int FireLastCount;//[Offset: 0x82c, Size: 0x4]
	OverrideBulletStruct OverrideBullet;//[Offset: 0x890, Size: 0x18]
	bool bLoadInitAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 0x1]
	bool bLoadAllCfgAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a9, Size: 0x1]
	<FireUniqueID,float> FireHitVerifyMap;//[Offset: 0x8b0, Size: 0x50]
	bool bDetectedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908, Size: 0x1]
	ParticleSystemComponent*[] GatlingOverHeatPSCs;//[Offset: 0x910, Size: 0x10]
	bool bTracingAimTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 0x1]
	MaterialInterface* SpecialFireChargeMaterial;//[Offset: 0x930, Size: 0x8]
	<int,Color> SpecialFireChargeColorMap;//[Offset: 0x938, Size: 0x50]
	bool bPerspectiveForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x988, Size: 0x1]
	enum CurrentSpreadState;//[Offset: 0x9b0, Size: 0x1]
	int ContinuousAddSpreadByFireCount;//[Offset: 0x9b4, Size: 0x4]
	bool bLastAddSpreadByFireIsHipFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 0x1]
	int8 LastAddSpreadByFireFireMode;//[Offset: 0x9b9, Size: 0x1]
	float LastAddSpreadByFireTime;//[Offset: 0x9bc, Size: 0x4]
	float SpreadPrepareTimer;//[Offset: 0x9c0, Size: 0x4]
	float PendingBaseSpread;//[Offset: 0x9c4, Size: 0x4]
	float TargetBaseSpread;//[Offset: 0x9c8, Size: 0x4]
	float PendingAddSpread;//[Offset: 0x9cc, Size: 0x4]
	float TargetAddSpread;//[Offset: 0x9d0, Size: 0x4]
	HitResult AimHitResult;//[Offset: 0xa00, Size: 0x88]
	void WeaponStateOnRepReload();// 0x51ef23bfa041
	bool VerifyLastClipAmmo(int InFireModeType, int InLastClipAmmo);// 0x51ee23bfa041
	bool UseEnergy(int Mode);// 0x51ed23bfa041
	bool TryHitOperation(out const FireUniqueID FireUniqueID, const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, const float DamageScale, out const BulletHitDetailData HitDetailData, const bool IsNotDelay);// 0x51ec23bfa041
	void StopSoundDelay(const float DelayTime);// 0x51eb23bfa041
	void StopSound(enum Opt, int idx);// 0x51ea23bfa041
	void StopLastValidFire();// 0x51e923bfa041
	void StopGatlingSound();// 0x51e823bfa041
	void StartSound(enum Opt, int idx);// 0x51e723bfa041
	void StartAsyncLoading();// 0x51e623bfa041
	SolarProjBullet* SpawnProjWithFireID(out const SpawnBulletParam Param, out const FireUniqueID FireID, const bool Local);// 0x51e523bfa041
	void ShowSpecialEffect(bool bShow);// 0x51e423bfa041
	void SetWeaponAnimState(enum InWeaponAnimState);// 0x51e323bfa041
	void SetReservedAmmoForce(int InFireModeType, int InAmount);// 0x51e223bfa041
	void SetPrimaryShootingOption(enum Opt);// 0x51e123bfa041
	void SetLastFireTime(int InFireModeType, float InFireTime);// 0x51e023bfa041
	void SetHolder(Actor* InHolder);// 0x51df23bfa041
	void ServerWeaponSound(const enum Opt, const bool TriggerSound);// 0x51de23bfa041
	void ServerVirtualBulletShotHit(const SolarVirtualBulletHitParameter[] AllHitParams, Pawn* SourcePawn);// 0x51dd23bfa041
	void ServerVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter, float InTimestamp);// 0x51dc23bfa041
	void ServerUpdateMechanicalState(enum NewMechanicalState, enum NewSubFlags);// 0x51db23bfa041
	void ServerUpdateLaserInfo(const Vector InTarget, Actor* InTargetActor);// 0x51da23bfa041
	void ServerUpdateGatlingRepState(int InState);// 0x51d923bfa041
	void ServerSpawnProjWithVelocity(const SpawnProjParam Param);// 0x51d823bfa041
	void ServerSpawnProjWithFireID(const SpawnBulletParam Param, const FireUniqueID FireID);// 0x51d723bfa041
	void ServerSetTracingAimTarget(bool InbTracingAimTarget);// 0x51d623bfa041
	void ServerSetPrimaryOption(const enum Opt);// 0x51d523bfa041
	void ServerSetHipFire(const bool InbHipFire);// 0x51d423bfa041
	void ServerResetFireCount();// 0x51d323bfa041
	void ServerRequestDropWeapon();// 0x51d223bfa041
	void ServerPlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength);// 0x51d123bfa041
	void ServerModeState(const byte ModeIndex);// 0x51d023bfa041
	void ServerLaserHit(const HitResult[] Hits, float InActivateTime);// 0x51cf23bfa041
	void ServerInterruptLaser();// 0x51ce23bfa041
	void ServerInstantLineShot(const byte ModeIndex, const Vector_NetQuantize Start, const Vector_NetQuantize End, const float DamageScale, const MutiBulletHitData HitData);// 0x51cd23bfa041
	void ServerFireChargeShoot(const AmmoConfig* InAmmo, const int8 InFireChargingPhase, int InFireChargingTime);// 0x51cc23bfa041
	void ServerFireChargePhaseChange(const int8 InFireChargingPhase);// 0x51cb23bfa041
	void ServerFire_JustAbilitiesAmmo(const byte ModeIndex);// 0x51ca23bfa041
	void ServerChangeOverloadState(const enum InState);// 0x51c923bfa041
	void ServerCanisterShot(const Vector_NetQuantize Start, const Vector_NetQuantize End, const float RandomA, const float RandomB, const MutiBulletHitData HitData);// 0x51c823bfa041
	void ServerAddExpWithReason(int InExp, int InReasonID);// 0x51c723bfa041
	void ServerActivateLaserShot(const Vector InTarget, Actor* InTargetActor);// 0x51c623bfa041
	void RuntimeUpdateData(int Cmd, FString Params);// 0x51c523bfa041
	void ResetRecoilComponent();// 0x51c423bfa041
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0x51c323bfa041
	void ReceiveChargingState(const int Index, const enum State);// 0x51c223bfa041
	void PrimaryCost();// 0x51c123bfa041
	void PlayVibrate(enum InType);// 0x51c023bfa041
	void PlayReloadRestoreVibrate();// 0x51bf23bfa041
	void PlayReloadGetOldVibrate();// 0x51be23bfa041
	void PlayFireVibrate();// 0x51bd23bfa041
	void PlayChargeVibrate();// 0x51bc23bfa041
	void PlayBulletHitEffect(out const HitResult HitResult, SolarBullet* Bullet, bool bForce, Pawn* HitCauser, float HitEffectScale);// 0x51bb23bfa041
	void PlayBoltVibrate();// 0x51ba23bfa041
	void PlayAutoSingleSound();// 0x51b923bfa041
	void PlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength, bool bNeedNetMulticast, int AnimCount);// 0x51b823bfa041
	void OverrideFireMode(int InFireModeType, const AmmoConfig* InNewAmmoConfig);// 0x51b723bfa041
	void OnRep_WeaponState();// 0x51b623bfa041
	void OnRep_TracingAimTarget();// 0x51b523bfa041
	void OnRep_SoundFireSkillCast();// 0x51b423bfa041
	void OnRep_SoundFireSingle();// 0x51b323bfa041
	void OnRep_SoundFireOverload();// 0x51b223bfa041
	void OnRep_SoundFireLast();// 0x51b123bfa041
	void OnRep_SoundFireBurst();// 0x51b023bfa041
	void OnRep_SoundFireAutoCount();// 0x51af23bfa041
	void OnRep_SoundB9A04Skill();// 0x51ae23bfa041
	void OnRep_OverloadStateChange(enum PreviousState);// 0x51ad23bfa041
	void OnRep_ImpactPosition();// 0x51ac23bfa041
	void OnRep_FireModes();// 0x51ab23bfa041
	void OnRep_FireChargingPhase(int InOldFireChargingPhase);// 0x51aa23bfa041
	void OnRep_ExtraAmmo();// 0x51a923bfa041
	void OnRep_CurrentMode();// 0x51a823bfa041
	void OnRep_ControlWeaponCharacterChanged();// 0x51a723bfa041
	void OnPlayMuzzleEffect();// 0x51a623bfa041
	void OnLoadInitAssetComplete();// 0x51a523bfa041
	void OnLoadCfgAssetsComplete();// 0x51a423bfa041
	void OnInternalUnControlled();// 0x51a323bfa041
	void OnInternalControlled(SolarCharacterBase* OwnerChar);// 0x51a223bfa041
	void OnInstantLineShotHit(out const HitResult InHit, const float DamageScale);// 0x51a123bfa041
	void OnInitFlowComplete();// 0x51a023bfa041
	void OnGatlingRollChange(bool bIncrease);// 0x519f23bfa041
	void OnFireChargeBurstCountChange(int BurstSum);// 0x519e23bfa041
	enum NextShootingPrimaryOption();// 0x519d23bfa041
	void LuaStopSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x519c23bfa041
	void LuaStartSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x519b23bfa041
	void LoadInitAsset();// 0x519a23bfa041
	void LoadAllCfgAssets();// 0x519923bfa041
	AmmoConfig* K2_GetOverrideAmmoConfigBase(int ModeIndex);// 0x519823bfa041
	SingleWeaponConfig* K2_GetCurrentConfig();// 0x519723bfa041
	bool IsVisible();// 0x519623bfa041
	bool IsShowCoolDownWidget();// 0x519523bfa041
	bool IsShotAimEnemy();// 0x519423bfa041
	bool IsScopeOpen();// 0x519323bfa041
	bool IsOpenedScope();// 0x519223bfa041
	bool IsHipFire();// 0x519123bfa041
	bool IsEnergyID(const int BulletItemID);// 0x519023bfa041
	bool IsControlled();// 0x518f23bfa041
	bool IsCanFire();// 0x518e23bfa041
	ParticleSystemComponent* InternalPlayEffectAttached(ParticleSystem* PS, SceneComponent* AttachToComponent, FName AttachPointName, AttachedEffectParam Param);// 0x518d23bfa041
	ParticleSystemComponent* InternalPlayEffectAtLocation(const Object* WorldContext, ParticleSystem* PS, out const Vector Location, LocationEffectParam Param, bool bUseDistScale);// 0x518c23bfa041
	void InternalClientPlayFiringEffects();// 0x518b23bfa041
	bool InSameTeam();// 0x518a23bfa041
	void InitConfigs();// 0x518923bfa041
	bool ImmediatelyFire(int idx, const bool bEnable);// 0x518823bfa041
	bool HasLoadInitAsset();// 0x518723bfa041
	bool HasLoadAllCfgAssets();// 0x518623bfa041
	bool HasInitFinish();// 0x518523bfa041
	bool HasInitConfigs();// 0x518423bfa041
	void HandFireModeInput(byte WeaponFireModeType, bool Press);// 0x518323bfa041
	enum GetWeaponType();// 0x518223bfa041
	FString GetWeaponTextType();// 0x518123bfa041
	uint32 GetWeaponNoticeID(out const FName InNoticeType);// 0x518023bfa041
	int GetWeaponLevel();// 0x517f23bfa041
	int GetWeaponID();// 0x517e23bfa041
	Texture2D* GetWeaponIcon();// 0x517d23bfa041
	enum GetWeaponBrand();// 0x517c23bfa041
	AnimMontage* GetWeaponAnimSequence(const enum InMontageType);// 0x517b23bfa041
	WeaponAnimationInfo GetWeaponAnimationInfo(const enum InMontageType);// 0x517a23bfa041
	SlateBrush GetTriggerIcon(const int InFireModeType);// 0x517923bfa041
	int GetSpareAmmo(int InFireModeType);// 0x517823bfa041
	float GetSoundRTPCValue();// 0x517723bfa041
	int GetSkinID();// 0x517623bfa041
	float GetShotGunSpreadSeed();// 0x517523bfa041
	Vector GetShotDir(bool NeedSpread);// 0x517423bfa041
	Vector GetShootingTraceStartLocation();// 0x517323bfa041
	FString GetShootingPrimaryShootingOptionName(const enum Opt);// 0x517223bfa041
	float GetSecondModeValue();// 0x517123bfa041
	int GetReservedAmmo(int idx);// 0x517023bfa041
	float GetReloadProgress();// 0x516f23bfa041
	WeaponRecoilComponent* GetRecoilComponent();// 0x516e23bfa041
	int GetPrimaryShootingOptionIndex();// 0x516d23bfa041
	float GetPostFireDuration(int idx);// 0x516c23bfa041
	WeaponPartsComponent* GetPartsComponent();// 0x516b23bfa041
	float GetOverloadPercent();// 0x516a23bfa041
	float GetOverloadMaxValue();// 0x516923bfa041
	SolarWeaponProjectileSpline* GetOrCreateWeaponProjectileSpline();// 0x516823bfa041
	int GetMaxAmmo(int idx, bool bWithExtraAmmoByChaAbility);// 0x516723bfa041
	float GetLastFireTime(int InFireModeType);// 0x516623bfa041
	bool GetIsVehicleMounted();// 0x516523bfa041
	bool GetIsSupportSecondaryFire();// 0x516423bfa041
	bool GetIsSupportAutoFire();// 0x516323bfa041
	bool GetIsSupportAssistAim();// 0x516223bfa041
	bool GetIsQuickScope();// 0x516123bfa041
	bool GetIsCoolDown(int Mode);// 0x516023bfa041
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x515f23bfa041
	int GetFireModeNameLocalizationID(int InFireModeType);// 0x515e23bfa041
	float GetFireIntervalProgress(int idx);// 0x515d23bfa041
	float GetFireInterval(int idx);// 0x515c23bfa041
	void GetFireChargeInfo(out int OutChargingPhase, out float OutChargingTime, out float OutRate, out FireChargeData OutChargeData);// 0x515b23bfa041
	float GetFireCD(int idx);// 0x515a23bfa041
	float GetExtraPointsPercent();// 0x515923bfa041
	int GetExtraPoints();// 0x515823bfa041
	ParticleSystem* GetDedicatedKillEffect();// 0x515723bfa041
	SoftObjectPath GetDedicatedDissolvedDeathFXPath();// 0x515623bfa041
	class ActorEffect GetDedicatedDissolvedDeathActorEffectClass();// 0x515523bfa041
	WeaponDebugFlag GetDebugFlag();// 0x515423bfa041
	int GetCurScopeType();// 0x515323bfa041
	enum GetCurrentShootingPrimaryOption();// 0x515223bfa041
	enum GetCurrentScopeType();// 0x515123bfa041
	FireChargeData GetCurrentFireChargeData(const AmmoConfig* InAmmo);// 0x515023bfa041
	AmmoConfig* GetCurrentFireChargeAmmoData(const AmmoConfig* InAmmo);// 0x514f23bfa041
	int GetCurrentClipAmmo(int InFireModeType);// 0x514e23bfa041
	bool GetCurrentChargeModePercent(int InFireModeType, out int OutChargeMode, out float OutChargePercent);// 0x514d23bfa041
	int GetCostPreAttack(int idx);// 0x514c23bfa041
	SolarCharacterBase* GetControlWeaponCharacter();// 0x514b23bfa041
	float GetChargingPercent(int idx);// 0x514a23bfa041
	float GetBurstInterval(int idx);// 0x514923bfa041
	float GetBurstInternalInterval(int idx);// 0x514823bfa041
	void GetBulletHitEffectRot(out const HitResult HitResult, const SolarBullet* Bullet, out Rotator TargetPos, const bool bIsHittedShield);// 0x514723bfa041
	void GetBulletHitEffectPos(out const HitResult HitResult, out Vector TargetRot, float Offset);// 0x514623bfa041
	SolarBullet* GetBulletDefaultObject(const int idx, const AmmoConfig* AmmoCfg);// 0x514523bfa041
	class SolarBullet GetBulletClass(const int idx, const AmmoConfig* AmmoCfg);// 0x514423bfa041
	float GetBotAIDamageFactor();// 0x514323bfa041
	enum GetAmmoTriggerType(const int fireModeType);// 0x514223bfa041
	int GetAmmoItemID(int idx);// 0x514123bfa041
	bool GetAllInitAssetPath(out SoftObjectPath[] PathArray);// 0x514023bfa041
	bool GetAllCfgAssetsPath(out SoftObjectPath[] PathArray);// 0x513f23bfa041
	void GetAimStartEnd(const AmmoConfig* InAmmo, out Vector OutStart, out Vector OutEnd, out Actor* OutTargetActor, bool NeedSpread);// 0x513e23bfa041
	bool FireVerify_Location(const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x513d23bfa041
	bool FireVerify_EffectRange(const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x513c23bfa041
	bool FireVerify_Block(const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x513b23bfa041
	bool FireValidate(const int idx, const float InLastShootTime);// 0x513a23bfa041
	enum FindMontageKeyFromWeaponAnim(const AnimMontage* InAnimation);// 0x513923bfa041
	void EnterOverloadState();// 0x513823bfa041
	void DestroyWeaponProjectileSpline();// 0x513723bfa041
	void ClientVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter);// 0x513623bfa041
	void ClientUpdateLaserInfo(const Vector InTarget, Actor* InTargetActor);// 0x513523bfa041
	void ClientPlayHitEffect(const MultiHitResult InMultiHitResult);// 0x513423bfa041
	void ClientPlayFiringEffects();// 0x513323bfa041
	void ClientPlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength);// 0x513223bfa041
	void ClientNotifyUpdateReservedAmmoForce(int InFireModeType, int InAmount);// 0x513123bfa041
	void ClientLaserHit(const HitResult[] Hits, float InActivateTime);// 0x513023bfa041
	void ClientInterruptLaser();// 0x512f23bfa041
	void ClientInstantLineShot(const byte ModeIndex, const HitResult[] HitResults, const Vector_NetQuantize End, const float DamageScale);// 0x512e23bfa041
	void ClientFireChargeShoot(const AmmoConfig* InAmmo, const int8 InFireChargingPhase, int InFireChargingTime);// 0x512d23bfa041
	void ClientCanisterShot(const Vector_NetQuantize Start, const WeaponShotHitResult[] ValidHits, const Vector_NetQuantize Target);// 0x512c23bfa041
	void ClientActivateLaserShot(const Vector InTarget, Actor* InTargetActor);// 0x512b23bfa041
	void ClearFireHitVerify();// 0x512a23bfa041
	bool CheckOpenParticleOptimization(int Bias);// 0x512923bfa041
	bool CanOverload();// 0x512823bfa041
	bool CanCauseTeamDamage();// 0x512723bfa041
	float CalcScale(out const FireMode Mode);// 0x512623bfa041
	int CalcCost(out const FireMode Mode);// 0x512523bfa041
	void AddExtraPoints(const enum InHitType, const int InDamage);// 0x512423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarItemData.FastArraySerializerItem
	int ItemID;//[Offset: 0xc, Size: 0x4]
	int64 ThisID;//[Offset: 0x10, Size: 0x8]
	FString Name;//[Offset: 0x18, Size: 0x10]
	FString Icon;//[Offset: 0x28, Size: 0x10]
	FString Info;//[Offset: 0x38, Size: 0x10]
	int count;//[Offset: 0x48, Size: 0x4]
	enum ItemType;//[Offset: 0x4c, Size: 0x4]
	int Quality;//[Offset: 0x50, Size: 0x4]
	int MaxPile;//[Offset: 0x54, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	FString AbilityBP;//[Offset: 0x60, Size: 0x10]
	FString ItemBP;//[Offset: 0x70, Size: 0x10]
	int DropTime;//[Offset: 0x80, Size: 0x4]
	int UnPickupTime;//[Offset: 0x84, Size: 0x4]
	bool IsRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	bool IsPickupLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1]
	int64 UserId;//[Offset: 0x90, Size: 0x8]
	int Level;//[Offset: 0x98, Size: 0x4]
	int Prize;//[Offset: 0x9c, Size: 0x4]
	float CurValue;//[Offset: 0xa0, Size: 0x4]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	enum AppearanceType;//[Offset: 0xa5, Size: 0x1]
	bool bUpdateOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 0x1]
	int SourceType;//[Offset: 0xa8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FireUniqueID
	uint32 Data;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BulletHitDetailData
	Pawn* SourcePawn;//[Offset: 0x0, Size: 0x8]
	Actor* HitActor;//[Offset: 0x8, Size: 0x8]
	PrimitiveComponent* HitComponent;//[Offset: 0x10, Size: 0x8]
	Vector HitActorLocation;//[Offset: 0x18, Size: 0xc]
	Vector HitLocation;//[Offset: 0x24, Size: 0xc]
	Vector HitNormal;//[Offset: 0x30, Size: 0xc]
	FName HitBone;//[Offset: 0x3c, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x44, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SpawnBulletParam
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float SpeedScale;//[Offset: 0x18, Size: 0x4]
	int Mode;//[Offset: 0x1c, Size: 0x4]
	bool TriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float Scale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	bool bStartBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponMechanicalState
	enum UniqueState;//[Offset: 0x0, Size: 0x1]
	enum SideFlags;//[Offset: 0x4, Size: 0x4]
	SolarWeapon* Weapon;//[Offset: 0x10, Size: 0x8]
	SingleWeaponConfig* Config;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SingleWeaponConfig.DataAsset.Object
	WeaponDebugFlag DebugFlag;//[Offset: 0x30, Size: 0x4]
	enum WeaponBrand;//[Offset: 0x34, Size: 0x1]
	enum WeaponType;//[Offset: 0x35, Size: 0x1]
	bool bSupportSecondaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	<FString,float> CharacterStateWeightMap;//[Offset: 0x38, Size: 0x50]
	MoveSpeedReduceCurveConfig[] MoveSpeedReduceCurveConfigs;//[Offset: 0x88, Size: 0x10]
	float MoveSpeedReduceBonusInHipFire;//[Offset: 0x98, Size: 0x4]
	float MoveSpeedReduceBonusInAdsHipFire;//[Offset: 0x9c, Size: 0x4]
	SolarWeaponFireSocketData[] FireSockets;//[Offset: 0xa0, Size: 0x10]
	FName[] MultiMuzzleSocketNames;//[Offset: 0xb0, Size: 0x10]
	FName[] MultiBulletSocketNames;//[Offset: 0xc0, Size: 0x10]
	FName[] MultiCastShellSocketNames;//[Offset: 0xd0, Size: 0x10]
	FName[] MultiCastShellOnScopeSocketNames;//[Offset: 0xe0, Size: 0x10]
	bool bIsSingleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bCanSuspendBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	bool bIsHeavyFireWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 0x1]
	bool bIsFlamethrowerWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3, Size: 0x1]
	bool bUseSpecialFireInputRespondConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	SolarWeaponFireInputRespondConfig FireInputRespondConfig;//[Offset: 0xf5, Size: 0xa]
	bool bSupportSingleShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff, Size: 0x1]
	bool bSupportAutoShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bSupportBurstShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	float AimOffsetReferenceAimDistance;//[Offset: 0x104, Size: 0x4]
	float MaxSpread;//[Offset: 0x108, Size: 0x4]
	float MinSpread;//[Offset: 0x10c, Size: 0x4]
	float HipFireBaseSpread;//[Offset: 0x110, Size: 0x4]
	float ShoulderFireBaseSpread;//[Offset: 0x114, Size: 0x4]
	float ADSBaseSpread;//[Offset: 0x118, Size: 0x4]
	float VhADSBaseSpread;//[Offset: 0x11c, Size: 0x4]
	WeaponShootConfig* WeaponShootConfig;//[Offset: 0x120, Size: 0x8]
	bool bCalcSpreadByStandardDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	float SpreadStandardDistance;//[Offset: 0x12c, Size: 0x4]
	float SpreadStandardOriginMaxRange;//[Offset: 0x130, Size: 0x4]
	bool bCalcSpreadByDistributionCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	RuntimeFloatCurve SpreadDistributionCurve;//[Offset: 0x138, Size: 0x88]
	<FString,float> SpreadCOPMap;//[Offset: 0x1c0, Size: 0x50]
	float SpreadStatuSpeed;//[Offset: 0x210, Size: 0x4]
	<FString,float> SpreadStatuIncreaseCoefficient;//[Offset: 0x218, Size: 0x50]
	<FString,float> SpreadStatuReduceCoefficient;//[Offset: 0x268, Size: 0x50]
	Vector2D[] CustomSpreadArray;//[Offset: 0x2b8, Size: 0x10]
	class SolarWeaponAT_CtrlFireBase* CtrlFireTaskClass;//[Offset: 0x2c8, Size: 0x8]
	class SolarWeaponAT_FireBase* FireTaskClass;//[Offset: 0x2d0, Size: 0x8]
	AmmoConfig* PrimaryAmmo;//[Offset: 0x2d8, Size: 0x8]
	int PrimaryAmmoIndex;//[Offset: 0x2e0, Size: 0x4]
	int PrimaryAmmoCap;//[Offset: 0x2e4, Size: 0x4]
	AmmoConfig* SecondaryAmmo;//[Offset: 0x2e8, Size: 0x8]
	int SecondaryAmmoIndex;//[Offset: 0x2f0, Size: 0x4]
	int SecondaryAmmoCap;//[Offset: 0x2f4, Size: 0x4]
	AmmoConfig* UpgradedSecAmmo;//[Offset: 0x2f8, Size: 0x8]
	LinearColor UpgradedSecAmmoColor;//[Offset: 0x300, Size: 0x10]
	bool bNeedOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	float OverloadMaxValue;//[Offset: 0x314, Size: 0x4]
	float NormalOverloadCoolingRate;//[Offset: 0x318, Size: 0x4]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x320, Size: 0x8]
	float OverloadCoolingPeriod;//[Offset: 0x328, Size: 0x4]
	CurveFloat* OverloadReduceRateCurve;//[Offset: 0x330, Size: 0x8]
	float OverloadWarningRate;//[Offset: 0x338, Size: 0x4]
	float WeaponSwitchTime;//[Offset: 0x33c, Size: 0x4]
	bool bCanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	float AutoFireDelayMs;//[Offset: 0x344, Size: 0x4]
	float AutoFireEndDelayMs;//[Offset: 0x348, Size: 0x4]
	float AutoFireCompensationRate;//[Offset: 0x34c, Size: 0x4]
	bool bCanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	WeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAll;//[Offset: 0x358, Size: 0x60]
	WeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAllGamepad;//[Offset: 0x3b8, Size: 0x60]
	SolarWeaponFPPData DefaultFPPData;//[Offset: 0x418, Size: 0x68]
	SolarWeaponFPPConfig[] FPPConfigByAspectRatioArray;//[Offset: 0x480, Size: 0x10]
	bool bOneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	float ScopeOpenTime;//[Offset: 0x494, Size: 0x4]
	float ScopeOpenFOVTimeScale;//[Offset: 0x498, Size: 0x4]
	enum[] SupportChangeTypeArray;//[Offset: 0x4a0, Size: 0x10]
	int[] DefaultPartsArray;//[Offset: 0x4b0, Size: 0x10]
	float RecoilFireTimeWithScope;//[Offset: 0x4c0, Size: 0x4]
	float RecoilRecoverTimeWithScope;//[Offset: 0x4c4, Size: 0x4]
	float RecoilMagnitudeWithScope;//[Offset: 0x4c8, Size: 0x4]
	CurveFloat* RecoilCurveWithScope;//[Offset: 0x4d0, Size: 0x8]
	int RecoilSkipSequenceSumWithScope;//[Offset: 0x4d8, Size: 0x4]
	Vector2D[] RecoilCurveSequenceWithScope;//[Offset: 0x4e0, Size: 0x10]
	float RecoilFireTimeNoScope;//[Offset: 0x4f0, Size: 0x4]
	float RecoilRecoverTimeNoScope;//[Offset: 0x4f4, Size: 0x4]
	float RecoilMagnitudeNoScope;//[Offset: 0x4f8, Size: 0x4]
	CurveFloat* RecoilCurveNoScope;//[Offset: 0x500, Size: 0x8]
	int RecoilSkipSequenceSumNoScope;//[Offset: 0x508, Size: 0x4]
	Vector2D[] RecoilCurveSequenceNoScope;//[Offset: 0x510, Size: 0x10]
	bool bIsGatling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	float GatlingRotaryAcceleration;//[Offset: 0x524, Size: 0x4]
	float GatlingFireRotarySpeed;//[Offset: 0x528, Size: 0x4]
	float GatlingMaxRotarySpeed;//[Offset: 0x52c, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x530, Size: 0x4]
	float GatlingRotaryAttenuation;//[Offset: 0x534, Size: 0x4]
	float GatlingScatteringMagnification;//[Offset: 0x538, Size: 0x4]
	ParticleSystem* GatlingOverHeatSmokeEffect;//[Offset: 0x540, Size: 0x8]
	class GameplayAbility[] GasAbilities;//[Offset: 0x548, Size: 0x10]
	float HeadshotDamageFactor;//[Offset: 0x558, Size: 0x4]
	FName Socket;//[Offset: 0x55c, Size: 0x8]
	FName LeftHandIKTargetSocket;//[Offset: 0x564, Size: 0x8]
	FName LeftHandIKTargetFemaleSocket;//[Offset: 0x56c, Size: 0x8]
	Vector LeftHandIkEffectLocation;//[Offset: 0x574, Size: 0xc]
	Vector LeftHandIkJointLocation;//[Offset: 0x580, Size: 0xc]
	Vector LeftHandIkJointLocationForGunIdle;//[Offset: 0x58c, Size: 0xc]
	Vector LeftHandIkJointLocationForGunIdleWhenCrouch;//[Offset: 0x598, Size: 0xc]
	Vector RightHandIkEffectLocation;//[Offset: 0x5a4, Size: 0xc]
	Vector RightHandIkJointLocation;//[Offset: 0x5b0, Size: 0xc]
	LeftHandGripConfig LeftHandGripRotationConfig;//[Offset: 0x5bc, Size: 0x84]
	LeftHandGripConfig LeftHandGripRotationConfigForGunIdle;//[Offset: 0x640, Size: 0x84]
	bool bShowCoolDownWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 0x1]
	class CrossHairWidget* Crosshair;//[Offset: 0x6c8, Size: 0x8]
	class FeedbackWidget* FeedbackWidget;//[Offset: 0x6d0, Size: 0x8]
	SolarWeaponCrosshairData CrosshairWidgetData;//[Offset: 0x6d8, Size: 0x38]
	SoftObjectPath WeaponIcon;//[Offset: 0x710, Size: 0x18]
	SlateBrush PrimaryFireBrush;//[Offset: 0x728, Size: 0x98]
	int PrimaryFireTxt;//[Offset: 0x7c0, Size: 0x4]
	SlateBrush SecondaryFireBrush;//[Offset: 0x7c8, Size: 0x98]
	int SecondaryFireTxt;//[Offset: 0x860, Size: 0x4]
	FString WeaponTextType;//[Offset: 0x868, Size: 0x10]
	SoftObjectPath ItemIcon;//[Offset: 0x878, Size: 0x18]
	SoftObjectPath UpgradeParticleSystem;//[Offset: 0x890, Size: 0x18]
	void InitSupportChangeTypeArray(int[] Data);// 0x48fa23bfa041
	void InitStatuSpreadCoefficient(out const FString[] Increasekeys, out const float[] Increasevalues, out const FString[] Reducekeys, out const float[] Reducevalues);// 0x48f923bfa041
	void InitSpreadData(float Max, float Min, float hipbase, float adsbase, float vhadsbase, float statuspeed);// 0x48f823bfa041
	void InitSpreadCOPMap(out const FString[] Keys, out const float[] Values);// 0x48f723bfa041
	void InitScopeData(bool onekey, float scopetime);// 0x48f623bfa041
	void InitOverload(bool InAllow, float InMax, float InNormalCoolingRate, float InCoolingPeriod, float InOverloadWarningRate);// 0x48f523bfa041
	void InitBase(int WPType);// 0x48f423bfa041
	bool GetIsSupportPart(enum Type);// 0x48f323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponDebugFlag
	bool bIgnoreActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bExtraInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bMechanicalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bShowShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MoveSpeedReduceCurveConfig
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	RuntimeFloatCurve MoveSpeedReduceCurveOnHoldingWeapon;//[Offset: 0x50, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponFireSocketData
	FName[] MultiBulletSocketNames;//[Offset: 0x0, Size: 0x10]
	FName[] MuzzleSocketNames;//[Offset: 0x10, Size: 0x10]
	FName[] AdsMuzzleSocketNames;//[Offset: 0x20, Size: 0x10]
	FName[] MuzzleBlockCheckSocketNames;//[Offset: 0x30, Size: 0x10]
	FName[] MultiCastShellSocketNames;//[Offset: 0x40, Size: 0x10]
	FName[] AdsMultiCastShellSocketNames;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponFireInputRespondConfig
	bool bAutoCloseScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bShootAtPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bShootAtPressAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bCanAutoShootWhilePress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bCanAutoShootWhilePressAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bCanShootWhileScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bCanShootWhileScopingAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bCanManuallyCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bCanManuallyCanceledAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponShootConfig.DataAsset.Object
	bool bEnableNewSpread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bEnableNewRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bEnableNewWeaponAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bEnableNewCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	float ShootOriginRange;//[Offset: 0x34, Size: 0x4]
	float StandardShootDistance;//[Offset: 0x38, Size: 0x4]
	Vector RotationPivot;//[Offset: 0x3c, Size: 0xc]
	<enum,Vector> RotationPivotMap;//[Offset: 0x48, Size: 0x50]
	float BaseSpread;//[Offset: 0x98, Size: 0x4]
	RuntimeFloatCurve SpreadDistributionCurve;//[Offset: 0xa0, Size: 0x88]
	float AverageSpreadDistribution;//[Offset: 0x128, Size: 0x4]
	RuntimeFloatCurve VisualSpreadScaleCurve;//[Offset: 0x130, Size: 0x88]
	WeaponAttributeModifiersByTag[] ModifiersByOwnerTag;//[Offset: 0x1b8, Size: 0x10]
	enum SprayingRecoveryMode;//[Offset: 0x1c8, Size: 0x1]
	RuntimeFloatCurve SprayingRecoveryCurve;//[Offset: 0x1d0, Size: 0x88]
	WeaponSpreadPattern* SpreadPattern;//[Offset: 0x258, Size: 0x8]
	WeaponRecoilPattern* RecoilPattern;//[Offset: 0x260, Size: 0x8]
	BlendSpace* TPPKickAnimBlendSpace;//[Offset: 0x268, Size: 0x8]
	Vector TPPKickBlendSpaceMaxValue;//[Offset: 0x270, Size: 0xc]
	WeaponTPPKickPattern* TPPKickPattern;//[Offset: 0x280, Size: 0x8]
	<enum,float> RecoilHoriRecRangeWithCoScaleMap;//[Offset: 0x288, Size: 0x50]
	WeaponGunKickPattern* GunKickPattern;//[Offset: 0x2d8, Size: 0x8]
	<enum,GunKickScale> GunKickScaleMap;//[Offset: 0x2e0, Size: 0x50]
	bool bEnableEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bStopEndShakeOnShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	CurveVector* EndShakeOffsetCurve;//[Offset: 0x338, Size: 0x8]
	CurveVector* EndShakeRotationCurve;//[Offset: 0x340, Size: 0x8]
	CurveFloat* EndShakeScaleBySpeedCurve;//[Offset: 0x348, Size: 0x8]
	CurveVector* EndShakeScaleByVelocityCurve;//[Offset: 0x350, Size: 0x8]
	float SkewOffsetSmoothSpeed;//[Offset: 0x358, Size: 0x4]
	float SkewRotationSmoothSpeed;//[Offset: 0x35c, Size: 0x4]
	WeaponSkewAdjustment[] SkewAdjustments;//[Offset: 0x360, Size: 0x10]
	CrossHairShootConfig DefaultCrossHairConfig;//[Offset: 0x370, Size: 0x10]
	<enum,CrossHairShootConfig> CrossHairConfigMap;//[Offset: 0x380, Size: 0x50]
	WeaponCameraShakePattern* ShakePatternOnShot;//[Offset: 0x3d0, Size: 0x8]
	WeaponCameraShakePattern* ShakePatternOnScopeShot;//[Offset: 0x3d8, Size: 0x8]
	<enum,float> ShakeScaleMapOnScopeShot;//[Offset: 0x3e0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAttributeModifiersByTag.WeaponAttributeModifierContainer
	GameplayTagRequirements TagRequirements;//[Offset: 0x10, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAttributeModifierContainer
	WeaponAttributeModifier[] Modifiers;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAttributeModifier
	GameplayTag AttributeTag;//[Offset: 0x0, Size: 0x8]
	WeaponAttributeParam[] Modifiers;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAttributeParam
	enum ParamType;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSpreadPattern.SolarPattern.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPattern.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponRecoilPattern.RecoverableRecoilPattern.SolarIncreaseAndDecreasePattern.SolarPattern.Object
	bool bEnableRecoveryCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	RangeFloat HoriRecoveryRangeWithCorrection;//[Offset: 0x204, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: RecoverableRecoilPattern.SolarIncreaseAndDecreasePattern.SolarPattern.Object
	bool bLimitMaxOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	Vector MaxOffset;//[Offset: 0x2c, Size: 0xc]
	bool bLimitRecoveryStopOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Vector RecoveryStopOffset;//[Offset: 0x3c, Size: 0xc]
	float IncreaseTime;//[Offset: 0x48, Size: 0x4]
	RuntimeFloatCurve IncreaseCurve;//[Offset: 0x50, Size: 0x88]
	WeaponRecoilVectorGenerator OffsetGenerator;//[Offset: 0xd8, Size: 0x18]
	RuntimeFloatCurve DecreaseTimeCurve;//[Offset: 0xf0, Size: 0x88]
	RuntimeFloatCurve DecreaseRatioCurve;//[Offset: 0x178, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarIncreaseAndDecreasePattern.SolarPattern.Object
	enum TransitionMode;//[Offset: 0x29, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: RangeFloat
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponRecoilVectorGenerator
	WeaponRecoilValueGenerator* XGenerator;//[Offset: 0x0, Size: 0x8]
	WeaponRecoilValueGenerator* YGenerator;//[Offset: 0x8, Size: 0x8]
	WeaponRecoilValueGenerator* ZGenerator;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponRecoilValueGenerator.Object
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponTPPKickPattern.SolarIncreaseAndDecreasePattern.SolarPattern.Object
	Vector MaxOffset;//[Offset: 0x2c, Size: 0xc]
	float IncreaseTime;//[Offset: 0x38, Size: 0x4]
	CurveVector* IncreaseCurve;//[Offset: 0x40, Size: 0x8]
	WeaponRecoilVectorGenerator OffsetGenerator;//[Offset: 0x48, Size: 0x18]
	float DecreaseTime;//[Offset: 0x60, Size: 0x4]
	RuntimeFloatCurve DecreaseRatioCurve;//[Offset: 0x68, Size: 0x88]
	CurveVector* DecreaseOffsetCurve;//[Offset: 0xf0, Size: 0x8]
	WeaponRecoilVectorGenerator DecreaseOffsetGenerator;//[Offset: 0xf8, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponGunKickPattern.SolarIncreaseAndDecreasePattern.SolarPattern.Object
	ValueCurveBySprayingTime SprayingOffset;//[Offset: 0x30, Size: 0x18]
	ValueCurveBySprayingTime SprayingRotation;//[Offset: 0x48, Size: 0x18]
	float SprayingRestartSmoothTime;//[Offset: 0x60, Size: 0x4]
	float SprayingRecoveryTime;//[Offset: 0x64, Size: 0x4]
	RuntimeFloatCurve SprayingRecoveryRatioCurve;//[Offset: 0x68, Size: 0x88]
	float IncreaseTime;//[Offset: 0xf0, Size: 0x4]
	RuntimeFloatCurve IncreaseCurve;//[Offset: 0xf8, Size: 0x88]
	Vector MaxOffset;//[Offset: 0x180, Size: 0xc]
	WeaponRecoilVectorGenerator OffsetGenerator;//[Offset: 0x190, Size: 0x18]
	Rotator MaxRotation;//[Offset: 0x1a8, Size: 0xc]
	WeaponRecoilRotatorGenerator RotationGenerator;//[Offset: 0x1b8, Size: 0x18]
	float DecreaseTime;//[Offset: 0x1d0, Size: 0x4]
	RuntimeFloatCurve DecreaseRatioCurve;//[Offset: 0x1d8, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: ValueCurveBySprayingTime
	CurveVector* ValueCurve;//[Offset: 0x0, Size: 0x8]
	float TimeScale;//[Offset: 0x8, Size: 0x4]
	Vector ValueScale;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponRecoilRotatorGenerator
	WeaponRecoilValueGenerator* PitchGenerator;//[Offset: 0x0, Size: 0x8]
	WeaponRecoilValueGenerator* YawGenerator;//[Offset: 0x8, Size: 0x8]
	WeaponRecoilValueGenerator* RollGenerator;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GunKickScale
	float XOffsetScale;//[Offset: 0x0, Size: 0x4]
	float YOffsetScale;//[Offset: 0x4, Size: 0x4]
	float ZOffsetScale;//[Offset: 0x8, Size: 0x4]
	float PitchScale;//[Offset: 0xc, Size: 0x4]
	float YawScale;//[Offset: 0x10, Size: 0x4]
	float RollScale;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSkewAdjustment
	enum InputType;//[Offset: 0x0, Size: 0x1]
	enum AdjustmentType;//[Offset: 0x1, Size: 0x1]
	RuntimeFloatCurve AdjustmentCurve;//[Offset: 0x8, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: CrossHairShootConfig
	float GunKickOffsetInheritRatio;//[Offset: 0x0, Size: 0x4]
	float SkewOffsetInheritRatio;//[Offset: 0x4, Size: 0x4]
	RecoverableRecoilPattern* CrossHairKickPattern;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponCameraShakePattern.SolarPattern.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponAT_CtrlFireBase.SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	delegate OnDoFire;//[Offset: 0xa8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	delegate OnTaskEnd;//[Offset: 0x78, Size: 0x10]
	GameplayAbility* OwnerAbility;//[Offset: 0x88, Size: 0x8]
	SolarCharacter* TaskCharacter;//[Offset: 0x90, Size: 0x8]
	WeaponSystemBase* TaskWeaponSysBase;//[Offset: 0x98, Size: 0x8]
	SolarWeaponAT_TaskBase* CreateTaskDynamically(class SolarWeaponAT_TaskBase RealClass, GameplayAbility* OwningAbility, const FName TaskInstanceName, SolarCharacter* InCharacter);// 0x59fe23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAbilityTask.AbilityTask.GameplayTask.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AbilityTask.GameplayTask.Object
	GameplayAbility* Ability;//[Offset: 0x60, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x68, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSystemBase.ActorComponent.Object
	WeaponSystemAutoFire* WeaponSystemAutoFire;//[Offset: 0xf8, Size: 0x8]
	SolarWeaponFireInputResolver* WeaponSystemFireInputResolver;//[Offset: 0x100, Size: 0x8]
	WeaponSystemAssistAim* WeaponSystemAssistAim;//[Offset: 0x108, Size: 0x8]
	WeaponSystemInteract WeaponSysIneract;//[Offset: 0x110, Size: 0x50]
	Actor* MyPossessPawn;//[Offset: 0x170, Size: 0x8]
	bool bAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	void WeaponAssistSystemTick(float InDeltaTime);// 0x5c9223bfa041
	void SwitchSingleWeaponPressMode();// 0x5c9123bfa041
	void SwitchScopeButtonRotatableMode();// 0x5c9023bfa041
	void SwitchDoScopeMode();// 0x5c8f23bfa041
	void SwitchAutoScopeEnable();// 0x5c8e23bfa041
	void SwitchAutoFireEnable();// 0x5c8d23bfa041
	void SwitchAutoFire(bool Open);// 0x5c8c23bfa041
	void SwitchAssistAim(bool opened);// 0x5c8b23bfa041
	void SetCurrentActiveWeapon(SolarWeapon* Weapon);// 0x5c8a23bfa041
	void SetCrosshairVisible(bool InVisible);// 0x5c8923bfa041
	void SetAutoScope(bool bOpen);// 0x5c8823bfa041
	void ServerPlayNoAmmoSound();// 0x5c8723bfa041
	void ReceiveMsgFromPlayer(bool bClient, out const PlayerWeaponMsg Msg);// 0x5c8623bfa041
	void OnTouchScreen();// 0x5c8523bfa041
	void OnToggleAutoFire();// 0x5c8423bfa041
	void OnToggleAssistAim();// 0x5c8323bfa041
	void OnOtherPlayerSpectateMyOwner();// 0x5c8223bfa041
	void NetMulticastPlayNoAmmoSound();// 0x5c8123bfa041
	bool IsUsingSpecialQuickAdsButton();// 0x5c8023bfa041
	SolarWeaponFireInputResolver* GetFireInputResolver();// 0x5c7f23bfa041
	void GetFireButtonInputState(out enum OutLeftFireButton, out enum OutRightFireButton, out enum OutQuickAdsButton);// 0x5c7e23bfa041
	WeaponSysStateStruct GetCurrentState();// 0x5c7d23bfa041
	bool CheckAutoFire(out bool canfire);// 0x5c7c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSystemAutoFire.Object
	void OnWeaponFire();// 0x5c7b23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerWeaponMsg
	byte MsgType;//[Offset: 0x0, Size: 0x1]
	FString MsgDetail;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponFireInputResolver.Object
	enum GetRightFireButtonState();// 0x5a4923bfa041
	enum GetQuickAdsButtonState();// 0x5a4823bfa041
	enum GetLeftFireButtonState();// 0x5a4723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSystemAssistAim.Object
	WeaponAssistAimWeaponConfig* CurrentAssistAimWpnCfg;//[Offset: 0x50, Size: 0x8]
	void RefreshCurrentWeapon(SolarWeapon* Weapon);// 0x5c7a23bfa041
	bool Init(Actor* InWeaponHolder);// 0x5c7923bfa041
	bool GetActive();// 0x5c7823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAssistAimWeaponConfig.DataAsset.Object
	float MaxTargetDetectionDistance;//[Offset: 0x30, Size: 0x4]
	BaseFollowSpeedByTag[] BaseFollowSpeedByTags;//[Offset: 0x38, Size: 0x10]
	GameplayTagRequirements TargetVelocityFollowTagRequirements;//[Offset: 0x48, Size: 0x50]
	float TargetVelocityFollowDeactivationDelay;//[Offset: 0x98, Size: 0x4]
	RuntimeFloatCurve TargetVelocityFollowHorizontalRatioCurve;//[Offset: 0xa0, Size: 0x88]
	RuntimeFloatCurve TargetVelocityFollowVerticalRatioCurve;//[Offset: 0x128, Size: 0x88]
	float TargetVelocityFollowHorizontalRatioCurveScale;//[Offset: 0x1b0, Size: 0x4]
	float TargetVelocityFollowVerticalRatioCurveScale;//[Offset: 0x1b4, Size: 0x4]
	float TargetVelocityFollowMaxHorizontalSpeed;//[Offset: 0x1b8, Size: 0x4]
	float TargetVelocityFollowMaxVerticalSpeed;//[Offset: 0x1bc, Size: 0x4]
	RuntimeFloatCurve TargetVelocityFollowRatioScaleByDistanceCurve;//[Offset: 0x1c0, Size: 0x88]
	RuntimeFloatCurve GlobalSensitivityScaleCurve;//[Offset: 0x248, Size: 0x88]
	float GlobalSensitivityScaleCurveScale;//[Offset: 0x2d0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BaseFollowSpeedByTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	float SameTargetTriggerCooldown;//[Offset: 0x50, Size: 0x4]
	float HorizontalSpeed;//[Offset: 0x54, Size: 0x4]
	float VerticalSpeed;//[Offset: 0x58, Size: 0x4]
	RuntimeFloatCurve SpeedScaleByDistanceCurve;//[Offset: 0x60, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSystemInteract
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSysStateStruct
	int State;//[Offset: 0x0, Size: 0x4]
	bool bPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponAT_FireBase.SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	AmmoConfig* Ammo;//[Offset: 0xc0, Size: 0x8]
	void K2_RequireEndFireTask();// 0x5a0223bfa041
	void K2_RealFireTick(float DeltaTime);// 0x5a0123bfa041
	void K2_PrepareRealFire();// 0x5a0023bfa041
	void K2_ActivateRealFire();// 0x59ff23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AmmoConfig.DataAsset.Object
	enum HoldAction;//[Offset: 0x30, Size: 0x1]
	FireChargeData[] FireChargeDatas;//[Offset: 0x38, Size: 0x10]
	FString FireChargeStopSoundName;//[Offset: 0x48, Size: 0x10]
	float ChargingToleranceEndTime;//[Offset: 0x58, Size: 0x4]
	float ChargingWorkingEndTime;//[Offset: 0x5c, Size: 0x4]
	float ChargingHoldingEndTime;//[Offset: 0x60, Size: 0x4]
	float ChargingTrajectoryTime;//[Offset: 0x64, Size: 0x4]
	bool bScaleHitEffectByChargingTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x6c, Size: 0x4]
	bool bForceFullShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxChargingDamageScale;//[Offset: 0x74, Size: 0x4]
	float DeltaAngle;//[Offset: 0x78, Size: 0x4]
	FString Name;//[Offset: 0x80, Size: 0x10]
	FString Des;//[Offset: 0x90, Size: 0x10]
	int PropID;//[Offset: 0xa0, Size: 0x4]
	float LifeTime;//[Offset: 0xa4, Size: 0x4]
	enum FireMethodType;//[Offset: 0xa8, Size: 0x1]
	enum TrajectoryType;//[Offset: 0xa9, Size: 0x1]
	float CustomValue;//[Offset: 0xac, Size: 0x4]
	class SolarBullet* BulletClass;//[Offset: 0xb0, Size: 0x8]
	enum BulletBounce;//[Offset: 0xb8, Size: 0x1]
	int BounceTimes;//[Offset: 0xbc, Size: 0x4]
	enum TriggerType;//[Offset: 0xc0, Size: 0x1]
	float MaxRange;//[Offset: 0xc4, Size: 0x4]
	float EffRange;//[Offset: 0xc8, Size: 0x4]
	float Radius;//[Offset: 0xcc, Size: 0x4]
	float InitSpeed;//[Offset: 0xd0, Size: 0x4]
	enum FireCostType;//[Offset: 0xd4, Size: 0x1]
	int FireCostPerAttack;//[Offset: 0xd8, Size: 0x4]
	int FireSpeedChangeTime;//[Offset: 0xdc, Size: 0x4]
	float FireSpeedChangeCOP;//[Offset: 0xe0, Size: 0x4]
	float FastestFireInterval;//[Offset: 0xe4, Size: 0x4]
	float SlowestFireInterval;//[Offset: 0xe8, Size: 0x4]
	float BaseFireInterval;//[Offset: 0xec, Size: 0x4]
	float FireIntervalRevertPreTime;//[Offset: 0xf0, Size: 0x4]
	float FireIntervalReavertSpeed;//[Offset: 0xf4, Size: 0x4]
	float BoltActionTime;//[Offset: 0xf8, Size: 0x4]
	float StartBoltDuration;//[Offset: 0xfc, Size: 0x4]
	float AutoFireBreakTime;//[Offset: 0x100, Size: 0x4]
	float FirePrepareTime;//[Offset: 0x104, Size: 0x4]
	float FireStateBreakTime;//[Offset: 0x108, Size: 0x4]
	float FireStreakBreakTime;//[Offset: 0x10c, Size: 0x4]
	int FireIdx;//[Offset: 0x110, Size: 0x4]
	bool bTimedExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	float BaseReloadTime;//[Offset: 0x118, Size: 0x4]
	float ReloadBoltTime;//[Offset: 0x11c, Size: 0x4]
	float PostFireOverload;//[Offset: 0x120, Size: 0x4]
	bool bPlayHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	bool bPlayExplodeSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 0x1]
	float FlySoundReceiveRadius;//[Offset: 0x128, Size: 0x4]
	float FlySoundIgnoreDistance;//[Offset: 0x12c, Size: 0x4]
	int SingleSoundCount;//[Offset: 0x130, Size: 0x4]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x138, Size: 0x10]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x148, Size: 0x10]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x158, Size: 0x10]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x168, Size: 0x10]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x178, Size: 0x10]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x188, Size: 0x10]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x198, Size: 0x10]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1a8, Size: 0x10]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1b8, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x1c8, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1d8, Size: 0x10]
	FString Play_Fire_Empty_1p;//[Offset: 0x1e8, Size: 0x10]
	FString Play_Fire_Empty_3p;//[Offset: 0x1f8, Size: 0x10]
	FString Play_Fire_Empty_3p_Enemy;//[Offset: 0x208, Size: 0x10]
	CurveFloat* PostFireSpreadCurveStruct;//[Offset: 0x218, Size: 0x8]
	float VhADSSpreadCOP;//[Offset: 0x220, Size: 0x4]
	float ADSSpreadCOP;//[Offset: 0x224, Size: 0x4]
	float SpreadFirePreTime;//[Offset: 0x228, Size: 0x4]
	float SpreadPostFireSpeed;//[Offset: 0x22c, Size: 0x4]
	float SpreadRestorePreTime;//[Offset: 0x230, Size: 0x4]
	float SpreadRestoreSpeed;//[Offset: 0x234, Size: 0x4]
	WeaponFireTPPAnimConfig TPPRecoilConfig;//[Offset: 0x238, Size: 0x28]
	WeaponFireFPPAnimConfig FPPRecoilConfigNoScope;//[Offset: 0x260, Size: 0x70]
	WeaponFireFPPAnimConfig FPPRecoilConfigWithScope;//[Offset: 0x2d0, Size: 0x70]
	AmmonVerticalRecoilStruct PitchRecoilStruct;//[Offset: 0x340, Size: 0x30]
	AmmonHorizontalRecoilStruct YawRecoilStruct;//[Offset: 0x370, Size: 0x30]
	AmmonRecoilRollStruct RollRecoilStruct;//[Offset: 0x3a0, Size: 0x40]
	AmmonRecoilScope ScopeRecoil;//[Offset: 0x3e0, Size: 0xb8]
	float ADSRecoilCOP;//[Offset: 0x498, Size: 0x4]
	<FString,float> RecoilCOPMap;//[Offset: 0x4a0, Size: 0x50]
	byte[] IgnoreEPhysicalSurface;//[Offset: 0x4f0, Size: 0x10]
	bool bAutoBurstFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	float BurstFireInterval;//[Offset: 0x504, Size: 0x4]
	float BurstFireInternalInterval;//[Offset: 0x508, Size: 0x4]
	float FireAnimationPlayRate;//[Offset: 0x50c, Size: 0x4]
	int AmmoSoundType;//[Offset: 0x510, Size: 0x4]
	float ProjectileMaxGravity;//[Offset: 0x514, Size: 0x4]
	float ParticleStartDistance;//[Offset: 0x518, Size: 0x4]
	float TrajectoryStartDistance;//[Offset: 0x51c, Size: 0x4]
	bool bPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	bool bTakeDamageAfterDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 0x1]
	CurveFloat* PenetrationDamageMultiplierCurve;//[Offset: 0x528, Size: 0x8]
	CurveFloat* CylinderDamageMultiplierCurve;//[Offset: 0x530, Size: 0x8]
	SlateBrush TriggerIcon;//[Offset: 0x538, Size: 0x98]
	enum VirtualBulletType;//[Offset: 0x5d0, Size: 0x1]
	bool bStepOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 0x1]
	AmmoConfig* TraceOverrideAmmo;//[Offset: 0x5d8, Size: 0x8]
	byte TraceTargetFlag;//[Offset: 0x5e0, Size: 0x1]
	TracerBulletData TracerData;//[Offset: 0x5e8, Size: 0x40]
	CurveFloat* BulletOffsetCurve;//[Offset: 0x628, Size: 0x8]
	Vector2D[] BulletOffsetAngles;//[Offset: 0x630, Size: 0x10]
	CurveFloat* BulletDamageCurve;//[Offset: 0x640, Size: 0x8]
	CurveFloat* BulletScaleCurve;//[Offset: 0x648, Size: 0x8]
	CurveFloat* BulletMovementCurve;//[Offset: 0x650, Size: 0x8]
	bool bThirdPesonViewXScaledByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]
	bool bForceApplyAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 0x1]
	class SolarAbility[] AmmoAbilityClasses;//[Offset: 0x660, Size: 0x10]
	class SolarAbility[] AmmoAbilityClassesOnDestroyed;//[Offset: 0x670, Size: 0x10]
	class SolarAbility* AmmoAbilityClassesOnSelf;//[Offset: 0x680, Size: 0x8]
	int SkillType;//[Offset: 0x688, Size: 0x4]
	int NameLocalTextIDNumber;//[Offset: 0x68c, Size: 0x4]
	int DescriptionLocalTextIDNumber;//[Offset: 0x690, Size: 0x4]
	int RangeLocalTextID;//[Offset: 0x694, Size: 0x4]
	int DifficultyLocalTextID;//[Offset: 0x698, Size: 0x4]
	SolarDamageInfo DamageInfo;//[Offset: 0x6a0, Size: 0x40]
	void InitVerticalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x417723bfa041
	void InitSpreadData(float adscop, float vhadscop, float firepre, float changespeed, float restorepre, float restorespeed);// 0x417623bfa041
	void InitScopeRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x417523bfa041
	void InitScopeAndCrossHairVibration(const float ScopeVMaxDistanceOffSet, const float ScopeVVibrationDuration, const float ScopeHMaxDistanceOffSet, const float ScopeHVibrationDuration, const float ScopeVContinuousFallingDuration, const float ScopeVContinuousFallingPointIndex, const float VMaxDistanceOffSetScale, const float VVibrationDurationScale, const float VSingleOffSetScale, const float VContinuousOffSetScale, const float HMaxDistanceOffSetScale, const float HVibrationDurationScale, const float HSingleOffSetScale, const float HContinuousOffSetScale, const float HOffSetProbabilityScale);// 0x417423bfa041
	void InitRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x417323bfa041
	void InitRecoilCOPMap(out const FString[] Keys, out const float[] Values);// 0x417223bfa041
	void InitPostFireSpreadCurveStruct(FString Path);// 0x417123bfa041
	void InitHorizontalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x417023bfa041
	void InitBaseData(int Trigger);// 0x416f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: FireChargeData
	bool IfContinuousCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ChargeTime;//[Offset: 0x4, Size: 0x4]
	CurveFloat* ChargeDamageRadiusCurve;//[Offset: 0x8, Size: 0x8]
	CurveFloat* ChargeDamageMagnificationCurve;//[Offset: 0x10, Size: 0x8]
	bool IfPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	AmmoConfig* OverrideAmmo;//[Offset: 0x20, Size: 0x8]
	int OverrideAmmoID;//[Offset: 0x28, Size: 0x4]
	FString ChargeSoundName;//[Offset: 0x30, Size: 0x10]
	FString ChargeSoundEnemyName;//[Offset: 0x40, Size: 0x10]
	FString FireSoundName;//[Offset: 0x50, Size: 0x10]
	FString FireSoundEnemyName;//[Offset: 0x60, Size: 0x10]
	bool IfBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	CurveFloat* BulletBurstCountCurve;//[Offset: 0x78, Size: 0x8]
	bool IfCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x84, Size: 0x4]
	bool IfForceFullShotCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bNeedPlayCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	CurveFloat* AmmoSpeedScaleCurve;//[Offset: 0x90, Size: 0x8]
	CurveFloat* AmmoEffectXScaleCurve;//[Offset: 0x98, Size: 0x8]
	CurveFloat* AmmoEffectYZScaleCurve;//[Offset: 0xa0, Size: 0x8]
	CurveFloat* OverloadCurve;//[Offset: 0xa8, Size: 0x8]
	float ChargeAnimationRate;//[Offset: 0xb0, Size: 0x4]
	CurveFloat* DeflectionAngleCurve;//[Offset: 0xb8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBullet.Actor.Object
	float TotalEffectTime;//[Offset: 0x228, Size: 0x4]
	bool bAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]
	bool bShowHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1]
	bool bShowHitToTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e, Size: 0x1]
	bool bShowHitWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f, Size: 0x1]
	ParticleSystem* BulletEffect;//[Offset: 0x230, Size: 0x8]
	ParticleSystem* TrajectoryEffect;//[Offset: 0x238, Size: 0x8]
	ParticleSystem* TrajectoryEffectOther;//[Offset: 0x240, Size: 0x8]
	SoftObjectPath SimpleCanisterShotEffectPath;//[Offset: 0x248, Size: 0x18]
	ParticleSystem* TrajectoryBeamEffect;//[Offset: 0x260, Size: 0x8]
	ParticleSystem* TrajectoryBeamEffectOther;//[Offset: 0x268, Size: 0x8]
	ParticleSystem* HitEffect;//[Offset: 0x270, Size: 0x8]
	ParticleSystem* MuzzleEffect;//[Offset: 0x278, Size: 0x8]
	bool bKeepOneActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	ParticleSystem* MuzzleEffectScope;//[Offset: 0x288, Size: 0x8]
	ParticleSystem* MuzzleEffectOther;//[Offset: 0x290, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffect;//[Offset: 0x298, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectScope;//[Offset: 0x2a0, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectOther;//[Offset: 0x2a8, Size: 0x8]
	ParticleSystem* SpecialEffect;//[Offset: 0x2b0, Size: 0x8]
	ParticleSystem* DecalEffect;//[Offset: 0x2b8, Size: 0x8]
	ParticleSystem* DecalEffect2;//[Offset: 0x2c0, Size: 0x8]
	SoftObjectPath ShieldEffect;//[Offset: 0x2c8, Size: 0x18]
	<byte,SoftObjectPath> PhysicsHitEffects;//[Offset: 0x2e0, Size: 0x50]
	float DecalLifeSpan;//[Offset: 0x330, Size: 0x4]
	ParticleSystem* ShellCaseEffect;//[Offset: 0x338, Size: 0x8]
	ParticleSystem* ShellCaseEffectOnScope;//[Offset: 0x340, Size: 0x8]
	bool CanExplodeWhenOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	FString HoldingPreViewSound_1P;//[Offset: 0x350, Size: 0x10]
	FString HoldingPreViewSound_3P;//[Offset: 0x360, Size: 0x10]
	byte BulletCollisionType;//[Offset: 0x370, Size: 0x1]
	void OnPlayImpactEffect(ParticleSystemComponent* PSC);// 0x4b0623bfa041
	SoftObjectPath GetHitPhysicEffectPath(out const byte HitSurface);// 0x4b0523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponFireTPPAnimConfig
	float SingleFirePulse;//[Offset: 0x0, Size: 0x4]
	float SingleStiffnessCoefficient;//[Offset: 0x4, Size: 0x4]
	float LoopFirePulse;//[Offset: 0x8, Size: 0x4]
	float LoopStiffnessCoefficient;//[Offset: 0xc, Size: 0x4]
	float RecoverSpeed;//[Offset: 0x10, Size: 0x4]
	float BlendSpaceScale;//[Offset: 0x14, Size: 0x4]
	BlendSpace* BlendSpace;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponFireFPPAnimConfig
	float SingleFireStraightPulse;//[Offset: 0x0, Size: 0x4]
	float SingleStiffnessCoefficient;//[Offset: 0x4, Size: 0x4]
	float SingleFireBackwardOffset;//[Offset: 0x8, Size: 0x4]
	float LoopFireStraightPulse;//[Offset: 0xc, Size: 0x4]
	float LoopStiffnessCoefficient;//[Offset: 0x10, Size: 0x4]
	float LoopFireBackwardOffset;//[Offset: 0x14, Size: 0x4]
	CurveFloat* StraightStiffnessCurve;//[Offset: 0x18, Size: 0x8]
	float StraightRecoverSpeed;//[Offset: 0x20, Size: 0x4]
	Vector ShakePivotOffset;//[Offset: 0x24, Size: 0xc]
	Vector2D[] ShakeOffsets;//[Offset: 0x30, Size: 0x10]
	Rotator[] ShakeRotations;//[Offset: 0x40, Size: 0x10]
	bool bNeedEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	CurveVector* EndShakeOffsetCurve;//[Offset: 0x58, Size: 0x8]
	CurveVector* EndShakeRotateCurve;//[Offset: 0x60, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AmmonVerticalRecoilStruct.AmmonRecoilStruct
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AmmonRecoilStruct
	float CostTime;//[Offset: 0x0, Size: 0x4]
	CurveFloat* RecoilRangeCurve;//[Offset: 0x8, Size: 0x8]
	int APointCurveKeyIndex;//[Offset: 0x10, Size: 0x4]
	float APointMin;//[Offset: 0x14, Size: 0x4]
	float APointMax;//[Offset: 0x18, Size: 0x4]
	int BPointCurveKeyIndex;//[Offset: 0x1c, Size: 0x4]
	float BPointMin;//[Offset: 0x20, Size: 0x4]
	float BPointMax;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AmmonHorizontalRecoilStruct.AmmonRecoilStruct
	CurveVector* ContinuousFireInfoCurve;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AmmonRecoilRollStruct.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	float ADSRollCOP;//[Offset: 0x30, Size: 0x4]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AmmonRecoilScope
	bool EnableScopeVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool EnableCrossHairVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool EnableScopeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x4, Size: 0x4]
	float ScopeVVibrationDuration;//[Offset: 0x8, Size: 0x4]
	CurveFloat* ScopeVSingleOffSetCurve;//[Offset: 0x10, Size: 0x8]
	CurveFloat* ScopeVContinuousOffSetCurve;//[Offset: 0x18, Size: 0x8]
	float ScopeVContinuousFallingDuration;//[Offset: 0x20, Size: 0x4]
	CurveFloat* ScopeVContinuousFallingCurve;//[Offset: 0x28, Size: 0x8]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x30, Size: 0x4]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x34, Size: 0x4]
	float ScopeHVibrationDuration;//[Offset: 0x38, Size: 0x4]
	CurveFloat* ScopeHSingleOffSetCurve;//[Offset: 0x40, Size: 0x8]
	CurveFloat* ScopeHContinuousOffSetCurve;//[Offset: 0x48, Size: 0x8]
	CurveFloat* ScopeHOffSetProbabilityCurve;//[Offset: 0x50, Size: 0x8]
	AmmonRecoilCrossHair CrossHairScaleSettings;//[Offset: 0x58, Size: 0x24]
	AmmonRecoilScopeRoll ScopeRollSettings;//[Offset: 0x80, Size: 0x38]
<----------Generated by SSpawner v1.0.2---------->


Class: AmmonRecoilCrossHair
	float VMaxDistanceOffSetScale;//[Offset: 0x0, Size: 0x4]
	float VVibrationDurationScale;//[Offset: 0x4, Size: 0x4]
	float VSingleOffSetScale;//[Offset: 0x8, Size: 0x4]
	float VContinuousOffSetScale;//[Offset: 0xc, Size: 0x4]
	float HMaxDistanceOffSetScale;//[Offset: 0x10, Size: 0x4]
	float HVibrationDurationScale;//[Offset: 0x14, Size: 0x4]
	float HSingleOffSetScale;//[Offset: 0x18, Size: 0x4]
	float HContinuousOffSetScale;//[Offset: 0x1c, Size: 0x4]
	float HOffSetProbabilityScale;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AmmonRecoilScopeRoll.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TracerBulletData
	float DeflectionAnglePerSec;//[Offset: 0x0, Size: 0x4]
	float MaximumDetectionAngle;//[Offset: 0x4, Size: 0x4]
	float HomingRange;//[Offset: 0x8, Size: 0x4]
	bool bTraceTargetOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	FString TracingTargetWarningSound;//[Offset: 0x10, Size: 0x10]
	FString TracingTargetWarningRTPC;//[Offset: 0x20, Size: 0x10]
	FString TracingAuthorPromptSound;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarDamageInfo
	Actor* TargetActor;//[Offset: 0x0, Size: 0x8]
	Actor* SourceActor;//[Offset: 0x8, Size: 0x8]
	Actor* DamageCauserActor;//[Offset: 0x10, Size: 0x8]
	float OriginalDamage;//[Offset: 0x18, Size: 0x4]
	float OriginalDamageForVehicle;//[Offset: 0x1c, Size: 0x4]
	enum DamageType;//[Offset: 0x24, Size: 0x1]
	float DamageRadial;//[Offset: 0x28, Size: 0x4]
	bool bRadialIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	bool bRadialIgnoreVehicle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1]
	bool bEnableSelfDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1]
	bool bCheckSourceToTargetCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 0x1]
	bool bApplyToSource;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 0x1]
	bool bJustForShield;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 0x1]
	float ExplosionMinDistance;//[Offset: 0x30, Size: 0x4]
	float ExplosionMaxDistance;//[Offset: 0x34, Size: 0x4]
	CurveFloat* ExplosionDistanceScaleCurve;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAssistAimWeaponConfigAll
	WeaponAssistAimWeaponConfig* DefaultConfig;//[Offset: 0x0, Size: 0x8]
	WeaponAssistAimWeaponConfig* DefaultScopeConfig;//[Offset: 0x8, Size: 0x8]
	<enum,WeaponAssistAimWeaponConfig*> ScopeConfigMap;//[Offset: 0x10, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponFPPData
	<enum,SolarWeaponScopeFPPConfig> ScopeFPPConfigByScopeTypeMap;//[Offset: 0x0, Size: 0x50]
	SolarWeaponScopeFPPData DefaultFPPDataForScopeType;//[Offset: 0x50, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponScopeFPPConfig
	<int,SolarWeaponScopeFPPData> ScopeFPPDataByWeaponSkinIDMap;//[Offset: 0x0, Size: 0x50]
	SolarWeaponScopeFPPData DefaultFPPDataForWeaponSkinID;//[Offset: 0x50, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponScopeFPPData
	Vector RelativeLocation;//[Offset: 0x0, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponFPPConfig
	RangeFloat AspectRatioRange;//[Offset: 0x0, Size: 0x8]
	SolarWeaponFPPData FPPData;//[Offset: 0x8, Size: 0x68]
<----------Generated by SSpawner v1.0.2---------->


Class: CrossHairWidget.UserWidget.Widget.Visual.Object
	<enum,CrosshairLayout> CrosshairStorageLayout;//[Offset: 0x260, Size: 0x50]
	CrosshairSprite CrosshairSprites;//[Offset: 0x2b0, Size: 0x30]
	CrosshairCanvasPanel* RootPanel;//[Offset: 0x2e8, Size: 0x8]
	float MinSpread;//[Offset: 0x2f0, Size: 0x4]
	CrosshairLayout CurrentLayout;//[Offset: 0x2f8, Size: 0x4]
	void SetCrosshairSprite(PaperSprite* InSprite);// 0x436323bfa041
	void OnWeaponFired();// 0x436223bfa041
	void OnUpdateReloadProgress(float InReloadProgress, int InReservedAmmo, int InMaxAmmo);// 0x436123bfa041
	void OnUpdateGatlingRoll(float DeltaTmie, float InRollSpeedInterp, bool bWantFire);// 0x436023bfa041
	void OnUpdateCoolDownProgress(float InCoolDownProgress);// 0x435f23bfa041
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress, int InChargeBurstCount);// 0x435e23bfa041
	void OnUpdateAimState(bool InbLockEnemy);// 0x435d23bfa041
	void OnReloadStarted(float InReloadTime, int InReservedAmmo);// 0x435c23bfa041
	void OnReloadFinished(bool InbReloadSuccess, int InReloadAmmo, int InReservedAmmo, int InMaxAmmo);// 0x435b23bfa041
	void OnPlayWeaponSpecialFire(enum InState, float PlayRate);// 0x435a23bfa041
	void OnOverloadStateChanged(bool bEnter);// 0x435923bfa041
	void OnCrosshairInNormalState();// 0x435823bfa041
	void OnAmmoChanged(int InReservedAmmo, int InMaxAmmo, bool InbFirst);// 0x435723bfa041
	void InitializeCrosshairSpread(float Spread);// 0x435623bfa041
	void InitializeCrosshair(const enum WeaponType, const bool bIsWeaponEnergy);// 0x435523bfa041
	void HandleCrosshairState(enum InCrosshairState, bool InbQuitState);// 0x435423bfa041
	Widget* GetSpreadCanvasWidget();// 0x435323bfa041
	UserWidget* GetReloadWidget();// 0x435223bfa041
	UserWidget* GetOverloadWidget();// 0x435123bfa041
	UserWidget* GetCoolDownWidget();// 0x435023bfa041
	UserWidget* GetChargeWidget();// 0x434f23bfa041
	UserWidget* GetAmmoWidget();// 0x434e23bfa041
	Vector2D CalcDeltaScaleBySpread(const float Spread);// 0x434d23bfa041
	Vector2D CalcDeltaPosBySpread(const float Spread);// 0x434c23bfa041
	float CalcDeltaAngleBySpread(const float Spread);// 0x434b23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CrosshairLayout
	float InitSpread;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CrosshairSprite
	SoftObjectPath Normal;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath Energy;//[Offset: 0x18, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CrosshairCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	<enum,StateMapItemStruct> CrosshairStateConfigList;//[Offset: 0x160, Size: 0x50]
	Widget*[] IgonreWidgetToStateMap;//[Offset: 0x1b0, Size: 0x10]
	UICrossHairSpreadStruct[] SpreadItemList;//[Offset: 0x1c0, Size: 0x10]
	UICrossHairAimColorStruct[] AimColorItemList;//[Offset: 0x1d0, Size: 0x10]
	TweenImage* ReloadingTween;//[Offset: 0x1e0, Size: 0x8]
	GaugeImage* BulletGauge;//[Offset: 0x1e8, Size: 0x8]
	TweenImage* OverloadingTween;//[Offset: 0x1f0, Size: 0x8]
	ProgressBar* OverloadBar_Normal;//[Offset: 0x1f8, Size: 0x8]
	ProgressBar* OverloadBar_Warn;//[Offset: 0x200, Size: 0x8]
	TweenWidget* OverloadNormalPanelTween;//[Offset: 0x208, Size: 0x8]
	ProgressBar*[] CoolDownBars;//[Offset: 0x210, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	int ReservedLayerSpace;//[Offset: 0x14c, Size: 0x4]
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x434a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: StateMapItemStruct
	StateItemStruct[] ChildWidgetConfigList;//[Offset: 0x0, Size: 0x10]
	bool bLoadChildWidgetTool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: StateItemStruct
	Widget* CrosshairChildWidget;//[Offset: 0x0, Size: 0x8]
	enum VisibilityType;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: UICrossHairSpreadStruct
	Widget* TargetWidget;//[Offset: 0x0, Size: 0x8]
	enum SpreadType;//[Offset: 0x8, Size: 0x1]
	bool bPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	float Angle;//[Offset: 0xc, Size: 0x4]
	bool Pos_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	Vector2D ScaleFactor;//[Offset: 0x14, Size: 0x8]
	bool Scale_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bRenderAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	float RenderAngleFactor;//[Offset: 0x20, Size: 0x4]
	bool Angle_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	Vector2D OrginalVector;//[Offset: 0x28, Size: 0x8]
	Vector2D OrginalScale;//[Offset: 0x30, Size: 0x8]
	float OrginalAngle;//[Offset: 0x38, Size: 0x4]
	Vector2D Dir;//[Offset: 0x3c, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: UICrossHairAimColorStruct
	Image* TargetImg;//[Offset: 0x0, Size: 0x8]
	LinearColor TargetColor;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x138, Size: 0x98]
	delegate BrushDelegate;//[Offset: 0x1d0, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x1e0, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1f0, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x204, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x3c1423bfa041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3c1323bfa041
	void SetBrushTintColor(SlateColor TintColor);// 0x3c1223bfa041
	void SetBrushSize(Vector2D DesiredSize);// 0x3c1123bfa041
	void SetBrushResourceObject(Object* ResourceObject);// 0x3c1023bfa041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x3c0f23bfa041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x3c0e23bfa041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x3c0d23bfa041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x3c0c23bfa041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x3c0b23bfa041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x3c0a23bfa041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x3c0923bfa041
	void SetBrush(out const SlateBrush InBrush);// 0x3c0823bfa041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x3c0723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xc0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x98]
<----------Generated by SSpawner v1.0.2---------->


Class: TweenImage.TweenBase.UserWidget.Widget.Visual.Object
	Image* TargetImg;//[Offset: 0x2d8, Size: 0x8]
	UIScaleTween ScaleTween;//[Offset: 0x2e0, Size: 0x40]
	UIPositionTween PostionTween;//[Offset: 0x320, Size: 0x40]
	ImageColorTween ColorTween;//[Offset: 0x360, Size: 0x48]
	UIRenderOpacityTween OpacityTween;//[Offset: 0x3a8, Size: 0x28]
	void InitImageTween();// 0x5b2623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TweenBase.UserWidget.Widget.Visual.Object
	bool AutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	float Interval;//[Offset: 0x264, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bEndHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	delegate OnTweenStart;//[Offset: 0x290, Size: 0x10]
	delegate OnTweenStop;//[Offset: 0x2a0, Size: 0x10]
	Widget* LinkWidget;//[Offset: 0x2c0, Size: 0x8]
	float Progress;//[Offset: 0x2cc, Size: 0x4]
	void Stop();// 0x5b2523bfa041
	void Reset();// 0x5b2423bfa041
	void Play();// 0x5b2323bfa041
	void InitAndPlay();// 0x5b2223bfa041
	void Init();// 0x5b2123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UIScaleTween.UITweenBaseStruct
	Vector2D OriginalScale;//[Offset: 0x20, Size: 0x8]
	Vector2D TargetScale;//[Offset: 0x28, Size: 0x8]
	bool bHandleAsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: UITweenBaseStruct
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum InterpolationType;//[Offset: 0x9, Size: 0x1]
	byte EaseType;//[Offset: 0xa, Size: 0x1]
	CurveFloat* InterpolationCurve;//[Offset: 0x10, Size: 0x8]
	Widget* Widget;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: UIPositionTween.UITweenBaseStruct
	Vector2D OriginalPosition;//[Offset: 0x20, Size: 0x8]
	Vector2D TargetPosition;//[Offset: 0x28, Size: 0x8]
	bool bHandleAsRelativeChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ImageColorTween.UITweenBaseStruct
	LinearColor Original;//[Offset: 0x20, Size: 0x10]
	LinearColor TargetColor;//[Offset: 0x30, Size: 0x10]
	Image* Image;//[Offset: 0x40, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: UIRenderOpacityTween.UITweenBaseStruct
	float OriginalOpacity;//[Offset: 0x20, Size: 0x4]
	float TargetOpacity;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x2c]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	int ZOrder;//[Offset: 0x68, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x5e7823bfa041
	void SetSize(Vector2D InSize);// 0x5e7723bfa041
	void SetPosition(Vector2D InPosition);// 0x5e7623bfa041
	void SetOffsets(Margin InOffset);// 0x5e7523bfa041
	void SetMinimum(Vector2D InMinimumAnchors);// 0x5e7423bfa041
	void SetMaximum(Vector2D InMaximumAnchors);// 0x5e7323bfa041
	void SetLayout(out const AnchorData InLayoutData);// 0x5e7223bfa041
	void SetAutoSize(bool InbAutoSize);// 0x5e7123bfa041
	void SetAnchors(Anchors InAnchors);// 0x5e7023bfa041
	void SetAlignment(Vector2D InAlignment);// 0x5e6f23bfa041
	int GetZOrder();// 0x5e6e23bfa041
	Vector2D GetSize();// 0x5e6d23bfa041
	Vector2D GetPosition();// 0x5e6c23bfa041
	Margin GetOffsets();// 0x5e6b23bfa041
	AnchorData GetLayout();// 0x5e6a23bfa041
	bool GetAutoSize();// 0x5e6923bfa041
	Anchors GetAnchors();// 0x5e6823bfa041
	Vector2D GetAlignment();// 0x5e6723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	Vector2D Alignment;//[Offset: 0x24, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GaugeImage.UserWidget.Widget.Visual.Object
	enum GaugeType;//[Offset: 0x260, Size: 0x1]
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	Vector2D ImageSize;//[Offset: 0x264, Size: 0x8]
	float InitialDegree;//[Offset: 0x26c, Size: 0x4]
	bool bSymmetric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	Vector2D CenterOffset;//[Offset: 0x274, Size: 0x8]
	Object* ResourceObject;//[Offset: 0x280, Size: 0x8]
	float Progress;//[Offset: 0x288, Size: 0x4]
	MaterialInterface* MaterialDegree360;//[Offset: 0x290, Size: 0x8]
	MaterialInterface* MaterialDegree180;//[Offset: 0x298, Size: 0x8]
	MaterialInterface* MaterialDegree90;//[Offset: 0x2a0, Size: 0x8]
	MaterialInterface* MaterialDegreeLR;//[Offset: 0x2a8, Size: 0x8]
	MaterialInterface* MaterialDegreeUD;//[Offset: 0x2b0, Size: 0x8]
	Image* TargetImage;//[Offset: 0x2b8, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x2c0, Size: 0x8]
	void UpdateProgress(float InProgress);// 0x441323bfa041
	void SetProgress(float InProgress);// 0x441223bfa041
	void SetImage(Object* RO);// 0x441123bfa041
	Image* GetInternalImage();// 0x441023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x138, Size: 0x1d0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x308, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x310, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x318, Size: 0x8]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x320, Size: 0x8]
	float Percent;//[Offset: 0x328, Size: 0x4]
	byte BarFillType;//[Offset: 0x32c, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x330, Size: 0x8]
	delegate PercentDelegate;//[Offset: 0x338, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x348, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x358, Size: 0x10]
	void SetPercent(float InPercent);// 0x5eb023bfa041
	void SetIsMarquee(bool InbIsMarquee);// 0x5eaf23bfa041
	void SetFillColorAndOpacity(LinearColor InColor);// 0x5eae23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x98]
	SlateBrush FillImage;//[Offset: 0xa0, Size: 0x98]
	SlateBrush MarqueeImage;//[Offset: 0x138, Size: 0x98]
<----------Generated by SSpawner v1.0.2---------->


Class: SlateWidgetStyle
<----------Generated by SSpawner v1.0.2---------->


Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SlateWidgetStyleContainerBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: TweenWidget.TweenBase.UserWidget.Widget.Visual.Object
	Widget* TargetWidget;//[Offset: 0x2d8, Size: 0x8]
	UIScaleTween ScaleTween;//[Offset: 0x2e0, Size: 0x40]
	UIPositionTween PostionTween;//[Offset: 0x320, Size: 0x40]
	UIRenderOpacityTween OpacityTween;//[Offset: 0x360, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: FeedbackWidget.UserWidget.Widget.Visual.Object
	FeedbackCanvasPanel* FeedbackPanel;//[Offset: 0x260, Size: 0x8]
	float VisibilityTime;//[Offset: 0x268, Size: 0x4]
	float VisibilityTimer;//[Offset: 0x26c, Size: 0x4]
	FeedbackSingleData CurrentFeedbackSingleData;//[Offset: 0x270, Size: 0x30]
<----------Generated by SSpawner v1.0.2---------->


Class: FeedbackCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	<FString,FeedbackSingleData> FeedbackMap;//[Offset: 0x160, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: FeedbackSingleData
	UserWidget* AnimationWidget;//[Offset: 0x0, Size: 0x8]
	FName AnimationName;//[Offset: 0x8, Size: 0x8]
	float AnimationPlaySpeed;//[Offset: 0x10, Size: 0x4]
	float AnimationStartTime;//[Offset: 0x14, Size: 0x4]
	float AnimationAgainStartTime;//[Offset: 0x18, Size: 0x4]
	int AnimationLoopNumber;//[Offset: 0x1c, Size: 0x4]
	FName AudioName;//[Offset: 0x20, Size: 0x8]
	enum AnimationType;//[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponCrosshairData
	byte HasReload;//[Offset: 0x0, Size: 0x1]
	byte HasForbid;//[Offset: 0x1, Size: 0x1]
	byte HasOverload;//[Offset: 0x2, Size: 0x1]
	byte HasChargeProgress;//[Offset: 0x3, Size: 0x1]
	byte HasFeedback;//[Offset: 0x4, Size: 0x1]
	enum WeaponType;//[Offset: 0x5, Size: 0x1]
	bool bIsEnergyType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	class UserWidget* CrossHairWidget;//[Offset: 0x8, Size: 0x8]
	class UserWidget* BulletContainerWidget;//[Offset: 0x10, Size: 0x8]
	class UserWidget* WeaponRechamberWidget;//[Offset: 0x18, Size: 0x8]
	SolarNoAmmoAlertWidgetLayout AmmoAlertWidgetLayout;//[Offset: 0x20, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarNoAmmoAlertWidgetLayout
	bool bOverrideLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4, Size: 0x8]
	float SpinAngle;//[Offset: 0xc, Size: 0x4]
	Vector2D Scale;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ImpactDisplayInfo
	Vector Pos;//[Offset: 0x0, Size: 0xc]
	float Scale;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSkinData.DataAsset.Object
	enum WeaponSkinType;//[Offset: 0x30, Size: 0x1]
	WeaponBodyData WeaponData;//[Offset: 0x38, Size: 0xb0]
	WeaponSkinPartData[] WeaponBarMap;//[Offset: 0xe8, Size: 0x10]
	bool WeaponBarLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	WeaponSkinPartData[] WeaponClipMap;//[Offset: 0x100, Size: 0x10]
	bool WeaponClipLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	WeaponSkinPartData[] WeaponGripMap;//[Offset: 0x118, Size: 0x10]
	bool WeaponGripLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bUseGripIkSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	WeaponSkinPartData[] WeaponScopeMap;//[Offset: 0x130, Size: 0x10]
	bool WeaponScopeLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	WeaponSkinPartData[] WeaponStockMap;//[Offset: 0x148, Size: 0x10]
	bool WeaponStockLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	class SolarBullet* DedicatedBulletEffect;//[Offset: 0x160, Size: 0x8]
	class SolarBullet* DedicatedSkillEffect;//[Offset: 0x168, Size: 0x8]
	SoftClassPath DedicatedBulletEffectPath;//[Offset: 0x170, Size: 0x18]
	SoftClassPath DedicatedSkillEffectPath;//[Offset: 0x188, Size: 0x18]
	ParticleSystem* DedicatedKillEffect;//[Offset: 0x1a0, Size: 0x8]
	SoftObjectPath DedicatedKillEffectPath;//[Offset: 0x1a8, Size: 0x18]
	SoftObjectPath DedicatedSpecialEffectPath;//[Offset: 0x1c0, Size: 0x18]
	class ActorEffect* DedicatedDissolvedDeathActorEffect;//[Offset: 0x1d8, Size: 0x8]
	SoftObjectPath DedicatedDissolvedDeathFXPath;//[Offset: 0x1e0, Size: 0x18]
	FString PlayAudioEventName;//[Offset: 0x1f8, Size: 0x10]
	FString StopAudioEventName;//[Offset: 0x208, Size: 0x10]
	AnimSequence* OutsideAnimation;//[Offset: 0x218, Size: 0x8]
	void ModifyResPath();// 0x5c2823bfa041
	bool IsMeshReplace();// 0x5c2723bfa041
	bool GetPartLockedInfoByType(const enum PartType);// 0x5c2623bfa041
	bool GetPartDataArrayByType(const enum PartType, out WeaponSkinPartData[] PartDataMap);// 0x5c2523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponBodyData
	int weaponid;//[Offset: 0x0, Size: 0x4]
	SoftObjectPath WeaponMesh;//[Offset: 0x8, Size: 0x18]
	class WeaponAnimInstance* WeaponAnimBP;//[Offset: 0x20, Size: 0x8]
	<enum,SoftObjectPath> OverrideWeaponAnimSequenceMap;//[Offset: 0x28, Size: 0x50]
	SoftObjectPath LodpMesh;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0x90, Size: 0x10]
	WeaponSkinExtraPS[] SkinPSArray;//[Offset: 0xa0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAnimInstance.AnimInstance.Object
	bool bInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	bool bOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	bool bBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1]
	AnimMsgData[] MsgArray;//[Offset: 0x270, Size: 0x10]
	AnimMsgData CurrentMsg;//[Offset: 0x280, Size: 0x8]
	bool bCurrentMsgUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	AnimSequence* IdleAnim;//[Offset: 0x290, Size: 0x8]
	AnimSequence* FireAnim;//[Offset: 0x298, Size: 0x8]
	AnimSequence* AltFireAnim;//[Offset: 0x2a0, Size: 0x8]
	AnimSequence* ReloadAnim;//[Offset: 0x2a8, Size: 0x8]
	AnimSequence* OverloadAnim;//[Offset: 0x2b0, Size: 0x8]
	AnimSequence* OpenScopeAnim;//[Offset: 0x2b8, Size: 0x8]
	AnimSequence* CloseScopeAnim;//[Offset: 0x2c0, Size: 0x8]
	AnimSequence* BoltAnim;//[Offset: 0x2c8, Size: 0x8]
	bool SwitchStateCheck(enum CheckState);// 0x5ad723bfa041
	void SetInterruptIsTrue();// 0x5ad623bfa041
	bool RouterNodeJudge();// 0x5ad523bfa041
	void OnQuitState(enum State);// 0x5ad423bfa041
	void OnEnterState(enum State);// 0x5ad323bfa041
	void Interrupt();// 0x5ad223bfa041
	bool HasMsg();// 0x5ad123bfa041
	bool ConsumMsg();// 0x5ad023bfa041
	bool AddMsg(enum State, float Speed);// 0x5acf23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AnimMsgData
	enum State;//[Offset: 0x0, Size: 0x1]
	float Speed;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSkinExtraPS
	bool bStimulatedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName Socket;//[Offset: 0x4, Size: 0x8]
	ParticleSystem* PS;//[Offset: 0x10, Size: 0x8]
	SoftObjectPath PSPath;//[Offset: 0x18, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSkinPartData
	int WeaponPartId;//[Offset: 0x0, Size: 0x4]
	FString WeaponPartDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath PartDataAsset;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ActorEffect.Object
	class ActorEffectController* ControllerClass;//[Offset: 0x28, Size: 0x8]
	ActorEffectController* Controller;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ActorEffectController.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarProjBullet.SolarBullet.Actor.Object
	ShapeComponent* CollisionComp;//[Offset: 0x390, Size: 0x8]
	ProjectileMovementComponent* MovementComp;//[Offset: 0x398, Size: 0x8]
	Vector SpawnedLocation;//[Offset: 0x440, Size: 0xc]
	AkComponent* AkAudioComponent;//[Offset: 0x4a8, Size: 0x8]
	ParticleSystemComponent* CurrentTrajectoryParticle;//[Offset: 0x4b0, Size: 0x8]
	bool bAttachToActorOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	float DeferExplodeTime;//[Offset: 0x4bc, Size: 0x4]
	float FlySoundPlayDistance;//[Offset: 0x4c0, Size: 0x4]
	bool bForceExplodeOnLifeSpanExpired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 0x1]
	class Actor[] HitActorImmediateExplodeArray;//[Offset: 0x4c8, Size: 0x10]
	ParticleSystem* ExplosionParticle;//[Offset: 0x4d8, Size: 0x8]
	FString ExplosionSoundName;//[Offset: 0x4e0, Size: 0x10]
	float ServerWaitClientTime;//[Offset: 0x4f0, Size: 0x4]
	class GameplayAbility* BulletGameplayAbilityClass;//[Offset: 0x4f8, Size: 0x8]
	void StopSound(enum Opt);// 0x523323bfa041
	void StartSound(enum Opt);// 0x523223bfa041
	void OnTeamIgnoreCollisionActorChange(bool bAdd, Actor* InActor, byte TeamID);// 0x523123bfa041
	void OnStop(out const HitResult HitResult);// 0x523023bfa041
	void OnAttachedActorDestroyed(Actor* Other);// 0x522f23bfa041
	void K2_OnExplode();// 0x522e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xec, Size: 0x4]
	float MaxSpeed;//[Offset: 0xf0, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf4, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf4, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf4, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf4, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf4, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf4, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf4, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf5, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf5, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf5, Size: 0x1]
	float PreviousHitTime;//[Offset: 0xf8, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0xfc, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x108, Size: 0x4]
	float Buoyancy;//[Offset: 0x10c, Size: 0x4]
	float Bounciness;//[Offset: 0x110, Size: 0x4]
	float Friction;//[Offset: 0x114, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x118, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x11c, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x120, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x130, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x140, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x144, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x14c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x150, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x154, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x158, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x15c, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x160, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x164, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x113d23bfa041
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x113c23bfa041
	void SetInterpolatedComponent(SceneComponent* Component);// 0x113b23bfa041
	void ResetInterpolation();// 0x113a23bfa041
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x113923bfa041
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x113823bfa041
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x113723bfa041
	Vector LimitVelocity(Vector NewVelocity);// 0x113623bfa041
	bool IsVelocityUnderSimulationThreshold();// 0x113523bfa041
	bool IsInterpolationComplete();// 0x113423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVirtualBulletCollector.ActorComponent.Object
	SolarWeapon* CacheWeapon;//[Offset: 0xb0, Size: 0x8]
	SolarCharacterBase* CacheCharacter;//[Offset: 0xb8, Size: 0x8]
	World* CacheWorld;//[Offset: 0xc0, Size: 0x8]
	SolarVirtualBullet[] Bullets;//[Offset: 0xc8, Size: 0x10]
	SolarVirtualBullet[] PendingBulletsInSimulated;//[Offset: 0xd8, Size: 0x10]
	SolarVirtualBullet[] BulletsInSimulated;//[Offset: 0xe8, Size: 0x10]
	SolarVirtualBullet[] BulletsInDedicatedServer;//[Offset: 0xf8, Size: 0x10]
	SolarBullet* EffectBulletCDO;//[Offset: 0x158, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVirtualBullet
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	enum BulletType;//[Offset: 0x4, Size: 0x1]
	ParticleSystemComponent* BulletEffect;//[Offset: 0x10, Size: 0x8]
	ParticleSystemComponent* TrajectoryEffect;//[Offset: 0x18, Size: 0x8]
	ParticleSystemComponent* TrajectoryBeamEffect;//[Offset: 0x20, Size: 0x8]
	SolarVirtualBulletAKComponent* AkComponent;//[Offset: 0x28, Size: 0x8]
	Actor*[] IgnoreHitedActors;//[Offset: 0x30, Size: 0x10]
	Vector_NetQuantize PlayerViewDir;//[Offset: 0x170, Size: 0xc]
	Vector_NetQuantize PlayerViewLoc;//[Offset: 0x17c, Size: 0xc]
	byte IsScopeOpen;//[Offset: 0x188, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVirtualBulletAKComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponFireLaserCollector.ActorComponent.Object
	SolarWeapon* OwnerWeapon;//[Offset: 0xb8, Size: 0x8]
	AkComponent* FireAkComponent;//[Offset: 0xc0, Size: 0x8]
	AkComponent* ImpactAkComponent;//[Offset: 0xc8, Size: 0x8]
	WeaponFireLaserElement ActElement;//[Offset: 0xd0, Size: 0x48]
	WeaponFireLaserElement[] FadingElements;//[Offset: 0x118, Size: 0x10]
	ParticleSystem* ExplodeEffectParticle;//[Offset: 0x140, Size: 0x8]
	ParticleSystem* DecalsEffectParticle;//[Offset: 0x148, Size: 0x8]
	ParticleSystemComponent*[] CacheParticles;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponFireLaserElement
	ParticleSystemComponent* BeamEffect;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAnimationComponent.ActorComponent.Object
	WeaponAnimInstance* WeaponAnimInstance;//[Offset: 0xb0, Size: 0x8]
	SolarWeapon* MyWeapon;//[Offset: 0xb8, Size: 0x8]
	<enum,AnimSequence*> AnimSequenceMap;//[Offset: 0xc0, Size: 0x50]
	void SRecieveProto_SwitchStateAction(FString paramters);// 0x5ace23bfa041
	void SetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x5acd23bfa041
	void PostWeaponAnimStateToSimulation(enum InWeaponAnimState, float InAnimPlaySpeed, bool bForceSetAnimState);// 0x5acc23bfa041
	void InternalSetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x5acb23bfa041
	void InitSkeletaMesh(SkeletalMeshComponent* Mesh);// 0x5aca23bfa041
	void GotoState(enum State, float Interval);// 0x5ac923bfa041
	void CRecieveProto_SwitchStateAction(bool bAutonomous, FString paramters);// 0x5ac823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerWeaponRecoilComponent.WeaponRecoilComponent.ActorComponent.Object
	enum CurrentCharacterState;//[Offset: 0x230, Size: 0x1]
	enum CurrentPostureType;//[Offset: 0x231, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponRecoilComponent.ActorComponent.Object
	SolarGameInstanceBase* GameInstance;//[Offset: 0xb8, Size: 0x8]
	bool bHActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bVActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bRActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	SolarWeapon* MyWeaponActor;//[Offset: 0xc8, Size: 0x8]
	SingleWeaponConfig* WeaponConfig;//[Offset: 0xd0, Size: 0x8]
	CurveFloat* YawCurve;//[Offset: 0xd8, Size: 0x8]
	CurveFloat* PitchCurve;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* RollCurve;//[Offset: 0xe8, Size: 0x8]
	CurveFloat* ScopeRollCurve;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* ScopePitchCurve;//[Offset: 0xf8, Size: 0x8]
	RichCurveKey[] OriginalScopePitchKeys;//[Offset: 0x100, Size: 0x10]
	AmmoConfig* CurrentAmmoConfig;//[Offset: 0x110, Size: 0x8]
	CurveFloat*[] YawCurveArray;//[Offset: 0x1e0, Size: 0x10]
	CurveFloat*[] PitchCurveArray;//[Offset: 0x1f0, Size: 0x10]
	CurveFloat* PitchEndCurve;//[Offset: 0x200, Size: 0x8]
	CurveFloat*[] RollCurveArray;//[Offset: 0x208, Size: 0x10]
	CurveFloat*[] ScopeRollCurveArray;//[Offset: 0x218, Size: 0x10]
	void SetRecoilVActive(bool bActive);// 0x475323bfa041
	void SetRecoilRActive(bool bActive);// 0x475223bfa041
	void SetRecoilHActive(bool bActive);// 0x475123bfa041
	void SetRecoilActive(bool bActive);// 0x475023bfa041
	bool JudgeHorizontalRecoilDir(out const Vector factorVector, bool bCurrentRight, int instantCout);// 0x474f23bfa041
	bool IsRunning();// 0x474e23bfa041
	CurveFloat* GetYawCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x474d23bfa041
	CurveFloat* GetRollCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x474c23bfa041
	CurveFloat* GetPitchCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x474b23bfa041
	Rotator GetCurrentRecoil();// 0x474a23bfa041
	Rotator GetAndClearCurrentRecoil();// 0x474923bfa041
	void Fire(bool hipfire, bool Primary);// 0x474823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameInstanceBase.SolarArchitecture.GameInstance.Object
	SoftObjectPath LoginMap;//[Offset: 0x350, Size: 0x18]
	SoftObjectPath LobbyMap;//[Offset: 0x368, Size: 0x18]
	SoftObjectPath EntryMap;//[Offset: 0x380, Size: 0x18]
	SoftObjectPath GameMap;//[Offset: 0x398, Size: 0x18]
	SoftObjectPath SettlementMap;//[Offset: 0x3b0, Size: 0x18]
	SoftObjectPath ConfigServerMap;//[Offset: 0x3c8, Size: 0x18]
	FString ConfigBattleAddr;//[Offset: 0x3e0, Size: 0x10]
	int ConfigBattlePort;//[Offset: 0x3f0, Size: 0x4]
	FString ConfigBackendAddr;//[Offset: 0x3f8, Size: 0x10]
	int ConfigBackendPort;//[Offset: 0x408, Size: 0x4]
	int BuildNumber;//[Offset: 0x40c, Size: 0x4]
	class SolarSaveGame* SaveGameClass;//[Offset: 0x410, Size: 0x28]
	SoftClassPath DefaultOperationLayout;//[Offset: 0x438, Size: 0x18]
	SoftClassPath DefaultLockSettings;//[Offset: 0x450, Size: 0x18]
	SoftClassPath ReplayManagerClass;//[Offset: 0x468, Size: 0x18]
	SoftClassPath DefaultGameModeLockSettings;//[Offset: 0x480, Size: 0x18]
	bool bNeedRebootButNot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	int LastChoosedVoiceLangID;//[Offset: 0x49c, Size: 0x4]
	FString CachedNetworkErrorString;//[Offset: 0x4a0, Size: 0x10]
	SolarOperationUIElement* CachedDefaultOperationLayout;//[Offset: 0x4b0, Size: 0x8]
	bool bBaseManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	bool bGameManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 0x1]
	bool bLuaManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 0x1]
	delegate OnBaseManagersInit;//[Offset: 0x4c0, Size: 0x10]
	delegate OnGameManagersInit;//[Offset: 0x4d0, Size: 0x10]
	delegate OnLuaManagersInit;//[Offset: 0x4e0, Size: 0x10]
	GameArgs* GameArgsManager;//[Offset: 0x668, Size: 0x8]
	UIManager* UIManager;//[Offset: 0x670, Size: 0x8]
	UINavigationManager* UINavigationManager;//[Offset: 0x678, Size: 0x8]
	SolarInputMappingManager* SolarInputMappingManager;//[Offset: 0x680, Size: 0x8]
	SolarTimerManager* SolarTimerManager;//[Offset: 0x688, Size: 0x8]
	SolarMainPlayerModel* MainPlayerModel;//[Offset: 0x690, Size: 0x8]
	SolarGameConfigManager* GameConfigManager;//[Offset: 0x698, Size: 0x8]
	BattlePassConfigInfo* BattlePassConfigInfo;//[Offset: 0x6a0, Size: 0x8]
	SolarLuaHelper* SolarLuaHelper;//[Offset: 0x6a8, Size: 0x8]
	SolarAnoHelper* SolarAnoHelper;//[Offset: 0x6b0, Size: 0x8]
	SolarTableManager* SolarTableManager;//[Offset: 0x6b8, Size: 0x8]
	SolarTcpNetworkManager* SolarTcpNetworkManager;//[Offset: 0x6c0, Size: 0x8]
	SolarUDPManager* SolarUDPManager;//[Offset: 0x6c8, Size: 0x8]
	SolarAssetManager* SolarAssetManager;//[Offset: 0x6d0, Size: 0x8]
	SolarItemManager* SolarItemManager;//[Offset: 0x6d8, Size: 0x8]
	SolarInteractableManager* SolarInteractableManager;//[Offset: 0x6e0, Size: 0x8]
	SolarPlatformHelper* SolarPlatformHelper;//[Offset: 0x6e8, Size: 0x8]
	SolarMapManager* SolarMapManager;//[Offset: 0x6f0, Size: 0x8]
	WeaponGrowthManager* WeaponGrowthManager;//[Offset: 0x6f8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x700, Size: 0x8]
	IMChatObject* SolarIMChatObject;//[Offset: 0x708, Size: 0x8]
	SolarLuaManager* SolarLuaManager;//[Offset: 0x710, Size: 0x8]
	SolarGameStatistics* SolarGameStatistics;//[Offset: 0x718, Size: 0x8]
	SolarWeaponMergeMeshManager* WeaponMergeMeshManager;//[Offset: 0x720, Size: 0x8]
	CrashReportManager* CrashReportManager;//[Offset: 0x728, Size: 0x8]
	SolarPopPanelManager* SolarPopPanelManager;//[Offset: 0x730, Size: 0x8]
	SolarApplicationLifetimeManager* SolarApplicationLifetimeManager;//[Offset: 0x738, Size: 0x8]
	SolarHomeActorManager* SolarHomeActorManager;//[Offset: 0x740, Size: 0x8]
	SolarGameplayLogger* SolarGameplayLoggger;//[Offset: 0x748, Size: 0x8]
	SolarAttributeSubSystem* SolarAttributeSubSystem;//[Offset: 0x750, Size: 0x8]
	SCustomizedGameModeManager* CustomizedGameManager;//[Offset: 0x758, Size: 0x8]
	SolarRedHintManager* SolarRedHintMgr;//[Offset: 0x760, Size: 0x8]
	SolarGameModeSelectionManager* SolarGameModeSelectionMgr;//[Offset: 0x768, Size: 0x8]
	SolarPingFpsManager* SolarPingFpsMgr;//[Offset: 0x770, Size: 0x8]
	SolarGameUserSettingsMgr* SolarGameUserSettingsMgr;//[Offset: 0x778, Size: 0x8]
	SolarLoginManager* SolarLoginManager;//[Offset: 0x780, Size: 0x8]
	SolarLockSettingsMgr* SolarLockSettingsMgr;//[Offset: 0x788, Size: 0x8]
	SolarGameProgressManager* SolarGameProgressMgr;//[Offset: 0x790, Size: 0x8]
	SolarABTestManager* SolarABTestManager;//[Offset: 0x798, Size: 0x8]
	SolarHttpManager* SolarHttpManager;//[Offset: 0x7a0, Size: 0x8]
	SolarActivityManager* SolarActivityManager;//[Offset: 0x7a8, Size: 0x8]
	SolarTutorialManager* SolarTutorialManager;//[Offset: 0x7b0, Size: 0x8]
	SolarReplayManager* SolarReplayManager;//[Offset: 0x7b8, Size: 0x8]
	SolarSaveGame* SolarSaveGame;//[Offset: 0x7c0, Size: 0x8]
	class SettlementStageManager* SettlementManagerClass;//[Offset: 0x7c8, Size: 0x28]
	SettlementStageManager* SettlementManager;//[Offset: 0x7f0, Size: 0x8]
	CGMCrossLevelDataMgr* CrossLevelDataMgr;//[Offset: 0x7f8, Size: 0x8]
	class SolarGraphicSettings* SolarGraphicSettingsClass;//[Offset: 0x818, Size: 0x28]
	SolarAccessLuaDataUtils* LuaDataAccessUtils;//[Offset: 0x840, Size: 0x8]
	SolarAkSoundManager* SolarAkSoundManager;//[Offset: 0x848, Size: 0x8]
	bool bIsDedicatedServerStressTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 0x1]
	KeyMappingManager* KeyMappingManager;//[Offset: 0x858, Size: 0x8]
	SolarEasyAntiCheatManager* SolarEasyAntiCheatManager;//[Offset: 0x860, Size: 0x8]
	SolarSpecialEffectsMgr* SolarSpecialEffectsManager;//[Offset: 0x868, Size: 0x8]
	PakHashManager* SolarPakHashManager;//[Offset: 0x870, Size: 0x8]
	SolarFontManager* SolarFontManager;//[Offset: 0x878, Size: 0x8]
	SolarGraphicSettings* SolarGraphicSettings;//[Offset: 0x880, Size: 0x8]
	AndroidInputManager* AndroidInputManager;//[Offset: 0x888, Size: 0x8]
	delegate OnPatchComplete;//[Offset: 0x8a0, Size: 0x10]
	delegate OnTouchInputDelegate;//[Offset: 0x8b0, Size: 0x10]
	RegistedActorContainer CachedRegistedActors;//[Offset: 0x8c0, Size: 0x50]
	bool IsHotPatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 0x1]
	bool bCheatedInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92c, Size: 0x1]
	FText KickOutReason;//[Offset: 0x930, Size: 0x18]
	delegate OnSsmDSGetConfigSuccess;//[Offset: 0x948, Size: 0x10]
	AntiCheatSetting[] AntiCheatSettings;//[Offset: 0x958, Size: 0x10]
	ScreenshotConfig ScreenshotConfig;//[Offset: 0x968, Size: 0x50]
	void UpdateScreenshotSetting();// 0x1bad23bfa041
	void UpdateAntiCheatSetting();// 0x1bac23bfa041
	void TestEnsureMsgInternal();// 0x1bab23bfa041
	void TestCrashInternal();// 0x1baa23bfa041
	void SolarGm_UploadLogFile();// 0x1ba923bfa041
	void SolarGM_Tut(FString Cmd, out const FString[] Args);// 0x1ba823bfa041
	void SolarGM_TriggerSteamAntiCheat(const int ActionReason, FString ActionDetials);// 0x1ba723bfa041
	void SolarGM_TransmitGMLua(FString playerName, out const FString[] GmArray);// 0x1ba623bfa041
	void SolarGM_TransmitGM(FString playerName, out const FString[] transmitGm);// 0x1ba523bfa041
	void SolarGM_TestEnsureMsgWithBP();// 0x1ba423bfa041
	void SolarGM_TestEnsureMsg();// 0x1ba323bfa041
	void SolarGM_TestCrashWithBP();// 0x1ba223bfa041
	void SolarGM_TestCrash();// 0x1ba123bfa041
	void SolarGm_SwitchFastFont(bool bIsEnable);// 0x1ba023bfa041
	void SolarGM_StopRecordingReplay();// 0x1b9f23bfa041
	void SolarGM_StopPlayingReplay();// 0x1b9e23bfa041
	void SolarGM_StartRecordingLocalReplay(FString Filename);// 0x1b9d23bfa041
	void SolarGM_StartRecordHighlight(FString SessionNameOverride);// 0x1b9c23bfa041
	void SolarGM_SetQuality(int InQuality);// 0x1b9b23bfa041
	void SolarGM_RequestWatchingLiveOfPlayer(FString PlayerId);// 0x1b9a23bfa041
	void SolarGM_RequestReplayList(int PageIndex, int PageSize);// 0x1b9923bfa041
	void SolarGM_RequestPlayReplayByIdx(uint32 Index);// 0x1b9823bfa041
	void SolarGM_RequestPlayReplayByBattleID(FString BattleID, bool IsLive);// 0x1b9723bfa041
	void SolarGM_RequestPlayReplay(FString BattleID, FString DownloadUrl);// 0x1b9623bfa041
	void SolarGM_PlayLocalReplay(FString Filename);// 0x1b9523bfa041
	void SolarGM_PlayHighlight(FString Filename);// 0x1b9423bfa041
	void SolarGM_LobbyLua(FString CmdName, out const FString[] Params);// 0x1b9323bfa041
	void SolarGM_Lobby(FString CmdName, out const FString[] Params);// 0x1b9223bfa041
	void SolarGM_KickMeOut();// 0x1b9123bfa041
	void SolarGM_GoHome();// 0x1b9023bfa041
	void SolarGm_EnableLuaCallStackProfile(bool bIsEnable);// 0x1b8f23bfa041
	void SolarGM_AddWeaponExpLua(int weaponid, int count);// 0x1b8e23bfa041
	void SolarGM_AddWeaponExp(int weaponid, int count);// 0x1b8d23bfa041
	void SolarGM_AddItemLua(int ItemID, int count);// 0x1b8c23bfa041
	void SolarGM_AddItem(int ItemID, int count);// 0x1b8b23bfa041
	void ShutDownPCSDK();// 0x1b8a23bfa041
	void ShutDownLimSdk();// 0x1b8923bfa041
	void ShutdownAnoSDK();// 0x1b8823bfa041
	void SetIsFirstLaunch(bool bIsFirst);// 0x1b8723bfa041
	void SetCleanUpfile(bool bCleanCache);// 0x1b8623bfa041
	bool ServerTravel(FString Map, int ListenPort, bool bSpectator, bool bSkipGameNotify, FString options);// 0x1b8523bfa041
	void SaveGame();// 0x1b8423bfa041
	void RequestShutDown(FString reason);// 0x1b8323bfa041
	void ReportLoadingInfoToBI(out FString[] LoadingInfo, float LoadingTime, bool bIsFinished);// 0x1b8223bfa041
	void RegisterNetworkManager();// 0x1b8123bfa041
	void OnStartBattle(FString BattleID);// 0x1b8023bfa041
	void OnSsmDSGetConfigSuccess__DelegateSignature();// 0x1b7f23bfa041
	void OnManagersInitialized__DelegateSignature();// 0x1b7e23bfa041
	void OnHotPatchComplete();// 0x1b7d23bfa041
	void OnDisconnect();// 0x1b7c23bfa041
	void LuaStartGameFrameWork();// 0x1b7b23bfa041
	void LuaInitGameFrameWork();// 0x1b7a23bfa041
	bool IsStandalone();// 0x1b7923bfa041
	bool IsSolarServer(const Object* WorldContextObject);// 0x1b7823bfa041
	bool IsSkipLogin();// 0x1b7723bfa041
	bool IsServerOrStandalone();// 0x1b7623bfa041
	bool IsListenServer();// 0x1b7523bfa041
	bool IsGIsEditor();// 0x1b7423bfa041
	bool IsFirstLaunchAfterVersionUpdate();// 0x1b7323bfa041
	bool IsEditor();// 0x1b7223bfa041
	bool IsDedicatedServerStressTest();// 0x1b7123bfa041
	bool IsDedicatedServer();// 0x1b7023bfa041
	bool IsClientOrStandalone();// 0x1b6f23bfa041
	bool IsClient();// 0x1b6e23bfa041
	void InitLuaClasses();// 0x1b6d23bfa041
	void InitGameManagers();// 0x1b6c23bfa041
	bool HasCommandlineParam(FString Param);// 0x1b6b23bfa041
	void GoHomeLuaCall();// 0x1b6a23bfa041
	SolarWeaponMergeMeshManager* GetWeaponMergeMeshManager();// 0x1b6923bfa041
	WeaponGrowthManager* GetWeaponGrowthManager();// 0x1b6823bfa041
	UINavigationManager* GetUINavigationManager();// 0x1b6723bfa041
	SolarVibrateManager* GetSolarVibrateManager();// 0x1b6623bfa041
	SolarTutorialManager* GetSolarTutorialManager();// 0x1b6523bfa041
	SolarTimerManager* GetSolarTimerManager();// 0x1b6423bfa041
	SolarTcpNetworkManager* GetSolarTcpNetworkManager();// 0x1b6323bfa041
	SolarTableManager* GetSolarTableManager();// 0x1b6223bfa041
	SolarSaveGame* GetSolarSaveGame();// 0x1b6123bfa041
	SolarReplayManager* GetSolarReplayManager();// 0x1b6023bfa041
	SolarRedHintManager* GetSolarRedHintManager();// 0x1b5f23bfa041
	SolarPopPanelManager* GetSolarPopPanelManager();// 0x1b5e23bfa041
	SolarPlatformHelper* GetSolarPlatformHelper();// 0x1b5d23bfa041
	SolarPingFpsManager* GetSolarPingFpsManager();// 0x1b5c23bfa041
	SolarMapManager* GetSolarMapManager();// 0x1b5b23bfa041
	SolarMainPlayerModel* GetSolarMainPlayerModel();// 0x1b5a23bfa041
	SolarLuaManager* GetSolarLuaManager();// 0x1b5923bfa041
	SolarLuaHelper* GetSolarLuaHelper();// 0x1b5823bfa041
	SolarLoginManager* GetSolarLoginManager();// 0x1b5723bfa041
	SolarLockSettingsMgr* GetSolarLockSettingsManager();// 0x1b5623bfa041
	SolarItemManager* GetSolarItemManager();// 0x1b5523bfa041
	SolarInteractableManager* GetSolarInteractableManager();// 0x1b5423bfa041
	SolarInputMappingManager* GetSolarInputMappingManager();// 0x1b5323bfa041
	IMChatObject* GetSolarIMChatObject();// 0x1b5223bfa041
	SolarHttpManager* GetSolarHttpManager();// 0x1b5123bfa041
	SolarHomeActorManager* GetSolarHomeActorManager();// 0x1b5023bfa041
	SolarGameUserSettingsMgr* GetSolarGameUserSettingsManager();// 0x1b4f23bfa041
	SolarGameplayLogger* GetSolarGameplayLogger();// 0x1b4e23bfa041
	SolarGameModeSelectionManager* GetSolarGameModeSelectionManager();// 0x1b4d23bfa041
	SolarGameInstanceBase* GetSolarGameInstanceBase(Object* WorldContextObject);// 0x1b4c23bfa041
	SolarEasyAntiCheatManager* GetSolarEasyAntiCheatManager();// 0x1b4b23bfa041
	SolarAnoHelper* GetSolarAnoHelperStatic(Object* WorldContextObject);// 0x1b4a23bfa041
	SolarAnoHelper* GetSolarAnoHelper();// 0x1b4923bfa041
	SolarAkSoundManager* GetSolarAkSoundManager();// 0x1b4823bfa041
	SolarAkGameObject* GetSolarAkGameObject();// 0x1b4723bfa041
	SolarActivityManager* GetSolarActivityManager();// 0x1b4623bfa041
	SolarABTestManager* GetSolarABTestManager();// 0x1b4523bfa041
	SettlementStageManager* GetSettlementStageManager();// 0x1b4423bfa041
	byte GetPlayStage();// 0x1b4223bfa041
	SolarCharacter* GetPlayerCharacter();// 0x1b4123bfa041
	FString GetPIEServerURL();// 0x1b4023bfa041
	int GetPIEInstance();// 0x1b3f23bfa041
	FString GetNetModeString();// 0x1b3e23bfa041
	byte GetNetMode();// 0x1b3c23bfa041
	KeyMappingManager* GetKeyMappingManager();// 0x1b3b23bfa041
	bool GetIsMutiPlayer();// 0x1b3a23bfa041
	SolarGameStatistics* GetGameStatistics();// 0x1b3923bfa041
	SolarGameConfigManager* GetGameConfigManager();// 0x1b3823bfa041
	SolarOperationUIElement* GetDefaultOperationLayout();// 0x1b3723bfa041
	SCustomizedGameModeManager* GetCustomizedGameManager();// 0x1b3623bfa041
	CGMCrossLevelDataMgr* GetCrossLevelDataMgr();// 0x1b3523bfa041
	CrashReportManager* GetCrashReportManager();// 0x1b3423bfa041
	FString GetCommandlineParam(FString Param);// 0x1b3323bfa041
	int GetClientNumber();// 0x1b3223bfa041
	void GetCategorizedActorsOfType(const Object* WorldContextObject, enum InActorType, out Actor*[] OutActors);// 0x1b3023bfa041
	void GetCategorizedActorsByBits(const Object* WorldContextObject, byte InActorBit, out Actor*[] OutActors);// 0x1b2f23bfa041
	BattlePassConfigInfo* GetBattlePassConfigInfo();// 0x1b2e23bfa041
	SolarAssetManager* GetAssetManager();// 0x1b2d23bfa041
	int64 GetAppActiveTimestampInterval();// 0x1b2c23bfa041
	void ExecuteCommandArray(out const FString[] cmdArray);// 0x1b2b23bfa041
	void ExecuteCommand(FString Cmd);// 0x1b2a23bfa041
	void ExecuteChangeAudioModeLuaCall(bool bTurnOn);// 0x1b2923bfa041
	void ExecuteBackKeyLuaCall();// 0x1b2823bfa041
	void ExecGameArgs(FString Args, out FString FailReason, out byte Branches);// 0x1b2623bfa041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, int FGuid_A, int FGuid_B, int FGuid_C, int FGuid_D);// 0x1b2523bfa041
	void ClearGameManagers();// 0x1b2423bfa041
	void CheckSavedDirFiles(out FString[] Files);// 0x1b2323bfa041
	void Browse(FString URL, byte TravelType);// 0x1b2123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarArchitecture.GameInstance.Object
	delegate OnOnScopeChangeDelegate;//[Offset: 0x1a0, Size: 0x10]
	void OnScopeChanged(enum InLastScope, enum InCurScope);// 0x1b2023bfa041
	bool IsScopeSettlement();// 0x1b1f23bfa041
	bool IsScopeLogin();// 0x1b1e23bfa041
	bool IsScopeLobby();// 0x1b1d23bfa041
	bool IsScopeBattle();// 0x1b1c23bfa041
	bool IsInScope(enum InScopeMask);// 0x1b1b23bfa041
	SolarAbstractModel* GetModel(out const class SolarAbstractModel ModelClass);// 0x1b1a23bfa041
	SolarAbstractManager* GetManager(out const class SolarAbstractManager ManagerClass);// 0x1b1923bfa041
	enum GetCurScope();// 0x1b1823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAbstractModel.SolarContainer.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarContainer.Object
	void ReceiveInitialize();// 0x249e23bfa041
	void ReceiveDeinitialize();// 0x249d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAbstractManager.SolarContainer.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarSaveGame.SaveGame.Object
	bool HasShowNewPlayerGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int EditorGameModeId;//[Offset: 0x2c, Size: 0x4]
	NeverShowCheckWindow[] NeverShowCheckWindowList;//[Offset: 0x30, Size: 0x10]
	bool HasReadSurvey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool HasReadSurvey2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool HasPlayedHuntMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	byte MatchTimes;//[Offset: 0x43, Size: 0x1]
	bool HasCompleteTeamUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool IsMorrowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bClickSocialEntranceBtnDiscord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bClickSocialEntranceBtnFacebook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	bool bClickSocialEntranceBtnYouTube;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bClickSocialEntranceBtnTikTok;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bClickSocialEntranceBtnInstagram;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bClickSocialTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bClickLiveBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int64 SocialLinkLastClickTime;//[Offset: 0x50, Size: 0x8]
	bool bHasReportedOnline15min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bHasReportedOnline30min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bHasPlayedPackEnterAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool bHasClickClanPermission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool bHasClickVipCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	int BattlePassID;//[Offset: 0x60, Size: 0x4]
	int[] MarkingPassTaskID;//[Offset: 0x68, Size: 0x10]
	int[] DisplayedProductIDs;//[Offset: 0x78, Size: 0x10]
	int[] ClickedPosterRecIDs;//[Offset: 0x88, Size: 0x10]
	uint32[] ReadMailIds;//[Offset: 0xa0, Size: 0x10]
	bool ValidateNeverShowCheckWindow(int TargetConfirmID);// 0x529223bfa041
	void UpdateNeverShowCheckWindow(int TargetConfirmID, enum NewDuration);// 0x529123bfa041
	void UpdateMarkTask(int InBattlePassID, int TaskID, bool Add);// 0x529023bfa041
	void UpdateDisplayedIDs(out const int[] InIDs);// 0x528f23bfa041
	void UpdateClickedPosterRecIDs(const int InID);// 0x528e23bfa041
	void SetMarkingTask(int InBattlePassID, out int[] InTaskID);// 0x528d23bfa041
	void PrintTwiceConfirmCheckWindowList();// 0x528c23bfa041
	void GetMarkingTask(int InBattlePassID, out int[] OutTaskID);// 0x528b23bfa041
	bool DeleteNeverShowCheckWindow(int TargetConfirmID);// 0x528a23bfa041
	void ClearDisplayIDs();// 0x528923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SaveGame.Object
<----------Generated by SSpawner v1.0.2---------->


Class: NeverShowCheckWindow
	int ConfirmID;//[Offset: 0x0, Size: 0x4]
	DateTime Timestamp;//[Offset: 0x8, Size: 0x8]
	enum Duration;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: DateTime
<----------Generated by SSpawner v1.0.2---------->


Class: SolarOperationUIElement.Object
	OperationUIElement[] CharacterOperationUI;//[Offset: 0x28, Size: 0x10]
	OperationUIElement[] DirectionOperationUI;//[Offset: 0x38, Size: 0x10]
	OperationUIElement[] SteeringOperationUI;//[Offset: 0x48, Size: 0x10]
	OperationUIElement[] JoyStickOperationUI;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: OperationUIElement
	FString PanelName;//[Offset: 0x0, Size: 0x10]
	FString PanelAliasName;//[Offset: 0x10, Size: 0x10]
	float CurScale;//[Offset: 0x20, Size: 0x4]
	float MinScale;//[Offset: 0x24, Size: 0x4]
	float MaxScale;//[Offset: 0x28, Size: 0x4]
	float CurOpacity;//[Offset: 0x2c, Size: 0x4]
	float MinOpacity;//[Offset: 0x30, Size: 0x4]
	float MaxOpacity;//[Offset: 0x34, Size: 0x4]
	bool bCanHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bLockAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float minOffsetY;//[Offset: 0x3c, Size: 0x4]
	float maxOffsetY;//[Offset: 0x40, Size: 0x4]
	bool bCannotChangeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bCannotChangeOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bVisibleInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	Vector2D Translation;//[Offset: 0x48, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameArgs.Object
	FString[] CommandLineArgs;//[Offset: 0x30, Size: 0x10]
	bool SkipTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool ExecGameArgs(FString Args, out FString FailReason);// 0x43aa23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UIManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	delegate[] OnBigMapOpenDelegateGroup;//[Offset: 0x68, Size: 0x10]
	delegate[] OnBigMapVisibilityChangedDelegateGroup;//[Offset: 0x78, Size: 0x10]
	DataTable* BattleWidgetSettings;//[Offset: 0x88, Size: 0x8]
	SolarUIRoot* SolarUIRoot;//[Offset: 0x90, Size: 0x8]
	DestroyObjectStruct[] NeedToDestroyObjects;//[Offset: 0x98, Size: 0x10]
	void WatchReference();// 0x5bb423bfa041
	void WatchAllReference();// 0x5bb323bfa041
	void UpdateButtonSprite(Button* TargetButton, FString AtlasType, FString NormalSpName, FString PressedSpName, FString HoveredSpName, FString DisableSpName);// 0x5bb223bfa041
	void TriggerDelegate();// 0x5bb123bfa041
	SolarUserWidget* ShowUIByName(FString InName, int RootID);// 0x5bb023bfa041
	void SetWidgetLayout(Widget* InWidget, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY);// 0x5baf23bfa041
	void SetWidgetChildrenLayout(UserWidget* InRootWidget, out const FName PanelAliasName, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY);// 0x5bae23bfa041
	SolarUserWidget* SetUIActive(SolarUserWidget* InWidget, const bool Inactive);// 0x5bad23bfa041
	void SetMaterialInstanceParams(Image* Image, FString ParamName, float Value);// 0x5bac23bfa041
	void SetMaterialInstanceColor(Image* Image, FString ParamName, out const LinearColor Value);// 0x5bab23bfa041
	void SetLoadingUIByLevelAndDisplay(int InModelID, int InLevel, int InMapIndex, bool InDisableCustomLoading);// 0x5baa23bfa041
	void SetImageTintColor(Image* Img, out const LinearColor InColor);// 0x5ba923bfa041
	void SetImageTexture(Image* Img, Texture2D* Texture);// 0x5ba823bfa041
	void SetImageFromTextureOrSprite(Image* DstImage, out const SoftObjectPath Path, bool bMatchSize);// 0x5ba723bfa041
	void SetImageColor(Image* Img, float R, float G, float B, float A);// 0x5ba623bfa041
	void SetFireInputStyle(FireInputWidget* FireInput, const SlateWidgetStyleAsset* Style);// 0x5ba523bfa041
	void SetCheckedState(CheckBox* Box, const enum State);// 0x5ba423bfa041
	void SetCheckboxStyle(CheckBox* CheckBox, const SlateWidgetStyleAsset* Style);// 0x5ba323bfa041
	void SetCheckBoxIsChecked(CheckBox* CheckBox, bool Checked);// 0x5ba223bfa041
	void SetButtonStyle(Button* Btn, const SlateWidgetStyleAsset* Style);// 0x5ba123bfa041
	void RemoveAllWidgets();// 0x5ba023bfa041
	void OpenUIGM(FString UIID, int RootID);// 0x5b9f23bfa041
	void OpenConfirmUIInLua(int ConfirmID);// 0x5b9e23bfa041
	void OnLuaHotReloadFileChanged(FString LuaSysPath, FString LuaPathName);// 0x5b9d23bfa041
	void OnInitLuaHotReload();// 0x5b9c23bfa041
	void OnGameManagersInitialized();// 0x5b9b23bfa041
	void OnClientStartGame();// 0x5b9a23bfa041
	void LuaCloseUI(FString MapName);// 0x5b9923bfa041
	Texture2D* LoadTexture2DBySoftPath(out const SoftObjectPath Path);// 0x5b9823bfa041
	Texture2D* LoadTexture2DByPath(Object* InOuter, FString FullPath);// 0x5b9723bfa041
	Texture2D* LoadTexture2D(Object* InOuter, FString TextureType, FString TexName);// 0x5b9623bfa041
	Texture2D* LoadQualityBG(Object* InOuter, const int InQuality);// 0x5b9523bfa041
	PaperSprite* LoadPaperSprite(Object* InOuter, FString AtlasPath, FString SpName);// 0x5b9423bfa041
	MaterialInterface* LoadMaterialInstance(Object* InOuter, FString MaterialType, FString MaterialName);// 0x5b9323bfa041
	bool IsWidgetVisibleForDisplay(const Widget* InWidget);// 0x5b9223bfa041
	void InvalidateWidgetPrepass(Widget* InWidget);// 0x5b9123bfa041
	void InitLvlTextWidget(TextBlock* InHeadTextWidget, TextBlock* InTrailTextWidget);// 0x5b9023bfa041
	SolarCharacter* GetWidgetOwningCharacter(const Widget* InWidget);// 0x5b8f23bfa041
	FString GetWeaponTextureFullPath(out FString IconPath);// 0x5b8e23bfa041
	UserWidget* GetUIPanel(FString MapName);// 0x5b8d23bfa041
	FString GetTexture2DFullPath(out FString PrePath, out FString IconPath);// 0x5b8c23bfa041
	FString GetQualityBGFullPath(const int InQuality, const bool bWithSuffix);// 0x5b8b23bfa041
	Texture2D* GetPlayerAvatarByID(int PlayerAvatarID);// 0x5b8a23bfa041
	int GetLobbyID();// 0x5b8923bfa041
	bool GetCheckBoxIsChecked(CheckBox* CheckBox);// 0x5b8823bfa041
	CanvasPanelSlot* GetCanvasPanelSlotForWidget(Widget* Widget);// 0x5b8723bfa041
	CustomWidget_TableRow GetBattleWidgetSetting(FString ConfigName);// 0x5b8623bfa041
	UserWidget* GetBattleBackpackWidget();// 0x5b8523bfa041
	void ExitSpectateMode();// 0x5b8423bfa041
	void EnterSpectateMode();// 0x5b8323bfa041
	void CloseUIGM(FString UIID);// 0x5b8223bfa041
	void CloseLoadingUI();// 0x5b8123bfa041
	Margin ClampInScreenOffsets(Widget* WorldContextObject, out const Margin Offsets, out const Anchors Anchors, out const Vector2D Alignment);// 0x5b8023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameManager.SolarAbstractManager.SolarContainer.Object
	SolarGameInstanceBase* OwnerGameInstance;//[Offset: 0x28, Size: 0x8]
	void ReceiveManagerIntialized();// 0x249f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x150, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x158, Size: 0x2b8]
	LinearColor ColorAndOpacity;//[Offset: 0x410, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x420, Size: 0x10]
	byte ClickMethod;//[Offset: 0x430, Size: 0x1]
	byte TouchMethod;//[Offset: 0x431, Size: 0x1]
	byte PressMethod;//[Offset: 0x432, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x433, Size: 0x1]
	delegate OnClicked;//[Offset: 0x438, Size: 0x10]
	delegate OnPressed;//[Offset: 0x448, Size: 0x10]
	delegate OnReleased;//[Offset: 0x458, Size: 0x10]
	delegate OnHovered;//[Offset: 0x468, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x478, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x3bda23bfa041
	void SetStyle(out const ButtonStyle InStyle);// 0x3bd923bfa041
	void SetPressMethod(byte InPressMethod);// 0x3bd823bfa041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3bd723bfa041
	void SetClickMethod(byte InClickMethod);// 0x3bd623bfa041
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x3bd523bfa041
	bool IsPressed();// 0x3bd423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x17a523bfa041
	PanelSlot* GetContentSlot();// 0x17a423bfa041
	Widget* GetContent();// 0x17a323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x98]
	SlateBrush Hovered;//[Offset: 0xa0, Size: 0x98]
	SlateBrush Pressed;//[Offset: 0x138, Size: 0x98]
	SlateBrush Disabled;//[Offset: 0x1d0, Size: 0x98]
	Margin NormalPadding;//[Offset: 0x268, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x278, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x288, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x2a0, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FireInputWidget.Widget.Visual.Object
	SlateBrush JoyStickThumb;//[Offset: 0x138, Size: 0x98]
	SlateBrush JoyStickThumbPress;//[Offset: 0x1d0, Size: 0x98]
	SlateBrush JoyStickIcon;//[Offset: 0x268, Size: 0x98]
	Vector2D VisualSize;//[Offset: 0x300, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x308, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x310, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x318, Size: 0x8]
	float ActiveOpacity;//[Offset: 0x320, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x324, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x328, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	delegate OnJoystickPressed;//[Offset: 0x340, Size: 0x10]
	delegate OnJoystickRelease;//[Offset: 0x350, Size: 0x10]
	delegate OnInputYawAndPitch;//[Offset: 0x360, Size: 0x10]
	void SetJoyStickThumbBrush(out const ButtonStyle ButtonStyle);// 0x43a923bfa041
	void SetJoyStickIcon(out const SlateBrush Icon);// 0x43a823bfa041
	void SetInputScale(Vector2D Scale);// 0x43a723bfa041
	void ResetControlInput();// 0x43a623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x149, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x14c, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x160, Size: 0x610]
	SlateWidgetStyleAsset* Style;//[Offset: 0x770, Size: 0x8]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x778, Size: 0x8]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x780, Size: 0x8]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x788, Size: 0x8]
	SlateBrushAsset* CheckedImage;//[Offset: 0x790, Size: 0x8]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x798, Size: 0x8]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x7a0, Size: 0x8]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x7a8, Size: 0x8]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x7b0, Size: 0x8]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x7b8, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x7c0, Size: 0x1]
	Margin Padding;//[Offset: 0x7c4, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0x7d8, Size: 0x28]
	byte ClickMethod;//[Offset: 0x800, Size: 0x1]
	byte TouchMethod;//[Offset: 0x801, Size: 0x1]
	byte PressMethod;//[Offset: 0x802, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x803, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0x808, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x4c0b23bfa041
	void SetPressMethod(byte InPressMethod);// 0x4c0a23bfa041
	void SetIsChecked(bool InIsChecked);// 0x4c0923bfa041
	void SetClickMethod(byte InClickMethod);// 0x4c0823bfa041
	void SetCheckedState(enum InCheckedState);// 0x4c0723bfa041
	bool IsPressed();// 0x4c0623bfa041
	bool IsChecked();// 0x4c0523bfa041
	enum GetCheckedState();// 0x4c0423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x98]
	SlateBrush UncheckedHoveredImage;//[Offset: 0xa8, Size: 0x98]
	SlateBrush UncheckedPressedImage;//[Offset: 0x140, Size: 0x98]
	SlateBrush CheckedImage;//[Offset: 0x1d8, Size: 0x98]
	SlateBrush CheckedHoveredImage;//[Offset: 0x270, Size: 0x98]
	SlateBrush CheckedPressedImage;//[Offset: 0x308, Size: 0x98]
	SlateBrush UndeterminedImage;//[Offset: 0x3a0, Size: 0x98]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x438, Size: 0x98]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x4d0, Size: 0x98]
	Margin Padding;//[Offset: 0x568, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x578, Size: 0x28]
	SlateColor BorderBackgroundColor;//[Offset: 0x5a0, Size: 0x28]
	SlateSound CheckedSlateSound;//[Offset: 0x5c8, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x5e0, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x5f8, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarUIRoot.SolarUserWidget.UserWidget.Widget.Visual.Object
<----------Generated by SSpawner v1.0.2---------->


Class: DestroyObjectStruct
	UserWidget* RootWidget;//[Offset: 0x0, Size: 0x8]
	FString FullPath;//[Offset: 0x8, Size: 0x10]
	DestroyObjectEntry[] Objects;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: DestroyObjectEntry
	Object* Object;//[Offset: 0x0, Size: 0x8]
	FString FullPath;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x160, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x178, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x188, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1c0, Size: 0x60]
	SlateBrush StrikeBrush;//[Offset: 0x220, Size: 0x98]
	Vector2D ShadowOffset;//[Offset: 0x2b8, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x2c0, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2d0, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x2e0, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1]
	enum TextTransformPolicy;//[Offset: 0x2e6, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e7, Size: 0x1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x17c623bfa041
	void SetText(FText InText);// 0x17c523bfa041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x17c423bfa041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x17c323bfa041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x17c223bfa041
	void SetOpacity(float InOpacity);// 0x17c123bfa041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x17c023bfa041
	void SetFont(SlateFontInfo InFontInfo);// 0x17bf23bfa041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x17be23bfa041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x17bd23bfa041
	FText GetText();// 0x17bc23bfa041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x17bb23bfa041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x17ba23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x138, Size: 0x3]
	byte Justification;//[Offset: 0x13b, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x13c, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 0x1]
	float WrapTextAt;//[Offset: 0x140, Size: 0x4]
	Margin Margin;//[Offset: 0x144, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x154, Size: 0x4]
	bool AlwaysKeepJustification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 0x1]
	void SetJustification(byte InJustification);// 0x175723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x28]
	FName TypefaceFontName;//[Offset: 0x48, Size: 0x8]
	int Size;//[Offset: 0x50, Size: 0x4]
	int LetterSpacing;//[Offset: 0x54, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	int OutlineBlur;//[Offset: 0x4, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x10, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CustomWidget_TableRow.TableRowBase
	SoftObjectPath TeammateState;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath BattleScore;//[Offset: 0x20, Size: 0x18]
	SoftObjectPath SpectatorListPath;//[Offset: 0x38, Size: 0x18]
	SoftObjectPath SafeAreaProgress;//[Offset: 0x50, Size: 0x18]
	SoftObjectPath JobEffectListPath;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath JobEffectSelectPanelPath;//[Offset: 0x80, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: TableRowBase
<----------Generated by SSpawner v1.0.2---------->


Class: UINavigationManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	<FString,SolarUserWidget*> WidgetOpenedMap;//[Offset: 0x38, Size: 0x50]
	SolarUserWidget*[] TmpRemovedWidgets;//[Offset: 0x88, Size: 0x10]
	SolarUserWidget*[] CachedCreatedWidgets;//[Offset: 0x98, Size: 0x10]
	SolarUIRoot* SolarUIRoot;//[Offset: 0xb8, Size: 0x8]
	void UnbindCustomControlDefine(SolarUserWidget* PanelWidget, SolarUserWidget* UserWidget);// 0x5bdb23bfa041
	SolarUserWidget* ShowUIBySubClass(const class SolarUserWidget SubClass, enum RootID);// 0x5bda23bfa041
	bool ShowPanelUI(SolarUserWidget* createWidget, FString UniqueWidgetKey);// 0x5bd923bfa041
	void RemoveUserWidgetLuaRef(SolarUserWidget* UserWidget);// 0x5bd823bfa041
	void RemoveUIFromOpenedMap(FString UniqueWidgetKey);// 0x5bd723bfa041
	void RemoveAllSolarWidgets();// 0x5bd623bfa041
	void PrePooledWidgetReset(UserWidget* UserWidget);// 0x5bd523bfa041
	void OnShowPanelUI(SolarUserWidget* UserWidget);// 0x5bd423bfa041
	void OnPostLoadMapInitUIRoot(World* InWorld);// 0x5bd323bfa041
	void OnOpenPanelUI(SolarUserWidget* UserWidget);// 0x5bd223bfa041
	void OnHidePanelUI(SolarUserWidget* UserWidget);// 0x5bd123bfa041
	void OnDisplayMetricsChanged();// 0x5bd023bfa041
	void OnClosePanelUI(SolarUserWidget* UserWidget);// 0x5bcf23bfa041
	bool IsUserWidgetInScope(out const class SolarUserWidget Class, out enum OutCurScope, out enum OutDstScope);// 0x5bce23bfa041
	SolarUserWidget* GetShowTopWidget();// 0x5bcd23bfa041
	UserWidget* GetOpenedWidget(FString UniqueWidgetKey);// 0x5bcc23bfa041
	void CloseUIBySubClass(const class SolarUserWidget SubClass);// 0x5bcb23bfa041
	void ClosePanelUI(SolarUserWidget* closeWidget, FString UniqueWidgetKey);// 0x5bca23bfa041
	void ClearNonPersistentWidget();// 0x5bc923bfa041
	void ClearAllOpenedWidget();// 0x5bc823bfa041
	void BindWidgetVisibilityChangedEvent(out const delegate VisibilityChangedEvent);// 0x5bc723bfa041
	void BindCustomControlDefine(SolarUserWidget* PanelWidget, SolarUserWidget* UserWidget, FString FullPath);// 0x5bc623bfa041
	void BatchRemovedWidgets(bool bRemoveAll);// 0x5bc523bfa041
	void AddUIToOpenedMap(FString UniqueWidgetKey, SolarUserWidget* Widget);// 0x5bc423bfa041
	void AddBatchRemovedWidget(SolarUserWidget* UserWidget);// 0x5bc323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarInputMappingManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	delegate OnInputMappingUpdate;//[Offset: 0x38, Size: 0x10]
	<FString,InputKeyMappingEntry> KeyMappingEntryDict;//[Offset: 0x48, Size: 0x50]
	InputKeyMappingEntry[] CacheKeyMappingEntries;//[Offset: 0x98, Size: 0x10]
	void SplitInputChord(out const InputChord InInputChord, out FString KeyStr1, out FString KeyStr2);// 0x4eb223bfa041
	InputKeyMappingEntry[] GetKeyMappingEntries();// 0x4eb123bfa041
	InputKeyMappingEntry FindKeyMappingEntry(FString ActionID);// 0x4eb023bfa041
	InputKeyMappingEntry CreateKeyMappingEntry(FString InActionID, FString InActionName, const enum InActionType, float InScale, FString InKeyStr1, FString InKeyStr2, FString InKeyStr3, const enum InInputTriggerType1, const enum InInputTriggerType2, const enum InInputTriggerType3);// 0x4eaf23bfa041
	bool CreateInputChord(FString KeyStr1, FString KeyStr2, out InputChord OutInputChord);// 0x4eae23bfa041
	void ApplyKeyMappings();// 0x4ead23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: InputKeyMappingEntry
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString ActionID;//[Offset: 0x8, Size: 0x10]
	FString ActionName;//[Offset: 0x18, Size: 0x10]
	enum ActionType;//[Offset: 0x28, Size: 0x1]
	float Scale;//[Offset: 0x2c, Size: 0x4]
	InputKeyMappingPair[] KeyMappingPairList;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: InputKeyMappingPair
	FString KeyStr1;//[Offset: 0x0, Size: 0x10]
	FString KeyStr2;//[Offset: 0x10, Size: 0x10]
	enum TriggerType;//[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTimerManager.Object
	bool bFullCleanup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void UnPauseTimerInternal(TimerHandle Handle);// 0x58fb23bfa041
	void TimerCallbackToLuaInternal(FString CallbackKey);// 0x58fa23bfa041
	TimerHandle SetTimerForNextTickInternal(FString CallbackKey);// 0x58f923bfa041
	void PauseTimerInternal(TimerHandle Handle);// 0x58f823bfa041
	void OnLuaContextCleanup(const bool InBFullCleanup);// 0x58f723bfa041
	bool IsValidTimerInternal(TimerHandle Handle);// 0x58f623bfa041
	bool IsTimerActiveInternal(TimerHandle Handle);// 0x58f523bfa041
	void ClearTimerInternal(TimerHandle Handle);// 0x58f423bfa041
	TimerHandle AddTimerInternal(FString CallbackKey, const float Rate, const bool IsLoop, const float InitialStartDelay);// 0x58f323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarMainPlayerModel.Object
	void SyncFromPlayerData(int InAccountFlag);// 0x500723bfa041
	bool IsAccountFlagOn();// 0x500623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameConfigManager.Object
	DataTable* WeaponDTInstance;//[Offset: 0x30, Size: 0x8]
	DataTable* WeaponAppearanceDTInstance;//[Offset: 0x38, Size: 0x8]
	DataTable* ItemActorDTInstance;//[Offset: 0x40, Size: 0x8]
	DataTable* BackpackTrailAssembingDTInstance;//[Offset: 0x48, Size: 0x8]
	DataTable* CharacterDTInstance;//[Offset: 0x50, Size: 0x8]
	DataTable* ItemResourceDTInstance;//[Offset: 0x58, Size: 0x8]
	DataTable* BuffEffectDTInstance;//[Offset: 0x60, Size: 0x8]
	DataTable* ScreenEffectDTInstance;//[Offset: 0x68, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfigAsset;//[Offset: 0x70, Size: 0x8]
	GlobalVehicleWeaponConfig* GlobalVehicleWeaponConfigAsset;//[Offset: 0x78, Size: 0x8]
	SolarRoleSkillDataConfig* RoleConfigAsset;//[Offset: 0x80, Size: 0x8]
	float HeadHitValue;//[Offset: 0x88, Size: 0x4]
	float ShieldReducePhy;//[Offset: 0x8c, Size: 0x4]
	float ShieldReduceEn;//[Offset: 0x90, Size: 0x4]
	float ArmorReducePhy;//[Offset: 0x94, Size: 0x4]
	float ArmorReduceEn;//[Offset: 0x98, Size: 0x4]
	int BackpackEnergyID;//[Offset: 0x9c, Size: 0x4]
	int BackpackExtraEnergyID;//[Offset: 0xa0, Size: 0x4]
	int MedicineItemId;//[Offset: 0xa4, Size: 0x4]
	int RadarItemId;//[Offset: 0xa8, Size: 0x4]
	int ShieldRechargerItemId;//[Offset: 0xac, Size: 0x4]
	int ShieldBigRechargerItemId;//[Offset: 0xb0, Size: 0x4]
	float UnPickupItemTime;//[Offset: 0xb4, Size: 0x4]
	float UnAutoPickupItemTime;//[Offset: 0xb8, Size: 0x4]
	float AutoPickupTime;//[Offset: 0xbc, Size: 0x4]
	float AutoMarkCDTime;//[Offset: 0xc0, Size: 0x4]
	int[] AutoMarkItemTypeList;//[Offset: 0xc8, Size: 0x10]
	float AutoMarkTeammateDistance;//[Offset: 0xd8, Size: 0x4]
	float PickupCapsuleRadius;//[Offset: 0xdc, Size: 0x4]
	float PickupCapsuleHalfHeight;//[Offset: 0xe0, Size: 0x4]
	void OnInitialized();// 0x4cf523bfa041
	SolarRoleSkillDataConfig* GetSolarRoleSkillDataConfig();// 0x4cf423bfa041
	LinearColor GetLowQualityColorByQuality(int Quality);// 0x4cf323bfa041
	LinearColor GetHUDDecorateColorByQuality(int Quality);// 0x4cf223bfa041
	LinearColor GetHUDColorByQuality(int Quality);// 0x4cf123bfa041
	LinearColor GetHUDBGColorByQuality(int Quality);// 0x4cf023bfa041
	LinearColor GetHighQualityColorByQuality(int Quality);// 0x4cef23bfa041
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x4cee23bfa041
	GlobalVehicleWeaponConfig* GetGlobalVehicleWeaponConfig();// 0x4ced23bfa041
	FString GetFGByQuality(int Quality);// 0x4cec23bfa041
	LinearColor GetColorByQuality(int Quality);// 0x4ceb23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GlobalWeaponConfig.SolarDataAsset.DataAsset.Object
	WeaponAttributeGameplayTags WeaponAttributeTags;//[Offset: 0x38, Size: 0x18]
	enum AimTraceOriginType;//[Offset: 0x50, Size: 0x1]
	float MuzzleInWallCheckDistance;//[Offset: 0x54, Size: 0x4]
	float SpreadSmoothSpeed;//[Offset: 0x58, Size: 0x4]
	bool bEnableNewShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bEnableGunEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	bool bEnableRecoilRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1]
	bool bRecoilRecoveryBlockGunEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 0x1]
	float RecoilRecoveryScale;//[Offset: 0x60, Size: 0x4]
	enum AimOffsetAdjustType;//[Offset: 0x64, Size: 0x1]
	Vector2D StandardViewportSize;//[Offset: 0x68, Size: 0x8]
	float StandardDPIScale;//[Offset: 0x70, Size: 0x4]
	bool bWeaponReceiveShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	DataTable* WeaponScopeSensitivityTable;//[Offset: 0x78, Size: 0x8]
	bool bSecondLimitFullForGameDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	float DoScopeInterval;//[Offset: 0x84, Size: 0x4]
	float DoScopeMixedTimeThreshold;//[Offset: 0x88, Size: 0x4]
	float SprintingFireDelay;//[Offset: 0x8c, Size: 0x4]
	<class Actor,WeaponHitResponse> WeaponHitResponseClassMap;//[Offset: 0x90, Size: 0x50]
	<FName,WeaponHitResponse> WeaponHitResponseTagMap;//[Offset: 0xe0, Size: 0x50]
	<class Actor,WeaponHitResponse> WeaponHitResponseSameTeamClassMap;//[Offset: 0x130, Size: 0x50]
	<FName,WeaponHitResponse> WeaponHitResponseSameTeamTagMap;//[Offset: 0x180, Size: 0x50]
	RuntimeFloatCurve HitEffectScaleRuntimeCurve;//[Offset: 0x1d0, Size: 0x88]
	bool bCanOperateWhenOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	RuntimeFloatCurve WeaponCrosshairSpreadSpeedRuntimeCurve;//[Offset: 0x260, Size: 0x88]
	RuntimeFloatCurve WeaponCrosshairBackSpeedRuntimeCurve;//[Offset: 0x2e8, Size: 0x88]
	float WeaponSkillDataUIDisplayDistance;//[Offset: 0x370, Size: 0x4]
	float PriamayFireIgnoreInterval;//[Offset: 0x374, Size: 0x4]
	float AssistAimAutoFireRadius;//[Offset: 0x378, Size: 0x4]
	byte[] AssistAimAutoFireBlockTypes;//[Offset: 0x380, Size: 0x10]
	WeaponAssistAimConfig* AssistAimConfig;//[Offset: 0x390, Size: 0x8]
	SoftObjectPath PartUpgradeMaterial;//[Offset: 0x398, Size: 0x18]
	float PartUpgradeFadeInterval;//[Offset: 0x3b0, Size: 0x4]
	<enum,FString> CharaterPostureMap;//[Offset: 0x3b8, Size: 0x50]
	GameplayTagContainer BlockCharacterSprintTags;//[Offset: 0x408, Size: 0x20]
	DataTable* WeaponPartEffectDescTable;//[Offset: 0x428, Size: 0x8]
	int WeaponPartEffectTipMaxinum;//[Offset: 0x430, Size: 0x4]
	<enum,FString> HitFeedbackMapForUI;//[Offset: 0x438, Size: 0x50]
	float CrosshairAimEnemyEndTimeForPlayerWeapon;//[Offset: 0x488, Size: 0x4]
	float CrosshairAimEnemyEndTimeForVehicleWeapon;//[Offset: 0x48c, Size: 0x4]
	<int,enum> AudioPromptForNoAmmoTable;//[Offset: 0x490, Size: 0x50]
	int WeaponSummonBlockNoticeID;//[Offset: 0x4e0, Size: 0x4]
	int WeaponSummonOverRangeNoticeID;//[Offset: 0x4e4, Size: 0x4]
	DataTable* WeaponSkinTable;//[Offset: 0x4e8, Size: 0x8]
	<enum,FName> PartSocketNameTable;//[Offset: 0x4f0, Size: 0x50]
	DataTable* WeaponLODTable;//[Offset: 0x540, Size: 0x8]
	float EnableHeadShotDamageMinScale;//[Offset: 0x548, Size: 0x4]
	FString GetStateByPosture(enum posture);// 0x441723bfa041
	FString GetStateByAnimState(enum CharacterState);// 0x441623bfa041
	bool GetIsGroundByAnimState(enum CharacterState);// 0x441523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarDataAsset.DataAsset.Object
	void InitFromAsset();// 0x441423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAttributeGameplayTags
	GameplayTag Spread;//[Offset: 0x0, Size: 0x8]
	GameplayTag HorizontalRecoil;//[Offset: 0x8, Size: 0x8]
	GameplayTag VerticalRecoil;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponHitResponse
	bool bForceBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bForcePenetrate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectHalo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bTakeDamage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bShowExplode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bShowDecal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bPlaySound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAssistAimConfig.DataAsset.Object
	byte AssistAimTargetFlag;//[Offset: 0x30, Size: 0x1]
	byte[] TargetDetectionBlockTypes;//[Offset: 0x38, Size: 0x10]
	byte[] LockAimingBlockTypes;//[Offset: 0x48, Size: 0x10]
	bool bEnableAssistFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bEnableGlobalSensitivityScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	WeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAll;//[Offset: 0x60, Size: 0x60]
	WeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAllGamepad;//[Offset: 0xc0, Size: 0x60]
	WeaponAssistAimByCharacterTag[] AssistAimWeaponConfigsByCharacterTag;//[Offset: 0x120, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAssistAimByCharacterTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	WeaponAssistAimWeaponConfig* AssistAimConfig;//[Offset: 0x50, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GlobalVehicleWeaponConfig.SolarDataAsset.DataAsset.Object
	AssitLockBoneWeight[] AssistLockBoneWeight;//[Offset: 0x38, Size: 0x10]
	AssitLockBoneWeight[] SortAssistLockBoneWeight;//[Offset: 0x48, Size: 0x10]
	float CoefficientHUD;//[Offset: 0x58, Size: 0x4]
	float CoefficientWorld;//[Offset: 0x5c, Size: 0x4]
	float CoefficientHUDUnlock;//[Offset: 0x60, Size: 0x4]
	float CoefficientWorldUnlock;//[Offset: 0x64, Size: 0x4]
	float HudDistFromAssistLockPawnToSecondReticle;//[Offset: 0x68, Size: 0x4]
	RuntimeFloatCurve AssistLockUIScaleCurve;//[Offset: 0x70, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: AssitLockBoneWeight
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float BoneWeight;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarRoleSkillDataConfig.DataAsset.Object
	PassiveSkillDataAsset* ClassCommonPassiveSkill;//[Offset: 0x30, Size: 0x28]
	<enum,HeroClassConfig> HeroClassConfigs;//[Offset: 0x58, Size: 0x50]
	DataTable* RoleSkillDataTable;//[Offset: 0xa8, Size: 0x8]
	DataTable* BattleUpgradeEffectTypeDataTable;//[Offset: 0xb0, Size: 0x8]
	int RoleSkillCannotActiveNoticeID;//[Offset: 0xb8, Size: 0x4]
	SoftClassPath UniqueSkillForbiddenGameplayEffect;//[Offset: 0xc0, Size: 0x18]
	SoftClassPath TacticalSkillForbiddenGameplayEffect;//[Offset: 0xd8, Size: 0x18]
	SoftClassPath InitCDValueGameplayEffect;//[Offset: 0xf0, Size: 0x18]
	SoftClassPath SuperSkillBlockGameplayEffect;//[Offset: 0x108, Size: 0x18]
	SoftClassPath TacticalSkillBlockGameplayEffect;//[Offset: 0x120, Size: 0x18]
	class GameplayEffect* UsingContinuousSkillStatusEffect;//[Offset: 0x138, Size: 0x8]
	class GameplayEffect* HoldingSkillStatusEffect;//[Offset: 0x140, Size: 0x8]
	DataTable* WeaponUIStyleDataTable;//[Offset: 0x148, Size: 0x8]
	<int,FString> CharacterUpgradeEffects;//[Offset: 0x150, Size: 0x50]
	enum GetLevelUpRewardType(const int CharacterId, const int TargetLevel);// 0x528823bfa041
	SoftObjectPath GetLevelUpInnerIconPath(const int CharacterId, const int TargetLevel);// 0x528723bfa041
	FString GetLevelUpInnerDescription(const int CharacterId, const int TargetLevel);// 0x528623bfa041
	SoftObjectPath[] GetLevelUpAllInnerIconPath(const int CharacterId, const int TargetLevel);// 0x528523bfa041
	FString[] GetLevelUpAllInnerDescription(const int CharacterId, const int TargetLevel);// 0x528423bfa041
	FString GetEffectIdForCharacterUpgrade(const int TargetLevel);// 0x528323bfa041
	enum GetClassTypeForCharacter(const int CharacterId);// 0x528223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PassiveSkillDataAsset.PrimaryDataAsset.DataAsset.Object
	SoftClassPath SkillClassPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SkillIconPath;//[Offset: 0x48, Size: 0x18]
	WrappedLocalTextID SkillName;//[Offset: 0x60, Size: 0x4]
	WrappedLocalTextID SkillDescription;//[Offset: 0x64, Size: 0x4]
	PassiveSkillLevelDescription[] LevelUpConfigs;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PrimaryDataAsset.DataAsset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: WrappedLocalTextID
	int LocalTextId;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PassiveSkillLevelDescription
	WrappedLocalTextID InnerDescriptionLocalTextID;//[Offset: 0x0, Size: 0x4]
	WrappedLocalTextID ShortDescriptionLocalTextID;//[Offset: 0x4, Size: 0x4]
	SoftObjectPath InnerIconPath;//[Offset: 0x8, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: HeroClassConfig
	PassiveSkillDataAsset* SpecificPassiveSkill;//[Offset: 0x0, Size: 0x28]
	float HPGridUnit;//[Offset: 0x28, Size: 0x4]
	bool bEnableCombatRegeneration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	int RegenGrids;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BattlePassConfigInfo.Object
	BattlePassLevelInfo[] BattlePassLevel;//[Offset: 0x28, Size: 0x10]
	bool IsMaxLevelWithExp(int BattlePassID, int TotalExp);// 0x41c323bfa041
	void Initialize();// 0x41c223bfa041
	int GetLevelByTestExp(int BattlePassID, int InTestExp);// 0x41c123bfa041
	int GetExpNeedForLv(int BattlePassID, int Level);// 0x41c023bfa041
	int GetBattllePassMaxLevel(int BattlePassID);// 0x41bf23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BattlePassLevelInfo
<----------Generated by SSpawner v1.0.2---------->


Class: SolarLuaHelper.Object
	DataTable* KeyMappingInfoDataTable;//[Offset: 0x30, Size: 0x8]
	DataTable* KeyMappingDisplayInfoDataTable;//[Offset: 0x38, Size: 0x8]
	SolarPlayerReport[] SettleTeamReports;//[Offset: 0x40, Size: 0x10]
	bool WriteFile(FString FilePath, FString Content);// 0x500023bfa041
	void UELogWarning(FString str);// 0x4fff23bfa041
	void UELogNetwork(FString str);// 0x4ffe23bfa041
	void UELogError(FString str);// 0x4ffd23bfa041
	void UELog(FString str);// 0x4ffc23bfa041
	Object* TryLoadBySoftObjectPath(out const SoftObjectPath ObjectPath);// 0x4ffb23bfa041
	bool TryConvertFilenameToLongPackageName(FString InFilename, out FString OutPackageName);// 0x4ffa23bfa041
	void StaticSetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x4ff923bfa041
	void StaticSetAkState(FName StateGroup, FName State);// 0x4ff823bfa041
	void StaticSetAkBusConfig(FString BusName, enum ChannelConfiguration);// 0x4ff723bfa041
	void StaticPostAkEventByNameGlobal(FString InEventName);// 0x4ff623bfa041
	int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString InEventName, LatentActionInfo LatentInfo);// 0x4ff523bfa041
	int StaticPostAkEventByName(FString InEventName);// 0x4ff423bfa041
	void SolarSetVSyncEnabled(bool bEnable);// 0x4ff323bfa041
	void SolarSetShadowQuality(int InQuality);// 0x4ff223bfa041
	void SolarSetMSAAEnabled(bool bEnable);// 0x4ff123bfa041
	void SolarSetGraphicsQuality(enum InLevel);// 0x4ff023bfa041
	void SolarSetFrameRate(enum FrameRateLevel);// 0x4fef23bfa041
	void SolarSetColorGrading(enum InTheme);// 0x4fee23bfa041
	void SolarRefreshContentScaleFactorLevel();// 0x4fed23bfa041
	bool SolarGetTextureStreamingEnable();// 0x4fec23bfa041
	void SolarEnableTextureStreaming(bool bEnable);// 0x4feb23bfa041
	void SolarEnableDynamicShadow(bool bEnable);// 0x4fea23bfa041
	int ShouldEnterLobby();// 0x4fe923bfa041
	void SetSwitch(SolarAkGameObject* SolarAkGameObject, FString SwitchGroup, FString SwitchState);// 0x4fe823bfa041
	void SetSkeletalMeshMatFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMatResPath, int ElementIndex);// 0x4fe723bfa041
	void SetSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMatResPath, int ElementIndex);// 0x4fe623bfa041
	void SetSkeletalMeshFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMeshResPath);// 0x4fe523bfa041
	void SetSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMeshResPath);// 0x4fe423bfa041
	void SetSkeletalAnimBPFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewAnimBPResPath);// 0x4fe323bfa041
	void SetSkeletalAnimBP(SkeletalMeshComponent* SkeletalMeshComponent, FString NewAnimBPResPath);// 0x4fe223bfa041
	void SetRenderBatch(int Mode);// 0x4fe123bfa041
	void SetPlayerSettlementReport(out const SolarGameModeInfo GameInfo);// 0x4fe023bfa041
	void SetPlayerNameColorByVIPState(TextBlock* TextWidget, byte VipType);// 0x4fdf23bfa041
	void SetPatchBuildVersion(FString Version);// 0x4fde23bfa041
	void SetEnableSoftwareCursorWidgets(const bool bIsEnabled);// 0x4fdd23bfa041
	void SetCurThirdPartyInfo(FString InCurThirdPartyInfo);// 0x4fdc23bfa041
	void SetChangeListNumber(FString ChangeListNum);// 0x4fdb23bfa041
	void SetActorYawByDeltaRotatedImpl(Actor* InActor, float InDeltaYaw, bool bCheckCharaCanBeRotated);// 0x4fda23bfa041
	void SetActorYawByDelta(Actor* InActor, float InDeltaYaw);// 0x4fd923bfa041
	void ResumeBatching();// 0x4fd823bfa041
	Object* ResolveSoftObjectPath(out const SoftObjectPath ObjectPath);// 0x4fd723bfa041
	void ReloadVoiceBanks();// 0x4fd623bfa041
	FString ReadFileContent(FString FilePath);// 0x4fd523bfa041
	int PostAkEventByName(SolarAkGameObject* SolarAkGameObject, FString InEventName);// 0x4fd423bfa041
	void PlayVoiceLocaly(int CharacterId, int SkinId, enum Type);// 0x4fd323bfa041
	void OnBroadcastModeChanged(const bool bOpen);// 0x4fd223bfa041
	bool MoveFile(FString DestFilePath, FString SrcFilePath);// 0x4fd123bfa041
	Object* LoadObject_WithOuter(Object* Outer, FString ObjectName);// 0x4fd023bfa041
	byte[] LoadFileToArray(FString FilePath);// 0x4fcf23bfa041
	bool IsWorldTearingDown();// 0x4fce23bfa041
	bool IsLocalBuild();// 0x4fcd23bfa041
	bool IsInputTypeGamepad(PlayerController* InPlayerController);// 0x4fcc23bfa041
	bool IsBattlePassInfoUpdated(SolarPlayerState* InPlayerState);// 0x4fcb23bfa041
	bool HasReviveItemManager(Object* InWorldContext);// 0x4fca23bfa041
	FString HashMd5(FString InputText);// 0x4fc923bfa041
	int64 GetUtcNowTimestamp();// 0x4fc823bfa041
	FString GetTaskDesc(int TaskID);// 0x4fc723bfa041
	FString GetSourceCommitHash();// 0x4fc623bfa041
	FString GetSourceBuildVersion();// 0x4fc523bfa041
	SolarGameState* GetSolarGameState();// 0x4fc423bfa041
	FString GetShortName(FString LongName);// 0x4fc323bfa041
	FString[] GetServersUrlList();// 0x4fc223bfa041
	FString GetServerEnvTag();// 0x4fc123bfa041
	Vector2D GetScreenSizeXY();// 0x4fc023bfa041
	FString GetPatchBuildVersion();// 0x4fbf23bfa041
	int GetMonsterDropItemOutcomeID(int MonsterAICharID, int StrengthGrade);// 0x4fbe23bfa041
	int GetMonsterDeathBoxID(int MonsterAICharID);// 0x4fbd23bfa041
	FString GetMainBuildVersion();// 0x4fbc23bfa041
	SolarReplayPlayerController* GetLocalSolarReplayPlayerController();// 0x4fbb23bfa041
	SolarPlayerState* GetLocalSolarPlayerState();// 0x4fba23bfa041
	SolarPlayerController* GetLocalSolarPlayerController();// 0x4fb923bfa041
	PlayerController* GetLocalPlayerController();// 0x4fb823bfa041
	Key GetLeftMouseKeyDown();// 0x4fb723bfa041
	void GetKeyMappingInfoByRowName(FString RowName, out KeyMappingRowInfo OutClassInfo);// 0x4fb623bfa041
	FString GetHostByDomainName(FString DomainName, bool bAppendPort);// 0x4fb523bfa041
	FString GetGameModeParam(int GameModeId, FString Key);// 0x4fb423bfa041
	FString GetExtBackdoorUrl();// 0x4fb323bfa041
	EmojiBubbleSubsystem* GetEmojiBubbleSubsystem(SolarGameInstanceBase* GI);// 0x4fb223bfa041
	bool GetCurrentInputType(PlayerController* InPlayerController, out enum OutInputType);// 0x4fb123bfa041
	CommonInputSubsystem* GetCommonInputSubsystem(PlayerController* PlayerController);// 0x4fb023bfa041
	FString GetClipboardPasteText();// 0x4faf23bfa041
	FString GetChangeListNumber();// 0x4fae23bfa041
	FString GetBuildVariation();// 0x4fad23bfa041
	FString GetBuildMode();// 0x4fac23bfa041
	FString GetBroadcastPlayerName(FString SolarPlayerID);// 0x4fab23bfa041
	int GetBroadcastPlayerId(int PlayerId);// 0x4faa23bfa041
	FString GetBroadcastHeroName(FString SolarPlayerID);// 0x4fa923bfa041
	Vector GetBoneLocationByName(SkeletalMeshComponent* SkeletalMeshComponent, FName BoneName, byte Space);// 0x4fa823bfa041
	FString GetBackdoorUrl();// 0x4fa723bfa041
	FString GetAndroidPkgName();// 0x4fa623bfa041
	FString[] GetAllLoadedPackagesPath();// 0x4fa523bfa041
	void GetAllKeyMappingInfoFromTable(out KeyMappingRowInfo[] OutKeyMappingInfo);// 0x4fa423bfa041
	FString GetActualBuildVersion();// 0x4fa323bfa041
	FString GetAbsolutePathForWrite(FString FilePath);// 0x4fa223bfa041
	FString GetAbsolutePathForRead(FString FilePath);// 0x4fa123bfa041
	Color FromHex(FString HexString);// 0x4fa023bfa041
	FString[] FindFiles(FString Directory, FString FileExtension);// 0x4f9f23bfa041
	void EndOfPlayInEditor(Object* InWorldContext, FString EndReason, bool bPopMsgBox);// 0x4f9e23bfa041
	void DoLuaDebug(out const FString[] cmdArray);// 0x4f9d23bfa041
	bool DirectoryExist(FString TargetDirectory);// 0x4f9c23bfa041
	bool DeleteFile(FString FilePath);// 0x4f9b23bfa041
	bool DeleteDirectoryRecursively(FString Path);// 0x4f9a23bfa041
	bool DeleteDirectory(FString Path);// 0x4f9923bfa041
	FString DecodeFile(FString InFilePath);// 0x4f9823bfa041
	LevelStreamingDynamic* CreateStreamInstance(World* World, FString PackageName);// 0x4f9723bfa041
	Actor* CreateEmptySkeletalMeshActor();// 0x4f9623bfa041
	MaterialInstanceDynamic* CreateDynamicMaterial(CameraActor* CameraActor, FString TemplateMatResPath, const int RTSizeX, const int RTSizeY, byte RenderTargetFormat);// 0x4f9523bfa041
	bool CreateDirectoryTree(FString Path);// 0x4f9423bfa041
	bool CreateDirectory(FString Path);// 0x4f9323bfa041
	bool CopyFile(FString DestFilePath, FString SrcFilePath);// 0x4f9223bfa041
	void ConvertKeyMappingName(out const Key Key, out FString OutDisplayName);// 0x4f9123bfa041
	void CloseVirtualKeyboard();// 0x4f9023bfa041
	void ClipboardCopyText(FString Content);// 0x4f8f23bfa041
	void ClearSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent);// 0x4f8e23bfa041
	bool CheckIsNeedDownLoad(int ChunkID);// 0x4f8d23bfa041
	void ApplyVehicleSkinPreview(Object* PreviewVehicleObj, int SkinId, int PageType, Vector DefaultLoc);// 0x4f8c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlayerReport
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	uint64 UserId;//[Offset: 0x10, Size: 0x8]
	FString NickName;//[Offset: 0x18, Size: 0x10]
	int CharacterId;//[Offset: 0x28, Size: 0x4]
	int SkinId;//[Offset: 0x2c, Size: 0x4]
	int PlayerRank;//[Offset: 0x30, Size: 0x4]
	int Gender;//[Offset: 0x34, Size: 0x4]
	int AccountFlag;//[Offset: 0x38, Size: 0x4]
	int TeamRank;//[Offset: 0x3c, Size: 0x4]
	int TeamID;//[Offset: 0x40, Size: 0x4]
	int PosInTeam;//[Offset: 0x44, Size: 0x4]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	int KillNum;//[Offset: 0x4c, Size: 0x4]
	int KillNumToRealPlayer;//[Offset: 0x50, Size: 0x4]
	int[] VehicleKillNum_ID;//[Offset: 0x58, Size: 0x10]
	int[] VehicleKillNum_Value;//[Offset: 0x68, Size: 0x10]
	int KillTeammate;//[Offset: 0x78, Size: 0x4]
	int KillInAirNum;//[Offset: 0x7c, Size: 0x4]
	int KillDownInAirNum;//[Offset: 0x80, Size: 0x4]
	int WeaponSkillKillNum;//[Offset: 0x84, Size: 0x4]
	int P_KillStreak;//[Offset: 0x88, Size: 0x4]
	int[] KillStreakHistory;//[Offset: 0x90, Size: 0x10]
	int RevengeNum;//[Offset: 0xa0, Size: 0x4]
	int DeathNum;//[Offset: 0xa4, Size: 0x4]
	int KillDownNum;//[Offset: 0xa8, Size: 0x4]
	int KillDownTeammate;//[Offset: 0xac, Size: 0x4]
	float AccurateDamage;//[Offset: 0xb0, Size: 0x4]
	int AccurateDameageTimes;//[Offset: 0xb4, Size: 0x4]
	int AccurateKillTimes;//[Offset: 0xb8, Size: 0x4]
	int AccurateKillDownTimes;//[Offset: 0xbc, Size: 0x4]
	float CauseDamage;//[Offset: 0xc0, Size: 0x4]
	float CauseDamageToRealPlayer;//[Offset: 0xc4, Size: 0x4]
	float ReceivedDamage;//[Offset: 0xc8, Size: 0x4]
	int AssistNum;//[Offset: 0xcc, Size: 0x4]
	float CollectEnergy;//[Offset: 0xd0, Size: 0x4]
	int BuyESElectricNum;//[Offset: 0xd4, Size: 0x4]
	int ResurrectionCapsule;//[Offset: 0xd8, Size: 0x4]
	int TeamFriendRevive;//[Offset: 0xdc, Size: 0x4]
	float ReceivedHeal;//[Offset: 0xe0, Size: 0x4]
	float HealSelf;//[Offset: 0xe4, Size: 0x4]
	float TeammateHeal;//[Offset: 0xe8, Size: 0x4]
	int OpenAirBoxNum;//[Offset: 0xec, Size: 0x4]
	float LifeTime;//[Offset: 0xf0, Size: 0x4]
	int SaveCount;//[Offset: 0xf4, Size: 0x4]
	int FlyCount;//[Offset: 0xf8, Size: 0x4]
	int VehicleTime;//[Offset: 0xfc, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0x100, Size: 0x4]
	int TotalCharacterExp;//[Offset: 0x104, Size: 0x4]
	bool bCharExpFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	int[] CharacterExpReason;//[Offset: 0x110, Size: 0x10]
	int CharacterExp;//[Offset: 0x120, Size: 0x4]
	int AccountExp;//[Offset: 0x124, Size: 0x4]
	int TotalAccountExp;//[Offset: 0x128, Size: 0x4]
	int AccountLevel;//[Offset: 0x12c, Size: 0x4]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int RankID;//[Offset: 0x134, Size: 0x4]
	int RankBeforeScore;//[Offset: 0x138, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x13c, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x140, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x144, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x148, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x14c, Size: 0x4]
	int RankAfterScore;//[Offset: 0x150, Size: 0x4]
	int RankLegend;//[Offset: 0x154, Size: 0x4]
	byte RankProtectType;//[Offset: 0x158, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	int WinninScoreID;//[Offset: 0x15c, Size: 0x4]
	int Zomborg;//[Offset: 0x160, Size: 0x4]
	float MvpScore;//[Offset: 0x164, Size: 0x4]
	float KDA;//[Offset: 0x168, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 0x1]
	int[] SettlementItems;//[Offset: 0x170, Size: 0x10]
	FString[] StringExtraRewards;//[Offset: 0x180, Size: 0x10]
	int[] SendGiftGold;//[Offset: 0x190, Size: 0x10]
	int[] SendGiftDiamond;//[Offset: 0x1a0, Size: 0x10]
	FString[] SendGiftPlayerName;//[Offset: 0x1b0, Size: 0x10]
	FString[] SendGiftPlayerID;//[Offset: 0x1c0, Size: 0x10]
	int[] WeaponExpIds;//[Offset: 0x1d0, Size: 0x10]
	int[] WeaponLevel;//[Offset: 0x1e0, Size: 0x10]
	int[] CurWeaponExp;//[Offset: 0x1f0, Size: 0x10]
	int[] WeaponExps;//[Offset: 0x200, Size: 0x10]
	int[] WeaponKillNum_ID;//[Offset: 0x210, Size: 0x10]
	float[] WeaponKillNum_Value;//[Offset: 0x220, Size: 0x10]
	int[] WeaponDamage_ID;//[Offset: 0x230, Size: 0x10]
	float[] WeaponDamage_Value;//[Offset: 0x240, Size: 0x10]
	int[] VehicleDamage_ID;//[Offset: 0x250, Size: 0x10]
	float[] VehicleDamage_Value;//[Offset: 0x260, Size: 0x10]
	int[] VehicleDistance_ID;//[Offset: 0x270, Size: 0x10]
	int[] VehicleDistance_Value;//[Offset: 0x280, Size: 0x10]
	int SettlementConfigID;//[Offset: 0x290, Size: 0x4]
	int GameModeSubID;//[Offset: 0x294, Size: 0x4]
	FString KillerPlayerId;//[Offset: 0x298, Size: 0x10]
	uint64 KillerUserId;//[Offset: 0x2a8, Size: 0x8]
	FString KillerNickName;//[Offset: 0x2b0, Size: 0x10]
	FString KillerOS;//[Offset: 0x2c0, Size: 0x10]
	FString OS;//[Offset: 0x2d0, Size: 0x10]
	int[] CharacterKillNumIDs;//[Offset: 0x2e0, Size: 0x10]
	int[] CharacterKillNumValues;//[Offset: 0x2f0, Size: 0x10]
	int WarmType;//[Offset: 0x300, Size: 0x4]
	int[] AchievementIDs;//[Offset: 0x308, Size: 0x10]
	int[] AchievementValues;//[Offset: 0x318, Size: 0x10]
	int LikeValue;//[Offset: 0x328, Size: 0x4]
	int[] StrategyConditionIDs;//[Offset: 0x330, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x340, Size: 0x4]
	int LastUseVehicleID;//[Offset: 0x344, Size: 0x4]
	FString[] SavedTeammateIDArr;//[Offset: 0x348, Size: 0x10]
	int[] SavedTeammateBonusArr;//[Offset: 0x358, Size: 0x10]
	byte[] SettlementRewards;//[Offset: 0x368, Size: 0x10]
	byte[] CrateRewardData;//[Offset: 0x378, Size: 0x10]
	FString ClanId;//[Offset: 0x388, Size: 0x10]
	int KnockoutPoints;//[Offset: 0x398, Size: 0x4]
	bool bIsKnockoutPointsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	int BattlePassAddExp;//[Offset: 0x3a0, Size: 0x4]
	int BattlePassExp;//[Offset: 0x3a4, Size: 0x4]
	int BattlePassID;//[Offset: 0x3a8, Size: 0x4]
	int[] BattlePassTaskWeek;//[Offset: 0x3b0, Size: 0x10]
	int[] BattlePassTaskID;//[Offset: 0x3c0, Size: 0x10]
	int[] BattlePassTaskAdd;//[Offset: 0x3d0, Size: 0x10]
	int[] BattlePassTaskVal;//[Offset: 0x3e0, Size: 0x10]
	int[] UsedCharacterIDs;//[Offset: 0x3f0, Size: 0x10]
	int CardPose;//[Offset: 0x400, Size: 0x4]
	int Cardbackground;//[Offset: 0x404, Size: 0x4]
	int SameClanCnt;//[Offset: 0x408, Size: 0x4]
	int CombatCore;//[Offset: 0x40c, Size: 0x4]
	bool IsCheater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	byte[] SettlePunishTypes;//[Offset: 0x418, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameModeInfo
	int GameModeId;//[Offset: 0x0, Size: 0x4]
	FString MapName;//[Offset: 0x8, Size: 0x10]
	int NumMode;//[Offset: 0x18, Size: 0x4]
	int PlayerCount;//[Offset: 0x1c, Size: 0x4]
	int TeamCount;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameState.GameState.GameStateBase.Info.Actor.Object
	SolarPlayerState*[] SolarPlayerStateArray;//[Offset: 0x298, Size: 0x10]
	SolarPlayerState*[] RealPlayerStateArray;//[Offset: 0x2a8, Size: 0x10]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	int[] MapVehicleSpawnTypes;//[Offset: 0x2c0, Size: 0x10]
	PrePooledBundle[] PrePooledBundles;//[Offset: 0x2e0, Size: 0x10]
	int RemainingPlayersCount;//[Offset: 0x2f0, Size: 0x4]
	int AlivePlayersCount;//[Offset: 0x2f4, Size: 0x4]
	int RemainingTeamCount;//[Offset: 0x2f8, Size: 0x4]
	int PlayersCount;//[Offset: 0x2fc, Size: 0x4]
	int TeamCount;//[Offset: 0x300, Size: 0x4]
	int TotalBoardingNum;//[Offset: 0x304, Size: 0x4]
	int CapsulePlayerNum;//[Offset: 0x308, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x30c, Size: 0x4]
	<class Object> LimitMaxReplicatedNumClasses;//[Offset: 0x310, Size: 0x50]
	float StartTime;//[Offset: 0x360, Size: 0x4]
	int NumPlayers;//[Offset: 0x364, Size: 0x4]
	int GameWarmID;//[Offset: 0x368, Size: 0x4]
	int TeammateNumMode;//[Offset: 0x36c, Size: 0x4]
	bool bLuaReportBattleEndServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	GameStartConditionList GameStartConditions;//[Offset: 0x378, Size: 0x58]
	SolarGameplayConfigComponent* GameplayConfigComponent;//[Offset: 0x3d0, Size: 0x8]
	SolarTeamInfo*[] Teams;//[Offset: 0x3d8, Size: 0x10]
	byte NumReplicatedTeams;//[Offset: 0x3e8, Size: 0x1]
	SolarPlayerActivityHeatComponent* SolarPlayerActivityHeatComponent;//[Offset: 0x438, Size: 0x8]
	void SetTeamLastVehicleLocation(byte InTeamId, out const Vector InVehiclePosition);// 0x1a2023bfa041
	void SetSettlementStageConfigID(const int InConfigID);// 0x1a1f23bfa041
	void ServerUpdateMapVehicleSpawnTypes(out const int[] InSpawnTargetVehicleTypes);// 0x1a1e23bfa041
	void PlayTeamVictoryVoice();// 0x1a1d23bfa041
	void OnSafeAreaIndexChanged(int NewIndex);// 0x1a1c23bfa041
	void OnRep_SettlementStageConfigID();// 0x1a1b23bfa041
	void OnRep_RemainingTeamCountChange();// 0x1a1a23bfa041
	void OnRep_OnPlayersCountChange();// 0x1a1923bfa041
	void OnRep_OnAlivePlayersCountChange();// 0x1a1823bfa041
	void OnRep_NumReplicatedTeams();// 0x1a1723bfa041
	void OnRep_NumPlayers(int PreviousNumPlayers);// 0x1a1623bfa041
	void OnRep_CapsulePlayerNum();// 0x1a1523bfa041
	void OnRecordingConnectionChanged();// 0x1a1423bfa041
	void OnLocalSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x1a1323bfa041
	void NotifyCheatedPlayer(SolarPlayerState* CheatedPlayerState, out const FText OutReason);// 0x1a1223bfa041
	void NotifyBombingEnd(int BombId);// 0x1a1123bfa041
	void NotifyBombingBegin(int BombId, const Vector Location, float Radius);// 0x1a1023bfa041
	void NotifyAbnormalPlayer(SolarPlayerState* AbnormalPlayerState, out const FText OutReason);// 0x1a0f23bfa041
	void NetMulticastNotifyCheatedPlayer(SolarPlayerState* CheatedPlayerState, const FText BanReason);// 0x1a0e23bfa041
	void K2_SetCanShowBattlePrompt(bool NewValue);// 0x1a0d23bfa041
	bool IsSupportWeaponUpgrade();// 0x1a0c23bfa041
	bool IsSupportCharacterTacticalAbility();// 0x1a0b23bfa041
	bool IsSupportCharacterSuperAbility();// 0x1a0a23bfa041
	bool IsSupportCharacterRole();// 0x1a0923bfa041
	bool IsSupportCharacterInGameLeveling();// 0x1a0823bfa041
	float GetWorldStartTimeSeconds();// 0x1a0723bfa041
	int GetWatchingPlayerCount(bool IgnoreOffline);// 0x1a0623bfa041
	void GetTeams(out SolarTeamInfo*[] OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled);// 0x1a0523bfa041
	SolarPlayerState* GetTeamPlayerState(const byte InTeamId, const byte InPosInTeam);// 0x1a0423bfa041
	int GetTeamNumCount();// 0x1a0323bfa041
	byte GetTeammateNum(const byte InTeamId);// 0x1a0223bfa041
	SolarTeamInfo* GetTeamByName(FString InTeamName);// 0x1a0123bfa041
	SolarTeamInfo* GetTeam(byte InTeamId);// 0x1a0023bfa041
	enum GetTacticalSkillStateOperationOnInit();// 0x19ff23bfa041
	enum GetSuperSkillStateOperationOnInit();// 0x19fd23bfa041
	SolarPlayerState* GetSpecTargetOrLocalPlayerState();// 0x19fc23bfa041
	SolarSafeArea* GetSolarSafeArea();// 0x19fb23bfa041
	int GetSettlementStageConfigID();// 0x19fa23bfa041
	int GetRemainingTeamCount();// 0x19f923bfa041
	int GetRemainingPlayersCount();// 0x19f823bfa041
	void GetPlayerTeams(out SolarTeamInfo*[] OutTeams, bool FilterAlreadySettled);// 0x19f723bfa041
	SolarPlayerState* GetPlayerStateByPlayerId(FString InPlayerID);// 0x19f623bfa041
	SolarPlayerState* GetPlayerStateByNickName(FString InNickName);// 0x19f523bfa041
	int GetPlayersCount();// 0x19f423bfa041
	SolarCharacter* GetPlayerByPlayerID(FString InPlayerID);// 0x19f323bfa041
	void GetOnlyPlayerTeams(out SolarTeamInfo*[] OutTeams, bool FilterAlreadySettled);// 0x19f223bfa041
	void GetOnlyBotTeams(out SolarTeamInfo*[] OutTeams, bool FilterAlreadySettled);// 0x19f123bfa041
	SolarPlayerState* GetOfflinePlayerState(FString OfflinePlayerId);// 0x19f023bfa041
	SolarPlayerState* GetLocalSolarPlayerState();// 0x19ef23bfa041
	bool GetCanShowBattlePrompt();// 0x19ee23bfa041
	float GetBattleStartTimeSeconds();// 0x19ed23bfa041
	void GetAllCharactersExceptTeammate(out SolarCharacter*[] CharacterArray);// 0x19ec23bfa041
	int GetAliveSolarPlayersCount(bool IgnoreOffline);// 0x19eb23bfa041
	int GetAlivePlayersCount();// 0x19ea23bfa041
	byte GetAlivePlayerNumInTeamExceptDying(const byte InTeamId, bool bExceptCheater);// 0x19e923bfa041
	byte CalculateTeamNum();// 0x19e823bfa041
	void CacheSafeArea(SolarSafeArea* SafeArea);// 0x19e723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x274, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x27c, Size: 0x8]
	int ElapsedTime;//[Offset: 0x284, Size: 0x4]
	void OnRep_MatchState();// 0x19e623bfa041
	void OnRep_ElapsedTime();// 0x19e523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PrePooledBundle
	FName ClassPath;//[Offset: 0x0, Size: 0x8]
	int Number;//[Offset: 0x8, Size: 0x4]
	bool bNeedOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bNeedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTeamInfo.Info.Actor.Object
	byte TeamID;//[Offset: 0x240, Size: 0x1]
	byte TeamRank;//[Offset: 0x241, Size: 0x1]
	byte KillCount;//[Offset: 0x242, Size: 0x1]
	byte MemberLimit;//[Offset: 0x243, Size: 0x1]
	FText TeamName;//[Offset: 0x248, Size: 0x18]
	byte MatchCount;//[Offset: 0x260, Size: 0x1]
	bool bHasSettled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x261, Size: 0x1]
	delegate OnJoinTeam;//[Offset: 0x262, Size: 0x1]
	delegate OnLeaveTeam;//[Offset: 0x263, Size: 0x1]
	SolarPlayerState*[] BotMembers;//[Offset: 0x268, Size: 0x10]
	SolarPlayerState*[] PlayerMembers;//[Offset: 0x278, Size: 0x10]
	SolarPlayerState*[] TeamMembers;//[Offset: 0x288, Size: 0x10]
	SolarTeamInfoComponent* TeamInfoDetails;//[Offset: 0x2e8, Size: 0x8]
	void Settle(byte Rank);// 0x58ae23bfa041
	void RemoveFromTeam(SolarPlayerState* PS);// 0x58ad23bfa041
	void ReceivedTeamID();// 0x58ac23bfa041
	void ReceivedKillCount();// 0x58ab23bfa041
	void ReceivedHasSettled();// 0x58aa23bfa041
	void RearrangeMembersPos();// 0x58a923bfa041
	void OnPlayerStateEndPlay(Actor* Actor, byte EndPlayReason);// 0x58a823bfa041
	bool IsAPlayerTeam();// 0x58a723bfa041
	bool IsAOnlyPlayerTeam();// 0x58a623bfa041
	bool IsAOnlyBotTeam();// 0x58a523bfa041
	bool IsA(enum TeamType);// 0x58a423bfa041
	void InitFromGameModeConfig();// 0x58a323bfa041
	bool HasBeenEliminated();// 0x58a223bfa041
	SolarPlayerState* GetTeammatePlayerByPosInTeam(int InPosInTeam);// 0x58a123bfa041
	int GetSize();// 0x58a023bfa041
	void GetSCMPlayerStateTeamMembers(out SCMPlayerState*[] OutTeamMembers);// 0x589f23bfa041
	int GetAliveTeammateNum();// 0x589e23bfa041
	void AddToTeam(SolarPlayerState* PS);// 0x589d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTeamInfoComponent.ActorComponent.Object
	int KillDownCount;//[Offset: 0xb0, Size: 0x4]
	int AssistCount;//[Offset: 0xb4, Size: 0x4]
	int DeathCount;//[Offset: 0xb8, Size: 0x4]
	int SaveCount;//[Offset: 0xbc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	enum BattleState;//[Offset: 0xab0, Size: 0x1]
	enum PlayerOutType;//[Offset: 0xab1, Size: 0x1]
	enum PlayerType;//[Offset: 0xab2, Size: 0x1]
	enum PlayerGameRole;//[Offset: 0xab3, Size: 0x1]
	delegate OnSideChange;//[Offset: 0xac8, Size: 0x10]
	SCMReplicateHostData[] ReplicateData;//[Offset: 0xad8, Size: 0x10]
	float ReviveStartTime;//[Offset: 0xaf8, Size: 0x4]
	SolarPlayerState* RevivingTeammatePS;//[Offset: 0xb00, Size: 0x8]
	SolarTaskComponent* TaskSystem;//[Offset: 0xb18, Size: 0x8]
	void UpdateTaskInfo(out const TaskUpdateInfo InTaskInfo);// 0x47e923bfa041
	void UpDateDataManager(const SCMReplicateHostData[] InReplicateData, bool bInit);// 0x47e823bfa041
	void ServerBeginSpectate(SCMPlayerState* TargetPlayer);// 0x47e723bfa041
	void RequestStartGame();// 0x47e623bfa041
	void RequestSetWeaponTypeAvailableLuaCall(enum WeaponUIType, bool bIsAvailable);// 0x47e523bfa041
	void RequestSetWeaponTypeAvailable(enum WeaponUIType, bool bIsAvailable);// 0x47e423bfa041
	void RequestSetWeaponAvailableLuaCall(int weaponid, bool bIsAvailable);// 0x47e323bfa041
	void RequestSetWeaponAvailable(int weaponid, bool bIsAvailable);// 0x47e223bfa041
	void RequestSetVehicleTypeAvailableLuaCall(int VehicleTypeID, bool bIsAvailable);// 0x47e123bfa041
	void RequestSetVehicleTypeAvailable(int VehicleTypeID, bool bIsAvailable);// 0x47e023bfa041
	void RequestSetVehicleClassAvailableLuaCall(enum VehicleClass, bool bIsAvailable);// 0x47df23bfa041
	void RequestSetVehicleClassAvailable(enum VehicleClass, bool bIsAvailable);// 0x47de23bfa041
	void RequestSetUserSettingLuaCall(FString Name, FString Value);// 0x47dd23bfa041
	void RequestSetUserSetting(FString Name, FString Value);// 0x47dc23bfa041
	void RequestSetRoomPoolPrizeTypeLuaCall(int TypeID);// 0x47db23bfa041
	void RequestSetRoomPoolPrizeType(int TypeID);// 0x47da23bfa041
	void RequestSetRoomPasswdLuaCall(FString Passwd);// 0x47d923bfa041
	void RequestSetRoomPasswd(FString Passwd);// 0x47d823bfa041
	void RequestSetRoomNameLuaCall(FString Name);// 0x47d723bfa041
	void RequestSetRoomName(FString Name);// 0x47d623bfa041
	void RequestSetRoomLevelLimitLuaCall(int Level);// 0x47d523bfa041
	void RequestSetRoomLevelLimit(int Level);// 0x47d423bfa041
	void RequestSetInviteEnableLuaCall(bool bEnable);// 0x47d323bfa041
	void RequestSetInviteEnable(bool bEnable);// 0x47d223bfa041
	void RequestSetExchangeEnableLuaCall(bool bEnable);// 0x47d123bfa041
	void RequestSetExchangeEnable(bool bEnable);// 0x47d023bfa041
	void RequestKickPlayerOut(SCMPlayerState* Player);// 0x47cf23bfa041
	void RequestExchangeSidesAndPos(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x47ce23bfa041
	void RequestChangeSide(SCMPlayerState* Player, FString NewSide, const int NewPosInTeam);// 0x47cd23bfa041
	void RequesJoinOB(SCMPlayerState* Player);// 0x47cc23bfa041
	void OnUpdateLifeTime();// 0x47cb23bfa041
	void OnRep_RevivingTeammatePS(SolarPlayerState* LastRevivingTeammatePS);// 0x47ca23bfa041
	void OnRep_BattleState();// 0x47c923bfa041
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x47c823bfa041
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x47c723bfa041
	void NotifyUpdateCGMData(FString InDataName);// 0x47c623bfa041
	void NotifyClientUpdateDataManager(bool bInit);// 0x47c523bfa041
	bool NeedConsiderRepData();// 0x47c423bfa041
	bool IsPreJoinPlayer();// 0x47c323bfa041
	void InitTaskInfo(out const BattlePassInfo InTaskInfo);// 0x47c223bfa041
	SCMReplicateHostData[] GetReplicateDataArray();// 0x47c123bfa041
	SCMPlayerState*[] GetMySidePlayerList();// 0x47c023bfa041
	SCMPlayerState*[] GetMySideJobPlayerList();// 0x47bf23bfa041
	void CanPlayerBattle();// 0x47be23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SCMReplicateHostData
	enum HostType;//[Offset: 0x0, Size: 0x1]
	FString HostID;//[Offset: 0x8, Size: 0x10]
	SCMRepData[] RepDataArray;//[Offset: 0x18, Size: 0x10]
	SCMRepDataArray[] RepArrDataArray;//[Offset: 0x28, Size: 0x10]
	SCMRepDataMap[] RepMapDataArray;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMRepData
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum DataChangeType;//[Offset: 0x11, Size: 0x1]
	int VInt;//[Offset: 0x14, Size: 0x4]
	float VFloat;//[Offset: 0x18, Size: 0x4]
	Vector_NetQuantize100 VVector;//[Offset: 0x1c, Size: 0xc]
	FString VString;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMRepDataArray
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	uint32[] ChangeIndexArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMRepDataMap
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	FString[] KeyArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TaskUpdateInfo
	bool delAllTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int64[] delIDs;//[Offset: 0x8, Size: 0x10]
	BattlePassInfo Task;//[Offset: 0x18, Size: 0x28]
	FString PlayerId;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BattlePassInfo
	TaskBriefData[] tasks;//[Offset: 0x0, Size: 0x10]
	int64 BattlePassID;//[Offset: 0x10, Size: 0x8]
	int64 currWeek;//[Offset: 0x18, Size: 0x8]
	int64 maxWeek;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TaskBriefData
	int64 TaskID;//[Offset: 0x0, Size: 0x8]
	int64 BaseValue;//[Offset: 0x8, Size: 0x8]
	int64 CurValue;//[Offset: 0x10, Size: 0x8]
	int64 status;//[Offset: 0x20, Size: 0x8]
	enum page;//[Offset: 0x28, Size: 0x1]
	int64 week;//[Offset: 0x30, Size: 0x8]
	bool IsMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPointDamageEvent.PointDamageEvent.DamageEvent
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bIgnoreShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	float ActualShieldDamage;//[Offset: 0xac, Size: 0x4]
	bool bBreakArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bIgnoreArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	float ActualArmorDamage;//[Offset: 0xb4, Size: 0x4]
	byte SolarAttributeType;//[Offset: 0xb8, Size: 0x1]
	bool bPreFakeInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	byte HealthChangeType;//[Offset: 0xba, Size: 0x1]
	SolarAbility* DamageAbility;//[Offset: 0xc0, Size: 0x8]
	SolarAbilityEffect* DamageAbilityEffect;//[Offset: 0xc8, Size: 0x8]
	enum ResultType;//[Offset: 0xd0, Size: 0x1]
	bool bJustForShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bCanDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	int UseWeaponID;//[Offset: 0xd4, Size: 0x4]
	enum DamageType;//[Offset: 0xd8, Size: 0x1]
	Actor* DamageCauser;//[Offset: 0xdc, Size: 0x8]
	FString HitBoneName;//[Offset: 0xf0, Size: 0x10]
	bool bHitVehicleWeakPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bHitHumanoidTargetHead;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 0xc]
	HitResult HitInfo;//[Offset: 0x20, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTaskComponent.ActorComponent.Object
	delegate TaskUpdateDelegate;//[Offset: 0xb8, Size: 0x10]
	delegate TaskCompoleteDelegate;//[Offset: 0xc8, Size: 0x10]
	delegate MarkingTaskChangedDelegate;//[Offset: 0xd8, Size: 0x10]
	delegate ClientTaskUpdatedDelegate;//[Offset: 0xe8, Size: 0x10]
	delegate ClientBattlePassTimeInfoDelegate;//[Offset: 0xf8, Size: 0x10]
	DataTable* TaskTypeHandleConfig;//[Offset: 0x108, Size: 0x8]
	class TaskFormula* TaskFormula;//[Offset: 0x110, Size: 0x8]
	TaskFormula* FormulaInst;//[Offset: 0x118, Size: 0x8]
	int64[] MarkingTask;//[Offset: 0x120, Size: 0x10]
	BattlePassTimeInfo BattlePassTimeInfo;//[Offset: 0x130, Size: 0x18]
	TaskBriefData[] tasks;//[Offset: 0x148, Size: 0x10]
	void ServerEnableMarkTask(int64 InTaskID, bool bMarking);// 0x584523bfa041
	void OnRep_Tasks();// 0x584423bfa041
	void OnRep_MarkingTask();// 0x584323bfa041
	void OnRep_BattlePassTimeInfo();// 0x584223bfa041
	bool IsMaxLevel();// 0x584123bfa041
	bool IsEnable();// 0x584023bfa041
	BattlePassTimeInfo GetBattlePassTimeInfo();// 0x583f23bfa041
	TaskBriefData[] GetAllTaskBriefData();// 0x583e23bfa041
	int64[] GetAllMarkTask();// 0x583d23bfa041
	void EnableMarkTask(int64 InTaskID, bool bMarking);// 0x583c23bfa041
	void ClientNotifyTaskComplete(const TaskBriefData InTaskInfo);// 0x583b23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BattlePassTimeInfo
	int64 BattlePassID;//[Offset: 0x0, Size: 0x8]
	int64 currWeek;//[Offset: 0x8, Size: 0x8]
	int64 maxWeek;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TaskFormula.Info.Actor.Object
	SolarTaskComponent* TaskSystem;//[Offset: 0x228, Size: 0x8]
	void SetTaskProgress(int64 InTaskID, int64 ProgressValue, bool bOverrideLastMatch);// 0x583a23bfa041
	void IncreaseTaskProgress(int64 InTaskID, int64 ProgressValue);// 0x583923bfa041
	int GetTaskConditionValue(int64 InTaskID, int64 Index);// 0x583823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarSafeArea.SCMMapElementBase.Actor.Object
	int CurrentIndex;//[Offset: 0x280, Size: 0x4]
	float TargetTime;//[Offset: 0x284, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x288, Size: 0x4]
	float DamageValue;//[Offset: 0x28c, Size: 0x4]
	Vector BeginLocation;//[Offset: 0x290, Size: 0xc]
	float BeginScale;//[Offset: 0x29c, Size: 0x4]
	enum AreaStatus;//[Offset: 0x2a0, Size: 0x1]
	enum LocalPlayerCameraInSafeAreaState;//[Offset: 0x2b1, Size: 0x1]
	enum LocalViewFocusedCharacterInSafeAreaState;//[Offset: 0x2b2, Size: 0x1]
	bool bCanCausingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	float FirstDamageDelay;//[Offset: 0x30c, Size: 0x4]
	float DamageInterval;//[Offset: 0x310, Size: 0x4]
	FString LeaveSafeAreaSoundName;//[Offset: 0x318, Size: 0x10]
	FString EnterSafeAreaSoundName;//[Offset: 0x328, Size: 0x10]
	FString InPoisonPerSecSoundName;//[Offset: 0x338, Size: 0x10]
	float InPoisonSoundSecond;//[Offset: 0x348, Size: 0x4]
	int WarningNotificationIndex;//[Offset: 0x34c, Size: 0x4]
	<int,int> NoticeDataMap;//[Offset: 0x350, Size: 0x50]
	<int,FString> SoundEventNameDataMap;//[Offset: 0x3a0, Size: 0x50]
	<int,int> QuickVoiceDataMap;//[Offset: 0x3f0, Size: 0x50]
	int ShrinkEndNotificationIndex;//[Offset: 0x440, Size: 0x4]
	int ShrinkEndNoticeId;//[Offset: 0x444, Size: 0x4]
	FString ShrinkEndSoundEventName;//[Offset: 0x448, Size: 0x10]
	SolarPlayerController* LocalController;//[Offset: 0x458, Size: 0x8]
	void StartShrink();// 0x4c2f23bfa041
	void ShowPoisonPerSecond();// 0x4c2e23bfa041
	void ShowPoisonEffect(bool bShow);// 0x4c2d23bfa041
	void ShowEffectInside(bool bInside);// 0x4c2c23bfa041
	void Resume();// 0x4c2b23bfa041
	void ReceiveShrinkEnd();// 0x4c2a23bfa041
	void ReceiveActorLeaveSafeAreaCircle(Actor* Actor);// 0x4c2923bfa041
	void ReceiveActorLeavePoisonCircle(Actor* Actor);// 0x4c2823bfa041
	void ReceiveActorEnterSafeAreaCircle(Actor* Actor);// 0x4c2723bfa041
	void ReceiveActorEnterPoisonCircle(Actor* Actor);// 0x4c2623bfa041
	void Pause();// 0x4c2523bfa041
	void OnRep_CurrentIndexChange();// 0x4c2423bfa041
	void LocalPlayerCameraLeavePoisonCircle();// 0x4c2323bfa041
	void LocalPlayerCameraEnterPoisonCircle();// 0x4c2223bfa041
	bool IsPause();// 0x4c2123bfa041
	bool IsLocationInSafeArea(out const Vector Pos);// 0x4c2023bfa041
	bool IsLocationInPoisonCircle(out const Vector InLocation);// 0x4c1f23bfa041
	bool IsInSafeArea(Actor* Actor);// 0x4c1e23bfa041
	void GMStartShrinkArea();// 0x4c1d23bfa041
	enum GetSafeAreaStatus();// 0x4c1c23bfa041
	Vector GetNextAreaLocation();// 0x4c1b23bfa041
	float GetCurrentDamage();// 0x4c1a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SCMMapElementBase.Actor.Object
	bool bPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	FString Side;//[Offset: 0x230, Size: 0x10]
	FString Job;//[Offset: 0x240, Size: 0x10]
	FString ElementID;//[Offset: 0x250, Size: 0x10]
	enum Type;//[Offset: 0x260, Size: 0x1]
	enum State;//[Offset: 0x261, Size: 0x1]
	enum Visibility;//[Offset: 0x262, Size: 0x1]
	class SCMMapElementRPCComponent* MapElementRPCComponentClass;//[Offset: 0x268, Size: 0x8]
	FName ElementName;//[Offset: 0x270, Size: 0x8]
	byte bUseSceneActorOptimization;//[Offset: 0x278, Size: 0x1]
	enum SetElementVisibility(const enum NewType);// 0x47b223bfa041
	enum SetElementState(const enum NewState);// 0x47b123bfa041
	void OnRep_ElementVisibility();// 0x47b023bfa041
	void OnRep_ElementState();// 0x47af23bfa041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x47ae23bfa041
	void OnElementStateChanged(const enum CurrentState);// 0x47ad23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SCMMapElementRPCComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: GameStartConditionList
	GameplayTagContainer ServerStartConditionList;//[Offset: 0x8, Size: 0x20]
	GameplayTagContainer ClientStartConditionList;//[Offset: 0x28, Size: 0x20]
	GameStateBase* Owner;//[Offset: 0x48, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameplayConfigComponent.ActorComponent.Object
	bool EnableTestGameplayConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	class GameplayConfigBase* CGMConfig;//[Offset: 0xb8, Size: 0x8]
	class GameplayConfigBase* TestCGMConfig;//[Offset: 0xc0, Size: 0x8]
	GameplayConfigBase* InstGameplayConfig;//[Offset: 0xc8, Size: 0x8]
	GameplayConfigBase* InstTestGameplayConfig;//[Offset: 0xd0, Size: 0x8]
	GameplayConfigBase* GetConfigs();// 0x424023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayConfigBase.DataAsset.Object
	GameModeGlobalSetting* GameModeSettingTemplate;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameModeGlobalSetting.Object
	delegate OnGlobalSettingChanged;//[Offset: 0x28, Size: 0x10]
	bool bCanVJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bCanHJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bOverrideVJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float OverridenVJetCD;//[Offset: 0x3c, Size: 0x4]
	bool bOverrideHJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float OverridenHJetCD;//[Offset: 0x44, Size: 0x4]
	bool bEnableJetCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	enum JetAltitudeLimitationMode;//[Offset: 0x49, Size: 0x1]
	bool bEnableEnergyCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bEnableTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bEnableMinHPLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	float MinHPToLock;//[Offset: 0x50, Size: 0x4]
	bool bEnableSkydiveFollowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bEnableBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bShowVehicleOnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	int KillStreakEndNoticeNumber;//[Offset: 0x58, Size: 0x4]
	int KillLeaderMinKillNumber;//[Offset: 0x5c, Size: 0x4]
	bool bShowRevengeNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bShowKillStreakEndNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	bool bShowTotalKillNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	bool bShowKillDownNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]
	bool bShowKillLeaderNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bShowKillLeaderShutDownNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool bShowClearTeamNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	enum WeaponInfiniteAmmoMode;//[Offset: 0x67, Size: 0x1]
	bool bEnableWeaponPartEffectTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float[] WeaponLevelDamageFactorArray;//[Offset: 0x70, Size: 0x10]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool bCanRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	bool bCanLoginBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 0x1]
	bool bEnableBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bEnableBattlePrompt_BeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bEnableOpponentPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	bool bKillPlayerWhenOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1]
	int ConfigGameModeId;//[Offset: 0x88, Size: 0x4]
	bool bEnableEnemyNameMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	float EnableEnemyNameMarkDistance;//[Offset: 0x90, Size: 0x4]
	float EnemyNameMarkDuration;//[Offset: 0x94, Size: 0x4]
	int SummonedAirDropMaxSum;//[Offset: 0x98, Size: 0x4]
	float SummonedAirDropLifeTime;//[Offset: 0x9c, Size: 0x4]
	float SummonedAirDropDestroyEffectTime;//[Offset: 0xa0, Size: 0x4]
	void SetWeaponInfiniteAmmoMode(enum NewValue);// 0x43fd23bfa041
	void SetTeamDamageEnabled(bool bNewValue);// 0x43fc23bfa041
	void SetSkydiveFollowMovementEnabled(bool bNewValue);// 0x43fb23bfa041
	void SetShowVehicleOnMap(bool bNewValue);// 0x43fa23bfa041
	void SetShowTotalKillNotice(bool InShowTotalKillNotice);// 0x43f923bfa041
	void SetShowShowClearTeamNotice(bool InShowClearTeamNotice);// 0x43f823bfa041
	void SetShowRevengeNotice(bool InShowRevengeNotice);// 0x43f723bfa041
	void SetShowKillStreakEndNotice(bool InShowKillStreakEndNotice);// 0x43f623bfa041
	void SetShowKillLeaderShutDownNotice(bool InShowKillLeaderShutDownNotice);// 0x43f523bfa041
	void SetShowKillLeaderNotice(bool InShowKillLeaderNotice);// 0x43f423bfa041
	void SetShowKillDownNotice(bool InShowKillDownNotice);// 0x43f323bfa041
	void SetMinHPToLock(float NewValue);// 0x43f223bfa041
	void SetMinHPLockEnabled(bool bNewValue);// 0x43f123bfa041
	void SetKillStreakEndNoticeNumber(int InKillStreakEndNoticeNumber);// 0x43f023bfa041
	void SetKillPlayerWhenOut(bool bNewValue);// 0x43ef23bfa041
	void SetKillLeaderMinKillNumber(int InKillLeaderMinKillNumber);// 0x43ee23bfa041
	void SetJetCostEnabled(bool bNewValue);// 0x43ed23bfa041
	void SetJetAltitudeLimitationMode(enum NewValue);// 0x43ec23bfa041
	void SetGameCanRebirth(bool bNewValue);// 0x43eb23bfa041
	void SetEnergyCostEnabled(bool bNewValue);// 0x43ea23bfa041
	void SetDamageEnabled(bool bNewValue);// 0x43e923bfa041
	void SetCanVJetInWater(bool bNewValue);// 0x43e823bfa041
	void SetCanLoginBattle(bool bNewValue);// 0x43e723bfa041
	void SetCanHJetInWater(bool bNewValue);// 0x43e623bfa041
	void SetBigMapEnabled(bool bNewValue);// 0x43e523bfa041
	void ReceiveSettingChanged();// 0x43e423bfa041
	bool IsVJetCDOverriden();// 0x43e323bfa041
	bool IsTeamDamageEnabled();// 0x43e223bfa041
	bool IsSkydiveFollowMovementEnabled();// 0x43e123bfa041
	bool IsShowVehicleOnMap();// 0x43e023bfa041
	bool IsShowTotalKillNotice();// 0x43df23bfa041
	bool IsShowRevengeNotice();// 0x43de23bfa041
	bool IsShowKillStreakEndNotice();// 0x43dd23bfa041
	bool IsShowKillLeaderShutDownNotice();// 0x43dc23bfa041
	bool IsShowKillLeaderNotice();// 0x43db23bfa041
	bool IsShowKillDownNotice();// 0x43da23bfa041
	bool IsShowClearTeamNotice();// 0x43d923bfa041
	bool IsOpponentPerspectiveEnabled();// 0x43d823bfa041
	bool IsMinHPLockEnabled();// 0x43d723bfa041
	bool IsKillPlayerWhenOut();// 0x43d623bfa041
	bool IsJetCostEnabledEnabled();// 0x43d523bfa041
	bool IsHJetCDOverriden();// 0x43d423bfa041
	bool IsGameCanRebirth();// 0x43d323bfa041
	bool IsGameCanLoginBattle();// 0x43d223bfa041
	bool IsEnergyCostEnabled();// 0x43d123bfa041
	bool IsEnableWeaponPartEffectTip();// 0x43d023bfa041
	bool IsDestroyWeaponOnDiscard();// 0x43cf23bfa041
	bool IsDestroyItemOnDiscard();// 0x43ce23bfa041
	bool IsDamageEnabled();// 0x43cd23bfa041
	bool IsBigMapEnabled();// 0x43cc23bfa041
	enum GetWeaponInfiniteAmmoMode();// 0x43cb23bfa041
	float GetOverridenVJetCD();// 0x43ca23bfa041
	float GetOverridenHJetCD();// 0x43c923bfa041
	float GetMinHPToLock();// 0x43c823bfa041
	int GetKillStreakEndNoticeNumber();// 0x43c723bfa041
	int GetKillLeaderMinKillNumber();// 0x43c623bfa041
	enum GetJetAltitudeLimitationMode();// 0x43c523bfa041
	float GetDamageFactorByWeaponLevel(int InWeaponLevel);// 0x43c423bfa041
	int GetConfigGameModeId();// 0x43c323bfa041
	bool CanVJetInWater();// 0x43c223bfa041
	bool CanHJetInWater();// 0x43c123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlayerActivityHeatComponent.ActorComponent.Object
	float WeaponScore;//[Offset: 0xc0, Size: 0x4]
	float VehicleScore;//[Offset: 0xc4, Size: 0x4]
	float AbilityScore;//[Offset: 0xc8, Size: 0x4]
	CurveFloat* DistScoreCurve;//[Offset: 0xd0, Size: 0x8]
	float DefenderOrReaperScore;//[Offset: 0xd8, Size: 0x4]
	float FirstKillTimeBefore;//[Offset: 0xdc, Size: 0x4]
	float LastKillTimeLater;//[Offset: 0xe0, Size: 0x4]
	void ReceiveKillInfoNotify(SolarPlayerState* InKiller, SolarPlayerState* InVictim, out const SolarPointDamageEvent DamageEvent);// 0x510123bfa041
	void ReceiveActivityHeatFragmentsFromReplay(FString PlayerId, out const ReplayActivityHeatFragment NewFragment);// 0x510023bfa041
	void OnPlayerWin(FString SolarPlayerID);// 0x50ff23bfa041
	void OnPlayerResurrectionParachute(FString SolarPlayerID);// 0x50fe23bfa041
	void OnPlayerDeath(FString SolarPlayerID);// 0x50fd23bfa041
	void OnPlayerCruiseEnded(FString SolarPlayerID);// 0x50fc23bfa041
	ReplayActivityHeatFragment[] GetPlayerActivityHeatFragmentsById(FString SolarPlayerID);// 0x50fb23bfa041
	void FillInPlayerActivityHeatKillDetail(SolarPlayerState* InKiller, SolarPlayerState* InVictim, out const SolarPointDamageEvent DamageEvent, out PlayerActivityHeatKillDetail OutKillDetail);// 0x50fa23bfa041
	int AddPlayerActivityHeatRawData(FString SolarPlayerID, enum ActivityHeatType);// 0x50f923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ReplayActivityHeatFragment
	int FragmentId;//[Offset: 0x0, Size: 0x4]
	enum ActivityHeatType;//[Offset: 0x4, Size: 0x1]
	float TotalScore;//[Offset: 0x8, Size: 0x4]
	float BeginTime;//[Offset: 0xc, Size: 0x4]
	float EndTime;//[Offset: 0x10, Size: 0x4]
	ReplayActivityKillDetail[] ActivityKillDetails;//[Offset: 0x18, Size: 0x10]
	int KillNum;//[Offset: 0x28, Size: 0x4]
	float ActivityHotTime;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ReplayActivityKillDetail
	float KillTime;//[Offset: 0x0, Size: 0x4]
	enum KillUseType;//[Offset: 0x4, Size: 0x1]
	int KillToolID;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerActivityHeatKillDetail
	float KillTime;//[Offset: 0x0, Size: 0x4]
	Vector VictimPosition;//[Offset: 0x4, Size: 0xc]
	FString KillerID;//[Offset: 0x10, Size: 0x10]
	FString VictimID;//[Offset: 0x20, Size: 0x10]
	bool IsAbilityKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool IsScopedKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool IsVehicleKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	bool IsAbilityActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int weaponid;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarReplayPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	float WaitFirstTeamNumberInputTime;//[Offset: 0xe88, Size: 0x4]
	float WaitTeamNumberInputTime;//[Offset: 0xe8c, Size: 0x4]
	SolarReplayCameraControlComp* SolarReplayCameraControlComp;//[Offset: 0xe90, Size: 0x8]
	SolarReplayHighlightComponent* SolarReplayHighlightComponent;//[Offset: 0xe98, Size: 0x8]
	delegate OnEmitBulletDelegate;//[Offset: 0xea0, Size: 0x10]
	<FString,float> HorizontalDistanceBetweenPlayerAndOBCamera;//[Offset: 0xeb0, Size: 0x50]
	SolarReplayManager* ReplayManager;//[Offset: 0xf00, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xf08, Size: 0x8]
	<byte,MaterialInstanceDynamic*> TeamNumToPerspectiveMaterialMap;//[Offset: 0xf30, Size: 0x50]
	void UpdateDistanceBetweenOBCamAndPlayer();// 0x265d23bfa041
	void StopSpectatePlayer();// 0x265c23bfa041
	void StopPlayReplay();// 0x265b23bfa041
	void SpectateVictim();// 0x265a23bfa041
	void SpectatePlayerByPlayerID(FString SolarPlayerID);// 0x265923bfa041
	void SpectateAttacker();// 0x265823bfa041
	void SolarGM_ToggleProgressControlButton();// 0x265723bfa041
	void SolarGM_SetWatchingLiveTarget(FString InPlayerID);// 0x265623bfa041
	void SolarGM_ReplayDebugLog(bool bOpenDebugLog);// 0x265523bfa041
	bool ShowDamageText(out SolarDamageText InDamageText);// 0x265423bfa041
	void SetUISettingHeadInfoStyle(out const enum InType);// 0x265323bfa041
	void SetDamageTextVisible(bool bIsVisible);// 0x265223bfa041
	void SetBattleOBHUDType(out const enum Type);// 0x265123bfa041
	void PauseReplay();// 0x265023bfa041
	void OnReplayPlayingLevelLoaded();// 0x264f23bfa041
	void OnReplayPlayingFirstScrubFinished();// 0x264e23bfa041
	void OnPlayingFinished();// 0x264d23bfa041
	void OnEmitBulletDelegate__DelegateSignature(Vector StartLoc, Vector AimLoc, FString SolarPlayerID);// 0x264c23bfa041
	void OnBattleOBHUDTypeChanged(out const enum CurrentType);// 0x264b23bfa041
	bool IsSpectatingPlayer();// 0x264a23bfa041
	SolarPlayerState* GetWatchingLiveTarget();// 0x264923bfa041
	<FString,float> GetHorizontalDistanceBetweenPlayerAndOBCamera();// 0x264823bfa041
	FString GetCurrentSpectatePlayerID();// 0x264723bfa041
	enum GetBattleOBHUDType();// 0x264623bfa041
	void ExitDirectorMode();// 0x264523bfa041
	void EnterDirectorMode();// 0x264423bfa041
	void ContinueReplay();// 0x264323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarDamageText
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bBrokenShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int Damage;//[Offset: 0x4, Size: 0x4]
	Actor* Target;//[Offset: 0x8, Size: 0x8]
	Actor* Source;//[Offset: 0x10, Size: 0x8]
	Vector HitLocation;//[Offset: 0x18, Size: 0xc]
	uint32 TargetUniqueID;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarReplayCameraControlComp.ActorComponent.Object
	delegate OnReplayCameraModeChanged;//[Offset: 0xb0, Size: 0x10]
	SolarSpectateInfo* ReplayPCSpectateInfo;//[Offset: 0xc0, Size: 0x8]
	float DefaultSpeed;//[Offset: 0xc8, Size: 0x4]
	float MoveSpeedChangeStep;//[Offset: 0xcc, Size: 0x4]
	float MoveSpeedMin;//[Offset: 0xd0, Size: 0x4]
	float MoveSpeedMax;//[Offset: 0xd4, Size: 0x4]
	float SpeedUpScale;//[Offset: 0xd8, Size: 0x4]
	float DefaultTurnRate;//[Offset: 0xdc, Size: 0x4]
	float TurnRateChangeStep;//[Offset: 0xe0, Size: 0x4]
	float TurnSpeedMin;//[Offset: 0xe4, Size: 0x4]
	float TurnSpeedMax;//[Offset: 0xe8, Size: 0x4]
	float DistanceChangeStep;//[Offset: 0xec, Size: 0x4]
	SolarReplayCameraBase* ReplayCamera;//[Offset: 0xf0, Size: 0x8]
	SolarPlayerState* LastTarget;//[Offset: 0x100, Size: 0x8]
	<enum,SolarReplayCameraBase*> CacheCameras;//[Offset: 0x118, Size: 0x50]
	void OnStreamingReadied();// 0x1db723bfa041
	void OnSpectateInfoRep(SolarSpectateInfo* InSpecInfo);// 0x1db623bfa041
	void OnReplayCameraModeChanged__DelegateSignature(enum OldMode, enum CurMode);// 0x1db523bfa041
	void OnPlayingScrubStart();// 0x1db423bfa041
	void OnPlayingScrubCharactersCreated();// 0x1db323bfa041
	void OnPlayingFirstScrubFinished();// 0x1db223bfa041
	enum GetReplayCameraMode();// 0x1db023bfa041
	void ChangeLockSpectatorModeDistance(float val);// 0x1daf23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarReplayCameraBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarReplayHighlightComponent.ActorComponent.Object
	float RecordAfterSettled;//[Offset: 0xe0, Size: 0x4]
	float SlowMoStartTime;//[Offset: 0xe4, Size: 0x4]
	float SlowMoEndTime;//[Offset: 0xe8, Size: 0x4]
	float SlowMoMultiplier;//[Offset: 0xec, Size: 0x4]
	float KillEffectTime;//[Offset: 0xf0, Size: 0x4]
	OBHighlightOverviewWidget* HighlightOverviewWidget;//[Offset: 0xf8, Size: 0x8]
	void ReceiveHighlightOverviewData(out const PlayerHighlightOverview OverviewData);// 0x526823bfa041
	void ReceiveHighlightData(FString PlayerId, out const ReplayActivityHeatFragment NewFragment);// 0x526723bfa041
	void OnReplayWidgetTranslatePlayEndOver();// 0x526623bfa041
	void OnReplayWidgetTranslatePlayBeginOver();// 0x526523bfa041
	void OnReplayWidgetOverviewPlayEnd();// 0x526423bfa041
	void OnReplayWidgetHighlightPlayEnd();// 0x526323bfa041
	void OnReplayScrubStarted();// 0x526223bfa041
	void OnReplayPaused();// 0x526123bfa041
	void OnReplayContinued();// 0x526023bfa041
	UISubsystem* GetUISubSystem();// 0x525f23bfa041
	SolarReplayManager* GetReplayManager();// 0x525e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerHighlightOverview
	int KillNum;//[Offset: 0x0, Size: 0x4]
	int AssistNum;//[Offset: 0x4, Size: 0x4]
	int Damage;//[Offset: 0x8, Size: 0x4]
	FString PlayerId;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: UISubsystem.GameInstanceSubsystem.Subsystem.Object
	UIGlobalConfig* GlobalConfig;//[Offset: 0x30, Size: 0x8]
	UIPanelConfig* UIPanelConfig;//[Offset: 0x38, Size: 0x8]
	<FString,SolarUserWidget*> CacheWidgets;//[Offset: 0x40, Size: 0x50]
	void PostInitializeAfterPatch();// 0x5be323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameInstanceSubsystem.Subsystem.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Subsystem.Object
<----------Generated by SSpawner v1.0.2---------->


Class: UIGlobalConfig.DataAsset.Object
	<byte,TeamMemberColor> TeamMemberColors;//[Offset: 0x30, Size: 0x50]
	<byte,ItemQualityData> ItemQualityData;//[Offset: 0x80, Size: 0x50]
	<byte,OBTeamColor> OBTeamColors;//[Offset: 0xd0, Size: 0x50]
	OBTeamColor GetOBTeamColor(const int TeamNum);// 0x5b7e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: OBTeamColor
	FString Desc;//[Offset: 0x0, Size: 0x10]
	LinearColor Main;//[Offset: 0x10, Size: 0x10]
	LinearColor Vice;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TeamMemberColor
	LinearColor Main;//[Offset: 0x0, Size: 0x10]
	LinearColor Vice;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ItemQualityData
	LinearColor BaseColor;//[Offset: 0x0, Size: 0x10]
	LinearColor HUDColor;//[Offset: 0x10, Size: 0x10]
	LinearColor HighQualityColor;//[Offset: 0x20, Size: 0x10]
	LinearColor LowQualityColor;//[Offset: 0x30, Size: 0x10]
	LinearColor HUDBGColor;//[Offset: 0x40, Size: 0x10]
	LinearColor HUDDecorateColor;//[Offset: 0x50, Size: 0x10]
	SoftObjectPath QualityIcon;//[Offset: 0x60, Size: 0x18]
	FString QualityChar;//[Offset: 0x78, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: UIPanelConfig.Object
	<enum,UIPanelConfigEntry> PanelConfigs;//[Offset: 0x28, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: UIPanelConfigEntry
	SoftClassPath MobileUIPath;//[Offset: 0x0, Size: 0x18]
	SoftClassPath DesktopUIPath;//[Offset: 0x18, Size: 0x18]
	enum UILayerRoot;//[Offset: 0x30, Size: 0x1]
	bool bPrecache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: OBHighlightOverviewWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	delegate OverviewPlayEnd;//[Offset: 0x348, Size: 0x10]
	delegate TranslatePlayBeginOver;//[Offset: 0x358, Size: 0x10]
	delegate TranslatePlayEndOver;//[Offset: 0x368, Size: 0x10]
	delegate HighlightPlayEnd;//[Offset: 0x378, Size: 0x10]
	void SwitchKillToolData(out const enum ToolType, out const int KillToolID);// 0x463723bfa041
	void ShowHighlightTranslateNum(out const int TranslateNum);// 0x463623bfa041
	void ShowHighlightOverviewData(out const PlayerHighlightOverview OverviewData);// 0x463523bfa041
	void ShowHighlightMarkResult(out const float TotalScore, FString MarkName);// 0x463423bfa041
	void ShowHighlightKillToolEffect(FString ToolName, out const Texture2D* ToolIcon);// 0x463323bfa041
	void ShowHighlightKillNum(out const int KillNum, out const float KillEffectTime);// 0x463223bfa041
	void OnTranslatePlayEndOver();// 0x463123bfa041
	void OnTranslatePlayBeginOver();// 0x463023bfa041
	void OnOverviewPlayEnd();// 0x462f23bfa041
	void OnHighlightPlayEnd();// 0x462e23bfa041
	void HighlightOver();// 0x462d23bfa041
	void HighlightFragmentOver();// 0x462c23bfa041
	void ContinueHighlightTranslate();// 0x462b23bfa041
	void CollectReplayPlayerOverviewData(FString PlayerId, out ReplayPlayerOverviewData PlayerOverviewData);// 0x462a23bfa041
	void CalcHighlightMarkResult(float Score, out const ReplayActivityKillDetail[] KillDetails);// 0x462923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ReplayPlayerOverviewData
	FString playerName;//[Offset: 0x0, Size: 0x10]
	FString HeroName;//[Offset: 0x10, Size: 0x10]
	Texture2D* SkinResourcePtr;//[Offset: 0x20, Size: 0x28]
	int PlayerNum;//[Offset: 0x48, Size: 0x4]
	FString GameModeName;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: KeyMappingRowInfo.TableRowBase
	FString Label;//[Offset: 0x8, Size: 0x10]
	FString ActionDisplayName;//[Offset: 0x18, Size: 0x10]
	FString ActionName;//[Offset: 0x28, Size: 0x10]
	bool Continuity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float Scale;//[Offset: 0x3c, Size: 0x4]
	FString RealAction;//[Offset: 0x40, Size: 0x10]
	FString[] FirstDefaultKeys;//[Offset: 0x50, Size: 0x10]
	FString[] SecondDefaultKeys;//[Offset: 0x60, Size: 0x10]
	FString Description;//[Offset: 0x70, Size: 0x10]
	FString[] RelatedActions;//[Offset: 0x80, Size: 0x10]
	bool Stationary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: EmojiBubbleSubsystem.GameInstanceSubsystem.Subsystem.Object
	DataTable* EmojiTable;//[Offset: 0x30, Size: 0x8]
	void ShowEmojiBubbleToContainerInLobby(int EmojiID, SolarLobbyCharacter* InLobbyCharacter, FString PlayerId);// 0x439f23bfa041
	void ShowEmojiBubbleToContainer(int EmojiID, SolarCharacter* InCharacter);// 0x439e23bfa041
	void ResetAllEmojiBubble();// 0x439d23bfa041
	bool GetEmojiConfigByID(int EmojiID, out EmojiBubbleConfig OutConfig);// 0x439c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarLobbyCharacter.Pawn.Actor.Object
	CurveVector* DissolveCurvePath;//[Offset: 0x290, Size: 0x28]
	MaterialInterface* DissolveMatPath;//[Offset: 0x2b8, Size: 0x28]
	CurveVector* FresnelCurvePath;//[Offset: 0x2e0, Size: 0x28]
	MaterialInterface* FresnelMatPath;//[Offset: 0x308, Size: 0x28]
	ParticleSystem* SwitchParticleEffectPath;//[Offset: 0x330, Size: 0x28]
	float SwitchEffectInterval;//[Offset: 0x360, Size: 0x4]
	float SelfDelayShowSeconds;//[Offset: 0x364, Size: 0x4]
	AkComponent* AkAudioComponent;//[Offset: 0x370, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x378, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x380, Size: 0x8]
	SkeletalMeshComponent* MirrorSkeletalMesh;//[Offset: 0x388, Size: 0x8]
	Actor* LobbyAccessory;//[Offset: 0x390, Size: 0x8]
	Actor* MirrorLobbyAccessory;//[Offset: 0x398, Size: 0x8]
	SkeletalMeshComponent* DissovleSkeletalMesh;//[Offset: 0x3a0, Size: 0x8]
	SkeletalMeshComponent* FresnelSkeletalMesh;//[Offset: 0x3a8, Size: 0x8]
	SkeletalMeshComponent* MirrorDissovleSkeletalMesh;//[Offset: 0x3b0, Size: 0x8]
	SkeletalMeshComponent* MirrorFresnelSkeletalMesh;//[Offset: 0x3b8, Size: 0x8]
	MaterialInterface* DissovleMat;//[Offset: 0x3c0, Size: 0x8]
	MaterialInterface* FresnelMat;//[Offset: 0x3c8, Size: 0x8]
	CurveVector* DissovleCurve;//[Offset: 0x3d0, Size: 0x8]
	CurveVector* FresnelCurve;//[Offset: 0x3d8, Size: 0x8]
	MaterialInstanceDynamic*[] DynamicDissovleMats;//[Offset: 0x3e8, Size: 0x10]
	MaterialInstanceDynamic*[] DynamicFresnelMats;//[Offset: 0x3f8, Size: 0x10]
	bool bCanPlayVoiceInIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	bool bOpenMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 0x1]
	bool CharacterIsVisiblity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 0x1]
	int CurSkinId;//[Offset: 0x420, Size: 0x4]
	int CurChunkId;//[Offset: 0x424, Size: 0x4]
	bool bIsPlayIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	class Object* AnimBPClass;//[Offset: 0x430, Size: 0x8]
	void UpdateLobbyAccessory(FString InAccessoryPath);// 0x4f8323bfa041
	void StopPlayIdleShow();// 0x4f8223bfa041
	void StartPlaySwitchEffect();// 0x4f8123bfa041
	void StartPlayFresnelSwitchEffect();// 0x4f8023bfa041
	void StartPlayDissovleSwitchEffect();// 0x4f7f23bfa041
	void SetSwitchEffetComp(SkeletalMeshComponent* EffectComp, SkeletalMeshComponent* DefaultComp, MaterialInterface* EffectMat, out MaterialInstanceDynamic*[] DyniamEffectMats);// 0x4f7e23bfa041
	void SetPropVisiable(bool isVisiable);// 0x4f7d23bfa041
	void SetMeshVisibility(bool IsVisible);// 0x4f7c23bfa041
	void SetIsPlayIdleShow(bool InIsPlayIdleShow);// 0x4f7b23bfa041
	void SetCharacterRotationByDelta(float InDeltaYaw);// 0x4f7a23bfa041
	void SetCharacterMeshAndMat(int InSkinID, bool IsForce);// 0x4f7923bfa041
	void SetCharacterByLoadedData(SolarLobbyCharacterData* InData);// 0x4f7823bfa041
	void PlayIdleShow();// 0x4f7723bfa041
	void OpenLookAtAndSetPostProcessABPCameraLocation(const bool bOpen, FString ModuleCameraName);// 0x4f7623bfa041
	bool IsCanOpenMirror();// 0x4f7523bfa041
	bool IsCanOpenChangeAnim();// 0x4f7423bfa041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4f7323bfa041
	void InitCharacterByLua();// 0x4f7223bfa041
	SolarAkGameObject* GetSolarAkGameObject();// 0x4f7123bfa041
	SolarLobbyCharacterData* GetLobbySkinResourceBySkinId(int InSkinID, bool IsLowRes);// 0x4f7023bfa041
	bool GetIsPlayIdleShow();// 0x4f6f23bfa041
	SolarLobbyAnimInstance* GetCharAnimInstance();// 0x4f6e23bfa041
	void DetachCharacterSocketPS();// 0x4f6d23bfa041
	void DelayShowSelf(SolarLobbyCharacterData* InData);// 0x4f6c23bfa041
	void ClearSwitchEffect();// 0x4f6b23bfa041
	void ClearCharacterByLua();// 0x4f6a23bfa041
	void AttachCharacterSocketPS(out PSAttachElem[] PSAttachArray);// 0x4f6923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarLobbyCharacterData.DataAsset.Object
	SoftObjectPath SkinShareImage;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SkinBackgroundShare;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath Mesh;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath Material;//[Offset: 0x78, Size: 0x18]
	<uint16,CharacterTransformData> CharacterTransformData;//[Offset: 0x90, Size: 0x50]
	SoftObjectPath[] MaterialArray;//[Offset: 0xe0, Size: 0x10]
	<FString,MaterialInterface*> CharacterChangeMat;//[Offset: 0xf0, Size: 0x50]
	SoftObjectPath AnimBlueprint;//[Offset: 0x140, Size: 0x18]
	SoftObjectPath WinAnimation;//[Offset: 0x158, Size: 0x18]
	SoftObjectPath[] IdleShowList;//[Offset: 0x170, Size: 0x10]
	SoftObjectPath LobbyIdleAnimation;//[Offset: 0x180, Size: 0x18]
	SoftObjectPath AccessoryBlueprint;//[Offset: 0x198, Size: 0x18]
	SoftObjectPath EnterAnim;//[Offset: 0x1b0, Size: 0x18]
	SoftObjectPath ExitAnim;//[Offset: 0x1c8, Size: 0x18]
	SoftObjectPath RefuseAnim;//[Offset: 0x1e0, Size: 0x18]
	SoftObjectPath EncounterIdleAnim;//[Offset: 0x1f8, Size: 0x18]
	SoftObjectPath[] EncounterIdleShowList;//[Offset: 0x210, Size: 0x10]
	SoftObjectPath RecommendAnimBlueprint;//[Offset: 0x220, Size: 0x18]
	bool bParameterChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	PSAttachElem[] PSAttachArray;//[Offset: 0x240, Size: 0x10]
	SoftObjectPath IdleShowSequence;//[Offset: 0x250, Size: 0x18]
	SoftObjectPath LeftHandProp;//[Offset: 0x268, Size: 0x18]
	SoftObjectPath RightHandProp;//[Offset: 0x280, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterTransformData
	Vector CharacterOffset;//[Offset: 0x0, Size: 0xc]
	Rotator CharacterRot;//[Offset: 0xc, Size: 0xc]
	Vector CharacterScale;//[Offset: 0x18, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: PSAttachElem
	SoftObjectPath ParticleSystemPath;//[Offset: 0x0, Size: 0x18]
	FName SocketName;//[Offset: 0x18, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x20, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x2c, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarLobbyAnimInstance.AnimInstance.Object
	bool bPlayIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bInIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	bool bResetToIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	bool EnableAnimSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1]
	void ShowRecommendUI(bool bVisible);// 0x4f6823bfa041
	void SetEnableAnimSound(bool InEnableAnimSound);// 0x4f6723bfa041
	void SetCharacterInIdleShow(bool IsPlayingIdleShow);// 0x4f6623bfa041
	void SetCharacterCanBeLooked(bool IsVisible);// 0x4f6523bfa041
	void ResetToIdle();// 0x4f6423bfa041
	void RefreshTick();// 0x4f6323bfa041
	void RandIdleShow();// 0x4f6223bfa041
	void LookAtFunctionSwitcher(const bool bOpen);// 0x4f6123bfa041
	void KawaiiPhysicsSwitcher(const bool bOpen);// 0x4f6023bfa041
	void GetCameraLocation(FString ModuleCameraName);// 0x4f5f23bfa041
	void ExitAnimFinish();// 0x4f5e23bfa041
	void AnimPlayIdleShow(bool Enable);// 0x4f5d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: EmojiBubbleConfig.TableRowBase
	class SolarUserWidget* EmojiClassType;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CommonInputSubsystem.LocalPlayerSubsystem.Subsystem.Object
	delegate OnInputMethodChanged;//[Offset: 0x50, Size: 0x10]
	int NumberOfInputMethodChangesRecently;//[Offset: 0x60, Size: 0x4]
	double LastInputMethodChangeTime;//[Offset: 0x68, Size: 0x8]
	double LastTimeInputMethodThrashingBegan;//[Offset: 0x70, Size: 0x8]
	enum LastInputType;//[Offset: 0x78, Size: 0x1]
	enum CurrentInputType;//[Offset: 0x79, Size: 0x1]
	FName GamepadInputType;//[Offset: 0x7c, Size: 0x8]
	<FName,enum> CurrentInputLocks;//[Offset: 0x88, Size: 0x50]
	bool bIsGamepadSimulatedClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool ShouldShowInputKeys();// 0x3ca123bfa041
	void SetGamepadInputType(const FName InGamepadInputType);// 0x3ca023bfa041
	bool SetCurrentInputType(enum NewInputType);// 0x3c9f23bfa041
	bool IsUsingPointerInput();// 0x3c9e23bfa041
	bool IsInputMethodActive(enum InputMethod);// 0x3c9d23bfa041
	enum GetDefaultInputType();// 0x3c9c23bfa041
	enum GetCurrentInputType();// 0x3c9b23bfa041
	FName GetCurrentGamepadName();// 0x3c9a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: LocalPlayerSubsystem.Subsystem.Object
<----------Generated by SSpawner v1.0.2---------->


Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x151, Size: 0x1]
	LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x666d23bfa041
	LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x666c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAnoHelper.Object
	bool bOpenAnoSDK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void SendAntiDataToSsmOnDs(FString AntiDataLog, const SolarPlayerController* PC);// 0x4a3d23bfa041
	void SendAntiDataToSsmOnClientNative(FString ExtraParam, byte AntiType);// 0x4a3c23bfa041
	void SendAntiDataToSsmOnClient(FString Param, const byte AntiType);// 0x4a3b23bfa041
	void InitializeBind();// 0x4a3a23bfa041
	FString GetAntiLogOnClient(const byte Type);// 0x4a3923bfa041
	void AnoUnRegisterCallBack();// 0x4a3823bfa041
	void AnoSentDataToSvr(AnoSDKAntiData Data);// 0x4a3723bfa041
	void AnoSentCoreTimeData(AnoSDKAntiData AntiData);// 0x4a3623bfa041
	void AnoSDKSendData(AnoSDKAntiData AntiData);// 0x4a3523bfa041
	void AnoSDKResume();// 0x4a3423bfa041
	void AnoSDKPause();// 0x4a3323bfa041
	void AnoChangeAntiDataFlow(AnoSDKAntiData Data);// 0x4a3223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AnoSDKAntiData
	int Length;//[Offset: 0x0, Size: 0x4]
	FString AntiData;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTableManager.Object
	enum SystemLang;//[Offset: 0x30, Size: 0x1]
	void SetIMInitFlag(bool Flag);// 0x539b23bfa041
	void SetCurrentLangEnum(enum InLang);// 0x539a23bfa041
	void SetCurrentLang(FString InLang);// 0x539923bfa041
	void ReceiveInit();// 0x539823bfa041
	void OnSetCurrentLang(FString InLang);// 0x539723bfa041
	void MakeUpperLocalTextWithLang(out FString OutLocalText, enum InLang);// 0x539623bfa041
	void MakeUpperLocalText(out FString OutLocalText);// 0x539523bfa041
	void MakeLowerLocalTextWithLang(out FString OutLocalText, enum InLang);// 0x539423bfa041
	void MakeLowerLocalText(out FString OutLocalText);// 0x539323bfa041
	bool IsLocalTextIDValid(int ID);// 0x539223bfa041
	FString GetLocalTextWithLang(int ID, enum InLang, bool bMakeUpperText);// 0x539123bfa041
	FString GetLocalText(int ID, bool bMakeUpperText);// 0x539023bfa041
	bool GetIMInitFlag();// 0x538f23bfa041
	enum GetCurrentLangEnum();// 0x538e23bfa041
	FString GetCurrentLang();// 0x538d23bfa041
	enum ConvertLangNameToEnum(FString LangName);// 0x538c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTcpNetworkManager.Object
	bool bIsSsmMatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	SolarTCPSocketClient* SocketClient;//[Offset: 0x50, Size: 0x8]
	SCMMatchChannelAction* MatchChannelAction;//[Offset: 0x58, Size: 0x8]
	bool IsSsm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FString EncryptKeyClientTCPDynamic;//[Offset: 0x68, Size: 0x10]
	bool bEncrypt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	delegate DisconnectedDelegate;//[Offset: 0x7c, Size: 0x10]
	delegate ConnectedDelegate;//[Offset: 0x8c, Size: 0x10]
	delegate MessageReceivedDelegate;//[Offset: 0x9c, Size: 0x10]
	SolarPlayerReport MyReport;//[Offset: 0xb0, Size: 0x428]
	SolarPlayerState* MyPS;//[Offset: 0x4d8, Size: 0x8]
	void UpdateTeamRank(byte TeamID, int Rank);// 0x589c23bfa041
	void UpdateTeamMVPPlayer(const byte TeamID, FString InPlayerID);// 0x589b23bfa041
	void UpdatePlayerData(FString PlayerId, SolarPlayerState* PlayerState);// 0x589a23bfa041
	void UpdatePlayerBattleInfo(SolarPlayerState* PS);// 0x589923bfa041
	bool UpdateBotAIData(int AIIndex, SolarPlayerState* PlayerState);// 0x589823bfa041
	void TryEndBattle();// 0x589723bfa041
	void SyncSsmDataToGameState();// 0x589623bfa041
	void SsmDSSendGiftRequest(const int GiftID, const int Num, FString SendPlayerId, FString RecivePlayerId, SolarPlayerState* SendPlayer);// 0x589523bfa041
	void SsmDSChangeRoleIDRequest(FString InPlayerID, int InRoleID);// 0x589423bfa041
	void SetKnockoutPoints(FString InClanId, const int InKnockoutPoints);// 0x589323bfa041
	void SendSceenshot2Server(FString UserId, FString PlayerId, FString BattleID, int64 ScreenshotTime, int ImageSize, int ImageWidth, int ImageHeight, FString ImageType, FString ImageBuffer);// 0x589223bfa041
	void SendInputDeviceChangedWrapper(enum NowInputType);// 0x589123bfa041
	void RequestOpenMatchChannel(const int InMatchType, out const int[] InPlayerStructure, const int InMaxMatchTime);// 0x589023bfa041
	void ReportTournamentSpectate(out <FString,FString> TournamentSpectateData);// 0x588f23bfa041
	void ReportPlayerBattleInfo(SolarPlayerState* PS);// 0x588e23bfa041
	void RecordLastUsedVehicle();// 0x588d23bfa041
	void PlayerRequireToChangeGold(const int InChangedGoldType, const int InGoldNum, FString InPlayerID, SolarPlayerState* InPlayer);// 0x588c23bfa041
	void PlayerCancelJoinRequest(FString PlayerId);// 0x588b23bfa041
	void PlayerCancelJoin(FString PlayerId);// 0x588a23bfa041
	void OpenSupplement(int MaxSecond);// 0x588923bfa041
	void OnStartBattleResponse();// 0x588823bfa041
	void OnRecvData(out const byte[] Data);// 0x588723bfa041
	void OnRecordBattleStartTime(const float InStartTime);// 0x588623bfa041
	bool OnReceivedTeamPreJoinRequest(out const FString[] PlayerIds, int TeamID);// 0x588523bfa041
	void OnReceivedPlayerJoinData(FString PlayerId);// 0x588423bfa041
	void OnReceivedPlayerCancelJoin(FString PlayerId);// 0x588323bfa041
	void OnPostLoadMapWithWorld(World* World);// 0x588223bfa041
	void OnPlayerLogin(FString PlayerId);// 0x588123bfa041
	void OnMessageReceived(int ConnId, out const byte[] Message);// 0x588023bfa041
	void OnDisconnected(int ConnId);// 0x587f23bfa041
	void OnConnected(int ConnId);// 0x587e23bfa041
	void NotifyTournamentSpectateState(bool bIsEnterReplay, out FString BattleID);// 0x587d23bfa041
	void NotifyRoomDataChanged(out const CustomRoomData CustomRoomData);// 0x587c23bfa041
	void NotifyPlayerReward_CustomMode(out const SCustomMode_PlayerReport Report);// 0x587b23bfa041
	void NotifyPlayerReward();// 0x587a23bfa041
	void NotifyPlayerOffline(SolarPlayerController* PC);// 0x587923bfa041
	void NotifyPlayerEnterBattle(SolarPlayerController* PC);// 0x587823bfa041
	void NotifyOBPlayersChanged(out FString[] PlayerIds);// 0x587723bfa041
	void NotifyEquipCharacterSkinRequest(FString PlayerId, int CharacterId, int SkinId);// 0x587623bfa041
	void NotifyClientBattleStateFish();// 0x587523bfa041
	void NotifyBattleGroupResultRequest(byte TeamID, int Rank);// 0x587423bfa041
	bool IsEnableAITeamManager();// 0x587323bfa041
	bool IsAllowReconnectGame();// 0x587223bfa041
	void HandlePlayerLogoutInPreparatoryPhase(Controller* PC);// 0x587123bfa041
	void HandlePlayerLogoutInBattlePhase(Controller* PC);// 0x587023bfa041
	void GetWeaponUpgradeSlotByWeaponID(out UpgradeSlotStruct[] outData, FString PlayerId, const int weaponid);// 0x586f23bfa041
	int GetWeaponSkinIDByWeaponID(FString PlayerId, const int weaponid);// 0x586e23bfa041
	int GetWarmGameType();// 0x586d23bfa041
	int GetTournamentID();// 0x586c23bfa041
	void GetStartBattleRequestInfo(out StartBattleRequestInfo OutResult);// 0x586b23bfa041
	SolarGameModeInfo GetSolarGameModeInfo();// 0x586a23bfa041
	int GetRuleID();// 0x586923bfa041
	void GetReportWeaponExpIds(out int[] OutWeaponExpIds);// 0x586823bfa041
	int GetRankMatchID();// 0x586723bfa041
	int[] GetPlayerUsableTailFlameIds(FString PlayerId);// 0x586623bfa041
	int[] GetPlayerUsableJetpackIds(FString PlayerId);// 0x586523bfa041
	byte[] GetPlayerTeamIDs();// 0x586423bfa041
	FString[] GetPlayerRoleAndOpenIDs();// 0x586323bfa041
	int GetPlayerCount();// 0x586223bfa041
	FString GetPlayerClanID(FString PlayerId);// 0x586123bfa041
	void GetPlayerBattleRequestInfo(FString InSolarPlayerID, out PlayerBattleRequestInfo OutResult);// 0x586023bfa041
	int GetNumMode();// 0x585f23bfa041
	int[] GetMLRelatedAIDataMLRatio();// 0x585e23bfa041
	int[] GetMLRelatedAIDataMLFeature();// 0x585d23bfa041
	bool GetMLRelatedAIDataMLClosed();// 0x585c23bfa041
	int GetMaxPlayerNum();// 0x585b23bfa041
	FString GetLocalPlayerID();// 0x585a23bfa041
	FString GetLocalIPAddress();// 0x585923bfa041
	KnockoutParams GetKnockoutPointParams();// 0x585823bfa041
	bool GetIsCloseMatch();// 0x585723bfa041
	bool GetHasMonster();// 0x585623bfa041
	bool GetHasMachineLearning();// 0x585523bfa041
	int GetGameModeGroupId();// 0x585423bfa041
	int GetEntryID();// 0x585323bfa041
	int GetCurrentMatchBotTeamPresetID();// 0x585223bfa041
	int[] GetClientMatchingMapIds();// 0x585123bfa041
	float GetBotShootSimulatorRatio();// 0x585023bfa041
	FString GetBattleID();// 0x584f23bfa041
	<int,int> GetAILevelConfig();// 0x584e23bfa041
	int GetAIAccompanyTimelineID();// 0x584d23bfa041
	int GetAboutToEnterPlayerCount();// 0x584c23bfa041
	void FakePlayerJoin(FString PlayerId, int TeamID);// 0x584b23bfa041
	void CloseSupplement();// 0x584a23bfa041
	bool CheckPlayerLeave(FString PlayerId);// 0x584923bfa041
	bool CheckJoinToken(FString Token, FString PlayerId);// 0x584823bfa041
	bool CheckIfPlayerHasJoined(FString PlayerId);// 0x584723bfa041
	void CheckBattleOver();// 0x584623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTCPSocketClient.Actor.Object
	int SendBufferSize;//[Offset: 0x228, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x22c, Size: 0x4]
	float TimeBetweenTicks;//[Offset: 0x230, Size: 0x4]
	bool SendData(int ConnectionId, byte[] Data);// 0x3ebb23bfa041
	void Disconnect(int ConnectionId);// 0x3eba23bfa041
	void Connect(FString IP, int Port, out const delegate OnConnected, out const delegate OnDisconnected, out const delegate OnMessageReceived, out int ConnectionId);// 0x3eb923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CustomRoomData
	FString Name;//[Offset: 0x0, Size: 0x10]
	int64 MinPlayerLimit;//[Offset: 0x10, Size: 0x8]
	int64 MaxPlayerLimit;//[Offset: 0x18, Size: 0x8]
	FString OwnerID;//[Offset: 0x20, Size: 0x10]
	FString Passwd;//[Offset: 0x30, Size: 0x10]
	int LevelLimit;//[Offset: 0x40, Size: 0x4]
	int64 ShowID;//[Offset: 0x48, Size: 0x8]
	int64 MaxOBPlayerLimit;//[Offset: 0x50, Size: 0x8]
	bool bIsEnabledSwapPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bIsEnabledInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bIsEnableTeamJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	enum RoomType;//[Offset: 0x5b, Size: 0x1]
	TournamentData TournamentData;//[Offset: 0x5c, Size: 0x10]
	int RewardPoolID;//[Offset: 0x6c, Size: 0x4]
	int RewardPoolPrizeType;//[Offset: 0x70, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TournamentData
	int StartTime;//[Offset: 0x0, Size: 0x4]
	int DelayTime;//[Offset: 0x4, Size: 0x4]
	int Turn;//[Offset: 0x8, Size: 0x4]
	enum TournamentType;//[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SCustomMode_PlayerReport.SolarPlayerReport
	<int,int> RewardItems;//[Offset: 0x428, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: UpgradeSlotStruct
	int SlotID;//[Offset: 0x0, Size: 0x4]
	bool Unlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum AccessoryType;//[Offset: 0x5, Size: 0x1]
	int AccessoryID;//[Offset: 0x8, Size: 0x4]
	SlateBrush IconOverride;//[Offset: 0x10, Size: 0x98]
	LinearColor IconColorOverride;//[Offset: 0xa8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: StartBattleRequestInfo
	int aiNum;//[Offset: 0x0, Size: 0x4]
	int AILevel;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerBattleRequestInfo
	FString NickName;//[Offset: 0x0, Size: 0x10]
	int AccountLevel;//[Offset: 0x10, Size: 0x4]
	PlatformParams PlatformParams;//[Offset: 0x18, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: PlatformParams
	int64 UserId;//[Offset: 0x0, Size: 0x8]
	FString OpenId;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: KnockoutParams
	float KnockoutKillPoint;//[Offset: 0x0, Size: 0x4]
	float[] KnockoutRankPoints;//[Offset: 0x8, Size: 0x10]
	float KnockoutDamagePoint;//[Offset: 0x18, Size: 0x4]
	float KnockoutDamageTakenPoint;//[Offset: 0x1c, Size: 0x4]
	float ScalarParam;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMMatchChannelAction.BlueprintAsyncActionBase.Object
	Object* WorldContextObject;//[Offset: 0x48, Size: 0x8]
	delegate OnMatchChannelChange;//[Offset: 0x50, Size: 0x10]
	SCMMatchChannelAction* OpenMatchChannel(Object* WorldContextObject, const enum MatchType, out const int[] PlayerStructure, const int MaxMatchTime);// 0x47b423bfa041
	void HandleMatchChannelChange(bool InMatchResult, int RPCID);// 0x47b323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x3e1123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarUDPManager.Object
	int SendBufferSize;//[Offset: 0x30, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x34, Size: 0x4]
	void OnMessageReceived(out const byte[] Data);// 0x599f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAssetManager.AssetManager.Object
	delegate OnAssetManagerPreloadCompleted;//[Offset: 0x450, Size: 0x10]
	SolarChunkAssignData* ChunkAssignDataCache;//[Offset: 0x460, Size: 0x8]
	<FString,Object*> CachedObjMap;//[Offset: 0x468, Size: 0x50]
	void UnLoadPrimaryAssetByLabelPathForLua(FString PrimaryAssetPath);// 0x4a4423bfa041
	void PreloadGameNormalAssets(SolarGameInstanceBase* GameInstancePtr);// 0x4a4323bfa041
	void OnBindingActorDestory(Actor* Actor);// 0x4a4223bfa041
	float GetPreloadAssetsProgress();// 0x4a4123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarChunkAssignData.DataAsset.Object
	DirectoryPath[] DirectoriesToNeverClean;//[Offset: 0x30, Size: 0x10]
	<FString,ChunkAssignRule> Rules;//[Offset: 0x40, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: ChunkAssignRule
	FString FullPath;//[Offset: 0x0, Size: 0x10]
	int ChunkID;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarItemManager.Object
	SolarItemRootActor* RootActor;//[Offset: 0x30, Size: 0x8]
	<int,Actor*> SpawnedActors;//[Offset: 0x38, Size: 0x50]
	SolarItemSpawner*[] ItemSpawners;//[Offset: 0xd8, Size: 0x10]
	SolarItemSpawner*[] NSItemSpanwers;//[Offset: 0xe8, Size: 0x10]
	SolarVehicleSpawner*[] VehicleSpawners;//[Offset: 0xf8, Size: 0x10]
	<int,SolarItemSpawner*> ItemSpawnersMap;//[Offset: 0x158, Size: 0x50]
	<int,SolarAirDropSpawner*> AirDropSpawnersMap;//[Offset: 0x1a8, Size: 0x50]
	<int,SolarItemSpawnerArray> NSItemSpawnerMap;//[Offset: 0x1f8, Size: 0x50]
	<int,OutcomeData> ItemOutcomeDatas;//[Offset: 0x248, Size: 0x50]
	<int,OutcomeDataCollection> OutcomeCollection;//[Offset: 0x298, Size: 0x50]
	<int,SimpleDropItemDataCollection> OriginDropItemDatas;//[Offset: 0x2e8, Size: 0x50]
	<int,FinalDropDataCollection> AirDropItemDatas;//[Offset: 0x338, Size: 0x50]
	<int,int> AirDropChestIndexMap;//[Offset: 0x388, Size: 0x50]
	<int,int> UsedAirDropChestIndexMap;//[Offset: 0x3d8, Size: 0x50]
	<int,int> MaxPileMap;//[Offset: 0x428, Size: 0x50]
	RandomStream ItemStream;//[Offset: 0x478, Size: 0x8]
	float DelaySpawnTime;//[Offset: 0x480, Size: 0x4]
	FString[] SubLevelNames;//[Offset: 0x488, Size: 0x10]
	bool BInitSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	bool BSpawnerDestoryed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 0x1]
	TimerHandle ItemInitSpawnerHandle;//[Offset: 0x4a0, Size: 0x8]
	float DelayInitSpawnerTime;//[Offset: 0x4a8, Size: 0x4]
	TimerHandle ItemLoopSpawnHandle;//[Offset: 0x4b0, Size: 0x8]
	float SpawnLoopInterval;//[Offset: 0x4b8, Size: 0x4]
	float SpawnMinDisSquared;//[Offset: 0x4bc, Size: 0x4]
	float SpawnMaxHeightOffset;//[Offset: 0x4c0, Size: 0x4]
	float ChestSpawnMinDisSquared;//[Offset: 0x4c4, Size: 0x4]
	float VehicleSpawnMinDisSquared;//[Offset: 0x4c8, Size: 0x4]
	DataTable* ItemResReferenceTable;//[Offset: 0x4d0, Size: 0x8]
	FString ItemResReferenceTablePath;//[Offset: 0x4d8, Size: 0x10]
	bool BOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	int FirstSpawnerIndex;//[Offset: 0x524, Size: 0x4]
	int FirstTBoxIndex;//[Offset: 0x528, Size: 0x4]
	int FirstAirDropIndex;//[Offset: 0x52c, Size: 0x4]
	int FirstVehicleIndex;//[Offset: 0x530, Size: 0x4]
	int ChestKeyCode;//[Offset: 0x534, Size: 0x4]
	int Level1OutcomeID;//[Offset: 0x538, Size: 0x4]
	int Level2OutcomeID;//[Offset: 0x53c, Size: 0x4]
	int Level3OutcomeID;//[Offset: 0x540, Size: 0x4]
	<int,enum> ItemID2Types;//[Offset: 0x638, Size: 0x50]
	int64 ThisIdRefCount;//[Offset: 0x688, Size: 0x8]
	int64 ServerNowSeconds;//[Offset: 0x690, Size: 0x8]
	FString RootActorBpPath;//[Offset: 0x698, Size: 0x10]
	float CheckDropRadius;//[Offset: 0x6a8, Size: 0x4]
	float CheckDropHeight;//[Offset: 0x6ac, Size: 0x4]
	float DropLineTraceLength;//[Offset: 0x6b0, Size: 0x4]
	float DropUnitOffset;//[Offset: 0x6b4, Size: 0x4]
	SolarMapManager* MapManager;//[Offset: 0x6b8, Size: 0x8]
	SolarAirDropSpawner*[] ActiveAirDropBox;//[Offset: 0x6c0, Size: 0x10]
	AirDropTreasureBox*[] AirDropsList;//[Offset: 0x780, Size: 0x10]
	DeathTreasureBox*[] DeathTreasureBoxList;//[Offset: 0x790, Size: 0x10]
	void UpdateItemParams();// 0x4f5323bfa041
	bool TryDropAtLocation(SolarCharacterBase* Owner, out Vector CheckPos);// 0x4f5223bfa041
	void SplitBurstItems(const SolarItemData Source, out SolarItemData[] SplitedPile);// 0x4f5123bfa041
	void SpawnTreasureBoxByID(const int TreasureId, Transform trans, SolarItemData[] ItemsToSpawn, SolarCharacter* SummonCharacter, const float InSpawnDelay, const float InStartHeight);// 0x4f5023bfa041
	void SpawnMutipleItems(SolarCharacter* InCharacter, const int InItemID, const int InPerCount, const int InTotalCount);// 0x4f4f23bfa041
	void SpawnItemsByOutcomeID(const int OutcomeID, out Transform trans);// 0x4f4e23bfa041
	void SpawnItems(const int ItemID, const int ItemNum, Transform trans);// 0x4f4d23bfa041
	SolarItemData SpawnItemData(int ItemID);// 0x4f4c23bfa041
	void SpawnDeathBox(SolarCharacterBase* Owner, out const Rotator Rotator, out SolarItemData[] DataTarray, out const int DeathBoxId, out const SolarPlayerWeapon*[] DeathBoxWeaponArray, out const float CurrEnergyValue, out const float CurrExtraEnergyValue, out const int MonsterID);// 0x4f4b23bfa041
	void SpawnAirDropByID(const int ChestID, Vector Location, SolarItemData[] ItemsToSpawn);// 0x4f4a23bfa041
	void ResetThisID();// 0x4f4923bfa041
	bool RefreshOutcomePoolContent(out OutcomeData InOutcomeData);// 0x4f4823bfa041
	void OnUpdateServerNowSeconds(const int InNowSeconds);// 0x4f4723bfa041
	void OnCustomGameStateChanged(const enum InNewState);// 0x4f4623bfa041
	void OnAsyncLoadTreasureBoxComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Transform trans, SolarCharacter* InCharacter, const float InSpawnDelay, const float InStartHeight);// 0x4f4523bfa041
	void OnAsyncLoadItemComplete(SoftClassPath SClassPath, SolarItemData ItemData, Transform trans);// 0x4f4423bfa041
	void OnAsyncLoadDiscardItemComplete(SoftClassPath SClassPath, SolarCharacter* Owner, SolarItemData ItemData);// 0x4f4323bfa041
	void OnAsyncLoadDeathBoxComplete(class Object DeathBoxClass, SolarCharacterBase* Owner, Rotator Rotator, SolarItemData[] DataTarray, SolarItemData DeathBoxData, SolarPlayerWeapon*[] DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, const int MonsterID);// 0x4f4223bfa041
	void OnAsyncLoadAirdropComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Vector Location);// 0x4f4123bfa041
	void NotifySpawnerDestroy();// 0x4f4023bfa041
	void NotifyAvailableAirDropsNumChanged();// 0x4f3f23bfa041
	void NotifyAirDropOpened();// 0x4f3e23bfa041
	void NetStartAirDrops(const int SpawnerID, const int ChestID);// 0x4f3d23bfa041
	void NetRunVehicleSpawn(enum InSpawnStage);// 0x4f3c23bfa041
	bool NetRunSpecOutcome(const int InData, out SolarItemData[] OutItemArray);// 0x4f3b23bfa041
	void NetRunGlobalDrop();// 0x4f3a23bfa041
	void NetRunDrop(const enum InSpecifiedStage);// 0x4f3923bfa041
	bool NetDropOutcomeContent(const int TargetContentID, out OutcomeData OutcomeData, out <int,SimpleDropItemDataCollection> InDropItemDatas, bool fromSpawner, out const Transform trans);// 0x4f3823bfa041
	bool NetDropOutcome(out OutcomeData OutcomeData, out int OutTargetContentID);// 0x4f3723bfa041
	void NetDropGlobalOutcome(out GlobalOutcomeData GlobalOutcomeData);// 0x4f3623bfa041
	void LoadSpawnerLevelComplete();// 0x4f3523bfa041
	void LoadItemSpawnerLevels();// 0x4f3423bfa041
	bool IsPosBlocked(out const Vector CheckPos);// 0x4f3323bfa041
	bool IsInSafeArea(out const Vector Location);// 0x4f3223bfa041
	void InitWeaponPartLevel(out SolarItemData InItemData);// 0x4f3123bfa041
	void InitWeaponLevel(out SolarItemData InItemData);// 0x4f3023bfa041
	void InitVehicleSpawnGroupData(out <int,int> VehicleGroupIdToNum);// 0x4f2f23bfa041
	void InitItemDataShieldValue(out SolarItemData InItemData);// 0x4f2e23bfa041
	int64 IncreaseThisID();// 0x4f2d23bfa041
	int GetVehicleIDBySingleSpawnId(const int SpawnID);// 0x4f2c23bfa041
	int GetVehicleIDByGroupIDAndIndex(int groupid, int GroupIndex);// 0x4f2b23bfa041
	int GetVehicleIDByCustomRandomData();// 0x4f2a23bfa041
	int GetVehicleGroupIDByVehicleID(int InVehicleID);// 0x4f2923bfa041
	SolarVehicleData GetVehicleConfigData(const int InVehicleID);// 0x4f2823bfa041
	int GetServerNowSeconds();// 0x4f2723bfa041
	int GetRankSeasonID();// 0x4f2623bfa041
	int GetRandomIDInMap(const int TotalWeight, out <int,int> WeightIDMap);// 0x4f2523bfa041
	int GetRandomAirDropIDInMap();// 0x4f2423bfa041
	int GetOutcomeIdByTreasureBoxId(const int TreasureBoxID);// 0x4f2323bfa041
	OutcomeData GetOutcomeDataByID(const int OutcomeID);// 0x4f2223bfa041
	OutcomeContentData GetOutcomeContentDataByID(const int ContentID);// 0x4f2123bfa041
	bool GetItemResReference(int InItemID, out ItemResReference outData);// 0x4f2023bfa041
	int GetItemPrize(const int InItemID);// 0x4f1f23bfa041
	int GetItemMaxPileByID(const int InItemID);// 0x4f1e23bfa041
	bool GetGlobalOutcomeData(const int GamePlayMode, out GlobalOutcomeData[] GlobalOutcomeDatas);// 0x4f1d23bfa041
	int GetEntryID();// 0x4f1c23bfa041
	bool GetCurrItemSubLevels(FString InMapName, out FString[] OutSubLevelNames);// 0x4f1b23bfa041
	OutcomeData GetCookedOutcomeDataByID(const int OutcomeID);// 0x4f1a23bfa041
	bool GetChestsFromChestSpawn(const int ChestSpawnID, out int[] ChestIDs);// 0x4f1923bfa041
	int GetAvailableAirDropsNum();// 0x4f1823bfa041
	bool GetAirDropChestIDsByGamePlayMode(const int GamePlayMode, out int[] ChestIDs);// 0x4f1723bfa041
	SolarAirDropSpawner*[] GetActiveAirDropBox();// 0x4f1623bfa041
	void FindTransformForBoxItem(Actor* TargetActor, out Transform InTrans, bool bUseNewLocation);// 0x4f1523bfa041
	Rotator FindRotationForDropItem(Actor* TargetActor, out Vector FindTargetPos);// 0x4f1423bfa041
	bool FindPosForDropItem(SolarCharacterBase* Owner, out Vector FindTargetPos, const bool bPreferCenter);// 0x4f1323bfa041
	SolarItemData CreateItemDataByKey(const int InItemID);// 0x4f1223bfa041
	void ConvertToItemdataAndSetToSpawners();// 0x4f1123bfa041
	void ClearSpawnLoopTimer();// 0x4f1023bfa041
	void CheckSpawnItemByDis();// 0x4f0f23bfa041
	bool CheckPointInCircle(Vector2D Center, float Radius, Vector2D PlayerPoint);// 0x4f0e23bfa041
	void AddVehicleGroupDataSingle(int groupid, out <int,int> SingleData);// 0x4f0d23bfa041
	void AddOneDropDataToTempDatas(const int SpawnerID, const int InItemID, const int InItemNum, out <int,SimpleDropItemDataCollection> InDropItemDatas);// 0x4f0c23bfa041
	void AddAirDropToList(AirDropTreasureBox* AirDrop);// 0x4f0b23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarItemRootActor.Actor.Object
	int MAX_LOAD_NUM;//[Offset: 0x228, Size: 0x4]
	int MAX_SPAWN_NUM;//[Offset: 0x22c, Size: 0x4]
	int CurrLoadNum;//[Offset: 0x230, Size: 0x4]
	int CurrSpawnNum;//[Offset: 0x234, Size: 0x4]
	int TempFrame;//[Offset: 0x238, Size: 0x4]
	int FrameInterval;//[Offset: 0x23c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: OutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int[] Contents;//[Offset: 0x8, Size: 0x10]
	enum SpawnStage;//[Offset: 0x18, Size: 0x1]
	enum OutcomeType;//[Offset: 0x19, Size: 0x1]
	<int,int> OutcomePools;//[Offset: 0x20, Size: 0x50]
	<int,int> OutcomeDynamicWeights;//[Offset: 0x70, Size: 0x50]
	<int,int> OutcomeSubWeights;//[Offset: 0xc0, Size: 0x50]
	int PoolTotalWeight;//[Offset: 0x110, Size: 0x4]
	int PoolOutcomeID;//[Offset: 0x114, Size: 0x4]
	int MaxTimes;//[Offset: 0x118, Size: 0x4]
	int MinTimes;//[Offset: 0x11c, Size: 0x4]
	int SpawnerID;//[Offset: 0x120, Size: 0x4]
	int NetSetTimes;//[Offset: 0x124, Size: 0x4]
	int DropedTimes;//[Offset: 0x128, Size: 0x4]
	<int,OutcomeContentData> ContentDatas;//[Offset: 0x130, Size: 0x50]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	int GlobalDropTimes;//[Offset: 0x184, Size: 0x4]
	OutcomeTypeLimitData[] LimitTypeDatas;//[Offset: 0x188, Size: 0x10]
	OutcomeIDLimitData[] LimitIDDatas;//[Offset: 0x198, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: OutcomeContentData
	int ID;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	int Weight;//[Offset: 0x8, Size: 0x4]
	int[] RandomNums;//[Offset: 0x10, Size: 0x10]
	int MaxTimes;//[Offset: 0x20, Size: 0x4]
	int MinTimes;//[Offset: 0x24, Size: 0x4]
	int RelatedContentID;//[Offset: 0x28, Size: 0x4]
	enum ItemType;//[Offset: 0x2c, Size: 0x4]
	int DropedTimes;//[Offset: 0x30, Size: 0x4]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool IsDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: OutcomeTypeLimitData
	enum LimitType;//[Offset: 0x0, Size: 0x4]
	int MinTimes;//[Offset: 0x4, Size: 0x4]
	int MaxTimes;//[Offset: 0x8, Size: 0x4]
	int CurrDropTimes;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: OutcomeIDLimitData
	int[] LimitIDs;//[Offset: 0x0, Size: 0x10]
	int MinTimes;//[Offset: 0x10, Size: 0x4]
	int MaxTimes;//[Offset: 0x14, Size: 0x4]
	int CurrDropTimes;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SimpleDropItemDataCollection
	<int,int> Datas;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: GlobalOutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int SingleMaxTimes;//[Offset: 0x4, Size: 0x4]
	int TotalMaxTimes;//[Offset: 0x8, Size: 0x4]
	int TotalMinTimes;//[Offset: 0xc, Size: 0x4]
	int NetSetTimes;//[Offset: 0x10, Size: 0x4]
	int DropedTimes;//[Offset: 0x14, Size: 0x4]
	<int,int> ItemIDNumMap;//[Offset: 0x18, Size: 0x50]
	int[] AffectedOutcomes;//[Offset: 0x68, Size: 0x10]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleData
	int VehicleID;//[Offset: 0x0, Size: 0x4]
	FString VehicleBP;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ItemResReference.TableRowBase
	FString Description;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath Icon;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath AbilityBP;//[Offset: 0x30, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAirDropSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	float SpawnDelay;//[Offset: 0x394, Size: 0x4]
	float AudioActorHeightOffset;//[Offset: 0x398, Size: 0x4]
	float AudioActorFallSpeed;//[Offset: 0x39c, Size: 0x4]
	SoftClassPath PillarMeshBPClassPathName;//[Offset: 0x3a0, Size: 0x18]
	int ChestID;//[Offset: 0x3c0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnerID;//[Offset: 0x294, Size: 0x4]
	enum SpawnStage;//[Offset: 0x2c8, Size: 0x1]
	enum SpawnerType;//[Offset: 0x2c9, Size: 0x1]
	enum SpawnerLevel;//[Offset: 0x2ca, Size: 0x1]
	int OutcomeID;//[Offset: 0x2cc, Size: 0x4]
	Vector OriginPos;//[Offset: 0x2d0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0x2dc, Size: 0xc]
	Box SpawnerBox;//[Offset: 0x2e8, Size: 0x1c]
	float RotateAngleRange;//[Offset: 0x304, Size: 0x4]
	bool HasSpawnedItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bActiveSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	FString SyncItemId;//[Offset: 0x310, Size: 0x10]
	bool BOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	bool bRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]
	float RefreshTime;//[Offset: 0x324, Size: 0x4]
	bool bUseSpawnerTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	int NumberOfPoints;//[Offset: 0x32c, Size: 0x4]
	float fScalarParams;//[Offset: 0x330, Size: 0x4]
	enum AppearanceType;//[Offset: 0x334, Size: 0x1]
	bool bUpdateOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 0x1]
	TimerHandle ItemLoadHandle;//[Offset: 0x358, Size: 0x8]
	TimerHandle ItemSpawnHandle;//[Offset: 0x360, Size: 0x8]
	TimerHandle ItemRefreshHandle;//[Offset: 0x368, Size: 0x8]
	void SpawnSingleItem();// 0x49a723bfa041
	void SpawnInNextTick();// 0x49a623bfa041
	void SaveSpawnerRange();// 0x49a523bfa041
	void RandomRotatorForItem(enum ItemType, out Quat TargetRotator);// 0x49a423bfa041
	void RandomPosInBoundingBox(out Vector TargetPos);// 0x49a323bfa041
	void PlaceItemToTheGround(out Vector InOutLocation);// 0x49a223bfa041
	void OnItemSpawned(Actor* Item);// 0x49a123bfa041
	void OnAsyncLoadComplete(SoftClassPath SClassPath, SolarItemData ItemData);// 0x49a023bfa041
	void NetStartSpawnItems(SolarItemRootActor* OwnerActor);// 0x499f23bfa041
	void LoadSingleWeaponAsset(out const SolarItemData ItemData);// 0x499e23bfa041
	void LoadSingleItemAsset();// 0x499d23bfa041
	void LoadInNextTick();// 0x499c23bfa041
	void InitSpawnerBound();// 0x499b23bfa041
	void GetSuitableDropPos(out Vector TargetPos);// 0x499a23bfa041
	void GenerateDropPosition();// 0x499923bfa041
	void ClearUnpickedItems();// 0x499823bfa041
	void ClearLoopTimer();// 0x499723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnID;//[Offset: 0x394, Size: 0x4]
	enum VehicleSpawnType;//[Offset: 0x398, Size: 0x1]
	bool bVehicleRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	int VehicleRefreshSecond;//[Offset: 0x3a4, Size: 0x4]
	bool bVehicleRefreshRand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	bool bVehicleRefreshWaitPreBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1]
	int64 VehicleRefreshCheckRoleDisSquared;//[Offset: 0x3b0, Size: 0x8]
	byte[] VehicleCheckObjectTypes;//[Offset: 0x3b8, Size: 0x10]
	Vector VehicleCheckBoxSize;//[Offset: 0x3c8, Size: 0xc]
	class SolarVehicleSpawnEffect* VehicleSpawnEffectClass;//[Offset: 0x3f0, Size: 0x28]
	SolarVehicleSpawnEffect* VehicleSpawnEffect;//[Offset: 0x418, Size: 0x8]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x428, Size: 0x4]
	void StartVehicleRefreshTimer();// 0x59ec23bfa041
	void PlayVehicleSpawnEffectFinished();// 0x59eb23bfa041
	void OnVehicleRefreshCheck();// 0x59ea23bfa041
	void OnVehicleRefresh();// 0x59e923bfa041
	void OnPreVehicleDriverGetOn(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x59e823bfa041
	void OnPreVehicleDestroyed(Actor* DestroyedActor);// 0x59e723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleSpawnEffect.Actor.Object
	BoxComponent* BoxCollision;//[Offset: 0x228, Size: 0x8]
	FName EffectMaterialParameterName;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent*[] EffectMeshComponentArray;//[Offset: 0x238, Size: 0x10]
	int VehicleID;//[Offset: 0x248, Size: 0x4]
	Vector BoxExtent;//[Offset: 0x24c, Size: 0xc]
	float EffectTime;//[Offset: 0x258, Size: 0x4]
	StaticMesh* GetVehicleMesh(int InVehicleID);// 0x59e623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x558, Size: 0xc]
	float LineThickness;//[Offset: 0x564, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x613f23bfa041
	Vector GetUnscaledBoxExtent();// 0x613e23bfa041
	Vector GetScaledBoxExtent();// 0x613d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarItemSpawnerArray
	SolarItemSpawner*[] ItemSpawnerArray;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: OutcomeDataCollection
	OutcomeData[] Datas;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: FinalDropDataCollection
	SolarItemData[] Datas;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarMapManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	MapData MapData;//[Offset: 0x38, Size: 0x3c]
	VehicleData VehicleData;//[Offset: 0x74, Size: 0x10]
	MiniMapAirlineData CurAirlineData;//[Offset: 0x84, Size: 0x30]
	Vector AirlineActorLoc;//[Offset: 0xb4, Size: 0xc]
	int CurrentMapID;//[Offset: 0xc0, Size: 0x4]
	FString CurrentMapName;//[Offset: 0xc8, Size: 0x10]
	VisualSoundConfig* BattlePromptConfig;//[Offset: 0x148, Size: 0x8]
	GameModeGlobalSetting* GameModeGlobalSetting;//[Offset: 0x150, Size: 0x8]
	BattlePromptData BattlePromptData;//[Offset: 0x1a8, Size: 0x18]
	Vector2D WorldLocationToMiniMap(Vector WorldLocation);// 0x501e23bfa041
	float WorldLengthToMiniMap(float WorldLength);// 0x501d23bfa041
	void UnInitMapData();// 0x501c23bfa041
	void ReceiveInitMapData(int MapID);// 0x501b23bfa041
	Vector2D Normal2D(Vector2D VectorToTransForm);// 0x501a23bfa041
	Vector MiniMapToWorldLocation(Vector2D PositionXY, float Z);// 0x501923bfa041
	bool IsOutOfBound(Vector2D PlayerNavPos);// 0x501823bfa041
	bool IsMiniMapAirlineDataValid(out const MiniMapAirlineData InData);// 0x501723bfa041
	void InitMapData(int MapID);// 0x501623bfa041
	SolarCharacter* GetViewportFocusedCharacter();// 0x501523bfa041
	bool GetSafeAreaInfo(out SafeAreaMapInfo OutAreaInfo);// 0x501423bfa041
	Vector GetRandomVectorFromMapDarkData(Object* WorldContextObject, enum InType, bool GetWhiteArea);// 0x501323bfa041
	CurveFloat* GetMiniMapFOVCurve(float InRadius);// 0x501223bfa041
	int GetLenegthFromPlayerToMarkPoint(Vector MarkPosRealWorld, Vector CurrentPlayerLocation);// 0x501123bfa041
	bool GetIntersectionOnMapFrame(Vector2D TeamMatePos, Vector2D MapAPos, float MapFrameHeight, float MapFrameWidth, out Vector2D InterSecionList, out enum CrossDirection);// 0x501023bfa041
	float GetDistanceToSafeArea(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x500f23bfa041
	int GetCurrentMapID();// 0x500e23bfa041
	MiniMapAirlineData GetCurAirlineData();// 0x500d23bfa041
	VisualSoundConfig* GetBattlePromptConfig();// 0x500c23bfa041
	Vector2D FixNavPos(Vector2D PlayerNavPos);// 0x500b23bfa041
	bool CheckMapDarkDataWithVector(Vector InVector, enum InType, bool GetWhiteArea);// 0x500a23bfa041
	bool CheckIfMarkedPointValid(out const Vector2D InMarkedPoint);// 0x500923bfa041
	float CalculatePoisonDistance(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x500823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MiniMapAirlineData
	enum AirlineType;//[Offset: 0x0, Size: 0x1]
	Vector2D StartPoint;//[Offset: 0x4, Size: 0x8]
	Vector2D EndPoint;//[Offset: 0xc, Size: 0x8]
	Vector2D RealStartPoint;//[Offset: 0x14, Size: 0x8]
	Vector2D RealEndPoint;//[Offset: 0x1c, Size: 0x8]
	Vector2D AirlineDir;//[Offset: 0x24, Size: 0x8]
	float AirlineLength;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MapData
	Vector2D MapTopLeftCoord;//[Offset: 0x0, Size: 0x8]
	Vector2D MapRightBottomCoord;//[Offset: 0x8, Size: 0x8]
	Vector2D MapImageSize;//[Offset: 0x10, Size: 0x8]
	int MapImage;//[Offset: 0x18, Size: 0x4]
	float AirlineZ;//[Offset: 0x1c, Size: 0x4]
	float HorizonLineZ;//[Offset: 0x20, Size: 0x4]
	float TopZ;//[Offset: 0x24, Size: 0x4]
	float BottomZ;//[Offset: 0x28, Size: 0x4]
	float AverageZ;//[Offset: 0x2c, Size: 0x4]
	float InitFogZ;//[Offset: 0x30, Size: 0x4]
	float TargetFogZ;//[Offset: 0x34, Size: 0x4]
	float MapFOV;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleData
	float Speed1;//[Offset: 0x0, Size: 0x4]
	float Fov1;//[Offset: 0x4, Size: 0x4]
	float Speed2;//[Offset: 0x8, Size: 0x4]
	float Fov2;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: VisualSoundConfig.DataAsset.Object
	byte ElemMaxCount;//[Offset: 0x30, Size: 0x1]
	float VehicleMoveDecidingSpeed;//[Offset: 0x34, Size: 0x4]
	float IgnoredCheckRate;//[Offset: 0x38, Size: 0x4]
	float IgnoredCheckAngle;//[Offset: 0x3c, Size: 0x4]
	float IgnoredCheckDis_PlayerDefault;//[Offset: 0x40, Size: 0x4]
	float IgnoredCheckDis_VehicleDefault;//[Offset: 0x44, Size: 0x4]
	<int,float> IgnoredCheckDis_VehicleMap;//[Offset: 0x48, Size: 0x50]
	<enum,VisualSoundData> VisualSoundDataMap;//[Offset: 0x98, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: VisualSoundData
	GameplayTagContainer RequiedTagsAny;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer LosingTagsAny;//[Offset: 0x20, Size: 0x20]
	float DetectionDis;//[Offset: 0x40, Size: 0x4]
	float AliveTime;//[Offset: 0x44, Size: 0x4]
	float CanBreakTime;//[Offset: 0x48, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BattlePromptData
	byte MaxLength;//[Offset: 0x0, Size: 0x1]
	BattlePromptElem[] BattlePromptElemArr;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BattlePromptElem
	enum RealType;//[Offset: 0x8, Size: 0x1]
	Vector CacheLoc;//[Offset: 0xc, Size: 0xc]
	float Distance;//[Offset: 0x18, Size: 0x4]
	float StartTime;//[Offset: 0x1c, Size: 0x4]
	float DestroyTime;//[Offset: 0x20, Size: 0x4]
	float ReplaceTime;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SafeAreaMapInfo
	Vector CurrentLocation;//[Offset: 0x0, Size: 0xc]
	float CurrentRadius;//[Offset: 0xc, Size: 0x4]
	Vector NextLocation;//[Offset: 0x10, Size: 0xc]
	float NextRadius;//[Offset: 0x1c, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x20, Size: 0x4]
	float TargetShrinkTime;//[Offset: 0x24, Size: 0x4]
	float CurrentConfigRadius;//[Offset: 0x28, Size: 0x4]
	Vector CurrentAreaBeginLocation;//[Offset: 0x2c, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: AirDropTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	bool bPendingDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	bool bIsOpening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 0x1]
	float openProgress;//[Offset: 0x5d4, Size: 0x4]
	SolarCharacter* OpeningCharacter;//[Offset: 0x5d8, Size: 0x8]
	float OpenTime;//[Offset: 0x5e0, Size: 0x4]
	float ProtectionTime;//[Offset: 0x5e4, Size: 0x4]
	bool bBoxLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 0x1]
	FString SummonPlayerID;//[Offset: 0x650, Size: 0x10]
	float StartDropHeight;//[Offset: 0x660, Size: 0x4]
	Rotator TargetRotation;//[Offset: 0x664, Size: 0xc]
	Vector TargetLocation;//[Offset: 0x670, Size: 0xc]
	ParticleSystem* OpenAirdropEffect;//[Offset: 0x680, Size: 0x28]
	ParticleSystem* LandHitEffect;//[Offset: 0x6a8, Size: 0x28]
	ParticleSystem* LandSmokeEffect;//[Offset: 0x6d0, Size: 0x28]
	ParticleSystem* PendingDestroyEffect;//[Offset: 0x6f8, Size: 0x28]
	ParticleSystem* DestroyEffect;//[Offset: 0x720, Size: 0x28]
	ParticleSystem* FallingEffect;//[Offset: 0x748, Size: 0x28]
	ParticleSystem* FallingImpulseEffect;//[Offset: 0x770, Size: 0x28]
	ParticleSystem* LightBeamEffect;//[Offset: 0x798, Size: 0x28]
	Transform FallingEffectOffset;//[Offset: 0x7c0, Size: 0x30]
	Transform FallingImpulseEffectOffset;//[Offset: 0x7f0, Size: 0x30]
	Transform LightBeamEffectOffset;//[Offset: 0x820, Size: 0x30]
	Transform PendingDestroyEffectOffset;//[Offset: 0x850, Size: 0x30]
	AnimationAsset* LandAnimation;//[Offset: 0x880, Size: 0x8]
	AnimationAsset* OpenAnimation;//[Offset: 0x888, Size: 0x8]
	float dropGravity;//[Offset: 0x890, Size: 0x4]
	float maxDropSpeed;//[Offset: 0x894, Size: 0x4]
	float originHeight;//[Offset: 0x898, Size: 0x4]
	float DecelerateHeight;//[Offset: 0x89c, Size: 0x4]
	float ShowLandSmokeHeight;//[Offset: 0x8a0, Size: 0x4]
	float DecelerateTime;//[Offset: 0x8a4, Size: 0x4]
	CurveFloat* DecelerateCurve;//[Offset: 0x8a8, Size: 0x8]
	float AirDropSpawnDelay;//[Offset: 0x8b0, Size: 0x4]
	float AudioActorHeightOffset;//[Offset: 0x8b4, Size: 0x4]
	float AudioActorFallSpeed;//[Offset: 0x8b8, Size: 0x4]
	SoftClassPath AirDropGuideMeshBPClassPath;//[Offset: 0x8c0, Size: 0x18]
	float DropApprochDuration;//[Offset: 0x8d8, Size: 0x4]
	float FallingEffectDelay;//[Offset: 0x8dc, Size: 0x4]
	bool bSummonBySkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 0x1]
	float YawOffset;//[Offset: 0x8e4, Size: 0x4]
	enum MovementState;//[Offset: 0x8e8, Size: 0x1]
	enum OpenState;//[Offset: 0x8e9, Size: 0x1]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x8f0, Size: 0x8]
	ParticleSystemComponent* FallingPSC;//[Offset: 0x948, Size: 0x8]
	SolarDamageInfo DamageInfo;//[Offset: 0x968, Size: 0x40]
	FString SNameAirDropOpen;//[Offset: 0x9a8, Size: 0x10]
	FString SNameLandHit;//[Offset: 0x9b8, Size: 0x10]
	FString SNameAirDropSpawn;//[Offset: 0x9c8, Size: 0x10]
	FString SNameAirDropSpawnWarning;//[Offset: 0x9d8, Size: 0x10]
	FString SNameAirDropStopSpawnWarning;//[Offset: 0x9e8, Size: 0x10]
	FString SNameAirDropApprochWarning;//[Offset: 0x9f8, Size: 0x10]
	FString SNameAirDropStopApprochWarning;//[Offset: 0xa08, Size: 0x10]
	FString SNameStartDrop;//[Offset: 0xa18, Size: 0x10]
	FString SNameStopDrop;//[Offset: 0xa28, Size: 0x10]
	FString SNameDecelerateAudio;//[Offset: 0xa38, Size: 0x10]
	FString SNamePlayLandedLoopAudio;//[Offset: 0xa48, Size: 0x10]
	FString SNameStopLandedLoopAudio;//[Offset: 0xa58, Size: 0x10]
	FString SNamePlayOnGroundBroadcastLoopAudio;//[Offset: 0xa68, Size: 0x10]
	FString SNameStopOnGroundBroadcastLoopAudio;//[Offset: 0xa78, Size: 0x10]
	FString SNamePlayStartHackAudio;//[Offset: 0xa88, Size: 0x10]
	FString SNameStopStartHackAudio;//[Offset: 0xa98, Size: 0x10]
	FString SNamePlayHackingLoopAudio;//[Offset: 0xaa8, Size: 0x10]
	FString SNameStopHackingLoopAudio;//[Offset: 0xab8, Size: 0x10]
	FString SNameStopHackingLoopAudioAux;//[Offset: 0xac8, Size: 0x10]
	FString PendingDestroyLoopStart;//[Offset: 0xad8, Size: 0x10]
	FString PendingDestroyLoopEnd;//[Offset: 0xae8, Size: 0x10]
	FString SNameDestroySound;//[Offset: 0xaf8, Size: 0x10]
	FName ColorKeyTag1;//[Offset: 0xb70, Size: 0x8]
	FName ColorKeyTag2;//[Offset: 0xb78, Size: 0x8]
	FName ColorKeyGlow;//[Offset: 0xb80, Size: 0x8]
	FName ColorKeyMesh;//[Offset: 0xb88, Size: 0x8]
	FName AlphaKey;//[Offset: 0xb90, Size: 0x8]
	FName LightBeamAlphaKey;//[Offset: 0xb98, Size: 0x8]
	FName ColorKeyTagFlow1;//[Offset: 0xba0, Size: 0x8]
	FName ColorKeyTagFlow2;//[Offset: 0xba8, Size: 0x8]
	FName ColorKeyLightEffect;//[Offset: 0xbb0, Size: 0x8]
	float FadeTweenDuration;//[Offset: 0xbb8, Size: 0x4]
	float RedTweenDuration;//[Offset: 0xbbc, Size: 0x4]
	LinearColor BlueColorTag1;//[Offset: 0xbc0, Size: 0x10]
	LinearColor RedColorTag1;//[Offset: 0xbd0, Size: 0x10]
	LinearColor BlueColorTag2;//[Offset: 0xbe0, Size: 0x10]
	LinearColor RedColorTag2;//[Offset: 0xbf0, Size: 0x10]
	LinearColor BlueColorGlow;//[Offset: 0xc00, Size: 0x10]
	LinearColor RedColorGlow;//[Offset: 0xc10, Size: 0x10]
	LinearColor BlueColorMesh;//[Offset: 0xc20, Size: 0x10]
	LinearColor RedColorMesh;//[Offset: 0xc30, Size: 0x10]
	LinearColor RedColorTagFlow1;//[Offset: 0xc40, Size: 0x10]
	LinearColor RedColorTagFlow2;//[Offset: 0xc50, Size: 0x10]
	LinearColor BlueColorTagFlow1;//[Offset: 0xc60, Size: 0x10]
	LinearColor BlueColorTagFlow2;//[Offset: 0xc70, Size: 0x10]
	LinearColor RedColorLightEffect;//[Offset: 0xc80, Size: 0x10]
	LinearColor BlueColorLightEffect;//[Offset: 0xc90, Size: 0x10]
	void PlayLandingAnimation();// 0x415423bfa041
	bool OpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x415323bfa041
	void OnStateChanged();// 0x415223bfa041
	void OnRep_TargetLocation();// 0x415123bfa041
	void OnRep_SummonPlayerID();// 0x415023bfa041
	void OnRep_StartDropHeight();// 0x414f23bfa041
	void OnRep_PendingDestroy();// 0x414e23bfa041
	void OnRep_OpenState(enum OpenState);// 0x414d23bfa041
	void OnRep_OpenProgressChange();// 0x414c23bfa041
	void OnRep_OpenCharacterChange();// 0x414b23bfa041
	void OnRep_MovementState(enum MovementState);// 0x414a23bfa041
	void OnRep_IsOpening();// 0x414923bfa041
	void OnRep_bBoxLanded();// 0x414823bfa041
	void OnOpenStateChanged(enum InPrevOpenState, enum InCurrOpenState);// 0x414723bfa041
	void OnMovementStateChanged(enum InPrevMovementState, enum InCurrMovementState);// 0x414623bfa041
	void OnFadeOutFallingEffect();// 0x414523bfa041
	bool IsSummonedByCharacter();// 0x414423bfa041
	bool IsOpenningCharacterOffline();// 0x414323bfa041
	bool IsCharacterInRange(SolarCharacter* InCheckCharacter);// 0x414223bfa041
	bool CancelOpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x414123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	enum CurrentState;//[Offset: 0x3e0, Size: 0x1]
	SolarItemDataArray ItemDataList;//[Offset: 0x3e8, Size: 0x118]
	SolarItemData[] SortedGameItemDatas;//[Offset: 0x500, Size: 0x10]
	int DataLeng;//[Offset: 0x530, Size: 0x4]
	enum CostType;//[Offset: 0x534, Size: 0x1]
	int CostNum;//[Offset: 0x538, Size: 0x4]
	int HighestItemQuality;//[Offset: 0x590, Size: 0x4]
	float BurstRadius;//[Offset: 0x594, Size: 0x4]
	float BurstRadiusRandScale;//[Offset: 0x598, Size: 0x4]
	float BurstLocalHeight;//[Offset: 0x59c, Size: 0x4]
	float BurstEulerAngle;//[Offset: 0x5a0, Size: 0x4]
	bool bBurstSplitItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]
	enum BurstMethod;//[Offset: 0x5a5, Size: 0x1]
	float RadSafeSlopeToBurstOn;//[Offset: 0x5a8, Size: 0x4]
	float GoldenSpiralMinRadiusSquared;//[Offset: 0x5ac, Size: 0x4]
	SolarBurstItemActor*[] BurstItemActors;//[Offset: 0x5b0, Size: 0x10]
	AkComponent* AkAudioComponent;//[Offset: 0x5c0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x5c8, Size: 0x8]
	void UpdateTreasureBoxInternal();// 0x414023bfa041
	void UpdateOpenBoxUIByState(const enum NewState);// 0x413f23bfa041
	void UpdateItemDataListInternal();// 0x413e23bfa041
	void ServerSetState(const enum NewState, SolarCharacter* RequestCharacter);// 0x413d23bfa041
	void ServerNotifyPlayerOpen(SolarCharacter* RequestCharacter, enum InItemType);// 0x413c23bfa041
	void PlayOpenAnimation();// 0x413b23bfa041
	void OnRep_ItemDataList();// 0x413a23bfa041
	void OnRep_CurrentState();// 0x413923bfa041
	void OnClientItemHighestQualityChanged(int NewQuality, int PrevQuality);// 0x413823bfa041
	bool IsEmpty();// 0x413723bfa041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x413623bfa041
	int GetNumCost();// 0x413523bfa041
	SolarItemData[] GetItemList();// 0x413423bfa041
	enum GetCostType();// 0x413323bfa041
	void ConstructTreasureBoxTest(out int[] itemIdList);// 0x413223bfa041
	void ConstructTreasureBox(int dropId);// 0x413123bfa041
	bool BOpened();// 0x413023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarItemActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x268, Size: 0xb8]
	float SpawnOffset;//[Offset: 0x320, Size: 0x4]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x328, Size: 0x10]
	SoftObjectPath OutlineMatPath;//[Offset: 0x338, Size: 0x18]
	SoftObjectPath FXPath;//[Offset: 0x350, Size: 0x18]
	float NoneMeshFxOffset;//[Offset: 0x368, Size: 0x4]
	FString FXBPPath;//[Offset: 0x370, Size: 0x10]
	SphereComponent* SphereComponent;//[Offset: 0x380, Size: 0x8]
	Actor* FXActor;//[Offset: 0x38c, Size: 0x8]
	byte ItemCurrentState;//[Offset: 0x394, Size: 0x1]
	byte[] MarkedTeamIdList;//[Offset: 0x3a0, Size: 0x10]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x3b8, Size: 0x8]
	MaterialInstanceDynamic*[] NormalMats;//[Offset: 0x3c0, Size: 0x10]
	MaterialInstanceDynamic*[] OutlineMats;//[Offset: 0x3d0, Size: 0x10]
	void UnMarkThisItem(byte TeamID);// 0x412f23bfa041
	void SwitchDiscardMaterials();// 0x412e23bfa041
	void SetOutlineMeshVisible(bool Visible);// 0x412d23bfa041
	void SetItemData(out const SolarItemData _ItemData);// 0x412c23bfa041
	void OnServerPawned();// 0x412b23bfa041
	void OnRep_ItemDataChange();// 0x412a23bfa041
	void OnRep_ItemCurrentStateChanged();// 0x412923bfa041
	void NotifyThisItemWasPickedUp();// 0x412823bfa041
	void MarkThisItem(byte TeamID);// 0x412723bfa041
	StaticMeshComponent* GetStaticMeshComp();// 0x412623bfa041
	int GetQuality();// 0x412523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarDormantActor.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarItemDataArray.FastArraySerializer
	SolarItemData[] ItemDatas;//[Offset: 0x108, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBurstItemActor.SolarItemActor.SolarDormantActor.Actor.Object
	Vector_NetQuantize StartLoc;//[Offset: 0x3e0, Size: 0xc]
	Vector_NetQuantize MediumLoc;//[Offset: 0x3ec, Size: 0xc]
	Vector_NetQuantize EndLoc;//[Offset: 0x3f8, Size: 0xc]
	bool bLandedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1]
	SolarTreasureBoxActor* OwnerBox;//[Offset: 0x430, Size: 0x8]
	float BurstLocalHeight;//[Offset: 0x480, Size: 0x4]
	float BurstTimeTotal;//[Offset: 0x484, Size: 0x4]
	void OnRep_StartLoc();// 0x4b0b23bfa041
	void OnRep_OwnerBox();// 0x4b0a23bfa041
	void OnRep_MediumLoc();// 0x4b0923bfa041
	void OnRep_EndLoc();// 0x4b0823bfa041
	void OnRep_BurstLocalHeight();// 0x4b0723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	float CharacterPickupRange;//[Offset: 0x5d0, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0x5d4, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0x5d8, Size: 0x4]
	FString PlayerId;//[Offset: 0x5e0, Size: 0x10]
	FString NickName;//[Offset: 0x5f0, Size: 0x10]
	bool IsPickuped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	SolarPlayerWeapon*[] WeaponList;//[Offset: 0x608, Size: 0x10]
	BoxChargingInfo[] ChargingChars;//[Offset: 0x618, Size: 0x10]
	float PickupRadius;//[Offset: 0x628, Size: 0x4]
	float ResurrectDistance;//[Offset: 0x62c, Size: 0x4]
	byte CurrResurrectionState;//[Offset: 0x630, Size: 0x1]
	float ReviveTotalTime;//[Offset: 0x634, Size: 0x4]
	float ReviveStartTime;//[Offset: 0x638, Size: 0x4]
	SkeletalMeshComponent* PreViewMesh;//[Offset: 0x640, Size: 0x8]
	FName ReviveStartSound;//[Offset: 0x648, Size: 0x8]
	FName ReviveBeforeCompleteSound;//[Offset: 0x650, Size: 0x8]
	FName ReviveCompleteSound;//[Offset: 0x658, Size: 0x8]
	FName ReviveFailedSound;//[Offset: 0x660, Size: 0x8]
	float ResurrectionBeforeSoundTime;//[Offset: 0x668, Size: 0x4]
	ParticleSystem* ReviveCompletePS;//[Offset: 0x670, Size: 0x8]
	FName ReviveCompletePSAttachedSocket;//[Offset: 0x678, Size: 0x8]
	float PreviewMeshZOffset;//[Offset: 0x680, Size: 0x4]
	float PreviewMeshZRotation;//[Offset: 0x684, Size: 0x4]
	SceneComponent* FXPosComponent;//[Offset: 0x698, Size: 0x8]
	ParticleSystem*[] QualityPS;//[Offset: 0x6a0, Size: 0x10]
	class ActorEffect* RevivePreviewEffectClass;//[Offset: 0x6c0, Size: 0x8]
	<enum,SoftObjectPath> PreviewAnim;//[Offset: 0x6d0, Size: 0x50]
	float SphereRadius;//[Offset: 0x720, Size: 0x4]
	float UnpickableSphereRadius;//[Offset: 0x724, Size: 0x4]
	void ReceiveSetUIEnable(bool IsShow);// 0x437323bfa041
	void ReceiveRemoveEffect(const SolarCharacter* SolarChar);// 0x437223bfa041
	void ReceiveRefreshExtraEnergy(FString Message);// 0x437123bfa041
	void ReceiveAddEffect(const SolarCharacter* SolarChar);// 0x437023bfa041
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x436f23bfa041
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x436e23bfa041
	void OnRep_ReviveStartTime();// 0x436d23bfa041
	void OnRep_PickupedChanged();// 0x436c23bfa041
	void OnRep_CurrExtraEnergyValueChanged();// 0x436b23bfa041
	void OnRep_BResurrectionStateChanged();// 0x436a23bfa041
	void OnRefreshPickupStatusEffect(bool IsShow);// 0x436923bfa041
	bool IsInResurrectRange(SolarCharacter* InReqCharacter, out float RealDistance);// 0x436823bfa041
	bool CanBuyResurrect(const SolarCharacter* InReqCharacter);// 0x436723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BoxChargingInfo
<----------Generated by SSpawner v1.0.2---------->


Class: SolarInteractableManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	int ZoneNum;//[Offset: 0x40, Size: 0x4]
	int TotalNum;//[Offset: 0x44, Size: 0x4]
	RadarStationCollection[] CurrRadarStations;//[Offset: 0x48, Size: 0x10]
	SolarElectricShop*[] CurrElectricShops;//[Offset: 0x58, Size: 0x10]
	SolarShieldUpgradeItemShop*[] ActiveShieldUpgradeItemShopList;//[Offset: 0x68, Size: 0x10]
	FString SceneObjectLevelName;//[Offset: 0x78, Size: 0x10]
	SolarGlobalRepInfo* GlobalMapRepInfo;//[Offset: 0x88, Size: 0x8]
	void OnSceneObjectsLoadComplete(FString LevelName);// 0x4ebb23bfa041
	void OnClientShowShieldUpgradeItemShops();// 0x4eba23bfa041
	int GetShieldUpgradeItemShopGroupID();// 0x4eb923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: RadarStationCollection
	int Zone;//[Offset: 0x0, Size: 0x4]
	SolarRadarStation*[] AllRadarStations;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarRadarStation.SolarInteractableActor.Actor.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	int Zone;//[Offset: 0x238, Size: 0x4]
	float MaxTirggerDistance;//[Offset: 0x23c, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x240, Size: 0x4]
	GameplayTag CDTag;//[Offset: 0x244, Size: 0x8]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	bool bInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1]
	float CoolDownTime;//[Offset: 0x250, Size: 0x4]
	float CostEnergy;//[Offset: 0x254, Size: 0x4]
	float RemainCDTime;//[Offset: 0x258, Size: 0x4]
	SphereComponent* CollisionComp;//[Offset: 0x260, Size: 0x8]
	StaticMeshComponent* NormalMesh;//[Offset: 0x268, Size: 0x8]
	SolarObjAbilitySystemComponent* ObjAbilitySystemComp;//[Offset: 0x270, Size: 0x8]
	class SolarObjGameplayAbility* ObjAbilityClass;//[Offset: 0x278, Size: 0x8]
	GameplayAbilitySpecHandle ObjAbilityHandle;//[Offset: 0x280, Size: 0x4]
	bool TryTriggerRadarStation(SolarCharacter* InUser);// 0x525c23bfa041
	void ServerInitailizeAbility();// 0x525b23bfa041
	void OnResetCD();// 0x525a23bfa041
	void OnRep_Broken();// 0x525923bfa041
	void OnRep_BInCD();// 0x525823bfa041
	void OnRadarStationCDChanged();// 0x525723bfa041
	void OnPlayStartScanEffect();// 0x525623bfa041
	void OnGameplayTagChanged(GameplayTag Tag, bool bAdd);// 0x525523bfa041
	void OnClientStartScan();// 0x525423bfa041
	void OnBrokenChanged(bool InBroken);// 0x525323bfa041
	void InitailizeAbilityParams();// 0x525223bfa041
	float GetAbilityReaminingCD();// 0x525123bfa041
	float GetAbilityCostEnergy();// 0x525023bfa041
	float GetAbilityCooldown();// 0x524f23bfa041
	bool CanActivateNow();// 0x524e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarObjAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	GameplayTagContainer NotifyTags;//[Offset: 0x1308, Size: 0x20]
	GameplayTagContainer RepNotifiedTags;//[Offset: 0x1328, Size: 0x20]
	void OnRep_RepNotifiedTags(out const GameplayTagContainer Previous);// 0x505123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarObjGameplayAbility.GameplayAbility.Object
	class GameplayEffect* ActivateEffect;//[Offset: 0x400, Size: 0x8]
	float CostEnergy;//[Offset: 0x408, Size: 0x4]
	SolarInteractableActor* GetAbilityInstigator();// 0x504f23bfa041
	Actor* GetAbilityEffectUser();// 0x504e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarElectricShop.SolarInteractableActor.Actor.Object
	int MaxWeaponLevel;//[Offset: 0x238, Size: 0x4]
	int MaxShieldLevel;//[Offset: 0x23c, Size: 0x4]
	float[] UpgradeEnergyCosts;//[Offset: 0x240, Size: 0x10]
	StaticMeshComponent* ShopMesh;//[Offset: 0x250, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x258, Size: 0x8]
	int SpawnID;//[Offset: 0x260, Size: 0x4]
	bool bSpecificShopID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	DataTable* ShopMeshPathTable;//[Offset: 0x268, Size: 0x28]
	bool bIfShowInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	class MapMarkBase* MapIcon;//[Offset: 0x298, Size: 0x28]
	int MapIconID;//[Offset: 0x2c0, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x2c4, Size: 0x4]
	int ShopID;//[Offset: 0x2c8, Size: 0x4]
	bool bIsBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	float TirggerDistance;//[Offset: 0x2d0, Size: 0x4]
	enum CurrentModeAnimType;//[Offset: 0x2d4, Size: 0x1]
	enum WantedModeAnimType;//[Offset: 0x2d5, Size: 0x1]
	SolarCharacter*[] InstigateCharacters;//[Offset: 0x2d8, Size: 0x10]
	DataTable* ShopMeshDataTable;//[Offset: 0x2e8, Size: 0x8]
	ElectricShopSection[] ItemSections;//[Offset: 0x2f0, Size: 0x10]
	ElectricShopCDRecord[] ItemCDRecords;//[Offset: 0x300, Size: 0x10]
	float[] PoolRefreshTimeList;//[Offset: 0x310, Size: 0x10]
	PoolRefreshInfo[] PoolRefreshInfoList;//[Offset: 0x320, Size: 0x10]
	int CurPoolGroupID;//[Offset: 0x330, Size: 0x4]
	MapMarkBase*[] MapMarkArray;//[Offset: 0x348, Size: 0x10]
	TimerHandle[] CachedHandles;//[Offset: 0x358, Size: 0x10]
	float DemoRotationSpeed;//[Offset: 0x368, Size: 0x4]
	float DemoSwtichTime;//[Offset: 0x36c, Size: 0x4]
	float DemoOffsetFromZ;//[Offset: 0x370, Size: 0x4]
	DataTable* ItemDemoBPTable;//[Offset: 0x378, Size: 0x28]
	DataTable* ItemDemoBPDataTable;//[Offset: 0x3a0, Size: 0x8]
	<SoftObjectPath,ElectricShopItemDemo*> DemoActorMap;//[Offset: 0x3a8, Size: 0x50]
	ElectricShopItemDemo* CurDemo;//[Offset: 0x3f8, Size: 0x8]
	TimerHandle DemoLoopPlaybackHandle;//[Offset: 0x400, Size: 0x8]
	ElectricShopItemDemo*[] SpawnedDemoActorList;//[Offset: 0x408, Size: 0x10]
	Object*[] CachedDemoItemsClass;//[Offset: 0x440, Size: 0x10]
	void UpgradeWeaponResponse(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x4cca23bfa041
	void UpgradeShieldResponse(SolarCharacter* InCharacter);// 0x4cc923bfa041
	bool ServerUpgradeWeapon(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x4cc823bfa041
	bool ServerUpgradeShield(SolarCharacter* InCharacter);// 0x4cc723bfa041
	void ServerStatisticElectricShop(const SolarCharacter* ActivateCharacter, enum StatisticType, const int InValueA, const int InValueB);// 0x4cc623bfa041
	bool ServerPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarCharacter* InCharacter);// 0x4cc523bfa041
	bool RemoveInstigator(SolarCharacter* InCharacter);// 0x4cc423bfa041
	bool RefreshSellingItem(const int InProductID);// 0x4cc323bfa041
	void RefreshItemCDRecords(out const ElectricShopItem InItem, FString InPlayerID);// 0x4cc223bfa041
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarCharacter* InCharacter);// 0x4cc123bfa041
	void OnShopIDReplicatedBP();// 0x4cc023bfa041
	void OnRep_ShopID();// 0x4cbf23bfa041
	void OnRep_ItemSections();// 0x4cbe23bfa041
	void OnRep_ItemCDRecords();// 0x4cbd23bfa041
	void OnRep_CurPoolGroupID(int PrePoolGroupID);// 0x4cbc23bfa041
	void OnPlayWeaponUpgradeAnim();// 0x4cbb23bfa041
	void OnPlayPurchaseAnim();// 0x4cba23bfa041
	void OnPlayIdleAnim();// 0x4cb923bfa041
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4cb823bfa041
	void OnCurrentAnimFinish();// 0x4cb723bfa041
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4cb623bfa041
	bool IsProductRecommendEquipType(const enum ProductType);// 0x4cb523bfa041
	bool IsInteractable(SolarCharacter* InCharacter);// 0x4cb423bfa041
	void InitWeaponUpgradeEnergyCost();// 0x4cb323bfa041
	void InitializeElectricShop();// 0x4cb223bfa041
	float GetServerWorldTime();// 0x4cb123bfa041
	float GetRemainingCD(const int ProductID);// 0x4cb023bfa041
	float GetDiscountedPrice(SolarCharacter* BuyerCharacter, float Price);// 0x4caf23bfa041
	void GetDiscountedItem(SolarCharacter* BuyerCharacter, out ElectricShopItem OutItem);// 0x4cae23bfa041
	bool GetCurrentItem(const int InProductID, out ElectricShopItem OutItem);// 0x4cad23bfa041
	FString GetBuyerID(const int ProductID);// 0x4cac23bfa041
	ElectricShopItem GenerateNewItem(const int InProductID);// 0x4cab23bfa041
	void ClientUpgradeWeaponSuccess();// 0x4caa23bfa041
	void ClientUpgradeShieldSuccess();// 0x4ca923bfa041
	void ClientUpdateModelAnim();// 0x4ca823bfa041
	void ClientPurchaseSuccess();// 0x4ca723bfa041
	void ClientHUDUpgradeWeaponSuccess(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x4ca623bfa041
	void ClientHUDUpgradeShieldSuccess(SolarCharacter* InCharacter);// 0x4ca523bfa041
	void ClientHUDPurchaseSuccess(const int InProductID, SolarCharacter* InCharacter);// 0x4ca423bfa041
	void ClientHUDPoolRefresh(SolarCharacter* InCharacter);// 0x4ca323bfa041
	void ClientHUDItemRefresh(SolarCharacter* InCharacter);// 0x4ca223bfa041
	void ClientHUDCDRefresh(SolarCharacter* InCharacter);// 0x4ca123bfa041
	void AddInstigator(SolarCharacter* InCharacter);// 0x4ca023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	MiniMapBase* MapOwner;//[Offset: 0x348, Size: 0x8]
	Vector2D MarkIconRealLoc;//[Offset: 0x350, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x358, Size: 0x8]
	bool IsOnBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	enum MarkerType;//[Offset: 0x361, Size: 0x1]
	bool IsMapObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x362, Size: 0x1]
	bool MoveAble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x363, Size: 0x1]
	bool SupportEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	bool SupportEdgeWithBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 0x1]
	Actor* TargetActorRef;//[Offset: 0x368, Size: 0x8]
	void UpdateIconWithActor(Actor* InTargetActor);// 0x45a223bfa041
	void SetUpdateState(bool ShouldUpdateLocation);// 0x45a123bfa041
	void SetMarkPos(out const Vector Loc);// 0x45a023bfa041
	void SetEdgeSupport(bool IsSupportEdge, bool WithBigMap);// 0x459f23bfa041
	void SetColorOpacityIndex(byte InColorOpacityIndex);// 0x459e23bfa041
	void OnBigMapOpen();// 0x459d23bfa041
	void InitVehicleMarkIcon(int VehicleID);// 0x459c23bfa041
	void InitStaticIcon(int MarkID);// 0x459b23bfa041
	void InitMarkIcon(int MarkID, Actor* InTargetActor, bool InMoveable);// 0x459a23bfa041
	void EdgeFix(Vector2D Pos);// 0x459923bfa041
	void CleanData();// 0x459823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MaxPool;//[Offset: 0x348, Size: 0x4]
	<FString,MapMarkElemArray> MapMarkPool;//[Offset: 0x350, Size: 0x50]
	void RemoveMarkIcon(MapMarkBase* InMapMark);// 0x45bf23bfa041
	void RemoveDotLineOnMap(int DotLineID);// 0x45be23bfa041
	void RemoveAllMapMarks();// 0x45bd23bfa041
	bool RecycleMapMark(FString MapMarkName, MapMarkBase* MapMarkToRecycle);// 0x45bc23bfa041
	void MapScaleFormat(MapMarkBase* MapMark);// 0x45bb23bfa041
	MapMarkBase* InitMarkIconOnMapFrame(class MapMarkBase InMapMarkClass, out const Vector2D Pivot, int ZOrder);// 0x45ba23bfa041
	MapMarkBase* InitMarkIcon(class MapMarkBase InMapMarkClass, out const Vector2D InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int ZOrder);// 0x45b923bfa041
	void InitMapMarkPool();// 0x45b823bfa041
	MapMarkBase* GetFreeMapMark(FString MapMarkName);// 0x45b723bfa041
	MapMarkBase* CreateMapMark(FString MapMarkName);// 0x45b623bfa041
	int AddDotLineOnMap(Actor* StartPointActor, Actor* EndPointActor, LinearColor DotLineColor);// 0x45b523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MapMarkElemArray
	MapMarkElem[] MapMarkElems;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MapMarkElem
	MapMarkBase* MapMark;//[Offset: 0x0, Size: 0x8]
	bool bUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ElectricShopSection
	ElectricShopItem[] Items;//[Offset: 0x0, Size: 0x10]
	float CoolDownDuration;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ElectricShopItem
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float Prize;//[Offset: 0x4, Size: 0x4]
	int Num;//[Offset: 0x8, Size: 0x4]
	int ProductID;//[Offset: 0xc, Size: 0x4]
	float CoolDown;//[Offset: 0x10, Size: 0x4]
	int Generation;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ElectricShopCDRecord
	int ProductID;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	float EndWorldTime;//[Offset: 0x8, Size: 0x4]
	FString BuyerID;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PoolRefreshInfo
	int PoolGroupID;//[Offset: 0x0, Size: 0x4]
	float PoolRefreshTime;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ElectricShopItemDemo.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarShieldUpgradeItemShop.SolarInteractableActor.Actor.Object
	int groupid;//[Offset: 0x238, Size: 0x4]
	int ServerActiveGroupID;//[Offset: 0x23c, Size: 0x4]
	SkeletalMeshComponent* BodyMesh;//[Offset: 0x240, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x248, Size: 0x8]
	StaticMeshComponent* HeadUpIconMesh;//[Offset: 0x250, Size: 0x8]
	StaticMeshComponent* BodyScreenMesh;//[Offset: 0x258, Size: 0x8]
	int UpgradeItemNum;//[Offset: 0x278, Size: 0x4]
	ParticleSystem* InteractionTriggeredEffect;//[Offset: 0x280, Size: 0x28]
	SolarIntArray InteractedPlayerIDList;//[Offset: 0x2a8, Size: 0x130]
	int Uid;//[Offset: 0x3d8, Size: 0x4]
	SphereComponent* AudioTriggerComp;//[Offset: 0x3f8, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x400, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x408, Size: 0x8]
	FString SNameHint;//[Offset: 0x410, Size: 0x10]
	FString SNameStopHint;//[Offset: 0x420, Size: 0x10]
	void OnRep_UID();// 0x52b223bfa041
	void OnRep_InteractedPlayerIDList();// 0x52b123bfa041
	void OnRep_ActiveGroupID();// 0x52b023bfa041
	void OnOtherPlayerInteracted();// 0x52af23bfa041
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* InSpectateInfo);// 0x52ae23bfa041
	void OnBindLocalPlayerSpectateTargetChanged(SolarSpectateInfo* SpecInfo);// 0x52ad23bfa041
	void OnActorEndOverlapAudioSphere(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x52ac23bfa041
	void OnActorEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x52ab23bfa041
	void OnActorBeginOverlapAudioSphere(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x52aa23bfa041
	void OnActorBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x52a923bfa041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x52a823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarIntArray.FastArraySerializer
	SolarIntEntry[] Elements;//[Offset: 0x108, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarIntEntry.FastArraySerializerItem
	int IntProperty;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGlobalRepInfo.Info.Actor.Object
	SolarShieldItemShopDataArray ShieldItemShopInteractInfo;//[Offset: 0x228, Size: 0x130]
	int ShieldUpgradeItemShopGroupID;//[Offset: 0x358, Size: 0x4]
	void OnRep_ShieldUpgradeItemShopGroupID();// 0x4dbd23bfa041
	void OnRep_ShieldItemShopInteractInfo();// 0x4dbc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarShieldItemShopDataArray.FastArraySerializer
	SolarShieldItemShopDataEntry[] Elements;//[Offset: 0x108, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarShieldItemShopDataEntry.FastArraySerializerItem
	Vector_NetQuantize Pos;//[Offset: 0xc, Size: 0xc]
	int Uid;//[Offset: 0x18, Size: 0x4]
	byte InteractState;//[Offset: 0x1c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlatformHelper.Object
	SolarPlatformStats* SolarPlatformStats;//[Offset: 0x30, Size: 0x8]
	SolarGameInstanceBase* SolarGameInstanceBase;//[Offset: 0x38, Size: 0x8]
	bool UseRenderThread();// 0x50ee23bfa041
	bool SupportsMultithreading();// 0x50ed23bfa041
	double Seconds();// 0x50ec23bfa041
	void ReceiveShutdown();// 0x50eb23bfa041
	void ReceiveInit();// 0x50ea23bfa041
	bool IsThisApplicationForeground();// 0x50e923bfa041
	bool IsRunningOnBattery();// 0x50e823bfa041
	bool Is64bitOperatingSystem();// 0x50e723bfa041
	int64 GetVideoMemory();// 0x50e623bfa041
	FString GetUniqueDeviceId();// 0x50e523bfa041
	FString GetTimeZoneId();// 0x50e423bfa041
	FString GetSuitableStringWithUnitOfBytes(uint64 NumberOfBytes, FString ExtraUnit);// 0x50e323bfa041
	SolarPlatformStats* GetSolarPlatformStats();// 0x50e223bfa041
	int GetSimultaneousInstanceId();// 0x50e123bfa041
	FString GetPrimaryGPUBrand();// 0x50e023bfa041
	FString GetPathVarDelimiter();// 0x50df23bfa041
	void GetOSVersions(out FString out_OSVersionLabel, out FString out_OSSubVersionLabel);// 0x50de23bfa041
	FString GetOSVersion();// 0x50dd23bfa041
	uint32 GetMoniterWidth();// 0x50dc23bfa041
	int GetMoniterRefreshRate();// 0x50db23bfa041
	uint32 GetMoniterHeight();// 0x50da23bfa041
	int GetMaxPathLength();// 0x50d923bfa041
	GameUserSettings* GetGameUserSettings();// 0x50d823bfa041
	FString GetEnvironmentVariable(FString VariableName);// 0x50d723bfa041
	Engine* GetEngine();// 0x50d623bfa041
	bool GetDiskTotalAndFreeSpace(FString InPath, out uint64 TotalNumberOfBytes, out uint64 NumberOfFreeBytes);// 0x50d523bfa041
	float GetDeviceTemperatureLevel();// 0x50d423bfa041
	FString GetDeviceMakeAndModel();// 0x50d323bfa041
	FString GetDefaultDeviceProfileName();// 0x50d223bfa041
	FString GetCPUVendor();// 0x50d123bfa041
	uint32 GetCPUInfo();// 0x50d023bfa041
	FString GetCPUChipset();// 0x50cf23bfa041
	FString GetCPUBrand();// 0x50ce23bfa041
	int GetBatteryLevel();// 0x50cd23bfa041
	FString ClipboardPaste();// 0x50cc23bfa041
	void ClipboardCopy(FString str);// 0x50cb23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlatformStats.Object
	uint64 MaxUsedPhysical;//[Offset: 0x30, Size: 0x8]
	void ReceiveWorldCleanup(World* World, bool bSessionEnded, bool bCleanupResources);// 0x50f823bfa041
	void ReceiveShutdown();// 0x50f723bfa041
	void ReceivePostWorldInitialization(World* World);// 0x50f623bfa041
	void ReceiveInit();// 0x50f523bfa041
	uint64 GetRHIUsedMemory();// 0x50f423bfa041
	float GetRenderThreadTime();// 0x50f323bfa041
	int GetNumDrawCalls();// 0x50f223bfa041
	int GetMinFPS();// 0x50f123bfa041
	float GetGameThreadTime();// 0x50f023bfa041
	int GetAverageFPS();// 0x50ef23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4]
	int WindowPosX;//[Offset: 0x90, Size: 0x4]
	int WindowPosY;//[Offset: 0x94, Size: 0x4]
	int FullscreenMode;//[Offset: 0x98, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4]
	uint32 Version;//[Offset: 0xa4, Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10]
	void ValidateSettings();// 0x62b323bfa041
	bool SupportsHDRDisplayOutput();// 0x62b223bfa041
	void SetVSyncEnabled(bool bEnable);// 0x62b123bfa041
	void SetVisualEffectQuality(int Value);// 0x62b023bfa041
	void SetViewDistanceQuality(int Value);// 0x62af23bfa041
	void SetToDefaults();// 0x62ae23bfa041
	void SetTextureQuality(int Value);// 0x62ad23bfa041
	void SetShadowQuality(int Value);// 0x62ac23bfa041
	void SetShadingQuality(int Value);// 0x62ab23bfa041
	void SetScreenResolution(IntPoint Resolution);// 0x62aa23bfa041
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x62a923bfa041
	void SetResolutionScaleValue(int NewScaleValue);// 0x62a823bfa041
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x62a723bfa041
	void SetPostProcessingQuality(int Value);// 0x62a623bfa041
	void SetOverallScalabilityLevel(int Value);// 0x62a523bfa041
	void SetFullscreenMode(byte InFullscreenMode);// 0x62a423bfa041
	void SetFrameRateLimit(float NewLimit);// 0x62a323bfa041
	void SetFoliageQuality(int Value);// 0x62a223bfa041
	void SetDynamicResolutionEnabled(bool bEnable);// 0x62a123bfa041
	void SetBenchmarkFallbackValues();// 0x62a023bfa041
	void SetAudioQualityLevel(int QualityLevel);// 0x629f23bfa041
	void SetAntiAliasingQuality(int Value);// 0x629e23bfa041
	void SaveSettings();// 0x629d23bfa041
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x629c23bfa041
	void RevertVideoMode();// 0x629b23bfa041
	void ResetToCurrentSettings();// 0x629a23bfa041
	void LoadSettings(bool bForceReload);// 0x629923bfa041
	bool IsVSyncEnabled();// 0x629823bfa041
	bool IsVSyncDirty();// 0x629723bfa041
	bool IsScreenResolutionDirty();// 0x629623bfa041
	bool IsHDREnabled();// 0x629523bfa041
	bool IsFullscreenModeDirty();// 0x629423bfa041
	bool IsDynamicResolutionEnabled();// 0x629323bfa041
	bool IsDynamicResolutionDirty();// 0x629223bfa041
	bool IsDirty();// 0x629123bfa041
	int GetVisualEffectQuality();// 0x629023bfa041
	int GetViewDistanceQuality();// 0x628f23bfa041
	int GetTextureQuality();// 0x628e23bfa041
	int GetSyncInterval();// 0x628d23bfa041
	int GetShadowQuality();// 0x628c23bfa041
	int GetShadingQuality();// 0x628b23bfa041
	IntPoint GetScreenResolution();// 0x628a23bfa041
	float GetResolutionScaleNormalized();// 0x628923bfa041
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x628823bfa041
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x628723bfa041
	float GetRecommendedResolutionScale();// 0x628623bfa041
	byte GetPreferredFullscreenMode();// 0x628523bfa041
	int GetPostProcessingQuality();// 0x628423bfa041
	int GetOverallScalabilityLevel();// 0x628323bfa041
	IntPoint GetLastConfirmedScreenResolution();// 0x628223bfa041
	byte GetLastConfirmedFullscreenMode();// 0x628123bfa041
	GameUserSettings* GetGameUserSettings();// 0x628023bfa041
	byte GetFullscreenMode();// 0x627f23bfa041
	float GetFrameRateLimit();// 0x627e23bfa041
	int GetFramePace();// 0x627d23bfa041
	int GetFoliageQuality();// 0x627c23bfa041
	IntPoint GetDesktopResolution();// 0x627b23bfa041
	IntPoint GetDefaultWindowPosition();// 0x627a23bfa041
	byte GetDefaultWindowMode();// 0x627923bfa041
	float GetDefaultResolutionScale();// 0x627823bfa041
	IntPoint GetDefaultResolution();// 0x627723bfa041
	int GetCurrentHDRDisplayNits();// 0x627623bfa041
	int GetAudioQualityLevel();// 0x627523bfa041
	int GetAntiAliasingQuality();// 0x627423bfa041
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x627323bfa041
	void ConfirmVideoMode();// 0x627223bfa041
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x627123bfa041
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x627023bfa041
	void ApplyNonResolutionSettings();// 0x626f23bfa041
	void ApplyHardwareBenchmarkResults();// 0x626e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18]
	Font* SmallFont;//[Offset: 0x50, Size: 0x8]
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18]
	Font* MediumFont;//[Offset: 0x70, Size: 0x8]
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18]
	Font* LargeFont;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10]
	FString[] AdditionalFontNames;//[Offset: 0xe8, Size: 0x10]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 0x8]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 0x8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 0x18]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 0x8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 0x8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 0x18]
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x190, Size: 0x8]
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x198, Size: 0x18]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1b0, Size: 0x8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 0x8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 0x8]
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 0x18]
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 0x8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 0x8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x288, Size: 0x8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 0x8]
	SoftClassPath RuntimeAssetsCollectionClassName;//[Offset: 0x2b0, Size: 0x18]
	RuntimeAssetsCollectionBase* RuntimeAssetsCollection;//[Offset: 0x2c8, Size: 0x8]
	Texture2D* DefaultTexture;//[Offset: 0x2d0, Size: 0x8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2d8, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2f0, Size: 0x8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2f8, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x310, Size: 0x8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x318, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x330, Size: 0x8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x338, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x350, Size: 0x8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x358, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x370, Size: 0x8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x378, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x390, Size: 0x8]
	FString WireframeMaterialName;//[Offset: 0x398, Size: 0x10]
	Material* DebugMeshMaterial;//[Offset: 0x3a8, Size: 0x8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x3b0, Size: 0x18]
	Material* EmissiveMeshMaterial;//[Offset: 0x3c8, Size: 0x8]
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3d0, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x3e8, Size: 0x8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3f0, Size: 0x10]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x400, Size: 0x8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x408, Size: 0x10]
	Material* LightingTexelDensityMaterial;//[Offset: 0x418, Size: 0x8]
	FString LightingTexelDensityName;//[Offset: 0x420, Size: 0x10]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x430, Size: 0x8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x438, Size: 0x10]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x448, Size: 0x8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x450, Size: 0x10]
	Material* RemoveSurfaceMaterial;//[Offset: 0x460, Size: 0x8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x468, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x480, Size: 0x8]
	FString VertexColorMaterialName;//[Offset: 0x488, Size: 0x10]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x498, Size: 0x8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x4a0, Size: 0x10]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x4b0, Size: 0x8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x4b8, Size: 0x10]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4c8, Size: 0x8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4d0, Size: 0x10]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4e0, Size: 0x8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4e8, Size: 0x10]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4f8, Size: 0x8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x500, Size: 0x10]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x510, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x528, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x530, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x538, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x540, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x548, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x550, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x558, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x560, Size: 0x8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x568, Size: 0x8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x570, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x588, Size: 0x8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x590, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x5a8, Size: 0x8]
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x5b0, Size: 0x8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x5b8, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x5d0, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5e0, Size: 0x10]
	LinearColor[] QuadComplexityColors;//[Offset: 0x5f0, Size: 0x10]
	LinearColor[] LightComplexityColors;//[Offset: 0x600, Size: 0x10]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x610, Size: 0x10]
	LinearColor[] LODColorationColors;//[Offset: 0x620, Size: 0x10]
	LinearColor[] HLODColorationColors;//[Offset: 0x630, Size: 0x10]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x640, Size: 0x10]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x650, Size: 0x4]
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x654, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x658, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x65c, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x660, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x664, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x668, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x66c, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x670, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x680, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x690, Size: 0x10]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x6a0, Size: 0x8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6a8, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6c0, Size: 0x10]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6d0, Size: 0x10]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6e0, Size: 0x10]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6f0, Size: 0x10]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x700, Size: 0x8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x708, Size: 0x18]
	Texture2D* BlueNoiseTexture;//[Offset: 0x720, Size: 0x8]
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x728, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x740, Size: 0x8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x748, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x760, Size: 0x8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x768, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x780, Size: 0x8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x788, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x7a8, Size: 0x8]
	FString[] DeferredCommands;//[Offset: 0x7b0, Size: 0x10]
	int TickCycles;//[Offset: 0x7c0, Size: 0x4]
	int GameCycles;//[Offset: 0x7c4, Size: 0x4]
	int ClientCycles;//[Offset: 0x7c8, Size: 0x4]
	float NearClipPlane;//[Offset: 0x7cc, Size: 0x4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x7d4, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d8, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d8, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d8, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d8, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d8, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d8, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x7dc, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7e0, Size: 0x10]
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7f0, Size: 0x8]
	FString SkipLODStripStaticMeshNames;//[Offset: 0x818, Size: 0x10]
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x828, Size: 0x18]
	TimecodeProvider* TimecodeProvider;//[Offset: 0x840, Size: 0x8]
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x868, Size: 0x18]
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x884, Size: 0x8]
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x88c, Size: 0x4]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x894, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x89c, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x8a0, Size: 0x4]
	Color C_AddWire;//[Offset: 0x8a4, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x8a8, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x8ac, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x8b0, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x8b4, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x8b8, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x8bc, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x8c0, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x8c4, Size: 0x4]
	Color C_Volume;//[Offset: 0x8c8, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x8cc, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x8d0, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x8d8, Size: 0x10]
	enum TransitionType;//[Offset: 0x8e8, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x8f0, Size: 0x10]
	FString TransitionGameMode;//[Offset: 0x900, Size: 0x10]
	float MeshLODRange;//[Offset: 0x910, Size: 0x4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x914, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x918, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x91c, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x920, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x924, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x92c, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x930, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x938, Size: 0x10]
	float NetClientTicksPerSecond;//[Offset: 0x948, Size: 0x4]
	float DisplayGamma;//[Offset: 0x94c, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x950, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x954, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x964, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x974, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x984, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x994, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a5, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a5, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a5, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9a5, Size: 0x1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x9a8, Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x9b0, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b4, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0x9b8, Size: 0x10]
	float SelectionHighlightIntensity;//[Offset: 0x9c8, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x9cc, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9d0, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc20, Size: 0x10]
	FString[] ServerActors;//[Offset: 0xc30, Size: 0x10]
	FString[] RuntimeServerActors;//[Offset: 0xc40, Size: 0x10]
	float NetErrorLogInterval;//[Offset: 0xc50, Size: 0x4]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc54, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0xc68, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeAssetsCollectionBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10]
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10]
	FString NewPluginName;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: EngineCustomTimeStep.Object
<----------Generated by SSpawner v1.0.2---------->


Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4]
	Timecode GetTimecode();// 0x677f23bfa041
	enum GetSynchronizationState();// 0x677e23bfa041
	QualifiedFrameTime GetQualifiedFrameTime();// 0x677d23bfa041
	FrameRate GetFrameRate();// 0x677c23bfa041
	Timecode GetDelayedTimecode();// 0x677b23bfa041
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x677a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4]
	int Minutes;//[Offset: 0x4, Size: 0x4]
	int Seconds;//[Offset: 0x8, Size: 0x4]
	int Frames;//[Offset: 0xc, Size: 0x4]
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	FString Comment;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponGrowthManager.Object
	FString GetWeaponBpPath(int ID);// 0x5c2423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: IMChatObject.Object
	bool GMEIsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool NertcIsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	void UnInitEvents();// 0x454023bfa041
	void SendPlayerPosToIMServerEveryFrame(out const Vector PlayerPosition, out const Rotator PlayerRotator, float DeltaTime);// 0x453f23bfa041
	void NotifyBattlePlayerChanged(int NumPlayers, int PreviousNumPlayers);// 0x453e23bfa041
	void InitEnvents();// 0x453d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarLuaManager.Object
	delegate OnHandleLuaException;//[Offset: 0x30, Size: 0x10]
	SoftObjectPath LuaErrorWidgetPath;//[Offset: 0x50, Size: 0x18]
	LuaErrorWidgetBase* LuaErrorWidget;//[Offset: 0x70, Size: 0x8]
	void SetLuaErrorPopWidget(LuaErrorWidgetBase* Widget);// 0x500523bfa041
	void OnLuaContextCleanup(bool bFullCleanup);// 0x500423bfa041
	enum GetBuildConfiguration();// 0x500323bfa041
	void AddToDoNotShowAgainList(FString Msg);// 0x500223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: LuaErrorWidgetBase.UserWidget.Widget.Visual.Object
	void ShowLuaError(out const FString[] LuaErrorMsgs);// 0x500123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameStatistics.Object
	FString PlayerIdName;//[Offset: 0x30, Size: 0x10]
	FString LogTypeName;//[Offset: 0x40, Size: 0x10]
	SolarGameInstanceBase* Owner;//[Offset: 0x58, Size: 0x8]
	SolarGameStatisticsLogHeadInfo LogHeadInfo;//[Offset: 0x60, Size: 0x28]
	SolarGameStatisticsLogHeadInfo StaticGetLogHeadInfo();// 0x4d7823bfa041
	void SetSwapLogFileSize(int InSize);// 0x4d7723bfa041
	void SetSwapLogFileInterval(int InInterval);// 0x4d7623bfa041
	void SetLogValueSeparater(FString InValueSeparater);// 0x4d7523bfa041
	void SetLogTerminator(FString InTerminator);// 0x4d7423bfa041
	void SetLogFileNameSuffix(FString InLogFileNameSuffix);// 0x4d7323bfa041
	void SetLogFileNamePrefix(FString InLogFileNamePrefix);// 0x4d7223bfa041
	void SetLogFileExtension(FString InLogFileExtension);// 0x4d7123bfa041
	void SetLogFileDir(FString InLogFileDir);// 0x4d7023bfa041
	void SetLogElementSeparater(FString InElementSeparater);// 0x4d6f23bfa041
	void SetLogCheckIntervalMS(int InLogCheckIntervalMS);// 0x4d6e23bfa041
	void ReceiveShutdown();// 0x4d6d23bfa041
	void ReceiveInit();// 0x4d6c23bfa041
	void NotifyBattleStart(FString InBattleID);// 0x4d6b23bfa041
	void NotifyBattleEnd();// 0x4d6a23bfa041
	void LogInternal(FString InLog);// 0x4d6923bfa041
	void LogGameStats_KeyValues(FString InKey, out const FString[] InValues);// 0x4d6823bfa041
	void LogGameStats_KeyValue(FString InKey, FString InValue);// 0x4d6723bfa041
	void LogGameStats_Key(FString InKey);// 0x4d6623bfa041
	bool IsUseEmptyHeadData(FString InPlayerID);// 0x4d6523bfa041
	int GetSwapLogFileSize();// 0x4d6423bfa041
	int GetSwapLogFileInterval();// 0x4d6323bfa041
	FString GetSCMLogDataString(const bool bIncludeStatistics, SolarPlayerState* InPS);// 0x4d6223bfa041
	FString GetProperLogElement(FString InElement);// 0x4d6123bfa041
	FString GetLogValueSeparater();// 0x4d6023bfa041
	FString GetLogTerminator();// 0x4d5f23bfa041
	SolarGameStatisticsLogHeadInfo GetLogHeadInfo();// 0x4d5e23bfa041
	FString GetLogFileNameSuffix();// 0x4d5d23bfa041
	FString GetLogFileNamePrefix();// 0x4d5c23bfa041
	FString GetLogFileExtension();// 0x4d5b23bfa041
	FString GetLogFileDir();// 0x4d5a23bfa041
	FString GetLogElementSeparater();// 0x4d5923bfa041
	FString GetLogDataString(const bool bIncludeStatistics, FString InPlayerID);// 0x4d5823bfa041
	int GetLogCheckIntervalMS();// 0x4d5723bfa041
	FString GetHeadDataString(FString InPlayerID);// 0x4d5623bfa041
	FString GetEmptyHeadDataString();// 0x4d5523bfa041
	bool CanReportBIWrapper(FString InLogType);// 0x4d5423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameStatisticsLogHeadInfo
	int BattleInstanceId;//[Offset: 0x0, Size: 0x4]
	int PIEInstance;//[Offset: 0x4, Size: 0x4]
	FString BattleID;//[Offset: 0x8, Size: 0x10]
	FString WorldName;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponMergeMeshManager.Object
	WeaponMergeMeshStruct[] MergeMeshArray;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponMergeMeshStruct
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	int weaponid;//[Offset: 0x10, Size: 0x4]
	int SkinId;//[Offset: 0x14, Size: 0x4]
	int[] Parts;//[Offset: 0x18, Size: 0x10]
	SkeletalMesh* MergeMesh;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CrashReportManager.Object
	void SetUserID(FString InUserId);// 0x434923bfa041
	void SetDeviceUUID(FString InDeviceUUID);// 0x434823bfa041
	void ReportLuaException(FString ErrorMsg, FString Traceback, bool bHandled);// 0x434723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPopPanelManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarApplicationLifetimeManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	int64 AppWillDeactivateTimestamp;//[Offset: 0x38, Size: 0x8]
	int64 AppHasReactivatedTimestamp;//[Offset: 0x40, Size: 0x8]
	void ReceiveOnWindowMinimized(const bool bIsMinimized);// 0x4a4023bfa041
	void ReceiveOnAppWillDeactivate(int64 InTimestamp);// 0x4a3f23bfa041
	void ReceiveOnAppHasReactivated(int64 InTimestamp);// 0x4a3e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarHomeActorManager.Object
	<FString,SolarHomeActor*> SpawnedHomeActors;//[Offset: 0x40, Size: 0x50]
	<IntVector,SolarHomeActor*> SpawnedConstructsLocKey;//[Offset: 0x90, Size: 0x50]
	<IntVector,SolarHomeActor*> PreviewConstructsLocKey;//[Offset: 0xe0, Size: 0x50]
	<SolarHomeConnectedGraph*> ConnectedGraphSet;//[Offset: 0x130, Size: 0x50]
	<FString,SolarHomeActor*> ClippingHomeActors;//[Offset: 0x180, Size: 0x50]
	<FString,SolarHomeActor*> InValidHomeActors;//[Offset: 0x1d0, Size: 0x50]
	<FString,SubPoolOfHomeActor*> HomeActorPools;//[Offset: 0x220, Size: 0x50]
	<int,HomeActorStaticData> StaticDataMap;//[Offset: 0x270, Size: 0x50]
	<FString,class Object> HomeActorClassPool;//[Offset: 0x2c0, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> SpawnedSpacesLocKey;//[Offset: 0x378, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> ShowsSpacesLocKey;//[Offset: 0x3c8, Size: 0x50]
	DataTable* HomeObjectTable;//[Offset: 0x470, Size: 0x8]
	SolarHomeShaderConfig* ShaderConfig;//[Offset: 0x478, Size: 0x8]
	DataTable* TextureDataTable;//[Offset: 0x480, Size: 0x8]
	DataTable* IconDataTable;//[Offset: 0x488, Size: 0x8]
	DataTable* PicDataTable;//[Offset: 0x490, Size: 0x8]
	int BuildCountPerFrame;//[Offset: 0x498, Size: 0x4]
	SolarHomeSpaceSpawner* HomeSpaceSpawner;//[Offset: 0x4b0, Size: 0x8]
	SolarHomePlayerController* HomePlayerCtrl;//[Offset: 0x4b8, Size: 0x8]
	SolarWaterActorNew* WaterActor;//[Offset: 0x4e0, Size: 0x8]
	<HomeShaderData,MaterialInstanceDynamic*> HomeObjShadersPool;//[Offset: 0x4e8, Size: 0x50]
	bool bIsConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]
	bool IsLoadingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 0x1]
	<SolarHomeDragUI*> CacheDragUIs;//[Offset: 0x5a8, Size: 0x50]
	<SolarHomeDragUI*> UsedDragUIs;//[Offset: 0x5f8, Size: 0x50]
	void UpdateCanSendSaveMsg();// 0x4e2823bfa041
	void UpdateCameraLayer(int NewLayer);// 0x4e2723bfa041
	bool TrySelectHomeActor(out const FString SelectedThisID, bool bSelect);// 0x4e2623bfa041
	bool TrySaveAllHomeActors();// 0x4e2523bfa041
	void TryResetAllHomeActors();// 0x4e2423bfa041
	void TryRemoveHomeActors(out const FString[] RemoveThisID);// 0x4e2323bfa041
	void TryRemoveHomeActor(out const FString RemoveThisID);// 0x4e2223bfa041
	void TryRemoveAllInvalidHomeActors();// 0x4e2123bfa041
	void TryRemoveAllHomeActors();// 0x4e2023bfa041
	void TryDyeHomeActor(out const FString DyeThisID, out const FString SlotName, out const FString TexturesID);// 0x4e1f23bfa041
	void TryCreateHomeActorsNoLimit(out const HomeBuildReqData[] ReqDataArr);// 0x4e1e23bfa041
	void TryCreateHomeActors(out const HomeBuildReqData[] ReqData);// 0x4e1d23bfa041
	void TryCreateHomeActor(out const HomeBuildReqData ReqData);// 0x4e1c23bfa041
	void TryConfirmHomeActor(out const FString SelectedThisID, bool bCancel);// 0x4e1b23bfa041
	void TryCancelHomeActor(out const FString SelectedThisID);// 0x4e1a23bfa041
	void SetLastSelectingThisID(out const FString InThisID);// 0x4e1923bfa041
	void SetLastCreateThisID(out const FString InThisID);// 0x4e1823bfa041
	void SetIsConstruct(bool bNewConstruct);// 0x4e1723bfa041
	void SetHomeActorValid(SolarHomeActor* TargetActor, bool bNewValid);// 0x4e1623bfa041
	void SetHoldingType(enum NewType);// 0x4e1523bfa041
	void SetDragUILoc(SolarHomeDragUI* TargetUI, out const Vector NewLoc);// 0x4e1423bfa041
	void SetCurSelectingThisID(out const FString InThisID, bool bSelected);// 0x4e1323bfa041
	void SetCurBuildingID(int NewItemID);// 0x4e1223bfa041
	void SelectHomeActor_Request(out const FString SelectedThisID, bool bSelect);// 0x4e1123bfa041
	void SelectHomeActor_Other(FString ThisID);// 0x4e1023bfa041
	void SaveBuilding_Request(bool bSave);// 0x4e0f23bfa041
	void RotateHomeActor(SolarHomeActor* TargetHomeActor, int DeltaAngle);// 0x4e0e23bfa041
	void RemoveHomeActors_Request(out const FString[] WillRemoveThisIDs);// 0x4e0d23bfa041
	void RemoveHomeActor_Request(out const FString WillRemoveThisID);// 0x4e0c23bfa041
	void RemoveAllHomeActors_Request();// 0x4e0b23bfa041
	void OnSelectingThisIDChanged(bool bSelect, out const FString NewThisID);// 0x4e0a23bfa041
	void OnSelectingActorCanSaveChanged(bool bNewCanSave);// 0x4e0923bfa041
	bool OnIsDragChanged(bool bIsDrag);// 0x4e0823bfa041
	void OnInvalidActorsCountChanged(int NewCount);// 0x4e0723bfa041
	void OnHoldingTypeChanged(enum OldType, enum NewType);// 0x4e0623bfa041
	void NotifyWhenWallDevicePutOnOtherPlace();// 0x4e0523bfa041
	void NotifyWhenFloorDevicePutOnOtherPlace();// 0x4e0423bfa041
	void NotifyWhenClickActorOnOtherFloor();// 0x4e0323bfa041
	void NotifyWhenCeilingDevicePutOnOtherPlace();// 0x4e0223bfa041
	void NotifyLoadingUIChanged(bool bShow);// 0x4e0123bfa041
	void MoveDevice(SolarHomeActor* TargetHomeActor, const SolarHomeActor* ParHomeActor, enum HitDir, out const Vector NewLoc);// 0x4e0023bfa041
	void MoveConstruct(SolarHomeActor* TargetHomeActor, SolarHomeBaseSpace* NewSpace);// 0x4dff23bfa041
	bool HasFoundation();// 0x4dfe23bfa041
	DataTable* GetTextureDataTable();// 0x4dfd23bfa041
	HomeActorStaticData GetStaticDataByItemID(int ItemID);// 0x4dfc23bfa041
	SolarHomeShaderConfig* GetShaderConfig();// 0x4dfb23bfa041
	void GetMeshDefaultMat(int64 InItemID, out BuildMeshSlotData[] outData);// 0x4dfa23bfa041
	FString GetLastCreateThisID();// 0x4df923bfa041
	int GetInvalidActorsCount();// 0x4df823bfa041
	SolarHomeSpaceSpawner* GetHomeSpaceSpawner();// 0x4df723bfa041
	SolarHomePlayerController* GetHomePlayerCtrl();// 0x4df623bfa041
	bool GetHomePicConfig(FString Name, out HomePic OutConfig);// 0x4df523bfa041
	bool GetHomeObjectConfig(int InItemID, out HomeObject OutConfig);// 0x4df423bfa041
	bool GetHomeIconConfig(FString Name, out HomeIcon OutConfig);// 0x4df323bfa041
	enum GetHomeActorSecondType(int ItemID);// 0x4df223bfa041
	enum GetHomeActorFirstType(int ItemID);// 0x4df123bfa041
	SolarHomeActor* GetHomeActorByThisID(out const FString InThisID);// 0x4df023bfa041
	SolarHomeActor* GetHomeActorByLoc(out const Vector InLoc);// 0x4def23bfa041
	FString GetCurSelectingThisID();// 0x4dee23bfa041
	enum GetCurHoldingItemType();// 0x4ded23bfa041
	int GetCurBuildingID();// 0x4dec23bfa041
	bool GetActorCanSave(SolarHomeActor* InActor);// 0x4deb23bfa041
	void ExportHomeActorDataToPath(FString FilePath);// 0x4dea23bfa041
	void DyeingHomeActor_Request(out const FString WillDyeingThisID, out const FString SlotName, out const FString TexturesID);// 0x4de923bfa041
	void DeSelectAllHomeActors_Request();// 0x4de823bfa041
	void CreateHomeActors_Request(out const HomeBuildReqData[] WillCreateDatas);// 0x4de723bfa041
	void CreateHomeActor_Request(out const HomeBuildReqData WillCreateData);// 0x4de623bfa041
	void ClientUpdateHomeActor_UseQueue(out const HomeActorServerData UpdateData);// 0x4de523bfa041
	void ClientUpdateHomeActor(out const HomeActorServerData UpdateData);// 0x4de423bfa041
	void ClientRemoveHomeActor_UseQueue(out const HomeActorServerData RemoveData);// 0x4de323bfa041
	void ClientRemoveHomeActor(out const HomeActorServerData RemoveData);// 0x4de223bfa041
	void ClientCreateHomeActor_UseQueue(out const HomeActorServerData WillCreateData, enum InLoadingType);// 0x4de123bfa041
	bool ClientCreateHomeActor(out const HomeActorServerData WillCreateData, bool InIsConstruct);// 0x4de023bfa041
	void Clear();// 0x4ddf23bfa041
	void ChangeCameraLayer(int DeltaLayer);// 0x4dde23bfa041
	bool CanPreviewWithBuilding(int TypeID);// 0x4ddd23bfa041
	bool CanDevicePlace(enum DeviceType, out const SolarHomeActor* HitConstruct, out const enum HitDir);// 0x4ddc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: HomeBuildReqData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]
	BuildMeshSlotData[] MatDataArr;//[Offset: 0x20, Size: 0x10]
	FString ParentThisID;//[Offset: 0x30, Size: 0x10]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BuildMeshSlotData
	FString SlotName;//[Offset: 0x0, Size: 0x10]
	FString TexturesID;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarHomeActor.Actor.Object
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x228, Size: 0x8]
	HomeActorStaticData HomeActorStaticData;//[Offset: 0x230, Size: 0x38]
	HomeActorServerData HomeActorServerData;//[Offset: 0x268, Size: 0x68]
	<FName,HomeOriginalShader> OriginalShaders;//[Offset: 0x2d0, Size: 0x50]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x330, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x338, Size: 0x10]
	<SolarHomeActor*,int> HitHomeActors;//[Offset: 0x348, Size: 0x50]
	SolarHomeConnectedGraph* CurrentConnectedGraph;//[Offset: 0x398, Size: 0x8]
	SolarHomeActor*[] NeighborFloors;//[Offset: 0x3a0, Size: 0x10]
	SolarHomeActor*[] NeighborWalls;//[Offset: 0x3b0, Size: 0x10]
	void UpdateHomeActor(out const HomeActorServerData NewServerData);// 0x4ddb23bfa041
	void UpdateHitHomeActors(SolarHomeActor* NewActor, bool isAdd);// 0x4dda23bfa041
	void SetStaticData(out const HomeActorStaticData NewData);// 0x4dd923bfa041
	void SetServerData(out const HomeActorServerData NewData);// 0x4dd823bfa041
	void SetMaterial(out const HomeActorServerData InServerData, bool bPlaceable);// 0x4dd723bfa041
	void OnOverlayEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4dd623bfa041
	void OnOverlayBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4dd523bfa041
	void OnOverLap(Actor* OtherActor, bool isHitBegin);// 0x4dd423bfa041
	void OnCreatedByServer(out const HomeActorStaticData NewStaticData, out const HomeActorServerData NewServerData);// 0x4dd323bfa041
	void OnCanSaveChanged(bool bNewCanSave);// 0x4dd223bfa041
	DataTable* GetTextureDataTable();// 0x4dd123bfa041
	StaticMeshComponent* GetStaticMeshComp();// 0x4dd023bfa041
	HomeActorStaticData GetStaticData();// 0x4dcf23bfa041
	SolarHomeShaderConfig* GetShaderConfig();// 0x4dce23bfa041
	HomeActorServerData GetServerData();// 0x4dcd23bfa041
	bool GetNextLegalRotator(float RotAngle, out Rotator OutNextRot);// 0x4dcc23bfa041
	enum GetHitSurface(out const Vector HitNormal);// 0x4dcb23bfa041
	bool GetCanSave();// 0x4dca23bfa041
	bool CanSelected();// 0x4dc923bfa041
	bool CanRemove();// 0x4dc823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: HomeActorServerData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	FString ThisID;//[Offset: 0x8, Size: 0x10]
	enum Owner;//[Offset: 0x18, Size: 0x4]
	bool isPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool isDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	Vector CurLocation;//[Offset: 0x20, Size: 0xc]
	Rotator CurRotation;//[Offset: 0x2c, Size: 0xc]
	BuildMeshSlotData[] FacesMatData;//[Offset: 0x38, Size: 0x10]
	FString ParentObject;//[Offset: 0x48, Size: 0x10]
	FString[] ChildObjects;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: HomeActorStaticData
	int64 ItemID;//[Offset: 0x0, Size: 0x8]
	enum FirstType;//[Offset: 0x8, Size: 0x4]
	enum SecondType;//[Offset: 0xc, Size: 0x4]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	FString BpPath;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: HomeOriginalShader
<----------Generated by SSpawner v1.0.2---------->


Class: SolarHomeConnectedGraph.Object
	<SolarHomeActor*> ConnectedFloors;//[Offset: 0x28, Size: 0x50]
	<SolarHomeActor*> BaseWalls;//[Offset: 0x78, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarHomeShaderConfig.DataAsset.Object
	SoftObjectPath EmissiveMatPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath MaskedMatPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath TranslucentMatPath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath DeleteEmissiveMatPath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath DeleteMaskedMatPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath DeleteTranslucentMatPath;//[Offset: 0xa8, Size: 0x18]
	LinearColor PrdinaryColor;//[Offset: 0xc0, Size: 0x10]
	LinearColor PlaceableColor;//[Offset: 0xd0, Size: 0x10]
	LinearColor UnPlaceableColor;//[Offset: 0xe0, Size: 0x10]
	LinearColor PlaceableColorOther;//[Offset: 0xf0, Size: 0x10]
	float BreathLightTimeScale;//[Offset: 0x100, Size: 0x4]
	float PlaceableEmissveA;//[Offset: 0x104, Size: 0x4]
	float UnPlaceableEmissveA;//[Offset: 0x108, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarHomeDragUI.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarHomeBaseSpace.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x228, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x230, Size: 0x10]
	BaseSpaceData BaseSpaceData;//[Offset: 0x240, Size: 0xc]
	void UpdateHomeSpaceByData(out const BaseSpaceData NewData);// 0x4e2f23bfa041
	void ShowBaseSpace();// 0x4e2e23bfa041
	void OnBaseSpaceUnOccupied();// 0x4e2d23bfa041
	void OnBaseSpaceOccupied();// 0x4e2c23bfa041
	void OnBaseSpaceCreated(int Layer, enum BaseSpaceType);// 0x4e2b23bfa041
	void HideBaseSpace();// 0x4e2a23bfa041
	BaseSpaceData GetData();// 0x4e2923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BaseSpaceData
	int Layer;//[Offset: 0x0, Size: 0x4]
	enum BaseSpaceType;//[Offset: 0x4, Size: 0x4]
	bool IsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarHomeSpaceSpawner.SolarMapElementBase.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x298, Size: 0x8]
	<enum,class Object> TypeClassMap;//[Offset: 0x2a0, Size: 0x50]
	<float,int> LayerMap;//[Offset: 0x2f0, Size: 0x50]
	float FloorUnit;//[Offset: 0x360, Size: 0x4]
	float WallUnit;//[Offset: 0x364, Size: 0x4]
	float BaseUnit;//[Offset: 0x368, Size: 0x4]
	float RoundOnBase;//[Offset: 0x36c, Size: 0x4]
	float RoundOnFloor;//[Offset: 0x370, Size: 0x4]
	float ArrowOnBase;//[Offset: 0x374, Size: 0x4]
	float ArrowOnFloor;//[Offset: 0x378, Size: 0x4]
	float ArrowToWall;//[Offset: 0x37c, Size: 0x4]
	Transform[] BasisFloorsTransArr;//[Offset: 0x388, Size: 0x10]
	bool IsAirWallOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	void OpenAirWall();// 0x4e6423bfa041
	void Init(int InBuildWidth, int InBuildHeight);// 0x4e6323bfa041
	bool GetIsAirWallOpen();// 0x4e6223bfa041
	void CloseAirWall();// 0x4e6123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarHomePlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	InputComponent* ConstructionInputComponent;//[Offset: 0xe88, Size: 0x8]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0xe90, Size: 0x8]
	SolarHomeActor* DragActor;//[Offset: 0xe98, Size: 0x8]
	float MinCheckDistance;//[Offset: 0xea0, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xea4, Size: 0x4]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0xea8, Size: 0x8]
	bool bIsViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 0x1]
	bool bIsConstruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb1, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0xeb8, Size: 0x8]
	float MoveCheckDis;//[Offset: 0xec0, Size: 0x4]
	float CheckDis;//[Offset: 0x1058, Size: 0x4]
	SolarHomeCameraManager* CameraManager;//[Offset: 0x10f0, Size: 0x8]
	Vector LookAtLocation;//[Offset: 0x10f8, Size: 0xc]
	Vector OriginalLookAtLocation;//[Offset: 0x1104, Size: 0xc]
	Actor* CurrentViewTarget;//[Offset: 0x1110, Size: 0x8]
	Actor* OriginalViewTarget;//[Offset: 0x1118, Size: 0x8]
	void StopBuilding();// 0x4e6023bfa041
	void StartFadeOutEffect();// 0x4e5f23bfa041
	void StartBuilding();// 0x4e5e23bfa041
	void SolarGM_Home_ResetLayer(int InLayer);// 0x4e5d23bfa041
	void SolarGM_FillUpHome();// 0x4e5c23bfa041
	void SolarGM_ExportHomeActorToPath(FString FilePath);// 0x4e5b23bfa041
	void ShowBuildMainUI(bool bShow);// 0x4e5a23bfa041
	void SetNormalCameraTarget();// 0x4e5923bfa041
	void SetConstructionCameraTarget();// 0x4e5823bfa041
	void SendMoveToBackend(out const ServerMoveData MoveData);// 0x4e5723bfa041
	void ResetConstructionCamera();// 0x4e5623bfa041
	void ResetCameraRotation();// 0x4e5523bfa041
	void OnTouchMove(int Index, out const Vector Location);// 0x4e5423bfa041
	void OnTouchEnd(int Index, out const Vector Location);// 0x4e5323bfa041
	void OnTouchBegin(int Index, out const Vector Location);// 0x4e5223bfa041
	void OnDragBegin(out const Vector Location);// 0x4e5123bfa041
	void OnCameraRight(const float Value);// 0x4e5023bfa041
	void OnCameraForward(const float Value);// 0x4e4f23bfa041
	bool GetIsConstruction();// 0x4e4e23bfa041
	int GetCameraCurrentLayer();// 0x4e4d23bfa041
	void BindConstructionInput();// 0x4e4c23bfa041
	void BindBattleInput();// 0x4e4b23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ServerMoveData
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	int64 ServerTimeStamp;//[Offset: 0x8, Size: 0x8]
	Vector Acceleration;//[Offset: 0x10, Size: 0xc]
	Vector Velocity;//[Offset: 0x1c, Size: 0xc]
	Vector Loction;//[Offset: 0x28, Size: 0xc]
	byte CompressedMoveFlags;//[Offset: 0x34, Size: 0x1]
	byte RollByte;//[Offset: 0x35, Size: 0x1]
	uint32 YawPitchInt;//[Offset: 0x38, Size: 0x4]
	byte MovementMode;//[Offset: 0x3c, Size: 0x1]
	uint32 FullBodyAnimationState;//[Offset: 0x40, Size: 0x4]
	uint32 MontageAnimState;//[Offset: 0x44, Size: 0x4]
	byte JetPackFlag;//[Offset: 0x48, Size: 0x1]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarHomeCameraManager.ActorComponent.Object
	CameraMovementParameters CameraMovementSetting;//[Offset: 0xb8, Size: 0x68]
	Vector LookAtLocation;//[Offset: 0x134, Size: 0xc]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x140, Size: 0x8]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0x150, Size: 0x8]
	CameraActor* BuildCamera;//[Offset: 0x158, Size: 0x8]
	Actor* BattleCamera;//[Offset: 0x160, Size: 0x8]
	CameraComponent* BuildCameraComp;//[Offset: 0x168, Size: 0x8]
	void UpdateSliderScaleUI(float InScale);// 0x4e4723bfa041
	void UpdateCameraDistanceUI(float InPercent, float InScale);// 0x4e4623bfa041
	void SetNormalCameraTarget();// 0x4e4523bfa041
	void SetConstructionCameraTarget();// 0x4e4423bfa041
	void RotateCameraSpin(const float Value);// 0x4e4323bfa041
	void RotateCameraPitch(const float Value);// 0x4e4223bfa041
	void MoveCameraRight(const float Value);// 0x4e4123bfa041
	void MoveCameraForward(const float Value);// 0x4e4023bfa041
	void MoveCamera(int Index, out const Vector Location, const <int,Vector> FingerLocations);// 0x4e3f23bfa041
	bool ChangeCameraMode(enum InMode);// 0x4e3e23bfa041
	void ChangeCameraDistancePercent(bool IsDoubleFinger, float InPercent);// 0x4e3d23bfa041
	void ChangeCameraDistanceDiff(bool IsDoubleFinger, float InValue);// 0x4e3c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CameraMovementParameters
	float OneFingerMoveScale;//[Offset: 0x0, Size: 0x4]
	float MouseMoveScale;//[Offset: 0x4, Size: 0x4]
	float OneFingerZoomScale;//[Offset: 0x8, Size: 0x4]
	float MouseZoomScale;//[Offset: 0xc, Size: 0x4]
	float DoubleFingerSpinScale;//[Offset: 0x10, Size: 0x4]
	float DoubleFingerPitchScale;//[Offset: 0x14, Size: 0x4]
	float MouseRotateScale;//[Offset: 0x18, Size: 0x4]
	float LookAtLocationHeigh;//[Offset: 0x1c, Size: 0x4]
	float MinPitch;//[Offset: 0x20, Size: 0x4]
	float MaxPitch;//[Offset: 0x24, Size: 0x4]
	float PanoramicDefaultPitch;//[Offset: 0x28, Size: 0x4]
	float homeCameraBoundary;//[Offset: 0x2c, Size: 0x4]
	CurveFloat* DistanceCurve;//[Offset: 0x30, Size: 0x8]
	float DefultTime;//[Offset: 0x38, Size: 0x4]
	CurveFloat* DistanceCurve_Orthographic;//[Offset: 0x40, Size: 0x8]
	float DefaultTime_Orthographic;//[Offset: 0x48, Size: 0x4]
	CurveFloat* LayerTransitionCurve;//[Offset: 0x50, Size: 0x8]
	CurveFloat* CeilingTransitionCurve;//[Offset: 0x58, Size: 0x8]
	CurveFloat* PanoramicTransitionCurve;//[Offset: 0x60, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: HomePic.TableRowBase
	SoftObjectPath PicPath;//[Offset: 0x8, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: HomeObject.TableRowBase
	FString HomeObjectDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath BpPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath PreviewBpPath;//[Offset: 0x30, Size: 0x18]
	BuildMeshSlotData[] DefaultMat;//[Offset: 0x48, Size: 0x10]
	bool IsFocusCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool IsDrawable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool IsRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool IsRotateHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	int RotateAngleSingle;//[Offset: 0x60, Size: 0x4]
	SoftObjectPath Build_SFPath;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath Remove_SFXPath;//[Offset: 0x80, Size: 0x18]
	float FRemove_SFXTime;//[Offset: 0x98, Size: 0x4]
	FString FSBuild_Audio;//[Offset: 0xa0, Size: 0x10]
	FString FSRemove_Audio;//[Offset: 0xb0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: HomeIcon.TableRowBase
	SoftObjectPath NormalIconPath;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath SelectedIconPath;//[Offset: 0x20, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: SubPoolOfHomeActor.Object
	SolarHomeActor*[] UseActors;//[Offset: 0x30, Size: 0x10]
	SolarHomeActor*[] UnUseActors;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWaterActorNew.StaticMeshActor.Actor.Object
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x234, Size: 0x4]
	void OnExitWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x59fb23bfa041
	void OnEnterWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x59fa23bfa041
	float GetWaterLineHeight();// 0x59f923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x228, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x231, Size: 0x1]
	void SetMobility(byte InMobility);// 0x4a4523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: HomeShaderData
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameplayLogger.Object
	enum[] DefaultChannels;//[Offset: 0x28, Size: 0x10]
	void SolarDebugLog(enum Channel, FString Message);// 0x4d5023bfa041
	void EnableDebugLogChannel(enum Channel);// 0x4d4f23bfa041
	void DisableDebugLogChannel(enum Channel);// 0x4d4e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAttributeSubSystem.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	<int,SolarAttributeConfig> AttributeDefaultData;//[Offset: 0x38, Size: 0x50]
	<int,SolarAttributeSubModifierGroup*> GlobalModifiers;//[Offset: 0x88, Size: 0x50]
	float CharacterTakeDamage(SolarAttributeSubComponent* AttributeSubComp, const float Damage);// 0x4a5123bfa041
	float CalcWeaponFireDamage(SolarAttributeSubComponent* AttributeSet, out const int ModeIdx);// 0x4a5023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAttributeConfig
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]
	float BaseValue;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAttributeSubModifierGroup.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAttributeSubComponent.ActorComponent.Object
	<int,SolarAttributeSubData*> AttributeSubs;//[Offset: 0xb0, Size: 0x50]
	SolarAttributeSubReplicateData[] AttributeSubRepData;//[Offset: 0x100, Size: 0x10]
	<int,float> ClientAttributeSubValues;//[Offset: 0x110, Size: 0x50]
	void RemoveModifier(int AttributeSubID, out const FName Name);// 0x4a4e23bfa041
	void OnRep_AttributeSubRepDatas();// 0x4a4d23bfa041
	void OnAttributeSubChanged();// 0x4a4c23bfa041
	float GetValue(int AttributeSubID);// 0x4a4b23bfa041
	SolarAttributeSubSystem* GetAttributeSubSystem();// 0x4a4a23bfa041
	SolarAttributeSubComponent* GetAttributeSubComponentFromActor(Actor* InActor);// 0x4a4923bfa041
	int AddModifier(int AttributeSubID, byte InOpType, float Magnitude, out const FName Name);// 0x4a4823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAttributeSubData.Object
	SolarAttributeSubModifierGroup* LocalModifier;//[Offset: 0x28, Size: 0x8]
	SolarAttributeSubModifierGroup* GlobalModifier;//[Offset: 0x30, Size: 0x8]
	int AttributeID;//[Offset: 0x50, Size: 0x4]
	float CurrentValue;//[Offset: 0x54, Size: 0x4]
	float MaxValue;//[Offset: 0x58, Size: 0x4]
	float MinValue;//[Offset: 0x5c, Size: 0x4]
	float BaseValue;//[Offset: 0x60, Size: 0x4]
	void OnModifierChanged();// 0x4a4f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAttributeSubReplicateData
	int AttributeID;//[Offset: 0x0, Size: 0x4]
	float AttributeValue;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SCustomizedGameModeManager.Object
	SolarGameMode_ElementManager* ElementManager;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameMode_ElementManager.Object
	SolarMapElementBase*[] ElementsList;//[Offset: 0x30, Size: 0x10]
	SolarPlayerStart*[] PlayerStartList;//[Offset: 0x40, Size: 0x10]
	<FName,class SolarGameMode_HandleElementRPC> HandleActorRPCBPs;//[Offset: 0x50, Size: 0x50]
	<FString,SolarMapElementBase*> ElementMap;//[Offset: 0xa0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x260, Size: 0x4]
	FString Side;//[Offset: 0x268, Size: 0x10]
	FString Job;//[Offset: 0x278, Size: 0x10]
	FString ElementID;//[Offset: 0x288, Size: 0x10]
	enum Type;//[Offset: 0x298, Size: 0x1]
	enum State;//[Offset: 0x299, Size: 0x1]
	enum Visibility;//[Offset: 0x29a, Size: 0x1]
	FName ElementTypeName;//[Offset: 0x29c, Size: 0x8]
	FString GroupKey;//[Offset: 0x2a8, Size: 0x10]
	Vector[] PlayerLocations;//[Offset: 0x2b8, Size: 0x10]
	void SetElementVisibility(const enum NewType);// 0x521b23bfa041
	enum SetElementState(const enum NewState);// 0x521a23bfa041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x521923bfa041
	void OnElementStateChanged(const enum CurrentState);// 0x521823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x24c, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarRedHintManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameModeSelectionManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	SolarGameModeLockSettings* CurGameModeLockSettings;//[Offset: 0x38, Size: 0x8]
	SolarGameModeLockSettings* DefaultGameModeLockSettings;//[Offset: 0x58, Size: 0x8]
	void SaveGameModeLockSettings();// 0x4d4123bfa041
	void LoadGameModeLockSettings();// 0x4d4023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameModeLockSettings.SaveGame.Object
	<int,bool> GameModeLockStatus;//[Offset: 0x28, Size: 0x50]
	int[] LobbyGameModeRecIDs;//[Offset: 0x78, Size: 0x10]
	int[] GameModeGuideIDs;//[Offset: 0x88, Size: 0x10]
	void CopyFrom(SolarGameModeLockSettings* InLockSettings);// 0x4d3f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPingFpsManager.Object
	byte GetPingDS;//[Offset: 0x30, Size: 0x1]
	float GetPingBackend;//[Offset: 0x34, Size: 0x4]
	float FPS;//[Offset: 0x38, Size: 0x4]
	byte GetPingBattleServer();// 0x50c723bfa041
	float GetPacketsLossRate();// 0x50c623bfa041
	float GetAverageFPS();// 0x50c523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameUserSettingsMgr.Object
	SolarGameUserSettings* CurGameUserSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameSettingsRange* DefaultGameSettingsRange;//[Offset: 0x30, Size: 0x8]
	bool bIsDefalutSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x40, Size: 0x8]
	void SynchronizeInputSettings();// 0x4d9623bfa041
	void SaveGameSettings();// 0x4d9523bfa041
	void ResetToDefault(enum SettingPart);// 0x4d9423bfa041
	void RefreshValid(SolarGameInstanceBase* GameInstance, bool SaveIfDirty);// 0x4d9323bfa041
	void RefreshDynamicShadow();// 0x4d9223bfa041
	void RefreshAnalogCursorSpeed();// 0x4d9123bfa041
	void OnSettingConfigSaved();// 0x4d9023bfa041
	void OnPickupSettingChanged();// 0x4d8f23bfa041
	bool IsLowLevelDevice();// 0x4d8e23bfa041
	bool IsHighlightMomentOpen();// 0x4d8d23bfa041
	bool IsDefaultEnableDynamicShadow();// 0x4d8c23bfa041
	void InitializeSettings(SolarGameInstanceBase* GameInstance);// 0x4d8b23bfa041
	void Init(SolarGameInstanceBase* GameInstance);// 0x4d8a23bfa041
	int GetCurNativeRefreshRate();// 0x4d8923bfa041
	bool FixConfigVersion();// 0x4d8823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameUserSettings.DeveloperSettings.Object
	PickupUserSettings PickupSettings;//[Offset: 0x38, Size: 0x18]
	GraphicsUserSettings GraphicsSettings;//[Offset: 0x50, Size: 0x40]
	WeaponUserSettings WeaponSettings;//[Offset: 0x90, Size: 0x20]
	LanguageUserSettings LanguageSettings;//[Offset: 0xb0, Size: 0x3]
	CharacterVoiceUserSettings CharacterVoiceSettings;//[Offset: 0xb3, Size: 0x1]
	SoundUserSettings SoundSettings;//[Offset: 0xb8, Size: 0x60]
	BasicUserSettings BasicSettings;//[Offset: 0x118, Size: 0xb]
	SensitivityUserSettings SensitivitySettings;//[Offset: 0x124, Size: 0x94]
	ShakeUserSettings ShakeSettings;//[Offset: 0x1b8, Size: 0x1]
	VehicleControlUserSettings DriverSettings;//[Offset: 0x1b9, Size: 0x5]
	ChatOperatorUserSettings ChatOperatorSettings;//[Offset: 0x1be, Size: 0x2]
	SoftClassPath DefaultSettingsRangePath;//[Offset: 0x1c0, Size: 0x18]
	bool bIsSynchronized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	enum ConfigVersion;//[Offset: 0x1d9, Size: 0x1]
	bool bFirstTimeLanunchGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da, Size: 0x1]
	FString ToJsonObjectString();// 0x4d8723bfa041
	WeaponUserSettings GetWeaponSettings();// 0x4d8623bfa041
	SoundUserSettings GetSoundSettings();// 0x4d8523bfa041
	ShakeUserSettings GetShakeSettings();// 0x4d8423bfa041
	SensitivityUserSettings GetSensitivitySettings();// 0x4d8323bfa041
	PickupUserSettings GetPickupSettings();// 0x4d8223bfa041
	LanguageUserSettings GetLanguageSettings();// 0x4d8123bfa041
	GraphicsUserSettings GetGraphicsSettings();// 0x4d8023bfa041
	bool GetEnableOpponentPerspectiveByDefault();// 0x4d7f23bfa041
	VehicleControlUserSettings GetDriverSettings();// 0x4d7e23bfa041
	ChatOperatorUserSettings GetChatOperatorSettings();// 0x4d7d23bfa041
	CharacterVoiceUserSettings GetCharacterVoiceSettings();// 0x4d7c23bfa041
	BasicUserSettings GetBasicSettings();// 0x4d7b23bfa041
	void FromJsonObjectString(FString JsonStr);// 0x4d7a23bfa041
	bool CheckJsonObjectString(FString JsonStr);// 0x4d7923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: DeveloperSettings.Object
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponUserSettings
	bool bAimAssist_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bVehicleWeaponAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bEnableRecoilRecovery_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bAutoScope_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bAutoScope_SpecialButtonGlobal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bAutoScopeRifle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bAutoScopeSubmachinegun_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bAutoScopeShotgunSingle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bAutoScopeShotgunAuto_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bAutoScopeSniperSingle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bAutoScopeSniperAuto_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bAutoScopeSpecial_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bSniperSingleShootOnPressed_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bShotgunSingleShootOnPressed_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	CurveFloat* HitEffectDistanceToScaleCurve;//[Offset: 0x10, Size: 0x8]
	enum DoScopeMode_Global;//[Offset: 0x18, Size: 0x1]
	bool bOpenVehicleWeaponCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bVehicleAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bVehicleAutoScope_SpecialButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bCanScopeButtonRotateView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundUserSettings
	ConditionValue Sound_Global;//[Offset: 0x0, Size: 0x8]
	ConditionValue Sound_Action;//[Offset: 0x8, Size: 0x8]
	ConditionValue Sound_BackGround;//[Offset: 0x10, Size: 0x8]
	ConditionValue Sound_Character;//[Offset: 0x18, Size: 0x8]
	int MicroPhoneVolume;//[Offset: 0x20, Size: 0x4]
	int LoudSpeakerVolume;//[Offset: 0x24, Size: 0x4]
	enum Sound_Quality;//[Offset: 0x28, Size: 0x1]
	enum AudioMode;//[Offset: 0x29, Size: 0x1]
	int MicLevel;//[Offset: 0x2c, Size: 0x4]
	int SpeakerLevel;//[Offset: 0x30, Size: 0x4]
	int ChooseMicIndex;//[Offset: 0x34, Size: 0x4]
	int ChooseSpeakerIndex;//[Offset: 0x38, Size: 0x4]
	FString MicDeviceID;//[Offset: 0x40, Size: 0x10]
	FString SpeakerDeviceID;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ConditionValue
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int CurValue;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PickupUserSettings
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bStopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	PickupItemData[] PickupItemList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PickupItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemNum;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GraphicsUserSettings
	enum FpsLevel;//[Offset: 0x0, Size: 0x1]
	enum ContentScaleFactorLevel;//[Offset: 0x1, Size: 0x1]
	enum ColorThemeType;//[Offset: 0x2, Size: 0x1]
	bool MSAAIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool VSyncIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FloatValue AdaptationUIValue;//[Offset: 0x8, Size: 0x4]
	bool EnableDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	enum SelectQualityLevel;//[Offset: 0xd, Size: 0x1]
	int SavedVersion;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FloatValue
	float Value;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LanguageUserSettings
	enum CurLanguage;//[Offset: 0x0, Size: 0x1]
	enum CurCharacterVoiceLanguage;//[Offset: 0x1, Size: 0x1]
	bool HasLoadedChinese;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterVoiceUserSettings
	enum CurVoiceLanguage;//[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BasicUserSettings
	bool bOpenUniversalMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOpenQuickChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAutoOverturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bPowerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bOpenRecruitRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum curGyroscpeChooseLevel;//[Offset: 0x5, Size: 0x1]
	bool bHorizontalGyroscopeInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bVerticalGyroscopeInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	enum CurrentDamageTextDisplayMode;//[Offset: 0x8, Size: 0x1]
	enum OpenHighlightMoment;//[Offset: 0x9, Size: 0x1]
	enum OpenOutline;//[Offset: 0xa, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SensitivityUserSettings
	enum Sensitivity_AccMode;//[Offset: 0x0, Size: 0x1]
	FloatValue Sensitivity_CurveScale;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_Free;//[Offset: 0x8, Size: 0x4]
	FloatValue Sensitivity_SecondarySkills;//[Offset: 0xc, Size: 0x4]
	FloatValue Sensitivity_SuperSkills;//[Offset: 0x10, Size: 0x4]
	CameraSensitivityData Sensitivity_NoShoot;//[Offset: 0x14, Size: 0x20]
	CameraSensitivityData Sensitivity_Shoot;//[Offset: 0x34, Size: 0x20]
	GyroscopeSensitivityData GyroscopeData;//[Offset: 0x54, Size: 0x20]
	FloatValue Sensitivity_VehicleDriver;//[Offset: 0x74, Size: 0x4]
	FloatValue Sensitivity_VehicleFire;//[Offset: 0x78, Size: 0x4]
	VehicleCameraSensitivityData Sensitivity_Vehicle_NoShoot;//[Offset: 0x7c, Size: 0xc]
	VehicleCameraSensitivityData Sensitivity_Vehicle_Shoot;//[Offset: 0x88, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraSensitivityData
	FloatValue Sensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue Sensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue Sensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue Sensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GyroscopeSensitivityData
	FloatValue GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue GyroscopeSensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue GyroscopeSensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleCameraSensitivityData
	FloatValue Sensitivity_Lens_Two;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ShakeUserSettings
	enum ShakeMainStatus;//[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleControlUserSettings
	enum WheeledVehicleDriveType;//[Offset: 0x0, Size: 0x1]
	bool bCanAdjustInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanAutoSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	enum LastWheeledVehicleDriveType;//[Offset: 0x3, Size: 0x1]
	bool bCanVehicleCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ChatOperatorUserSettings
	enum Speaker;//[Offset: 0x0, Size: 0x1]
	enum Mic;//[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameSettingsRange.Object
	SoundSettingsRange SoundSettings;//[Offset: 0x28, Size: 0x20]
	SensitivitySettingsRange SensitivitySettings;//[Offset: 0x48, Size: 0x120]
	GraphicsSettingsRange GraphicsSettings;//[Offset: 0x168, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundSettingsRange
	RangeData Sound_Global;//[Offset: 0x0, Size: 0x8]
	RangeData Sound_Action;//[Offset: 0x8, Size: 0x8]
	RangeData Sound_BackGround;//[Offset: 0x10, Size: 0x8]
	RangeData Sound_Character;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: RangeData
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SensitivitySettingsRange
	RangeData Sensitivity_CurveScale;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Free;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_SecondarySkills;//[Offset: 0x10, Size: 0x8]
	RangeData Sensitivity_SuperSkills;//[Offset: 0x18, Size: 0x8]
	CameraSensitivityRangeData Sensitivity_NoShoot;//[Offset: 0x20, Size: 0x40]
	CameraSensitivityRangeData Sensitivity_Shoot;//[Offset: 0x60, Size: 0x40]
	VehicleCameraSensitivityRangeData Sensitivity_Vehicle_NoShoot;//[Offset: 0xa0, Size: 0x18]
	VehicleCameraSensitivityRangeData Sensitivity_Vehicle_Shoot;//[Offset: 0xb8, Size: 0x18]
	RangeData Sensitivity_VehicleDriver;//[Offset: 0xd0, Size: 0x8]
	RangeData Sensitivity_VehicleFire;//[Offset: 0xd8, Size: 0x8]
	GyroscopeSensitivityRangeData Sensitivity_GyroscopeData;//[Offset: 0xe0, Size: 0x40]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraSensitivityRangeData
	RangeData Sensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData Sensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData Sensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData Sensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleCameraSensitivityRangeData
	RangeData Sensitivity_Lens_Two;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GyroscopeSensitivityRangeData
	RangeData GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData GyroscopeSensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData GyroscopeSensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GraphicsSettingsRange
	RangeData AdaptationUIValue;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarLoginManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	void InitFromLogin();// 0x4f8b23bfa041
	void Init(SolarGameInstanceBase* GameInstance);// 0x4f8a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarLockSettingsMgr.Object
	SolarLockSettings* CurLockSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	SolarLockSettings* DefaultLockSettings;//[Offset: 0x48, Size: 0x8]
	void SaveLockSettings();// 0x4f8923bfa041
	void LoadLockSettings();// 0x4f8823bfa041
	void Init(SolarGameInstanceBase* GameInstance);// 0x4f8723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarLockSettings.SaveGame.Object
	<int,bool> FeaturesLockStatus;//[Offset: 0x28, Size: 0x50]
	void CopyFrom(SolarLockSettings* InLockSettings);// 0x4f8623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameProgressManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	delegate OnGameStart;//[Offset: 0x38, Size: 0x10]
	void OnWorldConditionsCompleted();// 0x24ad23bfa041
	void OnStreamingLevelComplete();// 0x24ac23bfa041
	void OnShadersCompileComplete();// 0x24ab23bfa041
	void OnGameStart__DelegateSignature();// 0x24aa23bfa041
	void K2_ReceiveGlobalConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x24a923bfa041
	void K2_ReceiveConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x24a823bfa041
	void K2_OnGlobalConditionCompleted(GameplayTag CompletedCondition);// 0x24a723bfa041
	void K2_OnConditionCompleted(World* CurrentWorld, GameplayTag CompletedCondition);// 0x24a623bfa041
	bool IsGameStartNeedCondition(const Object* WorldContextObject, out const GameplayTag InCondition);// 0x24a523bfa041
	bool IsConditionInList(out const GameplayTag InCondition, World* WorldCheck);// 0x24a423bfa041
	bool IsAllStartGameConditionCompleted(World* WorldCheck);// 0x24a323bfa041
	bool InitGameStartCondition(World* CurrentWorld, GameplayTagContainer ConditionList);// 0x24a223bfa041
	bool HasGameStarted(const Object* WorldContextObject);// 0x24a123bfa041
	SolarGameProgressManager* Get(const Object* WorldContextObject);// 0x24a023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarABTestManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarHttpManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	<FString,int> ReportStr2ReprotTimes;//[Offset: 0x48, Size: 0x50]
	int ReportRetryTimes;//[Offset: 0x98, Size: 0x4]
	delegate OnImgUploaded;//[Offset: 0xa0, Size: 0x10]
	int Jank;//[Offset: 0xcc, Size: 0x4]
	int BigJank;//[Offset: 0xd0, Size: 0x4]
	float FPS25;//[Offset: 0xd4, Size: 0x4]
	int PeakPlayerNum;//[Offset: 0x100, Size: 0x4]
	int PeakAINum;//[Offset: 0x104, Size: 0x4]
	int PeakVehicleNum;//[Offset: 0x108, Size: 0x4]
	void UploadToHTTP(FString URL, FString str);// 0x24ce23bfa041
	void UploadImg(out const int AppId, out const int AppUid, FString AppToken, out const int GameID, out const int Uid, FString SourceImgPath);// 0x24cd23bfa041
	FString StringToBase64(FString str);// 0x24cc23bfa041
	void StopRecordJank();// 0x24cb23bfa041
	void StartRecordJank();// 0x24ca23bfa041
	void ResetPerfData(bool bKeepCurrentData);// 0x24c923bfa041
	void ReportAbnormalPlayerWeaponToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InAttackLocation, FString InHitLocation, FString InHitBoneScale, FString InWeaponBlueprintName);// 0x24c823bfa041
	void ReportAbnormalPlayerVehicleToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InVehiclePreviousLocation, FString InVehiclePresentLocation, FString InVehicleBlueprintName);// 0x24c723bfa041
	void ReportAbnormalPlayerToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue);// 0x24c623bfa041
	void ReportAbnormalPlayerBaittingToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InDamageType, FString InBotLocation, FString InPlayerLocation);// 0x24c523bfa041
	void ReCordOnlineError(FString InStr);// 0x24c423bfa041
	void OnImgUploaded__DelegateSignature(int RespCode, FString RespMsg, FString ImgUrl);// 0x24c323bfa041
	void InitializeDelegates();// 0x24c223bfa041
	FString GetHttpReportUrl();// 0x24c123bfa041
	float GetAvgNum(int PerfType);// 0x24c023bfa041
	void ClearDelegates();// 0x24bf23bfa041
	void CleanPerfDirtyData();// 0x24be23bfa041
	FString Base64ToMD5(FString str);// 0x24bd23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarActivityManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTutorialManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	enum CurrentTutorialStage;//[Offset: 0x50, Size: 0x1]
	delegate OnRegisterEvent;//[Offset: 0x58, Size: 0x10]
	delegate OnStepActionBegan;//[Offset: 0x68, Size: 0x10]
	delegate OnStepActionEnded;//[Offset: 0x78, Size: 0x10]
	delegate OnStepActionReset;//[Offset: 0x88, Size: 0x10]
	delegate OnStepActionDisposed;//[Offset: 0x98, Size: 0x10]
	TutorialGlobalConfig* TutorialGlobalConfig;//[Offset: 0x118, Size: 0x8]
	<int,TutorialTableRow> TutorialTableMapRows;//[Offset: 0x120, Size: 0x50]
	TutorialActionTableRow[] ActionTableRows;//[Offset: 0x170, Size: 0x10]
	<int,TutorialConditionTableRow> ConditionTableMapRows;//[Offset: 0x180, Size: 0x50]
	<int,Tutorial*> Tutorials;//[Offset: 0x1d0, Size: 0x50]
	bool bIsConditionCheckCodeParsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	FString TutorialDataTablePath;//[Offset: 0x338, Size: 0x10]
	FString ActionDataTablePath;//[Offset: 0x348, Size: 0x10]
	FString ConditionDataTablePath;//[Offset: 0x358, Size: 0x10]
	FString TutorialGlobalConfigPath;//[Offset: 0x368, Size: 0x10]
	<uint16,FName> OriginCheckFuncNames;//[Offset: 0x378, Size: 0x50]
	<uint16,Function*> CheckFuncs;//[Offset: 0x3c8, Size: 0x50]
	<FString,CacheConditionInfo> CacheRanConditions;//[Offset: 0x428, Size: 0x50]
	TutorialLevelSaveGame* CurrentTutorialLevelSaveGame;//[Offset: 0x488, Size: 0x8]
	FString[] TriggerWidgetClicked(out const FString[] Params);// 0x598e23bfa041
	FString[] TriggerWeaponSlotHasSpecifiedItem(out const FString[] Params);// 0x598d23bfa041
	FString[] TriggerUseSpecifiedWeaponAbility(out const FString[] Params);// 0x598c23bfa041
	FString[] TriggerUseSpecifiedVehicleWeapon(out const FString[] Params);// 0x598b23bfa041
	FString[] TriggerUseSpecifiedVehicleAbility(out const FString[] Params);// 0x598a23bfa041
	FString[] TriggerTutorialLevelDone(out const FString[] Params);// 0x598923bfa041
	void TriggerTutorialInternal(enum TriggerID);// 0x598823bfa041
	void TriggerTutorialEvents(out enum[] TriggerTypeArrays, bool bPostTrigger);// 0x598723bfa041
	void TriggerTutorialEvent(enum TriggerType, bool bPostTrigger);// 0x598623bfa041
	FString[] TriggerSprintingContinuously(out const FString[] Params);// 0x598523bfa041
	FString[] TriggerSpecifiedPlayerProficiency(out const FString[] Params);// 0x598423bfa041
	FString[] TriggerShieldNotFull(out const FString[] Params);// 0x598323bfa041
	FString[] TriggerRunningStep(out const FString[] Params);// 0x598223bfa041
	FString[] TriggerPlayerUpgradeBattleLevel(out const FString[] Params);// 0x598123bfa041
	FString[] TriggerPlayerInTargetStage(out const FString[] Params);// 0x598023bfa041
	FString[] TriggerPlayerAcountLevel(out const FString[] Params);// 0x597f23bfa041
	FString[] TriggerOpenTreasureBox(out const FString[] Params);// 0x597e23bfa041
	FString[] TriggerOpenBigMapUMG(out const FString[] Params);// 0x597d23bfa041
	FString[] TriggerNearAirDropBox(out const FString[] Params);// 0x597c23bfa041
	FString[] TriggerJumpBegin(out const FString[] Params);// 0x597b23bfa041
	FString[] TriggerHasUIPanelOpened(out const FString[] Params);// 0x597a23bfa041
	FString[] TriggerHasTakenDamage(out const FString[] Params);// 0x597923bfa041
	FString[] TriggerHasSpecifiedItem(out const FString[] Params);// 0x597823bfa041
	FString[] TriggerHasSpecifiedEquipmentByType(out const FString[] Params);// 0x597723bfa041
	FString[] TriggerFeatureUnlock(out const FString[] Params);// 0x597623bfa041
	FString[] TriggerEquipSpecifiedWeapon(out const FString[] Params);// 0x597523bfa041
	FString[] TriggerBotAIDying(out const FString[] Params);// 0x597423bfa041
	FString[] TriggerApproachTreasureBox(out const FString[] Params);// 0x597323bfa041
	FString[] TriggerAlreadyTriggeredMaxCount(out const FString[] Params);// 0x597223bfa041
	FString[] TriggerAirDropBoxLanded(out const FString[] Params);// 0x597123bfa041
	void TickActivatedTutorials();// 0x597023bfa041
	void SetWidgetInteractionFlag(FString InWidgetName, enum InWidgetInteractionFlag);// 0x596f23bfa041
	void SetTipsUIInteractionFlag(int TutorialID, bool boolChange);// 0x596e23bfa041
	void SetSignNameBool(FString SignName, bool InValue);// 0x596d23bfa041
	void SetFlagNameCount(FString FlagName, int Num);// 0x596c23bfa041
	void SetAirDropBoxLandedAddOneNum(int Value);// 0x596b23bfa041
	void SaveTutorialLevelSaveGame();// 0x596a23bfa041
	void SaveLevelTutorialID(FString InLevelName, int InTutorialID);// 0x596923bfa041
	void SaveLevelTutorialHasFinished(FString InLevelName, bool InFinished);// 0x596823bfa041
	void SaveLevelPlayerStartTag(FString InLevelName, FString InPlayerStartTag);// 0x596723bfa041
	void RequestAddTutorialProgress(int TutorialID, int Progress);// 0x596623bfa041
	void ReceiveOnSingleTutorialStart(int TutorialID);// 0x596523bfa041
	void ReceiveOnSingleTutorialFinished(int TutorialID);// 0x596423bfa041
	void ReceiveLoadTutorialLevelData();// 0x596323bfa041
	void ReceiveLoadData();// 0x596223bfa041
	void ReceiveClearData();// 0x596123bfa041
	void OnPostLoadMap(FString LevelName);// 0x596023bfa041
	bool IsInTutorialLevel();// 0x595f23bfa041
	void InitGuideActorByActionID(int[] ActionIDs, TutorialLevelInteractableActor* TutorialGuideActor);// 0x595e23bfa041
	bool HasAnyTutorialPlaying();// 0x595d23bfa041
	bool HasAnyMandatoryTutorialPlaying();// 0x595c23bfa041
	void GM_OpenUI(int ID);// 0x595b23bfa041
	void GM_CloseUI(int ID);// 0x595a23bfa041
	enum GetWidgetInteractionFlag(FString InWidgetName);// 0x595923bfa041
	int GetTutorialSingleRoundTriggerMax(int TutorialID);// 0x595823bfa041
	TutorialLevelSaveGame* GetTutorialLevelSaveGame();// 0x595723bfa041
	bool GetTipsUIInteractionFlag(int TutorialID);// 0x595623bfa041
	bool GetSignNameBool(FString SignName);// 0x595523bfa041
	UserWidget* GetPanelUI(FString PanelName);// 0x595423bfa041
	int GetLevelTutorialID(FString InLevelName, int DefaultValue);// 0x595323bfa041
	bool GetLevelTutorialHasFinished(FString InLevelName, bool DefaultValue);// 0x595223bfa041
	int GetFlagNameCount(FString FlagName);// 0x595123bfa041
	byte GetCurrentPlayerLevel();// 0x595023bfa041
	TutorialActionTableRow GetActionDataByID(int ActionDataID);// 0x594f23bfa041
	Widget* FindWidget(out const FName[] InWidgetLink);// 0x594e23bfa041
	void EnterTutorialLevel(FString LevelName, int Proficiency);// 0x594d23bfa041
	bool CheckTutorialTipUIOnClick(out const FString[] InParams);// 0x594c23bfa041
	bool CheckIfWidgetReleased(out const FString[] InParams);// 0x594b23bfa041
	bool CheckIfWidgetPressed(out const FString[] InParams);// 0x594a23bfa041
	bool CheckIfWidgetPlayAnimationFinish(out const FString[] InParams);// 0x594923bfa041
	bool CheckIfWidgetClicked(out const FString[] InParams);// 0x594823bfa041
	bool CheckIfWeaponSlotHasSpecifiedItem(out const FString[] InParams);// 0x594723bfa041
	bool CheckIfUIPanelOpened(out const FString[] InParams);// 0x594623bfa041
	bool CheckIfTutorialLevelDone(out const FString[] InParams);// 0x594523bfa041
	bool CheckIfTakeDamage(out const FString[] InParams);// 0x594423bfa041
	bool CheckIfSprintingContinuously(out const FString[] InParams);// 0x594323bfa041
	bool CheckIfSpecifiedPlayerProficiency(out const FString[] InParams);// 0x594223bfa041
	bool CheckIfShieldNotFull();// 0x594123bfa041
	bool CheckIfRunningStep(out const FString[] InParams);// 0x594023bfa041
	bool CheckIfReloading();// 0x593f23bfa041
	bool CheckIfRechargingShield();// 0x593e23bfa041
	bool CheckIfPlayerLevel(out const FString[] InParams);// 0x593d23bfa041
	bool CheckIfPlayerInTargetScene(out const FString[] InParams);// 0x593c23bfa041
	bool CheckIfPlayerInBattling();// 0x593b23bfa041
	bool CheckIfPlayerBattleLevel(out const FString[] InParams);// 0x593a23bfa041
	bool CheckIfOpenBigMapUMG();// 0x593923bfa041
	bool CheckIfNearAirDropBox();// 0x593823bfa041
	bool CheckIfJumpBegin();// 0x593723bfa041
	bool CheckIfJetFlyingVertically();// 0x593623bfa041
	bool CheckIfJetFlyingHorizontally();// 0x593523bfa041
	bool CheckIfInWater();// 0x593423bfa041
	bool CheckIfInVehicle();// 0x593323bfa041
	bool CheckIfInAir();// 0x593223bfa041
	bool CheckIfHasSpecifiedItem(out const FString[] InParams);// 0x593123bfa041
	bool CheckIfHasSpecifiedEquipmentByType(out const FString[] InParams);// 0x593023bfa041
	bool CheckIfHasSpecifiedEquipmentById(out const FString[] InParams);// 0x592f23bfa041
	bool CheckIfHasShield();// 0x592e23bfa041
	bool CheckIfHasMatched();// 0x592d23bfa041
	bool CheckIfGrowTaskInLevelReceivedAnimationFinish(out const FString[] InParams);// 0x592c23bfa041
	bool CheckIfGrowLevelRewardIsInStatus(out const FString[] InParams);// 0x592b23bfa041
	bool CheckIfFeatureUnlock(out const FString[] InParams);// 0x592a23bfa041
	bool CheckIfFeatureOpen(out const FString[] InParams);// 0x592923bfa041
	bool CheckIfEquipSpecifiedWeapon(out const FString[] InParams);// 0x592823bfa041
	bool CheckIfDying();// 0x592723bfa041
	bool CheckIfDead();// 0x592623bfa041
	bool CheckIfCurrentWeaponAmmoFull();// 0x592523bfa041
	bool CheckIfConsumingMedicine();// 0x592423bfa041
	bool CheckIfClaimBattlePassLevelReward(out const FString[] InParams);// 0x592323bfa041
	bool CheckIfCanUseSpecifiedWeaponAbility(out const FString[] InParams);// 0x592223bfa041
	bool CheckIfCanUseSpecifiedVehicleWeapon(out const FString[] InParams);// 0x592123bfa041
	bool CheckIfCanUseSpecifiedVehicleAbility(out const FString[] InParams);// 0x592023bfa041
	bool CheckIfCanOpenTreasureBox();// 0x591f23bfa041
	bool CheckIfCanJetFlyVertically();// 0x591e23bfa041
	bool CheckIfCanJetFlyHorizontally();// 0x591d23bfa041
	bool CheckIfBoughtBattlePass();// 0x591c23bfa041
	bool CheckIfBotAIDying(out const FString[] InParams);// 0x591b23bfa041
	bool CheckIfBattlePassLevelGreaterThan(out const FString[] InParams);// 0x591a23bfa041
	bool CheckIfApproachElectronicTreasureBox();// 0x591923bfa041
	bool CheckIfAlreadyTriggeredMaxCount(out const FString[] InParams);// 0x591823bfa041
	bool CheckIfAirDropBoxLanded();// 0x591723bfa041
	bool CheckConsumeItemButtonType(out const FString[] InParams);// 0x591623bfa041
	void AddTutorialProgress(int TutorialID, int Progress);// 0x591523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialLevelInteractableActor.Actor.Object
	void UnregisterEvent();// 0x5b0823bfa041
	void RegisterEvent();// 0x5b0723bfa041
	SolarTutorialManager* GetSolarTutorialManager();// 0x5b0623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialLevelSaveGame.SaveGame.Object
	<FString,TutorialLevelSaveData> TutorialLevelSaveDatas;//[Offset: 0x28, Size: 0x50]
	enum PlayerProficiency;//[Offset: 0x78, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialLevelSaveData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	FString PlayerStartTag;//[Offset: 0x10, Size: 0x10]
	bool bTutorialHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int TutorialID;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialActionTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	enum UIType;//[Offset: 0x20, Size: 0x1]
	TutorialTipAndEffectUI TutorialTipAndEffectUI;//[Offset: 0x28, Size: 0x70]
	TutorialSpecialUI TutorialSpecialUI;//[Offset: 0x98, Size: 0x18]
	int NoticeLocTextId;//[Offset: 0xb0, Size: 0x4]
	TutorialSubtitle TutorialSubtitle;//[Offset: 0xb8, Size: 0x18]
	bool bRepeatTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	TutorialRepeatTip RepeatTip;//[Offset: 0xd8, Size: 0x18]
	TutorialBackgroundMusicTableRow TutorialBackgroundMusic;//[Offset: 0xf0, Size: 0x20]
	TutorialSoftCondition EndCondition;//[Offset: 0x110, Size: 0x28]
	TutorialSoftCondition InterruptCondition;//[Offset: 0x138, Size: 0x28]
	float WaitTime;//[Offset: 0x160, Size: 0x4]
	float MinExecuteTime;//[Offset: 0x164, Size: 0x4]
	int[] OpenBehaviors;//[Offset: 0x168, Size: 0x10]
	int[] CloseBehaviors;//[Offset: 0x178, Size: 0x10]
	int FixedTriggerAreaID;//[Offset: 0x188, Size: 0x4]
	int[] BotAISpawnIDs;//[Offset: 0x190, Size: 0x10]
	int[] BotAIDeathIDs;//[Offset: 0x1a0, Size: 0x10]
	int[] BotAIOnVehicleSpawnIDs;//[Offset: 0x1b0, Size: 0x10]
	int[] BotAIOnVehicleDeathIDs;//[Offset: 0x1c0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialTableRowBase.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialTipAndEffectUI
	FString LinkedComponent;//[Offset: 0x0, Size: 0x10]
	FString LimitedListView;//[Offset: 0x10, Size: 0x10]
	SoftObjectPath TutorialExpressionBPPath;//[Offset: 0x20, Size: 0x18]
	SoftObjectPath TutorialEffectBPPath;//[Offset: 0x38, Size: 0x18]
	Vector2D TutorialBPLocation;//[Offset: 0x50, Size: 0x8]
	bool HorizontalDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int LocTextID;//[Offset: 0x5c, Size: 0x4]
	float LocTextDuration;//[Offset: 0x60, Size: 0x4]
	float DelayShowUITime;//[Offset: 0x64, Size: 0x4]
	float WaitUIShowTime;//[Offset: 0x68, Size: 0x4]
	enum UIParent;//[Offset: 0x6c, Size: 0x1]
	bool OpenEffectSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	bool NeedMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialSpecialUI
	SoftObjectPath TutorialSpecialUIBPPath;//[Offset: 0x0, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialSubtitle
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x0, Size: 0x10]
	float DelayTime;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialSingleSubtitle
	FString LocalTextId;//[Offset: 0x0, Size: 0x10]
	FString Voice;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialRepeatTip
	float StartTime;//[Offset: 0x0, Size: 0x4]
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialBackgroundMusicTableRow
	FString TutorialPlayMusicName;//[Offset: 0x0, Size: 0x10]
	FString TutorialStopMusicName;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialSoftCondition
	FString ConditionStr;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ConditionBP;//[Offset: 0x10, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialGlobalConfig.DataAsset.Object
	bool bSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	<FString,enum> MapName2TutorialStage;//[Offset: 0x38, Size: 0x50]
	float SubtitleDisappearTime;//[Offset: 0x88, Size: 0x4]
	float AsyncLoadUIDelayTime;//[Offset: 0x8c, Size: 0x4]
	float SameConditionCheckInterval;//[Offset: 0x90, Size: 0x4]
	TutorialLevelConfig TutorialLevelConfig;//[Offset: 0x98, Size: 0x38]
	enum GetTutorialStageByLevelName(FString LevelName);// 0x591423bfa041
	FString GetTutorialLevelMainMapPath();// 0x591323bfa041
	FString GetTutorialLevelMainMapName();// 0x591223bfa041
	TutorialLevelConfigData GetTutorialLevelConfigDataByName(FString LevelName);// 0x591123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialLevelConfig
	TutorialLevelConfigData[] LevelConfigDatas;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath MainMapPath;//[Offset: 0x10, Size: 0x18]
	int VeteranTutorialID;//[Offset: 0x28, Size: 0x4]
	float RepeatOperationTime;//[Offset: 0x2c, Size: 0x4]
	float WaitToEndTime;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialLevelConfigData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	int[] TutorialIds;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	enum Type;//[Offset: 0x20, Size: 0x1]
	enum TriggerStage;//[Offset: 0x21, Size: 0x1]
	TutorialSoftCondition TriggerCondition;//[Offset: 0x28, Size: 0x28]
	int EndNum;//[Offset: 0x50, Size: 0x4]
	TutorialSoftCondition ForeverClosedCondition;//[Offset: 0x58, Size: 0x28]
	int[] ActionIDs;//[Offset: 0x80, Size: 0x10]
	bool bUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bMandatory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool bStartUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]
	bool bWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93, Size: 0x1]
	bool biOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAndroid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialConditionTableRow.TutorialTableRowBase.TableRowBase
	byte TriggerType;//[Offset: 0xc, Size: 0x1]
	FString[] Parameters;//[Offset: 0x10, Size: 0x10]
	FString Description;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Tutorial.Object
	TutorialTableRow Data;//[Offset: 0x60, Size: 0x98]
	TutorialTriggerCondition* TriggerConditionBP;//[Offset: 0xf8, Size: 0x8]
	TutorialTaskSequenceAction* TutorialTask;//[Offset: 0x100, Size: 0x8]
	void Stop();// 0x5afa23bfa041
	void OnSingleTaskFinish();// 0x5af923bfa041
	TutorialTableRow GetTableRowData();// 0x5af823bfa041
	int GetCurrentFinishNum();// 0x5af723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialTriggerCondition.TutorialCondition.Object
	SolarTutorialManager* GetSolarTutorialManager();// 0x5b2023bfa041
	bool CheckSatisfy(out const TutorialTableRow InData);// 0x5b1f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialCondition.Object
	FString GetWorldName();// 0x5afc23bfa041
	SolarCharacter* GetPlayer();// 0x5afb23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TutorialTaskSequenceAction.SequenceNode.ActionNode.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SequenceNode.ActionNode.Object
	ActionNode*[] Nodes;//[Offset: 0x70, Size: 0x10]
	ActionNode*[] ExecutingNodes;//[Offset: 0x80, Size: 0x10]
	int TotalCount();// 0x48d223bfa041
	ActionNode* GetCurrentExecutingNode();// 0x48d123bfa041
	SequenceNode* Append(ActionNode* Node);// 0x48d023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ActionNode.Object
	delegate OnBeganCallback;//[Offset: 0x28, Size: 0x10]
	delegate OnEndedCallback;//[Offset: 0x38, Size: 0x10]
	delegate OnResetCallback;//[Offset: 0x48, Size: 0x10]
	delegate OnDisposedCallback;//[Offset: 0x58, Size: 0x10]
	void Reset();// 0x40d023bfa041
	bool Finished();// 0x40cf23bfa041
	void Finish();// 0x40ce23bfa041
	bool Execute(float DeltaTime);// 0x40cd23bfa041
	bool Disposed();// 0x40cc23bfa041
	void Dispose();// 0x40cb23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CacheConditionInfo
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementStageManager.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	int CurStageIndex;//[Offset: 0x38, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x3c, Size: 0x4]
	DataTable* SettlementConfig;//[Offset: 0x40, Size: 0x8]
	SettlementFormula* Formula;//[Offset: 0x48, Size: 0x8]
	void UpdateModeConfig(const int InConfigID);// 0x48ec23bfa041
	void SkipToTarget();// 0x48eb23bfa041
	void ShowNextStage();// 0x48ea23bfa041
	void ShowDiePage();// 0x48e923bfa041
	void Init();// 0x48e823bfa041
	class SolarUWSettlementBase GetSettlementUIClass();// 0x48e723bfa041
	int GetSettlementStageID();// 0x48e623bfa041
	SettlementConfig GetSettlementConfigRow();// 0x48e523bfa041
	SettlementFormula* GetFormula();// 0x48e423bfa041
	FString GetClassRelativePathName(const class Object InClass);// 0x48e323bfa041
	void CloseDiePage();// 0x48e223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementFormula.Actor.Object
	FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x48e023bfa041
	int GetZomborg(out const SettlementParam_Zomborg InParam);// 0x48df23bfa041
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x48de23bfa041
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam);// 0x48dd23bfa041
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x48dc23bfa041
	int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam);// 0x48db23bfa041
	FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam);// 0x48da23bfa041
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerID, out FString PBName);// 0x48d923bfa041
	float GetKDA(out const SettlementParam_KDA InParam);// 0x48d823bfa041
	FString[] GetGroupResultPlayerExData(FString SolarPlayerID, out FString PBName);// 0x48d723bfa041
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam);// 0x48d623bfa041
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x48d523bfa041
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x48d423bfa041
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param);// 0x48d323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementParam_Zomborg
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float LifeTime;//[Offset: 0x8, Size: 0x4]
	int PlayerRank;//[Offset: 0xc, Size: 0x4]
	float GoldPunishRate;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementParam_WeaponExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float UseTime;//[Offset: 0x8, Size: 0x4]
	int WeaponKillNum;//[Offset: 0xc, Size: 0x4]
	int WeaponAssitNum;//[Offset: 0x10, Size: 0x4]
	float ExpRatio;//[Offset: 0x14, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementParam_PageParam
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int WeaponExpSettlmentNum;//[Offset: 0x4, Size: 0x4]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementParam_CommonExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float LifeTime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x24, Size: 0x4]
	float CoinPunishRatio;//[Offset: 0x28, Size: 0x4]
	int RankCorePunish;//[Offset: 0x2c, Size: 0x4]
	int BaseExp;//[Offset: 0x30, Size: 0x4]
	float ExpRatio;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementParam_KDA
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DeathNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementParam_MVP
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float LifeTime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarUWSettlementBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MvpCharacterID;//[Offset: 0x348, Size: 0x4]
	int MvpSkinID;//[Offset: 0x34c, Size: 0x4]
	SettlementStageManager* SettlementStageManager;//[Offset: 0x350, Size: 0x8]
	void SetStageManager(SettlementStageManager* InStageManager);// 0x59af23bfa041
	void PlayMvpCharacterVoice();// 0x59ae23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementConfig.TableRowBase
	int SettlementID;//[Offset: 0x8, Size: 0x4]
	SettlementStageConfig StageConfig;//[Offset: 0x10, Size: 0x40]
	class SettlementFormula* Formula;//[Offset: 0x50, Size: 0x28]
	bool IsValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementStageConfig
	class SolarUWSettlementBase* Page_Die;//[Offset: 0x0, Size: 0x28]
	int Page_SkipIndex;//[Offset: 0x28, Size: 0x4]
	class SolarUWSettlementBase[] SettlementStage;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CGMCrossLevelDataMgr.Object
	<FString,Object*> CrossLevelData;//[Offset: 0x28, Size: 0x50]
	void RegistryCrossLevelData(FString InSoltName, Object* InDataObj);// 0x421223bfa041
	Object* GetCrossLevelData(FString InSoltName);// 0x421123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGraphicSettings.Object
	uint32 CurrentActiveColorThemeIndex;//[Offset: 0x28, Size: 0x4]
	FrameRateLevelItem FrameRateLevelItem;//[Offset: 0x2c, Size: 0x10]
	<enum,enum> DefaultQualityToDefaultFrameRateLevel;//[Offset: 0x80, Size: 0x50]
	<enum,MaxQualityConfig> DefaultAndCurQualityToMaxFrameRateLevel;//[Offset: 0xd0, Size: 0x50]
	int MobileMaxFrameRate;//[Offset: 0x120, Size: 0x4]
	int HighRefreshRateThreshold;//[Offset: 0x124, Size: 0x4]
	int DefaultMSAALevel;//[Offset: 0x128, Size: 0x4]
	ContentScaleFactorLevelItem ContentScaleFactorLevelItems;//[Offset: 0x130, Size: 0x58]
	<enum,enum> DefaultContentScaleFactorLevel;//[Offset: 0x290, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: FrameRateLevelItem
	enum FrameRateLevel;//[Offset: 0x0, Size: 0x1]
	float FrameRateLobby;//[Offset: 0x4, Size: 0x4]
	float FrameRateInGame;//[Offset: 0x8, Size: 0x4]
	float FrameRatePC;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MaxQualityConfig
	<enum,enum> CurQualityToMaxFrameRateLevel;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: ContentScaleFactorLevelItem
	enum ContentScaleFactorLevel;//[Offset: 0x0, Size: 0x1]
	<enum,float> DeviceLevelContentScaleFactorMap;//[Offset: 0x8, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAccessLuaDataUtils.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	void GetMatchResult(out MatchResult MatchResult);// 0x496423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MatchResult
	FString BattleID;//[Offset: 0x0, Size: 0x10]
	FString BattleAddr;//[Offset: 0x10, Size: 0x10]
	FString Token;//[Offset: 0x20, Size: 0x10]
	int ModeID;//[Offset: 0x30, Size: 0x4]
	int RuleID;//[Offset: 0x34, Size: 0x4]
	FString SelfPlayerID;//[Offset: 0x38, Size: 0x10]
	MatchResult_Group[] Groups;//[Offset: 0x48, Size: 0x10]
	FString MapName;//[Offset: 0x58, Size: 0x10]
	SoftObjectPath MapPath;//[Offset: 0x68, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: MatchResult_Group
	int groupid;//[Offset: 0x0, Size: 0x4]
	MatchResult_Player[] Players;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MatchResult_Player
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	FString playerName;//[Offset: 0x10, Size: 0x10]
	int AvatarID;//[Offset: 0x20, Size: 0x4]
	int fightCharacterID;//[Offset: 0x24, Size: 0x4]
	int fightCharacterSkinID;//[Offset: 0x28, Size: 0x4]
	SoftObjectPath SkinConfigPath;//[Offset: 0x30, Size: 0x18]
	FString CharacterName;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAkSoundManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	void UnloadBankIgnoreStrategy(out const FName BankName);// 0x4a2223bfa041
	void SetVoiceLanguage();// 0x4a2123bfa041
	void ReloadVoiceBanks();// 0x4a2023bfa041
	void OnBankLoadedForEventAtLocationCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x4a1f23bfa041
	void OnAkBankUnloadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x4a1e23bfa041
	void OnAkBankLoadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x4a1d23bfa041
	void LoadBankIgnoreStrategy(out const FName BankName);// 0x4a1c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: KeyMappingManager.Object
	delegate OnKeyMappingUpdate;//[Offset: 0x120, Size: 0x10]
	delegate OnKeyMappingConfirm;//[Offset: 0x130, Size: 0x10]
	delegate OnKeyboardUpdate;//[Offset: 0x140, Size: 0x10]
	<FString,FString> OccupiedKeyMap;//[Offset: 0x160, Size: 0x50]
	KeyMappingFileMgr* KeyMappingFileMgr;//[Offset: 0x260, Size: 0x8]
	void SwitchKeyMappingPlanIndex(int PlanIndex);// 0x458723bfa041
	void SwitchKeyMapping(FString ActionName, int SettingIndex, bool Enable, bool Force);// 0x458623bfa041
	void ResetKeyMapping();// 0x458523bfa041
	bool IsComboKey(FString KeyName);// 0x458423bfa041
	void ImportKeyMappingSetting();// 0x458323bfa041
	bool HasKeyModified();// 0x458223bfa041
	FString[] GetAllActionNames(int PlanIndex);// 0x458123bfa041
	FString[] GetActionKeyMapping(FString ActionName, int PlanIndex, int SettingIndex);// 0x458023bfa041
	void ApplyResult();// 0x457f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: KeyMappingFileMgr.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarSpecialEffectsMgr.Object
<----------Generated by SSpawner v1.0.2---------->


Class: PakHashManager.Object
	delegate OnPakHashCheckFailed;//[Offset: 0x30, Size: 0x10]
	bool bEnablePakHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	<FString,FString> MountedPakHashMap;//[Offset: 0x60, Size: 0x50]
	bool IsPakFileHashsReady();// 0x46dc23bfa041
	bool IsEnablePakHash();// 0x46db23bfa041
	<FString,FString> GetReadyPakFileHashs();// 0x46da23bfa041
	FString[] GetAllMountedPakNames();// 0x46d923bfa041
	bool CheckAllMountedPaks(out const <FString,FString> BasePakMap, out const <FString,FString> PatchPakMap);// 0x46d823bfa041
	void CalculatePakFileMD5();// 0x46d723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarFontManager.Object
	Font* ChineseFont;//[Offset: 0x30, Size: 0x8]
	void SaveChineseFontSetting(bool bHasLoad);// 0x4cea23bfa041
	bool MergeCompositeFont(FString NewFontAssetPath);// 0x4ce923bfa041
	Font* LoadNewFont(FString NewFontAssetPath);// 0x4ce823bfa041
	bool IsNeedMergeChineseFont(bool bAutoLoad);// 0x4ce723bfa041
	void Init();// 0x4ce623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AndroidInputManager.Object
	delegate OnAndroidBackPressed;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: RegistedActorContainer
<----------Generated by SSpawner v1.0.2---------->


Class: AntiCheatSetting
	int64 ID;//[Offset: 0x0, Size: 0x8]
	int64 ValueType;//[Offset: 0x8, Size: 0x8]
	double ValueStart;//[Offset: 0x10, Size: 0x8]
	double ValueEnd;//[Offset: 0x18, Size: 0x8]
	int64 Tolerance;//[Offset: 0x20, Size: 0x8]
	int64 ProbeInterval;//[Offset: 0x28, Size: 0x8]
	FString VariableName;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ScreenshotConfig
	bool EnableOnCurrentReportGameCheating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int MaxCountInRound;//[Offset: 0x4, Size: 0x4]
	FString ScreenshotMoment;//[Offset: 0x8, Size: 0x10]
	int ScreenshotInterval;//[Offset: 0x18, Size: 0x4]
	int ScreenshotWidth;//[Offset: 0x1c, Size: 0x4]
	int ScreenshotQuality;//[Offset: 0x20, Size: 0x4]
	FString ImageSaveType;//[Offset: 0x28, Size: 0x10]
	FString ScreenshotMode;//[Offset: 0x38, Size: 0x10]
	int ImageMaxSize;//[Offset: 0x48, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVibrateManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	GameplayVibrateDataAsset* GameplayVibrateDataAsset;//[Offset: 0x50, Size: 0x8]
	<enum,enum> CurrentVibrateCategoryIntensity;//[Offset: 0x58, Size: 0x50]
	DataTable* WeaponVibrateTable;//[Offset: 0xa8, Size: 0x8]
	VibrateConfig* VibrateConfig;//[Offset: 0xb0, Size: 0x8]
	enum WeaponVibrateFactor;//[Offset: 0xb8, Size: 0x1]
	float CacheWeaponChargeTime;//[Offset: 0xbc, Size: 0x4]
	void Stop();// 0x59f623bfa041
	void SetWeaponVibrateFactor();// 0x59f523bfa041
	void SetVibrateAbilityEnable(bool bOnEnable);// 0x59f423bfa041
	void SetGameplayVibrateIntensityByUserSetting();// 0x59f323bfa041
	void SetGameplayVibrateIntensity(enum Category, enum Intensity);// 0x59f223bfa041
	void SendLoopParam(int Amplitude, int Interval);// 0x59f123bfa041
	void PlayWeaponVibrate(int InWeaponID, enum InType, float InChargeTime);// 0x59f023bfa041
	void Play(FString Name, int Duration, int Loop, int Priority, int Interval, int Amplitude);// 0x59ef23bfa041
	bool GetVibrateAbilityEnable();// 0x59ee23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayVibrateDataAsset.DataAsset.Object
	<enum,VibrateIntensityPlayParams> CategoryIntensityMap;//[Offset: 0x30, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: VibrateIntensityPlayParams
	<enum,VibratePlayParams> IntensityMap;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: VibratePlayParams
	FString ClipToPlay;//[Offset: 0x0, Size: 0x10]
	int Duration;//[Offset: 0x10, Size: 0x4]
	int Loop;//[Offset: 0x14, Size: 0x4]
	int Priority;//[Offset: 0x18, Size: 0x4]
	int Interval;//[Offset: 0x1c, Size: 0x4]
	int Amplitude;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: VibrateConfig.DataAsset.Object
	DataTable* dataTab;//[Offset: 0x30, Size: 0x8]
	<enum,float> WeaponVibrateFactorMap;//[Offset: 0x38, Size: 0x50]
	SoftObjectPath WeaponDataTabPath;//[Offset: 0x88, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartClipComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool IsSupportExtract();// 0x5c2e23bfa041
	Rotator GetHandRotOffset();// 0x5c2d23bfa041
	Vector GetHandLocOffset();// 0x5c2c23bfa041
	float GetDropLifeSpan();// 0x5c2b23bfa041
	FName GetCharacterHandSocket();// 0x5c2a23bfa041
	FName GetCharacterHandInverseSocket();// 0x5c2923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PartID;//[Offset: 0x5f4, Size: 0x4]
	WeaponPartDataAsset* PartDataAsset;//[Offset: 0x600, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartDataAsset.DataAsset.Object
	bool bOnlyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int[] OnlyDataForWeaponSkinIDArray;//[Offset: 0x38, Size: 0x10]
	SoftObjectPath ViewStaticMeshPath;//[Offset: 0x48, Size: 0x18]
	Transform PreviewTransform;//[Offset: 0x60, Size: 0x30]
	SoftObjectPath FightStaticMeshPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath PartIcon;//[Offset: 0xa8, Size: 0x18]
	<int,Vector> SpecificScaleMap;//[Offset: 0xc0, Size: 0x50]
	WeaponPartWeaponAttributeDataAsset* WeaponAttributeConfig;//[Offset: 0x110, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartWeaponAttributeDataAsset.DataAsset.Object
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x30, Size: 0x10]
	WeaponPartWeaponAttributeByWeaponType[] ModifiersByWeaponType;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartWeaponAttributeByWeaponType
	enum WeaponType;//[Offset: 0x0, Size: 0x1]
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x8, Size: 0x10]
	WeaponPartWeaponAttributeByWeaponID[] ModifiersByWeaponID;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartWeaponAttributeByWeaponID
	int weaponid;//[Offset: 0x0, Size: 0x4]
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVirtualBulletHitParameter
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	float FireTimeStamp;//[Offset: 0x4, Size: 0x4]
	float HitTimeStamp;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize PlayerViewDir;//[Offset: 0xc, Size: 0xc]
	int8 FireChargePhase;//[Offset: 0x18, Size: 0x1]
	float FireChargeTime;//[Offset: 0x1c, Size: 0x4]
	int HitStartIndex;//[Offset: 0x20, Size: 0x4]
	Vector_NetQuantize StartLoc;//[Offset: 0x24, Size: 0xc]
	Vector_NetQuantize TargetLoc;//[Offset: 0x30, Size: 0xc]
	AmmoConfig* Ammo;//[Offset: 0x40, Size: 0x8]
	SolarWeaponHitAntiData[] HitAntiDatas;//[Offset: 0x48, Size: 0x10]
	HitResult[] Hits;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponHitAntiData
	Vector_NetQuantize RelavantHitLocationWithCharacter;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize HitBoneScale;//[Offset: 0xc, Size: 0xc]
	Quat HitBoneRotation;//[Offset: 0x20, Size: 0x10]
	Vector_NetQuantize HitLoc;//[Offset: 0x30, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVirtualBulletSpawnParameter
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	float FireTimeStamp;//[Offset: 0x4, Size: 0x4]
	float PreElapsedTime;//[Offset: 0x8, Size: 0x4]
	Vector PlayerViewDir;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize PlayerViewLoc;//[Offset: 0x18, Size: 0xc]
	byte IsScopeOpen;//[Offset: 0x24, Size: 0x1]
	int8 FireChargePhase;//[Offset: 0x25, Size: 0x1]
	float FireChargeTime;//[Offset: 0x28, Size: 0x4]
	Vector_NetQuantize StartLoc;//[Offset: 0x2c, Size: 0xc]
	Vector_NetQuantize TargetLoc;//[Offset: 0x38, Size: 0xc]
	Vector_NetQuantizeNormal Dir;//[Offset: 0x44, Size: 0xc]
	Vector_NetQuantize MuzzleFxLoc;//[Offset: 0x50, Size: 0xc]
	float CurveOffsetAngle;//[Offset: 0x5c, Size: 0x4]
	SolarVirtualBulletHomingTarget HomingTarget;//[Offset: 0x60, Size: 0x18]
	AmmoConfig* Ammo;//[Offset: 0x78, Size: 0x8]
	FString AntiData;//[Offset: 0x80, Size: 0x10]
	Actor* Target;//[Offset: 0x90, Size: 0x8]
	Vector HitTargetRelativeLocation;//[Offset: 0x98, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVirtualBulletHomingTarget
	bool bSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bLocalCharacterLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	Actor* HomingTargetActor;//[Offset: 0x4, Size: 0x8]
	Vector CurrentLoc;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: SpawnProjParam
	Vector_NetQuantize Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	byte Mode;//[Offset: 0x18, Size: 0x1]
	byte CurRocketNum;//[Offset: 0x19, Size: 0x1]
	bool bTriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1]
	float Scale;//[Offset: 0x1c, Size: 0x4]
	float SpeedScale;//[Offset: 0x20, Size: 0x4]
	Actor* Target;//[Offset: 0x24, Size: 0x8]
	uint32 SpawnID;//[Offset: 0x2c, Size: 0x4]
	float Timestamp;//[Offset: 0x30, Size: 0x4]
	SolarPlayerController* InstigatorController;//[Offset: 0x34, Size: 0x8]
	Vector_NetQuantize RelativeLocation;//[Offset: 0x3c, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: MutiBulletHitData
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	int8 FireMode;//[Offset: 0x4, Size: 0x1]
	int8 IsScopeOpen;//[Offset: 0x5, Size: 0x1]
	bool bValidHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	Vector WeaponLocation;//[Offset: 0x14, Size: 0xc]
	float ServerTimeSeconds;//[Offset: 0x20, Size: 0x4]
	float DamageScale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	SolarWeaponHitAntiData[] HitAntiDatas;//[Offset: 0x30, Size: 0x10]
	BulletHitDetailData[] HitDetailDataArray;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PlaySoundParams
	bool HasSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool InSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int SoundFireAutoCount;//[Offset: 0x4, Size: 0x4]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: FireMode
	enum HoldAction;//[Offset: 0x0, Size: 0x1]
	byte Index;//[Offset: 0x1, Size: 0x1]
	int AmmoReserve;//[Offset: 0x8, Size: 0x4]
	int AmmoCapacity;//[Offset: 0xc, Size: 0x4]
	float FireRateAccumulation;//[Offset: 0x10, Size: 0x4]
	float FireRateAccumulationBurstInterval;//[Offset: 0x14, Size: 0x4]
	ParticleSystemComponent* ChargingEffect;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponProjectileSpline.Actor.Object
	SplineComponent* Spline;//[Offset: 0x228, Size: 0x8]
	SplineMeshComponent* SplineMeshComponentCache;//[Offset: 0x238, Size: 0x8]
	StaticMeshComponent* PreviewedStaticMesh;//[Offset: 0x240, Size: 0x8]
	SceneComponent* PreviewRoot;//[Offset: 0x248, Size: 0x8]
	void ShowHitPointAt(out const Vector Loc);// 0x5a5b23bfa041
	void SetPreviewTransform(out const Vector PreviewLoc, out const Vector PreviewUpDir, out const Vector PreviewScale);// 0x5a5a23bfa041
	void SetPoints(out const Vector[] Points);// 0x5a5923bfa041
	void SetNeedUpdateDisplayThrowTrajectory(bool Value);// 0x5a5823bfa041
	void K2_OnDisplaySummonPreview();// 0x5a5723bfa041
	void HideHitPoint();// 0x5a5623bfa041
	void HideAllSummonPreview();// 0x5a5523bfa041
	void Hide();// 0x5a5423bfa041
	SplineMeshComponent* GetSplineMeshComponent();// 0x5a5323bfa041
	void DrawSplineMesh(out const Vector[] InPredictPoints);// 0x5a5223bfa041
	void ChangeSummonPreviewAttachParent();// 0x5a5123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x600, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x658, Size: 0xc]
	float SplineBoundaryMin;//[Offset: 0x664, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x668, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x678, Size: 0x8]
	float SplineBoundaryMax;//[Offset: 0x680, Size: 0x4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x684, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x684, Size: 0x1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x684, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x685, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x688, Size: 0x4]
	void UpdateMesh();// 0x675023bfa041
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x674f23bfa041
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x674e23bfa041
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x674d23bfa041
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x674c23bfa041
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x674b23bfa041
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x674a23bfa041
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x674923bfa041
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x674823bfa041
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x674723bfa041
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x674623bfa041
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x674523bfa041
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x674423bfa041
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x674323bfa041
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x674223bfa041
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x674123bfa041
	Vector GetStartTangent();// 0x674023bfa041
	Vector2D GetStartScale();// 0x673f23bfa041
	float GetStartRoll();// 0x673e23bfa041
	Vector GetStartPosition();// 0x673d23bfa041
	Vector2D GetStartOffset();// 0x673c23bfa041
	Vector GetSplineUpDir();// 0x673b23bfa041
	byte GetForwardAxis();// 0x673a23bfa041
	Vector GetEndTangent();// 0x673923bfa041
	Vector2D GetEndScale();// 0x673823bfa041
	float GetEndRoll();// 0x673723bfa041
	Vector GetEndPosition();// 0x673623bfa041
	Vector2D GetEndOffset();// 0x673523bfa041
	float GetBoundaryMin();// 0x673423bfa041
	float GetBoundaryMax();// 0x673323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8]
	Vector EndTangent;//[Offset: 0x40, Size: 0xc]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x540, Size: 0x68]
	InterpCurveVector SplineInfo;//[Offset: 0x5a8, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5c0, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5d8, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x5f0, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x60c, Size: 0x4]
	float Duration;//[Offset: 0x610, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x617, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61a, Size: 0x1]
	float LoopPosition;//[Offset: 0x61c, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x620, Size: 0xc]
	void UpdateSpline();// 0x3e9e23bfa041
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x3e9d23bfa041
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x3e9c23bfa041
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x3e9b23bfa041
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x3e9a23bfa041
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x3e9923bfa041
	void SetSplineWorldPoints(out const Vector[] Points);// 0x3e9823bfa041
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x3e9723bfa041
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x3e9623bfa041
	void SetSplineLocalPoints(out const Vector[] Points);// 0x3e9523bfa041
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x3e9423bfa041
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x3e9323bfa041
	void SetDrawDebug(bool bShow);// 0x3e9223bfa041
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x3e9123bfa041
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x3e9023bfa041
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x3e8f23bfa041
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x3e8e23bfa041
	bool IsClosedLoop();// 0x3e8d23bfa041
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x3e8c23bfa041
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x3e8b23bfa041
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x3e8a23bfa041
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x3e8923bfa041
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x3e8823bfa041
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x3e8723bfa041
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x3e8623bfa041
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x3e8523bfa041
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x3e8423bfa041
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x3e8323bfa041
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3e8223bfa041
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3e8123bfa041
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3e8023bfa041
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3e7f23bfa041
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x3e7e23bfa041
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x3e7d23bfa041
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x3e7c23bfa041
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x3e7b23bfa041
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3e7a23bfa041
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3e7923bfa041
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3e7823bfa041
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3e7723bfa041
	byte GetSplinePointType(int PointIndex);// 0x3e7623bfa041
	float GetSplineLength();// 0x3e7523bfa041
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x3e7423bfa041
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x3e7323bfa041
	Vector GetScaleAtSplineInputKey(float InKey);// 0x3e7223bfa041
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x3e7123bfa041
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3e7023bfa041
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3e6f23bfa041
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3e6e23bfa041
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3e6d23bfa041
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3e6c23bfa041
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3e6b23bfa041
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3e6a23bfa041
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3e6923bfa041
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3e6823bfa041
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3e6723bfa041
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3e6623bfa041
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3e6523bfa041
	int GetNumberOfSplineSegments();// 0x3e6423bfa041
	int GetNumberOfSplinePoints();// 0x3e6323bfa041
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3e6223bfa041
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3e6123bfa041
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3e6023bfa041
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3e5f23bfa041
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x3e5e23bfa041
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x3e5d23bfa041
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3e5c23bfa041
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x3e5b23bfa041
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x3e5a23bfa041
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x3e5923bfa041
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x3e5823bfa041
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3e5723bfa041
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3e5623bfa041
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3e5523bfa041
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3e5423bfa041
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x3e5323bfa041
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3e5223bfa041
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3e5123bfa041
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x3e5023bfa041
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3e4f23bfa041
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x3e4e23bfa041
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3e4d23bfa041
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3e4c23bfa041
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3e4b23bfa041
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3e4a23bfa041
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x3e4923bfa041
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3e4823bfa041
	void ClearSplinePoints(bool bUpdateSpline);// 0x3e4723bfa041
	void AddSplineWorldPoint(out const Vector Position);// 0x3e4623bfa041
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x3e4523bfa041
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x3e4423bfa041
	void AddSplineLocalPoint(out const Vector Position);// 0x3e4323bfa041
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x3e4223bfa041
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x3e4123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SplineMetadata.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSpreadAndRecoil.Object
	SolarWeapon* Weapon;//[Offset: 0x28, Size: 0x8]
	WeaponSpreadPatternRuntime* SpreadPattern;//[Offset: 0x38, Size: 0x8]
	WeaponRecoilPatternRuntime* RecoilPattern;//[Offset: 0x40, Size: 0x8]
	WeaponTPPKickPatternRuntime* TPPKickPattern;//[Offset: 0x48, Size: 0x8]
	WeaponGunKickPatternRuntime* GunKickPattern;//[Offset: 0x50, Size: 0x8]
	RecoverableRecoilPatternRuntime* CrossHairKickPattern;//[Offset: 0x58, Size: 0x8]
	WeaponCameraShakePatternRuntime* ShakePatternOnShot;//[Offset: 0x60, Size: 0x8]
	WeaponCameraShakePatternRuntime* ShakePatternOnScopeShot;//[Offset: 0x68, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSpreadPatternRuntime.SolarPatternRuntime.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPatternRuntime.Object
	SolarPattern* PattenData;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponRecoilPatternRuntime.RecoverableRecoilPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----------Generated by SSpawner v1.0.2---------->


Class: RecoverableRecoilPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponTPPKickPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponGunKickPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponCameraShakePatternRuntime.SolarPatternRuntime.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleLoopListener.Object
	void OnParticleFinished(ParticleSystemComponent* PS);// 0x59fc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAnimationInfo
	SoftObjectPath AssetPath;//[Offset: 0x0, Size: 0x18]
	float PlayRate;//[Offset: 0x18, Size: 0x4]
	bool bUseAdaptivePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	AnimMontage* Animation;//[Offset: 0x20, Size: 0x8]
	AnimMontage* AnimOverride;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraShakeData
	class CameraShake* CameraShakeClass;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AttachedEffectParam
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Scale;//[Offset: 0x18, Size: 0xc]
	byte LocationType;//[Offset: 0x24, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x26, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LocationEffectParam
	Rotator Rotation;//[Offset: 0x0, Size: 0xc]
	Vector Scale;//[Offset: 0xc, Size: 0xc]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x19, Size: 0x1]
	bool bAutoActivateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartsComponent.ActorComponent.Object
	WeaponPartScopeComp* ScopeComp;//[Offset: 0xc8, Size: 0x8]
	WeaponPartClipComp* ClipComp;//[Offset: 0xd0, Size: 0x8]
	WeaponPartMuzzleComp* MuzzleComp;//[Offset: 0xd8, Size: 0x8]
	WeaponPartGripComp* GripComp;//[Offset: 0xe0, Size: 0x8]
	WeaponPartGunStockComp* GunStockComp;//[Offset: 0xe8, Size: 0x8]
	StaticMeshComponent* CrossHairPlane;//[Offset: 0xf0, Size: 0x8]
	StaticMeshComponent* RedCrosshairPanel;//[Offset: 0xf8, Size: 0x8]
	bool bQuickScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	FName ScopeSocket;//[Offset: 0x104, Size: 0x8]
	FName GripSocket;//[Offset: 0x10c, Size: 0x8]
	FName ClipSocket;//[Offset: 0x114, Size: 0x8]
	FName OldClipSocket;//[Offset: 0x11c, Size: 0x8]
	FName MuzzleSocket;//[Offset: 0x124, Size: 0x8]
	FName GunStockSocket;//[Offset: 0x12c, Size: 0x8]
	SolarWeapon* MyWeaponActor;//[Offset: 0x138, Size: 0x8]
	void UpdateSinglePartHoldView(WeaponPartComp* PartComp, bool bLocal);// 0x5c3623bfa041
	void ShowParts(bool Show, byte Flag);// 0x5c3523bfa041
	bool IsPartExist(int ID);// 0x5c3423bfa041
	bool IsDefaultPart(const int PartID);// 0x5c3323bfa041
	bool IsAmmoExist(int ID);// 0x5c3223bfa041
	WeaponPartComp*[] GetValidWeaponParts();// 0x5c3123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartScopeComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	float FovValue;//[Offset: 0x6bc, Size: 0x4]
	float HipToAdsTime;//[Offset: 0x6c0, Size: 0x4]
	CurveFloat* FovChangeCurve;//[Offset: 0x6c8, Size: 0x8]
	float HitEffectScale;//[Offset: 0x6d0, Size: 0x4]
	MaterialInstance* ScopeCrossHairMaterial;//[Offset: 0x7d8, Size: 0x8]
	StaticMesh* ScopeCrossHairMesh;//[Offset: 0x7e0, Size: 0x8]
	MaterialInstance* ScopeEnemyMakerMaterial;//[Offset: 0x7e8, Size: 0x8]
	StaticMesh* ScopeEnemyMakerMesh;//[Offset: 0x7f0, Size: 0x8]
	StaticMesh* ScopeMeshForFPP;//[Offset: 0x7f8, Size: 0x8]
	StaticMesh* ScopeMeshForTPP;//[Offset: 0x800, Size: 0x8]
	void OpenScope(float Time);// 0x5c3e23bfa041
	bool IsOpened();// 0x5c3d23bfa041
	enum GetScopeType();// 0x5c3c23bfa041
	Vector GetScopeAimCenterPoint();// 0x5c3b23bfa041
	Rotator GetFPPRotation();// 0x5c3a23bfa041
	Vector GetFPPLocation();// 0x5c3923bfa041
	float GetDistanceToEyeWhenScope();// 0x5c3823bfa041
	void CloseScope();// 0x5c3723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartMuzzleComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool HasSilencer();// 0x5c3023bfa041
	bool HasFlameArrester();// 0x5c2f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartGripComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartGunStockComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: MultiHitResult.HitResult
	byte Num;//[Offset: 0x88, Size: 0x1]
	byte Seed;//[Offset: 0x89, Size: 0x1]
	byte Mode;//[Offset: 0x8a, Size: 0x1]
	Vector_NetQuantize Start;//[Offset: 0x8c, Size: 0xc]
	Vector_NetQuantize End;//[Offset: 0x98, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponShotHitResult
	Actor* Actor;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize Location;//[Offset: 0x8, Size: 0xc]
	FName BoneName;//[Offset: 0x14, Size: 0x8]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x1c, Size: 0xc]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	PrimitiveComponent* Component;//[Offset: 0x2c, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x34, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: OverrideBulletStruct
	class SolarBullet* PrimaryOverrideBulletClass;//[Offset: 0x0, Size: 0x8]
	class SolarBullet* SecondaryOverrideBulletClass;//[Offset: 0x8, Size: 0x8]
	class SolarBullet* PrimaryOverrideTraceBulletClass;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ChargingPilePreset
	SoftObjectPath NormalMeshPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath BrokenMeshPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath BrokenMatPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath RangeRingPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath RangeRingMatPath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath ChargeCirclePath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath ChargeCircleMatPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath ChargeParticleEffectPath;//[Offset: 0xa8, Size: 0x18]
	SoftObjectPath OutlineMatPath;//[Offset: 0xc0, Size: 0x18]
	Transform RangeRingTrans;//[Offset: 0xe0, Size: 0x30]
	Transform ChargeCircleTrans;//[Offset: 0x110, Size: 0x30]
	Vector BeamStartPos;//[Offset: 0x140, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarDestructibleActor.StaticMeshActor.Actor.Object
	byte[] OnHitIgnoreChannels;//[Offset: 0x238, Size: 0x10]
	float AddForceCoefficient;//[Offset: 0x248, Size: 0x4]
	float BrokenDestroyTime;//[Offset: 0x24c, Size: 0x4]
	bool bChildDetachOnBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	void OnDestructibleActorHit(Actor* SelfActor, Actor* OtherActor, out const HitResult Hit, float SpeedDifference);// 0x4c5f23bfa041
	void OnClientBrokenEffect();// 0x4c5e23bfa041
	void OnBroken(SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x4c5d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleEjectParams
	float EjectTime;//[Offset: 0x0, Size: 0x4]
	float EjectDistance;//[Offset: 0x4, Size: 0x4]
	float EjectBreakableTime;//[Offset: 0x8, Size: 0x4]
	float EjectCameraFadeOutTime;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterTagListenerForOrnamentComp
	<OrnamentCompAndVisibilityConfigPair> OrnamentCompPairs;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: OrnamentCompAndVisibilityConfigPair
	SceneComponent* OrnamentComp;//[Offset: 0x0, Size: 0x8]
	OrnamentComponentVisibilityConfig* VisibilityConfig;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: OrnamentComponentVisibilityConfig.DataAsset.Object
	GameplayTagRequirements VisibleTagRequirements;//[Offset: 0x30, Size: 0x50]
	GameplayTag VisibilityFlagTag;//[Offset: 0x80, Size: 0x8]
	GameplayTagRequirements GetVisibleTagRequirements();// 0x46d623bfa041
	GameplayTag GetVisibilityFlagTag();// 0x46d523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: OrnamentMontageInfo
	AnimMontage* ActiveMontage;//[Offset: 0x0, Size: 0x8]
	GameplayTag OrnamentTag;//[Offset: 0x8, Size: 0x8]
	bool bForcePlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBackpackActor.Actor.Object
	SceneComponent* BackpackRoot;//[Offset: 0x228, Size: 0x8]
	BackpackVertAnimMeshComponent* BackpackMesh;//[Offset: 0x230, Size: 0x8]
	SolarCharacter* BackPackActorOwner;//[Offset: 0x238, Size: 0x8]
	SolarBackpackSFX*[] BackpackSFX;//[Offset: 0x240, Size: 0x10]
	SolarBackpackSFX* BackpackOffgasSFX;//[Offset: 0x250, Size: 0x8]
	float OriginScale;//[Offset: 0x264, Size: 0x4]
	bool bEnableMeshEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1]
	class SolarBackpackSFX* TrailClass;//[Offset: 0x270, Size: 0x8]
	class SolarBackpackSFX* OffgasClass;//[Offset: 0x278, Size: 0x8]
	<ParticleSystemComponent*> ListenSet;//[Offset: 0x280, Size: 0x50]
	FString AssemblingId;//[Offset: 0x2d8, Size: 0x10]
	FName KnapsackFlySoundName;//[Offset: 0x2e8, Size: 0x8]
	FName StartKnapsackLandingSoundName;//[Offset: 0x2f0, Size: 0x8]
	FName StopKnapsackLandingSoundName;//[Offset: 0x2f8, Size: 0x8]
	FName StartWallRunSoundName;//[Offset: 0x300, Size: 0x8]
	FName StopWallRunSoundName;//[Offset: 0x308, Size: 0x8]
	void SetBackpackVisibilityByFlag(bool bNewVisibility, int Flag);// 0x4a5b23bfa041
	void RefreshActorEffect();// 0x4a5a23bfa041
	void OnMeshEffectFactorChange();// 0x4a5923bfa041
	void OnChildPSCompPreActive(ParticleSystemComponent* PSComponent);// 0x4a5823bfa041
	void OnChildPSCompFinish(ParticleSystemComponent* PSComponent);// 0x4a5723bfa041
	bool IsFly();// 0x4a5623bfa041
	bool IsCharging();// 0x4a5523bfa041
	bool HasEnergy();// 0x4a5423bfa041
	float GetBackpackOrginScale();// 0x4a5323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BackpackVertAnimMeshComponent.VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VertexAnimInfo DefaultAnimInfo;//[Offset: 0x628, Size: 0x10]
	<byte,VertexAnimInfo> BackPackAnimInfoMap;//[Offset: 0x638, Size: 0x50]
	SolarCharacter* SolarCharacter;//[Offset: 0x688, Size: 0x8]
	SolarBackpackActor* BackPackActor;//[Offset: 0x690, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void PlayInfo(out const VertexAnimInfo InAnimInfo);// 0x419e23bfa041
	void Play(int InStartFrame, int InEndFrame, float InLength, bool InLoop);// 0x419d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: VertexAnimInfo
	int StartFrame;//[Offset: 0x0, Size: 0x4]
	int EndFrame;//[Offset: 0x4, Size: 0x4]
	float Length;//[Offset: 0x8, Size: 0x4]
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBackpackSFX.Actor.Object
	void OnPropellingModeChanged(enum PropellingMode);// 0x4a6823bfa041
	ParticleSystemComponent* GetTrailEffectComponent();// 0x4a6723bfa041
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal);// 0x4a6623bfa041
	void BackpackSFXEnd();// 0x4a6523bfa041
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0x4a6423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BackpackJetPrepelInfo
	bool IsPropelling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int PropellingCounter;//[Offset: 0x4, Size: 0x4]
	byte JetType;//[Offset: 0x8, Size: 0x1]
	bool bCheckGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterOperationEvent
	enum Name;//[Offset: 0x0, Size: 0x1]
	Object* Target;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTeamRescueComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb8, Size: 0x8]
	float TempReqTime;//[Offset: 0xd4, Size: 0x4]
	float RequestTimeout;//[Offset: 0xd8, Size: 0x4]
	bool bSendRequest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	bool bLastRescueBtnVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]
	SolarCharacter* ClosestTarget;//[Offset: 0xe0, Size: 0x8]
	SolarCharacter*[] NearByDeathVergeTeamMates;//[Offset: 0xe8, Size: 0x10]
	void TryRescueClosestTeammateLuaCall();// 0x58da23bfa041
	void TryRescueClosestTeammate();// 0x58d923bfa041
	void ShowTeamRescueToUI(bool IsShow);// 0x58d823bfa041
	void SetRescueBtnVisibility(bool bIsVisible);// 0x58d723bfa041
	void ReqStartTeamRescue(SolarCharacter* TargetCharacter);// 0x58d623bfa041
	void ReqCancelTeamRescure();// 0x58d523bfa041
	void OnRescueStateChangeInternal();// 0x58d423bfa041
	void OnRescueStateChange();// 0x58d323bfa041
	void DetectRescueTeammate(float DeltaTime);// 0x58d223bfa041
	bool CanRescue(SolarCharacter* Player, const bool bStart);// 0x58d123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarUAVRescue.SolarUAV.SummonItemBase.Pawn.Actor.Object
	enum NewState;//[Offset: 0x471, Size: 0x1]
	AnimationAsset* SuspendAnim_Active_NotWork;//[Offset: 0x478, Size: 0x8]
	AnimationAsset* SuspendAnim_Active_Work;//[Offset: 0x480, Size: 0x8]
	AnimationAsset* SuspendAnim_Deactive;//[Offset: 0x488, Size: 0x8]
	AnimationAsset* ActiveAnim;//[Offset: 0x490, Size: 0x8]
	AnimationAsset* DeactiveAnim;//[Offset: 0x498, Size: 0x8]
	AnimationAsset* BeginWorkAnim;//[Offset: 0x4a0, Size: 0x8]
	AnimationAsset* EndWorkAnim;//[Offset: 0x4a8, Size: 0x8]
	AnimationAsset* ExplodeAnim;//[Offset: 0x4b0, Size: 0x8]
	ParticleSystem* ActiveEffect;//[Offset: 0x4b8, Size: 0x8]
	ParticleSystem* AppearBeginEffect;//[Offset: 0x4c0, Size: 0x8]
	FName AppearBeginEffectSocket;//[Offset: 0x4c8, Size: 0x8]
	ParticleSystem* JetEffect;//[Offset: 0x4d0, Size: 0x8]
	FName JetEffectSocket;//[Offset: 0x4d8, Size: 0x8]
	Transform JetEffectTrans;//[Offset: 0x4e0, Size: 0x30]
	ParticleSystem* ActiveLoopEffect;//[Offset: 0x510, Size: 0x8]
	ParticleSystem* ChaActiveEffect;//[Offset: 0x518, Size: 0x8]
	ParticleSystem* ExplodeEffect;//[Offset: 0x520, Size: 0x8]
	ParticleSystem* DeathVergeEffect;//[Offset: 0x528, Size: 0x8]
	FName ChaActiveEffectSocket;//[Offset: 0x530, Size: 0x8]
	float AppearEffectLength;//[Offset: 0x538, Size: 0x4]
	MaterialInstance* MatAppearing;//[Offset: 0x540, Size: 0x8]
	MatAppearingData[] MatAppearingData;//[Offset: 0x548, Size: 0x10]
	MaterialInstance* MatAppearEndBody;//[Offset: 0x558, Size: 0x8]
	MaterialInstance* MatAppearEndEye;//[Offset: 0x560, Size: 0x8]
	FString BeginSound;//[Offset: 0x568, Size: 0x10]
	FString EndSound;//[Offset: 0x578, Size: 0x10]
	FString ActiveChaSound;//[Offset: 0x588, Size: 0x10]
	FString ActiveAnimSound;//[Offset: 0x598, Size: 0x10]
	FString BeginActiveLoopSound;//[Offset: 0x5a8, Size: 0x10]
	FString EndActiveLoopSound;//[Offset: 0x5b8, Size: 0x10]
	FString DeactiveAnimSound;//[Offset: 0x5c8, Size: 0x10]
	FString ExplodeSound;//[Offset: 0x5d8, Size: 0x10]
	FString BeginDeathVergeLoopSound;//[Offset: 0x5e8, Size: 0x10]
	FString EndDeathVergeLoopSound;//[Offset: 0x5f8, Size: 0x10]
	float ChaSpeedThreshold;//[Offset: 0x608, Size: 0x4]
	float RotateSpeed;//[Offset: 0x60c, Size: 0x4]
	float YawOffset;//[Offset: 0x610, Size: 0x4]
	CurveFloat* ActivatingScaleCurve;//[Offset: 0x618, Size: 0x8]
	CurveFloat* DeactivatingScaleCurve;//[Offset: 0x620, Size: 0x8]
	CurveFloat* TargetSpeedByDistance;//[Offset: 0x628, Size: 0x8]
	float Acceleration;//[Offset: 0x630, Size: 0x4]
	float MaxDistance;//[Offset: 0x634, Size: 0x4]
	Vector DefaultLocationOffset;//[Offset: 0x644, Size: 0xc]
	float TargetLocationOffsetSpeed;//[Offset: 0x650, Size: 0x4]
	float ActiveDuration;//[Offset: 0x678, Size: 0x4]
	float ActiveEffectLength;//[Offset: 0x67c, Size: 0x4]
	float DeathVergeHealthThreshold;//[Offset: 0x680, Size: 0x4]
	SoftObjectPath UAVIcon;//[Offset: 0x688, Size: 0x18]
	ParticleSystemComponent* DeathVergeEffectHandle;//[Offset: 0x6b0, Size: 0x8]
	ParticleSystemComponent* ActiveLoopEffectHandle;//[Offset: 0x6b8, Size: 0x8]
	bool bFollowCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1]
	bool bAppearEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c3, Size: 0x1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	bool bPermanent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 0x1]
	bool bExplodeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e2, Size: 0x1]
	float HealTickInterval;//[Offset: 0x708, Size: 0x4]
	float HealHealthAmount;//[Offset: 0x70c, Size: 0x4]
	float HealShieldAmount;//[Offset: 0x710, Size: 0x4]
	ParticleSystem* HealLineEffect;//[Offset: 0x718, Size: 0x8]
	FName HealMeshSocket;//[Offset: 0x720, Size: 0x8]
	FString BeginHealSound;//[Offset: 0x728, Size: 0x10]
	FString BeginHealLoopSound;//[Offset: 0x738, Size: 0x10]
	FString EndHealSound;//[Offset: 0x748, Size: 0x10]
	FString EndHealLoopSound;//[Offset: 0x758, Size: 0x10]
	FString BeginHealHPLoopSound;//[Offset: 0x768, Size: 0x10]
	FString EndHealHPLoopSound;//[Offset: 0x778, Size: 0x10]
	FString BeginHealShieldLoopSound;//[Offset: 0x788, Size: 0x10]
	FString EndHealShieldLoopSound;//[Offset: 0x798, Size: 0x10]
	ParticleSystemComponent* HealLineEffectHandle;//[Offset: 0x7a8, Size: 0x8]
	ParticleSystem* RescueEffect;//[Offset: 0x7b8, Size: 0x8]
	ParticleSystem* RescueEffect_Enermy;//[Offset: 0x7c0, Size: 0x8]
	Transform RescueEffectTransform;//[Offset: 0x7d0, Size: 0x30]
	FName RescueMeshSocket;//[Offset: 0x800, Size: 0x8]
	float RescueTime;//[Offset: 0x808, Size: 0x4]
	bool bCheckRescueBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80c, Size: 0x1]
	float CheckRescueBlockInteval;//[Offset: 0x810, Size: 0x4]
	FString BeginRescueLoopSound;//[Offset: 0x818, Size: 0x10]
	FString EndRescueLoopSound;//[Offset: 0x828, Size: 0x10]
	FString CompleteRescueSound;//[Offset: 0x838, Size: 0x10]
	ParticleSystemComponent* RescueEffectHandle;//[Offset: 0x848, Size: 0x8]
	MaterialInstanceDynamic* MatInstanceAppearingBody;//[Offset: 0x860, Size: 0x8]
	MaterialInstanceDynamic* MatInstanceAppearingEye;//[Offset: 0x868, Size: 0x8]
	bool bNavigateToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 0x1]
	float RecordInterval;//[Offset: 0x874, Size: 0x4]
	float NavigateInterval;//[Offset: 0x878, Size: 0x4]
	float BeginNavigateDistance;//[Offset: 0x87c, Size: 0x4]
	float EndNavigateDistance;//[Offset: 0x880, Size: 0x4]
	class GameplayEffect* UAVHealBuffGameplayEffect;//[Offset: 0x8b0, Size: 0x8]
	class GameplayEffect* UAVRescueGameplayEffect;//[Offset: 0x8b8, Size: 0x8]
	void TickRescue(float DeltaTime);// 0x599d23bfa041
	void TickNavigate(float DeltaTime);// 0x599c23bfa041
	void TickHeal(float DeltaTime);// 0x599b23bfa041
	void ServerSetRescueBlocked(bool bBlocked);// 0x599a23bfa041
	void OnRescueComplete();// 0x599923bfa041
	void OnRep_NewState();// 0x599823bfa041
	void OnRep_Active();// 0x599723bfa041
	void OnCheckUAVInvisible(const GameplayTag Tag, int NewCount);// 0x599623bfa041
	void OnCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x599523bfa041
	void OnCharacterDeathVergeStatusTag(const GameplayTag Tag, int NewCount);// 0x599423bfa041
	void OnCharacterDeathStatusTag(const GameplayTag Tag, int NewCount);// 0x599323bfa041
	float GetRescueTime();// 0x599223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarUAV.SummonItemBase.Pawn.Actor.Object
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 0x1]
	float DebugLineThickness;//[Offset: 0x3dc, Size: 0x4]
	SkeletalMeshComponent* Mesh;//[Offset: 0x3e0, Size: 0x8]
	FName AttachCharacterSocketName;//[Offset: 0x3e8, Size: 0x8]
	AnimationAsset* AppearAnim;//[Offset: 0x3f0, Size: 0x8]
	float AppearAnimLength;//[Offset: 0x3f8, Size: 0x4]
	AnimationAsset* DisappearAnim;//[Offset: 0x400, Size: 0x8]
	float DisppearAnimLength;//[Offset: 0x408, Size: 0x4]
	bool bProbeCollisionConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	float ProbeCollisionInterval;//[Offset: 0x41c, Size: 0x4]
	float ProbeCollisionRadius;//[Offset: 0x420, Size: 0x4]
	float AvoidCollisionMaxHeight;//[Offset: 0x424, Size: 0x4]
	float AvoidCollisionOverTime;//[Offset: 0x428, Size: 0x4]
	float AvoidCollisionCDTime;//[Offset: 0x42c, Size: 0x4]
	void UAVDestroy();// 0x599123bfa041
	void OnCharacterInVehicleTag(const GameplayTag Tag, int NewCount);// 0x599023bfa041
	void Disappear();// 0x598f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SummonItemBase.Pawn.Actor.Object
	AkComponent* AkAudioComponent;//[Offset: 0x2a8, Size: 0x8]
	StaticMeshComponent* HPBar;//[Offset: 0x2b0, Size: 0x8]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2b8, Size: 0x4]
	SolarCharacter* SourceSummoner;//[Offset: 0x2bc, Size: 0x8]
	enum DeathReason;//[Offset: 0x2c4, Size: 0x1]
	float CurrentHealth;//[Offset: 0x2c8, Size: 0x4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	float FunctionalTimerMax;//[Offset: 0x2d0, Size: 0x4]
	float FunctionalTimerDelta;//[Offset: 0x2d4, Size: 0x4]
	Vector CenterOffset;//[Offset: 0x2ec, Size: 0xc]
	GameplayEffectSpecHandle GEToSelfHandle;//[Offset: 0x2f8, Size: 0x10]
	GameplayEffectSpecHandle GEToTargetHandle;//[Offset: 0x308, Size: 0x10]
	float MaxHealth;//[Offset: 0x318, Size: 0x4]
	float ReducedHealth;//[Offset: 0x31c, Size: 0x4]
	float DelayDestroyTime;//[Offset: 0x320, Size: 0x4]
	bool bTeammateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 0x1]
	bool bSuicideWithSummonerChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325, Size: 0x1]
	float TimeDuration;//[Offset: 0x328, Size: 0x4]
	bool bOnlyOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	bool bEnableHPBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 0x1]
	bool bHPDefaultVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 0x1]
	FName HPBarTagName;//[Offset: 0x330, Size: 0x8]
	FName HPBarPercentName;//[Offset: 0x338, Size: 0x8]
	FName HPBarColorName;//[Offset: 0x340, Size: 0x8]
	LinearColor HPBarColorTeammate;//[Offset: 0x348, Size: 0x10]
	LinearColor HPBarColorEnemy;//[Offset: 0x358, Size: 0x10]
	int HPBarMaterialIndex;//[Offset: 0x368, Size: 0x4]
	Vector CenterLocationOffset;//[Offset: 0x36c, Size: 0xc]
	float DestroyDeathWithinSeconds;//[Offset: 0x378, Size: 0x4]
	bool bSupportAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	WeaponAssistAimTargetConfig AssistAimTargetConfig;//[Offset: 0x380, Size: 0x48]
	bool bCanAffectedByEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	bool bShowDamageText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 0x1]
	SolarSpawnAdjustConfig* SpawnAdjustConfig;//[Offset: 0x3d0, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	void SwitchFunctionalTimer(bool InbEnable, float InMaxTime);// 0x491b23bfa041
	void Suicide();// 0x491a23bfa041
	bool RequestPlaySoundByTeam(out const <enum,SolarSummonSoundData> InSoundData);// 0x491923bfa041
	bool RequestPlaySound(out const FString[] InSoundData);// 0x491823bfa041
	void ReceiveUpdateHealthEvent(float InCurrentHealthRate);// 0x491723bfa041
	void ReceiveUpdateFunctionalTimerEvent(float InTimerRate);// 0x491623bfa041
	void ReceiveDeathEvent(enum InDeathReason);// 0x491523bfa041
	void OnSourceCharacterChange();// 0x491423bfa041
	void OnRep_Dead();// 0x491323bfa041
	void OnRep_CurrentHealth();// 0x491223bfa041
	bool IsDead();// 0x491123bfa041
	SolarCharacter* GetSourceSummoner();// 0x491023bfa041
	float GetMaxHealth();// 0x490f23bfa041
	float GetCurrentHealth();// 0x490e23bfa041
	class Object GetClassType();// 0x490d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarSummonSoundData
	FString[] SoundNames;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MatAppearingData
	CurveFloat* MatCurve;//[Offset: 0x0, Size: 0x8]
	FName MatParam;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAssistAimTargetConfig
	Vector2D BaseFollowTriggerExtent;//[Offset: 0x0, Size: 0x8]
	Vector2D BaseFollowStopExtent;//[Offset: 0x8, Size: 0x8]
	BaseFollowExtentByTag[] BaseFollowExtentByTags;//[Offset: 0x10, Size: 0x10]
	Vector2D TargetVelocityFollowTriggerExtent;//[Offset: 0x20, Size: 0x8]
	Vector2D LockAimingExtent;//[Offset: 0x28, Size: 0x8]
	Vector2D GlobalSensitivityScaleTriggerExtent;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BaseFollowExtentByTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	Vector2D BaseFollowTriggerExtent;//[Offset: 0x50, Size: 0x8]
	Vector2D BaseFollowStopExtent;//[Offset: 0x58, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarSpawnAdjustConfig.DataAsset.Object
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	byte[] AdjustBlockTypes;//[Offset: 0x38, Size: 0x10]
	Vector AdjustDetectBoxExtent;//[Offset: 0x48, Size: 0xc]
	Vector AdjustDetectBoxOffset;//[Offset: 0x54, Size: 0xc]
	bool bUseActorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float AdjustVerticalDist;//[Offset: 0x64, Size: 0x4]
	float AdjustHorizonDist;//[Offset: 0x68, Size: 0x4]
	float AdjustFindStep;//[Offset: 0x6c, Size: 0x4]
	float TraceUpLength;//[Offset: 0x70, Size: 0x4]
	float TraceDownLength;//[Offset: 0x74, Size: 0x4]
	float TraceZOffset;//[Offset: 0x78, Size: 0x4]
	byte[] AdjustPlaceTypes;//[Offset: 0x80, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarItemComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb0, Size: 0x8]
	void UseItemRequestLuaCall(int ItemID, int Num);// 0x4f0923bfa041
	void OnPlayerBackpackItemUpdate();// 0x4f0823bfa041
	bool CanUseMedicine();// 0x4f0723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPickupComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* OwnerChar;//[Offset: 0x560, Size: 0x8]
	float PickUpHighlyThresholdFactor;//[Offset: 0x570, Size: 0x4]
	bool bWantedClearItemData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 0x1]
	<enum,SolarPickupHandlerBase*> PickupHandlerMap;//[Offset: 0x578, Size: 0x50]
	SolarPickupHandlerBase* NormalPickupHandler;//[Offset: 0x5c8, Size: 0x8]
	bool GlobalPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	AirDropTreasureBox* TagetAirDropBox;//[Offset: 0x5d4, Size: 0x8]
	ActorArrayMap NormalPickupItems;//[Offset: 0x5e8, Size: 0x50]
	Actor*[] ProccessedList;//[Offset: 0x638, Size: 0x10]
	Actor*[] SortedPickupActors;//[Offset: 0x648, Size: 0x10]
	bool bPickupListVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]
	bool bPickupListCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 0x1]
	UIManager* UIManager;//[Offset: 0x660, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x668, Size: 0x8]
	bool GlobalAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c2, Size: 0x1]
	float UnAutoPickupItemTime;//[Offset: 0x6c4, Size: 0x4]
	float AutoPickupTime;//[Offset: 0x6c8, Size: 0x4]
	bool StopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 0x1]
	bool bReqPickItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 0x1]
	bool bPickupCheckBoxOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 0x1]
	TimerHandle AutoPickupTimer;//[Offset: 0x6f0, Size: 0x8]
	delegate OnItemDataSet;//[Offset: 0x728, Size: 0x10]
	delegate UpdateCheckBoxesVisibility;//[Offset: 0x738, Size: 0x10]
	delegate OnUpdateCheckBoxesHighLight;//[Offset: 0x748, Size: 0x10]
	delegate OnUpdateCheckBoxesStates;//[Offset: 0x758, Size: 0x10]
	delegate OnPickupListClear;//[Offset: 0x768, Size: 0x10]
	delegate OnTogglePickupList;//[Offset: 0x778, Size: 0x10]
	bool ListenFireReslutFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 0x1]
	float DelayedDisplayTime;//[Offset: 0x78c, Size: 0x4]
	TimerHandle AutoShowPickupListHandle;//[Offset: 0x790, Size: 0x8]
	TimerHandle DelayProcessFireResultHandle;//[Offset: 0x798, Size: 0x8]
	TimerHandle EnsuredAutoShowHandle;//[Offset: 0x7a0, Size: 0x8]
	FString[] FireResultMsgs;//[Offset: 0x7a8, Size: 0x10]
	DeathTreasureBox*[] NearByDeathboxes;//[Offset: 0x7c8, Size: 0x10]
	DeathTreasureBox* NearestResurrectBox;//[Offset: 0x7d8, Size: 0x8]
	bool LastResurrecteBtnVisbile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1]
	float CheckResurrectInterval;//[Offset: 0x7e4, Size: 0x4]
	float TempResurrectInterval;//[Offset: 0x7e8, Size: 0x4]
	float CheckStopResurrectInterval;//[Offset: 0x7ec, Size: 0x4]
	float TempStopResurrectInterval;//[Offset: 0x7f0, Size: 0x4]
	int PickupRecommendPriority;//[Offset: 0x7f8, Size: 0x4]
	<enum,int> ItemPriorityMap;//[Offset: 0x800, Size: 0x50]
	<enum,int> ItemMutiPickupMap;//[Offset: 0x850, Size: 0x50]
	<enum,int> WeaponPartPriorityMap;//[Offset: 0x8a0, Size: 0x50]
	<int,int> WeaponPartIDPriorityMap;//[Offset: 0x8f0, Size: 0x50]
	Actor* PendingFirstItemActor;//[Offset: 0x940, Size: 0x8]
	void UpdateResurrection(const float InDeltaTime);// 0x50c423bfa041
	void UpdateItemUI(bool bForce);// 0x50c323bfa041
	void UpdateCheckboxSwitches(const bool InPickupOpen);// 0x50c223bfa041
	void TryReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x50c123bfa041
	void TryPickupTreasureItem(SolarTreasureBoxActor* PickActor, out const SolarItemData ItemData);// 0x50c023bfa041
	void TryPickupItem(Actor* PickActor);// 0x50bf23bfa041
	bool TryOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x50be23bfa041
	void TryClearDirtyData(const bool bForce);// 0x50bd23bfa041
	bool TryCancelOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x50bc23bfa041
	void TogglePickupList(const bool InVisibility);// 0x50bb23bfa041
	void StopListenFireInput(bool bIsInstantlyStop);// 0x50ba23bfa041
	void StopAutoPickupTimer();// 0x50b923bfa041
	void StartListenFireInput();// 0x50b823bfa041
	void StartAutoPickupTimer();// 0x50b723bfa041
	bool ShouldPickupTreasureBoxItem(SolarTreasureBoxActor* InTreasureBox);// 0x50b623bfa041
	void SetStopAutoPickupWhenClose(const bool InStopAutoPickupWhenClose);// 0x50b523bfa041
	void SetPickupSwitchInLua(const bool IsOpen);// 0x50b423bfa041
	void SetPickupSwitch(const bool IsOpen);// 0x50b323bfa041
	void SetPickupListVisibility(const bool InVisibility);// 0x50b223bfa041
	void SetPickupCapsuleSize(out const Vector Size);// 0x50b123bfa041
	void SetAutoPickupSwitch(const bool InCanAutoPickup);// 0x50b023bfa041
	void RestartPickupTimer();// 0x50af23bfa041
	void ReqPickupWeapon(Actor* WeaponData, bool IsAutoPickup);// 0x50ae23bfa041
	void ReqPickupTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool IsAutoPickup, int TargetIndex, enum InItemType, bool bSorted);// 0x50ad23bfa041
	void ReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x50ac23bfa041
	void ReqOpenTreasureBox(SolarTreasureBoxActor* TreasureBox);// 0x50ab23bfa041
	void RemoveNearbyDeathbox(DeathTreasureBox* InDeathBox);// 0x50aa23bfa041
	void RefreshResurrectBtn();// 0x50a923bfa041
	void RefreshPickupTimer();// 0x50a823bfa041
	void RefreshItemUI();// 0x50a723bfa041
	void RecheckPendingActors();// 0x50a623bfa041
	void ReceiveFireResult(FString InFireResultMsg);// 0x50a523bfa041
	void ProcessFireResultMsgs();// 0x50a423bfa041
	void OnWeaponUpgrade(SolarPlayerWeapon* InWeapon);// 0x50a323bfa041
	void OnWeaponSlotEquip(int InWeaponSlotID, SolarPlayerWeapon* InWeapon);// 0x50a223bfa041
	void OnUsingSkillStatusChanged();// 0x50a123bfa041
	void OnUpdateItemUIDataChanged(Object* Object, int OldItemID, int NewItemID);// 0x50a023bfa041
	void OnTreasureBoxStateChange(int64 ThisID, const enum State);// 0x509f23bfa041
	void OnPickupSettingChanged();// 0x509e23bfa041
	void OnPickupConfirmHandle();// 0x509d23bfa041
	void OnPickupActorEnd(Actor* ItemActor);// 0x509c23bfa041
	void OnPickupActorBegin(Actor* ItemActor);// 0x509b23bfa041
	void OnEquipChanged();// 0x509a23bfa041
	void OnCharacterDeathBegin();// 0x509923bfa041
	void OnActorDestroyed(Actor* Actor);// 0x509823bfa041
	void MarkDirtyForTick();// 0x509723bfa041
	bool IsValidItemActor(const Actor* ItemActor);// 0x509623bfa041
	bool IsNeedReplace(const enum InType, out const SolarItemData InItemData);// 0x509523bfa041
	bool IsEquipItem(const enum InType);// 0x509423bfa041
	bool IsCharacterInAir();// 0x509323bfa041
	void InitPickupPriorityMaps();// 0x509223bfa041
	SolarItemData GetTreasureItemDataByThisID(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID);// 0x509123bfa041
	int GetPickupWeaponPartTypePriority(out const SolarItemData InItemData);// 0x509023bfa041
	int GetPickupTypePriority(const enum InItemType);// 0x508f23bfa041
	Actor* GetPickupTreasureBoxActor();// 0x508e23bfa041
	int GetPickupPriority(out const SolarItemData InItemType);// 0x508d23bfa041
	DeathTreasureBox* GetNearestResurrectBox();// 0x508c23bfa041
	<int,ActorArray> GetItemDataMap();// 0x508b23bfa041
	int GetItemDataCount(enum PickupItemType);// 0x508a23bfa041
	bool GetIsGlobalPickup();// 0x508923bfa041
	bool GetIsAutoPickupHomeItems();// 0x508823bfa041
	void DoStopOpeningAirDropBox();// 0x508723bfa041
	void DoOpenAirDropBox();// 0x508623bfa041
	void DetectNearestResurrectTarget();// 0x508523bfa041
	void CloseItemUI();// 0x508423bfa041
	void ClearAutoShowPickupListHandle();// 0x508323bfa041
	void ClearAllTimer();// 0x508223bfa041
	void CheckToShowConfirm(out const SolarItemData ItemData);// 0x508123bfa041
	bool CheckIsItemMaximizing(const int ItemID);// 0x508023bfa041
	bool CanResurrectOwner(DeathTreasureBox* InDeathBox, out float OutDistance);// 0x507f23bfa041
	bool CanMutiAutoPickup(const enum InItemType);// 0x507e23bfa041
	void CallHUDSetTreasureBoxActor(Actor* InActor);// 0x507d23bfa041
	void CallHUDSetAirdropBoxActor(Actor* InActor);// 0x507c23bfa041
	void CallHUDSetActiveResurrectBtn(const bool Inactive);// 0x507b23bfa041
	void CallHUDSetActiveOpenBoxProgress(const bool Inactive);// 0x507a23bfa041
	void CallHUDSetActiveOpenBoxBtn(const bool Inactive);// 0x507923bfa041
	void CallHUDHideOpenBoxUIByThisID(const int64 InThisID);// 0x507823bfa041
	void CallHUDHideAirdropBoxUIByThisID(const int64 InThisID);// 0x507723bfa041
	void AddNearbyDeathbox(DeathTreasureBox* InDeathBox);// 0x507623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPickupHandlerBase.Object
	enum Type;//[Offset: 0x28, Size: 0x1]
	SolarPickupComponent* OwnerComponent;//[Offset: 0x30, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ActorArrayMap
	<int,ActorArray> ActorArrayMap;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: ActorArray
	Actor*[] ActorArray;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTreatmentComponent.ActorComponent.Object
	delegate OnCharacterHealthLow;//[Offset: 0xb0, Size: 0x10]
	SolarCharacter* OwnerCharacter;//[Offset: 0xd0, Size: 0x8]
	void TryStopTreatment();// 0x591023bfa041
	void TryStatisticsTreatedTimes();// 0x590f23bfa041
	void TryStartTreatment();// 0x590e23bfa041
	void StopProgress();// 0x590d23bfa041
	void StartProgress();// 0x590c23bfa041
	bool IsMedicineEnough();// 0x590b23bfa041
	bool IsFullHealth();// 0x590a23bfa041
	bool IsAbleToContinueTreatment();// 0x590923bfa041
	void IncreaseTreatedTimes();// 0x590823bfa041
	bool CanStartTreatment();// 0x590723bfa041
	bool CanBeTreated();// 0x590623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ShieldSoundData
	<enum,enum> SoundData;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTeammateHUDWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CheckHUDDistanceToCenter;//[Offset: 0x68c, Size: 0x4]
	float HUDTranslucentValue;//[Offset: 0x690, Size: 0x4]
	float LocationUpdateTolerance;//[Offset: 0x694, Size: 0x4]
	float InterpolationTimeRatio;//[Offset: 0x698, Size: 0x4]
	float InterpolationSpeed;//[Offset: 0x69c, Size: 0x4]
	float InterpolationEaseInOutExp;//[Offset: 0x6a0, Size: 0x4]
	CurveFloat* DistanceToScaleCurve;//[Offset: 0x6a8, Size: 0x8]
	bool bUseDistanceToCharacterForScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]
	Vector TargetWorldLocation;//[Offset: 0x6b8, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x571, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x572, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x578, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x580, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1]
	float RedrawTime;//[Offset: 0x58c, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x598, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x5a4, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ad, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x5ae, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5af, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5b0, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x5b8, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x5c8, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x5d8, Size: 0x4]
	enum BlendMode;//[Offset: 0x5dc, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dd, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5de, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x5e0, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x608, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x610, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x618, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x620, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x628, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x630, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x638, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x640, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x648, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x654, Size: 0x8]
	int LayerZOrder;//[Offset: 0x65c, Size: 0x4]
	enum GeometryMode;//[Offset: 0x660, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x664, Size: 0x4]
	void SetWindowVisibility(enum InVisibility);// 0x58d023bfa041
	void SetWindowFocusable(bool bInWindowFocusable);// 0x58cf23bfa041
	void SetWidgetSpace(enum NewSpace);// 0x58ce23bfa041
	void SetWidget(UserWidget* Widget);// 0x58cd23bfa041
	void SetTwoSided(const bool bWantTwoSided);// 0x58cc23bfa041
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x58cb23bfa041
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x58ca23bfa041
	void SetRedrawTime(float InRedrawTime);// 0x58c923bfa041
	void SetPivot(out const Vector2D InPivot);// 0x58c823bfa041
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x58c723bfa041
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x58c623bfa041
	void SetGeometryMode(enum InGeometryMode);// 0x58c523bfa041
	void SetDrawSize(Vector2D Size);// 0x58c423bfa041
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x58c323bfa041
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x58c223bfa041
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x58c123bfa041
	void RequestRedraw();// 0x58c023bfa041
	enum GetWindowVisiblility();// 0x58bf23bfa041
	bool GetWindowFocusable();// 0x58be23bfa041
	enum GetWidgetSpace();// 0x58bd23bfa041
	UserWidget* GetUserWidgetObject();// 0x58bc23bfa041
	bool GetTwoSided();// 0x58bb23bfa041
	bool GetTickWhenOffscreen();// 0x58ba23bfa041
	TextureRenderTarget2D* GetRenderTarget();// 0x58b923bfa041
	float GetRedrawTime();// 0x58b823bfa041
	Vector2D GetPivot();// 0x58b723bfa041
	LocalPlayer* GetOwnerPlayer();// 0x58b623bfa041
	MaterialInstanceDynamic* GetMaterialInstance();// 0x58b523bfa041
	bool GetManuallyRedraw();// 0x58b423bfa041
	enum GetGeometryMode();// 0x58b323bfa041
	Vector2D GetDrawSize();// 0x58b223bfa041
	bool GetDrawAtDesiredSize();// 0x58b123bfa041
	float GetCylinderArcAngle();// 0x58b023bfa041
	Vector2D GetCurrentDrawSize();// 0x58af23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xc0, Size: 0x4]
	int SizeY;//[Offset: 0xc4, Size: 0x4]
	bool bAutoRTSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	LinearColor ClearColor;//[Offset: 0xcc, Size: 0x10]
	byte AddressX;//[Offset: 0xdc, Size: 0x1]
	byte AddressY;//[Offset: 0xdd, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xde, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xde, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xde, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xdf, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0xe1, Size: 0x1]
	byte MipsAddressU;//[Offset: 0xe2, Size: 0x1]
	byte MipsAddressV;//[Offset: 0xe3, Size: 0x1]
	byte OverrideFormat;//[Offset: 0xe4, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xb8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarRadarComponent.ActorComponent.Object
	RadarScanSoundDataAsset* RadarScanSoundDataAsset;//[Offset: 0xb8, Size: 0x8]
	class UserWidget* ScannedScreenUIClass;//[Offset: 0xc0, Size: 0x8]
	FName ScannedEffectID;//[Offset: 0xc8, Size: 0x8]
	UserWidget* CreatedScreenUI;//[Offset: 0xe8, Size: 0x8]
	TimerHandle DetectedTimerHandle;//[Offset: 0xf0, Size: 0x8]
	int TimerHandleCounter;//[Offset: 0xf8, Size: 0x4]
	<int,TimerHandle> DetectedTimerHandles;//[Offset: 0x100, Size: 0x50]
	SolarCharacter* CharacterOwner;//[Offset: 0x150, Size: 0x8]
	ScannedInfo[] CurrentScanResults;//[Offset: 0x158, Size: 0x10]
	float CurrentSpanTimer;//[Offset: 0x168, Size: 0x4]
	FName[] ActivedRadarTags;//[Offset: 0x170, Size: 0x10]
	MaterialChangeHandle DetectedMaterialHandle;//[Offset: 0x180, Size: 0x8]
	void WarningByRadarNotifation(float InRemainingTime);// 0x524d23bfa041
	void OnRecivedScanResults();// 0x524c23bfa041
	void OnRecieveOnceScanStart(int ScanedNum, bool bSuperRader);// 0x524b23bfa041
	void OnRadarScanStart(out RadarDataSpec RadarDataSpec);// 0x524a23bfa041
	void OnRadarScanEnd(out RadarDataSpec RadarDataSpec);// 0x524923bfa041
	void OnRadarImmunityTagChanged(const GameplayTag Tag, int NewCount);// 0x524823bfa041
	void OnDetectedByRadar(bool bOnceScan, float InDetectedTime, out const GameplayTag InRadarImmunityTag, bool bSuperRader);// 0x524723bfa041
	void OnceScanSuccessNotifation(int ScanedNum);// 0x524623bfa041
	void OnceScanFailedNotifation();// 0x524523bfa041
	void MarkedByOnceScanNotifation();// 0x524423bfa041
	FString GetModuleName_Implementation();// 0x524323bfa041
	void ExposedByRadarNotifation();// 0x524223bfa041
	void ChangeDetectedMaterial(bool bInDetected);// 0x524123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: RadarDataSpec.FastArraySerializerItem
	GameplayAbilitySpecHandle RadarHandle;//[Offset: 0xc, Size: 0x4]
	byte RadarType;//[Offset: 0x10, Size: 0x1]
	Vector2D RadarRange;//[Offset: 0x14, Size: 0x8]
	Pawn* RadarSpawner;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: RadarScanSoundDataAsset.DataAsset.Object
	FString RadarScan_Loop_Start;//[Offset: 0x30, Size: 0x10]
	FString RadarScan_Loop_End;//[Offset: 0x40, Size: 0x10]
	FString RadarScan_Once_Success;//[Offset: 0x50, Size: 0x10]
	FString RadarScan_Once_Failed;//[Offset: 0x60, Size: 0x10]
	FString SuperRadarScan_FoundEnemy;//[Offset: 0x70, Size: 0x10]
	FString SuperRadarScan_FoundByEnemy;//[Offset: 0x80, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ScannedInfo
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	enum TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector TargetLocation;//[Offset: 0xc, Size: 0xc]
	float TargetToward;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialChangeHandle
<----------Generated by SSpawner v1.0.2---------->


Class: RadarDataSpecContainer.FastArraySerializer
	RadarDataSpec[] Radars;//[Offset: 0x108, Size: 0x10]
	SolarRadarComponent* Owner;//[Offset: 0x118, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CriticalHitInfo
	SolarPlayerState* Instigator;//[Offset: 0x0, Size: 0x8]
	float Damage;//[Offset: 0x8, Size: 0x4]
	float DamageTime;//[Offset: 0xc, Size: 0x4]
	int LastDamageWeaponID;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WorldMarkComponent.ActorComponent.Object
	SolarCharacter* Owner;//[Offset: 0xc8, Size: 0x8]
	uint32 WorldMarkPoolOriginSize;//[Offset: 0xd0, Size: 0x4]
	float MinCheckDistance;//[Offset: 0xd4, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xd8, Size: 0x4]
	bool AutoMarkIsCoolingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	int AttachedToCharacterNumLimit;//[Offset: 0x138, Size: 0x4]
	HUD_WorldMark*[] ChosenMarksTable;//[Offset: 0x190, Size: 0x10]
	HUD_WorldMark* CurrentChosenMark;//[Offset: 0x1a0, Size: 0x8]
	HUD_WorldMark*[] WorldMarkPool;//[Offset: 0x1e8, Size: 0x10]
	void VehicleNotify(int VehicleID, int NameLocID, SolarPlayerController* Controller);// 0x5d1123bfa041
	bool VagueMarkCharacter();// 0x5d1023bfa041
	void UpdateAttachedMarks();// 0x5d0f23bfa041
	void UnMarkItemByIDLuaCall(int64 instanceID);// 0x5d0e23bfa041
	void ResponseChosenMark();// 0x5d0d23bfa041
	void RemoveItemMarkWhenPlayerPicked(out const int64 InItemInstanceId);// 0x5d0c23bfa041
	void RemoveAttachedMarkByActors(out Actor*[] InActors);// 0x5d0b23bfa041
	void ReleaseWorldMarkPool();// 0x5d0a23bfa041
	void RefreshChosenMark();// 0x5d0923bfa041
	void RecycleWorldMark(HUD_WorldMark* WorldMark);// 0x5d0823bfa041
	void PushBackQueueGroupMapWidget(enum Type, int PosInTeam, HUD_WorldMark* Widget);// 0x5d0723bfa041
	HUD_WorldMark* PopQueueGroupMapWidget(enum Type, int PosInTeam);// 0x5d0623bfa041
	void OnVehicleEndPlay(Actor* Actor, byte EndPlayReason);// 0x5d0523bfa041
	void OnMarkBeChosen(HUD_WorldMark* MarkWidget, bool IfWasChosen);// 0x5d0423bfa041
	void NotifyThatToFarToMark();// 0x5d0323bfa041
	void MarkWarningOnWorld();// 0x5d0223bfa041
	void MarkQuickChatOnWorld(FString IconImg);// 0x5d0123bfa041
	void MarkPointOnWorld();// 0x5d0023bfa041
	void MarkOnWorldByMinimapPosition(int PosInTeam, out const Vector2D MinimapPos);// 0x5cff23bfa041
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x5cfe23bfa041
	void MarkActorByAttachToThem(Actor* InActor);// 0x5cfd23bfa041
	void InteractTypeNotify(enum Type, SolarPlayerController* Controller);// 0x5cfc23bfa041
	void InitWorldMarkPool();// 0x5cfb23bfa041
	void Init(SolarCharacter* Character);// 0x5cfa23bfa041
	HUD_WorldMarkPanel* GetWorldMarkPanel();// 0x5cf923bfa041
	int GetQuickVoiceLocalizationID(out const int VoiceID);// 0x5cf823bfa041
	FString GetQuickVoiceEventName(out const int VoiceID);// 0x5cf723bfa041
	int GetQueueGroupMapSize(enum Type, int PosInTeam);// 0x5cf623bfa041
	FString GetInvalidTypeDefaultIconPath();// 0x5cf523bfa041
	FString GetInteractiveObjectsFullPath(enum Type);// 0x5cf423bfa041
	HUD_WorldMark* GetFreeWorldMark();// 0x5cf323bfa041
	void CreateWorldMarkInternal(int PosInTeam, out const WorldMarkData InWorldMarkedData, Object* IconAsset);// 0x5cf223bfa041
	void CreateWorldMark(int PosInTeam, out const WorldMarkData InWorldMarkedData);// 0x5cf123bfa041
	void CreateWarningWidget(WorldMarkData Data, bool NeedSendMessage);// 0x5cf023bfa041
	void CreateItemMarkWidget(out const WorldMarkData Data);// 0x5cef23bfa041
	void CreateInvalidWidget(WorldMarkData Data, bool bShouldNotify);// 0x5cee23bfa041
	bool CheckMarkPointIsOutOfMap(out const Vector Location);// 0x5ced23bfa041
	bool CheckIfWorldPosValid(WorldMarkData Data, out const int PosInTeam);// 0x5cec23bfa041
	bool CheckIfThisItemBeenMarkedInternal(int instanceID, int PosInTeam);// 0x5ceb23bfa041
	bool CheckAutoMarkDamagingCharacter();// 0x5cea23bfa041
	void AutoMarkDamagingCharacter();// 0x5ce923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: HUD_WorldMark.SolarUserWidget.UserWidget.Widget.Visual.Object
	float LiveTime;//[Offset: 0x348, Size: 0x4]
	float ExtraLiveTime;//[Offset: 0x34c, Size: 0x4]
	float ResponCheckRangeParam;//[Offset: 0x350, Size: 0x4]
	float RefreshTime;//[Offset: 0x354, Size: 0x4]
	Vector WorldPos;//[Offset: 0x358, Size: 0xc]
	Vector2D ScreenSize;//[Offset: 0x364, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x36c, Size: 0x8]
	bool bIsOutOfRangeLastTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	bool bHasBeenAnsweredByMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 0x1]
	bool bIfWasChosen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376, Size: 0x1]
	bool bIsCreateBySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x377, Size: 0x1]
	Image* ImgMarkArrow;//[Offset: 0x378, Size: 0x8]
	Image* ImgItemMarkArrow;//[Offset: 0x380, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x388, Size: 0x8]
	float UpdateIconStyleTime_LowLevel;//[Offset: 0x390, Size: 0x4]
	float UpdateIconStyleTime_HighLevel;//[Offset: 0x394, Size: 0x4]
	int PosInTeam;//[Offset: 0x39c, Size: 0x4]
	WorldMarkData Data;//[Offset: 0x3a0, Size: 0x50]
	enum Type;//[Offset: 0x3f0, Size: 0x1]
	float MaxWorldDistance;//[Offset: 0x3f4, Size: 0x4]
	float MinWorldDistance;//[Offset: 0x3f8, Size: 0x4]
	CurveFloat* OpacityCurve;//[Offset: 0x400, Size: 0x8]
	bool bAttachToObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	void UpdateStyleByScreenPosition(Vector2D ScreenPos, bool bOutOfRange);// 0x44cf23bfa041
	void UpdateDistance(out const Vector TargetPos);// 0x44ce23bfa041
	void SwitchWidget(bool bOutOfRange);// 0x44cd23bfa041
	void SetIfBeChosen(bool bIfChosen);// 0x44cc23bfa041
	void ResponseByLocal();// 0x44cb23bfa041
	void RemoveItemMarkWhenPlayerPicked();// 0x44ca23bfa041
	void LogMarkResponse();// 0x44c923bfa041
	void InitWidget(Object* Owner, int InPosInTeam, out const WorldMarkData InWorldMarkedData, Object* IconImg);// 0x44c823bfa041
	void InitAttachedWidget(Actor* ActorAttachedTo);// 0x44c723bfa041
	void DestroySelf();// 0x44c623bfa041
	bool CheckIsLowLevelDevice();// 0x44c523bfa041
	void CancelResponse();// 0x44c423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: HUD_WorldMarkPanel.SolarUserWidget.UserWidget.Widget.Visual.Object
	HUD_MarkEnemyInfo*[] MarkdEnemyWidgets;//[Offset: 0x348, Size: 0x10]
	CanvasPanel* MarkPanel;//[Offset: 0x358, Size: 0x8]
	class HUD_MarkEnemyInfo* MarkEnemyInfoWidgetClass;//[Offset: 0x360, Size: 0x8]
	class HUD_ScanEffect* ScanEffectWidgetClass;//[Offset: 0x368, Size: 0x8]
	HUD_MarkEnemyInfo*[] MarkEnemyWidgets;//[Offset: 0x370, Size: 0x10]
	void OnSuperRadarStart(out const FString[] InPlayers);// 0x44d823bfa041
	void OnSuperRadarRemovePlayer(FString InPlayer);// 0x44d723bfa041
	void OnSuperRadarEnd();// 0x44d623bfa041
	void OnSpectateTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x44d523bfa041
	void OnScoutCharactersChange(FString[] ScoutedCharacters, FString[] ToBeScoutedCharacters);// 0x44d423bfa041
	FString OnRegisterPositionMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, out const Vector InPosition);// 0x44d323bfa041
	FString OnRegisterActorMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, Actor* FollowActor);// 0x44d223bfa041
	void OnDamagingActorsChange();// 0x44d123bfa041
	void OnAimingEnemy(SolarCharacter* InEnemy);// 0x44d023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: HUD_MarkEnemyInfo.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarTextBlock* Txt_Lvl;//[Offset: 0x348, Size: 0x8]
	DeathViewHPWidget* HPAndShield;//[Offset: 0x350, Size: 0x8]
	CanvasPanel* CanvasPanel;//[Offset: 0x358, Size: 0x8]
	WidgetAnimation* Anim_Exit;//[Offset: 0x360, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x368, Size: 0x8]
	float UpdateVisibleInterval;//[Offset: 0x370, Size: 0x4]
	CurveFloat* DistaceToScaleCurve;//[Offset: 0x378, Size: 0x8]
	<class Actor> OcculusionIgnoreClasses;//[Offset: 0x380, Size: 0x50]
	float MinDisplayHpValue;//[Offset: 0x3d0, Size: 0x4]
	float HPGridUnit;//[Offset: 0x3d4, Size: 0x4]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	byte[] OccQueryTypes;//[Offset: 0x3e0, Size: 0x10]
	WidgetAnimation* Anim_Name_Exit;//[Offset: 0x3f0, Size: 0x8]
	WidgetAnimation* Anim_Name_Enter;//[Offset: 0x3f8, Size: 0x8]
	SolarTextBlock* Txt_PlayerName;//[Offset: 0x400, Size: 0x8]
	HUD_ScanEffect* ScanEffectWidget;//[Offset: 0x408, Size: 0x8]
	float ZOffset;//[Offset: 0x444, Size: 0x4]
	void HideNameMark();// 0x447f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	FText Text;//[Offset: 0x160, Size: 0x18]
	int LocTextID;//[Offset: 0x178, Size: 0x4]
	enum PreviewLang;//[Offset: 0x17c, Size: 0x1]
	bool bCapitalsLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d, Size: 0x1]
	Vector2D CalcSize;//[Offset: 0x180, Size: 0x8]
	delegate TextDelegate;//[Offset: 0x188, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x198, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1c0, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1d0, Size: 0x60]
	SlateFontSizeForLang SpecialLangFont;//[Offset: 0x230, Size: 0x18]
	SlateBrush StrikeBrush;//[Offset: 0x248, Size: 0x98]
	Vector2D ShadowOffset;//[Offset: 0x2e0, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x2e8, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2f8, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x308, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 0x1]
	bool bUsingAccurateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e, Size: 0x1]
	bool bEnableCacheSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool bNeverResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	void SetWrapTextAt(float InWrapTextAt);// 0x58ed23bfa041
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x58ec23bfa041
	void SetText(FText InText);// 0x58eb23bfa041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x58ea23bfa041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x58e923bfa041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x58e823bfa041
	void SetOpacity(float InOpacity);// 0x58e723bfa041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x58e623bfa041
	void SetMargin(Margin InMargin);// 0x58e523bfa041
	void SetLocTextID(int InLocTextID);// 0x58e423bfa041
	void SetLocLangTextData(FText InText, bool InEnableLocText, int InLocTextID, enum InPreviewLang, SlateFontSizeForLang InSlateFontSizeForLang);// 0x58e323bfa041
	void SetLineHeightPercentage(float InLineHeightPercentage);// 0x58e223bfa041
	void SetFont(SlateFontInfo InFontInfo);// 0x58e123bfa041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x58e023bfa041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x58df23bfa041
	Vector2D GetTextSize();// 0x58de23bfa041
	FText GetText();// 0x58dd23bfa041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x58dc23bfa041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x58db23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SlateFontSizeForLang
	bool bEnableFontForLang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int DefaultFontSize;//[Offset: 0x4, Size: 0x4]
	SlateFontSizeLangData[] FontForLangGroup;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SlateFontSizeLangData
	enum SpecialLang;//[Offset: 0x0, Size: 0x1]
	int SpecialFontSize;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: DeathViewHPWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	bool bSplitHPBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	SolarShieldProgressBoard* AdvBar_Shield;//[Offset: 0x378, Size: 0x8]
	SolarHPProgressBoard* AdvBar_HP;//[Offset: 0x380, Size: 0x8]
	LinearColor HPColorNormal;//[Offset: 0x3a8, Size: 0x10]
	LinearColor HPColorDying;//[Offset: 0x3b8, Size: 0x10]
	void UpdateHPBar(const float InCurHealth, const float InMaxHealth, const float InHPGridUnit);// 0x437b23bfa041
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x437a23bfa041
	void OnShieldValueChanged(const SinglePlayerShieldModel* ShieldModel);// 0x437923bfa041
	void OnShieldChanged(const SinglePlayerShieldModel* ShieldModel);// 0x437823bfa041
	void OnShieldAvailableChanged(const SinglePlayerShieldModel* ShieldModel);// 0x437723bfa041
	void OnHPModelChanged(const SinglePlayerHPModel* HPModel);// 0x437623bfa041
	void OnCharacterEndPlay(SolarCharacter* Character);// 0x437523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SinglePlayerShieldModel.SingleCharacterModelBase.Object
	void ShieldValueChanged(const enum InWidgetState, const float InCurValue, const float InChangeValue, const enum InRechargeState, bool bInFixPreAdd);// 0x521723bfa041
	void ShieldChanged(const bool bInAvailable, const float InCurValue, const float InMaxValue, const int InQualityColor, const bool bInIsAdvancedShield);// 0x521623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SingleCharacterModelBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SinglePlayerHPModel.SingleCharacterModelBase.Object
	void OnRescueStateChanged(byte InRescueState);// 0x512323bfa041
	void OnHPValueChanged(const SolarCharacter* Character);// 0x512223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarShieldProgressBoard.SolarAdvProgressBoard.UserWidget.Widget.Visual.Object
	float AutoRechargeSpeed;//[Offset: 0x2b4, Size: 0x4]
	float RechargeTime;//[Offset: 0x2b8, Size: 0x4]
	float PreChangeSpeed;//[Offset: 0x2bc, Size: 0x4]
	void UpdateCurrentValue(float Current);// 0x52a723bfa041
	void SetSpeed(float NewSpeed);// 0x52a623bfa041
	void SetProgressColorByID(out const LinearColor InColor, const int InID);// 0x52a523bfa041
	void SetPreAddColor();// 0x52a423bfa041
	void PreAddValue(const float InCurrentValue, const float InChangeValue, const enum RechargeState, const bool bInFixPreAdd);// 0x52a323bfa041
	void InitProgressBoard(float Current, float Max, int Fragment);// 0x52a223bfa041
	void InitProgress();// 0x52a123bfa041
	float GetSpeed();// 0x52a023bfa041
	void DoMinusValue(const float InCurrentValue, const float InChangeValue);// 0x529f23bfa041
	void DoAddValue(const float InCurrentValue);// 0x529e23bfa041
	void CancelAddValue(const float InCurrentValue, const float InChangeValue);// 0x529d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAdvProgressBoard.UserWidget.Widget.Visual.Object
	Image* ProgressBoard;//[Offset: 0x260, Size: 0x8]
	MaterialInstance* ProgressShader;//[Offset: 0x268, Size: 0x8]
	LinearColor IncreaseColor;//[Offset: 0x270, Size: 0x10]
	LinearColor DecreaseColor;//[Offset: 0x280, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarHPProgressBoard.UserWidget.Widget.Visual.Object
	Image* ProgressBoard;//[Offset: 0x260, Size: 0x8]
	MaterialInstance* ProgressShader;//[Offset: 0x268, Size: 0x8]
	float Speed;//[Offset: 0x270, Size: 0x4]
	float RechargeSpeed;//[Offset: 0x274, Size: 0x4]
	float RechargeTime;//[Offset: 0x278, Size: 0x4]
	int RechargeIndex;//[Offset: 0x27c, Size: 0x4]
	bool bDebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	float Percent1;//[Offset: 0x284, Size: 0x4]
	float Percent2;//[Offset: 0x288, Size: 0x4]
	float Percent3;//[Offset: 0x28c, Size: 0x4]
	float Percent4;//[Offset: 0x290, Size: 0x4]
	bool bNeedAlternateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	LinearColor IncreaseColor;//[Offset: 0x298, Size: 0x10]
	LinearColor DecreaseColor;//[Offset: 0x2a8, Size: 0x10]
	void UpdateMaxValue(float Max);// 0x4e8223bfa041
	void UpdateCurrentValue(float Current);// 0x4e8123bfa041
	void SetSpacing(const float InValue);// 0x4e8023bfa041
	void SetProgressColorByID(out const LinearColor InColor, const int InID);// 0x4e7f23bfa041
	void SetPreAddColor();// 0x4e7e23bfa041
	void SetPercentageByIndex(float Percent, int Index);// 0x4e7d23bfa041
	void SetFragment(float Num);// 0x4e7c23bfa041
	void SetCurrentValueInstantly(float Current);// 0x4e7b23bfa041
	void SetAlternateColor(out const LinearColor InColor, bool IsChangeBoth, bool IsForIncrease);// 0x4e7a23bfa041
	void PreAddValue(const float InCurrentValue, const float InChangeValue, const enum RechargeState, const bool bInFixPreAdd, const bool bInAdaptiveRecharge);// 0x4e7923bfa041
	void InitProgressBoard(float Current, float Max, float Fragment);// 0x4e7823bfa041
	void InitProgress();// 0x4e7723bfa041
	LinearColor GetAlternateColor(bool bIncrease);// 0x4e7623bfa041
	void DoMinusValue(const float InCurrentValue, const float InChangeValue);// 0x4e7523bfa041
	void DoAddValue(const float InCurrentValue, const float InChangeValue);// 0x4e7423bfa041
	void CancelAddValue(const float InCurrentValue, const float InChangeValue);// 0x4e7323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: HUD_ScanEffect.SolarUserWidget.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_Scan;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* Anim_FadeOut;//[Offset: 0x350, Size: 0x8]
	FString ScanSound;//[Offset: 0x358, Size: 0x10]
	float MinAnimLength;//[Offset: 0x368, Size: 0x4]
	FName BoneName;//[Offset: 0x36c, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCharacterMovementComponent.SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x6b0, Size: 0x8]
	float DefaultUnscaledCapsuleHalfHeight;//[Offset: 0x6b8, Size: 0x4]
	float DefaultLazyRefreshBonesDelay;//[Offset: 0x6bc, Size: 0x4]
	bool bKeepWalkSpeedOnTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	float MinJogSpeedScaleOnBlocked;//[Offset: 0x6e4, Size: 0x4]
	float MinRunSpeedScaleOnBlocked;//[Offset: 0x6e8, Size: 0x4]
	float MinSprintSpeedScaleOnBlocked;//[Offset: 0x6ec, Size: 0x4]
	float MinCrawlSpeedScaleOnBlocked;//[Offset: 0x6f0, Size: 0x4]
	float MinSwimSpeedScaleOnBlocked;//[Offset: 0x6f4, Size: 0x4]
	float MinAccelerationProjectRatioForValidGroundSlide;//[Offset: 0x6f8, Size: 0x4]
	bool bOverrideFallingGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 0x1]
	float OverriddenFallingGravity;//[Offset: 0x700, Size: 0x4]
	float FallingHorizontalSpeedUpperLimit;//[Offset: 0x704, Size: 0x4]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x708, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x70c, Size: 0x1]
	enum CurrentAirMoveMode;//[Offset: 0x742, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x743, Size: 0x1]
	CustomJumpParams CustomJumpParams;//[Offset: 0x748, Size: 0xc]
	CustomJumpParams CustomLaunchParams;//[Offset: 0x754, Size: 0xc]
	JetPackConfig* JetPackConfig;//[Offset: 0x770, Size: 0x8]
	SkydiveConfig* SkydiveConfig;//[Offset: 0x790, Size: 0x8]
	float HinderAngel;//[Offset: 0x7b8, Size: 0x4]
	float HinderPercent;//[Offset: 0x7bc, Size: 0x4]
	float HinderZ;//[Offset: 0x7c0, Size: 0x4]
	float SwimSpeedWhenSprintLockConfig;//[Offset: 0x7c4, Size: 0x4]
	float SwimSpeedConfig;//[Offset: 0x7c8, Size: 0x4]
	float SwimSpeedSmoothSpeed;//[Offset: 0x7cc, Size: 0x4]
	float SwimMaxFloatingUpSpeed;//[Offset: 0x7d0, Size: 0x4]
	float SwimMaxSinkingSpeed;//[Offset: 0x7d4, Size: 0x4]
	PhysicsVolume* NextPhysicsVolume;//[Offset: 0x7d8, Size: 0x8]
	bool bWantDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85d, Size: 0x1]
	float DeathVergeBodyRadius;//[Offset: 0x860, Size: 0x4]
	float DeathVergeHalfHeight;//[Offset: 0x864, Size: 0x4]
	Actor* HangingTargetObj;//[Offset: 0x870, Size: 0x8]
	Vector HangingTargetVelocity;//[Offset: 0x878, Size: 0xc]
	bool UseHangingTargetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 0x1]
	bool UseHangingTargetPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x885, Size: 0x1]
	void UpdateCharacterStateAfterMovement__DelegateSignature(SolarCharacterMovementComponent* MovementComponent, float DeltaTime);// 0x1b0223bfa041
	void SetHinderZ(float InHinderZ);// 0x1b0123bfa041
	void SetHinderAngel(float InHinderAngel);// 0x1b0023bfa041
	void OnMovementBaseChanged(Character* Character, PrimitiveComponent* OldBase, PrimitiveComponent* NewBase);// 0x1aff23bfa041
	void HinderUphill(out const Vector SlopeNormal, out Vector MoveVelocity);// 0x1afe23bfa041
	byte GetSteppedSurfaceType();// 0x1afc23bfa041
	enum GetLastWalkMode();// 0x1afb23bfa041
	enum GetCurrentWalkMode();// 0x1af923bfa041
	void ForcedJump();// 0x1af823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float SimStepOptimizedDist;//[Offset: 0x618, Size: 0x4]
	int TimeDiscrepancyUploadThres;//[Offset: 0x650, Size: 0x4]
	SolarClientAdjustPositionInfo CachedClientAdjustPositionInfo;//[Offset: 0x658, Size: 0x38]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarClientAdjustPositionInfo
	PrimitiveComponent* NewBase;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CustomJumpParams
	float JumpHeight;//[Offset: 0x0, Size: 0x4]
	float JumpTime;//[Offset: 0x4, Size: 0x4]
	float JumpDelay;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: JetPackConfig.DataAsset.Object
	float CurrentSpeedResidueHorizontal;//[Offset: 0x30, Size: 0x4]
	float CurrentSpeedResidueVertical;//[Offset: 0x34, Size: 0x4]
	float AltitudeLimitation;//[Offset: 0x38, Size: 0x4]
	float DashHeightForLimitedAltitude;//[Offset: 0x3c, Size: 0x4]
	float SlantDashInputThreshold;//[Offset: 0x40, Size: 0x4]
	float VerticalDashTime;//[Offset: 0x44, Size: 0x4]
	float VerticalDashHeight;//[Offset: 0x48, Size: 0x4]
	float VerticalDashAngle;//[Offset: 0x4c, Size: 0x4]
	float VerticalDashMaxHorizontalEndSpeed;//[Offset: 0x50, Size: 0x4]
	float VerticalDashBreakableTime;//[Offset: 0x54, Size: 0x4]
	float VerticalDashCameraFadeOutTime;//[Offset: 0x58, Size: 0x4]
	float SlantDashTime;//[Offset: 0x5c, Size: 0x4]
	float SlantDashHeight;//[Offset: 0x60, Size: 0x4]
	float SlantDashAngle;//[Offset: 0x64, Size: 0x4]
	float SlantDashMaxHorizontalEndSpeed;//[Offset: 0x68, Size: 0x4]
	float SlantDashBreakableTime;//[Offset: 0x6c, Size: 0x4]
	float SlantDashCameraFadeOutTime;//[Offset: 0x70, Size: 0x4]
	float HorizontalDashTime;//[Offset: 0x74, Size: 0x4]
	float HorizontalDashDistance;//[Offset: 0x78, Size: 0x4]
	float HorizontalDashAngle;//[Offset: 0x7c, Size: 0x4]
	float HorizontalDashEndSpeed;//[Offset: 0x80, Size: 0x4]
	float HorizontalDashBreakableTime;//[Offset: 0x84, Size: 0x4]
	float HorizontalDashCameraFadeOutTime;//[Offset: 0x88, Size: 0x4]
	float UnderWaterHorizontalDashTime;//[Offset: 0x8c, Size: 0x4]
	float UnderWaterHorizontalDashDistance;//[Offset: 0x90, Size: 0x4]
	float UnderWaterHorizontalDashBreakableTime;//[Offset: 0x94, Size: 0x4]
	float UnderWaterHorizontalDashCameraFadeOutTime;//[Offset: 0x98, Size: 0x4]
	VehicleEjectParams DefaultVehicleEjectParams;//[Offset: 0x9c, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkydiveConfig.DataAsset.Object
	float DefaultFallingSpeed;//[Offset: 0x30, Size: 0x4]
	float MinFallingSpeed;//[Offset: 0x34, Size: 0x4]
	float FallingBrakingDeceleration;//[Offset: 0x38, Size: 0x4]
	RuntimeFloatCurve FlyingForwardPitchMappingCurve;//[Offset: 0x40, Size: 0x88]
	RuntimeFloatCurve MaxFlyingForwardSpeedCurve;//[Offset: 0xc8, Size: 0x88]
	float MaxFlyingSidewardSpeed;//[Offset: 0x150, Size: 0x4]
	float MaxFlyingAcceleration;//[Offset: 0x154, Size: 0x4]
	float MinFlyingBrakingDeceleration;//[Offset: 0x158, Size: 0x4]
	float MaxFlyingBrakingDeceleration;//[Offset: 0x15c, Size: 0x4]
	float FlyingRotationSmoothSpeedYaw;//[Offset: 0x160, Size: 0x4]
	float FlyingRotationSmoothSpeedPitch;//[Offset: 0x164, Size: 0x4]
	float FlyingRotationSmoothSpeedYawOnFollowing;//[Offset: 0x168, Size: 0x4]
	float FlyingRotationSmoothSpeedPitchOnFollowing;//[Offset: 0x16c, Size: 0x4]
	float LandingHeight;//[Offset: 0x170, Size: 0x4]
	float LandingFallingSpeed;//[Offset: 0x174, Size: 0x4]
	float LandingFallingBrakingDeceleration;//[Offset: 0x178, Size: 0x4]
	float LandingMaxFlyingSpeed;//[Offset: 0x17c, Size: 0x4]
	float LandingFlyingAcceleration;//[Offset: 0x180, Size: 0x4]
	FName[] LandingIgnoredActorTags;//[Offset: 0x188, Size: 0x10]
	Vector[] FollowFormation;//[Offset: 0x198, Size: 0x10]
	float SmoothTimeToCatchUpWithLeaderOnBeginning;//[Offset: 0x1a8, Size: 0x4]
	CharacterMovementNetworkOptions NetworkOptions;//[Offset: 0x1ac, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterMovementNetworkOptions
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x4, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCapsuleRoot.Actor.Object
	SceneComponent* RootComp;//[Offset: 0x230, Size: 0x8]
	WidgetComponent* LocationSign;//[Offset: 0x238, Size: 0x8]
	float CatchupDuration;//[Offset: 0x250, Size: 0x4]
	float CatchupBaseLerp;//[Offset: 0x254, Size: 0x4]
	MiniMapAirlineData MiniMapData;//[Offset: 0x27c, Size: 0x30]
	UsingAirlineData CurrentAirline;//[Offset: 0x2ac, Size: 0x44]
	float CruiseStartTime;//[Offset: 0x2f0, Size: 0x4]
	Vector CruiseStartLoc;//[Offset: 0x2f4, Size: 0xc]
	Rotator CruiseStartRot;//[Offset: 0x300, Size: 0xc]
	int ForceParachuteWarningTime;//[Offset: 0x30c, Size: 0x4]
	float MaxAllowedSmoothDistance;//[Offset: 0x310, Size: 0x4]
	float ClientSpeedScale;//[Offset: 0x314, Size: 0x4]
	float ClientRotationSmoothSpeed;//[Offset: 0x318, Size: 0x4]
	CapsuleFormationData* CapsuleFormationData;//[Offset: 0x338, Size: 0x8]
	<Vector,TeamFormationUnit> CruiseFormation;//[Offset: 0x340, Size: 0x50]
	BoarderInfo[] BoardingPlayerList;//[Offset: 0x390, Size: 0x10]
	void ServerUnBoardCharacter(SolarCharacter* Character);// 0x4b4223bfa041
	void OnRep_MiniMapAirline();// 0x4b4123bfa041
	void OnRep_CurrentAirline();// 0x4b4023bfa041
	MiniMapAirlineData K2_GetAirlineData();// 0x4b3f23bfa041
	SolarCapsuleRoot* GetSolarCapsuleRoot(const Object* WorldContextObject);// 0x4b3e23bfa041
	float GetCruiseProgress();// 0x4b3d23bfa041
	int BoardingCharacter(out const BoarderInfo BoarderInfo);// 0x4b3c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BoarderInfo
	SolarCharacter* Boarder;//[Offset: 0x0, Size: 0x8]
	int BoarderTeamID;//[Offset: 0x8, Size: 0x4]
	int BoarderTeamSize;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: UsingAirlineData
	int MapID;//[Offset: 0x0, Size: 0x4]
	Vector StartPoint;//[Offset: 0x4, Size: 0xc]
	Vector EndPoint;//[Offset: 0x10, Size: 0xc]
	Vector2D Direction;//[Offset: 0x1c, Size: 0x8]
	float Speed;//[Offset: 0x24, Size: 0x4]
	float Height;//[Offset: 0x28, Size: 0x4]
	Vector CanParachutePoint;//[Offset: 0x2c, Size: 0xc]
	Vector ForceParachutePoint;//[Offset: 0x38, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: CapsuleFormationData.DataAsset.Object
	<byte,EchelonFormation> TeamFormation;//[Offset: 0x30, Size: 0x50]
	CruiseFormation CruiseFormation;//[Offset: 0x80, Size: 0x10]
	void OverrideTeamFormation(out const <byte,EchelonFormation> InNewFormation);// 0x41ea23bfa041
	void ClearTeamFormationData();// 0x41e923bfa041
	void ClearCruiseFormationData();// 0x41e823bfa041
	void AddTeamFormationLocation(const byte InEchelon, out const Vector InLocation);// 0x41e723bfa041
	void AddLocationToTeamFormation(out <byte,EchelonFormation> InFormation, const byte InEchelon, out const Vector InLocation);// 0x41e623bfa041
	void AddEchelonFormation(const byte InEchelon, out const EchelonFormation InFormation);// 0x41e523bfa041
	void AddCruiseFormation(out const CruiseFormation InFormation);// 0x41e423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: EchelonFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CruiseFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TeamFormationUnit
	<byte,EchelonFormationUnit> TeamFormation;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: EchelonFormationUnit
	BoardingSpotInfo[] EchelonFormation;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BoardingSpotInfo
	Vector SpotLocation;//[Offset: 0x0, Size: 0xc]
	SolarPlayerState* BoardingPlayer;//[Offset: 0x10, Size: 0x8]
	SolarPlayerState* LeaderPlayer;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterCruiseComponent.ActorComponent.Object
	SolarCapsuleActor* BoardedCapsulePrivate;//[Offset: 0xb0, Size: 0x8]
	FName CruiseStartSoundGroupName;//[Offset: 0xc4, Size: 0x8]
	SolarCharacter* GetCharacterOwner();// 0x431723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCapsuleActor.Actor.Object
	SoftObjectPath StartCruisingPath;//[Offset: 0x228, Size: 0x18]
	SoftObjectPath StopCruisingPath;//[Offset: 0x240, Size: 0x18]
	FName CruiseCharacterBindingName;//[Offset: 0x258, Size: 0x8]
	FName CruiseCapsuleBindingName;//[Offset: 0x260, Size: 0x8]
	FName CruiseCameraBindingName;//[Offset: 0x268, Size: 0x8]
	float SequenceCameraBlendDuration;//[Offset: 0x270, Size: 0x4]
	AnimationAsset* CapsuleCruisingLoopAnim;//[Offset: 0x278, Size: 0x8]
	AnimSequence* CharacterCruiseLoopAnim;//[Offset: 0x280, Size: 0x8]
	SoftObjectPath CapsuleCruisingStopAnimPath;//[Offset: 0x288, Size: 0x18]
	AnimSequence* CharacterCruiseEndAnim;//[Offset: 0x2a0, Size: 0x8]
	SkeletalMeshComponent* CapsuleSkeletalMesh;//[Offset: 0x2a8, Size: 0x8]
	StaticMeshComponent*[] AirflowMeshEffects;//[Offset: 0x2b0, Size: 0x10]
	ParticleSystemComponent*[] AirflowParticleEffects;//[Offset: 0x2c0, Size: 0x10]
	LevelSequenceActor* SequenceActor;//[Offset: 0x2d0, Size: 0x8]
	CineCameraActor* SequenceCamera;//[Offset: 0x2d8, Size: 0x8]
	LevelSequence* StartCruisingSequence;//[Offset: 0x2e0, Size: 0x8]
	LevelSequence* StopCruisingSequence;//[Offset: 0x2e8, Size: 0x8]
	AnimationAsset* CapsuleCruisingEndAnim;//[Offset: 0x2f0, Size: 0x8]
	SolarCharacter* BoardedCharacterPrivate;//[Offset: 0x2f8, Size: 0x8]
	ParticleSystemComponent* CloudParticleComponent;//[Offset: 0x300, Size: 0x8]
	SoftObjectPath CloudParticlePath;//[Offset: 0x308, Size: 0x18]
	ParticleSystem* CloudParticleAsset;//[Offset: 0x340, Size: 0x8]
	void StopCruiseSequenceFinished();// 0x4b3b23bfa041
	void StartCruiseSequenceFinished();// 0x4b3a23bfa041
	void PlayStopCruiseSequence();// 0x4b3923bfa041
	void PlayStopCruiseAnimation();// 0x4b3823bfa041
	void PlayStartCruiseSequence();// 0x4b3723bfa041
	void PlayCruiseLoopAnimation();// 0x4b3623bfa041
	void HideCapsuleAirflowVFX();// 0x4b3523bfa041
	SolarCapsuleActor* CreateCapsuleActorForBoarder(SolarCharacter* InBoarder, class SolarCapsuleActor CapsuleActorClass);// 0x4b3423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x238, Size: 0x14]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x250, Size: 0x8]
	SoftObjectPath LevelSequence;//[Offset: 0x258, Size: 0x18]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x270, Size: 0x10]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x280, Size: 0x2]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x288, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x290, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x298, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x298, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x2a0, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2a8, Size: 0x8]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	void ShowBurnin();// 0x35bc23bfa041
	void SetSequence(LevelSequence* InSequence);// 0x35bb23bfa041
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x35ba23bfa041
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x35b923bfa041
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x35b823bfa041
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x35b723bfa041
	void ResetBindings();// 0x35b623bfa041
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x35b523bfa041
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x35b423bfa041
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x35b323bfa041
	void OnLevelSequenceLoaded__DelegateSignature();// 0x35b223bfa041
	LevelSequence* LoadSequence();// 0x35b123bfa041
	void HideBurnin();// 0x35b023bfa041
	LevelSequencePlayer* GetSequencePlayer();// 0x35af23bfa041
	LevelSequence* GetSequence();// 0x35ae23bfa041
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x35ad23bfa041
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x35ac23bfa041
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x35ab23bfa041
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x35aa23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x888, Size: 0x10]
	CameraComponent* GetActiveCameraComponent();// 0x607023bfa041
	LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x606f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x408, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x418, Size: 0x10]
	delegate OnStop;//[Offset: 0x428, Size: 0x10]
	delegate OnPause;//[Offset: 0x438, Size: 0x10]
	delegate OnFinished;//[Offset: 0x448, Size: 0x10]
	byte status;//[Offset: 0x458, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x460, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x468, Size: 0x4]
	int DurationFrames;//[Offset: 0x46c, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x470, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x488, Size: 0x14]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4a0, Size: 0x320]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x828, Size: 0x10]
	interface class None* PlaybackClient;//[Offset: 0x838, Size: 0x10]
	void StopAtCurrentTime();// 0x3f8d23bfa041
	void Stop();// 0x3f8c23bfa041
	void SetTimeRange(float StartTime, float Duration);// 0x3f8b23bfa041
	void SetPlayRate(float PlayRate);// 0x3f8a23bfa041
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x3f8923bfa041
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x3f8823bfa041
	void SetFrameRate(FrameRate FrameRate);// 0x3f8723bfa041
	void SetFrameRange(int StartFrame, int Duration);// 0x3f8623bfa041
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x3f8523bfa041
	void ScrubToSeconds(float TimeInSeconds);// 0x3f8423bfa041
	bool ScrubToMarkedFrame(FString InLabel);// 0x3f8323bfa041
	void ScrubToFrame(FrameTime NewPosition);// 0x3f8223bfa041
	void Scrub();// 0x3f8123bfa041
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x3f8023bfa041
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x3f7f23bfa041
	void PlayToSeconds(float TimeInSeconds);// 0x3f7e23bfa041
	bool PlayToMarkedFrame(FString InLabel);// 0x3f7d23bfa041
	void PlayToFrame(FrameTime NewPosition);// 0x3f7c23bfa041
	void PlayReverse();// 0x3f7b23bfa041
	void PlayLooping(int NumLoops);// 0x3f7a23bfa041
	void Play();// 0x3f7923bfa041
	void Pause();// 0x3f7823bfa041
	void JumpToSeconds(float TimeInSeconds);// 0x3f7723bfa041
	void JumpToPosition(float NewPlaybackPosition);// 0x3f7623bfa041
	bool JumpToMarkedFrame(FString InLabel);// 0x3f7523bfa041
	void JumpToFrame(FrameTime NewPosition);// 0x3f7423bfa041
	bool IsReversed();// 0x3f7323bfa041
	bool IsPlaying();// 0x3f7223bfa041
	bool IsPaused();// 0x3f7123bfa041
	void GoToEndAndStop();// 0x3f7023bfa041
	QualifiedFrameTime GetStartTime();// 0x3f6f23bfa041
	float GetPlayRate();// 0x3f6e23bfa041
	float GetPlaybackStart();// 0x3f6d23bfa041
	float GetPlaybackPosition();// 0x3f6c23bfa041
	float GetPlaybackEnd();// 0x3f6b23bfa041
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x3f6a23bfa041
	float GetLength();// 0x3f6923bfa041
	FrameRate GetFrameRate();// 0x3f6823bfa041
	int GetFrameDuration();// 0x3f6723bfa041
	QualifiedFrameTime GetEndTime();// 0x3f6623bfa041
	QualifiedFrameTime GetDuration();// 0x3f6523bfa041
	bool GetDisableCameraCuts();// 0x3f6423bfa041
	QualifiedFrameTime GetCurrentTime();// 0x3f6323bfa041
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x3f6223bfa041
	void ChangePlaybackDirection();// 0x3f6123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 0x50]
	class Object* DirectorClass;//[Offset: 0x490, Size: 0x8]
	void RemoveMetaDataByClass(class Object InClass);// 0x3d0323bfa041
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x3d0223bfa041
	Object* FindMetaDataByClass(class Object InClass);// 0x3d0123bfa041
	Object* CopyMetaData(Object* InMetaData);// 0x3d0023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequenceObjectReferenceMap
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x606b23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequenceBurnInInitSettings.Object
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x260, Size: 0xb8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x318, Size: 0x8]
	void SetSettings(Object* InSettings);// 0x606d23bfa041
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x606c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x800, Size: 0x50]
	CineCameraComponent* GetCineCameraComponent();// 0x530623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x930, Size: 0xc]
	CameraFilmbackSettings Filmback;//[Offset: 0x93c, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x948, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x960, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x9b8, Size: 0x4]
	float CurrentAperture;//[Offset: 0x9bc, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x9c0, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x9d0, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0x9e0, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0x9f0, Size: 0x10]
	FString DefaultFilmbackPreset;//[Offset: 0xa00, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0xa10, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0xa20, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0xa24, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x5f3e23bfa041
	void SetFilmbackPresetByName(FString InPresetName);// 0x5f3d23bfa041
	void SetCurrentFocalLength(out const float InFocalLength);// 0x5f3c23bfa041
	float GetVerticalFieldOfView();// 0x5f3b23bfa041
	NamedLensPreset[] GetLensPresetsCopy();// 0x5f3a23bfa041
	FString GetLensPresetName();// 0x5f3923bfa041
	float GetHorizontalFieldOfView();// 0x5f3823bfa041
	FString GetFilmbackPresetName();// 0x5f3723bfa041
	FString GetDefaultFilmbackPresetName();// 0x5f3623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x228, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	void OnRep_bEnabled();// 0x61c723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	bool EnableFarlightMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	SLDistanceFogData DistanceFogData_M;//[Offset: 0x318, Size: 0x18]
	SLHeightFogData HeightFogData_M;//[Offset: 0x330, Size: 0x10]
	SLDirectionalLightScattering ScatteringData_M;//[Offset: 0x340, Size: 0x20]
	LinearColor FogColor_M;//[Offset: 0x360, Size: 0x10]
	float FogDensity;//[Offset: 0x370, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x374, Size: 0x4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x378, Size: 0xc]
	LinearColor FogInscatteringColor;//[Offset: 0x384, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x398, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x3a0, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x3a4, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x3b4, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x3b8, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x3bc, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x3c0, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x3c4, Size: 0x10]
	float FogMaxOpacity;//[Offset: 0x3d4, Size: 0x4]
	float StartDistance;//[Offset: 0x3d8, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x3dc, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x3e4, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x3e8, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x3ec, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x3fc, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x400, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x404, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x61ee23bfa041
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x61ed23bfa041
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x61ec23bfa041
	void SetVolumetricFogDistance(float NewValue);// 0x61eb23bfa041
	void SetVolumetricFogAlbedo(Color NewValue);// 0x61ea23bfa041
	void SetVolumetricFog(bool bNewValue);// 0x61e923bfa041
	void SetStartDistance(float Value);// 0x61e823bfa041
	void SetSecondFogData_FogHeightOffset(float Value);// 0x61e723bfa041
	void SetSecondFogData_FogHeightFalloff(float Value);// 0x61e623bfa041
	void SetSecondFogData_FogDensity(float Value);// 0x61e523bfa041
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x61e423bfa041
	void SetInscatteringTextureTint(LinearColor Value);// 0x61e323bfa041
	void SetInscatteringColorCubemapAngle(float Value);// 0x61e223bfa041
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x61e123bfa041
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x61e023bfa041
	void SetFogMaxOpacity(float Value);// 0x61df23bfa041
	void SetFogInscatteringColor(LinearColor Value);// 0x61de23bfa041
	void SetFogHeightFalloff(float Value);// 0x61dd23bfa041
	void SetFogDensity(float Value);// 0x61dc23bfa041
	void SetFogCutoffDistance(float Value);// 0x61db23bfa041
	void SetDirectionalInscatteringStartDistance(float Value);// 0x61da23bfa041
	void SetDirectionalInscatteringExponent(float Value);// 0x61d923bfa041
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x61d823bfa041
	void Set_HStartDistance(float _HStartDistance);// 0x61d723bfa041
	void Set_HMaxFadingDistance(float _HMaxFadingDistance);// 0x61d623bfa041
	void Set_HFogHeight(float _HFogHeight);// 0x61d523bfa041
	void Set_HFogFallOff(float _HFogFallOff);// 0x61d423bfa041
	void Set_FogColor_M(LinearColor _FogColor_M);// 0x61d323bfa041
	void Set_DStartDistance(float _DStartDistance);// 0x61d223bfa041
	void Set_DMaxOpacity(float _DMaxOpacity);// 0x61d123bfa041
	void Set_DMaxDistance(float _DMaxDistance);// 0x61d023bfa041
	void Set_DirectionalInscatteringStartDistance_M(float _DirectionalInscatteringStartDistance_M);// 0x61cf23bfa041
	void Set_DirectionalInscatteringMaxDistance_M(float _DirectionalInscatteringMaxDistance_M);// 0x61ce23bfa041
	void Set_DirectionalInscatteringGamma_M(float _DirectionalInscatteringGamma_M);// 0x61cd23bfa041
	void Set_DirectionalInscatteringExponent_M(float _DirectionalInscatteringExponent_M);// 0x61cc23bfa041
	void Set_DirectionalInscatteringColor_M(LinearColor _DirectionalInscatteringColor_M);// 0x61cb23bfa041
	void Set_DFogHeight(float _DFogHeight);// 0x61ca23bfa041
	void Set_DFogGamma(float _DFogGamma);// 0x61c923bfa041
	void Set_DFogFallOff(float _DFogFallOff);// 0x61c823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SLDistanceFogData
	float DFogHeight;//[Offset: 0x0, Size: 0x4]
	float DFogFallOff;//[Offset: 0x4, Size: 0x4]
	float DMaxDistance;//[Offset: 0x8, Size: 0x4]
	float DFogGamma;//[Offset: 0xc, Size: 0x4]
	float DMaxOpacity;//[Offset: 0x10, Size: 0x4]
	float DStartDistance;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SLHeightFogData
	float HFogHeight;//[Offset: 0x0, Size: 0x4]
	float HFogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float HStartDistance;//[Offset: 0x8, Size: 0x4]
	float HMaxFadingDistance;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SLDirectionalLightScattering
	float DirectionalInscatteringExponent_M;//[Offset: 0x0, Size: 0x4]
	float DirectionalInscatteringStartDistance_M;//[Offset: 0x4, Size: 0x4]
	float DirectionalInscatteringMaxDistance_M;//[Offset: 0x8, Size: 0x4]
	LinearColor DirectionalInscatteringColor_M;//[Offset: 0xc, Size: 0x10]
	float DirectionalInscatteringGamma_M;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSystemPlayerBase.WeaponSystemBase.ActorComponent.Object
	bool bHasPrimarySlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	bool bHasSecondarySlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 0x1]
	bool bHasTertiarySlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 0x1]
	SolarUnArmWeapon* Punch;//[Offset: 0x1bc, Size: 0x8]
	SolarPlayerWeapon* PrimarySlotWeapon;//[Offset: 0x1c4, Size: 0x8]
	SolarPlayerWeapon* SecondarySlotWeapon;//[Offset: 0x1cc, Size: 0x8]
	SolarPlayerWeapon* TertiarySlotWeapon;//[Offset: 0x1d4, Size: 0x8]
	SolarPlayerWeapon* HeldWeapon;//[Offset: 0x1dc, Size: 0x8]
	void TriggerBoltAnim();// 0x5caf23bfa041
	void SpawnMeleeWeapon();// 0x5cae23bfa041
	void ResetCurrentWeaponFireState();// 0x5cad23bfa041
	void PostBolt();// 0x5cac23bfa041
	void OpenScopeForSpectator();// 0x5cab23bfa041
	void OnRep_TertiarySlotWeapon();// 0x5caa23bfa041
	void OnRep_SecondarySlotWeapon();// 0x5ca923bfa041
	void OnRep_Punch();// 0x5ca823bfa041
	void OnRep_PrimarySlotWeapon();// 0x5ca723bfa041
	void OnRep_HeldWeapon();// 0x5ca623bfa041
	SolarPlayerWeapon* GetWeaponBySlot(int InSlotType);// 0x5ca523bfa041
	SolarUnArmWeapon* GetUnArmWeapon();// 0x5ca423bfa041
	SolarPlayerWeapon* GetPackSecondaryWeapon();// 0x5ca323bfa041
	SolarPlayerWeapon* GetPackPrimaryWeapon();// 0x5ca223bfa041
	int GetLastActiveWeaponSlot();// 0x5ca123bfa041
	bool GetIsUnArm();// 0x5ca023bfa041
	float GetCurrentWeaponReloadTime(int Mode);// 0x5c9f23bfa041
	bool GetCurrentWeaponIsOverloading();// 0x5c9e23bfa041
	Texture2D* GetCurrentWeaponIcon();// 0x5c9d23bfa041
	float GetCurrentWeaponBoltTime(int Mode);// 0x5c9c23bfa041
	SolarPlayerWeapon* GetCurrentWeapon();// 0x5c9b23bfa041
	float GetCurrentSwitchWeaponTime();// 0x5c9a23bfa041
	int GetCurrentActiveSlot();// 0x5c9923bfa041
	StaticMesh* GetClipMeshOfCurrentWeapon();// 0x5c9823bfa041
	void GameStatisticsWeaponSkill(const int InFireMode);// 0x5c9723bfa041
	void CrosshairQuitReload();// 0x5c9623bfa041
	void CrosshairEnterReload();// 0x5c9523bfa041
	void CloseScopeForSpectator();// 0x5c9423bfa041
	void CleanWeaponSlotsUI();// 0x5c9323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarUnArmWeapon.Actor.Object
	float Angle;//[Offset: 0x230, Size: 0x4]
	byte[] HitDetectableTypes;//[Offset: 0x238, Size: 0x10]
	float Interval;//[Offset: 0x248, Size: 0x4]
	class UserWidget* Crosshair;//[Offset: 0x250, Size: 0x8]
	SoftObjectPath FireIconPath;//[Offset: 0x258, Size: 0x18]
	GameplayCueTag HitCueTag;//[Offset: 0x270, Size: 0x8]
	SlateBrush FireBtnBrush;//[Offset: 0x278, Size: 0x98]
	SolarAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x310, Size: 0x8]
	SolarCharacterBase* AttackTargetCharacter;//[Offset: 0x320, Size: 0x8]
	SolarDamageInfo DamageInfo;//[Offset: 0x378, Size: 0x40]
	class SolarAbility* MeleeAbilityClass;//[Offset: 0x3b8, Size: 0x8]
	void TryDealMeleeDamage(out const Vector Location, float DetectSphereRadius);// 0x59a423bfa041
	void ServerDealMeleeDamage(SolarCharacterBase* Target, Vector ClientHitLoc, bool bHeavyPunch);// 0x59a323bfa041
	bool HitAnyCharacters(out SolarCharacterBase* HitTarget, out const Vector Location, out const float DetectSphereRadius);// 0x59a223bfa041
	SlateBrush GetFireButtonBrush();// 0x59a123bfa041
	SolarCharacterBase* GetAttackTargetCharacter();// 0x59a023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponSystemVehicleComponent.WeaponSystemBase.ActorComponent.Object
	WeaponSystemInteract WeaponSystemInteract;//[Offset: 0x180, Size: 0x50]
	SolarVehicleWeapon* CurrentWeapon;//[Offset: 0x1e8, Size: 0x8]
	SolarCharacter* MyPawn;//[Offset: 0x1f0, Size: 0x8]
	WeaponAction WeaponEquipAction;//[Offset: 0x220, Size: 0x8]
	WeaponAction WeaponUnequipAction;//[Offset: 0x228, Size: 0x8]
	<FName,enum> SavedWeaponScopeMap;//[Offset: 0x230, Size: 0x50]
	bool bQuickAdsHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	float QuickAdsPressedTime;//[Offset: 0x290, Size: 0x4]
	void ServerStatVehicleWeaponFire(const int InFireMode);// 0x5cda23bfa041
	void ServerReload(const byte ModeIndex, const int Need);// 0x5cd923bfa041
	void ServerChangeWeaponScopeType(enum InScopeType);// 0x5cd823bfa041
	void OnRep_WeaponUnequipAction();// 0x5cd723bfa041
	void OnRep_WeaponEquipAction();// 0x5cd623bfa041
	void OnRep_CurrentWeapon(SolarVehicleWeapon* PreviousWeapon);// 0x5cd523bfa041
	void OnQuickAdsFire();// 0x5cd423bfa041
	SolarVehicleWeapon* GetCurrentVehicleWeapon();// 0x5cd323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleWeapon.SolarWeapon.Actor.Object
	float MaxWeaponPitch;//[Offset: 0xa98, Size: 0x4]
	float MinWeaponPitch;//[Offset: 0xa9c, Size: 0x4]
	float MaxWeaponYaw;//[Offset: 0xaa0, Size: 0x4]
	float MinWeaponYaw;//[Offset: 0xaa4, Size: 0x4]
	float PitchFollowSpeed;//[Offset: 0xaa8, Size: 0x4]
	float YawFollowSpeed;//[Offset: 0xaac, Size: 0x4]
	float SimulationSmoothLerpSpeed;//[Offset: 0xab0, Size: 0x4]
	float SimulationSmoothLerpThreshold;//[Offset: 0xab4, Size: 0x4]
	bool bAbsoluteRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab8, Size: 0x1]
	bool bHasScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab9, Size: 0x1]
	bool bHiddenMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaba, Size: 0x1]
	Vector ScopeCameraOffset;//[Offset: 0xabc, Size: 0xc]
	Vector ScopeTargetOffset;//[Offset: 0xac8, Size: 0xc]
	float ScopeCameraDistance;//[Offset: 0xad4, Size: 0x4]
	float ScopeBlendTime;//[Offset: 0xad8, Size: 0x4]
	VehicleCameraDataAsset* ScopeCameraData;//[Offset: 0xae0, Size: 0x8]
	float ScopeFOVSwitchSpeed;//[Offset: 0xae8, Size: 0x4]
	float QuickAdsFireDelay;//[Offset: 0xaec, Size: 0x4]
	enum DefaultWeaponScopeType;//[Offset: 0xaf0, Size: 0x1]
	class VehicleWeaponScopeWidget* ScopeUI;//[Offset: 0xaf8, Size: 0x8]
	float PitchCameraOffset;//[Offset: 0xb00, Size: 0x4]
	bool bCameraFocusWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb04, Size: 0x1]
	bool bUseNormalCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb05, Size: 0x1]
	byte FireType;//[Offset: 0xb06, Size: 0x1]
	FName FireSocketName;//[Offset: 0xb08, Size: 0x8]
	float UpdateShotStartLocThreshold;//[Offset: 0xb10, Size: 0x4]
	byte FireAixsType;//[Offset: 0xb14, Size: 0x1]
	FName TurretVSocketName;//[Offset: 0xb18, Size: 0x8]
	FName TurretHSocketName;//[Offset: 0xb20, Size: 0x8]
	float ShootTolerance;//[Offset: 0xb28, Size: 0x4]
	SolarVehiclePawn* AttachedVehicle;//[Offset: 0xb30, Size: 0x8]
	SolarCharacter* WeaponOwner;//[Offset: 0xb38, Size: 0x8]
	bool bVehicleWeaponScopeOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 0x1]
	bool bActivedWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb41, Size: 0x1]
	uint32 RotationYawAndPitchPacket;//[Offset: 0xb44, Size: 0x4]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0xb60, Size: 0x8]
	class SkeletalMeshComponent* VehicleStencilClass;//[Offset: 0xb68, Size: 0x28]
	SkeletalMeshComponent* VehicleStencilNew;//[Offset: 0xb90, Size: 0x8]
	FName AttachBoneName;//[Offset: 0xb98, Size: 0x8]
	SolarCharacter* CahedLastOwner;//[Offset: 0xba0, Size: 0x8]
	bool bUseAssistLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xee0, Size: 0x1]
	bool bShowAssistLockUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xee0, Size: 0x1]
	Vector2D AssistLockImageSize;//[Offset: 0xee4, Size: 0x8]
	Vector2D PCAssistLockImageSize;//[Offset: 0xeec, Size: 0x8]
	bool bAutoLockSpreadSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xef4, Size: 0x1]
	float AutoLockSpreadDecPerSecond;//[Offset: 0xef8, Size: 0x4]
	float PreSelectProgress;//[Offset: 0xefc, Size: 0x4]
	RuntimeFloatCurve ProgressUpgradeSpeedCurve;//[Offset: 0xf00, Size: 0x88]
	enum AssistLockState;//[Offset: 0xf88, Size: 0x1]
	bool bSimulateWeaponFireSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf89, Size: 0x1]
	float TriggerSmoothReticleDistance;//[Offset: 0xf8c, Size: 0x4]
	Vector2D SmoothReticleSpeed;//[Offset: 0xf90, Size: 0x8]
	Transform CachedWeaponRelativeTransform;//[Offset: 0xfa0, Size: 0x30]
	Transform CachedFireMuzzleTransform;//[Offset: 0xfd0, Size: 0x30]
	Transform CachedTurretVSocketTransform;//[Offset: 0x1000, Size: 0x30]
	Transform CachedTurretHSocketTransform;//[Offset: 0x1030, Size: 0x30]
	float SimulateMuzzleDistanceThreshold;//[Offset: 0x1060, Size: 0x4]
	class SolarBullet* VehicleWeaponPrimaryOverrideBulletClass;//[Offset: 0x10c0, Size: 0x8]
	class SolarBullet* VehicleWeaponSecondaryOverrideBulletClass;//[Offset: 0x10c8, Size: 0x8]
	class SolarBullet* VehicleWeaponPrimaryOverrideTraceBulletClass;//[Offset: 0x10d0, Size: 0x8]
	GameplayTagContainer BlockVehicleWeaponFireTags;//[Offset: 0x10d8, Size: 0x20]
	bool bEnablePreAimingLaser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1111, Size: 0x1]
	bool bNotOptTickIntervalPreAimingActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1112, Size: 0x1]
	FName PreAimingLaserLaunchScoket;//[Offset: 0x1114, Size: 0x8]
	ParticleSystem* PreAimingLaserFX;//[Offset: 0x1120, Size: 0x28]
	ParticleSystem* PreAimingLaserEnermyFX;//[Offset: 0x1148, Size: 0x28]
	int PreAimingLaserChagringPhase;//[Offset: 0x1170, Size: 0x4]
	ParticleSystemComponent* PreAimingLaserEffect;//[Offset: 0x1178, Size: 0x8]
	bool bEnableBackupAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1180, Size: 0x1]
	int BackupAmmoFireCost;//[Offset: 0x1184, Size: 0x4]
	int MaxBackupAmmo;//[Offset: 0x1188, Size: 0x4]
	float ReloadBackupAmmoInterval;//[Offset: 0x118c, Size: 0x4]
	int ReloadBackupAmmoNum;//[Offset: 0x1190, Size: 0x4]
	int CurrentBackupAmmo;//[Offset: 0x1194, Size: 0x4]
	bool bEnableRechamber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a0, Size: 0x1]
	float PlayRechamberFinishTime;//[Offset: 0x11a4, Size: 0x4]
	FString RechamberStartAndStopSound;//[Offset: 0x11b0, Size: 0x10]
	FString RechamberFinishSound;//[Offset: 0x11c0, Size: 0x10]
	VehicleVFX RechamberAlertVFX;//[Offset: 0x11d0, Size: 0x90]
	int RechamberAlertMaterialIndex;//[Offset: 0x1260, Size: 0x4]
	bool bKeepWeaponStateAfterUncontrolled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1264, Size: 0x1]
	FString ReloadSoundName1P;//[Offset: 0x1268, Size: 0x10]
	FString ReloadSoundName3P;//[Offset: 0x1278, Size: 0x10]
	FString ReloadSoundName3PEnemy;//[Offset: 0x1288, Size: 0x10]
	bool bReloadingAfterUncontrol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1298, Size: 0x1]
	class SolarVehicleGameplayAbility* ReloadAbilityClass;//[Offset: 0x12a0, Size: 0x8]
	void VehicleWeaponOpenScope();// 0x59d723bfa041
	void VehicleWeaponCloseScope();// 0x59d623bfa041
	void ServerUpdateVehicleWeaponRotate(uint32 PackedRotation);// 0x59d523bfa041
	void ServerSendCurveShotHit(uint32 SpawnID, float InTime, SolarPlayerController* InPlayerController, const HitResult InHit);// 0x59d423bfa041
	void ServerCancelVehicleFireAbility(const GameplayAbilitySpecHandle InAbilityHandle);// 0x59d323bfa041
	void ServerAddWeaponFireTagToCharacter(SolarCharacter* InFiredCharacter);// 0x59d223bfa041
	void ResetWeaponRotation(float DeltaTime);// 0x59d123bfa041
	void OnVehicleWeaponUnControlled();// 0x59d023bfa041
	void OnVehicleWeaponControlled();// 0x59cf23bfa041
	void OnStencilLoaded();// 0x59ce23bfa041
	void OnRep_BackupAmmoChanged(int InOldAmmo);// 0x59cd23bfa041
	void LocallyVehicleWeaponTick(float DeltaTime);// 0x59cc23bfa041
	bool IsPlayerLocallyControlledWeapon();// 0x59cb23bfa041
	void InitializeVehicleWeapon(SolarVehiclePawn* VehicleWeaponOwner, out const FName WeaponAttachSocket);// 0x59ca23bfa041
	Vector GetShotTargetLocation();// 0x59c923bfa041
	byte GetFireType();// 0x59c823bfa041
	Vector GetAimTargetLocation();// 0x59c723bfa041
	void ClientFinishedWeaponReload();// 0x59c623bfa041
	void ClientDrawDebugString(const Vector TextLocation, FString Text, const Color TextColor, float Duration);// 0x59c523bfa041
	bool CheckCanOpenScope();// 0x59c423bfa041
	bool CanEnterFireState();// 0x59c323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleCameraDataAsset.DataAsset.Object
	RuntimeFloatCurve TargetArmLengthCurve;//[Offset: 0x30, Size: 0x88]
	float TargetArmLengthInterpSpeed;//[Offset: 0xb8, Size: 0x4]
	Vector TargetOffset;//[Offset: 0xbc, Size: 0xc]
	FName TargetOffsetSocket;//[Offset: 0xc8, Size: 0x8]
	bool bTargetOffsetIgnoreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bTargetOffsetIgnorePitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bCameraRollSameWithVehicleRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	Vector SocketOffset;//[Offset: 0xd4, Size: 0xc]
	float MinPitch;//[Offset: 0xe0, Size: 0x4]
	float MaxPitch;//[Offset: 0xe4, Size: 0x4]
	float MinYaw;//[Offset: 0xe8, Size: 0x4]
	float MaxYaw;//[Offset: 0xec, Size: 0x4]
	RuntimeFloatCurve CameraFovCurve;//[Offset: 0xf0, Size: 0x88]
	float CameraFovInterpSpeed;//[Offset: 0x178, Size: 0x4]
	bool bCameraFollowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]
	float DefaultPitch;//[Offset: 0x180, Size: 0x4]
	RuntimeFloatCurve CameraFollowSpeedCurve;//[Offset: 0x188, Size: 0x88]
	float CameraFollowTimeThreshold;//[Offset: 0x210, Size: 0x4]
	float CameraResetFollowSpeed;//[Offset: 0x214, Size: 0x4]
	float CameraFollowSpeedThreshold;//[Offset: 0x218, Size: 0x4]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1]
	RuntimeFloatCurve CameraLagInterpSpeedCurve;//[Offset: 0x220, Size: 0x88]
	RuntimeFloatCurve CameraLagCurve;//[Offset: 0x2a8, Size: 0x88]
	RuntimeFloatCurve AdditionalTargetOffsetOnZ;//[Offset: 0x330, Size: 0x88]
	float BlendTime;//[Offset: 0x3b8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleWeaponScopeWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum PresetScopeType;//[Offset: 0x348, Size: 0x1]
	Image* img_Vehicle;//[Offset: 0x350, Size: 0x8]
	Image* Img_Weapon;//[Offset: 0x358, Size: 0x8]
	CanvasPanel* Panel_Pitch;//[Offset: 0x360, Size: 0x8]
	WeaponScopeSliderWidget* Crosshair_Slider;//[Offset: 0x368, Size: 0x8]
	SolarCheckBox* Btn_Pitch;//[Offset: 0x370, Size: 0x8]
	CanvasPanel* SecondReticlePanel;//[Offset: 0x378, Size: 0x8]
	CanvasPanel* Panel_BG;//[Offset: 0x380, Size: 0x8]
	CanvasPanel* Panel_Border;//[Offset: 0x388, Size: 0x8]
	Image* ReticleDirection;//[Offset: 0x390, Size: 0x8]
	CanvasPanel* Coredot;//[Offset: 0x398, Size: 0x8]
	SolarWeaponRechamberWidget* HUD_CarFireCD_L;//[Offset: 0x3a0, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x3a8, Size: 0x8]
	CanvasPanelSlot* SecondReticleSlot;//[Offset: 0x3b0, Size: 0x8]
	CanvasPanelSlot* ReticleDirectionSlot;//[Offset: 0x3b8, Size: 0x8]
	Image* ProgressImage;//[Offset: 0x3c0, Size: 0x8]
	WidgetAnimation* ProgressAnima;//[Offset: 0x3c8, Size: 0x8]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x3d0, Size: 0x8]
	void UpdateScopeUI(SolarVehicleWeapon* VehicleWeapon, out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x5c0223bfa041
	void SetChargeProgress(out Image* InProgressImage, out WidgetAnimation* InProgressAnima);// 0x5c0123bfa041
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress);// 0x5c0023bfa041
	void OnScopeTriggerChanged(bool bChecked);// 0x5bff23bfa041
	void OnScopeOpened();// 0x5bfe23bfa041
	void InitScopeUI(SolarVehiclePawn* InVehicle, bool bSpectate);// 0x5bfd23bfa041
	void ApplyWeaponCrossHairToScope(out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x5bfc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponScopeSliderWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	ScopeSliderData[] ScopeSliderDatas;//[Offset: 0x348, Size: 0x10]
	int ScopeSliderType;//[Offset: 0x358, Size: 0x4]
	float SliderAnimPlaySpeed;//[Offset: 0x35c, Size: 0x4]
	float SliderValueScale;//[Offset: 0x360, Size: 0x4]
	Slider* Slider_ADS;//[Offset: 0x368, Size: 0x8]
	SolarTextBlock* Txt_Scope;//[Offset: 0x370, Size: 0x8]
	WidgetAnimation* Anim_Type0;//[Offset: 0x378, Size: 0x8]
	WidgetAnimation* Anim_Type1;//[Offset: 0x380, Size: 0x8]
	WidgetAnimation* AnimToPlay;//[Offset: 0x388, Size: 0x8]
	void SetSliderDisplay(bool bSkipAnimation);// 0x5c7723bfa041
	void OnSliderValueChangedOnPC(float InValue);// 0x5c7623bfa041
	void OnSliderValueChanged(float InValue);// 0x5c7523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ScopeSliderData
	Vector2D SliderPercentRange;//[Offset: 0x0, Size: 0x8]
	float SliderAnimeTimer;//[Offset: 0x8, Size: 0x4]
	enum ScopeMagnifier;//[Offset: 0xc, Size: 0x1]
	FText DisplayText;//[Offset: 0x10, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x138, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x13c, Size: 0x10]
	float MinValue;//[Offset: 0x14c, Size: 0x4]
	float MaxValue;//[Offset: 0x150, Size: 0x4]
	SliderStyle WidgetStyle;//[Offset: 0x158, Size: 0x3a0]
	byte Orientation;//[Offset: 0x4f8, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x4fc, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x50c, Size: 0x10]
	Vector2D SliderHandleOffset;//[Offset: 0x51c, Size: 0x8]
	bool CommitTouchStartValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 0x1]
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x527, Size: 0x1]
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	float StepSize;//[Offset: 0x52c, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x538, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x548, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x558, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x568, Size: 0x10]
	delegate OnValueChanged;//[Offset: 0x578, Size: 0x10]
	void SetValue(float InValue);// 0x3b7223bfa041
	void SetStepSize(float InValue);// 0x3b7123bfa041
	void SetSliderHandleOffset(Vector2D InValue);// 0x3b7023bfa041
	void SetSliderHandleColor(LinearColor InValue);// 0x3b6f23bfa041
	void SetSliderBarColor(LinearColor InValue);// 0x3b6e23bfa041
	void SetNormalBarImage(out const SlateBrush InImage);// 0x3b6d23bfa041
	void SetMinValue(float InValue);// 0x3b6c23bfa041
	void SetMaxValue(float InValue);// 0x3b6b23bfa041
	void SetLocked(bool InValue);// 0x3b6a23bfa041
	void SetIndentHandle(bool InValue);// 0x3b6923bfa041
	void SetHoveredBarImage(out const SlateBrush InImage);// 0x3b6823bfa041
	void SetBarThickness(float InValue);// 0x3b6723bfa041
	float GetValue();// 0x3b6623bfa041
	float GetNormalizedValue();// 0x3b6523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x98]
	SlateBrush HoveredBarImage;//[Offset: 0xa0, Size: 0x98]
	SlateBrush DisabledBarImage;//[Offset: 0x138, Size: 0x98]
	SlateBrush NormalThumbImage;//[Offset: 0x1d0, Size: 0x98]
	SlateBrush HoveredThumbImage;//[Offset: 0x268, Size: 0x98]
	SlateBrush DisabledThumbImage;//[Offset: 0x300, Size: 0x98]
	float BarThickness;//[Offset: 0x398, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCheckBox.CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	Widget* OnGroup;//[Offset: 0x838, Size: 0x8]
	Widget* OffGroup;//[Offset: 0x840, Size: 0x8]
	enum CheckedGroupVisibility;//[Offset: 0x848, Size: 0x1]
	enum UncheckedGroupVisibility;//[Offset: 0x849, Size: 0x1]
	void OnStateChanged(bool bIsChecked);// 0x4c0d23bfa041
	void ManualSetIsChecked(bool InIsChecked);// 0x4c0c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleWeaponCrossHairInfo
	bool bShowCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D CrossHairPosition;//[Offset: 0x4, Size: 0x8]
	float CrossHairOpacity;//[Offset: 0xc, Size: 0x4]
	bool bShowReticleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D ReticleDirectionPosition;//[Offset: 0x14, Size: 0x8]
	float ReticleDirectionAngle;//[Offset: 0x1c, Size: 0x4]
	bool bCrossHairForbid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWeaponRechamberWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* img_FireCD;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* EmptyBullet_Anim;//[Offset: 0x350, Size: 0x8]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x358, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleVFX
	ParticleSystem* Particle;//[Offset: 0x0, Size: 0x28]
	FName AttachedSocket;//[Offset: 0x28, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x30, Size: 0x30]
	CurveFloat* ActivateCurve;//[Offset: 0x60, Size: 0x8]
	FName ParameterName;//[Offset: 0x68, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleGameplayAbility.GameplayAbility.Object
	bool bCancelAfterVacateSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	bool bCancelManually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 0x1]
	byte AbilityIndex;//[Offset: 0x3fb, Size: 0x1]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x400, Size: 0x20]
	FString AbilityActivateVirationHeString;//[Offset: 0x420, Size: 0x10]
	FString AbilityEndVirationHeString;//[Offset: 0x430, Size: 0x10]
	bool bCheckInstigatorBeforeActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool bActivateAbilityOnGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	float DurationTime;//[Offset: 0x444, Size: 0x4]
	class GameplayEffect* ActivateEffect;//[Offset: 0x448, Size: 0x8]
	Texture2D* AbilityIcon;//[Offset: 0x450, Size: 0x28]
	Texture2D* AdditionalAbilityIcon;//[Offset: 0x478, Size: 0x28]
	int AbilityDescription;//[Offset: 0x4a0, Size: 0x4]
	FString AbilityTextType;//[Offset: 0x4a8, Size: 0x10]
	float DamageToVehicle;//[Offset: 0x4b8, Size: 0x4]
	float DamageToCharacter;//[Offset: 0x4bc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAction
	int ActionCount;//[Offset: 0x0, Size: 0x4]
	int ActionParameter;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BoardedVehicleInfo
	SolarVehiclePawn* BoardedVehicle;//[Offset: 0x0, Size: 0x8]
	int BoardedSeatIndex;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ScoutEnemyObject.Object
	ScoutEnemyConfig* ScoutEnemyConfig;//[Offset: 0x70, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ScoutEnemyConfig.DataAsset.Object
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int ScoutMaxNum;//[Offset: 0x34, Size: 0x4]
	float TimeToScanEffect;//[Offset: 0x38, Size: 0x4]
	float MaxDetectionDistance;//[Offset: 0x3c, Size: 0x4]
	Vector2D BondingBoxExtent;//[Offset: 0x40, Size: 0x8]
	bool bSupportHipFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	<enum,float> BoxScaleRatioByScope;//[Offset: 0x50, Size: 0x50]
	byte[] TargetOccBlockTypes;//[Offset: 0xa0, Size: 0x10]
	GameplayTagContainer BlockWithMyTags;//[Offset: 0xb0, Size: 0x20]
	GameplayTagContainer BlockWithEnemyTags;//[Offset: 0xd0, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: DuckRollingMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class PrimitiveComponent* ShieldComponentClass;//[Offset: 0x600, Size: 0x8]
	<SoftObjectPath,SoftObjectPath> MaterialEffectMaterialMapping;//[Offset: 0x608, Size: 0x50]
	float HeadRelativeHeight;//[Offset: 0x658, Size: 0x4]
	PrimitiveComponent* ShieldComponent;//[Offset: 0x660, Size: 0x8]
	Object*[] MeshOverrides;//[Offset: 0x668, Size: 0x10]
	Object*[] LoadedEffectMaterials;//[Offset: 0x678, Size: 0x10]
	void ReceiveOnRegister();// 0x439623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BattleUpgradeEffectContainer.FastArraySerializer
	BattleUpgradeEffect[] DataArray;//[Offset: 0x108, Size: 0x10]
	SolarCharacter* Owner;//[Offset: 0x118, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BattleUpgradeEffect.FastArraySerializerItem
	int Level;//[Offset: 0xc, Size: 0x4]
	int EffectID;//[Offset: 0x10, Size: 0x4]
	int[] EffectCandidate;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkywardDiveLauncher.SummonItemBase.Pawn.Actor.Object
	SkeletalMeshComponent* GroundMesh;//[Offset: 0x3e0, Size: 0x8]
	BoxComponent* TriggerVolume;//[Offset: 0x3e8, Size: 0x8]
	float SpawnTimeConfig;//[Offset: 0x3f0, Size: 0x4]
	ParticleSystem* AvailableDeviceParticle;//[Offset: 0x3f8, Size: 0x8]
	ParticleSystem* SpawnBeamParticle;//[Offset: 0x400, Size: 0x8]
	FString SpawnSoundName;//[Offset: 0x408, Size: 0x10]
	AnimSequence* SpawnAnim;//[Offset: 0x418, Size: 0x8]
	LaunchDeviceInfo[] LauncherDeviceArray;//[Offset: 0x420, Size: 0x10]
	float CharacterLaunchPadHeightOffset;//[Offset: 0x430, Size: 0x4]
	float LowHealthPercentage;//[Offset: 0x434, Size: 0x4]
	ParticleSystem* LowHealthParticle;//[Offset: 0x438, Size: 0x8]
	ParticleSystem* DeathExplodeParticle;//[Offset: 0x440, Size: 0x8]
	FString DeathExplodeSoundName;//[Offset: 0x448, Size: 0x10]
	ParticleSystemComponent* SpawnBeamEffect;//[Offset: 0x458, Size: 0x8]
	ParticleSystemComponent* LowHealthEffect;//[Offset: 0x460, Size: 0x8]
	bool bNewlySpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	void OnTriggerVolumeOverlapedEnd(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x491d23bfa041
	void OnTriggerVolumeOverlapedBegin(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x491c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: LaunchDeviceInfo
	bool bIsUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName LaunchPadLocSocketName;//[Offset: 0x4, Size: 0x8]
	FName PrepareEffectLocSocketName;//[Offset: 0xc, Size: 0x8]
	ParticleSystemComponent* AvailableDeviceEffect;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundGroupPlayContext
	SolarCharacter* Instigator;//[Offset: 0x0, Size: 0x8]
	SolarCharacter* LocalCharacter;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotAIController.SolarAIControllerBase.AIController.Controller.Actor.Object
	SolarBotLootComponent* BotLootComponent;//[Offset: 0x380, Size: 0x8]
	SolarPerceptionComponent* BotPerceptionComponent;//[Offset: 0x388, Size: 0x8]
	SolarBotAIConfig* BotConfigPreset;//[Offset: 0x390, Size: 0x8]
	SolarBotBattleConfig DefaultBattleConfig;//[Offset: 0x398, Size: 0x158]
	NavAgentProperties VehicleAgentProperties;//[Offset: 0x4f0, Size: 0x30]
	int UniqueSpawnerID;//[Offset: 0x520, Size: 0x4]
	GameplayTag BattleSubTreeTag;//[Offset: 0x524, Size: 0x8]
	int DefaultDifficultyLevel;//[Offset: 0x52c, Size: 0x4]
	int CurrentDifficultyLevel;//[Offset: 0x530, Size: 0x4]
	float CharacterLookAtInterpSpeed;//[Offset: 0x534, Size: 0x4]
	float MinSpecVehicleDeltaPitch;//[Offset: 0x538, Size: 0x4]
	bool bInitDefaultWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 0x1]
	int BotDefaultWeaponId;//[Offset: 0x540, Size: 0x4]
	bool bAimBoneWhenFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544, Size: 0x1]
	FName FireTargetBoneName;//[Offset: 0x548, Size: 0x8]
	bool bSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	BotBonusDropConfig BonusDropConfig;//[Offset: 0x554, Size: 0x18]
	float MinimumDistanceForRepeatedBoarding;//[Offset: 0x56c, Size: 0x4]
	enum BotAIType;//[Offset: 0x570, Size: 0x1]
	int BotFeature;//[Offset: 0x574, Size: 0x4]
	Vector2D MovementVector;//[Offset: 0x578, Size: 0x8]
	class NavigationQueryFilter* BPDefaultNavigationFilterClass;//[Offset: 0x580, Size: 0x8]
	<GameplayTag,BehaviorTree*> SubTreeMap;//[Offset: 0x5b8, Size: 0x50]
	Actor* AITarget;//[Offset: 0x640, Size: 0x8]
	SolarBotShootSimulater* ShootSimulater;//[Offset: 0x648, Size: 0x8]
	delegate OnBotAIDeath;//[Offset: 0x6b8, Size: 0x10]
	SolarCharacter* PossessedCharacer;//[Offset: 0x6d4, Size: 0x8]
	SolarFollowingComponent* PathFollowingComp;//[Offset: 0x6e0, Size: 0x8]
	NgaiAIControllerComponent* NgaiComponent;//[Offset: 0x6f0, Size: 0x8]
	float ValidEmojiUseDistance;//[Offset: 0x708, Size: 0x4]
	float WorldMarkMessageDelayTime;//[Offset: 0x7d8, Size: 0x4]
	void UpdateDynamicSubtree();// 0x4ab923bfa041
	void UpdateCharacterRotate(float DeltaTime);// 0x4ab823bfa041
	void StopBehaviorTree();// 0x4ab723bfa041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x4ab623bfa041
	bool SetupBotAITargetSelectConfig();// 0x4ab523bfa041
	bool SetupBotAIDifficulty(int DifficultyLevel, bool bAsDefault);// 0x4ab423bfa041
	bool SetupBotAICanUseCharacterData(int CharacterId, int SkinId);// 0x4ab323bfa041
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x4ab223bfa041
	bool SetBotConfigPresetByID(int BotConfigPresetID);// 0x4ab123bfa041
	void SetBotConfigPreset(SolarBotAIConfig* InConfig);// 0x4ab023bfa041
	void OnReset();// 0x4aaf23bfa041
	void OnPlayerGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x4aae23bfa041
	void OnEnterLanding();// 0x4aad23bfa041
	bool IsTeamLeader();// 0x4aac23bfa041
	bool IsInPlayerTeam();// 0x4aab23bfa041
	bool IsIndependent();// 0x4aaa23bfa041
	bool IsAccompanyingPlayer();// 0x4aa923bfa041
	SolarCharacter* GetSolarCharacter();// 0x4aa823bfa041
	enum[] GetPreferPickHeroTypes();// 0x4aa723bfa041
	byte GetMyTeamID();// 0x4aa623bfa041
	bool CanActivateVehicleAbility(int SeatIndex, int AbilityIndex);// 0x4aa523bfa041
	float CalculateScoreForAITarget(const Actor* AITargetActor);// 0x4aa423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAIControllerBase.AIController.Controller.Actor.Object
	BehaviorTree* BehaviorTree;//[Offset: 0x350, Size: 0x8]
	AISenseConfig_Sight* SightConfig;//[Offset: 0x358, Size: 0x8]
	AISenseConfig_Damage* DamageSenseConfig;//[Offset: 0x360, Size: 0x8]
	int AICharacterID;//[Offset: 0x368, Size: 0x4]
	void DestroyCharacterCorpse();// 0x499023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f0, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f0, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f0, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2f8, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x300, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x308, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x310, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x318, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x320, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x328, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x330, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x498f23bfa041
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x498e23bfa041
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x498d23bfa041
	void SetMoveBlockDetection(bool bEnable);// 0x498c23bfa041
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x498b23bfa041
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x498a23bfa041
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x498923bfa041
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x498823bfa041
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x498723bfa041
	void K2_SetFocus(Actor* NewFocus);// 0x498623bfa041
	void K2_SetFocalPoint(Vector FP);// 0x498523bfa041
	void K2_ClearFocus();// 0x498423bfa041
	bool HasPartialPath();// 0x498323bfa041
	PathFollowingComponent* GetPathFollowingComponent();// 0x498223bfa041
	byte GetMoveStatus();// 0x498123bfa041
	Vector GetImmediateMoveDestination();// 0x498023bfa041
	Actor* GetFocusActor();// 0x497f23bfa041
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x497e23bfa041
	Vector GetFocalPoint();// 0x497d23bfa041
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x497c23bfa041
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x497b23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BlackboardKeyType.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x688823bfa041
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x688723bfa041
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x688623bfa041
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x688523bfa041
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x688423bfa041
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x688323bfa041
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x688223bfa041
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x688123bfa041
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x688023bfa041
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x687f23bfa041
	bool IsVectorValueSet(out const FName KeyName);// 0x687e23bfa041
	Vector GetValueAsVector(out const FName KeyName);// 0x687d23bfa041
	FString GetValueAsString(out const FName KeyName);// 0x687c23bfa041
	Rotator GetValueAsRotator(out const FName KeyName);// 0x687b23bfa041
	Object* GetValueAsObject(out const FName KeyName);// 0x687a23bfa041
	FName GetValueAsName(out const FName KeyName);// 0x687923bfa041
	int GetValueAsInt(out const FName KeyName);// 0x687823bfa041
	float GetValueAsFloat(out const FName KeyName);// 0x687723bfa041
	byte GetValueAsEnum(out const FName KeyName);// 0x687623bfa041
	class Object GetValueAsClass(out const FName KeyName);// 0x687523bfa041
	bool GetValueAsBool(out const FName KeyName);// 0x687423bfa041
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x687323bfa041
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x687223bfa041
	void ClearValue(out const FName KeyName);// 0x687123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8]
	void StopLogic(FString reason);// 0x686c23bfa041
	void StartLogic();// 0x686b23bfa041
	void RestartLogic();// 0x686a23bfa041
	bool IsRunning();// 0x686923bfa041
	bool IsPaused();// 0x686823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4]
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BTAuxiliaryNode.BTNode.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]
<----------Generated by SSpawner v1.0.2---------->


Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8]
	float SightRadius;//[Offset: 0x50, Size: 0x4]
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4]
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4]
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4]
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8]
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4]
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4]
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x90, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0xa0, Size: 0x4]
	void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x685823bfa041
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x685723bfa041
	bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x685623bfa041
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x685523bfa041
	class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x685423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9b, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8]
	void AILoggingVerbose();// 0x686523bfa041
	void AIIgnorePlayers();// 0x686423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x130, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x268, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x686f23bfa041
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x686e23bfa041
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CoolDownDuration, bool bAddToExistingDuration);// 0x686d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xb0, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xc0, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xd0, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x134, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x13c, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x140, Size: 0x8]
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x68c623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] options;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: EnvQueryItemType.Object
<----------Generated by SSpawner v1.0.2---------->


Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4]
	byte TestPurpose;//[Offset: 0x30, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AIDataProvider.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: EnvQueryContext.Object
<----------Generated by SSpawner v1.0.2---------->


Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x2cf023bfa041
	Vector[] GetResultsAsLocations();// 0x2cef23bfa041
	Actor*[] GetResultsAsActors();// 0x2cee23bfa041
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x2ced23bfa041
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x2cec23bfa041
	float GetItemScore(int ItemIndex);// 0x2ceb23bfa041
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x2ce923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x684223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AIHotSpotManager.Object
<----------Generated by SSpawner v1.0.2---------->


Class: NavLocalGridManager.Object
	bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x68cd23bfa041
	void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x68cc23bfa041
	bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x68cb23bfa041
	int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x68ca23bfa041
	int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x68c923bfa041
	int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x68c823bfa041
	int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x68c723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AISenseEvent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]
	void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation);// 0x686023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Vector HitLocation;//[Offset: 0x10, Size: 0xc]
	Actor* DamagedActor;//[Offset: 0x20, Size: 0x8]
	Actor* Instigator;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotLootComponent.ActorComponent.Object
	GameplayTag LootSubTreeTag;//[Offset: 0xb0, Size: 0x8]
	SolarBotLootValuationConfig DefaultValuationConfig;//[Offset: 0xb8, Size: 0x44]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotLootValuationConfig
	float MoveCostFactor;//[Offset: 0x0, Size: 0x4]
	float DistSelfToSpawnerFactor;//[Offset: 0x4, Size: 0x4]
	float DistSpawnerOffsetFactor;//[Offset: 0x8, Size: 0x4]
	float AvgDistSpawnerToTeammatesFactor;//[Offset: 0xc, Size: 0x4]
	float AssualtRifleBaseValue;//[Offset: 0x10, Size: 0x4]
	float ShotgunBaseValue;//[Offset: 0x14, Size: 0x4]
	float SubmachinegunBaseValue;//[Offset: 0x18, Size: 0x4]
	float SniperBaseValue;//[Offset: 0x1c, Size: 0x4]
	float WeaponQualityValue;//[Offset: 0x20, Size: 0x4]
	float AmmoBaseValue;//[Offset: 0x24, Size: 0x4]
	float AmmoMatchFactor;//[Offset: 0x28, Size: 0x4]
	float ShieldBaseValue;//[Offset: 0x2c, Size: 0x4]
	float ShieldQualityValue;//[Offset: 0x30, Size: 0x4]
	float JetpackModuleBaseValue;//[Offset: 0x34, Size: 0x4]
	float JetpackModuleQualityValue;//[Offset: 0x38, Size: 0x4]
	float MedkitBaseValue;//[Offset: 0x3c, Size: 0x4]
	float MedkitHPRatioFactor;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x100, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x4ce123bfa041
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x4ce023bfa041
	Vector GetPathDestination();// 0x4cdf23bfa041
	byte GetPathActionType();// 0x4cde23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x230, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x238, Size: 0x78]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b0, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b0, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2b1, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2b4, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2b8, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3a0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayResourceSet
<----------Generated by SSpawner v1.0.2---------->


Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x505f23bfa041
	void RequestStimuliListenerUpdate();// 0x505e23bfa041
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x505d23bfa041
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x505c23bfa041
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x505b23bfa041
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x505a23bfa041
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x505923bfa041
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x505823bfa041
	void ForgetAll();// 0x505723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x68d923bfa041
	bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x68d823bfa041
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x68d723bfa041
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x68d623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x68d023bfa041
	void Finish(byte WithResult);// 0x68cf23bfa041
	PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x68ce23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	SolarBotThreatConfig DefaultThreatConfig;//[Offset: 0x180, Size: 0x6c]
	<enum,class Actor> ConfigAreaTypeIdentifyMap;//[Offset: 0x1f0, Size: 0x50]
	PerceivableEAInfluenceConfig EffectAreasInfluenceConfig;//[Offset: 0x240, Size: 0x60]
	float MaxInfluenceRadius;//[Offset: 0x2a0, Size: 0x4]
	float SmokeGrenadeAffectRadius;//[Offset: 0x2a4, Size: 0x4]
	float EnergyBubbleAffectRadius;//[Offset: 0x2a8, Size: 0x4]
	float SummonWallAffectRadius;//[Offset: 0x2ac, Size: 0x4]
	float UAVShieldAffectRadius;//[Offset: 0x2b0, Size: 0x4]
	float UAVRescueAffectRadius;//[Offset: 0x2b4, Size: 0x4]
	bool bTargetSelectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	FName[] ForbiddenTags;//[Offset: 0x2c0, Size: 0x10]
	int MaxNumCachedDamage;//[Offset: 0x308, Size: 0x4]
	void UpdateSenseConfig(float NewSightRadius);// 0x506723bfa041
	void SetTargetSelectEnabled(bool bInEnable);// 0x506623bfa041
	void SetForbiddenTags(out const FName[] Tags, bool bCleanExists);// 0x506523bfa041
	void OnBotPerceptionUpdated(Actor* Actor, AIStimulus Stimulus);// 0x506423bfa041
	bool IsInEffectAreaOfType(enum Type, const Actor* InTestActor);// 0x506323bfa041
	bool IsInAnyEffectArea(out PerceivableEffectArea[] ActiveEffectAreas, const Actor* InTestActor);// 0x506223bfa041
	float GetTargetCurrentThreatValue(SolarCharacter* ThreatTarget);// 0x506123bfa041
	void ClearCurrentThreat(bool bCleanBestTarget);// 0x506023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotThreatConfig
	float ThreatUpdateInterval;//[Offset: 0x0, Size: 0x4]
	float AttackTriggerThreshold;//[Offset: 0x4, Size: 0x4]
	float CancelAttackTriggerThreshold;//[Offset: 0x8, Size: 0x4]
	float SwitchTargetDifferenceValue;//[Offset: 0xc, Size: 0x4]
	float DistanceThreshold;//[Offset: 0x10, Size: 0x4]
	float DistanceThresholdInSmoke;//[Offset: 0x14, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x18, Size: 0x4]
	float SightIncreaseBase;//[Offset: 0x1c, Size: 0x4]
	float SightIncreaseDistanceFactor;//[Offset: 0x20, Size: 0x4]
	float SightDecreaseBase;//[Offset: 0x24, Size: 0x4]
	float SightDecreaseDistanceFactor;//[Offset: 0x28, Size: 0x4]
	float SightDecreaseMax;//[Offset: 0x2c, Size: 0x4]
	float SightMaxValue;//[Offset: 0x30, Size: 0x4]
	float HearingAddBase;//[Offset: 0x34, Size: 0x4]
	float HearingAddDistanceFactor;//[Offset: 0x38, Size: 0x4]
	float HearingDecreasePerTick;//[Offset: 0x3c, Size: 0x4]
	float HearingMaxValue;//[Offset: 0x40, Size: 0x4]
	float HitSoundAlertRange;//[Offset: 0x44, Size: 0x4]
	float BotThreatFactor;//[Offset: 0x48, Size: 0x4]
	float PlayerThreatFactor;//[Offset: 0x4c, Size: 0x4]
	float DeathVergeFactor;//[Offset: 0x50, Size: 0x4]
	float MassInvisibilityPrepareFactor;//[Offset: 0x54, Size: 0x4]
	float MaxDistanceThreatFactor;//[Offset: 0x58, Size: 0x4]
	float DistanceThreatFactorDecayRate;//[Offset: 0x5c, Size: 0x4]
	float AccompanyThreatMaxValue;//[Offset: 0x60, Size: 0x4]
	float AccompanyThreatAddBase;//[Offset: 0x64, Size: 0x4]
	float AccompanyDecreasePerTick;//[Offset: 0x68, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PerceivableEAInfluenceConfig
	<enum,float> AreaTypeValueMap;//[Offset: 0x0, Size: 0x50]
	float HostileAreaFactor;//[Offset: 0x50, Size: 0x4]
	float NeutralAreaFactor;//[Offset: 0x54, Size: 0x4]
	float FriendlyAreaFactor;//[Offset: 0x58, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PerceivableEffectArea
	enum AreaType;//[Offset: 0x0, Size: 0x1]
	Vector EffectLocation;//[Offset: 0x4, Size: 0xc]
	float EffectRadius;//[Offset: 0x10, Size: 0x4]
	Actor* EffectActor;//[Offset: 0x14, Size: 0x8]
	Actor* Instigator;//[Offset: 0x1c, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotAIConfig.DataAsset.Object
	GameplayTagContainer IdentifierTags;//[Offset: 0x30, Size: 0x20]
	SolarBotConfigSection_Battle* BattleSection;//[Offset: 0x50, Size: 0x8]
	SolarBotConfigSection_Loot* LootSection;//[Offset: 0x58, Size: 0x8]
	SolarBotConfigSection_Perception* PerceptionSection;//[Offset: 0x60, Size: 0x8]
	SolarBotConfigSection*[] CustomSections;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotConfigSection_Battle.SolarBotConfigSection.Object
	SolarBotBattleConfig BattleConfig;//[Offset: 0x30, Size: 0x158]
	SolarBotUseSniperPosConfig SniperPosConfig;//[Offset: 0x188, Size: 0x1c]
	enum[] PreferPickHeroTypes;//[Offset: 0x1a8, Size: 0x10]
	BehaviorTree* BattleSubTree;//[Offset: 0x1b8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotConfigSection.Object
	GameplayTag SectionTag;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotBattleConfig
	BotFireConfig DefaultFireConfig;//[Offset: 0x0, Size: 0x10]
	BotFireConfig FireConfigToBot;//[Offset: 0x10, Size: 0x10]
	<enum,BotFireConfig> WeaponFireConfigs;//[Offset: 0x20, Size: 0x50]
	<enum,BotFireConfig> WeaponFireConfigsToBot;//[Offset: 0x70, Size: 0x50]
	BotFireConfig VehicleFireConfig;//[Offset: 0xc0, Size: 0x10]
	BotFireConfig VehicleFireConfigToBot;//[Offset: 0xd0, Size: 0x10]
	bool bPreventFatalDamageToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	float DamageFactorToVehicle;//[Offset: 0xe4, Size: 0x4]
	float DamageFactorToBotVehicle;//[Offset: 0xe8, Size: 0x4]
	float DamageFactorToSummonItem;//[Offset: 0xec, Size: 0x4]
	float DamageFactorToBotSummonItem;//[Offset: 0xf0, Size: 0x4]
	float BotAIAttackRange;//[Offset: 0xf4, Size: 0x4]
	float BotAIAttackRangeUnArm;//[Offset: 0xf8, Size: 0x4]
	bool bEnableShootSimulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	SolarBotShootConfig DefaultShootConfig;//[Offset: 0x100, Size: 0x58]
<----------Generated by SSpawner v1.0.2---------->


Class: BotFireConfig
	float ShootDisperse;//[Offset: 0x0, Size: 0x4]
	float HitRate;//[Offset: 0x4, Size: 0x4]
	float ActiveDamageRate;//[Offset: 0x8, Size: 0x4]
	float ActiveDamageFactor;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotShootConfig
	enum FirePolicy;//[Offset: 0x0, Size: 0x1]
	float FollowInterpSpeed;//[Offset: 0x4, Size: 0x4]
	float AntiHorizRecoilStrenghth;//[Offset: 0x8, Size: 0x4]
	float AntiVertRecoilStrenghth;//[Offset: 0xc, Size: 0x4]
	float LockHeightOffset;//[Offset: 0x10, Size: 0x4]
	float AimInterpSpeed;//[Offset: 0x14, Size: 0x4]
	float MaxFollowDeltaAngle;//[Offset: 0x18, Size: 0x4]
	float MaxPreciseMoveAngle;//[Offset: 0x1c, Size: 0x4]
	float RoughMoveMaxAngle;//[Offset: 0x20, Size: 0x4]
	float FollowMoveSpeed;//[Offset: 0x24, Size: 0x4]
	float PreciseMoveSpeed;//[Offset: 0x28, Size: 0x4]
	float RoughMoveSpeed;//[Offset: 0x2c, Size: 0x4]
	float LockMoveSpeed;//[Offset: 0x30, Size: 0x4]
	float PreciseMoveDeviationYaw;//[Offset: 0x34, Size: 0x4]
	float PreciseMoveDeviationPitch;//[Offset: 0x38, Size: 0x4]
	float RoughMoveDeviationYaw;//[Offset: 0x3c, Size: 0x4]
	float RoughMoveDeviationPitch;//[Offset: 0x40, Size: 0x4]
	float LockMoveMaxDeltaYaw;//[Offset: 0x44, Size: 0x4]
	float LockMoveMaxDeltaPitch;//[Offset: 0x48, Size: 0x4]
	float RoughMoveReactionTime;//[Offset: 0x4c, Size: 0x4]
	float PreciseMoveReactionTime;//[Offset: 0x50, Size: 0x4]
	float MaxFollowUnreachTime;//[Offset: 0x54, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotUseSniperPosConfig
	int MinNumSpawnerHasSearched;//[Offset: 0x0, Size: 0x4]
	float MinElapsedReachedZone;//[Offset: 0x4, Size: 0x4]
	float MinEnemyDistance;//[Offset: 0x8, Size: 0x4]
	int MinNumBeHitAbandonPos;//[Offset: 0xc, Size: 0x4]
	int MaxDurationOccupyPos;//[Offset: 0x10, Size: 0x4]
	float MaxDurationReachedPos;//[Offset: 0x14, Size: 0x4]
	float IntervalUseNextPos;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotConfigSection_Loot.SolarBotConfigSection.Object
	SolarBotLootValuationConfig ValuationConfig;//[Offset: 0x30, Size: 0x44]
	SolarBotLootSearchConfig SearchConfig;//[Offset: 0x74, Size: 0x44]
	SolarBotLootWeaponFeedConfig WeaponFeedConfig;//[Offset: 0xb8, Size: 0x20]
	BehaviorTree* LootSubTree;//[Offset: 0xd8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotLootSearchConfig
	float HPRatioToUseMedicine;//[Offset: 0x0, Size: 0x4]
	float ShieldRatioToRecharge;//[Offset: 0x4, Size: 0x4]
	float MaxSearchRangeNearbyPlayer;//[Offset: 0x8, Size: 0x4]
	float MinSearchRangeNearbyPlayer;//[Offset: 0xc, Size: 0x4]
	float RadiusTolerance;//[Offset: 0x10, Size: 0x4]
	Vector2D NearbyEnemyOuterFactorRange;//[Offset: 0x14, Size: 0x8]
	Vector2D NearbyEnemyInnerFactorRange;//[Offset: 0x1c, Size: 0x8]
	Vector2D NearbyEnemyCountRange;//[Offset: 0x24, Size: 0x8]
	Vector2D NearbySpawnerOuterFactorRange;//[Offset: 0x2c, Size: 0x8]
	Vector2D NearbySpawnerInnerFactorRange;//[Offset: 0x34, Size: 0x8]
	Vector2D NearbySpawnerCountRange;//[Offset: 0x3c, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotLootWeaponFeedConfig
	float MaxNoWeaponTime;//[Offset: 0x0, Size: 0x4]
	int[] FeedWeaponIDs;//[Offset: 0x8, Size: 0x10]
	float CheckPlayerSightInterval;//[Offset: 0x18, Size: 0x4]
	bool bStartFeedAfterSearchedAnySpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotConfigSection_Perception.SolarBotConfigSection.Object
	SolarBotThreatConfig ThreatConfig;//[Offset: 0x30, Size: 0x6c]
	<enum,SolarBotThreatConfig> WPSpecificThreatConfig;//[Offset: 0xa0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: BotBonusDropConfig
	float ActiveTime;//[Offset: 0x0, Size: 0x4]
	float DeactiveTime;//[Offset: 0x4, Size: 0x4]
	int NumOfAmmo;//[Offset: 0x8, Size: 0x4]
	int KitId;//[Offset: 0xc, Size: 0x4]
	int NumOfKit;//[Offset: 0x10, Size: 0x4]
	int NumOfElectricity;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotShootSimulater.Object
	SolarBotAIController* OwnerController;//[Offset: 0x28, Size: 0x8]
	Actor* LockedTargetActor;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarFollowingComponent.CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bEnableOffmeshDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	float MinDetectInterval;//[Offset: 0x2a0, Size: 0x4]
	uint32 MaxDetectIteration;//[Offset: 0x2a4, Size: 0x4]
	Vector InitialOffmeshSolveExtent;//[Offset: 0x2a8, Size: 0xc]
	float MinZDiffDetectUndergroud;//[Offset: 0x2b4, Size: 0x4]
	float AgentSwimingHalfHeightPct;//[Offset: 0x2b8, Size: 0x4]
	float AgentNormalHalfHeightPct;//[Offset: 0x2bc, Size: 0x4]
	float ReachTestCheckAngleWV;//[Offset: 0x2c0, Size: 0x4]
	float MinSpeedLastSegmentWV;//[Offset: 0x2c4, Size: 0x4]
	float TurningSpeedWV;//[Offset: 0x2c8, Size: 0x4]
	float TurningSteeringThresholdWV;//[Offset: 0x2cc, Size: 0x4]
	float BlockDetectionDistanceCharacter;//[Offset: 0x2d0, Size: 0x4]
	float BlockDetectionDistanceVehicle;//[Offset: 0x2d4, Size: 0x4]
	bool bEnableSolveBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	SolarVehiclePawn* VehicleActor;//[Offset: 0x320, Size: 0x8]
	float SensorTraceDistance;//[Offset: 0x334, Size: 0x4]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	float RightSensorAlpha;//[Offset: 0x33c, Size: 0x4]
	float CentralSensorAlpha;//[Offset: 0x340, Size: 0x4]
	float LeftSensorAlpha;//[Offset: 0x344, Size: 0x4]
	float SteeringAngle;//[Offset: 0x348, Size: 0x4]
	float VehicleSteeringSensitivity;//[Offset: 0x34c, Size: 0x4]
	float BrakingForce;//[Offset: 0x350, Size: 0x4]
	float DecelerationDistance;//[Offset: 0x354, Size: 0x4]
	float VehicleDecelerationSpeed;//[Offset: 0x358, Size: 0x4]
	float VehicleTurningSpeed;//[Offset: 0x35c, Size: 0x4]
	float CheckReverseDistance;//[Offset: 0x360, Size: 0x4]
	float HoverCheckBlockSpeed;//[Offset: 0x364, Size: 0x4]
	float WheeledCheckBlockSpeed;//[Offset: 0x368, Size: 0x4]
	float LeggedVehicleCheckBlockSpeed;//[Offset: 0x36c, Size: 0x4]
	float CheckBlockTime;//[Offset: 0x374, Size: 0x4]
	int TryReverseTimes;//[Offset: 0x380, Size: 0x4]
	float TryReverseDurationTime;//[Offset: 0x384, Size: 0x4]
	float SolveBlockGoFrontTime;//[Offset: 0x390, Size: 0x4]
	bool bPathFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	void SetVehicle(Actor* VehicleActorIn);// 0x4ce523bfa041
	void OnUpdatedCharacterMovementModeChanged(Character* Character, byte PrevMovementMode, byte PreviousCustomMode);// 0x4ce423bfa041
	void OnUpdatedCharacterLanded(out const HitResult Hit);// 0x4ce323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x268, Size: 0x8]
	Vector CrowdAgentMoveDirection;//[Offset: 0x270, Size: 0xc]
	void SuspendCrowdSteering(bool bSuspend);// 0x4ce223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: NgaiAIControllerComponent.ActorComponent.Object
	SolarCharacterBase* EnemyCharacterBase;//[Offset: 0xb0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterSkinConfig.DataAsset.Object
	SoftObjectPath SkinIcon;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath DefaultIcon;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath SkinRes;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath CharaSkinRes;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath ShieldRes;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath InvincibleMAT;//[Offset: 0xa8, Size: 0x18]
	SoftClassPath AnimBPRes;//[Offset: 0xc0, Size: 0x18]
	<GameplayTag,StaticMeshOrnamentConfig> StaticMeshOrnamentsConfig;//[Offset: 0xd8, Size: 0x50]
	<GameplayTag,SkeletalMeshOrnamentConfig> SkeletalMeshOrnamentsConfig;//[Offset: 0x128, Size: 0x50]
	<GameplayTag,ChildActorOrnamentConfig> ChildActorOrnamentsConfig;//[Offset: 0x178, Size: 0x50]
	<GameplayTag,StaticMeshOrnamentConfig> GetStaticMeshOrnamentsConfig();// 0x432923bfa041
	SoftObjectPath GetSkinRes();// 0x432823bfa041
	SoftObjectPath GetSkinIcon();// 0x432723bfa041
	<GameplayTag,SkeletalMeshOrnamentConfig> GetSkeletalMeshOrnamentsConfig();// 0x432623bfa041
	SoftObjectPath GetInvincibleMAT();// 0x432523bfa041
	<GameplayTag,ChildActorOrnamentConfig> GetChildActorOrnamentsConfig();// 0x432423bfa041
	SoftObjectPath GetCharaSkinRes();// 0x432323bfa041
	SoftObjectPath GetAnimBPRes();// 0x432223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMeshOrnamentConfig
	SoftObjectPath OrnamentRes;//[Offset: 0x0, Size: 0x18]
	FName OrnamentAttachSocket;//[Offset: 0x18, Size: 0x8]
	Transform OrnamentRelativeTransform;//[Offset: 0x20, Size: 0x30]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x50, Size: 0x18]
	FName[] OrnamentComponentTags;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshOrnamentConfig
	SoftObjectPath OrnamentRes;//[Offset: 0x0, Size: 0x18]
	SoftClassPath OrnamentABPRes;//[Offset: 0x18, Size: 0x18]
	FName OrnamentAttachSocket;//[Offset: 0x30, Size: 0x8]
	Transform OrnamentRelativeTransform;//[Offset: 0x40, Size: 0x30]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x70, Size: 0x18]
	FName[] OrnamentComponentTags;//[Offset: 0x88, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ChildActorOrnamentConfig
	SoftClassPath OrnamentRes;//[Offset: 0x0, Size: 0x18]
	FName OrnamentAttachSocket;//[Offset: 0x18, Size: 0x8]
	Transform OrnamentRelativeTransform;//[Offset: 0x20, Size: 0x30]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x50, Size: 0x18]
	FName[] OrnamentComponentTags;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BackpackStatisticsInfo
	bool IsVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector PlayerStartLocation;//[Offset: 0x4, Size: 0xc]
	Vector PlayerEndLocation;//[Offset: 0x10, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: RestoreAbilityInfo
	GameplayAbilitySpecHandle Handle;//[Offset: 0x0, Size: 0x4]
	PredictionKey ActivationPredictionKey;//[Offset: 0x8, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: ScannedInfo_NetQuantize
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	byte TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize TargetLocation;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleWeakPointSpec
	float CurrentHealth;//[Offset: 0x0, Size: 0x4]
	bool bInRepairing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	SolarVehicleWeakPointComponent* WeakPointMeshComponent;//[Offset: 0x8, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x10, Size: 0x8]
	byte WeakPointID;//[Offset: 0x18, Size: 0x1]
	FName[] WeakPointSockets;//[Offset: 0x20, Size: 0x10]
	Vector WeakPointOffset;//[Offset: 0x30, Size: 0xc]
	StaticMesh* WeakPointStaticMesh;//[Offset: 0x40, Size: 0x28]
	Transform WeakPointRelativeTransform;//[Offset: 0x70, Size: 0x30]
	float MaxWeakPointHealth;//[Offset: 0xa0, Size: 0x4]
	float RepairDuration;//[Offset: 0xa4, Size: 0x4]
	bool bRecoverBoneScaleAfterVFXFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	class GameplayEffect* BrokenEffect;//[Offset: 0xb0, Size: 0x8]
	float FacingAngle;//[Offset: 0xc0, Size: 0x4]
	float DistFromCharacterToWeakPoint;//[Offset: 0xc4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleWeakPointComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleSeatSlot
	FName SeatSocketName;//[Offset: 0x0, Size: 0x8]
	FName SeatWeaponSocket;//[Offset: 0x8, Size: 0x8]
	bool bDisplayBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool SeatStickOutEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	VehicleCameraDataAsset* OutShootCameraData;//[Offset: 0x18, Size: 0x8]
	VehicleCameraDataAsset* OutShootAimCameraData;//[Offset: 0x20, Size: 0x8]
	CurveFloat* OutShootPitchLimitCurve;//[Offset: 0x28, Size: 0x8]
	VehicleSeatAbility[] VechicleAbilities;//[Offset: 0x30, Size: 0x10]
	class SolarVehicleWeapon* VehicleWeaponClass;//[Offset: 0x40, Size: 0x8]
	class SolarVehicleWeapon* VehicleWeaponSkinClass;//[Offset: 0x48, Size: 0x8]
	bool bAutoEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Texture2D* SeatDisplayIcon;//[Offset: 0x58, Size: 0x28]
	float DamageRatio;//[Offset: 0x80, Size: 0x4]
	float PenetrationDamageRatio;//[Offset: 0x84, Size: 0x4]
	BoxSphereBounds PenetrationSphere;//[Offset: 0x88, Size: 0x1c]
	Rotator EjectRotation;//[Offset: 0xa4, Size: 0xc]
	bool bOverrideDefaultEjectParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	VehicleEjectParams EjectParams;//[Offset: 0xb4, Size: 0x10]
	SolarCharacter* SeatPassenger;//[Offset: 0xc4, Size: 0x8]
	SolarVehicleWeapon* SeatWeapon;//[Offset: 0xd0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleSeatAbility
	class SolarVehicleGameplayAbility* AbilityClass;//[Offset: 0x0, Size: 0x8]
	GameplayAbilitySpecHandle ServerOrDriverAbilityHandle;//[Offset: 0x8, Size: 0x4]
	GameplayAbilitySpecHandle SkinPreAbilityHandle;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimDetailMode;//[Offset: 0xc18, Size: 0x1]
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc40, Size: 0x1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc40, Size: 0x1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc40, Size: 0x1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x38e423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarNetMovementComponent.ActorComponent.Object
	float InterpolatedBackTime;//[Offset: 0xe4, Size: 0x4]
	float ServerBufferCheckMinSpeed;//[Offset: 0xe8, Size: 0x4]
	float ServerBufferIgnoreCheckTimer;//[Offset: 0xec, Size: 0x4]
	float AtRestThresholdCount;//[Offset: 0xf0, Size: 0x4]
	enum ExtrapolationMode;//[Offset: 0xf4, Size: 0x1]
	bool bUseExtrapolationTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	float ExtrapolationTimeLimit;//[Offset: 0xf8, Size: 0x4]
	bool bUseExtrapolationDistanceLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	float ExtrapolationDistanceLimit;//[Offset: 0x100, Size: 0x4]
	float SendPositionThreshold;//[Offset: 0x104, Size: 0x4]
	float SendRotationThreshold;//[Offset: 0x108, Size: 0x4]
	float SendVelocityThreshold;//[Offset: 0x10c, Size: 0x4]
	float SendAngularVelocityThreshold;//[Offset: 0x110, Size: 0x4]
	float ResetTimeOffsetsThreshold;//[Offset: 0x114, Size: 0x4]
	float UsingRepLocationThreshold;//[Offset: 0x118, Size: 0x4]
	float LinearVelcolityForPositionThreshold;//[Offset: 0x11c, Size: 0x4]
	float ReceivedPositionThreshold;//[Offset: 0x120, Size: 0x4]
	float AngularVelocityForRotationThreshold;//[Offset: 0x124, Size: 0x4]
	float ReceivedRotationThreshold;//[Offset: 0x128, Size: 0x4]
	float PositionSnapThreshold;//[Offset: 0x12c, Size: 0x4]
	float RotationSnapThreshold;//[Offset: 0x130, Size: 0x4]
	float PositionLerpSpeed;//[Offset: 0x134, Size: 0x4]
	float RotationLerpSpeed;//[Offset: 0x138, Size: 0x4]
	float SpeedOfLerp;//[Offset: 0x13c, Size: 0x4]
	enum SyncPosition;//[Offset: 0x140, Size: 0x1]
	enum SyncRotation;//[Offset: 0x141, Size: 0x1]
	enum SyncVelocity;//[Offset: 0x142, Size: 0x1]
	enum SyncAngularVelocity;//[Offset: 0x143, Size: 0x1]
	bool bSyncDesiredYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool isPositionCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	bool isRotationCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 0x1]
	bool isVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 0x1]
	bool isAngularVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	float SendRate;//[Offset: 0x14c, Size: 0x4]
	float TimeSmoothing;//[Offset: 0x150, Size: 0x4]
	bool bUsingOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	bool bAlwaysSendOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 0x1]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x190, Size: 0x8]
	SceneComponent* RelativeComponent;//[Offset: 0x198, Size: 0x8]
	SolarVehiclePawn* PreviousBaseVehicleActor;//[Offset: 0x1a0, Size: 0x8]
	float AtRestPositionThreshold;//[Offset: 0x510, Size: 0x4]
	float AtRestRotationThreshold;//[Offset: 0x514, Size: 0x4]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x528, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarVehicleCameraComponent* VehicleCamera;//[Offset: 0x3f8, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x400, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float CameraLocationLagTime;//[Offset: 0x3b0, Size: 0x4]
	bool HandleTargetOffsetAsRelativeValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	SolarSpringArmComponent* GetSpringArmComponentFromActor(const Actor* InActor);// 0x4b5123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x314, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x318, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x324, Size: 0xc]
	float ProbeSize;//[Offset: 0x330, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x334, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x335, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x335, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x335, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x335, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x335, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x335, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x335, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x335, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x336, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x338, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x33c, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x340, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x344, Size: 0x4]
	bool IsCollisionFixApplied();// 0x4b5023bfa041
	Vector GetUnfixedCameraPosition();// 0x4b4f23bfa041
	Rotator GetTargetRotation();// 0x4b4e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarVehiclePawn* Vehicle;//[Offset: 0x9b8, Size: 0x8]
	SolarVehicleSpringArmComponent* VehicleSpringArm;//[Offset: 0x9c0, Size: 0x8]
	VehicleCameraDataAsset*[] CameraDataAssets;//[Offset: 0x9e0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float ConfigDistanceToTarget;//[Offset: 0x980, Size: 0x4]
	Vector ConfigCameraOffset;//[Offset: 0x984, Size: 0xc]
	Vector ConfigTargetOffset;//[Offset: 0x990, Size: 0xc]
	float ConfigFOV;//[Offset: 0x99c, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x9a0, Size: 0x4]
	float ViewPitchMin;//[Offset: 0x9a4, Size: 0x4]
	float ViewYawMax;//[Offset: 0x9a8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x9ac, Size: 0x4]
	float CameraOccupiedRoom;//[Offset: 0x9b0, Size: 0x4]
	bool EnableDistanceSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 0x1]
	bool EnableFOVSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b5, Size: 0x1]
	SolarCameraComponent* GetCameraComponentFromActor(const Actor* InActor);// 0x4b3123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData CurrentVehicleHealth;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData MaxVehicleHealth;//[Offset: 0x40, Size: 0x10]
	GameplayAttributeData MaxBrokenHealth;//[Offset: 0x50, Size: 0x10]
	GameplayAttributeData StealthMaterialPercent;//[Offset: 0x60, Size: 0x10]
	GameplayAttributeData SpeedMultiplier;//[Offset: 0x70, Size: 0x10]
	GameplayAttributeData CurrentVehicleWholeShield;//[Offset: 0x80, Size: 0x10]
	GameplayAttributeData MaxVehicleWholeShield;//[Offset: 0x90, Size: 0x10]
	void OnRep_StealthMaterialPercent(out const GameplayAttributeData OldStealthMaterialPercent);// 0x59b723bfa041
	void OnRep_SpeedMultiplier(out const GameplayAttributeData OldSpeedMultiplier);// 0x59b623bfa041
	void OnRep_MaxVehicleWholeShield(out const GameplayAttributeData OldMaxVehicleWholeShield);// 0x59b523bfa041
	void OnRep_MaxVehicleHealth(out const GameplayAttributeData OldMaxVehicleHealth);// 0x59b423bfa041
	void OnRep_MaxBrokenHealth(out const GameplayAttributeData OldMaxBrokenHealth);// 0x59b323bfa041
	void OnRep_CurrentVehicleWholeShield(out const GameplayAttributeData OldVehicleWholeShield);// 0x59b223bfa041
	void OnRep_CurrentVehicleHealth(out const GameplayAttributeData OldVehicleHealth);// 0x59b123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BasedMovement
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x8, Size: 0xc]
	Rotator Rotation;//[Offset: 0x14, Size: 0xc]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleVFXMesh
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x28]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x28, Size: 0x10]
	FName AttachedSocket;//[Offset: 0x38, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x40, Size: 0x30]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleMaterialData
	int8 MaterialIndex;//[Offset: 0x0, Size: 0x1]
	FName ParamName;//[Offset: 0x4, Size: 0x8]
	float OnValue;//[Offset: 0xc, Size: 0x4]
	float OffValue;//[Offset: 0x10, Size: 0x4]
	float ActiveSpeed;//[Offset: 0x14, Size: 0x4]
	MaterialInstanceDynamic* MatInstanceDynamic;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleSoundDataAsset.DataAsset.Object
	FString Engine_3P;//[Offset: 0x30, Size: 0x10]
	FString Engine_3P_Enemy;//[Offset: 0x40, Size: 0x10]
	FString Engine_Down_3P;//[Offset: 0x50, Size: 0x10]
	FString Engine_Down_3P_Enemy;//[Offset: 0x60, Size: 0x10]
	FString Engine_RTPC;//[Offset: 0x70, Size: 0x10]
	FString Engine_Stop_3P;//[Offset: 0x80, Size: 0x10]
	FString Engine_Stop_3P_Enemy;//[Offset: 0x90, Size: 0x10]
	FString Engine_Input_RTPC;//[Offset: 0xa0, Size: 0x10]
	float MaxMoveSpeed;//[Offset: 0xb0, Size: 0x4]
	FString MoveSpeed_Acc_RTPC;//[Offset: 0xb8, Size: 0x10]
	FString Tire_3P;//[Offset: 0xc8, Size: 0x10]
	FString Tire_3P_Enemy;//[Offset: 0xd8, Size: 0x10]
	FString Tire_End_3P;//[Offset: 0xe8, Size: 0x10]
	FString Tire_End_3P_Enemy;//[Offset: 0xf8, Size: 0x10]
	FString Tire_RTPC;//[Offset: 0x108, Size: 0x10]
	FString Tire_Group;//[Offset: 0x118, Size: 0x10]
	<byte,FString> Tire_States;//[Offset: 0x128, Size: 0x50]
	bool bUseEngineRpm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	FString Vehicle_Collision_3P;//[Offset: 0x180, Size: 0x10]
	FString Vehicle_Collision_3P_Enemy;//[Offset: 0x190, Size: 0x10]
	FString Vehicle_Collision_RTPC;//[Offset: 0x1a0, Size: 0x10]
	FString Play_Booster_3P;//[Offset: 0x1b0, Size: 0x10]
	FString Play_Booster_3P_Enemy;//[Offset: 0x1c0, Size: 0x10]
	FString Stop_Booster_3P;//[Offset: 0x1d0, Size: 0x10]
	FString Stop_Booster_3P_Enemy;//[Offset: 0x1e0, Size: 0x10]
	FString Vehicle_Speedboard_1P;//[Offset: 0x1f0, Size: 0x10]
	FString Vehicle_Speedboard_3P;//[Offset: 0x200, Size: 0x10]
	FString Vehicle_Speedboard_3P_Enemy;//[Offset: 0x210, Size: 0x10]
	FString Vehicle_Eject_1P;//[Offset: 0x220, Size: 0x10]
	FString Vehicle_Eject_3P;//[Offset: 0x230, Size: 0x10]
	FString Vehicle_Eject_3P_Enemy;//[Offset: 0x240, Size: 0x10]
	FString Play_Vehicle_Destroyed;//[Offset: 0x250, Size: 0x10]
	FString Weakpoint_Broken_3P;//[Offset: 0x260, Size: 0x10]
	FString Weakpoint_Broken_3P_Enemy;//[Offset: 0x270, Size: 0x10]
	FString Weakpoint_Fixed_3P;//[Offset: 0x280, Size: 0x10]
	FString Weakpoint_Fixed_3P_Enemy;//[Offset: 0x290, Size: 0x10]
	FString Engine_Start_3P;//[Offset: 0x2a0, Size: 0x10]
	FString Engine_Start_3P_Enemy;//[Offset: 0x2b0, Size: 0x10]
	FString Braking_Loop_RTPC;//[Offset: 0x2c0, Size: 0x10]
	FString Play_Braking_Loop_3P;//[Offset: 0x2d0, Size: 0x10]
	FString Play_Braking_Loop_3P_Enemy;//[Offset: 0x2e0, Size: 0x10]
	FString Stop_Braking_Loop_3P;//[Offset: 0x2f0, Size: 0x10]
	FString Stop_Braking_Loop_3P_Enemy;//[Offset: 0x300, Size: 0x10]
	float BrakingLoopSoundDegree;//[Offset: 0x310, Size: 0x4]
	float BrakingLoopSoundSpeed;//[Offset: 0x314, Size: 0x4]
	FString Play_Reverse_Loop;//[Offset: 0x318, Size: 0x10]
	FString Stop_Reverse_Loop;//[Offset: 0x328, Size: 0x10]
	FString Drift_RTPC;//[Offset: 0x338, Size: 0x10]
	FString Drift_Start;//[Offset: 0x348, Size: 0x10]
	FString Drift_Stop;//[Offset: 0x358, Size: 0x10]
	byte SpeedDifferenceInKmThresholdForHitSound;//[Offset: 0x368, Size: 0x1]
	FString Play_SelfHealing_3P;//[Offset: 0x370, Size: 0x10]
	FString Stop_SelfHealing_3P;//[Offset: 0x380, Size: 0x10]
	FString Play_vehicle_crash_ground_3P;//[Offset: 0x390, Size: 0x10]
	FString Play_vehicle_crash_ground_3P_enemy;//[Offset: 0x3a0, Size: 0x10]
	FString Vehicle_Crash_Ground_RTPC;//[Offset: 0x3b0, Size: 0x10]
	float VehicleCrashGroundRtpcMultiplier;//[Offset: 0x3c0, Size: 0x4]
	FString Play_vehicle_crash_water_3P;//[Offset: 0x3c8, Size: 0x10]
	FString Play_vehicle_crash_water_3P_enemy;//[Offset: 0x3d8, Size: 0x10]
	FString Play_vehicle_fixing_weakpoint_3P;//[Offset: 0x3e8, Size: 0x10]
	FString Stop_vehicle_fixing_weakpoint_3P;//[Offset: 0x3f8, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Start_1P;//[Offset: 0x408, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Loop_1P;//[Offset: 0x418, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Start_3P;//[Offset: 0x428, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Loop_3P;//[Offset: 0x438, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Start_1P;//[Offset: 0x448, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Loop_1P;//[Offset: 0x458, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Start_3P;//[Offset: 0x468, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Loop_3P;//[Offset: 0x478, Size: 0x10]
	FString Play_HitVehicleWholdShield_1P;//[Offset: 0x488, Size: 0x10]
	FString Play_HitVehicleWholdShield_3P;//[Offset: 0x498, Size: 0x10]
	FString HoverJumpOnActive1P;//[Offset: 0x4a8, Size: 0x10]
	FString HoverJumpOnActive3P;//[Offset: 0x4b8, Size: 0x10]
	FString HoverJumpWhileActive1P;//[Offset: 0x4c8, Size: 0x10]
	FString HoverJumpWhileActive3P;//[Offset: 0x4d8, Size: 0x10]
	FString HoverJumpOnRemove1P;//[Offset: 0x4e8, Size: 0x10]
	FString HoverJumpOnRemove3P;//[Offset: 0x4f8, Size: 0x10]
	FString Play_VehicleTrumpet_1P;//[Offset: 0x508, Size: 0x10]
	FString Play_VehicleTrumpet_3P;//[Offset: 0x518, Size: 0x10]
	FString Stop_VehicleTrumpet_1P;//[Offset: 0x528, Size: 0x10]
	FString Stop_VehicleTrumpet_3P;//[Offset: 0x538, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P;//[Offset: 0x548, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x558, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P;//[Offset: 0x568, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x578, Size: 0x10]
	FString Play_Vehicle_UpShift_3P;//[Offset: 0x588, Size: 0x10]
	FString Play_Vehicle_UpShift_3P_Enemy;//[Offset: 0x598, Size: 0x10]
	FString Play_Vehicle_DownShift_3P;//[Offset: 0x5a8, Size: 0x10]
	FString Play_Vehicle_DownShift_3P_Enemy;//[Offset: 0x5b8, Size: 0x10]
	FString Play_IronMan_Laser_Hit;//[Offset: 0x5c8, Size: 0x10]
	FString FootPlant;//[Offset: 0x5d8, Size: 0x10]
	FString Landing_3P;//[Offset: 0x5e8, Size: 0x10]
	FString Landing_3P_Enemy;//[Offset: 0x5f8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarNavModifierComponent.NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	void OnVehicleRootHit(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x504323bfa041
	void OnDriverGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x504223bfa041
	void OnDriverGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x504123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe0, Size: 0x8]
	Vector FailsafeExtent;//[Offset: 0xe8, Size: 0xc]
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	void SetAreaClass(class NavArea NewAreaClass);// 0x504023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	Object* CachedNavParent;//[Offset: 0xd8, Size: 0x8]
	void SetNavigationRelevancy(bool bRelevant);// 0x503f23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AbilityCooldownTimer
	GameplayTag AbilityCooldownTag;//[Offset: 0x0, Size: 0x8]
	float AbilityAppliedTime;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SpectateReportInfo
	uint32 RankLevelID;//[Offset: 0x0, Size: 0x4]
	FString TargetUserID;//[Offset: 0x8, Size: 0x10]
	byte TargetType;//[Offset: 0x18, Size: 0x1]
	uint32 SpectateElapsedTime;//[Offset: 0x1c, Size: 0x4]
	byte Type;//[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: InteractiveTaskConfig.TableRowBase
	int TaskID;//[Offset: 0x8, Size: 0x4]
	int GiftID;//[Offset: 0xc, Size: 0x4]
	int TaskName;//[Offset: 0x10, Size: 0x4]
	FString Describe;//[Offset: 0x18, Size: 0x10]
	int TaskUpgradeDescribe;//[Offset: 0x28, Size: 0x4]
	SoftObjectPath TaskIcon;//[Offset: 0x30, Size: 0x18]
	enum CurrencyType;//[Offset: 0x48, Size: 0x1]
	int MaxTaskLevel;//[Offset: 0x4c, Size: 0x4]
	int[] TaskTarget;//[Offset: 0x50, Size: 0x10]
	int[] UpgradePrice;//[Offset: 0x60, Size: 0x10]
	int[] TaskReward;//[Offset: 0x70, Size: 0x10]
	enum TaskType;//[Offset: 0x80, Size: 0x1]
	int Param;//[Offset: 0x84, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementTempData
	int TotalAccountExp;//[Offset: 0x0, Size: 0x4]
	int AccountLevel;//[Offset: 0x4, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0x58, Size: 0x4]
	int TotalCharacterExp;//[Offset: 0x5c, Size: 0x4]
	bool bCharExpFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	int RankBeforeScore;//[Offset: 0x64, Size: 0x4]
	int RankAfterScore;//[Offset: 0x68, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x6c, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x70, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x74, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x78, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x7c, Size: 0x4]
	int RankLegend;//[Offset: 0x80, Size: 0x4]
	byte RankProtectType;//[Offset: 0x84, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	int WinninScoreID;//[Offset: 0x88, Size: 0x4]
	int BattlePassID;//[Offset: 0x8c, Size: 0x4]
	int BattlePassAddExp;//[Offset: 0x90, Size: 0x4]
	int BattlePassExp;//[Offset: 0x94, Size: 0x4]
	int[] BattlePassTaskID;//[Offset: 0x98, Size: 0x10]
	int[] BattlePassTaskWeek;//[Offset: 0xa8, Size: 0x10]
	int[] BattlePassTaskAdd;//[Offset: 0xb8, Size: 0x10]
	int[] BattlePassTaskVal;//[Offset: 0xc8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ExposeLocationMap
	<SolarPlayerState*,int> InnerMap;//[Offset: 0x0, Size: 0x50]
	SolarPlayerState* Owner;//[Offset: 0x50, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAchievementComponent.ActorComponent.Object
	DataTable* AchievementHandleConfig;//[Offset: 0xb0, Size: 0x8]
	class AchievementFormula* AchievementFormulaClass;//[Offset: 0xb8, Size: 0x8]
	AchievementFormula* AchievementFormula;//[Offset: 0xc0, Size: 0x8]
	<int,AchievementResult> AllStatisticAchievement;//[Offset: 0x170, Size: 0x50]
	void UnlockAchievement(int InAchievementID);// 0x496c23bfa041
	void SetAchievementValue(int InAchievementID, int InUpdateValue);// 0x496b23bfa041
	bool IsAchievementCompleted(int InAchievementID);// 0x496a23bfa041
	void IncreaseAchievementValue(int InAchievementID, int InUpdateValue);// 0x496923bfa041
	int GetAchievementPorgressValue(int InAchievementID);// 0x496823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AchievementFormula.Actor.Object
	SolarAchievementComponent* GetAchievementComponent();// 0x496723bfa041
	int GetAchievedTargetValue(int InAchievementID);// 0x496623bfa041
	int[] GetAchievedConditionValue(int InAchievementID);// 0x496523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AchievementResult
	int AchievementID;//[Offset: 0x0, Size: 0x4]
	int ProgressValue;//[Offset: 0x4, Size: 0x4]
	bool IsUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum AchievementReportType;//[Offset: 0x9, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameModeStatisticsComponent.GameModeCompBase.ActorComponent.Object
	<FString,PlayerStatisticsData*> AllPlayerStatData;//[Offset: 0xe0, Size: 0x50]
	enum[] SpecialFuncTag;//[Offset: 0x130, Size: 0x10]
	int[] GetValue_IntArray(FString InPlayerID, enum InType);// 0x4d4d23bfa041
	int GetValue_Int(FString InPlayerID, enum InType);// 0x4d4c23bfa041
	PlayerStatisticsData* GetPlayerStatData(FString InPlayerID);// 0x4d4b23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameModeCompBase.ActorComponent.Object
	bool bPreStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bTakeChargeStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bPostStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	bool bPreHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]
	bool bTakeChargeHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 0x1]
	bool bPostHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf, Size: 0x1]
	bool bPreRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bTakeChargeRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]
	bool bPostRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bPreEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 0x1]
	bool bTakeChargeEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bPostEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	void PreStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x416a23bfa041
	void PreRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x416923bfa041
	void PreHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x416823bfa041
	void PreGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x416723bfa041
	void PreGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x416623bfa041
	void PreGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x416523bfa041
	void PreGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x416423bfa041
	void PreEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x416323bfa041
	void PostStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x416223bfa041
	void PostRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x416123bfa041
	void PostHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x416023bfa041
	void PostGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x415f23bfa041
	void PostGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x415e23bfa041
	void PostGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x415d23bfa041
	void PostGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x415c23bfa041
	void PostEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x415b23bfa041
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x415a23bfa041
	void OnGameModeRestartPlayer(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x415923bfa041
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x415823bfa041
	void OnGameModeEndPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x415723bfa041
	SolarGameMode* GetGameModeOwner();// 0x415623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate PreStartPlay;//[Offset: 0x310, Size: 0x10]
	delegate CalledStartPlay;//[Offset: 0x320, Size: 0x10]
	delegate PostStartPlay;//[Offset: 0x330, Size: 0x10]
	delegate PreHandleMatchHasStarted;//[Offset: 0x340, Size: 0x10]
	delegate CalledHandleMatchHasStarted;//[Offset: 0x350, Size: 0x10]
	delegate PostHandleMatchHasStarted;//[Offset: 0x360, Size: 0x10]
	delegate PreRestartPlayer;//[Offset: 0x370, Size: 0x10]
	delegate CalledRestartPlayer;//[Offset: 0x380, Size: 0x10]
	delegate PostRestartPlayer;//[Offset: 0x390, Size: 0x10]
	delegate PreEndPlay;//[Offset: 0x3a0, Size: 0x10]
	delegate CalledEndPlay;//[Offset: 0x3b0, Size: 0x10]
	delegate PostEndPlay;//[Offset: 0x3c0, Size: 0x10]
	GameModeCompBase*[] GameModeComponents;//[Offset: 0x3d0, Size: 0x10]
	int GamePlayMode;//[Offset: 0x3e4, Size: 0x4]
	class Actor[] ManagerClasses;//[Offset: 0x3e8, Size: 0x10]
	FString CharacterClassPath;//[Offset: 0x3f8, Size: 0x10]
	int CharacterIdInTrainningCourse;//[Offset: 0x408, Size: 0x4]
	int SkinIdInTrainningCourse;//[Offset: 0x40c, Size: 0x4]
	int BagIdInTrainingCourse;//[Offset: 0x410, Size: 0x4]
	bool bManuallyModifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	int SpecifiedCharacterSkinID;//[Offset: 0x418, Size: 0x4]
	bool bManuallyModifyCharacterBagId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	int SpecifiedCharacterBagID;//[Offset: 0x420, Size: 0x4]
	bool bManuallyModifyCharacterBagTrailId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	int SpecifiedCharacterBagTrailID;//[Offset: 0x428, Size: 0x4]
	delegate OnPostSpawnDefaultSolarCharacterAtTransform;//[Offset: 0x430, Size: 0x10]
	SolarGameModeAIComponent* AIMgrComponent;//[Offset: 0x440, Size: 0x8]
	SolarGameModeStatisticsComponent* StatComponent;//[Offset: 0x448, Size: 0x8]
	SolarTeamInfo*[] Teams;//[Offset: 0x450, Size: 0x10]
	SolarTeamInfo*[] AliveTeams;//[Offset: 0x460, Size: 0x10]
	SolarPlayerState*[] AlivePlayers;//[Offset: 0x470, Size: 0x10]
	class SolarTeamInfo* TeamClass;//[Offset: 0x480, Size: 0x8]
	DataTable* TeamDataTable;//[Offset: 0x488, Size: 0x8]
	SolarFlyTrail* FlyTrailActor;//[Offset: 0x540, Size: 0x8]
	FString[] BannedPlayerIDList;//[Offset: 0x548, Size: 0x10]
	void UpdatePlayerDataForBotAI(int AIConfigID, SolarPlayerState* PlayerState);// 0x212123bfa041
	void UpdatePlayerData(int CharacterSkinID, int CharacterBagID, int CharacterBagTrailID, SolarPlayerState* PlayerState);// 0x212023bfa041
	void UpdateDeserterTag(SolarPlayerState* PlayerState);// 0x211f23bfa041
	void UpdateBotPlayerData(SolarPlayerState* PlayerState);// 0x211e23bfa041
	void UpdateAliveTeamsAndPlayers();// 0x211d23bfa041
	FString TryKickOutOnlinePlayer(FString PlayerId, const bool IsAllowReconnect);// 0x211c23bfa041
	void SolarGM_SetAntiCheatData(FString InVariableName, float InMin, float InMax, float InThreshold, bool bInBanPlayer);// 0x211b23bfa041
	void SetGamePlayMode(int InGamePlayMode);// 0x211a23bfa041
	void SendHitMsgWithBool(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, bool bo);// 0x211923bfa041
	void SendHitMsg(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, FString Params);// 0x211823bfa041
	void RestartPlayerTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x211723bfa041
	void RestartPlayerEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x211623bfa041
	void PresettleAll();// 0x211523bfa041
	void PreAssignTeam(byte DesiredTeamID, SolarPlayerState* PlayerState);// 0x211423bfa041
	void PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature(SolarPlayerState* NewPlayer, SolarCharacter* NewCharacter);// 0x211323bfa041
	void OnStartBattleresponded();// 0x211223bfa041
	bool OnPlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x211123bfa041
	void NotifyItemStateChanged(const Actor* Item, const int State);// 0x211023bfa041
	void KickOutPlayerToLobby(FString InPlayerID);// 0x210f23bfa041
	void KickOutAllPlayerToLobby();// 0x210e23bfa041
	bool IsBannedForCheating(FString PlayerId);// 0x210d23bfa041
	void InitCharacterClassPath(int CharacterId);// 0x210c23bfa041
	void GetTeams(out SolarTeamInfo*[] OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled);// 0x210b23bfa041
	int[] GetRandomAISkinID(const SolarPlayerState* InPS);// 0x210a23bfa041
	int GetMatchTeammateCount();// 0x210923bfa041
	int GetGamePlayMode();// 0x210823bfa041
	GameModeGlobalSetting* GetGameModeSetting(const Object* WorldContextObject);// 0x210723bfa041
	void GetEmptyTeams(out SolarTeamInfo*[] OutTeams, bool Reverse);// 0x210623bfa041
	int GetBotAINumber();// 0x210523bfa041
	void GameModeComponentTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x210423bfa041
	void GameModeComponentEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection);// 0x210323bfa041
	void EndPlayTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x210223bfa041
	void EndPlayEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x210123bfa041
	SolarPlayerState* CreateBotAISingle(int CharacterId, out const Vector Location, enum[] JoinPolicies, class SolarBotAIController ControllerClass, const int Difficultly);// 0x210023bfa041
	SolarPlayerState* CreateBotAIAndJoinTeamByName(int CharacterId, out const Vector Location, FString TeamName, class SolarBotAIController ControllerClass, const int Difficultly);// 0x20ff23bfa041
	SolarPlayerState* CreateBotAIAndJoinTeamByID(int CharacterId, out const Vector Location, const byte TeamID, class SolarBotAIController ControllerClass, const int Difficultly);// 0x20fe23bfa041
	SolarPlayerState* CreateBotAIAndJoinTeam(int CharacterId, out const Vector Location, SolarTeamInfo* TeamInfo, class SolarBotAIController ControllerClass, const int Difficultly);// 0x20fd23bfa041
	bool CanPlayerBattle(SolarPlayerState* PlayerState);// 0x20fc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c8, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	int NumSpectators;//[Offset: 0x2d4, Size: 0x4]
	int NumPlayers;//[Offset: 0x2d8, Size: 0x4]
	int NumBots;//[Offset: 0x2dc, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x2e0, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x2e4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e8, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2f0, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x300, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x304, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	void StartMatch();// 0x20fb23bfa041
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x20fa23bfa041
	void Say(FString Msg);// 0x20f923bfa041
	void RestartGame();// 0x20f823bfa041
	bool ReadyToStartMatch();// 0x20f723bfa041
	bool ReadyToEndMatch();// 0x20f623bfa041
	void K2_OnSetMatchState(FName NewState);// 0x20f523bfa041
	bool IsMatchInProgress();// 0x20f423bfa041
	bool HasMatchEnded();// 0x20f323bfa041
	FName GetMatchState();// 0x20f223bfa041
	void EndMatch();// 0x20f123bfa041
	void AbortMatch();// 0x20f023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	class SolarBotAIController* BotAIControllerClass;//[Offset: 0xe0, Size: 0x8]
	class SolarAIControllerBase* OfflinePlayerAIControllerClass;//[Offset: 0xe8, Size: 0x8]
	SolarGameMode* GameModeOwner;//[Offset: 0xf0, Size: 0x8]
	bool bEnableIrisAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bEnableMLSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	bool bPreserveBotOnMatchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1]
	class SolarBotAITeamManager* BotTeamManagerClass;//[Offset: 0x100, Size: 0x8]
	class SolarPreservedBotManager* BotPreservedManagerClass;//[Offset: 0x108, Size: 0x8]
	class SolarBotAIWarmServiceSystem* BotWarmServiceSystemClass;//[Offset: 0x110, Size: 0x8]
	class SolarBotTimelineSystem* BotTimelineSystemClass;//[Offset: 0x118, Size: 0x8]
	int MaxNumPreservedBots;//[Offset: 0x120, Size: 0x4]
	float MaxRatioPreservedBots;//[Offset: 0x124, Size: 0x4]
	SolarBotAITeamManager* BotTeamManager;//[Offset: 0x138, Size: 0x8]
	SolarPreservedBotManager* BotPreservedManager;//[Offset: 0x140, Size: 0x8]
	SolarBotAIWarmServiceSystem* BotWarmServiceSystem;//[Offset: 0x148, Size: 0x8]
	SolarBotTimelineSystem* BotTimelineSystem;//[Offset: 0x150, Size: 0x8]
	bool bInitBotByTeamPreset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	bool bCanBotTeamRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	bool bCanPlayerTeamRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 0x1]
	bool bCanBotTeamBuyRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 0x1]
	bool bCanPlayerTeamBuyRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]
	bool PreserveBot(SolarBotAIController* InBotController, out const Vector InPreservedLocation);// 0x421023bfa041
	bool PopPreservedBot(out SolarBotAIController* OutController, out const Vector OutTeleportLocation, SolarBotAIController* InSpecificController);// 0x420f23bfa041
	void OnAcquiredIrisAIFeedStrategy(out const FeedBotStrategyInfo[] StrategyInfos);// 0x420e23bfa041
	void GetDeathBoxExtraStuff(SolarPlayerState* BotState, SolarPlayerState* PlayerState, out <int,int> Stuff);// 0x420d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotAITeamManager.Object
	float UpdateInterval;//[Offset: 0x28, Size: 0x4]
	float DefaultSeparateDistance;//[Offset: 0x2c, Size: 0x4]
	float DefaultReturnDistance;//[Offset: 0x30, Size: 0x4]
	class SolarBotTeamVisualizer* DebugVisualizerClass;//[Offset: 0x90, Size: 0x8]
	SolarBotTeamVisualizer* DebugVisualizer;//[Offset: 0x98, Size: 0x8]
	DataTable* GlobalGameTeamConfigs;//[Offset: 0xa0, Size: 0x8]
	<SolarCharacter*,SolarBotAIController*> AllocatedCharacters;//[Offset: 0xa8, Size: 0x50]
	SolarCharacter*[] AbandonedCharacters;//[Offset: 0xf8, Size: 0x10]
	<enum,BotEmojiSetting> EmojiTaskSettings;//[Offset: 0x108, Size: 0x50]
	<int,enum> ResponseToVoiceType;//[Offset: 0x158, Size: 0x50]
	<enum,enum> ResponseToMarkType;//[Offset: 0x1a8, Size: 0x50]
	<enum,BotResponseSetting> ResponseTaskSettings;//[Offset: 0x1f8, Size: 0x50]
	void UpdateAllocatedList(SolarBotAIController* InController, out const SolarCharacter*[] AliveCharacterArray);// 0x4adb23bfa041
	bool TryCancelCurrentRescueTarget(SolarBotAIController* InController, const SolarCharacter* CancelledCharacter);// 0x4ada23bfa041
	bool ShouldTeamActivate(out const SolarBotTeamInfo BotInfo);// 0x4ad923bfa041
	void SetTeamBlackboardValueAsVector(int TeamID, out const FName KeyName, Vector VectorValue, enum InBotState, bool bSkipIndependent);// 0x4ad823bfa041
	void SetTeamBlackboardValueAsString(int TeamID, out const FName KeyName, FString StringValue, enum InBotState, bool bSkipIndependent);// 0x4ad723bfa041
	void SetTeamBlackboardValueAsRotator(int TeamID, out const FName KeyName, Rotator VectorValue, enum InBotState, bool bSkipIndependent);// 0x4ad623bfa041
	void SetTeamBlackboardValueAsObject(int TeamID, out const FName KeyName, Object* ObjectValue, enum InBotState, bool bSkipIndependent);// 0x4ad523bfa041
	void SetTeamBlackboardValueAsName(int TeamID, out const FName KeyName, FName NameValue, enum InBotState, bool bSkipIndependent);// 0x4ad423bfa041
	void SetTeamBlackboardValueAsInt(int TeamID, out const FName KeyName, int IntValue, enum InBotState, bool bSkipIndependent);// 0x4ad323bfa041
	void SetTeamBlackboardValueAsFloat(int TeamID, out const FName KeyName, float FloatValue, enum InBotState, bool bSkipIndependent);// 0x4ad223bfa041
	void SetTeamBlackboardValueAsEnum(int TeamID, out const FName KeyName, byte EnumValue, enum InBotState, bool bSkipIndependent);// 0x4ad123bfa041
	void SetTeamBlackboardValueAsClass(int TeamID, out const FName KeyName, class Object ClassValue, enum InBotState, bool bSkipIndependent);// 0x4ad023bfa041
	void SetTeamBlackboardValueAsBool(int TeamID, out const FName KeyName, bool BoolValue, enum InBotState, bool bSkipIndependent);// 0x4acf23bfa041
	void SetBotDropOut(const SolarBotAIController* InController, bool bDropOut);// 0x4ace23bfa041
	void OnTeamDeactive(out const SolarBotTeamInfo TeamInfo);// 0x4acd23bfa041
	void OnTeamActivate(out const SolarBotTeamInfo TeamInfo);// 0x4acc23bfa041
	void OnBotUnRegister(out const SolarBotMemberInfo BotInfo);// 0x4acb23bfa041
	void OnBotStateChanged(out const SolarBotMemberInfo BotInfo, enum OldState);// 0x4aca23bfa041
	void OnBotRegister(out const SolarBotMemberInfo BotInfo);// 0x4ac923bfa041
	bool IsValidTeamID(int InTeamId);// 0x4ac823bfa041
	bool IsTeamLeader(const SolarBotAIController* InController);// 0x4ac723bfa041
	bool IsIndependent(const SolarBotAIController* InController);// 0x4ac623bfa041
	bool GetTeamPlayerInfo(const SolarBotAIController* InController, out SolarCharacter*[] PlayerArray);// 0x4ac523bfa041
	bool GetRescueInfo(SolarBotAIController* InController, out SolarCharacter*[] DyingPlayerArray, out SolarCharacter*[] DeadPlayerArray, out SolarCharacter*[] DyingBotArray, out SolarCharacter*[] DeadBotArray);// 0x4ac423bfa041
	bool GetBotTeamInfo(const SolarBotAIController* InController, out SolarBotTeamInfo OutTeamInfo);// 0x4ac323bfa041
	bool GetBotMemberInfo(const SolarBotAIController* InController, out SolarBotMemberInfo OutMemberInfo);// 0x4ac223bfa041
	SolarBotAITeamManager* Get(const Object* Context);// 0x4ac123bfa041
	bool CheckBotTeamState(const SolarBotAIController* InController, enum MemberState);// 0x4ac023bfa041
	Vector CalculateTeamPosition(out const SolarBotTeamInfo TeamInfo);// 0x4abf23bfa041
	bool AllocatedRescueTarget(SolarBotAIController* InController, SolarCharacter* RescuedCharacter);// 0x4abe23bfa041
	void AbandonedCurrentRescueTarget(SolarBotAIController* InController, SolarCharacter* AbandonedCharacter);// 0x4abd23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotTeamVisualizer.Info.Actor.Object
	Color[] DrawDebugColors;//[Offset: 0x228, Size: 0x10]
	Font* TextFont;//[Offset: 0x238, Size: 0x8]
	BotTeamDebugInfo[] BotTeamDebugInfos;//[Offset: 0x240, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BotTeamDebugInfo
	int TeamID;//[Offset: 0x0, Size: 0x4]
	BotMemberDebugInfo[] MemberDebugInfos;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BotMemberDebugInfo
	Vector MemberLocation;//[Offset: 0x0, Size: 0xc]
	FString IDStr;//[Offset: 0x10, Size: 0x10]
	enum MemberState;//[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BotEmojiSetting
	<int,float> EmojiPool;//[Offset: 0x0, Size: 0x50]
	GameplayTagContainer TagsRequested;//[Offset: 0x50, Size: 0x20]
	float PersonalCD;//[Offset: 0x70, Size: 0x4]
	float TeamCD;//[Offset: 0x74, Size: 0x4]
	float MinTimeDelay;//[Offset: 0x78, Size: 0x4]
	float MaxTimeDelay;//[Offset: 0x7c, Size: 0x4]
	float TriggeredProbability;//[Offset: 0x80, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BotResponseSetting
	float PersonalCD;//[Offset: 0x0, Size: 0x4]
	float TeamCD;//[Offset: 0x4, Size: 0x4]
	float MinTimeDelay;//[Offset: 0x8, Size: 0x4]
	float MaxTimeDelay;//[Offset: 0xc, Size: 0x4]
	float TriggeredProbability;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotTeamInfo
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int TeamID;//[Offset: 0x4, Size: 0x4]
	Vector TeamPosition;//[Offset: 0x8, Size: 0xc]
	float SeparateDistance;//[Offset: 0x14, Size: 0x4]
	float ReturnDistance;//[Offset: 0x18, Size: 0x4]
	bool bPlayerNeedPraise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bHasInitByTeamConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	SolarBotMemberInfo[] MemberInfos;//[Offset: 0x20, Size: 0x10]
	<enum,float> TeamEmojiTimeStamp;//[Offset: 0x30, Size: 0x50]
	<enum,float> TeamResponseTimeStamp;//[Offset: 0x80, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotMemberInfo
	SolarBotAIController* BotController;//[Offset: 0x0, Size: 0x8]
	enum MemberState;//[Offset: 0x8, Size: 0x1]
	enum[] PreferPickHeroTypes;//[Offset: 0x10, Size: 0x10]
	<enum,float> MemberEmojiTimeStamp;//[Offset: 0x20, Size: 0x50]
	<enum,float> MemberResponseTimeStamp;//[Offset: 0x70, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: FeedBotStrategyInfo
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	float FeedPriority;//[Offset: 0x10, Size: 0x4]
	float Difficulty;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPreservedBotManager.Object
	<int,Vector> SilenceLocationInDiffMap;//[Offset: 0x88, Size: 0x50]
	float MinDetectDistance;//[Offset: 0xdc, Size: 0x4]
	SolarPreservedBotPopTask*[] PopTasks;//[Offset: 0x100, Size: 0x10]
	EQSParametrizedQueryExecutionRequest DefaultPopQuery;//[Offset: 0x110, Size: 0x48]
	<enum,EQSParametrizedQueryExecutionRequest> PopQueryMap;//[Offset: 0x158, Size: 0x50]
	EnvQuery* SeparateQuery;//[Offset: 0x1a8, Size: 0x8]
	byte SeparateEQSRunMode;//[Offset: 0x1b0, Size: 0x1]
	SolarBotTimelineAIItemSetting DefaultItemTemplate;//[Offset: 0x1b8, Size: 0xf0]
	float TimeBetweenDyingAndDead;//[Offset: 0x2a8, Size: 0x4]
	delegate OnSendBotsSuccess;//[Offset: 0x2b8, Size: 0x10]
	delegate OnSendBotsFail;//[Offset: 0x2c8, Size: 0x10]
	void TryUpdateEquipment(const Object* Context, out const SolarBotTimelineAIItemSetting ItemSetting);// 0x522c23bfa041
	bool TryPopBotByNum(const Object* Context, int PopNum, out const PopParameter InPopParam);// 0x522b23bfa041
	void TryPopAllBotByGuarantee(const Object* Context, out const Vector PopLocation);// 0x522a23bfa041
	void TryPopAllBot(const Object* Context, out const PopParameter InPopParam);// 0x522923bfa041
	void TryKillOneBot();// 0x522823bfa041
	void TryAddPreservedBot(SolarPlayerState* InBot, const float DelayTime);// 0x522723bfa041
	void OnPopSingleBotSuccess(SolarPreservedBotPopTask* InTask);// 0x522623bfa041
	void OnPopBotsFinished(SolarPreservedBotPopTask* InTask);// 0x522523bfa041
	void OnGetFinalTeleportLocSuccess(SolarPreservedBotPopTask* InTask, SolarPlayerState* BotPS, out const Vector TeleportLoc);// 0x522423bfa041
	void OnGetFinalTeleportLocFail(SolarPreservedBotPopTask* InTask, SolarPlayerState* BotPS);// 0x522323bfa041
	void OnCharacterDeath(const SolarPlayerController* InPlayer);// 0x522223bfa041
	void InitBotPreservedManager(byte InActivePlayerNum, int GameModeId);// 0x522123bfa041
	SolarPreservedBotManager* Get(const Object* Context);// 0x522023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPreservedBotPopTask.Object
	int CurrentTaskID;//[Offset: 0x28, Size: 0x4]
	Vector[] PickedTeleportCenters;//[Offset: 0x40, Size: 0x10]
	SolarPlayerState*[] FailedBots;//[Offset: 0x50, Size: 0x10]
	SolarBotAIController*[] PendingSeparateBots;//[Offset: 0x60, Size: 0x10]
	delegate OnGetTeleportLocationSuccess;//[Offset: 0x70, Size: 0x10]
	delegate OnPopBotsFinished;//[Offset: 0x80, Size: 0x10]
	delegate OnGetFinalTeleportLocSuccess;//[Offset: 0x90, Size: 0x10]
	delegate OnGetFinalTeleportLocFail;//[Offset: 0xa0, Size: 0x10]
	Vector GetWarmTargetLocation();// 0x522d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: EQSParametrizedQueryExecutionRequest
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 0x8]
	AIDynamicParam[] QueryConfig;//[Offset: 0x8, Size: 0x10]
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x18, Size: 0x28]
	byte RunMode;//[Offset: 0x40, Size: 0x1]
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	float Value;//[Offset: 0xc, Size: 0x4]
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10]
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8]
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8]
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1]
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotTimelineAIItemSetting
	<enum,SolarBotTimelineEquipmentArray> Equipment;//[Offset: 0x0, Size: 0x50]
	<int,IntPoint> Consumable;//[Offset: 0x50, Size: 0x50]
	<enum,SolarBotTimelineEquipmentArray> WeaponPart;//[Offset: 0xa0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotTimelineEquipmentArray
	<int,int> IDArray;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: PopParameter
	SolarPlayerState*[] WarmTargets;//[Offset: 0x0, Size: 0x10]
	Vector PopLocation;//[Offset: 0x10, Size: 0xc]
	TraceRecord[] TargetTraces;//[Offset: 0x20, Size: 0x10]
	EnvQuery* TeleportLocEQS;//[Offset: 0x30, Size: 0x8]
	byte TeleportLocEQSRunMode;//[Offset: 0x38, Size: 0x1]
	bool bForcePop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TraceRecord
	Vector[] TargetTrace;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotAIWarmServiceSystem.Object
	<SolarPlayerState*,WarmTargetState> WarmTargets;//[Offset: 0x28, Size: 0x50]
	TimeItemsSetting[] ItemsByTime;//[Offset: 0x78, Size: 0x10]
	float TriggerWarmServiceValue;//[Offset: 0x8c, Size: 0x4]
	float MaxGroupDistance;//[Offset: 0x90, Size: 0x4]
	byte MaxServiceBot;//[Offset: 0x94, Size: 0x1]
	int TraceRecordLength;//[Offset: 0x98, Size: 0x4]
	float TraceRecordInterval;//[Offset: 0xa8, Size: 0x4]
	float UpdateInterval;//[Offset: 0xb8, Size: 0x4]
	EnvQuery* TeleportLocEQS;//[Offset: 0xc0, Size: 0x8]
	byte TeleportLocEQSRunMode;//[Offset: 0xc8, Size: 0x1]
	int PopAllTriggerPlayerNum;//[Offset: 0xcc, Size: 0x4]
	int PopAllTriggerTime;//[Offset: 0xd0, Size: 0x4]
	EnvQuery* PopAllBotEQS;//[Offset: 0xd8, Size: 0x8]
	byte PopAllBotEQSRunMode;//[Offset: 0xe0, Size: 0x1]
	float RewardScore;//[Offset: 0xe4, Size: 0x4]
	byte MaxNumFishingBot;//[Offset: 0xe8, Size: 0x1]
	byte NumPlayerKillThreshold;//[Offset: 0xe9, Size: 0x1]
	byte NumRealPlayerKillThreshold;//[Offset: 0xea, Size: 0x1]
	EnvQuery* FishingTeleportEQS;//[Offset: 0xf0, Size: 0x8]
	byte FishingTeleportEQSRunMode;//[Offset: 0xf8, Size: 0x1]
	class GameplayEffect* FishingInvisibleEffectClass;//[Offset: 0x100, Size: 0x8]
	int FishingBotCharacterID;//[Offset: 0x108, Size: 0x4]
	int FishingBotSkinID;//[Offset: 0x10c, Size: 0x4]
	int[] FilterDamageWeaponIDs;//[Offset: 0x110, Size: 0x10]
	int[] FilterDamageVehicleIDs;//[Offset: 0x120, Size: 0x10]
	bool bCheckAccidentHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	float LimitAccidentAngle;//[Offset: 0x134, Size: 0x4]
	byte ExReportMinAimbotThreshold;//[Offset: 0x138, Size: 0x1]
	byte ExReportMinBiteThreshold;//[Offset: 0x139, Size: 0x1]
	SolarPlayerState*[] SuspiciousPlayers;//[Offset: 0x140, Size: 0x10]
	SolarPlayerState*[] FishingBots;//[Offset: 0x150, Size: 0x10]
	void UpdateWarmTargetStateByEvent(const SolarPlayerState* InPS, const enum InEventType);// 0x4aec23bfa041
	void StartPlayerWarmService(SolarPlayerState* InPS);// 0x4aeb23bfa041
	void RecordWarmTargetKDAState(const SolarPlayerState* InPS, const SolarPlayerState* KilledPC);// 0x4aea23bfa041
	void OnRequestWarmServiceSuccess(out const SolarPlayerState*[] PlayerArray);// 0x4ae923bfa041
	void OnRequestWarmServiceFail(out const SolarPlayerState*[] PlayerArray);// 0x4ae823bfa041
	void OnPopBotForFishing(SolarPreservedBotPopTask* InTask, SolarPlayerState* BotPS, out const Vector TeleportLoc);// 0x4ae723bfa041
	float GetWarmScoreByEvent(const SolarPlayerState* InPS, const enum InEventType);// 0x4ae623bfa041
	float GetTimeOutBattle(const SolarPlayerState* InPS);// 0x4ae523bfa041
	float GetTimeBeforeOutPoisonCirecle(const SolarPlayerState* InPS);// 0x4ae423bfa041
	float GetTargetTickValue(const SolarPlayerState* InPS, out const WarmTargetState InState);// 0x4ae323bfa041
	float GetLastBattleMVPScore(const SolarPlayerState* InPS);// 0x4ae223bfa041
	byte GetKilledPlayerNum(const SolarPlayerState* InPS);// 0x4ae123bfa041
	byte GetKilledBotNum(const SolarPlayerState* InPS);// 0x4ae023bfa041
	float GetFrustrationValue(const SolarPlayerState* InPS);// 0x4adf23bfa041
	byte GetEnemyNumInRange(const SolarPlayerState* InPS, float RangeRadius);// 0x4ade23bfa041
	int GetActivePlayerNumBP(const int PlayerNum, const int PlayerTeamNum);// 0x4add23bfa041
	SolarBotAIWarmServiceSystem* Get(const Object* Context);// 0x4adc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WarmTargetState
	float BoringValue;//[Offset: 0x0, Size: 0x4]
	int ServedTimes;//[Offset: 0x4, Size: 0x4]
	bool bNeedWarmService;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	byte KillPlayerNum;//[Offset: 0x9, Size: 0x1]
	byte KillBotNum;//[Offset: 0xa, Size: 0x1]
	float LastBattleTime;//[Offset: 0xc, Size: 0x4]
	int CurTraceRecordIdx;//[Offset: 0x10, Size: 0x4]
	Vector[] TraceRecords;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TimeItemsSetting
	float TriggerTime;//[Offset: 0x0, Size: 0x4]
	SolarBotTimelineAIItemSetting Items;//[Offset: 0x8, Size: 0xf0]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBotTimelineSystem.Object
	DataTable* GlobalTimelineSettings;//[Offset: 0x28, Size: 0x8]
	float UpdateInterval;//[Offset: 0x30, Size: 0x4]
	bool bUsePlayerLandTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bEnableFinalDownsize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float FinalDownsizeDuration;//[Offset: 0x38, Size: 0x4]
	DataTable* CurrentActionTimelineTable;//[Offset: 0x40, Size: 0x8]
	DataTable* CurrentUpdateItemTimelineTable;//[Offset: 0x48, Size: 0x8]
	DataTable* CurrentDownsizeTimelineTable;//[Offset: 0x50, Size: 0x8]
	SolarPlayerState*[] DirtyBots;//[Offset: 0x168, Size: 0x10]
	void InitTimeline();// 0x4af023bfa041
	SolarBotTimelineSystem* Get(const Object* Context);// 0x4aef23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarFlyTrail.Actor.Object
	SolarTrailProxyComponent*[] CachedProxyComponents;//[Offset: 0x228, Size: 0x10]
	SoftObjectPath TrailEffectClass;//[Offset: 0x238, Size: 0x18]
	class SolarTrailEffect* FallbackTrailEffectClass;//[Offset: 0x250, Size: 0x28]
	class Object* CachedTrailEffectClass;//[Offset: 0x278, Size: 0x8]
	CharacterSkydiveTrailStaticInfoContainer SkydiveTrailStaticInfo;//[Offset: 0x2d0, Size: 0x120]
	PackedSkydiveTrailFrameInfoContainer SkydiveTrailFrameInfo;//[Offset: 0x3f0, Size: 0x120]
	class SkydiveTrailEffect* SkydiveTrailEffectClass;//[Offset: 0x510, Size: 0x8]
	<SolarPlayerState*,CharacterSkydiveTrailData> SkydiveTrailData;//[Offset: 0x518, Size: 0x50]
	SolarPlayerState* LocalPlayerSkydiveTrailProxy;//[Offset: 0x568, Size: 0x8]
	void OnRep_TrailEffectClass();// 0x4cdd23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTrailProxyComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* PlayerBeingTracked;//[Offset: 0x314, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTrailEffect.Actor.Object
	void OnFinished();// 0x4cd723bfa041
	Transform GetTrackingTransform(const SolarCharacter* Character);// 0x4cd623bfa041
	void AttachToCharacter(const SolarCharacter* Character);// 0x4cd523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterSkydiveTrailStaticInfoContainer.FastArraySerializer
	CharacterSkydiveTrailStaticInfo[] InfoArray;//[Offset: 0x108, Size: 0x10]
	SolarFlyTrail* Owner;//[Offset: 0x118, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterSkydiveTrailStaticInfo.FastArraySerializerItem
	FString CharacterId;//[Offset: 0x10, Size: 0x10]
	SolarPlayerState* PlayerState;//[Offset: 0x20, Size: 0x8]
	FString TrailAssemblingId;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PackedSkydiveTrailFrameInfoContainer.FastArraySerializer
	PackedSkydiveTrailFrameInfo[] InfoArray;//[Offset: 0x108, Size: 0x10]
	SolarFlyTrail* Owner;//[Offset: 0x118, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PackedSkydiveTrailFrameInfo.FastArraySerializerItem
	float Timestamp;//[Offset: 0xc, Size: 0x4]
	SkydiveTrailFrameInfo[] FrameInfos;//[Offset: 0x10, Size: 0x10]
	SolarPlayerState*[] FinishedPlayerStates;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkydiveTrailFrameInfo
	FString CharacterId;//[Offset: 0x0, Size: 0x10]
	SolarPlayerState* OwnerPlayerState;//[Offset: 0x10, Size: 0x8]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	Vector Velocity;//[Offset: 0x30, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: SkydiveTrailEffect.Actor.Object
	SolarFlyTrail* FlyTrailManager;//[Offset: 0x228, Size: 0x8]
	void UpdateTrailEffect(const float CurrentTime);// 0x4cdc23bfa041
	void OnTrailFinish();// 0x4cdb23bfa041
	void InitEffectAppearance(bool IsDefender, bool IsSameTeamWithLocalPlayer);// 0x4cda23bfa041
	void InitAppearanceByPlayerState(const SolarPlayerState* PlayerState);// 0x4cd923bfa041
	void AddTrailPoint(float Timestamp, out const Vector Location, out const Rotator Rotation, out const Vector Velocity);// 0x4cd823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterSkydiveTrailData
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerStatisticsData.Object
	delegate OnPlayerStatDataUpdate;//[Offset: 0x28, Size: 0x10]
	delegate OnIncreaseWeaponKillNum;//[Offset: 0x38, Size: 0x10]
	Vector GetValue_Vector(enum InType);// 0x4d4a23bfa041
	void GetValue_MapKeyWithValueInt(enum InType, out int[] OutValue);// 0x4d4923bfa041
	void GetValue_MapKeyWithValueFloat(enum InType, out int[] OutValue);// 0x4d4823bfa041
	int GetValue_IntFromMap(enum InType, int IntKey);// 0x4d4723bfa041
	void GetValue_IntArray(enum InType, out int[] OutResult);// 0x4d4623bfa041
	int GetValue_Int(enum InType);// 0x4d4523bfa041
	float GetValue_FloatFromMap(enum InType, int IntKey, bool Floor);// 0x4d4423bfa041
	void GetValue_FloatArray(enum InType, out float[] OutResult);// 0x4d4323bfa041
	float GetValue_Float(enum InType, bool Floor);// 0x4d4223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SpatializeInfoTrack.SpatializeInfo.Info.Actor.Object
	TrackArray TrackArray;//[Offset: 0x230, Size: 0x130]
	float Timeout;//[Offset: 0x3ec, Size: 0x4]
	float MinRevealDistance;//[Offset: 0x3f0, Size: 0x4]
	int MaxTrackNum;//[Offset: 0x3f4, Size: 0x4]
	<TrackItem,3DMeshWidgetTrack*> CurTrackWidgets;//[Offset: 0x3f8, Size: 0x50]
	void UpdateWidgets(bool bFromNetUpdate);// 0x5ab523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SpatializeInfo.Info.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: TrackArray.FastArraySerializer
	TrackItem[] Tracks;//[Offset: 0x108, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TrackItem.SpatializeItem.FastArraySerializerItem
	float Time;//[Offset: 0x18, Size: 0x4]
	FString PID;//[Offset: 0x20, Size: 0x10]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bProjected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	Vector FloorLocation;//[Offset: 0x34, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: SpatializeItem.FastArraySerializerItem
	Vector Location;//[Offset: 0xc, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: 3DMeshWidgetTrack.3DMeshWidget.Actor.Object
	Vector BoxHalfExtent;//[Offset: 0x240, Size: 0xc]
	float PlayerNearbyAlpha;//[Offset: 0x24c, Size: 0x4]
	bool bDebugCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	FName MaterialAlphaParamName;//[Offset: 0x254, Size: 0x8]
	FName MaterialCountDownName;//[Offset: 0x25c, Size: 0x8]
	float MaxTraceDist;//[Offset: 0x264, Size: 0x4]
	float DistFromGround;//[Offset: 0x268, Size: 0x4]
	StaticMeshComponent* StaticMeshCountDown;//[Offset: 0x270, Size: 0x8]
	TextRenderComponent* DistTextComp;//[Offset: 0x278, Size: 0x8]
	MaterialInstanceDynamic* DynamicMaterialIcon;//[Offset: 0x280, Size: 0x8]
	MaterialInstanceDynamic* DynamicMaterialCountDown;//[Offset: 0x288, Size: 0x8]
	MaterialInstanceDynamic* DynamicMaterialDistText;//[Offset: 0x290, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: 3DMeshWidget.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x230, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x540, Size: 0x18]
	MaterialInterface* TextMaterial;//[Offset: 0x558, Size: 0x8]
	bool bFullyExpandedUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	Font* Font;//[Offset: 0x568, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x570, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x571, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x574, Size: 0x4]
	float XScale;//[Offset: 0x578, Size: 0x4]
	float YScale;//[Offset: 0x57c, Size: 0x4]
	float WorldSize;//[Offset: 0x580, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x584, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x588, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x58c, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x590, Size: 0x1]
	void SetYScale(float Value);// 0x678d23bfa041
	void SetXScale(float Value);// 0x678c23bfa041
	void SetWorldSize(float Value);// 0x678b23bfa041
	void SetVertSpacingAdjust(float Value);// 0x678a23bfa041
	void SetVerticalAlignment(byte Value);// 0x678923bfa041
	void SetTextRenderColor(Color Value);// 0x678823bfa041
	void SetTextMaterial(MaterialInterface* Material);// 0x678723bfa041
	void SetText(FString Value);// 0x678623bfa041
	void SetHorizSpacingAdjust(float Value);// 0x678523bfa041
	void SetHorizontalAlignment(byte Value);// 0x678423bfa041
	void SetFont(Font* Value);// 0x678323bfa041
	void K2_SetText(out const FText Value);// 0x678223bfa041
	Vector GetTextWorldSize();// 0x678123bfa041
	Vector GetTextLocalSize();// 0x678023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBattleWeaponData
	int weaponid;//[Offset: 0x0, Size: 0x4]
	int SkinId;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: HeroPickInfo.Info.Actor.Object
	FString SideName;//[Offset: 0x228, Size: 0x10]
	enum HeroPickType;//[Offset: 0x238, Size: 0x1]
	int TeammateNumMode;//[Offset: 0x23c, Size: 0x4]
	HeroPickWidget* HeroPickWidget;//[Offset: 0x240, Size: 0x8]
	PlayerSelectInfo[] PlayerSelectInfos;//[Offset: 0x248, Size: 0x10]
	float HeroPickTime;//[Offset: 0x258, Size: 0x4]
	float WaitingToStartTime;//[Offset: 0x260, Size: 0x4]
	int CurrentPickPlayerIndex;//[Offset: 0x264, Size: 0x4]
	float Duration;//[Offset: 0x268, Size: 0x4]
	void OnRep_WaitingToStartTime();// 0x443b23bfa041
	void OnRep_SelectPlayerChange();// 0x443a23bfa041
	void OnRep_PlayerSelectInfos();// 0x443923bfa041
	void OnRep_HeroPickTime();// 0x443823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: HeroPickWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	HeroPickInfo* PickInfo;//[Offset: 0x350, Size: 0x8]
	TileView* CharacterList;//[Offset: 0x358, Size: 0x8]
	HeroPickPlayerSlot*[] PlayerSlots;//[Offset: 0x360, Size: 0x10]
	<int,HeroPickCharacterData*> SelectDataMap;//[Offset: 0x370, Size: 0x50]
	HeroPickDetail* UI_HeroPick_Detail;//[Offset: 0x3d8, Size: 0x8]
	int CurrentSelectCharacterID;//[Offset: 0x3e0, Size: 0x4]
	bool Enable3DLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 0x1]
	void ShowPlayerConfirm(int Pos);// 0x445923bfa041
	void ShowMyTurn(bool bShow);// 0x445823bfa041
	void ShowMainUICharacter(bool bShow);// 0x445723bfa041
	void SetMidCharacterNameAndIcon(int InCharacterId, int SkinId);// 0x445623bfa041
	void SetHeroHPAndSpeed(const int HP, const int Speed);// 0x445523bfa041
	void SetHeroFeatures(out const int[] InHeroFeatures);// 0x445423bfa041
	void SetCountDowText(FString Text);// 0x445323bfa041
	void SetClassNameAndIcon(FString ClassName, out const Texture2D* ClassIcon);// 0x445223bfa041
	void SetCharacterNameAndIcon(FString Name, FString SkinName, out const Texture2D* CharacterIcon);// 0x445123bfa041
	void RefreshTacticalSkillIcon(out const Texture2D* TacticalSkillIcon);// 0x445023bfa041
	void RefreshSuperSkillIcon(out const Texture2D* SuperSkillIcon);// 0x444f23bfa041
	void RefreshPassiveSKillIcon(out const Texture2D* PassiveSkillIcon);// 0x444e23bfa041
	void PlayCharacterConfirmVoice(int SkinId);// 0x444d23bfa041
	int GetTeammateNumMode();// 0x444c23bfa041
	void Enable3DHeroPickLayout(bool Enalbe3DLayout);// 0x444b23bfa041
	void Display3DHeroSelectedAnim(int CharacterId, int SkinId, bool IsConfirm);// 0x444a23bfa041
	void ConfirmSelect();// 0x444923bfa041
	void BP_OnSelfConfirmSelected();// 0x444823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0x94c, Size: 0x4]
	float EntryWidth;//[Offset: 0x950, Size: 0x4]
	enum TileAlignment;//[Offset: 0x954, Size: 0x1]
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x955, Size: 0x1]
	void SetEntryWidth(float NewWidth);// 0x3c6a23bfa041
	void SetEntryHeight(float NewHeight);// 0x3c6923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ListView.ListViewBase.Widget.Visual.Object
	byte Orientation;//[Offset: 0x888, Size: 0x1]
	byte SelectionMode;//[Offset: 0x889, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0x88a, Size: 0x1]
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88b, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c, Size: 0x1]
	float EntrySpacing;//[Offset: 0x890, Size: 0x4]
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 0x1]
	float ListItemStartPosOffset;//[Offset: 0x898, Size: 0x4]
	Object*[] ListItems;//[Offset: 0x8a0, Size: 0x10]
	bool EnableDelayAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 0x1]
	float DelayAddInterval;//[Offset: 0x8c4, Size: 0x4]
	int NumInPanel;//[Offset: 0x8c8, Size: 0x4]
	Object*[] DelayAddedListItems;//[Offset: 0x8d0, Size: 0x10]
	bool DelayAddAnimFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 0x1]
	delegate BP_OnEntryInitialized;//[Offset: 0x8e8, Size: 0x10]
	delegate BP_OnItemClicked;//[Offset: 0x8f8, Size: 0x10]
	delegate BP_OnItemDoubleClicked;//[Offset: 0x908, Size: 0x10]
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0x918, Size: 0x10]
	delegate BP_OnItemSelectionChanged;//[Offset: 0x928, Size: 0x10]
	delegate BP_OnItemScrolledIntoView;//[Offset: 0x938, Size: 0x10]
	void SetSelectionMode(byte SelectionMode);// 0x3c4523bfa041
	void SetSelectedIndex(int Index);// 0x3c4423bfa041
	void ScrollIndexIntoView(int Index);// 0x3c4323bfa041
	void RemoveItem(Object* Item);// 0x3c4223bfa041
	void NavigateToIndex(int Index);// 0x3c4123bfa041
	bool IsRefreshPending();// 0x3c4023bfa041
	int GetNumItems();// 0x3c3f23bfa041
	Object*[] GetListItems();// 0x3c3e23bfa041
	Object* GetItemAt(int Index);// 0x3c3d23bfa041
	int GetIndexForItem(Object* Item);// 0x3c3c23bfa041
	Object*[] GetDelayAddedListItems();// 0x3c3b23bfa041
	void ClearListItems();// 0x3c3a23bfa041
	void BP_SetSelectedItem(Object* Item);// 0x3c3923bfa041
	void BP_SetListItems(out const Object*[] InListItems);// 0x3c3823bfa041
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x3c3723bfa041
	void BP_SetDelayAddListItems(out const Object*[] InListItems);// 0x3c3623bfa041
	void BP_ScrollItemIntoView(Object* Item);// 0x3c3523bfa041
	void BP_NavigateToItem(Object* Item);// 0x3c3423bfa041
	bool BP_IsItemVisible(Object* Item);// 0x3c3323bfa041
	bool BP_GetSelectedItems(out Object*[] Items);// 0x3c3223bfa041
	Object* BP_GetSelectedItem();// 0x3c3123bfa041
	int BP_GetNumItemsSelected();// 0x3c3023bfa041
	void BP_DoDelayAddTick(float DeltaTime);// 0x3c2f23bfa041
	void BP_ClearSelection();// 0x3c2e23bfa041
	void BP_CancelScrollIntoView();// 0x3c2d23bfa041
	void AddItem(Object* Item);// 0x3c2c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x138, Size: 0x8]
	float WheelScrollMultiplier;//[Offset: 0x140, Size: 0x4]
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	bool bClampScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 0x1]
	bool bDisableScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 0x1]
	float FixedLineScrollOffset;//[Offset: 0x148, Size: 0x4]
	delegate BP_OnEntryGenerated;//[Offset: 0x150, Size: 0x10]
	delegate BP_OnEntryReleased;//[Offset: 0x160, Size: 0x10]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x170, Size: 0x80]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x1f0, Size: 0x560]
	enum ScrollBarVisibility;//[Offset: 0x750, Size: 0x1]
	Vector2D ScrollbarThickness;//[Offset: 0x754, Size: 0x8]
	Margin ScrollbarPadding;//[Offset: 0x75c, Size: 0x10]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 0x1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76d, Size: 0x1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x3c2b23bfa041
	void SetScrollOffset(const float InScrollOffset);// 0x3c2a23bfa041
	void SetScrollBarVisibility(enum InVisibility);// 0x3c2923bfa041
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x3c2823bfa041
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x3c2723bfa041
	void SetEnableScrollAnimation(bool bNewEnableScrollAnimation);// 0x3c2623bfa041
	void SetDisableScroll(bool bInDisableScroll);// 0x3c2523bfa041
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x3c2423bfa041
	void ScrollToTop();// 0x3c2323bfa041
	void ScrollToBottom();// 0x3c2223bfa041
	void RequestRefresh();// 0x3c2123bfa041
	void RegenerateAllEntries();// 0x3c2023bfa041
	float GetScrollOffset();// 0x3c1f23bfa041
	UserWidget*[] GetDisplayedEntryWidgets();// 0x3c1e23bfa041
	bool GetDisableScroll();// 0x3c1d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x98]
	SlateBrush VerticalBackgroundImage;//[Offset: 0xa0, Size: 0x98]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x138, Size: 0x98]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1d0, Size: 0x98]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x268, Size: 0x98]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x300, Size: 0x98]
	SlateBrush NormalThumbImage;//[Offset: 0x398, Size: 0x98]
	SlateBrush HoveredThumbImage;//[Offset: 0x430, Size: 0x98]
	SlateBrush DraggedThumbImage;//[Offset: 0x4c8, Size: 0x98]
<----------Generated by SSpawner v1.0.2---------->


Class: HeroPickPlayerSlot.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum UiState;//[Offset: 0x350, Size: 0x1]
	void UpdateSelectPercent(float Percent);// 0x444723bfa041
	void UpdateIconAndName(FString HeroName, int HeroExpLevel, out const Texture2D* IconPath);// 0x444623bfa041
	void ShowConfirm();// 0x444523bfa041
	void SetPlayerPos(FString playerName, const byte InPosInTeam);// 0x444423bfa041
	void ChangeUIStage(enum State);// 0x444323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: HeroPickCharacterData.Object
	int CharacterId;//[Offset: 0x28, Size: 0x4]
	int SkinId;//[Offset: 0x2c, Size: 0x4]
	int CharacterProficiencyLevel;//[Offset: 0x30, Size: 0x4]
	enum OwnType;//[Offset: 0x3c, Size: 0x1]
	int ConfigSortNum;//[Offset: 0x40, Size: 0x4]
	FString HeroName;//[Offset: 0x48, Size: 0x10]
	int[] SelectedPlayerPos;//[Offset: 0x58, Size: 0x10]
	int ConfirmPos;//[Offset: 0x68, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: HeroPickDetail.SolarUserWidget.UserWidget.Widget.Visual.Object
	void UpdateCharacterDetails(const int CharacterId);// 0x443723bfa041
	void RefreshSkillInfo(int SkillType, FString Attribute, FString SkillName, FString SkillDescription, out const Texture2D* SkillIcon);// 0x443623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerSelectInfo
	SolarPlayerState* Player;//[Offset: 0x0, Size: 0x8]
	int PlayerPos;//[Offset: 0x8, Size: 0x4]
	int CharacterId;//[Offset: 0xc, Size: 0x4]
	int SkinId;//[Offset: 0x10, Size: 0x4]
	int HeroExpLevel;//[Offset: 0x14, Size: 0x4]
	bool HasConfirm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float PlayerSelectTime;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCharacterSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarCharacterCameraComponent* Camera;//[Offset: 0x3f8, Size: 0x8]
	SolarCharacter* OwnerCharacter;//[Offset: 0x400, Size: 0x8]
	void UnregisterOverlappingObstacle(const Actor* InObstacle);// 0x4b5323bfa041
	void RegisterOverlappingObstacle(const Actor* InObstacle);// 0x4b5223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCharacterCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* Character;//[Offset: 0x9b8, Size: 0x8]
	SolarCharacterCameraDataAsset* CharacterCameraConfig;//[Offset: 0x9c8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCharacterCameraDataAsset.DataAsset.Object
	float ThirdPersonVerticalOffset;//[Offset: 0x30, Size: 0x4]
	float ThirdPersonVerticalOffsetWhenCrouched;//[Offset: 0x34, Size: 0x4]
	float ThirdPersonVerticalOffsetWhenCrouchMoving;//[Offset: 0x38, Size: 0x4]
	float ThirdPersonHorizontalOffset;//[Offset: 0x3c, Size: 0x4]
	CurveFloat* FollowForwardOffsetCurve;//[Offset: 0x40, Size: 0x8]
	float FollowForwardOffsetMultiplier;//[Offset: 0x48, Size: 0x4]
	float CrouchCameraLagTime;//[Offset: 0x4c, Size: 0x4]
	float UnCrouchCameraLagTime;//[Offset: 0x50, Size: 0x4]
	float ShoulderShotVerticalOffset;//[Offset: 0x54, Size: 0x4]
	float ShoulderShotVerticalOffsetWhenCrouched;//[Offset: 0x58, Size: 0x4]
	float ShoulderShotHorizontalOffset;//[Offset: 0x5c, Size: 0x4]
	float ShoulderShotDistanceToTarget;//[Offset: 0x60, Size: 0x4]
	CurveFloat* ShoulderShotFollowDistanceCurve;//[Offset: 0x68, Size: 0x8]
	float ShoulderShotCameraFOV;//[Offset: 0x70, Size: 0x4]
	float ShoulderShotCameraZoomInOutTime;//[Offset: 0x74, Size: 0x4]
	float ScopeShotVerticalOffsetWithStanding;//[Offset: 0x78, Size: 0x4]
	float ScopeShotVerticalOffsetWhenCrouch;//[Offset: 0x7c, Size: 0x4]
	float DistanceToScopePivot;//[Offset: 0x80, Size: 0x4]
	float ArmDistanceToCamera;//[Offset: 0x84, Size: 0x4]
	float ScopeHorizontalOffset;//[Offset: 0x88, Size: 0x4]
	float SwimDistanceToTarget;//[Offset: 0x8c, Size: 0x4]
	float SwimDistSwitchSpeed;//[Offset: 0x90, Size: 0x4]
	float TakeOffCamPitchMin;//[Offset: 0x94, Size: 0x4]
	float TakeOffCamPitchMax;//[Offset: 0x98, Size: 0x4]
	float LandingSpeedThreshold;//[Offset: 0x9c, Size: 0x4]
	CamEffectSettings ParkourCamSettings;//[Offset: 0xa0, Size: 0x38]
	Vector CruiseCameraOffset;//[Offset: 0xd8, Size: 0xc]
	Vector CruiseTargetOffset;//[Offset: 0xe4, Size: 0xc]
	float CruiseDistanceToTarget;//[Offset: 0xf0, Size: 0x4]
	Vector SkydiveCameraOffset;//[Offset: 0xf4, Size: 0xc]
	Vector SkydiveTargetOffset;//[Offset: 0x100, Size: 0xc]
	float SkydiveDistanceToTarget;//[Offset: 0x10c, Size: 0x4]
	float SkydiveDistanceToTargetOnBoosting;//[Offset: 0x110, Size: 0x4]
	float SkydiveViewPitchMax;//[Offset: 0x114, Size: 0x4]
	float SkydiveViewPitchMin;//[Offset: 0x118, Size: 0x4]
	CameraSettings JetFlySettingsVertical;//[Offset: 0x11c, Size: 0x20]
	CameraSettings JetFlySettingsFront;//[Offset: 0x13c, Size: 0x20]
	CameraSettings JetFlySettingsBack;//[Offset: 0x15c, Size: 0x20]
	CameraSettings JetFlySettingsLeft;//[Offset: 0x17c, Size: 0x20]
	CameraSettings JetFlySettingsRight;//[Offset: 0x19c, Size: 0x20]
	RuntimeFloatCurve JetFlyFadeInCurve;//[Offset: 0x1c0, Size: 0x88]
	RuntimeFloatCurve JetFlyFadeOutCurve;//[Offset: 0x248, Size: 0x88]
	class CameraShake* CameraShakeSkydiveFlying;//[Offset: 0x2d0, Size: 0x8]
	float CameraShakeSkydiveFlyingSpeedMin;//[Offset: 0x2d8, Size: 0x4]
	float CameraShakeSkydiveFlyingSpeedMax;//[Offset: 0x2dc, Size: 0x4]
	class CameraShake* CameraShakeJetPackLaunch;//[Offset: 0x2e0, Size: 0x8]
	class CameraShake* CameraShakeLand;//[Offset: 0x2e8, Size: 0x8]
	class CameraShake* CameraShakeVehicleEjectLaunch;//[Offset: 0x2f0, Size: 0x8]
	float CameraShakeLandDistanceMin;//[Offset: 0x2f8, Size: 0x4]
	float CameraShakeLandDistanceMax;//[Offset: 0x2fc, Size: 0x4]
	<enum,class CameraShake> CamShakeConfig;//[Offset: 0x300, Size: 0x50]
	float TargetOffsetLerpSpeed;//[Offset: 0x350, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CamEffectSettings
	float FadeIn;//[Offset: 0x0, Size: 0x4]
	float FadeOut;//[Offset: 0x4, Size: 0x4]
	float Duration;//[Offset: 0x8, Size: 0x4]
	bool bEnableOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	CurveVector* OffsetCurve;//[Offset: 0x10, Size: 0x8]
	bool bEnableRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	CurveVector* RotationCurve;//[Offset: 0x20, Size: 0x8]
	bool bEnableFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	CurveFloat* FOVCurve;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraSettings
	float DistanceToTarget;//[Offset: 0x0, Size: 0x4]
	float CameraFOV;//[Offset: 0x4, Size: 0x4]
	Vector TargetOffset;//[Offset: 0x8, Size: 0xc]
	Vector CameraOffset;//[Offset: 0x14, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayHitInfo
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGlobalEventSystem.GameInstanceSubsystem.Subsystem.Object
	<class SolarGlobalEventBase,ListenerEventsByClass(MulticastInlineDelegateProperty)> ListenerEventsByClass;//[Offset: 0x30, Size: 0x50]
	<FName,ListenerEventsByName(MulticastInlineDelegateProperty)> ListenerEventsByName;//[Offset: 0x80, Size: 0x50]
	<GameplayTag,ListenerEventsByGameplayTag(MulticastInlineDelegateProperty)> ListenerEventsByGameplayTag;//[Offset: 0xd0, Size: 0x50]
	void UnbindGlobalEventByName(FName EventName, out const delegate Event);// 0x4dbb23bfa041
	void UnbindGlobalEventByGameplayTag(GameplayTag EventGameplayTag, out const delegate Event);// 0x4dba23bfa041
	void UnbindGlobalEventByClass(class SolarGlobalEventBase EventClass, out const delegate Event);// 0x4db923bfa041
	void UnbindAllGlobalEventsByName(Object* Unsubscriber, FName EventName);// 0x4db823bfa041
	void UnbindAllGlobalEventsByGameplayTag(Object* Unsubscriber, GameplayTag EventGameplayTag);// 0x4db723bfa041
	void UnbindAllGlobalEventsByClass(Object* Unsubscriber, class SolarGlobalEventBase EventClass);// 0x4db623bfa041
	void GetAllBoundObjectsToEventByName(FName EventName, out Object*[] Objects);// 0x4db523bfa041
	void GetAllBoundObjectsToEventByGameplayTag(GameplayTag EventGameplayTag, out Object*[] Objects);// 0x4db423bfa041
	void GetAllBoundObjectsToEventByClass(class SolarGlobalEventBase EventClass, out Object*[] Objects);// 0x4db323bfa041
	void GetAllActiveGlobalEventsClass(out class SolarGlobalEventBase[] Events);// 0x4db223bfa041
	void GetAllActiveGlobalEventNames(out FName[] Events);// 0x4db123bfa041
	void GetAllActiveGlobalEventGameplayTag(out GameplayTag[] Events);// 0x4db023bfa041
	void ClearGlobalEventByName(FName EventName, const bool bForceClear);// 0x4daf23bfa041
	void ClearGlobalEventByGameplayTag(GameplayTag EventGameplayTag, const bool bForceClear);// 0x4dae23bfa041
	void ClearGlobalEventByClass(class SolarGlobalEventBase EventClass, const bool bForceClear);// 0x4dad23bfa041
	void ClearAllGlobalEventsClass(const bool bForceClear);// 0x4dac23bfa041
	void ClearAllGlobalEventNames(const bool bForceClear);// 0x4dab23bfa041
	void ClearAllGlobalEventGameplayTags(const bool bForceClear);// 0x4daa23bfa041
	void CallGlobalEventByName(Object* Publisher, FName EventName, Object* Payload, out const FString[] MetaData);// 0x4da923bfa041
	void CallGlobalEventByGameplayTag(Object* Publisher, GameplayTag EventGameplayTag, Object* Payload, out const FString[] MetaData);// 0x4da823bfa041
	void CallGlobalEventByClass(Object* Publisher, class SolarGlobalEventBase EventClass, Object* Payload, out const FString[] MetaData);// 0x4da723bfa041
	void BindGlobalEventByName(FName EventName, out const delegate Event);// 0x4da623bfa041
	void BindGlobalEventByGameplayTag(GameplayTag EventGameplayTag, out const delegate Event);// 0x4da523bfa041
	void BindGlobalEventByClass(class SolarGlobalEventBase EventClass, out const delegate Event);// 0x4da423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGlobalEventBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarSwitchTargetCameraControlComp.ActorComponent.Object
	class SolarSpectateLevelSequenceActor* SpectateLevelSequenceActorClass;//[Offset: 0xb0, Size: 0x8]
	float CameraBlendCurveHeightScale;//[Offset: 0xb8, Size: 0x4]
	float CameraBlendSpeed;//[Offset: 0xbc, Size: 0x4]
	float MinCameraBlendDistanceBetweenTargets;//[Offset: 0xc0, Size: 0x4]
	SolarSpectateLevelSequenceActor* SpectateLevelSequenceActor;//[Offset: 0x100, Size: 0x8]
	CameraActor* IntermediatePointCameraActor;//[Offset: 0x118, Size: 0x8]
	Actor* IntermediateEndTarget;//[Offset: 0x130, Size: 0x8]
	CameraComponent* EndTargetCameraCache;//[Offset: 0x138, Size: 0x8]
	void OnViewTargetBlendComplete();// 0x532c23bfa041
	void OnScoutPlayerWorkComplete();// 0x532b23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarSpectateLevelSequenceActor.LevelSequenceActor.Actor.Object
	SoftObjectPath SwitchTargetSequencePath;//[Offset: 0x2b8, Size: 0x18]
	FString AtLeastPlayToMark;//[Offset: 0x2d0, Size: 0x10]
	LevelSequence* SwitchTargetSequence;//[Offset: 0x2f8, Size: 0x8]
	CineCameraActor* SequenceCamera;//[Offset: 0x300, Size: 0x8]
	CameraRig_Crane* SequenceCameraRigCrane;//[Offset: 0x308, Size: 0x8]
	void OnSequenceStoped();// 0x530823bfa041
	void OnSequenceFinished();// 0x530723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CameraRig_Crane.Actor.Object
	float CranePitch;//[Offset: 0x228, Size: 0x4]
	float CraneYaw;//[Offset: 0x22c, Size: 0x4]
	float CraneArmLength;//[Offset: 0x230, Size: 0x4]
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	SceneComponent* TransformComponent;//[Offset: 0x238, Size: 0x8]
	SceneComponent* CraneYawControl;//[Offset: 0x240, Size: 0x8]
	SceneComponent* CranePitchControl;//[Offset: 0x248, Size: 0x8]
	SceneComponent* CraneCameraMount;//[Offset: 0x250, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FixedAntiCheatData
	int FOV;//[Offset: 0x0, Size: 0x4]
	byte AxisConstraint;//[Offset: 0x4, Size: 0x1]
	bool bAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector HeadBoneScale;//[Offset: 0x8, Size: 0xc]
	bool CurrWeaponRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float LatestTimeDiscrepancyError;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SShotImageInfo
	FString UserId;//[Offset: 0x0, Size: 0x10]
	FString PlayerId;//[Offset: 0x10, Size: 0x10]
	FString BattleID;//[Offset: 0x20, Size: 0x10]
	int64 ScreenshotTime;//[Offset: 0x30, Size: 0x8]
	int ImageSize;//[Offset: 0x38, Size: 0x4]
	int ImageWidth;//[Offset: 0x3c, Size: 0x4]
	int ImageHeight;//[Offset: 0x40, Size: 0x4]
	FString ImageType;//[Offset: 0x48, Size: 0x10]
	FString ImageBuffer;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: LocTextParam
	FString ParamName;//[Offset: 0x0, Size: 0x10]
	int LocTextID;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: RotationBarMarkWidget.UserWidget.Widget.Visual.Object
	FName FlagName;//[Offset: 0x288, Size: 0x8]
	FName TextName;//[Offset: 0x290, Size: 0x8]
	Image* FlagImage;//[Offset: 0x298, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2a0, Size: 0x8]
	Actor* TargetActor;//[Offset: 0x2a8, Size: 0x8]
	void SetupOrder(int InOrderID);// 0x479723bfa041
	void SetUpdateState(bool ShouldUpdateLocation);// 0x479623bfa041
	void SetPosition(Vector2D InPosition);// 0x479523bfa041
	void SetFlagIcon(PaperSprite* InSprite);// 0x479423bfa041
	void InitializeMark(Actor* InTargetActor, bool InMoveable);// 0x479323bfa041
	float GetAngle();// 0x479223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarInputModeDataBase
<----------Generated by SSpawner v1.0.2---------->


Class: ScreenshotSetting
	bool EnableOnCurrentReportGameCheating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int MaxCountInRound;//[Offset: 0x4, Size: 0x4]
	bool[] ScreenshotMoment;//[Offset: 0x8, Size: 0x10]
	int ScreenshotInterval;//[Offset: 0x18, Size: 0x4]
	int ScreenshotWidth;//[Offset: 0x1c, Size: 0x4]
	int ScreenshotQuality;//[Offset: 0x20, Size: 0x4]
	FString ImageSaveType;//[Offset: 0x28, Size: 0x10]
	enum ScreenshotMode;//[Offset: 0x38, Size: 0x1]
	int ImageMaxSize;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlayerCameraManager.PlayerCameraManager.Actor.Object
	Actor* OldViewTarget;//[Offset: 0x2fc0, Size: 0x8]
	CameraModifier_CameraShakeWithCurve* CachedCameraShakeModWithCurve;//[Offset: 0x2fc8, Size: 0x8]
	void OnPlayerGetOnViewTargetVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x512123bfa041
	MinimalViewInfo GetDebugPOV();// 0x512023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CameraModifier_CameraShakeWithCurve.CameraModifier.Object
	<class CameraShakeWithCurve,CameraShakeWithCurvePool> ShakePoolByClass;//[Offset: 0x48, Size: 0x50]
	CameraShakeWithCurveTemplatePool[] ShakePoolByTemplate;//[Offset: 0x98, Size: 0x10]
	ActiveCameraShakeWithCurve[] ActiveShakes;//[Offset: 0xa8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraShakeWithCurve.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bDisableObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	CameraModifier_CameraShakeWithCurve* Modifier;//[Offset: 0x30, Size: 0x8]
	float ShakeTime;//[Offset: 0x38, Size: 0x4]
	RuntimeFloatCurve ShakeCurve;//[Offset: 0x40, Size: 0x88]
	CameraShakeWithCurve_Element*[] ShakeElements;//[Offset: 0xc8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraShakeWithCurve_Element.Object
<----------Generated by SSpawner v1.0.2---------->


Class: CameraShakeWithCurvePool
	CameraShakeWithCurve*[] PooledShakes;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraShakeWithCurveTemplatePool
	CameraShakeWithCurve*[] PooledShakes;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ActiveCameraShakeWithCurve
	CameraShakeWithCurve* ShakeInstance;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_HUD_BattleRoyaleMap01_C.BP_HUD_BattleRoyale_C.BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BP_HUD_BattleRoyale_C.BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x398, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3a0, Size: 0x8]
	delegate OnWindowVisibiltyChanged;//[Offset: 0x3a8, Size: 0x10]
	void RemoveInputActionFlagTeamDeath(SolarInputSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffff9223bfa002
	void AddInputActionFlagTeamDeath(SolarInputSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffff8f23bfa000
	void BP_SCustomHUDBase_AutoGenFunc(Object* Publisher, Object* Payload, out const FString[] MetaData, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0xdf0523bfa041
	void ReceiveBeginPlay();// 0xffffffbc23bfa000
	void EventOnWindowVisibiltyChanged(byte UIType, byte Visibility);// 0x1c008f23d4a100
	void ExecuteUbergraph_BP_HUD_Framework(int EntryPoint, byte K2Node_CustomEvent_UIType, byte K2Node_CustomEvent_Visibility, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x154b923bfa041
	void OnWindowVisibiltyChanged__DelegateSignature(byte UIType, byte Visibility);// 0x154b723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BattleHUDBase.SolarHUD.HUD.Actor.Object
	class HUDDispatcherBase* Dispatcher;//[Offset: 0x318, Size: 0x8]
	HUDDispatcherBase* WidgetEventDispatcher;//[Offset: 0x320, Size: 0x8]
	bool bUseBattleDeathView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	SolarPlayersHPModel* PlayersHPModel;//[Offset: 0x330, Size: 0x8]
	SolarPlayersShieldModel* PlayersShieldModel;//[Offset: 0x338, Size: 0x8]
	SolarTeamInfoModel* TeamInfoModelModel;//[Offset: 0x340, Size: 0x8]
	void ShowDiePage_Deprecated();// 0x41b023bfa041
	void OnPlayerStateRepInController(enum RepType, PlayerState* PlayerState);// 0x41af23bfa041
	void OnPlayerStateRepInCharacter(enum RepType, PlayerState* PlayerState);// 0x41ae23bfa041
	void OnNewTeamInfo(SolarTeamInfo* TeamInfo);// 0x41ad23bfa041
	void OnCharacterEndPlay(SolarCharacter* Character);// 0x41ac23bfa041
	UISubsystem* GetUISubSystem();// 0x41ab23bfa041
	void CloseDiePage_Deprecated(const class UserWidget InDiePageClass);// 0x41aa23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarHUD.HUD.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: HUDDispatcherBase.Object
	delegate OnSkydivingLeaderIndexReplicated;//[Offset: 0x38, Size: 0x10]
	delegate OnSkydivingMemberStatusUpdated;//[Offset: 0x48, Size: 0x10]
	delegate TrySkydiveUnfollow;//[Offset: 0x58, Size: 0x10]
	float SkydivingLeaderTransferCooldown;//[Offset: 0xc0, Size: 0x4]
	float SkydivingLeaderVoiceCooldown;//[Offset: 0xc4, Size: 0x4]
	delegate OnTeammateStateReplicated;//[Offset: 0x100, Size: 0x10]
	delegate OnTeammatePlayerStateReplicated;//[Offset: 0x110, Size: 0x10]
	delegate OnCharacterPSInGameChanged;//[Offset: 0x120, Size: 0x10]
	delegate OnPlayerOperationInGameChanged;//[Offset: 0x130, Size: 0x10]
	delegate OnTeammatePSRemoveWhenPreparation;//[Offset: 0x140, Size: 0x10]
	delegate OnTeammatePSRemoveWhenBattle;//[Offset: 0x150, Size: 0x10]
	delegate OnTeammateHPChanged;//[Offset: 0x160, Size: 0x10]
	delegate OnTeammateShieldChanged;//[Offset: 0x170, Size: 0x10]
	delegate OnTeammateReviveItemChanged;//[Offset: 0x180, Size: 0x10]
	delegate OnTeammateReviveManagerChanged;//[Offset: 0x190, Size: 0x10]
	delegate OnReviveStateChanged;//[Offset: 0x1a0, Size: 0x10]
	delegate OnTeammateReviveStateChanged;//[Offset: 0x1b0, Size: 0x10]
	delegate OnTeammateResurrectTimeChanged;//[Offset: 0x1c0, Size: 0x10]
	delegate OnTeammateCallForHelpNotify;//[Offset: 0x1d0, Size: 0x10]
	delegate OnKillLeaderChangedNotify;//[Offset: 0x1f0, Size: 0x10]
	delegate OnTeammateNetStateChanged;//[Offset: 0x240, Size: 0x10]
	delegate OnNavMapMarked;//[Offset: 0x250, Size: 0x10]
	delegate OnNavMapMarkCleared;//[Offset: 0x260, Size: 0x10]
	delegate OnTalentInitialized;//[Offset: 0x270, Size: 0x10]
	delegate OnTeammateCharacterIdChanged;//[Offset: 0x280, Size: 0x10]
	delegate OnTeammateSkinIdChanged;//[Offset: 0x290, Size: 0x10]
	delegate OnLevelChanged;//[Offset: 0x2a0, Size: 0x10]
	delegate OnSkillCDStateChanged;//[Offset: 0x2b0, Size: 0x10]
	delegate OnTeammateTalentStateChanged;//[Offset: 0x2c0, Size: 0x10]
	delegate OnSpecTargetChanged;//[Offset: 0x2d0, Size: 0x10]
	delegate OnBindHPPanelDelegate;//[Offset: 0x2e0, Size: 0x10]
	delegate OnBindItemPanelDelegate;//[Offset: 0x2f0, Size: 0x10]
	delegate OnBindPowerBarDelegate;//[Offset: 0x300, Size: 0x10]
	delegate OnRefreshBackpackItemDelegate;//[Offset: 0x310, Size: 0x10]
	delegate OnRefreshBackpackEquipDelegate;//[Offset: 0x320, Size: 0x10]
	delegate OnRefreshBackpackWeaponDelegate;//[Offset: 0x330, Size: 0x10]
	delegate OnRefreshBackpackWeaponPartDelegate;//[Offset: 0x340, Size: 0x10]
	delegate OnRefreshBroadCastModeDelegate;//[Offset: 0x350, Size: 0x10]
	delegate OnSetActiveOpenBoxBtnDelegate;//[Offset: 0x360, Size: 0x10]
	delegate OnSetActiveOpenBoxProgressDelegate;//[Offset: 0x370, Size: 0x10]
	delegate OnSetTreasureBoxActorDelegate;//[Offset: 0x380, Size: 0x10]
	delegate OnSetAirdropBoxActorDelegate;//[Offset: 0x390, Size: 0x10]
	delegate OnHideTreasureBoxUIDelegate;//[Offset: 0x3a0, Size: 0x10]
	delegate OnHideAirdropBoxUIDelegate;//[Offset: 0x3b0, Size: 0x10]
	delegate OnSetPickupSwitchDelegate;//[Offset: 0x3c0, Size: 0x10]
	delegate OnAirdropCharChangeDelegate;//[Offset: 0x3d0, Size: 0x10]
	delegate OnAirdropProgressChangeDelegate;//[Offset: 0x3e0, Size: 0x10]
	delegate OnPlayerNumberChanged;//[Offset: 0x3f0, Size: 0x10]
	delegate OnCapsulePlayerNumChanged;//[Offset: 0x400, Size: 0x10]
	delegate OnBombingStarted;//[Offset: 0x410, Size: 0x10]
	delegate OnBombingStopped;//[Offset: 0x420, Size: 0x10]
	delegate OnItemDiscarded;//[Offset: 0x430, Size: 0x10]
	delegate OnSettingRequestOpened;//[Offset: 0x440, Size: 0x10]
	delegate OnSettingRequestClosed;//[Offset: 0x450, Size: 0x10]
	delegate OnMigrateAccountVisibilityRequestChanged;//[Offset: 0x460, Size: 0x10]
	delegate OnCustomizeVisibilityRequestChanged;//[Offset: 0x470, Size: 0x10]
	delegate OnDriveCustomizeOpened;//[Offset: 0x480, Size: 0x10]
	delegate OnDriveCustomizeClosed;//[Offset: 0x490, Size: 0x10]
	delegate OnBackpackTookPickup;//[Offset: 0x4a0, Size: 0x10]
	delegate OnBackpackReleasedPickup;//[Offset: 0x4b0, Size: 0x10]
	delegate OnToggleCursorVisibility;//[Offset: 0x4c0, Size: 0x10]
	delegate OnBackpackVisibilitySet;//[Offset: 0x4d0, Size: 0x10]
	delegate OnElectricShopVisibilitySet;//[Offset: 0x4e0, Size: 0x10]
	delegate OnBigMapVisibilitySet;//[Offset: 0x4f0, Size: 0x10]
	delegate OnRescueBtnVisibilitySet;//[Offset: 0x500, Size: 0x10]
	delegate OnBuyResurrectBtnVisibilitySet;//[Offset: 0x510, Size: 0x10]
	delegate OnBigMapCloseButtonClicked;//[Offset: 0x520, Size: 0x10]
	delegate OnPickupFlagChanged;//[Offset: 0x530, Size: 0x10]
	delegate OnPickupListVisibilityChanged;//[Offset: 0x540, Size: 0x10]
	delegate OnPickupItemSet;//[Offset: 0x550, Size: 0x10]
	delegate OnPickupItemCalculated;//[Offset: 0x560, Size: 0x10]
	delegate OnPickupCheckValidUpdated;//[Offset: 0x570, Size: 0x10]
	delegate OnPickupCheckHighlightUpdated;//[Offset: 0x580, Size: 0x10]
	delegate OnPickupCheckStatesUpdated;//[Offset: 0x590, Size: 0x10]
	delegate OnPickupItemSelected;//[Offset: 0x5a0, Size: 0x10]
	delegate OnTogglePickupDelegate;//[Offset: 0x5b0, Size: 0x10]
	delegate OnPlayerDead;//[Offset: 0x5c0, Size: 0x10]
	delegate OnJoyStickSprintStateReset;//[Offset: 0x5d0, Size: 0x10]
	delegate OnJoyStickInputReset;//[Offset: 0x5e0, Size: 0x10]
	delegate OnJoyStickResetAll;//[Offset: 0x5f0, Size: 0x10]
	delegate OnTutorialSequenceRequested;//[Offset: 0x600, Size: 0x10]
	delegate OnDrivingTutorialStopped;//[Offset: 0x610, Size: 0x10]
	delegate OnFireButtonsInputReset;//[Offset: 0x620, Size: 0x10]
	delegate OnTeamDeathMatchLeaderboard;//[Offset: 0x630, Size: 0x10]
	delegate OnGameModeChangeWeapon;//[Offset: 0x640, Size: 0x10]
	bool bBackpackVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]
	bool bElectricShopVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 0x1]
	bool bBigMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x652, Size: 0x1]
	bool bMapVehicleSpawnListVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x653, Size: 0x1]
	bool bRescueBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x654, Size: 0x1]
	bool bBuyResurrectBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x655, Size: 0x1]
	delegate OnInBattle;//[Offset: 0x658, Size: 0x10]
	delegate OnNotInBattle;//[Offset: 0x668, Size: 0x10]
	delegate OnRadarStationUpdated;//[Offset: 0x678, Size: 0x10]
	delegate OnAngleViewEnabled;//[Offset: 0x688, Size: 0x10]
	delegate OnCharacterSwimStateChanged;//[Offset: 0x698, Size: 0x10]
	delegate OnCharacterWaterClimbAvailable;//[Offset: 0x6a8, Size: 0x10]
	delegate OnHitTraceUpdated;//[Offset: 0x6b8, Size: 0x10]
	delegate OnHitTraceRemoved;//[Offset: 0x6c8, Size: 0x10]
	delegate OnHitTraceCleared;//[Offset: 0x6d8, Size: 0x10]
	delegate OnProfessionFunctionalChanged;//[Offset: 0x6e8, Size: 0x10]
	delegate OnBackpackModeChanged;//[Offset: 0x6f8, Size: 0x10]
	delegate OnPickupListAdd;//[Offset: 0x708, Size: 0x10]
	delegate OnPickupListRemove;//[Offset: 0x718, Size: 0x10]
	delegate OnTeammateStateChanged;//[Offset: 0x728, Size: 0x10]
	delegate OnRepliableMessageChanged;//[Offset: 0x738, Size: 0x10]
	delegate OnPlayerFlagDisplayChanged;//[Offset: 0x748, Size: 0x10]
	delegate OnSpectateModeEntered;//[Offset: 0x758, Size: 0x10]
	delegate OnSpectateModeExited;//[Offset: 0x768, Size: 0x10]
	delegate OnSpectateReferToChanged;//[Offset: 0x778, Size: 0x10]
	delegate OnSpectateTargetItemsChanged;//[Offset: 0x788, Size: 0x10]
	delegate OnMarkButtonHoverChanged;//[Offset: 0x798, Size: 0x10]
	delegate OnMarkButtonTouchMoved;//[Offset: 0x7a8, Size: 0x10]
	delegate OnMarkButtonBeenLongPressed;//[Offset: 0x7b8, Size: 0x10]
	delegate OnMarkButtonDragSelectEnded;//[Offset: 0x7c8, Size: 0x10]
	delegate OnBattleModeChanged;//[Offset: 0x7d8, Size: 0x10]
	delegate OnCharacterSet;//[Offset: 0x7f0, Size: 0x10]
	delegate OnCharacterIDSet;//[Offset: 0x800, Size: 0x10]
	delegate OnCharacterHPChanged;//[Offset: 0x810, Size: 0x10]
	delegate OnCharacterDead;//[Offset: 0x840, Size: 0x10]
	delegate OnCharacterEnterWater;//[Offset: 0x850, Size: 0x10]
	delegate OnCharacterSelfRebirth;//[Offset: 0x860, Size: 0x10]
	delegate OnCharacterLevelUp;//[Offset: 0x870, Size: 0x10]
	delegate OnCharacterGainExp;//[Offset: 0x880, Size: 0x10]
	delegate OnCharacterLevelExpChanged;//[Offset: 0x890, Size: 0x10]
	delegate OnCharacterAllReady;//[Offset: 0x8a0, Size: 0x10]
	delegate OnBattleUpgradeEffect;//[Offset: 0x8b0, Size: 0x10]
	delegate OnSelectingBattleUpgradeEffectBegin;//[Offset: 0x8c0, Size: 0x10]
	delegate OnSelectingBattleUpgradeEffectFinish;//[Offset: 0x8d0, Size: 0x10]
	delegate OnSpectateBattleUpgradeEffectUpdate;//[Offset: 0x8e0, Size: 0x10]
	delegate OnTeammateRebirth;//[Offset: 0x8f0, Size: 0x10]
	delegate OnDamagingActorsChange;//[Offset: 0x900, Size: 0x10]
	delegate OnAimingEnemy;//[Offset: 0x910, Size: 0x10]
	delegate OnScoutCharactersChange;//[Offset: 0x920, Size: 0x10]
	delegate OnCharacterLevelChanged;//[Offset: 0x938, Size: 0x10]
	delegate OnRapidBoostActivationChanged;//[Offset: 0x958, Size: 0x10]
	delegate OnTrySpawnSuperRadar;//[Offset: 0x968, Size: 0x10]
	delegate OnSuperScaningStart;//[Offset: 0x978, Size: 0x10]
	delegate OnSuperScaningRemovePlayer;//[Offset: 0x988, Size: 0x10]
	delegate OnSuperScaningEnd;//[Offset: 0x998, Size: 0x10]
	delegate OnSuperScanCameraMoveForward;//[Offset: 0x9a8, Size: 0x10]
	delegate OnSuperScanCameraMoveRight;//[Offset: 0x9b8, Size: 0x10]
	delegate OnSuperScaningWidgetShow;//[Offset: 0x9c8, Size: 0x10]
	delegate OnRoleAbilityChange;//[Offset: 0x9d8, Size: 0x10]
	delegate OnRoleAbilityStartCD;//[Offset: 0x9e8, Size: 0x10]
	delegate OnRoleAbilityEndCD;//[Offset: 0x9f8, Size: 0x10]
	delegate OnRoleAbilityCDDurationChange;//[Offset: 0xa08, Size: 0x10]
	delegate OnRoleAbilityStartCDUTCTimeUpdate;//[Offset: 0xa18, Size: 0x10]
	delegate OnRoleAbilityStateChange;//[Offset: 0xa28, Size: 0x10]
	delegate OnRoleAbilityEnd;//[Offset: 0xa38, Size: 0x10]
	delegate OnRoleAbilityContinous;//[Offset: 0xa48, Size: 0x10]
	delegate OnRoleAbilityBuffContinous;//[Offset: 0xa58, Size: 0x10]
	delegate OnRoleAbilityBuffUpdate;//[Offset: 0xa68, Size: 0x10]
	delegate OnRoleAbilityBuffEnd;//[Offset: 0xa78, Size: 0x10]
	delegate OnRoleAbilityBuffPause;//[Offset: 0xa88, Size: 0x10]
	delegate OnRoleAbilityBuffResume;//[Offset: 0xa98, Size: 0x10]
	delegate OnRoleAbilityHideControlHUD;//[Offset: 0xaa8, Size: 0x10]
	delegate OnRoleAbilityInputAction;//[Offset: 0xab8, Size: 0x10]
	delegate OnRoleAbilityAddSummonBuff;//[Offset: 0xac8, Size: 0x10]
	delegate OnRoleAbilityUsingStatusChanged;//[Offset: 0xad8, Size: 0x10]
	delegate OnCharacterNightComesActorChanged;//[Offset: 0xae8, Size: 0x10]
	delegate OnMobileWeaponInputAction;//[Offset: 0xaf8, Size: 0x10]
	delegate OnRoleGEShieldMultiRecoverCoolDownEffect;//[Offset: 0xb08, Size: 0x10]
	delegate OnMemberFlagIDChanged01;//[Offset: 0xb18, Size: 0x10]
	delegate OnMemberFlagIDChanged02;//[Offset: 0xb28, Size: 0x10]
	delegate OnMemberFlagIDChanged03;//[Offset: 0xb38, Size: 0x10]
	delegate OnMemberFlagIDChanged04;//[Offset: 0xb48, Size: 0x10]
	delegate OnSideAttributeSetRemoved;//[Offset: 0xb58, Size: 0x10]
	delegate OnSideAttributeSetAdded;//[Offset: 0xb68, Size: 0x10]
	delegate OnSideAttributeSetChanged;//[Offset: 0xb78, Size: 0x10]
	delegate OnDrivingStateChanged;//[Offset: 0xb88, Size: 0x10]
	delegate OnVehicleWeaponAbilityActivated;//[Offset: 0xb98, Size: 0x10]
	delegate OnVehicleScopeInitialized;//[Offset: 0xba8, Size: 0x10]
	delegate OnVehicleScopeValueChanged;//[Offset: 0xbb8, Size: 0x10]
	delegate OnEquipVehicleWeaponDelegate;//[Offset: 0xbc8, Size: 0x10]
	delegate OnVehicleWeaponScopeDelegate;//[Offset: 0xbd8, Size: 0x10]
	delegate OnTransformerChangeWeaponDelegate;//[Offset: 0xbe8, Size: 0x10]
	delegate OnVehicleTypeChangeDelegate;//[Offset: 0xbf8, Size: 0x10]
	delegate OnVehicleWeaponNoAmmoAlert;//[Offset: 0xc08, Size: 0x10]
	delegate OnVehicleAbilityActivationChanged;//[Offset: 0xc18, Size: 0x10]
	delegate OnMapVehicleSpawnListInitialized;//[Offset: 0xc28, Size: 0x10]
	delegate OnInputSprintLockStart;//[Offset: 0xc38, Size: 0x10]
	delegate OnSprintIconActived;//[Offset: 0xc48, Size: 0x10]
	delegate OnSprintIconHide;//[Offset: 0xc58, Size: 0x10]
	delegate OnSprintLockIconActived;//[Offset: 0xc68, Size: 0x10]
	delegate OnTeamMessageReceive;//[Offset: 0xc78, Size: 0x10]
	delegate OnVJetForbiddenChanged;//[Offset: 0xc88, Size: 0x10]
	delegate OnHJetForbiddenChanged;//[Offset: 0xc98, Size: 0x10]
	delegate OnVJetTotalTimesSet;//[Offset: 0xca8, Size: 0x10]
	delegate OnHJetTotalTimesSet;//[Offset: 0xcb8, Size: 0x10]
	delegate OnVJetRestTimesSet;//[Offset: 0xcc8, Size: 0x10]
	delegate OnHJetRestTimesSet;//[Offset: 0xcd8, Size: 0x10]
	delegate OnVJetChargeStateChanged;//[Offset: 0xce8, Size: 0x10]
	delegate OnVJetCDStateChanged;//[Offset: 0xcf8, Size: 0x10]
	delegate OnHJetChargeStateChanged;//[Offset: 0xd08, Size: 0x10]
	delegate OnHJetCDStateChanged;//[Offset: 0xd18, Size: 0x10]
	delegate OnVJetTimesCharging;//[Offset: 0xd28, Size: 0x10]
	delegate OnHJetTimesCharging;//[Offset: 0xd38, Size: 0x10]
	delegate OnVJetCoolingDown;//[Offset: 0xd48, Size: 0x10]
	delegate OnHJetCoolingDown;//[Offset: 0xd58, Size: 0x10]
	delegate OnVJetModuleLevelChanged;//[Offset: 0xd68, Size: 0x10]
	delegate OnHJetModuleLevelChanged;//[Offset: 0xd78, Size: 0x10]
	delegate OnSkydiveFlyStateChanged;//[Offset: 0xd88, Size: 0x10]
	delegate OnSkydiveAltitudeUpdate;//[Offset: 0xd98, Size: 0x10]
	delegate OnSkydiveSpeedUpdate;//[Offset: 0xda8, Size: 0x10]
	delegate OnShowGameNoticeDelegate;//[Offset: 0xdb8, Size: 0x10]
	delegate OnStartCountDownDelegate;//[Offset: 0xdc8, Size: 0x10]
	delegate OnStopCountDownDelegate;//[Offset: 0xdd8, Size: 0x10]
	delegate OnHideInteractionListRequested;//[Offset: 0xde8, Size: 0x10]
	delegate OnCancelHideInteractionListRequested;//[Offset: 0xdf8, Size: 0x10]
	delegate OnInteractionTriggerAppear;//[Offset: 0xe08, Size: 0x10]
	delegate OnInteractionTriggerDisappear;//[Offset: 0xe18, Size: 0x10]
	delegate OnStartInteractionCountDown;//[Offset: 0xe28, Size: 0x10]
	delegate OnStopInteractionCountDown;//[Offset: 0xe38, Size: 0x10]
	delegate OnStartReviveTeammateCountDownDelegate;//[Offset: 0xe48, Size: 0x10]
	delegate OnStopReviveTeammateCountDownDelegate;//[Offset: 0xe58, Size: 0x10]
	delegate OnReviveWillBeDisabledHintDelegate;//[Offset: 0xe68, Size: 0x10]
	delegate OnStartReviveItemRecycleCountDownDelegate;//[Offset: 0xe78, Size: 0x10]
	delegate OnOverlapElectricShopDelegate;//[Offset: 0xed8, Size: 0x10]
	delegate OnUpdateVehicleInteractionDelegate;//[Offset: 0xee8, Size: 0x10]
	delegate OnCruiseHeightSet;//[Offset: 0xef8, Size: 0x10]
	delegate OnEnterCruisingDelegate;//[Offset: 0xf08, Size: 0x10]
	delegate OnEnterParachutingDelegate;//[Offset: 0xf18, Size: 0x10]
	delegate OnEnterLandingDelegate;//[Offset: 0xf28, Size: 0x10]
	delegate OnEShopWeaponUpgradeDelegate;//[Offset: 0xf38, Size: 0x10]
	delegate OnEShopShieldUpgradeDelegate;//[Offset: 0xf48, Size: 0x10]
	delegate OnEShopPurchaseSuccessDelegate;//[Offset: 0xf58, Size: 0x10]
	delegate OnEShopItemCDRefreshDelegate;//[Offset: 0xf68, Size: 0x10]
	delegate OnEShopItemRefreshDelegate;//[Offset: 0xf78, Size: 0x10]
	delegate OnEShopSlotWeaponUpgradeDelegate;//[Offset: 0xf88, Size: 0x10]
	delegate OnEShopWeaponChangeDelegate;//[Offset: 0xf98, Size: 0x10]
	delegate OnEShopPoolRefreshDelegate;//[Offset: 0xfa8, Size: 0x10]
	delegate TryOpenElectricShopDelegate;//[Offset: 0xfb8, Size: 0x10]
	delegate OnTeammateHomePanelGetting;//[Offset: 0xfc8, Size: 0x10]
	delegate OnHomeBattleUIGetting;//[Offset: 0xfd8, Size: 0x10]
	delegate OnHomeMainBuildGetting;//[Offset: 0xfe8, Size: 0x10]
	delegate OnHomeFriendListGetting;//[Offset: 0xff8, Size: 0x10]
	delegate OnHomeLevelUpUIGetting;//[Offset: 0x1008, Size: 0x10]
	delegate OnShieldAvailableChanged;//[Offset: 0x1018, Size: 0x10]
	delegate OnShieldChanged;//[Offset: 0x1028, Size: 0x10]
	delegate OnRechargeShieldEnd;//[Offset: 0x1038, Size: 0x10]
	delegate OnShieldFXUpdated;//[Offset: 0x1048, Size: 0x10]
	delegate OnShieldValueChanged;//[Offset: 0x1058, Size: 0x10]
	delegate OnMaxShieldValueUpdate;//[Offset: 0x1068, Size: 0x10]
	delegate FOnSteamRechargeShield;//[Offset: 0x1078, Size: 0x10]
	delegate TryCancelCountDown;//[Offset: 0x1088, Size: 0x10]
	delegate OnEnemyShieldChanged;//[Offset: 0x1098, Size: 0x10]
	delegate OnEnemyShieldValueChanged;//[Offset: 0x10a8, Size: 0x10]
	delegate OnShieldUpgradeStart;//[Offset: 0x10b8, Size: 0x10]
	delegate OnShieldUpgradeInterrupt;//[Offset: 0x10c8, Size: 0x10]
	delegate OnShieldUpgradeFinish;//[Offset: 0x10d8, Size: 0x10]
	delegate OnShieldUpgradeItemCountChanged;//[Offset: 0x10e8, Size: 0x10]
	delegate OnShieldUpgradeItemCountChangedBP;//[Offset: 0x10f8, Size: 0x10]
	delegate OnAckShieldUpgradeShopInteract;//[Offset: 0x1108, Size: 0x10]
	delegate TryOpenTreasureBoxDelegate;//[Offset: 0x1118, Size: 0x10]
	delegate TryOpenAirDropTreasureBoxDelegate;//[Offset: 0x1128, Size: 0x10]
	delegate TryCancelAirDropTreasureBoxDelegate;//[Offset: 0x1138, Size: 0x10]
	delegate TryPickupFirstItemDelegate;//[Offset: 0x1148, Size: 0x10]
	delegate CheckPickupItemValidDelegate;//[Offset: 0x1158, Size: 0x10]
	delegate SelectPreviousItem;//[Offset: 0x1168, Size: 0x10]
	delegate SelectNextItem;//[Offset: 0x1178, Size: 0x10]
	delegate OnPickupEntryPlayAnim;//[Offset: 0x1198, Size: 0x10]
	delegate OnRequstPickupEntryPlayAnim;//[Offset: 0x11a8, Size: 0x10]
	delegate OnRequstPickupEntryPlayAnimCustom;//[Offset: 0x11b8, Size: 0x10]
	delegate NotifyTeammateReviving;//[Offset: 0x11c8, Size: 0x10]
	delegate OnInteractEvent;//[Offset: 0x11d8, Size: 0x10]
	delegate OnBattleControlTeammateStateRemoved;//[Offset: 0x11e8, Size: 0x10]
	delegate OnSetBackpackDropMaskVisibility;//[Offset: 0x11f8, Size: 0x10]
	delegate OnEndBackpackDragDrop;//[Offset: 0x1208, Size: 0x10]
	delegate OnBattleHUDVisibilityChanged;//[Offset: 0x1238, Size: 0x10]
	delegate OnMicroPhonePressed;//[Offset: 0x1248, Size: 0x10]
	delegate OnSpeakerPressed;//[Offset: 0x1258, Size: 0x10]
	delegate OnSwitchEMP;//[Offset: 0x1268, Size: 0x10]
	delegate OnToggleAssitAim;//[Offset: 0x1278, Size: 0x10]
	delegate OnToggleAutoFire;//[Offset: 0x1288, Size: 0x10]
	delegate OnTreatmentEnd;//[Offset: 0x1298, Size: 0x10]
	void VehicleWeaponScopeChanged__DelegateSignature(bool BOpened);// 0x263023bfa041
	void VehicleWeaponNoAmmoAlert__DelegateSignature();// 0x262f23bfa041
	void VehicleTypeChanged__DelegateSignature();// 0x262e23bfa041
	void VehicleAbilityActivationChanged__DelegateSignature(bool bInActivated, bool bCanCancel, byte InAbilityIndex, float InDurationTime);// 0x262d23bfa041
	void TwoIntUIInteractDelegate__DelegateSignature(int Value01, int Value02);// 0x262c23bfa041
	void TwoIntImplementableDelegate__DelegateSignature(int Value01, int Value02);// 0x262b23bfa041
	bool TrySkydiveUnfollow__DelegateSignature();// 0x262a23bfa041
	void TransformerWeaponChanged__DelegateSignature(enum InType);// 0x262823bfa041
	void ToggledBigMapVisibility();// 0x262723bfa041
	void ToggledBackpackVisibility();// 0x262623bfa041
	void StopDrivingTutorial();// 0x262523bfa041
	void SprintLockIconActived__DelegateSignature(out const Vector2D InSprintPosition);// 0x262423bfa041
	void SolarPlayerStateDelegate__DelegateSignature(SolarPlayerState* InPlayerState);// 0x262323bfa041
	void SimpleUIInteractDelegate__DelegateSignature();// 0x262223bfa041
	void SimpleTriggerDelegate__DelegateSignature();// 0x262123bfa041
	void SimpleStringDelegate__DelegateSignature(FString Value);// 0x262023bfa041
	void SimpleSpectatorDelegate__DelegateSignature();// 0x261f23bfa041
	void SimplePlayerStateDelegate__DelegateSignature(SolarPlayerState* TeammatePS);// 0x261e23bfa041
	void SimpleOnRefreshDelegate__DelegateSignature();// 0x261d23bfa041
	bool SimpleOnBindRetOneParamDelegate__DelegateSignature(bool bAutoPickup);// 0x261c23bfa041
	bool SimpleOnBindRetOneIntParamDelegate__DelegateSignature(int InIthisID);// 0x261b23bfa041
	bool SimpleOnBindRetDelegate__DelegateSignature();// 0x261a23bfa041
	void SimpleOnBindDelegate__DelegateSignature();// 0x261923bfa041
	void SimpleImplementableDelegate__DelegateSignature();// 0x261823bfa041
	void SimpleFloatDelegate__DelegateSignature(float Value);// 0x261723bfa041
	void SimpleCharacterLuaDelegate__DelegateSignature();// 0x261623bfa041
	void SimpleBoolDelegate__DelegateSignature(bool Value);// 0x261523bfa041
	void ShowSuperScanChooseUI(bool bShow);// 0x261423bfa041
	void ShieldUpgradeItemCntChangedBPDelegate__DelegateSignature(const int ShieldLevel, const int ShieldMaxLevel, const int ShieldUpgradeItemNum, const int NeedShieldUpgradeItemNum, const int MaxShieldUpgradeItemNum);// 0x261323bfa041
	void SetRescueBtnVisibility(bool bVisible);// 0x261223bfa041
	void SetMapVehicleSpawnListVisibility(bool bVisible);// 0x261123bfa041
	void SetElectricShopVisibility(bool bVisible);// 0x261023bfa041
	void SetBuyResurrectBtnVisibility(const bool bVisible);// 0x260f23bfa041
	void SetBigMapVisibility(bool bVisible);// 0x260e23bfa041
	void SetBackpackVisibility(bool bInValue);// 0x260d23bfa041
	void RequestHideInteractionList();// 0x260c23bfa041
	void RequestCancelHideInteractionList();// 0x260b23bfa041
	void RemoveItemFromPickup(Object* InCardItem, const bool bPickup);// 0x260a23bfa041
	void PlayerTutorialSequence(const bool bPlay);// 0x260923bfa041
	void PickupListRemoveDelegate__DelegateSignature(Object* CardItem, bool bPickup);// 0x260823bfa041
	void PickupListDelegate__DelegateSignature(Object* CardItem);// 0x260723bfa041
	void OnWidgetVisibilitySet__DelegateSignature(bool bVisible);// 0x260623bfa041
	void OnWidgetButtonClicked__DelegateSignature();// 0x260523bfa041
	void OnVehicleWeaponAbilityActivated__DelegateSignature(bool bInActive);// 0x260423bfa041
	void OnVehicleScopeValueChanged__DelegateSignature(float InValue);// 0x260323bfa041
	void OnVehicleScopeInitialized__DelegateSignature(UserWidget* Widget, bool bInSpectate);// 0x260223bfa041
	void OnUpdateVehicleInteractionDelegate__DelegateSignature(enum UiState, SolarVehiclePawn* InVehicleComponent);// 0x260023bfa041
	void OnTutorialSequenceRequested__DelegateSignature(bool bPlay);// 0x25ff23bfa041
	void OnTrySpawnSuperRadar__DelegateSignature(bool bSpawn);// 0x25fe23bfa041
	void OnTreatmentDelegate__DelegateSignature();// 0x25fd23bfa041
	void OnTeamMessageReceive__DelegateSignature(FString MemberName, FString Message1, bool bLocalPlayer, bool bSound, int PosInTeam, FString Message2);// 0x25fc23bfa041
	void OnTeammateTalentStateChanged__DelegateSignature(enum TalentState, byte PosInTeam, float AdditionalParam);// 0x25fb23bfa041
	void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh);// 0x25fa23bfa041
	void OnTeammateShieldChanged__DelegateSignature(byte PosInTeam, out const ShieldInfo OldShield, out const ShieldInfo NewShield);// 0x25f923bfa041
	void OnTeammateReviveStateChanged__DelegateSignature(SolarPlayerState* RevivingMePlayer, SolarPlayerState* SolarPlayerState);// 0x25f823bfa041
	void OnTeammateReviveItemChanged__DelegateSignature(byte PosInTeam, byte ReviveItemNum, bool bCanRebirth);// 0x25f723bfa041
	void OnTeammateResurrectTimeChanged__DelegateSignature(SolarPlayerState* SolarPlayerState, int ResurrectTime);// 0x25f623bfa041
	void OnTeammateRescueStateChanged__DelegateSignature(SolarCharacter* InCharacter);// 0x25f523bfa041
	void OnTeammatePlatStateRemove__DelegateSignature(byte PosInTeam, bool bLastOne);// 0x25f423bfa041
	void OnTeammateIntegerDataChanged__DelegateSignature(int Data, byte PosInTeam);// 0x25f323bfa041
	void OnTeammateHPChanged__DelegateSignature(byte PosInTeam, float CurrentHP, float MaxHP);// 0x25f223bfa041
	void OnTeammateCallForHelpNotify__DelegateSignature(SolarPlayerState* SolarPlayerState);// 0x25f123bfa041
	void OnTeammateBattleStateChanged__DelegateSignature(SCMPlayerState* TeammateState);// 0x25f023bfa041
	void OnTeammateActionStateChanged__DelegateSignature(SolarPlayerState* SolarPlayerState, const GameplayTag Tag, int NewCount);// 0x25ef23bfa041
	void OnSwitchEMP__DelegateSignature(SolarCharacter* InCharacter, bool InbSwitchOnEMP);// 0x25ee23bfa041
	void OnSuperScaningWidgetShow__DelegateSignature(bool bShow);// 0x25ed23bfa041
	void OnSuperScaningStart__DelegateSignature(out const FString[] InScanPlayers);// 0x25ec23bfa041
	void OnSuperScaningRemovePlayer__DelegateSignature(FString InRemovePlayer);// 0x25eb23bfa041
	void OnSuperScaningEnd__DelegateSignature();// 0x25ea23bfa041
	void OnStopCountDownDelegate__DelegateSignature(const int InTextId);// 0x25e923bfa041
	void OnSteamRechargeShieldDecl__DelegateSignature(const bool bUseBigRecharger);// 0x25e823bfa041
	void OnStartCountDownDelegate__DelegateSignature(out const CountDownInfo InCountDownInfo);// 0x25e723bfa041
	void OnSprintIconHide__DelegateSignature();// 0x25e623bfa041
	void OnSprintIconActived__DelegateSignature(out const Vector2D InSprintPosition);// 0x25e523bfa041
	void OnSpectateTargetItemsChanged__DelegateSignature(ReplicateItemData[] InItemDatas);// 0x25e423bfa041
	void OnSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x25e323bfa041
	void OnSpectateReferToChanged__DelegateSignature(const SolarPlayerState* ReferToPlayerState, enum State);// 0x25e123bfa041
	void OnSpectateBattleUpgradeEffectUpdate__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x25e023bfa041
	void OnSpecTargetOrLocalCauseDamageChanged__DelegateSignature(float CauseDamage);// 0x25df23bfa041
	void OnSpecTargetOrLocalAssistChanged__DelegateSignature(int Assist);// 0x25de23bfa041
	void OnSpecTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x25dd23bfa041
	void OnSkydivingMemberDataUpdated__DelegateSignature(SolarPlayerState* MemberPS);// 0x25dc23bfa041
	void OnSkydivingFollowRequestResponded__DelegateSignature(SolarPlayerState* Follower, bool bAgreed);// 0x25db23bfa041
	void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed);// 0x25da23bfa041
	void OnSkydiveFlyStateChanged__DelegateSignature(SolarCharacter* InCharacter);// 0x25d923bfa041
	void OnSkydiveDataUpdate__DelegateSignature(float NewData);// 0x25d823bfa041
	void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue);// 0x25d723bfa041
	void OnSkillActivationChanged__DelegateSignature(bool bActivated);// 0x25d623bfa041
	void OnSideAttributeSetRemoved__DelegateSignature(FString SideName);// 0x25d523bfa041
	void OnSideAttributeSetChanged__DelegateSignature(FString SideName, out const SideAttributeSet SideRef);// 0x25d423bfa041
	void OnShowGameNotice__DelegateSignature(const int InNoticeID, out const HUDNoticeParams InNoiceParams);// 0x25d323bfa041
	void OnShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, FString SolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x25d223bfa041
	void OnShieldDelegate__DelegateSignature();// 0x25d123bfa041
	void OnShieldChanged__DelegateSignature(float CurValue, float MaxValue, int QualityColor, bool bAdvancedShield);// 0x25d023bfa041
	void OnShieldAvailableChanged__DelegateSignature(bool bAvailable);// 0x25cf23bfa041
	void OnSetTreasureBoxActorDelegate__DelegateSignature(Actor* InActor);// 0x25ce23bfa041
	void OnSetPickupSwitchDelegate__DelegateSignature(enum InType, bool InFlag);// 0x25cd23bfa041
	void OnSetBackpackDropMaskVisibility__DelegateSignature(bool bVisible);// 0x25cc23bfa041
	void OnSetActiveOpenBoxDelegate__DelegateSignature(bool Inactive);// 0x25cb23bfa041
	void OnSelectingBattleUpgradeEffectFinish__DelegateSignature(int SelectedIndex);// 0x25ca23bfa041
	void OnSelectingBattleUpgradeEffectBegin__DelegateSignature(SolarCharacter* Target, int Level, out const int[] EffectIDArray);// 0x25c923bfa041
	void OnScoutedCharactersChange__DelegateSignature(FString[] ScoutedCharacters, FString[] ToBeScoutedCharacters);// 0x25c823bfa041
	void OnRoleGEShieldMultiRecoverCoolDownChange__DelegateSignature(int NewCount);// 0x25c723bfa041
	void OnRoleAbilityUsingStatusChanged__DelegateSignature(const GameplayTag Tag, int NewCount);// 0x25c623bfa041
	void OnRoleAbilityStateChange__DelegateSignature(int RoleAbilityIndex, int State);// 0x25c523bfa041
	void OnRoleAbilityStartCDUTCTimeUpdate__DelegateSignature(int RoleAbilityIndex, float InServerTime);// 0x25c423bfa041
	void OnRoleAbilityStartCD__DelegateSignature(int RoleAbilityIndex, float StartCDServerTime, float StartCDTimeForReplay);// 0x25c323bfa041
	void OnRoleAbilityInputAction__DelegateSignature(int RoleAbilityIndex, bool bPress, bool bCanActive);// 0x25c223bfa041
	void OnRoleAbilityHideControlHUD__DelegateSignature(bool bHide);// 0x25c123bfa041
	void OnRoleAbilityEndCD__DelegateSignature(int RoleAbilityIndex);// 0x25c023bfa041
	void OnRoleAbilityEnd__DelegateSignature(int RoleAbilityIndex);// 0x25bf23bfa041
	void OnRoleAbilityContinous__DelegateSignature(int RoleAbilityIndex, bool bTurnOn, float Duration);// 0x25be23bfa041
	void OnRoleAbilityChange__DelegateSignature(int RoleAbilityIndex, bool bHaveAbility, int CharacterId, int PlayerLevel);// 0x25bd23bfa041
	void OnRoleAbilityCDDurationChange__DelegateSignature(int RoleAbilityIndex, int Duration, bool bDurationReduced);// 0x25bc23bfa041
	void OnRoleAbilityBuffUpdate__DelegateSignature(out const ActiveGameplayEffectHandle ActiveEffectHandle, float Duration, float RemainTime, bool bInPrePhase, float PreDuration, float PreRemainTime);// 0x25bb23bfa041
	void OnRoleAbilityBuffPause__DelegateSignature(bool bIsMainDuration, const SolarCharacter* SourceCharacter, byte AbilityIndex);// 0x25ba23bfa041
	void OnRoleAbilityBuffEnd__DelegateSignature(bool bIsMainDuration, out const ActiveGameplayEffectHandle InGameplayEffectHandle);// 0x25b923bfa041
	void OnRoleAbilityBuffContinous__DelegateSignature(bool bIsMainDuration, const SolarCharacter* SourceCharacter, byte AbilityIndex, float Duration, float PreDuration, out const ActiveGameplayEffectHandle ActiveEffectHandle);// 0x25b823bfa041
	void OnRoleAbilityAddSummonBuff__DelegateSignature(out const SoftObjectPath ImagePath, const Actor* InActor);// 0x25b723bfa041
	void OnReviveStateChanged__DelegateSignature(SolarPlayerState* RevivingMePlayer);// 0x25b623bfa041
	void OnRepliableMessageChanged__DelegateSignature();// 0x25b523bfa041
	void OnQuickVoiceWheelLongPressEnd__DelegateSignature(bool bPlayerDead);// 0x25b423bfa041
	void OnPoisonEffectUpdated__DelegateSignature(float PosX, float PosY, float Radius);// 0x25b323bfa041
	void OnPlayerFlagDisplayChanged__DelegateSignature(bool bDisplay);// 0x25b223bfa041
	void OnPlayerDead__DelegateSignature(out const KillInfo DeathMsgInfo);// 0x25af23bfa041
	void OnPickupListVisibilityChanged__DelegateSignature(bool bVisible);// 0x25ae23bfa041
	void OnPickupItemSet__DelegateSignature(out const Actor*[] ObjectList, enum Type);// 0x25ad23bfa041
	void OnPickupItemSelected__DelegateSignature(Object* SelectWidget, int SelectWidgetThisID);// 0x25ac23bfa041
	void OnPickupFlagChanged__DelegateSignature(bool bFlag, bool bNotSelf);// 0x25ab23bfa041
	void OnPickupCheckValidUpdated__DelegateSignature(out const ItemCountsList ItemCountsList);// 0x25aa23bfa041
	void OnPickupCheckStatesUpdated__DelegateSignature(bool bItemUpdate);// 0x25a923bfa041
	void OnPickupCheckHighlightUpdated__DelegateSignature(enum Type, bool IsRecommend);// 0x25a823bfa041
	void OnOverlapElectricShopDelegate__DelegateSignature(const bool InOverlap);// 0x25a723bfa041
	void OnNavMapMarked__DelegateSignature(byte PosInTeam, out const Vector2D MarkPosition);// 0x25a623bfa041
	void OnNavMapMarkCleared__DelegateSignature(byte PosInTeam);// 0x25a523bfa041
	void OnMobileWeaponInputAction__DelegateSignature(byte InButtonType);// 0x25a323bfa041
	void OnMemberFlagIDChanged__DelegateSignature(int FlagID, bool bClanFlag);// 0x25a223bfa041
	void OnMaxShieldValueUpdate__DelegateSignature(const float MaxShieldVal);// 0x25a123bfa041
	void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter, Vector2D TouchLocalPos);// 0x25a023bfa041
	void OnMarkButtonSimpleTriggered__DelegateSignature();// 0x259f23bfa041
	void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered);// 0x259e23bfa041
	void OnKillLeaderChangedNotify__DelegateSignature(SolarPlayerState* KillLeader);// 0x259d23bfa041
	void OnJetTimesChanged__DelegateSignature(int NewTimes);// 0x259c23bfa041
	void OnJetModuleLevelChanged__DelegateSignature(int NewLevel);// 0x259b23bfa041
	void OnJetFlyStateChanged__DelegateSignature(bool bStart);// 0x259a23bfa041
	void OnJetFlyForbiddenChanged__DelegateSignature(enum ForbiddenType, bool bAdded);// 0x259923bfa041
	void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent);// 0x259823bfa041
	void OnInteractionTriggerDelegate__DelegateSignature(out const InteractionTriggerInfo TriggerInfo);// 0x259723bfa041
	void OnInputTypeChanged__DelegateSignature(SolarPlayerState* PlayerState);// 0x259623bfa041
	void OnInputSprintLockStart__DelegateSignature();// 0x259523bfa041
	void OnInitElectricShopDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x259423bfa041
	UserWidget* OnHomelandGetWidget__DelegateSignature();// 0x259323bfa041
	int OnHitTraceUpdated__DelegateSignature(int HitTraceID, enum HitTraceType, float Angle, float WidgetScale);// 0x259123bfa041
	void OnHideUIByThisIDDelegate__DelegateSignature(int64 InThisID);// 0x259023bfa041
	void OnEShopWeaponUpgradeDelegate__DelegateSignature(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x258f23bfa041
	void OnEShopWeaponChangeDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x258e23bfa041
	void OnEShopSlotWeaponUpgradeDelegate__DelegateSignature(int InWeaponSlot);// 0x258d23bfa041
	void OnEShopShieldUpgradeDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x258c23bfa041
	void OnEShopPurchaseSuccessDelegate__DelegateSignature(int InProductID, SolarCharacter* InCharacter);// 0x258b23bfa041
	void OnEShopInfoUpdateDelegate__DelegateSignature(SolarElectricShop* InElectricShop);// 0x258a23bfa041
	void OnEnemyShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, FString SolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x258923bfa041
	void OnEnemyShieldChanged__DelegateSignature(FString SolarPlayerID, float CurValue, float MaxValue, int QualityColor, bool bAdvancedShield);// 0x258823bfa041
	void OnDrivingTutorialStopped__DelegateSignature();// 0x258723bfa041
	void OnDrivingStateChanged__DelegateSignature(enum DriveState);// 0x258623bfa041
	void OnDamagingActorsChange__DelegateSignature();// 0x258523bfa041
	void OnCreateReviveWorldMarkDelegate__DelegateSignature(SolarPlayerState* InPlayerState, out const Vector InWorldLoc);// 0x258423bfa041
	void OnCharacterStateChanged__DelegateSignature();// 0x258323bfa041
	void OnCharacterSet__DelegateSignature(SolarCharacter* ControlledCharacter);// 0x258223bfa041
	void OnCharacterSelfRebirth__DelegateSignature(SolarCharacter* RebirthCharacter);// 0x258123bfa041
	void OnCharacterRescueStateChanged__DelegateSignature(byte NewRescueState);// 0x258023bfa041
	void OnCharacterNightComesActorChanged__DelegateSignature(Actor* InActor);// 0x257f23bfa041
	void OnCharacterLevelUp__DelegateSignature(int NewLevel, int OldLevel);// 0x257e23bfa041
	void OnCharacterLevelExpChanged__DelegateSignature(int NewLevel, float NewExpRatio);// 0x257d23bfa041
	void OnCharacterLevelChanged__DelegateSignature(int InLevel);// 0x257c23bfa041
	void OnCharacterIDSet__DelegateSignature(int CharacterId);// 0x257b23bfa041
	void OnCharacterHPChanged__DelegateSignature(float CurrentHP, float MaxHP);// 0x257a23bfa041
	void OnCharacterGainExp__DelegateSignature(int ExpAdded);// 0x257923bfa041
	void OnCharacterDead__DelegateSignature(SolarCharacter* InCharacter);// 0x257823bfa041
	void OnCharacterAllReady__DelegateSignature(SolarCharacter* ControlledCharacter);// 0x257723bfa041
	void OnBombingStarted__DelegateSignature(int BombId, out const Vector Location, float Radius);// 0x257623bfa041
	void OnBattleUpgradeEffect__DelegateSignature(enum EffectType, int ParamSum);// 0x257523bfa041
	void OnBattleModeChanged__DelegateSignature(byte NewModeType);// 0x257423bfa041
	void OnBattleHUDVisibilityChanged__DelegateSignature(bool bVisible);// 0x257323bfa041
	void OnBackpackTookPickup__DelegateSignature(out const Vector2D NewPosition);// 0x257223bfa041
	void OnAirdropBoxInfoChangeDelegate__DelegateSignature(AirDropTreasureBox* InAirdropBox);// 0x257123bfa041
	void OnAimingEnemy__DelegateSignature(SolarCharacter* InEnemy);// 0x257023bfa041
	void MapVehicleSpawnListInitialized__DelegateSignature();// 0x256f23bfa041
	void LocalPlayerSkidivingCaptainChanged__DelegateSignature(int TeamIndex, FString playerName, bool IsLocalPlayer);// 0x256e23bfa041
	void JoyStickSimpleDeleghate__DelegateSignature();// 0x256d23bfa041
	bool IsElectricShopVisible();// 0x256c23bfa041
	bool IsBigMapVisible();// 0x256b23bfa041
	void IntUIInteractDelegate__DelegateSignature(int Value);// 0x256a23bfa041
	void IntImplementableDelegate__DelegateSignature(int Value);// 0x256923bfa041
	void InternalCallSkydiveSpeed();// 0x256823bfa041
	void InternalCallSkydiveFlyStateChanged();// 0x256723bfa041
	void IntCharacterLuaDelegate__DelegateSignature(int Value);// 0x256623bfa041
	void IntBackpackDelegate__DelegateSignature(int Value);// 0x256523bfa041
	SolarUserWidget* GetWorldMarkPanel();// 0x256423bfa041
	UserWidget* GetTeammateHomePanel();// 0x256323bfa041
	HUDDispatcherBase* GetHUDDispatcher_FromUI(const Widget* InWidget);// 0x256223bfa041
	HUDDispatcherBase* GetHUDDispatcher_FromPC(const PlayerController* InPC);// 0x256123bfa041
	HUDDispatcherBase* GetHUDDispatcher_FromHUD(const HUD* InHUD);// 0x256023bfa041
	HUDDispatcherBase* GetHUDDispatcher_FromCharacter(const SolarCharacter* InCharacter, bool bCheckControlled);// 0x255f23bfa041
	UserWidget* GetHomeMainBuild();// 0x255e23bfa041
	UserWidget* GetHomeLevelUpUI();// 0x255d23bfa041
	UserWidget* GetHomeFriendList();// 0x255c23bfa041
	UserWidget* GetHomeBattleUI();// 0x255b23bfa041
	void EquipVehicleWeapon__DelegateSignature(SolarVehicleWeapon* InVehicleWeapon);// 0x255a23bfa041
	void BroadcastVJetForbiddenChanged(enum Types, bool bAdded);// 0x255923bfa041
	void BroadcastVJetCDStateChanged(bool bCD);// 0x255823bfa041
	void BroadcastTrySpawnSuperRadar(bool bSpawn);// 0x255723bfa041
	bool BroadcastTryPickupFirstItem(const bool bAutoPickup);// 0x255623bfa041
	void BroadcastToggleCursorVisibility(const bool bIsVisible);// 0x255523bfa041
	void BroadcastToggleAutoFire();// 0x255423bfa041
	void BroadcastToggleAssitAim();// 0x255323bfa041
	void BroadcastSpectateTargetItemsChanged(out const ReplicateItemData[] InItemDatas);// 0x255223bfa041
	void BroadcastSpectateTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x255123bfa041
	void BroadcastSpectateBattleUpgradeEffectUpdate(SolarSpectateInfo* SpectateInfo);// 0x255023bfa041
	void BroadcastSkydiveSpeed();// 0x254f23bfa041
	bool BroadcastShieldValueChanged(const enum WidgetState, const float InCurValue, const float InChangeValue, FString InSolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x254e23bfa041
	void BroadcastShieldUpgradeStart();// 0x254d23bfa041
	void BroadcastShieldUpgradeShopInteract();// 0x254c23bfa041
	void BroadcastShieldUpgradeItemCountChanged(const int NewCount, const int LastCount);// 0x254b23bfa041
	void BroadcastShieldUpgradeInterrupt();// 0x254a23bfa041
	void BroadcastShieldUpgradeFinish();// 0x254923bfa041
	void BroadcastShieldFXUpdated();// 0x254823bfa041
	bool BroadcastShieldChanged(const float CurValue, const float MaxValue, const int QualityColor, const bool bAdvancedShield);// 0x254723bfa041
	bool BroadcastShieldAvailable(const bool bAvailable);// 0x254623bfa041
	void BroadcastSettingRequestOpened(const int InOwnerType);// 0x254523bfa041
	void BroadcastSettingRequestClosed();// 0x254423bfa041
	void BroadcastSetBackpackDropMaskVisibility(const bool bVisible);// 0x254323bfa041
	void BroadcastSelectPreviousItem();// 0x254223bfa041
	void BroadcastSelectNextItem();// 0x254123bfa041
	void BroadcastSelectingBattleUpgradeEffectFinish(int SelectedIndex);// 0x254023bfa041
	void BroadcastSelectingBattleUpgradeEffectBegin(SolarCharacter* Target, int Level, out const int[] EffectIDArray);// 0x253f23bfa041
	void BroadcastScoutCharactersChange(FString[] ScoutedCharacters, FString[] ToBeScoutedCharacters);// 0x253e23bfa041
	void BroadcastRescueBtnVisibility();// 0x253d23bfa041
	void BroadcastRequsetPickupEntryPlayAnimCustom(Object* InCustomObj);// 0x253c23bfa041
	void BroadcastRequsetPickupEntryPlayAnim(const int InThisID);// 0x253b23bfa041
	void BroadcastProfessionFunctionalChanged(const bool bEnabled);// 0x253a23bfa041
	void BroadcastPlayerFlagDisplayChanged(bool bDisplay);// 0x253923bfa041
	void BroadcastPickupToggleChanged();// 0x253823bfa041
	void BroadcastPickupEntryPlayAnim(const float InAnimTime);// 0x253723bfa041
	void BroadcastOnTeammateStateChangedDelegate();// 0x253623bfa041
	void BroadcastOnTeammateRebirth();// 0x253523bfa041
	void BroadcastOnStopRescueTeammateCountDown(const int InTextId);// 0x253423bfa041
	void BroadcastOnStopInteractionCountDown(out const CountDownInfo InCountInfo);// 0x253323bfa041
	void BroadcastOnStopCountDownDelegate(const int InTextId);// 0x253223bfa041
	void BroadcastOnStartReviveItemRecycleCountDown(const int CurrentTime, const int DurationTime);// 0x253123bfa041
	void BroadcastOnStartRescueTeammateCountDown(out const CountDownInfo InCountDownInfo);// 0x253023bfa041
	void BroadcastOnStartInteractionCountDown(out const CountDownInfo InCountInfo);// 0x252f23bfa041
	void BroadcastOnStartCountDownDelegate(out const CountDownInfo InCountDownInfo);// 0x252c23bfa041
	void BroadcastOnSkydiveFlyStateChanged();// 0x252b23bfa041
	void BroadcastOnShowGameNoticeDelegate(const int InNoticeID, out const HUDNoticeParams InNoticeParams);// 0x252923bfa041
	void BroadcastOnSetTreasureBoxActorDelegate(Actor* InActor);// 0x252823bfa041
	void BroadcastOnSetPickupSwitchDelegate(const enum InType, const bool InFlag);// 0x252723bfa041
	void BroadcastOnSetAirdropBoxActorDelegate(Actor* InActor);// 0x252623bfa041
	void BroadcastOnSetActiveOpenBoxProgressDelegate(const bool Inactive);// 0x252523bfa041
	void BroadcastOnSetActiveOpenBoxBtnDelegate(const bool Inactive);// 0x252423bfa041
	void BroadcastOnRightMouseButtonDownEvent();// 0x252323bfa041
	void BroadcastOnReviveWorldMarkPlayAnim(SolarPlayerState* InPlayerState);// 0x252223bfa041
	void BroadcastOnReviveWillBeDisabledHint(const int HintDuration);// 0x252123bfa041
	void BroadcastOnReviveStateChanged(SolarPlayerState* RevivingMeTeammatePlayer);// 0x252023bfa041
	void BroadcastOnReviveDisabledHint();// 0x251f23bfa041
	void BroadcastOnRemoveReviveWorldMark(SolarPlayerState* InPlayerState);// 0x251e23bfa041
	void BroadcastOnRemoveAllReviveWorldMark();// 0x251d23bfa041
	void BroadcastOnRefreshBackpackWeaponPartDelegate();// 0x251c23bfa041
	void BroadcastOnRefreshBackpackWeaponDelegate();// 0x251b23bfa041
	void BroadcastOnRefreshBackpackItemDelegate();// 0x251a23bfa041
	void BroadcastOnRefreshBackpackEquipDelegate();// 0x251923bfa041
	void BroadcastOnOverlapElectricShopDelegate(const bool InOverlap);// 0x251823bfa041
	void BroadcastOnOnCreateReviveWorldMark(SolarPlayerState* InPlayerState, out const Vector InWorldLoc);// 0x251723bfa041
	void BroadcastOnInteractionTriggerDisappear(out const InteractionTriggerInfo TriggerInfo);// 0x251623bfa041
	void BroadcastOnInteractionTriggerAppear(out const InteractionTriggerInfo TriggerInfo);// 0x251423bfa041
	bool BroadcastOnInteractEvent();// 0x251323bfa041
	void BroadcastOnInitElectricShopDelegate(SolarCharacter* InCharcter);// 0x251223bfa041
	void BroadcastOnHideTreasureBoxUIDelegate(const int64 InThisID);// 0x251123bfa041
	void BroadcastOnHideAirdropBoxUIDelegate(const int64 InThisID);// 0x251023bfa041
	void BroadcastOnGameUserPickupSettingChanged();// 0x250f23bfa041
	void BroadcastOnEShopWeaponUpgradeDelegate(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x250e23bfa041
	void BroadcastOnEShopWeaponChangeDelegate(SolarCharacter* InCharacter);// 0x250d23bfa041
	void BroadcastOnEShopSlotWeaponUpgradeDelegate(int InWeaponSlot);// 0x250c23bfa041
	void BroadcastOnEShopShieldUpgradeDelegate(SolarCharacter* InCharacter);// 0x250b23bfa041
	void BroadcastOnEShopPurchaseSuccessDelegate(int InProductID, SolarCharacter* InCharacter);// 0x250a23bfa041
	void BroadcastOnEShopPoolRefreshDelegate(SolarElectricShop* InElectricShop);// 0x250923bfa041
	void BroadcastOnEShopItemRefreshDelegate(SolarElectricShop* InElectricShop);// 0x250823bfa041
	void BroadcastOnEShopItemCDRefreshDelegate(SolarElectricShop* InElectricShop);// 0x250723bfa041
	void BroadcastOnBindPowerBarDelegates();// 0x250623bfa041
	void BroadcastOnBindItemPanelDelegates();// 0x250523bfa041
	void BroadcastOnBindHPPanelDelegates();// 0x250423bfa041
	void BroadcastOnBattleControlTeammateStateRemoved();// 0x250323bfa041
	void BroadcastOnAirdropProgressChangeDelegate(AirDropTreasureBox* InAirdropBox);// 0x250223bfa041
	void BroadcastOnAirdropCharChangeDelegate(AirDropTreasureBox* InAirdropBox);// 0x250123bfa041
	void BroadcastMigrateAccountVisibilityRequestChanged(const bool bVisible);// 0x250023bfa041
	void BroadcastMaxShieldValueUpdate(const float MaxShieldValue);// 0x24ff23bfa041
	void BroadcastJoyStickSprintStateReset();// 0x24fe23bfa041
	void BroadcastJoyStickResetAll();// 0x24fd23bfa041
	void BroadcastJoyStickInputReset();// 0x24fc23bfa041
	void BroadcastItemDiscarded(const int InItemID, const int InTotalCount);// 0x24fb23bfa041
	void BroadcastHJetTimesChargingProgress(float Value, float Percent);// 0x24fa23bfa041
	void BroadcastHJetForbiddenChanged(enum Types, bool bAdded);// 0x24f823bfa041
	void BroadcastHJetCDStateChanged(bool bCD);// 0x24f723bfa041
	void BroadcastFireButtonsReset();// 0x24f623bfa041
	bool BroadcastEnemyShieldValueChanged(const enum WidgetState, const float InCurValue, const float InChangeValue, FString InSolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x24f523bfa041
	bool BroadcastEnemyShieldChanged(FString InSolarPlayerID, const float CurValue, const float MaxValue, const int QualityColor, const bool bAdvancedShield);// 0x24f423bfa041
	void BroadcastEndBackpackDragDrop(const bool bVisible);// 0x24f323bfa041
	void BroadcastDriveCustomizeOpened(const int InLayoutType);// 0x24f223bfa041
	void BroadcastDriveCustomizeClosed();// 0x24f123bfa041
	void BroadcastDamagingActorsChange();// 0x24f023bfa041
	void BroadcastCustomizeVisibilityRequestChanged(const bool bVisible);// 0x24ef23bfa041
	bool BroadcastCheckPickupItemVaild(const int InThisID);// 0x24ee23bfa041
	void BroadcastCharacterRescueStateChanged(const byte NewRescueState);// 0x24ed23bfa041
	void BroadcastCharacterLevelExpChanged(const int NewLevel, const float NewExpRatio);// 0x24ec23bfa041
	void BroadcastCharacterHPState();// 0x24eb23bfa041
	void BroadcastCharacterGainExp(const int ExpAdded);// 0x24ea23bfa041
	void BroadcastBuyResurrectBtnVisibility();// 0x24e923bfa041
	void BroadcastBattleUpgradeEffect(const enum EffectType, const int ParamSum);// 0x24e823bfa041
	void BroadcastBattleModeChanged(byte InModeType);// 0x24e723bfa041
	void BroadcastBattleHUDVisibilityChanged(const bool bVisible);// 0x24e623bfa041
	void BroadcastBackpackTakesPickup(out const Vector2D NewPosition);// 0x24e523bfa041
	void BroadcastBackpackReleasesPickup();// 0x24e423bfa041
	void BroadcastBackpackModeChanged(const int NewMode);// 0x24e323bfa041
	void BroadcastAimingEnemy(SolarCharacter* InEnemy);// 0x24e223bfa041
	void BoolUIInteractDelegate__DelegateSignature(bool bValue);// 0x24e123bfa041
	void BoolGameModeLuaDelegate__DelegateSignature(bool bValue);// 0x24e023bfa041
	void BoolCharacterLuaDelegate__DelegateSignature(bool bValue);// 0x24df23bfa041
	void BindLocalSpectateDelegates(SolarSpectateInfo* SpectateInfo);// 0x24de23bfa041
	void AddItemToPickup(Object* InCardItem);// 0x24dd23bfa041
	void ActionWheelCommandExecDelegate__DelegateSignature();// 0x24dc23bfa041
	void ActionWheelCommandCancelDelegate__DelegateSignature();// 0x24db23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CountDownInfo
	int TextID;//[Offset: 0x0, Size: 0x4]
	float Time;//[Offset: 0x4, Size: 0x4]
	float RemainingTime;//[Offset: 0x8, Size: 0x4]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int PassiveTextID;//[Offset: 0x10, Size: 0x4]
	GameplayTag GameplayTag;//[Offset: 0x14, Size: 0x8]
	int ContributorCharacterId;//[Offset: 0x40, Size: 0x4]
	enum State;//[Offset: 0x44, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SideAttributeSet.FastArraySerializerItem
	FString SideName;//[Offset: 0x10, Size: 0x10]
	SideAttribute SideTreatmentDurationReductionMultiple;//[Offset: 0x20, Size: 0x18]
	SideAttribute SideShieldChargeDurationReductionMultiple;//[Offset: 0x38, Size: 0x18]
	SideAttribute SideBigShieldChargeDurationReductionMultiple;//[Offset: 0x50, Size: 0x18]
	SideAttribute SideItemDiscountMultiple;//[Offset: 0x68, Size: 0x18]
	SideAttribute SideItemAdditionMultiple;//[Offset: 0x80, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: SideAttribute
	float Value;//[Offset: 0x0, Size: 0x4]
	SCMPlayerState*[] Contributors;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: HUDNoticeParams
	<FString,FString> Params;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: KillInfo
	FString KillerPlayerId;//[Offset: 0x0, Size: 0x10]
	int KillerSkinID;//[Offset: 0x10, Size: 0x4]
	int KillerTeamID;//[Offset: 0x14, Size: 0x4]
	FString KillerName;//[Offset: 0x18, Size: 0x10]
	int KillerFlag;//[Offset: 0x28, Size: 0x4]
	FString VictimPlayerID;//[Offset: 0x30, Size: 0x10]
	int VictimSkinID;//[Offset: 0x40, Size: 0x4]
	int VictimTeamID;//[Offset: 0x44, Size: 0x4]
	FString VictimName;//[Offset: 0x48, Size: 0x10]
	int VictimFlag;//[Offset: 0x58, Size: 0x4]
	FString KillIcon;//[Offset: 0x60, Size: 0x10]
	FString KillLeaderID;//[Offset: 0x70, Size: 0x10]
	enum KillParamsCompressInfo;//[Offset: 0x80, Size: 0x2]
	int KillNum;//[Offset: 0x84, Size: 0x4]
	int WeaponSkinID;//[Offset: 0x88, Size: 0x4]
	byte KillerVipType;//[Offset: 0x8c, Size: 0x1]
	byte VictimVipType;//[Offset: 0x8d, Size: 0x1]
	enum KillerInputType;//[Offset: 0x8e, Size: 0x1]
	enum VictimInputType;//[Offset: 0x8f, Size: 0x1]
	bool bDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ItemCountsList
	<enum,int> Type2IntMap;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: InteractionTriggerInfo
	GameplayTag GameplayTag;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarInputSubsystem.WorldSubsystem.Subsystem.Object
	bool TestInputActionFlag(enum InFlagBit);// 0x4eb823bfa041
	void RemoveInputActionFlag(enum InFlagBit);// 0x4eb723bfa041
	void OnInputMethodChanged(enum InInputType);// 0x4eb623bfa041
	void OnControllerConnectionChange(bool bIsConnected, int UserId, int ControllerId);// 0x4eb523bfa041
	void AddInputActionFlag(enum InFlagBit);// 0x4eb423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WorldSubsystem.Subsystem.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlayersHPModel.SolarCharactersModelBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCharactersModelBase.Object
	<FString,SingleCharacterModelBase*> PlayersModel;//[Offset: 0x28, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlayersShieldModel.SolarCharactersModelBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTeamInfoModel.Object
	delegate OnTeamInfoReplicated;//[Offset: 0x40, Size: 0x10]
	void SimpleTeamInfoDelegate__DelegateSignature(SolarTeamInfo* PreTeamInfo, SolarTeamInfo* NowTeamInfo);// 0x279f23bfa041
	void OnMyTeamInfoReplicated(SolarTeamInfo* InPreTeamInfo, SolarTeamInfo* InMyTeamInfo);// 0x279e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SolarUnArmWeapon_C.SolarUnArmWeapon.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGroundPreviewActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x268, Size: 0xb8]
	float SpawnOffset;//[Offset: 0x320, Size: 0x4]
	SphereComponent* SphereComponent;//[Offset: 0x328, Size: 0x8]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x330, Size: 0x10]
	SoftObjectPath OutlineMatPath;//[Offset: 0x340, Size: 0x18]
	byte[] MarkedTeamIdList;//[Offset: 0x360, Size: 0x10]
	int WeaponLevel;//[Offset: 0x370, Size: 0x4]
	enum WeaponType;//[Offset: 0x374, Size: 0x1]
	int FireModeNameLocalizationID;//[Offset: 0x378, Size: 0x4]
	SlateBrush TriggerIcon;//[Offset: 0x380, Size: 0x98]
	int weaponid;//[Offset: 0x418, Size: 0x4]
	bool bIsItemWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	bool bIsSummonVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 0x1]
	bool bIsAntiVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 0x1]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x420, Size: 0x8]
	void UnMarkThisItem(byte TeamID);// 0x4dc423bfa041
	void SetItemData(out const SolarItemData _ItemData);// 0x4dc323bfa041
	void OnServerPawned();// 0x4dc223bfa041
	void OnRep_ItemDataChange();// 0x4dc123bfa041
	void NotifyThisItemWasPickedUp();// 0x4dc023bfa041
	void MarkThisItem(byte TeamID);// 0x4dbf23bfa041
	int GetQuality();// 0x4dbe23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SI_ElectricboxB_C.ElectronicTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x610, Size: 0x8]
	StaticMeshComponent* 3DIcon;//[Offset: 0x618, Size: 0x8]
	float OpenAnimation_OpenCurve_D871E75F4C49C735C04C6C90FE58E949;//[Offset: 0x620, Size: 0x4]
	byte OpenAnimation__Direction_D871E75F4C49C735C04C6C90FE58E949;//[Offset: 0x624, Size: 0x1]
	TimelineComponent* OpenAnimation;//[Offset: 0x628, Size: 0x8]
	void OpenAnimation__FinishedFunc();// 0x4040d625402125
	void OpenAnimation__UpdateFunc();// 0x2dffbd23eea02e
	void PlayOpenAnimation();// 0xffffff8f23bfa000
	void ExecuteUbergraph_BP_SI_ElectricboxB(int EntryPoint);// 0xffffff8f23bfa000
<----------Generated by SSpawner v1.0.2---------->


Class: ElectronicTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	FString OnFinishSpawnLoopAudio;//[Offset: 0x5d0, Size: 0x10]
	FString OnStopLoopAudio;//[Offset: 0x5e0, Size: 0x10]
	FString OnOpenAudio;//[Offset: 0x5f0, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x600, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	void Stop();// 0x67a423bfa041
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x67a323bfa041
	void SetTimelineLengthMode(byte NewLengthMode);// 0x67a223bfa041
	void SetTimelineLength(float NewLength);// 0x67a123bfa041
	void SetPlayRate(float NewRate);// 0x67a023bfa041
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x679f23bfa041
	void SetNewTime(float NewTime);// 0x679e23bfa041
	void SetLooping(bool bNewLooping);// 0x679d23bfa041
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x679c23bfa041
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x679b23bfa041
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x679a23bfa041
	void ReverseFromEnd();// 0x679923bfa041
	void Reverse();// 0x679823bfa041
	void PlayFromStart();// 0x679723bfa041
	void Play();// 0x679623bfa041
	void OnRep_Timeline();// 0x679523bfa041
	bool IsReversing();// 0x679423bfa041
	bool IsPlaying();// 0x679323bfa041
	bool IsLooping();// 0x679223bfa041
	float GetTimelineLength();// 0x679123bfa041
	float GetPlayRate();// 0x679023bfa041
	float GetPlaybackPosition();// 0x678f23bfa041
	bool GetIgnoreTimeDilation();// 0x678e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_PlayerState_BattleRoyaleMap01_C.BP_PlayerState_BattleRoyale_C.BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BP_PlayerState_BattleRoyale_C.BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc60, Size: 0x8]
	BPC_GM_BattleRoyal_C* BPC_GM_BattleRoyal;//[Offset: 0xc68, Size: 0x8]
	BPC_BuyResurrection_C* BPC_BuyResurrection;//[Offset: 0xc70, Size: 0x8]
	SolarUserWidget* DeathUI;//[Offset: 0xc78, Size: 0x8]
	byte PlayerBattleState;//[Offset: 0xc80, Size: 0x1]
	BP_Logic_BattleRoyale_C* MainLogic;//[Offset: 0xc88, Size: 0x8]
	delegate OnRequestReplied;//[Offset: 0xc90, Size: 0x10]
	int Intervened By AI;//[Offset: 0xca0, Size: 0x4]
	bool bFirstDive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca4, Size: 0x1]
	void GetResurrectLocation(out Vector Location, bool Temp_bool_Variable, enum Temp_byte_Variable, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger_Battle_Royale, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetFlyLocation_Location, Vector CallFunc_GetResurrectLocation_Location, Vector K2Node_Select_Default, Vector K2Node_Select_Default);// 0x130e523e7a001
	bool PlayerCanRebirthBlueprint(bool Temp_bool_Variable, bool Temp_bool_Variable, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_PlayerCanRebirthBlueprint_ReturnValue, bool CallFunc_IsPlayerReviving_ReturnValue, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, bool K2Node_Select_Default);// 0x130e623e7a001
	bool PlayerIsResurrecting();// 0x132ca23e7a001
	bool IsPlayerWaitingForTeammatesHelp(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x132c923e7a001
	static void GetItemData(int ItemID, out bool Valid, out int ID, out int Quality, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_ItemInBattle CallFunc_TryGetRowData_ReturnValue);// 0x132c823e7a001
	static void GetPlayerChestOpen(out FString Output, FString[] OutputString, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] K2Node_MakeArray_Array, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_GetItemData_Valid, int CallFunc_GetItemData_ID, int CallFunc_GetItemData_Quality, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x132c723e7a001
	void GetSinglePlayerItem(int ItemID, out bool HasItem, out int count, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByID_ItemData, bool CallFunc_GetBackpackItemDataByID_ReturnValue);// 0x132c623e7a001
	void GetWeaponPartData(int ItemID, out bool Valid, out int ID, out int Quality, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_WeaponParts CallFunc_GetRowData_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x132c523e7a001
	static void GetPlayerItems(out FString Output, FString[] OutputString, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] K2Node_MakeArray_Array, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetSinglePlayerItem_HasItem, int CallFunc_GetSinglePlayerItem_Count, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x132c423e7a001
	static void Get Player Accessories(out FString Output, FString[] OutputString, <IntPoint,int> Accessories, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, FString CallFunc_JoinStringArray_ReturnValue, int Temp_int_Variable, IntPoint[] CallFunc_Map_Keys_Keys, IntPoint CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_NotEqual_IntInt_ReturnValue, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_IsValid_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, int Temp_int_Variable, IntPoint K2Node_MakeStruct_IntPoint, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x132c323e7a001
	static void GetPlayerDataTrace(out <FString,FString> Map, FString CallFunc_GetPlayerItems_Output, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Get_Player_Accessories_Output, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_GetCharacterLocation_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, <FString,FString> K2Node_MakeMap_Map);// 0x132c223e7a001
	void Set Intervened By AI(int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue);// 0x132c123e7a001
	void GetNearestPos(byte Index, Vector Nearest, float Distance, Vector CLocation, byte Temp_byte_Variable, class Actor Temp_class_Variable, class Actor Temp_class_Variable, class Actor Temp_class_Variable, class Actor K2Node_Select_Default, Actor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, Actor* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x132c023e7a001
	void GetMainLogic(out BP_Logic_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x132bf23e7a001
	void OnRep_PlayerBattleState(bool CallFunc_IsServer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x132be23e7a001
	void [s]SetPlayerState(byte State);// 0x132bd23e7a001
	void ReceiveBeginPlay();// 0x132e523e7a001
	void Event_RespondReconnection();// 0x132bc23e7a001
	void ResurrectionStateChange(enum NewState);// 0x132bb23e7a001
	void RequestNearestPos(byte Type);// 0x132ba23e7a001
	void OnNearestPosReceived(byte Type, Vector Pos);// 0x1539023bfa041
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x132e423e7a001
	void DelayAndBeginSpectate();// 0x132b823e7a001
	void ExecuteUbergraph_BP_PlayerState_BattleRoyale(int EntryPoint, bool CallFunc_BeginSpectateOtherPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, bool CallFunc___A_Bind_On_Basic_System_Ready_bReady, bool CallFunc_IsServer_ReturnValue, enum K2Node_CustomEvent_NewState, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, byte K2Node_CustomEvent_Type, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Pos, int K2Node_Event_GainedExp, int K2Node_Event_CurrentExp, int K2Node_Event_TotalExp, enum K2Node_Event_BehaviorType, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x14efa23e7a008
	void OnRequestReplied__DelegateSignature(byte Type, Vector Pos);// 0x132b523e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb20, Size: 0x8]
	BPC_GM_Common_C* BPC_GM_Common;//[Offset: 0xb28, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xb30, Size: 0x8]
	Vector[] DeathLocations;//[Offset: 0xb38, Size: 0x10]
	Vector[] LandLocations;//[Offset: 0xb48, Size: 0x10]
	int ResurrectTime;//[Offset: 0xb58, Size: 0x4]
	Vector ResurrectLocation;//[Offset: 0xb5c, Size: 0xc]
	class SolarUserWidget* ResurrectUI;//[Offset: 0xb68, Size: 0x28]
	S_ResurrectInfo ResurrectOptions;//[Offset: 0xb90, Size: 0x5]
	delegate OnResurrectionBegin;//[Offset: 0xb98, Size: 0x10]
	delegate OnResurrectionFinished;//[Offset: 0xba8, Size: 0x10]
	UI_Resurrect_C* ResurrectUIObj;//[Offset: 0xbb8, Size: 0x8]
	byte ResurrectType;//[Offset: 0xbc0, Size: 0x1]
	bool bIsResurrecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc1, Size: 0x1]
	BP_Logic_Framework_C* Logic;//[Offset: 0xbc8, Size: 0x8]
	bool bShouldSettle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 0x1]
	UI_MapMark_ReviveTeammates_C*[] UI_MapMark_ReviveTeammatesArr;//[Offset: 0xbd8, Size: 0x10]
	ActorMarkBase* DeathBoxMark;//[Offset: 0xbe8, Size: 0x8]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0xbf0, Size: 0x8]
	TimerHandle LandedDetectionHandel;//[Offset: 0xbf8, Size: 0x8]
	MapMarkBase*[] DeathBoxMiniMapMark;//[Offset: 0xc00, Size: 0x10]
	delegate OnResurrectTimeChange;//[Offset: 0xc10, Size: 0x10]
	int AiCompCd;//[Offset: 0xc20, Size: 0x4]
	ActorMarkBase* RebirthedDeathBoxMark;//[Offset: 0xc28, Size: 0x8]
	bool bIsReviveSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc30, Size: 0x1]
	BP_DI_DeathBoxA_TreasureBox_C* DeathBoxRef;//[Offset: 0xc38, Size: 0x8]
	Vector DeathBoxLoc;//[Offset: 0xc40, Size: 0xc]
	byte CharacterHealthState;//[Offset: 0xc4c, Size: 0x1]
	enum ResurrectMethod;//[Offset: 0xc4d, Size: 0x1]
	Vector TempDeathBoxLoc;//[Offset: 0xc50, Size: 0xc]
	FString GetModuleName();// 0xffffff8f23bfa000
	void OnResurrectTimeChanged(int ResurrectTime);// 0x1335c23e7a001
	void GetResurrectLocation(out Vector Location);// 0x132f823e7a001
	void Remove All Revive Mark(SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x132f723e7a001
	Vector GetDeathBoxLocation(BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetDeathBoxLoc_ReturnValue);// 0x132f623e7a001
	bool PlayerCanRebirthBlueprint(CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess);// 0x132f523e7a001
	void OnRep_CharacterHealthState(GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess);// 0x132f423e7a001
	void Handling Is Resurrecting(bool CallFunc_IsServer_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue);// 0x132f323e7a001
	static void GetSpecialHitTypeArray(out int[] NewParam, byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int[] K2Node_MakeArray_Array);// 0x132f223e7a001
	void Set Death Box Ref(BP_DI_DeathBoxA_TreasureBox_C* InDeathBox, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x132f123e7a001
	void OnRep_bIsReviveSkydiving(bool CallFunc_IsServer_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x132f023e7a001
	void Remove Punctuation(bool bKeepRebornLine, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1332c23e7a001
	static int GetExpByBehavior(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage, int Multiplier, int ID, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, int[] CallFunc_GetSpecialHitTypeArray_NewParam, bool CallFunc_Array_Contains_ReturnValue, int Temp_int_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_Variable, int K2Node_Select_Default, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, const SolarTablesData_Behavior CallFunc_GetRowData_ReturnValue, const SolarTablesData_EscapeExp CallFunc_GetRowData_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_ItemBehavior CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue);// 0x132ee23e7a001
	void IsAiCompCdClear(out bool Result, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0xfffffffeed99da40
	void OnRep_bIsResurrecting();// 0x132ec23e7a001
	static void Create Punctuation(Vector InputPin, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, UI_WorldMark_ReviveTeammates_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates, bool K2Node_DynamicCast_bSuccess, Transform CallFunc_Conv_VectorToTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SI_RebornLine_C* CallFunc_FinishSpawningActor_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, byte CallFunc_GetTeamID_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x132eb23e7a001
	void GetLogicBase(out BP_Logic_Framework_C* Output_Get, bool CallFunc_IsValid_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess);// 0x132ea23e7a001
	void OnRep_ResurrectTime(bool CallFunc_IsServer_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x132e923e7a001
	void Death Cleanup UI(PlayerController* CallFunc_GetPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue);// 0x132e723e7a001
	void Get Resurrect UI(out UI_Resurrect_C* Output_Get, bool CallFunc_IsValid_ReturnValue, UserWidget* CallFunc_ShowSolarWidget_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, UI_Resurrect_C* K2Node_DynamicCast_AsUI_Resurrect, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess, UI_Resurrect_C* CallFunc_GetResurrectByItemUI_Output_Get);// 0x1539123bfa041
	void GetLastDeathLocation(out Vector Output, int CallFunc_Array_LastIndex_ReturnValue, Vector CallFunc_Array_Get_Item);// 0x132e623e7a001
	void OnCharacterLanded();// 0x132e323e7a001
	void OnPlayerInteract(byte InteractType);// 0x132e223e7a001
	void ReceiveBeginPlay();// 0x132e123e7a001
	void OnCharacterEjectStateChanged(byte State, SolarCharacter* TargetCharacter);// 0x132e023e7a001
	void OnTimeCut();// 0x132df23e7a001
	void [s]RequestResurrectInTime(int Time, byte Type, Vector Location, S_ResurrectInfo options, bool bUseParamZ);// 0x132de23e7a001
	void [c]ShowResurrectUI(int Time, byte Type);// 0x132dd23e7a001
	void DropPickableItem(Object* Item);// 0x132dc23e7a001
	void PickupPickableItem(Object* Item);// 0x132db23e7a001
	void Event_CreateDeathBoxMark();// 0x132da23e7a001
	void Event_OnResEnd(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x132d923e7a001
	void AiCompCountDown();// 0x132d823e7a001
	void ResetAiCompTimer(int Time);// 0x132d723e7a001
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x132d623e7a001
	void [C]OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum Type);// 0x132d523e7a001
	void Event_EnterSkydiveFly();// 0x132d423e7a001
	void OnInteractBtnHit(Object* Publisher, Object* Payload, out const FString[] MetaData);// 0x132d323e7a001
	void [S] Request Actor Removal(Actor* Target Actor);// 0x132d223e7a001
	void OnOtherPlayerStopSpectateMyTeam(SolarSpectateInfo* InSpectateInfo);// 0x132e823e7a001
	static void ExecuteUbergraph_BP_PlayerState_Framework(int EntryPoint, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, int Temp_int_Variable, UI_WorldMark_ReviveTeammatesDeathbox_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates_Deathbox, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, byte K2Node_CustomEvent_InteractType, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, int Temp_int_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_Add_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Location, S_ResurrectInfo K2Node_CustomEvent_Options, bool K2Node_CustomEvent_bUseParamZ, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Vector K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, UI_Resurrect_C* CallFunc_Get_Resurrect_UI_Output_Get, interface classNone K2Node_DynamicCast_AsI_Resurrect, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsLocalPlayerCameraFocusingMe_ReturnValue, int Temp_int_Variable, Object* K2Node_CustomEvent_Item, Object* K2Node_CustomEvent_Item, interface classNone K2Node_DynamicCast_AsI_Pickable_Item, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsI_Pickable_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsServer_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, int Temp_int_Variable, byte K2Node_CustomEvent_ResurrectType, BP_PlayerState_Framework_C* K2Node_CustomEvent_TargetPlayer, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_CustomEvent_Time, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int K2Node_Event_GainedExp, int K2Node_Event_CurrentExp, int K2Node_Event_TotalExp, enum K2Node_Event_BehaviorType, int K2Node_CustomEvent_GainedExp, int K2Node_CustomEvent_CurrentExp, int K2Node_CustomEvent_TotalExp, enum K2Node_CustomEvent_Type, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, Object* K2Node_CustomEvent_Publisher, Object* K2Node_CustomEvent_Payload, const FString[] K2Node_CustomEvent_Metadata, enum Temp_byte_Variable, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int K2Node_Select_Default, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, const SolarTablesData_QuickVoice CallFunc_GetRowData_ReturnValue, Actor* K2Node_CustomEvent_Target_Actor, enum CallFunc_GetBuildConfiguration_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetDeathBoxLoc_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_SI_RebornLine_C* CallFunc_FinishSpawningActor_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, SolarSpectateInfo* K2Node_Event_InSpectateInfo, Vector CallFunc_GetResurrectLocation_Location, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_ResurrectCharacter_ReturnValue, float Temp_float_Variable, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, float Temp_float_Variable, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, byte Temp_byte_Variable, float K2Node_Select_Default);// 0x132b423e7a001
	void OnResurrectTimeChange__DelegateSignature(int Time);// 0x1529a23e7a008
	void OnResurrectionFinished__DelegateSignature(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x70a8b0473427a000
	void OnResurrectionBegin__DelegateSignature(int Time, byte Type, Vector Location, S_ResurrectInfo options);// 0x2e26c1708d842e9d
<----------Generated by SSpawner v1.0.2---------->


Class: BPC_GM_BattleRoyal_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	<byte,bool> ModeEventValid;//[Offset: 0xb8, Size: 0x50]
	BP_Logic_BattleRoyale_C* MainLogic;//[Offset: 0x108, Size: 0x8]
	byte CommandType;//[Offset: 0x110, Size: 0x1]
	FString[] CommandParams;//[Offset: 0x118, Size: 0x10]
	void None(Vector NewLocalVar, AirlineData AirlineData, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, SolarCharacter*[] CallFunc__A_GetCharacters_Characters, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, SolarCharacter* CallFunc_Array_Get_Item, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, bool CallFunc_ResurrectCharacter_ReturnValue, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue, BP_Mode_BattleRoyale_C* CallFunc_GetBattleRoyaleMode_AsBP_SCM_Battle_Royale, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue, AirlineData K2Node_MakeStruct_AirlineData, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x130f523e7a001
	BP_Logic_BattleRoyale_C* GetMainLogic(bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x130f423e7a001
	void SetModeEventValid(byte EventType, bool IsValid);// 0x130f323e7a001
	void [S]SetModeEvent(byte EventType, bool IsValid);// 0x1539323bfa041
	void [c]ExecuteGMCommand(byte Type, out const FString[] Params);// 0x130f123e7a001
	void ExecuteUbergraph_BPC_GM_BattleRoyal(int EntryPoint, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte K2Node_CustomEvent_EventType, bool K2Node_CustomEvent_IsValid, enum CallFunc__S_GetBuildPackageType_____, byte Temp_byte_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, FString CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_ToBool_bool, byte Temp_byte_Variable, bool K2Node_Select_Default, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, bool CallFunc_MakeLiteralBool_ReturnValue, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, byte Temp_byte_Variable, int CallFunc_Conv_StringToInt_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, bool K2Node_SwitchEnum_CmpSuccess, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, byte K2Node_CustomEvent_Type, const FString[] K2Node_CustomEvent_Params, byte Temp_byte_Variable, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, byte K2Node_Select_Default);// 0x1539423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: AirlineData
	float AirlineHeight;//[Offset: 0x0, Size: 0x4]
	float AirlineSpeed;//[Offset: 0x4, Size: 0x4]
	Vector2D StartPoint;//[Offset: 0x8, Size: 0x8]
	Vector2D EndPoint;//[Offset: 0x10, Size: 0x8]
	Vector2D RealStartPoint;//[Offset: 0x18, Size: 0x8]
	Vector2D RealEndPoint;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Logic_BattleRoyale_C.BP_Logic_Framework_C.CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1b0, Size: 0x8]
	int WaitTime;//[Offset: 0x1b8, Size: 0x4]
	PlayerStart*[] WaitinglandStart;//[Offset: 0x1c0, Size: 0x10]
	BP_GameState_BattleRoyale_C* GameState;//[Offset: 0x1d0, Size: 0x8]
	delegate OnGoInToBattleState;//[Offset: 0x1d8, Size: 0x10]
	bool bWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	SolarTablesData_WarmGameMode WarmGameInfo;//[Offset: 0x1f0, Size: 0x68]
	DataTable* BattleTimeline;//[Offset: 0x258, Size: 0x8]
	<int,S_EventList_BattleRoyal> EventList;//[Offset: 0x260, Size: 0x50]
	BP_MapInfoComponent_C* MapInfo;//[Offset: 0x2b0, Size: 0x8]
	int ShrinkIndex;//[Offset: 0x2b8, Size: 0x4]
	BP_BattleRoylePoisonCircle_C* PoisonCircle;//[Offset: 0x2c0, Size: 0x8]
	BP_SolarBombingManager_C* BoomingManager;//[Offset: 0x2c8, Size: 0x8]
	byte ModeBattleState;//[Offset: 0x2d0, Size: 0x1]
	Vector[] AirDropPosHistoryRecord;//[Offset: 0x2d8, Size: 0x10]
	int AILevel;//[Offset: 0x2e8, Size: 0x4]
	int DSTime;//[Offset: 0x2ec, Size: 0x4]
	<byte,bool> ModeEventValid;//[Offset: 0x2f0, Size: 0x50]
	int TotalPlayer;//[Offset: 0x340, Size: 0x4]
	BP_ReviveItemManger_BattleRoyale_C* ReviveManager;//[Offset: 0x348, Size: 0x8]
	BP_Formula_BattleRoyale_C* BR Formula Manager;//[Offset: 0x350, Size: 0x8]
	int TeamMemberCount;//[Offset: 0x358, Size: 0x4]
	BehaviorTree* BotBehaviorTree;//[Offset: 0x360, Size: 0x8]
	SCMPlayerState*[] PlayersQuitOnWaitingLand;//[Offset: 0x368, Size: 0x10]
	int PlayerCountMax;//[Offset: 0x378, Size: 0x4]
	bool bCanSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	class BP_BattleRoylePoisonCircle_C* PoisonCircleClass;//[Offset: 0x380, Size: 0x8]
	class SolarBotAIController* AIController;//[Offset: 0x388, Size: 0x8]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x390, Size: 0x8]
	float[] RadiusArr;//[Offset: 0x398, Size: 0x10]
	int AILevelMax;//[Offset: 0x3a8, Size: 0x4]
	delegate BattleStateChanged;//[Offset: 0x3b0, Size: 0x10]
	int PlayerCountBattleStart;//[Offset: 0x3c0, Size: 0x4]
	int ChestSpawnerID;//[Offset: 0x3c4, Size: 0x4]
	BPC_AiManagerBattleRoyale_C* AiManager;//[Offset: 0x3c8, Size: 0x8]
	void PresettleAll(int TeamRank, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue);// 0x1336f23e7a001
	static void DealTeammateAISettle(SolarPlayerState* Player, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, FString CallFunc_Conv_TextToString_ReturnValue, const byte[] K2Node_MakeArray_Array, bool CallFunc_SetDataBool_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x1335b23e7a001
	void Custom Room Start(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x1336e23e7a001
	static void SendItemToPlayer(SolarPlayerState* Player, out const <int,int> ItemMap, int[] CallFunc_Map_Keys_Keys, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Left_ReturnValue, enum CallFunc_AddBackpackItem_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x1335a23e7a001
	static void GetVehicleDataTrace(out const <FString,FString> Map, int NewLocalVar, <int,int> VehicleData, FString[] CarNum, int Temp_int_Array_Index_Variable, SolarVehicleSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, Actor*[] CallFunc_GetActiveVehicleList_OutActiveVehicles, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_Array_Get_Item, SolarVehiclePawn* K2Node_DynamicCast_AsSolar_Vehicle_Pawn, bool K2Node_DynamicCast_bSuccess, class Actor CallFunc_GetObjectClass_ReturnValue, int CallFunc_GetVehicleTypeID_ReturnValue, Actor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_JoinStringArray_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Map_Contains_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1335923e7a001
	void Init Poison Circle(out BP_MapInfoComponent_C* MapInfo, bool CallFunc_IsValid_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, Vector CallFunc_Get_Safe_Area_Center_Pos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool Temp_bool_Variable, Vector CallFunc_MakeVector_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, int CallFunc__S_GetMapIDByName_MapID, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_BattleRoylePoisonCircle_C* CallFunc_FinishSpawningActor_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector K2Node_Select_Default);// 0x1335823e7a001
	void GetAiManager(out BPC_AiManagerBattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x1335723e7a001
	void SetSkillStateByBattleState(byte Temp_byte_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, bool K2Node_SwitchEnum_CmpSuccess, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, S_SkillState K2Node_Select_Default, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x1335623e7a001
	int Get Shrink Index(bool Temp_bool_Variable, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, int CallFunc_Get_Safe_Area_Centers_Len_Len, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int K2Node_Select_Default);// 0x1335523e7a001
	static void TryPushBattleState(byte TargetState, bool ForcePush, byte StateOld, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc__A_GetBattleTime_Time, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, bool CallFunc_BooleanAND_ReturnValue, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc__A_GetDSTime_Time, int CallFunc_Get_Current_Player_Count_Result, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool Temp_bool_Variable, byte Temp_byte_Variable, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Greater_ByteByte_ReturnValue);// 0x1335423e7a001
	static void GetWeaponID(int ItemID, out int weaponid, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, const SolarTablesData_GunProperty CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue);// 0x1335323e7a001
	static void VehicleDataTrace(<FString,FString> CallFunc_GetVehicleDataTrace_Map);// 0x1335223e7a001
	void GetPlayerDataTrace(BP_PlayerState_BattleRoyale_C* Player, out <FString,FString> Map, int CallFunc_GetPlayerStatisticData_OutValue, int CallFunc_GetPlayerStatisticData_OutValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_GetPlayerItems_Output, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Get_Player_Accessories_Output, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_GetCharacterID_CharacterID, int CallFunc_GetCharacterID_SkinID, int CallFunc_GetCharacterID_ColorID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocationInSafeArea_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc_Clamp_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, Vector CallFunc_GetCharacterLocation_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, <FString,FString> K2Node_MakeMap_Map);// 0x1335123e7a001
	static void KickOutExcessAI(BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_DeleteAIFromBattleForPlayer_ReturnValue, int K2Node_Copy_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1335023e7a001
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg, bool Temp_bool_Variable, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, FString Temp_string_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, FString Temp_string_Variable, FString K2Node_Select_Default);// 0x1334f23e7a001
	void GetAiLevel(SolarPlayerState* Target, out int DefaultDifficultyLevel, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1334e23e7a001
	void Get Config(out CFG_BattleRoyale_C* CFG, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x1334d23e7a001
	static void DataTrace(const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarPlayerState*[] K2Node_MakeArray_Array);// 0x133ce23e7a001
	void UpdatePlayerData(SolarPlayerState* Target, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_SetDataByte_ReturnValue);// 0x1334b23e7a001
	static void PreSettleDeal(SCMPlayerState* Player, enum OutType, bool Lamster, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool CallFunc_QuitImmediately_SendToSettle, bool CallFunc_IsLamster_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_UpdateTeamData_bAced, bool CallFunc_HasBeenEliminated_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_BoolToString_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, SCMPlayerState*[] K2Node_MakeArray_Array, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool K2Node_Select_Default, byte K2Node_Select_Default);// 0x1334a23e7a001
	void Will Master Leaving Disband Room(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1334923e7a001
	void Is Master Disbanding Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1334823e7a001
	void Is Kick Out Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1334723e7a001
	void Is Side Switch Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1334623e7a001
	void BuyResurrectionDeal(PlayerState* Player, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1334523e7a001
	static void UpdateWinnerData(FString Side, const byte[] Temp_byte_Variable, bool CallFunc_SetDataBool_ReturnValue, bool CallFunc_SetDataBool_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, bool CallFunc_SetDataByte_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue);// 0x1334423e7a001
	bool IsLamster(SCMPlayerState* Player, enum Index, bool Temp_bool_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0x1334323e7a001
	bool CanPlayerBattle(SCMPlayerState* Player, byte State, bool IsBot, bool CanRevive, bool Alive, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue);// 0x1334223e7a001
	static void UpdateTeamData(FString Side, out bool bAced, SolarTeamInfo* LocalTeam, bool Aced, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_HasBeenEliminated_ReturnValue, bool CallFunc_SetDataBool_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1334123e7a001
	void GetConiReviveManager(out BP_ReviveItemManger_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue);// 0x1334023e7a001
	bool IsAllowReconnectGame(SCMPlayerState* InPC, bool Temp_bool_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, bool CallFunc_PlayerCanRebirthByAllMeans_ReturnValue, bool Temp_bool_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1333f23e7a001
	void QuitImmediately(enum Index, SCMPlayerState* InputPin, out bool SendToSettle, bool ToSettle, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0x1333e23e7a001
	static void TempSpawnAIGroup(FString Side, int count, int AILevel, FString[] NewLocalVar, int CallFunc_GetRandomCharacter_Output, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int Temp_int_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SCMPlayerState* CallFunc_CreateBotAISingle_ReturnValue, enum CallFunc_GetPlayerPawn_outType, Pawn* CallFunc_GetPlayerPawn_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue);// 0x1333d23e7a001
	static void Update Player Data Trace(SCMPlayerState* PlayerState, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, SolarGameInstanceBase* CallFunc_GetSolarGameInstanceBase_ReturnValue, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue, SolarInteractableManager* CallFunc_GetSolarInteractableManager_ReturnValue, int CallFunc_GetShieldUpgradeItemShopGroupID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetAiLevel_DefaultDifficultyLevel, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_FTrunc_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, FString CallFunc_Conv_IntToString_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetConiReviveManager_Output_Get, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetPlayerForceJumped_ReturnValue, Vector CallFunc_GetPlayerLandLocation_Location, bool CallFunc_GetPlayerLandLocation_Succeed, FString CallFunc_Bool2String_String, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Vector2String_Str, Vector CallFunc_GetPlayerEjectLocation_Location, bool CallFunc_GetPlayerEjectLocation_Succeed, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Vector2String_Str, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetTeamRank_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_VectorArray2String_Str, int CallFunc_Array_Length_ReturnValue, int CallFunc_GetZomborg_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_GetAccountExp_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_VectorArray2String_Str, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1333c23e7a001
	void Create Airdrop(int ChestID, Transform TempPos, bool DuplicateFlag, Transform[] TempAirDropPos, int Temp_int_Array_Index_Variable, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, FString CallFunc_Conv_VectorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int Temp_int_Loop_Counter_Variable, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, float CallFunc_GetTimeSeconds_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Transform[] CallFunc_GetSolarItemManagerAirDropRelatedInfo_TransformsArr, int CallFunc_GetSolarItemManagerAirDropRelatedInfo_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Transform CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x1333b23e7a001
	static void StartCruising(CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, SolarCharacter*[] CallFunc__A_GetCharacters_Characters, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, AirlineData CallFunc_GetAirline_Airline, int CallFunc_GetAirline_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue);// 0x1333a23e7a001
	static void InitElements(Vector CallFunc_MakeVector_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_Formula_BattleRoyale_C* CallFunc_FinishSpawningActor_ReturnValue, BP_SolarBombingManager_C* CallFunc_FinishSpawningActor_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0x1333923e7a001
	void Get Map Info(out BP_MapInfoComponent_C* MapInfo, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue);// 0x1333823e7a001
	void Init Timeline Event(out DataTable* BattleTimeline, S_Event_BattleRoyale[] TempList, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_Array_Get_Item, S_Event_BattleRoyale CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_Array_Get_Item, S_Event_BattleRoyale CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, S_Event_BattleRoyale[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, S_EventList_BattleRoyal K2Node_MakeStruct_S_EventList_BattleRoyal, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, int Temp_int_Loop_Counter_Variable, const FString Temp_string_Variable, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, S_EventList_BattleRoyal K2Node_MakeStruct_S_EventList_BattleRoyal, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1333723e7a001
	void ExecuteBattleEvent(out const S_Event_BattleRoyale S_Event_BattleRoyale, const FString Temp_string_Variable, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const FString Temp_string_Variable, int CallFunc_Conv_StringToInt_ReturnValue, const FString Temp_string_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const FString Temp_string_Variable, float CallFunc_Conv_StringToFloat_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, const FString Temp_string_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, const byte[] Temp_byte_Variable, const FString[] Temp_string_Variable, bool Temp_bool_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const FString Temp_string_Variable, int CallFunc_Get_Shrink_Index_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Get_Shrink_Index_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, const byte[] Temp_byte_Variable, Vector CallFunc_Random_Get_Fake_Bomb_Point_Pos, bool CallFunc_Random_Get_Fake_Bomb_Point_Success, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_Select_Default, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const FString Temp_string_Variable, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector CallFunc_Get_Safe_Area_Center_Pos, int CallFunc_Conv_StringToInt_ReturnValue);// 0x1333623e7a001
	static void UpdateAliveSideAndPlayer(SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc__S_UpdateSideCount_Current, int CallFunc_UpdatePlayerCount_Current, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1333523e7a001
	void UpdateBattleState(byte NewState, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_SetDataByte_ReturnValue, BP_GameState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Game_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x1333423e7a001
	void GetGameState(out BP_GameState_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Game_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x1333323e7a001
	static void GetPlayerStartOnWaitingland(out PlayerStart*[] PlayerStarts, PlayerStart*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1333223e7a001
	void GetBattleRoyaleMode(out BP_Mode_BattleRoyale_C* AsBP SCM Battle Royale, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Mode_BattleRoyale_C* K2Node_DynamicCast_AsBP_Mode_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x1333123e7a001
	void InitModeSetting(SolarTablesData_WarmGameMode NewLocalVar, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc__S_PlayInEditor_bIsEditor, FString CallFunc_Conv_BoolToString_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetTeamPlayerCount_Num_Mode, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_RandomIntInRange_ReturnValue, int CallFunc_Clamp_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_GetAILevelCurrentMatch_ReturnValue, int K2Node_Select_Default, int CallFunc_GetWramGameType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, const <FString,FString> K2Node_MakeMap_Map);// 0x1333023e7a001
	void GMSpawnAI();// 0x1332f23e7a001
	void OnMatchEnd(const int RPCID);// 0x1332e23e7a001
	void OnBattleStateChanged(byte OldState, byte NewState);// 0x1332d23e7a001
	void ReceiveBattleTick(float BattleTime, float DeltaTime);// 0x1336b23e7a001
	void PreSettle(SCMPlayerState* Player, enum OutType);// 0x1336c23e7a001
	void PlayerBuyResurrected(BP_PlayerState_BattleRoyale_C* Player);// 0x1332b23e7a001
	void BattleInitFinished();// 0x1331523e7a001
	void OnDSClose();// 0x1332a23e7a001
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x1332923e7a001
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0xc37623c04e89
	void MatchEnd();// 0x1332823e7a001
	void VehicleSnapshot();// 0x1332723e7a001
	void Snapshot();// 0x1332623e7a001
	void CustomEvent();// 0x1332523e7a001
	void OnCountDownFinished();// 0x1332423e7a001
	void ExecuteUbergraph_BP_Logic_BattleRoyale(int EntryPoint, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool Temp_bool_Variable, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int CallFunc_Array_Length_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, <FString,FString> CallFunc_GetPlayerDataTrace_Map, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsPackagedForDistribution_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, const int K2Node_Event_RPCId, byte K2Node_CustomEvent_OldState, byte K2Node_CustomEvent_NewState, int Temp_int_Variable, float K2Node_Event_BattleTime, float K2Node_Event_deltaTime, int CallFunc_FFloor_ReturnValue, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_OutType, SCMPlayerState*[] K2Node_MakeArray_Array, S_Event_BattleRoyale CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_CustomEvent_Player, int Temp_int_Variable, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_UpdatePlayerCount_Current, int CallFunc_UpdatePlayerCount_Current, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc__s_UpdateTeamCountMax_ReturnValue, int CallFunc__S_UpdateSideCount_Current, const <FString,FString> K2Node_MakeMap_Map, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_IsAI, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool K2Node_Select_Default, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc__S_SkyDiveFly_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int64 CallFunc_GetFrameCount_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, bool Temp_bool_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_OutType, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, int CallFunc_GetAIAccompanyTimelineID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_MapInfoComponent_C* CallFunc_Init_Poison_Circle_MapInfo, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue, enum K2Node_Select_Default, bool Temp_bool_Variable, bool K2Node_Select_Default, GameModeGlobalSetting* CallFunc_GetGameModeSetting_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, byte Temp_byte_Variable, bool Temp_bool_Variable, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, S_SkillState K2Node_Select_Default, S_SkillState K2Node_Select_Default, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_Greater_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, bool Temp_bool_Variable, const Transform CallFunc_GetTransform_ReturnValue, BP_CustomRoomManager_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, int[] CallFunc_GetSpawnList___ID___, int[] CallFunc_GetSpawnList___ID___, int[] CallFunc_GetSpawnList_____ID___, int[] CallFunc_GetSpawnList_____ID___, byte Temp_byte_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool K2Node_Select_Default, SolarTeamInfo* CallFunc_Array_Get_Item, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, FString CallFunc_Conv_TextToString_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int64 CallFunc_GetFrameCount_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_HeroPickManager_C* K2Node_DynamicCast_AsBP_Hero_Pick_Manager, bool K2Node_DynamicCast_bSuccess, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, int CallFunc__s_UpdateTeamCountMax_ReturnValue, bool K2Node_Select_Default, float CallFunc_GetTotalTime_TotalTime, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_IsValidIndex_ReturnValue, <FString,FString> CallFunc_GetPlayerDataTrace_Map, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x70a8b625b3dba000
	void BattleStateChanged__DelegateSignature(byte NewState);// 0x14f3e23e7a008
	void OnGoInToBattleState__DelegateSignature();// 0x1332023e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Logic_Framework_C.CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x130, Size: 0x8]
	delegate OnBattleStart;//[Offset: 0x138, Size: 0x10]
	delegate OnPlayerOut;//[Offset: 0x148, Size: 0x10]
	bool bBattleStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	bool bZeroMatchFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	delegate OnPlayerJoin;//[Offset: 0x160, Size: 0x10]
	delegate OnZeroMatchFinished;//[Offset: 0x170, Size: 0x10]
	bool bConfigInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	delegate OnConfigInitiated;//[Offset: 0x188, Size: 0x10]
	bool bUseNewAiComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	bool bDSClosing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 0x1]
	delegate OnPlayerReconnect;//[Offset: 0x1a0, Size: 0x10]
	static void Custom Room Start(const <FString,FString> K2Node_MakeMap_Map);// 0x1336a23e7a001
	void OnPlayerQuit(SCMPlayerState* Player, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, bool CallFunc_IsInPreparation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1336923e7a001
	static void PresettleAll(const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_HasSettled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x1336823e7a001
	void FinishConfigInitiate();// 0x1336723e7a001
	void Update();// 0x1336623e7a001
	void Get Current Player Count(out int Result, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x1336523e7a001
	void ReceiveBeginPlay();// 0x1336423e7a001
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x1336323e7a001
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x1336223e7a001
	void PreSettle(SCMPlayerState* Player, enum OutType);// 0x1336123e7a001
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x1336023e7a001
	void BattleInitFinished();// 0x1335f23e7a001
	void ReceiveServerLevelLoaded(FString LevelName);// 0x1335e23e7a001
	void ReceiveBattleBegin();// 0x1335d23e7a001
	void OnPlayerDisconnect(SCMPlayerState* OfflinePlayer);// 0x3f777f8f6322d333
	void OnMatchEnd(const int RPCID);// 0x1331f23e7a001
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x1331e23e7a001
	void OnDSClose();// 0x1331d23e7a001
	void OnPlayerCheat(SCMPlayerState* CheatPlayer);// 0x1331c23e7a001
	void OnPlayerReconnect(SCMPlayerState* Player);// 0x1331b23e7a001
	void OnPlayerAbnormal(SCMPlayerState* CheatPlayer);// 0x1331a23e7a001
	void ExecuteUbergraph_BP_Logic_Framework(int EntryPoint, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, SCMPlayerState* K2Node_Event_OfflineTimeoutPlayer, SCMPlayerState* K2Node_Event_OfflineTimeoutPlayer, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SCMPlayerState* K2Node_CustomEvent_Player, enum K2Node_CustomEvent_OutType, SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_OutType, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, FString K2Node_Event_LevelName, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, SCMPlayerState* K2Node_Event_OfflinePlayer, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const int K2Node_Event_RPCId, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc__A_GetDSTime_Time, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_IsAI, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc__S_PlayInEditor_bIsEditor, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* K2Node_Event_CheatPlayer, SCMPlayerState* K2Node_Event_Player, SCMPlayerState* K2Node_Event_CheatPlayer);// 0x1331923e7a001
	void OnPlayerReconnect_0__DelegateSignature(SCMPlayerState* Player);// 0x1331823e7a001
	void OnConfigInitiated__DelegateSignature();// 0x1331723e7a001
	void OnZeroMatchFinished__DelegateSignature();// 0x1331623e7a001
	void OnPlayerJoin__DelegateSignature(SCMPlayerState* NewPlayer, bool bIsAi);// 0x1336d23e7a001
	void OnPlayerOut__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x3f777f8f6322d333
	void OnBattleStart__DelegateSignature();// 0x1330f23e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	float TimeOutSeconds;//[Offset: 0xcc, Size: 0x4]
	void ReceiveSpectatorJoinData(SCMPlayerState* Player);// 0x423f23bfa041
	void ReceiveServerLevelLoaded(FString LevelName);// 0x423e23bfa041
	bool ReceivePlayerTeamPreJoinRequest(out const SCMPlayerState*[] PreJoinPlayers, int TeamID);// 0x423d23bfa041
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x423c23bfa041
	void ReceivePlayerReJoin(SCMPlayerState* NewPlayer);// 0x423b23bfa041
	void ReceivePlayerPreLogin(FString PlayerId, SCMPlayerState* OfflinePlayer, out FString ErrorMsg);// 0x423a23bfa041
	void ReceivePlayerNonSpectatorJoinData(SCMPlayerState* Player);// 0x423923bfa041
	void ReceivePlayerLevelLoaded(SCMPlayerController* Player, FString LevelName);// 0x423823bfa041
	void ReceivePlayerJoinData(FString PlayerId);// 0x423723bfa041
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x423623bfa041
	void ReceivePlayerJoin(SCMPlayerState* NewPlayer, bool IsAI);// 0x423523bfa041
	void ReceivePlayerCancelJoin(FString PlayerId);// 0x423423bfa041
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x423323bfa041
	void ReceiveOBPlayersChanged();// 0x423223bfa041
	void ReceiveGameModeInit();// 0x423123bfa041
	void ReceiveBattleTick(float BattleTime, float DeltaTime);// 0x423023bfa041
	void ReceiveBattleEnd();// 0x422f23bfa041
	void ReceiveBattleBegin();// 0x422e23bfa041
	void OnStartBattle();// 0x422d23bfa041
	void OnPlayerSettled(SCMPlayerState* Player);// 0x422c23bfa041
	void OnPlayerReconnect(SCMPlayerState* Player);// 0x422b23bfa041
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x422a23bfa041
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x422923bfa041
	void OnPlayerDisconnect(SCMPlayerState* OfflinePlayer);// 0x422823bfa041
	void OnPlayerCheat(SCMPlayerState* CheatPlayer);// 0x422723bfa041
	void OnPlayerAbnormal(SCMPlayerState* CheatPlayer);// 0x422623bfa041
	void OnMatchEnd(const int RPCID);// 0x422523bfa041
	void OnDSClose();// 0x422423bfa041
	void OnBotAIDataReady(int AICount);// 0x422323bfa041
	bool IsAllowReconnectGame(SCMPlayerState* InPC);// 0x422223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2140, Size: 0x8]
	class GameplayAbility[] DefaultAbilitiesExtra;//[Offset: 0x2148, Size: 0x10]
	S_AiItem NewVar;//[Offset: 0x2158, Size: 0xc]
	void GetWeaponLevelDamageBonus(out float Result, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, int CallFunc_GetCurrentActiveSlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x134e323e7a001
	byte [A]GetHealthState(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, bool CallFunc_IsDying_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, byte K2Node_Select_Default, byte K2Node_Select_Default);// 0x134e223e7a001
	bool [S]SkyDiveFly(Vector Location, float Height, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool Temp_bool_Variable, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, bool K2Node_Select_Default);// 0x134e123e7a001
	bool [S]Set Sky Dive State(bool CallFunc_TryActivateAbilityByClass_ReturnValue);// 0x134e023e7a001
	void OnCompleted_84F20D844D539263D5B45F9EDF867241(SolarPlayerWeapon* Weapon);// 0x134df23e7a001
	void OnCompleted_C9B9AA40496B70A95EF897A2092C6753(SolarPlayerWeapon* Weapon);// 0x134de23e7a001
	void OnCompleted_9F8149E84A6F3575574B32ADD8BF2960(SolarPlayerWeapon* Weapon);// 0x134dd23e7a001
	void BeginPlayBlueprint();// 0x134dc23e7a001
	void SetWeapon(byte Slot, int WeapoinId, out const WeaponPartsData Parts);// 0xffffff8f23bfa000
	void BatchSetItem(out const S_AiItem[] ItemList);// 0x1880323bfa041
	void [s]GiveWeapon(const bool bDestroyPrevWeapon, const byte Slot, const int ItemID);// 0x134d923e7a001
	void ExecuteUbergraph_BP_Character_Framework(int EntryPoint, const byte Temp_byte_Variable, byte Temp_byte_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const int K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, SolarPlayerWeapon* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, SolarPlayerWeapon* Temp_object_Variable, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, const byte Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const byte Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const byte Temp_byte_Variable, const byte Temp_byte_Variable, const byte Temp_byte_Variable, byte Temp_byte_Variable, int Temp_int_Variable, const byte K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, const byte[] K2Node_MakeArray_Array, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_AddBackpackItem_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_SetWeaponPartByPartID_Success, FString CallFunc_Conv_BoolToString_ReturnValue, SolarPlayerWeapon* Temp_object_Variable, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Variable, class GameplayAbility CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameplayAbilitySpecHandle CallFunc_K2_GiveAbility_ReturnValue, byte K2Node_CustomEvent_Slot, int K2Node_CustomEvent_WeapoinId, const WeaponPartsData K2Node_CustomEvent_Parts, bool CallFunc_SetWeaponParts_ReturnValue, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, const S_AiItem[] K2Node_CustomEvent_ItemList, S_AiItem CallFunc_Array_Get_Item, S_AiItem CallFunc_Array_Get_Item, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, const bool K2Node_CustomEvent_bDestroyPrevWeapon, const byte K2Node_CustomEvent_Slot, const int K2Node_CustomEvent_ItemID, const <FString,FString> K2Node_MakeMap_Map, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x134d723e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2090, Size: 0x8]
	SolarAbilityComponent* SolarAbility;//[Offset: 0x2098, Size: 0x8]
	Vector PreviousLocation;//[Offset: 0x20a0, Size: 0xc]
	float Time;//[Offset: 0x20ac, Size: 0x4]
	float CurrentTime;//[Offset: 0x20b0, Size: 0x4]
	float PreviousTime;//[Offset: 0x20b4, Size: 0x4]
	float DeltaTime;//[Offset: 0x20b8, Size: 0x4]
	Vector DeltaLocation;//[Offset: 0x20bc, Size: 0xc]
	bool OnTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c8, Size: 0x1]
	float Speed;//[Offset: 0x20cc, Size: 0x4]
	Vector2D Direction;//[Offset: 0x20d0, Size: 0x8]
	float[] SpeedRecord;//[Offset: 0x20d8, Size: 0x10]
	Vector[] LocationRecord;//[Offset: 0x20e8, Size: 0x10]
	float[] Record_X;//[Offset: 0x20f8, Size: 0x10]
	float[] Record_y;//[Offset: 0x2108, Size: 0x10]
	float SpeedFixBase;//[Offset: 0x2118, Size: 0x4]
	CurveFloat* SpeedFix;//[Offset: 0x2120, Size: 0x8]
	delegate OnEjectingStateChanged;//[Offset: 0x2128, Size: 0x10]
	byte EjectState;//[Offset: 0x2138, Size: 0x1]
	int PoisonDamageNum;//[Offset: 0x213c, Size: 0x4]
	SolarCameraComponent* GetSolarCameraComponent();// 0x1350723e7a001
	SolarSpringArmComponent* GetSolarSpringArmComponent();// 0x1350623e7a001
	void RefreshRenderConsoleVarForSkydive(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarCityName*[] CallFunc_GetAllActorsOfClass_OutActors, SolarCityName* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetRenderParametersBasedOnDifferentStates_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffff8f23bfa000
	bool Is Observation Target(bool CallFunc_IsBeingSpectated_ReturnValue, bool CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1350423e7a001
	float FixSpeed(float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x1350323e7a001
	void FigureSpeed(float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_GetFixedSpeed_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x1350223e7a001
	float GetFixedY(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue);// 0x1350123e7a001
	float GetFixedX(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue);// 0x1350023e7a001
	void SetCameraInput(Vector NewLocalVar, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector Temp_struct_Variable, float CallFunc_GetFixedY_ReturnValue, float CallFunc_GetFixedX_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Multiply_VectorFloat_ReturnValue);// 0x134ff23e7a001
	void SetCameraInput(float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, FString CallFunc_Conv_Vector2dToString_ReturnValue);// 0x134fe23e7a001
	Vector GetFixedLocation(Vector InLocation, int NewLocalVar, Vector NewLocalVar, bool Temp_bool_Variable, bool Temp_bool_Variable, Vector Temp_struct_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector CallFunc_Divide_VectorInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Array_Get_Item, Vector K2Node_Select_Default, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x134fd23e7a001
	float GetFixedSpeed(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x134fc23e7a001
	static void DecelerationEffectUpdate(out float Altitude, out ParticleSystemComponent*[] Effects, float tmpAltitudePercent, float CallFunc_GetSkydiveLandingHeight_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x1354523e7a001
	void UndecelerationEffectUpdate(out float Altitude, out ParticleSystemComponent*[] Effects, float L_Var, CurveFloat* UndecelerationEffectCurve, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetFloatValue_ReturnValue);// 0x23bec23c1f600
	void InpActEvt_BackSpace_K2Node_InputKeyEvent(Key Key);// 0x134d623e7a001
	void InpActEvt_Home_K2Node_InputKeyEvent(Key Key);// 0x134d523e7a001
	void InpActEvt_End_K2Node_InputKeyEvent(Key Key);// 0x134d423e7a001
	void InpActEvt_Delete_K2Node_InputKeyEvent(Key Key);// 0x134d323e7a001
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x134d223e7a001
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x134d123e7a001
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x134d023e7a001
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0x134cf23e7a001
	void ReceiveEndPlay(byte EndPlayReason);// 0x134ce23e7a001
	void ReceiveBeginPlay();// 0x134cd23e7a001
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x134cc23e7a001
	void Event_UseReviveItem(SCMPlayerState* Player);// 0x134cb23e7a001
	void OnSkydiveStageChanged(enum LastStage, enum CurrentStage);// 0x134ca23e7a001
	void OnCharacterEjectStateChanged(byte State);// 0x9c06d23c1d126
	void ExecuteUbergraph_BP_SolarCharacterPlayer(int EntryPoint, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, ParticleSystemComponent*[] CallFunc_GetAllSkydiveFlyingEffects_OutEffects, float K2Node_Event_DistanceToGround, ParticleSystemComponent*[] CallFunc_GetAllSkydiveLandingEffects_OutEffects, bool K2Node_Event_bIsInWater, Key K2Node_InputKeyEvent_Key, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, float K2Node_Event_FallingRate, byte K2Node_Event_EndPlayReason, bool CallFunc_IsEditor_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Key K2Node_InputKeyEvent_Key, float K2Node_Event_InDuration, bool K2Node_Event_bInOpenScope, SCMPlayerState* K2Node_CustomEvent_Player, bool CallFunc_HasAuthority_ReturnValue, Key K2Node_InputKeyEvent_Key, bool CallFunc_IsEditor_ReturnValue, bool CallFunc_IsEditor_ReturnValue, bool CallFunc_IsEditor_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, enum K2Node_Event_LastStage, enum K2Node_Event_CurrentStage, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte K2Node_Select_Default, bool CallFunc_BooleanOR_ReturnValue, byte K2Node_CustomEvent_State, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, ABP_SolarCharacter_FPP_C* K2Node_DynamicCast_AsABP_Solar_Character_FPP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsBeingSpectated_ReturnValue, Key K2Node_InputKeyEvent_Key);// 0x1537123bfa041
	void OnEjectingStateChanged__DelegateSignature(byte State, SolarCharacter* TargetCharacter);// 0xffffffff08251400
<----------Generated by SSpawner v1.0.2---------->


Class: CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	class CGFormula* Formula;//[Offset: 0x38, Size: 0x8]
	SettlementPageConfig* SettlePageConfig;//[Offset: 0x40, Size: 0x8]
	<FString,SCMMapConfig> MapConfig;//[Offset: 0x48, Size: 0x50]
	DataManagerConfig DataManagerConfig;//[Offset: 0x98, Size: 0x10]
	JobManagerConfig JobConfig;//[Offset: 0xa8, Size: 0x8]
	bool EnableUltimateSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	enum UltimateSkillStateOperationOnInit;//[Offset: 0xb1, Size: 0x1]
	bool EnableTacticalSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1]
	enum TacticalSkillStateOperationOnInit;//[Offset: 0xb3, Size: 0x1]
	int AirDropSkillMode;//[Offset: 0xb4, Size: 0x4]
	bool EnableWeaponUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	int InitInGamePlayerLevel;//[Offset: 0xbc, Size: 0x4]
	bool EnablePlayerUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	InGameLevelingConfig InGameLevelingConfig;//[Offset: 0xc8, Size: 0x8]
	enum[] CharacterDamageUpgradeTypes;//[Offset: 0xd0, Size: 0x10]
	ExpItemConfig ExpItemConfig;//[Offset: 0xe0, Size: 0x10]
	ExpItemReduceRate ExpItemReduceRateConfig;//[Offset: 0xf0, Size: 0x8]
	BoxBurstItemConfig BoxBurstItemConfig;//[Offset: 0xf8, Size: 0x8]
	bool bIfShouldSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bIfSupportDeathverge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]
	<int,int> DeathBoxEnergyLimitConfig;//[Offset: 0x108, Size: 0x50]
	bool bAutoMarkDamagedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	bool EnableSect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	CustomRoomData CustomRoomData;//[Offset: 0x160, Size: 0x78]
	bool bIsCustomRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	bool bEnableTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 0x1]
	float InitTrackingDelay;//[Offset: 0x1dc, Size: 0x4]
	float TrackingTimeInterval;//[Offset: 0x1e0, Size: 0x4]
	float DefaultTrackMaxRevealDistance;//[Offset: 0x1e4, Size: 0x4]
	float TrackReplaceDistance;//[Offset: 0x1e8, Size: 0x4]
	float MinRevealDistance;//[Offset: 0x1ec, Size: 0x4]
	float TrackTimeout;//[Offset: 0x1f0, Size: 0x4]
	int MaxTrackNum;//[Offset: 0x1f4, Size: 0x4]
	FinalsBGMData FinalsBGMData;//[Offset: 0x1f8, Size: 0x28]
	bool bEnableSkydivingTrail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	class Actor* FlyTrailClass;//[Offset: 0x228, Size: 0x28]
	class Actor* DebugTrailEffectClass;//[Offset: 0x250, Size: 0x28]
	bool IsEnableSect();// 0x422123bfa041
	bool IsCustomRoomMode();// 0x422023bfa041
	int GetRequiredExpForLevel(int InLevel);// 0x421f23bfa041
	int GetMaxShieldMatCountToDeathbox(const int InLevel);// 0x421e23bfa041
	int GetMaxInGameLevel();// 0x421d23bfa041
	float GetExpItemReduceRate(int DeathCount);// 0x421c23bfa041
	int GetExpItemCountByLevel(const int InLevel, const int InLevelGap);// 0x421b23bfa041
	CustomRoomData GetCustomRoomData();// 0x421a23bfa041
	int[] GetBurstItemSplitPiles(const int ItemID);// 0x421923bfa041
	float[] GetBurstItemModelScale(const int ItemID);// 0x421823bfa041
	int GetBurstItemMaxPileNum(const int ItemID);// 0x421723bfa041
	int[] GetBurstItemIDs();// 0x421623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CGFormula.Info.Actor.Object
	KnockoutParams KnockoutParams;//[Offset: 0x228, Size: 0x28]
	bool bInitKnockParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x420c23bfa041
	bool IsSettlementBagItem(SolarPlayerState* InPS);// 0x420b23bfa041
	void InitKnockoutPointParams(out KnockoutParams InParams);// 0x420a23bfa041
	int GetZomborg(SolarPlayerState* InPS);// 0x420923bfa041
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x420823bfa041
	int GetWeaponExp(SolarPlayerState* InPS, int InWeaponID);// 0x420723bfa041
	void GetTeamScoreComparison(SolarPlayerState* InPS, out FString OutTeamScore);// 0x420623bfa041
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x420523bfa041
	void GetShowPageIndexs(SolarPlayerState* InPS, out const SettlePageParam InParam, out int[] OutResult);// 0x420423bfa041
	SettlementReward[] GetSettlementRewards(SolarPlayerState* InPS);// 0x420323bfa041
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerID, out FString InPBName);// 0x420223bfa041
	float GetKDA(SolarPlayerState* InPS);// 0x420123bfa041
	FString[] GetGroupResultPlayerExData(FString SolarPlayerID, out FString InPBName);// 0x420023bfa041
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(SolarPlayerState* InPS);// 0x41ff23bfa041
	int GetCombatCore(SolarPlayerState* InPS);// 0x41fe23bfa041
	void GetCharacterExp(SolarPlayerState* InPS, out int OutGetExp, out int[] OutReason);// 0x41fd23bfa041
	int GetAccountExp(SolarPlayerState* InPS);// 0x41fc23bfa041
	int CalculateTeamRank(SolarPlayerState* InPS);// 0x41fb23bfa041
	enum[] CalculatePunish(SolarPlayerState* InPS);// 0x41fa23bfa041
	int CalculatePlayerRank(SolarPlayerState* InPS);// 0x41f923bfa041
	float CalculateMVPScore(SolarPlayerState* InPS);// 0x41f823bfa041
	int CalculateKnockoutPoints(const int InTeamRank, const int InKillNum, const float InTotalDamage, const float InTotalDamageTaken);// 0x41f723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SettlePageParam
	int WeaponExpSettlmentNum;//[Offset: 0x0, Size: 0x4]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SettlementPageConfig.DataAsset.Object
	int PageSkipIndex;//[Offset: 0x30, Size: 0x4]
	class SolarUWSettlementBase[] SettlementPage;//[Offset: 0x38, Size: 0x10]
	FString EnterSettleSoundEvent;//[Offset: 0x48, Size: 0x10]
	FString ExitSettleSoundEvent;//[Offset: 0x58, Size: 0x10]
	int[] PageIndexs;//[Offset: 0x68, Size: 0x10]
	bool IsCustomRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMMapConfig
	FString Desc;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath LevelMap;//[Offset: 0x10, Size: 0x18]
	int MiniMapId;//[Offset: 0x28, Size: 0x4]
	bool IsStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	<FString,SCMElementMapConfig> ElementGroups;//[Offset: 0x30, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMElementMapConfig
	SoftObjectPath ElementLevel;//[Offset: 0x0, Size: 0x18]
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum LoadType;//[Offset: 0x19, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: DataManagerConfig
	DataTable* GeneralDataTable;//[Offset: 0x0, Size: 0x8]
	DataTable* DataTable;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: JobManagerConfig
	DataTable* JobTable;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: InGameLevelingConfig
	DataTable* ExpTable;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ExpItemConfig
	DataTable* ConfigTable;//[Offset: 0x0, Size: 0x8]
	DataTable* KilledConfigTable;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ExpItemReduceRate
	DataTable* ConfigTable;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BoxBurstItemConfig
	DataTable* ConfigTable;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FinalsBGMData
	bool bEnableFinalsBGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte FinalsBGMSafeAreaIndex;//[Offset: 0x1, Size: 0x1]
	byte FinalsBGMPlayTeamCount;//[Offset: 0x2, Size: 0x1]
	byte FinalsBGMStopTeamCount;//[Offset: 0x3, Size: 0x1]
	FString FinalsBGMName_Play;//[Offset: 0x8, Size: 0x10]
	FString FinalsBGMName_Stop;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCityName.Actor.Object
	SolarStrongholdNamesConfig* NameConfigCN;//[Offset: 0x228, Size: 0x8]
	SolarStrongholdNamesConfig* NameConfigEN;//[Offset: 0x230, Size: 0x8]
	Texture* NameTextureCN;//[Offset: 0x238, Size: 0x8]
	Texture* NameTextureEN;//[Offset: 0x240, Size: 0x8]
	MaterialInterface* NameMaterial;//[Offset: 0x248, Size: 0x8]
	FString PointName;//[Offset: 0x250, Size: 0x10]
	MaterialInterface* TextMaterial;//[Offset: 0x260, Size: 0x8]
	SoftObjectPath FontPath;//[Offset: 0x268, Size: 0x18]
	float BaseScale;//[Offset: 0x280, Size: 0x4]
	float HightLimit;//[Offset: 0x284, Size: 0x4]
	float MinimumDistance;//[Offset: 0x288, Size: 0x4]
	int LocTextID;//[Offset: 0x28c, Size: 0x4]
	bool bCapitalsLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	float GradientFadeTime;//[Offset: 0x294, Size: 0x4]
	enum PreviewLang;//[Offset: 0x298, Size: 0x1]
	SoftObjectPath PreviewFontPath;//[Offset: 0x2a0, Size: 0x18]
	MaterialInstanceDynamic* MaterialDynamic;//[Offset: 0x2c0, Size: 0x8]
	MaterialInstanceDynamic* TextMaterialDynamic;//[Offset: 0x2c8, Size: 0x8]
	void SetSolarCityNameTickAndShow(enum OldMode, enum CurMode);// 0x4c3923bfa041
	void SetSolarCityNameTick(bool bNeedTick);// 0x4c3823bfa041
	void OnCharacterOnRep();// 0x4c3723bfa041
	FString[] GetLocalizationCityNamesWithAllLanguages();// 0x4c3623bfa041
	FString GetLocalizationCityName(bool bGetNameWithLang);// 0x4c3523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarStrongholdNamesConfig.DataAsset.Object
	<FString,Vector4> NamesMap;//[Offset: 0x30, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SetRenderParametersBasedOnDifferentStates_C.SolarRenderParametersBasedOnDifferentStates.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x230, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x238, Size: 0x8]
	SolarCharacter* Solar Character;//[Offset: 0x240, Size: 0x8]
	TimerHandle Loop Timer;//[Offset: 0x248, Size: 0x8]
	float Min Skydiving Height;//[Offset: 0x250, Size: 0x4]
	ExponentialHeightFog* Height Fog;//[Offset: 0x258, Size: 0x8]
	bool Interpolate Fog Color;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	LinearColor Default Fog Color;//[Offset: 0x264, Size: 0x10]
	LinearColor Landing Fog Color;//[Offset: 0x274, Size: 0x10]
	float Characte Start  Skydiving Height;//[Offset: 0x284, Size: 0x4]
	float Max Skydiving Height;//[Offset: 0x288, Size: 0x4]
	bool Interpolate Fog Density;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	float Default Fog Density;//[Offset: 0x290, Size: 0x4]
	float Landing Fog Density;//[Offset: 0x294, Size: 0x4]
	bool Interpolate Fog Height Falloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	float Default Fog Height Falloff;//[Offset: 0x29c, Size: 0x4]
	float Landing Fog Height Falloff;//[Offset: 0x2a0, Size: 0x4]
	bool Interpolate Start Distance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float Default Start Distance;//[Offset: 0x2a8, Size: 0x4]
	float Landing Start Distance;//[Offset: 0x2ac, Size: 0x4]
	enum Character Skydiving State;//[Offset: 0x2b0, Size: 0x1]
	enum BeginPlayState;//[Offset: 0x2b1, Size: 0x1]
	void Interpolation Start Distance(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0xe66d23e7a001
	void Interpolation Fog Height Falloff(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0xe66e23e7a001
	void Interpolation Fog Density(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0xe66f23e7a001
	void Interpolation Fog Color(out LinearColor Fog Color after Interpolation, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue);// 0xe67023e7a001
	void HeightFog(enum Character Skydiving State, bool K2Node_SwitchEnum_CmpSuccess, LinearColor CallFunc_Interpolation_Fog_Color_Fog_Color_after_Interpolation, LinearColor CallFunc_Interpolation_Fog_Color_Fog_Color_after_Interpolation, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors, ExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue);// 0xe67123e7a001
	void MaterialShadowDistance_Change(enum Character Skydiving State, float CallFunc_GetConsoleVariableFloatValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0xe67223e7a001
	void TreeCullDistance_Change(enum Character Skydiving State, bool K2Node_SwitchEnum_CmpSuccess);// 0xe67323e7a001
	void SetRenderParamerts(SolarCharacter* Solar Character);// 0x155c823e7a008
	void Set Render Paramerts With Height();// 0x155f123e7a031
	void ReceiveBeginPlay();// 0xffffffff8a5331c0
	void ExecuteUbergraph_BP_SetRenderParametersBasedOnDifferentStates(int EntryPoint, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SolarCharacter* K2Node_CustomEvent_Solar_Character, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool Temp_bool_IsClosed_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetCameraFocusedCharacter_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable);// 0x155fa23e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: SolarRenderParametersBasedOnDifferentStates.Actor.Object
	DataTable* StreamingDistanceDataTable;//[Offset: 0x228, Size: 0x8]
	void SetRelativeStreamingDistanceScale(enum InCharacterSkydivingState);// 0x525d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ABP_SolarCharacter_FPP_C.AnimInstance.Object
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x268, Size: 0x30]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x298, Size: 0x28]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2c0, Size: 0x28]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2e8, Size: 0x78]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x360, Size: 0x30]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x390, Size: 0x78]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x408, Size: 0x30]
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x438, Size: 0xb0]
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x4e8, Size: 0x48]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x530, Size: 0x78]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x5a8, Size: 0xa0]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x648, Size: 0x20]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x668, Size: 0x20]
	SolarCharacter* SolarCharacter;//[Offset: 0x688, Size: 0x8]
	bool IsScopeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	float ScopeFadeTime;//[Offset: 0x694, Size: 0x4]
	bool IsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	bool IsShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 0x1]
	bool ShootDouble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69a, Size: 0x1]
	float Horizontal;//[Offset: 0x69c, Size: 0x4]
	float Vertical;//[Offset: 0x6a0, Size: 0x4]
	bool bUseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 0x1]
	float K2Node_Event_DeltaTimeX;//[Offset: 0x6a8, Size: 0x4]
	SolarCharacter* K2Node_DynamicCast_AsSolar_Character;//[Offset: 0x6b0, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_TransitionResult_768665AB4918F96C9C3C8F92EF926EE4();// 0xfb9223e7a008
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_TransitionResult_01B670704C4A0F8E519CD8A192C5E1D6();// 0xaa3323e7a008
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_BlendListByBool_F136F87A4DDCD2678555C9B592100DA7();// 0xfad723bfa041
	void BlueprintUpdateAnimation(float bpp__DeltaTimeX__pf);// 0xfad923bfa041
	void BlueprintInitializeAnimation();// 0xffffff8f23bfa000
	void BlueprintBeginPlay();// 0xaa3a23e7a008
	void AnimGraph(out PoseLink bpp__AnimGraph__pf);// 0xffffffff1797d600
<----------Generated by SSpawner v1.0.2---------->


Class: PoseLink.PoseLinkBase
<----------Generated by SSpawner v1.0.2---------->


Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x10, Size: 0x10]
	FName Name;//[Offset: 0x20, Size: 0x8]
	FName Group;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNode_Base
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x30, Size: 0x8]
	float PlayRateBasis;//[Offset: 0x38, Size: 0x4]
	float PlayRate;//[Offset: 0x3c, Size: 0x4]
	InputScaleBiasClamp PlayRateScaleBiasClamp;//[Offset: 0x40, Size: 0x30]
	float StartPosition;//[Offset: 0x70, Size: 0x4]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNode_AssetPlayerBase.AnimNode_Base
	int GroupIndex;//[Offset: 0x10, Size: 0x4]
	byte GroupRole;//[Offset: 0x14, Size: 0x1]
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	float BlendWeight;//[Offset: 0x18, Size: 0x4]
	float InternalTimeAccumulator;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InputScaleBiasClamp
	bool bMapRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bInterpResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	InputRange InRange;//[Offset: 0x4, Size: 0x8]
	InputRange OutRange;//[Offset: 0xc, Size: 0x8]
	float Scale;//[Offset: 0x14, Size: 0x4]
	float Bias;//[Offset: 0x18, Size: 0x4]
	float ClampMin;//[Offset: 0x1c, Size: 0x4]
	float ClampMax;//[Offset: 0x20, Size: 0x4]
	float InterpSpeedIncreasing;//[Offset: 0x24, Size: 0x4]
	float InterpSpeedDecreasing;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InputRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNode_StateResult.AnimNode_Root.AnimNode_Base
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x10, Size: 0x4]
	int MaxTransitionsPerFrame;//[Offset: 0x14, Size: 0x4]
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x10, Size: 0x10]
	FName SlotName;//[Offset: 0x20, Size: 0x8]
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x10, Size: 0x10]
	float[] BlendTime;//[Offset: 0x20, Size: 0x10]
	enum TransitionType;//[Offset: 0x30, Size: 0x1]
	enum BlendType;//[Offset: 0x31, Size: 0x1]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	CurveFloat* CustomBlendCurve;//[Offset: 0x38, Size: 0x8]
	BlendProfile* BlendProfile;//[Offset: 0x40, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNode_ConvertLocalToComponentSpace.AnimNode_Base
	PoseLink LocalPose;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNode_ConvertComponentToLocalSpace.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ComponentSpacePoseLink.PoseLinkBase
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponPartsData
	int ScopeId;//[Offset: 0x0, Size: 0x4]
	int GripID;//[Offset: 0x4, Size: 0x4]
	int GunStockID;//[Offset: 0x8, Size: 0x4]
	int MuzzleID;//[Offset: 0xc, Size: 0x4]
	int ClipID;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: S_AiItem
	enum ItemType_2_314140C646418678444E9DB5DBB9CB11;//[Offset: 0x0, Size: 0x1]
	int ItemID_5_9414785640F928576D3321856C20F5FD;//[Offset: 0x4, Size: 0x4]
	int Count_7_49130AA64D9339657AC5579D1E066466;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarGameModeWeaponAction.BlueprintAsyncActionBase.Object
	delegate OnCompleted;//[Offset: 0x30, Size: 0x10]
	SolarGameModeWeaponAction* SetCharacterWeaponBySeq(Object* WorldContextObject, SolarCharacter* TargetCharacter, const bool bDestroyPrevWeapon, const byte Slot, const int ItemID);// 0x47ec23bfa041
	void OnWeaponCreated(byte SlotIndex, SolarPlayerWeapon* WeaponPtr, SolarBackpackComponent* SolarBackpackComponent);// 0x47eb23bfa041
	void CreateWeaponAsync(const byte SlotIndex, bool bDestroyPrevWeapon, out const SolarItemData InItemData, SolarBackpackComponent* InSolarBackpackComponent);// 0x47ea23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CustomRoomManager.GameManagerBase.Info.Actor.Object
	int RoomTeamMemberLimit;//[Offset: 0x228, Size: 0x4]
	int RoomLeftTime;//[Offset: 0x22c, Size: 0x4]
	bool bIsGameStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	FString JobName;//[Offset: 0x238, Size: 0x10]
	bool bIsWeaponSettingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	bool bIsVehicleSettingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249, Size: 0x1]
	<FString,CustomParamConfig> CustomParamConfigMap;//[Offset: 0x250, Size: 0x50]
	UserSetting[] UserSettingList;//[Offset: 0x2a0, Size: 0x10]
	byte[] WeaponTypeAvailableList;//[Offset: 0x2b0, Size: 0x10]
	byte[] VehicleClassAvailableList;//[Offset: 0x2c0, Size: 0x10]
	int[] WeaponSettingBlacklist;//[Offset: 0x2d0, Size: 0x10]
	int[] VehicleTypeSettingBlacklist;//[Offset: 0x2e0, Size: 0x10]
	delegate WeaponTypeAvailableChangedEvent;//[Offset: 0x2f0, Size: 0x10]
	delegate WeaponSettingBlacklistChangedEvent;//[Offset: 0x300, Size: 0x10]
	delegate VehicleClassAvailableChangedEvent;//[Offset: 0x310, Size: 0x10]
	delegate VehicleTypeSettingBlacklistChangedEvent;//[Offset: 0x320, Size: 0x10]
	void WeaponTypeAvailableChangedEvent__DelegateSignature(out const byte[] WeaponTypeAvailableList);// 0x240123bfa041
	void WeaponSettingBlacklistChangedEvent__DelegateSignature(out const int[] WeaponSettingBlacklist);// 0x240023bfa041
	void VehicleTypeSettingBlacklistChangedEvent__DelegateSignature(out const int[] VehicleTypeSettingBlacklist);// 0x23ff23bfa041
	void VehicleClassAvailableChangedEvent__DelegateSignature(out const byte[] VehicleClassAvailableList);// 0x23fe23bfa041
	void ReceiveUserSettingChanged(FString Name, FString Value);// 0x23fd23bfa041
	void ReceiveTournamentDealy();// 0x23fc23bfa041
	void ReceivePlayerRemoved(const SCMPlayerState* Player, enum reason);// 0x23fb23bfa041
	void OnUserSettingChangedEvent(FString Name, CustomParamConfig ConfigInfo, FString Value);// 0x23fa23bfa041
	void OnTournamentDealy();// 0x23f923bfa041
	void OnRoomOwnerLeftRoom();// 0x23f823bfa041
	void OnRep_WeaponTypeAvailableList();// 0x23f723bfa041
	void OnRep_WeaponSettingBlacklist();// 0x23f623bfa041
	void OnRep_VehicleTypeSettingBlacklist();// 0x23f523bfa041
	void OnRep_VehicleClassAvailableList();// 0x23f423bfa041
	void OnPlayerRemovedFromRoom(const SCMPlayerState* Player, enum reason);// 0x23f223bfa041
	bool OnGameStart();// 0x23f123bfa041
	void OnClientRoomDataReady();// 0x23f023bfa041
	bool IsWeaponTypeAvailable(byte WeaponType);// 0x23ef23bfa041
	bool IsWeaponSettingOpen();// 0x23ee23bfa041
	bool IsWeaponAvailable(int weaponid);// 0x23ed23bfa041
	bool IsVehicleTypeAvailable(int VehicleTypeID);// 0x23ec23bfa041
	bool IsVehicleSettingOpen();// 0x23eb23bfa041
	bool IsVehicleClassAvailable(byte VehicleClassValue);// 0x23ea23bfa041
	bool IsRoomOwner(const SCMPlayerState* Player);// 0x23e923bfa041
	bool IsRoomHasMinimalSides();// 0x23e823bfa041
	bool IsRoomHasEnoughPlayers();// 0x23e723bfa041
	byte[] GetWeaponTypeAvailableList();// 0x23e623bfa041
	void GetWeaponSettingLists(out int[] OutWeaponBlacklist, out int[] OutWeaponWhitelist);// 0x23e523bfa041
	int[] GetWeaponSettingBlacklist();// 0x23e423bfa041
	void GetVehicleTypeSettingLists(out int[] OutVehicleBlacklist, out int[] OutVehicleWhitelist);// 0x23e323bfa041
	int[] GetVehicleTypeSettingBlacklist();// 0x23e223bfa041
	byte[] GetVehicleClassAvailableList();// 0x23e123bfa041
	FString GetModeParam(FString Name, out CustomParamConfig ParamInfo);// 0x23de23bfa041
	void ExecuteGameStart();// 0x23dd23bfa041
	bool CheckWeaponTypeCanSetting(enum WeaponUIType);// 0x23db23bfa041
	bool CheckWeaponCanSetting(int weaponid);// 0x23da23bfa041
	bool CheckVehicleTypeCanSetting(int VehicleTypeID);// 0x23d923bfa041
	bool CheckVehicleClassCanSetting(enum VehicleClass);// 0x23d723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameManagerBase.Info.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: CustomParamConfig
	int DisplayName;//[Offset: 0x0, Size: 0x4]
	int Category;//[Offset: 0x4, Size: 0x4]
	int Desc;//[Offset: 0x8, Size: 0x4]
	enum ValueType;//[Offset: 0xc, Size: 0x1]
	FString DefaultValue;//[Offset: 0x10, Size: 0x10]
	FString[] ValueRange;//[Offset: 0x20, Size: 0x10]
	class UserWidget* StyleClass;//[Offset: 0x30, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: UserSetting
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVehicleSubsystem.WorldSubsystem.Subsystem.Object
	delegate OnVehicleSpawned;//[Offset: 0x30, Size: 0x10]
	delegate OnVehicleDestroyed;//[Offset: 0x40, Size: 0x10]
	void GetActiveVehicleList(out Actor*[] OutActiveVehicles);// 0x59ed23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x578, Size: 0x8]
	BPC_PlayerManager_C* PlayerManager;//[Offset: 0x580, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x588, Size: 0x8]
	delegate OnBasicSystemReady;//[Offset: 0x590, Size: 0x10]
	bool bBasicSystemReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	delegate OnSideListChanged;//[Offset: 0x5a8, Size: 0x10]
	delegate OnOBPlayerListChanged;//[Offset: 0x5b8, Size: 0x10]
	delegate OnRoomDataChanged;//[Offset: 0x5c8, Size: 0x10]
	delegate OnSidePosInteamChanged;//[Offset: 0x5d8, Size: 0x10]
	delegate OnSideDataPostChanged;//[Offset: 0x5e8, Size: 0x10]
	int WarmGameID;//[Offset: 0x5f8, Size: 0x4]
	delegate OnPlayerBattleStateChanged;//[Offset: 0x600, Size: 0x10]
	delegate OnGameStateChanged;//[Offset: 0x610, Size: 0x10]
	enum GameState;//[Offset: 0x620, Size: 0x1]
	void OnRep_GameState();// 0x1265e23e7a001
	void SetGameState(enum NewState);// 0x1265d23e7a001
	void OnDataManagerPrepare();// 0x1265c23e7a001
	void ReceiveBeginPlay();// 0x1265b23e7a001
	void OnSideListChange(out const SCMSideData[] SideList);// 0x1265a23e7a001
	void OnOBPlayerListChange();// 0x1265923e7a001
	void OnCustomRoomDataChange(out const CustomRoomData InCustomRoomData);// 0x1265823e7a001
	void OnSidePosInTeamChange(FString SideName);// 0x1265723e7a001
	void OnSideListPostChanged();// 0x1265623e7a001
	void OnPlayerBattleStateChange(const SCMPlayerState* PlayerState);// 0x1265523e7a001
	static void ExecuteUbergraph_BP_GameState_Framework(int EntryPoint, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FString Temp_string_Variable, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, const SCMSideData[] K2Node_Event_SideList, FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, FString K2Node_Select_Default, const CustomRoomData K2Node_Event_InCustomRoomData, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString K2Node_Event_SideName, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, bool CallFunc_IsPlayingReplay_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, int CallFunc_GetWramGameType_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, const SCMPlayerState* K2Node_Event_PlayerState, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString Temp_string_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x1265423e7a001
	void OnGameStateChanged__DelegateSignature(enum NewState);// 0x1265323e7a001
	void OnPlayerBattleStateChanged__DelegateSignature(SCMPlayerState* Player);// 0x1265223e7a001
	void OnSideDataPostChanged__DelegateSignature();// 0x1265123e7a001
	void OnSidePosInteamChanged__DelegateSignature(FString SideName);// 0x1265023e7a001
	void OnRoomDataChanged__DelegateSignature(CustomRoomData RoomData);// 0x1264f23e7a001
	void OnOBPlayerListChanged__DelegateSignature();// 0x1577923eba021
	void OnSideListChanged__DelegateSignature();// 0xffffffff08bdbac0
	void OnBasicSystemReady__DelegateSignature();// 0xc37623c04e89
<----------Generated by SSpawner v1.0.2---------->


Class: SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	enum InGameState;//[Offset: 0x468, Size: 0x1]
	CustomRoomData CustomRoomData;//[Offset: 0x488, Size: 0x78]
	bool bCustomRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	GameManagerBase*[] GameManagers;//[Offset: 0x508, Size: 0x10]
	GameDataManager* GameDataManager;//[Offset: 0x518, Size: 0x8]
	GameJobManager* GameJobManager;//[Offset: 0x520, Size: 0x8]
	CGMManagerConfigComponent* ManagerConfigComponent;//[Offset: 0x538, Size: 0x8]
	CGFormula* InsFormula;//[Offset: 0x540, Size: 0x8]
	SolarPlayerState*[] PlayersWithTrackingAbility;//[Offset: 0x548, Size: 0x10]
	SpatializeInfoTrack*[] TrackInfos;//[Offset: 0x558, Size: 0x10]
	void SetRoomPoolPrizeType(int TypeID);// 0x1a5023bfa041
	void SetRoomPasssd(FString Passwd);// 0x1a4f23bfa041
	void SetRoomName(FString Name);// 0x1a4e23bfa041
	void SetRoomLevelLimit(int Level);// 0x1a4d23bfa041
	void SetRoomEnableSwapPos(bool bIsEnabled);// 0x1a4c23bfa041
	void SetRoomEnableInvite(bool bIsEnabled);// 0x1a4b23bfa041
	void OnTournamentBattleEnd();// 0x1a4a23bfa041
	void OnSidePosInTeamChange(FString SideName);// 0x1a4923bfa041
	void OnSideListPostChanged();// 0x1a4823bfa041
	void OnSideListChange(out const SCMSideData[] SideList);// 0x1a4523bfa041
	void OnServerCustomRoomDataReady();// 0x1a4423bfa041
	void OnRep_InGameState();// 0x1a4323bfa041
	void OnRep_GameManagerList();// 0x1a4223bfa041
	void OnRep_GameJobManager();// 0x1a4123bfa041
	void OnRep_GameDataManager();// 0x1a4023bfa041
	void OnRep_CustomRoomData();// 0x1a3f23bfa041
	void OnPlayerBattleStateChange(const SCMPlayerState* PlayerState);// 0x1a3e23bfa041
	void OnOBPlayerListChange();// 0x1a3d23bfa041
	void OnDataManagerPrepare();// 0x1a3c23bfa041
	void OnCustomRoomDataChange(out const CustomRoomData InCustomRoomData);// 0x1a3b23bfa041
	void NotifyVipPlayerJoin(int FlagID, byte VipType, FString NickName, bool bCustomRoom, bool bInTournament);// 0x1a3a23bfa041
	void NotifyRoomDataChanged();// 0x1a3923bfa041
	void MultiClientAllManagersOnRepDelegate__DelegateSignature();// 0x1a3823bfa041
	bool IsNeedCalculateTournamentPoints();// 0x1a3723bfa041
	bool IsInTournament();// 0x1a3623bfa041
	bool IsCustomRoomMode();// 0x1a3523bfa041
	bool IsAtNonSettlementStage();// 0x1a3423bfa041
	void InitKnockoutPointParams(out KnockoutParams InParams);// 0x1a3223bfa041
	TournamentData GetTournamentData();// 0x1a3123bfa041
	CGMManagerConfigComponent* GetManagerConfigComponent();// 0x1a3023bfa041
	CGFormula* GetFormula();// 0x1a2f23bfa041
	CustomRoomData GetCustomRoomData();// 0x1a2a23bfa041
	CGMGameplayConfig* GetCGMGameplayConfig();// 0x1a2923bfa041
	void ClearCustomRoomData();// 0x1a2823bfa041
	int CalculateKnockoutPoints(const int InTeamRank, const int InKillNum, const float InTotalDamage, const float InTotalDamageTaken);// 0x1a2723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	bool IsBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	bool IsBattleSettlement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 0x1]
	enum BattleEndType;//[Offset: 0x45a, Size: 0x1]
	bool IsBattleOver();// 0x1a2623bfa041
	bool GetIsBattleSettlement();// 0x1a2523bfa041
	enum GetBattleEndType();// 0x1a2323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SCMSideData
	SCMPlayerState*[] SidePlayerList;//[Offset: 0x0, Size: 0x10]
	SCMJobData[] JobMap;//[Offset: 0x10, Size: 0x10]
	delegate OnPlayerJoinSideEvent;//[Offset: 0x20, Size: 0x10]
	delegate OnPlayerQuitSideEvent;//[Offset: 0x30, Size: 0x10]
	FString SideName;//[Offset: 0x40, Size: 0x10]
	byte TeamID;//[Offset: 0x50, Size: 0x1]
	int AssignableNum;//[Offset: 0x54, Size: 0x4]
	bool IsSideSettle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMJobData
	FString JobName;//[Offset: 0x0, Size: 0x10]
	int MaxCount;//[Offset: 0x10, Size: 0x4]
	int MatchCount;//[Offset: 0x14, Size: 0x4]
	int CurrentMatchCount;//[Offset: 0x18, Size: 0x4]
	SCMPlayerState*[] JobPlayerList;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: GameDataManager.GameManagerBase.Info.Actor.Object
	int[] IntegerValues;//[Offset: 0x230, Size: 0x10]
	float[] FloatValues;//[Offset: 0x240, Size: 0x10]
	byte[] ByteValues;//[Offset: 0x250, Size: 0x10]
	bool[] BoolValues;//[Offset: 0x260, Size: 0x10]
	Vector[] FVectorValues;//[Offset: 0x270, Size: 0x10]
	FString[] FStringValues;//[Offset: 0x280, Size: 0x10]
	SCMHostData GlobalDataMap;//[Offset: 0x2f0, Size: 0x488]
	<FString,SCMHostData> SideDataMap;//[Offset: 0x778, Size: 0x50]
	<FString,SCMHostData> PlayerDataMap;//[Offset: 0x7c8, Size: 0x50]
	SCMHostData SideDataDefaultTemplate;//[Offset: 0x818, Size: 0x488]
	SCMHostData PlayerDataDefaultTemplate;//[Offset: 0xca0, Size: 0x488]
	<FString,Rank*> RanKMap;//[Offset: 0x1128, Size: 0x50]
	DataTable* DataTable;//[Offset: 0x1198, Size: 0x8]
	DataTable* GeneralDataTable;//[Offset: 0x11a0, Size: 0x8]
	void RemoveHost(enum HostType, FString HostID);// 0x43ae23bfa041
	void RemoveData(enum HostType, FString HostID, FString DataName, enum DataSetType);// 0x43ad23bfa041
	void NotifyRemoveHost(enum HostType, FString HostID);// 0x43ac23bfa041
	void AddDataByTableRow(FName RowName, out const SCMDataBoardRow InTableRow);// 0x43ab23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SCMHostData
	HostChangeData DataChangeToGlobal;//[Offset: 0x0, Size: 0xf0]
	HostChangeData DataChangeToSide;//[Offset: 0xf0, Size: 0xf0]
	HostChangeData DataChangeToSelf;//[Offset: 0x1e0, Size: 0xf0]
	<FString,SCMSaveData> DataMap;//[Offset: 0x2d0, Size: 0x50]
	<FString,SCMArrayData> ArrayDataMap;//[Offset: 0x320, Size: 0x50]
	<FString,SCMMapData> MapDataMap;//[Offset: 0x370, Size: 0x50]
	delegate SCMDataChangeDelegate;//[Offset: 0x460, Size: 0x10]
	FString Name;//[Offset: 0x470, Size: 0x10]
	enum HostType;//[Offset: 0x480, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: HostChangeData
	<FString,enum> DataChangeMap;//[Offset: 0x0, Size: 0x50]
	<FString,SCMChangeDataArray> ArrayChangeMap;//[Offset: 0x50, Size: 0x50]
	<FString,SCMChangeDataMap> MapChangeMap;//[Offset: 0xa0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMChangeDataArray
	enum[] ChangeType;//[Offset: 0x0, Size: 0x10]
	uint32[] ChangeIndexArray;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMChangeDataMap
	enum[] ChangeType;//[Offset: 0x0, Size: 0x10]
	FString[] ChangeKeyArray;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMSaveData.SCMSaveDataBase
<----------Generated by SSpawner v1.0.2---------->


Class: SCMSaveDataBase
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum RepType;//[Offset: 0x11, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMArrayData.SCMSaveDataBase
<----------Generated by SSpawner v1.0.2---------->


Class: SCMMapData.SCMSaveDataBase
<----------Generated by SSpawner v1.0.2---------->


Class: SCMDataBoardRow.TableRowBase
	enum Type;//[Offset: 0x8, Size: 0x1]
	enum DataSetType;//[Offset: 0x9, Size: 0x1]
	FString Default;//[Offset: 0x10, Size: 0x10]
	FString[] DefaultArray;//[Offset: 0x20, Size: 0x10]
	<FString,FString> DefaultMap;//[Offset: 0x30, Size: 0x50]
	enum HostType;//[Offset: 0x80, Size: 0x1]
	enum ReplicateType;//[Offset: 0x81, Size: 0x1]
	enum SettleGatherType;//[Offset: 0x82, Size: 0x1]
	enum Rank;//[Offset: 0x83, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Rank.Object
	<uint32,SpecificRankChangeEventMap(MulticastInlineDelegateProperty)> SpecificRankChangeEventMap;//[Offset: 0x28, Size: 0x50]
	SCMRankListMulticast[] RankListChangeMulticasts;//[Offset: 0x78, Size: 0x10]
	enum RankType;//[Offset: 0xa8, Size: 0x1]
	enum HostType;//[Offset: 0xa9, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SCMRankListMulticast
	int BeginRank;//[Offset: 0x0, Size: 0x4]
	int EndRank;//[Offset: 0x4, Size: 0x4]
	delegate RankListChangeMulticast;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: GameJobManager.GameManagerBase.Info.Actor.Object
	delegate SideListChangeEvent;//[Offset: 0x228, Size: 0x10]
	SCMSideData[] SideData;//[Offset: 0x238, Size: 0x10]
	<FString,uint32> SideIndexMap;//[Offset: 0x248, Size: 0x50]
	<FString,SCMPlayerState*> PlayerIndexMap;//[Offset: 0x298, Size: 0x50]
	SCMPlayerState*[] OBPlayerList;//[Offset: 0x2e8, Size: 0x10]
	DataTable* JobDataTable;//[Offset: 0x318, Size: 0x8]
	SideAttributeSetArray SideAttributeSets;//[Offset: 0x320, Size: 0x120]
	bool SwitchPlayerSideAndJob(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x242b23bfa041
	bool SwitchPlayers(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x242a23bfa041
	bool SwitchPlayerPosInTeam(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x242923bfa041
	bool SwitchOBPlayerAndPlayer(SCMPlayerState* OBPlayer, SCMPlayerState* Player);// 0x242823bfa041
	void SideListChangeEvent__DelegateSignature(out const SCMSideData[] SideList);// 0x242723bfa041
	void SetTimerToNoticeSideDataChanged();// 0x242623bfa041
	void ServerSidePosInTeamChange(FString SideName);// 0x242523bfa041
	bool PreAssignOBToPlayer(SCMPlayerState* Player);// 0x242423bfa041
	bool PreAssignJobToPlayer(SCMPlayerState* Player, FString Side, FString Job, int PosInTeam);// 0x242323bfa041
	void OnRep_SideDataList();// 0x242223bfa041
	void OnRep_OBPlayerList();// 0x242123bfa041
	void OnPlayerStateEndPlay(Actor* PlayerState, byte EndPlayReason);// 0x242023bfa041
	void OnOBPlayerListChanged(SCMPlayerState* ChangedPlayer);// 0x241f23bfa041
	bool IsPlayerSameTeam(SCMPlayerState* TargetPlayer, FString TargetPlayerId);// 0x241e23bfa041
	bool IsExistSide(FString NewSide);// 0x241d23bfa041
	int[] GetTeamAssignableNumArray();// 0x241c23bfa041
	bool GetSidePreJoinPlayerList(FString SideName, out SCMPlayerState*[] OutPreJoinPlayerList);// 0x241b23bfa041
	bool GetSidePlayerList(FString SideName, out SCMPlayerState*[] OutPlayerList);// 0x241a23bfa041
	bool GetSideJobPlayerList(FString SideName, FString JobName, out SCMPlayerState*[] OutPlayerList);// 0x241923bfa041
	bool GetSideData(FString InSideName, out SCMSideData outData);// 0x241823bfa041
	bool GetSideAttributeSet(out SideAttributeSet OutSet, FString InSideName);// 0x241523bfa041
	bool GetPreOBPlayerIDList(out FString[] OutPlayerIDList);// 0x241423bfa041
	SCMPlayerState* GetPlayerByPlayerID(FString InPlayerID);// 0x241323bfa041
	bool GetOBPlayerList(out SCMPlayerState*[] OutPlayerList);// 0x241223bfa041
	bool GetJobDataBySideAndJob(FString NewSide, FString NewJob, out SCMJobData outData);// 0x241123bfa041
	int GetAssignedSideCount();// 0x241023bfa041
	int GetAllSidePlayerNumber();// 0x240f23bfa041
	SCMSideData[] GetAllSideData();// 0x240e23bfa041
	bool ChangePlayerToOB(SCMPlayerState* Player);// 0x240d23bfa041
	bool ChangePlayerJob(SCMPlayerState* Player, FString NewSide, FString NewJob, int PosInTeam);// 0x240c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SideAttributeSetArray.FastArraySerializer
	SideAttributeSet[] AttributeSets_Internal;//[Offset: 0x110, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CGMManagerConfigComponent.SolarGameplayConfigComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BPC_PlayerManager_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	BP_PlayerState_Framework_C*[] AliveRealPlayers;//[Offset: 0xb8, Size: 0x10]
	BP_PlayerState_Framework_C*[] AliveAiPlayers;//[Offset: 0xc8, Size: 0x10]
	BPC_Death_Framework_C* DeathComponent;//[Offset: 0xd8, Size: 0x8]
	BP_PlayerState_Framework_C*[] RealPlayers;//[Offset: 0xe0, Size: 0x10]
	<FString,int> SideRealPlayerCount;//[Offset: 0xf0, Size: 0x50]
	BP_PlayerState_Framework_C*[] GetPlayerList(byte Type, byte Temp_byte_Variable, BP_PlayerState_Framework_C*[] K2Node_Select_Default);// 0x1342223e7a001
	void ReceiveBeginPlay();// 0x1342123e7a001
	void OnPlayerDie(BP_PlayerState_Framework_C* Player);// 0x1342023e7a001
	void OnPlayerResurrect(BP_PlayerState_Framework_C* Player);// 0x1341f23e7a001
	void BattleStart();// 0x1341e23e7a001
	void PlayerOut(BP_PlayerState_Framework_C* Player);// 0x1345c23e7a001
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0xffffffffcc705810
	void ExecuteUbergraph_BPC_PlayerManager(int EntryPoint, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Array_Index_Variable, const byte[] Temp_byte_Variable, const FString[] Temp_string_Variable, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Copy_ReturnValue, int K2Node_Select_Default, BP_PlayerState_Framework_C*[] K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, int CallFunc_Array_Add_ReturnValue, int Temp_int_Loop_Counter_Variable, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_Framework_C* CallFunc_GetComponentByClass_ReturnValue, BPC_Death_Framework_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* K2Node_CustomEvent_NewPlayer, bool K2Node_CustomEvent_bIsAi, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C*[] K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue);// 0x15e1c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BPC_Death_Framework_C.CGMDeathComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd0, Size: 0x8]
	delegate OnPlayerDie;//[Offset: 0xd8, Size: 0x10]
	delegate OnPlayerResurrect;//[Offset: 0xe8, Size: 0x10]
	delegate OnPlayerKill;//[Offset: 0xf8, Size: 0x10]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x108, Size: 0x8]
	S_SkillState SkillStateAfterRevive;//[Offset: 0x110, Size: 0x2]
	void GMRevive(SCMPlayerState* InKilled, out bool AutoRevive, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetLastDeathLocation_Output, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess);// 0x1330e23e7a001
	void Try Buy Resurrect(SCMPlayerState* Player, SolarPointDamageEvent DamageEvent, out bool Succeed, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsOfflinePlayer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_CheckAllTeammateDied_IfAllDied, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x16d4823e7a001
	bool CheckTerminator(SCMPlayerState* InKiller, SCMPlayerState* InKilled, BP_DefenderManager_C* CallFunc_GetDefenderManager_AsBP_Defender_Manager, bool CallFunc_UpdateCheckTerminator_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1330c23e7a001
	void GetDefenderManager(out BP_DefenderManager_C* AsBP Defender Manager, bool CallFunc_IsValid_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0x1330b23e7a001
	static void UpdateDataTrace(byte Type, SCMPlayerState* Killer, SCMPlayerState* Killed, out const SolarPointDamageEvent DamageEvent, Actor* DamageCauser, <FString,FString> AdditionalData, int MoneyNum, <FString,FString> Temp, byte Temp_byte_Variable, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_DeathReason2String_TraceString, FText CallFunc_Conv_BoolToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_BoolToText_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString K2Node_Select_Default, FString Temp_string_Variable, int Temp_int_Array_Index_Variable, FString K2Node_Select_Default, FString CallFunc_Array_Get_Item, <FString,FString> K2Node_MakeMap_Map, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x1330a23e7a001
	void ReceivePlayerKill(SCMPlayerState* Killer, SCMPlayerState* Killed, out const SCMPlayerState*[] Assists, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x1330923e7a001
	void ReceivePlayerDeathVerge(SCMPlayerState* InAttacker, SCMPlayerState* InDeathVergePlayer, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x1330823e7a001
	void ReceivePlayerResurrect(SolarCharacter* ResurrectCharacter, SCMPlayerState* ResurrectPlayer);// 0x1330723e7a001
	static void ExecuteUbergraph_BPC_Death_Framework(int EntryPoint, SCMPlayerState* K2Node_Event_Killer, SCMPlayerState* K2Node_Event_Killed, const SCMPlayerState*[] K2Node_Event_Assists, const SolarPointDamageEvent K2Node_Event_InDamageEvent, Actor* K2Node_Event_InDamageCauser, SCMPlayerState* K2Node_Event_InAttacker, SCMPlayerState* K2Node_Event_InDeathVergePlayer, const SolarPointDamageEvent K2Node_Event_InDamageEvent, Actor* K2Node_Event_InDamageCauser, bool CallFunc_CheckTerminator_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue, SolarCharacter* K2Node_Event_ResurrectCharacter, SCMPlayerState* K2Node_Event_ResurrectPlayer, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x1330623e7a001
	void OnPlayerKill__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x70a8b0473427a000
	void OnPlayerResurrect__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x153e423bfa041
	void OnPlayerDie__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x132f923e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: CGMDeathComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	void ReceivePlayerResurrect(SolarCharacter* ResurrectCharacter, SCMPlayerState* ResurrectPlayer);// 0x421523bfa041
	void ReceivePlayerKill(SCMPlayerState* Killer, SCMPlayerState* Killed, out const SCMPlayerState*[] Assists, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x421423bfa041
	void ReceivePlayerDeathVerge(SCMPlayerState* InAttacker, SCMPlayerState* InDeathVergePlayer, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x421323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_DefenderManager_C.DefenderManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b8, Size: 0x8]
	UI_OpeningShow_C* DefenderUI;//[Offset: 0x2c0, Size: 0x8]
	float ShowTime-Defender;//[Offset: 0x2c8, Size: 0x4]
	float ShowTime-Self;//[Offset: 0x2cc, Size: 0x4]
	byte UiState;//[Offset: 0x2d0, Size: 0x1]
	int TerminatorReward;//[Offset: 0x2d4, Size: 0x4]
	bool DataReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	UI_Common_Transition_Anim_C* Anim;//[Offset: 0x2e0, Size: 0x8]
	bool bBattleStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	void OnRep_BattleStarted();// 0x1573a23e7a008
	void DataTraceDefender(SolarPlayerState* Target, out FString Name, out FString Data, bool Temp_bool_Variable, bool CallFunc_IsTerminator_ReturnValue, bool CallFunc_IsDefender_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString K2Node_Select_Default, FString Temp_string_Variable, FString K2Node_Select_Default);// 0x1268123e7a001
	void GetExtraReward(out int Reward);// 0x1268023e7a001
	void SetShowTime(float ShowTime-Self, float ShowTime-Defender);// 0x1267f23e7a001
	void GetTotalTime(out float TotalTime, float CallFunc_Add_FloatFloat_ReturnValue);// 0x1267e23e7a001
	void GetUI(out UI_OpeningShow_C* Output_Get, const FString[] Temp_string_Variable, UserWidget* CallFunc_CreateSolarWidget_ReturnValue, UI_OpeningShow_C* K2Node_DynamicCast_AsUI_Opening_Show, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, const enum[] Temp_byte_Variable, byte CallFunc_GetTeamID_ReturnValue, const byte[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x1267d23e7a001
	static void OnRep_UIState(bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsPlayingReplay_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsOBPlayer_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Not_PreBool_ReturnValue);// 0x1267c23e7a001
	void ReceiveBeginPlay();// 0x1267b23e7a001
	void [S]ShowDefenderUI();// 0x1267a23e7a001
	void OnUIStateChanged(byte UiState);// 0x1267923e7a001
	void OnDefenderDataReady();// 0x1267823e7a001
	void ShowDefenderUIForReplay();// 0x1577623eba021
	void OnSideHeroPickEnd_Event(FString Side);// 0x24adf720
	void CustomEvent(enum NewState);// 0x1267523e7a001
	static void ExecuteUbergraph_BP_DefenderManager(int EntryPoint, GameManagerBase* CallFunc_GetGameManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_HeroPickManager_C* K2Node_DynamicCast_AsBP_Hero_Pick_Manager, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_UIState, UI_OpeningShow_C* CallFunc_GetUI_Output_Get, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, const SolarPlayerState*[] CallFunc_GetDefenderList_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_OpeningShow_C* CallFunc_GetUI_Output_Get, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString K2Node_CustomEvent_Side, bool CallFunc_IsOBPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum CallFunc_GetInGameState_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, enum K2Node_CustomEvent_NewState, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1267323e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: DefenderManager.GameManagerBase.Info.Actor.Object
	delegate OnRepDefenderListNotify;//[Offset: 0x228, Size: 0x10]
	TerminatorNotifyUIConfig TerminatorNotifyUIConfig;//[Offset: 0x238, Size: 0x28]
	class SolarTrailEffect* TrailEffect;//[Offset: 0x260, Size: 0x8]
	FString DefenderSide;//[Offset: 0x268, Size: 0x10]
	SolarPlayerState*[] DefenderList;//[Offset: 0x278, Size: 0x10]
	FString TerminatorPlayerId;//[Offset: 0x290, Size: 0x10]
	bool UpdateCheckTerminator(SCMPlayerState* InKiller, SCMPlayerState* InKilled);// 0x438d23bfa041
	void StartConfirmDefender();// 0x438c23bfa041
	void ShowDefenderUIForReplay();// 0x438b23bfa041
	void OnRep_DefenderList();// 0x438a23bfa041
	bool IsTerminator(FString InSolarPlayerID);// 0x438923bfa041
	bool IsDefender(FString InPlayerSide);// 0x438823bfa041
	SolarPlayerState*[] GetDefenderList();// 0x438723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TerminatorNotifyUIConfig
	int LocalizationID;//[Offset: 0x0, Size: 0x4]
	class UINoticeBase* TerminatorNotifyUI;//[Offset: 0x18, Size: 0x8]
	enum NoticeType;//[Offset: 0x20, Size: 0x1]
	float NoticeTime;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarRichTextBlock* TextWidget;//[Offset: 0x348, Size: 0x8]
	Image* TxtBg;//[Offset: 0x350, Size: 0x8]
	Image* Icon;//[Offset: 0x358, Size: 0x8]
	Image* IconBg;//[Offset: 0x360, Size: 0x8]
	void ShowEnterAnimation();// 0x41b823bfa041
	void SetIconBrush(FString IconPath);// 0x41b723bfa041
	void SetColor(out const NoticeColorData InColorData);// 0x41b623bfa041
	void ResetIsPlayingVoice(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x41b523bfa041
	WidgetAnimation* GetExitAnimation();// 0x41b423bfa041
	WidgetAnimation* GetEnterAnimation();// 0x41b323bfa041
	void DefaultClose();// 0x41b223bfa041
	void CloseNotice();// 0x41b123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: NoticeColorData
	LinearColor TextBg;//[Offset: 0x0, Size: 0x10]
	LinearColor IconBg;//[Offset: 0x10, Size: 0x10]
	LinearColor Icon;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarRichTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	FText Text;//[Offset: 0x160, Size: 0x18]
	int LocTextID;//[Offset: 0x178, Size: 0x4]
	enum PreviewLang;//[Offset: 0x17c, Size: 0x1]
	DataTable* TextStyleSet;//[Offset: 0x180, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x188, Size: 0x10]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x1a0, Size: 0x2a8]
	float MinDesiredWidth;//[Offset: 0x448, Size: 0x4]
	bool bUsingAccurateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 0x1]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x6f8, Size: 0x10]
	void SetWrapTextAt(float InWrapTextAt);// 0x528023bfa041
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x527f23bfa041
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x527e23bfa041
	void SetText(out const FText InText);// 0x527d23bfa041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x527c23bfa041
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x527b23bfa041
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x527a23bfa041
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x527923bfa041
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x527823bfa041
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x527723bfa041
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x527623bfa041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x527523bfa041
	enum GetWrappingPolicy();// 0x527423bfa041
	DataTable* GetTextStyleSet();// 0x527323bfa041
	FText GetText();// 0x527223bfa041
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x527123bfa041
	void ClearAllDefaultStyleOverrides();// 0x527023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x60]
	SlateColor ColorAndOpacity;//[Offset: 0x68, Size: 0x28]
	Vector2D ShadowOffset;//[Offset: 0x90, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x98, Size: 0x10]
	SlateColor SelectedBackgroundColor;//[Offset: 0xa8, Size: 0x28]
	LinearColor HighlightColor;//[Offset: 0xd0, Size: 0x10]
	SlateBrush HighlightShape;//[Offset: 0xe0, Size: 0x98]
	SlateBrush StrikeBrush;//[Offset: 0x178, Size: 0x98]
	SlateBrush UnderlineBrush;//[Offset: 0x210, Size: 0x98]
<----------Generated by SSpawner v1.0.2---------->


Class: RichTextBlockDecorator.Object
<----------Generated by SSpawner v1.0.2---------->


Class: UI_OpeningShow_C.UIDefenderTeamShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x468, Size: 0x8]
	WidgetAnimation* Enter_Anim;//[Offset: 0x470, Size: 0x8]
	Image* de_img_Bg;//[Offset: 0x478, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x480, Size: 0x8]
	Image* Img_Flash_Left;//[Offset: 0x488, Size: 0x8]
	Image* Img_Flash_Right;//[Offset: 0x490, Size: 0x8]
	Image* Img_TitleBg;//[Offset: 0x498, Size: 0x8]
	Image* M_Glitch_Blue_Left;//[Offset: 0x4a0, Size: 0x8]
	Image* M_Glitch_Blue_Right;//[Offset: 0x4a8, Size: 0x8]
	Image* my_img_Bg;//[Offset: 0x4b0, Size: 0x8]
	Overlay* Overlay_Tip;//[Offset: 0x4b8, Size: 0x8]
	RichTextBlock* Txt_Tips;//[Offset: 0x4c0, Size: 0x8]
	SolarTextBlock* Txt_Title;//[Offset: 0x4c8, Size: 0x8]
	SolarTextBlock* Txt_Title;//[Offset: 0x4d0, Size: 0x8]
	SolarTextBlock* Txt_Title_VX;//[Offset: 0x4d8, Size: 0x8]
	enum BP_TeamType;//[Offset: 0x4e0, Size: 0x1]
	int TerminatorReward;//[Offset: 0x4e4, Size: 0x4]
	void UpdateOpeningShow(enum TeamType);// 0x1257423e7a001
	void OnSolarUIOpened();// 0xffffffff8b7f4420
	void OnSolarUIClosed();// 0xffffffff08be7520
	void ExecuteUbergraph_UI_OpeningShow(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, enum K2Node_Event_TeamType, UIDefenderPlaerShowWidget*[] K2Node_MakeArray_Array, bool CallFunc_GreaterEqual_IntInt_ReturnValue, UIDefenderPlaerShowWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, enum K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue, int K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, int K2Node_Select_Default, bool CallFunc_Conv_IntToBool_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, LinearColor K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, LinearColor K2Node_Select_Default);// 0xffffffff08bdbc80
<----------Generated by SSpawner v1.0.2---------->


Class: UIDefenderTeamShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x348, Size: 0x8]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x350, Size: 0x8]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x358, Size: 0x8]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x360, Size: 0x8]
	WidgetAnimation* Exit_Anim;//[Offset: 0x368, Size: 0x8]
	int PlayerNum;//[Offset: 0x370, Size: 0x4]
	bool bIsMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	FName LevelName;//[Offset: 0x378, Size: 0x8]
	FString ActorName;//[Offset: 0x380, Size: 0x10]
	FString ActorName;//[Offset: 0x390, Size: 0x10]
	FString ActorName;//[Offset: 0x3a0, Size: 0x10]
	FString ActorName;//[Offset: 0x3b0, Size: 0x10]
	FString CameraName;//[Offset: 0x3c0, Size: 0x10]
	FString CameraName;//[Offset: 0x3d0, Size: 0x10]
	FString CameraName;//[Offset: 0x3e0, Size: 0x10]
	FString CameraName;//[Offset: 0x3f0, Size: 0x10]
	SolarPlayerState*[] MyTeamPlayerState;//[Offset: 0x400, Size: 0x10]
	SolarPlayerState*[] DefenderTeamPlayerState;//[Offset: 0x410, Size: 0x10]
	UIDefenderPlaerShowWidget*[] ShowWidget;//[Offset: 0x420, Size: 0x10]
	Actor*[] OutActors;//[Offset: 0x430, Size: 0x10]
	SceneCapture2D*[] OutSceneCapture2Ds;//[Offset: 0x440, Size: 0x10]
	WidgetTransform[] Transforms;//[Offset: 0x450, Size: 0x10]
	void UpdateOpeningShow(enum TeamType);// 0x5b7323bfa041
	void SwitchTeamShow(enum TeamType);// 0x5b7223bfa041
	void ShowPlayerInfo();// 0x5b7123bfa041
	void SetMyTeamPlayerState(out const SolarPlayerState*[] TeamPlayerState);// 0x5b7023bfa041
	void SetDefenderTeamPlayerState(out const SolarPlayerState*[] TeamPlayerState);// 0x5b6f23bfa041
	void CloseDefenderTeamShowWidget();// 0x5b6e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UIDefenderPlaerShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	ScaleBox* ScaleBox_Card;//[Offset: 0x348, Size: 0x8]
	FString playerName;//[Offset: 0x350, Size: 0x10]
	int Level;//[Offset: 0x360, Size: 0x4]
	int RankLevelID;//[Offset: 0x364, Size: 0x4]
	int PlayerGender;//[Offset: 0x368, Size: 0x4]
	bool bIsMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]
	int PlayerSeat;//[Offset: 0x370, Size: 0x4]
	bool bIsMySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	int CardPose;//[Offset: 0x378, Size: 0x4]
	int Cardbackground;//[Offset: 0x37c, Size: 0x4]
	ExpRankMedalData[] AllExpRankMedalData;//[Offset: 0x380, Size: 0x10]
	int CharacterExp;//[Offset: 0x390, Size: 0x4]
	MedalInfo[] TargetCardMedalArray;//[Offset: 0x398, Size: 0x10]
	SolarPlayerState* PlayerState;//[Offset: 0x3a8, Size: 0x8]
	SolarBusinessCardCharacter* RTCharacter;//[Offset: 0x3b0, Size: 0x8]
	Actor* RTCharacterBackground;//[Offset: 0x3b8, Size: 0x8]
	Vector RTLocation;//[Offset: 0x3c0, Size: 0xc]
	void SetPlayerShowInfo(SolarPlayerState* PS, bool bIsSelf, int Seat, bool bIsSelfTeam, int SelfLevel, Vector CardRTLocation);// 0x5b6d23bfa041
	void SetPlayerBusinessInfo(SolarPlayerState* PS, int PlayerNumber, ExpRankMedalData ExpRankMedalData);// 0x5b6c23bfa041
	void SetCharacterSkin();// 0x5b6b23bfa041
	void SetBusinessCard(int PoseId, int BackgroundId, int SkinId, ScaleBox* ParentPanel);// 0x5b6a23bfa041
	void OnRefreshWidget();// 0x5b6923bfa041
	FString GetNameCardCharacterPathByCharacterIDAndCardPose(int CharacterId, int CardPoseID);// 0x5b6823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x149, Size: 0x1]
	byte StretchDirection;//[Offset: 0x14a, Size: 0x1]
	float UserSpecifiedScale;//[Offset: 0x14c, Size: 0x4]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	float IgnoreSlightScaleModificationPercent;//[Offset: 0x154, Size: 0x4]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x5ebb23bfa041
	void SetStretchDirection(byte InStretchDirection);// 0x5eba23bfa041
	void SetStretch(byte InStretch);// 0x5eb923bfa041
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x5eb823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBusinessCardCharacter.Actor.Object
	void SetSkin(SkeletalMesh* LoadedSkinRes, MaterialInterface* LoadedCharaSkinRes);// 0x4b1523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x3c7023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3c7b23bfa041
	void SetPadding(Margin InPadding);// 0x3c7a23bfa041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3c7923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x160, Size: 0x18]
	DataTable* TextStyleSet;//[Offset: 0x178, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x180, Size: 0x10]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x198, Size: 0x2a8]
	float MinDesiredWidth;//[Offset: 0x440, Size: 0x4]
	enum TextTransformPolicy;//[Offset: 0x444, Size: 0x1]
	TextBlockStyle DefaultTextStyle;//[Offset: 0x448, Size: 0x2a8]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x6f0, Size: 0x10]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x3c5923bfa041
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x3c5823bfa041
	void SetText(out const FText InText);// 0x3c5723bfa041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3c5623bfa041
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x3c5523bfa041
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x3c5423bfa041
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x3c5323bfa041
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x3c5223bfa041
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x3c5123bfa041
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x3c5023bfa041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x3c4f23bfa041
	FText GetText();// 0x3c4e23bfa041
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x3c4d23bfa041
	void ClearAllDefaultStyleOverrides();// 0x3c4c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x238, Size: 0x8]
	void OnInterpToggle(bool bEnable);// 0x66fc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x228, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x3a8, Size: 0x1]
	float FOVAngle;//[Offset: 0x3ac, Size: 0x4]
	float OrthoWidth;//[Offset: 0x3b0, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x3b8, Size: 0x8]
	bool bAutoSceneCapture2DSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	byte CompositeMode;//[Offset: 0x3c1, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x3d0, Size: 0x5a0]
	float PostProcessBlendWeight;//[Offset: 0x970, Size: 0x4]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x974, Size: 0x1]
	float CustomNearClippingPlane;//[Offset: 0x978, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x980, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x9c4, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x9d0, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9dc, Size: 0x1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9dc, Size: 0x1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9dd, Size: 0x1]
	bool bControlSceneCaptureComponent2DFPS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9de, Size: 0x1]
	int MaxSceneCaptureComponent2DFPS;//[Offset: 0x9e0, Size: 0x4]
	void CaptureScene();// 0x66fe23bfa041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x66fd23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x314, Size: 0x1]
	byte CaptureSource;//[Offset: 0x315, Size: 0x1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x316, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x316, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x318, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x328, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x338, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x348, Size: 0x10]
	float LODDistanceFactor;//[Offset: 0x358, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x35c, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x360, Size: 0x4]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x368, Size: 0x10]
	FString ProfilingEventName;//[Offset: 0x388, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x66d523bfa041
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x66d423bfa041
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x66d323bfa041
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x66d223bfa041
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x66d123bfa041
	void HideComponent(PrimitiveComponent* InComponent);// 0x66d023bfa041
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x66cf23bfa041
	void ClearShowOnlyComponents();// 0x66ce23bfa041
	void ClearHiddenComponents();// 0x66cd23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Common_Transition_Anim_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* Anim_Transition;//[Offset: 0x350, Size: 0x8]
	WidgetAnimation* Anim_Transition_Exit;//[Offset: 0x358, Size: 0x8]
	WidgetAnimation* Anim_Transition_Loop;//[Offset: 0x360, Size: 0x8]
	WidgetAnimation* Anim_Transition_Enter;//[Offset: 0x368, Size: 0x8]
	void OnSolarUIOpened();// 0x2dffbd23eea02e
	void ExecuteUbergraph_UI_Common_Transition_Anim(int EntryPoint, int CallFunc_StaticPostAkEventByName_ReturnValue, int CallFunc_StaticPostAkEventByName_ReturnValue);// 0xffffffff08be9740
<----------Generated by SSpawner v1.0.2---------->


Class: BP_HeroPickManager_C.HeroPickManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x278, Size: 0x8]
	delegate OnAllHeroPickEnd;//[Offset: 0x280, Size: 0x10]
	delegate OnSideHeroPickEnd;//[Offset: 0x290, Size: 0x10]
	void ReceiveAllHeroPickEnd();// 0x1266923e7a001
	void ReceiveSidePickHeroEnd(FString SideName);// 0x1266823e7a001
	void ExecuteUbergraph_BP_HeroPickManager(int EntryPoint, FString K2Node_Event_SideName);// 0xffffffff08bda160
	void OnSideHeroPickEnd__DelegateSignature(FString Side);// 0xffffffff08be6560
	void OnAllHeroPickEnd__DelegateSignature();// 0xffffffff08be1be0
<----------Generated by SSpawner v1.0.2---------->


Class: HeroPickManager.GameManagerBase.Info.Actor.Object
	HeroPickInfo*[] HeroPickArray;//[Offset: 0x228, Size: 0x10]
	float HeroPickTime;//[Offset: 0x238, Size: 0x4]
	float TransitionAnimTime;//[Offset: 0x23c, Size: 0x4]
	float WaitingToStartTime;//[Offset: 0x240, Size: 0x4]
	float WaitingForEndTime;//[Offset: 0x244, Size: 0x4]
	HeroPickRuleBase* AIPickRule;//[Offset: 0x248, Size: 0x8]
	SoftObjectPath[] ElementLevels;//[Offset: 0x250, Size: 0x10]
	bool bIsAllPlayerSelecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	bool SideBeginHeroPick(FString SideName);// 0x444223bfa041
	void SetHeroPickTime(float InHeroPickTime);// 0x444123bfa041
	void ReceiveSidePickHeroEnd(FString SideName);// 0x444023bfa041
	void ReceiveAllHeroPickEnd();// 0x443f23bfa041
	bool PlayerBeginHeroPick(SolarPlayerState* Player);// 0x443e23bfa041
	void On_RepAllPlayerSelectEnd();// 0x443d23bfa041
	void AllPlayersGotoPickHero();// 0x443c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: HeroPickRuleBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: S_SkillState
	enum UniqueAbility_4_1687CEEF476DE16EEE6A42B53EC116E7;//[Offset: 0x0, Size: 0x1]
	enum TacticsAbility_5_36D081C34231A20607055BA95F67E65B;//[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: S_ResurrectInfo
	bool bClearWeapons_8_85433FCD494E4E2DDCA2F6AB69D508C9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bClearAllItems_7_1B66870A49E70A4A31DBD1B93C1AE45D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bEmptyEnergy_9_422079A04E20412A0DD60594501D7D8C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bReChargeJetToFull_10_2649F2CB4F2A722D287E91848E966DBF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	enum ResurrectMethod_15_E3E0A84B479C7DB70DAAF88AAF99DA23;//[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CFG_Framework_C.CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	BP_ConfigSave_C* ModeConfig;//[Offset: 0x278, Size: 0x8]
	bool None;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	static CustomRoomData GetCustomRoomData(bool Temp_bool_Variable, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, CustomRoomData K2Node_Select_Default);// 0xffffff8f23bfa000
	bool IsCustomRoomMode(bool Temp_bool_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default);// 0x152aa23e7a008
	void GetSavedConfig(out BP_ConfigSave_C* AsBP Config Save, out bool bSuccess, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ConfigSave_C* K2Node_DynamicCast_AsBP_Config_Save, bool K2Node_DynamicCast_bSuccess);// 0x1326523e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: BP_ConfigSave_C.SaveGame.Object
	bool bEnableAiTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bEnableCustomRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	CustomRoomData CustomRoomConfig;//[Offset: 0x30, Size: 0x78]
	bool bIsCustomRoomHost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BPC_BuyResurrection_C.SolarResurrectionComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x138, Size: 0x8]
	UI_BuyResurrectionPanel_C* UI_BuyResurrectionPanel;//[Offset: 0x140, Size: 0x8]
	BP_ReviveItemManger_BattleRoyale_C* ReviveItemManger;//[Offset: 0x148, Size: 0x8]
	int SuccessTime;//[Offset: 0x150, Size: 0x4]
	bool BuyResurrectionSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	float RemindTeammateEffectCooldown;//[Offset: 0x158, Size: 0x4]
	float BuyResurrectionInvincibleTime;//[Offset: 0x15c, Size: 0x4]
	Vector RebornLoc;//[Offset: 0x160, Size: 0xc]
	void CheckAllTeammateDied(out bool IfAllDied, int CallFunc_Get_Alive_Team_Player_Num_Num, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x1317a23e7a001
	void RefreshUI(Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x130db23e7a001
	SCMPlayerState*[] GetTeammatesArr(const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetTeamID_ReturnValue, const byte[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x130da23e7a001
	static void On All Teammates Killed(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_ObjectToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x130d923e7a001
	static void Get Alive Team Player Num(SCMPlayerState* OutPlayer, out int Num, int NumberOfSurvivingTeammates, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, bool CallFunc___A_Is_Player_Reviving_Reviving, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x130d823e7a001
	void Show Buy Resurrection UI(bool Visible, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, UI_BuyResurrectionPanel_C* K2Node_DynamicCast_AsUI_Buy_Resurrection_Panel, bool K2Node_DynamicCast_bSuccess);// 0x130d723e7a001
	void Event_LeaveWhileWaiting();// 0x130d623e7a001
	void ClientDoCameraFade();// 0x130d523e7a001
	void Event_OnRevivingComplete(FString PlayerId);// 0x1539c23bfa041
	void Event_OnRevivedComplete();// 0xffffffff8b733430
	void Event_OnResurrectionStateChanged(enum LastState);// 0x130d223e7a001
	static void ExecuteUbergraph_BPC_BuyResurrection(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, GameplayEventData K2Node_MakeStruct_GameplayEventData, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_Get_Alive_Team_Player_Num_Num, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_IsServer_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool K2Node_SwitchEnum_CmpSuccess, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsValid_ReturnValue, FString K2Node_Event_PlayerID, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, enum K2Node_Event_LastState, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x1539a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarResurrectionComponent.ActorComponent.Object
	byte bEnableResurrection;//[Offset: 0xb0, Size: 0x1]
	DeathTreasureBox* DeathBox;//[Offset: 0xb8, Size: 0x8]
	Vector DeathBoxLoc;//[Offset: 0xc0, Size: 0xc]
	enum ResurrectionState;//[Offset: 0xcc, Size: 0x1]
	delegate OnResurrectionStateChanged;//[Offset: 0xd0, Size: 0x10]
	float CurrentCountDownStartTime;//[Offset: 0xe0, Size: 0x4]
	float CountDownAccTime;//[Offset: 0xe4, Size: 0x4]
	float ConfigCountDownTime;//[Offset: 0xf0, Size: 0x4]
	float ResurrectionClutchTime;//[Offset: 0xf4, Size: 0x4]
	bool bIsTimeoutCountDownPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	delegate OnTimeoutCountDownStateChanged;//[Offset: 0x108, Size: 0x10]
	WorldMark_ReviveTeammates* DeathBoxMark;//[Offset: 0x118, Size: 0x8]
	class WorldMark_ReviveTeammates* DeathBoxMarkClass;//[Offset: 0x120, Size: 0x8]
	Actor* RebornLine;//[Offset: 0x128, Size: 0x8]
	class Actor* RebornLineClass;//[Offset: 0x130, Size: 0x8]
	void TryContinueTimeoutCountDown();// 0x244023bfa041
	void SetResurrectionState(enum NewState, bool bShouldNotifyOnServer);// 0x243f23bfa041
	void SetDeathBox(DeathTreasureBox* InDeathBox);// 0x243e23bfa041
	void ServerNotifyTeammatesHelp();// 0x243d23bfa041
	void OnTimeoutCountDownStateChanged__DelegateSignature(bool bPaused);// 0x243c23bfa041
	void OnResurrectionStateChanged__DelegateSignature(enum NewState);// 0x243b23bfa041
	void OnRep_ResurrectionState(enum LastState);// 0x243a23bfa041
	void OnRep_bIsTimeoutCountDownPaused();// 0x243923bfa041
	void MulticastPlayMarkNotify();// 0x243823bfa041
	void LazyPauseTimeoutCountDownByClutchTime();// 0x243723bfa041
	float GetWaitTimeRemaining();// 0x243623bfa041
	Vector GetDeathBoxLoc();// 0x243523bfa041
	void Event_OnRevivingComplete(FString PlayerId);// 0x243423bfa041
	void Event_OnRevivedComplete();// 0x243323bfa041
	void Event_OnResurrectionStateChanged(enum LastState);// 0x243123bfa041
	void EnterBuyResurrectionProcess();// 0x243023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UI_BuyResurrectionPanel_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	Panel_Interact_Progress_C* Panel_Interact_Progress;//[Offset: 0x350, Size: 0x8]
	CanvasPanel* Root;//[Offset: 0x358, Size: 0x8]
	UI_HUD_Notice_BuyResurrection_C* UI_HUD_Notice_BuyResurrection;//[Offset: 0x360, Size: 0x8]
	BPC_BuyResurrection_C* BuyComp;//[Offset: 0x368, Size: 0x8]
	FString NotifyString;//[Offset: 0x370, Size: 0x10]
	bool IsBeingRevived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	void Set Btn Vis(bool Show);// 0x129b523e7a001
	void Set Btna And Tip Visibility(bool Visibility, Actor* CallFunc_GetOwner_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x129b423e7a001
	void Event_Init(BPC_BuyResurrection_C* BuyComp);// 0x129b323e7a001
	void EventOnStateChange(enum NewState);// 0x129b223e7a001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x129b123e7a001
	void OnReviveStateChange(SolarPlayerState* RevivingMePlayer);// 0x1425023e7a009
	void BndEvt__Panel_Interact_Progress_K2Node_ComponentBoundEvent_1_SimpleDynamicMulticastDelegate__DelegateSignature();// 0x1461823e7a008
	void Notify Teammate Revive();// 0x6188f23c4a100
	static void ExecuteUbergraph_UI_BuyResurrectionPanel(int EntryPoint, const <FString,FString> Temp_string_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_GetNoticeFormatText_ReturnValue, BPC_BuyResurrection_C* K2Node_CustomEvent_BuyComp, enum K2Node_CustomEvent_NewState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_GetWaitTimeRemaining_ReturnValue, int CallFunc_FTrunc_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_IsValid_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromUI_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarPlayerState* K2Node_CustomEvent_RevivingMePlayer, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromUI_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffffff72551400
<----------Generated by SSpawner v1.0.2---------->


Class: Panel_Interact_Progress_C.SolarProgressiveInteractButton.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e8, Size: 0x8]
	WidgetAnimation* Enter_Anim;//[Offset: 0x3f0, Size: 0x8]
	WidgetAnimation* Select_Anim;//[Offset: 0x3f8, Size: 0x8]
	SolarButton* Btn_Interact;//[Offset: 0x400, Size: 0x8]
	WidgetSwitcher* CancelableSwitcher;//[Offset: 0x408, Size: 0x8]
	Image* Img_Icon;//[Offset: 0x410, Size: 0x8]
	Image* img_Icon_Light;//[Offset: 0x418, Size: 0x8]
	Image* Img_Light;//[Offset: 0x420, Size: 0x8]
	Image* Img_Light;//[Offset: 0x428, Size: 0x8]
	WidgetSwitcher* InteractableSwitcher;//[Offset: 0x430, Size: 0x8]
	CanvasPanel* Panel_CD;//[Offset: 0x438, Size: 0x8]
	SolarAdapterWidget* Panel_Interact_KeyMapping;//[Offset: 0x440, Size: 0x8]
	CanvasPanel* Panel_Progress_CountDown;//[Offset: 0x448, Size: 0x8]
	CanvasPanel* Panel_ReduceCD;//[Offset: 0x450, Size: 0x8]
	UI_Button_ReduceCD_Clock_C* ReduceCD_Clock;//[Offset: 0x458, Size: 0x8]
	UI_Button_ReduceCD_Light_C* ReduceCD_Light;//[Offset: 0x460, Size: 0x8]
	SolarTextBlock* Txt_Cancel;//[Offset: 0x468, Size: 0x8]
	SolarTextBlock* Txt_Interact;//[Offset: 0x470, Size: 0x8]
	UI_Button_Selected_Anim_C* UI_Button_Selected_Anim;//[Offset: 0x478, Size: 0x8]
	UI_Skill_CDRefresh_Anim_C* UI_Skill_CDRefresh_Anim;//[Offset: 0x480, Size: 0x8]
	enum State;//[Offset: 0x488, Size: 0x1]
	byte InteractType;//[Offset: 0x489, Size: 0x1]
	bool ShowProgressBarPrevInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48a, Size: 0x1]
	bool NonProgressText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48b, Size: 0x1]
	bool HideNonCancellableTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	void RefreshToNonCancellableInteracting();// 0x1293d23e7a001
	void RefreshToCancellableInteracting();// 0x1293c23e7a001
	void RefreshToPreInteract();// 0x1293b23e7a001
	void PlayFadeInAnim();// 0x1293a23e7a001
	void HidePassiveBuff();// 0x1411723e7a008
	void ShowPassiveBuff(int CharacterId, int LocalTextId);// 0x1293823e7a001
	void EnablePassiveBuffDisplay(int CharacterId, int LocalTextId);// 0x1293723e7a001
	void SetProgressBarRatio(float Ratio);// 0x1293623e7a001
	void SetProgressBarVisiblity(bool bShow, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x1293523e7a001
	static void SetInteractType(byte InteractType, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, enum Temp_byte_Variable, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, int Temp_int_Variable, SlateColor K2Node_MakeStruct_SlateColor, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, byte Temp_byte_Variable, int K2Node_Select_Default, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, byte Temp_byte_Variable, Vector2D K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default);// 0x1293423e7a001
	void UpdateStateView(enum InState, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte K2Node_Select_Default, byte K2Node_Select_Default);// 0x1293323e7a001
	void PreConstruct(bool IsDesignTime);// 0x1293223e7a001
	void Construct();// 0x1293123e7a001
	void BP_UpdateStateView(enum InState);// 0x1293023e7a001
	void BndEvt__Btn_Interact_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x1292f23e7a001
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x1417123e7a008
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0xdf5623bfa041
	void ExecuteUbergraph_Panel_Interact_Progress(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, enum K2Node_Event_InState, bool CallFunc_IsPlatformDesktop_ReturnValue, enum K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, const WidgetAnimation* K2Node_Event_Animation, enum K2Node_Select_Default, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, const WidgetAnimation* K2Node_Event_Animation, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x1425923e7a031
<----------Generated by SSpawner v1.0.2---------->


Class: SolarProgressiveInteractButton.SolarUserWidget.UserWidget.Widget.Visual.Object
	delegate OnCompleteDelegate;//[Offset: 0x348, Size: 0x10]
	delegate OnCancelDelegate;//[Offset: 0x358, Size: 0x10]
	delegate OnStartInteract;//[Offset: 0x368, Size: 0x10]
	bool bIsInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 0x1]
	GaugeImage* Image_GameProgressBar;//[Offset: 0x3a0, Size: 0x8]
	SolarTextBlock* Text_GameProgressTime;//[Offset: 0x3a8, Size: 0x8]
	Button* BTN_GameProgressCancel;//[Offset: 0x3b0, Size: 0x8]
	TextBlock* Text_GameProgressTips;//[Offset: 0x3b8, Size: 0x8]
	HorizontalBox* HorizontalBox_Cancel;//[Offset: 0x3c0, Size: 0x8]
	HUDPassiveHeadWidget* Panel_PassiveBuff;//[Offset: 0x3c8, Size: 0x8]
	Overlay* Overlay_CD;//[Offset: 0x3d0, Size: 0x8]
	GaugeImage* Image_CD;//[Offset: 0x3d8, Size: 0x8]
	SolarTextBlock* Txt_CDTime;//[Offset: 0x3e0, Size: 0x8]
	void UpdateGameProgressTipsText(const int InTextId);// 0x26ab23bfa041
	void UpdateGameProgressText();// 0x26aa23bfa041
	void UpdateGameProgressBarPercent(const float InPercent);// 0x26a923bfa041
	void UpdateGameProgress(const float InAddition);// 0x26a823bfa041
	void TryCancelInteraction();// 0x26a723bfa041
	void StopGameProgress(const int InActionID);// 0x26a623bfa041
	void StopCountDownProgress(const int InActionID);// 0x26a523bfa041
	void StartCountDownProgress(out const CountDownInfo InCountInfo);// 0x26a423bfa041
	void SimpleDynamicMulticastDelegate__DelegateSignature();// 0x26a323bfa041
	void ShowPassiveBuff(int CharacterId, int LocalTextId);// 0x26a223bfa041
	void RefreshToPreInteract();// 0x26a123bfa041
	void RefreshToNonCancellableInteracting();// 0x26a023bfa041
	void RefreshToCancellableInteracting();// 0x269f23bfa041
	void OnSteamCancelCountDown();// 0x269e23bfa041
	void OnParentVisibilityChanged(const bool bVisible);// 0x269d23bfa041
	void OnCompleteInternal();// 0x269c23bfa041
	void OnCancelButtonClicked();// 0x269b23bfa041
	void HidePassiveBuff();// 0x269a23bfa041
	void EnterCD(float TotalTime, float StartTime);// 0x269923bfa041
	void BP_UpdateStateView(enum InState);// 0x269823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarButton.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x150, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x158, Size: 0x2b8]
	byte ImageFillType;//[Offset: 0x410, Size: 0x1]
	float ImageFillRatioHorizontal;//[Offset: 0x414, Size: 0x4]
	float ImageFillRatioVertical;//[Offset: 0x418, Size: 0x4]
	float ImageFillPixelLeft;//[Offset: 0x41c, Size: 0x4]
	float ImageFillPixelTop;//[Offset: 0x420, Size: 0x4]
	float ImageFillPixelRight;//[Offset: 0x424, Size: 0x4]
	float ImageFillPixelBottom;//[Offset: 0x428, Size: 0x4]
	LinearColor ColorAndOpacity;//[Offset: 0x42c, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x43c, Size: 0x10]
	bool bReleaseUnfocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 0x1]
	bool bEnableClickSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 0x1]
	FString ClickSoundEventName;//[Offset: 0x450, Size: 0x10]
	byte ClickMethod;//[Offset: 0x460, Size: 0x1]
	byte TouchMethod;//[Offset: 0x461, Size: 0x1]
	byte PressMethod;//[Offset: 0x462, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x463, Size: 0x1]
	delegate OnClicked;//[Offset: 0x468, Size: 0x10]
	delegate OnPressed;//[Offset: 0x478, Size: 0x10]
	delegate OnReleased;//[Offset: 0x488, Size: 0x10]
	delegate OnHovered;//[Offset: 0x498, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x4a8, Size: 0x10]
	delegate OnFocusLosted;//[Offset: 0x4b8, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x4b1d23bfa041
	void SetStyle(out const ButtonStyle InStyle);// 0x4b1c23bfa041
	void SetPressMethod(byte InPressMethod);// 0x4b1b23bfa041
	void SetImageFillType(byte InImageFillType);// 0x4b1a23bfa041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4b1923bfa041
	void SetClickMethod(byte InClickMethod);// 0x4b1823bfa041
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x4b1723bfa041
	bool IsPressed();// 0x4b1623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x14c, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x3b8323bfa041
	void SetActiveWidget(Widget* Widget);// 0x3b8223bfa041
	Widget* GetWidgetAtIndex(int Index);// 0x3b8123bfa041
	int GetNumWidgets();// 0x3b8023bfa041
	int GetActiveWidgetIndex();// 0x3b7f23bfa041
	Widget* GetActiveWidget();// 0x3b7e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarAdapterWidget.ContentWidget.PanelWidget.Widget.Visual.Object
	enum WidgetLoadType;//[Offset: 0x149, Size: 0x1]
	SoftClassPath MobileWidgetPath;//[Offset: 0x150, Size: 0x18]
	SoftClassPath DesktopWidgetPath;//[Offset: 0x168, Size: 0x18]
	WidgetOverrideParam[] OverrideParamList;//[Offset: 0x180, Size: 0x10]
	SoftClassPath CurWidgetPath;//[Offset: 0x190, Size: 0x18]
	UserWidget* AdapteeWidget;//[Offset: 0x1a8, Size: 0x8]
	void RefreshUIByOverrideParams(out const WidgetOverrideParam[] WidgetOverrideParams);// 0x497523bfa041
	void LoadUserWidgetResource();// 0x497423bfa041
	UserWidget* GetAdapteeWidget();// 0x497323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetOverrideParam
	enum Type;//[Offset: 0x0, Size: 0x1]
	FName ChildName;//[Offset: 0x4, Size: 0x8]
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	FText Text;//[Offset: 0x10, Size: 0x18]
	int LocTextID;//[Offset: 0x28, Size: 0x4]
	SlateBrush Brush;//[Offset: 0x30, Size: 0x98]
	FString CustomParameter;//[Offset: 0xc8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Button_ReduceCD_Clock_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	Image* Img_Light;//[Offset: 0x350, Size: 0x8]
	Image* MI_Clock;//[Offset: 0x358, Size: 0x8]
	LinearColor ClockColor;//[Offset: 0x360, Size: 0x10]
	LinearColor LightColor;//[Offset: 0x370, Size: 0x10]
	void PreConstruct(bool IsDesignTime);// 0xffffff8e23bfa002
	void ExecuteUbergraph_UI_Button_ReduceCD_Clock(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xc37623c04e89
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Button_ReduceCD_Light_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* MI_RingGlow;//[Offset: 0x268, Size: 0x8]
	Image* MI_RingGlow;//[Offset: 0x270, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8]
	float Size;//[Offset: 0x280, Size: 0x4]
	LinearColor Color;//[Offset: 0x284, Size: 0x10]
	void RefreshColor();// 0xffffff8f23bfa000
	void PreConstruct(bool IsDesignTime);// 0x2dffbd23eea02e
	void ExecuteUbergraph_UI_Button_ReduceCD_Light(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xffffffff115f7fa0
<----------Generated by SSpawner v1.0.2---------->


Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x160, Size: 0x4]
	float HeightOverride;//[Offset: 0x164, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0x168, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0x16c, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0x170, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x174, Size: 0x4]
	float MinAspectRatio;//[Offset: 0x178, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0x17c, Size: 0x4]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x180, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x180, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x180, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x180, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x180, Size: 0x1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x180, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x180, Size: 0x1]
	void SetWidthOverride(float InWidthOverride);// 0x3c8c23bfa041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3c8b23bfa041
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x3c8a23bfa041
	void SetMinAspectRatio(float InMinAspectRatio);// 0x3c8923bfa041
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x3c8823bfa041
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x3c8723bfa041
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x3c8623bfa041
	void SetHeightOverride(float InHeightOverride);// 0x3c8523bfa041
	void ClearWidthOverride();// 0x3c8423bfa041
	void ClearMinDesiredWidth();// 0x3c8323bfa041
	void ClearMinDesiredHeight();// 0x3c8223bfa041
	void ClearMinAspectRatio();// 0x3c8123bfa041
	void ClearMaxDesiredWidth();// 0x3c8023bfa041
	void ClearMaxDesiredHeight();// 0x3c7f23bfa041
	void ClearMaxAspectRatio();// 0x3c7e23bfa041
	void ClearHeightOverride();// 0x3c7d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Button_Selected_Anim_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	WidgetAnimation* Select_Anim;//[Offset: 0x268, Size: 0x8]
	Image* MI_Circle_01;//[Offset: 0x270, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8]
	float Size;//[Offset: 0x280, Size: 0x4]
	LinearColor Color;//[Offset: 0x284, Size: 0x10]
	void PreConstruct(bool IsDesignTime);// 0x128f623e7a001
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x1473d23e7a008
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x7f3d23bfa041
	void ExecuteUbergraph_UI_Button_Selected_Anim(int EntryPoint, const WidgetAnimation* K2Node_Event_Animation, bool K2Node_Event_IsDesignTime, const WidgetAnimation* K2Node_Event_Animation, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0xffffffff115eb820
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Skill_CDRefresh_Anim_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	WidgetAnimation* Refresh_Anim;//[Offset: 0x268, Size: 0x8]
	Image* MI_Glow;//[Offset: 0x270, Size: 0x8]
	Image* MI_RingGlow;//[Offset: 0x278, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x280, Size: 0x8]
	float Size;//[Offset: 0x288, Size: 0x4]
	LinearColor Color;//[Offset: 0x28c, Size: 0x10]
	void SetColor(LinearColor Color);// 0x128d023e7a001
	void Play(bool CallFunc_IsAnimationPlaying_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x128cf23e7a001
	void RefreshColor();// 0x128ce23e7a001
	void PreConstruct(bool IsDesignTime);// 0x1294f23bfa001
	void Construct();// 0xd01e23e7a001
	void ExecuteUbergraph_UI_Skill_CDRefresh_Anim(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xffffff9223bfa002
<----------Generated by SSpawner v1.0.2---------->


Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x5e9323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x5e9723bfa041
	void SetSize(SlateChildSize InSize);// 0x5e9623bfa041
	void SetPadding(Margin InPadding);// 0x5e9523bfa041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x5e9423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4]
	byte SizeRule;//[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: HUDPassiveHeadWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* Img_Head;//[Offset: 0x348, Size: 0x8]
	SolarTextBlock* Txt_Buff;//[Offset: 0x350, Size: 0x8]
	void SetData(int InContributorCharacterId, int InLocalTipsID);// 0x452623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UI_HUD_Notice_BuyResurrection_C.UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x370, Size: 0x8]
	WidgetAnimation* ant_exit;//[Offset: 0x378, Size: 0x8]
	WidgetAnimation* Appear_Anim;//[Offset: 0x380, Size: 0x8]
	Image* Img_Txt_bg;//[Offset: 0x388, Size: 0x8]
	RichTextBlock* Txt_Ballte_Notice;//[Offset: 0x390, Size: 0x8]
	SolarTextBlock* Txt_Ballte_Notice;//[Offset: 0x398, Size: 0x8]
	SolarTextBlock* Txt_Ballte_Notice;//[Offset: 0x3a0, Size: 0x8]
	void Construct();// 0x1425623e7a009
	void ShowNotice(FString Text, float Duration);// 0xffffffff72550280
	static void ExecuteUbergraph_UI_HUD_Notice_BuyResurrection(int EntryPoint, FString K2Node_CustomEvent_Text, float K2Node_CustomEvent_Duration, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xffffff9223bfa002
<----------Generated by SSpawner v1.0.2---------->


Class: UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
<----------Generated by SSpawner v1.0.2---------->


Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10]
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18]
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_ReviveItemManger_BattleRoyale_C.BP_ReviveItemManger_0_C.GameReviveItemManager.GameManagerBase.Info.Actor.Object
	int PointError;//[Offset: 0x340, Size: 0x4]
	float R;//[Offset: 0x344, Size: 0x4]
	float X;//[Offset: 0x348, Size: 0x4]
	float Y;//[Offset: 0x34c, Size: 0x4]
	Vector LeftUp;//[Offset: 0x350, Size: 0xc]
	Vector RightDown;//[Offset: 0x35c, Size: 0xc]
	static void RevivePlayer(SolarCharacter* None, out const Transform None, out bool bool, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, int CallFunc_FTrunc_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetFlyLocation_Location, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, Transform CallFunc_MakeTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x129bd23e7a001
	void GetFlyLocation(SCMPlayerState* PlayerSatate, out Vector Location, Vector Local_FlyPoint, Vector Local_CurFlyCriclePoint, float Local_Length, float Local_Distance, Vector Local_SelfLocation, int Local_Index, Vector Local_CircleLocation, float Local_CircleRadius, Vector[] Local_Location, float CallFunc_GetReviveHeight_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Vector_Distance2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetReviveHeight_ReturnValue, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float K2Node_MathExpression_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector2D[] K2Node_MakeArray_Array, Vector2D CallFunc___S_Get_Point_On_Line_TargetPoint, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_MakeVector_ReturnValue, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, float CallFunc_GetCurrentSafeAreaRadius_ReturnValue, FText CallFunc_Format_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0xffffffff725594a0
<----------Generated by SSpawner v1.0.2---------->


Class: BP_ReviveItemManger_0_C.GameReviveItemManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 0x8]
	int ReviveItem;//[Offset: 0x250, Size: 0x4]
	<SolarPlayerState*,int> Player_ReviveTimes;//[Offset: 0x258, Size: 0x50]
	int AdvanceNoticeTime;//[Offset: 0x2a8, Size: 0x4]
	F_ReviveItemData[] ReviveItemData;//[Offset: 0x2b0, Size: 0x10]
	float MaxReviveRadius;//[Offset: 0x2c0, Size: 0x4]
	bool ClearItemNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	bool AdvanceNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1]
	SolarPlayerState*[] InRevivingPlayerState;//[Offset: 0x2c8, Size: 0x10]
	int CurTime;//[Offset: 0x2d8, Size: 0x4]
	bool bCanReviveImmediatelyWhenDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	int ReviveDisableCountDown;//[Offset: 0x2e0, Size: 0x4]
	int ReviveStartRecycleTime;//[Offset: 0x2e4, Size: 0x4]
	<byte,FString> NoticeSound;//[Offset: 0x2e8, Size: 0x50]
	UI_Resurrect_C* ResurrectByItemUI;//[Offset: 0x338, Size: 0x8]
	void GetResurrectByItemUI(out UI_Resurrect_C* Output_Get, UserWidget* CallFunc_ShowSolarWidget_ReturnValue, UI_Resurrect_C* K2Node_DynamicCast_AsUI_Resurrect, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x1287e23e7a001
	void SetPlayerReviveData(SolarPlayerState* Player, F_ReviveItemData Data, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, F_ReviveItemData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x1287d23e7a001
	void GetPlayerReviveData(SolarPlayerState* Player, out F_ReviveItemData Data, out bool bFind, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, F_ReviveItemData CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x1287c23e7a001
	void [ A]Is Player Reviving(out const SolarPlayerState* InPlayerState, out bool Reviving, bool CallFunc_Array_Contains_ReturnValue);// 0x1287b23e7a001
	bool IsPlayerReviving(const SolarPlayerState* InPlayerState, bool CallFunc_Array_Contains_ReturnValue);// 0x1287a23e7a001
	void RemovePlayerFromRevivingPlayerArr(out const SolarPlayerState* Player, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x1287923e7a001
	void AddPlayerIntoRevivingPlayerArr(out const SolarPlayerState* Player, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue);// 0x1287823e7a001
	void OnRep_AdvanceNotice(bool CallFunc_IsServer_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x1287723e7a001
	void OnRep_ClearItemNotice();// 0x1287623e7a001
	static bool [ S]Try to Revive Player with Item(SolarPlayerState* Player, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, FString CallFunc_Conv_IntToString_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsPlayerReviving_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, bool CallFunc_RevivePlayer_Bool, FString CallFunc_Vector2String_Str, bool CallFunc_PlayerTryUseReviveItem_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_CanPlayerUseReviveItem_ReturnValue);// 0x1287523e7a001
	void Set Player Use Revive Item Times(SolarPlayerState* Player, bool Local_Find, F_ReviveItemData CallFunc_GetPlayerReviveData_Data, bool CallFunc_GetPlayerReviveData_bFind, F_ReviveItemData K2Node_MakeStruct_F_ReviveItemData, int CallFunc_Add_IntInt_ReturnValue, F_ReviveItemData K2Node_MakeStruct_F_ReviveItemData);// 0x1287423e7a001
	void [ A]Get Player Use Revive Item Times(SolarPlayerState* Player, out int Value, int Local_Times, bool Local_Find, F_ReviveItemData CallFunc_GetPlayerReviveData_Data, bool CallFunc_GetPlayerReviveData_bFind);// 0x1287323e7a001
	bool CanPlayerUseReviveItem(const SolarPlayerState* InPlayerState, bool bCheckItemNum, int CallFunc_GetMaxReviveUsage_ReturnValue, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetPlayerReviveItemNum_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, bool CallFunc_IsOutBySelf_ReturnValue, bool CallFunc_IsPlayerOffline_ReturnValue, int CallFunc_GetMaxReviveUsage_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1287223e7a001
	bool CanGlobalUseReviveItem(bool CallFunc_CanGlobalUseReviveItem_ReturnValue);// 0x1287123e7a001
	static void RevivePlayer(SolarCharacter* None, out const Transform None, out bool bool, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, int CallFunc_FTrunc_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x1287023e7a001
	void ReceiveBeginPlay();// 0x1286f23e7a001
	void Event_ClearRevive();// 0x1286e23e7a001
	void OnPlayerResurrected(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x1286d23e7a001
	void Event_ClearReviveNotifyInAdvance();// 0x1286c23e7a001
	void Event_InitReviveItem();// 0x1286b23e7a001
	void UpdateTime();// 0x1286a23e7a001
	void DownReviveImmediately(SolarPlayerState* Player);// 0x1286923e7a001
	void OnPlayerHealthStateChanged(BP_PlayerState_Framework_C* InPlayerState, byte NewState);// 0x1286823e7a001
	void ReviveDisableNotice(int Time);// 0x1286723e7a001
	void Event_PlayerReconnect(SCMPlayerState* Player);// 0x70a8f1f2a427a000
	void OnStartReviveItemRecycleCountDownDataRequested();// 0xcd1723e7a001
	void OnSpecTargetChanged_Event(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x6fe3bafdbfa000
	static void ExecuteUbergraph_BP_ReviveItemManger(int EntryPoint, bool Temp_bool_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, const byte[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_IsClosed_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const FString[] Temp_string_Variable, byte Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Has_Been_Initd_Variable, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool Temp_bool_IsClosed_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_IsClosed_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, const byte[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const byte[] Temp_byte_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_GetPlayerReviveItemNum_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_ClearBackpackItem_ReturnValue, byte K2Node_CustomEvent_ResurrectType, BP_PlayerState_Framework_C* K2Node_CustomEvent_TargetPlayer, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetReviveItemRepoTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, const FString[] Temp_string_Variable, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, const <FString,FString> K2Node_MakeMap_Map, SolarPlayerState* K2Node_CustomEvent_Player, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_PlayerState_Framework_C* K2Node_CustomEvent_InPlayerState, byte K2Node_CustomEvent_NewState, bool Temp_bool_Has_Been_Initd_Variable, bool K2Node_Select_Default, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetReviveItemRepoTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, int K2Node_CustomEvent_Time, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Round_ReturnValue, const enum[] Temp_byte_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const byte Temp_byte_Variable, const byte Temp_byte_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, SCMPlayerState* K2Node_CustomEvent_Player, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue, SolarPlayerState* K2Node_CustomEvent_OldTarget, SolarPlayerState* K2Node_CustomEvent_NewTarget, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, UI_Resurrect_C* CallFunc_GetResurrectByItemUI_Output_Get, bool CallFunc_IsValid_ReturnValue, const byte Temp_byte_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue);// 0xffffffff115ef800
<----------Generated by SSpawner v1.0.2---------->


Class: GameReviveItemManager.GameManagerBase.Info.Actor.Object
	int MaxReviveUsage;//[Offset: 0x228, Size: 0x4]
	float ReviveItemRepoTime;//[Offset: 0x22c, Size: 0x4]
	float ReviveProximityRadius;//[Offset: 0x230, Size: 0x4]
	float ReviveHeight;//[Offset: 0x234, Size: 0x4]
	float ReviveWaitTime;//[Offset: 0x238, Size: 0x4]
	bool bGlobalUseRevieItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	float DownedReviveButtonDelayTime;//[Offset: 0x240, Size: 0x4]
	void SetGlobalUseReviveItem(const bool InCanUseItem);// 0x440f23bfa041
	bool PlayerTryUseReviveItem(SolarPlayerState* InPlayerState, const int InUseNum);// 0x440e23bfa041
	void OnTeammateReviveManagerRefresh();// 0x440d23bfa041
	void OnStartReviveItemRecycleCountDownDataRequested();// 0x440c23bfa041
	void OnRep_GlobalUseRevieItem();// 0x440b23bfa041
	bool IsPlayerReviving(const SolarPlayerState* InPlayerState);// 0x440a23bfa041
	float GetReviveWaitTime();// 0x440923bfa041
	float GetReviveProximityRadius();// 0x440823bfa041
	float GetReviveItemRepoTime();// 0x440723bfa041
	int GetReviveItemID();// 0x440623bfa041
	float GetReviveHeight();// 0x440523bfa041
	int GetPlayerReviveItemNum(const SolarPlayerState* InPlayerState);// 0x440423bfa041
	int GetMaxReviveUsage();// 0x440323bfa041
	float GetDownedReviveButtonDelayTime();// 0x440223bfa041
	void ClearAllPlayersReviveItem();// 0x440123bfa041
	bool CanPlayerUseReviveItem(const SolarPlayerState* InPlayerState, bool bCheckItemNum);// 0x440023bfa041
	bool CanGlobalUseReviveItem();// 0x43ff23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Resurrect_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* CountDown_Progress_Anim;//[Offset: 0x350, Size: 0x8]
	WidgetAnimation* CountDown_Anim;//[Offset: 0x358, Size: 0x8]
	WidgetAnimation* Resurrecting_Enter_Anim;//[Offset: 0x360, Size: 0x8]
	WidgetAnimation* ReliveProp_Anim;//[Offset: 0x368, Size: 0x8]
	Overlay* CountDown;//[Offset: 0x370, Size: 0x8]
	Image* img_Props;//[Offset: 0x378, Size: 0x8]
	Image* Img_RebirthTimeMAT;//[Offset: 0x380, Size: 0x8]
	TextBlock* Txt_RebirthTimeNum;//[Offset: 0x388, Size: 0x8]
	int ReviveWaitTime;//[Offset: 0x390, Size: 0x4]
	BP_PlayerState_Framework_C* Player;//[Offset: 0x398, Size: 0x8]
	TimerHandle HandleEnterAnimEnd;//[Offset: 0x3a0, Size: 0x8]
	TimerHandle HandleFinishAnimEnd;//[Offset: 0x3a8, Size: 0x8]
	void TryCloseByPlayer(BP_PlayerState_Framework_C* OldPlayer, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x127da23e7a001
	void Visible and Invisible Protection(out bool Exec, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocalPlayerCameraFocusingMe_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x127d923e7a001
	static void SetIcon(byte Type, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x127d823e7a001
	void UIEvent_Show(int ReviveWaitTime);// 0x127d723e7a001
	void ShowResurrectUI(int Time, byte Type, BP_PlayerState_Framework_C* Player);// 0x127d623e7a001
	void RebirthCountDown(int Time);// 0x127d523e7a001
	void CloseUI();// 0x1280b23bfa001
	void BeginCountDown();// 0xffffff9223bfa002
	void EndEvent();// 0x127d223e7a001
	void ExecuteUbergraph_UI_Resurrect(int EntryPoint, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_ReviveWaitTime, FText CallFunc_Conv_IntToText_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_SafeDivide_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_Event_Time, byte K2Node_Event_Type, BP_PlayerState_Framework_C* K2Node_Event_Player, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Visible_and_Invisible_Protection_Exec, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int K2Node_CustomEvent_Time, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_Subtract_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue);// 0x127cd23e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: F_ReviveItemData
	FString PlayerID_3_454127FA49A9E9B7DFC44B8255034BF1;//[Offset: 0x0, Size: 0x10]
	int Times_5_60AE18DB4EC5A089DB2C648682EFCFC5;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WorldMark_ReviveTeammates.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasPanel;//[Offset: 0x3a0, Size: 0x8]
	CanvasPanel* Panel;//[Offset: 0x3a8, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x3b0, Size: 0x8]
	Image* Img_Light;//[Offset: 0x3b8, Size: 0x8]
	Image* img_HeadBg_Shadow;//[Offset: 0x3c0, Size: 0x8]
	Image* img_PlayerHead;//[Offset: 0x3c8, Size: 0x8]
	Image* ProgressCD;//[Offset: 0x3d0, Size: 0x8]
	SolarTextBlock* Txt_Recover;//[Offset: 0x3d8, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x3e0, Size: 0x8]
	Image* Img_Arrow;//[Offset: 0x3e8, Size: 0x8]
	WidgetAnimation* Occupy_Anim;//[Offset: 0x3f0, Size: 0x8]
	MaterialInstanceDynamic* CDMaterial;//[Offset: 0x3f8, Size: 0x8]
	SolarResurrectionComponent* ResurrectionComp;//[Offset: 0x400, Size: 0x8]
	FName ProgressParamName;//[Offset: 0x408, Size: 0x8]
	LinearColor ProgressParamDefaultValue;//[Offset: 0x410, Size: 0x10]
	FString TimeParamName;//[Offset: 0x420, Size: 0x10]
	int DistanceLocalTextID;//[Offset: 0x430, Size: 0x4]
	int RecoverLocalTextID;//[Offset: 0x434, Size: 0x4]
	int TimeFormatLocalTextID;//[Offset: 0x438, Size: 0x4]
	FString NotifySoundName;//[Offset: 0x440, Size: 0x10]
	void SetPlayerIDAndChangeColor(FString PlayerId);// 0x5cde23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_GameState_BattleRoyale_C.BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x628, Size: 0x8]
	BPC_WarmGame_BattleRoyale_C* BPC_WarmGame_BattleRoyale;//[Offset: 0x630, Size: 0x8]
	BPC_CountDown_C* BPC_CountDown;//[Offset: 0x638, Size: 0x8]
	int MapID;//[Offset: 0x640, Size: 0x4]
	int AirlineID;//[Offset: 0x644, Size: 0x4]
	byte BattleState;//[Offset: 0x648, Size: 0x1]
	delegate BroadcastBattleStateChange;//[Offset: 0x650, Size: 0x10]
	FString WinSide;//[Offset: 0x660, Size: 0x10]
	UI_HUD_Notice_VICTORY_C* VICTORYUI;//[Offset: 0x670, Size: 0x8]
	float DelayShowVictoryTime;//[Offset: 0x678, Size: 0x4]
	void ShowVictoryUI(int CallFunc_StaticPostAkEventByName_ReturnValue, int CallFunc_StaticPostAkEventByName_ReturnValue, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, SolarPlayerState* K2Node_DynamicCast_AsSolar_Player_State, bool K2Node_DynamicCast_bSuccess, UI_HUD_Notice_VICTORY_C* K2Node_DynamicCast_AsUI_HUD_Notice_VICTORY, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x1264623e7a001
	static void OnRep_WinSide(int Temp_int_Array_Index_Variable, const byte[] Temp_byte_Variable, const enum[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x1264523e7a001
	void OnRep_BattleState();// 0x1264423e7a001
	void OnRep_MapID(bool CallFunc_IsServer_ReturnValue);// 0x1264323e7a001
	void ReceiveBeginPlay();// 0x1265f23e7a001
	void OnBattleStateChange(byte ChangeType);// 0x1264223e7a001
	void StartCountdown(int Time);// 0x1264123e7a001
	void BattleEnd(FString WinSide);// 0x1268223e7a001
	void OnConfigInit();// 0x1c008f23d4a100
	void OnShowVictoryUI();// 0x1263e23e7a001
	void ExecuteUbergraph_BP_GameState_BattleRoyale(int EntryPoint, BP_SetRenderParametersBasedOnDifferentStates_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_Time, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString K2Node_CustomEvent_WinSide, bool CallFunc_IsSupportCharacterRole_ReturnValue, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_SolarSpawnActor_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsServer_ReturnValue, SolarCityName*[] CallFunc_GetAllActorsOfClass_OutActors, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarCityName* CallFunc_Array_Get_Item, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetCameraFocusedCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x1263d23e7a001
	void BroadcastBattleStateChange__DelegateSignature(byte Now State);// 0x1626b23e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: BPC_WarmGame_BattleRoyale_C.SolarWarmGameComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	BP_Logic_BattleRoyale_C* MainLogic;//[Offset: 0xb8, Size: 0x8]
	SCMPlayerState* RealPlayer;//[Offset: 0xc0, Size: 0x8]
	Vector[] VehiclePos;//[Offset: 0xc8, Size: 0x10]
	bool GuidArrowVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	Vector[] SafeAreaCenter;//[Offset: 0xe0, Size: 0x10]
	Vector[] WeaponPos;//[Offset: 0xf0, Size: 0x10]
	Vector[] ItemPos;//[Offset: 0x100, Size: 0x10]
	SolarCharacter* LocalCharacter;//[Offset: 0x110, Size: 0x8]
	UI_WorldMark_Common_C* WorldMark;//[Offset: 0x118, Size: 0x8]
	Vector SafeCenter;//[Offset: 0x120, Size: 0xc]
	UI_HUD_Notice_Lv3_C* Notice;//[Offset: 0x130, Size: 0x8]
	Margin NoticePadding;//[Offset: 0x138, Size: 0x10]
	float ArrowScale;//[Offset: 0x148, Size: 0x4]
	BP_DirectionArrow_C* DirectionArrow;//[Offset: 0x150, Size: 0x8]
	bool isShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	<int,S_WarmGameConfig> None;//[Offset: 0x160, Size: 0x50]
	S_WarmGameConfig WarmGameConfig;//[Offset: 0x1b0, Size: 0x18]
	S_WarmGameAiConfig[] AIConfig;//[Offset: 0x1c8, Size: 0x10]
	<int,SolarBotAIConfig*> TeammatesAIConfig;//[Offset: 0x1d8, Size: 0x50]
	bool bIsWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	SolarTablesData_WarmGameMode WarmGameInfo;//[Offset: 0x230, Size: 0x68]
	bool bCanAiReviveByItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	SolarBotAIConfig* DefaultAccompanyBotConfig;//[Offset: 0x2a0, Size: 0x8]
	bool IsWarmGame();// 0x1328523e7a001
	static void GetAIPickResult(out const int[] InCharactetIDs, out int OutCharacterID, out int OutSkinId, int SelectedSkin, int cid, S_WarmGameAiConfig[] NewLocalVar, int CallFunc_Array_Length_ReturnValue, int CallFunc__a_GetCharacterIDBySkinID_CharacterID, int CallFunc_Subtract_IntInt_ReturnValue, bool Temp_bool_Variable, S_WarmGameAiConfig CallFunc_Array_Get_Item, int CallFunc__a_GetCharacterIDBySkinID_CharacterID, bool CallFunc_Array_Contains_ReturnValue, int K2Node_Select_Default);// 0x1328423e7a001
	void Create Warm Logic Actor And Exec(out bool Success, Transform CallFunc_MakeTransform_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, S_WarmGameConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_WarmGameLogicBase_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x1328323e7a001
	void CheckSpAIForWarmGame(out bool SpecialAI, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x1328223e7a001
	void [s]SetBotBT(BehaviorTree* BotBehaviorTree, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, FString CallFunc_GetDisplayName_ReturnValue, bool K2Node_Select_Default, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1328123e7a001
	void [c]ShowNotice(bool Visible, FString Text, float Duration, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_HUD_Notice_Lv3_C* K2Node_DynamicCast_AsUI_HUD_Notice_Lv, bool K2Node_DynamicCast_bSuccess);// 0x1328023e7a001
	void [c]RequestNearestPosition(byte Target, float Distance, Vector nearestLocation, Vector PlayerLocation, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x1327f23e7a001
	void OnRep_WeaponPos();// 0x1327e23e7a001
	void UpdatePos();// 0x1327d23e7a001
	static void [c]CreateWorldMark(Vector Pos, int None, out UI_WorldMark_Common_C* AsUI World Mark Common, SlateBrush K2Node_MakeStruct_SlateBrush, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, UI_WorldMark_Common_C* K2Node_DynamicCast_AsUI_World_Mark_Common, bool K2Node_DynamicCast_bSuccess, Image* CallFunc_SpawnObject_ReturnValue);// 0x1327c23e7a001
	SolarCharacter* [c]LocalCharacter(bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue);// 0x1327b23e7a001
	void [c]PlayerHasWeapon(out bool HasWeapon, out bool HasVehicleWeapon, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x1327a23e7a001
	void UpdateArrowDirection(SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, BP_DirectionArrow_C* CallFunc_GetGuidArrow_Output_Get);// 0x1327923e7a001
	void UpdateItemPos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_SolarItemSpawner_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_SolarItemSpawner_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x1327823e7a001
	void UpdateWeaponPos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarGroundPreviewActor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, SolarGroundPreviewActor* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x1327723e7a001
	void GetGuidArrow(out BP_DirectionArrow_C* Output_Get, SolarPlayerCameraManager* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_DirectionArrow_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x1327623e7a001
	void [C]ShowArrow(bool bNewVisibility, BP_DirectionArrow_C* CallFunc_GetGuidArrow_Output_Get);// 0x1327523e7a001
	void UpdateVehiclePos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_SolarVehicleSpawner_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_SolarVehicleSpawner_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x70a8b043b427a000
	void GetNearestPosition(byte Target, out Vector Location, float Distance, Vector nearestLocation, Vector PlayerLocation, byte Temp_byte_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector[] K2Node_Select_Default, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x1327323e7a001
	void [A]GetPlayBattleCount(out int count);// 0x1327223e7a001
	void [ S]Game Mode Special Config(out bool SpecialConfig, out int Order, out bool isB, <int> B_id, <int> A_id, <int> order3, <int> order2, <int> order1, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x1327123e7a001
	void [C]PlayerABTest(out bool SpecialConfig);// 0x1327023e7a001
	void GetMainLogic(out BP_Logic_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x1326f23e7a001
	void ReceiveBeginPlay();// 0x1326e23e7a001
	void ReceiveTick(float DeltaSeconds);// 0x1326d23e7a001
	void OnSystemReady();// 0x1326c23e7a001
	void PlanyerEnterSafeArea(Actor* Actor);// 0x1326b23e7a001
	void PlayerLeaveSafeArea(Actor* Actor);// 0x1326a23e7a001
	void OnNextSafeAreaSetted(Vector Center, float Radius, float WaitTime, float MoveTime, int Index);// 0x1326923e7a001
	void OnRequestReceived(byte Type, Vector Pos);// 0x1326823e7a001
	void OnEjectStateChanged(byte State, SolarCharacter* TargetCharacter);// 0x152ae23e7a008
	void ConfigFinished();// 0xffffffffccbb8430
	void CustomEvent();// 0xffffff8f23bfa000
	void ExecuteUbergraph_BPC_WarmGame_BattleRoyale(int EntryPoint, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, bool CallFunc_IsServer_ReturnValue, const byte[] Temp_byte_Variable, const enum[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, Actor* K2Node_CustomEvent_Actor, Actor* K2Node_CustomEvent_Actor, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector K2Node_CustomEvent_Center, float K2Node_CustomEvent_Radius, float K2Node_CustomEvent_WaitTime, float K2Node_CustomEvent_MoveTime, int K2Node_CustomEvent_Index, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc___S_Game_Mode_Special_Config_SpecialConfig, int CallFunc___S_Game_Mode_Special_Config_Order, bool CallFunc___S_Game_Mode_Special_Config_isB, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Pos, UI_WorldMark_Common_C* CallFunc__c_CreateWorldMark_AsUI_World_Mark_Common, bool K2Node_SwitchEnum_CmpSuccess, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocationInSafeArea_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, bool CallFunc_CheckSpAIForWarmGame_SpecialAI, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Create_Warm_Logic_Actor_And_Exec_Success, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString[] CallFunc_Map_Keys_Keys, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, const FString[] K2Node_MakeArray_Array, bool CallFunc_Less_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetPossessedCharacter_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_GetCharacterID_CharacterID, int CallFunc_GetCharacterID_SkinID, int CallFunc_GetCharacterID_ColorID, Actor* CallFunc_GetOwner_ReturnValue, SolarBotAIController* K2Node_DynamicCast_AsSolar_Bot_AIController, bool K2Node_DynamicCast_bSuccess, SolarBotAIConfig* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, GameModeBase* CallFunc_GetGameMode_ReturnValue, SolarGameModeAIComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x152b623e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: SolarWarmGameComponent.ActorComponent.Object
	bool IsWarmGame();// 0x59f823bfa041
	void GetAIPickResult(out const int[] InCharactetIDs, out int OutCharacterID, out int OutSkinId);// 0x59f723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: S_WarmGameAiConfig
	SolarBotAIConfig* ConfigPreset_9_F77484A9446F5428C612F982D27047AB;//[Offset: 0x0, Size: 0x8]
	int Difficulty_2_BC1C176F4C7CBB4D6FC889B2806BF007;//[Offset: 0x8, Size: 0x4]
	int Preference_6_7DE61082428EF32F3BEFE6AFA07875B9;//[Offset: 0xc, Size: 0x4]
	int Substitute_5_5FA843ED4EF730ADF049548C170D13E7;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WarmGameMode.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int UniqueId;//[Offset: 0x10, Size: 0x4]
	int CCUStart;//[Offset: 0x14, Size: 0x4]
	int CCUEnd;//[Offset: 0x18, Size: 0x4]
	int NumOfAI;//[Offset: 0x1c, Size: 0x4]
	int AILevel;//[Offset: 0x20, Size: 0x4]
	FString AILevelConfig;//[Offset: 0x28, Size: 0x10]
	int AITeamPresetsID;//[Offset: 0x38, Size: 0x4]
	bool EnableTeamManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int MinPlayer;//[Offset: 0x40, Size: 0x4]
	int MaxRealGroup;//[Offset: 0x44, Size: 0x4]
	int LeastRealPlayer;//[Offset: 0x48, Size: 0x4]
	int MaxWait;//[Offset: 0x4c, Size: 0x4]
	bool HasMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int ReadyStateTime;//[Offset: 0x54, Size: 0x4]
	int StopMatchTime;//[Offset: 0x58, Size: 0x4]
	bool HasAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool AIAccompany;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	int AIAccompanyTimeline;//[Offset: 0x60, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesDataBase
<----------Generated by SSpawner v1.0.2---------->


Class: S_WarmGameConfig
	class Object* WarmGameLogic_11_C4D3600041B8F0E806BDC09E30D6C1D0;//[Offset: 0x0, Size: 0x8]
	S_WarmGameAiConfig[] AiTeammates_15_B5CA8DEC448F508FECCA08B77C240AFC;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: UI_WorldMark_Common_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a0, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x3a8, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x3b0, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x3b8, Size: 0x8]
	int HideDistance;//[Offset: 0x3c0, Size: 0x4]
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x1309123e7a001
	static FText Get_Distance_Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x1309023e7a001
	void SetIcon(Widget* Content, int None, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x1308f23e7a001
	void PreConstruct(bool IsDesignTime);// 0xffffff8f23bfa000
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xffffff8f23bfa000
	static void ExecuteUbergraph_UI_WorldMark_Common(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, enum K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue);// 0xffffffff19684b80
<----------Generated by SSpawner v1.0.2---------->


Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x5ee823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8]
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x5eec23bfa041
	void SetSize(SlateChildSize InSize);// 0x5eeb23bfa041
	void SetPadding(Margin InPadding);// 0x5eea23bfa041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x5ee923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UI_HUD_Notice_Lv3_C.UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x370, Size: 0x8]
	WidgetAnimation* ant_exit;//[Offset: 0x378, Size: 0x8]
	WidgetAnimation* Appear_Anim;//[Offset: 0x380, Size: 0x8]
	Image* Img_Txt_bg;//[Offset: 0x388, Size: 0x8]
	SolarRichTextBlock* Txt_Ballte_Notice;//[Offset: 0x390, Size: 0x8]
	static void SetNoticeText(FString InText, FText CallFunc_Conv_StringToText_ReturnValue);// 0x130a623e7a001
	void Construct();// 0x1539f23bfa041
	void ShowNotice(FString Text, float Duration);// 0x1539923bfa041
	void ExecuteUbergraph_UI_HUD_Notice_Lv3(int EntryPoint, FString K2Node_CustomEvent_Text, float K2Node_CustomEvent_Duration, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x153a023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_DirectionArrow_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* FX_G_Mesh_Arrow_Guide_001;//[Offset: 0x230, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x238, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
	void Init(Actor* AttachTarget, float Scale, Vector Position);// 0x130e723e7a001
	void SetVisiblity(bool NewVisiblity);// 0x14dcc23e7a001
	void UpdateDirection(Rotator Rotation);// 0x14dcd23e7a001
	void ExecuteUbergraph_BP_DirectionArrow(int EntryPoint, Actor* K2Node_CustomEvent_AttachTarget, float K2Node_CustomEvent_Scale, Vector K2Node_CustomEvent_Position, Vector CallFunc_MakeVector_ReturnValue, bool K2Node_CustomEvent_NewVisiblity, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, Rotator K2Node_CustomEvent_Rotation, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x2e26c1708d842e9d
<----------Generated by SSpawner v1.0.2---------->


Class: BP_WarmGameLogicBase_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
	void Event_ExecLogic();// 0x1539623bfa041
	void ExecuteUbergraph_BP_WarmGameLogicBase(int EntryPoint);// 0x1539d23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SolarItemSpawner_C.SolarItemSpawner.SolarMapElementBase.Actor.Object
	StaticMeshComponent* Cube;//[Offset: 0x390, Size: 0x8]
	BillboardComponent* Billboard;//[Offset: 0x398, Size: 0x8]
	SceneComponent* SceneRoot;//[Offset: 0x3a0, Size: 0x8]
	void UserConstructionScript(enum Temp_byte_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, Vector CallFunc_Divide_VectorFloat_ReturnValue, MaterialInterface* K2Node_Select_Default, int K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0xffffff8e23bfa002
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SolarVehicleSpawner_C.SolarVehicleSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	BoxComponent* Box;//[Offset: 0x430, Size: 0x8]
	StaticMeshComponent* Cube1;//[Offset: 0x438, Size: 0x8]
	StaticMeshComponent* Cube;//[Offset: 0x440, Size: 0x8]
	SceneComponent* SceneRoot;//[Offset: 0x448, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BPC_CountDown_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	UI_CountDown_C* CountDownWidget;//[Offset: 0xb8, Size: 0x8]
	int Time;//[Offset: 0xc0, Size: 0x4]
	TimerHandle Timer;//[Offset: 0xc8, Size: 0x8]
	int LocalTime;//[Offset: 0xd0, Size: 0x4]
	TimerHandle LocalTimer;//[Offset: 0xd8, Size: 0x8]
	delegate OnLocalTimeChange;//[Offset: 0xe0, Size: 0x10]
	delegate OnCountDownFinished;//[Offset: 0xf0, Size: 0x10]
	int MatchingText;//[Offset: 0x100, Size: 0x4]
	int MatchingTime;//[Offset: 0x104, Size: 0x4]
	delegate OnMatchCountDownFinished;//[Offset: 0x108, Size: 0x10]
	TimerHandle TimerMatch;//[Offset: 0x118, Size: 0x8]
	bool bCountDownFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	FString CountSoundName;//[Offset: 0x128, Size: 0x10]
	void OnRep_CountSoundName(bool CallFunc_IsPlayingReplay_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_StaticPostAkEventByName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xe5ce23e7a001
	void [C]CountEnd(bool CallFunc_IsPlayingReplay_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_StaticPostAkEventByName_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue);// 0xe5cf23e7a001
	void [S]StopMatchCountDown(bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0xe5d023e7a001
	void [S]StartMatchCountDown(int MatchTime, out const delegate Event, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0xe5d123e7a001
	void [S]StartCountDown(int Time, FString SoundName, out const delegate Event, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0xe5d223e7a001
	static void [C]StopCountDown(const <FString,FString> K2Node_MakeMap_Map, int CallFunc_StopSound2D_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xe5d323e7a001
	void OnRep_Time(bool CallFunc_IsServer_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0xe5d423e7a001
	void GetCountDownWidget(out UI_CountDown_C* Output_Get1, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_CountDown_C* K2Node_DynamicCast_AsUI_Count_Down, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0xe5d523e7a001
	void ReceiveBeginPlay();// 0xe5d623e7a001
	void StartCountdown(int Time);// 0xe5d723e7a001
	void OnCountDownTime();// 0xe5d823e7a001
	void [C]ClientCountDown();// 0xe5d923e7a001
	void CountDownTick();// 0xe5da23e7a001
	void MCountDownTick();// 0xe5db23e7a001
	void CustomEvent(enum NewState);// 0xe5dc23e7a001
	static void ExecuteUbergraph_BPC_CountDown(int EntryPoint, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_IntInt_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsServer_ReturnValue, int K2Node_CustomEvent_Time, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, int CallFunc_PlaySound2D_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, GameStateBase* CallFunc_GetGameState_ReturnValue, enum K2Node_CustomEvent_NewState, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0xe5dd23e7a001
	void OnMatchCountDownFinished__DelegateSignature();// 0x1607b23e7a008
	void OnCountDownFinished__DelegateSignature();// 0xffffff8f23bfa000
	void OnLocalTimeChange__DelegateSignature(int Time);// 0x64fff62420a072
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CountDown_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* Flip;//[Offset: 0x350, Size: 0x8]
	TextBlock* Number;//[Offset: 0x358, Size: 0x8]
	UI_HUD_Notice_Lv3_C* UI_HUD_Notice_Lv3;//[Offset: 0x360, Size: 0x8]
	WidgetSwitcher* wStyle;//[Offset: 0x368, Size: 0x8]
	int Time;//[Offset: 0x370, Size: 0x4]
	FString TimeName;//[Offset: 0x378, Size: 0x10]
	void SequenceEvent__ENTRYPOINTUI_CountDown(Overlay* NumberContainer);// 0xe65923e7a001
	void SetMiniCountDownText(FString InText);// 0xe65a23e7a001
	void SetCountDownStyle(byte Style, int CallFunc_Conv_ByteToInt_ReturnValue);// 0xe65b23e7a001
	void Finish();// 0xe65c23e7a001
	void NumberContainer_Event(Overlay* NumberContainer);// 0xe65d23e7a001
	void PreConstruct(bool IsDesignTime);// 0xe65e23e7a001
	void None(int Time);// 0xe65f23e7a001
	void CustomEvent();// 0xe66023e7a001
	void None(FString None);// 0xe66123e7a001
	void CountDownBySingleNumber(int Number);// 0xe66223e7a001
	void CustomEvent(enum ChangeType, int OldValue, int NewValue);// 0xffffffff53a78940
	void CustomEvent(enum ChangeType, int OldValue, int NewValue);// 0x2dffbd23eea02e
	void ExecuteUbergraph_UI_CountDown(int EntryPoint, enum K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_OldValue, int K2Node_CustomEvent_NewValue, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_IntToText_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Overlay* K2Node_CustomEvent_NumberContainer, bool K2Node_Event_IsDesignTime, FText CallFunc_Conv_IntToText_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_Time, FString K2Node_CustomEvent_____, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BindDataChangeEventInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_CustomEvent_Number, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, enum K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_OldValue, int K2Node_CustomEvent_NewValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_UnbindDataChangeEventInt_ReturnValue);// 0xb79923e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: UI_HUD_Notice_VICTORY_C.UINoticeVictory.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x440, Size: 0x8]
	WidgetAnimation* Appear_Anim;//[Offset: 0x448, Size: 0x8]
	SolarTextBlock* Txt_Result;//[Offset: 0x450, Size: 0x8]
	SolarTextBlock* Txt_Result;//[Offset: 0x458, Size: 0x8]
	int CountDownTime;//[Offset: 0x460, Size: 0x4]
	FString GetModuleName();// 0xe6c123e7a001
	void PreConstruct(bool IsDesignTime);// 0xe6c223e7a001
	void ShowVictory(int Time);// 0x155fb23e7a008
	void CloseSelf();// 0x1568323e7a008
	void ExecuteUbergraph_UI_HUD_Notice_VICTORY(int EntryPoint, FText CallFunc_GetText_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Conv_TextToString_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_Event_IsDesignTime, int K2Node_CustomEvent_Time, int CallFunc_PlaySound2Dbyname_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, Texture2D* CallFunc_LoadTexture2DBySoftPath_ReturnValue);// 0x155aa23e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UINoticeVictory.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	Button* BtnReturn;//[Offset: 0x370, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x378, Size: 0x8]
	SoftObjectPath ImgBGPath;//[Offset: 0x428, Size: 0x18]
	void OnReturnBtnClick();// 0x5be123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CFG_BattleRoyale_C.CFG_Framework_C.CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	int None;//[Offset: 0x284, Size: 0x4]
	int None;//[Offset: 0x288, Size: 0x4]
	int None;//[Offset: 0x28c, Size: 0x4]
	BehaviorTree* None;//[Offset: 0x290, Size: 0x8]
	BehaviorTree* None;//[Offset: 0x298, Size: 0x8]
	BehaviorTree* None;//[Offset: 0x2a0, Size: 0x8]
	int None;//[Offset: 0x2a8, Size: 0x4]
	DataTable* None;//[Offset: 0x2b0, Size: 0x8]
	int None;//[Offset: 0x2b8, Size: 0x4]
	class SolarBotAIController* AIController;//[Offset: 0x2c0, Size: 0x8]
	bool None;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	float None;//[Offset: 0x2cc, Size: 0x4]
	float None;//[Offset: 0x2d0, Size: 0x4]
	int None;//[Offset: 0x2d4, Size: 0x4]
	int None;//[Offset: 0x2d8, Size: 0x4]
	int None;//[Offset: 0x2dc, Size: 0x4]
	int None;//[Offset: 0x2e0, Size: 0x4]
	int None;//[Offset: 0x2e4, Size: 0x4]
	Int32Range None;//[Offset: 0x2e8, Size: 0x10]
	Int32Range None;//[Offset: 0x2f8, Size: 0x10]
	float None;//[Offset: 0x308, Size: 0x4]
	S_SkillState None;//[Offset: 0x30c, Size: 0x2]
	S_SkillState None;//[Offset: 0x30e, Size: 0x2]
	<int,int> None;//[Offset: 0x310, Size: 0x50]
	<int,int> None;//[Offset: 0x360, Size: 0x50]
	S_SkillState None;//[Offset: 0x3b0, Size: 0x2]
	S_SkillState None;//[Offset: 0x3b2, Size: 0x2]
	bool None;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	S_SkillState None;//[Offset: 0x3b5, Size: 0x2]
<----------Generated by SSpawner v1.0.2---------->


Class: S_EventList_BattleRoyal
	S_Event_BattleRoyale[] EventList_3_9C55B4BD476EE1024C917DAC11DB6F31;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: S_Event_BattleRoyale
	int BattleTime_15_6488AAB44E84633B11E7DF844AD3B376;//[Offset: 0x0, Size: 0x4]
	enum EventType_11_8FC191774137C63ED18FD5987B59941D;//[Offset: 0x4, Size: 0x1]
	<FString,FString> EventParam_10_DC47076342DAE72F001FD1A032026480;//[Offset: 0x8, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_MapInfoComponent_C.CGMMapInfo.GameModeCompBase.ActorComponent.Object
	AirlineData Airline;//[Offset: 0x180, Size: 0x28]
	Vector[] SafeAreaCenters;//[Offset: 0x1a8, Size: 0x10]
	bool StaticAirline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	bool StaticSafeArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 0x1]
	DataTable* DT_EventTimeline_BattleRoyale;//[Offset: 0x1c0, Size: 0x8]
	bool UsePoisonCircleMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	Vector2D TempDir;//[Offset: 0x1cc, Size: 0x8]
	bool UseFakePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	<int,Vector2D> FakePointRangeArr;//[Offset: 0x1d8, Size: 0x50]
	bool UseFakeBombPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	<int,Vector2D> FakeBombPointRangeArr;//[Offset: 0x230, Size: 0x50]
	Vector PreCirclePoint;//[Offset: 0x280, Size: 0xc]
	float[] CircleRadiusArr;//[Offset: 0x290, Size: 0x10]
	int StaticAirlineID;//[Offset: 0x2a0, Size: 0x4]
	Int32Range OverrideCenterIndex;//[Offset: 0x2a4, Size: 0x10]
	void Calculate Required Parameters(out float[] RadiusArr, int Index, out float Radius, out float MaxOffset, out float GoToTheCentreRadius, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_FMin_ReturnValue);// 0x1353c23e7a001
	void Random Get Fake Bomb Point(out const int Key, out Vector Pos, out bool Success, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_RandomUnitVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x1353b23e7a001
	void SetFakeBombPointRangeArrr(<int,Vector2D> FakeBombPointRangeArr);// 0x1353a23e7a001
	void SetFakePointRnageArr(<int,Vector2D> FakePointRnageArr);// 0x1353923e7a001
	void Get Safe Area Centers Len(out int Len, int CallFunc_Array_Length_ReturnValue);// 0x1353823e7a001
	void CalculateFakePoint(Vector Centre, float SmallRadiu, float LargeRadiu, int Index, out Vector Pos, Vector TempPos, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Max_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Normal_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_VSize2D_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Multiply_VectorInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FMin_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x1353723e7a001
	void Join Next(float Radius, float MaxOffset, int LastIndex, out Vector[] TargetArray, float GoToTheCentreRadius, bool AddFlag, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, Vector CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_RandomFloatInRange_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Conv_FloatToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int Temp_int_Variable, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Vector_Normal2D_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Random_Selection_Add, int CallFunc_Array_Add_ReturnValue);// 0x1353623e7a001
	void Random Selection(float TargetDisMax, float Radius, out Vector[] TargetArray, bool NeedCheckBoundary, out bool Add, int CallFunc_Array_LastIndex_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Array_Get_Item, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, int CallFunc_Array_Add_ReturnValue);// 0x1353523e7a001
	void JudgeBoundary(Vector Pos, float Radius, out bool DontInBoundary, Vector2D NewLocalVar, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, bool CallFunc_CheckMapDarkDataWithVector_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsPointInBox_ReturnValue);// 0x1353423e7a001
	void Calculate Poison Circle Point Array(out float[] RadiusArr, Vector FirstPoint, bool Failed, int Index, Vector[] TempAreaPosArray, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Calculate_Required_Parameters_Radius, float CallFunc_Calculate_Required_Parameters_MaxOffset, float CallFunc_Calculate_Required_Parameters_GoToTheCentreRadius, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_PoisonCircleMarker_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_GetRandomVectorFromMapDarkData_ReturnValue, int CallFunc_Max_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x1353323e7a001
	void Get Safe Area Center(int Index, out Vector Pos, Vector Point, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_StructToJson_Json, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc_InRange_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool Temp_bool_Variable, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D[] CallFunc_Map_Values_Values, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector2D CallFunc_Array_Get_Item, Vector2D K2Node_Select_Default, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_CalculateFakePoint_Pos, bool CallFunc_BooleanAND_ReturnValue, Vector[] K2Node_Select_Default, Vector CallFunc_Array_Get_Item);// 0x1353223e7a001
	int GetAirline(out AirlineData Airline, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue);// 0xffffff9223bfa002
	void SetStaticSafeArea(out Vector[] SafeAreaCenters, Int32Range OverrideIndexRange);// 0xffffff9223bfa002
	void SetStaticAirline(AirlineData Airline, int StaticAirlineID);// 0x183b823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CGMMapInfo.GameModeCompBase.ActorComponent.Object
	Vector[] AreaPosArray;//[Offset: 0xd0, Size: 0x10]
	int MapID;//[Offset: 0xe0, Size: 0x4]
	int UsedAirlineID;//[Offset: 0xe4, Size: 0x4]
	AirlineData UsedAirlineData;//[Offset: 0xe8, Size: 0x28]
	<int,AirlineData> AirlineDataList;//[Offset: 0x120, Size: 0x50]
	int MaskWidth;//[Offset: 0x170, Size: 0x4]
	float MaskScale;//[Offset: 0x174, Size: 0x4]
	int MapWidth;//[Offset: 0x178, Size: 0x4]
	int MapHeight;//[Offset: 0x17c, Size: 0x4]
	void LoadAirlineData();// 0x424423bfa041
	void InitInfo(int InMapID);// 0x424323bfa041
	int GetUsedAirlineData(out AirlineData outData);// 0x424223bfa041
	int GetMapIDByName(SCustomGameState* InGameState, FString Name);// 0x424123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_PoisonCircleMarker_C.SolarMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x298, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a0, Size: 0x8]
	void ReceiveBeginPlay();// 0x25c8d23e7a001
	void ExecuteUbergraph_BP_PoisonCircleMarker(int EntryPoint);// 0x9e8523e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: BP_BattleRoylePoisonCircle_C.BP_CustomPoisonCircle_Template_C.SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	FString GetModuleName();// 0x1c008f23d4a100
<----------Generated by SSpawner v1.0.2---------->


Class: BP_CustomPoisonCircle_Template_C.SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4c8, Size: 0x8]
	StaticMeshComponent* StaticMeshCicle;//[Offset: 0x4d0, Size: 0x8]
	StaticMeshComponent* SafeArea;//[Offset: 0x4d8, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x4e0, Size: 0x8]
	<SolarAbilitySystemComponent*,GameplayAbilitySpecHandle> AbilityMap;//[Offset: 0x4e8, Size: 0x50]
	class GameplayAbility* DamageAbility;//[Offset: 0x538, Size: 0x8]
	float Distance Threshold;//[Offset: 0x540, Size: 0x4]
	float InitRadius;//[Offset: 0x544, Size: 0x4]
	Vector InitPosition;//[Offset: 0x548, Size: 0xc]
	FString GetModuleName();// 0xe5eb23e7a001
	void SetMeshVisibility(float CallFunc_GetCurrentSafeAreaRadius_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0xe5ec23e7a001
	static void DataTrace(int inInt, Vector Vector, float InFloat, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0xe5ed23e7a001
	void ActorOutSpace(Actor* Target, float CallFunc_GetCurrentDamage_ReturnValue, SolarAbilitySystemComponent* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameplayAbilitySpecHandle CallFunc_K2_GiveAbilityAndActivateOnce_ReturnValue);// 0xe5ee23e7a001
	void ActorEnterSpace(Actor* Target, SolarAbilitySystemComponent* AbilityComponent, SolarAbilitySystemComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameplayAbilitySpecHandle CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0xe5ef23e7a001
	static void ClearAllAbilities(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarAbilitySystemComponent*[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, SolarAbilitySystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, GameplayAbilitySpecHandle CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0xe5f023e7a001
	void OnLoaded_2CF9BD9E4D7B992D773DE7AE62F29135(Object* Loaded);// 0xe5f123e7a001
	void ReceiveBeginPlay();// 0xe5f223e7a001
	void ReceiveTick(float DeltaSeconds);// 0xe5f323e7a001
	void [S]SetNextArea(Vector Center, float Radius, float WaitTime, float MoveTime, int DamageLevel);// 0xe5f423e7a001
	void ShowEffectInside(bool bInside);// 0xe5f523e7a001
	void Evnet_ResetMaterial();// 0xe5f623e7a001
	void ReceiveActorEnterPoisonCircle(Actor* Actor);// 0x3f7fff8f23bfa003
	void ReceiveActorLeavePoisonCircle(Actor* Actor);// 0xcdc523e7a001
	void ExecuteUbergraph_BP_CustomPoisonCircle_Template(int EntryPoint, float CallFunc_GetCurBattleTime_ReturnValue, bool CallFunc_IsServer_ReturnValue, int CallFunc_FTrunc_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, float K2Node_Event_DeltaSeconds, Vector K2Node_CustomEvent_Center, float K2Node_CustomEvent_Radius, float K2Node_CustomEvent_WaitTime, float K2Node_CustomEvent_MoveTime, int K2Node_CustomEvent_DamageLevel, bool K2Node_Event_bInside, float CallFunc_Conv_IntToFloat_ReturnValue, CircleSafeAreaInfo K2Node_MakeStruct_CircleSafeAreaInfo, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_VectorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, Object* Temp_object_Variable, Object* K2Node_CustomEvent_Loaded, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, Material* K2Node_DynamicCast_AsMaterial, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_Event_Actor, Actor* K2Node_Event_Actor);// 0xffffff9223bfa002
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	<float,CurveFloat*> MiniMapScaleMap;//[Offset: 0x468, Size: 0x50]
	CircleSafeAreaInfo[] SafeAreaConfigArr;//[Offset: 0x4b8, Size: 0x10]
	void SetNextSafeArea(out const CircleSafeAreaInfo AreaInfo);// 0x4c3423bfa041
	void Init(out const Vector InSafeAreaCenterPos, float InPoisonCircleRadius);// 0x4c3323bfa041
	float GetNextSafeAreaRadius();// 0x4c3223bfa041
	CurveFloat* GetMiniMapFOVCurveByRadius(float InRadius);// 0x4c3123bfa041
	float GetCurrentSafeAreaRadius();// 0x4c3023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CircleSafeAreaInfo.SafeAreaInfoBase
	float Radius;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SafeAreaInfoBase
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float WaitTime;//[Offset: 0xc, Size: 0x4]
	float ShrinkTime;//[Offset: 0x10, Size: 0x4]
	float DamageValue;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SolarBombingManager_C.SolarBombingZoneManager.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 0x8]
	FString GetModuleName();// 0xffffff8f23bfa000
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBombingZoneManager.Actor.Object
	class SolarBombActor* BPClass;//[Offset: 0x228, Size: 0x8]
	BombingZone[] ZoneArray;//[Offset: 0x230, Size: 0x10]
	int WeightInCar;//[Offset: 0x244, Size: 0x4]
	int WeightInPoision;//[Offset: 0x248, Size: 0x4]
	int WeightInRoom;//[Offset: 0x24c, Size: 0x4]
	Vector2D LocationLimit;//[Offset: 0x250, Size: 0x8]
	float NotifyTime;//[Offset: 0x258, Size: 0x4]
	void OnCreateBombingZone(int ID, bool bSpecificLocation, Vector TargetLocation);// 0x4aa323bfa041
	BombingZoneBomb GetBombData(int ZoneId);// 0x4aa223bfa041
	bool CreateBombingZone(out BombingZone Zone, bool bSpecificLocation, Vector TargetLocation);// 0x4aa123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BombingZoneBomb
	float Radius;//[Offset: 0x0, Size: 0x4]
	float MaxDamage;//[Offset: 0x4, Size: 0x4]
	float MinDamage;//[Offset: 0x8, Size: 0x4]
	float VehicleMaxDamage;//[Offset: 0xc, Size: 0x4]
	float VehicleMinDamage;//[Offset: 0x10, Size: 0x4]
	float InVehicleDamageScale;//[Offset: 0x14, Size: 0x4]
	float LandingTime;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BombingZone
	int instanceID;//[Offset: 0x0, Size: 0x4]
	int ConfigId;//[Offset: 0x4, Size: 0x4]
	float Radius;//[Offset: 0x8, Size: 0x4]
	float Duration;//[Offset: 0xc, Size: 0x4]
	int MinBomb;//[Offset: 0x10, Size: 0x4]
	int MaxBomb;//[Offset: 0x14, Size: 0x4]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	BombingZoneBomb Bomb;//[Offset: 0x24, Size: 0x1c]
	enum State;//[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarBombActor.Actor.Object
	bool bFireWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	BombingZoneBomb BombConfig;//[Offset: 0x22c, Size: 0x1c]
	bool bAutoDestroyAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float TargetLandingTime;//[Offset: 0x254, Size: 0x4]
	ParticleSystem* WaterBombEffect;//[Offset: 0x258, Size: 0x8]
	ParticleSystem* BombEffect;//[Offset: 0x260, Size: 0x8]
	MaterialInstanceDynamic* GuideLine;//[Offset: 0x268, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x270, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x278, Size: 0x8]
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4aa023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Formula_BattleRoyale_C.BP_FormulaBase_C.CGFormula.Info.Actor.Object
	int WarmGameExp;//[Offset: 0x25c, Size: 0x4]
	<SolarPlayerState*,bool> WeaponExp;//[Offset: 0x260, Size: 0x50]
	<int> WarmGameIdSet;//[Offset: 0x2b0, Size: 0x50]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x300, Size: 0x8]
	static SettlementReward[] GetSettlementRewards(SolarPlayerState* InPS, int MatchRuleID, int MaxRealPersonIndex, int MaxRealPerson, int ItemID, int[] ItemDrop, SolarPlayerState* PS, int RealPersonCount, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_Greater_IntInt_ReturnValue, const SolarTablesData_BattleEndRankSettlement CallFunc_GetRowData_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, SolarGameState* K2Node_DynamicCast_AsSolar_Game_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SettlementReward K2Node_MakeStruct_SettlementReward, int CallFunc_Array_Get_Item, SettlementReward[] K2Node_MakeArray_Array, int CallFunc_Array_Get_Item, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_LessEqual_IntInt_ReturnValue, int[] CallFunc_GetRowKeys_OutKeys, int CallFunc_GetRowKeys_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, const SolarTablesData_BattleEndRankSettlement CallFunc_GetRowData_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1318a23e7a001
	bool IsSettlementBagItem(SolarPlayerState* InPS, byte CallFunc_GetBattleState_State, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x1318923e7a001
	void GetDefenderManager(out BP_DefenderManager_C* Output_Get, bool CallFunc_IsValid_ReturnValue, DefenderManager* CallFunc_GetDefenderManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0x1318823e7a001
	void MVPLifeTimeScore(float Life Time, out float LTMVPScore, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x1319623e7a001
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult, int[] Result, const int Temp_int_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int[] CallFunc_GetStrategyGuideConditions_OutResult, int CallFunc_Array_Add_ReturnValue);// 0xffffff8f23bfa000
	static int CalculateTeamRank(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x227c123e7a008
	static int CalculatePlayerRank(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1318023e7a001
	float BattleStateDealFloat(float Input, byte Temp_byte_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, byte CallFunc_GetBattleState_State, float K2Node_Select_Default);// 0x1317f23e7a001
	int BattleStateDealInt(int Input, byte Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_GetBattleState_State, int K2Node_Select_Default);// 0x1317e23e7a001
	void GetBattleState(out byte State, byte CallFunc_GetDataByte_OutValue, bool CallFunc_GetDataByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x1317d23e7a001
	float GetKDA(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float Temp_float_Variable, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BattleStateDealFloat_ReturnValue);// 0x1317c23e7a001
	static SettlementParam_ExtraRewardInfo[] GetExtraRewards(SolarPlayerState* InPS, SettlementParam_ExtraRewardInfo[] CommonRewards, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString Temp_string_Variable, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, bool Temp_bool_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default, byte CallFunc_GetBattleState_State, FString CallFunc_FormatRewardItem_ItemString, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString[] K2Node_MakeArray_Array, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Combine_Reward_Item_RewardString, int Temp_int_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, int K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo[] Temp_struct_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, bool Temp_bool_Variable, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, SettlementParam_ExtraRewardInfo[] K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_FormatRewardItem_ItemString, FString K2Node_Select_Default, FString[] K2Node_MakeArray_Array, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo[] K2Node_MakeArray_Array);// 0x1317b23e7a001
	void GetPlayerData(SolarPlayerState* Player, out int KillCount, out int KillDown, out int Assist, out int SaveCount, out float LifeTime, out float CauseDamage, out int Rank, out int TeamRank, out int DeathCount, out bool TeamAced, out bool IsMVP, out bool IsCustomRoomActive, out byte DefenderType, FString SideID, FString PlayerId, byte CallFunc_GetDataByte_OutValue, bool CallFunc_GetDataByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue);// 0x152fa23e7a008
	float CalculateMVPScore(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_MVPLifeTimeScore_LTMVPScore, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BattleStateDealFloat_ReturnValue);// 0x1317923e7a001
	int GetZomborg(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool Temp_bool_Variable, int CallFunc_FTrunc_ReturnValue, int Temp_int_Variable, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int K2Node_Select_Default);// 0x1317823e7a001
	int GetWeaponExp(SolarPlayerState* InPS, int InWeaponID, int Exp, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float CallFunc_GetMapDataFloat_OutValue, bool CallFunc_GetMapDataFloat_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int Temp_int_Variable, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, const bool Temp_bool_Variable, int CallFunc_Round_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1317723e7a001
	void GetCharacterExp(SolarPlayerState* InPS, out int OutGetExp, out int[] OutReason, int[] ExpReason, int Exp, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xffffff9223bfa002
	int GetAccountExp(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int CallFunc_GetFixedLevelExp_ReturnValue, int K2Node_Select_Default);// 0x13f7a23e7a008
	void GetShowPageIndexs(SolarPlayerState* InPS, out const SettlePageParam InParam, out int[] OutResult, SolarPlayerState* PlayerState, int[] SettlePages, const int Temp_int_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, const int Temp_int_Variable, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const int Temp_int_Variable, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, SolarGameInstanceBase* CallFunc_GetSolarGameInstanceBase_ReturnValue, SolarLuaHelper* CallFunc_GetSolarLuaHelper_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_IsBattlePassInfoUpdated_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int[] K2Node_MakeArray_Array);// 0x1317323e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: BP_FormulaBase_C.CGFormula.Info.Actor.Object
	float ExpGain-LifeTimeLimit;//[Offset: 0x258, Size: 0x4]
	static int GetFixedLevelExp(int Origin, SolarPlayerState* Player, int finalExp, bool Temp_bool_Variable, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_AccountFixedExp CallFunc_TryGetRowData_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default);// 0x1575223e7a008
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult, int[] Result, const int Temp_int_Variable, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_Greater_IntInt_ReturnValue, PlayerStatisticsData* CallFunc_GetPlayerStatData_ReturnValue, int[] CallFunc_GetValue_IntArray_OutResult, int CallFunc_GetPlayerStatisticData_OutValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const int Temp_int_Variable, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2e26c1708d842e9d
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_TablesReader.Object
	SolarTables_Reader_AccountFixedExp* AccountFixedExp;//[Offset: 0x28, Size: 0x8]
	SolarTables_Reader_AccountFlag* AccountFlag;//[Offset: 0x30, Size: 0x8]
	SolarTables_Reader_Airline* Airline;//[Offset: 0x38, Size: 0x8]
	SolarTables_Reader_Armory* Armory;//[Offset: 0x40, Size: 0x8]
	SolarTables_Reader_BattleUpgradeContent* BattleUpgradeContent;//[Offset: 0x48, Size: 0x8]
	SolarTables_Reader_BattleUpgradeEffect* BattleUpgradeEffect;//[Offset: 0x50, Size: 0x8]
	SolarTables_Reader_BattleUpgradeEffectPool* BattleUpgradeEffectPool;//[Offset: 0x58, Size: 0x8]
	SolarTables_Reader_BattleEndRankSettlement* BattleEndRankSettlement;//[Offset: 0x60, Size: 0x8]
	SolarTables_Reader_BpAward* BpAward;//[Offset: 0x68, Size: 0x8]
	SolarTables_Reader_Behavior* Behavior;//[Offset: 0x70, Size: 0x8]
	SolarTables_Reader_EscapeExp* EscapeExp;//[Offset: 0x78, Size: 0x8]
	SolarTables_Reader_CaseToggleAlphabet* CaseToggleAlphabet;//[Offset: 0x80, Size: 0x8]
	SolarTables_Reader_UnitCharacter* UnitCharacter;//[Offset: 0x88, Size: 0x8]
	SolarTables_Reader_CharacterAbility* CharacterAbility;//[Offset: 0x90, Size: 0x8]
	SolarTables_Reader_CharacterPassiveAbility* CharacterPassiveAbility;//[Offset: 0x98, Size: 0x8]
	SolarTables_Reader_GetPoint* GetPoint;//[Offset: 0xa0, Size: 0x8]
	SolarTables_Reader_ChestSpawn* ChestSpawn;//[Offset: 0xa8, Size: 0x8]
	SolarTables_Reader_ChestSpawnGroup* ChestSpawnGroup;//[Offset: 0xb0, Size: 0x8]
	SolarTables_Reader_ClanFlag* ClanFlag;//[Offset: 0xb8, Size: 0x8]
	SolarTables_Reader_DayAndNight* DayAndNight;//[Offset: 0xc0, Size: 0x8]
	SolarTables_Reader_DsVariableRange* DsVariableRange;//[Offset: 0xc8, Size: 0x8]
	SolarTables_Reader_EShop* EShop;//[Offset: 0xd0, Size: 0x8]
	SolarTables_Reader_EShopDemoModel* EShopDemoModel;//[Offset: 0xd8, Size: 0x8]
	SolarTables_Reader_EShopGoodsPool* EShopGoodsPool;//[Offset: 0xe0, Size: 0x8]
	SolarTables_Reader_EShopGoodsPoolGroup* EShopGoodsPoolGroup;//[Offset: 0xe8, Size: 0x8]
	SolarTables_Reader_EShopSpawn* EShopSpawn;//[Offset: 0xf0, Size: 0x8]
	SolarTables_Reader_BattleRoyaleMode* BattleRoyaleMode;//[Offset: 0xf8, Size: 0x8]
	SolarTables_Reader_GameModeGroup* GameModeGroup;//[Offset: 0x100, Size: 0x8]
	SolarTables_Reader_GameModeMain* GameModeMain;//[Offset: 0x108, Size: 0x8]
	SolarTables_Reader_OutcomeSet* OutcomeSet;//[Offset: 0x110, Size: 0x8]
	SolarTables_Reader_GameTimeLine* GameTimeLine;//[Offset: 0x118, Size: 0x8]
	SolarTables_Reader_GlobalOutcome* GlobalOutcome;//[Offset: 0x120, Size: 0x8]
	SolarTables_Reader_GlobalSensitivity* GlobalSensitivity;//[Offset: 0x128, Size: 0x8]
	SolarTables_Reader_HeroPowerFormula* HeroPowerFormula;//[Offset: 0x130, Size: 0x8]
	SolarTables_Reader_InputAction* InputAction;//[Offset: 0x138, Size: 0x8]
	SolarTables_Reader_InputMapping* InputMapping;//[Offset: 0x140, Size: 0x8]
	SolarTables_Reader_Item* Item;//[Offset: 0x148, Size: 0x8]
	SolarTables_Reader_BackpackProperty* BackpackProperty;//[Offset: 0x150, Size: 0x8]
	SolarTables_Reader_BackpackTrailProperty* BackpackTrailProperty;//[Offset: 0x158, Size: 0x8]
	SolarTables_Reader_CapsuleProperty* CapsuleProperty;//[Offset: 0x160, Size: 0x8]
	SolarTables_Reader_Dance* Dance;//[Offset: 0x168, Size: 0x8]
	SolarTables_Reader_Emote* Emote;//[Offset: 0x170, Size: 0x8]
	SolarTables_Reader_MaterialProperty* MaterialProperty;//[Offset: 0x178, Size: 0x8]
	SolarTables_Reader_VehicleSkinProperty* VehicleSkinProperty;//[Offset: 0x180, Size: 0x8]
	SolarTables_Reader_WeaponSkinProperty* WeaponSkinProperty;//[Offset: 0x188, Size: 0x8]
	SolarTables_Reader_ItemCustomType* ItemCustomType;//[Offset: 0x190, Size: 0x8]
	SolarTables_Reader_ItemInBattle* ItemInBattle;//[Offset: 0x198, Size: 0x8]
	SolarTables_Reader_ArmorProperty* ArmorProperty;//[Offset: 0x1a0, Size: 0x8]
	SolarTables_Reader_Chest* Chest;//[Offset: 0x1a8, Size: 0x8]
	SolarTables_Reader_EnergyProperty* EnergyProperty;//[Offset: 0x1b0, Size: 0x8]
	SolarTables_Reader_ExtraEnergyProperty* ExtraEnergyProperty;//[Offset: 0x1b8, Size: 0x8]
	SolarTables_Reader_GunProperty* GunProperty;//[Offset: 0x1c0, Size: 0x8]
	SolarTables_Reader_ItemBehavior* ItemBehavior;//[Offset: 0x1c8, Size: 0x8]
	SolarTables_Reader_ItemWeaponParts* ItemWeaponParts;//[Offset: 0x1d0, Size: 0x8]
	SolarTables_Reader_JetPackModuleProperty* JetPackModuleProperty;//[Offset: 0x1d8, Size: 0x8]
	SolarTables_Reader_ShieldProperty* ShieldProperty;//[Offset: 0x1e0, Size: 0x8]
	SolarTables_Reader_ItemQuality* ItemQuality;//[Offset: 0x1e8, Size: 0x8]
	SolarTables_Reader_ItemSound* ItemSound;//[Offset: 0x1f0, Size: 0x8]
	SolarTables_Reader_LobbyAutoDownload* LobbyAutoDownload;//[Offset: 0x1f8, Size: 0x8]
	SolarTables_Reader_LanguageSwitcher* LanguageSwitcher;//[Offset: 0x200, Size: 0x8]
	SolarTables_Reader_Localization* Localization;//[Offset: 0x208, Size: 0x8]
	SolarTables_Reader_Localization_BattleUI* Localization_BattleUI;//[Offset: 0x210, Size: 0x8]
	SolarTables_Reader_Localization_EventSystem* Localization_EventSystem;//[Offset: 0x218, Size: 0x8]
	SolarTables_Reader_Localization_General* Localization_General;//[Offset: 0x220, Size: 0x8]
	SolarTables_Reader_Localization_Heroes* Localization_Heroes;//[Offset: 0x228, Size: 0x8]
	SolarTables_Reader_Localization_Item* Localization_Item;//[Offset: 0x230, Size: 0x8]
	SolarTables_Reader_Localization_Tournament* Localization_Tournament;//[Offset: 0x238, Size: 0x8]
	SolarTables_Reader_Localization_Uncategorized* Localization_Uncategorized;//[Offset: 0x240, Size: 0x8]
	SolarTables_Reader_GameMap* GameMap;//[Offset: 0x248, Size: 0x8]
	SolarTables_Reader_MapMarkIcon* MapMarkIcon;//[Offset: 0x250, Size: 0x8]
	SolarTables_Reader_MatchRule* MatchRule;//[Offset: 0x258, Size: 0x8]
	SolarTables_Reader_RankMatch* RankMatch;//[Offset: 0x260, Size: 0x8]
	SolarTables_Reader_NameCardBackground* NameCardBackground;//[Offset: 0x268, Size: 0x8]
	SolarTables_Reader_NameCardPose* NameCardPose;//[Offset: 0x270, Size: 0x8]
	SolarTables_Reader_ObGift* ObGift;//[Offset: 0x278, Size: 0x8]
	SolarTables_Reader_Outcome* Outcome;//[Offset: 0x280, Size: 0x8]
	SolarTables_Reader_OutcomeContent* OutcomeContent;//[Offset: 0x288, Size: 0x8]
	SolarTables_Reader_PickupPriorityItem* PickupPriorityItem;//[Offset: 0x290, Size: 0x8]
	SolarTables_Reader_PickupPriorityWeaponPart* PickupPriorityWeaponPart;//[Offset: 0x298, Size: 0x8]
	SolarTables_Reader_CharacterVoiceover* CharacterVoiceover;//[Offset: 0x2a0, Size: 0x8]
	SolarTables_Reader_QuickChat* QuickChat;//[Offset: 0x2a8, Size: 0x8]
	SolarTables_Reader_QuickVoice* QuickVoice;//[Offset: 0x2b0, Size: 0x8]
	SolarTables_Reader_VODownload* VODownload;//[Offset: 0x2b8, Size: 0x8]
	SolarTables_Reader_RankLevel* RankLevel;//[Offset: 0x2c0, Size: 0x8]
	SolarTables_Reader_AutoDirector* AutoDirector;//[Offset: 0x2c8, Size: 0x8]
	SolarTables_Reader_AutoDirectorActivityScore* AutoDirectorActivityScore;//[Offset: 0x2d0, Size: 0x8]
	SolarTables_Reader_CircularCameras* CircularCameras;//[Offset: 0x2d8, Size: 0x8]
	SolarTables_Reader_HotSpot* HotSpot;//[Offset: 0x2e0, Size: 0x8]
	SolarTables_Reader_LookAtCameras* LookAtCameras;//[Offset: 0x2e8, Size: 0x8]
	SolarTables_Reader_Rescue* Rescue;//[Offset: 0x2f0, Size: 0x8]
	SolarTables_Reader_Skin* Skin;//[Offset: 0x2f8, Size: 0x8]
	SolarTables_Reader_Achievement* Achievement;//[Offset: 0x300, Size: 0x8]
	SolarTables_Reader_TaskProgress* TaskProgress;//[Offset: 0x308, Size: 0x8]
	SolarTables_Reader_TaskSystem* TaskSystem;//[Offset: 0x310, Size: 0x8]
	SolarTables_Reader_PlayerOperationListLayout* PlayerOperationListLayout;//[Offset: 0x318, Size: 0x8]
	SolarTables_Reader_Variables* Variables;//[Offset: 0x320, Size: 0x8]
	SolarTables_Reader_Vehicle* Vehicle;//[Offset: 0x328, Size: 0x8]
	SolarTables_Reader_VehicleSkin* VehicleSkin;//[Offset: 0x330, Size: 0x8]
	SolarTables_Reader_VehicleType* VehicleType;//[Offset: 0x338, Size: 0x8]
	SolarTables_Reader_VehicleSpawn* VehicleSpawn;//[Offset: 0x340, Size: 0x8]
	SolarTables_Reader_VehicleSpawnGroup* VehicleSpawnGroup;//[Offset: 0x348, Size: 0x8]
	SolarTables_Reader_WarmGame* WarmGame;//[Offset: 0x350, Size: 0x8]
	SolarTables_Reader_WarmGameMode* WarmGameMode;//[Offset: 0x358, Size: 0x8]
	SolarTables_Reader_WeaponDamage* WeaponDamage;//[Offset: 0x360, Size: 0x8]
	SolarTables_Reader_Weapon* Weapon;//[Offset: 0x368, Size: 0x8]
	SolarTables_Reader_WeaponAmmo* WeaponAmmo;//[Offset: 0x370, Size: 0x8]
	SolarTables_Reader_WeaponBattleUpgrade* WeaponBattleUpgrade;//[Offset: 0x378, Size: 0x8]
	SolarTables_Reader_WeaponDefault* WeaponDefault;//[Offset: 0x380, Size: 0x8]
	SolarTables_Reader_WeaponKillTip* WeaponKillTip;//[Offset: 0x388, Size: 0x8]
	SolarTables_Reader_WeaponParts* WeaponParts;//[Offset: 0x390, Size: 0x8]
	SolarTables_Reader_WeaponPartsOp* WeaponPartsOp;//[Offset: 0x398, Size: 0x8]
	SolarTables_Reader_WeaponQuality* WeaponQuality;//[Offset: 0x3a0, Size: 0x8]
	SolarTables_Reader_SecondMode* SecondMode;//[Offset: 0x3a8, Size: 0x8]
	SolarTables_Reader_WeaponSkin* WeaponSkin;//[Offset: 0x3b0, Size: 0x8]
	SolarTables_Reader_WeaponSound* WeaponSound;//[Offset: 0x3b8, Size: 0x8]
	SolarTables_Reader_WeaponStatu* WeaponStatu;//[Offset: 0x3c0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_AccountFixedExp.SolarTableReaderBase.Object
	SolarTablesData_AccountFixedExp TryGetRowData(int Key, out bool HasKey);// 0x53b923bfa041
	bool HasRowKey(int Key);// 0x53b823bfa041
	bool HasColKey(FString Key);// 0x53b723bfa041
	FString GetTableName();// 0x53b623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x53b523bfa041
	SolarTablesData_AccountFixedExp GetRowData(int Key);// 0x53b423bfa041
	int GetRowCount();// 0x53b323bfa041
	int GetDataNum();// 0x53b223bfa041
	FString[] GetColKeys();// 0x53b123bfa041
	int GetColCount();// 0x53b023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTableReaderBase.Object
	int RandomRangeInt(out const SolarTablesRangeInt InData);// 0x53af23bfa041
	float RandomRangeFloat(out const SolarTablesRangeFloat InData);// 0x53ae23bfa041
	bool IsReaderValid();// 0x53ad23bfa041
	FString GetLocText(out const SolarTablesLocalText InData);// 0x53ac23bfa041
	FString GetDeviceRes(out const SolarTablesDeviceRes InData);// 0x53ab23bfa041
	bool ContainsRangeInt(out const SolarTablesRangeInt InData, int In, bool bEqualMin, bool bEqualMax);// 0x53aa23bfa041
	bool ContainsRangeFloat(out const SolarTablesRangeFloat InData, float In, bool bEqualMin, bool bEqualMax);// 0x53a923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_AccountFixedExp.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Exp;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesRangeInt
	int Left;//[Offset: 0x0, Size: 0x4]
	int Right;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesRangeFloat
	float Left;//[Offset: 0x0, Size: 0x4]
	float Right;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesLocalText
	int ID;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesDeviceRes
	FString res;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_AccountFlag.SolarTableReaderBase.Object
	SolarTablesData_AccountFlag TryGetRowData(int Key, out bool HasKey);// 0x53c323bfa041
	bool HasRowKey(int Key);// 0x53c223bfa041
	bool HasColKey(FString Key);// 0x53c123bfa041
	FString GetTableName();// 0x53c023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x53bf23bfa041
	SolarTablesData_AccountFlag GetRowData(int Key);// 0x53be23bfa041
	int GetRowCount();// 0x53bd23bfa041
	int GetDataNum();// 0x53bc23bfa041
	FString[] GetColKeys();// 0x53bb23bfa041
	int GetColCount();// 0x53ba23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_AccountFlag.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int FlagType;//[Offset: 0x10, Size: 0x4]
	FString FlagIcon;//[Offset: 0x18, Size: 0x10]
	FString StateName;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Airline.SolarTableReaderBase.Object
	SolarTablesData_Airline TryGetRowData(int Key, out bool HasKey);// 0x53d723bfa041
	bool HasRowKey(int Key);// 0x53d623bfa041
	bool HasColKey(FString Key);// 0x53d523bfa041
	FString GetTableName();// 0x53d423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x53d323bfa041
	SolarTablesData_Airline GetRowData(int Key);// 0x53d223bfa041
	int GetRowCount();// 0x53d123bfa041
	int GetDataNum();// 0x53d023bfa041
	FString[] GetColKeys();// 0x53cf23bfa041
	int GetColCount();// 0x53ce23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Airline.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float[] AirlineCoordinateA;//[Offset: 0x10, Size: 0x10]
	float[] RealPointA;//[Offset: 0x20, Size: 0x10]
	float[] AirlineCoordinateB;//[Offset: 0x30, Size: 0x10]
	float[] RealPointB;//[Offset: 0x40, Size: 0x10]
	int UseGameMode;//[Offset: 0x50, Size: 0x4]
	int MapID;//[Offset: 0x54, Size: 0x4]
	float AirlineAltitude;//[Offset: 0x58, Size: 0x4]
	float CapsuleSpeed;//[Offset: 0x5c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Armory.SolarTableReaderBase.Object
	SolarTablesData_Armory TryGetRowData(int Key, out bool HasKey);// 0x53eb23bfa041
	bool HasRowKey(int Key);// 0x53ea23bfa041
	bool HasColKey(FString Key);// 0x53e923bfa041
	FString GetTableName();// 0x53e823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x53e723bfa041
	SolarTablesData_Armory GetRowData(int Key);// 0x53e623bfa041
	int GetRowCount();// 0x53e523bfa041
	int GetDataNum();// 0x53e423bfa041
	FString[] GetColKeys();// 0x53e323bfa041
	int GetColCount();// 0x53e223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Armory.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WeaponType;//[Offset: 0x10, Size: 0x4]
	int WeaponDescription;//[Offset: 0x14, Size: 0x4]
	int SkillName;//[Offset: 0x18, Size: 0x4]
	int SkillDescription;//[Offset: 0x1c, Size: 0x4]
	FString UrlName;//[Offset: 0x20, Size: 0x10]
	FString WeaponMovie;//[Offset: 0x30, Size: 0x10]
	FString WeaponConfig;//[Offset: 0x40, Size: 0x10]
	int WeaponUnlockLevel;//[Offset: 0x50, Size: 0x4]
	int WeaponDamage;//[Offset: 0x54, Size: 0x4]
	int WeaponRateOfFire;//[Offset: 0x58, Size: 0x4]
	int WeaponRecoil;//[Offset: 0x5c, Size: 0x4]
	int WeaponSpread;//[Offset: 0x60, Size: 0x4]
	int WeaponRange;//[Offset: 0x64, Size: 0x4]
	int WeaponMobility;//[Offset: 0x68, Size: 0x4]
	FString SilhouetteIcon;//[Offset: 0x70, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_BattleUpgradeContent.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeContent TryGetRowData(int Key, out bool HasKey);// 0x543123bfa041
	bool HasRowKey(int Key);// 0x543023bfa041
	bool HasColKey(FString Key);// 0x542f23bfa041
	FString GetTableName();// 0x542e23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x542d23bfa041
	SolarTablesData_BattleUpgradeContent GetRowData(int Key);// 0x542c23bfa041
	int GetRowCount();// 0x542b23bfa041
	int GetDataNum();// 0x542a23bfa041
	FString[] GetColKeys();// 0x542923bfa041
	int GetColCount();// 0x542823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_BattleUpgradeContent.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ModelID;//[Offset: 0x10, Size: 0x10]
	int Grade;//[Offset: 0x20, Size: 0x4]
	int[] UpgradeContent;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_BattleUpgradeEffect.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeEffect TryGetRowData(int Key, out bool HasKey);// 0x543b23bfa041
	bool HasRowKey(int Key);// 0x543a23bfa041
	bool HasColKey(FString Key);// 0x543923bfa041
	FString GetTableName();// 0x543823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x543723bfa041
	SolarTablesData_BattleUpgradeEffect GetRowData(int Key);// 0x543623bfa041
	int GetRowCount();// 0x543523bfa041
	int GetDataNum();// 0x543423bfa041
	FString[] GetColKeys();// 0x543323bfa041
	int GetColCount();// 0x543223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_BattleUpgradeEffect.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum Effect;//[Offset: 0x10, Size: 0x1]
	int EffectValue;//[Offset: 0x14, Size: 0x4]
	int StackingTimes;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_BattleUpgradeEffectPool.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeEffectPool TryGetRowData(int Key, out bool HasKey);// 0x544523bfa041
	bool HasRowKey(int Key);// 0x544423bfa041
	bool HasColKey(FString Key);// 0x544323bfa041
	FString GetTableName();// 0x544223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x544123bfa041
	SolarTablesData_BattleUpgradeEffectPool GetRowData(int Key);// 0x544023bfa041
	int GetRowCount();// 0x543f23bfa041
	int GetDataNum();// 0x543e23bfa041
	FString[] GetColKeys();// 0x543d23bfa041
	int GetColCount();// 0x543c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_BattleUpgradeEffectPool.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] Pool;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_BattleEndRankSettlement.SolarTableReaderBase.Object
	SolarTablesData_BattleEndRankSettlement TryGetRowData(int Key, out bool HasKey);// 0x541d23bfa041
	bool HasRowKey(int Key);// 0x541c23bfa041
	bool HasColKey(FString Key);// 0x541b23bfa041
	FString GetTableName();// 0x541a23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x541923bfa041
	SolarTablesData_BattleEndRankSettlement GetRowData(int Key);// 0x541823bfa041
	int GetRowCount();// 0x541723bfa041
	int GetDataNum();// 0x541623bfa041
	FString[] GetColKeys();// 0x541523bfa041
	int GetColCount();// 0x541423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_BattleEndRankSettlement.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int RuleID;//[Offset: 0x10, Size: 0x4]
	int RealPerson;//[Offset: 0x14, Size: 0x4]
	int[] ItemDrop;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_BpAward.SolarTableReaderBase.Object
	SolarTablesData_BpAward TryGetRowData(int Key, out bool HasKey);// 0x545923bfa041
	bool HasRowKey(int Key);// 0x545823bfa041
	bool HasColKey(FString Key);// 0x545723bfa041
	FString GetTableName();// 0x545623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x545523bfa041
	SolarTablesData_BpAward GetRowData(int Key);// 0x545423bfa041
	int GetRowCount();// 0x545323bfa041
	int GetDataNum();// 0x545223bfa041
	FString[] GetColKeys();// 0x545123bfa041
	int GetColCount();// 0x545023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_BpAward.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int BpID;//[Offset: 0x10, Size: 0x4]
	int Level;//[Offset: 0x14, Size: 0x4]
	int Exp;//[Offset: 0x18, Size: 0x4]
	int UpdateValue;//[Offset: 0x1c, Size: 0x4]
	int[] FreeAward;//[Offset: 0x20, Size: 0x10]
	int[] PayAward;//[Offset: 0x30, Size: 0x10]
	bool UnlockExtraTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool BuyLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Behavior.SolarTableReaderBase.Object
	SolarTablesData_Behavior TryGetRowData(int Key, out bool HasKey);// 0x544f23bfa041
	bool HasRowKey(int Key);// 0x544e23bfa041
	bool HasColKey(FString Key);// 0x544d23bfa041
	FString GetTableName();// 0x544c23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x544b23bfa041
	SolarTablesData_Behavior GetRowData(int Key);// 0x544a23bfa041
	int GetRowCount();// 0x544923bfa041
	int GetDataNum();// 0x544823bfa041
	FString[] GetColKeys();// 0x544723bfa041
	int GetColCount();// 0x544623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Behavior.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum BehaviorType;//[Offset: 0x10, Size: 0x1]
	int CharacterGetExp;//[Offset: 0x14, Size: 0x4]
	int WeaponGetExp;//[Offset: 0x18, Size: 0x4]
	int WeaponExp;//[Offset: 0x1c, Size: 0x4]
	int WeaponExp;//[Offset: 0x20, Size: 0x4]
	int WeaponExp;//[Offset: 0x24, Size: 0x4]
	SolarTablesLocalText CharaGetExpText;//[Offset: 0x28, Size: 0x4]
	int WeaponGetExpText;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_EscapeExp.SolarTableReaderBase.Object
	SolarTablesData_EscapeExp TryGetRowData(int Key, out bool HasKey);// 0x54f923bfa041
	bool HasRowKey(int Key);// 0x54f823bfa041
	bool HasColKey(FString Key);// 0x54f723bfa041
	FString GetTableName();// 0x54f623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x54f523bfa041
	SolarTablesData_EscapeExp GetRowData(int Key);// 0x54f423bfa041
	int GetRowCount();// 0x54f323bfa041
	int GetDataNum();// 0x54f223bfa041
	FString[] GetColKeys();// 0x54f123bfa041
	int GetColCount();// 0x54f023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_EscapeExp.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum BehaviorType;//[Offset: 0x10, Size: 0x1]
	int CharacterGetExp;//[Offset: 0x14, Size: 0x4]
	int WeaponGetExp;//[Offset: 0x18, Size: 0x4]
	int WeaponExp;//[Offset: 0x1c, Size: 0x4]
	int WeaponExp;//[Offset: 0x20, Size: 0x4]
	int WeaponExp;//[Offset: 0x24, Size: 0x4]
	SolarTablesLocalText CharaGetExpText;//[Offset: 0x28, Size: 0x4]
	int WeaponGetExpText;//[Offset: 0x2c, Size: 0x4]
	int ExpID;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_CaseToggleAlphabet.SolarTableReaderBase.Object
	SolarTablesData_CaseToggleAlphabet TryGetRowData(int Key, out bool HasKey);// 0x546d23bfa041
	bool HasRowKey(int Key);// 0x546c23bfa041
	bool HasColKey(FString Key);// 0x546b23bfa041
	FString GetTableName();// 0x546a23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x546923bfa041
	SolarTablesData_CaseToggleAlphabet GetRowData(int Key);// 0x546823bfa041
	int GetRowCount();// 0x546723bfa041
	int GetDataNum();// 0x546623bfa041
	FString[] GetColKeys();// 0x546523bfa041
	int GetColCount();// 0x546423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_CaseToggleAlphabet.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	bool IsLower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString de;//[Offset: 0x18, Size: 0x10]
	FString fr;//[Offset: 0x28, Size: 0x10]
	FString es;//[Offset: 0x38, Size: 0x10]
	FString pt;//[Offset: 0x48, Size: 0x10]
	FString it;//[Offset: 0x58, Size: 0x10]
	FString pl;//[Offset: 0x68, Size: 0x10]
	FString tr;//[Offset: 0x78, Size: 0x10]
	FString ru;//[Offset: 0x88, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_UnitCharacter.SolarTableReaderBase.Object
	SolarTablesData_UnitCharacter TryGetRowData(int Key, out bool HasKey);// 0x575123bfa041
	bool HasRowKey(int Key);// 0x575023bfa041
	bool HasColKey(FString Key);// 0x574f23bfa041
	FString GetTableName();// 0x574e23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x574d23bfa041
	SolarTablesData_UnitCharacter GetRowData(int Key);// 0x574c23bfa041
	int GetRowCount();// 0x574b23bfa041
	int GetDataNum();// 0x574a23bfa041
	FString[] GetColKeys();// 0x574923bfa041
	int GetColCount();// 0x574823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_UnitCharacter.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText name_extra;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText Info;//[Offset: 0x18, Size: 0x4]
	int Gender;//[Offset: 0x1c, Size: 0x4]
	int Body;//[Offset: 0x20, Size: 0x4]
	enum CharacterType;//[Offset: 0x24, Size: 0x1]
	FString ClassTypeIcon;//[Offset: 0x28, Size: 0x10]
	SolarTablesLocalText ClassTypeInfo;//[Offset: 0x38, Size: 0x4]
	bool defaultChara;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int defaultSkin;//[Offset: 0x40, Size: 0x4]
	int defaultPose;//[Offset: 0x44, Size: 0x4]
	int defaultBackground;//[Offset: 0x48, Size: 0x4]
	bool usableChara;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	FString CharacterProtrait;//[Offset: 0x50, Size: 0x10]
	FString UrlName;//[Offset: 0x60, Size: 0x10]
	<FString,FString> CharacterAttributesID;//[Offset: 0x70, Size: 0x50]
	float MaxNormalHP;//[Offset: 0xc0, Size: 0x4]
	int defaultArmor;//[Offset: 0xc4, Size: 0x4]
	int defaultShield;//[Offset: 0xc8, Size: 0x4]
	int defaultJetPackModule;//[Offset: 0xcc, Size: 0x4]
	FString BasicItemMax;//[Offset: 0xd0, Size: 0x10]
	float InitialSolarCharge;//[Offset: 0xe0, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0xe4, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0xe8, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0xec, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0xf0, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0xf4, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0xf8, Size: 0x4]
	float InitialEnergyLimit;//[Offset: 0xfc, Size: 0x4]
	float InitialExtraEnergyLimit;//[Offset: 0x100, Size: 0x4]
	float InitialExtraEnergyCharge;//[Offset: 0x104, Size: 0x4]
	float InitialChargeCD;//[Offset: 0x108, Size: 0x4]
	int ExpID;//[Offset: 0x10c, Size: 0x4]
	float ExpBonus;//[Offset: 0x110, Size: 0x4]
	int CharaGiftID;//[Offset: 0x114, Size: 0x4]
	FString CharacterIngameBP;//[Offset: 0x118, Size: 0x10]
	FString AnimBPResPath;//[Offset: 0x128, Size: 0x10]
	int StandJogSpeed;//[Offset: 0x138, Size: 0x4]
	int StandRunSpeed;//[Offset: 0x13c, Size: 0x4]
	int StandSprintSpeed;//[Offset: 0x140, Size: 0x4]
	int CrouchJogSpeed;//[Offset: 0x144, Size: 0x4]
	int CrouchRunSpeed;//[Offset: 0x148, Size: 0x4]
	int CrouchSprintSpeed;//[Offset: 0x14c, Size: 0x4]
	int ItemID;//[Offset: 0x150, Size: 0x4]
	float BackpackScale;//[Offset: 0x154, Size: 0x4]
	int CharacterSize;//[Offset: 0x158, Size: 0x4]
	int BotConfigID;//[Offset: 0x15c, Size: 0x4]
	int CharacterSort;//[Offset: 0x160, Size: 0x4]
	int CharacterTag1;//[Offset: 0x164, Size: 0x4]
	int CharacterTag2;//[Offset: 0x168, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_CharacterAbility.SolarTableReaderBase.Object
	SolarTablesData_CharacterAbility TryGetRowData(int Key, out bool HasKey);// 0x547723bfa041
	bool HasRowKey(int Key);// 0x547623bfa041
	bool HasColKey(FString Key);// 0x547523bfa041
	FString GetTableName();// 0x547423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x547323bfa041
	SolarTablesData_CharacterAbility GetRowData(int Key);// 0x547223bfa041
	int GetRowCount();// 0x547123bfa041
	int GetDataNum();// 0x547023bfa041
	FString[] GetColKeys();// 0x546f23bfa041
	int GetColCount();// 0x546e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_CharacterAbility.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int CharacterId;//[Offset: 0x10, Size: 0x4]
	FString DataAssetsPath;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Name;//[Offset: 0x28, Size: 0x4]
	SolarTablesLocalText Info;//[Offset: 0x2c, Size: 0x4]
	int DataID;//[Offset: 0x30, Size: 0x4]
	FString AbilityBP;//[Offset: 0x38, Size: 0x10]
	FString Icon;//[Offset: 0x48, Size: 0x10]
	int Data;//[Offset: 0x58, Size: 0x4]
	bool IfActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_CharacterPassiveAbility.SolarTableReaderBase.Object
	SolarTablesData_CharacterPassiveAbility TryGetRowData(int Key, out bool HasKey);// 0x548123bfa041
	bool HasRowKey(int Key);// 0x548023bfa041
	bool HasColKey(FString Key);// 0x547f23bfa041
	FString GetTableName();// 0x547e23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x547d23bfa041
	SolarTablesData_CharacterPassiveAbility GetRowData(int Key);// 0x547c23bfa041
	int GetRowCount();// 0x547b23bfa041
	int GetDataNum();// 0x547a23bfa041
	FString[] GetColKeys();// 0x547923bfa041
	int GetColCount();// 0x547823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_CharacterPassiveAbility.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString DataAssetsPath;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_GetPoint.SolarTableReaderBase.Object
	SolarTablesData_GetPoint TryGetRowData(int Key, out bool HasKey);// 0x556723bfa041
	bool HasRowKey(int Key);// 0x556623bfa041
	bool HasColKey(FString Key);// 0x556523bfa041
	FString GetTableName();// 0x556423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x556323bfa041
	SolarTablesData_GetPoint GetRowData(int Key);// 0x556223bfa041
	int GetRowCount();// 0x556123bfa041
	int GetDataNum();// 0x556023bfa041
	FString[] GetColKeys();// 0x555f23bfa041
	int GetColCount();// 0x555e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_GetPoint.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Point;//[Offset: 0x10, Size: 0x4]
	int TaskValue;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText TaskText;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ChestSpawn.SolarTableReaderBase.Object
	SolarTablesData_ChestSpawn TryGetRowData(int Key, out bool HasKey);// 0x549f23bfa041
	bool HasRowKey(int Key);// 0x549e23bfa041
	bool HasColKey(FString Key);// 0x549d23bfa041
	FString GetTableName();// 0x549c23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x549b23bfa041
	SolarTablesData_ChestSpawn GetRowData(int Key);// 0x549a23bfa041
	int GetRowCount();// 0x549923bfa041
	int GetDataNum();// 0x549823bfa041
	FString[] GetColKeys();// 0x549723bfa041
	int GetColCount();// 0x549623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ChestSpawn.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum ChestType;//[Offset: 0x10, Size: 0x1]
	int[] Chests;//[Offset: 0x18, Size: 0x10]
	int[] Weight;//[Offset: 0x28, Size: 0x10]
	int SpawnCount;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ChestSpawnGroup.SolarTableReaderBase.Object
	SolarTablesData_ChestSpawnGroup TryGetRowData(int Key, out bool HasKey);// 0x54a923bfa041
	bool HasRowKey(int Key);// 0x54a823bfa041
	bool HasColKey(FString Key);// 0x54a723bfa041
	FString GetTableName();// 0x54a623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x54a523bfa041
	SolarTablesData_ChestSpawnGroup GetRowData(int Key);// 0x54a423bfa041
	int GetRowCount();// 0x54a323bfa041
	int GetDataNum();// 0x54a223bfa041
	FString[] GetColKeys();// 0x54a123bfa041
	int GetColCount();// 0x54a023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ChestSpawnGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ChestGroup;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ClanFlag.SolarTableReaderBase.Object
	SolarTablesData_ClanFlag TryGetRowData(int Key, out bool HasKey);// 0x54bd23bfa041
	bool HasRowKey(int Key);// 0x54bc23bfa041
	bool HasColKey(FString Key);// 0x54bb23bfa041
	FString GetTableName();// 0x54ba23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x54b923bfa041
	SolarTablesData_ClanFlag GetRowData(int Key);// 0x54b823bfa041
	int GetRowCount();// 0x54b723bfa041
	int GetDataNum();// 0x54b623bfa041
	FString[] GetColKeys();// 0x54b523bfa041
	int GetColCount();// 0x54b423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ClanFlag.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString FlagIcon;//[Offset: 0x10, Size: 0x10]
	FString WebIcon;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_DayAndNight.SolarTableReaderBase.Object
	SolarTablesData_DayAndNight TryGetRowData(int Key, out bool HasKey);// 0x54d123bfa041
	bool HasRowKey(int Key);// 0x54d023bfa041
	bool HasColKey(FString Key);// 0x54cf23bfa041
	FString GetTableName();// 0x54ce23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x54cd23bfa041
	SolarTablesData_DayAndNight GetRowData(int Key);// 0x54cc23bfa041
	int GetRowCount();// 0x54cb23bfa041
	int GetDataNum();// 0x54ca23bfa041
	FString[] GetColKeys();// 0x54c923bfa041
	int GetColCount();// 0x54c823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_DayAndNight.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int TimeOfDays;//[Offset: 0x10, Size: 0x4]
	int ChangingSpeed;//[Offset: 0x14, Size: 0x4]
	float ChargingRate;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_DsVariableRange.SolarTableReaderBase.Object
	SolarTablesData_DsVariableRange TryGetRowData(int Key, out bool HasKey);// 0x54db23bfa041
	bool HasRowKey(int Key);// 0x54da23bfa041
	bool HasColKey(FString Key);// 0x54d923bfa041
	FString GetTableName();// 0x54d823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x54d723bfa041
	SolarTablesData_DsVariableRange GetRowData(int Key);// 0x54d623bfa041
	int GetRowCount();// 0x54d523bfa041
	int GetDataNum();// 0x54d423bfa041
	FString[] GetColKeys();// 0x54d323bfa041
	int GetColCount();// 0x54d223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_DsVariableRange.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString VariableName;//[Offset: 0x10, Size: 0x10]
	float ValueStart;//[Offset: 0x20, Size: 0x4]
	float ValueEnd;//[Offset: 0x24, Size: 0x4]
	int ValueType;//[Offset: 0x28, Size: 0x4]
	int Tolerance;//[Offset: 0x2c, Size: 0x4]
	int ProbeInterval;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_EShop.SolarTableReaderBase.Object
	SolarTablesData_EShop TryGetRowData(int Key, out bool HasKey);// 0x550323bfa041
	bool HasRowKey(int Key);// 0x550223bfa041
	bool HasColKey(FString Key);// 0x550123bfa041
	FString GetTableName();// 0x550023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x54ff23bfa041
	SolarTablesData_EShop GetRowData(int Key);// 0x54fe23bfa041
	int GetRowCount();// 0x54fd23bfa041
	int GetDataNum();// 0x54fc23bfa041
	FString[] GetColKeys();// 0x54fb23bfa041
	int GetColCount();// 0x54fa23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_EShop.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] PoolGroupID;//[Offset: 0x10, Size: 0x10]
	bool IfMapShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int[] PoolRefreshTime;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_EShopDemoModel.SolarTableReaderBase.Object
	SolarTablesData_EShopDemoModel TryGetRowData(int Key, out bool HasKey);// 0x550d23bfa041
	bool HasRowKey(int Key);// 0x550c23bfa041
	bool HasColKey(FString Key);// 0x550b23bfa041
	FString GetTableName();// 0x550a23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x550923bfa041
	SolarTablesData_EShopDemoModel GetRowData(int Key);// 0x550823bfa041
	int GetRowCount();// 0x550723bfa041
	int GetDataNum();// 0x550623bfa041
	FString[] GetColKeys();// 0x550523bfa041
	int GetColCount();// 0x550423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_EShopDemoModel.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ModelID;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_EShopGoodsPool.SolarTableReaderBase.Object
	SolarTablesData_EShopGoodsPool TryGetRowData(int Key, out bool HasKey);// 0x551723bfa041
	bool HasRowKey(int Key);// 0x551623bfa041
	bool HasColKey(FString Key);// 0x551523bfa041
	FString GetTableName();// 0x551423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x551323bfa041
	SolarTablesData_EShopGoodsPool GetRowData(int Key);// 0x551223bfa041
	int GetRowCount();// 0x551123bfa041
	int GetDataNum();// 0x551023bfa041
	FString[] GetColKeys();// 0x550f23bfa041
	int GetColCount();// 0x550e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_EShopGoodsPool.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] Equipments;//[Offset: 0x10, Size: 0x10]
	int[] Prize;//[Offset: 0x20, Size: 0x10]
	int[] Nums;//[Offset: 0x30, Size: 0x10]
	int[] Weight;//[Offset: 0x40, Size: 0x10]
	int NumbersToDisplay;//[Offset: 0x50, Size: 0x4]
	int ColdDown;//[Offset: 0x54, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_EShopGoodsPoolGroup.SolarTableReaderBase.Object
	SolarTablesData_EShopGoodsPoolGroup TryGetRowData(int Key, out bool HasKey);// 0x552123bfa041
	bool HasRowKey(int Key);// 0x552023bfa041
	bool HasColKey(FString Key);// 0x551f23bfa041
	FString GetTableName();// 0x551e23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x551d23bfa041
	SolarTablesData_EShopGoodsPoolGroup GetRowData(int Key);// 0x551c23bfa041
	int GetRowCount();// 0x551b23bfa041
	int GetDataNum();// 0x551a23bfa041
	FString[] GetColKeys();// 0x551923bfa041
	int GetColCount();// 0x551823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_EShopGoodsPoolGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] PoolIDs;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_EShopSpawn.SolarTableReaderBase.Object
	SolarTablesData_EShopSpawn TryGetRowData(int Key, out bool HasKey);// 0x552b23bfa041
	bool HasRowKey(int Key);// 0x552a23bfa041
	bool HasColKey(FString Key);// 0x552923bfa041
	FString GetTableName();// 0x552823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x552723bfa041
	SolarTablesData_EShopSpawn GetRowData(int Key);// 0x552623bfa041
	int GetRowCount();// 0x552523bfa041
	int GetDataNum();// 0x552423bfa041
	FString[] GetColKeys();// 0x552323bfa041
	int GetColCount();// 0x552223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_EShopSpawn.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] Eshops;//[Offset: 0x10, Size: 0x10]
	int[] Weight;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_BattleRoyaleMode.SolarTableReaderBase.Object
	SolarTablesData_BattleRoyaleMode TryGetRowData(int Key, out bool HasKey);// 0x542723bfa041
	bool HasRowKey(int Key);// 0x542623bfa041
	bool HasColKey(FString Key);// 0x542523bfa041
	FString GetTableName();// 0x542423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x542323bfa041
	SolarTablesData_BattleRoyaleMode GetRowData(int Key);// 0x542223bfa041
	int GetRowCount();// 0x542123bfa041
	int GetDataNum();// 0x542023bfa041
	FString[] GetColKeys();// 0x541f23bfa041
	int GetColCount();// 0x541e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_BattleRoyaleMode.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] GlobalOutcomes;//[Offset: 0x10, Size: 0x10]
	int BattleMap;//[Offset: 0x20, Size: 0x4]
	int ReadyMap;//[Offset: 0x24, Size: 0x4]
	float ReadyStateTime;//[Offset: 0x28, Size: 0x4]
	int StartTime;//[Offset: 0x2c, Size: 0x4]
	float EenTime;//[Offset: 0x30, Size: 0x4]
	int CharacterEXPCoefficient;//[Offset: 0x34, Size: 0x4]
	FString[] EventSets;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_GameModeGroup.SolarTableReaderBase.Object
	SolarTablesData_GameModeGroup TryGetRowData(int Key, out bool HasKey);// 0x554923bfa041
	bool HasRowKey(int Key);// 0x554823bfa041
	bool HasColKey(FString Key);// 0x554723bfa041
	FString GetTableName();// 0x554623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x554523bfa041
	SolarTablesData_GameModeGroup GetRowData(int Key);// 0x554423bfa041
	int GetRowCount();// 0x554323bfa041
	int GetDataNum();// 0x554223bfa041
	FString[] GetColKeys();// 0x554123bfa041
	int GetColCount();// 0x554023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_GameModeGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText ModeGroupName;//[Offset: 0x10, Size: 0x4]
	int SortId;//[Offset: 0x14, Size: 0x4]
	int[] ModeID;//[Offset: 0x18, Size: 0x10]
	FString Icon_s;//[Offset: 0x28, Size: 0x10]
	FString Icon_mini;//[Offset: 0x38, Size: 0x10]
	FString Icon_recruit;//[Offset: 0x48, Size: 0x10]
	int DefaultSelect;//[Offset: 0x58, Size: 0x4]
	bool IfMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	FString GuideVideoUrl;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_GameModeMain.SolarTableReaderBase.Object
	SolarTablesData_GameModeMain TryGetRowData(int Key, out bool HasKey);// 0x555323bfa041
	bool HasRowKey(int Key);// 0x555223bfa041
	bool HasColKey(FString Key);// 0x555123bfa041
	FString GetTableName();// 0x555023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x554f23bfa041
	SolarTablesData_GameModeMain GetRowData(int Key);// 0x554e23bfa041
	int GetRowCount();// 0x554d23bfa041
	int GetDataNum();// 0x554c23bfa041
	FString[] GetColKeys();// 0x554b23bfa041
	int GetColCount();// 0x554a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_GameModeMain.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int groupid;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText Desc;//[Offset: 0x18, Size: 0x4]
	SolarTablesLocalText DetailDes;//[Offset: 0x1c, Size: 0x4]
	FString Icon;//[Offset: 0x20, Size: 0x10]
	FString Icon_s;//[Offset: 0x30, Size: 0x10]
	FString Icon_recruit;//[Offset: 0x40, Size: 0x10]
	FString Icon_recruit_issue;//[Offset: 0x50, Size: 0x10]
	FString Icon_mini;//[Offset: 0x60, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool IfRecruitShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	int ModeType;//[Offset: 0x74, Size: 0x4]
	int OutcomeSet;//[Offset: 0x78, Size: 0x4]
	int LifeTime;//[Offset: 0x7c, Size: 0x4]
	int[] AccessClient;//[Offset: 0x80, Size: 0x10]
	int[] AccessServer;//[Offset: 0x90, Size: 0x10]
	int[] AccessAccount;//[Offset: 0xa0, Size: 0x10]
	int[] AccessActivity;//[Offset: 0xb0, Size: 0x10]
	int UnlockLvl;//[Offset: 0xc0, Size: 0x4]
	int[] MatchRule;//[Offset: 0xc8, Size: 0x10]
	int DefaultMatchRule;//[Offset: 0xd8, Size: 0x4]
	int Backpack;//[Offset: 0xdc, Size: 0x4]
	FString UIConfig;//[Offset: 0xe0, Size: 0x10]
	FString ModeConfig;//[Offset: 0xf0, Size: 0x10]
	FString Parameters;//[Offset: 0x100, Size: 0x10]
	int DefaultSelect;//[Offset: 0x110, Size: 0x4]
	bool AIMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 0x1]
	FString SettlementBPPath;//[Offset: 0x118, Size: 0x10]
	bool ReEnterBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool IsAutoFillTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	int[] CustomRoomNum;//[Offset: 0x130, Size: 0x10]
	bool GetSupplyBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	int ChunkID;//[Offset: 0x144, Size: 0x4]
	int[] ChunkIdList;//[Offset: 0x148, Size: 0x10]
	enum ClassModeType;//[Offset: 0x158, Size: 0x1]
	bool WarmUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	bool EnableCustomRoomReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_OutcomeSet.SolarTableReaderBase.Object
	SolarTablesData_OutcomeSet TryGetRowData(int Key, out bool HasKey);// 0x56c523bfa041
	bool HasRowKey(int Key);// 0x56c423bfa041
	bool HasColKey(FString Key);// 0x56c323bfa041
	FString GetTableName();// 0x56c223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x56c123bfa041
	SolarTablesData_OutcomeSet GetRowData(int Key);// 0x56c023bfa041
	int GetRowCount();// 0x56bf23bfa041
	int GetDataNum();// 0x56be23bfa041
	FString[] GetColKeys();// 0x56bd23bfa041
	int GetColCount();// 0x56bc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_OutcomeSet.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] OutcomeRef;//[Offset: 0x10, Size: 0x10]
	int[] GlobalOutcome;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_GameTimeLine.SolarTableReaderBase.Object
	SolarTablesData_GameTimeLine TryGetRowData(int Key, out bool HasKey);// 0x555d23bfa041
	bool HasRowKey(int Key);// 0x555c23bfa041
	bool HasColKey(FString Key);// 0x555b23bfa041
	FString GetTableName();// 0x555a23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x555923bfa041
	SolarTablesData_GameTimeLine GetRowData(int Key);// 0x555823bfa041
	int GetRowCount();// 0x555723bfa041
	int GetDataNum();// 0x555623bfa041
	FString[] GetColKeys();// 0x555523bfa041
	int GetColCount();// 0x555423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_GameTimeLine.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] CheckEvent;//[Offset: 0x10, Size: 0x10]
	int GameMode;//[Offset: 0x20, Size: 0x4]
	int StartTime;//[Offset: 0x24, Size: 0x4]
	int DaylightChange;//[Offset: 0x28, Size: 0x4]
	int AirDrops;//[Offset: 0x2c, Size: 0x4]
	bool IfPoisonShrink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int[] RedZone;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_GlobalOutcome.SolarTableReaderBase.Object
	SolarTablesData_GlobalOutcome TryGetRowData(int Key, out bool HasKey);// 0x557123bfa041
	bool HasRowKey(int Key);// 0x557023bfa041
	bool HasColKey(FString Key);// 0x556f23bfa041
	FString GetTableName();// 0x556e23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x556d23bfa041
	SolarTablesData_GlobalOutcome GetRowData(int Key);// 0x556c23bfa041
	int GetRowCount();// 0x556b23bfa041
	int GetDataNum();// 0x556a23bfa041
	FString[] GetColKeys();// 0x556923bfa041
	int GetColCount();// 0x556823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_GlobalOutcome.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ItemIDs;//[Offset: 0x10, Size: 0x10]
	int[] ItemNums;//[Offset: 0x20, Size: 0x10]
	int SingleMaxTimes;//[Offset: 0x30, Size: 0x4]
	int TotalMaxTimes;//[Offset: 0x34, Size: 0x4]
	int TotalMinTimes;//[Offset: 0x38, Size: 0x4]
	int[] AffectedOutcomes;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_GlobalSensitivity.SolarTableReaderBase.Object
	SolarTablesData_GlobalSensitivity TryGetRowData(int Key, out bool HasKey);// 0x557b23bfa041
	bool HasRowKey(int Key);// 0x557a23bfa041
	bool HasColKey(FString Key);// 0x557923bfa041
	FString GetTableName();// 0x557823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x557723bfa041
	SolarTablesData_GlobalSensitivity GetRowData(int Key);// 0x557623bfa041
	int GetRowCount();// 0x557523bfa041
	int GetDataNum();// 0x557423bfa041
	FString[] GetColKeys();// 0x557323bfa041
	int GetColCount();// 0x557223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_GlobalSensitivity.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float[] HoldWeaponSensitivity;//[Offset: 0x10, Size: 0x10]
	float[] FireWeaponSensitivity;//[Offset: 0x20, Size: 0x10]
	float ShoulderShootSenSItivity;//[Offset: 0x30, Size: 0x4]
	float ShoulderShootFireSenSItivity;//[Offset: 0x34, Size: 0x4]
	float[] SkillSensitivity;//[Offset: 0x38, Size: 0x10]
	float[] SightSensitivity;//[Offset: 0x48, Size: 0x10]
	float[] VehicleDriverSensitivity;//[Offset: 0x58, Size: 0x10]
	float[] VehicleFireSensitivity;//[Offset: 0x68, Size: 0x10]
	float[] SuperSkillSensitivity;//[Offset: 0x78, Size: 0x10]
	float[] TacticalSkillSensitivity;//[Offset: 0x88, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_HeroPowerFormula.SolarTableReaderBase.Object
	SolarTablesData_HeroPowerFormula TryGetRowData(int Key, out bool HasKey);// 0x558f23bfa041
	bool HasRowKey(int Key);// 0x558e23bfa041
	bool HasColKey(FString Key);// 0x558d23bfa041
	FString GetTableName();// 0x558c23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x558b23bfa041
	SolarTablesData_HeroPowerFormula GetRowData(int Key);// 0x558a23bfa041
	int GetRowCount();// 0x558923bfa041
	int GetDataNum();// 0x558823bfa041
	FString[] GetColKeys();// 0x558723bfa041
	int GetColCount();// 0x558623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_HeroPowerFormula.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MatchRuleID;//[Offset: 0x10, Size: 0x4]
	int Battlerank;//[Offset: 0x14, Size: 0x4]
	int RankScore;//[Offset: 0x18, Size: 0x4]
	float KillRealConfig;//[Offset: 0x1c, Size: 0x4]
	float KillAiConfig;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_InputAction.SolarTableReaderBase.Object
	SolarTablesData_InputAction TryGetRowData(FString Key, out bool HasKey);// 0x55a323bfa041
	bool HasRowKey(FString Key);// 0x55a223bfa041
	bool HasColKey(FString Key);// 0x55a123bfa041
	FString GetTableName();// 0x55a023bfa041
	int GetRowKeys(out FString[] OutKeys);// 0x559f23bfa041
	SolarTablesData_InputAction GetRowData(FString Key);// 0x559e23bfa041
	int GetRowCount();// 0x559d23bfa041
	int GetDataNum();// 0x559c23bfa041
	FString[] GetColKeys();// 0x559b23bfa041
	int GetColCount();// 0x559a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_InputAction.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	bool bFlagBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bFlagBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool bFlagChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	bool bFlagParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]
	bool bFlagSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bFlagTeamDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_InputMapping.SolarTableReaderBase.Object
	SolarTablesData_InputMapping TryGetRowData(FString Key, out bool HasKey);// 0x55ad23bfa041
	bool HasRowKey(FString Key);// 0x55ac23bfa041
	bool HasColKey(FString Key);// 0x55ab23bfa041
	FString GetTableName();// 0x55aa23bfa041
	int GetRowKeys(out FString[] OutKeys);// 0x55a923bfa041
	SolarTablesData_InputMapping GetRowData(FString Key);// 0x55a823bfa041
	int GetRowCount();// 0x55a723bfa041
	int GetDataNum();// 0x55a623bfa041
	FString[] GetColKeys();// 0x55a523bfa041
	int GetColCount();// 0x55a423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_InputMapping.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	FString ActionName;//[Offset: 0x20, Size: 0x10]
	enum ActionType;//[Offset: 0x30, Size: 0x1]
	float Scale;//[Offset: 0x34, Size: 0x4]
	enum TriggerType;//[Offset: 0x38, Size: 0x1]
	FString FirstDefaultKeys;//[Offset: 0x40, Size: 0x10]
	FString SecondDefaultKeys;//[Offset: 0x50, Size: 0x10]
	FString ThirdDefaultKeys;//[Offset: 0x60, Size: 0x10]
	enum CtrlType;//[Offset: 0x70, Size: 0x1]
	enum ContextType;//[Offset: 0x71, Size: 0x1]
	enum RelatedType;//[Offset: 0x72, Size: 0x1]
	SolarTablesLocalText ActionDisplayName;//[Offset: 0x74, Size: 0x4]
	SolarTablesLocalText ActionTipsDesc;//[Offset: 0x78, Size: 0x4]
	enum TabType;//[Offset: 0x7c, Size: 0x1]
	int GroupIndex;//[Offset: 0x80, Size: 0x4]
	SolarTablesLocalText GroupTitle;//[Offset: 0x84, Size: 0x4]
	enum GroupType;//[Offset: 0x88, Size: 0x1]
	int GroupPriority;//[Offset: 0x8c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Item.SolarTableReaderBase.Object
	SolarTablesData_Item TryGetRowData(int Key, out bool HasKey);// 0x55b723bfa041
	bool HasRowKey(int Key);// 0x55b623bfa041
	bool HasColKey(FString Key);// 0x55b523bfa041
	FString GetTableName();// 0x55b423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x55b323bfa041
	SolarTablesData_Item GetRowData(int Key);// 0x55b223bfa041
	int GetRowCount();// 0x55b123bfa041
	int GetDataNum();// 0x55b023bfa041
	FString[] GetColKeys();// 0x55af23bfa041
	int GetColCount();// 0x55ae23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Item.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_BackpackProperty.SolarTableReaderBase.Object
	SolarTablesData_BackpackProperty TryGetRowData(int Key, out bool HasKey);// 0x540923bfa041
	bool HasRowKey(int Key);// 0x540823bfa041
	bool HasColKey(FString Key);// 0x540723bfa041
	FString GetTableName();// 0x540623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x540523bfa041
	SolarTablesData_BackpackProperty GetRowData(int Key);// 0x540423bfa041
	int GetRowCount();// 0x540323bfa041
	int GetDataNum();// 0x540223bfa041
	FString[] GetColKeys();// 0x540123bfa041
	int GetColCount();// 0x540023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_BackpackProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	FString BackpackMeshPath;//[Offset: 0x50, Size: 0x10]
	FString PreviewBpPath;//[Offset: 0x60, Size: 0x10]
	int StartFrame;//[Offset: 0x70, Size: 0x4]
	int EndFrame;//[Offset: 0x74, Size: 0x4]
	float Length;//[Offset: 0x78, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_BackpackTrailProperty.SolarTableReaderBase.Object
	SolarTablesData_BackpackTrailProperty TryGetRowData(int Key, out bool HasKey);// 0x541323bfa041
	bool HasRowKey(int Key);// 0x541223bfa041
	bool HasColKey(FString Key);// 0x541123bfa041
	FString GetTableName();// 0x541023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x540f23bfa041
	SolarTablesData_BackpackTrailProperty GetRowData(int Key);// 0x540e23bfa041
	int GetRowCount();// 0x540d23bfa041
	int GetDataNum();// 0x540c23bfa041
	FString[] GetColKeys();// 0x540b23bfa041
	int GetColCount();// 0x540a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_BackpackTrailProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	FString PreviewTrailPath;//[Offset: 0x50, Size: 0x10]
	FString AssemblingId;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_CapsuleProperty.SolarTableReaderBase.Object
	SolarTablesData_CapsuleProperty TryGetRowData(int Key, out bool HasKey);// 0x546323bfa041
	bool HasRowKey(int Key);// 0x546223bfa041
	bool HasColKey(FString Key);// 0x546123bfa041
	FString GetTableName();// 0x546023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x545f23bfa041
	SolarTablesData_CapsuleProperty GetRowData(int Key);// 0x545e23bfa041
	int GetRowCount();// 0x545d23bfa041
	int GetDataNum();// 0x545c23bfa041
	FString[] GetColKeys();// 0x545b23bfa041
	int GetColCount();// 0x545a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_CapsuleProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	FString CapsuleBPPath;//[Offset: 0x50, Size: 0x10]
	FString PreviewBpPath;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Dance.SolarTableReaderBase.Object
	SolarTablesData_Dance TryGetRowData(int Key, out bool HasKey);// 0x54c723bfa041
	bool HasRowKey(int Key);// 0x54c623bfa041
	bool HasColKey(FString Key);// 0x54c523bfa041
	FString GetTableName();// 0x54c423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x54c323bfa041
	SolarTablesData_Dance GetRowData(int Key);// 0x54c223bfa041
	int GetRowCount();// 0x54c123bfa041
	int GetDataNum();// 0x54c023bfa041
	FString[] GetColKeys();// 0x54bf23bfa041
	int GetColCount();// 0x54be23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Dance.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int LoopTime;//[Offset: 0x50, Size: 0x4]
	FString BlueprintPath;//[Offset: 0x58, Size: 0x10]
	int ShopID;//[Offset: 0x68, Size: 0x4]
	bool IfDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	FString BeginTime;//[Offset: 0x70, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Emote.SolarTableReaderBase.Object
	SolarTablesData_Emote TryGetRowData(int Key, out bool HasKey);// 0x54e523bfa041
	bool HasRowKey(int Key);// 0x54e423bfa041
	bool HasColKey(FString Key);// 0x54e323bfa041
	FString GetTableName();// 0x54e223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x54e123bfa041
	SolarTablesData_Emote GetRowData(int Key);// 0x54e023bfa041
	int GetRowCount();// 0x54df23bfa041
	int GetDataNum();// 0x54de23bfa041
	FString[] GetColKeys();// 0x54dd23bfa041
	int GetColCount();// 0x54dc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Emote.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int EmoteType;//[Offset: 0x50, Size: 0x4]
	FString EmoteBlueprintPath;//[Offset: 0x58, Size: 0x10]
	FString EmoteResourcePath;//[Offset: 0x68, Size: 0x10]
	float EmoteDuration;//[Offset: 0x78, Size: 0x4]
	FString EmoteAppearSound;//[Offset: 0x80, Size: 0x10]
	FString EmoteSound;//[Offset: 0x90, Size: 0x10]
	int ShopID;//[Offset: 0xa0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_MaterialProperty.SolarTableReaderBase.Object
	SolarTablesData_MaterialProperty TryGetRowData(int Key, out bool HasKey);// 0x568923bfa041
	bool HasRowKey(int Key);// 0x568823bfa041
	bool HasColKey(FString Key);// 0x568723bfa041
	FString GetTableName();// 0x568623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x568523bfa041
	SolarTablesData_MaterialProperty GetRowData(int Key);// 0x568423bfa041
	int GetRowCount();// 0x568323bfa041
	int GetDataNum();// 0x568223bfa041
	FString[] GetColKeys();// 0x568123bfa041
	int GetColCount();// 0x568023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_MaterialProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int Prize;//[Offset: 0x50, Size: 0x4]
	bool IfCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	int Level;//[Offset: 0x58, Size: 0x4]
	SolarTablesLocalText CoverName;//[Offset: 0x5c, Size: 0x4]
	int Substitution;//[Offset: 0x60, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_VehicleSkinProperty.SolarTableReaderBase.Object
	SolarTablesData_VehicleSkinProperty TryGetRowData(int Key, out bool HasKey);// 0x577923bfa041
	bool HasRowKey(int Key);// 0x577823bfa041
	bool HasColKey(FString Key);// 0x577723bfa041
	FString GetTableName();// 0x577623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x577523bfa041
	SolarTablesData_VehicleSkinProperty GetRowData(int Key);// 0x577423bfa041
	int GetRowCount();// 0x577323bfa041
	int GetDataNum();// 0x577223bfa041
	FString[] GetColKeys();// 0x577123bfa041
	int GetColCount();// 0x577023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_VehicleSkinProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int VehicleSkinId;//[Offset: 0x50, Size: 0x4]
	int VehicleSkinAquiredThre;//[Offset: 0x54, Size: 0x4]
	int JumpPage;//[Offset: 0x58, Size: 0x4]
	FString KillBroadcast;//[Offset: 0x60, Size: 0x10]
	bool DisplayInVehiclery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WeaponSkinProperty.SolarTableReaderBase.Object
	SolarTablesData_WeaponSkinProperty TryGetRowData(int Key, out bool HasKey);// 0x582323bfa041
	bool HasRowKey(int Key);// 0x582223bfa041
	bool HasColKey(FString Key);// 0x582123bfa041
	FString GetTableName();// 0x582023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x581f23bfa041
	SolarTablesData_WeaponSkinProperty GetRowData(int Key);// 0x581e23bfa041
	int GetRowCount();// 0x581d23bfa041
	int GetDataNum();// 0x581c23bfa041
	FString[] GetColKeys();// 0x581b23bfa041
	int GetColCount();// 0x581a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WeaponSkinProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int WeaponSkinID;//[Offset: 0x50, Size: 0x4]
	FString WeaponIcon_M;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ItemCustomType.SolarTableReaderBase.Object
	SolarTablesData_ItemCustomType TryGetRowData(int Key, out bool HasKey);// 0x55cb23bfa041
	bool HasRowKey(int Key);// 0x55ca23bfa041
	bool HasColKey(FString Key);// 0x55c923bfa041
	FString GetTableName();// 0x55c823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x55c723bfa041
	SolarTablesData_ItemCustomType GetRowData(int Key);// 0x55c623bfa041
	int GetRowCount();// 0x55c523bfa041
	int GetDataNum();// 0x55c423bfa041
	FString[] GetColKeys();// 0x55c323bfa041
	int GetColCount();// 0x55c223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ItemCustomType.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ItemIDs;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ItemInBattle.SolarTableReaderBase.Object
	SolarTablesData_ItemInBattle TryGetRowData(int Key, out bool HasKey);// 0x55d523bfa041
	bool HasRowKey(int Key);// 0x55d423bfa041
	bool HasColKey(FString Key);// 0x55d323bfa041
	FString GetTableName();// 0x55d223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x55d123bfa041
	SolarTablesData_ItemInBattle GetRowData(int Key);// 0x55d023bfa041
	int GetRowCount();// 0x55cf23bfa041
	int GetDataNum();// 0x55ce23bfa041
	FString[] GetColKeys();// 0x55cd23bfa041
	int GetColCount();// 0x55cc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ItemInBattle.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ArmorProperty.SolarTableReaderBase.Object
	SolarTablesData_ArmorProperty TryGetRowData(int Key, out bool HasKey);// 0x53e123bfa041
	bool HasRowKey(int Key);// 0x53e023bfa041
	bool HasColKey(FString Key);// 0x53df23bfa041
	FString GetTableName();// 0x53de23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x53dd23bfa041
	SolarTablesData_ArmorProperty GetRowData(int Key);// 0x53dc23bfa041
	int GetRowCount();// 0x53db23bfa041
	int GetDataNum();// 0x53da23bfa041
	FString[] GetColKeys();// 0x53d923bfa041
	int GetColCount();// 0x53d823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ArmorProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxValue;//[Offset: 0x74, Size: 0x4]
	float RecoverySpeed;//[Offset: 0x78, Size: 0x4]
	float EnergyCost;//[Offset: 0x7c, Size: 0x4]
	float MaterialCost;//[Offset: 0x80, Size: 0x4]
	float MinMaterialCost;//[Offset: 0x84, Size: 0x4]
	int ArmorWorth;//[Offset: 0x88, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Chest.SolarTableReaderBase.Object
	SolarTablesData_Chest TryGetRowData(int Key, out bool HasKey);// 0x549523bfa041
	bool HasRowKey(int Key);// 0x549423bfa041
	bool HasColKey(FString Key);// 0x549323bfa041
	FString GetTableName();// 0x549223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x549123bfa041
	SolarTablesData_Chest GetRowData(int Key);// 0x549023bfa041
	int GetRowCount();// 0x548f23bfa041
	int GetDataNum();// 0x548e23bfa041
	FString[] GetColKeys();// 0x548d23bfa041
	int GetColCount();// 0x548c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Chest.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int openType;//[Offset: 0x74, Size: 0x4]
	int CostQuantity;//[Offset: 0x78, Size: 0x4]
	int CostType;//[Offset: 0x7c, Size: 0x4]
	int OpenTime;//[Offset: 0x80, Size: 0x4]
	int Drop;//[Offset: 0x84, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_EnergyProperty.SolarTableReaderBase.Object
	SolarTablesData_EnergyProperty TryGetRowData(int Key, out bool HasKey);// 0x54ef23bfa041
	bool HasRowKey(int Key);// 0x54ee23bfa041
	bool HasColKey(FString Key);// 0x54ed23bfa041
	FString GetTableName();// 0x54ec23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x54eb23bfa041
	SolarTablesData_EnergyProperty GetRowData(int Key);// 0x54ea23bfa041
	int GetRowCount();// 0x54e923bfa041
	int GetDataNum();// 0x54e823bfa041
	FString[] GetColKeys();// 0x54e723bfa041
	int GetColCount();// 0x54e623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_EnergyProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float AddedEnergyMax;//[Offset: 0x74, Size: 0x4]
	int EnergyModuleWorth;//[Offset: 0x78, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ExtraEnergyProperty.SolarTableReaderBase.Object
	SolarTablesData_ExtraEnergyProperty TryGetRowData(int Key, out bool HasKey);// 0x553523bfa041
	bool HasRowKey(int Key);// 0x553423bfa041
	bool HasColKey(FString Key);// 0x553323bfa041
	FString GetTableName();// 0x553223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x553123bfa041
	SolarTablesData_ExtraEnergyProperty GetRowData(int Key);// 0x553023bfa041
	int GetRowCount();// 0x552f23bfa041
	int GetDataNum();// 0x552e23bfa041
	FString[] GetColKeys();// 0x552d23bfa041
	int GetColCount();// 0x552c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ExtraEnergyProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int QualityColor;//[Offset: 0x74, Size: 0x4]
	float ExtraEnergyMax;//[Offset: 0x78, Size: 0x4]
	float ExtraEnergyCharge;//[Offset: 0x7c, Size: 0x4]
	float ChargeCD;//[Offset: 0x80, Size: 0x4]
	int ExtraEnergyWorth;//[Offset: 0x84, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0x88, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x8c, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0x90, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0x94, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0x98, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0x9c, Size: 0x4]
	FString Sketch;//[Offset: 0xa0, Size: 0x10]
	int SketchLevel;//[Offset: 0xb0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_GunProperty.SolarTableReaderBase.Object
	SolarTablesData_GunProperty TryGetRowData(int Key, out bool HasKey);// 0x558523bfa041
	bool HasRowKey(int Key);// 0x558423bfa041
	bool HasColKey(FString Key);// 0x558323bfa041
	FString GetTableName();// 0x558223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x558123bfa041
	SolarTablesData_GunProperty GetRowData(int Key);// 0x558023bfa041
	int GetRowCount();// 0x557f23bfa041
	int GetDataNum();// 0x557e23bfa041
	FString[] GetColKeys();// 0x557d23bfa041
	int GetColCount();// 0x557c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_GunProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int weaponid;//[Offset: 0x74, Size: 0x4]
	FString BigIcon;//[Offset: 0x78, Size: 0x10]
	int WeaponLv;//[Offset: 0x88, Size: 0x4]
	bool UseWeaponAccessory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	int WeaponAccessory1;//[Offset: 0x90, Size: 0x4]
	int WeaponAccessory2;//[Offset: 0x94, Size: 0x4]
	int WeaponAccessory3;//[Offset: 0x98, Size: 0x4]
	int WeaponAccessory4;//[Offset: 0x9c, Size: 0x4]
	int WeaponAccessory5;//[Offset: 0xa0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ItemBehavior.SolarTableReaderBase.Object
	SolarTablesData_ItemBehavior TryGetRowData(int Key, out bool HasKey);// 0x55c123bfa041
	bool HasRowKey(int Key);// 0x55c023bfa041
	bool HasColKey(FString Key);// 0x55bf23bfa041
	FString GetTableName();// 0x55be23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x55bd23bfa041
	SolarTablesData_ItemBehavior GetRowData(int Key);// 0x55bc23bfa041
	int GetRowCount();// 0x55bb23bfa041
	int GetDataNum();// 0x55ba23bfa041
	FString[] GetColKeys();// 0x55b923bfa041
	int GetColCount();// 0x55b823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ItemBehavior.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int BehaviorExpID;//[Offset: 0x74, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ItemWeaponParts.SolarTableReaderBase.Object
	SolarTablesData_ItemWeaponParts TryGetRowData(int Key, out bool HasKey);// 0x55f323bfa041
	bool HasRowKey(int Key);// 0x55f223bfa041
	bool HasColKey(FString Key);// 0x55f123bfa041
	FString GetTableName();// 0x55f023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x55ef23bfa041
	SolarTablesData_ItemWeaponParts GetRowData(int Key);// 0x55ee23bfa041
	int GetRowCount();// 0x55ed23bfa041
	int GetDataNum();// 0x55ec23bfa041
	FString[] GetColKeys();// 0x55eb23bfa041
	int GetColCount();// 0x55ea23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ItemWeaponParts.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int PartsType;//[Offset: 0x74, Size: 0x4]
	int Level;//[Offset: 0x78, Size: 0x4]
	FString PreviewIcon;//[Offset: 0x80, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_JetPackModuleProperty.SolarTableReaderBase.Object
	SolarTablesData_JetPackModuleProperty TryGetRowData(int Key, out bool HasKey);// 0x55fd23bfa041
	bool HasRowKey(int Key);// 0x55fc23bfa041
	bool HasColKey(FString Key);// 0x55fb23bfa041
	FString GetTableName();// 0x55fa23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x55f923bfa041
	SolarTablesData_JetPackModuleProperty GetRowData(int Key);// 0x55f823bfa041
	int GetRowCount();// 0x55f723bfa041
	int GetDataNum();// 0x55f623bfa041
	FString[] GetColKeys();// 0x55f523bfa041
	int GetColCount();// 0x55f423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_JetPackModuleProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int VerticalDashSpeedTimes;//[Offset: 0x74, Size: 0x4]
	int HorizontalDashSpeedTimes;//[Offset: 0x78, Size: 0x4]
	float VerticalDashSpeedScale;//[Offset: 0x7c, Size: 0x4]
	float HorizontalDashSpeedScale;//[Offset: 0x80, Size: 0x4]
	float VerticalDashCoolDownScale;//[Offset: 0x84, Size: 0x4]
	float HorizontalDashCoolDownScale;//[Offset: 0x88, Size: 0x4]
	float VerticalDashEnergyScale;//[Offset: 0x8c, Size: 0x4]
	float HorizontalDashEnergyScale;//[Offset: 0x90, Size: 0x4]
	float VerticalChargingScale;//[Offset: 0x94, Size: 0x4]
	float HorizontalChargingScale;//[Offset: 0x98, Size: 0x4]
	int JetPackModuleWorth;//[Offset: 0x9c, Size: 0x4]
	FString Sketch;//[Offset: 0xa0, Size: 0x10]
	int SketchLevel;//[Offset: 0xb0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ShieldProperty.SolarTableReaderBase.Object
	SolarTablesData_ShieldProperty TryGetRowData(int Key, out bool HasKey);// 0x572923bfa041
	bool HasRowKey(int Key);// 0x572823bfa041
	bool HasColKey(FString Key);// 0x572723bfa041
	FString GetTableName();// 0x572623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x572523bfa041
	SolarTablesData_ShieldProperty GetRowData(int Key);// 0x572423bfa041
	int GetRowCount();// 0x572323bfa041
	int GetDataNum();// 0x572223bfa041
	FString[] GetColKeys();// 0x572123bfa041
	int GetColCount();// 0x572023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ShieldProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxValue;//[Offset: 0x74, Size: 0x4]
	float RecoverySpeed;//[Offset: 0x78, Size: 0x4]
	float EnergyCost;//[Offset: 0x7c, Size: 0x4]
	int CoolDownTime;//[Offset: 0x80, Size: 0x4]
	float RecoveryDuration;//[Offset: 0x84, Size: 0x4]
	float RecoveryDurationB;//[Offset: 0x88, Size: 0x4]
	float RecoveryAmount;//[Offset: 0x8c, Size: 0x4]
	float EnergyConsumption;//[Offset: 0x90, Size: 0x4]
	int ShieldWorth;//[Offset: 0x94, Size: 0x4]
	FString Sketch;//[Offset: 0x98, Size: 0x10]
	int SketchLevel;//[Offset: 0xa8, Size: 0x4]
	int QualityColor;//[Offset: 0xac, Size: 0x4]
	int AutoRecharge;//[Offset: 0xb0, Size: 0x4]
	float LeaveCombatTime;//[Offset: 0xb4, Size: 0x4]
	float AutoRechargeInterval;//[Offset: 0xb8, Size: 0x4]
	float AutoRechargeValue;//[Offset: 0xbc, Size: 0x4]
	int NextUpgradeCost;//[Offset: 0xc0, Size: 0x4]
	int NextUpgradeItemID;//[Offset: 0xc4, Size: 0x4]
	int UpgradeItemCost;//[Offset: 0xc8, Size: 0x4]
	float UpgradeTimeCost;//[Offset: 0xcc, Size: 0x4]
	float ShieldRechargeDelayTime;//[Offset: 0xd0, Size: 0x4]
	float ShieldRecoveryTime;//[Offset: 0xd4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ItemQuality.SolarTableReaderBase.Object
	SolarTablesData_ItemQuality TryGetRowData(int Key, out bool HasKey);// 0x55df23bfa041
	bool HasRowKey(int Key);// 0x55de23bfa041
	bool HasColKey(FString Key);// 0x55dd23bfa041
	FString GetTableName();// 0x55dc23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x55db23bfa041
	SolarTablesData_ItemQuality GetRowData(int Key);// 0x55da23bfa041
	int GetRowCount();// 0x55d923bfa041
	int GetDataNum();// 0x55d823bfa041
	FString[] GetColKeys();// 0x55d723bfa041
	int GetColCount();// 0x55d623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ItemQuality.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float[] Color;//[Offset: 0x10, Size: 0x10]
	float[] HUDColor;//[Offset: 0x20, Size: 0x10]
	float[] OutsideColor;//[Offset: 0x30, Size: 0x10]
	float[] InsideColor;//[Offset: 0x40, Size: 0x10]
	float[] HighQualityColor;//[Offset: 0x50, Size: 0x10]
	float[] LowQualityColor;//[Offset: 0x60, Size: 0x10]
	float[] HUDBGColor;//[Offset: 0x70, Size: 0x10]
	float[] HUDDecorateColor;//[Offset: 0x80, Size: 0x10]
	FString Qualitypic;//[Offset: 0x90, Size: 0x10]
	FString QualityColor;//[Offset: 0xa0, Size: 0x10]
	FString Qualitystr;//[Offset: 0xb0, Size: 0x10]
	FString QualityBG;//[Offset: 0xc0, Size: 0x10]
	FString QualityBG2;//[Offset: 0xd0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ItemSound.SolarTableReaderBase.Object
	SolarTablesData_ItemSound TryGetRowData(int Key, out bool HasKey);// 0x55e923bfa041
	bool HasRowKey(int Key);// 0x55e823bfa041
	bool HasColKey(FString Key);// 0x55e723bfa041
	FString GetTableName();// 0x55e623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x55e523bfa041
	SolarTablesData_ItemSound GetRowData(int Key);// 0x55e423bfa041
	int GetRowCount();// 0x55e323bfa041
	int GetDataNum();// 0x55e223bfa041
	FString[] GetColKeys();// 0x55e123bfa041
	int GetColCount();// 0x55e023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ItemSound.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString PickupSound;//[Offset: 0x10, Size: 0x10]
	FString EquippedSound;//[Offset: 0x20, Size: 0x10]
	FString PassiveSound;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_LobbyAutoDownload.SolarTableReaderBase.Object
	SolarTablesData_LobbyAutoDownload TryGetRowData(int Key, out bool HasKey);// 0x561123bfa041
	bool HasRowKey(int Key);// 0x561023bfa041
	bool HasColKey(FString Key);// 0x560f23bfa041
	FString GetTableName();// 0x560e23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x560d23bfa041
	SolarTablesData_LobbyAutoDownload GetRowData(int Key);// 0x560c23bfa041
	int GetRowCount();// 0x560b23bfa041
	int GetDataNum();// 0x560a23bfa041
	FString[] GetColKeys();// 0x560923bfa041
	int GetColCount();// 0x560823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_LobbyAutoDownload.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ChunkID;//[Offset: 0x10, Size: 0x4]
	int ChunkName;//[Offset: 0x14, Size: 0x4]
	bool IncludeMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool IncludeOptional;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_LanguageSwitcher.SolarTableReaderBase.Object
	SolarTablesData_LanguageSwitcher TryGetRowData(FString Key, out bool HasKey);// 0x560723bfa041
	bool HasRowKey(FString Key);// 0x560623bfa041
	bool HasColKey(FString Key);// 0x560523bfa041
	FString GetTableName();// 0x560423bfa041
	int GetRowKeys(out FString[] OutKeys);// 0x560323bfa041
	SolarTablesData_LanguageSwitcher GetRowData(FString Key);// 0x560223bfa041
	int GetRowCount();// 0x560123bfa041
	int GetDataNum();// 0x560023bfa041
	FString[] GetColKeys();// 0x55ff23bfa041
	int GetColCount();// 0x55fe23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_LanguageSwitcher.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	FString ButtonText;//[Offset: 0x20, Size: 0x10]
	bool IfOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int LanguageIndex;//[Offset: 0x34, Size: 0x4]
	FString MarqueeDirection;//[Offset: 0x38, Size: 0x10]
	FString TextAbbr;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Localization.SolarTableReaderBase.Object
	SolarTablesData_Localization TryGetRowData(int Key, out bool HasKey);// 0x561b23bfa041
	bool HasRowKey(int Key);// 0x561a23bfa041
	bool HasColKey(FString Key);// 0x561923bfa041
	FString GetTableName();// 0x561823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x561723bfa041
	SolarTablesData_Localization GetRowData(int Key);// 0x561623bfa041
	int GetRowCount();// 0x561523bfa041
	int GetDataNum();// 0x561423bfa041
	FString[] GetColKeys();// 0x561323bfa041
	int GetColCount();// 0x561223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Localization.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Localization_BattleUI.SolarTableReaderBase.Object
	SolarTablesData_Localization_BattleUI TryGetRowData(int Key, out bool HasKey);// 0x562523bfa041
	bool HasRowKey(int Key);// 0x562423bfa041
	bool HasColKey(FString Key);// 0x562323bfa041
	FString GetTableName();// 0x562223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x562123bfa041
	SolarTablesData_Localization_BattleUI GetRowData(int Key);// 0x562023bfa041
	int GetRowCount();// 0x561f23bfa041
	int GetDataNum();// 0x561e23bfa041
	FString[] GetColKeys();// 0x561d23bfa041
	int GetColCount();// 0x561c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Localization_BattleUI.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Localization_EventSystem.SolarTableReaderBase.Object
	SolarTablesData_Localization_EventSystem TryGetRowData(int Key, out bool HasKey);// 0x562f23bfa041
	bool HasRowKey(int Key);// 0x562e23bfa041
	bool HasColKey(FString Key);// 0x562d23bfa041
	FString GetTableName();// 0x562c23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x562b23bfa041
	SolarTablesData_Localization_EventSystem GetRowData(int Key);// 0x562a23bfa041
	int GetRowCount();// 0x562923bfa041
	int GetDataNum();// 0x562823bfa041
	FString[] GetColKeys();// 0x562723bfa041
	int GetColCount();// 0x562623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Localization_EventSystem.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Localization_General.SolarTableReaderBase.Object
	SolarTablesData_Localization_General TryGetRowData(int Key, out bool HasKey);// 0x563923bfa041
	bool HasRowKey(int Key);// 0x563823bfa041
	bool HasColKey(FString Key);// 0x563723bfa041
	FString GetTableName();// 0x563623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x563523bfa041
	SolarTablesData_Localization_General GetRowData(int Key);// 0x563423bfa041
	int GetRowCount();// 0x563323bfa041
	int GetDataNum();// 0x563223bfa041
	FString[] GetColKeys();// 0x563123bfa041
	int GetColCount();// 0x563023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Localization_General.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Localization_Heroes.SolarTableReaderBase.Object
	SolarTablesData_Localization_Heroes TryGetRowData(int Key, out bool HasKey);// 0x564323bfa041
	bool HasRowKey(int Key);// 0x564223bfa041
	bool HasColKey(FString Key);// 0x564123bfa041
	FString GetTableName();// 0x564023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x563f23bfa041
	SolarTablesData_Localization_Heroes GetRowData(int Key);// 0x563e23bfa041
	int GetRowCount();// 0x563d23bfa041
	int GetDataNum();// 0x563c23bfa041
	FString[] GetColKeys();// 0x563b23bfa041
	int GetColCount();// 0x563a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Localization_Heroes.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Localization_Item.SolarTableReaderBase.Object
	SolarTablesData_Localization_Item TryGetRowData(int Key, out bool HasKey);// 0x564d23bfa041
	bool HasRowKey(int Key);// 0x564c23bfa041
	bool HasColKey(FString Key);// 0x564b23bfa041
	FString GetTableName();// 0x564a23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x564923bfa041
	SolarTablesData_Localization_Item GetRowData(int Key);// 0x564823bfa041
	int GetRowCount();// 0x564723bfa041
	int GetDataNum();// 0x564623bfa041
	FString[] GetColKeys();// 0x564523bfa041
	int GetColCount();// 0x564423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Localization_Item.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Localization_Tournament.SolarTableReaderBase.Object
	SolarTablesData_Localization_Tournament TryGetRowData(int Key, out bool HasKey);// 0x565723bfa041
	bool HasRowKey(int Key);// 0x565623bfa041
	bool HasColKey(FString Key);// 0x565523bfa041
	FString GetTableName();// 0x565423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x565323bfa041
	SolarTablesData_Localization_Tournament GetRowData(int Key);// 0x565223bfa041
	int GetRowCount();// 0x565123bfa041
	int GetDataNum();// 0x565023bfa041
	FString[] GetColKeys();// 0x564f23bfa041
	int GetColCount();// 0x564e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Localization_Tournament.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Localization_Uncategorized.SolarTableReaderBase.Object
	SolarTablesData_Localization_Uncategorized TryGetRowData(int Key, out bool HasKey);// 0x566123bfa041
	bool HasRowKey(int Key);// 0x566023bfa041
	bool HasColKey(FString Key);// 0x565f23bfa041
	FString GetTableName();// 0x565e23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x565d23bfa041
	SolarTablesData_Localization_Uncategorized GetRowData(int Key);// 0x565c23bfa041
	int GetRowCount();// 0x565b23bfa041
	int GetDataNum();// 0x565a23bfa041
	FString[] GetColKeys();// 0x565923bfa041
	int GetColCount();// 0x565823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Localization_Uncategorized.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_GameMap.SolarTableReaderBase.Object
	SolarTablesData_GameMap TryGetRowData(int Key, out bool HasKey);// 0x553f23bfa041
	bool HasRowKey(int Key);// 0x553e23bfa041
	bool HasColKey(FString Key);// 0x553d23bfa041
	FString GetTableName();// 0x553c23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x553b23bfa041
	SolarTablesData_GameMap GetRowData(int Key);// 0x553a23bfa041
	int GetRowCount();// 0x553923bfa041
	int GetDataNum();// 0x553823bfa041
	FString[] GetColKeys();// 0x553723bfa041
	int GetColCount();// 0x553623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_GameMap.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString MapName;//[Offset: 0x18, Size: 0x10]
	FString ResPath;//[Offset: 0x28, Size: 0x10]
	int MapImage;//[Offset: 0x38, Size: 0x4]
	float[] MapImageSize;//[Offset: 0x40, Size: 0x10]
	float[] MapTopLeftCoord;//[Offset: 0x50, Size: 0x10]
	float[] MapRightBottomCoord;//[Offset: 0x60, Size: 0x10]
	int[] LocationIcon;//[Offset: 0x70, Size: 0x10]
	FString[] ItemSubLevels;//[Offset: 0x80, Size: 0x10]
	float HorizonLineZ;//[Offset: 0x90, Size: 0x4]
	float TopZ;//[Offset: 0x94, Size: 0x4]
	float BottomZ;//[Offset: 0x98, Size: 0x4]
	float AverageZ;//[Offset: 0x9c, Size: 0x4]
	float InitFogZ;//[Offset: 0xa0, Size: 0x4]
	float TargetFogZ;//[Offset: 0xa4, Size: 0x4]
	float MapFOV;//[Offset: 0xa8, Size: 0x4]
	int Speed1;//[Offset: 0xac, Size: 0x4]
	int Speed2;//[Offset: 0xb0, Size: 0x4]
	float MapFOV1;//[Offset: 0xb4, Size: 0x4]
	float MapFOV2;//[Offset: 0xb8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_MapMarkIcon.SolarTableReaderBase.Object
	SolarTablesData_MapMarkIcon TryGetRowData(int Key, out bool HasKey);// 0x567523bfa041
	bool HasRowKey(int Key);// 0x567423bfa041
	bool HasColKey(FString Key);// 0x567323bfa041
	FString GetTableName();// 0x567223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x567123bfa041
	SolarTablesData_MapMarkIcon GetRowData(int Key);// 0x567023bfa041
	int GetRowCount();// 0x566f23bfa041
	int GetDataNum();// 0x566e23bfa041
	FString[] GetColKeys();// 0x566d23bfa041
	int GetColCount();// 0x566c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_MapMarkIcon.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString AtlasPath;//[Offset: 0x10, Size: 0x10]
	float[] IconSize;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_MatchRule.SolarTableReaderBase.Object
	SolarTablesData_MatchRule TryGetRowData(int Key, out bool HasKey);// 0x567f23bfa041
	bool HasRowKey(int Key);// 0x567e23bfa041
	bool HasColKey(FString Key);// 0x567d23bfa041
	FString GetTableName();// 0x567c23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x567b23bfa041
	SolarTablesData_MatchRule GetRowData(int Key);// 0x567a23bfa041
	int GetRowCount();// 0x567923bfa041
	int GetDataNum();// 0x567823bfa041
	FString[] GetColKeys();// 0x567723bfa041
	int GetColCount();// 0x567623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_MatchRule.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MatchType;//[Offset: 0x10, Size: 0x4]
	int MinPlayer;//[Offset: 0x14, Size: 0x4]
	int MaxPlayer;//[Offset: 0x18, Size: 0x4]
	int NumMode;//[Offset: 0x1c, Size: 0x4]
	int StopMatchTime;//[Offset: 0x20, Size: 0x4]
	int[] PlayerStructure;//[Offset: 0x28, Size: 0x10]
	int MinGroup;//[Offset: 0x38, Size: 0x4]
	int EloSettleType;//[Offset: 0x3c, Size: 0x4]
	int RankSettleType;//[Offset: 0x40, Size: 0x4]
	int groupid;//[Offset: 0x44, Size: 0x4]
	int RankGroupNameID;//[Offset: 0x48, Size: 0x4]
	bool MatchSameBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int KeepMatchTimeID;//[Offset: 0x50, Size: 0x4]
	int OBNum;//[Offset: 0x54, Size: 0x4]
	bool MaxPlayerStopMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int StatisticsType;//[Offset: 0x5c, Size: 0x4]
	int HistoryModeType;//[Offset: 0x60, Size: 0x4]
	bool HeroCombatAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_RankMatch.SolarTableReaderBase.Object
	SolarTablesData_RankMatch TryGetRowData(int Key, out bool HasKey);// 0x570b23bfa041
	bool HasRowKey(int Key);// 0x570a23bfa041
	bool HasColKey(FString Key);// 0x570923bfa041
	FString GetTableName();// 0x570823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x570723bfa041
	SolarTablesData_RankMatch GetRowData(int Key);// 0x570623bfa041
	int GetRowCount();// 0x570523bfa041
	int GetDataNum();// 0x570423bfa041
	FString[] GetColKeys();// 0x570323bfa041
	int GetColCount();// 0x570223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_RankMatch.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MatchType;//[Offset: 0x10, Size: 0x4]
	int NumOfAI;//[Offset: 0x14, Size: 0x4]
	int AILevel;//[Offset: 0x18, Size: 0x4]
	FString AILevelConfig;//[Offset: 0x20, Size: 0x10]
	int AITeamPresetsID;//[Offset: 0x30, Size: 0x4]
	bool EnableTeamManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int[] MLApplication;//[Offset: 0x38, Size: 0x10]
	int MLApply;//[Offset: 0x48, Size: 0x4]
	int MaxWait;//[Offset: 0x4c, Size: 0x4]
	int StopMatchTime;//[Offset: 0x50, Size: 0x4]
	bool HasAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool AIAccompany;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	int AIAccompanyTimeline;//[Offset: 0x58, Size: 0x4]
	int MinPlayer;//[Offset: 0x5c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_NameCardBackground.SolarTableReaderBase.Object
	SolarTablesData_NameCardBackground TryGetRowData(int Key, out bool HasKey);// 0x569323bfa041
	bool HasRowKey(int Key);// 0x569223bfa041
	bool HasColKey(FString Key);// 0x569123bfa041
	FString GetTableName();// 0x569023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x568f23bfa041
	SolarTablesData_NameCardBackground GetRowData(int Key);// 0x568e23bfa041
	int GetRowCount();// 0x568d23bfa041
	int GetDataNum();// 0x568c23bfa041
	FString[] GetColKeys();// 0x568b23bfa041
	int GetColCount();// 0x568a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_NameCardBackground.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	int ShopID;//[Offset: 0x18, Size: 0x4]
	int Exclusive;//[Offset: 0x1c, Size: 0x4]
	int IsAIEquiped;//[Offset: 0x20, Size: 0x4]
	FString BackgroundPath;//[Offset: 0x28, Size: 0x10]
	FString BackgroundTexturePath;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_NameCardPose.SolarTableReaderBase.Object
	SolarTablesData_NameCardPose TryGetRowData(int Key, out bool HasKey);// 0x569d23bfa041
	bool HasRowKey(int Key);// 0x569c23bfa041
	bool HasColKey(FString Key);// 0x569b23bfa041
	FString GetTableName();// 0x569a23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x569923bfa041
	SolarTablesData_NameCardPose GetRowData(int Key);// 0x569823bfa041
	int GetRowCount();// 0x569723bfa041
	int GetDataNum();// 0x569623bfa041
	FString[] GetColKeys();// 0x569523bfa041
	int GetColCount();// 0x569423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_NameCardPose.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	int ShopID;//[Offset: 0x18, Size: 0x4]
	int Exclusive;//[Offset: 0x1c, Size: 0x4]
	int IsAIEquiped;//[Offset: 0x20, Size: 0x4]
	FString PosePath;//[Offset: 0x28, Size: 0x10]
	FString PosePath_M;//[Offset: 0x38, Size: 0x10]
	FString PosePath_F;//[Offset: 0x48, Size: 0x10]
	FString PosePath_MCP;//[Offset: 0x58, Size: 0x10]
	FString PosePath_FFM;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_ObGift.SolarTableReaderBase.Object
	SolarTablesData_ObGift TryGetRowData(int Key, out bool HasKey);// 0x56a723bfa041
	bool HasRowKey(int Key);// 0x56a623bfa041
	bool HasColKey(FString Key);// 0x56a523bfa041
	FString GetTableName();// 0x56a423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x56a323bfa041
	SolarTablesData_ObGift GetRowData(int Key);// 0x56a223bfa041
	int GetRowCount();// 0x56a123bfa041
	int GetDataNum();// 0x56a023bfa041
	FString[] GetColKeys();// 0x569f23bfa041
	int GetColCount();// 0x569e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_ObGift.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int gift_type;//[Offset: 0x10, Size: 0x4]
	FString item_name;//[Offset: 0x18, Size: 0x10]
	FString item_back_res;//[Offset: 0x28, Size: 0x10]
	FString item_text_res;//[Offset: 0x38, Size: 0x10]
	int gift_hot_num;//[Offset: 0x48, Size: 0x4]
	int currency_type;//[Offset: 0x4c, Size: 0x4]
	int item_price;//[Offset: 0x50, Size: 0x4]
	float item_back;//[Offset: 0x54, Size: 0x4]
	int item_show_time;//[Offset: 0x58, Size: 0x4]
	int item_id;//[Offset: 0x5c, Size: 0x4]
	int small_time;//[Offset: 0x60, Size: 0x4]
	int interact_num;//[Offset: 0x64, Size: 0x4]
	int CD;//[Offset: 0x68, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Outcome.SolarTableReaderBase.Object
	SolarTablesData_Outcome TryGetRowData(int Key, out bool HasKey);// 0x56b123bfa041
	bool HasRowKey(int Key);// 0x56b023bfa041
	bool HasColKey(FString Key);// 0x56af23bfa041
	FString GetTableName();// 0x56ae23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x56ad23bfa041
	SolarTablesData_Outcome GetRowData(int Key);// 0x56ac23bfa041
	int GetRowCount();// 0x56ab23bfa041
	int GetDataNum();// 0x56aa23bfa041
	FString[] GetColKeys();// 0x56a923bfa041
	int GetColCount();// 0x56a823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Outcome.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int OutcomeType;//[Offset: 0x10, Size: 0x4]
	int MaxTimes;//[Offset: 0x14, Size: 0x4]
	int MinTimes;//[Offset: 0x18, Size: 0x4]
	int[] Contents;//[Offset: 0x20, Size: 0x10]
	int[] LimitId;//[Offset: 0x30, Size: 0x10]
	int[] LimitIdMax;//[Offset: 0x40, Size: 0x10]
	int[] LimitIdMin;//[Offset: 0x50, Size: 0x10]
	FString Refresh;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_OutcomeContent.SolarTableReaderBase.Object
	SolarTablesData_OutcomeContent TryGetRowData(int Key, out bool HasKey);// 0x56bb23bfa041
	bool HasRowKey(int Key);// 0x56ba23bfa041
	bool HasColKey(FString Key);// 0x56b923bfa041
	FString GetTableName();// 0x56b823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x56b723bfa041
	SolarTablesData_OutcomeContent GetRowData(int Key);// 0x56b623bfa041
	int GetRowCount();// 0x56b523bfa041
	int GetDataNum();// 0x56b423bfa041
	FString[] GetColKeys();// 0x56b323bfa041
	int GetColCount();// 0x56b223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_OutcomeContent.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	int Weight;//[Offset: 0x14, Size: 0x4]
	int[] RandomNum;//[Offset: 0x18, Size: 0x10]
	int MaxTimes;//[Offset: 0x28, Size: 0x4]
	int MinTimes;//[Offset: 0x2c, Size: 0x4]
	int RelatedContentID;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_PickupPriorityItem.SolarTableReaderBase.Object
	SolarTablesData_PickupPriorityItem TryGetRowData(int Key, out bool HasKey);// 0x56cf23bfa041
	bool HasRowKey(int Key);// 0x56ce23bfa041
	bool HasColKey(FString Key);// 0x56cd23bfa041
	FString GetTableName();// 0x56cc23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x56cb23bfa041
	SolarTablesData_PickupPriorityItem GetRowData(int Key);// 0x56ca23bfa041
	int GetRowCount();// 0x56c923bfa041
	int GetDataNum();// 0x56c823bfa041
	FString[] GetColKeys();// 0x56c723bfa041
	int GetColCount();// 0x56c623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_PickupPriorityItem.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int PriorityValue;//[Offset: 0x10, Size: 0x4]
	int MutiAutoPickup;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_PickupPriorityWeaponPart.SolarTableReaderBase.Object
	SolarTablesData_PickupPriorityWeaponPart TryGetRowData(int Key, out bool HasKey);// 0x56d923bfa041
	bool HasRowKey(int Key);// 0x56d823bfa041
	bool HasColKey(FString Key);// 0x56d723bfa041
	FString GetTableName();// 0x56d623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x56d523bfa041
	SolarTablesData_PickupPriorityWeaponPart GetRowData(int Key);// 0x56d423bfa041
	int GetRowCount();// 0x56d323bfa041
	int GetDataNum();// 0x56d223bfa041
	FString[] GetColKeys();// 0x56d123bfa041
	int GetColCount();// 0x56d023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_PickupPriorityWeaponPart.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int PriorityValue;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_CharacterVoiceover.SolarTableReaderBase.Object
	SolarTablesData_CharacterVoiceover TryGetRowData(int Key, out bool HasKey);// 0x548b23bfa041
	bool HasRowKey(int Key);// 0x548a23bfa041
	bool HasColKey(FString Key);// 0x548923bfa041
	FString GetTableName();// 0x548823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x548723bfa041
	SolarTablesData_CharacterVoiceover GetRowData(int Key);// 0x548623bfa041
	int GetRowCount();// 0x548523bfa041
	int GetDataNum();// 0x548423bfa041
	FString[] GetColKeys();// 0x548323bfa041
	int GetColCount();// 0x548223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_CharacterVoiceover.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int QuickVoiceID;//[Offset: 0x10, Size: 0x4]
	int CharacterId;//[Offset: 0x14, Size: 0x4]
	int SkinId;//[Offset: 0x18, Size: 0x4]
	FString AudioEventName;//[Offset: 0x20, Size: 0x10]
	int LocalizationID;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_QuickChat.SolarTableReaderBase.Object
	SolarTablesData_QuickChat TryGetRowData(int Key, out bool HasKey);// 0x56ed23bfa041
	bool HasRowKey(int Key);// 0x56ec23bfa041
	bool HasColKey(FString Key);// 0x56eb23bfa041
	FString GetTableName();// 0x56ea23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x56e923bfa041
	SolarTablesData_QuickChat GetRowData(int Key);// 0x56e823bfa041
	int GetRowCount();// 0x56e723bfa041
	int GetDataNum();// 0x56e623bfa041
	FString[] GetColKeys();// 0x56e523bfa041
	int GetColCount();// 0x56e423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_QuickChat.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int LocalizationID;//[Offset: 0x10, Size: 0x4]
	FString zh_CN;//[Offset: 0x18, Size: 0x10]
	FString en;//[Offset: 0x28, Size: 0x10]
	FString pt;//[Offset: 0x38, Size: 0x10]
	FString ind;//[Offset: 0x48, Size: 0x10]
	FString fr;//[Offset: 0x58, Size: 0x10]
	FString de;//[Offset: 0x68, Size: 0x10]
	FString ru;//[Offset: 0x78, Size: 0x10]
	FString ar;//[Offset: 0x88, Size: 0x10]
	FString es;//[Offset: 0x98, Size: 0x10]
	FString hi;//[Offset: 0xa8, Size: 0x10]
	FString it;//[Offset: 0xb8, Size: 0x10]
	FString ja;//[Offset: 0xc8, Size: 0x10]
	FString ko;//[Offset: 0xd8, Size: 0x10]
	FString ms;//[Offset: 0xe8, Size: 0x10]
	FString pl;//[Offset: 0xf8, Size: 0x10]
	FString th;//[Offset: 0x108, Size: 0x10]
	FString tl;//[Offset: 0x118, Size: 0x10]
	FString tr;//[Offset: 0x128, Size: 0x10]
	FString vi;//[Offset: 0x138, Size: 0x10]
	FString zh_TW;//[Offset: 0x148, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_QuickVoice.SolarTableReaderBase.Object
	SolarTablesData_QuickVoice TryGetRowData(int Key, out bool HasKey);// 0x56f723bfa041
	bool HasRowKey(int Key);// 0x56f623bfa041
	bool HasColKey(FString Key);// 0x56f523bfa041
	FString GetTableName();// 0x56f423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x56f323bfa041
	SolarTablesData_QuickVoice GetRowData(int Key);// 0x56f223bfa041
	int GetRowCount();// 0x56f123bfa041
	int GetDataNum();// 0x56f023bfa041
	FString[] GetColKeys();// 0x56ef23bfa041
	int GetColCount();// 0x56ee23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_QuickVoice.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString Icon;//[Offset: 0x10, Size: 0x10]
	int LocalizationID;//[Offset: 0x20, Size: 0x4]
	FString AudioEventName;//[Offset: 0x28, Size: 0x10]
	FString AudioEventNameFemale;//[Offset: 0x38, Size: 0x10]
	int IsMarkIcon;//[Offset: 0x48, Size: 0x4]
	int PassiveTriggeredCD;//[Offset: 0x4c, Size: 0x4]
	int PassiveTriggeredProb;//[Offset: 0x50, Size: 0x4]
	FString ReplyMessageID;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_VODownload.SolarTableReaderBase.Object
	SolarTablesData_VODownload TryGetRowData(int Key, out bool HasKey);// 0x57a123bfa041
	bool HasRowKey(int Key);// 0x57a023bfa041
	bool HasColKey(FString Key);// 0x579f23bfa041
	FString GetTableName();// 0x579e23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x579d23bfa041
	SolarTablesData_VODownload GetRowData(int Key);// 0x579c23bfa041
	int GetRowCount();// 0x579b23bfa041
	int GetDataNum();// 0x579a23bfa041
	FString[] GetColKeys();// 0x579923bfa041
	int GetColCount();// 0x579823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_VODownload.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString LobbyChunkDir;//[Offset: 0x10, Size: 0x10]
	int ChunkID;//[Offset: 0x20, Size: 0x4]
	FString ButtonText;//[Offset: 0x28, Size: 0x10]
	int LanguageIndex;//[Offset: 0x38, Size: 0x4]
	int IsDefaultChunk;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_RankLevel.SolarTableReaderBase.Object
	SolarTablesData_RankLevel TryGetRowData(int Key, out bool HasKey);// 0x570123bfa041
	bool HasRowKey(int Key);// 0x570023bfa041
	bool HasColKey(FString Key);// 0x56ff23bfa041
	FString GetTableName();// 0x56fe23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x56fd23bfa041
	SolarTablesData_RankLevel GetRowData(int Key);// 0x56fc23bfa041
	int GetRowCount();// 0x56fb23bfa041
	int GetDataNum();// 0x56fa23bfa041
	FString[] GetColKeys();// 0x56f923bfa041
	int GetColCount();// 0x56f823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_RankLevel.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int RankID;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText RankName;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x18, Size: 0x4]
	int LevelID;//[Offset: 0x1c, Size: 0x4]
	int RankStart;//[Offset: 0x20, Size: 0x4]
	int RankEnd;//[Offset: 0x24, Size: 0x4]
	int RankProtect;//[Offset: 0x28, Size: 0x4]
	int FrustrationValue;//[Offset: 0x2c, Size: 0x4]
	int RankReduce;//[Offset: 0x30, Size: 0x4]
	FString Icon;//[Offset: 0x38, Size: 0x10]
	FString Icon_s;//[Offset: 0x48, Size: 0x10]
	FString IconWord;//[Offset: 0x58, Size: 0x10]
	FString IconWord_s;//[Offset: 0x68, Size: 0x10]
	int RandomLowerLimit;//[Offset: 0x78, Size: 0x4]
	int RandomUpLimit;//[Offset: 0x7c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_AutoDirector.SolarTableReaderBase.Object
	SolarTablesData_AutoDirector TryGetRowData(int Key, out bool HasKey);// 0x53f523bfa041
	bool HasRowKey(int Key);// 0x53f423bfa041
	bool HasColKey(FString Key);// 0x53f323bfa041
	FString GetTableName();// 0x53f223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x53f123bfa041
	SolarTablesData_AutoDirector GetRowData(int Key);// 0x53f023bfa041
	int GetRowCount();// 0x53ef23bfa041
	int GetDataNum();// 0x53ee23bfa041
	FString[] GetColKeys();// 0x53ed23bfa041
	int GetColCount();// 0x53ec23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_AutoDirector.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int SpectateAreaRadius;//[Offset: 0x10, Size: 0x4]
	int MaxValidDist;//[Offset: 0x14, Size: 0x4]
	float MinFocusTime;//[Offset: 0x18, Size: 0x4]
	float MaxFocusTime;//[Offset: 0x1c, Size: 0x4]
	float PreFreeCameraTime;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_AutoDirectorActivityScore.SolarTableReaderBase.Object
	SolarTablesData_AutoDirectorActivityScore TryGetRowData(int Key, out bool HasKey);// 0x53ff23bfa041
	bool HasRowKey(int Key);// 0x53fe23bfa041
	bool HasColKey(FString Key);// 0x53fd23bfa041
	FString GetTableName();// 0x53fc23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x53fb23bfa041
	SolarTablesData_AutoDirectorActivityScore GetRowData(int Key);// 0x53fa23bfa041
	int GetRowCount();// 0x53f923bfa041
	int GetDataNum();// 0x53f823bfa041
	FString[] GetColKeys();// 0x53f723bfa041
	int GetColCount();// 0x53f623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_AutoDirectorActivityScore.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float UIResource;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_CircularCameras.SolarTableReaderBase.Object
	SolarTablesData_CircularCameras TryGetRowData(int Key, out bool HasKey);// 0x54b323bfa041
	bool HasRowKey(int Key);// 0x54b223bfa041
	bool HasColKey(FString Key);// 0x54b123bfa041
	FString GetTableName();// 0x54b023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x54af23bfa041
	SolarTablesData_CircularCameras GetRowData(int Key);// 0x54ae23bfa041
	int GetRowCount();// 0x54ad23bfa041
	int GetDataNum();// 0x54ac23bfa041
	FString[] GetColKeys();// 0x54ab23bfa041
	int GetColCount();// 0x54aa23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_CircularCameras.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MiniDistance;//[Offset: 0x10, Size: 0x4]
	float BorderRatio;//[Offset: 0x14, Size: 0x4]
	int FOV;//[Offset: 0x18, Size: 0x4]
	int Pitch;//[Offset: 0x1c, Size: 0x4]
	int InitAngleWithMainDir;//[Offset: 0x20, Size: 0x4]
	float BlendAlpha;//[Offset: 0x24, Size: 0x4]
	float AngularSpeed;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_HotSpot.SolarTableReaderBase.Object
	SolarTablesData_HotSpot TryGetRowData(int Key, out bool HasKey);// 0x559923bfa041
	bool HasRowKey(int Key);// 0x559823bfa041
	bool HasColKey(FString Key);// 0x559723bfa041
	FString GetTableName();// 0x559623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x559523bfa041
	SolarTablesData_HotSpot GetRowData(int Key);// 0x559423bfa041
	int GetRowCount();// 0x559323bfa041
	int GetDataNum();// 0x559223bfa041
	FString[] GetColKeys();// 0x559123bfa041
	int GetColCount();// 0x559023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_HotSpot.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString UIResource;//[Offset: 0x10, Size: 0x10]
	float JumpTime;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_LookAtCameras.SolarTableReaderBase.Object
	SolarTablesData_LookAtCameras TryGetRowData(int Key, out bool HasKey);// 0x566b23bfa041
	bool HasRowKey(int Key);// 0x566a23bfa041
	bool HasColKey(FString Key);// 0x566923bfa041
	FString GetTableName();// 0x566823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x566723bfa041
	SolarTablesData_LookAtCameras GetRowData(int Key);// 0x566623bfa041
	int GetRowCount();// 0x566523bfa041
	int GetDataNum();// 0x566423bfa041
	FString[] GetColKeys();// 0x566323bfa041
	int GetColCount();// 0x566223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_LookAtCameras.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MiniDistance;//[Offset: 0x10, Size: 0x4]
	float BorderRatio;//[Offset: 0x14, Size: 0x4]
	int FOV;//[Offset: 0x18, Size: 0x4]
	int Pitch;//[Offset: 0x1c, Size: 0x4]
	int InitAngleWithMainDir;//[Offset: 0x20, Size: 0x4]
	float BlendAlpha;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Rescue.SolarTableReaderBase.Object
	SolarTablesData_Rescue TryGetRowData(int Key, out bool HasKey);// 0x571523bfa041
	bool HasRowKey(int Key);// 0x571423bfa041
	bool HasColKey(FString Key);// 0x571323bfa041
	FString GetTableName();// 0x571223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x571123bfa041
	SolarTablesData_Rescue GetRowData(int Key);// 0x571023bfa041
	int GetRowCount();// 0x570f23bfa041
	int GetDataNum();// 0x570e23bfa041
	FString[] GetColKeys();// 0x570d23bfa041
	int GetColCount();// 0x570c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Rescue.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float RescueMaxDistance;//[Offset: 0x10, Size: 0x4]
	float FallenHp;//[Offset: 0x14, Size: 0x4]
	float RescueRecoveryHp;//[Offset: 0x18, Size: 0x4]
	int RescueTime;//[Offset: 0x1c, Size: 0x4]
	float[] FallenLossHp;//[Offset: 0x20, Size: 0x10]
	float[] FallenMoveLossHp;//[Offset: 0x30, Size: 0x10]
	float FallenMoveSpeed;//[Offset: 0x40, Size: 0x4]
	float RescueMoveSpeed;//[Offset: 0x44, Size: 0x4]
	float InvincibleTime;//[Offset: 0x48, Size: 0x4]
	float MaxRescueAngle;//[Offset: 0x4c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Skin.SolarTableReaderBase.Object
	SolarTablesData_Skin TryGetRowData(int Key, out bool HasKey);// 0x573323bfa041
	bool HasRowKey(int Key);// 0x573223bfa041
	bool HasColKey(FString Key);// 0x573123bfa041
	FString GetTableName();// 0x573023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x572f23bfa041
	SolarTablesData_Skin GetRowData(int Key);// 0x572e23bfa041
	int GetRowCount();// 0x572d23bfa041
	int GetDataNum();// 0x572c23bfa041
	FString[] GetColKeys();// 0x572b23bfa041
	int GetColCount();// 0x572a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Skin.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int CharaId;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FString BeginTime;//[Offset: 0x20, Size: 0x10]
	int ShopPropertyid;//[Offset: 0x30, Size: 0x4]
	int ItemID;//[Offset: 0x34, Size: 0x4]
	FString MVPDataAssetPath;//[Offset: 0x38, Size: 0x10]
	FString MVPSequencePath;//[Offset: 0x48, Size: 0x10]
	int SceneId;//[Offset: 0x58, Size: 0x4]
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	FString CharacterSkinResource;//[Offset: 0x60, Size: 0x10]
	FString CharacterLobbySkinResource;//[Offset: 0x70, Size: 0x10]
	FString LobbyChunkDir;//[Offset: 0x80, Size: 0x10]
	int ChunkID;//[Offset: 0x90, Size: 0x4]
	FString CharacterLowSkinResource;//[Offset: 0x98, Size: 0x10]
	int[] CharacterPrologue;//[Offset: 0xa8, Size: 0x10]
	FString CharacterProtrait;//[Offset: 0xb8, Size: 0x10]
	int SkinSort;//[Offset: 0xc8, Size: 0x4]
	int MVPSettlementStartFrame;//[Offset: 0xcc, Size: 0x4]
	int MVPSettlementEndFrame;//[Offset: 0xd0, Size: 0x4]
	int MVPAnchorPoint;//[Offset: 0xd4, Size: 0x4]
	FString IdleShowSequencePath;//[Offset: 0xd8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Achievement.SolarTableReaderBase.Object
	SolarTablesData_Achievement TryGetRowData(int Key, out bool HasKey);// 0x53cd23bfa041
	bool HasRowKey(int Key);// 0x53cc23bfa041
	bool HasColKey(FString Key);// 0x53cb23bfa041
	FString GetTableName();// 0x53ca23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x53c923bfa041
	SolarTablesData_Achievement GetRowData(int Key);// 0x53c823bfa041
	int GetRowCount();// 0x53c723bfa041
	int GetDataNum();// 0x53c623bfa041
	FString[] GetColKeys();// 0x53c523bfa041
	int GetColCount();// 0x53c423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Achievement.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Order;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText AchieveName;//[Offset: 0x14, Size: 0x4]
	int AchieveTab;//[Offset: 0x18, Size: 0x4]
	int AchieveType;//[Offset: 0x1c, Size: 0x4]
	int AchieveScore;//[Offset: 0x20, Size: 0x4]
	int[] AwardList;//[Offset: 0x28, Size: 0x10]
	FString AchieveIcon;//[Offset: 0x38, Size: 0x10]
	FString AchieveIconS;//[Offset: 0x48, Size: 0x10]
	int AchieveTask;//[Offset: 0x58, Size: 0x4]
	int[] AchieveTV;//[Offset: 0x60, Size: 0x10]
	int AchieveTT;//[Offset: 0x70, Size: 0x4]
	int ReportType;//[Offset: 0x74, Size: 0x4]
	SolarTablesLocalText AchieveTC;//[Offset: 0x78, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_TaskProgress.SolarTableReaderBase.Object
	SolarTablesData_TaskProgress TryGetRowData(int Key, out bool HasKey);// 0x573d23bfa041
	bool HasRowKey(int Key);// 0x573c23bfa041
	bool HasColKey(FString Key);// 0x573b23bfa041
	FString GetTableName();// 0x573a23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x573923bfa041
	SolarTablesData_TaskProgress GetRowData(int Key);// 0x573823bfa041
	int GetRowCount();// 0x573723bfa041
	int GetDataNum();// 0x573623bfa041
	FString[] GetColKeys();// 0x573523bfa041
	int GetColCount();// 0x573423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_TaskProgress.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int isRefresh;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_TaskSystem.SolarTableReaderBase.Object
	SolarTablesData_TaskSystem TryGetRowData(int Key, out bool HasKey);// 0x574723bfa041
	bool HasRowKey(int Key);// 0x574623bfa041
	bool HasColKey(FString Key);// 0x574523bfa041
	FString GetTableName();// 0x574423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x574323bfa041
	SolarTablesData_TaskSystem GetRowData(int Key);// 0x574223bfa041
	int GetRowCount();// 0x574123bfa041
	int GetDataNum();// 0x574023bfa041
	FString[] GetColKeys();// 0x573f23bfa041
	int GetColCount();// 0x573e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_TaskSystem.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int taskDesc;//[Offset: 0x10, Size: 0x4]
	int Task;//[Offset: 0x14, Size: 0x4]
	int TaskType;//[Offset: 0x18, Size: 0x4]
	FString cond1_sheet;//[Offset: 0x20, Size: 0x10]
	int cond1;//[Offset: 0x30, Size: 0x4]
	FString cond2_sheet;//[Offset: 0x38, Size: 0x10]
	int cond2;//[Offset: 0x48, Size: 0x4]
	FString cond3_sheet;//[Offset: 0x50, Size: 0x10]
	int cond3;//[Offset: 0x60, Size: 0x4]
	int Target;//[Offset: 0x64, Size: 0x4]
	int[] Item;//[Offset: 0x68, Size: 0x10]
	int MinLevel;//[Offset: 0x78, Size: 0x4]
	int[] link;//[Offset: 0x80, Size: 0x10]
	int Weight;//[Offset: 0x90, Size: 0x4]
	int sort;//[Offset: 0x94, Size: 0x4]
	bool Progress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool isCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	int circleTimes;//[Offset: 0x9c, Size: 0x4]
	int resetType;//[Offset: 0xa0, Size: 0x4]
	int[] taskTips;//[Offset: 0xa8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_PlayerOperationListLayout.SolarTableReaderBase.Object
	SolarTablesData_PlayerOperationListLayout TryGetRowData(int Key, out bool HasKey);// 0x56e323bfa041
	bool HasRowKey(int Key);// 0x56e223bfa041
	bool HasColKey(FString Key);// 0x56e123bfa041
	FString GetTableName();// 0x56e023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x56df23bfa041
	SolarTablesData_PlayerOperationListLayout GetRowData(int Key);// 0x56de23bfa041
	int GetRowCount();// 0x56dd23bfa041
	int GetDataNum();// 0x56dc23bfa041
	FString[] GetColKeys();// 0x56db23bfa041
	int GetColCount();// 0x56da23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_PlayerOperationListLayout.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString UIName;//[Offset: 0x10, Size: 0x10]
	int Normal;//[Offset: 0x20, Size: 0x4]
	int Driver;//[Offset: 0x24, Size: 0x4]
	int Passgner;//[Offset: 0x28, Size: 0x4]
	int EquipVehicleWeapon;//[Offset: 0x2c, Size: 0x4]
	int Cruising;//[Offset: 0x30, Size: 0x4]
	int Parachuting;//[Offset: 0x34, Size: 0x4]
	int Swimming;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Variables.SolarTableReaderBase.Object
	SolarTablesData_Variables TryGetRowData(FString Key, out bool HasKey);// 0x575b23bfa041
	bool HasRowKey(FString Key);// 0x575a23bfa041
	bool HasColKey(FString Key);// 0x575923bfa041
	FString GetTableName();// 0x575823bfa041
	int GetRowKeys(out FString[] OutKeys);// 0x575723bfa041
	SolarTablesData_Variables GetRowData(FString Key);// 0x575623bfa041
	int GetRowCount();// 0x575523bfa041
	int GetDataNum();// 0x575423bfa041
	FString[] GetColKeys();// 0x575323bfa041
	int GetColCount();// 0x575223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Variables.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	FString Value;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Vehicle.SolarTableReaderBase.Object
	SolarTablesData_Vehicle TryGetRowData(int Key, out bool HasKey);// 0x576523bfa041
	bool HasRowKey(int Key);// 0x576423bfa041
	bool HasColKey(FString Key);// 0x576323bfa041
	FString GetTableName();// 0x576223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x576123bfa041
	SolarTablesData_Vehicle GetRowData(int Key);// 0x576023bfa041
	int GetRowCount();// 0x575f23bfa041
	int GetDataNum();// 0x575e23bfa041
	FString[] GetColKeys();// 0x575d23bfa041
	int GetColCount();// 0x575c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Vehicle.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString VehicleBP;//[Offset: 0x18, Size: 0x10]
	int groupid;//[Offset: 0x28, Size: 0x4]
	int VehicleTypeID;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_VehicleSkin.SolarTableReaderBase.Object
	SolarTablesData_VehicleSkin TryGetRowData(int Key, out bool HasKey);// 0x576f23bfa041
	bool HasRowKey(int Key);// 0x576e23bfa041
	bool HasColKey(FString Key);// 0x576d23bfa041
	FString GetTableName();// 0x576c23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x576b23bfa041
	SolarTablesData_VehicleSkin GetRowData(int Key);// 0x576a23bfa041
	int GetRowCount();// 0x576923bfa041
	int GetDataNum();// 0x576823bfa041
	FString[] GetColKeys();// 0x576723bfa041
	int GetColCount();// 0x576623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_VehicleSkin.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int VehicleTypeID;//[Offset: 0x10, Size: 0x4]
	int ItemID;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText SkinName;//[Offset: 0x18, Size: 0x4]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	FString BeginTime;//[Offset: 0x20, Size: 0x10]
	int[] JumpLink;//[Offset: 0x30, Size: 0x10]
	FString VehicleSkinBPPath;//[Offset: 0x40, Size: 0x10]
	FString VehiclePreviewBP;//[Offset: 0x50, Size: 0x10]
	FString VehicleIcon;//[Offset: 0x60, Size: 0x10]
	FString VehicleSound;//[Offset: 0x70, Size: 0x10]
	int AIRandomWeight;//[Offset: 0x80, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_VehicleType.SolarTableReaderBase.Object
	SolarTablesData_VehicleType TryGetRowData(int Key, out bool HasKey);// 0x579723bfa041
	bool HasRowKey(int Key);// 0x579623bfa041
	bool HasColKey(FString Key);// 0x579523bfa041
	FString GetTableName();// 0x579423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x579323bfa041
	SolarTablesData_VehicleType GetRowData(int Key);// 0x579223bfa041
	int GetRowCount();// 0x579123bfa041
	int GetDataNum();// 0x579023bfa041
	FString[] GetColKeys();// 0x578f23bfa041
	int GetColCount();// 0x578e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_VehicleType.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int DefaultId;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	FString VehicleIcon;//[Offset: 0x18, Size: 0x10]
	FString AudioEventName;//[Offset: 0x28, Size: 0x10]
	int VehicleClass;//[Offset: 0x38, Size: 0x4]
	float LobbyDurability;//[Offset: 0x3c, Size: 0x4]
	float LobbySpeed;//[Offset: 0x40, Size: 0x4]
	float LobbyFirepower;//[Offset: 0x44, Size: 0x4]
	float LobbyControl;//[Offset: 0x48, Size: 0x4]
	int SeatNum;//[Offset: 0x4c, Size: 0x4]
	int[] Seat1WeaponID;//[Offset: 0x50, Size: 0x10]
	int[] Seat2WeaponID;//[Offset: 0x60, Size: 0x10]
	int[] Seat3WeaponID;//[Offset: 0x70, Size: 0x10]
	int[] Seat4WeaponID;//[Offset: 0x80, Size: 0x10]
	int[] Seat1SkillID;//[Offset: 0x90, Size: 0x10]
	int[] Seat2SkillID;//[Offset: 0xa0, Size: 0x10]
	int[] Seat3SkillID;//[Offset: 0xb0, Size: 0x10]
	int[] Seat4SkillID;//[Offset: 0xc0, Size: 0x10]
	FString VehicleLink;//[Offset: 0xd0, Size: 0x10]
	FString SilhouetteIcon;//[Offset: 0xe0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_VehicleSpawn.SolarTableReaderBase.Object
	SolarTablesData_VehicleSpawn TryGetRowData(int Key, out bool HasKey);// 0x578323bfa041
	bool HasRowKey(int Key);// 0x578223bfa041
	bool HasColKey(FString Key);// 0x578123bfa041
	FString GetTableName();// 0x578023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x577f23bfa041
	SolarTablesData_VehicleSpawn GetRowData(int Key);// 0x577e23bfa041
	int GetRowCount();// 0x577d23bfa041
	int GetDataNum();// 0x577c23bfa041
	FString[] GetColKeys();// 0x577b23bfa041
	int GetColCount();// 0x577a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_VehicleSpawn.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] VehicleSet;//[Offset: 0x10, Size: 0x10]
	int[] WeightSet;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_VehicleSpawnGroup.SolarTableReaderBase.Object
	SolarTablesData_VehicleSpawnGroup TryGetRowData(int Key, out bool HasKey);// 0x578d23bfa041
	bool HasRowKey(int Key);// 0x578c23bfa041
	bool HasColKey(FString Key);// 0x578b23bfa041
	FString GetTableName();// 0x578a23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x578923bfa041
	SolarTablesData_VehicleSpawnGroup GetRowData(int Key);// 0x578823bfa041
	int GetRowCount();// 0x578723bfa041
	int GetDataNum();// 0x578623bfa041
	FString[] GetColKeys();// 0x578523bfa041
	int GetColCount();// 0x578423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_VehicleSpawnGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] VehicleIDs;//[Offset: 0x10, Size: 0x10]
	int[] VehicleCounts;//[Offset: 0x20, Size: 0x10]
	int[] VehicleSum;//[Offset: 0x30, Size: 0x10]
	FString VehicleWeightSet;//[Offset: 0x40, Size: 0x10]
	int[] AlternateId;//[Offset: 0x50, Size: 0x10]
	FString AlternateType;//[Offset: 0x60, Size: 0x10]
	FString AlternateTime;//[Offset: 0x70, Size: 0x10]
	FString AlternateDate;//[Offset: 0x80, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WarmGame.SolarTableReaderBase.Object
	SolarTablesData_WarmGame TryGetRowData(int Key, out bool HasKey);// 0x57ab23bfa041
	bool HasRowKey(int Key);// 0x57aa23bfa041
	bool HasColKey(FString Key);// 0x57a923bfa041
	FString GetTableName();// 0x57a823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x57a723bfa041
	SolarTablesData_WarmGame GetRowData(int Key);// 0x57a623bfa041
	int GetRowCount();// 0x57a523bfa041
	int GetDataNum();// 0x57a423bfa041
	FString[] GetColKeys();// 0x57a323bfa041
	int GetColCount();// 0x57a223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WarmGame.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WarmType;//[Offset: 0x10, Size: 0x4]
	int MatchType;//[Offset: 0x14, Size: 0x4]
	int EloStart;//[Offset: 0x18, Size: 0x4]
	int EloEnd;//[Offset: 0x1c, Size: 0x4]
	int NumStart;//[Offset: 0x20, Size: 0x4]
	int NumEnd;//[Offset: 0x24, Size: 0x4]
	int KillStart;//[Offset: 0x28, Size: 0x4]
	int KillEnd;//[Offset: 0x2c, Size: 0x4]
	FString WarmSubType;//[Offset: 0x30, Size: 0x10]
	int UniqueId;//[Offset: 0x40, Size: 0x4]
	FString Abid;//[Offset: 0x48, Size: 0x10]
	FString WarmGameFillCheckBox;//[Offset: 0x58, Size: 0x10]
	FString WarmGameFillTeammate;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WarmGameMode.SolarTableReaderBase.Object
	SolarTablesData_WarmGameMode TryGetRowData(int Key, out bool HasKey);// 0x57b523bfa041
	bool HasRowKey(int Key);// 0x57b423bfa041
	bool HasColKey(FString Key);// 0x57b323bfa041
	FString GetTableName();// 0x57b223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x57b123bfa041
	SolarTablesData_WarmGameMode GetRowData(int Key);// 0x57b023bfa041
	int GetRowCount();// 0x57af23bfa041
	int GetDataNum();// 0x57ae23bfa041
	FString[] GetColKeys();// 0x57ad23bfa041
	int GetColCount();// 0x57ac23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WeaponDamage.SolarTableReaderBase.Object
	SolarTablesData_WeaponDamage TryGetRowData(int Key, out bool HasKey);// 0x57dd23bfa041
	bool HasRowKey(int Key);// 0x57dc23bfa041
	bool HasColKey(FString Key);// 0x57db23bfa041
	FString GetTableName();// 0x57da23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x57d923bfa041
	SolarTablesData_WeaponDamage GetRowData(int Key);// 0x57d823bfa041
	int GetRowCount();// 0x57d723bfa041
	int GetDataNum();// 0x57d623bfa041
	FString[] GetColKeys();// 0x57d523bfa041
	int GetColCount();// 0x57d423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WeaponDamage.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float NpcDamageFactor;//[Offset: 0x10, Size: 0x4]
	float BotDamageFactor;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_Weapon.SolarTableReaderBase.Object
	SolarTablesData_Weapon TryGetRowData(int Key, out bool HasKey);// 0x57bf23bfa041
	bool HasRowKey(int Key);// 0x57be23bfa041
	bool HasColKey(FString Key);// 0x57bd23bfa041
	FString GetTableName();// 0x57bc23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x57bb23bfa041
	SolarTablesData_Weapon GetRowData(int Key);// 0x57ba23bfa041
	int GetRowCount();// 0x57b923bfa041
	int GetDataNum();// 0x57b823bfa041
	FString[] GetColKeys();// 0x57b723bfa041
	int GetColCount();// 0x57b623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_Weapon.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	enum WeaponType;//[Offset: 0x14, Size: 0x1]
	int WeaponBrand;//[Offset: 0x18, Size: 0x4]
	bool SupportSecondaryAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int[] AccessoryID;//[Offset: 0x20, Size: 0x10]
	FString WeaponIcon;//[Offset: 0x30, Size: 0x10]
	bool Single;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool Burst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool Automatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool OneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	float HitHead;//[Offset: 0x44, Size: 0x4]
	int SecModeLimitTypeID;//[Offset: 0x48, Size: 0x4]
	int BurstMaxCount;//[Offset: 0x4c, Size: 0x4]
	FString WeaponDamage;//[Offset: 0x50, Size: 0x10]
	float MaxSpread;//[Offset: 0x60, Size: 0x4]
	float MinSpread;//[Offset: 0x64, Size: 0x4]
	float HipFireBaseSpread;//[Offset: 0x68, Size: 0x4]
	float VhADSBaseSpread;//[Offset: 0x6c, Size: 0x4]
	float ADSBaseSpread;//[Offset: 0x70, Size: 0x4]
	float SpreadStatuSpeed;//[Offset: 0x74, Size: 0x4]
	float SpreadStatuIncreaseID;//[Offset: 0x78, Size: 0x4]
	float SpreadStatuReduceID;//[Offset: 0x7c, Size: 0x4]
	int SpreadCOPID;//[Offset: 0x80, Size: 0x4]
	int PrimaryAmmo;//[Offset: 0x84, Size: 0x4]
	int PrimaryAmmoCap;//[Offset: 0x88, Size: 0x4]
	int SecondaryAmmo;//[Offset: 0x8c, Size: 0x4]
	int SecondaryAmmoCap;//[Offset: 0x90, Size: 0x4]
	bool CanOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	float OverloadMaxValue;//[Offset: 0x98, Size: 0x4]
	float NormalOverloadCoolingRate;//[Offset: 0x9c, Size: 0x4]
	float OverloadCoolingPeriod;//[Offset: 0xa0, Size: 0x4]
	float OverloadWarningRate;//[Offset: 0xa4, Size: 0x4]
	bool CanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	float AutoFireDelayMs;//[Offset: 0xac, Size: 0x4]
	float AutoFireEndDelayMs;//[Offset: 0xb0, Size: 0x4]
	bool CanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	float[] HipSoftZone;//[Offset: 0xb8, Size: 0x10]
	float HipAimAssistStepRatio;//[Offset: 0xc8, Size: 0x4]
	float HipMinAssistStepRatio;//[Offset: 0xcc, Size: 0x4]
	float HipAimAssistStepSpeed;//[Offset: 0xd0, Size: 0x4]
	float[] AdsSoftZone;//[Offset: 0xd8, Size: 0x10]
	float AdsAimAssistStepRatio;//[Offset: 0xe8, Size: 0x4]
	float AdsMinAssistStepRatio;//[Offset: 0xec, Size: 0x4]
	float AdsAimAssistStepSpeed;//[Offset: 0xf0, Size: 0x4]
	bool CanOpenScopeAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	float OpenScopeAimAssistStepRatio;//[Offset: 0xf8, Size: 0x4]
	float OpenScopeMinAssistStepRatio;//[Offset: 0xfc, Size: 0x4]
	float OpenScopeAssistStepSpeed;//[Offset: 0x100, Size: 0x4]
	float OnVehicleAssistStepRatio;//[Offset: 0x104, Size: 0x4]
	float Weight;//[Offset: 0x108, Size: 0x4]
	float HipFireSpeed;//[Offset: 0x10c, Size: 0x4]
	float ADSFireSpeed;//[Offset: 0x110, Size: 0x4]
	int[] DefaultParts;//[Offset: 0x118, Size: 0x10]
	float ScopeOpenTime;//[Offset: 0x128, Size: 0x4]
	float FovFactor;//[Offset: 0x12c, Size: 0x4]
	float WeaponSwitchTime;//[Offset: 0x130, Size: 0x4]
	int[] PartSlots;//[Offset: 0x138, Size: 0x10]
	<FString,FString> EquipAttributeSub;//[Offset: 0x148, Size: 0x50]
	<FString,FString> HoldAttributeSub;//[Offset: 0x198, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WeaponAmmo.SolarTableReaderBase.Object
	SolarTablesData_WeaponAmmo TryGetRowData(int Key, out bool HasKey);// 0x57c923bfa041
	bool HasRowKey(int Key);// 0x57c823bfa041
	bool HasColKey(FString Key);// 0x57c723bfa041
	FString GetTableName();// 0x57c623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x57c523bfa041
	SolarTablesData_WeaponAmmo GetRowData(int Key);// 0x57c423bfa041
	int GetRowCount();// 0x57c323bfa041
	int GetDataNum();// 0x57c223bfa041
	FString[] GetColKeys();// 0x57c123bfa041
	int GetColCount();// 0x57c023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WeaponAmmo.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int AmmoType;//[Offset: 0x10, Size: 0x4]
	int PropID;//[Offset: 0x14, Size: 0x4]
	int SoundID;//[Offset: 0x18, Size: 0x4]
	bool IfTimedExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int BounceTimes;//[Offset: 0x20, Size: 0x4]
	float LifeTime;//[Offset: 0x24, Size: 0x4]
	float BaseReloadTime;//[Offset: 0x28, Size: 0x4]
	float ReloadBoltTime;//[Offset: 0x2c, Size: 0x4]
	enum FireMethodType;//[Offset: 0x30, Size: 0x1]
	enum TrajectoryType;//[Offset: 0x31, Size: 0x1]
	float CustomValue;//[Offset: 0x34, Size: 0x4]
	enum TriggerType;//[Offset: 0x38, Size: 0x1]
	float MaxRange;//[Offset: 0x3c, Size: 0x4]
	float EffRange;//[Offset: 0x40, Size: 0x4]
	float ProjectileMaxGravity;//[Offset: 0x44, Size: 0x4]
	float DamageMaxRange;//[Offset: 0x48, Size: 0x4]
	float DamageEffRange;//[Offset: 0x4c, Size: 0x4]
	float Radius;//[Offset: 0x50, Size: 0x4]
	float PostFireOverload;//[Offset: 0x54, Size: 0x4]
	float InitSpeed;//[Offset: 0x58, Size: 0x4]
	float FireStreakBreakTime;//[Offset: 0x5c, Size: 0x4]
	enum FireCostType;//[Offset: 0x60, Size: 0x1]
	int FireCostPerAttack;//[Offset: 0x64, Size: 0x4]
	int FireSpeedChangeTime;//[Offset: 0x68, Size: 0x4]
	float FireSpeedChangeCOP;//[Offset: 0x6c, Size: 0x4]
	float FireIntervalRevertPreTime;//[Offset: 0x70, Size: 0x4]
	float FireIntervalReavertSpeed;//[Offset: 0x74, Size: 0x4]
	float FastestFireInterval;//[Offset: 0x78, Size: 0x4]
	float SlowestFireInterval;//[Offset: 0x7c, Size: 0x4]
	float BaseFireInterval;//[Offset: 0x80, Size: 0x4]
	float BoltActionTime;//[Offset: 0x84, Size: 0x4]
	float BurstShootInterval;//[Offset: 0x88, Size: 0x4]
	float BurstFireInterval;//[Offset: 0x8c, Size: 0x4]
	float StartBoltDuration;//[Offset: 0x90, Size: 0x4]
	bool UsePrimaryModeAmmoCap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool UseBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	float[] SkillCDDiscountArray;//[Offset: 0x98, Size: 0x10]
	int SkillType;//[Offset: 0xa8, Size: 0x4]
	float VhADSSpreadCOP;//[Offset: 0xac, Size: 0x4]
	float ADSSpreadCOP;//[Offset: 0xb0, Size: 0x4]
	float SpreadFirePreTime;//[Offset: 0xb4, Size: 0x4]
	float SpreadPostFireSpeed;//[Offset: 0xb8, Size: 0x4]
	float SpreadRestorePreTime;//[Offset: 0xbc, Size: 0x4]
	float SpreadRestoreSpeed;//[Offset: 0xc0, Size: 0x4]
	float VRecoilCostTime;//[Offset: 0xc4, Size: 0x4]
	int VRecoilAPoint;//[Offset: 0xc8, Size: 0x4]
	float VRecoilAPointMax;//[Offset: 0xcc, Size: 0x4]
	float VRecoilAPointMin;//[Offset: 0xd0, Size: 0x4]
	int VRecoilBPoint;//[Offset: 0xd4, Size: 0x4]
	float VRecoilBPointMax;//[Offset: 0xd8, Size: 0x4]
	float VRecoilBPointMin;//[Offset: 0xdc, Size: 0x4]
	float HRecoilCostTime;//[Offset: 0xe0, Size: 0x4]
	int HRecoilAPoint;//[Offset: 0xe4, Size: 0x4]
	float HRecoilAPointMax;//[Offset: 0xe8, Size: 0x4]
	float HRecoilAPointMin;//[Offset: 0xec, Size: 0x4]
	int HRecoilBPoint;//[Offset: 0xf0, Size: 0x4]
	float HRecoilBPointMax;//[Offset: 0xf4, Size: 0x4]
	float HRecoilBPointMin;//[Offset: 0xf8, Size: 0x4]
	int RecoilCOP;//[Offset: 0xfc, Size: 0x4]
	float ADSRecoilCOP;//[Offset: 0x100, Size: 0x4]
	float RollCostTime;//[Offset: 0x104, Size: 0x4]
	int RollAPoint;//[Offset: 0x108, Size: 0x4]
	int RollBPoint;//[Offset: 0x10c, Size: 0x4]
	float RollHightestPointMax;//[Offset: 0x110, Size: 0x4]
	float RollHightestPointMin;//[Offset: 0x114, Size: 0x4]
	float RollLowesttPointMax;//[Offset: 0x118, Size: 0x4]
	float RollLowesttPointMin;//[Offset: 0x11c, Size: 0x4]
	float ADSRollCOP;//[Offset: 0x120, Size: 0x4]
	float ScopeRollCostTime;//[Offset: 0x124, Size: 0x4]
	int ScopeRollAPoint;//[Offset: 0x128, Size: 0x4]
	int ScopeRollBPoint;//[Offset: 0x12c, Size: 0x4]
	float ScopeRollHightestPointMax;//[Offset: 0x130, Size: 0x4]
	float ScopeRollHightestPointMin;//[Offset: 0x134, Size: 0x4]
	float ScopeRollLowesttPointMax;//[Offset: 0x138, Size: 0x4]
	float ScopeRollLowesttPointMin;//[Offset: 0x13c, Size: 0x4]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x140, Size: 0x4]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x144, Size: 0x4]
	float ScopeVVibrationDuration;//[Offset: 0x148, Size: 0x4]
	float ScopeHVibrationDuration;//[Offset: 0x14c, Size: 0x4]
	float CrossHairVibrationScale;//[Offset: 0x150, Size: 0x4]
	float ScopeVContinuousFallingDuration;//[Offset: 0x154, Size: 0x4]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x158, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WeaponBattleUpgrade.SolarTableReaderBase.Object
	SolarTablesData_WeaponBattleUpgrade TryGetRowData(int Key, out bool HasKey);// 0x57d323bfa041
	bool HasRowKey(int Key);// 0x57d223bfa041
	bool HasColKey(FString Key);// 0x57d123bfa041
	FString GetTableName();// 0x57d023bfa041
	int GetRowKeys(out int[] OutKeys);// 0x57cf23bfa041
	SolarTablesData_WeaponBattleUpgrade GetRowData(int Key);// 0x57ce23bfa041
	int GetRowCount();// 0x57cd23bfa041
	int GetDataNum();// 0x57cc23bfa041
	FString[] GetColKeys();// 0x57cb23bfa041
	int GetColCount();// 0x57ca23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WeaponBattleUpgrade.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Exp;//[Offset: 0x10, Size: 0x4]
	int Retrofit;//[Offset: 0x14, Size: 0x4]
	int UpgradeCost;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WeaponDefault.SolarTableReaderBase.Object
	SolarTablesData_WeaponDefault TryGetRowData(int Key, out bool HasKey);// 0x57e723bfa041
	bool HasRowKey(int Key);// 0x57e623bfa041
	bool HasColKey(FString Key);// 0x57e523bfa041
	FString GetTableName();// 0x57e423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x57e323bfa041
	SolarTablesData_WeaponDefault GetRowData(int Key);// 0x57e223bfa041
	int GetRowCount();// 0x57e123bfa041
	int GetDataNum();// 0x57e023bfa041
	FString[] GetColKeys();// 0x57df23bfa041
	int GetColCount();// 0x57de23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WeaponDefault.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum AccessoryType1;//[Offset: 0x10, Size: 0x1]
	int[] SlotSubtype1;//[Offset: 0x18, Size: 0x10]
	int AccessoryID1;//[Offset: 0x28, Size: 0x4]
	enum AccessoryType2;//[Offset: 0x2c, Size: 0x1]
	int[] SlotSubtype2;//[Offset: 0x30, Size: 0x10]
	int AccessoryID2;//[Offset: 0x40, Size: 0x4]
	enum AccessoryType3;//[Offset: 0x44, Size: 0x1]
	int[] SlotSubtype3;//[Offset: 0x48, Size: 0x10]
	int AccessoryID3;//[Offset: 0x58, Size: 0x4]
	enum AccessoryType4;//[Offset: 0x5c, Size: 0x1]
	int[] SlotSubtype4;//[Offset: 0x60, Size: 0x10]
	int AccessoryID4;//[Offset: 0x70, Size: 0x4]
	enum AccessoryType5;//[Offset: 0x74, Size: 0x1]
	int[] SlotSubtype5;//[Offset: 0x78, Size: 0x10]
	int AccessoryID5;//[Offset: 0x88, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WeaponKillTip.SolarTableReaderBase.Object
	SolarTablesData_WeaponKillTip TryGetRowData(int Key, out bool HasKey);// 0x57f123bfa041
	bool HasRowKey(int Key);// 0x57f023bfa041
	bool HasColKey(FString Key);// 0x57ef23bfa041
	FString GetTableName();// 0x57ee23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x57ed23bfa041
	SolarTablesData_WeaponKillTip GetRowData(int Key);// 0x57ec23bfa041
	int GetRowCount();// 0x57eb23bfa041
	int GetDataNum();// 0x57ea23bfa041
	FString[] GetColKeys();// 0x57e923bfa041
	int GetColCount();// 0x57e823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WeaponKillTip.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int KillTipType;//[Offset: 0x10, Size: 0x4]
	int KillTipValue;//[Offset: 0x14, Size: 0x4]
	FString KillTipIcon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText KillTipname;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WeaponParts.SolarTableReaderBase.Object
	SolarTablesData_WeaponParts TryGetRowData(int Key, out bool HasKey);// 0x57fb23bfa041
	bool HasRowKey(int Key);// 0x57fa23bfa041
	bool HasColKey(FString Key);// 0x57f923bfa041
	FString GetTableName();// 0x57f823bfa041
	int GetRowKeys(out int[] OutKeys);// 0x57f723bfa041
	SolarTablesData_WeaponParts GetRowData(int Key);// 0x57f623bfa041
	int GetRowCount();// 0x57f523bfa041
	int GetDataNum();// 0x57f423bfa041
	FString[] GetColKeys();// 0x57f323bfa041
	int GetColCount();// 0x57f223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WeaponParts.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WeaponLevel;//[Offset: 0x10, Size: 0x4]
	enum PartsType;//[Offset: 0x14, Size: 0x1]
	<FString,FString> AttributeSub;//[Offset: 0x18, Size: 0x50]
	int PartsQuality;//[Offset: 0x68, Size: 0x4]
	FString PartsBPResource;//[Offset: 0x70, Size: 0x10]
	FString PartsIcon;//[Offset: 0x80, Size: 0x10]
	int EffectCondition;//[Offset: 0x90, Size: 0x4]
	int[] PartsEffect;//[Offset: 0x98, Size: 0x10]
	float[] PartsValue;//[Offset: 0xa8, Size: 0x10]
	int[] PartsWeaponID;//[Offset: 0xb8, Size: 0x10]
	int PartsName;//[Offset: 0xc8, Size: 0x4]
	FString[] PartsDesc;//[Offset: 0xd0, Size: 0x10]
	int WeaponPartDamage;//[Offset: 0xe0, Size: 0x4]
	int WeaponPartRateOfFire;//[Offset: 0xe4, Size: 0x4]
	int WeaponPartRecoil;//[Offset: 0xe8, Size: 0x4]
	int WeaponPartSpread;//[Offset: 0xec, Size: 0x4]
	int WeaponPartRange;//[Offset: 0xf0, Size: 0x4]
	int WeaponPartMobility;//[Offset: 0xf4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WeaponPartsOp.SolarTableReaderBase.Object
	SolarTablesData_WeaponPartsOp TryGetRowData(int Key, out bool HasKey);// 0x580523bfa041
	bool HasRowKey(int Key);// 0x580423bfa041
	bool HasColKey(FString Key);// 0x580323bfa041
	FString GetTableName();// 0x580223bfa041
	int GetRowKeys(out int[] OutKeys);// 0x580123bfa041
	SolarTablesData_WeaponPartsOp GetRowData(int Key);// 0x580023bfa041
	int GetRowCount();// 0x57ff23bfa041
	int GetDataNum();// 0x57fe23bfa041
	FString[] GetColKeys();// 0x57fd23bfa041
	int GetColCount();// 0x57fc23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WeaponPartsOp.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int EffectOperator;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WeaponQuality.SolarTableReaderBase.Object
	SolarTablesData_WeaponQuality TryGetRowData(int Key, out bool HasKey);// 0x580f23bfa041
	bool HasRowKey(int Key);// 0x580e23bfa041
	bool HasColKey(FString Key);// 0x580d23bfa041
	FString GetTableName();// 0x580c23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x580b23bfa041
	SolarTablesData_WeaponQuality GetRowData(int Key);// 0x580a23bfa041
	int GetRowCount();// 0x580923bfa041
	int GetDataNum();// 0x580823bfa041
	FString[] GetColKeys();// 0x580723bfa041
	int GetColCount();// 0x580623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WeaponQuality.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Quality;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_SecondMode.SolarTableReaderBase.Object
	SolarTablesData_SecondMode TryGetRowData(int Key, out bool HasKey);// 0x571f23bfa041
	bool HasRowKey(int Key);// 0x571e23bfa041
	bool HasColKey(FString Key);// 0x571d23bfa041
	FString GetTableName();// 0x571c23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x571b23bfa041
	SolarTablesData_SecondMode GetRowData(int Key);// 0x571a23bfa041
	int GetRowCount();// 0x571923bfa041
	int GetDataNum();// 0x571823bfa041
	FString[] GetColKeys();// 0x571723bfa041
	int GetColCount();// 0x571623bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_SecondMode.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int UpperLimit;//[Offset: 0x10, Size: 0x4]
	float RestoreProgressPerSec;//[Offset: 0x14, Size: 0x4]
	float RestoreProgressPerKill;//[Offset: 0x18, Size: 0x4]
	float RestoreProgressPerDmg;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WeaponSkin.SolarTableReaderBase.Object
	SolarTablesData_WeaponSkin TryGetRowData(int Key, out bool HasKey);// 0x581923bfa041
	bool HasRowKey(int Key);// 0x581823bfa041
	bool HasColKey(FString Key);// 0x581723bfa041
	FString GetTableName();// 0x581623bfa041
	int GetRowKeys(out int[] OutKeys);// 0x581523bfa041
	SolarTablesData_WeaponSkin GetRowData(int Key);// 0x581423bfa041
	int GetRowCount();// 0x581323bfa041
	int GetDataNum();// 0x581223bfa041
	FString[] GetColKeys();// 0x581123bfa041
	int GetColCount();// 0x581023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WeaponSkin.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WeaponSkinType;//[Offset: 0x10, Size: 0x4]
	FString WeaponSkillQuality;//[Offset: 0x18, Size: 0x10]
	int SortId;//[Offset: 0x28, Size: 0x4]
	int weaponid;//[Offset: 0x2c, Size: 0x4]
	FString WeaponSkinResource;//[Offset: 0x30, Size: 0x10]
	int WeaponSkinAquiredThru;//[Offset: 0x40, Size: 0x4]
	int JumpPage;//[Offset: 0x44, Size: 0x4]
	FString KillBroadcast;//[Offset: 0x48, Size: 0x10]
	int ShopPropertyid;//[Offset: 0x58, Size: 0x4]
	int ItemID;//[Offset: 0x5c, Size: 0x4]
	bool DisplayInWeaponry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FString LobbyChunkDir;//[Offset: 0x68, Size: 0x10]
	int ChunkID;//[Offset: 0x78, Size: 0x4]
	int AIRandomWeight;//[Offset: 0x7c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WeaponSound.SolarTableReaderBase.Object
	SolarTablesData_WeaponSound TryGetRowData(int Key, out bool HasKey);// 0x582d23bfa041
	bool HasRowKey(int Key);// 0x582c23bfa041
	bool HasColKey(FString Key);// 0x582b23bfa041
	FString GetTableName();// 0x582a23bfa041
	int GetRowKeys(out int[] OutKeys);// 0x582923bfa041
	SolarTablesData_WeaponSound GetRowData(int Key);// 0x582823bfa041
	int GetRowCount();// 0x582723bfa041
	int GetDataNum();// 0x582623bfa041
	FString[] GetColKeys();// 0x582523bfa041
	int GetColCount();// 0x582423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WeaponSound.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString Play_Fire_Auto_1P;//[Offset: 0x10, Size: 0x10]
	FString Play_Fire_Auto_3P;//[Offset: 0x20, Size: 0x10]
	FString Play_Fire_Auto_3P_Enemy;//[Offset: 0x30, Size: 0x10]
	FString Stop_Fire_Auto_1P;//[Offset: 0x40, Size: 0x10]
	FString Stop_Fire_Auto_3P;//[Offset: 0x50, Size: 0x10]
	FString Stop_Fire_Auto_3P_Enemy;//[Offset: 0x60, Size: 0x10]
	FString Play_Fire_Sigle_1P;//[Offset: 0x70, Size: 0x10]
	FString Play_Fire_Sigle_3P;//[Offset: 0x80, Size: 0x10]
	FString Play_Fire_Sigle_3P_Enemy;//[Offset: 0x90, Size: 0x10]
	FString Play_Fire_Burst_1P;//[Offset: 0xa0, Size: 0x10]
	FString Play_Fire_Burst_3P;//[Offset: 0xb0, Size: 0x10]
	FString Play_Fire_Burst_3P_Enemy;//[Offset: 0xc0, Size: 0x10]
	FString Stop_Fire_Burst_1P;//[Offset: 0xd0, Size: 0x10]
	FString Stop_Fire_Burst_3P;//[Offset: 0xe0, Size: 0x10]
	FString Stop_Fire_Burst_3P_Enemy;//[Offset: 0xf0, Size: 0x10]
	FString Play_FIRE_LAST_1P;//[Offset: 0x100, Size: 0x10]
	FString Play_FIRE_LAST_3P;//[Offset: 0x110, Size: 0x10]
	FString Play_FIRE_LAST_3P_Enemy;//[Offset: 0x120, Size: 0x10]
	FString Remain_Gun_RTPC_NAME;//[Offset: 0x130, Size: 0x10]
	FString Play_Skill_Cast_1P;//[Offset: 0x140, Size: 0x10]
	FString Play_Skill_Cast_3P;//[Offset: 0x150, Size: 0x10]
	FString Play_Skill_Cast_3P_Enemy;//[Offset: 0x160, Size: 0x10]
	FString Play_Fire_Lay_Tl_1P;//[Offset: 0x170, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P;//[Offset: 0x180, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P_Enemy;//[Offset: 0x190, Size: 0x10]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x1a0, Size: 0x10]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x1b0, Size: 0x10]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x1c0, Size: 0x10]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x1d0, Size: 0x10]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1e0, Size: 0x10]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1f0, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x200, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x210, Size: 0x10]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x220, Size: 0x10]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x230, Size: 0x10]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x240, Size: 0x10]
	FString Play_Fire_Overload_1P;//[Offset: 0x250, Size: 0x10]
	FString Play_Fire_Overload_3P;//[Offset: 0x260, Size: 0x10]
	FString Play_Fire_Overload_3P_Enemy;//[Offset: 0x270, Size: 0x10]
	FString Play_Reload_01_1P;//[Offset: 0x280, Size: 0x10]
	FString Play_Reload_01_3P;//[Offset: 0x290, Size: 0x10]
	FString Play_Reload_01_3P_Enemy;//[Offset: 0x2a0, Size: 0x10]
	FString Play_Reload_02_1P;//[Offset: 0x2b0, Size: 0x10]
	FString Play_Reload_02_3P;//[Offset: 0x2c0, Size: 0x10]
	FString Play_Reload_02_3P_Enemy;//[Offset: 0x2d0, Size: 0x10]
	FString Play_Reload_03_1P;//[Offset: 0x2e0, Size: 0x10]
	FString Play_Reload_03_3P;//[Offset: 0x2f0, Size: 0x10]
	FString Play_Reload_03_3P_Enemy;//[Offset: 0x300, Size: 0x10]
	FString Play_Bolt_1P;//[Offset: 0x310, Size: 0x10]
	FString Play_Bolt_3P;//[Offset: 0x320, Size: 0x10]
	FString Play_Bolt_3P_Enemy;//[Offset: 0x330, Size: 0x10]
	FString Play_Vehicle_Gun_On_3P;//[Offset: 0x340, Size: 0x10]
	FString Play_Vehicle_Gun_On_3P_Enemy;//[Offset: 0x350, Size: 0x10]
	FString Play_Vehicle_Gun_Loop_3P;//[Offset: 0x360, Size: 0x10]
	FString Play_Vehicle_Gun_Loop_3P_Enemy;//[Offset: 0x370, Size: 0x10]
	FString Play_Vehicle_Gun_Off_3P;//[Offset: 0x380, Size: 0x10]
	FString Play_Vehicle_Gun_Off_3P_Enemy;//[Offset: 0x390, Size: 0x10]
	FString Play_Fire_Auto_1P_Mute;//[Offset: 0x3a0, Size: 0x10]
	FString Play_Fire_Auto_3P_Mute;//[Offset: 0x3b0, Size: 0x10]
	FString Play_Fire_Auto_3P_Enemy_Mute;//[Offset: 0x3c0, Size: 0x10]
	FString Stop_Fire_Auto_1P_Mute;//[Offset: 0x3d0, Size: 0x10]
	FString Stop_Fire_Auto_3P_Mute;//[Offset: 0x3e0, Size: 0x10]
	FString Stop_Fire_Auto_3P_Enemy_Mute;//[Offset: 0x3f0, Size: 0x10]
	FString Play_Fire_Sigle_1P_Mute;//[Offset: 0x400, Size: 0x10]
	FString Play_Fire_Sigle_3P_Mute;//[Offset: 0x410, Size: 0x10]
	FString Play_Fire_Sigle_3P_Enemy_Mute;//[Offset: 0x420, Size: 0x10]
	FString Play_Fire_Burst_1P_Mute;//[Offset: 0x430, Size: 0x10]
	FString Play_Fire_Burst_3P_Mute;//[Offset: 0x440, Size: 0x10]
	FString Play_Fire_Burst_3P_Enemy_Mute;//[Offset: 0x450, Size: 0x10]
	FString Stop_Fire_Burst_1P_Mute;//[Offset: 0x460, Size: 0x10]
	FString Stop_Fire_Burst_3P_Mute;//[Offset: 0x470, Size: 0x10]
	FString Stop_Fire_Burst_3P_Enemy_Mute;//[Offset: 0x480, Size: 0x10]
	FString Play_Fire_Lay_Tl_1P_Mute;//[Offset: 0x490, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P_Mute;//[Offset: 0x4a0, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P_Enemy_Mute;//[Offset: 0x4b0, Size: 0x10]
	FString Play_Fire_Empty_1p;//[Offset: 0x4c0, Size: 0x10]
	FString Play_Fire_Empty_3p;//[Offset: 0x4d0, Size: 0x10]
	FString Play_Fire_Empty_3p_Enemy;//[Offset: 0x4e0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTables_Reader_WeaponStatu.SolarTableReaderBase.Object
	SolarTablesData_WeaponStatu TryGetRowData(int Key, out bool HasKey);// 0x583723bfa041
	bool HasRowKey(int Key);// 0x583623bfa041
	bool HasColKey(FString Key);// 0x583523bfa041
	FString GetTableName();// 0x583423bfa041
	int GetRowKeys(out int[] OutKeys);// 0x583323bfa041
	SolarTablesData_WeaponStatu GetRowData(int Key);// 0x583223bfa041
	int GetRowCount();// 0x583123bfa041
	int GetDataNum();// 0x583023bfa041
	FString[] GetColKeys();// 0x582f23bfa041
	int GetColCount();// 0x582e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarTablesData_WeaponStatu.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float Stand;//[Offset: 0x10, Size: 0x4]
	float CrouchDown;//[Offset: 0x14, Size: 0x4]
	float Still;//[Offset: 0x18, Size: 0x4]
	float Run;//[Offset: 0x1c, Size: 0x4]
	float Spint;//[Offset: 0x20, Size: 0x4]
	float Jump;//[Offset: 0x24, Size: 0x4]
	float Fly;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BPC_AiManagerBattleRoyale_C.BPC_AiManagerBase_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe8, Size: 0x8]
	SCMPlayerState*[] TempAI;//[Offset: 0xf0, Size: 0x10]
	<FString,int> MemberAIOrder;//[Offset: 0x100, Size: 0x50]
	int SpawnIndex;//[Offset: 0x150, Size: 0x4]
	bool bCanSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	<FString,int> PureAIOrder;//[Offset: 0x158, Size: 0x50]
	bool bSpawnPlayerTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	int AiCountPreSpawn;//[Offset: 0x1ac, Size: 0x4]
	int RealPlayer;//[Offset: 0x1b0, Size: 0x4]
	SCMPlayerState*[] TeammateAI;//[Offset: 0x1b8, Size: 0x10]
	bool bTeammateAiFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	S_WarmGameConfig WarmGameConfig;//[Offset: 0x1d0, Size: 0x18]
	bool bIsWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	FString[] PureAiSides;//[Offset: 0x1f0, Size: 0x10]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	static void ReplenishAITeammate(SolarPlayerState*[] NewLocalVar, FString[] AISide, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, const byte[] Temp_byte_Variable, <FString,int> CallFunc_GetMemberAIOrder_Side_Count, const enum[] Temp_byte_Variable, FString CallFunc_PickSide_SIde, const byte[] Temp_byte_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, const byte[] Temp_byte_Variable, SCMPlayerState* CallFunc_Array_Get_Item, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Map_Length_ReturnValue, const FString[] K2Node_MakeArray_Array, bool CallFunc_Greater_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SolarPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_PickSide_SIde);// 0x1355323e7a001
	BPC_CountDown_C* GetCountDownComponent(GameStateBase* CallFunc_GetGameState_ReturnValue, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue);// 0x1355223e7a001
	static void StopAiBehavior(SCMPlayerState*[] Temp, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarBotAIController* CallFunc_GetAIController_Controller, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x1355123e7a001
	bool CanModeSpawnAiTeammate(bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, bool CallFunc__S_PlayInEditor_bIsEditor, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0x1355023e7a001
	void GetAIController(SolarPlayerState* PlayerState, out SolarBotAIController* Controller, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue);// 0x1354f23e7a001
	static void SpawnAI(bool bTeammateAI, FString Side, out SCMPlayerState* PlayerState, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetSolarGameMode_ReturnValue, int CallFunc_Map_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const SCMPlayerState*[] K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_GetRandomCharacter_Output, int CallFunc_GetRandomDifficulty_Difficulty, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, Vector CallFunc_SpawnLocation_ReturnValue, SolarPlayerState* CallFunc_CreateBotAIAndJoinTeamByName_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue);// 0x1354e23e7a001
	void GetSpawnInterval(out float Interval, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, BPC_CountDown_C* CallFunc_GetCountDownComponent_ReturnValue, BPC_CountDown_C* CallFunc_GetCountDownComponent_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, float K2Node_Select_Default, float K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x1354d23e7a001
	static void UpdatePureAiOrder(int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SolarGameMode* CallFunc_GetSolarGameMode_ReturnValue, int CallFunc_GetMatchTeammateCount_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int K2Node_Select_Default, FString[] CallFunc_Map_Keys_Keys);// 0x1354c23e7a001
	void PickSide(bool RealPlayerTeam, out FString Side, FString tempSide, bool Temp_bool_Variable, <FString,int> K2Node_Select_Default, FString[] CallFunc_Map_Keys_Keys, bool CallFunc_Map_Remove_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1354b23e7a001
	static void DeleteTempAI(int count, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, const SCMPlayerState*[] K2Node_MakeArray_Array, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_DeleteAIFromBattleForPlayer_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x1354a23e7a001
	void RunBehaviourTree(SCMPlayerState* Player, BehaviorTree* BTAsset, enum CallFunc_GetPlayerPawn_outType, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1354923e7a001
	static Vector SpawnLocation(BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x1354823e7a001
	bool IsPlayerFull(BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x1354723e7a001
	BP_Logic_BattleRoyale_C* GetLogicComponent(GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x153bf23bfa041
	void MatchFinished();// 0x27dc123bfa041
	void PreSpawnAI();// 0x1354423e7a001
	void ReceiveBeginPlay();// 0x1354323e7a001
	void SpawnAIDynamic();// 0xffffff9223bfa002
	void OnBattleStateChanged(byte NewState);// 0xffffff9223bfa002
	void CustomEvent();// 0x1354023e7a001
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0x1353f23e7a001
	void ExecuteUbergraph_BPC_AiManagerBattleRoyale(int EntryPoint, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetSpawnInterval_Interval, int CallFunc_Map_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsPlayerFull_ReturnValue, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsPlayerFull_ReturnValue, SCMPlayerState* CallFunc_SpawnAI_PlayerState, int CallFunc_Map_Length_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_RandomIntInRange_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_NewState, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BehaviorTree* K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, FString CallFunc_PickSide_SIde, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SCMPlayerState* CallFunc_SpawnAI_PlayerState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, int K2Node_Select_Default, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_bIsAi, bool CallFunc_Not_PreBool_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, BPC_WarmGame_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, int Temp_int_Variable, bool CallFunc_CanModeSpawnAiTeammate_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, <FString,int> CallFunc_GetMemberAIOrder_Side_Count);// 0xffffff9223bfa002
<----------Generated by SSpawner v1.0.2---------->


Class: BPC_AiManagerBase_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	FString PreSpawnAiSide;//[Offset: 0xb8, Size: 0x10]
	int TeammateCount;//[Offset: 0xc8, Size: 0x4]
	SCMPlayerState*[] AIList;//[Offset: 0xd0, Size: 0x10]
	int AILevelMax;//[Offset: 0xe0, Size: 0x4]
	int DefaultAiLevel;//[Offset: 0xe4, Size: 0x4]
	static void GetRandomDifficulty(out int Difficulty, <int,int> CallFunc_GetAILevelConfigCurrentMatch_AILevelConfig, bool CallFunc_GetAILevelConfigCurrentMatch_ReturnValue, int CallFunc_GetRandomKeyInWidget_HitKey);// 0xe5fb23e7a001
	static void GetMemberAIOrder(out <FString,int> Side-Count, SolarTeamInfo* NewLocalVar, SolarTeamInfo*[] RealPlayerTeams, <FString,int> TempSideCount, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo*[] CallFunc_GetPlayerTeams_OutTeams, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, SolarGameMode* CallFunc_GetSolarGameMode_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_GetMatchTeammateCount_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SolarTeamInfo* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_HasTeammatesAI_ReturnValue);// 0xe5fc23e7a001
	void ReceiveBeginPlay();// 0xffffff9223bfa002
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0xffffff8f23bfa000
	void CustomEvent();// 0xe5ff23e7a001
	static void ExecuteUbergraph_BPC_AiManagerBase(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, GameModeBase* CallFunc_GetGameMode_ReturnValue, SCMPlayerState* K2Node_CustomEvent_NewPlayer, bool K2Node_CustomEvent_bIsAi, BP_Logic_Framework_C* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_Array_Add_ReturnValue, <int,int> CallFunc_GetAILevelConfigCurrentMatch_AILevelConfig, bool CallFunc_GetAILevelConfigCurrentMatch_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_MaxOfIntArray_IndexOfMaxValue, int CallFunc_MaxOfIntArray_MaxValue);// 0x1559823e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: BPC_AirlineCruise_C.AirlineCruiseComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x140, Size: 0x8]
	int AirlineID;//[Offset: 0x148, Size: 0x4]
	<SolarPlayerState*,Vector> EjectLocation;//[Offset: 0x150, Size: 0x50]
	<SolarPlayerState*,Vector> LandLocation;//[Offset: 0x1a0, Size: 0x50]
	SolarPlayerState*[] ForceJumpPlayerList;//[Offset: 0x1f0, Size: 0x10]
	SolarCharacter*[] CruisePlayers;//[Offset: 0x200, Size: 0x10]
	AirlineData AirlineData;//[Offset: 0x210, Size: 0x28]
	float Height;//[Offset: 0x238, Size: 0x4]
	float Speed;//[Offset: 0x23c, Size: 0x4]
	bool ClearAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	bool GetPlayerForceJumped(out const SolarPlayerState* TargetPlayer, bool CallFunc_Array_Contains_ReturnValue);// 0x1670b23e7a008
	void GetPlayerLandLocation(out const SolarPlayerState* TargetPlayer, out Vector Location, out bool Succeed, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1268a23e7a00b
	void GetPlayerEjectLocation(out const SolarPlayerState* TargetPlayer, out Vector Location, out bool Succeed, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1573b23e7a008
	void GetAirlineData_RealWorld(out const AirlineData AirlineData, out Vector2D LineStart, out Vector2D LineEnd, out Vector2D JumpStart, out Vector2D JumpEnd, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue);// 0x1341823e7a001
	void MiniMap2RealWorld(Vector2D JumpStart, Vector2D JumpEnd, Vector2D LineStart, Vector2D LineEnd, out Vector2D JumpStartR, out Vector2D JumpEndR, out Vector2D LineStartR, out Vector2D LineEndR, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue);// 0x1573623e7a008
	static void StartParachutingWithRandomAirline(out SolarCharacter*[] TargetCharacters, out int Air Line ID, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SolarCharacter* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_BeginCruise_IntoParachuteZoneTime, float CallFunc_BeginCruise_ForceParachuteTime, float CallFunc_BeginCruise_CruiseEndTime, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue, Vector2D CallFunc_GetAirlineData_RealWorld_LineStart, Vector2D CallFunc_GetAirlineData_RealWorld_LineEnd, Vector2D CallFunc_GetAirlineData_RealWorld_JumpStart, Vector2D CallFunc_GetAirlineData_RealWorld_JumpEnd, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x1575d23e7a001
	void StartParachuting(out const SolarCharacter*[] TargetCharacters, bool ClearAllItems, int AirlineID, out const AirlineData AirlineData);// 0x1556223e7a001
	void OnPlayerEjectingStateChanged(byte State, SolarCharacter* TargetCharacter);// 0x1351c23e7a001
	void ExecuteUbergraph_BPC_AirlineCruise(int EntryPoint, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const SolarCharacter*[] K2Node_CustomEvent_TargetCharacters, bool K2Node_CustomEvent_ClearAllItems, int K2Node_CustomEvent_AirlineID, const AirlineData K2Node_CustomEvent_AirlineData, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, Vector2D CallFunc_GetAirlineData_RealWorld_LineStart, Vector2D CallFunc_GetAirlineData_RealWorld_LineEnd, Vector2D CallFunc_GetAirlineData_RealWorld_JumpStart, Vector2D CallFunc_GetAirlineData_RealWorld_JumpEnd, int Temp_int_Loop_Counter_Variable, BoarderInfo CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, byte Temp_byte_Variable, SolarCharacter* CallFunc_Array_Get_Item, <SolarPlayerState*,Vector> K2Node_Select_Default, const Transform CallFunc_GetTransform_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_BeginCruise_IntoParachuteZoneTime, float CallFunc_BeginCruise_ForceParachuteTime, float CallFunc_BeginCruise_CruiseEndTime, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue);// 0x1354623e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: AirlineCruiseComponent.GameModeCompBase.ActorComponent.Object
	int UsedAirlineID;//[Offset: 0xcc, Size: 0x4]
	class SolarCapsuleRoot* CapsuleRootClass;//[Offset: 0xd0, Size: 0x8]
	SolarCapsuleRoot* CapsuleRoot;//[Offset: 0xd8, Size: 0x8]
	<int,AirlineData> AirlineDataList;//[Offset: 0xe0, Size: 0x50]
	SolarCharacter* CruiseTemplate;//[Offset: 0x130, Size: 0x8]
	void OnPlayerJoin(SCMPlayerState* PlayerState);// 0x416e23bfa041
	void OnCruiseCompleted(Actor* DestroyedRoot);// 0x416d23bfa041
	void OnAIJoin(SCMPlayerState* PlayerState);// 0x416c23bfa041
	int GetUsedAirlineData(out AirlineData outData);// 0x416b23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SBattleRoyaleGameModeAIComp.SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	bool bBotSkipAICruise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15f, Size: 0x1]
	float MaxLootDistanceToAirline;//[Offset: 0x160, Size: 0x4]
	bool bCanSelectLootZoneOutPoisonCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Mode_BattleRoyale_C.BP_Mode_Framework_C.SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	BPC_AiManagerBattleRoyale_C* BPC_AiManagerBattleRoyale;//[Offset: 0x748, Size: 0x8]
	NgaiGameModeComponent* NgaiGameMode;//[Offset: 0x750, Size: 0x8]
	BattleRoyaleGameModeAIComp_Custom_C* BattleRoyaleGameModeAIComp_Custom;//[Offset: 0x758, Size: 0x8]
	BPC_AirlineCruise_C* BPC_AirlineCruise;//[Offset: 0x760, Size: 0x8]
	BP_MapInfoComponent_C* BP_MapInfoComponent;//[Offset: 0x768, Size: 0x8]
	AirlineCruiseComponent* GetAirlineCruiseComponent();// 0xffffff9223bfa002
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Mode_Framework_C.SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x740, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	float TimeOutSeconds;//[Offset: 0x590, Size: 0x4]
	CGMLogicComponent* LogicComponent;//[Offset: 0x648, Size: 0x8]
	CGMDeathComponent* DeathComponent;//[Offset: 0x650, Size: 0x8]
	SCMPlayerController*[] WaitingPlayers;//[Offset: 0x668, Size: 0x10]
	delegate OnPlayerJoin;//[Offset: 0x688, Size: 0x10]
	delegate OnAIJoin;//[Offset: 0x698, Size: 0x10]
	delegate OnPlayerOutEvent;//[Offset: 0x6a8, Size: 0x10]
	class GameManagerBase[] GameManagerClasses;//[Offset: 0x6b8, Size: 0x10]
	class CGMLogicComponent* LogicComponentClass;//[Offset: 0x6c8, Size: 0x8]
	class CGMDeathComponent* DeathComponentClass;//[Offset: 0x6d0, Size: 0x8]
	class SCMPlayerRPCComponent* PlayerRPCComponentClass;//[Offset: 0x6d8, Size: 0x8]
	void TimerStartGame();// 0x247323bfa041
	void StartBattle();// 0x247223bfa041
	bool RequestAllowReconnectGame(SCMPlayerState* InPC);// 0x247123bfa041
	void ReceiveSpectatorJoinData(SCMPlayerState* Player);// 0x247023bfa041
	void ReceiveServerLevelLoaded(FString LevelName);// 0x246f23bfa041
	bool ReceivePlayerTeamPreJoinRequest(out const SCMPlayerState*[] PreJoinPlayers, int TeamID);// 0x246e23bfa041
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x246d23bfa041
	void ReceivePlayerReJoin(SCMPlayerState* NewPlayer);// 0x246c23bfa041
	void ReceivePlayerPreLogin(FString PlayerId, SCMPlayerState* OfflinePlayer, out FString ErrorMsg);// 0x246b23bfa041
	void ReceivePlayerNonSpectatorJoinData(SCMPlayerState* Player);// 0x246a23bfa041
	void ReceivePlayerLevelLoaded(SCMPlayerController* Player, FString LevelName);// 0x246923bfa041
	void ReceivePlayerJoinData(FString PlayerId);// 0x246823bfa041
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x246723bfa041
	void ReceivePlayerJoin(SCMPlayerState* NewPlayer, bool IsAI);// 0x246623bfa041
	void ReceivePlayerCheat(SolarPlayerState* InCheater);// 0x246523bfa041
	void ReceivePlayerCancelJoin(FString PlayerId);// 0x246423bfa041
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x246323bfa041
	void ReceivePlayerAbnormal(SolarPlayerState* InAbnormalPlayer);// 0x246223bfa041
	void ReceiveOBPlayersChanged();// 0x246123bfa041
	void ReceiveGameModeInit();// 0x246023bfa041
	void ReceiveBattleTick(float InBattleTime, float DeltaTime);// 0x245f23bfa041
	void ReceiveBattleEnd();// 0x245e23bfa041
	void ReceiveBattleBegin();// 0x245d23bfa041
	void OnTeamInTournamentSettled(FString Side, byte TeamID);// 0x245c23bfa041
	void OnReceivePlayerLogin(PlayerController* PlayerController);// 0x245b23bfa041
	void OnReceivePlayerBattleStart(PlayerController* PlayerController);// 0x245a23bfa041
	void OnReceiveBattleStart();// 0x245923bfa041
	void OnPlayerSettled(SCMPlayerState* Player);// 0x245823bfa041
	void OnPlayerOut__DelegateSignature(SCMPlayerState* Player, enum OutType);// 0x245623bfa041
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x245523bfa041
	void OnPlayerJoin__DelegateSignature(SCMPlayerState* Player);// 0x245423bfa041
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x245323bfa041
	void OnMatchEnd(const int RPCID);// 0x245223bfa041
	void OnDSClose();// 0x245123bfa041
	void OnBotAIDataReady(int AICount);// 0x245023bfa041
	void OnAIJoin__DelegateSignature(SCMPlayerState* BotAI);// 0x244f23bfa041
	void NotifyDSBattleOver();// 0x244e23bfa041
	void NotifyBotAIDataReady(int AICount);// 0x244d23bfa041
	bool IsEnableLogicComp();// 0x244c23bfa041
	int GetCurMapID();// 0x244b23bfa041
	void CreateHomeActor(FString Path);// 0x244a23bfa041
	bool CheckLogicComponentIsA(class CGMLogicComponent ClassPath);// 0x244923bfa041
	bool ChangePlayerCharacter(SCMPlayerState* Player, int CharacterId, int SkinId);// 0x244823bfa041
	bool ChangeBotAICharacter(SolarPlayerState* Player, int CharacterId, int SkinId);// 0x244723bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnPlayerDisconnectedGame;//[Offset: 0x558, Size: 0x10]
	delegate OnPlayerReconnectedGame;//[Offset: 0x568, Size: 0x10]
	int SettlementStageConfigID;//[Offset: 0x580, Size: 0x4]
	void SettlePlayerBattleData(SolarPlayerState* Player);// 0x244623bfa041
	void ReceiveBattleSettlement();// 0x244523bfa041
	void ReceiveBattleOver();// 0x244423bfa041
	void OnPlayerLeaveDSTimeOut(SolarPlayerState* PlayerState);// 0x244323bfa041
	bool IsAutoSettlementWhenKilled();// 0x244223bfa041
	bool IsAllowReconnectGame(SolarPlayerState* Player);// 0x244123bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: NgaiGameModeComponent.GameModeCompBase.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BattleRoyaleGameModeAIComp_Custom_C.SBattleRoyaleGameModeAIComp.SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x178, Size: 0x8]
	int AllBOT_Num;//[Offset: 0x180, Size: 0x4]
	BP_SolarCharacterPlayer_C*[] AllBOT_Falling;//[Offset: 0x188, Size: 0x10]
	BP_SolarCharacterPlayer_C* Player;//[Offset: 0x198, Size: 0x8]
	bool IsCustomMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	SCMPlayerState*[] AllRealPlayers;//[Offset: 0x1a8, Size: 0x10]
	static void Get All Bot Character and Set Bt Tree(BehaviorTree* BTAsset, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, BP_SolarCharacterPlayer_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Controller* CallFunc_GetController_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, AIController* K2Node_DynamicCast_AsAIController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_RunBehaviorTree_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x1351523e7a001
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, bool CallFunc_OnGameModeHandleMatchHasStarted_bOutSuccess);// 0x1351423e7a001
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, bool CallFunc_OnGameModeStartPlay_bOutSuccess);// 0xffffff9223bfa002
	void Event_AIBeginPlay();// 0xffffff9223bfa002
	void MainTick();// 0x1351123e7a001
	static void ExecuteUbergraph_BattleRoyaleGameModeAIComp_Custom(int EntryPoint, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x183bf23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_CustomRoomManager_BattleRoyale_C.BP_CustomroomManager_C.CustomRoomManager.GameManagerBase.Info.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BP_CustomroomManager_C.CustomRoomManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x418, Size: 0x8]
	bool HUD Initialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	UI_CreateRoom_HUD_C* UI_RoomHUD;//[Offset: 0x428, Size: 0x8]
	UI_CreateRoom_Management_Main_C* UI_RoomOperate;//[Offset: 0x430, Size: 0x8]
	byte TeamMemberCount;//[Offset: 0x438, Size: 0x1]
	bool IsLocalPlayerOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]
	bool TEMP Flag UI Refreshed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 0x1]
	FString[] PlayerPendingRemoval;//[Offset: 0x440, Size: 0x10]
	int TeamCount;//[Offset: 0x450, Size: 0x4]
	int DeathmatchModeGroupID;//[Offset: 0x454, Size: 0x4]
	int SoloGameModeID;//[Offset: 0x458, Size: 0x4]
	void GetSpawnList(out int[] None, out int[] None, out int[] None, out int[] None, bool Temp_bool_Variable, int[] Temp_int_Variable, bool Temp_bool_Variable, int[] Temp_int_Variable, bool Temp_bool_Variable, int[] Temp_int_Variable, bool Temp_bool_Variable, int[] Temp_int_Variable, int[] CallFunc_GetVehicleTypeSettingLists_OutVehicleBlacklist, int[] CallFunc_GetVehicleTypeSettingLists_OutVehicleWhitelist, int[] K2Node_Select_Default, int[] CallFunc_GetWeaponSettingLists_OutWeaponBlacklist, int[] CallFunc_GetWeaponSettingLists_OutWeaponWhitelist, int[] K2Node_Select_Default, int[] K2Node_Select_Default, int[] K2Node_Select_Default);// 0xe6e423e7a001
	void GetModeRoomUIType(out byte NewParam, int CallFunc_GetGameModeGroupID_ReturnValue, int CallFunc_GetGameModeID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0xe6e523e7a001
	static CustomRoomData GetRoomInfo(CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool CallFunc__S_PlayInEditor_bIsEditor);// 0xe6e623e7a001
	void IsPlayerLocalPendingKill(SCMPlayerState* Player, out bool Result, int CallFunc_Array_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0xe6e723e7a001
	static bool IsRoomOwner(const SCMPlayerState* Player, bool Temp_bool_Variable, bool CallFunc_IsRoomOwner_ReturnValue, bool Temp_bool_Variable, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, bool CallFunc__S_PlayInEditor_bIsEditor, bool CallFunc_EqualEqual_ByteByte_ReturnValue, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue);// 0xe6e823e7a001
	void Switch Mgmt UI Display(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue);// 0xe6e923e7a001
	void RemoveRoomUI(bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xe6ea23e7a001
	void Get Team Member Count(out int Result, byte Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default);// 0xe6eb23e7a001
	void TEMP Delayed Flag Update(const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, bool CallFunc_IsRoomHasMinimalSides_ReturnValue, bool CallFunc_IsRoomHasEnoughPlayers_ReturnValue, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue);// 0xe6ec23e7a001
	static void PreUpdateOB(FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SCMPlayerState*[] CallFunc_GetOBPlayers_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xe6ed23e7a001
	void Refresh All Teams on UI(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, byte CallFunc_GetModeRoomUIType_NewParam, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Not_PreBool_ReturnValue, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, SolarTeamInfo* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, TileView* CallFunc_Get_Active_TileView_Result, TileView* CallFunc_Get_Active_TileView_Result, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_CreateRoom_Management_Team_1M_C* CallFunc_Create_ReturnValue, UI_CreateRoom_Management_Team_2M_C* CallFunc_Create_ReturnValue, UI_CreateRoom_Management_Team_4M_C* CallFunc_Create_ReturnValue, int CallFunc_Get_Team_Member_Count_Result, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte K2Node_Select_Default);// 0xe6ee23e7a001
	static void Init CustomRoom Info(bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool CallFunc__S_PlayInEditor_bIsEditor, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int CallFunc_GetMatchRuleID_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_MatchRule CallFunc_TryGetRowData_ReturnValue, int K2Node_Select_Default, byte K2Node_Select_Default);// 0xe6ef23e7a001
	void Get Custom Room Mode(out byte RoomMode, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0xe6f023e7a001
	static void Get Mode Name Localization(out int Mode Local ID, out int Group Local ID, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int CallFunc_GetGameModeID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, const SolarTablesData_GameModeMain CallFunc_GetRowData_ReturnValue, int K2Node_Select_Default);// 0xe6f123e7a001
	void Refresh START in Top HUD(bool CallFunc_IsRoomHasMinimalSides_ReturnValue, bool CallFunc_IsRoomHasEnoughPlayers_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xe6f223e7a001
	void Create Room Manager Operate UI(byte CallFunc_GetModeRoomUIType_NewParam, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, byte CallFunc_Get_Custom_Room_Mode_RoomMode, int CallFunc_Conv_Int64ToInt_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, int CallFunc_Get_Mode_Name_Localization_Mode_Local_ID, int CallFunc_Get_Mode_Name_Localization_Group_Local_ID, UI_CreateRoom_Management_Main_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Main, bool K2Node_DynamicCast_bSuccess);// 0xe6f323e7a001
	void Create Room Manager HUD(SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_CreateRoom_HUD_C* K2Node_DynamicCast_AsUI_Create_Room_HUD, bool K2Node_DynamicCast_bSuccess);// 0xe6f423e7a001
	bool OnGameStart(bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xe6f523e7a001
	void Refresh All UI();// 0xe6f623e7a001
	void Manual Trigger Refresh(FString DEBUG Reason);// 0xe6f723e7a001
	void RefreshOB();// 0xe6f823e7a001
	void RefreshRoomData(CustomRoomData RoomData);// 0xe6f923e7a001
	void RefreshSideUI(FString SideName);// 0xe67423e7a001
	void RefreshUI();// 0xe7c623e7a001
	void UnbaindAllEvents();// 0x155c323e7a001
	void RefreshSidePlayers(SCMPlayerState* Player);// 0xe6fb23e7a001
	void OnClientRoomDataReady();// 0xe6fc23e7a001
	void OnPlayerRemovedFromRoom(const SCMPlayerState* Player, enum reason);// 0xe6fd23e7a001
	void BiascSystemDeady();// 0x155b623e7a001
	void ReceiveBeginPlay();// 0x8f9923c02eee
	void OnTournamentDealy();// 0xffffffff53a700c0
	static void ExecuteUbergraph_BP_CustomroomManager(int EntryPoint, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, FString K2Node_CustomEvent_DEBUG_Reason, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, CustomRoomData K2Node_CustomEvent_RoomData, FString K2Node_CustomEvent_SideName, GameJobManager* CallFunc_GetJobManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc___A_Bind_On_Basic_System_Ready_bReady, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* K2Node_CustomEvent_Player, bool CallFunc_IsInPreparation_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_Reason, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int K2Node_Select_Default, FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc__S_PlayInEditor_bIsEditor, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Divide_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsServer_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, UserWidget* CallFunc_ShowSolarWidget_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, CommonTwiceConfirmWindowOneBtn_C* K2Node_DynamicCast_AsCommon_Twice_Confirm_Window_One_Btn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xe7ae23e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_HUD_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* Anim_DesktopLayout;//[Offset: 0x350, Size: 0x8]
	UI_Component_Btn_C* Btn_GameStart;//[Offset: 0x358, Size: 0x8]
	UI_Component_Btn_C* Btn_RoomManage;//[Offset: 0x360, Size: 0x8]
	UI_KeyPrompt_C* Panel_Shortcut;//[Offset: 0x368, Size: 0x8]
	UI_KeyPrompt_C* Panel_Shortcut;//[Offset: 0x370, Size: 0x8]
	HorizontalBox* panel_spectators;//[Offset: 0x378, Size: 0x8]
	UI_CreateRoom_HUD_Prize_C* PrizePool;//[Offset: 0x380, Size: 0x8]
	SolarRichTextBlock* Txt_Countdown;//[Offset: 0x388, Size: 0x8]
	SolarTextBlock* Txt_Spectators;//[Offset: 0x390, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_Manage;//[Offset: 0x398, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_Start;//[Offset: 0x3a0, Size: 0x8]
	bool bIsOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	FString GetModuleName();// 0xe76923e7a001
	void SetOnwerMode(bool IsOwner, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue);// 0xe76a23e7a001
	void ShowSpectator(bool Show);// 0xe76b23e7a001
	void Construct();// 0xe76c23e7a001
	void Start Ticking();// 0xe76d23e7a001
	void TikTok();// 0xe76e23e7a001
	void BndEvt__UI_Component_Btn_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature();// 0xe76f23e7a001
	void BndEvt__UI_Component_Btn_1_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature();// 0xe77023e7a001
	void Update Button State(bool Can Start);// 0xe77123e7a001
	void OnRoomInfoSwitch();// 0xe6db23e7a001
	void OnStartGame();// 0xb0c423e7a00b
	void Event_RoomInfoSwitch();// 0xc7d723e7a008
	void Event_GameStart();// 0xe7e023e7a001
	void OnShow();// 0x155be23e7a001
	void OnHide();// 0xe77523e7a001
	static void ExecuteUbergraph_UI_CreateRoom_HUD(int EntryPoint, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, byte Temp_byte_Variable, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, byte Temp_byte_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_ListenForInputActionEx_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_ListenForInputActionEx_ReturnValue, bool K2Node_CustomEvent_Can_Start, byte K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsPlatformDesktop_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, bool CallFunc_IsAvailable_Availble, FText CallFunc___________, FString CallFunc_Conv_TextToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xe7c423e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Component_Btn_C.ComponentButtonBaseWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x350, Size: 0x8]
	WidgetAnimation* Anim_Remind;//[Offset: 0x358, Size: 0x8]
	WidgetAnimation* Anim_Hold;//[Offset: 0x360, Size: 0x8]
	WidgetAnimation* Anim_Hover;//[Offset: 0x368, Size: 0x8]
	SolarImage* Img_Btn;//[Offset: 0x370, Size: 0x8]
	SolarImage* Img_Icon;//[Offset: 0x378, Size: 0x8]
	SolarImage* img_Mask;//[Offset: 0x380, Size: 0x8]
	SolarImage* Img_Shadow;//[Offset: 0x388, Size: 0x8]
	CanvasPanel* Panel_Press;//[Offset: 0x390, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x398, Size: 0x8]
	SizeBox* Size_Btn;//[Offset: 0x3a0, Size: 0x8]
	SizeBox* Size_Icon;//[Offset: 0x3a8, Size: 0x8]
	SolarTextBlock* Text_Btn;//[Offset: 0x3b0, Size: 0x8]
	NamedSlot* WidgetSlot;//[Offset: 0x3b8, Size: 0x8]
	byte BtnType;//[Offset: 0x3c0, Size: 0x1]
	byte BtnState;//[Offset: 0x3c1, Size: 0x1]
	Vector2D BtnSize;//[Offset: 0x3c4, Size: 0x8]
	bool IsUseBtnImag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 0x1]
	bool IsUseText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 0x1]
	FString Text;//[Offset: 0x3d0, Size: 0x10]
	bool IsUseLocID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	int LocID;//[Offset: 0x3e4, Size: 0x4]
	enum PreviewLang;//[Offset: 0x3e8, Size: 0x1]
	delegate OnClicked;//[Offset: 0x3f0, Size: 0x10]
	delegate OnPressed;//[Offset: 0x400, Size: 0x10]
	delegate OnReleased;//[Offset: 0x410, Size: 0x10]
	bool IsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	Object* Icon;//[Offset: 0x428, Size: 0x8]
	Vector2D Icon_Size;//[Offset: 0x430, Size: 0x8]
	void IsAvailable(out bool Availble, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x4d23bfa0be
	static void SetBtnTxt(FString NewParam, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2e26c1708d842e9d
	void SetBtnState(byte State, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x10b7623e7a001
	FString GetLocalText(FString CallFunc_GetLocalText_ReturnValue);// 0x10b7523e7a001
	void PreConstruct(bool IsDesignTime);// 0x3fffd7a3bfe00b
	void Construct();// 0xffffff9723bfa007
	void Update(bool IsDesignTime);// 0x10df523bfa001
	void SetBtnText(FString None, byte None);// 0x10b7123e7a001
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0xfffffffb23bfa06c
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();// 0x10b6d23e7a001
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_8_OnButtonReleasedEvent__DelegateSignature();// 0xffffff8f23bfa044
	void OnLocLangChanged(Object* Publisher, Object* Payload, out const FString[] MetaData);// 0x1804174243fa241
	void ExecuteUbergraph_UI_Component_Btn(int EntryPoint, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool K2Node_Event_IsDesignTime, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_IsDesignTime, FString K2Node_CustomEvent_____, byte K2Node_CustomEvent_____, FString CallFunc_GetLocalText_ReturnValue, FString K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, enum K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, enum K2Node_Select_Default, LinearColor K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, enum K2Node_Select_Default, Object* K2Node_CustomEvent_Publisher, Object* K2Node_CustomEvent_Payload, const FString[] K2Node_CustomEvent_Metadata);// 0x1627a23e7a008
	void OnReleased__DelegateSignature();// 0x6188f23c4a100
	void OnClicked__DelegateSignature();// 0x2dffbd23eea02e
	void OnPressed__DelegateSignature();// 0x10a8723e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: ComponentButtonBaseWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarButton* OperateArea;//[Offset: 0x348, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarImage.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x138, Size: 0x98]
	byte FillType;//[Offset: 0x1d0, Size: 0x1]
	SolarImageProgressInfo ImageProgressInfo;//[Offset: 0x1d8, Size: 0x20]
	delegate BrushDelegate;//[Offset: 0x1f8, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x208, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x218, Size: 0x10]
	bool bEnableLocImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	FText ImagePath;//[Offset: 0x230, Size: 0x18]
	int LocTextID;//[Offset: 0x248, Size: 0x4]
	enum PreviewLang;//[Offset: 0x24c, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x250, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x260, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x270, Size: 0x10]
	void UpdateImageAsync(int NewLocTextID);// 0x4e9723bfa041
	void UpdateImage(int NewLocTextID);// 0x4e9623bfa041
	void SetOpacity(float InOpacity);// 0x4e9523bfa041
	void SetImageProgressInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x4e9423bfa041
	void SetImageProgressByInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x4e9323bfa041
	void SetImageProgress(float InProgress);// 0x4e9223bfa041
	void SetImageFillType(byte InImageFillType);// 0x4e9123bfa041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4e9023bfa041
	void SetBrushTintColor(SlateColor TintColor);// 0x4e8f23bfa041
	void SetBrushSize(Vector2D DesiredSize);// 0x4e8e23bfa041
	void SetBrushResourceObject(Object* ResourceObject);// 0x4e8d23bfa041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x4e8c23bfa041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x4e8b23bfa041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x4e8a23bfa041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x4e8923bfa041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x4e8823bfa041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x4e8723bfa041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x4e8623bfa041
	void SetBrush(out const SlateBrush InBrush);// 0x4e8523bfa041
	float GetImageProgressByInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x4e8423bfa041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x4e8323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarImageProgressInfo
	byte ProgressType;//[Offset: 0x0, Size: 0x1]
	byte LineProgressDir;//[Offset: 0x1, Size: 0x1]
	byte QuaterProgressPrivot;//[Offset: 0x2, Size: 0x1]
	byte HalfProgressPrivot;//[Offset: 0x3, Size: 0x1]
	float CircleProgressInitDegree;//[Offset: 0x4, Size: 0x4]
	bool bInvertProgressDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float Progress;//[Offset: 0xc, Size: 0x4]
	Material* Material;//[Offset: 0x10, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object
<----------Generated by SSpawner v1.0.2---------->


Class: UI_KeyPrompt_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* BtnKey;//[Offset: 0x268, Size: 0x8]
	SolarAdapterWidget* Panel_Shortcut;//[Offset: 0x270, Size: 0x8]
	byte None;//[Offset: 0x278, Size: 0x1]
	FString ActionName;//[Offset: 0x280, Size: 0x10]
	byte None;//[Offset: 0x290, Size: 0x1]
	bool bEnableBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	bool bDisableEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 0x1]
	delegate OnClicked;//[Offset: 0x298, Size: 0x10]
	bool bEnableInputSettingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	int ActionDescLocID;//[Offset: 0x2ac, Size: 0x4]
	void GetSplitActionName(FString SourceString, out FString NewParam, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue);// 0xffffffff0893a3d0
	void BuildOverrideActionDescParam(int LocTextID, out WidgetOverrideParam WidgetOverrideParam, WidgetOverrideParam K2Node_MakeStruct_WidgetOverrideParam);// 0xe9ad23e7a001
	static void BuildOverrideParams(out const WidgetOverrideParam[] Array, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, WidgetOverrideParam CallFunc_BuildOverrideActionDescParam_WidgetOverrideParam, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_GetSplitActionName_NewParam, WidgetOverrideParam K2Node_MakeStruct_WidgetOverrideParam, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_InputMapping CallFunc_TryGetRowData_ReturnValue, WidgetOverrideParam CallFunc_BuildOverrideActionDescParam_WidgetOverrideParam, const WidgetOverrideParam[] K2Node_MakeArray_Array);// 0xe9ae23e7a001
	void SetOperationType(byte Type, UserWidget* CallFunc_GetAdapteeWidget_ReturnValue, UI_KeyMappingPrompt_C* K2Node_DynamicCast_AsUI_Key_Mapping_Prompt, bool K2Node_DynamicCast_bSuccess);// 0x4080d623ffe0cd
	void PreConstruct(bool IsDesignTime);// 0x38ffbf23eea065
	void BndEvt__BtnKey_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xe9ac23e7a001
	static void ExecuteUbergraph_UI_KeyPrompt(int EntryPoint, bool K2Node_Event_IsDesignTime, WidgetOverrideParam[] CallFunc_BuildOverrideParams_Array, UserWidget* CallFunc_GetAdapteeWidget_ReturnValue, UI_KeyMappingPrompt_C* K2Node_DynamicCast_AsUI_Key_Mapping_Prompt, bool K2Node_DynamicCast_bSuccess);// 0x1692f23e7a008
	void OnClicked__DelegateSignature();// 0x994b23e7a009
<----------Generated by SSpawner v1.0.2---------->


Class: UI_KeyMappingPrompt_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* Anim_Press;//[Offset: 0x350, Size: 0x8]
	Overlay* Empty;//[Offset: 0x358, Size: 0x8]
	Overlay* EmptyDisable;//[Offset: 0x360, Size: 0x8]
	UI_Component_Gamepad_C* Gamepad;//[Offset: 0x368, Size: 0x8]
	HorizontalBox* HorizontalLayout;//[Offset: 0x370, Size: 0x8]
	SizeBox* Icon;//[Offset: 0x378, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x380, Size: 0x8]
	UI_Component_Keyboard_C* Keyboard;//[Offset: 0x388, Size: 0x8]
	WidgetSwitcher* KeySwitcher;//[Offset: 0x390, Size: 0x8]
	UI_Component_Mouse_C* Mouse;//[Offset: 0x398, Size: 0x8]
	Overlay* Overlay_Root;//[Offset: 0x3a0, Size: 0x8]
	SolarTextBlock* Txt_Hold;//[Offset: 0x3a8, Size: 0x8]
	TextBlock* Txt_Key;//[Offset: 0x3b0, Size: 0x8]
	SolarTextBlock* Txt_Shortcut;//[Offset: 0x3b8, Size: 0x8]
	VerticalBox* VerticalLayOut;//[Offset: 0x3c0, Size: 0x8]
	byte Style;//[Offset: 0x3c8, Size: 0x1]
	bool bDisableEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 0x1]
	bool bEnableInputSettingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 0x1]
	FString GetModuleName();// 0xea3e23e7a001
	void SetEnableInputSettingHide(bool bEnable);// 0x997e23e7a008
	void SetOperationTypeImpl(byte InType, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0xbc4123e7a008
	void RefreshEmptyDisplay(bool bInEmpty, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, HorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue);// 0xea4023e7a001
	void SetEnableEmptyDispaly(bool bEnable);// 0x168f723e7a008
	void SetStyle(byte Style, Margin Temp_struct_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, byte Temp_byte_Variable, Margin Temp_struct_Variable, Margin Temp_struct_Variable, Margin Temp_struct_Variable, byte Temp_byte_Variable, PanelWidget* Temp_object_Variable, byte Temp_byte_Variable, Widget* Temp_object_Variable, byte Temp_byte_Variable, Widget* Temp_object_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, enum K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, VerticalBoxSlot* CallFunc_SlotAsVerticalBoxSlot_ReturnValue, Margin K2Node_MakeStruct_Margin, HorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue, Margin K2Node_Select_Default, Margin Temp_struct_Variable, Margin Temp_struct_Variable, byte Temp_byte_Variable, PanelWidget* K2Node_Select_Default, Margin K2Node_Select_Default, Widget* K2Node_Select_Default, Widget* K2Node_Select_Default, PanelSlot* CallFunc_AddChild_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, VerticalBoxSlot* K2Node_DynamicCast_AsVertical_Box_Slot, bool K2Node_DynamicCast_bSuccess, VerticalBoxSlot* K2Node_DynamicCast_AsVertical_Box_Slot, bool K2Node_DynamicCast_bSuccess, HorizontalBoxSlot* K2Node_DynamicCast_AsHorizontal_Box_Slot, bool K2Node_DynamicCast_bSuccess, HorizontalBoxSlot* K2Node_DynamicCast_AsHorizontal_Box_Slot, bool K2Node_DynamicCast_bSuccess);// 0x1676523bfa041
	void OnChangeAdapterSlotWidgetParameters(out const WidgetOverrideParam[] Params);// 0xc37623c04e89
	void OnLoadAdapterSlotWidgetFinished();// 0xffffffff8b8ba380
	void PreConstruct(bool IsDesignTime);// 0x1690423e7a008
	void ExecuteUbergraph_UI_KeyMappingPrompt(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, const WidgetOverrideParam[] K2Node_Event_Params, FText CallFunc_GetText_ReturnValue, bool K2Node_Event_IsDesignTime, bool CallFunc_TextIsEmpty_ReturnValue, enum K2Node_Select_Default);// 0x16bf323e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Component_Gamepad_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* img_DoubleClick;//[Offset: 0x348, Size: 0x8]
	Image* img_Hold;//[Offset: 0x350, Size: 0x8]
	Image* Img_MainKey;//[Offset: 0x358, Size: 0x8]
	Image* Img_ModifierKey;//[Offset: 0x360, Size: 0x8]
	SolarImage* Img_PlusIcon;//[Offset: 0x368, Size: 0x8]
	Overlay* Overlay_Normal;//[Offset: 0x370, Size: 0x8]
	SizeBox* SizeBox_MainKey;//[Offset: 0x378, Size: 0x8]
	SizeBox* SizeBox_ModifierKey;//[Offset: 0x380, Size: 0x8]
	bool bCustomRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	FString ActionName;//[Offset: 0x390, Size: 0x10]
	FString GetModuleName();// 0x155f423e7a008
	void SetMainKeySelection();// 0x155f723e7a008
	void SetMainKeyNormal();// 0xe60a23e7a00b
	void GetGamepadIconByKey(Key InKey, out PaperSprite* GamepadIcon);// 0xe60923e7a00b
	void SetData(Key ModifierKey, Key MainKey, Key LocalMainKey, Key LocalModifierKey, PaperSprite* CallFunc_GetGamepadIconByKey_GamepadIcon, bool CallFunc_EqualEqual_KeyKey_ReturnValue, PaperSprite* CallFunc_GetGamepadIconByKey_GamepadIcon, bool CallFunc_EqualEqual_KeyKey_ReturnValue);// 0xcf2b23bfa001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Component_Keyboard_C.SolarComponentKeyWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x2a8, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x2b0, Size: 0x8]
	SolarImage* Img_PlusIcon;//[Offset: 0x2b8, Size: 0x8]
	WidgetSwitcher* KeyAndMouseSwitcher;//[Offset: 0x2c0, Size: 0x8]
	UI_Component_Mouse_C* Mouse;//[Offset: 0x2c8, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x2d0, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x2d8, Size: 0x8]
	TextBlock* Txt_Key;//[Offset: 0x2e0, Size: 0x8]
	TextBlock* Txt_Key;//[Offset: 0x2e8, Size: 0x8]
	bool Red;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool Yellow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	int Font_Size;//[Offset: 0x2f4, Size: 0x4]
	Vector2D BG_Size;//[Offset: 0x2f8, Size: 0x8]
	bool bCustomRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	TextBlock* NewVar;//[Offset: 0x308, Size: 0x8]
	FString GetModuleName();// 0x2e26c1708d842e9d
	static void BP_RefreshKeyboardUI(TextBlock* InTxtKey, Image* InImgBg, SizeBox* InSizeBox, Image* LocalImgBg, SizeBox* LocalSizeBox, TextBlock* LocalTxtKey, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue);// 0xfffffffed0979250
	void PreConstruct(bool IsDesignTime);// 0x99e823c0341e
	void Construct();// 0xea6023e7a001
	void ExecuteUbergraph_UI_Component_Keyboard(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xea4523e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: SolarComponentKeyWidget.UserWidget.Widget.Visual.Object
	FString ActionName;//[Offset: 0x260, Size: 0x10]
	FString KeyBoardText;//[Offset: 0x270, Size: 0x10]
	FString[] KeyBoardTextArray;//[Offset: 0x280, Size: 0x10]
	delegate UpdateKeyboardMappingDelegate;//[Offset: 0x290, Size: 0x10]
	void UpdateKeyboardMappingInternal(FString ModifyActionName);// 0x4c3d23bfa041
	void OnUpdateKeyboardMapping(out const <FString> ActionNames);// 0x4c3c23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Component_Mouse_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	CanvasPanel* Direction;//[Offset: 0x268, Size: 0x8]
	Image* Img_Mouse;//[Offset: 0x270, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8]
	byte Mouse;//[Offset: 0x280, Size: 0x1]
	bool HUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	FString ActionName;//[Offset: 0x288, Size: 0x10]
	bool bCustomRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	Vector2D Size;//[Offset: 0x29c, Size: 0x8]
	FString GetModuleName();// 0xea4823e7a001
	void SetData(Key KeySetting, out byte Type, out bool Succeed, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_Key_IsMouseButton_ReturnValue);// 0xfffffffed697e980
	void UpdateImage(byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, enum K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default);// 0x93f123c0341e
	void PreConstruct(bool IsDesignTime);// 0xea7323e7a001
	void ExecuteUbergraph_UI_Component_Mouse(int EntryPoint, byte Temp_byte_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool K2Node_Event_IsDesignTime, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default);// 0x94ff23e7a009
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_HUD_Prize_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* Anim_DesktopLayout;//[Offset: 0x350, Size: 0x8]
	WidgetAnimation* Anim_Fold_Expanded;//[Offset: 0x358, Size: 0x8]
	WidgetAnimation* Anim_Refresh_Folded;//[Offset: 0x360, Size: 0x8]
	UI_Component_Btn_C* Btn_Details;//[Offset: 0x368, Size: 0x8]
	SolarInputButton* Btn_Expand;//[Offset: 0x370, Size: 0x8]
	SolarInputButton* Btn_Fold;//[Offset: 0x378, Size: 0x8]
	Image* Img_Arrow;//[Offset: 0x380, Size: 0x8]
	Image* Img_Arrow;//[Offset: 0x388, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x390, Size: 0x8]
	Image* img_Btn_Bg;//[Offset: 0x398, Size: 0x8]
	Image* img_Btn_Bg;//[Offset: 0x3a0, Size: 0x8]
	Image* img_ExpandedBg;//[Offset: 0x3a8, Size: 0x8]
	Image* img_PlayerPrize;//[Offset: 0x3b0, Size: 0x8]
	Image* img_PlayerPrize;//[Offset: 0x3b8, Size: 0x8]
	Image* img_PlayerPrize;//[Offset: 0x3c0, Size: 0x8]
	Image* img_Prize;//[Offset: 0x3c8, Size: 0x8]
	Image* Img_Refresh_Light;//[Offset: 0x3d0, Size: 0x8]
	Image* Img_Refresh_Wipes;//[Offset: 0x3d8, Size: 0x8]
	WidgetSwitcher* Switcher_Prize;//[Offset: 0x3e0, Size: 0x8]
	SolarTextBlock* Txt_Prize;//[Offset: 0x3e8, Size: 0x8]
	SolarTextBlock* Txt_Prize;//[Offset: 0x3f0, Size: 0x8]
	SolarTextBlock* Txt_Prize;//[Offset: 0x3f8, Size: 0x8]
	SolarTextBlock* Txt_Prize;//[Offset: 0x400, Size: 0x8]
	SolarTextBlock* Txt_PrizePool;//[Offset: 0x408, Size: 0x8]
	int PrizeType;//[Offset: 0x410, Size: 0x4]
	FString GetModuleName();// 0xe9f023e7a001
	static void SetPrizeType(int PrizeType, int Temp_int_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, Object* Temp_object_Variable, Object* Temp_object_Variable, int Temp_int_Variable, Object* K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, int Temp_int_Variable, Object* K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default);// 0xbc3c23e7a008
	void PreConstruct(bool IsDesignTime);// 0xbc4923e7a008
	void ExecuteUbergraph_UI_CreateRoom_HUD_Prize(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xc76023e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: SolarInputButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SolarVirtualInput VirtualActionInput;//[Offset: 0x498, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: SolarVirtualInput
	enum InputBindType;//[Offset: 0x0, Size: 0x1]
	Key VirtualKey;//[Offset: 0x8, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_Management_Main_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* Anim_OB_Exit;//[Offset: 0x350, Size: 0x8]
	WidgetAnimation* Anim_OB_Enter;//[Offset: 0x358, Size: 0x8]
	WidgetAnimation* Enter_Anim;//[Offset: 0x360, Size: 0x8]
	UI_Component_Btn_C* Btn_Invite;//[Offset: 0x368, Size: 0x8]
	UI_Component_Btn_C* Btn_Setting;//[Offset: 0x370, Size: 0x8]
	SolarButton* Btn_SpectateList;//[Offset: 0x378, Size: 0x8]
	UI_Component_Btn_C* Btn_StartGame;//[Offset: 0x380, Size: 0x8]
	Button* Button_BanSwap;//[Offset: 0x388, Size: 0x8]
	SolarCheckBox* Guest_Invite;//[Offset: 0x390, Size: 0x8]
	SolarCheckBox* Guest_Swap;//[Offset: 0x398, Size: 0x8]
	HorizontalBox* HorizontalBox_SubGameModeInfo;//[Offset: 0x3a0, Size: 0x8]
	Overlay* MessageBox;//[Offset: 0x3a8, Size: 0x8]
	UI_Component_Option_C* Option_Invite;//[Offset: 0x3b0, Size: 0x8]
	UI_Component_Option_C* Option_Swap;//[Offset: 0x3b8, Size: 0x8]
	CanvasPanel* Panel_Guest;//[Offset: 0x3c0, Size: 0x8]
	CanvasPanel* Panel_Homeowner;//[Offset: 0x3c8, Size: 0x8]
	CanvasPanel* panel_Spectate;//[Offset: 0x3d0, Size: 0x8]
	ParticleSystemWidget* Par_Spark;//[Offset: 0x3d8, Size: 0x8]
	SolarRichTextBlock* RichText_Members;//[Offset: 0x3e0, Size: 0x8]
	UI_CreateRoom_Management_Solo_C* Solo;//[Offset: 0x3e8, Size: 0x8]
	WidgetSwitcher* Switcher_Mode;//[Offset: 0x3f0, Size: 0x8]
	UI_CreateRoom_Management_TDM_C* TDM;//[Offset: 0x3f8, Size: 0x8]
	TileView* TileView_Player_Info_1M;//[Offset: 0x400, Size: 0x8]
	TileView* TileView_Player_Info_2M;//[Offset: 0x408, Size: 0x8]
	TileView* TileView_Player_Info_4M;//[Offset: 0x410, Size: 0x8]
	SolarTextBlock* Txt_Countdown;//[Offset: 0x418, Size: 0x8]
	SolarTextBlock* Txt_Map;//[Offset: 0x420, Size: 0x8]
	SolarTextBlock* Txt_Members;//[Offset: 0x428, Size: 0x8]
	SolarTextBlock* Txt_Mode;//[Offset: 0x430, Size: 0x8]
	SolarTextBlock* Txt_Password;//[Offset: 0x438, Size: 0x8]
	SolarTextBlock* Txt_RankedMatch;//[Offset: 0x440, Size: 0x8]
	SolarTextBlock* Txt_Room_ID;//[Offset: 0x448, Size: 0x8]
	SolarRichTextBlock* Txt_Viewer_Num;//[Offset: 0x450, Size: 0x8]
	UI_Component_ReturnBtn_C* UI_Component_ReturnBtn;//[Offset: 0x458, Size: 0x8]
	UI_CreateRoom_SocialList_C* UI_CreateRoom_SocialList;//[Offset: 0x460, Size: 0x8]
	UI_CreateRoom_Management_Team_OB_C* UI_Management_OB;//[Offset: 0x468, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_Down;//[Offset: 0x470, Size: 0x8]
	byte Team_Member_Count;//[Offset: 0x478, Size: 0x1]
	int Max Member Count;//[Offset: 0x47c, Size: 0x4]
	FString Selected Player;//[Offset: 0x480, Size: 0x10]
	int SelcetedPos;//[Offset: 0x490, Size: 0x4]
	FString Selected Side;//[Offset: 0x498, Size: 0x10]
	UI_CreateRoom_Management_Player_Info_C* SelectedInfoWidget;//[Offset: 0x4a8, Size: 0x8]
	FString ToDeletePlayer;//[Offset: 0x4b0, Size: 0x10]
	int MaxOBPlayerCount;//[Offset: 0x4c0, Size: 0x4]
	bool SelectedOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 0x1]
	int NowOBPlayerCount;//[Offset: 0x4c8, Size: 0x4]
	UI_CreateRoom_Management_Team_C*[] All Team Widgets;//[Offset: 0x4d0, Size: 0x10]
	Object* _TileViewInitItem;//[Offset: 0x4e0, Size: 0x8]
	Object* _TileViewInitWidget;//[Offset: 0x4e8, Size: 0x8]
	delegate OnEnableInviteChanged;//[Offset: 0x4f0, Size: 0x10]
	byte RoomMode;//[Offset: 0x500, Size: 0x1]
	byte ModeRoomUIType;//[Offset: 0x501, Size: 0x1]
	FString GetModuleName();// 0x155c223e7a001
	void SetModeRoomUI(byte ModeRoomUIType, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Conv_ByteToInt_ReturnValue, UI_CreateRoom_Management_Team_C*[] CallFunc_GetTeams_Teams, UI_CreateRoom_Management_Team_C*[] CallFunc_GetTeams_Teams);// 0x155bd23e7a001
	void OnConfirmKickPlayerOut(SCMPlayerState* Player, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue);// 0xe7b223e7a001
	void RestoreSelectedWidgets(bool CallFunc_IsValid_ReturnValue);// 0xe7af23e7a001
	void RestoreSelectedParams();// 0xe7b423e7a001
	void CallLuaShowKickConfirmWindow(SCMPlayerState* PS);// 0xe7b123e7a001
	void IsGuestSwapOpen(out bool bIsOpen, bool CallFunc_IsChecked_ReturnValue);// 0xe7b623e7a001
	void CallLuaOnGuestInviteChanged(bool bIsChecked);// 0x155c123e7a001
	void RefreshGuestData(bool bEnableSwap, bool bEnableInvite, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0xc7e023e7a008
	void Get Active TileView(out TileView* Result, byte Temp_byte_Variable, TileView* K2Node_Select_Default);// 0xe7b523e7a001
	static void Trim Pending Removal Players(out SCMPlayerState*[] Player List, out SCMPlayerState*[] Trimmed Player List, SCMPlayerState*[] LOCAL Player List, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayerLocalPendingKill_Result, int CallFunc_Array_Add_ReturnValue);// 0xe7b723e7a001
	void PlayEnter(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0xe7b823e7a001
	void Set Room Mode(byte RoomMode, bool K2Node_SwitchEnum_CmpSuccess);// 0xe7bb23e7a001
	void GetPlayerByIDAndOB(FString PlayerId, bool bIsOB, out SCMPlayerState* Player, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SCMPlayerState* CallFunc_FindOBPlayerByPlayerID_ReturnValue);// 0xe7b923e7a001
	void RefreshOB(SCMPlayerState*[] CallFunc_GetOBPlayers_ReturnValue, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xe7ba23e7a001
	void Init OB(int OBPlayerCount, bool CallFunc_Greater_IntInt_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xe7bc23e7a001
	void Update Button State(bool Can Start, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte K2Node_Select_Default);// 0xe7bd23e7a001
	void State Team();// 0xe7c123e7a001
	static void Init Room Mgmt UI(byte Team Type, FString Master Name, FString Room PW, FString Room ID, int ModeName LocalID, int ModeGroup LocalID, int MaxOBPlayerCount, byte RoomMode, byte ModeRoomUIType, FText Temp_text_Variable, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText Temp_text_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, const <FString,FString> Temp_string_Variable, const <FString,FString> Temp_string_Variable, bool K2Node_SwitchEnum_CmpSuccess, FText Temp_text_Variable, byte Temp_byte_Variable, FText K2Node_Select_Default, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, enum K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xe7bf23e7a001
	void PreConstruct(bool IsDesignTime);// 0xe7dd23e7a001
	void Start Ticking();// 0xe7c023e7a001
	void TikTok();// 0xe7c223e7a001
	void OnMemberCountChanged(int NowCount, int MaxCount, bool Can Start);// 0xe7c323e7a001
	void BndEvt__Btn_StartGame_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature();// 0xe77723e7a001
	void BndEvt__TileView_Player_Info_K2Node_ComponentBoundEvent_2_OnListEntryInitializedDynamic__DelegateSignature(Object* Item, UserWidget* Widget);// 0xe7c523e7a001
	void BndEvt__TileView_Player_Info_K2Node_ComponentBoundEvent_4_OnListEntryGeneratedDynamic__DelegateSignature(UserWidget* Widget);// 0xffffffff53a6fc60
	void InitDeletePanel();// 0xe7d523e7a001
	void ALL_WIDGET Selection(bool Selection is OB, UI_CreateRoom_Management_Player_Info_C* SelectedInfoWidget);// 0xd6e923e7a001
	void ALL_WIDGET Deselection();// 0xe7cf23e7a001
	void ALL_WIDGET Update();// 0xe7ca23e7a001
	void BndEvt__TileView_Player_Info_2M_K2Node_ComponentBoundEvent_5_OnListEntryInitializedDynamic__DelegateSignature(Object* Item, UserWidget* Widget);// 0x2dffbd23eea02e
	void BndEvt__TileView_Player_Info_4M_K2Node_ComponentBoundEvent_6_OnListEntryInitializedDynamic__DelegateSignature(Object* Item, UserWidget* Widget);// 0xc51423e7a008
	void BndEvt__TileView_Player_Info_2M_K2Node_ComponentBoundEvent_7_OnListEntryGeneratedDynamic__DelegateSignature(UserWidget* Widget);// 0xd62323e7a001
	void BndEvt__TileView_Player_Info_4M_K2Node_ComponentBoundEvent_8_OnListEntryGeneratedDynamic__DelegateSignature(UserWidget* Widget);// 0xe7dc23e7a001
	void BndEvt__Option_Swap_K2Node_ComponentBoundEvent_12_OnOptionCheckStateChanged__DelegateSignature(bool bIsChecked);// 0xe7cd23e7a001
	void BndEvt__Option_Invite_K2Node_ComponentBoundEvent_13_OnOptionCheckStateChanged__DelegateSignature(bool bIsChecked);// 0xe7ce23e7a001
	void BndEvt__Button_BanSwap_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();// 0xe7c923e7a001
	void BndEvt__Guest_Invite_K2Node_ComponentBoundEvent_9_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0xe7cb23e7a001
	void Side_WIDGET Update(FString Side);// 0xe7db23e7a001
	void BndEvt__UI_Component_ReturnBtn_K2Node_ComponentBoundEvent_11_OnClicked__DelegateSignature();// 0xe7cc23e7a001
	void OnShow();// 0xe7d723e7a001
	void OnEvnetCloseAction();// 0x6fe3ba6abfa000
	void ReceiveHide();// 0xffffffff53a745e0
	void BindTeams(out const UI_CreateRoom_Management_Team_C*[] Teams);// 0xe7da23e7a001
	void BindSimpleTeam(UI_CreateRoom_Management_Team_C* Team);// 0xe7c723e7a001
	void OB UI EventBinding();// 0x2dffbd23eea02e
	void Trigger Flag Update();// 0xe7d223e7a001
	void OnDeleteClicked(FString Clicked Player, FString Clicked Side);// 0xe7be23e7a001
	void OnSlotClicked(FString Clicked Player, FString Clicked Side, bool Is OB, int PosIndex, UI_CreateRoom_Management_Team_C* TeamWidget, UI_CreateRoom_Management_Player_Info_C* InfoWidget);// 0xc83223e7a008
	static void ExecuteUbergraph_UI_CreateRoom_Management_Main(int EntryPoint, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool K2Node_Event_IsDesignTime, int K2Node_CustomEvent_NowCount, int K2Node_CustomEvent_MaxCount, bool K2Node_CustomEvent_Can_Start, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, Object* K2Node_ComponentBoundEvent_Item, UserWidget* K2Node_ComponentBoundEvent_Widget, UserWidget* K2Node_ComponentBoundEvent_Widget, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_CustomEvent_Selection_is_OB, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_SelectedInfoWIdget, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UI_CreateRoom_Management_Team_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Team, bool K2Node_DynamicCast_bSuccess, UI_CreateRoom_Management_Team_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Team, bool K2Node_DynamicCast_bSuccess, Object* K2Node_ComponentBoundEvent_Item, UserWidget* K2Node_ComponentBoundEvent_Widget, Object* K2Node_ComponentBoundEvent_Item, UserWidget* K2Node_ComponentBoundEvent_Widget, UI_CreateRoom_Management_Team_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Team, bool K2Node_DynamicCast_bSuccess, UserWidget* K2Node_ComponentBoundEvent_Widget, UserWidget* K2Node_ComponentBoundEvent_Widget, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_ComponentBoundEvent_bIsChecked, FString K2Node_CustomEvent_Side, int Temp_int_Array_Index_Variable, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, FText CallFunc___________, bool K2Node_SwitchEnum_CmpSuccess, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, const UI_CreateRoom_Management_Team_C*[] K2Node_CustomEvent_Teams, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UI_CreateRoom_Management_Team_C* K2Node_CustomEvent_Team, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString K2Node_CustomEvent_Clicked_Player, FString K2Node_CustomEvent_Clicked_Side, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_CustomEvent_Clicked_Player, FString K2Node_CustomEvent_Clicked_Side, bool K2Node_CustomEvent_Is_OB, int K2Node_CustomEvent_PosIndex, UI_CreateRoom_Management_Team_C* K2Node_CustomEvent_TeamWidget, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_InfoWidget, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_ListenForInputActionEx_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_BooleanAND_ReturnValue, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item);// 0xc8d423e7a008
	void OnEnableInviteChanged__DelegateSignature(bool bEnable);// 0x156d623e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	bool Team_Owner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x351, Size: 0x1]
	FString SideName;//[Offset: 0x358, Size: 0x10]
	FString[] SolarPlayerID;//[Offset: 0x368, Size: 0x10]
	byte Initial State;//[Offset: 0x378, Size: 0x1]
	bool HUD Initialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1]
	bool bIsOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a, Size: 0x1]
	UI_CreateRoom_Management_Player_Info_C*[] Player Info Widget List;//[Offset: 0x380, Size: 0x10]
	int MaxOBCount;//[Offset: 0x390, Size: 0x4]
	delegate OnSlotClicked;//[Offset: 0x398, Size: 0x10]
	delegate OnDeleteClicked;//[Offset: 0x3a8, Size: 0x10]
	delegate OnTeamUpdated;//[Offset: 0x3b8, Size: 0x10]
	FString Room Master Player ID;//[Offset: 0x3c8, Size: 0x10]
	byte RoomMode;//[Offset: 0x3d8, Size: 0x1]
	void IsPreJobInThePos(out SCMPlayerState*[] PreJob, int Pos, out bool _Have, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xb7e623e7a008
	void IsPlayerInThePos(out SCMPlayerState*[] PS, int Pos, out bool _Have, out SCMPlayerState* _OutPS, bool _IsHave, SCMPlayerState* _PS, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xe88823e7a001
	void CanBeSelected(FString SelectedPlayer, out bool bResult, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xe89823e7a001
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0xe84923e7a001
	void InitOBCount(int count, byte RoomMode, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Texture2D* CallFunc_Get_Portrait_from_Avatar_ID_Portrait_Texture, int CallFunc_Array_Length_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x92a723e7a008
	static void Try Update Team Widget(out SCMPlayerState*[] Updated Player List, out UI_CreateRoom_Management_Player_Info_C*[] Player Info Widget List, SCMPlayerState* _CACHE_PS, bool _CACHE_Have, bool _CACHE_IsPreJoin, int _CACHE_PreJoinedNum, int _CACHE_PosInTeam, bool _CACHE Is Owner, FString _CACHE Player ID, FText _CACHE Player Name, bool Have New Player, FString[] Player ID Array, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, SCMPlayerState* CallFunc_Array_Get_Item, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsPreJoinPlayer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, byte Temp_byte_Variable, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString Temp_string_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, SolarTextBlock* CallFunc_Get_SideText_by_Panel_Target_Panel, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Len_ReturnValue, bool K2Node_Select_Default, int Temp_int_Variable, FString K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsPreJoinPlayer_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_IsPlayerInThePos__Have, SCMPlayerState* CallFunc_IsPlayerInThePos__OutPS, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, FString CallFunc_SelectString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x928723e7a008
	void Get SideText by Panel(out SolarTextBlock* Target Panel);// 0xe84c23e7a001
	void Init Data(FString Side Name, byte Init State);// 0x94ab23e7a008
	void Set State(bool Team Owner, bool Locked, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, Widget* CallFunc_Get_UI_Refs_from_Panel_Horizontal_Box_Ref, WidgetSwitcher* CallFunc_Get_UI_Refs_from_Panel_WidgetSwitcher_IsOwner, bool CallFunc_IsValid_ReturnValue, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0xe89d23e7a001
	void BP_OnEntryReleased();// 0xffffff8f23bfa000
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x919823e7a008
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0xd3c523bfa001
	void OnListItemObjectSet(Object* ListItemObject);// 0xe8a423e7a001
	void PreConstruct(bool IsDesignTime);// 0xb64423e7a008
	void Construct();// 0x3f5eee0662f003f2
	void Update Team UI(out const SCMPlayerState*[] Team Players);// 0xb56423e7a008
	void Do Deselection();// 0x4e8f580f24d8a000
	void Portrait Clicked(FString Solar Player ID, int PosIndex, UI_CreateRoom_Management_Player_Info_C* InfoWidget);// 0xe88023e7a001
	void Delete Clicked(FString Solar Player ID);// 0xe85223e7a001
	void Do Selection(bool SelectedOB, UI_CreateRoom_Management_Player_Info_C* SelectedInfoWidget, FString SelectedSide);// 0x272e223e7a001
	void Init OB UI();// 0x1572b23e7a001
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team(int EntryPoint, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool K2Node_Event_bIsExpanded, bool K2Node_Event_bIsSelected, Object* K2Node_Event_ListItemObject, bool K2Node_Event_IsDesignTime, const SCMPlayerState*[] K2Node_CustomEvent_Team_Players, FString K2Node_CustomEvent_Solar_Player_ID, int K2Node_CustomEvent_PosIndex, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_InfoWidget, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_CustomEvent_Solar_Player_ID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_CustomEvent_SelectedOB, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_SelectedInfoWIdget, FString K2Node_CustomEvent_SelectedSide, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6188f23c4a100
	void OnTeamUpdated__DelegateSignature();// 0xe8a323e7a001
	void OnDeleteClicked__DelegateSignature(FString Clicked Player, FString Clicked Side);// 0xd58d23bfa001
	void OnSlotClicked__DelegateSignature(FString Clicked Player, FString Clicked Side, bool Is OB, int PosIndex, UI_CreateRoom_Management_Team_C* TeamWidget, UI_CreateRoom_Management_Player_Info_C* InfoWidget);// 0xe8bc23e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_Management_Player_Info_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	Button* Btn_Delete;//[Offset: 0x350, Size: 0x8]
	Button* Btn_Portrait;//[Offset: 0x358, Size: 0x8]
	SolarImage* Img_Frame;//[Offset: 0x360, Size: 0x8]
	SolarImage* Img_Owner;//[Offset: 0x368, Size: 0x8]
	SolarImage* Img_Portrait;//[Offset: 0x370, Size: 0x8]
	SolarImage* Img_Selected;//[Offset: 0x378, Size: 0x8]
	Overlay* Overlay_Change;//[Offset: 0x380, Size: 0x8]
	Overlay* Overlay_Closed;//[Offset: 0x388, Size: 0x8]
	CanvasPanel* Overlay_Delete;//[Offset: 0x390, Size: 0x8]
	Overlay* Overlay_Locked;//[Offset: 0x398, Size: 0x8]
	Overlay* Overlay_Owner;//[Offset: 0x3a0, Size: 0x8]
	Overlay* Overlay_Portrait;//[Offset: 0x3a8, Size: 0x8]
	Overlay* overlay_yourself;//[Offset: 0x3b0, Size: 0x8]
	CanvasPanel* Panel_Name;//[Offset: 0x3b8, Size: 0x8]
	SolarTextBlock* Txt_PlayerName;//[Offset: 0x3c0, Size: 0x8]
	SolarTextBlock* Txt_YourSelf;//[Offset: 0x3c8, Size: 0x8]
	UI_Anim_Waiting_C* UI_Anim_Waiting;//[Offset: 0x3d0, Size: 0x8]
	UI_Component_PlayerHead_C* UI_Component_PlayerHead;//[Offset: 0x3d8, Size: 0x8]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	bool Owner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 0x1]
	bool Change_Btn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e3, Size: 0x1]
	bool Delete_Btn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 0x1]
	FString Current_Player_ID;//[Offset: 0x3e8, Size: 0x10]
	UI_CreateRoom_Management_Team_C* Team UI Ref;//[Offset: 0x3f8, Size: 0x8]
	bool Yourself;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	bool Closed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 0x1]
	bool Waiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x402, Size: 0x1]
	int PosIndex;//[Offset: 0x404, Size: 0x4]
	byte RoomMode;//[Offset: 0x408, Size: 0x1]
	FString GetModuleName();// 0xe89c23e7a001
	void IsSoloMode(out bool bIsSoloMode, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetModeRoomUIType_NewParam, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0xb59623e7a008
	void RestoreSelcetion();// 0xb59423e7a008
	void SetSelectedState(bool bSelected, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0xe8e223e7a001
	void SetDeleteState(bool bDelete, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0x949123e7a008
	void SetChangeState(bool bChange, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0xba1b23e7a008
	void RefreshState(bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0xe89b23e7a001
	void CallLuaRefreshByPS(SCMPlayerState* PS);// 0xe83c23e7a001
	void GetClickedEnable(out bool Enable, bool CallFunc_IsSoloMode_bIsSoloMode, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x6188f23c4a100
	void Setup State(bool Locked, bool Selected, bool Owner, bool Change_Btn, bool Delete_Btn, bool Yourself, bool Closed, bool Waiting);// 0xffffff8f23bfa000
	void BP_OnEntryReleased();// 0x1570923e7a008
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0xc66223e7a008
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0xd7d523bfa001
	void OnListItemObjectSet(Object* ListItemObject);// 0x271cd23e7a001
	void PreConstruct(bool IsDesignTime);// 0x263bd23bfa001
	void BndEvt__Btn_Portrait_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x272df23e7a001
	void BndEvt__Btn_Delete_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x9f123bfa002
	static void ExecuteUbergraph_UI_CreateRoom_Management_Player_Info(int EntryPoint, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_Event_bIsExpanded, bool K2Node_Event_bIsSelected, Object* K2Node_Event_ListItemObject, bool K2Node_Event_IsDesignTime, bool CallFunc_GetClickedEnable_Enable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x942223e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Anim_Waiting_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* Anim_Loop;//[Offset: 0x350, Size: 0x8]
	void PreConstruct(bool IsDesignTime);// 0xffffff9223bfa002
	void Construct();// 0xe99b23e7a001
	void ExecuteUbergraph_UI_Anim_Waiting(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x16bec23e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Component_PlayerHead_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	SolarButton* Btn_ShowCard;//[Offset: 0x350, Size: 0x8]
	CanvasPanel* Canvas_Frame;//[Offset: 0x358, Size: 0x8]
	SolarImageURL* Img_Avatar;//[Offset: 0x360, Size: 0x8]
	Image* Img_AvatarFrame;//[Offset: 0x368, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x370, Size: 0x8]
	Image* Img_BGLine;//[Offset: 0x378, Size: 0x8]
	Image* Img_Empty;//[Offset: 0x380, Size: 0x8]
	Image* Img_Gender;//[Offset: 0x388, Size: 0x8]
	Image* Img_Gender_Bg;//[Offset: 0x390, Size: 0x8]
	Image* Img_Social;//[Offset: 0x398, Size: 0x8]
	Overlay* Overlay_Normal;//[Offset: 0x3a0, Size: 0x8]
	CanvasPanel* Panel_FrameAnim;//[Offset: 0x3a8, Size: 0x8]
	SizeBox* Panel_Rank;//[Offset: 0x3b0, Size: 0x8]
	SizeBox* Size;//[Offset: 0x3b8, Size: 0x8]
	SizeBox* Size;//[Offset: 0x3c0, Size: 0x8]
	SizeBox* Size_Avatar;//[Offset: 0x3c8, Size: 0x8]
	SizeBox* Size_Vip;//[Offset: 0x3d0, Size: 0x8]
	UI_Rank_Icon_Small_C* UI_Rank_Icon_Small;//[Offset: 0x3d8, Size: 0x8]
	UI_Vip_Icon_Type_C* UI_Vip;//[Offset: 0x3e0, Size: 0x8]
	bool ShowBusinessCardBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	delegate OnClicked;//[Offset: 0x3f0, Size: 0x10]
	delegate OnReleased;//[Offset: 0x400, Size: 0x10]
	bool IsNonuseFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	bool Empty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 0x1]
	bool Rank;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 0x1]
	byte Social;//[Offset: 0x413, Size: 0x1]
	bool GenderOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	byte Gender;//[Offset: 0x415, Size: 0x1]
	float Size;//[Offset: 0x418, Size: 0x4]
	bool Vip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	FString GetModuleName();// 0xce7a23e7a001
	void SetDefaultSteamAvatar();// 0xe09023bfa041
	void SetVipType(byte VipType, int CallFunc_Conv_ByteToInt_ReturnValue);// 0xce7823e7a001
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Unhandled_ReturnValue);// 0xced923e7a001
	void SetAvatarState(bool IsCollapsed, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0xce7623e7a001
	void SetAvatarIcon(int InAvatarID, Texture2D* CallFunc_GetAvatarIconWithID_OutAvatar);// 0x16bf223e7a008
	void SetEmptyState(bool IsEmpty, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, enum K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, SlateBrush K2Node_MakeStruct_SlateBrush);// 0xcec023e7a001
	void SetPlayerGender(byte Gender, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, Object* K2Node_Select_Default, enum Temp_byte_Variable, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Margin K2Node_MakeStruct_Margin, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default);// 0xcebf23e7a001
	void SetSocialIcon(byte Social, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin, enum K2Node_Select_Default, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue);// 0x93ad23c02eee
	void BndEvt__Btn_PlayerInfo_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xffffff9223bfa002
	void Update();// 0xffffff8f23bfa002
	void Construct();// 0xffffffff7141c8d0
	void PreConstruct(bool IsDesignTime);// 0xce7023e7a001
	void BndEvt__Btn_PlayerInfo_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x81c0ffdaa4ffe04b
	void ExecuteUbergraph_UI_Component_PlayerHead(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin, bool K2Node_Event_IsDesignTime, enum K2Node_Select_Default, SizeBoxSlot* CallFunc_SlotAsSizeBoxSlot_ReturnValue, enum K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, Margin K2Node_MakeStruct_Margin, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, enum K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin);// 0xcdb523e7a001
	void OnReleased__DelegateSignature();// 0xffffff9223bfa002
	void OnClicked__DelegateSignature();// 0xb41723e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: SolarImageURL.Widget.Visual.Object
	FString URL;//[Offset: 0x138, Size: 0x10]
	bool bDownloadFailedResetToPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	bool bDownloadFailedAutoRetry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]
	int AutoRetryDelayTime;//[Offset: 0x14c, Size: 0x4]
	int AutoRetryTimes;//[Offset: 0x150, Size: 0x4]
	SlateBrush Brush;//[Offset: 0x158, Size: 0x98]
	SlateBrush PlaceholderBrush;//[Offset: 0x1f0, Size: 0x98]
	delegate BrushDelegate;//[Offset: 0x288, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x298, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x2a8, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x2bc, Size: 0x10]
	delegate OnURLDownloadFinish;//[Offset: 0x2d0, Size: 0x10]
	void URLDownloadFinish__DelegateSignature(bool bSuccess);// 0x275023bfa041
	void UpdateURLImage();// 0x274f23bfa041
	void SetURLForNextTick(FString URLForNextTick);// 0x274e23bfa041
	void SetOpacity(float InOpacity);// 0x274d23bfa041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x274c23bfa041
	void SetBrushTintColor(SlateColor TintColor);// 0x274b23bfa041
	void SetBrushSize(Vector2D DesiredSize);// 0x274a23bfa041
	void SetBrushResourceObject(Object* ResourceObject);// 0x274923bfa041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x274823bfa041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x274723bfa041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x274623bfa041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x274523bfa041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x274423bfa041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x274323bfa041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x274223bfa041
	void SetBrush(out const SlateBrush InBrush);// 0x274123bfa041
	void ResetToPlaceholder();// 0x274023bfa041
	void LoadURLImage(Texture2DDynamic* Texture);// 0x273f23bfa041
	FString GetUrl();// 0x273e23bfa041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x273d23bfa041
	enum GetDownloadState();// 0x273b23bfa041
	void CancelDownload();// 0x273a23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Rank_Icon_Small_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	Image* Img_Rank;//[Offset: 0x350, Size: 0x8]
	Image* Img_Rank_Word;//[Offset: 0x358, Size: 0x8]
	SizeBox* Size_Rank;//[Offset: 0x360, Size: 0x8]
	SizeBox* Size_Txt;//[Offset: 0x368, Size: 0x8]
	SolarTextBlock* TextBlock_StarNum;//[Offset: 0x370, Size: 0x8]
	SolarTextBlock* Txt_LegendRank;//[Offset: 0x378, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_Detail;//[Offset: 0x380, Size: 0x8]
	int LevelID;//[Offset: 0x388, Size: 0x4]
	bool STAR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 0x1]
	int IconSize;//[Offset: 0x390, Size: 0x4]
	Vector2D TxtSize;//[Offset: 0x394, Size: 0x8]
	FString GetModuleName();// 0xcef123e7a001
	void FormatViewJustIcon(int LevelID);// 0xffffffff8b72d7b0
	void SetStar(bool STAR, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0xffffffff7143eca0
	void FormatView(int LevelID);// 0xfffffff623bfa000
	void PreConstruct(bool IsDesignTime);// 0xcfa223e7a001
	void SetRankIconView(int Param);// 0xcfa023e7a001
	void ExecuteUbergraph_UI_Rank_Icon_Small(int EntryPoint, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool K2Node_Event_IsDesignTime, int K2Node_CustomEvent_Param, float CallFunc_Conv_IntToFloat_ReturnValue);// 0xcf9f23e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Vip_Icon_Type_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	SolarImage* Img_Vip_Icon;//[Offset: 0x350, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x358, Size: 0x8]
	int Type;//[Offset: 0x360, Size: 0x4]
	void SetType(int Type, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Object* Temp_object_Variable, enum K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default);// 0xd16323e7a001
	void PreConstruct(bool IsDesignTime);// 0xd14d23e7a001
	void ExecuteUbergraph_UI_Vip_Icon_Type(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xffffffff8c6447e0
<----------Generated by SSpawner v1.0.2---------->


Class: SizeBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x5ec523bfa041
	void SetPadding(Margin InPadding);// 0x5ec423bfa041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x5ec323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Component_Option_C.SolarCheckButtonWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x368, Size: 0x8]
	CanvasPanel* Panel_Disabled;//[Offset: 0x370, Size: 0x8]
	SolarCheckBox* SolarCheckBox_Option;//[Offset: 0x378, Size: 0x8]
	SolarTextBlock* Txt_Option;//[Offset: 0x380, Size: 0x8]
	bool UseText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	FText Text;//[Offset: 0x390, Size: 0x18]
	int TextID;//[Offset: 0x3a8, Size: 0x4]
	enum TextPreviewLang;//[Offset: 0x3ac, Size: 0x1]
	SlateFontSizeForLang SpecialLangFont;//[Offset: 0x3b0, Size: 0x18]
	bool Disabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	delegate OnOptionCheckStateChanged;//[Offset: 0x3d0, Size: 0x10]
	bool bCustomClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	int OptionType;//[Offset: 0x3e4, Size: 0x4]
	static void SetEnabled(bool Enabled, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum CallFunc_GetCheckedState_ReturnValue, LinearColor K2Node_Select_Default, enum K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, enum K2Node_Select_Default);// 0x2703223e7a001
	void SetOptionType(int OptionType, int Temp_int_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, CheckBoxStyle K2Node_MakeStruct_CheckBoxStyle);// 0xe81723e7a001
	void ManualOptionSetIsChecked(bool bIsChecked);// 0xffffffbc23bfa02d
	void PreConstruct(bool IsDesignTime);// 0xffffff8f23bfa000
	void BndEvt__SolarCheckBox_Option_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0xe81a23e7a001
	void OnSelected(bool bSelected);// 0xe88a23e7a001
	void SetDisbaled(bool Disabled);// 0x24723bfa2b8
	void RefreshOptionTxtUI();// 0xe88323e7a001
	void ExecuteUbergraph_UI_Component_Option(int EntryPoint, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, bool K2Node_Event_IsDesignTime, enum K2Node_Select_Default, enum K2Node_Select_Default, enum CallFunc_GetCheckedState_ReturnValue, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_Event_bSelected, bool K2Node_CustomEvent_Disabled);// 0x98ff23e7a008
	void OnOptionCheckStateChanged__DelegateSignature(bool bIsChecked);// 0x19ac423e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCheckButtonWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	delegate OnClickedEvent;//[Offset: 0x350, Size: 0x10]
	void SetButtonIndex(int InButtonIndex);// 0x4c1923bfa041
	void PostClickedEvent();// 0x4c1823bfa041
	void OnStateChanged(bool bIsChecked);// 0x4c1723bfa041
	void OnSelected(bool bSelected);// 0x4c1623bfa041
	ReturnValue(MulticastInlineDelegateProperty) GetOnClickedEvent();// 0x4c1523bfa041
	int GetButtonIndex();// 0x4c1423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSystemWidget.Widget.Visual.Object
	ParticleSystem* ParticleSystemTemplate;//[Offset: 0x138, Size: 0x8]
	bool bReactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	bool bActiveSysWhenInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
	ParticleSystemComponent* WorldParticleComponent;//[Offset: 0x148, Size: 0x8]
	Actor* WorldParticleActor;//[Offset: 0x150, Size: 0x8]
	void SetReactivate(bool bActivateAndReset);// 0x39e523bfa041
	void ActivateParticles(bool bActive, bool bReset);// 0x39e423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_Management_Solo_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* Anim_Loop;//[Offset: 0x350, Size: 0x8]
	UI_CreateRoom_Management_Team_Solo_C* Team;//[Offset: 0x358, Size: 0x8]
	UI_CreateRoom_Management_Team_Solo_C* Team;//[Offset: 0x360, Size: 0x8]
	void GetTeams(out UI_CreateRoom_Management_Team_C*[] Teams, UI_CreateRoom_Management_Team_C*[] K2Node_MakeArray_Array);// 0xffffffff8b8bbd20
	void InitTeams(SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, SolarTeamInfo* CallFunc_Array_Get_Item, SolarTeamInfo* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x2dffbd23eea02e
	void PreConstruct(bool IsDesignTime);// 0x16bb623e7a008
	void ExecuteUbergraph_UI_CreateRoom_Management_Solo(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x138e323e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_Management_Team_Solo_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x3e8, Size: 0x8]
	void Construct();// 0x3f7fff8f23bfa000
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_Solo(int EntryPoint, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0xe8e623e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_Management_TDM_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* Anim_Loop;//[Offset: 0x350, Size: 0x8]
	UI_CreateRoom_Management_Team_TDM_C* Team;//[Offset: 0x358, Size: 0x8]
	UI_CreateRoom_Management_Team_TDM_C* Team;//[Offset: 0x360, Size: 0x8]
	static void GetTeams(out UI_CreateRoom_Management_Team_C*[] Teams, UI_CreateRoom_Management_Team_C*[] K2Node_MakeArray_Array);// 0x962923e7a008
	static void InitTeams(SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, SolarTeamInfo* CallFunc_Array_Get_Item, SolarTeamInfo* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x1f06023bfa001
	void PreConstruct(bool IsDesignTime);// 0xe96523e7a001
	void ExecuteUbergraph_UI_CreateRoom_Management_TDM(int EntryPoint, bool K2Node_Event_IsDesignTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x138e223e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_Management_Team_TDM_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x3e8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x3f0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x3f8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x400, Size: 0x8]
	void Construct();// 0x2dffbd23eea02e
	void ExecuteUbergraph_UI_CreateRoom_Management_Team_TDM(int EntryPoint, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x1570123e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Component_ReturnBtn_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	SolarButton* Btn_Return;//[Offset: 0x268, Size: 0x8]
	Image* Image;//[Offset: 0x270, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8]
	SolarTextBlock* Txt_Title;//[Offset: 0x280, Size: 0x8]
	delegate OnClicked;//[Offset: 0x288, Size: 0x10]
	delegate OnPressed;//[Offset: 0x298, Size: 0x10]
	bool UseTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	FText Title;//[Offset: 0x2b0, Size: 0x18]
	int TitleID;//[Offset: 0x2c8, Size: 0x4]
	bool UseID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	enum PreviewLang;//[Offset: 0x2cd, Size: 0x1]
	float SizeX;//[Offset: 0x2d0, Size: 0x4]
	void PreConstruct(bool IsDesignTime);// 0xc6e123e7a009
	void BndEvt__Btn_Return_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xe8fa23e7a001
	void BndEvt__Btn_Return_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0xe8fb23e7a001
	void ExecuteUbergraph_UI_Component_ReturnBtn(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, enum K2Node_Select_Default);// 0x980523e7a009
	void OnPressed__DelegateSignature();// 0x97f723e7a008
	void OnClicked__DelegateSignature();// 0xbb7b23e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_SocialList_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	Button* Btn_LeftTeam;//[Offset: 0x348, Size: 0x8]
	FString GetModuleName();// 0xc75f23e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_Management_Team_OB_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 0x8]
	Overlay* Panel_Spectator;//[Offset: 0x3e8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x3f0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x3f8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x400, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x408, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x410, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x418, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x420, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x428, Size: 0x8]
	void UpdateOB(out SCMPlayerState*[] PlayerStateList, bool T_Waiting, FString T_PlayerID, SCMPlayerState* T_PS, int T_Index, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, byte Temp_byte_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsPreJoinPlayer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_Select_Default, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x8fe323e7a001
	void PreConstruct(bool IsDesignTime);// 0xa2323bfa002
	void Construct();// 0xffffffff8b8bb8c0
	void ExecuteUbergraph_UI_CreateRoom_Management_Team_OB(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x90c223e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_Management_Team_1M_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 0x8]
	HorizontalBox* HorizontalBox;//[Offset: 0x3e8, Size: 0x8]
	CanvasPanel* Panel_Owner;//[Offset: 0x3f0, Size: 0x8]
	Overlay* Panel_Team;//[Offset: 0x3f8, Size: 0x8]
	SolarTextBlock* Txt_SideName_P1;//[Offset: 0x400, Size: 0x8]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x408, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x410, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_IsOwner;//[Offset: 0x418, Size: 0x8]
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0xb0c723e7a00b
	void Get SideText by Panel(out SolarTextBlock* Target Panel, bool Temp_bool_Variable, SolarTextBlock* K2Node_Select_Default);// 0xc51a23e7a008
	void PreConstruct(bool IsDesignTime);// 0xc79a23e7a008
	void Construct();// 0x93e123e7a008
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_1M(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x272d023e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_Management_Team_2M_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 0x8]
	HorizontalBox* HorizontalBox;//[Offset: 0x3e8, Size: 0x8]
	CanvasPanel* Panel_Owner;//[Offset: 0x3f0, Size: 0x8]
	Overlay* Panel_Team;//[Offset: 0x3f8, Size: 0x8]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x400, Size: 0x8]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x408, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x410, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x418, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_IsOwner;//[Offset: 0x420, Size: 0x8]
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0x3d3f235c633fa000
	void Get SideText by Panel(out SolarTextBlock* Target Panel, bool Temp_bool_Variable, SolarTextBlock* K2Node_Select_Default);// 0x8fe823e7a001
	void PreConstruct(bool IsDesignTime);// 0xe8a223e7a001
	void Construct();// 0xb87923e7a008
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_2M(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0xe8a823e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_CreateRoom_Management_Team_4M_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e0, Size: 0x8]
	HorizontalBox* HorizontalBox;//[Offset: 0x3e8, Size: 0x8]
	CanvasPanel* Panel_Owner;//[Offset: 0x3f0, Size: 0x8]
	Overlay* Panel_Team;//[Offset: 0x3f8, Size: 0x8]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x400, Size: 0x8]
	SolarTextBlock* Txt_SideName_P4;//[Offset: 0x408, Size: 0x8]
	SolarTextBlock* Txt_Team_P4;//[Offset: 0x410, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x418, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x420, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x428, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x430, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_IsOwner;//[Offset: 0x438, Size: 0x8]
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0xba1523e7a008
	void Get SideText by Panel(out SolarTextBlock* Target Panel, bool Temp_bool_Variable, SolarTextBlock* K2Node_Select_Default);// 0xe8c623e7a008
	void PreConstruct(bool IsDesignTime);// 0x38ffbf23eea065
	void Construct();// 0xe8a523e7a001
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_4M(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x2658d23bfa001
<----------Generated by SSpawner v1.0.2---------->


Class: CommonTwiceConfirmWindowOneBtn_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* Enter_Anim;//[Offset: 0x350, Size: 0x8]
	BackgroundBlur* BlurMask;//[Offset: 0x358, Size: 0x8]
	UI_Component_Close_C* CloseBtn;//[Offset: 0x360, Size: 0x8]
	UI_Component_Btn_C* ConfirmBtn;//[Offset: 0x368, Size: 0x8]
	SolarTextBlock* ConfirmBtnText;//[Offset: 0x370, Size: 0x8]
	TextBlock* ConfirmText;//[Offset: 0x378, Size: 0x8]
	Image* ConfirmTextBG;//[Offset: 0x380, Size: 0x8]
	SolarRichTextBlock* Context;//[Offset: 0x388, Size: 0x8]
	Image* Mask;//[Offset: 0x390, Size: 0x8]
	SolarTextBlock* Title;//[Offset: 0x398, Size: 0x8]
	UI_Option_C* UI_Option;//[Offset: 0x3a0, Size: 0x8]
	SlateColor HiddenColor;//[Offset: 0x3a8, Size: 0x28]
	SlateColor VisibleColor;//[Offset: 0x3d0, Size: 0x28]
	FString GetModuleName();// 0x8f9923c02eee
	void Construct();// 0x6188f23c4a100
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x155bc23e7a001
	static void ExecuteUbergraph_CommonTwiceConfirmWindowOneBtn(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0xfffffffeee709920
<----------Generated by SSpawner v1.0.2---------->


Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x14c, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x15c, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x15d, Size: 0x1]
	bool bBlurOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e, Size: 0x1]
	bool bBlurState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15f, Size: 0x1]
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	float BlurStrength;//[Offset: 0x164, Size: 0x4]
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	int BlurRadius;//[Offset: 0x16c, Size: 0x4]
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x170, Size: 0x98]
	void StopOnFirstBlur();// 0x5e5b23bfa041
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x5e5a23bfa041
	void SetPadding(Margin InPadding);// 0x5e5923bfa041
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x5e5823bfa041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x5e5723bfa041
	void SetBlurStrength(float InStrength);// 0x5e5623bfa041
	void SetBlurState(bool BlurState, bool RefreshCount);// 0x5e5523bfa041
	void SetBlurRadius(int InBlurRadius);// 0x5e5423bfa041
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x5e5323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Component_Close_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	SolarButton* Btn_Close;//[Offset: 0x350, Size: 0x8]
	Image* Img_Close_Nml;//[Offset: 0x358, Size: 0x8]
	delegate OnClicked;//[Offset: 0x360, Size: 0x10]
	bool Black;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	delegate OnPressed;//[Offset: 0x378, Size: 0x10]
	bool White;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	Vector2D Icon_Size;//[Offset: 0x38c, Size: 0x8]
	FString GetModuleName();// 0x8007bfae24c0a0e5
	void PreConstruct(bool IsDesignTime);// 0xffffff9223bfa002
	void Construct();// 0x93ad23c02eee
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xffffffff71423fd0
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0xf13423e7a008
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0xce0123e7a001
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0x2260923c10dd8
	void ExecuteUbergraph_UI_Component_Close(int EntryPoint, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool K2Node_Event_IsDesignTime, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default);// 0xcd9023e7a001
	void OnPressed__DelegateSignature();// 0xce7223e7a001
	void OnClicked__DelegateSignature();// 0xce6f23e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_Option_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* Img_Tick;//[Offset: 0x348, Size: 0x8]
	Image* Img_Tick;//[Offset: 0x350, Size: 0x8]
	SolarCheckBox* SolarCheckBox_Switch;//[Offset: 0x358, Size: 0x8]
	SolarTextBlock* SolarTxt_metion;//[Offset: 0x360, Size: 0x8]
	FString GetModuleName();// 0xfffffffecf7e4600
<----------Generated by SSpawner v1.0.2---------->


Class: BPC_GM_Common_C.CustomConsoleCommandsComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	bool OpenDetailedLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	SCMPlayerState* TargetPlayer;//[Offset: 0xc0, Size: 0x8]
	FString[] Args;//[Offset: 0xc8, Size: 0x10]
	byte CommandType;//[Offset: 0xd8, Size: 0x1]
	int DrawCircleID;//[Offset: 0xdc, Size: 0x4]
	bool UseNewAiComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	FString WarmGameTimeLine;//[Offset: 0xe8, Size: 0x10]
	delegate OnNewAiCompChange;//[Offset: 0xf8, Size: 0x10]
	void None(bool CallFunc_IsServer_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue);// 0x132af23e7a001
	void None(CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, FString CallFunc_Array_Get_Item, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc_ToBool_bool);// 0x132ae23e7a001
	void InfiniteJet(FString Temp_string_Variable, FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Array_Get_Item, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_ToBool_bool, SolarCheatManager* K2Node_DynamicCast_AsSolar_Cheat_Manager, bool K2Node_DynamicCast_bSuccess, FString K2Node_Select_Default);// 0x132ad23e7a001
	void SetSkillCD(enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Variable, FString CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, enum K2Node_Select_Default, byte K2Node_Select_Default);// 0x132ac23e7a001
	void HPLock(bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, bool CallFunc_ToBool_bool, GameModeGlobalSetting* CallFunc_GetGameModeSetting_ReturnValue);// 0x132ab23e7a001
	void TPToAI(SolarCharacter*[] Character, SCMPlayerState*[] NewLocalVar, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, const byte[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, int CallFunc_Array_Add_ReturnValue, int Temp_int_Loop_Counter_Variable, bool Temp_bool_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, const FString[] K2Node_MakeArray_Array, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_ToBool_bool, bool CallFunc_EqualEqual_IntInt_ReturnValue, const FString[] K2Node_Select_Default, int K2Node_Select_Default, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int K2Node_Select_Default, SolarCharacter* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue);// 0x132aa23e7a001
	void KillAI(int NewLocalVar, SCMPlayerState*[] NewLocalVar, bool Temp_bool_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, const byte[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const FString[] K2Node_MakeArray_Array, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, bool CallFunc_ToBool_bool, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const FString[] K2Node_Select_Default, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int K2Node_Select_Default);// 0x132a923e7a001
	void SpawnAI(int Counter, int Difficulty, int count, bool CanMove, int Character, FString TargetSide, bool bIsTeammate, class SolarBotAIController Temp_class_Variable, class SolarBotAIController Temp_class_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_IsServer_ReturnValue, SolarGameMode* CallFunc_GetSolarGameMode_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool Temp_bool_Variable, class SolarBotAIController K2Node_Select_Default, int CallFunc_GetRandomCharacter_Output, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, enum Temp_byte_Variable, enum K2Node_Select_Default, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, enum[] K2Node_MakeArray_Array, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorFloat_ReturnValue, FString CallFunc_Array_Get_Item, SolarPlayerState* CallFunc_CreateBotAISingle_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_HasRowKey_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int K2Node_Select_Default, FString CallFunc_Array_Get_Item, bool CallFunc_ToBool_bool, FString CallFunc_Array_Get_Item, bool CallFunc_ToBool_bool);// 0x132a823e7a001
	void OnRep_WarmGameTimeLine();// 0x132a723e7a001
	void OnRep_UseNewAiComp();// 0x132a623e7a001
	void EggAbility(bool CallFunc_IsServer_ReturnValue, enum CallFunc_GetPlayerPawn_outType, Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_Character_BattleRoyale_C* K2Node_DynamicCast_AsBP_Character_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x132a523e7a001
	void DrawPoisonCircleInClient(int Index, int Temp_int_Array_Index_Variable, const FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, Vector CallFunc_Get_Safe_Area_Center_Pos, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_VectorToString_ReturnValue, int[] CallFunc_Map_Keys_Keys, Vector CallFunc_Add_VectorVector_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, S_Event_BattleRoyale CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Conv_IntToFloat_ReturnValue);// 0x132a423e7a001
	void OpenDetailLog(bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, bool K2Node_SwitchString_CmpSuccess);// 0x132a323e7a001
	void None(bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue);// 0x132a223e7a001
	void None(bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_ChangePlayerCharacter_ReturnValue);// 0x132a123e7a001
	void GetCommandType(FString Command, out byte Type, int CallFunc_MakeLiteralInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x132a023e7a001
	void SetCharacter(SCMPlayerState* Player, int CharacterId, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int[] CallFunc_GetRowKeys_OutKeys, int CallFunc_GetRowKeys_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, const SolarTablesData_Skin CallFunc_GetRowData_ReturnValue, bool CallFunc_ChangePlayerCharacter_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1329f23e7a001
	void OnLoaded_C6AD5CEF49C118922616E194AD23CE46(class Object Loaded);// 0x1329e23e7a001
	void OnLoaded_518ADE834F1B5CC1BB900E9CF5982B48(class Object Loaded);// 0x1329d23e7a001
	void ExecGMCommand(FString CommandParameters, out const FString[] ArgsStr);// 0x1329c23e7a001
	void [s]OnCommandExec(byte CommandType, SCMPlayerState* PlayerState, out const FString[] Args);// 0x1329b23e7a001
	void Event_DrawPoisonCircleInClient(float Radius, Vector Center);// 0x1329a23e7a001
	void Event_ClearPoisonCircleInClient();// 0x14f3d23e7a008
	void [CS]OnCommandExec();// 0x1329823e7a001
	static void ExecuteUbergraph_BPC_GM_Common(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, FString K2Node_Event_CommandParameters, const FString[] K2Node_Event_ArgsStr, byte K2Node_CustomEvent_CommandType, SCMPlayerState* K2Node_CustomEvent_PlayerState, const FString[] K2Node_CustomEvent_Args, byte CallFunc_GetCommandType_Type, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, float K2Node_CustomEvent_Radius, Vector K2Node_CustomEvent_Center, MiniMapUMG_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, MiniMapUMG_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, MiniMapUMG_C* CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, BPC_WarmGame_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_ToBool_bool, FString CallFunc_Array_Get_Item, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, bool CallFunc_ToBool_bool, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, MiniMapUMG_C* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_AddCircle_ReturnValue, int CallFunc_Max_ReturnValue, class Object Temp_class_Variable, bool CallFunc_IsServer_ReturnValue, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, class Object K2Node_CustomEvent_Loaded, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, bool CallFunc_IsServer_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Format_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, const enum[] K2Node_MakeArray_Array, Transform CallFunc_MakeTransform_ReturnValue, const byte[] Temp_byte_Variable, FString CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, FString CallFunc_Array_Get_Item, const FString[] Temp_string_Variable, float CallFunc_Conv_StringToFloat_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_IsAIPlayer_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_CheckMapDarkDataWithVector_ReturnValue, class Object Temp_class_Variable, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Array_Get_Item, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, SoftClassPath CallFunc_MakeSoftClassPath_ReturnValue, Actor* CallFunc_FinishSpawningActor_ReturnValue, class Object CallFunc_Conv_SoftClassPathToSoftClassRef_ReturnValue, class Object K2Node_CustomEvent_Loaded, SoftClassPath CallFunc_MakeSoftClassPath_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, class Object CallFunc_Conv_SoftClassPathToSoftClassRef_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_IsServer_ReturnValue, Actor* CallFunc_FinishSpawningActor_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, FString CallFunc_Array_Get_Item, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, BP_WarmGameLogic_NoramlWarmGame_C* CallFunc_FinishSpawningActor_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, GameModeGlobalSetting* CallFunc_GetGameModeSetting_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, SolarPoisonDamageEvent K2Node_MakeStruct_SolarPoisonDamageEvent, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, SolarPointDamageEvent K2Node_MakeStruct_SolarPointDamageEvent);// 0x14f3a23e7a001
	void OnNewAiCompChange__DelegateSignature();// 0x1674b23e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: CustomConsoleCommandsComponent.ActorComponent.Object
	void ExecGMCommand(FString CommandParameters, out const FString[] ArgsStr);// 0x436423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SolarCheatManager.CheatManager.Object
	SoftObjectPath VehicleSpawnerMarkWidgetPath;//[Offset: 0x3c8, Size: 0x18]
	MapMarkBase*[] VehicleSpawnerMarks;//[Offset: 0x3e0, Size: 0x10]
	SoftObjectPath PSOGatherCubeBPAssetPath;//[Offset: 0x3f0, Size: 0x18]
	float PSOGatherCubeDistanceToCamera;//[Offset: 0x408, Size: 0x4]
	FString PSOGatherBPHuntAssetPath;//[Offset: 0x410, Size: 0x10]
	FString PSOGatherBPTutorialAssetPath;//[Offset: 0x420, Size: 0x10]
	SoftObjectPath AirShipBPAssetPath;//[Offset: 0x478, Size: 0x18]
	void StopEffectScreen(int InHandle);// 0x4c0323bfa041
	void StopEffectActor(int InHandle);// 0x4c0223bfa041
	void StartPSOGatheringiOSTutorial();// 0x4c0123bfa041
	void StartPSOGatheringiOSHunt();// 0x4c0023bfa041
	void StartPSOGathering();// 0x4bff23bfa041
	void StartEffectScreen(FString RowName);// 0x4bfe23bfa041
	void StartEffectActor(FString RowName);// 0x4bfd23bfa041
	void SpawnVehicleWithVehicleID(const int VehicleID);// 0x4bfc23bfa041
	void SpawnVehicle(const int SpawnID);// 0x4bfb23bfa041
	void SpawnTreasureBox(const int TreasureBoxID);// 0x4bfa23bfa041
	void SpawnSolarRadar(FString BpPath);// 0x4bf923bfa041
	void SpawnPSOGatherCube();// 0x4bf823bfa041
	void SpawnOutcomeContent(const int OutcomeID);// 0x4bf723bfa041
	void SpawnChargingPile(FString BpPath);// 0x4bf623bfa041
	void SpawnAirdrop(const int AirdropID);// 0x4bf523bfa041
	void SolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed);// 0x4bf423bfa041
	void SolarWeaponReload(int PrimaryAmmoCap, int SecondaryAmmoCap);// 0x4bf323bfa041
	void SolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);// 0x4bf223bfa041
	void SolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);// 0x4bf123bfa041
	void SolarTestReportAbnormalPlayerWeapon(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InAttackLocation, FString InHitLocation, FString InHitBoneScale, FString InWeaponBlueprintName);// 0x4bf023bfa041
	void SolarTestReportAbnormalPlayerVehicle(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InVehiclePreviousLocation, FString InVehiclePresentLocation, FString InVehicleBlueprintName);// 0x4bef23bfa041
	void SolarTestReportAbnormalPlayer(FString InPlayerID, FString InVariableName, FString InVariableValue);// 0x4bee23bfa041
	void SolarTeleport(const float DestLocationX, const float DestLocationY, const float DestLocationZ);// 0x4bed23bfa041
	void SolarServerCmd(FString Cmd);// 0x4bec23bfa041
	void SolarGMSetPlayerValueInternal(FString InType, FString InValue);// 0x4beb23bfa041
	void SolarGM_WeaponShowCurrentInfo();// 0x4bea23bfa041
	void SolarGM_ValidateAirline(float InBufferX, float InBufferY, float InBufferZ);// 0x4be923bfa041
	void SolarGM_UnforbidCharacterUniqueSkillCD();// 0x4be823bfa041
	void SolarGM_TestEnsureMsgWithBP();// 0x4be723bfa041
	void SolarGM_TestEnsureMsg();// 0x4be623bfa041
	void SolarGM_TestCrashWithBP();// 0x4be523bfa041
	void SolarGM_TestCrash();// 0x4be423bfa041
	void SolarGM_TeleportToBotAI(uint32 CtrlIndex);// 0x4be323bfa041
	void SolarGM_StopBotAIBehaviorTree(bool bStop);// 0x4be223bfa041
	void SolarGM_SpawnBotAIAtCrosshairByNum(int Num);// 0x4be123bfa041
	void SolarGM_ShowEmojiBubble(int EmojiID);// 0x4be023bfa041
	void SolarGM_ShowAspectRatio(float InDuration);// 0x4bdf23bfa041
	void SolarGM_SetWeaponAdditionalBaseDamage(float AdditionalBaseDamage, bool bSelfOnly);// 0x4bde23bfa041
	void SolarGM_SetPlayerValue(FString InType, FString InValue);// 0x4bdd23bfa041
	void SolarGM_SetPlayerLevel(int InLv);// 0x4bdc23bfa041
	void SolarGM_SetEMPForceFieldTestRange(float InRadius, float InHeight);// 0x4bdb23bfa041
	void SolarGM_SetEMPForceFieldCoreSize(float InX, float InY, float InZ);// 0x4bda23bfa041
	void SolarGM_SetCharacterRoleAbilitySkillCDDuration(float InCD);// 0x4bd923bfa041
	void SolarGM_SetAssistAimTargetVelocityFollowMaxSpeed(float MaxHorizontalSpeed, float MaxVerticalSpeed);// 0x4bd823bfa041
	void SolarGM_SetAssistAimTargetConfig_TargetVelocityFollowTriggerExtent(FString BodyType, FString status, float ExtentX, float ExtentY);// 0x4bd723bfa041
	void SolarGM_SetAssistAimTargetConfig_LockAimingExtent(FString BodyType, FString status, float ExtentX, float ExtentY);// 0x4bd623bfa041
	void SolarGM_SetAssistAimTargetConfig_GlobalSensitivityScaleTriggerExtent(FString BodyType, FString status, float ExtentX, float ExtentY);// 0x4bd523bfa041
	void SolarGM_SetAssistAimTargetConfig_BaseFollowTriggerExtent(FString BodyType, FString status, FString CharacterTagStr, float ExtentX, float ExtentY);// 0x4bd423bfa041
	void SolarGM_SetAssistAimTargetConfig_BaseFollowStopExtent(FString BodyType, FString status, FString CharacterTagStr, float ExtentX, float ExtentY);// 0x4bd323bfa041
	void SolarGM_SetAssistAimCurveScales(float TargetVelocityFollowHorizontalRatioCurveScale, float TargetVelocityFollowVerticalRatioCurveScale, float GlobalSensitivityScaleCurveScale);// 0x4bd223bfa041
	void SolarGM_SetAssistAimBaseFollowSpeed(FString StatusTagStr, float HorizontalSpeed, float VerticalSpeed);// 0x4bd123bfa041
	void SolarGM_RestoreRecommend();// 0x4bd023bfa041
	void SolarGM_ResetCharacterUniqueSkillCD();// 0x4bcf23bfa041
	void SolarGM_PlayerUpgrade(int InLv);// 0x4bce23bfa041
	void SolarGM_MarkVehicleSpawnLocationInMap(int Index);// 0x4bcd23bfa041
	void SolarGM_KillAllAI(bool KillBot);// 0x4bcc23bfa041
	void SolarGM_GainExperience(int InExp);// 0x4bcb23bfa041
	void SolarGM_ClearCharacterUniqueSkillCD();// 0x4bca23bfa041
	void SolarGM_CleanUpShootingTarget();// 0x4bc923bfa041
	void SolarGM_CharacterUpgradeBattleUpgradeEffectLevel(int UpgradeTo);// 0x4bc823bfa041
	void SolarGM_CharacterSuicide();// 0x4bc723bfa041
	void SolarGM_CharacterSelectBattleUpgradeEffect(int Level, int SelectedIndex);// 0x4bc623bfa041
	void SolarGM_CharacterEnableDebugAutoMove(bool bEnabled, float SwitchInterval);// 0x4bc523bfa041
	void SolarGM_CharacterDamageSelf(int InDamage);// 0x4bc423bfa041
	void SolarGM_CharacterChangeTailFlameId(int InTailFlameId);// 0x4bc323bfa041
	void SolarGM_CharacterChangeBagId(int InBagId);// 0x4bc223bfa041
	void SolarGM_CallAirdropByAirShipHere();// 0x4bc123bfa041
	void SolarGM_CallAirdropByAirShip(float Loc_X, float Loc_Y);// 0x4bc023bfa041
	void SolarGM_ApplyVehicleSkin(int SkinId);// 0x4bbf23bfa041
	void SolarAsyncLoad(FString ResPath);// 0x4bbe23bfa041
	void SolarAmmoSpreadPerBullet(int AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);// 0x4bbd23bfa041
	void SolarAmmoRangeSpeedDamage(int AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);// 0x4bbc23bfa041
	void SolarAmmoFiring(int AmmoIndex, int FireCostType, int FireCostPerAttack, int FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);// 0x4bbb23bfa041
	void SolarAmmoBoltAndMag(int AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);// 0x4bba23bfa041
	void SolarAmmoBasicMovement(int AmmoIndex, int TimedExplode, int BounceTimes, float LifeTime, float BaseReloadTime, int TrajectoryType, float CustomValue);// 0x4bb923bfa041
	void SetGameplayVibrateIntensity(FString Category, FString Intensity);// 0x4bb823bfa041
	void ExecuteGMCommandsInCustomMode(FString CommandParameters, FString ArgsStr);// 0x4bb723bfa041
	void BookmarkEnd(FString Message);// 0x4bb623bfa041
	void BookmarkBegin(FString Message);// 0x4bb523bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Character_BattleRoyale_C.BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2168, Size: 0x8]
	delegate OnPlayerRevive;//[Offset: 0x2170, Size: 0x10]
	ActorMarkBase* DeathBoxMark;//[Offset: 0x2180, Size: 0x8]
	MapMarkBase*[] DeathBoxMiniMapMark;//[Offset: 0x2188, Size: 0x10]
	int Index;//[Offset: 0x2198, Size: 0x4]
	int UI_Relive_StartTime;//[Offset: 0x219c, Size: 0x4]
	TimerHandle LandedDetectionHandel;//[Offset: 0x21a0, Size: 0x8]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0x21a8, Size: 0x8]
	<int,float> Level-Damage;//[Offset: 0x21b0, Size: 0x50]
	void GetWeaponLevelDamageBonus(out float Result, bool Temp_bool_Variable, float Temp_float_Variable, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, int CallFunc_GetCurrentActiveSlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, float CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default);// 0x134f523e7a001
	void Death Cleanup UI(SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue);// 0x134f423e7a001
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x134f323e7a001
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x134f223e7a001
	void SetReviveCameraFade(float Time);// 0x134f123e7a001
	void ReceiveBeginPlay();// 0x134f023e7a001
	void Debug Set DayAndNightTime(float Time);// 0x134ef23e7a001
	void SetMapID(int MapID);// 0x1523723e7a008
	void Event_OnResBegin(int Time, byte Type, Vector Location, S_ResurrectInfo options);// 0x134ed23e7a001
	void BeginPlayBlueprint();// 0x134ec23e7a001
	void OnCharacterEjectStateChanged(byte State);// 0x134eb23e7a001
	static void ExecuteUbergraph_BP_Character_BattleRoyale(int EntryPoint, bool CallFunc_IsInSkywardDive_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, float K2Node_Event_Time, float K2Node_CustomEvent_Time, GameInstance* CallFunc_GetGameInstance_ReturnValue, int K2Node_CustomEvent_MapID, bool CallFunc_IsValid_ReturnValue, SolarGameInstanceBase* K2Node_DynamicCast_AsSolar_Game_Instance_Base, bool K2Node_DynamicCast_bSuccess, SolarMapManager* CallFunc_GetSolarMapManager_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Location, S_ResurrectInfo K2Node_CustomEvent_Options, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, float CallFunc_GetCurBattleTime_ReturnValue, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, int CallFunc_FTrunc_ReturnValue, byte K2Node_Event_State, bool K2Node_SwitchEnum_CmpSuccess, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, S_SkillState K2Node_Select_Default);// 0x70a8b043b427a000
	void OnPlayerRevive__DelegateSignature(SolarCharacter* TargetCharacter);// 0x1881923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SI_RebornLine_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* FX_Tag;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent* FX_Tag_Glow;//[Offset: 0x238, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
	void ReceiveBeginPlay();// 0x129c623e7a001
	void Event_SetWaitingColor();// 0x1475523e7a008
	void Event_SetFinishColor();// 0xf25e23e7a001
	void ExecuteUbergraph_BP_SI_RebornLine(int EntryPoint);// 0x79e50dd23bfc290
<----------Generated by SSpawner v1.0.2---------->


Class: MiniMapUMG_C.MiniMapWidget.MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6f8, Size: 0x8]
	WidgetAnimation* Anim_Exit;//[Offset: 0x700, Size: 0x8]
	HorizontalBox* Airline;//[Offset: 0x708, Size: 0x8]
	UI_DrawLinePanel_C* DrawLinePanel;//[Offset: 0x710, Size: 0x8]
	Image* Img_Airdrop;//[Offset: 0x718, Size: 0x8]
	CanvasPanel* MapRotate;//[Offset: 0x720, Size: 0x8]
	CanvasPanel* Panel_Capsule;//[Offset: 0x728, Size: 0x8]
	Image* Route_line;//[Offset: 0x730, Size: 0x8]
	Image* Route_line_end;//[Offset: 0x738, Size: 0x8]
	Image* Route_line_start;//[Offset: 0x740, Size: 0x8]
	CanvasPanel* RTIconLayer;//[Offset: 0x748, Size: 0x8]
	Image* SolarCapsule;//[Offset: 0x750, Size: 0x8]
	float RefreshTime;//[Offset: 0x758, Size: 0x4]
	<int,PlayerMark_C*> PlayerMarkMap;//[Offset: 0x760, Size: 0x50]
	MarkIcon_C*[] MarkersPool;//[Offset: 0x7b0, Size: 0x10]
	Vector2D MapScaleRange;//[Offset: 0x7c0, Size: 0x8]
	float SliderBarValue;//[Offset: 0x7c8, Size: 0x4]
	Vector2D FOVOffset;//[Offset: 0x7cc, Size: 0x8]
	Vector2D SizeSet;//[Offset: 0x7d4, Size: 0x8]
	Vector2D VectorCenter;//[Offset: 0x7dc, Size: 0x8]
	Vector2D RealVector;//[Offset: 0x7e4, Size: 0x8]
	int Index;//[Offset: 0x7ec, Size: 0x4]
	<int,FString> PlayerIconMap;//[Offset: 0x7f0, Size: 0x50]
	<int,FString> PlayerOutOfMapMap;//[Offset: 0x840, Size: 0x50]
	MarkIcon_C* VehicleMark;//[Offset: 0x890, Size: 0x8]
	float MiniFOV;//[Offset: 0x898, Size: 0x4]
	MapMarkBase*[] MarkList;//[Offset: 0x8a0, Size: 0x10]
	bool IsCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 0x1]
	FString GetModuleName();// 0x1321423e7a001
	void ClearAirline(bool bFaded, TimerHandle CallFunc_K2_SetTimer_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x1321323e7a001
	void CloseAirline();// 0x1321223e7a001
	void InitAirline(MiniMapAirlineData InData, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x1321123e7a001
	void InitCapsule(MiniMapAirlineData InData, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x1321023e7a001
	void SetAirlineType(MiniMapAirlineData InData, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default);// 0x1320f23e7a001
	int AddDotLineOnMap(Actor* StartPointActor, Actor* EndPointActor, LinearColor DotLineColor, int CallFunc_AddDotLine_ReturnValue);// 0x1320e23e7a001
	MapMarkBase* InitMarkIconOnMapFrame(class MapMarkBase InMapMarkClass, out const Vector2D Pivot, int ZOrder, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, MapMarkBase* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x1320d23e7a001
	MapMarkBase* InitMarkIcon(class MapMarkBase InMapMarkClass, out const Vector2D InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int ZOrder, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, MapMarkBase* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_Array_Add_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x1320c23e7a001
	void DisableOneFinger(PointerEvent Event, BP_MapInputManager_C* K2Node_DynamicCast_AsBP_Map_Input_Manager, bool K2Node_DynamicCast_bSuccess);// 0x1327423e7a001
	static void GetTwoFingerDistance(out float Distance, Vector2D FirstFinger, <int,Vector2D> FingerMapRef, int[] TuchedFingers, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Distance2D_ReturnValue, int[] CallFunc_Map_Keys_Keys, bool CallFunc_IsValid_ReturnValue);// 0x1320a23e7a001
	void UpdateAirlineData(float MovePercent, Vector2D InIconPos, float CallFunc_Subtract_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x1320923e7a001
	void InitMapAirline(MiniMapAirlineData AirlineData);// 0x1320823e7a001
	void PreConstruct(bool IsDesignTime);// 0x1320723e7a001
	void RemoveMarkIcon(MapMarkBase* InMapMark);// 0x1320623e7a001
	void RemoveDotLineOnMap(int DotLineID);// 0x1320523e7a001
	void Event_EndOfInitialization();// 0x1320423e7a001
	void Destruct();// 0x152d223e7a008
	void FormatAirline(float InScaleValue);// 0x152c223e7a008
	static void ExecuteUbergraph_MiniMapUMG(int EntryPoint, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_Event_IsDesignTime, MapMarkBase* K2Node_Event_InMapMark, bool CallFunc_Array_Contains_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int K2Node_Event_DotLineID, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, MapMarkBase* CallFunc_Array_Get_Item, PlayerMark_C*[] CallFunc_Map_Values_Values, PlayerMark_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, bool CallFunc_IsValid_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerNav_C* CallFunc_Create_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_InScaleValue, Vector2D CallFunc_MakeVector2D_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerMark_C* CallFunc_Create_ReturnValue, int Temp_int_Array_Index_Variable, MapMarkBase* CallFunc_Array_Get_Item, PanelWidget* CallFunc_GetParent_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffff8e23bfa002
<----------Generated by SSpawner v1.0.2---------->


Class: MiniMapWidget.MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	MiniMapData MiniMapData;//[Offset: 0x3b4, Size: 0x18]
	bool AutoOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 0x1]
	bool OnCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 0x1]
	bool WithIconScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ce, Size: 0x1]
	float AspectRatio;//[Offset: 0x3d0, Size: 0x4]
	enum CurrentState;//[Offset: 0x3d4, Size: 0x1]
	Vector2D SelfNavSlotSize;//[Offset: 0x3d8, Size: 0x8]
	<int,PlayerNavWidget*> PlayerNavMap;//[Offset: 0x3e0, Size: 0x50]
	SizeBox* MapFOVSizeBox;//[Offset: 0x430, Size: 0x8]
	CanvasPanel* MapOffset;//[Offset: 0x438, Size: 0x8]
	SolarImage* SolarImageMap;//[Offset: 0x440, Size: 0x8]
	CanvasPanel* ImageFrameLayer;//[Offset: 0x448, Size: 0x8]
	CanvasPanel* MarkerLayer;//[Offset: 0x450, Size: 0x8]
	ScaleBox* MapScale;//[Offset: 0x458, Size: 0x8]
	CanvasPanel* RenderTargetCanvas;//[Offset: 0x460, Size: 0x8]
	SolarImage* Img_EMP;//[Offset: 0x468, Size: 0x8]
	MeshRectangleWidget* IconMeshRectangleWidget;//[Offset: 0x470, Size: 0x8]
	MeshRectangleWidget* AnimIconMeshWidget;//[Offset: 0x478, Size: 0x8]
	ConfigMiniMapMeshWidgetData MiniMapMeshWidgetConfigData;//[Offset: 0x480, Size: 0x18]
	PlayerNavWidget* SelfNav;//[Offset: 0x498, Size: 0x8]
	Vector2D CurrentMapOffset;//[Offset: 0x4a0, Size: 0x8]
	Vector2D MapIconScale;//[Offset: 0x4a8, Size: 0x8]
	SolarMapManager* MapMgr;//[Offset: 0x4b0, Size: 0x8]
	MiniMapBGWidget* MapImageWidget;//[Offset: 0x4b8, Size: 0x8]
	bool bBelongToBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	float ClampMarkTickRate;//[Offset: 0x4c4, Size: 0x4]
	<enum,AirdropMeshWidgetData> AirdropMeshWidgetDataMap;//[Offset: 0x4c8, Size: 0x50]
	float AdjustMapRatio;//[Offset: 0x518, Size: 0x4]
	float AdjustWorldDis;//[Offset: 0x51c, Size: 0x4]
	float AirdropAnimOutsideScale;//[Offset: 0x520, Size: 0x4]
	float AirdropClearTime;//[Offset: 0x524, Size: 0x4]
	ConfigMiniMapMeshWidgetData ReviveMarkNormalParms;//[Offset: 0x52c, Size: 0x18]
	ConfigMiniMapMeshWidgetData ReviveMarkAnimParms;//[Offset: 0x544, Size: 0x18]
	float ReviveMarkAnimTime;//[Offset: 0x55c, Size: 0x4]
	float IconSizeFormatInterval;//[Offset: 0x560, Size: 0x4]
	bool bUpdateSelfNav;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574, Size: 0x1]
	CurveFloat* CacheFOVScaleCurve;//[Offset: 0x5c8, Size: 0x8]
	void VehicleClear(bool IsOwner);// 0x45eb23bfa041
	void UpdateVehicleModeMapFOV();// 0x45ea23bfa041
	void UpdatePoisonEffect(float PosX, float PosY, float Radius);// 0x45e923bfa041
	void UpdateMeshWidgetMarkSlotSize(FString MarkKey, out const Vector2D InMarkSlotSize);// 0x45e823bfa041
	void UpdateMeshWidgetMarkColorOpacityIndex(FString MarkKey, const int InColorOpacityIndex);// 0x45e723bfa041
	void UpdateMeshWidgetIconTexId(FString MarkKey, const int InIconTexId);// 0x45e623bfa041
	void UpdateEmp();// 0x45e523bfa041
	void StopReviveTeammateAnim(FString InKey);// 0x45e423bfa041
	FString SpawnMeshWidgetMapMarkInfo(enum InMarkType, out const Vector2D InMarkPos, FString InMarkName, int InMarkIndex);// 0x45e323bfa041
	void SetMapFOVBySpeed(float InSpeed);// 0x45e223bfa041
	void SetMapFOVAutoOffset(float InNewFOV);// 0x45e123bfa041
	void SetMapFOV(float InNewFOV, out const Vector2D InScaleCenter);// 0x45e023bfa041
	void SetBelongToBigMap(bool bIsBelongToBigMap);// 0x45df23bfa041
	void SetAirdropMeshWidgetStatus(FString InKey, enum InNewStatus);// 0x45de23bfa041
	void RemoveMeshWidgetMark(FString MarkKey);// 0x45dd23bfa041
	void RemoveAllNav();// 0x45dc23bfa041
	void RegisterDataProvider();// 0x45db23bfa041
	void RefreshLastVehicleLocation();// 0x45da23bfa041
	void PlayReviveTeammateAnim(FString InKey, byte InColorIdx);// 0x45d923bfa041
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x45d823bfa041
	void OnReviveWorldMarkRemoved(FString InPlayerID);// 0x45d723bfa041
	void OnReviveWorldMarkPlayAnim(SolarPlayerState* InPlayerState);// 0x45d623bfa041
	void OnReviveWorldMarkCreated(FString InPlayerID);// 0x45d523bfa041
	void OnRemoveReviveWorldMark(SolarPlayerState* InPlayerState);// 0x45d423bfa041
	void OnRemoveAllReviveWorldMark();// 0x45d323bfa041
	void OnMiniMapDataInitialized();// 0x45d223bfa041
	void OnFOVScaleChangedByPoison(CurveFloat* InCurve);// 0x45d123bfa041
	void OnCreateReviveWorldMark(SolarPlayerState* InPlayerState, out const Vector InWorldLoc);// 0x45d023bfa041
	void OnAllReviveWorldMarkRemoved();// 0x45cf23bfa041
	void KeepSelfInTheCenter();// 0x45ce23bfa041
	bool IsReviveWorldMarkCreated(FString InPlayerID);// 0x45cd23bfa041
	void InitMinFOV(float InFOV);// 0x45cc23bfa041
	void InitMapFovAndSize();// 0x45cb23bfa041
	void InitFovAndSize();// 0x45ca23bfa041
	void IconSizeFormat();// 0x45c923bfa041
	PlayerNavWidget* GetSelfNav();// 0x45c823bfa041
	Vector2D GetMinAndMaxFOV();// 0x45c723bfa041
	SolarPlayerState* GetCameraFocusedCharacterState();// 0x45c623bfa041
	void FormatAirline(float InScaleValue);// 0x45c523bfa041
	void ClearVehicleMarkWidget();// 0x45c423bfa041
	void ClearPlayerMarkPoint();// 0x45c323bfa041
	void ClearMiniMapMarkWidget();// 0x45c223bfa041
	void AdjustMapOffset(Vector2D MapLocation);// 0x45c123bfa041
	FString AddMeshWidgetMark(out const Vector2D InPosition, out const Vector2D InMarkSlotSize, const enum InMarkType, const float InRenderTransformScaleX, FString InMarkName, const int InMarkIndex);// 0x45c023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MiniMapData
	bool bUseAsBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float MinFOV;//[Offset: 0x4, Size: 0x4]
	float MaxFOV;//[Offset: 0x8, Size: 0x4]
	float CurrentFOV;//[Offset: 0xc, Size: 0x4]
	Vector2D MapSize;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: UI_DrawLinePanel_C.DrawLinePanel.SolarUserWidget.UserWidget.Widget.Visual.Object
<----------Generated by SSpawner v1.0.2---------->


Class: DrawLinePanel.SolarUserWidget.UserWidget.Widget.Visual.Object
	float MapSize;//[Offset: 0x348, Size: 0x4]
	float CurrentFOV;//[Offset: 0x34c, Size: 0x4]
	LinearColor SafeAreaColor;//[Offset: 0x388, Size: 0x10]
	LinearColor PosionCircleColor;//[Offset: 0x398, Size: 0x10]
	LinearColor DotLineColor;//[Offset: 0x3a8, Size: 0x10]
	LinearColor AirlineProgressColor;//[Offset: 0x3b8, Size: 0x10]
	LinearColor CapsuleBackgroundColor;//[Offset: 0x3c8, Size: 0x10]
	LinearColor AirdropBackgroundColor;//[Offset: 0x3d8, Size: 0x10]
	float AirdropAirlineSizeY;//[Offset: 0x3e8, Size: 0x4]
	float MaterialCircleSize;//[Offset: 0x3ec, Size: 0x4]
	float DotLineDottedLength;//[Offset: 0x3f0, Size: 0x4]
	float DotLineDottedInterval;//[Offset: 0x3f4, Size: 0x4]
	DotLineData[] DotLineDataList;//[Offset: 0x400, Size: 0x10]
	CircleData[] CircleDataList;//[Offset: 0x410, Size: 0x10]
	SolarMapManager* MapManager;//[Offset: 0x420, Size: 0x8]
	SolarCapsuleRoot* CapsuleRoot;//[Offset: 0x428, Size: 0x8]
	SoftObjectPath CircleMaterialPath;//[Offset: 0x430, Size: 0x18]
	SoftObjectPath DottedLineMaterialPath;//[Offset: 0x448, Size: 0x18]
	MaterialInstanceDynamic*[] CircleMaterialInstanceArray;//[Offset: 0x460, Size: 0x10]
	MaterialInstanceDynamic*[] DottedLineMaterialInstanceArray;//[Offset: 0x470, Size: 0x10]
	float InitFOV;//[Offset: 0x480, Size: 0x4]
	void RemoveDotLine(int DotLineID);// 0x439523bfa041
	void RemoveCircle(int CircleID);// 0x439423bfa041
	void OnAirlineUpdate(out const Vector2D InNewPos);// 0x439323bfa041
	void OnAirlineSet(const MiniMapAirlineData InData);// 0x439223bfa041
	void OnAirlineClear();// 0x439123bfa041
	void InitializePanelFOV(float InFOV);// 0x439023bfa041
	int AddDotLine(Actor* StartPointActor, Actor* EndPointActor, LinearColor Color);// 0x438f23bfa041
	int AddCircle(Vector2D Center, float Radius, LinearColor Color);// 0x438e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: DotLineData
	Actor* StartActor;//[Offset: 0x0, Size: 0x8]
	Actor* EndActor;//[Offset: 0x8, Size: 0x8]
	LinearColor DotLineColor;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CircleData
	Vector2D Center;//[Offset: 0x0, Size: 0x8]
	float Radius;//[Offset: 0x8, Size: 0x4]
	LinearColor LineColor;//[Offset: 0xc, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerMark_C.PlayerMark.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	int OrderId;//[Offset: 0x288, Size: 0x4]
	Color Color1;//[Offset: 0x28c, Size: 0x4]
	Color Color2;//[Offset: 0x290, Size: 0x4]
	Color Color3;//[Offset: 0x294, Size: 0x4]
	Color Color4;//[Offset: 0x298, Size: 0x4]
	FString GetModuleName();// 0x1573d23e7a008
	void SetOrder(int OrderId, bool K2Node_SwitchInteger_CmpSuccess);// 0xffffffff08be6fe0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1576d23e7a001
	static void ExecuteUbergraph_PlayerMark(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x131c123e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerMark.UserWidget.Widget.Visual.Object
	Image* PlayerMarkImage;//[Offset: 0x260, Size: 0x8]
	TextBlock* Length;//[Offset: 0x268, Size: 0x8]
	SolarMapManager* MapManager;//[Offset: 0x270, Size: 0x8]
	Vector2D MarkPoint;//[Offset: 0x278, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MarkIcon_C.MarkIconWidget.MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3c0, Size: 0x8]
	bool IsAddToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	Object* Texture;//[Offset: 0x3d0, Size: 0x8]
	int OrderId;//[Offset: 0x3d8, Size: 0x4]
	Color Color1;//[Offset: 0x3dc, Size: 0x4]
	Color Color2;//[Offset: 0x3e0, Size: 0x4]
	Color Color3;//[Offset: 0x3e4, Size: 0x4]
	Color Color4;//[Offset: 0x3e8, Size: 0x4]
	FString GetModuleName();// 0x131f423e7a001
	void SetOutWindowStateOrder(int OrderId, bool K2Node_SwitchInteger_CmpSuccess, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x152d623e7a008
	void PreConstruct(bool IsDesignTime);// 0xe41e360f24d8a000
	void ExecuteUbergraph_MarkIcon(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xfffffffef570f9c0
<----------Generated by SSpawner v1.0.2---------->


Class: MarkIconWidget.MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	FString AtlasPath;//[Offset: 0x388, Size: 0x10]
	FString SpriteType;//[Offset: 0x398, Size: 0x10]
	Image* ImageMarker;//[Offset: 0x3a8, Size: 0x8]
	void SetTransparent(float TransparentPercent);// 0x45aa23bfa041
	void SetMarkerType(enum Type, bool bRefreshSlot, bool bNeedSyncLoadIcon);// 0x45a923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerNavWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	WidgetSwitcher* IconSwitcher;//[Offset: 0x348, Size: 0x8]
	CanvasPanel* PlayerNav;//[Offset: 0x350, Size: 0x8]
	CanvasPanel* PlayerOutOfMapNav;//[Offset: 0x358, Size: 0x8]
	Image* FOV;//[Offset: 0x360, Size: 0x8]
	Image* ImageRoleNav;//[Offset: 0x368, Size: 0x8]
	TextBlock* PlayerOrder;//[Offset: 0x370, Size: 0x8]
	void SwitchPlayerNav(bool bOutOfBounds);// 0x466823bfa041
	void SetBrushResourceObject(Object* InSprite);// 0x466723bfa041
	void ResetPlayerNav();// 0x466623bfa041
	void ReceivePlayerDead();// 0x466523bfa041
	void OnAllPlayerNavVisibilityChanged(bool bVisible);// 0x466423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MeshRectangleWidget.MeshWidgetUWidget.Widget.Visual.Object
	MaterialInterface* BaseMaterial;//[Offset: 0x148, Size: 0x8]
	int NumFloat4PerInstance;//[Offset: 0x150, Size: 0x4]
	void SetInstanceNum(int NewNum);// 0x3f1023bfa041
	void ModifyInstanceNum(int dNum);// 0x3f0f23bfa041
	void InitUnitTestProvider();// 0x3f0e23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: MeshWidgetUWidget.Widget.Visual.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ConfigMiniMapMeshWidgetData
	float TimeSpeed;//[Offset: 0x0, Size: 0x4]
	byte IconTexId;//[Offset: 0x4, Size: 0x1]
	byte ColorOpacityIndex;//[Offset: 0x5, Size: 0x1]
	Vector2D OpacityCoeff;//[Offset: 0x8, Size: 0x8]
	Vector2D ScaleAndRipplingCoeff;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MiniMapBGWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarImage* Img_Map;//[Offset: 0x348, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AirdropMeshWidgetData
	ConfigMiniMapMeshWidgetData IconData;//[Offset: 0x0, Size: 0x18]
	ConfigMiniMapMeshWidgetData DiffuseData;//[Offset: 0x18, Size: 0x18]
	ConfigMiniMapMeshWidgetData FlashData;//[Offset: 0x30, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_MapInputManager_C.WidgetInputManager.Object
	void On Input Leave(PointerEvent Event, PointerEvent tmpEvent, bool CallFunc_PointerEvent_IsTouchEvent_ReturnValue, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, bool CallFunc_Map_Contains_ReturnValue);// 0x152da23e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerNav_C.PlayerNavWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x380, Size: 0x8]
	Image* Arror;//[Offset: 0x388, Size: 0x8]
	Image* OutOfMapArror;//[Offset: 0x390, Size: 0x8]
	Image* OutOfMapImageRole;//[Offset: 0x398, Size: 0x8]
	int OrderId;//[Offset: 0x3a0, Size: 0x4]
	SlateColor Color1;//[Offset: 0x3a8, Size: 0x28]
	SlateColor Color2;//[Offset: 0x3d0, Size: 0x28]
	SlateColor Color3;//[Offset: 0x3f8, Size: 0x28]
	SlateColor Color4;//[Offset: 0x420, Size: 0x28]
	LinearColor DeadColor;//[Offset: 0x448, Size: 0x10]
	bool isOutOfMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	int EditorOrder;//[Offset: 0x45c, Size: 0x4]
	bool IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	float Rotate;//[Offset: 0x464, Size: 0x4]
	bool HasDeadHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 0x1]
	FString GetModuleName();// 0x131c423e7a001
	void SetOrder(int OrderId, bool K2Node_SwitchInteger_CmpSuccess);// 0x131c323e7a001
	void PreConstruct(bool IsDesignTime);// 0x131c223e7a001
	void ResetPlayerNav();// 0x131df23e7a001
	void ReceivePlayerDead();// 0x152f623e7a008
	void ExecuteUbergraph_PlayerNav(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xffffff9223bfa002
<----------Generated by SSpawner v1.0.2---------->


Class: BP_WarmGameLogic_NoramlWarmGame_C.BP_WarmGameLogicBase_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 0x8]
	<int,Vector2D> None;//[Offset: 0x240, Size: 0x50]
	<int,Vector2D> None;//[Offset: 0x290, Size: 0x50]
	DataTable* BattleTimelineConfig;//[Offset: 0x2e0, Size: 0x8]
	<int,Vector2D> None;//[Offset: 0x2e8, Size: 0x50]
	int AirlineID;//[Offset: 0x338, Size: 0x4]
	Vector[] PoisonCircleCenterArray;//[Offset: 0x340, Size: 0x10]
	Int32Range None;//[Offset: 0x350, Size: 0x10]
	void None(BP_MapInfoComponent_C* InputPin, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x1328f23e7a001
	static void None(BP_MapInfoComponent_C* MapInfo, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int[] CallFunc_Map_Keys_Keys, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Array_Length_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_Subtract_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_Airline CallFunc_GetRowData_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, AirlineData K2Node_MakeStruct_AirlineData);// 0x1538a23bfa041
	void Event_ExecLogic();// 0x1328823e7a001
	void ExecuteUbergraph_BP_WarmGameLogic_NoramlWarmGame(int EntryPoint, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x152b223e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPoisonDamageEvent.SolarSystemDamage.SolarPointDamageEvent.PointDamageEvent.DamageEvent
<----------Generated by SSpawner v1.0.2---------->


Class: SolarSystemDamage.SolarPointDamageEvent.PointDamageEvent.DamageEvent
<----------Generated by SSpawner v1.0.2---------->


Class: BP_DI_DeathBoxA_TreasureBox_C.DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x728, Size: 0x8]
	SceneComponent* FX_Position;//[Offset: 0x730, Size: 0x8]
	SceneComponent* Charge_VFX;//[Offset: 0x738, Size: 0x8]
	ParticleSystemComponent*[] ChargeEffects;//[Offset: 0x740, Size: 0x10]
	bool ResurrectionComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]
	LinearColor[] QualityMap;//[Offset: 0x758, Size: 0x10]
	ParticleSystem*[] DeadBox_Particle;//[Offset: 0x768, Size: 0x10]
	ParticleSystemComponent* QualityEffect;//[Offset: 0x778, Size: 0x8]
	int NewBoxParticle;//[Offset: 0x780, Size: 0x4]
	bool CanBuyResurrect(const SolarCharacter* InReqCharacter, SCMPlayerState* OwnerPlayer, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SolarResurrectionComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue);// 0xe6fa23e7a001
	bool IsSameTeam(byte CharacterTeamID, FString CallFunc_Conv_ByteToString_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0xe70123e7a001
	void RemoveEffect(SolarCharacter* NewParam, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, ParticleSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SceneComponent* CallFunc_GetAttachParent_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0xe7b323e7a001
	void Add Effect(SolarCharacter* NewParam, int Temp_int_Array_Index_Variable, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetComponentLocation_ReturnValue, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x155bf23e7a001
	void UserConstructionScript();// 0xffffff8f23bfa000
	void ReceiveAddEffect(const SolarCharacter* SolarChar);// 0xe73223e7a001
	void ReceiveRemoveEffect(const SolarCharacter* SolarChar);// 0xe73423e7a001
	void ReceiveSetUIEnable(bool IsShow);// 0xe73323e7a001
	void ReceiveEndPlay(byte EndPlayReason);// 0xffffff8e23bfa002
	void ReceiveBeginPlay();// 0x2e26c1708d842e9d
	void ExecuteUbergraph_BP_DI_DeathBoxA_TreasureBox(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, const SolarCharacter* K2Node_Event_SolarChar, const SolarCharacter* K2Node_Event_SolarChar, bool K2Node_Event_IsShow, byte K2Node_Event_EndPlayReason, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarResurrectionComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x2dffbd23eea02e
<----------Generated by SSpawner v1.0.2---------->


Class: UI_WorldMark_ReviveTeammates_C.WorldMark_ReviveTeammates.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x480, Size: 0x8]
	int HideDistance;//[Offset: 0x488, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x490, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x4a0, Size: 0x10]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, CharacterSkinConfig* CallFunc_GetSkinConfig_ReturnValue, SoftObjectPath CallFunc_GetSkinIcon_ReturnValue, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, Texture2D* CallFunc_LoadTexture2DBySoftPath_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, SolarResurrectionComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1297c23e7a001
	void SetColor(byte Index, byte CallFunc_Subtract_ByteByte_ReturnValue, byte CallFunc_BMax_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, SlateColor K2Node_MakeStruct_SlateColor);// 0x1297b23e7a001
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x1297a23e7a001
	void SetIcon(Widget* Content, int None, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x1297923e7a001
	void PreConstruct(bool IsDesignTime);// 0x1297823e7a001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1297723e7a001
	void OnInitialized();// 0x1417523e7a008
	void SetPlayerIDAndChangeColor(FString PlayerId);// 0xffffffff08cdb820
	void ExecuteUbergraph_UI_WorldMark_ReviveTeammates(int EntryPoint, FString K2Node_Event_PlayerID, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue);// 0x1293e23e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: UI_WorldMark_ReviveTeammatesDeathbox_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a0, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x3a8, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x3b0, Size: 0x8]
	Image* Img_Light;//[Offset: 0x3b8, Size: 0x8]
	Image* Img_Light;//[Offset: 0x3c0, Size: 0x8]
	Image* Img_Revival;//[Offset: 0x3c8, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x3d0, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x3d8, Size: 0x8]
	int HideDistance;//[Offset: 0x3e0, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x3e8, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x3f8, Size: 0x10]
	FString PlayerId;//[Offset: 0x408, Size: 0x10]
	FString DistanceLocalString;//[Offset: 0x418, Size: 0x10]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffff8f23bf9fff
	void SetColor(byte Index, byte CallFunc_Subtract_ByteByte_ReturnValue, byte CallFunc_BMax_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, SlateColor K2Node_MakeStruct_SlateColor);// 0x3f73f2c262c5d333
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0xbc4a23e7a008
	static FText Get_Distance_Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x1376023e7a008
	void SetIcon(Widget* Content, int None, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x160e823e7a008
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x38ffbf23eea065
	void PreConstruct(bool IsDesignTime);// 0x192d623bfa041
	void OnInitialized();// 0xec4623e7a001
	static void ExecuteUbergraph_UI_WorldMark_ReviveTeammatesDeathbox(int EntryPoint, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, FText CallFunc_Get_Distance_Text_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, bool K2Node_Event_IsDesignTime);// 0xffffffffccc1f530
<----------Generated by SSpawner v1.0.2---------->


Class: UI_MapMark_ReviveTeammates_C.MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x388, Size: 0x8]
	WidgetAnimation* Occupy_Loop_Anim;//[Offset: 0x390, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x398, Size: 0x8]
	Image* Img_Light;//[Offset: 0x3a0, Size: 0x8]
	Image* Img_Light;//[Offset: 0x3a8, Size: 0x8]
	Image* Img_Revival;//[Offset: 0x3b0, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x3b8, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x3c0, Size: 0x8]
	int HideDistance;//[Offset: 0x3c8, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x3d0, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x3e0, Size: 0x10]
	FString PlayerId;//[Offset: 0x3f0, Size: 0x10]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xeca023e7a008
	void SetColor(byte Index, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default);// 0xec5d23e7a00b
	void SetIcon(Widget* Content, int None, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x187de23bfa041
	void Event_PlayAnim();// 0x19f5623bfa041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x19a0423bfa041
	void ExecuteUbergraph_UI_MapMark_ReviveTeammates(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue);// 0x2dffbd23eea02e
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Character_BattleRoyaleMap01_C.BP_Character_BattleRoyale_C.BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BP_GameState_BattleRoyaleMap01_C.BP_GameState_BattleRoyale_C.BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BP_PBagsTrail_Common_C.SolarBackpackSFX.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_WallRunLoop;//[Offset: 0x288, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_Trail;//[Offset: 0x290, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_DropSlowDown;//[Offset: 0x298, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_SkyDivingLanding;//[Offset: 0x2a0, Size: 0x8]
	SceneComponent* VFX;//[Offset: 0x2a8, Size: 0x8]
	float TrailFade_Size_581709C845BD673DB0841C82710F99F1;//[Offset: 0x2b0, Size: 0x4]
	byte TrailFade__Direction_581709C845BD673DB0841C82710F99F1;//[Offset: 0x2b4, Size: 0x1]
	TimelineComponent* TrailFade;//[Offset: 0x2b8, Size: 0x8]
	void OnWallRun();// 0xffffff9223bfa002
	void BackpackSFXEnd();// 0x1c3ce23e7a001
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal, Rotator CallFunc_MakeRotFromZ_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue);// 0xb0323bfa002
	void BackpackSFXBegin(byte InJetType, bool GroundDetected, bool K2Node_SwitchEnum_CmpSuccess);// 0x2e26c1708d842e9d
	void UpdateTrailParticle(BackpackTrailAssemblingParams SoftObjectRef, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x23b7123c1f68e
	ParticleSystemComponent* GetTrailEffectComponent();// 0x2558323bfa041
	void FX_FinishDeactive();// 0x271e023e7a001
	void SkyDivingLanding();// 0x23a4923c1fb7c
	void DropSlowDown();// 0x1c3cc23e7a001
	void Normal Jet Fly();// 0x271d623e7a008
	void FX_InitializeDeactive();// 0x2712423e7a001
	void TrailFade__FinishedFunc();// 0x23ab723c1f9a2
	void TrailFade__UpdateFunc();// 0x1cff823bfa041
	void OnBackpackTrailAssembling(out const BackpackTrailAssemblingParams Params, enum PropellingMode);// 0x23a5323c1fb6e
	void TryFadeOutTrail();// 0x2715223e7a008
	void ExecuteUbergraph_BP_PBagsTrail_Common(int EntryPoint, const BackpackTrailAssemblingParams K2Node_Event_Params, enum K2Node_Event_PropellingMode, bool CallFunc_IsActive_ReturnValue);// 0x2554d23e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: BackpackTrailAssemblingParams.TableRowBase
	ParticleSystem* TrailParticle;//[Offset: 0x8, Size: 0x28]
	ParticleSystem* WallRunTrailParticle;//[Offset: 0x30, Size: 0x28]
	ParticleSystem* OffgasParticle;//[Offset: 0x58, Size: 0x28]
	ParticleSystem* WallRunOffgasParticle;//[Offset: 0x80, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_PBagsOffgas_Common_C.SolarBackpackSFX.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	ParticleSystemComponent* FX_BoostClimb_Start;//[Offset: 0x288, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_MainJet;//[Offset: 0x290, Size: 0x8]
	SceneComponent* VFX;//[Offset: 0x298, Size: 0x8]
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0x2557723e7a008
	void BackpackSFXEnd();// 0x2393123c2054f
	void OnBackpackTrailAssembling(out const BackpackTrailAssemblingParams Params, enum PropellingMode);// 0xffffff9223bfa002
	void ExecuteUbergraph_BP_PBagsOffgas_Common(int EntryPoint, byte K2Node_Event_InJetType, bool K2Node_Event_GroundDetected, bool K2Node_SwitchEnum_CmpSuccess, const BackpackTrailAssemblingParams K2Node_Event_Params, enum K2Node_Event_PropellingMode, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x23a5823c1fb67
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SETTFormula_BigEscape_C.SettlementFormula.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]
	int[] PersonalRankExpReward;//[Offset: 0x230, Size: 0x10]
	SettlementParam_ExtraRewardInfo RankReward;//[Offset: 0x240, Size: 0x40]
	SettlementParam_ExtraRewardInfo[] CommonRewards;//[Offset: 0x280, Size: 0x10]
	int WarmGame Account Exp;//[Offset: 0x290, Size: 0x4]
	float GetKDA(out const SettlementParam_KDA InParam, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x23a5d23c1fb5a
	void TEMP Is Player In NewPlayer Games(out bool Result, int CallFunc_GetWramGameType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x23a8a23c1fa78
	static SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam, int Temp_int_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, byte CallFunc_GetTeamRank_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, int Temp_int_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, int K2Node_Select_Default, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, int Temp_int_Variable, bool Temp_bool_Variable, FString CallFunc_FormatRewardItem_ItemString, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo[] K2Node_MakeArray_Array);// 0xffffff8f23bfa000
	void MVPLifeTimeScore(float Life Time, out float LTMVPScore, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0xffffff9223bfa002
	static FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam, FString[] K2Node_MakeArray_Array);// 0x21bc823bfa041
	static int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam, int[] FullPage, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, int[] K2Node_MakeArray_Array, int K2Node_Select_Default, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x23cf123c1eec8
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_MVPLifeTimeScore_LTMVPScore, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0xfffffffeee706a40
	int GetZomborg(out const SettlementParam_Zomborg InParam, int Result, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Round_ReturnValue);// 0x23aff23c1f73b
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue);// 0xfffffffef48670a0
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo, int CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2558423bfa041
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_TEMP_Is_Player_In_NewPlayer_Games_Result, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue);// 0x1f05423bfa001
<----------Generated by SSpawner v1.0.2---------->


Class: BP_PBags_MC_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	MaterialInstanceDynamic* TryCreateDynamicMaterialInstance(PrimitiveComponent* Component, int ElementIndex, MaterialInterface* SourceMaterial, FName OptionlName, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x1c3cf23e7a001
	void FX_Idle();// 0x23a9923c1f9e8
	void FX_Flying();// 0x23b0823c1f72e
	void FX_Charging();// 0x23a8023c1fa86
	void FX_LowPower();// 0x2553b23bfa041
	void FX_Default(bool CallFunc_IsFly_ReturnValue);// 0x271e223e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Rifle_WL03_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0xffffff8f23bfa000
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xdb0, Size: 0x8]
	WeaponPartStaticMeshComponent* RedCrosshair;//[Offset: 0xdb8, Size: 0x8]
	WeaponPartStaticMeshComponent* Crosshair;//[Offset: 0xdc0, Size: 0x8]
	WeaponPartMuzzleComp* WeaponPartMuzzleComp;//[Offset: 0xdc8, Size: 0x8]
	WeaponPartGripComp* WeaponPartGripComp;//[Offset: 0xdd0, Size: 0x8]
	WeaponPartGunStockComp* WeaponPartGunStockComp;//[Offset: 0xdd8, Size: 0x8]
	WeaponPartClipComp* WeaponPartClipComp;//[Offset: 0xde0, Size: 0x8]
	WeaponPartScopeComp* WeaponPartScopeComp;//[Offset: 0xde8, Size: 0x8]
	void ReceiveBeginPlay();// 0x1328923e7a001
	void K2_SwitchDrawDistance(bool Hold);// 0x1329023e7a001
	void ExecuteUbergraph_BP_SolarPlayerWeapon(int EntryPoint, bool K2Node_Event_hold);// 0xffffff8f23bfa000
<----------Generated by SSpawner v1.0.2---------->


Class: SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	WeaponPartsComponent* WeaponPartsComponent;//[Offset: 0xda8, Size: 0x8]
	bool QueryCanEquipPart(const enum Type, const int InWeaponID);// 0x521423bfa041
	bool GetEquippedScopeTypeAndLevel(out enum Type, out int Level);// 0x521323bfa041
	int GetEquippedPartLevel(const enum Type);// 0x521223bfa041
	void GameStatisticsWeaponAddExp(float newExp, float AddExp, int OldLevel, int NewLevel, int reason);// 0x521123bfa041
	bool CanEquipPart(const enum Type);// 0x521023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SplineActor_C.SolarWeaponProjectileSpline.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8]
	StaticMeshComponent* Sphere;//[Offset: 0x258, Size: 0x8]
	SplineMeshComponent* SplineMesh;//[Offset: 0x260, Size: 0x8]
	SplineMeshComponent* GetSplineMeshComponent();// 0x1050923e7a001
	void CreateSpline(out Vector[] Pos);// 0x2e26c1708d842e9d
	void ReceiveBeginPlay();// 0x2e26c1708d842e9d
	void SetPoints(out const Vector[] Points);// 0x704ed5cfa8d7f6aa
	void Hide();// 0xfffffffed0acaf10
	void ShowHitPointAt(out const Vector Loc);// 0x1334c23e7a001
	void HideHitPoint();// 0xffffff8f23bfa000
	void ExecuteUbergraph_SplineActor(int EntryPoint, const Vector[] K2Node_Event_Points, const Vector K2Node_Event_Loc, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult);// 0x2e26c1708d842e9d
<----------Generated by SSpawner v1.0.2---------->


Class: BP_PBags_BDogF_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x310, Size: 0x8]
	void FX_Flying();// 0x2e26c1708d842e9d
	void FX_Idle();// 0x23a3923bfa041
	void FX_LowPower();// 0x2363123c21b75
	void FX_Charging();// 0xffffffff8b189c40
	void FX_Default();// 0x2e26c1708d842e9d
	void OnMeshEffectFactorChange();// 0x2459023bfa041
	void ExecuteUbergraph_BP_PBags_BDogF_Set01(int EntryPoint);// 0x2dffbd23eea02e
<----------Generated by SSpawner v1.0.2---------->


Class: GameMapElementManager.GameManagerBase.Info.Actor.Object
	<FString,SCMMapElementBase*> MapElementListWithID;//[Offset: 0x228, Size: 0x50]
	SCMMapElementBase*[] MapElementList;//[Offset: 0x278, Size: 0x10]
	SCMPlayerStart*[] PlayerStartList;//[Offset: 0x288, Size: 0x10]
	void OnAddNewMapElement(Actor* InNewActor);// 0x43c023bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: SCMPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x254, Size: 0x4]
	FString Side;//[Offset: 0x258, Size: 0x10]
	FString Job;//[Offset: 0x268, Size: 0x10]
	FString ElementID;//[Offset: 0x278, Size: 0x10]
	enum Type;//[Offset: 0x288, Size: 0x1]
	enum State;//[Offset: 0x289, Size: 0x1]
	enum Visibility;//[Offset: 0x28a, Size: 0x1]
	FName ElementName;//[Offset: 0x28c, Size: 0x8]
	Vector[] PlayerLocations;//[Offset: 0x298, Size: 0x10]
	enum SetElementVisibility(const enum NewType);// 0x47bd23bfa041
	enum SetElementState(const enum NewState);// 0x47bc23bfa041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x47bb23bfa041
	void OnElementStateChanged(const enum CurrentState);// 0x47ba23bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SolarItemRoot_C.SolarItemRootActor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SI_ElectricboxC_C.ElectronicTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x610, Size: 0x8]
	StaticMeshComponent* SM_SI_ElectricboxC_FX;//[Offset: 0x618, Size: 0x8]
	SceneComponent* VFX;//[Offset: 0x620, Size: 0x8]
	StaticMeshComponent* 3DIcon;//[Offset: 0x628, Size: 0x8]
	float OpenAnimation_OpenCurve_89E5397146EB1D36476B268C4D975163;//[Offset: 0x630, Size: 0x4]
	byte OpenAnimation__Direction_89E5397146EB1D36476B268C4D975163;//[Offset: 0x634, Size: 0x1]
	TimelineComponent* OpenAnimation;//[Offset: 0x638, Size: 0x8]
	void OpenAnimation__FinishedFunc();// 0x23bfa23c1f5b5
	void OpenAnimation__UpdateFunc();// 0x271e723e7a001
	void PlayOpenAnimation();// 0x1cff623bfa041
	void ExecuteUbergraph_BP_SI_ElectricboxC(int EntryPoint);// 0x23b5323c1f6b7
<----------Generated by SSpawner v1.0.2---------->


Class: BP_KillinfoManager_C.KillInfoManager.GameManagerBase.Info.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: KillInfoManager.GameManagerBase.Info.Actor.Object
	enum[] KillEffectsOrder;//[Offset: 0x228, Size: 0x10]
	enum[] GlobalInfoList;//[Offset: 0x238, Size: 0x10]
	FString KillLeaderID;//[Offset: 0x398, Size: 0x10]
	int KillLeaderKillNum;//[Offset: 0x3a8, Size: 0x4]
	FString AnnihilatorID;//[Offset: 0x3b0, Size: 0x10]
	FString KillLeaderChangeVoiceName;//[Offset: 0x3c8, Size: 0x10]
	FString KillLeaderShutDownVoiceName;//[Offset: 0x3d8, Size: 0x10]
	FString BeKillLeaderVoiceName;//[Offset: 0x3e8, Size: 0x10]
	FString ShutDownKillLeaderVoiceName;//[Offset: 0x3f8, Size: 0x10]
	<int,FString> KillTotalVoiceMap;//[Offset: 0x408, Size: 0x50]
	FString RevengeVoiceName;//[Offset: 0x458, Size: 0x10]
	FString KillDownVoiceName;//[Offset: 0x468, Size: 0x10]
	FString ClearTeamVoiceName;//[Offset: 0x478, Size: 0x10]
	FString ShutDownVoiceName;//[Offset: 0x488, Size: 0x10]
	FString KillDefenderVoiceName;//[Offset: 0x498, Size: 0x10]
	CustomNoticeImageTable* NoticeImageConfig;//[Offset: 0x4a8, Size: 0x8]
	bool PlayKillInfoVoice(const int InNoticeID, const int InKillNum, out const delegate InDelegate);// 0x458b23bfa041
	void OnRep_KillLeaderID();// 0x458a23bfa041
	void ClientKillInfoNotify(SolarPlayerState* InKiller, SolarPlayerState* InVictim, int KillExtraInfoHashValue);// 0x458923bfa041
	void ClientKillEffectNotify(SolarPlayerState* InKiller, SolarPlayerState* InVictim, int KillEffectExtraInfoHashValue);// 0x458823bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CustomNoticeImageTable.DataTable.Object
<----------Generated by SSpawner v1.0.2---------->


Class: GameLevelManager.GameManagerBase.Info.Actor.Object
	FString DesiredLoadLevel;//[Offset: 0x248, Size: 0x10]
	FString[] DesiredLoadElementLevels;//[Offset: 0x268, Size: 0x10]
	FString[] DesiredUnLoadElementLevels;//[Offset: 0x278, Size: 0x10]
	<FString,LevelStreamingDynamic*> LevelKeyToObject;//[Offset: 0x330, Size: 0x50]
	<SolarCharacter*> MovementDisabledCharacters;//[Offset: 0x380, Size: 0x50]
	FString[] LoadingElementLevelNames;//[Offset: 0x430, Size: 0x10]
	FString[] UnLoadingElementLevelNames;//[Offset: 0x440, Size: 0x10]
	GameMapElementManager* MapElementManager;//[Offset: 0x468, Size: 0x8]
	void SetMinimapFootprintVisible(bool bVisible);// 0x43bf23bfa041
	void OnStreamingLevelLoaded();// 0x43be23bfa041
	void OnScoutPlayerDepart();// 0x43bd23bfa041
	void OnRep_DesiredUnLoadElementLevels();// 0x43bc23bfa041
	void OnRep_DesiredLoadLevel();// 0x43bb23bfa041
	void OnRep_DesiredLoadElementLevels();// 0x43ba23bfa041
	void OnLevelLoaded();// 0x43b923bfa041
	void OnElementStreamingLevelUnLoaded();// 0x43b823bfa041
	void OnElementStreamingLevelLoaded();// 0x43b723bfa041
	void OnCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x43b623bfa041
	void LevelManagerTick();// 0x43b523bfa041
	int GetCurrentMapID();// 0x43b423bfa041
	FString GetCurrentLevel();// 0x43b323bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SolarFlyTrail_C.SolarFlyTrail.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x570, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ChaGCBP_TeamPerspective_Teammate_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	CueContent[] CueContents;//[Offset: 0x298, Size: 0x10]
	bool WhileActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x430723bfa041
	bool OnRemoveInternal(SolarCharacter* NullableCharacter, out const GameplayCueParameters Parameters);// 0x430623bfa041
	void OnLocalPlayerSpectateMeStatusChanged(SolarCharacter* Character, bool bIsSpectating);// 0x430523bfa041
	bool OnExecuteInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x430423bfa041
	bool OnActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x430323bfa041
	bool ListenLocalPlayerSpectateMeStatus();// 0x430223bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayCueNotify_Actor.Actor.Object
	bool bAutoDestroyOnRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	float AutoDestroyDelay;//[Offset: 0x22c, Size: 0x4]
	bool WarnIfTimelineIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool WarnIfLatentActionIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	GameplayTag GameplayCueTag;//[Offset: 0x234, Size: 0x8]
	GameplayTagReferenceHelper ReferenceHelper;//[Offset: 0x240, Size: 0x10]
	FName GameplayCueName;//[Offset: 0x250, Size: 0x8]
	bool bAutoAttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool IsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	bool bUniqueInstancePerInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 0x1]
	bool bUniqueInstancePerSourceObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 0x1]
	bool bAllowMultipleOnActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	bool bAllowMultipleWhileActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	int NumPreallocatedInstances;//[Offset: 0x260, Size: 0x4]
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x39cf23bfa041
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x39ce23bfa041
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x39cd23bfa041
	bool OnExecute(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x39cc23bfa041
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x39cb23bfa041
	void K2_HandleGameplayCue(Actor* MyTarget, byte EventType, out const GameplayCueParameters Parameters);// 0x39ca23bfa041
	void K2_EndGameplayCue();// 0x39c923bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: CueContent
	enum PlayTiming;//[Offset: 0x0, Size: 0x1]
	FName CustomEvent;//[Offset: 0x4, Size: 0x8]
	byte VisibleTargetFlag;//[Offset: 0xc, Size: 0x1]
	GameplayTagRequirements PlayTagRequirements;//[Offset: 0x10, Size: 0x50]
	ActorEffectContent[] ActorEffectContents;//[Offset: 0x60, Size: 0x10]
	BuffEffectContent[] BuffEffectContents;//[Offset: 0x70, Size: 0x10]
	SoundContent[] SoundContents;//[Offset: 0x80, Size: 0x10]
	ParticleSystemContent[] ParticleSystemContents;//[Offset: 0x90, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ActorEffectContent
	class ActorEffect* ActorEffectClass;//[Offset: 0x0, Size: 0x8]
	enum AffectedActorType;//[Offset: 0x8, Size: 0x1]
	bool bHideFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	GameplayTag VisibilityFlagTag;//[Offset: 0xc, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BuffEffectContent
	FName BuffEffectID;//[Offset: 0x0, Size: 0x8]
	bool bStopOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundContent
	FName SoundGroupName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSystemContent
	ActorParticleEffectSpawnInfo SpawnInfo;//[Offset: 0x0, Size: 0x70]
	bool bStopOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ActorParticleEffectSpawnInfo
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 0x28]
	enum AttachOption;//[Offset: 0x28, Size: 0x1]
	FName AttachPointName;//[Offset: 0x2c, Size: 0x8]
	byte LocationType;//[Offset: 0x34, Size: 0x1]
	Vector Location;//[Offset: 0x38, Size: 0xc]
	Rotator Rotation;//[Offset: 0x44, Size: 0xc]
	Vector Scale;//[Offset: 0x50, Size: 0xc]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	bool bEnablePooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 0x1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: GameplayTagReferenceHelper
<----------Generated by SSpawner v1.0.2---------->


Class: ChaGCBP_TeamPerspective_LocalPlayer_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_Sniper_9A01_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x2256623e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SMG_9A02_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x2459423bfa041
<----------Generated by SSpawner v1.0.2---------->


Class: BP_PBags_HMF_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ChaGCBP_TeamPerspective_Opponent_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SMG_9A12_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x227b423e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SMG_B9A04_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x224e523e7a008
<----------Generated by SSpawner v1.0.2---------->


Class: BP_SkydivingTrailEffect_C.SkydiveTrailEffect.Actor.Object
	SplineComponent* Spline;//[Offset: 0x230, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x238, Size: 0x8]
	float ParticleAlphaFadeOut_Alpha_56079AFA4AF8F5EF2064FC9C87D0666D;//[Offset: 0x240, Size: 0x4]
	byte ParticleAlphaFadeOut__Direction_56079AFA4AF8F5EF2064FC9C87D0666D;//[Offset: 0x244, Size: 0x1]
	TimelineComponent* ParticleAlphaFadeOut;//[Offset: 0x248, Size: 0x8]
	float[] SplinePointsTimeArray;//[Offset: 0x250, Size: 0x10]
	float VelocityToTangentScale;//[Offset: 0x260, Size: 0x4]
	float TrackDelay;//[Offset: 0x264, Size: 0x4]
	ParticleSystem* TrailParticleAsset;//[Offset: 0x268, Size: 0x8]
	ParticleSystem* DefenderTrailParticleAsset;//[Offset: 0x270, Size: 0x8]
	float ParticleDestroyDelay;//[Offset: 0x278, Size: 0x4]
	int SplinePointCountCheck;//[Offset: 0x27c, Size: 0x4]
	float CurrentTime;//[Offset: 0x280, Size: 0x4]
	bool IsDefender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	bool IsSameTeamWithLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]
	LinearColor EnemyTrailColor;//[Offset: 0x288, Size: 0x10]
	LinearColor TeammateTrailColor;//[Offset: 0x298, Size: 0x10]
	S_RandomColorLimit ETColor;//[Offset: 0x2a8, Size: 0x20]
	S_RandomColorLimit TMColor;//[Offset: 0x2c8, Size: 0x20]
	float LastTime;//[Offset: 0x2e8, Size: 0x4]
	bool PrintDebugMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	bool EndPointReached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1]
	float MissEndPointTolerance;//[Offset: 0x2f0, Size: 0x4]
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	float K2Node_Event_CurrentTime;//[Offset: 0x2f8, Size: 0x4]
	float CallFunc_Array_Get_Item;//[Offset: 0x2fc, Size: 0x4]
	float CallFunc_Array_Get_Item;//[Offset: 0x300, Size: 0x4]
	float CallFunc_Get_Spline_Input_Key_InputKey;//[Offset: 0x304, Size: 0x4]
	Vector CallFunc_BreakTransform_Location;//[Offset: 0x308, Size: 0xc]
	Rotator CallFunc_BreakTransform_Rotation;//[Offset: 0x314, Size: 0xc]
	Vector CallFunc_BreakTransform_Scale;//[Offset: 0x320, Size: 0xc]
	HitResult CallFunc_K2_SetWorldLocation_SweepHitResult;//[Offset: 0x32c, Size: 0x88]
	void UserConstructionScript();// 0x23a1923e7a008
	void UpdateParticleTransform(Vector bpp__WorldLocation__pf, Rotator bpp__WorldRotation__pf);// 0x2e26c1708d842e9d
	void TryRemoveSplinePoint();// 0x2dffbd23eea02e
	void ReceiveBeginPlay();// 0x2e26c1708d842e9d
	void ParticleAlphaFadeOut__UpdateFunc();// 0x23dee23e7a008
	void ParticleAlphaFadeOut__FinishedFunc();// 0x2e26c1708d842e9d
	void MoveSplinePoint(Vector bpp__WorldDeltaLocation__pf);// 0x1dfec23e7a001
	void MoveSplineComponent(Vector bpp__WorldLocationDelta__pf);// 0x23c1923bfa041
	void InitEffectAppearance(bool bpp__IsDefender__pf, bool bpp__IsSameTeamWithLocalPlayer__pf);// 0x2391123bfa041
	void Get Spline Input Key(out float bpp__InputKey__pf);// 0x2398d23bfa041
	void FadeOutAndDestroy();// 0x2dffbd23eea02e
	void ClearData();// 0xffffff8f23bfa000
	void AddTrailPointImpl(Vector bpp__Location__pf, Rotator bpp__Rotation__pf, Vector bpp__Velocity__pf);// 0x2dffbd23eea02e
<----------Generated by SSpawner v1.0.2---------->


Class: S_RandomColorLimit
	float RMin_16_D340624D4CA7609174F8B3A2E021478F;//[Offset: 0x0, Size: 0x4]
	float RMax_17_6F8317D14D28873889D4798D04D309D5;//[Offset: 0x4, Size: 0x4]
	float GMin_18_AA7F58234EA5DE4481D0B18DFA77CACE;//[Offset: 0x8, Size: 0x4]
	float GMax_19_D145518C468C4DD9C9A890ABBEF4CFCB;//[Offset: 0xc, Size: 0x4]
	float BMin_20_B066DE7141BF9F5484855C800AA462A6;//[Offset: 0x10, Size: 0x4]
	float BMax_21_A60CD6F6464031C0C446E3820B3F510A;//[Offset: 0x14, Size: 0x4]
	float AMin_22_A090280047E8555BE863B4B9276145A9;//[Offset: 0x18, Size: 0x4]
	float AMax_23_9214E9E5434D0202F89F66BAF5199F2A;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_FX_Def_C.SolarItemCountActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x240, Size: 0x8]
	StaticMeshComponent* 3DIcon;//[Offset: 0x248, Size: 0x8]
	TextRenderComponent* TextRender;//[Offset: 0x250, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x258, Size: 0x8]
	void ReceiveBeginPlay();// 0x1375b23e7a008
	void SetItemCount(int count);// 0x1dc8823e7a001
	static void ExecuteUbergraph_BP_FX_Def(int EntryPoint, int K2Node_Event_Count, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x1cb8423e7a001
<----------Generated by SSpawner v1.0.2---------->


Class: SolarItemCountActor.Actor.Object
	TextRenderComponent* TextPtr;//[Offset: 0x228, Size: 0x8]
	FString TextPrefix;//[Offset: 0x230, Size: 0x10]
	void SetItemCount(int count);// 0x4f0a23bfa041
<----------Generated by SSpawner v1.0.2---------->


