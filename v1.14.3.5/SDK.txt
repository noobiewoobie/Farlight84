Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x120, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x130, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0x168, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x178, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x180, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x188, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x190, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x198, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b6, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x1b8, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x1c0, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x1c8, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x1d0, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x1d8, Size: 0x8]
	Level*[] Levels;//[Offset: 0x1e0, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x1f0, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x220, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x228, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x238, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x240, Size: 0x8]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x298, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x2a8, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x660, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x6f0, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x62c8312cd041
	void HandleTimelineScrubbed();// 0x62c7312cd041

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0xfcd312cd031

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	<FName,LevelSolarDecorationLightMapGUIDArray> LevelSolarDecorationLightMapGUIDs;//[Offset: 0x1e8, Size: 0x50]
	IntVector LightBuildLevelOffset;//[Offset: 0x238, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x298, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x2a8, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x2c8, Size: 0x10]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x558, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x320, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x324, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x328, Size: 0x4]
	float MinScreenSizeCulling;//[Offset: 0x32c, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x330, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x331, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x332, Size: 0x1]
	enum LightmapType;//[Offset: 0x333, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x334, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x334, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x335, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x335, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x335, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x335, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x335, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x335, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x335, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x335, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x336, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x336, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x336, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x336, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x336, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x336, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x336, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x336, Size: 0x1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x337, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x337, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x337, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x337, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x337, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x337, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x337, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x337, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	bool bForceGenLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x338, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x338, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x338, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x338, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x339, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x339, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x339, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x339, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x339, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x339, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33a, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33a, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33a, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33a, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33a, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33a, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33a, Size: 0x1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33a, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x33c, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x33e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x33f, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x340, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x344, Size: 0x4]
	int MainPassDepthStencilValue;//[Offset: 0x348, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x350, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x360, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x370, Size: 0x4]
	int VisibilityId;//[Offset: 0x374, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x378, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x388, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x389, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x38a, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x38b, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x390, Size: 0x4]
	float BoundsScale;//[Offset: 0x39c, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x3b0, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x3c0, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x3e0, Size: 0x130]
	delegate OnComponentHit;//[Offset: 0x510, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x511, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x512, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x513, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x514, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x516, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x517, Size: 0x1]
	delegate OnClicked;//[Offset: 0x518, Size: 0x1]
	delegate OnReleased;//[Offset: 0x519, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x51a, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x51b, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x51c, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x51d, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x538, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0x2a38312cd041
	void WakeRigidBody(FName BoneName);// 0x2a37312cd041
	void WakeAllRigidBodies();// 0x2a36312cd041
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x2a35312cd041
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x2a34312cd041
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x2a33312cd041
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x2a32312cd041
	void SetSimulatePhysics(bool bSimulate);// 0x2a31312cd041
	void SetRenderMainPassStencil(bool bValue);// 0x2a30312cd041
	void SetRenderInMainPass(bool bValue);// 0x2a2f312cd041
	void SetRenderCustomDepth(bool bValue);// 0x2a2e312cd041
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x2a2d312cd041
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x2a2c312cd041
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2a2b312cd041
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2a2a312cd041
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2a29312cd041
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x2a28312cd041
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2a27312cd041
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2a26312cd041
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2a25312cd041
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x2a24312cd041
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x2a23312cd041
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x2a22312cd041
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x2a21312cd041
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x2a20312cd041
	void SetMassScale(FName BoneName, float InMassScale);// 0x2a1f312cd041
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x2a1e312cd041
	void SetMainPassStencilValue(int Value);// 0x2a1d312cd041
	void SetLinearDamping(float InDamping);// 0x2a1c312cd041
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x2a1b312cd041
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x2a1a312cd041
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x2a19312cd041
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x2a18312cd041
	void SetEnableGravity(bool bGravityEnabled);// 0x2a17312cd041
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x2a16312cd041
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x2a15312cd041
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x2a14312cd041
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x2a13312cd041
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x2a12312cd041
	void SetCustomDepthStencilValue(int Value);// 0x2a11312cd041
	void SetCullDistance(float NewCullDistance);// 0x2a10312cd041
	void SetConstraintMode(byte ConstraintMode);// 0x2a0f312cd041
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x2a0e312cd041
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x2a0d312cd041
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x2a0c312cd041
	void SetCollisionObjectType(byte Channel);// 0x2a0b312cd041
	void SetCollisionEnabled(byte NewType);// 0x2a0a312cd041
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x2a09312cd041
	void SetCastShadow(bool NewCastShadow);// 0x2a08312cd041
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x2a07312cd041
	void SetBoundsScale(float NewBoundsScale);// 0x2a06312cd041
	void SetAngularDamping(float InDamping);// 0x2a05312cd041
	void SetAllUseCCD(bool InUseCCD);// 0x2a04312cd041
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x2a03312cd041
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x2a02312cd041
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x2a01312cd041
	void SetAllMassScale(float InMassScale);// 0x2a00312cd041
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x29ff312cd041
	void PutRigidBodyToSleep(FName BoneName);// 0x29fe312cd041
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x29fd312cd041
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x29fc312cd041
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x29fb312cd041
	bool K2_IsQueryCollisionEnabled();// 0x29fa312cd041
	bool K2_IsPhysicsCollisionEnabled();// 0x29f9312cd041
	bool K2_IsCollisionEnabled();// 0x29f8312cd041
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x29f7312cd041
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x29f6312cd041
	bool IsOverlappingActor(const Actor* Other);// 0x29f5312cd041
	bool IsGravityEnabled();// 0x29f4312cd041
	bool IsAnyRigidBodyAwake();// 0x29f3312cd041
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x29f2312cd041
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x29f1312cd041
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x29ef312cd041
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x29ee312cd041
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x29ed312cd041
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x29ec312cd041
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x29eb312cd041
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x29ea312cd041
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x29e9312cd041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x29e8312cd041
	int GetNumMaterials();// 0x29e7312cd041
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x29e6312cd041
	MaterialInterface* GetMaterial(int ElementIndex);// 0x29e5312cd041
	float GetMassScale(FName BoneName);// 0x29e4312cd041
	float GetMass();// 0x29e3312cd041
	float GetLinearDamping();// 0x29e2312cd041
	Vector GetInertiaTensor(FName BoneName);// 0x29e1312cd041
	bool GetGenerateOverlapEvents();// 0x29e0312cd041
	byte GetCollisionResponseToChannel(byte Channel);// 0x29df312cd041
	FName GetCollisionProfileName();// 0x29de312cd041
	byte GetCollisionObjectType();// 0x29dd312cd041
	byte GetCollisionEnabled();// 0x29dc312cd041
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x29db312cd041
	Vector GetCenterOfMass(FName BoneName);// 0x29da312cd041
	float GetAngularDamping();// 0x29d9312cd041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x29d8312cd041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x29d7312cd041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x29d6312cd041
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x29d5312cd041
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x29d4312cd041
	void ClearMoveIgnoreComponents();// 0x29d3312cd041
	void ClearMoveIgnoreActors();// 0x29d2312cd041
	bool CanCharacterStepUp(Pawn* Pawn);// 0x29d1312cd041
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x29d0312cd041
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x29cf312cd041
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x29ce312cd041
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x29cd312cd041
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x29cc312cd041
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x29cb312cd041
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x29ca312cd041
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x29c9312cd041
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x29c8312cd041
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x29c7312cd041
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x29c6312cd041
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x29c5312cd041
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x29c4312cd041

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfNotVisiable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14d, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfTickStateCoolingDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14d, Size: 0x1]
	bool bDisableDeferredUpdateComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14d, Size: 0x1]
	byte Mobility;//[Offset: 0x14f, Size: 0x1]
	byte DetailMode;//[Offset: 0x150, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x279f312cd041
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x279e312cd041
	void SetWorldScale3D(Vector NewScale);// 0x279d312cd041
	void SetVisibilityByFlag(bool bNewVisibility, int Flag, bool bPropagateToChildren);// 0x279c312cd041
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x279b312cd041
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x279a312cd041
	void SetRelativeScale3D(Vector NewScale3D);// 0x2799312cd041
	void SetMobility(byte NewMobility);// 0x2797312cd041
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x2796312cd041
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x2795312cd041
	void ResetRelativeTransform();// 0x2794312cd041
	void OnRep_Visibility(bool OldValue);// 0x2793312cd041
	void OnRep_Transform();// 0x2792312cd041
	void OnRep_AttachSocketName();// 0x2791312cd041
	void OnRep_AttachParent();// 0x2790312cd041
	void OnRep_AttachChildren();// 0x278f312cd041
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x278e312cd041
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x278d312cd041
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x278c312cd041
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x278b312cd041
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x278a312cd041
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2789312cd041
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2788312cd041
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2787312cd041
	Transform K2_GetComponentToWorld();// 0x2786312cd041
	Vector K2_GetComponentScale();// 0x2785312cd041
	Rotator K2_GetComponentRotation();// 0x2784312cd041
	Vector K2_GetComponentLocation();// 0x2783312cd041
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x2782312cd041
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x2781312cd041
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x2780312cd041
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x277f312cd041
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x277e312cd041
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x277d312cd041
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x277c312cd041
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x277b312cd041
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x277a312cd041
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2779312cd041
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2778312cd041
	bool IsVisible();// 0x2777312cd041
	bool IsSimulatingPhysics(FName BoneName);// 0x2776312cd041
	bool IsAnySimulatingPhysics();// 0x2775312cd041
	Vector GetUpVector();// 0x2774312cd041
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace, bool bDoParallel);// 0x2772312cd041
	Rotator GetSocketRotation(FName InSocketName);// 0x2771312cd041
	Quat GetSocketQuaternion(FName InSocketName);// 0x2770312cd041
	Vector GetSocketLocation(FName InSocketName);// 0x276f312cd041
	bool GetShouldUpdatePhysicsVolume();// 0x276e312cd041
	Vector GetRightVector();// 0x276d312cd041
	Transform GetRelativeTransform();// 0x276c312cd041
	PhysicsVolume* GetPhysicsVolume();// 0x276b312cd041
	void GetParentComponents(out SceneComponent*[] Parents);// 0x276a312cd041
	int GetNumChildrenComponents();// 0x2769312cd041
	Vector GetForwardVector();// 0x2768312cd041
	Vector GetComponentVelocity();// 0x2767312cd041
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x2766312cd041
	SceneComponent* GetChildComponent(int ChildIndex);// 0x2765312cd041
	FName GetAttachSocketName();// 0x2764312cd041
	SceneComponent* GetAttachParent();// 0x2763312cd041
	FName[] GetAllSocketNames();// 0x2762312cd041
	bool DoesSocketExist(FName InSocketName);// 0x2761312cd041
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x2760312cd041

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1]
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10]
	void ToggleActive();// 0x104f312cd041
	void SetTickGroup(byte NewTickGroup);// 0x104d312cd041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x104c312cd041
	void SetIsReplicated(bool ShouldReplicate);// 0x104b312cd041
	void SetComponentTickInterval(float TickInterval);// 0x104a312cd041
	void SetComponentTickEnabled(bool bEnabled);// 0x1049312cd041
	void SetAutoActivate(bool bNewAutoActivate);// 0x1048312cd041
	void SetActive(bool bNewActive, bool bReset);// 0x1047312cd041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1046312cd041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1045312cd041
	void ReceiveTick(float DeltaSeconds);// 0x1044312cd041
	void ReceiveEndPlay(byte EndPlayReason);// 0x1043312cd041
	void ReceiveBeginPlay();// 0x1042312cd041
	void OnRep_IsActive();// 0x1041312cd041
	void K2_DestroyComponent(Object* Object);// 0x1040312cd041
	bool IsComponentTickEnabled();// 0x103f312cd041
	bool IsBeingDestroyed();// 0x103e312cd041
	bool IsActive();// 0x103d312cd041
	Actor* GetOwner();// 0x103c312cd041
	float GetComponentTickInterval();// 0x103b312cd041
	void Deactivate();// 0x103a312cd041
	bool ComponentHasTag(FName Tag);// 0x1039312cd041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1038312cd041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1037312cd041
	void Activate(bool bReset);// 0x1036312cd041

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x120, Size: 0x130]
	Vector BuildScale3D;//[Offset: 0x258, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x260, Size: 0x4]
	int Priority;//[Offset: 0x264, Size: 0x4]
	float FluidFriction;//[Offset: 0x268, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x228, Size: 0x1]
	Color BrushColor;//[Offset: 0x22c, Size: 0x4]
	int PolyFlags;//[Offset: 0x230, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x234, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x234, Size: 0x1]
	Model* Brush;//[Offset: 0x238, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x240, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x250, Size: 0x10]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfHiddenInGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x62, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x63, Size: 0x1]
	byte RemoteRole;//[Offset: 0x64, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x68, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0x9c, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xa0, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xa8, Size: 0x40]
	Actor* Owner;//[Offset: 0xe8, Size: 0x8]
	FName NetDriverName;//[Offset: 0xf0, Size: 0x8]
	byte Role;//[Offset: 0xf8, Size: 0x1]
	byte NetDormancy;//[Offset: 0xf9, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xfa, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0xfb, Size: 0x1]
	int InputPriority;//[Offset: 0xfc, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x100, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x108, Size: 0x4]
	int NetTag;//[Offset: 0x10c, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x110, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x114, Size: 0x4]
	float NetPriority;//[Offset: 0x118, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x120, Size: 0x8]
	Actor*[] Children;//[Offset: 0x128, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x138, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x140, Size: 0x10]
	FName[] Layers;//[Offset: 0x158, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x168, Size: 0x8]
	FName[] Tags;//[Offset: 0x178, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x188, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x189, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x18a, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x18b, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x18c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x18d, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x18e, Size: 0x1]
	delegate OnClicked;//[Offset: 0x18f, Size: 0x1]
	delegate OnReleased;//[Offset: 0x190, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x191, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x192, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x193, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x194, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x195, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x196, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x197, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f8, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x208, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x193e312cd041
	void UserConstructionScript();// 0x193d312cd041
	void TearOff();// 0x193c312cd041
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x193b312cd041
	void SetTickGroup(byte NewTickGroup);// 0x193a312cd041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x1939312cd041
	void SetReplicates(bool bInReplicates);// 0x1938312cd041
	void SetReplicateMovement(bool bInReplicateMovement);// 0x1937312cd041
	void SetOwner(Actor* NewOwner);// 0x1936312cd041
	void SetNetDormancy(byte NewDormancy);// 0x1934312cd041
	void SetLifeSpan(float InLifespan);// 0x1933312cd041
	void SetAutoDestroyWhenFinished(bool bVal);// 0x1932312cd041
	void SetActorTickInterval(float TickInterval);// 0x1931312cd041
	void SetActorTickEnabled(bool bEnabled);// 0x1930312cd041
	void SetActorScale3D(Vector NewScale3D);// 0x192f312cd041
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x192e312cd041
	void SetActorHiddenInGame(bool bNewHidden);// 0x192d312cd041
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x192c312cd041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x192b312cd041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x192a312cd041
	void ReceiveTick(float DeltaSeconds);// 0x1929312cd041
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1928312cd041
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1927312cd041
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1926312cd041
	void ReceiveEndPlay(byte EndPlayReason);// 0x1925312cd041
	void ReceiveDestroyed();// 0x1924312cd041
	void ReceiveBeginPlay();// 0x1923312cd041
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1922312cd041
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1921312cd041
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x1920312cd041
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x191f312cd041
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x191e312cd041
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x191d312cd041
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x191c312cd041
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x191b312cd041
	void ReceiveActorEndCursorOver();// 0x191a312cd041
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x1919312cd041
	void ReceiveActorBeginCursorOver();// 0x1918312cd041
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x1917312cd041
	void OnRep_ReplicateMovement();// 0x1916312cd041
	void OnRep_ReplicatedMovement();// 0x1915312cd041
	void OnRep_Owner();// 0x1914312cd041
	void OnRep_Instigator();// 0x1913312cd041
	void OnRep_AttachmentReplication();// 0x1912312cd041
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x1911312cd041
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x1910312cd041
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x190f312cd041
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x190e312cd041
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x190d312cd041
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x190c312cd041
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x190b312cd041
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x190a312cd041
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1909312cd041
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1908312cd041
	void K2_OnReset();// 0x1907312cd041
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1906312cd041
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x1905312cd041
	SceneComponent* K2_GetRootComponent();// 0x1904312cd041
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x1903312cd041
	Rotator K2_GetActorRotation();// 0x1902312cd041
	Vector K2_GetActorLocation();// 0x1901312cd041
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x18ff312cd041
	void K2_DestroyComponent(ActorComponent* Component);// 0x18fe312cd041
	void K2_DestroyActor();// 0x18fd312cd041
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x18fc312cd041
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x18fa312cd041
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x18f9312cd041
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x18f7312cd041
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x18f6312cd041
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x18f5312cd041
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x18f4312cd041
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x18f3312cd041
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x18f2312cd041
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x18f1312cd041
	bool IsOverlappingActor(const Actor* Other);// 0x18f0312cd041
	bool IsChildActor();// 0x18ef312cd041
	bool IsActorTickEnabled();// 0x18ee312cd041
	bool IsActorBeingDestroyed();// 0x18ed312cd041
	bool HasAuthority();// 0x18ec312cd041
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x18eb312cd041
	Vector GetVelocity();// 0x18ea312cd041
	Transform GetTransform();// 0x18e9312cd041
	bool GetTickableWhenPaused();// 0x18e8312cd041
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x18e7312cd041
	byte GetRemoteRole();// 0x18e6312cd041
	ChildActorComponent* GetParentComponent();// 0x18e5312cd041
	Actor* GetParentActor();// 0x18e4312cd041
	Actor* GetOwner();// 0x18e3312cd041
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x18e2312cd041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x18e1312cd041
	byte GetLocalRole();// 0x18df312cd041
	float GetLifeSpan();// 0x18de312cd041
	Controller* GetInstigatorController();// 0x18dd312cd041
	Pawn* GetInstigator();// 0x18dc312cd041
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x18db312cd041
	float GetInputAxisValue(const FName InputAxisName);// 0x18da312cd041
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x18d9312cd041
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x18d8312cd041
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x18d7312cd041
	float GetGameTimeSinceCreation();// 0x18d6312cd041
	float GetDotProductTo(const Actor* OtherActor);// 0x18d5312cd041
	float GetDistanceTo(const Actor* OtherActor);// 0x18d4312cd041
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x18d3312cd041
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x18d2312cd041
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x18d1312cd041
	FName GetAttachParentSocketName();// 0x18d0312cd041
	Actor* GetAttachParentActor();// 0x18cf312cd041
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x18ce312cd041
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x18cd312cd041
	Vector GetActorUpVector();// 0x18cc312cd041
	float GetActorTimeDilation();// 0x18cb312cd041
	float GetActorTickInterval();// 0x18ca312cd041
	Vector GetActorScale3D();// 0x18c9312cd041
	Vector GetActorRightVector();// 0x18c8312cd041
	Vector GetActorRelativeScale3D();// 0x18c7312cd041
	Vector GetActorForwardVector();// 0x18c6312cd041
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x18c5312cd041
	bool GetActorEnableCollision();// 0x18c4312cd041
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x18c3312cd041
	void ForceNetUpdate();// 0x18c2312cd041
	void FlushNetDormancy();// 0x18c1312cd041
	void EnableInput(PlayerController* PlayerController);// 0x18c0312cd041
	void DisableInput(PlayerController* PlayerController);// 0x18bf312cd041
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x18be312cd041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x18bd312cd041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x18bc312cd041
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x18bb312cd041
	bool ActorHasTag(FName Tag);// 0x18ba312cd041

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x540, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x548, Size: 0x8]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x49e0312cd041
	bool WasControllerKeyJustPressed(Key Key);// 0x49df312cd041
	bool IsControllerKeyDown(Key Key);// 0x49de312cd041
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x49dd312cd041
	Vector GetControllerVectorKeyState(Key Key);// 0x49dc312cd041
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x49db312cd041
	float GetControllerKeyTimeDown(Key Key);// 0x49da312cd041
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x49d9312cd041
	float GetControllerAnalogKeyState(Key Key);// 0x49d8312cd041

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x4c44312cd041
	void SetBind(FName BindName, FString Command);// 0x4c43312cd041
	void InvertAxisKey(const Key AxisKey);// 0x4c42312cd041
	void InvertAxis(const FName AxisName);// 0x4c41312cd041
	void ClearSmoothing();// 0x4c40312cd041

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x230, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x234, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x238, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x239, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x23a, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x240, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x248, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x258, Size: 0x8]
	Controller* Controller;//[Offset: 0x260, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x26c, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x278, Size: 0xc]
	void SpawnDefaultController();// 0x1c37312cd041
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x1c36312cd041
	void ReceiveUnpossessed(Controller* OldController);// 0x1c35312cd041
	void ReceivePossessed(Controller* NewController);// 0x1c34312cd041
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x1c33312cd041
	void OnRep_PlayerState();// 0x1c32312cd041
	void OnRep_Controller();// 0x1c31312cd041
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1c30312cd041
	Vector K2_GetMovementInputVector();// 0x1c2f312cd041
	bool IsPlayerControlled();// 0x1c2e312cd041
	bool IsPawnControlled();// 0x1c2d312cd041
	bool IsMoveInputIgnored();// 0x1c2c312cd041
	bool IsLocallyControlled();// 0x1c2b312cd041
	bool IsControlled();// 0x1c2a312cd041
	bool IsBotControlled();// 0x1c29312cd041
	Vector GetPendingMovementInputVector();// 0x1c28312cd041
	Vector GetNavAgentLocation();// 0x1c27312cd041
	PawnMovementComponent* GetMovementComponent();// 0x1c26312cd041
	Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x1c25312cd041
	Vector GetLastMovementInputVector();// 0x1c24312cd041
	Rotator GetControlRotation();// 0x1c23312cd041
	Controller* GetController();// 0x1c22312cd041
	Rotator GetBaseAimRotation();// 0x1c21312cd041
	void DetachFromControllerPendingDestroy();// 0x1c20312cd041
	Vector ConsumeMovementInputVector();// 0x1c1f312cd041
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x1c1e312cd041
	void AddControllerYawInput(float val);// 0x1c1d312cd041
	void AddControllerRollInput(float val);// 0x1c1c312cd041
	void AddControllerPitchInput(float val);// 0x1c1b312cd041

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x230, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x240, Size: 0x10]
	FName StateName;//[Offset: 0x250, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x258, Size: 0x8]
	Character* Character;//[Offset: 0x268, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x270, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x2a8, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	void UnPossess();// 0x1fbf312cd041
	void StopMovement();// 0x1fbe312cd041
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x1fbd312cd041
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x1fbc312cd041
	void SetIgnoreLookInput(bool bNewLookInput);// 0x1fbb312cd041
	void SetControlRotation(out const Rotator NewRotation);// 0x1fba312cd041
	void ResetIgnoreMoveInput();// 0x1fb9312cd041
	void ResetIgnoreLookInput();// 0x1fb8312cd041
	void ResetIgnoreInputFlags();// 0x1fb7312cd041
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x1fb6312cd041
	void ReceivePossess(Pawn* PossessedPawn);// 0x1fb5312cd041
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x1fb4312cd041
	void Possess(Pawn* InPawn);// 0x1fb3312cd041
	void OnRep_PlayerState();// 0x1fb2312cd041
	void OnRep_Pawn();// 0x1fb1312cd041
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x1fb0312cd041
	Pawn* K2_GetPawn();// 0x1faf312cd041
	bool IsPlayerController();// 0x1fae312cd041
	bool IsMoveInputIgnored();// 0x1fad312cd041
	bool IsLookInputIgnored();// 0x1fac312cd041
	bool IsLocalPlayerController();// 0x1fab312cd041
	bool IsLocalController();// 0x1faa312cd041
	Actor* GetViewTarget();// 0x1fa9312cd041
	Rotator GetDesiredRotation();// 0x1fa8312cd041
	Rotator GetControlRotation();// 0x1fa7312cd041
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x1fa6312cd041
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x1fa5312cd041
	PlayerController* CastToPlayerController();// 0x1fa4312cd041

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x228, Size: 0x4]
	int PlayerId;//[Offset: 0x22c, Size: 0x4]
	byte Ping;//[Offset: 0x230, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x232, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x232, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x232, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x232, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x232, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x232, Size: 0x1]
	int StartTime;//[Offset: 0x234, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x238, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x250, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x260, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x290, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x308, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x1b2d312cd041
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x1b2c312cd041
	void OnRep_UniqueId();// 0x1b2b312cd041
	void OnRep_Score();// 0x1b2a312cd041
	void OnRep_PlayerName();// 0x1b29312cd041
	void OnRep_PlayerId();// 0x1b28312cd041
	void OnRep_bIsInactive();// 0x1b27312cd041
	FString GetPlayerName();// 0x1b26312cd041

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x288, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x290, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x298, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2a0, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2d0, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x300, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x304, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x344, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x348, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x350, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x370, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x380, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x390, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x1c68312cd041
	void StopJumping();// 0x1c67312cd041
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x1c66312cd041
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x1c65312cd041
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x1c64312cd041
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x1c63312cd041
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1c62312cd041
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1c61312cd041
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1c60312cd041
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x1c5f312cd041
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x1c5e312cd041
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x1c5d312cd041
	void OnRep_RootMotion();// 0x1c5c312cd041
	void OnRep_ReplicatedBasedMovement();// 0x1c5b312cd041
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x1c5a312cd041
	void OnRep_IsCrouched();// 0x1c59312cd041
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1c58312cd041
	void OnLanded(out const HitResult Hit);// 0x1c57312cd041
	void OnJumped();// 0x1c56312cd041
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1c55312cd041
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1c54312cd041
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1c53312cd041
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1c52312cd041
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1c51312cd041
	void Jump();// 0x1c50312cd041
	bool IsPlayingRootMotion();// 0x1c4f312cd041
	bool IsPlayingNetworkedRootMotionMontage();// 0x1c4e312cd041
	bool IsJumpProvidingForce();// 0x1c4d312cd041
	bool HasAnyRootMotion();// 0x1c4c312cd041
	AnimMontage* GetCurrentMontage();// 0x1c4b312cd041
	Vector GetBaseTranslationOffset();// 0x1c4a312cd041
	Rotator GetBaseRotationOffsetRotator();// 0x1c49312cd041
	float GetAnimRootMotionTranslationScale();// 0x1c48312cd041
	void Crouch(bool bClientSimulation);// 0x1c47312cd041
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1c46312cd041
	void ClientCheatWalk();// 0x1c45312cd041
	void ClientCheatGhost();// 0x1c44312cd041
	void ClientCheatFly();// 0x1c43312cd041
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1c40312cd041
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1c3f312cd041
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1c3e312cd041
	void ClientAckGoodMove(float Timestamp);// 0x1c3d312cd041
	bool CanJumpInternal();// 0x1c3c312cd041
	bool CanJump();// 0x1c3b312cd041
	bool CanCrouch();// 0x1c3a312cd041
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x1c39312cd041

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x5ba2312cd041

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x5ba1312cd041

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x5c67312cd041

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x5c66312cd041
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x5c65312cd041

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	int NotifyFilterSignificanceLevel;//[Offset: 0xa0, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	int TrackIndex;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x3ce2312cd041
	FString GetNotifyName();// 0x3ce1312cd041

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x790, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x798, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x7a0, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x7a8, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x7b0, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x7d8, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x7e4, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0x810, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x820, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x830, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x860, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x864, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x865, Size: 0x1]
	byte AnimationMode;//[Offset: 0x867, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x869, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x869, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x869, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x869, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x869, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86a, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86a, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86a, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86a, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x86a, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86b, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86b, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86b, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86b, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x86b, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x86b, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x86b, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86c, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86c, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86c, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x86c, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x86c, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x86c, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x86c, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86d, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86d, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86d, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86d, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x86d, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x86d, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x86d, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x86d, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86e, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86e, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86e, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86e, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x86e, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x870, Size: 0x2]
	enum MassMode;//[Offset: 0x872, Size: 0x1]
	float UniformMass;//[Offset: 0x874, Size: 0x4]
	float TotalMass;//[Offset: 0x878, Size: 0x4]
	float Density;//[Offset: 0x87c, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0x880, Size: 0x4]
	float ClothBlendWeight;//[Offset: 0x884, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x888, Size: 0x4]
	float BendingStiffness;//[Offset: 0x88c, Size: 0x4]
	float AreaStiffness;//[Offset: 0x890, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x894, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x898, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x89c, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x8a0, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x8b0, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x8c0, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x8d0, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x9a8, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x9ac, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x9b8, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa10, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xae0, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x346a312cd041
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x3469312cd041
	void ToggleDisablePostProcessBlueprint();// 0x3468312cd041
	void TermBodiesBelow(FName ParentBoneName);// 0x3467312cd041
	void SuspendClothingSimulation();// 0x3466312cd041
	void Stop();// 0x3465312cd041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x3464312cd041
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x3463312cd041
	void SetTeleportRotationThreshold(float Threshold);// 0x3462312cd041
	void SetTeleportDistanceThreshold(float Threshold);// 0x3461312cd041
	void SetPosition(float InPos, bool bFireNotifies);// 0x3460312cd041
	void SetPlayRate(float Rate);// 0x345f312cd041
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x345e312cd041
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x345d312cd041
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x345c312cd041
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x345b312cd041
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x345a312cd041
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x3459312cd041
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x3458312cd041
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x3457312cd041
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x3456312cd041
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x3455312cd041
	void SetClothMaxDistanceScale(float Scale);// 0x3454312cd041
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x3453312cd041
	void SetAnimClass(class Object NewClass);// 0x3452312cd041
	void SetAnimationMode(byte InAnimationMode);// 0x3451312cd041
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x3450312cd041
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x344f312cd041
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x344e312cd041
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x344d312cd041
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x344c312cd041
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x344b312cd041
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x344a312cd041
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x3449312cd041
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x3448312cd041
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3447312cd041
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x3446312cd041
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x3445312cd041
	void ResumeClothingSimulation();// 0x3444312cd041
	void ResetClothTeleportMode();// 0x3443312cd041
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x3442312cd041
	void ResetAllowedAnimCurveEvaluation();// 0x3441312cd041
	void ResetAllBodiesSimulatePhysics();// 0x3440312cd041
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x343f312cd041
	void Play(bool bLooping);// 0x343e312cd041
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x343d312cd041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x343c312cd041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x343b312cd041
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x343a312cd041
	bool IsPlaying();// 0x3439312cd041
	bool IsClothingSimulationSuspended();// 0x3438312cd041
	bool IsBodyGravityEnabled(FName BoneName);// 0x3437312cd041
	bool HasValidAnimationInstance();// 0x3436312cd041
	float GetTeleportRotationThreshold();// 0x3435312cd041
	float GetTeleportDistanceThreshold();// 0x3434312cd041
	Vector GetSkeletalCenterOfMass();// 0x3433312cd041
	AnimInstance* GetPostProcessInstance();// 0x3432312cd041
	float GetPosition();// 0x3431312cd041
	float GetPlayRate();// 0x3430312cd041
	float GetMorphTarget(FName MorphTargetName);// 0x342f312cd041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x342e312cd041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x342d312cd041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x342c312cd041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x342b312cd041
	bool GetDisablePostProcessBlueprint();// 0x342a312cd041
	bool GetDisableAnimCurves();// 0x3429312cd041
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x3428312cd041
	float GetClothMaxDistanceScale();// 0x3427312cd041
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x3426312cd041
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x3425312cd041
	AnimInstance* GetAnimInstance();// 0x3424312cd041
	class Object GetAnimClass();// 0x3423312cd041
	byte GetAnimationMode();// 0x3422312cd041
	bool GetAllowRigidBodyAnimNode();// 0x3421312cd041
	bool GetAllowedAnimCurveEvaluate();// 0x3420312cd041
	void ForceClothNextUpdateTeleportAndReset();// 0x341f312cd041
	void ForceClothNextUpdateTeleport();// 0x341e312cd041
	FName FindConstraintBoneName(int ConstraintIndex);// 0x341d312cd041
	void ClearMorphTargets();// 0x341c312cd041
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x341b312cd041
	void BindClothToMasterPoseComponent();// 0x341a312cd041
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x3419312cd041
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x3418312cd041
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x3417312cd041
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3416312cd041

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x578, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x580, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x588, Size: 0x10]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x690, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x698, Size: 0x4]
	int MinLodModel;//[Offset: 0x69c, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x6ac, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x6b8, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x6ec, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ee, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6ee, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6ee, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6ee, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6ee, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6ee, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ef, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ef, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ef, Size: 0x1]
	bool bOverrideMeshMinScreenSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6ef, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6ef, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6ef, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6ef, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6ef, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f0, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f0, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f0, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f0, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f0, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f0, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f1, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f1, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x6f4, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x708, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x730, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x3415312cd041
	void UnHideBoneByName(FName BoneName);// 0x3414312cd041
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3413312cd041
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3412312cd041
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x3411312cd041
	void ShowAllMaterialSections(int LODIndex);// 0x3410312cd041
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x340f312cd041
	bool SetSkinWeightProfile(FName InProfileName);// 0x340e312cd041
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x340d312cd041
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation);// 0x340c312cd041
	void SetRenderStatic(bool bNewValue);// 0x340b312cd041
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x340a312cd041
	void SetMinLOD(int InNewMinLOD);// 0x3409312cd041
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x3408312cd041
	void SetForcedLOD(int InNewForcedLOD);// 0x3407312cd041
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x3406312cd041
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x3405312cd041
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x3404312cd041
	bool IsUsingSkinWeightProfile();// 0x3403312cd041
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x3402312cd041
	bool IsBoneHiddenByName(FName BoneName);// 0x3401312cd041
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x3400312cd041
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x33ff312cd041
	FName GetSocketBoneName(FName InSocketName);// 0x33fe312cd041
	Vector GetRefPosePosition(int BoneIndex);// 0x33fd312cd041
	FName GetParentBone(FName BoneName);// 0x33fc312cd041
	int GetNumLODs();// 0x33fb312cd041
	int GetNumBones();// 0x33fa312cd041
	int GetForcedLOD();// 0x33f9312cd041
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x33f8312cd041
	FName GetCurrentSkinWeightProfileName();// 0x33f7312cd041
	FName GetBoneName(int BoneIndex);// 0x33f6312cd041
	int GetBoneIndex(FName BoneName);// 0x33f5312cd041
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x33f4312cd041
	void ClearVertexColorOverride(int LODIndex);// 0x33f3312cd041
	void ClearSkinWeightProfile();// 0x33f2312cd041
	void ClearSkinWeightOverride(int LODIndex);// 0x33f1312cd041
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x33f0312cd041

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x540, Size: 0x10]
	bool bNeedMultiplePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	bool bForceFrontFaceCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	bool bIgnoreTranslucentSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 0x1]
	MaterialInterface* MultiplePassMaterial;//[Offset: 0x558, Size: 0x8]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x2a45312cd041
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x2a44312cd041
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x2a43312cd041
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x2a42312cd041
	FName[] GetMaterialSlotNames();// 0x2a41312cd041
	MaterialInterface*[] GetMaterials();// 0x2a40312cd041
	int GetMaterialIndex(FName MaterialSlotName);// 0x2a3f312cd041

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x60, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x68, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x84, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xa0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xac, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x138, Size: 0x4]
	byte LODGroup;//[Offset: 0x13c, Size: 0x1]
	float MinScreenSize;//[Offset: 0x140, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x144, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x145, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x146, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x147, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x147, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x147, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x147, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x147, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x148, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x150, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x158, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x160, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x170, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2f8, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x300, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x310, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x340, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x358, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x378, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x6213312cd041
	int NumSockets();// 0x6212312cd041
	FString[] K2_GetAllMorphTargetNames();// 0x6211312cd041
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x6210312cd041
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x620f312cd041
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x620e312cd041
	BoxSphereBounds GetImportedBounds();// 0x620d312cd041
	BoxSphereBounds GetBounds();// 0x620c312cd041
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x620b312cd041
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x620a312cd041
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x6209312cd041

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 0x4]
	int StreamingIndex;//[Offset: 0x34, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 0x4]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 0x1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x6219312cd041
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x6218312cd041

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x591d312cd041
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x591c312cd041
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x591b312cd041
	PhysicalMaterial* GetPhysicalMaterial();// 0x591a312cd041
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x5919312cd041
	Material* GetBaseMaterial();// 0x5918312cd041

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c5, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1c6, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c7, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fe, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fe, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fe, Size: 0x1]
	bool bZWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ff, Size: 0x1]
	byte DepthCompare;//[Offset: 0x200, Size: 0x1]
	bool bMainPassStencilWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bMainPassStencilCompareEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	byte MainPassStencilCompare;//[Offset: 0x202, Size: 0x1]
	byte MainPassStencilRefValue;//[Offset: 0x203, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x204, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x204, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x204, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x205, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x206, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x206, Size: 0x1]
	byte StencilCompare;//[Offset: 0x207, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x208, Size: 0x1]
	byte RefractionMode;//[Offset: 0x209, Size: 0x1]
	int BlendablePriority;//[Offset: 0x20c, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x214, Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x218, Size: 0x4]
	Guid StateId;//[Offset: 0x21c, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x22c, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2b8, Size: 0x228]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 0x40]
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]
	bool[] Overrides;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x48, Size: 0x10]
	int LODBias;//[Offset: 0x58, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x5c, Size: 0x1]
	byte Filter;//[Offset: 0x5d, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x5e, Size: 0x1]
	byte LODGroup;//[Offset: 0x5f, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xb8, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xbc, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte AddressX;//[Offset: 0xc1, Size: 0x1]
	byte AddressY;//[Offset: 0xc2, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xc4, Size: 0x8]
	int Blueprint_GetSizeY();// 0x5c6b312cd041
	int Blueprint_GetSizeX();// 0x5c6a312cd041

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	int Size;//[Offset: 0x30, Size: 0x4]
	int TileCount;//[Offset: 0x34, Size: 0x4]
	int TileSize;//[Offset: 0x38, Size: 0x4]
	int TileBorderSize;//[Offset: 0x3c, Size: 0x4]
	int StreamLowMips;//[Offset: 0x40, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x54, Size: 0x4]
	int GetTileSize();// 0x6202312cd041
	int GetTileCount();// 0x6201312cd041
	int GetTileBorderSize();// 0x6200312cd041
	int GetSize();// 0x61ff312cd041

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0xf0, Size: 0xc]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	uint32 BuildHash;//[Offset: 0x100, Size: 0x4]

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4]
	int TileBorderSize;//[Offset: 0x4, Size: 0x4]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float PlacementJitter;//[Offset: 0x10, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 0x4]
	int MinLOD;//[Offset: 0x1c, Size: 0x4]
	enum Scaling;//[Offset: 0x20, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	byte LODGroupAsInt;//[Offset: 0x60, Size: 0x1]
	bool bStripLastLODLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0x64, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x68, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x70, Size: 0x10]
	StaticMaterial[] PhysicalMaterialsOverride;//[Offset: 0x80, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x90, Size: 0x4]
	int LightMapResolution;//[Offset: 0x94, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x98, Size: 0x4]
	bool bForceLODsShareLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa0, Size: 0x4]
	float MinScreenSize;//[Offset: 0xa4, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 0x8]
	int LODForCollision;//[Offset: 0xb0, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb4, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x148, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x150, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x6268312cd041
	int GetNumSections(int InLOD);// 0x6267312cd041
	int GetNumLODs();// 0x6266312cd041
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x6265312cd041
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x6264312cd041
	int GetMaterialIndex(FName MaterialSlotName);// 0x6263312cd041
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x6262312cd041
	BoxSphereBounds GetBounds();// 0x6261312cd041
	Box GetBoundingBox();// 0x6260312cd041
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x625f312cd041
	StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x625e312cd041
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x625d312cd041
	void AddSocket(StaticMeshSocket* Socket);// 0x625c312cd041
	FName AddMaterial(MaterialInterface* Material);// 0x625b312cd041

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x5afb312cd041
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x5afa312cd041
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x5af9312cd041
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x5af8312cd041

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x5af7312cd041
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x5af6312cd041
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x5af5312cd041
	void ReversePolygonFacing(PolygonID PolygonID);// 0x5af4312cd041
	void ReserveNewVertices(int NumberOfNewVertices);// 0x5af3312cd041
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x5af2312cd041
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x5af1312cd041
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x5af0312cd041
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x5aef312cd041
	void ReserveNewEdges(int NumberOfNewEdges);// 0x5aee312cd041
	bool IsVertexValid(VertexID VertexID);// 0x5aed312cd041
	bool IsVertexOrphaned(VertexID VertexID);// 0x5aec312cd041
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x5aeb312cd041
	bool IsTriangleValid(const TriangleID TriangleID);// 0x5aea312cd041
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x5ae9312cd041
	bool IsPolygonValid(PolygonID PolygonID);// 0x5ae8312cd041
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x5ae7312cd041
	bool IsEmpty();// 0x5ae6312cd041
	bool IsEdgeValid(EdgeID EdgeID);// 0x5ae5312cd041
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x5ae4312cd041
	bool IsEdgeInternal(EdgeID EdgeID);// 0x5ae3312cd041
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x5ae2312cd041
	Vector GetVertexPosition(VertexID VertexID);// 0x5ae1312cd041
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x5ae0312cd041
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x5adf312cd041
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x5ade312cd041
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x5add312cd041
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x5adc312cd041
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x5adb312cd041
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x5ada312cd041
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x5ad9312cd041
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x5ad8312cd041
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x5ad7312cd041
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x5ad6312cd041
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x5ad5312cd041
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x5ad4312cd041
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x5ad3312cd041
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x5ad2312cd041
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x5ad1312cd041
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x5ad0312cd041
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x5acf312cd041
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x5ace312cd041
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x5acd312cd041
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x5acc312cd041
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x5acb312cd041
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x5aca312cd041
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x5ac9312cd041
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x5ac8312cd041
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x5ac7312cd041
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x5ac6312cd041
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x5ac5312cd041
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x5ac4312cd041
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x5ac3312cd041
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x5ac2312cd041
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x5ac1312cd041
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x5ac0312cd041
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x5abf312cd041
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x5abe312cd041
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x5abd312cd041
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x5abc312cd041
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x5abb312cd041
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x5aba312cd041
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x5ab9312cd041
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x5ab8312cd041
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x5ab7312cd041
	void Empty();// 0x5ab6312cd041
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x5ab5312cd041
	void DeleteVertex(VertexID VertexID);// 0x5ab4312cd041
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x5ab3312cd041
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x5ab2312cd041
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x5ab1312cd041
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x5ab0312cd041
	void CreateVertexWithID(VertexID VertexID);// 0x5aaf312cd041
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x5aae312cd041
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x5aad312cd041
	VertexID CreateVertex();// 0x5aac312cd041
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x5aab312cd041
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x5aaa312cd041
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x5aa9312cd041
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x5aa8312cd041
	PolygonGroupID CreatePolygonGroup();// 0x5aa7312cd041
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x5aa6312cd041
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x5aa5312cd041
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x5aa4312cd041
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x5aa3312cd041

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	enum Interpolation;//[Offset: 0x16c, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x18]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]

--------------------------------
Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 0x4]
	int JointIterations;//[Offset: 0x4, Size: 0x4]
	int CollisionIterations;//[Offset: 0x8, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x35, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x3a6c312cd041
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3a6b312cd041
	Pawn* TryGetPawnOwner();// 0x3a6a312cd041
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x3a69312cd041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x3a68312cd041
	void SetRootMotionMode(byte Value);// 0x3a67312cd041
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x3a66312cd041
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x3a65312cd041
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x3a64312cd041
	void SavePoseSnapshot(FName SnapshotName);// 0x3a63312cd041
	void ResetDynamics(enum InTeleportType);// 0x3a62312cd041
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x3a61312cd041
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x3a60312cd041
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x3a5f312cd041
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x3a5e312cd041
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x3a5d312cd041
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x3a5c312cd041
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x3a5b312cd041
	void Montage_Resume(const AnimMontage* Montage);// 0x3a5a312cd041
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x3a59312cd041
	void Montage_Pause(const AnimMontage* Montage);// 0x3a58312cd041
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x3a57312cd041
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x3a56312cd041
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x3a55312cd041
	bool Montage_IsActive(const AnimMontage* Montage);// 0x3a54312cd041
	float Montage_GetPosition(const AnimMontage* Montage);// 0x3a53312cd041
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x3a52312cd041
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x3a51312cd041
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x3a50312cd041
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x3a4f312cd041
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x3a4e312cd041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3a4d312cd041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3a4c312cd041
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x3a4b312cd041
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x3a4a312cd041
	bool IsAnyMontagePlaying();// 0x3a49312cd041
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x3a48312cd041
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x3a47312cd041
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x3a46312cd041
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x3a45312cd041
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x3a44312cd041
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x3a43312cd041
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x3a42312cd041
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x3a41312cd041
	bool GetReceiveNotifiesFromLinkedInstances();// 0x3a40312cd041
	bool GetPropagateNotifiesToLinkedInstances();// 0x3a3f312cd041
	SkeletalMeshComponent* GetOwningComponent();// 0x3a3e312cd041
	Actor* GetOwningActor();// 0x3a3d312cd041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3a3c312cd041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3a3b312cd041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3a3a312cd041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3a39312cd041
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x3a38312cd041
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x3a37312cd041
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x3a36312cd041
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x3a35312cd041
	float GetInstanceMachineWeight(int MachineIndex);// 0x3a34312cd041
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x3a33312cd041
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x3a32312cd041
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x3a31312cd041
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x3a30312cd041
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x3a2f312cd041
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x3a2e312cd041
	float GetCurveValue(FName CurveName);// 0x3a2d312cd041
	FName GetCurrentStateName(int MachineIndex);// 0x3a2c312cd041
	AnimMontage* GetCurrentActiveMontage();// 0x3a2b312cd041
	void GetAllCurveNames(out FName[] OutNames);// 0x3a2a312cd041
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x3a29312cd041
	void ClearMorphTargets();// 0x3a28312cd041
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x3a27312cd041
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x3a26312cd041
	void BlueprintPostEvaluateAnimation();// 0x3a25312cd041
	void BlueprintLinkedAnimationLayersInitialized();// 0x3a24312cd041
	void BlueprintInitializeAnimation();// 0x3a23312cd041
	void BlueprintBeginPlay();// 0x3a22312cd041

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x5c70312cd041

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x5c69312cd041
	LinearColor GetClampedLinearColorValue(float InTime);// 0x5c68312cd041

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x5b00312cd041
	void PhysicsAssetUpdated();// 0x5aff312cd041
	void EnableGravityOverride(out const Vector InVector);// 0x5afe312cd041
	void DisableGravityOverride();// 0x5afd312cd041
	void ClothConfigUpdated();// 0x5afc312cd041

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x35c9312cd041
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x35c8312cd041
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x35c7312cd041
	FString GetNotifyName();// 0x35c6312cd041

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 0x8]
	float GravityScale;//[Offset: 0x150, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x154, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x158, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x164, Size: 0x4]
	byte MovementMode;//[Offset: 0x168, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 0x1]
	float GroundFriction;//[Offset: 0x16c, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x198, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1ac, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 0x4]
	float AirControl;//[Offset: 0x1c4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1d8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 0x1]
	bool bNetworkEnableProxyPrediction;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f3, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x204, Size: 0x4]
	float Mass;//[Offset: 0x208, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 0x4]
	float PushForceFactor;//[Offset: 0x214, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x21c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x220, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x224, Size: 0x4]
	float RepulsionForce;//[Offset: 0x228, Size: 0x4]
	Vector Acceleration;//[Offset: 0x22c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 0x4]
	float NetworkLinearSmoothingLerpLimit;//[Offset: 0x2d8, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2dc, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2e0, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e4, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e8, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2ec, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2f0, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x2f4, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x388, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x389, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x38a, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38b, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38b, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38b, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38b, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38c, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38c, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38c, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38c, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38d, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38d, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38d, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38d, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38d, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38d, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38d, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38e, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38e, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38e, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38e, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38e, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38e, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3a0, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3a4, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3b0, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b4, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b8, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3bc, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3c0, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3c4, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 0x30]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4d8, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5a0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x5e0, Size: 0xc]
	bool bCanAdjustWalkingVelocityOnSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	bool bCanAdjustFallingVelocityOnSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 0x1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x3b5e312cd041
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x3b5d312cd041
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x3b5c312cd041
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x3b5b312cd041
	void SetGroupsToIgnore(int GroupFlags);// 0x3b5a312cd041
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x3b59312cd041
	void SetGroupsToAvoid(int GroupFlags);// 0x3b58312cd041
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x3b57312cd041
	void SetAvoidanceGroup(int GroupFlags);// 0x3b56312cd041
	void SetAvoidanceEnabled(bool bEnable);// 0x3b55312cd041
	float K2_GetWalkableFloorZ();// 0x3b54312cd041
	float K2_GetWalkableFloorAngle();// 0x3b53312cd041
	float K2_GetModifiedMaxAcceleration();// 0x3b52312cd041
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x3b51312cd041
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x3b50312cd041
	bool IsWalking();// 0x3b4f312cd041
	bool IsWalkable(out const HitResult Hit);// 0x3b4e312cd041
	float GetValidPerchRadius();// 0x3b4d312cd041
	float GetPerchRadiusThreshold();// 0x3b4c312cd041
	PrimitiveComponent* GetMovementBase();// 0x3b4b312cd041
	float GetMinAnalogSpeed();// 0x3b4a312cd041
	float GetMaxJumpHeightWithJumpTime();// 0x3b49312cd041
	float GetMaxJumpHeight();// 0x3b48312cd041
	float GetMaxBrakingDeceleration();// 0x3b47312cd041
	float GetMaxAcceleration();// 0x3b46312cd041
	Vector GetLastUpdateVelocity();// 0x3b45312cd041
	Rotator GetLastUpdateRotation();// 0x3b44312cd041
	Vector GetLastUpdateLocation();// 0x3b43312cd041
	Vector GetImpartedMovementBaseVelocity();// 0x3b42312cd041
	Vector GetCurrentAcceleration();// 0x3b41312cd041
	Character* GetCharacterOwner();// 0x3b40312cd041
	float GetAnalogInputModifier();// 0x3b3f312cd041
	void DisableMovement();// 0x3b3e312cd041
	void ClearAccumulatedForces();// 0x3b3d312cd041
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3b3c312cd041
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x3b3b312cd041
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x3b3a312cd041
	void AddForce(Vector Force);// 0x3b39312cd041

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 0x8]
	Vector K2_GetInputVector();// 0x3b38312cd041
	bool IsMoveInputIgnored();// 0x3b37312cd041
	Vector GetPendingInputVector();// 0x3b36312cd041
	Pawn* GetPawnOwner();// 0x3b35312cd041
	Vector GetLastInputVector();// 0x3b34312cd041
	Vector ConsumeInputVector();// 0x3b33312cd041
	void AddInputVector(Vector WorldVector, bool bForce);// 0x3b32312cd041

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 0x8]
	void StopMovementKeepPathing();// 0x3b31312cd041
	void StopActiveMovement();// 0x3b30312cd041
	bool IsSwimming();// 0x3b2f312cd041
	bool IsMovingOnGround();// 0x3b2e312cd041
	bool IsFlying();// 0x3b2d312cd041
	bool IsFalling();// 0x3b2c312cd041
	bool IsCrouching();// 0x3b2b312cd041

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8]
	Vector Velocity;//[Offset: 0xc4, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 0x1]
	void StopMovementImmediately();// 0x107c312cd041
	void SnapUpdatedComponentToPlane();// 0x107b312cd041
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x107a312cd041
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x1079312cd041
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x1078312cd041
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x1077312cd041
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x1076312cd041
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x1075312cd041
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x1074312cd041
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x1073312cd041
	float K2_GetModifiedMaxSpeed();// 0x1072312cd041
	float K2_GetMaxSpeedModifier();// 0x1071312cd041
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x1070312cd041
	Vector GetPlaneConstraintOrigin();// 0x106f312cd041
	Vector GetPlaneConstraintNormal();// 0x106e312cd041
	enum GetPlaneConstraintAxisSetting();// 0x106c312cd041
	PhysicsVolume* GetPhysicsVolume();// 0x106b312cd041
	float GetMaxSpeed();// 0x106a312cd041
	float GetGravityZ();// 0x1069312cd041
	Vector ConstrainNormalToPlane(Vector Normal);// 0x1068312cd041
	Vector ConstrainLocationToPlane(Vector Location);// 0x1067312cd041
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x1066312cd041

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x558, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x55c, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x4b9b312cd041
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x4b9a312cd041
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x4b99312cd041
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x4b98312cd041
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x4b97312cd041
	float GetUnscaledCapsuleRadius();// 0x4b96312cd041
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x4b95312cd041
	float GetUnscaledCapsuleHalfHeight();// 0x4b94312cd041
	float GetShapeScale();// 0x4b93312cd041
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x4b92312cd041
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x4b91312cd041
	float GetScaledCapsuleRadius();// 0x4b90312cd041
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x4b8f312cd041
	float GetScaledCapsuleHalfHeight();// 0x4b8e312cd041

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x540, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x548, Size: 0x8]
	Color ShapeColor;//[Offset: 0x550, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x554, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x554, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x554, Size: 0x1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x2b8, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x2c0, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2c8, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x2d0, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2d8, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2e0, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x2ec, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x304, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x310, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x320, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x334, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x338, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x344, Size: 0xc]
	int ClientCap;//[Offset: 0x350, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x358, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x360, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x368, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x370, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x3f1, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x430, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x438, Size: 0x8]
	float InputYawScale;//[Offset: 0x44c, Size: 0x4]
	float InputPitchScale;//[Offset: 0x450, Size: 0x4]
	float InputRollScale;//[Offset: 0x454, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x458, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x458, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x458, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x458, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x45c, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x460, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x470, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x471, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x472, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x473, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x474, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x478, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x47a, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x508, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x510, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x528, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x580, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x590, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x2050312cd041
	bool WasInputKeyJustPressed(Key Key);// 0x204f312cd041
	void ToggleSpeaking(bool bInSpeaking);// 0x204e312cd041
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x204d312cd041
	void SwitchLevel(FString URL);// 0x204c312cd041
	void StopHapticEffect(enum Hand);// 0x204b312cd041
	void StartFire(byte FireModeNum);// 0x204a312cd041
	void SetVirtualJoystickVisibility(bool bVisible);// 0x2049312cd041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x2048312cd041
	void SetName(FString S);// 0x2047312cd041
	void SetMouseLocation(const int X, const int Y);// 0x2046312cd041
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x2045312cd041
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x2044312cd041
	void SetDisableHaptics(bool bNewDisabled);// 0x2043312cd041
	void SetControllerLightColor(Color Color);// 0x2042312cd041
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x2041312cd041
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x2040312cd041
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x203f312cd041
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x203e312cd041
	void ServerViewPrevPlayer();// 0x203d312cd041
	void ServerViewNextPlayer();// 0x203c312cd041
	void ServerVerifyViewTarget();// 0x203b312cd041
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x203a312cd041
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x2038312cd041
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x2037312cd041
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x2036312cd041
	void ServerToggleAILogging();// 0x2035312cd041
	void ServerShortTimeout();// 0x2034312cd041
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x2033312cd041
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x2032312cd041
	void ServerRestartPlayer();// 0x2031312cd041
	void ServerPause();// 0x2030312cd041
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x202f312cd041
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x202e312cd041
	void ServerExecRPC(FString Msg);// 0x202d312cd041
	void ServerExec(FString Msg);// 0x202c312cd041
	void ServerCheckClientPossessionReliable();// 0x202b312cd041
	void ServerCheckClientPossession();// 0x202a312cd041
	void ServerChangeName(FString S);// 0x2029312cd041
	void ServerCamera(FName NewMode);// 0x2028312cd041
	void ServerAcknowledgePossession(Pawn* P);// 0x2027312cd041
	void SendToConsole(FString Command);// 0x2026312cd041
	void RestartLevel();// 0x2025312cd041
	void ResetControllerLightColor();// 0x2024312cd041
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x2023312cd041
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x2021312cd041
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x201f312cd041
	void Pause();// 0x201e312cd041
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x201d312cd041
	void LocalTravel(FString URL);// 0x201c312cd041
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x201b312cd041
	bool IsInputKeyDown(Key Key);// 0x201a312cd041
	void GetViewportSize(out int SizeX, out int SizeY);// 0x2019312cd041
	SpectatorPawn* GetSpectatorPawn();// 0x2018312cd041
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x2017312cd041
	Vector GetInputVectorKeyState(Key Key);// 0x2016312cd041
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x2015312cd041
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x2014312cd041
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x2013312cd041
	float GetInputKeyTimeDown(Key Key);// 0x2012312cd041
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x2010312cd041
	float GetInputAnalogKeyState(Key Key);// 0x200f312cd041
	HUD* GetHUD();// 0x200e312cd041
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x200d312cd041
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x200c312cd041
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x200b312cd041
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x200a312cd041
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x2009312cd041
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x2007312cd041
	Vector GetFocalLocation();// 0x2006312cd041
	void FOV(float NewFOV);// 0x2005312cd041
	void EnableCheats();// 0x2004312cd041
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x2003312cd041
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x2002312cd041
	void ConsoleKey(Key Key);// 0x2001312cd041
	void ClientWasKicked(const FText KickReason);// 0x2000312cd041
	void ClientVoiceHandshakeComplete();// 0x1fff312cd041
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x1ffd312cd041
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x1ffc312cd041
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x1ffb312cd041
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x1ffa312cd041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x1ff9312cd041
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x1ff8312cd041
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x1ff7312cd041
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x1ff6312cd041
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x1ff5312cd041
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x1ff4312cd041
	void ClientStartOnlineSession();// 0x1ff3312cd041
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x1ff2312cd041
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x1fef312cd041
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x1fee312cd041
	void ClientSetHUD(class HUD NewHUDClass);// 0x1fed312cd041
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x1fec312cd041
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x1feb312cd041
	void ClientSetCameraMode(FName NewCamMode);// 0x1fea312cd041
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x1fe9312cd041
	void ClientSetBlockOnAsyncLoading();// 0x1fe8312cd041
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x1fe7312cd041
	void ClientReturnToMainMenu(FString ReturnReason);// 0x1fe6312cd041
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x1fe5312cd041
	void ClientRestart(Pawn* NewPawn);// 0x1fe4312cd041
	void ClientReset();// 0x1fe3312cd041
	void ClientRepObjRef(Object* Object);// 0x1fe2312cd041
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x1fe1312cd041
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x1fe0312cd041
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x1fdf312cd041
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x1fde312cd041
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x1fdd312cd041
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x1fdb312cd041
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x1fda312cd041
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x1fd9312cd041
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x1fd7312cd041
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x1fd6312cd041
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x1fd5312cd041
	void ClientIgnoreMoveInput(bool bIgnore);// 0x1fd4312cd041
	void ClientIgnoreLookInput(bool bIgnore);// 0x1fd3312cd041
	void ClientGotoState(FName NewState);// 0x1fd2312cd041
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x1fd1312cd041
	void ClientForceGarbageCollection();// 0x1fd0312cd041
	void ClientFlushLevelStreaming();// 0x1fcf312cd041
	void ClientEndOnlineSession();// 0x1fce312cd041
	void ClientEnableNetworkVoice(bool bEnable);// 0x1fcd312cd041
	void ClientCommitMapChange();// 0x1fcc312cd041
	void ClientClearCameraLensEffects();// 0x1fcb312cd041
	void ClientCapBandwidth(int Cap);// 0x1fca312cd041
	void ClientCancelPendingMapChange();// 0x1fc9312cd041
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x1fc8312cd041
	void ClearAudioListenerOverride();// 0x1fc7312cd041
	void ClearAudioListenerAttenuationOverride();// 0x1fc6312cd041
	bool CanRestartPlayer();// 0x1fc5312cd041
	void Camera(FName NewMode);// 0x1fc4312cd041
	void AddYawInput(float val);// 0x1fc3312cd041
	void AddRollInput(float val);// 0x1fc2312cd041
	void AddPitchInput(float val);// 0x1fc1312cd041
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x1fc0312cd041

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x140, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x150, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x160, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x188, Size: 0x10]
	Margin Padding;//[Offset: 0x198, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a8, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 0x8]
	int Priority;//[Offset: 0x1e0, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1f0, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 0x10]
	void UnregisterInputComponent();// 0x1732312cd041
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x1731312cd041
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x1730312cd041
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x172f312cd041
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x172e312cd041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x172d312cd041
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x172c312cd041
	void StopListeningForAllInputActions();// 0x172b312cd041
	void StopAnimationsAndLatentActions();// 0x172a312cd041
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x1729312cd041
	void StopAllAnimations();// 0x1728312cd041
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x1727312cd041
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x1726312cd041
	void SetPadding(Margin InPadding);// 0x1725312cd041
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x1724312cd041
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x1723312cd041
	void SetInputActionPriority(int NewPriority);// 0x1722312cd041
	void SetInputActionBlocking(bool bShouldBlock);// 0x1721312cd041
	void SetForegroundColor(SlateColor InForegroundColor);// 0x1720312cd041
	void SetDesiredSizeInViewport(Vector2D Size);// 0x171f312cd041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x171e312cd041
	void SetAnchorsInViewport(Anchors Anchors);// 0x171d312cd041
	void SetAlignmentInViewport(Vector2D Alignment);// 0x171c312cd041
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x171b312cd041
	void RemoveFromViewport();// 0x171a312cd041
	void RegisterInputComponent();// 0x1719312cd041
	void PreConstruct(bool IsDesignTime);// 0x1718312cd041
	void PlaySound(SoundBase* SoundToPlay);// 0x1717312cd041
	void PlayEnterAnim();// 0x1716312cd041
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x1715312cd041
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x1714312cd041
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x1713312cd041
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x1711312cd041
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x1710312cd041
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x170f312cd041
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x170e312cd041
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x170d312cd041
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x170c312cd041
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x170b312cd041
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x170a312cd041
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1709312cd041
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x1708312cd041
	void OnPaint(out PaintContext Context);// 0x1707312cd041
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1706312cd041
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1705312cd041
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x1704312cd041
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1703312cd041
	void OnMouseCaptureLost();// 0x1702312cd041
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1701312cd041
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1700312cd041
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x16ff312cd041
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x16fd312cd041
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x16fc312cd041
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x16fb312cd041
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x16fa312cd041
	void OnInitialized();// 0x16f9312cd041
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x16f8312cd041
	void OnFocusLost(FocusEvent InFocusEvent);// 0x16f7312cd041
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x16f6312cd041
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x16f5312cd041
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x16f4312cd041
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x16f3312cd041
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x16f2312cd041
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x16f1312cd041
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x16f0312cd041
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x16ef312cd041
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x16ee312cd041
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x16ec312cd041
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x16ea312cd041
	bool IsPlayingAnimation();// 0x16e9312cd041
	bool IsListeningForInputAction(FName ActionName);// 0x16e8312cd041
	bool IsInViewport();// 0x16e7312cd041
	bool IsInteractable();// 0x16e6312cd041
	bool IsAnyAnimationPlaying();// 0x16e5312cd041
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x16e4312cd041
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x16e3312cd041
	Pawn* GetOwningPlayerPawn();// 0x16e2312cd041
	HUD* GetOwningHUD();// 0x16e1312cd041
	bool GetIsVisible();// 0x16e0312cd041
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x16df312cd041
	Anchors GetAnchorsInViewport();// 0x16dd312cd041
	Vector2D GetAlignmentInViewport();// 0x16dc312cd041
	void DoPlayEnterAnim(bool InPlayFlag);// 0x16db312cd041
	void Destruct();// 0x16da312cd041
	void Construct();// 0x16d9312cd041
	void CancelLatentActions();// 0x16d8312cd041
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x16d7312cd041
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x16d6312cd041
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x16d4312cd041
	void AddToViewport(int ZOrder);// 0x16d3312cd041
	bool AddToPlayerScreen(int ZOrder);// 0x16d2312cd041

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte Cursor;//[Offset: 0xc1, Size: 0x1]
	enum Clipping;//[Offset: 0xc2, Size: 0x1]
	enum Visibility;//[Offset: 0xc3, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4]
	byte DetailMode;//[Offset: 0xc8, Size: 0x1]
	int WidthDivisor;//[Offset: 0xcc, Size: 0x4]
	int HeightDivisor;//[Offset: 0xd0, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xd8, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xe0, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x128, Size: 0x10]
	void SetWidthHeightDivisors(int InWidthDivisor, int InHeightDivisor);// 0x15b5312cd041
	void SetVisibility(enum InVisibility);// 0x15b4312cd041
	void SetUserFocus(PlayerController* PlayerController);// 0x15b3312cd041
	void SetToolTipText(out const FText InToolTipText);// 0x15b2312cd041
	void SetToolTip(Widget* Widget);// 0x15b1312cd041
	void SetRenderTranslation(Vector2D Translation);// 0x15b0312cd041
	void SetRenderTransformPivot(Vector2D Pivot);// 0x15af312cd041
	void SetRenderTransformAngle(float Angle);// 0x15ae312cd041
	void SetRenderTransform(WidgetTransform InTransform);// 0x15ac312cd041
	void SetRenderShear(Vector2D Shear);// 0x15ab312cd041
	void SetRenderScale(Vector2D Scale);// 0x15aa312cd041
	void SetRenderOpacity(float InOpacity);// 0x15a9312cd041
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x15a8312cd041
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x15a7312cd041
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x15a6312cd041
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x15a5312cd041
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x15a4312cd041
	void SetKeyboardFocus();// 0x15a3312cd041
	void SetIsEnabled(bool bInIsEnabled);// 0x15a2312cd041
	void SetFocus();// 0x15a1312cd041
	void SetDetailMode(byte InDetailMode);// 0x159f312cd041
	void SetCursor(byte InCursor);// 0x159e312cd041
	void SetClipping(enum InClipping);// 0x159d312cd041
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x159b312cd041
	void ResetCursor();// 0x159a312cd041
	void RemoveFromParent();// 0x1599312cd041
	EventReply OnReply__DelegateSignature();// 0x1598312cd041
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1594312cd041
	bool IsVisible();// 0x1593312cd041
	bool IsHovered();// 0x1592312cd041
	void InvalidateLayoutAndVolatility();// 0x1591312cd041
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x1590312cd041
	bool HasUserFocus(PlayerController* PlayerController);// 0x158f312cd041
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x158e312cd041
	bool HasMouseCapture();// 0x158d312cd041
	bool HasKeyboardFocus();// 0x158c312cd041
	bool HasFocusedDescendants();// 0x158b312cd041
	bool HasAnyUserFocus();// 0x158a312cd041
	Widget* GetWidget__DelegateSignature();// 0x1589312cd041
	enum GetVisibility();// 0x1588312cd041
	Geometry GetTickSpaceGeometry();// 0x1587312cd041
	FText GetText__DelegateSignature();// 0x1586312cd041
	enum GetSlateVisibility__DelegateSignature();// 0x1584312cd041
	SlateColor GetSlateColor__DelegateSignature();// 0x1583312cd041
	SlateBrush GetSlateBrush__DelegateSignature();// 0x157a312cd041
	float GetRenderTransformAngle();// 0x1579312cd041
	float GetRenderOpacity();// 0x1578312cd041
	PanelWidget* GetParent();// 0x1577312cd041
	Geometry GetPaintSpaceGeometry();// 0x1576312cd041
	PlayerController* GetOwningPlayer();// 0x1575312cd041
	LocalPlayer* GetOwningLocalPlayer();// 0x1574312cd041
	byte GetMouseCursor__DelegateSignature();// 0x1572312cd041
	LinearColor GetLinearColor__DelegateSignature();// 0x1571312cd041
	bool GetIsEnabled();// 0x1570312cd041
	int GetInt32__DelegateSignature();// 0x156f312cd041
	GameInstance* GetGameInstance();// 0x156e312cd041
	float GetFloat__DelegateSignature();// 0x156d312cd041
	Vector2D GetDesiredSize();// 0x156c312cd041
	enum GetClipping();// 0x156a312cd041
	enum GetCheckBoxState__DelegateSignature();// 0x1568312cd041
	Geometry GetCachedGeometry();// 0x1566312cd041
	bool GetBool__DelegateSignature();// 0x1565312cd041
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x1564312cd041
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x1563312cd041
	void ForceVolatile(bool bForce);// 0x1562312cd041
	void ForceLayoutPrepass();// 0x1561312cd041

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10]
	byte DetailMode;//[Offset: 0x378, Size: 0x1]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x5a00312cd041
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x59ff312cd041
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x59fe312cd041
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x59fd312cd041
	void SetDetailMode(byte InDetailMode);// 0x59fc312cd041
	float GetStartTime();// 0x59fb312cd041
	float GetEndTime();// 0x59fa312cd041
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x59f9312cd041
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x59f8312cd041

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x3ab5312cd041
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x3ab4312cd041

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x94, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Geometry

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0x59e3312cd041
	FName GetUserTag();// 0x59e2312cd041

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x138, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x169b312cd041
	bool RemoveChild(Widget* Content);// 0x169a312cd041
	bool HasChild(Widget* Content);// 0x1699312cd041
	bool HasAnyChildren();// 0x1698312cd041
	int GetChildrenCount();// 0x1697312cd041
	int GetChildIndex(const Widget* Content);// 0x1696312cd041
	Widget* GetChildAt(int Index);// 0x1695312cd041
	Widget*[] GetAllChildren();// 0x1694312cd041
	void ClearChildren();// 0x1693312cd041
	PanelSlot* AddChild(Widget* Content);// 0x1692312cd041

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 0x1c]
	float Duration;//[Offset: 0xf4, Size: 0x4]
	float MaxDistance;//[Offset: 0xf8, Size: 0x4]
	float TotalSamples;//[Offset: 0xfc, Size: 0x4]
	float Priority;//[Offset: 0x100, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 0x8]
	SoundModulation Modulation;//[Offset: 0x110, Size: 0x10]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x58]
	SoundClass*[] ChildClasses;//[Offset: 0x80, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x90, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0xa0, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float StereoBleed;//[Offset: 0x10, Size: 0x4]
	float LFEBleed;//[Offset: 0x14, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4]
	byte OutputTarget;//[Offset: 0x2c, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x2d, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	float OutputVolume;//[Offset: 0x68, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x70, Size: 0x10]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x623a312cd041
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x6239312cd041
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x6238312cd041
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x6237312cd041
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x6236312cd041
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x6235312cd041

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x160, Size: 0x4]
	int StreamingPriority;//[Offset: 0x164, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x168, Size: 0x1]
	byte SoundGroup;//[Offset: 0x16a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x16c, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1a0, Size: 0x4]
	FString SpokenText;//[Offset: 0x1e8, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x1f8, Size: 0x4]
	float Volume;//[Offset: 0x1fc, Size: 0x4]
	float Pitch;//[Offset: 0x200, Size: 0x4]
	int NumChannels;//[Offset: 0x204, Size: 0x4]
	int SampleRate;//[Offset: 0x208, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x228, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x1c]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0xc, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x14, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x304, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x308, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 0x1]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D LockedSize;//[Offset: 0x14, Size: 0x8]
	Margin Margin;//[Offset: 0x1c, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x30, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x58, Size: 0x8]
	FName ResourceName;//[Offset: 0x60, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x68, Size: 0x14]
	byte DrawAs;//[Offset: 0x7c, Size: 0x1]
	byte Tiling;//[Offset: 0x7d, Size: 0x1]
	byte Mirroring;//[Offset: 0x7e, Size: 0x1]
	byte ImageType;//[Offset: 0x7f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x378b312cd041
	void ShowTitleSafeArea();// 0x378a312cd041
	void SetConsoleTarget(int PlayerIndex);// 0x3789312cd041

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0x10b3312cd041
	void ReceiveInit();// 0x10b2312cd041
	void HandleTravelError(byte FailureType);// 0x10b0312cd041
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x10ae312cd041
	void DebugRemovePlayer(int ControllerId);// 0x10ad312cd041
	void DebugCreatePlayer(int ControllerId);// 0x10ac312cd041

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x46e2312cd041
	void Dragged(out const PointerEvent PointerEvent);// 0x46e1312cd041
	void DragCancelled(out const PointerEvent PointerEvent);// 0x46e0312cd041

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x228, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x230, Size: 0x8]
	float DefaultFOV;//[Offset: 0x240, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x248, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x250, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2a0, Size: 0x640]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8e0, Size: 0x640]
	TViewTarget ViewTarget;//[Offset: 0xf20, Size: 0x650]
	TViewTarget PendingViewTarget;//[Offset: 0x1570, Size: 0x650]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1bf0, Size: 0x640]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2230, Size: 0x640]
	CameraModifier*[] ModifierList;//[Offset: 0x2870, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2880, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2890, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2894, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x28a0, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x28c0, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x28d0, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x28d8, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2918, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2938, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2948, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2958, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2960, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2960, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2960, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2960, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2961, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2964, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2968, Size: 0x4]
	float ViewYawMin;//[Offset: 0x296c, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2970, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2974, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2978, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2980, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x4c3d312cd041
	void StopCameraFade();// 0x4c3c312cd041
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x4c3b312cd041
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x4c3a312cd041
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x4c39312cd041
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x4c38312cd041
	void StopAllCameraShakes(bool bImmediately);// 0x4c37312cd041
	void StopAllCameraAnims(bool bImmediate);// 0x4c36312cd041
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x4c35312cd041
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x4c34312cd041
	void SetGameCameraCutThisFrame();// 0x4c33312cd041
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x4c32312cd041
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x4c31312cd041
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x4c30312cd041
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4c2f312cd041
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4c2e312cd041
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x4c2d312cd041
	void OnPhotographySessionStart();// 0x4c2c312cd041
	void OnPhotographySessionEnd();// 0x4c2b312cd041
	void OnPhotographyMultiPartCaptureStart();// 0x4c2a312cd041
	void OnPhotographyMultiPartCaptureEnd();// 0x4c29312cd041
	PlayerController* GetOwningPlayerController();// 0x4c28312cd041
	float GetFOVAngle();// 0x4c27312cd041
	Rotator GetCameraRotation();// 0x4c26312cd041
	Vector GetCameraLocation();// 0x4c25312cd041
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x4c24312cd041
	void ClearCameraLensEffects();// 0x4c23312cd041
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x4c22312cd041
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x4c21312cd041
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4c20312cd041

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x5c4e312cd041
	void ReceivePlayShake(float Scale);// 0x5c4d312cd041
	bool ReceiveIsFinished();// 0x5c4c312cd041
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x5c4b312cd041

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x5a0]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5e0, Size: 0x8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_LDRSaturation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellOpacity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellFadeness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellSecondRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellLocation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellSecondLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	byte BloomMethod;//[Offset: 0x18, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x19, Size: 0x1]
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4]
	float WhiteTint;//[Offset: 0x20, Size: 0x4]
	Vector4 LDRSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 LDRContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 LDRBrightness;//[Offset: 0x50, Size: 0x10]
	float NightfellRadius;//[Offset: 0x60, Size: 0x4]
	float NightfellSecondRadius;//[Offset: 0x64, Size: 0x4]
	float NightfellOpacity;//[Offset: 0x68, Size: 0x4]
	float NightfellFadeness;//[Offset: 0x6c, Size: 0x4]
	Vector4 NightfellLocation;//[Offset: 0x70, Size: 0x10]
	Vector4 NightfellSecondLocation;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorSaturation;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x160, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x170, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x180, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x190, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x1a0, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x1b0, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x1c0, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x1d0, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x1d4, Size: 0x4]
	float BlueCorrection;//[Offset: 0x1d8, Size: 0x4]
	float ExpandGamut;//[Offset: 0x1dc, Size: 0x4]
	float FilmSlope;//[Offset: 0x1e0, Size: 0x4]
	float FilmToe;//[Offset: 0x1e4, Size: 0x4]
	float FilmShoulder;//[Offset: 0x1e8, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x1ec, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x1f0, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x1f4, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x204, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x214, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x218, Size: 0x4]
	float FilmSaturation;//[Offset: 0x21c, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x220, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x230, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x240, Size: 0x10]
	float FilmContrast;//[Offset: 0x250, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x254, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x258, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x25c, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x260, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x270, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x274, Size: 0x4]
	float BloomIntensity;//[Offset: 0x278, Size: 0x4]
	float BloomThreshold;//[Offset: 0x27c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x280, Size: 0x4]
	float Bloom1Size;//[Offset: 0x284, Size: 0x4]
	float Bloom2Size;//[Offset: 0x288, Size: 0x4]
	float Bloom3Size;//[Offset: 0x28c, Size: 0x4]
	float Bloom4Size;//[Offset: 0x290, Size: 0x4]
	float Bloom5Size;//[Offset: 0x294, Size: 0x4]
	float Bloom6Size;//[Offset: 0x298, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x29c, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x2ac, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x2bc, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x2cc, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2dc, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2ec, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2fc, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x300, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x308, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x310, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x314, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x318, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x31c, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x320, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x328, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x32c, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x33c, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x34c, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x350, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x358, Size: 0x4]
	float CameraISO;//[Offset: 0x35c, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x360, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x364, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x368, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x36c, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x370, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x374, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x374, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x378, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x380, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x388, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x38c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x390, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x394, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x398, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x39c, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x3a0, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x3a4, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x3a8, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x3ac, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x3b0, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x3c0, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x3c4, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x3c8, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x3d0, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x450, Size: 0x4]
	float GrainJitter;//[Offset: 0x454, Size: 0x4]
	float GrainIntensity;//[Offset: 0x458, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x45c, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x460, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x464, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x46c, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x470, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x474, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x478, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x47c, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x480, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x484, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x488, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x48c, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x490, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x494, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x498, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x4a8, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x4ac, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x4b0, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x4b4, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x4b8, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x4c0, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x4c8, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x4cc, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x4d0, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x4d4, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x4d8, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x4dc, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x4e0, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x4e4, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4e8, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4ec, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x4f0, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4f4, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4f8, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4fc, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x500, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x504, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x508, Size: 0x4]
	float LPVIntensity;//[Offset: 0x50c, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x510, Size: 0x4]
	float LPVSize;//[Offset: 0x514, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x518, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x51c, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x520, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x524, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x528, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x52c, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x530, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x534, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x538, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x53c, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x540, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x544, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x548, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x54c, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x550, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x554, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x558, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x55c, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55d, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x55e, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x560, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x564, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x568, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x56c, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56d, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x570, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x574, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x578, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x57c, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x580, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x588, Size: 0x10]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x5a0]
	float BasePostProcessBlendWeight;//[Offset: 0x600, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x5c4a312cd041
	void SetScale(float NewDuration);// 0x5c49312cd041
	void SetDuration(float NewDuration);// 0x5c48312cd041

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x314, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x318, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x31c, Size: 0x4]
	class CameraShake* CameraShake;//[Offset: 0x320, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	void StopAllCameraShakes(bool bImmediately);// 0x5c52312cd041
	void PlayCameraShake(class CameraShake InCameraShake);// 0x5c51312cd041
	void Play();// 0x5c50312cd041
	float GetAttenuationFactor(out const Vector Location);// 0x5c4f312cd041

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x3d49312cd041
	Actor* GetViewTarget();// 0x3d48312cd041
	void EnableModifier();// 0x3d47312cd041
	void DisableModifier(bool bImmediate);// 0x3d46312cd041
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x3d45312cd041
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x3d44312cd041

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x280, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x288, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x290, Size: 0x30]
	float BaseFOV;//[Offset: 0x2c0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x2d8, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x228, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x238, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x248, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x258, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x268, Size: 0x10]
	void ToggleActive();// 0x5cce312cd041
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x5ccd312cd041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x5ccc312cd041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x5ccb312cd041
	void SetFloatParameter(FName ParameterName, float Param);// 0x5cca312cd041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x5cc9312cd041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x5cc8312cd041
	void OnRep_bCurrentlyActive();// 0x5cc7312cd041
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x5cc6312cd041
	bool IsActive();// 0x5cc5312cd041
	void Deactivate();// 0x5cc4312cd041
	void Activate();// 0x5cc3312cd041

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4]
	float Delay;//[Offset: 0xa8, Size: 0x4]
	float DelayLow;//[Offset: 0xac, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1]
	byte LODMethod;//[Offset: 0xb3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x6198312cd041

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x540, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x548, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x558, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x569, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x569, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x569, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x569, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x569, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56a, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56a, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56a, Size: 0x1]
	byte LODMethod;//[Offset: 0x575, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x576, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x578, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x588, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x598, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x5a8, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x5b8, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	Vector OldPosition;//[Offset: 0x5cc, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x5d8, Size: 0xc]
	float WarmupTime;//[Offset: 0x5e4, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x5e8, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x5f0, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x5f8, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x618, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x630, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x688, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x690, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x698, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x699, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x69a, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x6c8, Size: 0x10]
	delegate OnPreSystemActivated;//[Offset: 0x6d8, Size: 0x10]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x358e312cd041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x358d312cd041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x358c312cd041
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x358b312cd041
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x358a312cd041
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x3589312cd041
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x3588312cd041
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x3587312cd041
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x3586312cd041
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x3585312cd041
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x3584312cd041
	int GetNumActiveParticles();// 0x3583312cd041
	MaterialInterface* GetNamedMaterial(FName InName);// 0x3582312cd041
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x3581312cd041
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x3580312cd041
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x357f312cd041
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x357e312cd041
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x357d312cd041
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x357c312cd041
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x357b312cd041
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x357a312cd041
	void EndTrails();// 0x3579312cd041
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x3578312cd041
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3577312cd041

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x3576312cd041
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x3575312cd041
	void SetFloatParameter(FName ParameterName, float Param);// 0x3574312cd041
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x3573312cd041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x3572312cd041
	void SetBoolParameter(FName ParameterName, bool Param);// 0x3571312cd041
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x3570312cd041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x356f312cd041
	void ReleaseToPool();// 0x356e312cd041
	FXSystemAsset* GetFXSystemAsset();// 0x356d312cd041

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x618a312cd041
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x6189312cd041
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x6188312cd041
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x6187312cd041
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x6186312cd041
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x6185312cd041
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x6184312cd041
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x6183312cd041
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x6182312cd041
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x6181312cd041
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x6180312cd041
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x617f312cd041
	float K2_GetScalarParameterValue(FName ParameterName);// 0x617e312cd041
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x617d312cd041
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x617c312cd041
	void CopyInterpParameters(MaterialInstance* Source);// 0x617b312cd041

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x1a0]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 0x10]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_AllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x630]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x630]
	PlayerState* PlayerState;//[Offset: 0x640, Size: 0x8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x228, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x230, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x238, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	float AspectRatio;//[Offset: 0x24c, Size: 0x4]
	float FOVAngle;//[Offset: 0x250, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x254, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 0x5a0]
	int GetAutoActivatePlayerIndex();// 0x4e5c312cd041

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x314, Size: 0x4]
	float OrthoWidth;//[Offset: 0x318, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x31c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x320, Size: 0x4]
	float AspectRatio;//[Offset: 0x324, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x328, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x328, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x328, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x329, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x360, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x390, Size: 0x5a0]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x45c1312cd041
	void SetProjectionMode(byte InProjectionMode);// 0x45c0312cd041
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x45bf312cd041
	void SetOrthoWidth(float InOrthoWidth);// 0x45be312cd041
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x45bd312cd041
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x45bc312cd041
	void SetFieldOfView(float InFieldOfView);// 0x45bb312cd041
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x45ba312cd041
	void SetAspectRatio(float InAspectRatio);// 0x45b9312cd041
	void RemoveBlendable(interface class_                                                                                                    InBlendableObject);// 0x45b8312cd041
	void OnCameraMeshHiddenChanged();// 0x45b7312cd041
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x45b6312cd041
	void AddOrUpdateBlendable(interface class_                                                                                                    InBlendableObject, float InWeight);// 0x45b5312cd041

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x284, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x288, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x290, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x298, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2a0, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	void TurnAtRate(float Rate);// 0x34c1312cd041
	void MoveUp_World(float val);// 0x34c0312cd041
	void MoveRight(float val);// 0x34bf312cd041
	void MoveForward(float val);// 0x34be312cd041
	void LookUpAtRate(float Rate);// 0x34bd312cd041

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x558, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x404b312cd041
	float GetUnscaledSphereRadius();// 0x404a312cd041
	float GetShapeScale();// 0x4049312cd041
	float GetScaledSphereRadius();// 0x4048312cd041

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x574, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x578, Size: 0x4]
	int MinLOD;//[Offset: 0x57c, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x580, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x588, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x590, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x594, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x594, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x594, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x594, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x594, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x594, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x594, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x594, Size: 0x1]
	bool bOverrideShadowMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x595, Size: 0x1]
	bool bMinimizeLightmapRes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x595, Size: 0x1]
	bool bOverrideMeshMinScreenSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x595, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x595, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x595, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x595, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x595, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x595, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x598, Size: 0x4]
	float LightmapPrecision;//[Offset: 0x59c, Size: 0x4]
	float ShadowmapPrecision;//[Offset: 0x5a0, Size: 0x4]
	int OverriddenShadowMapRes;//[Offset: 0x5a4, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x5a8, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x5ac, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x5b0, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x5b8, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5c8, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x5d8, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x3d04312cd041
	void SetShadowmapPrecision(float InShadowMapPrecision);// 0x3d03312cd041
	void SetReverseCulling(bool ReverseCulling);// 0x3d02312cd041
	void SetOverrideShadowMapRes(int InOverridShadowMapRes);// 0x3d01312cd041
	void SetOverrideLightMapRes(int InOverrideLightMapRes);// 0x3d00312cd041
	void SetLightmapPrecision(float InLightMapPrecision);// 0x3cff312cd041
	void SetForcedLodModel(int NewForcedLodModel);// 0x3cfe312cd041
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x3cfd312cd041
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x3cfc312cd041
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x3cfb312cd041
	void EnableShadowmapResOverride(bool bInOverrideShadowMapRes);// 0x3cfa312cd041
	void EnableLightmapResOverride(bool bInOverrideLightMapRes);// 0x3cf9312cd041

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x4646312cd041
	void ViewSelf();// 0x4645312cd041
	void ViewPlayer(FString S);// 0x4644312cd041
	void ViewClass(class Actor DesiredClass);// 0x4643312cd041
	void ViewActor(FName ActorName);// 0x4642312cd041
	void UpdateSafeArea();// 0x4641312cd041
	void ToggleServerStatReplicatorUpdateStatNet();// 0x4640312cd041
	void ToggleServerStatReplicatorClientOverwrite();// 0x463f312cd041
	void ToggleDebugCamera();// 0x463e312cd041
	void ToggleAILogging();// 0x463d312cd041
	void TestCollisionDistance();// 0x463c312cd041
	void Teleport();// 0x463b312cd041
	void Summon(FString ClassName);// 0x463a312cd041
	void StreamLevelOut(FName PackageName);// 0x4639312cd041
	void StreamLevelIn(FName PackageName);// 0x4638312cd041
	void SpawnServerStatReplicator();// 0x4637312cd041
	void Slomo(float NewTimeDilation);// 0x4636312cd041
	void SetWorldOrigin();// 0x4635312cd041
	void SetMouseSensitivityToDefault();// 0x4634312cd041
	void ServerToggleAILogging();// 0x4633312cd041
	void ReceiveInitCheatManager();// 0x4632312cd041
	void ReceiveEndPlay();// 0x4631312cd041
	void PlayersOnly();// 0x4630312cd041
	void OnlyLoadLevel(FName PackageName);// 0x462f312cd041
	void LogLoc();// 0x462e312cd041
	void InvertMouse();// 0x462d312cd041
	void God();// 0x462c312cd041
	void Ghost();// 0x462b312cd041
	void FreezeFrame(float Delay);// 0x462a312cd041
	void Fly();// 0x4629312cd041
	void FlushLog();// 0x4628312cd041
	void EnableDebugCamera();// 0x4627312cd041
	void DumpVoiceMutingState();// 0x4626312cd041
	void DumpPartyState();// 0x4625312cd041
	void DumpOnlineSessionState();// 0x4624312cd041
	void DumpChatState();// 0x4623312cd041
	void DisableDebugCamera();// 0x4622312cd041
	void DestroyTarget();// 0x4621312cd041
	void DestroyServerStatReplicator();// 0x4620312cd041
	void DestroyPawns(class Pawn aClass);// 0x461f312cd041
	void DestroyAllPawnsExceptTarget();// 0x461e312cd041
	void DestroyAll(class Actor aClass);// 0x461d312cd041
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x461c312cd041
	void DebugCapsuleSweepPawn();// 0x461b312cd041
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x461a312cd041
	void DebugCapsuleSweepClear();// 0x4619312cd041
	void DebugCapsuleSweepChannel(byte Channel);// 0x4618312cd041
	void DebugCapsuleSweepCapture();// 0x4617312cd041
	void DebugCapsuleSweep();// 0x4616312cd041
	void DamageTarget(float DamageAmount);// 0x4615312cd041
	void CheatScript(FString ScriptName);// 0x4614312cd041
	void ChangeSize(float F);// 0x4613312cd041
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x4612312cd041
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x4611312cd041
	void BugIt(FString ScreenShotDescription);// 0x4610312cd041

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a5, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a5, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a5, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a5, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a5, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a5, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a5, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a5, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5a8, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x5b0, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x5b8, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x5c0, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x648, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x650, Size: 0x8]
	float SpeedScale;//[Offset: 0x658, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x65c, Size: 0x4]
	float InitialAccel;//[Offset: 0x660, Size: 0x4]
	float InitialDecel;//[Offset: 0x664, Size: 0x4]
	void ToggleDisplay();// 0x5c7c312cd041
	void ShowDebugSelectedInfo();// 0x5c7b312cd041
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x5c7a312cd041
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x5c79312cd041
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x5c78312cd041
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x5c77312cd041
	Actor* GetSelectedActor();// 0x5c76312cd041

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x540, Size: 0x4]
	float FrustumAngle;//[Offset: 0x544, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x548, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x54c, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x550, Size: 0x4]
	Texture* Texture;//[Offset: 0x558, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x168, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1e8, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1528, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1b08, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x210, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f8, Size: 0x8]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x228, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x230, Size: 0x8]
	float PlayRate;//[Offset: 0x238, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x240, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x244, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x244, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x248, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x250, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x268, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x278, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	float InterpPosition;//[Offset: 0x28c, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x294, Size: 0x1]
	delegate OnPlay;//[Offset: 0x298, Size: 0x10]
	delegate OnStop;//[Offset: 0x2a8, Size: 0x10]
	delegate OnPause;//[Offset: 0x2b8, Size: 0x10]
	void Stop();// 0x6192312cd041
	void SetPosition(float NewPosition, bool bJump);// 0x6191312cd041
	void SetLoopingState(bool bNewLooping);// 0x6190312cd041
	void Reverse();// 0x618f312cd041
	void Play();// 0x618e312cd041
	void Pause();// 0x618d312cd041
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x618c312cd041
	void ChangePlaybackDirection();// 0x618b312cd041

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x318, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x320, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x328, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x5c64312cd041

--------------------------------
Class: Interface.Object

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x6167312cd041
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x6166312cd041
	bool RemoteEvent(FName EventName);// 0x6165312cd041
	void LevelReset();// 0x6164312cd041

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x238, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x240, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x540, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1]
	float ScreenSize;//[Offset: 0x54c, Size: 0x4]
	float U;//[Offset: 0x550, Size: 0x4]
	float UL;//[Offset: 0x554, Size: 0x4]
	float V;//[Offset: 0x558, Size: 0x4]
	float VL;//[Offset: 0x55c, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x5bd4312cd041
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x5bd3312cd041
	void SetSprite(Texture2D* NewSprite);// 0x5bd2312cd041

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: LevelSolarDecorationLightMapGUIDArray
	Guid[] MapBuildDataIdArray;//[Offset: 0x0, Size: 0x10]
	uint32[] LODNumArray;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x230, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x234, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x235, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x235, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x235, Size: 0x1]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0x238, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0x248, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0x258, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0x268, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0x278, Size: 0x10]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x288, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x288, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x288, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x288, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x289, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x290, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x298, Size: 0x8]
	float WorldToMeters;//[Offset: 0x2a0, Size: 0x4]
	float KillZ;//[Offset: 0x2a4, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x2a8, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x2b0, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x2b4, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2b8, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2c0, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2c8, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2d0, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2d8, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x2dc, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x2e8, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x2ec, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x2f0, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x2f8, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x318, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x33c, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x340, Size: 0x8]
	float TimeDilation;//[Offset: 0x348, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x34c, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x350, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x354, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x358, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x35c, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x360, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x364, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x3a8, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x3b0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c0, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x3d0, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x3d8, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x3e0, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x3e8, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x3f8, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x55ab312cd041

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x228, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x238, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x240, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x248, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x250, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x258, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x260, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x268, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x270, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x278, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x280, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x288, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x290, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x298, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	void StartPlay();// 0x1f66312cd041
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x1f65312cd041
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x1f64312cd041
	bool ShouldReset(Actor* ActorToReset);// 0x1f63312cd041
	void ReturnToMainMenuHost();// 0x1f62312cd041
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x1f61312cd041
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x1f60312cd041
	void RestartPlayer(Controller* NewPlayer);// 0x1f5f312cd041
	void ResetLevel();// 0x1f5e312cd041
	bool PlayerCanRestart(PlayerController* Player);// 0x1f5d312cd041
	bool MustSpectate(PlayerController* NewPlayerController);// 0x1f5c312cd041
	void K2_PostLogin(PlayerController* NewPlayer);// 0x1f5b312cd041
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x1f5a312cd041
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x1f59312cd041
	void K2_OnLogout(Controller* ExitingController);// 0x1f58312cd041
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x1f57312cd041
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x1f56312cd041
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x1f55312cd041
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x1f54312cd041
	bool HasMatchStarted();// 0x1f53312cd041
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x1f52312cd041
	int GetNumSpectators();// 0x1f51312cd041
	int GetNumPlayers();// 0x1f50312cd041
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x1f4f312cd041
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x1f4e312cd041
	Actor* ChoosePlayerStart(Controller* Player);// 0x1f4d312cd041
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x1f4c312cd041
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x1f4b312cd041

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x228, Size: 0x4]
	int MaxPlayers;//[Offset: 0x22c, Size: 0x4]
	int MaxPartySize;//[Offset: 0x230, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x234, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	FName SessionName;//[Offset: 0x238, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x228, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x230, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x238, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x240, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x254, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x258, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x25c, Size: 0x4]
	void OnRep_SpectatorClass();// 0x194f312cd041
	void OnRep_ReplicatedWorldTimeSeconds();// 0x194e312cd041
	void OnRep_ReplicatedHasBegunPlay();// 0x194d312cd041
	void OnRep_GameModeClass();// 0x194c312cd041
	bool HasMatchStarted();// 0x194b312cd041
	bool HasBegunPlay();// 0x194a312cd041
	float GetServerWorldTimeSeconds();// 0x1949312cd041
	float GetPlayerStartTime(Controller* Controller);// 0x1948312cd041
	float GetPlayerRespawnDelay(Controller* Controller);// 0x1947312cd041

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	uint32 Channels;//[Offset: 0x22c, Size: 0x4]
	uint32 InRate;//[Offset: 0x230, Size: 0x4]
	uint32 OutRate;//[Offset: 0x234, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x23c, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x240, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x244, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x248, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x24c, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x250, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x254, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x258, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x25c, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x260, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x264, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x268, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x26c, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x270, Size: 0x4]
	uint32 InPackets;//[Offset: 0x274, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x278, Size: 0x4]
	uint32 InBunches;//[Offset: 0x27c, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x280, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x284, Size: 0x4]
	uint32 InLoss;//[Offset: 0x288, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x28c, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x290, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x294, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x298, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x29c, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2a0, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2a4, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2a8, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2ac, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x2b0, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2b4, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b8, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x2bc, Size: 0x4]
	uint32 NumActors;//[Offset: 0x2c0, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x2c4, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x2c8, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2cc, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2d0, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x2d4, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d8, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x2dc, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x2e0, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x2e4, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x2e8, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x228, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x22c, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x230, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x234, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x238, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x23c, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x240, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x244, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x248, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x250, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x254, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x258, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x25c, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x260, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x264, Size: 0x4]
	float MoveRepSize;//[Offset: 0x268, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x26c, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x270, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x274, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x278, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x27c, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x280, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x284, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x288, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x28c, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x290, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x294, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x298, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x29c, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2a0, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a8, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2ac, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2b0, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b8, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2bc, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2c0, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2c4, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xf0, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x100, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x110, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x120, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x130, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x138, Size: 0x8]
	bool ShouldBeLoaded();// 0x6173312cd041
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x6172312cd041
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x6171312cd041
	void SetPriority(int NewPriority);// 0x6170312cd041
	void SetLevelLODIndex(int LODIndex);// 0x616f312cd041
	bool IsStreamingStatePending();// 0x616e312cd041
	bool IsLevelVisible();// 0x616d312cd041
	bool IsLevelLoaded();// 0x616c312cd041
	FName GetWorldAssetPackageFName();// 0x616b312cd041
	Level* GetLoadedLevel();// 0x616a312cd041
	LevelScriptActor* GetLevelScriptActor();// 0x6169312cd041
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x6168312cd041

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x260, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x271, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x850, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9fc, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa20, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa38, Size: 0x10]
	<Actor*> RecordingAtThisFrame;//[Offset: 0x14b8, Size: 0x50]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x5bd1312cd041
	int GetObjectCount();// 0x5bd0312cd041
	int GetNewAvoidanceUID();// 0x5bcf312cd041
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x5bce312cd041

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x5c5f312cd041
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x5c5e312cd041
	Vector K2_Project(Vector WorldLocation);// 0x5c5d312cd041
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x5c5c312cd041
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x5c5b312cd041
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x5c5a312cd041
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x5c59312cd041
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x5c58312cd041
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x5c57312cd041
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x5c56312cd041
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x5c55312cd041
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x5c54312cd041
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x5c53312cd041

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x88, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x98, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0xa4, Size: 0x4]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0xa8, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0xb8, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0xc8, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0xd8, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0xe8, Size: 0x10]
	void OnStreamingLevelShownHandle(FName LevelPackageName, LevelStreaming* LevelStreaming);// 0x62c9312cd041

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarWorldSettings.WorldSettings.Info.Actor.Object
	int MapID;//[Offset: 0x400, Size: 0x4]
	SoftObjectPath PreloadAssets;//[Offset: 0x408, Size: 0x18]
	bool bAsyncPreload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 0x1]
	bool bHoldAllMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 0x1]
	class SolarPostProcessSettingItem* PostProcessItemClass;//[Offset: 0x428, Size: 0x8]
	int CurrentActiveColorThemeIndex;//[Offset: 0x430, Size: 0x4]
	int SolarMapTypeValue;//[Offset: 0x434, Size: 0x4]
	bool MapEnableLowMemoryGraphOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	Transform SpectatorPawnStartPoint;//[Offset: 0x440, Size: 0x30]
	SolarPostProcessSettingItem* PostProcessItem;//[Offset: 0x470, Size: 0x8]

--------------------------------
Class: SolarPostProcessSettingItem.Object
	ColorGradingItem ColorGradingItem;//[Offset: 0x30, Size: 0x5b0]

--------------------------------
Class: ColorGradingItem
	enum ColorTheme;//[Offset: 0x0, Size: 0x1]
	PostProcessSettings PPSettings;//[Offset: 0x10, Size: 0x5a0]

--------------------------------
Class: MLV_TrainingMode_C.LevelScriptActor.Actor.Object
	FString GetModuleName();// 0x22faa3154d008

--------------------------------
Class: BP_Controller_TrainingMode_C.BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object

--------------------------------
Class: BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc28, Size: 0x8]
	PoseSnapshot Snapshot;//[Offset: 0xc30, Size: 0x38]
	float TempMaxDist;//[Offset: 0xc68, Size: 0x4]
	int TempMaxIndex;//[Offset: 0xc6c, Size: 0x4]
	void OnNotifyLockPlayer(FString Name);// 0x8b443154d001
	void RequestNotifyLockPlayer(FString Name);// 0x8b433154d001
	void InpActEvt_GMT_K2Node_InputActionEvent(Key Key);// 0x8b423154d001
	void InputReviveSelfReleased();// 0x8b413154d001
	void AssembleCustomAntiCheatData(SolarWeapon* ActiveWeapon, SolarVehiclePawn* BoardedVehicle);// 0x8b403154d001
	void CustomAntiCheatDataExport(out const FString[] DataName, out const FString[] DataContent);// 0x1c00873141d100
	void ClientNotifyLockPlayer(FString Name);// 0xffffff87312cd000
	void ExecuteUbergraph_BP_Controller_Framework(int EntryPoint, FString K2Node_CustomEvent_Name, enum CallFunc_GetBuildConfiguration_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Key K2Node_InputActionEvent_Key, byte CallFunc_MakeLiteralByte_ReturnValue, SolarWeapon* K2Node_Event_ActiveWeapon, SolarVehiclePawn* K2Node_Event_BoardedVehicle, const FString[] K2Node_Event_DataName, const FString[] K2Node_Event_DataContent, FString CallFunc_Conv_ByteToString_ReturnValue, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, const FString[] K2Node_MakeArray_Array, None*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, None* CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue);// 0x8b3c3154d001

--------------------------------
Class: SCMPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	SCMPlayerRPCComponent* RpcComponent;//[Offset: 0xc20, Size: 0x8]
	void ServerHandlePlayerLevelLoaded(FString LevelName);// 0x4281312cd041
	void RequestUpdataDataManager();// 0x4280312cd041

--------------------------------
Class: SolarPlayerController.PlayerController.Controller.Actor.Object
	delegate OnPawnReplicated;//[Offset: 0x5d8, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x5e8, Size: 0x10]
	delegate OnCatchInputActionDelegate;//[Offset: 0x5f8, Size: 0x10]
	delegate OnEnterLandingDelegate;//[Offset: 0x608, Size: 0x10]
	delegate OnNotifiedMarkedItemWasPickedUpDelegate;//[Offset: 0x618, Size: 0x10]
	SolarInputManager* InputManager;//[Offset: 0x628, Size: 0x8]
	SolarEasyAntiCheatComponent* AntiCheatComponent;//[Offset: 0x630, Size: 0x8]
	delegate OnHUDSpawnedDelegate;//[Offset: 0x638, Size: 0x10]
	SolarInputModePolicyComponent* SolarInputModePolicyComponent;//[Offset: 0x710, Size: 0x8]
	SolarInputActionContext*[] InputActionContextArray;//[Offset: 0x718, Size: 0x10]
	Vector2D InputMovementVector;//[Offset: 0x730, Size: 0x8]
	float InputRotatePitch;//[Offset: 0x738, Size: 0x4]
	float PingHoldDownTime;//[Offset: 0x74c, Size: 0x4]
	float VoiceWheelMouseMoveRatio;//[Offset: 0x750, Size: 0x4]
	float WheelRadius;//[Offset: 0x754, Size: 0x4]
	float CancelRadius;//[Offset: 0x758, Size: 0x4]
	ActorMarkBase*[] DeathBoxWorldMarks;//[Offset: 0x7c0, Size: 0x10]
	float DeathBoxMarksRefreshInterval;//[Offset: 0x7d4, Size: 0x4]
	int MaxDeathBoxWorldMarkNumber;//[Offset: 0x7dc, Size: 0x4]
	class ActorMarkBase* DeathBoxMarkClass;//[Offset: 0x7e0, Size: 0x8]
	class SolarCharacterSpringArmComponent* FollowArmClass;//[Offset: 0x818, Size: 0x8]
	class SolarCharacterCameraComponent* FollowCameraClass;//[Offset: 0x820, Size: 0x8]
	float FreeLookSmoothSpeed;//[Offset: 0x828, Size: 0x4]
	SolarCharacterSpringArmComponent* FollowArm;//[Offset: 0x840, Size: 0x8]
	SolarCharacterCameraComponent* FollowCamera;//[Offset: 0x848, Size: 0x8]
	FString PlayerId;//[Offset: 0x860, Size: 0x10]
	float VehicleInteractionDistance;//[Offset: 0x890, Size: 0x4]
	SolarVehiclePawn*[] InteractingVehicles;//[Offset: 0x898, Size: 0x10]
	SolarVehiclePawn* BestInteractingVehicle;//[Offset: 0x8a8, Size: 0x8]
	int PeekInput;//[Offset: 0x8bc, Size: 0x4]
	delegate OnTeammateHUDDodgeSet;//[Offset: 0x910, Size: 0x10]
	<SolarCharacter*,int> TeammateCandidates;//[Offset: 0x920, Size: 0x50]
	bool bIsAlreadyParachuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x970, Size: 0x1]
	GameplayHitInfo[] WeaponMessageArray;//[Offset: 0x978, Size: 0x10]
	Actor*[] UniqueActorArray;//[Offset: 0x9a0, Size: 0x10]
	float HangUpTime;//[Offset: 0x9b0, Size: 0x4]
	UserWidget* DamageTextWidget;//[Offset: 0x9d0, Size: 0x8]
	SolarDamageText[] SameFrameDamageTextDataCache;//[Offset: 0x9d8, Size: 0x10]
	TimerHandle SameFrameDamageTextDataHandle;//[Offset: 0x9e8, Size: 0x8]
	SolarWarmClockComponent* WarmClockComp;//[Offset: 0xa90, Size: 0x8]
	delegate OnSpectateInfoRep;//[Offset: 0xaa0, Size: 0x10]
	bool bShowCursorWhenSpectateOthers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 0x1]
	PlayerController* ScoutPlayerController;//[Offset: 0xae8, Size: 0x8]
	Actor* ScoutViewTarget;//[Offset: 0xaf0, Size: 0x8]
	SolarSwitchTargetCameraControlComp* SolarSwitchTargetCameraControlComp;//[Offset: 0xaf8, Size: 0x8]
	int[] UsableJetpacks;//[Offset: 0xb08, Size: 0x10]
	int[] UsableTailFlames;//[Offset: 0xb18, Size: 0x10]
	int[] AllCharacterSkins;//[Offset: 0xb28, Size: 0x10]
	FName PickUpExpItemSound;//[Offset: 0xb38, Size: 0x8]
	FString CachedRechamberSound;//[Offset: 0xb40, Size: 0x10]
	FName EMPScreenEffectName;//[Offset: 0xb64, Size: 0x8]
	float AntiCheatUploadInterval;//[Offset: 0xb6c, Size: 0x4]
	FixedAntiCheatData FixedAntiCheatData;//[Offset: 0xb70, Size: 0x24]
	FString[] CustomAntiCheatNames;//[Offset: 0xbc8, Size: 0x10]
	FString[] CustomAntiCheatContents;//[Offset: 0xbd8, Size: 0x10]
	void WorldMarkWheelYAxis(float Movement);// 0x2223312cd041
	void WorldMarkWheelXAxis(float Movement);// 0x2222312cd041
	void WorldMarkDelayExecFunction();// 0x2221312cd041
	void UseMedicine();// 0x2220312cd041
	void UnMarkWorldInLevel(int64 instanceID);// 0x221f312cd041
	void Turn(float Value);// 0x221e312cd041
	void TryRecordBattlePlayerData();// 0x221d312cd041
	void TryRechargeShield(bool bUseBigRecharger);// 0x221c312cd041
	void TriggerVoiceByType(enum VoiceType);// 0x221b312cd041
	void TriggerVoiceByNumber(int VoiceIndex);// 0x221a312cd041
	void ToggleEMPScreenEffect(bool bInVisible);// 0x2219312cd041
	void ToggleCursor();// 0x2218312cd041
	void TakeOverNextClientSetViewTargetBySwitchTargetComp(bool bRestartBlendEvenIfSameTarget);// 0x2217312cd041
	void SwtichVehicleSeatNotification();// 0x2216312cd041
	void SwitchWeaponByReverseOrder();// 0x2215312cd041
	void SwitchWeaponByOrder();// 0x2214312cd041
	void SwitchSpectatedCharacterInTeam(int PosInTeam);// 0x2213312cd041
	void SwitchInputBinding(out const FName InputName, enum SwitchTpye);// 0x2211312cd041
	void StopSpectateCountdown();// 0x2210312cd041
	void StopRecordingAtDS();// 0x220f312cd041
	void StartSpectateCountdown(RepCountdownData InCountdownData);// 0x220e312cd041
	void StartRecordingAtDS(FString Filename);// 0x220d312cd041
	void SolarSlot(int ID);// 0x220c312cd041
	void SolarShowPanelUI(int Type);// 0x220b312cd041
	void SolarServerNetProfileStop();// 0x220a312cd041
	void SolarServerNetProfileStart();// 0x2209312cd041
	void SolarOpenUI(FString UIID, int RootID);// 0x2208312cd041
	void SolarModule(int ID);// 0x2207312cd041
	void SolarISPC(FString _str);// 0x2206312cd041
	void SolarGM_Weapon(FString Type, FString paramOne, FString paramTwo);// 0x2205312cd041
	void SolarGM_UpdateTaskInfo();// 0x2204312cd041
	void SolarGM_TeleportToBotAIServer(uint32 CtrlIndex);// 0x2203312cd041
	void SolarGM_StopRecordingAtDS();// 0x2202312cd041
	void SolarGM_StopBotAIBehaviorTreeServer(bool bStop);// 0x2201312cd041
	void SolarGM_StartShrinkSafeArea();// 0x2200312cd041
	void SolarGM_StartRecordingAtDS(FString Filename);// 0x21ff312cd041
	void SolarGM_SpawnBotAIAtCrosshairByNumServer(int Num, int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x21fe312cd041
	void SolarGM_SpawnBotAIAtCrosshair(int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x21fd312cd041
	void SolarGM_SpawnAIAtCrosshairServer(int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x21fc312cd041
	void SolarGM_ShowRedZoneDamage(bool IsShow);// 0x21fb312cd041
	void SolarGM_ShowNotice(int NoticeId);// 0x21fa312cd041
	void SolarGM_SetTeamID(int InTeamId);// 0x21f9312cd041
	void SolarGM_SetStatDataForDebug();// 0x21f8312cd041
	void SolarGM_SetSolarPlayerID(FString InSolarPlayer);// 0x21f7312cd041
	void SolarGM_SetReconnection(bool IsReconnection);// 0x21f6312cd041
	void SolarGM_SetPlayerData(FString InPlayerID);// 0x21f5312cd041
	void SolarGM_SetGyroscopeTiltZThresholdSwitch(FString bSwitch);// 0x21f4312cd041
	void SolarGM_SetGyroscopeTiltZThreshold(float Value);// 0x21f3312cd041
	void SolarGM_SetGyroscopeTiltYThreshold(float Value);// 0x21f2312cd041
	void SolarGM_SetGyroscopeTiltFrameCount(float Value);// 0x21f1312cd041
	void SolarGM_SetGyroscopeRotationRateYThreshold(float Value);// 0x21f0312cd041
	void SolarGM_SetGyroscopeRotationRateXThreshold(float Value);// 0x21ef312cd041
	void SolarGM_ServerStartShrinkSafeArea();// 0x21ee312cd041
	void SolarGM_ServerShowRedZoneDamage(bool IsShow);// 0x21ed312cd041
	void SolarGM_ServerSetTeamID(int InTeamId);// 0x21ec312cd041
	void SolarGM_ServerSetStatDataForDebug();// 0x21eb312cd041
	void SolarGM_ServerSetSolarPlayerID(FString InSolarPlayer);// 0x21ea312cd041
	void SolarGM_ServerSetReconnection(bool IsReconnection);// 0x21e9312cd041
	void SolarGM_ServerSetPlayerData(FString InPlayerID);// 0x21e8312cd041
	void SolarGM_ServerDumpAllPlayer();// 0x21e7312cd041
	void SolarGM_ServerDebugOffline();// 0x21e6312cd041
	void SolarGM_ServerConsoleCommand(FString InConsoleCommand);// 0x21e5312cd041
	void SolarGM_ServerClosePoisonDamage(bool isClose);// 0x21e4312cd041
	void SolarGM_ServerChangeDayLight(int ID);// 0x21e3312cd041
	void SolarGM_ResetZoneBombsFire();// 0x21e2312cd041
	void SolarGM_RedZoneServer(const int ZoneId);// 0x21e1312cd041
	void SolarGM_RedZone(const int ZoneId);// 0x21e0312cd041
	void SolarGM_PoisonServer(FString GMType);// 0x21df312cd041
	void SolarGM_Poison(FString GMType);// 0x21de312cd041
	void SolarGM_PlayerUndetectableByAIServer(int debugValue);// 0x21dd312cd041
	void SolarGM_PlayerUndetectableByAI(int debugValue);// 0x21dc312cd041
	void SolarGM_PickHomeitems(int ID, int InCount);// 0x21db312cd041
	void SolarGM_NoviceGuidance(int ActionID, bool bOn);// 0x21da312cd041
	void SolarGM_KillAllAIServer(bool KillBot);// 0x21d9312cd041
	void SolarGM_KickMeOut();// 0x21d8312cd041
	void SolarGM_InitTaskInfo();// 0x21d7312cd041
	void SolarGM_GoPreviousHomeCameraMode();// 0x21d6312cd041
	void SolarGM_GoNextHomeCameraMode();// 0x21d5312cd041
	void SolarGM_GoHomeCameraModeByIndex(int Index);// 0x21d4312cd041
	void SolarGM_GMGoSpectatePreviousPlayer();// 0x21d3312cd041
	void SolarGM_GMGoSpectatePlayerByIndex(uint32 Index);// 0x21d2312cd041
	void SolarGM_GMGoSpectateNextPlayer();// 0x21d1312cd041
	void SolarGM_Freelook(bool Open);// 0x21d0312cd041
	void SolarGM_DumpAllPlayer(bool bSendToServer);// 0x21cf312cd041
	void SolarGM_DebugOffline();// 0x21ce312cd041
	void SolarGM_DebugAllAIServer(int debugValue);// 0x21cd312cd041
	void SolarGM_DebugAllAI(int debugValue);// 0x21cc312cd041
	void SolarGM_ClosePoisonDamage(bool isClose);// 0x21cb312cd041
	void SolarGM_ClientShowRedZoneDamage(Vector bombLocation, Vector CharacterLocation, float Distance, float Damage);// 0x21ca312cd041
	void SolarGM_ClientSetPlayerData(FString InPlayerID);// 0x21c9312cd041
	void SolarGM_ClientGotoLogin();// 0x21c8312cd041
	void SolarGM_ClientDumpAllPlayer(FString DumpString);// 0x21c7312cd041
	void SolarGM_Character(FString GMType, FString Param1, FString Param2);// 0x21c6312cd041
	void SolarGM_ChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x21c5312cd041
	void SolarGM_ChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x21c4312cd041
	void SolarGM_ChangeVehicleIntProperty(FString InPropertyName, int inInt);// 0x21c3312cd041
	void SolarGM_ChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x21c2312cd041
	void SolarGM_ChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x21c1312cd041
	void SolarGM_ChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x21c0312cd041
	void SolarGM_ChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x21bf312cd041
	void SolarGM_ChangeDayLight(int ID);// 0x21be312cd041
	void SolarGM_BattleLua(FString CmdName, out const FString[] Params);// 0x21bd312cd041
	void SolarGM_Battle(FString CmdName, out const FString[] Params);// 0x21bc312cd041
	void SolarGM(FString _str);// 0x21bb312cd041
	void SolarEnergy(int InMode, int ID);// 0x21ba312cd041
	void SolarCloseUI(FString UIID);// 0x21b9312cd041
	void SolarClosePanelUI(int Type);// 0x21b8312cd041
	void SolarClientNetProfileStop();// 0x21b7312cd041
	void SolarClientNetProfileStart();// 0x21b6312cd041
	void ShowBackpackUI();// 0x21b5312cd041
	void SetInputActionSwitch(int ActionID, bool bOn);// 0x21b4312cd041
	void SetAllTeammateHUDDodge(bool bDodge);// 0x21b3312cd041
	void ServerUpdateTaskInfo();// 0x21b2312cd041
	void ServerUnforbidRoleAbilitySkillDebugOnly();// 0x21b1312cd041
	void ServerTeleportTo(const Vector DestLocation);// 0x21b0312cd041
	void ServerSyncPlayerSelfReport();// 0x21af312cd041
	void ServerSwitchSpectatedCharacterInTeam(int PosInTeam);// 0x21ae312cd041
	void ServerSpawnVehicleWithVehicleID(const int VehicleID);// 0x21ad312cd041
	void ServerSpawnVehicle(const int SpawnID);// 0x21ac312cd041
	void ServerSpawnTreasureBox(const int TreasureBoxID);// 0x21ab312cd041
	void ServerSpawnSolarRadar(FString BpPath);// 0x21aa312cd041
	void ServerSpawnOutcomeContent(const int OutcomeID);// 0x21a9312cd041
	void ServerSpawnChargingPile(FString BpPath);// 0x21a8312cd041
	void ServerSpawnAirship(float Loc_X, float Loc_Y);// 0x21a7312cd041
	void ServerSpawnAirdrop(const int AirdropID);// 0x21a6312cd041
	void ServerSolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed);// 0x21a5312cd041
	void ServerSolarWeaponReload(int PrimaryAmmoCap, int SecondaryAmmoCap);// 0x21a4312cd041
	void ServerSolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);// 0x21a3312cd041
	void ServerSolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);// 0x21a2312cd041
	void ServerSolarSetPlayerValue(FString InType, FString InValue);// 0x21a1312cd041
	void ServerSolarAmmoSpreadPerBullet(int AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);// 0x21a0312cd041
	void ServerSolarAmmoRangeSpeedDamage(int AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);// 0x219f312cd041
	void ServerSolarAmmoFiring(int AmmoIndex, int FireCostType, int FireCostPerAttack, int FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);// 0x219e312cd041
	void ServerSolarAmmoBoltAndMag(int AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);// 0x219d312cd041
	void ServerSolarAmmoBasicMovement(int AmmoIndex, int TimedExplode, int BounceTimes, float Lifetime, float BaseReloadTime, int TrajectoryType, float CustomValue);// 0x219c312cd041
	void ServerSetRoleAbilitySkillCDDurationDebugOnly(float InCD);// 0x219b312cd041
	void ServerSetPlayerLevel(int InLevel);// 0x219a312cd041
	void ServerSetHangUpBehavior();// 0x2199312cd041
	void ServerSetFreeLook(bool bInFreeLook);// 0x2198312cd041
	void ServerSetAppLifetimeState(enum NewLifeState);// 0x2197312cd041
	void ServerSetActorOwner(Actor* TargetActor);// 0x2196312cd041
	void ServerRPCResetZoneBombsFire();// 0x2195312cd041
	void ServerRespondSkydivingLeaderTransferRequest(SolarPlayerState* RequesterPlayerState, bool bAgreed);// 0x2194312cd041
	void ServerRespondSkydivingFollowInvitation(SolarPlayerState* InviterPlayerState, bool bAgreed);// 0x2193312cd041
	void ServerResetUniqueSkillCDDebugOnly();// 0x2192312cd041
	void ServerRequestSkydivingLeaderTransfer(SolarPlayerState* DesiredLeaderPlayerState);// 0x2191312cd041
	void ServerRequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x2190312cd041
	void ServerPlayerUpgrade(int InLevel);// 0x218f312cd041
	void ServerPlayerResumeSettlement();// 0x218e312cd041
	void ServerPlayerRequestLogout();// 0x218d312cd041
	void ServerPlayerOutBySelf(enum InPath);// 0x218c312cd041
	void ServerPlayerGoToSettlement();// 0x218b312cd041
	void ServerNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance);// 0x218a312cd041
	void ServerNetProfile(bool startOrStop);// 0x2189312cd041
	void ServerInviteSkydivingFollow(SolarPlayerState* FollowerPlayerState);// 0x2188312cd041
	void ServerInitTaskInfo();// 0x2187312cd041
	void ServerGoSpectatePreviousPlayer();// 0x2186312cd041
	void ServerGoSpectatePlayerByPlayerIdInternal(FString SolarPlayerId);// 0x2185312cd041
	void ServerGoSpectatePlayerByPlayerId(FString SolarPlayerId);// 0x2184312cd041
	void ServerGoSpectatePlayerByIndex_Internal(int Index);// 0x2183312cd041
	void ServerGoSpectatePlayerByIndex(int Index);// 0x2182312cd041
	void ServerGoSpectateNextPlayer();// 0x2181312cd041
	void ServerGainExperience(int InExp);// 0x2180312cd041
	void ServerEnableCheats();// 0x217f312cd041
	void ServerCmd(FString Cmd);// 0x217e312cd041
	void ServerClearUniqueSkillCDDebugOnly();// 0x217d312cd041
	void ServerChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x217c312cd041
	void ServerChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x217b312cd041
	void ServerChangeVehicleIntProperty(FString InPropertyName, int InFloat);// 0x217a312cd041
	void ServerChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x2179312cd041
	void ServerChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x2178312cd041
	void ServerChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x2177312cd041
	void ServerChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x2176312cd041
	void ServerCancelSkydivingFollow();// 0x2175312cd041
	void SendRepliableMessageServer(const int Message);// 0x2174312cd041
	void SendRepliableMessageInMsgBucket(out const int[] MessageIDs);// 0x2173312cd041
	void SendRepliableMessageByMessageID(out const int ID);// 0x2172312cd041
	void SendQuickMessageServer(FString Message, bool bSound);// 0x2171312cd041
	void SendQuickMessageNewServer(const int VoiceType);// 0x2170312cd041
	void SendQuickMessageNewClient(FString NickName, const int VoiceType, const int CharID, const int SkinId, bool bGender, const int PosInTeam, bool bLocalPlayer, bool bShowLocMessage);// 0x216f312cd041
	void SendQuickMessageClient(FString NickName, FString Message, bool IsLocalPlayer, bool bSound, int PosInTeam);// 0x216e312cd041
	void SendLocalizationTeamMessageServer(int TextID, const LocTextParam[] TextParams, FString SoundEvent);// 0x216d312cd041
	void SendLocalizationTeamMessageNewServer(const LocTextParam[] TextParams, const int SoundID1, const int SoundDI2);// 0x216c312cd041
	void SendLocalizationTeamMessageNewClient(const int CharacterId, const int SkinId, bool bGender, const int SoundID1, FString NickName, const LocTextParam[] TextParams, int PosInTeam, const int SoundID2);// 0x216b312cd041
	void SendLocalizationTeamMessageClient(const SolarPlayerState* SenderPS, int TextID, const LocTextParam[] TextParams, FString SoundEvent, int PosInTeam);// 0x2169312cd041
	void SendLocalizationTeamMessage(int TextID, out const <FString,int> TextParamsId, FString SoundEvent1, FString SoundEvent2);// 0x2168312cd041
	void SendDamageTextDataNextTick(out const SolarDamageText InSolarDamageText);// 0x2167312cd041
	void RespondSkydivingLeaderTransferRequest(SolarPlayerState* RequesterPlayerState, bool bAgreed);// 0x2166312cd041
	void RespondSkydivingFollowInvitation(SolarPlayerState* InviterPlayerState, bool bAgreed);// 0x2165312cd041
	void ResetPeekInput();// 0x2164312cd041
	void ResetJoyStickControlInput();// 0x2163312cd041
	void ResetAllInput();// 0x2162312cd041
	void RequestSkydivingLeaderTransfer(SolarPlayerState* DesiredLeaderPlayerState);// 0x2161312cd041
	void RequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x2160312cd041
	void RequestNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance);// 0x215f312cd041
	void RecordSpectateInfoToBI(out SpectateReportInfo SpectateReportInfo);// 0x215e312cd041
	void QuickMessageLuaCall(FString Message, bool bSound);// 0x215d312cd041
	int QueryStage();// 0x215c312cd041
	void PushInputModeUIOnly(FName Name, bool bShowCursor, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0x215b312cd041
	void PushInputModeGameOnly(FName Name, bool bShowCursor);// 0x215a312cd041
	void PushInputModeGameAndUI(FName Name, bool bShowCursor, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0x2159312cd041
	void PostInputAction(FName ActionName, byte KeyEvent);// 0x2158312cd041
	void PostAkEventByName(FString EventName1, FString EventName2);// 0x2157312cd041
	void PopInputMode(FName Name);// 0x2156312cd041
	void PlayerGoToSettleMent();// 0x2155312cd041
	void PlayerGotoLobbyWithLogout();// 0x2154312cd041
	void PassiveTriggeredVoice(enum VoiceType);// 0x2152312cd041
	void OnVehiclePitchRotateInputDelegate__DelegateSignature(float InputValue);// 0x2151312cd041
	void OnTeamNumChangeFun(enum ChangeType, int OldValue, int NewValue);// 0x2150312cd041
	void OnTeammateHUDDodgeSet__DelegateSignature(bool bDodge);// 0x214f312cd041
	void OnSuperScaningStart(out const FString[] InScanPlayers);// 0x214e312cd041
	void OnSuperScaningRemovePlayer(FString InRemovePlayer);// 0x214d312cd041
	void OnSuperScaningEnd();// 0x214c312cd041
	void OnSpectateTargetItemsChanged(SolarSpectateInfo* SpecInfo);// 0x214b312cd041
	void OnSpectateTargetChangedHandler(SolarPlayerState* OldTarget, SolarSpectateInfo* MySpecInfo);// 0x214a312cd041
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x2149312cd041
	void OnSkydivingStatusUpdated(SolarPlayerState* SelfPlayerState, bool bInIsSkydiving);// 0x2148312cd041
	void OnShowGameNotice(const int InNoticeID, out const <FString,FString> InNoticeParams);// 0x2147312cd041
	RotationBarMarkWidget*[] OnShowActorMarkDelegate__DelegateSignature(Actor*[] MarkActors);// 0x2146312cd041
	void OnSeamlessTravelEnd();// 0x2145312cd041
	void OnScopeAxisInput(float InAxisValue);// 0x2144312cd041
	void OnReviveSelfTriggered(bool bAppear);// 0x2143312cd041
	void OnReceivedSkydivingLeaderTransferRequest(SolarPlayerState* RequesterPlayerState);// 0x2142312cd041
	void OnReceivedSkydivingFollowInvitation(SolarPlayerState* InviterPlayerState);// 0x2141312cd041
	void OnReceiveBattleEnd();// 0x2140312cd041
	void OnPutAwayWeaponPressed();// 0x213f312cd041
	void OnPlayerStateSpectateInfoRepHandler(SolarSpectateInfo* SpecInfo);// 0x213e312cd041
	void OnPlayerStateRepHandlerForSpectate(enum RepType, PlayerState* InPlayerState);// 0x213d312cd041
	void OnPawnReplicated__DelegateSignature();// 0x213c312cd041
	void OnNotifiedMarkedItemWasPickedUpDelegate__DelegateSignature(out const int64 InItemInstanceId);// 0x213b312cd041
	void OnEnterVoyageDelegate__DelegateSignature();// 0x213a312cd041
	void OnEnterLanding();// 0x2139312cd041
	void OnCustomizeLevelLoaded();// 0x2138312cd041
	void OnCleanActorMarkWithWidgetsDelegate__DelegateSignature(RotationBarMarkWidget*[] MarkWidgets);// 0x2137312cd041
	void OnCleanActorMarkWithActorsDelegate__DelegateSignature(Actor*[] MarkActors);// 0x2136312cd041
	void OnCharacterRebirthLua();// 0x2135312cd041
	void OnCharacterDeathLua();// 0x2134312cd041
	void OnCatchInputActionDelegate__DelegateSignature(FName ActionName, byte InputEventType);// 0x2133312cd041
	void OnBeforeSpectateTargetChange(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x2132312cd041
	void OnAppHasReactivated();// 0x2131312cd041
	void OnAppHasDeactiveated();// 0x2130312cd041
	void NotifyMonsterSpawn();// 0x212f312cd041
	void NotifyCrouchIsLocked();// 0x212e312cd041
	void NotifyAppReactivate();// 0x212d312cd041
	void NotifyAppHasDeactivate();// 0x212c312cd041
	void NofityCustomizeLevelLoaded();// 0x212b312cd041
	void MarkWorldInLevelLuaCall(out const WorldMarkData InWorldMarkedData);// 0x212a312cd041
	void MarkWorldInLevel(const WorldMarkData InWorldMarkedData);// 0x2129312cd041
	void MarkPointInNavMapLuaCall(out const Vector2D InMarkedPoint);// 0x2128312cd041
	void MarkPointInNavMap(const Vector2D InMarkedPoint, bool bFromWorldMark);// 0x2127312cd041
	void MarkOnWorldByMinimapPosition(int PosInTeam, const Vector2D MinimapPos);// 0x2126312cd041
	void MarkedAsAppHasReactivated();// 0x2125312cd041
	void MarkedAsAppHasDeactivated();// 0x2124312cd041
	void LuaShowUI(FString WidgetPath, FString UIName);// 0x2123312cd041
	void LuaCallInputTouch(uint32 Handle, byte Type, out const Vector2D TouchLocation);// 0x2121312cd041
	void LookUp(float Value);// 0x2120312cd041
	void LogMarkAndQuickVoice(int Type, int SubType);// 0x211f312cd041
	void KickMeOutAtDS(FString InPlayerID);// 0x211e312cd041
	void K2_ShowDamageText(float InDamage, out const HitResult InHitResult, Actor* InDamageSource, Controller* InAutonomousController, out const SolarPointDamageEvent InPointDamageEvent);// 0x211d312cd041
	bool IsThirdPersonSpectateCameraMode();// 0x211c312cd041
	bool IsSpectatingOtherPlayer();// 0x211b312cd041
	bool IsHasSkydiveAndEnd();// 0x211a312cd041
	bool IsHasCharacterAndSkin(int CharacterId, int SkinId);// 0x2119312cd041
	void InviteSkydivingFollow(SolarPlayerState* FollowerPlayerState);// 0x2118312cd041
	void InputWorldMarkReleased();// 0x2117312cd041
	void InputWorldMarkPressed();// 0x2116312cd041
	void InputVerticalJetReleased();// 0x2115312cd041
	void InputVerticalJetPressed();// 0x2114312cd041
	void InputVehicleInteractionReleased();// 0x2113312cd041
	void InputVehicleInteractionPressed();// 0x2112312cd041
	void InputUseMedicineReleased();// 0x2111312cd041
	void InputUseMedicinePressed();// 0x2110312cd041
	void InputToggleTertiaryWeapon_Checkbox();// 0x210f312cd041
	void InputToggleSecondaryWeaponReleased();// 0x210e312cd041
	void InputToggleSecondaryWeaponPressed();// 0x210d312cd041
	void InputToggleSecondaryWeapon_Checkbox();// 0x210c312cd041
	void InputTogglePrimaryWeaponReleased();// 0x210b312cd041
	void InputTogglePrimaryWeaponPressed();// 0x210a312cd041
	void InputTogglePrimaryWeapon_Checkbox();// 0x2109312cd041
	void InputTogglePickupReleased();// 0x2108312cd041
	void InputTogglePickupPressed();// 0x2107312cd041
	bool InputTestPriority3Pressed();// 0x2106312cd041
	bool InputTestPriority2Pressed();// 0x2105312cd041
	bool InputTestPriority1Released();// 0x2104312cd041
	bool InputTestPriority1Pressed();// 0x2103312cd041
	void InputSwitchToSeatTwoPressed();// 0x2102312cd041
	void InputSwitchToSeatThreePressed();// 0x2101312cd041
	void InputSwitchToSeatOnePressed();// 0x2100312cd041
	void InputSwitchToSeatFourPressed();// 0x20ff312cd041
	void InputSwitchFireModeReleased();// 0x20fe312cd041
	void InputSwitchFireModePressed();// 0x20fd312cd041
	void InputStartRepairVehicleReleased();// 0x20fc312cd041
	void InputSprintLockStart();// 0x20fb312cd041
	void InputSprintFreeTerminate();// 0x20fa312cd041
	void InputSprintFreeStart();// 0x20f9312cd041
	void InputSprintFreeReleasedOnPC();// 0x20f8312cd041
	void InputSprintFreePressedOnPC();// 0x20f7312cd041
	void InputShieldUpgradeReleased();// 0x20f6312cd041
	void InputShieldUpgradePressed();// 0x20f5312cd041
	void InputShieldUpgradeCancelReleased();// 0x20f4312cd041
	void InputShieldUpgradeCancelPressed();// 0x20f3312cd041
	void InputRoleAbilityTacticalReleased();// 0x20f2312cd041
	void InputRoleAbilityTacticalPressed();// 0x20f1312cd041
	void InputRoleAbilitySuperReleased();// 0x20f0312cd041
	void InputRoleAbilitySuperPressed();// 0x20ef312cd041
	void InputRightMouseButtonReleased();// 0x20ee312cd041
	void InputRightMouseButtonPressed();// 0x20ed312cd041
	void InputReviveSelfReleased();// 0x20ec312cd041
	void InputReloadReleased();// 0x20eb312cd041
	void InputReloadPressed();// 0x20ea312cd041
	void InputRechargeShieldReleased();// 0x20e9312cd041
	void InputRechargeShieldPressed();// 0x20e8312cd041
	void InputQuickAdsReleased();// 0x20e7312cd041
	void InputQuickAdsPressed();// 0x20e6312cd041
	void InputPSTouchpadButton(float InValueX);// 0x20e5312cd041
	void InputPickupReleased();// 0x20e4312cd041
	void InputPickupPressed();// 0x20e3312cd041
	void InputMoveRight(float InValueY);// 0x20e2312cd041
	void InputMovementYReceived(float InValueY);// 0x20e1312cd041
	void InputMovementXReceived(float InValueX);// 0x20e0312cd041
	void InputMoveForward(float InValueX);// 0x20df312cd041
	void InputMapPressed();// 0x20de312cd041
	void InputLeftFireReleased();// 0x20dd312cd041
	void InputLeftFirePressed();// 0x20dc312cd041
	void InputKeepSprintPressed();// 0x20db312cd041
	void InputJumpReleased();// 0x20da312cd041
	void InputJumpPressed();// 0x20d9312cd041
	void InputInteractPressed();// 0x20d8312cd041
	void InputHorizontalJetReleased();// 0x20d7312cd041
	void InputHorizontalJetPressed();// 0x20d6312cd041
	void InputGunsightReleased();// 0x20d5312cd041
	void InputGunsightPressed();// 0x20d4312cd041
	void InputGetOnVehicleReleased();// 0x20d3312cd041
	void InputGetOffVehicleReleased();// 0x20d2312cd041
	void InputFreeLookReleased();// 0x20d1312cd041
	void InputFreeLookPressed();// 0x20d0312cd041
	void InputFireReleased();// 0x20cf312cd041
	void InputFirePressed();// 0x20ce312cd041
	void InputEquip2Released();// 0x20cd312cd041
	void InputEquip2Pressed();// 0x20cc312cd041
	void InputEquip1Released();// 0x20cb312cd041
	void InputEquip1Pressed();// 0x20ca312cd041
	void InputEjectReleased();// 0x20c9312cd041
	void InputEjectPressed();// 0x20c8312cd041
	void InputDriveVehicleReleased();// 0x20c7312cd041
	void InputCrouchReleased();// 0x20c6312cd041
	void InputCrouchPressed();// 0x20c5312cd041
	void InputCancelVehicleAbilityReleased();// 0x20c4312cd041
	void InputBuilding();// 0x20c3312cd041
	void InputBigRechargeShieldReleased();// 0x20c2312cd041
	void InputBigRechargeShieldPressed();// 0x20c1312cd041
	void InputBackpackReleased();// 0x20c0312cd041
	void InputBackpackPressed();// 0x20bf312cd041
	void InputAltFireReleased();// 0x20be312cd041
	void InputAltFirePressed();// 0x20bd312cd041
	void InputActiveVehicleSecondAbilityReleased();// 0x20bc312cd041
	void InputActiveVehicleSecondAbilityPressed();// 0x20bb312cd041
	void InputActiveVehicleFirstAbilityReleased();// 0x20ba312cd041
	void InputActiveVehicleFirstAbilityPressed();// 0x20b9312cd041
	void InputActionSecondaryReleased();// 0x20b8312cd041
	void InputActionSecondaryPressed();// 0x20b7312cd041
	void InputActionPrimaryReleased();// 0x20b6312cd041
	void InputActionPrimaryPressed();// 0x20b5312cd041
	bool IfSolarCharacterIsDriver();// 0x20b4312cd041
	void HandleBeginSpectateRequest();// 0x20b3312cd041
	void GyroscopeTilt(Vector Tilt);// 0x20b2312cd041
	void GyroscopeRotationRate(Vector RotationRate);// 0x20b1312cd041
	SolarCharacter* GetViewportFocusedCharacter(bool bReturnPossessedCharacterIfSpectateNull);// 0x20b0312cd041
	Vector2D GetViewportCenter();// 0x20af312cd041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x20ae312cd041
	SolarSpectateInfo* GetSpectateInfo();// 0x20ad312cd041
	SolarCharacter* GetSpectatedCharacter();// 0x20ac312cd041
	SolarPlayerState* GetSolarViewPlayerState();// 0x20ab312cd041
	SolarPlayerState* GetSolarPlayerState();// 0x20aa312cd041
	SolarCharacter* GetSolarCharacter();// 0x20a9312cd041
	enum GetPlayNetStateInGame();// 0x20a8312cd041
	Rotator GetPlayerViewRotation(bool bWithoutCameraModifiers, bool bWithRotationInput);// 0x20a7312cd041
	Vector GetPlayerViewLocation(bool bWithoutCameraModifiers, bool bWithRotationInput);// 0x20a6312cd041
	PlayerStatisticsData* GetPlayerStatData();// 0x20a5312cd041
	FString GetPlayerID();// 0x20a4312cd041
	FString GetNoticeLocalText(int InNoticeID, out const <FString,FString> InNoticeParams);// 0x20a3312cd041
	byte GetMyTeamID();// 0x20a2312cd041
	byte GetMyPosInTeam();// 0x20a1312cd041
	Vector2D GetMyMarkedPointInNavMap();// 0x20a0312cd041
	int GetMultiKillNum();// 0x209f312cd041
	int GetKillNum();// 0x209e312cd041
	int GetKillingSpreesNum();// 0x209d312cd041
	bool GetIsDropAndPickUpItemOrWeaponSwitchOnValue();// 0x209c312cd041
	SolarInputModePolicyComponent* GetInputModePolicyComp();// 0x209b312cd041
	SolarInputModeDataBase GetInputMode(FName Name, out enum OutInputMode, out bool bFound);// 0x2098312cd041
	SolarCameraComponent* GetCurrentCameraComponent();// 0x2097312cd041
	void GetControlledVehiclePropertyContainer(out Object*[] OutObjects);// 0x2096312cd041
	Rotator GetCharacterViewRotation();// 0x2095312cd041
	Rotator GetCameraRotation();// 0x2094312cd041
	Vector GetCameraLocation();// 0x2093312cd041
	SolarCharacter* GetCameraFocusedCharacter();// 0x2092312cd041
	float GetCameraDefaultFOVAngle();// 0x2091312cd041
	float GetCameraCurrentFOVAngle();// 0x2090312cd041
	SolarCameraComponent* GetActiveCamera();// 0x208f312cd041
	void ForceCompleteClientBlendToSpectateTarget();// 0x208e312cd041
	void ExcludeDifferentTeam(int TeamID);// 0x208d312cd041
	void EndOBCurrentBattle();// 0x208c312cd041
	void DropPassengerNotification();// 0x208b312cd041
	void DestroyCharacterCorpse();// 0x208a312cd041
	void DebugUpdateTask();// 0x2089312cd041
	void DebugSetPlayerData();// 0x2088312cd041
	void DebugInitTask();// 0x2087312cd041
	void CustomModeShowNotice(const int InType, const int InNoticeID, class Object InClass, const float InTime, FString InText, Object* InIcon, const int InNoticeColor);// 0x2086312cd041
	void CustomAntiCheatDataExport(out const FString[] DataName, out const FString[] DataContent);// 0x2085312cd041
	void ClientSyncPlayerSelfReport(const SolarPlayerReport SelfReport, const SolarGameModeInfo GameInfo);// 0x2084312cd041
	void ClientStartReviveItemRecycleCountDown(const int CurrentTime, const int DurationTime);// 0x2083312cd041
	void ClientShowUI(FString WidgetPath, FString UIName);// 0x2082312cd041
	void ClientShowDiePage();// 0x2081312cd041
	void ClientReviveWillBeDisabledHint(const int Duration);// 0x2080312cd041
	void ClientReviveBeDisabledHint();// 0x207f312cd041
	void ClientRespondSkydivingLeaderTransferRequest(SolarPlayerState* DesiredLeaderPlayerState, bool bAgreed);// 0x207e312cd041
	void ClientRespondSkydivingFollowInvitation(SolarPlayerState* FollowerPlayerState, bool bAgreed);// 0x207d312cd041
	void ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving(SolarPlayerState* NewLeaderPlayerState, SolarPlayerState* OldLeaderPlayerState);// 0x207c312cd041
	void ClientRequestSkydivingLeaderTransfer(SolarPlayerState* RequesterPlayerState);// 0x207b312cd041
	void ClientReplacePlayerKillEffect(Actor* InSource, Actor* InTarget);// 0x207a312cd041
	void ClientReceviceDamageText(const SolarDamageText[] InSolarDamageTextDatas);// 0x2078312cd041
	void ClientPlayerGoToSettlement(const SolarPlayerReport[] Reports, const SolarGameModeInfo GameInfo, const int[] InSettlementPageIndexs, bool IsCustomRoom);// 0x2075312cd041
	void ClientNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter);// 0x2074312cd041
	void ClientNotifyCheatedPlayer(const FText OutReason);// 0x2073312cd041
	void ClientInviteSkydivingFollow(SolarPlayerState* InviterPlayerState);// 0x2072312cd041
	void ClientDoCharacterOperation(const CharacterOperationEvent ChOperationEvt);// 0x2071312cd041
	void ClientCloseUI(FString UIName);// 0x2070312cd041
	void ClientClearAudioListenerOverride();// 0x206f312cd041
	void ClientCharacterIsDead();// 0x206e312cd041
	void ClientBeginOBCurrentBattleInternal();// 0x206d312cd041
	void ClearMarkedPointInNavMapLuaCall();// 0x206c312cd041
	void ClearMarkedPointInNavMap();// 0x206b312cd041
	void ChangeVehicleVectorPropertyInternal(FString InPropertyName, float InX, float InY, float InZ);// 0x206a312cd041
	void ChangeVehicleRotatorPropertyInternal(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x2069312cd041
	void ChangeVehicleIntPropertyInternal(FString InPropertyName, int InFloat);// 0x2068312cd041
	void ChangeVehicleFloatPropertyInternal(FString InPropertyName, float InFloat);// 0x2067312cd041
	void ChangeVehicleCurvePropertyInternal(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x2066312cd041
	void ChangeVehicleBoolPropertyInternal(FString InPropertyName, bool InBool);// 0x2065312cd041
	bool CanWorldMark();// 0x2064312cd041
	bool CanSolarCharacterLaunchJetPack();// 0x2063312cd041
	bool CanSolarCharacterInput();// 0x2062312cd041
	bool CanSolarCharacterCrouch();// 0x2061312cd041
	void CancelSkydivingFollow();// 0x2060312cd041
	void BuyRescurrectionEnded();// 0x205f312cd041
	void BuildSkydivingFollowOnLeavingTeam(bool bIgnoreNotification);// 0x205e312cd041
	void BuildSkydivingFollowOnEnteringTeam();// 0x205d312cd041
	void BindDelegatesDependGameState();// 0x205c312cd041
	void BeNotifiedMarkedItemWasPickedUp(const int64 InItemInstanceId);// 0x205b312cd041
	void BeginOBCurrentBattle();// 0x205a312cd041
	void BackToLobby();// 0x2059312cd041
	void AssembleCustomAntiCheatData(SolarWeapon* ActiveWeapon, SolarVehiclePawn* BoardedVehicle);// 0x2058312cd041
	void AntiCheatDataSchedulerUpload(const FString[] DataName, const FString[] DataContent, const FixedAntiCheatData FixedData);// 0x2055312cd041
	void AddTeammateCandidate(SolarCharacter* Candidate, int TeamID);// 0x2054312cd041
	void AddRightPeekInput();// 0x2053312cd041
	void AddLeftPeekInput();// 0x2052312cd041

--------------------------------
Class: RepCountdownData
	int RepTimes;//[Offset: 0x0, Size: 0x4]
	int RepTextID;//[Offset: 0x4, Size: 0x4]
	int RepPassiveTextID;//[Offset: 0x8, Size: 0x4]
	int RepPassiveCharacterID;//[Offset: 0xc, Size: 0x4]
	float RepDuration;//[Offset: 0x10, Size: 0x4]
	float RepRemaining;//[Offset: 0x14, Size: 0x4]
	float RepAmount;//[Offset: 0x18, Size: 0x4]
	float RepStartTime;//[Offset: 0x1c, Size: 0x4]
	float RepEndTime;//[Offset: 0x20, Size: 0x4]
	int RepCancel;//[Offset: 0x24, Size: 0x4]
	float RemainingTime;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: SCMPlayerRPCComponent.ActorComponent.Object
	void ReceivedLevelLoaded(FString LevelName);// 0x4284312cd041
	void ReceivedCharacter();// 0x4283312cd041
	void ReceivedBeginLevelLoad(FString LevelName);// 0x4282312cd041

--------------------------------
Class: SolarInputManager.ActorComponent.Object
	SolarPlayerSensitivitys* SenSetting;//[Offset: 0xc8, Size: 0x8]
	enum GameSenType;//[Offset: 0xd0, Size: 0x1]
	TouchHandler TouchHandler;//[Offset: 0x108, Size: 0xf0]
	void SetTouchScaler(float InVal);// 0x49f5312cd041
	void SetNoiseThresholdFactor(float InVal);// 0x49f4312cd041
	void SetMouseScaler(Vector2D InVal);// 0x49f3312cd041
	void SetMinNoiseMultiplier(float InVal);// 0x49f2312cd041
	void SetCurveVerticalFix(Vector2D InVec);// 0x49f1312cd041
	void SetCurveVerticalFactor(Vector2D InVec);// 0x49f0312cd041
	void SetCurveHorizonFix(Vector2D InVec);// 0x49ef312cd041
	void SetCurveHorizonFactor(Vector2D InVec);// 0x49ee312cd041
	void OnSettingConfigSaved();// 0x49ed312cd041
	float GetTouchScaler();// 0x49ec312cd041
	Vector2D GetTouchOutputScale();// 0x49eb312cd041
	float GetNoiseThresholdFactor();// 0x49ea312cd041
	Vector2D GetMouseScaler();// 0x49e9312cd041
	float GetMinNoiseMultiplier();// 0x49e8312cd041
	Vector2D GetFixedOutput();// 0x49e7312cd041
	Vector2D GetDeltaMove();// 0x49e6312cd041
	Vector2D GetCurveVerticalFix();// 0x49e5312cd041
	Vector2D GetCurveVerticalFactor();// 0x49e4312cd041
	Vector2D GetCurveHorizonFix();// 0x49e3312cd041
	Vector2D GetCurveHorizonFactor();// 0x49e2312cd041
	Vector2D GetAverageDeltaMove();// 0x49e1312cd041

--------------------------------
Class: SolarPlayerSensitivitys.Object
	void InitPlayerSensitivity();// 0x4d66312cd041

--------------------------------
Class: TouchHandler.InputHandler
	CurveFloat* HorizCurve;//[Offset: 0x80, Size: 0x8]
	CurveFloat* VertCurve;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: InputHandler

--------------------------------
Class: SolarEasyAntiCheatComponent.ActorComponent.Object
	void ServerOnUnRegisterClient();// 0x470f312cd041
	void ServerOnRegisterClient(FString ProductID);// 0x470e312cd041
	void ServerOnReceiveClientNotifyMessage(uint32 DataLenBytes, FString Data);// 0x470d312cd041
	void ClientOnReceiveServerNotifyMessage(uint32 DataLenBytes, FString Data);// 0x470c312cd041
	void ClientOnActionRequired(const int ClientAction, const int ActionReason, FString Details);// 0x470b312cd041

--------------------------------
Class: SolarInputModePolicyComponent.ActorComponent.Object

--------------------------------
Class: SolarInputActionContext.Object

--------------------------------
Class: ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	Actor* CurrentFollowActor;//[Offset: 0x358, Size: 0x8]
	PlayerController* CurrentPlayerController;//[Offset: 0x360, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x368, Size: 0x8]
	Vector2D MarkPanelSize;//[Offset: 0x370, Size: 0x8]
	float MaxVisibleDis;//[Offset: 0x390, Size: 0x4]
	void SetUpdateState(bool InShouldUpdateLocation);// 0x3c64312cd041
	void InitActorMarkBaseByFixedPos(Vector Pos, PlayerController* Controller);// 0x3c63312cd041
	void InitActorMarkBase(Actor* InActor, PlayerController* Controller);// 0x3c62312cd041
	Vector GetFollowActorLocation();// 0x3c61312cd041
	float GetDistance(bool bIncludeZ);// 0x3c60312cd041
	Actor* GetCurrentFollowActor();// 0x3c5f312cd041

--------------------------------
Class: SolarUserWidget.UserWidget.Widget.Visual.Object
	enum WidgetLayerLevel;//[Offset: 0x260, Size: 0x1]
	enum WidgetScope;//[Offset: 0x261, Size: 0x1]
	enum CaptureInput;//[Offset: 0x262, Size: 0x1]
	bool bHideCursorDuringCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x263, Size: 0x1]
	int MyRoot;//[Offset: 0x264, Size: 0x4]
	FString widgetkey;//[Offset: 0x268, Size: 0x10]
	bool bIsPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bReceiveKeyMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	bool bReceiveShowMouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27a, Size: 0x1]
	bool bShowTransBlackAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27b, Size: 0x1]
	class WidgetInputManager* InputManagerClass;//[Offset: 0x280, Size: 0x8]
	WidgetInputManager* InputManager;//[Offset: 0x288, Size: 0x8]
	<FName,WidgetAnimation*> AnimationsMap;//[Offset: 0x290, Size: 0x50]
	WidgetAnimation* PlayingAnimation;//[Offset: 0x2e0, Size: 0x8]
	PlayAnimationParams[] PendingPlayAnimations;//[Offset: 0x300, Size: 0x10]
	bool WidgetTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	SolarInputActionContext* InputActionContext;//[Offset: 0x318, Size: 0x8]
	SolarUserWidget*[] AllSolarUserWidgetChilds;//[Offset: 0x330, Size: 0x10]
	void StopListeningForInputActionEx(FName ActionName, byte EventType);// 0x245f312cd041
	void ShowSelfPanelUI();// 0x245e312cd041
	void ShowMouseCursor();// 0x245d312cd041
	void SetZOrder(int ZOrder);// 0x245c312cd041
	void SetWidgetVisible(Widget* Widget, bool bVisible, bool bHitTest);// 0x245b312cd041
	void SetWidgetTickEnabled(bool bEnabled);// 0x245a312cd041
	void SetWidgetKey(FString InWidgetKey);// 0x2459312cd041
	void SetInputActionIsEnabled(FName ActionName, byte EventType, bool bInIsEnabled);// 0x2458312cd041
	void SetBlockInputForOneTick();// 0x2457312cd041
	void ReceiveTick(out const Geometry MyGeometry, float InDeltaTime);// 0x2456312cd041
	void ReceiveShow();// 0x2455312cd041
	void ReceiveHide();// 0x2454312cd041
	bool PlayAnimationByName(out const FName AnimationName, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x2453312cd041
	void PlayAnimationByExclusively(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x2452312cd041
	void OnTouchManagerInitialized();// 0x2451312cd041
	void OnSynchronizeProperties();// 0x2450312cd041
	void OnSolarUIOpened();// 0x244f312cd041
	void OnSolarUIClosed();// 0x244e312cd041
	void OnShow();// 0x244d312cd041
	void OnHide();// 0x244c312cd041
	void OnExclusivelyAnimationFinished();// 0x244b312cd041
	void OnDeinitialize();// 0x244a312cd041
	void OnBackKey(enum BackKeyType);// 0x2448312cd041
	void ListenForInputActionEx(FName ActionName, byte EventType, bool bInIsEnabled, delegate Callback);// 0x2447312cd041
	bool IsWidgetTickEnabled();// 0x2446312cd041
	bool IsSolarUserWidgetAndBindLua(Widget* InWidget);// 0x2445312cd041
	bool IsPlatformDesktop();// 0x2444312cd041
	void HideMouseCursor();// 0x2443312cd041
	FString GetWidgetKeyByPanelName(enum PanelName);// 0x2441312cd041
	FString GetWidgetKey();// 0x2440312cd041
	Vector2D[] GetTouchedLocation();// 0x243f312cd041
	Vector2D[] GetPointerLocation();// 0x243e312cd041
	SolarPlayerState* GetOwningSolarPlayerState();// 0x243d312cd041
	SolarCharacter* GetOwningSolarPlayerCharacter();// 0x243c312cd041
	WidgetAnimation* GetAnimationByName(out const FName AnimationName);// 0x243b312cd041
	Widget* FindWidgetFromName(out const FName Name);// 0x243a312cd041
	void ExecuteSolarUIShow();// 0x2439312cd041
	void ExecuteSolarUIOpened();// 0x2438312cd041
	void ExecuteSolarUIHide();// 0x2437312cd041
	void ExecuteSolarUIClosed();// 0x2436312cd041
	void ExecuteSolarUIClean();// 0x2435312cd041
	void ExecuteBindCustomControl();// 0x2434312cd041
	void CloseSelfPanelUI();// 0x2433312cd041
	SolarUserWidget*[] CacheAllSolarUserWidgetChilds();// 0x2432312cd041

--------------------------------
Class: SolarPlayerState.PlayerState.Info.Actor.Object
	delegate OnTeammatePlayerStateRepDelegate;//[Offset: 0x328, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate;//[Offset: 0x338, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInBattlePhaseDelegate;//[Offset: 0x348, Size: 0x10]
	delegate OnPlayerChangedGoldsDelegate;//[Offset: 0x358, Size: 0x10]
	int Gold;//[Offset: 0x368, Size: 0x4]
	int[] CostedGolds;//[Offset: 0x370, Size: 0x10]
	int[] ReceivedGolds;//[Offset: 0x380, Size: 0x10]
	int CharacterId;//[Offset: 0x390, Size: 0x4]
	int SkinId;//[Offset: 0x394, Size: 0x4]
	FString ClanId;//[Offset: 0x398, Size: 0x10]
	FString ClanName;//[Offset: 0x3a8, Size: 0x10]
	FString ClanShortName;//[Offset: 0x3b8, Size: 0x10]
	int BagId;//[Offset: 0x3c8, Size: 0x4]
	int CapsuleID;//[Offset: 0x3cc, Size: 0x4]
	FString SolarPlayerId;//[Offset: 0x3d0, Size: 0x10]
	FString NickName;//[Offset: 0x3e0, Size: 0x10]
	uint32 BattleVoiceId;//[Offset: 0x3f0, Size: 0x4]
	byte TeamID;//[Offset: 0x3f4, Size: 0x1]
	uint64 UserId;//[Offset: 0x3f8, Size: 0x8]
	byte PosInTeam;//[Offset: 0x400, Size: 0x1]
	FString Side;//[Offset: 0x408, Size: 0x10]
	FString Job;//[Offset: 0x418, Size: 0x10]
	int CharacterLevel;//[Offset: 0x428, Size: 0x4]
	int AvatarID;//[Offset: 0x42c, Size: 0x4]
	int AvatarFrameID;//[Offset: 0x430, Size: 0x4]
	int Gender;//[Offset: 0x434, Size: 0x4]
	int AccountLevel;//[Offset: 0x438, Size: 0x4]
	int FriendNum;//[Offset: 0x43c, Size: 0x4]
	int RoleID;//[Offset: 0x440, Size: 0x4]
	MedalInfo[] Medals;//[Offset: 0x448, Size: 0x10]
	BattleCharacterData[] AllCharacterData;//[Offset: 0x458, Size: 0x10]
	BattleCharacterData CurUsedCharacterData;//[Offset: 0x468, Size: 0x30]
	ExpRankMedalData[] AllExpRankMedalData;//[Offset: 0x498, Size: 0x10]
	LastBattleInfo LastBattleInfo;//[Offset: 0x4a8, Size: 0x1c]
	int RoleUltimateSkillCDState;//[Offset: 0x4c4, Size: 0x4]
	int[] SettlementItems;//[Offset: 0x4c8, Size: 0x10]
	SettlementParam_ExtraRewardInfo[] ExtraRewards;//[Offset: 0x4d8, Size: 0x10]
	SettlementReward[] SettlementRewards;//[Offset: 0x4e8, Size: 0x10]
	SettlementCrateReward[] CrateRewards;//[Offset: 0x4f8, Size: 0x10]
	uint32 PlayerNumber;//[Offset: 0x508, Size: 0x4]
	int[] BackpackUnLockGridNumArr;//[Offset: 0x510, Size: 0x10]
	<int,int> VehicleSkinData;//[Offset: 0x520, Size: 0x50]
	float CurrentHealth;//[Offset: 0x570, Size: 0x4]
	float MaxHealth;//[Offset: 0x574, Size: 0x4]
	ShieldInfo CurShieldInfo;//[Offset: 0x578, Size: 0x8]
	byte ReviveItemNum;//[Offset: 0x580, Size: 0x1]
	byte ReviveCountByItem;//[Offset: 0x581, Size: 0x1]
	int TalentID;//[Offset: 0x584, Size: 0x4]
	int LikeValue;//[Offset: 0x588, Size: 0x4]
	int ReceivedGiftNum;//[Offset: 0x58c, Size: 0x4]
	int SpectatorNum;//[Offset: 0x590, Size: 0x4]
	enum TalentState;//[Offset: 0x594, Size: 0x1]
	bool HasBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 0x1]
	bool HasGroupBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x596, Size: 0x1]
	Vector2D MarkedPointInNavMap;//[Offset: 0x598, Size: 0x8]
	Vector SelfLastVehicleLocation;//[Offset: 0x5a0, Size: 0xc]
	Vector TeamLastVehicleLocation;//[Offset: 0x5ac, Size: 0xc]
	byte CurrentPlayerStateInGame;//[Offset: 0x5b8, Size: 0x1]
	byte CurrentCharacterStateInGame;//[Offset: 0x5b9, Size: 0x1]
	WorldMarkData MarkedWorldData;//[Offset: 0x5c0, Size: 0x50]
	int AccountFlag;//[Offset: 0x610, Size: 0x4]
	int ClanFlag;//[Offset: 0x614, Size: 0x4]
	int[] EquippedEmotes;//[Offset: 0x618, Size: 0x10]
	FString OS;//[Offset: 0x628, Size: 0x10]
	bool bIsSameTeamWithLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	bool HasReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 0x1]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 0x1]
	float HangUpTime;//[Offset: 0x644, Size: 0x4]
	float OfflineBattleTime;//[Offset: 0x648, Size: 0x4]
	int Elo;//[Offset: 0x64c, Size: 0x4]
	int RankLevel;//[Offset: 0x650, Size: 0x4]
	int RankLevel2;//[Offset: 0x654, Size: 0x4]
	byte LobbyTeamMemberNum;//[Offset: 0x658, Size: 0x1]
	bool bTeamIDHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 0x1]
	int RepliableMessageID;//[Offset: 0x684, Size: 0x4]
	float RepliableMessageStartTime;//[Offset: 0x688, Size: 0x4]
	bool bIsOBPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	Vector CharacterLocation;//[Offset: 0x69c, Size: 0xc]
	int WarmId;//[Offset: 0x6a8, Size: 0x4]
	int WarmType;//[Offset: 0x6ac, Size: 0x4]
	bool AllowOtherJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]
	float WaitTimeBeforeEnterSpectateMode;//[Offset: 0x6b4, Size: 0x4]
	delegate OnSpectateInfoRep;//[Offset: 0x6b8, Size: 0x10]
	SolarPlayerState* KillerPlayerState;//[Offset: 0x6c8, Size: 0x8]
	SolarPlayerState* RevengePlayerState;//[Offset: 0x6d0, Size: 0x8]
	SolarSpectateInfo* SpectateInfo;//[Offset: 0x6d8, Size: 0x8]
	enum NetStateInGame;//[Offset: 0x6e0, Size: 0x1]
	bool bHasLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 0x1]
	bool bHasUpdateByServerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	SolarReplayHighlightComponent* ReplayHightlightComp;//[Offset: 0x6f8, Size: 0x8]
	int KillNum;//[Offset: 0x700, Size: 0x4]
	int AssistNum;//[Offset: 0x704, Size: 0x4]
	Vector DeathPos;//[Offset: 0x708, Size: 0xc]
	int ReconnectNum;//[Offset: 0x714, Size: 0x4]
	float MultiKillDurationTime;//[Offset: 0x728, Size: 0x4]
	float TotalReceivedDamage;//[Offset: 0x750, Size: 0x4]
	float TotalCausedDamage;//[Offset: 0x754, Size: 0x4]
	SettlementTempData SettleSyncData;//[Offset: 0x758, Size: 0xd8]
	SolarPlayerState*[] TeammatesState;//[Offset: 0x830, Size: 0x10]
	int PlayerRank;//[Offset: 0x840, Size: 0x4]
	int TeamRank;//[Offset: 0x844, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 0x1]
	bool bMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x849, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84a, Size: 0x1]
	float MvpScore;//[Offset: 0x84c, Size: 0x4]
	float KDA;//[Offset: 0x850, Size: 0x4]
	int ResurrectionTimes;//[Offset: 0x854, Size: 0x4]
	int CharacterExp;//[Offset: 0x858, Size: 0x4]
	int[] CharacterExpReason;//[Offset: 0x860, Size: 0x10]
	int AccountExp;//[Offset: 0x870, Size: 0x4]
	<int,int> WeaponExps;//[Offset: 0x878, Size: 0x50]
	int Zomborg;//[Offset: 0x8c8, Size: 0x4]
	int ZomborgExtra;//[Offset: 0x8cc, Size: 0x4]
	int[] StrategyConditionIDs;//[Offset: 0x8d0, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x8e0, Size: 0x4]
	enum PlayerOutPath;//[Offset: 0x8e6, Size: 0x1]
	int[] UsedCharacterIDs;//[Offset: 0x8e8, Size: 0x10]
	bool bHasSettled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 0x1]
	bool isPlayerBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f9, Size: 0x1]
	int InteractValue;//[Offset: 0x8fc, Size: 0x4]
	float LastInteractTime;//[Offset: 0x900, Size: 0x4]
	float DamageFactor;//[Offset: 0x904, Size: 0x4]
	float VehicleProbability;//[Offset: 0x908, Size: 0x4]
	bool bIsTimeoutPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90c, Size: 0x1]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90d, Size: 0x1]
	ExposeLocationMap ExposeLocationMap;//[Offset: 0x928, Size: 0x58]
	SolarPlayerState*[] ExposeLocationArray;//[Offset: 0x980, Size: 0x10]
	Vector PlayerLocation;//[Offset: 0x990, Size: 0xc]
	SolarPlayerState* ExposeTo;//[Offset: 0x9a0, Size: 0x8]
	byte SkydivingLeaderPosInTeam;//[Offset: 0x9b0, Size: 0x1]
	byte SkydivingFollowFormationPos;//[Offset: 0x9b1, Size: 0x1]
	enum SkydivingState;//[Offset: 0x9b2, Size: 0x1]
	SolarAchievementComponent* AchievementComponent;//[Offset: 0x9b8, Size: 0x8]
	int[] PreCompletedAchievementIDs;//[Offset: 0x9c8, Size: 0x10]
	int PlayerLevel;//[Offset: 0x9d8, Size: 0x4]
	int PlayerExperience;//[Offset: 0x9dc, Size: 0x4]
	SpatializeInfoTrack* TrackInfo;//[Offset: 0x9f8, Size: 0x8]
	float TrackMaxRevealDistance;//[Offset: 0xa00, Size: 0x4]
	enum AppLifetimeState;//[Offset: 0xa04, Size: 0x1]
	int TailFlameID;//[Offset: 0xa08, Size: 0x4]
	bool WillFollowMovementOfSkydivingLeader();// 0x1c01312cd041
	void UpgradePlayerLevel(int LevelAdded);// 0x1c00312cd041
	void UpdateCurUseCharacterData(int InCharacterId);// 0x1bff312cd041
	void UpdateAICharacterDataList(out const BattleCharacterData InCharacterData);// 0x1bfd312cd041
	void SynchronizePlayerStateInGame(enum InEPlayerStateInGame, bool InIfOrNot);// 0x1bfc312cd041
	void SynchronizeCharacterStateInGame(enum InECharacterStateInGame, bool InIfOrNot);// 0x1bfb312cd041
	void StatVehicleDriveTypeLuaCall(int DriveType);// 0x1bfa312cd041
	void StatVehicleDriveType(int DriveType);// 0x1bf9312cd041
	void ShowTeammatesHUD(out const SolarPlayerState*[] TeammateStates, SolarPlayerState* InSpectateTargetPlayerState);// 0x1bf8312cd041
	void SetRoleUltimateSkillCDState(const int NewState);// 0x1bf7312cd041
	void SetRoleID(const int InRoleID);// 0x1bf6312cd041
	void SetPlayerNetStateInGame(enum InPlayerNetStateInGame);// 0x1bf5312cd041
	void SetIsTimeoutPlayer(const bool InValue);// 0x1bf4312cd041
	void SetIsSameTeamWithLocalPlayer(bool bIsSameTeam);// 0x1bf3312cd041
	void SetIsPlayerBattleEnd(bool bPlayerBattleEnd);// 0x1bf2312cd041
	void ServerUnexposeLocationToOtherOnce(SolarPlayerState* OtherPS);// 0x1bf1312cd041
	void ServerUnexposeLocationToOther(SolarPlayerState* OtherPS);// 0x1bf0312cd041
	void ServerExposeLocationToOther(SolarPlayerState* OtherPS);// 0x1bef312cd041
	void ServerChangeRoleID(const int InRoleID);// 0x1bee312cd041
	void ReviseWeaponExp(int weaponid, int WeaponExp, int CurLevel, int CurExp);// 0x1bed312cd041
	void ReceiveTeamIdReplicated();// 0x1bec312cd041
	void ReceiveTalentStateSet(enum InState);// 0x1bea312cd041
	void ReceiveTalentIDReplication(enum RepType, PlayerState* ClientOwnerPS);// 0x1be9312cd041
	void ReceiveSideReplicatedAfter();// 0x1be8312cd041
	void ReceivePostInitializeComponents();// 0x1be7312cd041
	bool ReceiveGold(const int InReceivedGold, const bool NeedSyncToServer, const bool NeedSyncToDS);// 0x1be6312cd041
	void ReceiveClientInitialize(Controller* C);// 0x1be5312cd041
	bool PlayerIsResurrecting();// 0x1be4312cd041
	bool PlayerHasLogin();// 0x1be3312cd041
	bool PlayerCanRebirthByReviveItem();// 0x1be2312cd041
	bool PlayerCanRebirthByBuyResurrection();// 0x1be1312cd041
	bool PlayerCanRebirthByAllMeans();// 0x1be0312cd041
	bool PlayerCanRebirthBlueprint();// 0x1bdf312cd041
	bool PlayerCanRebirth();// 0x1bde312cd041
	bool PlayerCanBuyRescue();// 0x1bdd312cd041
	void OnUpdatedPlayerStateLoginData();// 0x1bdc312cd041
	void OnTeammatePlayerStateRepDelegate__DelegateSignature();// 0x1bdb312cd041
	void OnTeammatePlayerStateRemovedDelegate__DelegateSignature(out const byte InPosInTeam, bool InIsLastOne);// 0x1bda312cd041
	void OnStopReceiveExposedLocation(SolarPlayerState* OtherPS);// 0x1bd9312cd041
	void OnStartResurrectProgress(const int InTextId, const float InDuration, const float InRemaining, const bool bShowCancel);// 0x1bd8312cd041
	void OnSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x1bd7312cd041
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1bd6312cd041
	void OnRequestStartResurrect(DeathTreasureBox* InDeatbox);// 0x1bd5312cd041
	void OnRequestCancelResurrect(DeathTreasureBox* InDeatbox);// 0x1bd4312cd041
	void OnReplayRecordingStarted();// 0x1bd3312cd041
	void OnRep_UserId();// 0x1bd2312cd041
	void OnRep_TotalReceivedDamage();// 0x1bd1312cd041
	void OnRep_TotalCausedDamage();// 0x1bd0312cd041
	void OnRep_TeammatesState();// 0x1bcf312cd041
	void OnRep_TeamLastVehicleLocation();// 0x1bce312cd041
	void OnRep_TeamId();// 0x1bcd312cd041
	void OnRep_TalentID();// 0x1bcc312cd041
	void OnRep_TailFlameId();// 0x1bcb312cd041
	void OnRep_SpectateInfo();// 0x1bca312cd041
	void OnRep_SkydivingState();// 0x1bc9312cd041
	void OnRep_SkydivingLeaderPosInTeam();// 0x1bc8312cd041
	void OnRep_SkinId();// 0x1bc7312cd041
	void OnRep_Side(FString OldSide);// 0x1bc6312cd041
	void OnRep_SelfLastVehicleLocation();// 0x1bc5312cd041
	void OnRep_RoleUltimateSkillCDState();// 0x1bc4312cd041
	void OnRep_RoleID();// 0x1bc3312cd041
	void OnRep_ReviveItemNum();// 0x1bc2312cd041
	void OnRep_ReviveCountByItem();// 0x1bc1312cd041
	void OnRep_RepliableMsg();// 0x1bc0312cd041
	void OnRep_PosInTeam(out const byte InLastPosInTeam);// 0x1bbf312cd041
	void OnRep_PlayerLocation();// 0x1bbe312cd041
	void OnRep_PlayerLevel();// 0x1bbd312cd041
	void OnRep_PlayerExp();// 0x1bbc312cd041
	void OnRep_NickName(FString OldNickName);// 0x1bbb312cd041
	void OnRep_NetStateInGame();// 0x1bba312cd041
	void OnRep_MaxHealth();// 0x1bb9312cd041
	void OnRep_MarkedWorldData();// 0x1bb8312cd041
	void OnRep_MarkedPointInNavMap();// 0x1bb7312cd041
	void OnRep_KillNum();// 0x1bb6312cd041
	void OnRep_Job();// 0x1bb5312cd041
	void OnRep_Gold();// 0x1bb4312cd041
	void OnRep_ExposeLocationArray();// 0x1bb3312cd041
	void OnRep_CurShieldInfo(out const ShieldInfo InLastShieldInfo);// 0x1bb1312cd041
	void OnRep_CurrentPlayerStateInGame(out const byte InLastPlayerStateInGame);// 0x1bb0312cd041
	void OnRep_CurrentHealth();// 0x1baf312cd041
	void OnRep_CurrentCharacterStateInGame(out const byte InLastCharacterStateInGame);// 0x1bae312cd041
	void OnRep_ClanId();// 0x1bad312cd041
	void OnRep_ClanFlag();// 0x1bac312cd041
	void OnRep_CharacterId();// 0x1bab312cd041
	void OnRep_BattleVoiceId();// 0x1baa312cd041
	void OnRep_BagId();// 0x1ba9312cd041
	void OnRep_BackpackUnLockGridNumArr();// 0x1ba8312cd041
	void OnRep_AccountFlag();// 0x1ba7312cd041
	void OnRefreshReviveInfo();// 0x1ba6312cd041
	void OnReceiveExposedLocation(SolarPlayerState* OtherPS, out const Vector Location);// 0x1ba5312cd041
	FString OnPlayerUpgrade(int NewLevel, bool bFromServer);// 0x1ba4312cd041
	void OnPlayerUpdateStatData(enum InType);// 0x1ba3312cd041
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x1ba2312cd041
	void OnPlayerChangedGolds(enum ChangedGoldType, int CostGoldNum, enum CostResult);// 0x1ba1312cd041
	void OnOtherPlayerStopSpectateMyTeam(SolarSpectateInfo* InSpectateInfo);// 0x1ba0312cd041
	void OnOtherPlayerStopSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x1b9f312cd041
	void OnOtherPlayerBeginSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x1b9e312cd041
	void OnDamageChanged__DelegateSignature(float Damage);// 0x1b9d312cd041
	void OnClientSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x1b9c312cd041
	void OnCancelResurrectProgress(const int InTextId);// 0x1b9b312cd041
	void NotifyUpdateTeamMateLevelUI();// 0x1b9a312cd041
	void NotifyAddExperience(int ExpAdded);// 0x1b99312cd041
	bool NeedPerformSpectateInfoOnSimulate();// 0x1b98312cd041
	int LuaGetExpFromWeaponImplementation(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x1b97312cd041
	bool IsWaitingLogin();// 0x1b96312cd041
	bool IsUsingClanForFlag();// 0x1b95312cd041
	bool IsUnfollowShortcutEnabled();// 0x1b94312cd041
	bool IsTimeOutPlayer();// 0x1b93312cd041
	bool IsTeammateWith(const SolarPlayerState* Other);// 0x1b92312cd041
	bool IsSpectatingOtherPlayer();// 0x1b91312cd041
	bool IsSkydivingLeader();// 0x1b90312cd041
	bool IsSkydivingCompleted();// 0x1b8f312cd041
	bool IsSkydiving();// 0x1b8e312cd041
	bool IsSameTeamWithReferToPlayer();// 0x1b8d312cd041
	bool IsSameTeamWithLocalPlayer();// 0x1b8c312cd041
	bool IsReconnecting();// 0x1b8b312cd041
	bool IsPreStartSkydiving();// 0x1b8a312cd041
	bool IsPlayerWaitingForTeammatesHelp();// 0x1b89312cd041
	bool IsPlayerTeam();// 0x1b88312cd041
	bool IsPlayerOnline();// 0x1b87312cd041
	bool IsPlayerOffline();// 0x1b86312cd041
	bool IsPlayer();// 0x1b85312cd041
	bool IsOutBySelf();// 0x1b84312cd041
	bool IsOfflinePlayer();// 0x1b83312cd041
	bool IsOBPlayer();// 0x1b82312cd041
	bool IsMySkydivingLeader(int LeaderPosInTeam);// 0x1b81312cd041
	bool IsMVP();// 0x1b80312cd041
	bool IsMaxLevelInGame();// 0x1b7f312cd041
	bool IsLocalPlayerSpectatingMe();// 0x1b7e312cd041
	bool IsLocalPlayerCameraFocusingMe();// 0x1b7d312cd041
	bool IsKickOutByServer();// 0x1b7c312cd041
	bool IsBuyingResurrection();// 0x1b7b312cd041
	bool IsBeingSpectated();// 0x1b7a312cd041
	bool IsAIPlayer();// 0x1b79312cd041
	void IncreaseReviveCount();// 0x1b78312cd041
	void HideTeammatesHUD(out const SolarPlayerState*[] TeammateStates);// 0x1b77312cd041
	bool HasSkydivingLeader();// 0x1b76312cd041
	bool HasSettled();// 0x1b75312cd041
	int GetWeaponSettlmentExp(int weaponid);// 0x1b74312cd041
	int GetVehicleSkinID(int VehicleID);// 0x1b73312cd041
	FString GetUserID();// 0x1b72312cd041
	int[] GetUsableTailFlameIds();// 0x1b71312cd041
	void GetUsableSkinsForCharacter(const int InCharacterId, out int[] Result, out bool bCharacterUsable);// 0x1b70312cd041
	int[] GetUsableJetpackIds();// 0x1b6f312cd041
	float GetTotalReceivedDamage();// 0x1b6e312cd041
	float GetTotalCausedDamage();// 0x1b6d312cd041
	void GetTeammatePlayers(bool bIncludingSelf, out SolarPlayerState*[] OutTeammates);// 0x1b6c312cd041
	SolarPlayerState* GetTeammatePlayerByPosInTeam(int InPosInTeam);// 0x1b6b312cd041
	SolarGameModeStatisticsComponent* GetStatComponent();// 0x1b6a312cd041
	SolarSpectateInfo* GetSpectateTargetSpectateInfo();// 0x1b69312cd041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x1b68312cd041
	SolarCharacter* GetSpectateTargetCharacter();// 0x1b67312cd041
	SolarSpectateInfo* GetSpectateInfo();// 0x1b66312cd041
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x1b65312cd041
	SolarPlayerController* GetSolarPlayerController();// 0x1b64312cd041
	SolarCharacter* GetSolarCharacter();// 0x1b63312cd041
	SolarCharacter* GetPossessedCharacter();// 0x1b62312cd041
	PlayerStatisticsData* GetPlayerStatData();// 0x1b61312cd041
	enum GetPlayerNetState();// 0x1b5f312cd041
	FString GetPlayerNameWithoutUID();// 0x1b5e312cd041
	void GetNotSettlementItems(out SolarItemData[] Items);// 0x1b5d312cd041
	MedalInfo[] GetMedalInfo();// 0x1b5b312cd041
	int GetMaxShieldMatCountToDeathbox();// 0x1b5a312cd041
	bool GetIsPlayerBattleEnd();// 0x1b59312cd041
	float GetExpSettleModePunishRatio();// 0x1b58312cd041
	int GetExpItemCount(const int InLevelGap);// 0x1b57312cd041
	int GetExpByBehavior(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x1b56312cd041
	int GetDriveVehicleID();// 0x1b55312cd041
	Vector GetDeathBoxLocation();// 0x1b54312cd041
	float GetCurrentTalentCDDuration();// 0x1b53312cd041
	float GetCurrentTalentActiveDuration();// 0x1b52312cd041
	void GetCurrentSkinForCharacter(const int InCharacterId, out bool bCharacterUsable, out int OutSkinId);// 0x1b51312cd041
	Vector GetCharacterLocation();// 0x1b50312cd041
	void GetCanSettlementItems(out int[] Items);// 0x1b4f312cd041
	FString[] GetBuyResurrectionSavedTeammateIDArr();// 0x1b4e312cd041
	int[] GetBuyResurrectionSavedTeammateBonusArr();// 0x1b4d312cd041
	bool CostGold(const int InCostedGold, const bool NeedSyncToServer);// 0x1b4c312cd041
	void ClientNotifyKillNumChanged(const int KillNumber, const int SpreesNum);// 0x1b4b312cd041
	void ClearTeammatesMark();// 0x1b4a312cd041
	bool CheckIfTeamLastVehicleLocationValid();// 0x1b49312cd041
	bool CheckIfTeamIdValid();// 0x1b48312cd041
	bool CheckIfSelfLastVehicleLocationValid();// 0x1b47312cd041
	bool CheckIfPosInTeamValid();// 0x1b46312cd041
	bool CheckIfMarkedPointInNavMapValid();// 0x1b45312cd041
	bool CheckIfInactive();// 0x1b44312cd041
	bool CheckIfDataValid();// 0x1b43312cd041
	bool CheckIfBeInSpecifiedPlayerState(enum InEPlayerStateInGame);// 0x1b41312cd041
	bool CheckIfBeInSpecifiedCharacterState(enum InECharacterStateInGame);// 0x1b3f312cd041
	bool CheckIfBattleVoiceIdValid();// 0x1b3e312cd041
	bool CheckGoldIsEnough(const int InCostedGold);// 0x1b3d312cd041
	void ChangeTailFlameId(int InTailFlameId);// 0x1b3c312cd041
	void ChangeBagById(int InBagId);// 0x1b3b312cd041
	bool CanReviveItemPutInDeathBox();// 0x1b3a312cd041
	bool CanAcceptSkydivingLeaderTransferRequest(const SolarPlayerState* RequesterPlayerState);// 0x1b39312cd041
	bool CanAcceptSkydivingFollowRequest(const SolarPlayerState* RequesterPlayerState);// 0x1b38312cd041
	bool CanAcceptSkydivingFollowInvitation(const SolarPlayerState* InviterPlayerState);// 0x1b37312cd041
	int CalculateZomborg();// 0x1b36312cd041
	float CalculateCharacterExp();// 0x1b35312cd041
	float CalculateAccountExp();// 0x1b34312cd041
	void AssignReplaceTeamPosBySide(FString InSide);// 0x1b33312cd041
	void AssignPosInTeamBySide();// 0x1b32312cd041
	void AssignPosInTeam();// 0x1b31312cd041
	void AddExperience(int InExp, enum InType);// 0x1b2f312cd041

--------------------------------
Class: MedalInfo
	int MedalID;//[Offset: 0x0, Size: 0x4]
	int MedalType;//[Offset: 0x4, Size: 0x4]
	int MedalPos;//[Offset: 0x8, Size: 0x4]
	int MedalLv;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BattleCharacterData
	int CharacterId;//[Offset: 0x0, Size: 0x4]
	int SkinId;//[Offset: 0x4, Size: 0x4]
	int CharacterLevel;//[Offset: 0x8, Size: 0x4]
	int TalentID;//[Offset: 0xc, Size: 0x4]
	int UseTimes;//[Offset: 0x10, Size: 0x4]
	int CardPose;//[Offset: 0x14, Size: 0x4]
	int Cardbackground;//[Offset: 0x18, Size: 0x4]
	int CharacterExp;//[Offset: 0x1c, Size: 0x4]
	int Title;//[Offset: 0x20, Size: 0x4]
	int64 Expired;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ExpRankMedalData
	FString Area;//[Offset: 0x0, Size: 0x10]
	FString Country;//[Offset: 0x10, Size: 0x10]
	int Rank;//[Offset: 0x20, Size: 0x4]
	int CharacterId;//[Offset: 0x24, Size: 0x4]
	int CharacterType;//[Offset: 0x28, Size: 0x4]
	int RankScore;//[Offset: 0x2c, Size: 0x4]
	int RankType;//[Offset: 0x30, Size: 0x4]
	int AutoID;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: LastBattleInfo
	float MvpScore;//[Offset: 0x0, Size: 0x4]
	int KillNum;//[Offset: 0x4, Size: 0x4]
	int HitDown;//[Offset: 0x8, Size: 0x4]
	int AssistNum;//[Offset: 0xc, Size: 0x4]
	int RescueNum;//[Offset: 0x10, Size: 0x4]
	int AliveTime;//[Offset: 0x14, Size: 0x4]
	int CauseDamage;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SettlementParam_ExtraRewardInfo
	int TextID;//[Offset: 0x0, Size: 0x4]
	FString LocVariable;//[Offset: 0x8, Size: 0x10]
	FString Content;//[Offset: 0x18, Size: 0x10]
	FString ItemList;//[Offset: 0x28, Size: 0x10]
	int Order;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SettlementReward
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Amount;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SettlementCrateReward
	int64 crateID;//[Offset: 0x0, Size: 0x8]
	SettlementReward[] Items;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ShieldInfo
	int ShieldID;//[Offset: 0x0, Size: 0x4]
	float CurValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WorldMarkData
	Vector WorldPos;//[Offset: 0x0, Size: 0xc]
	Vector2D ScreenCoordinate;//[Offset: 0xc, Size: 0x8]
	enum Type;//[Offset: 0x14, Size: 0x1]
	int ItemID;//[Offset: 0x18, Size: 0x4]
	int64 ItemInstanceId;//[Offset: 0x20, Size: 0x8]
	int NameLocID;//[Offset: 0x28, Size: 0x4]
	FString IconImg;//[Offset: 0x30, Size: 0x10]
	int WeaponLevel;//[Offset: 0x40, Size: 0x4]
	enum InteractableType;//[Offset: 0x44, Size: 0x1]
	int OuterBoxThisID;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: SolarSpectateInfo.Actor.Object
	delegate OnBeginUpdateSpectateInfo;//[Offset: 0x228, Size: 0x10]
	delegate OnStopUpdateSpectateInfo;//[Offset: 0x238, Size: 0x10]
	delegate OnOtherPlayerBeginSpectateMe;//[Offset: 0x248, Size: 0x10]
	delegate OnOtherPlayerStopSpectateMe;//[Offset: 0x258, Size: 0x10]
	delegate OnBeforeSpectateTargetChange;//[Offset: 0x268, Size: 0x10]
	delegate OnSpectateTargetChanged;//[Offset: 0x278, Size: 0x10]
	delegate OnSpectatePhaseChanged;//[Offset: 0x288, Size: 0x10]
	delegate OnSwitchSpectateTargetFailed;//[Offset: 0x298, Size: 0x10]
	delegate OnSpectatorOfMyTargetChanged;//[Offset: 0x2a8, Size: 0x10]
	delegate OnSpectateCharacterOfMyTargetReadied;//[Offset: 0x2b8, Size: 0x10]
	SpectatingOthersInfo SpectatingOthersInfo;//[Offset: 0x428, Size: 0x68]
	SolarReplayManager* ReplayManager;//[Offset: 0x4e0, Size: 0x8]
	SpectateConditions SpectateConditions;//[Offset: 0x4f0, Size: 0x20]
	enum SpectatePhase;//[Offset: 0x510, Size: 0x1]
	GiftSenderInfo[] SendGiftPlayerInfo;//[Offset: 0x590, Size: 0x10]
	InteractiveTaskStatus TaskStatus;//[Offset: 0x5a0, Size: 0x78]
	DataTable* InteractiveTaskTable;//[Offset: 0x618, Size: 0x8]
	FString TaskTablePath;//[Offset: 0x620, Size: 0x10]
	Rotator PlayerCameraRotation;//[Offset: 0x630, Size: 0xc]
	ReplicateItemData[] CharacterBackpackItems;//[Offset: 0x640, Size: 0x10]
	ReplicateMaxPileData[] CharacterBackpackItemMaxPiles;//[Offset: 0x650, Size: 0x10]
	float CharacterVJetChargeTime;//[Offset: 0x660, Size: 0x4]
	int CharacterVJetTotalTimes;//[Offset: 0x664, Size: 0x4]
	int CharacterVJetRestTimes;//[Offset: 0x668, Size: 0x4]
	int CharacterVJetModuleLevel;//[Offset: 0x66c, Size: 0x4]
	float CharacterVJetStartChargeTime;//[Offset: 0x670, Size: 0x4]
	float CharacterHJetChargeTime;//[Offset: 0x674, Size: 0x4]
	int CharacterHJetTotalTimes;//[Offset: 0x678, Size: 0x4]
	int CharacterHJetRestTimes;//[Offset: 0x67c, Size: 0x4]
	int CharacterHJetModuleLevel;//[Offset: 0x680, Size: 0x4]
	float CharacterHJetStartChargeTime;//[Offset: 0x684, Size: 0x4]
	CharacterRoleAbilityInfo[] CharacterRoleAbilitiesInfo;//[Offset: 0x688, Size: 0x10]
	RepCountdownData SpectateCountdownData;//[Offset: 0x698, Size: 0x2c]
	BattleUpgradeEffectParamData[] BattleUpgradeEffectData;//[Offset: 0x6c8, Size: 0x10]
	int ExtraARMag;//[Offset: 0x6d8, Size: 0x4]
	int ExtraSGMag;//[Offset: 0x6dc, Size: 0x4]
	bool bExposedByRadar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e1, Size: 0x1]
	void SetSpectateTargetForPlayingReplay(SolarPlayerState* TargetPlayerState);// 0x1b16312cd041
	void ServerStopSpectateOtherPlayer_Internal();// 0x1b15312cd041
	void ServerStopSpectateOtherPlayer();// 0x1b14312cd041
	void ServerSpectatePreviousPlayer();// 0x1b13312cd041
	void ServerSpectateNextPlayer();// 0x1b12312cd041
	void ServerSetSpectateConditions_Internal(const SpectateConditions InSpectateConditions);// 0x1b11312cd041
	void ServerSetSpectateConditions(out const SpectateConditions InSpectateConditions);// 0x1b10312cd041
	void ServerSetPlayerCameraRotation(const Rotator Rotation);// 0x1b0f312cd041
	void ServerSendGiftAction(const int GiftID, const int Num);// 0x1b0e312cd041
	void ServerRequestSendTask(int InTaskID);// 0x1b0d312cd041
	void ServerRequestIncreaseTargetTaskLevel();// 0x1b0c312cd041
	void ServerRequestAvailableTask();// 0x1b0b312cd041
	void ServerChangeLikeValue(const int Value, const int AddInteractValue, enum ActionType);// 0x1b0a312cd041
	void ServerBeginSpectateOtherPlayer_Internal();// 0x1b09312cd041
	void ServerBeginSpectateOtherPlayer();// 0x1b08312cd041
	bool SendTask(int InTaskID);// 0x1b07312cd041
	void SendGift(const int GiftID, const int Num);// 0x1b06312cd041
	void RequestSendTask(int InTaskID);// 0x1b05312cd041
	void RequestIncreaseTargetTaskLevel();// 0x1b04312cd041
	void RequestAvailableTask();// 0x1b03312cd041
	void OnTargetSpecInfoSetToItsPlayerState(SolarSpectateInfo* TargetSpecInfo);// 0x1b02312cd041
	void OnSwitchSpectateTargetFailed__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1b01312cd041
	void OnStopUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1b00312cd041
	void OnStopRecordingReplay();// 0x1aff312cd041
	void OnStartRecordingReplay();// 0x1afe312cd041
	void OnSpectatorOfMyTargetChanged__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1afd312cd041
	void OnSpectateTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x1afc312cd041
	void OnSpectatePhaseChanged__DelegateSignature(enum CurrentPhase);// 0x1afb312cd041
	void OnSpectateCharacterOfMyTargetReadied__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1afa312cd041
	void OnRep_TaskStatus();// 0x1af9312cd041
	void OnRep_SpectatePhase();// 0x1af8312cd041
	void OnRep_SpectateCountdownData();// 0x1af7312cd041
	void OnRep_ExposedByRadar();// 0x1af6312cd041
	void OnRep_CharacterVJetTotalTimes();// 0x1af5312cd041
	void OnRep_CharacterVJetRestTimes();// 0x1af4312cd041
	void OnRep_CharacterVJetModuleLevel();// 0x1af3312cd041
	void OnRep_CharacterRoleAbilitiesInfo();// 0x1af2312cd041
	void OnRep_CharacterHJetTotalTimes();// 0x1af1312cd041
	void OnRep_CharacterHJetRestTimes();// 0x1af0312cd041
	void OnRep_CharacterHJetModuleLevel();// 0x1aef312cd041
	void OnRep_CharacterBackpackItems();// 0x1aee312cd041
	void OnRep_BattleUpgradeEffectData();// 0x1aed312cd041
	void OnOtherPlayerStopSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x1aec312cd041
	void OnOtherPlayerBeginSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x1aeb312cd041
	void OnOpenAirBoxNum(enum InStatType);// 0x1aea312cd041
	void OnLikeActionCalled(const int Value, const int AddInteractValue, enum ActionType);// 0x1ae9312cd041
	void OnIncreaseKillNumWithWeaponType(enum InStatType, int InWeaponID);// 0x1ae8312cd041
	void OnIncreaseKillNumWithPunch(enum InStatType);// 0x1ae7312cd041
	void OnIncreaseKillNumWithAnyVehicle(enum InStatType);// 0x1ae6312cd041
	void OnGiftActionCalled(const int GiftID, const int Num);// 0x1ae5312cd041
	void OnCurrentPlayerCountChanged();// 0x1ae4312cd041
	void OnBeginUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1ae3312cd041
	void OnBeforeSpectateTargetChange__DelegateSignature(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x1ae2312cd041
	void OnAvailableAirDropsNumChanged();// 0x1ae1312cd041
	bool NeedUpdateSpectateInfo();// 0x1ae0312cd041
	bool IsSpectatingOtherPlayer();// 0x1adf312cd041
	bool IsRecordingReplay();// 0x1ade312cd041
	bool IsLocalPlayerSpectatingMe();// 0x1add312cd041
	bool IsLocalPlayerCameraFocusingMe();// 0x1adc312cd041
	bool IsBeingSpectated();// 0x1adb312cd041
	bool IncreaseTaskLevel(SolarPlayerState* SendPlayer);// 0x1ada312cd041
	<SolarPlayerState*> GetSpectatorsOfMyTarget();// 0x1ad9312cd041
	<SolarPlayerState*> GetSpectatingMePlayerStates();// 0x1ad8312cd041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x1ad7312cd041
	SolarCharacter* GetSpectateTargetCharacter();// 0x1ad6312cd041
	void GetSpectateReportInfo(out SpectateReportInfo SpectateReportInfo, bool HasNextTarget);// 0x1ad4312cd041
	SolarSpectateInfo* GetSpectateInfoOfMyTarget();// 0x1ad3312cd041
	SpectateConditions GetSpectateConditions();// 0x1ad0312cd041
	SolarPlayerState* GetSolarPlayerState();// 0x1acf312cd041
	bool GetInteractiveTaskConfigByID(int InTaskID, out InteractiveTaskConfig OutConfig);// 0x1ace312cd041
	int[] GetAvailableTaskByRandom();// 0x1acd312cd041
	void GetAllInteractiveTaskConfigFromTable(out InteractiveTaskConfig[] OutAllConfig);// 0x1ac8312cd041
	SolarPlayerState*[] GetAllAlivePlayers();// 0x1ac7312cd041
	bool CostCurrencyByTaskAction(int InTaskID, int CurTasklevel);// 0x1ac6312cd041
	void ClientSetSpectatorsOfMyTarget(const SolarPlayerState*[] SpectatorsOfMyTarget);// 0x1ac5312cd041
	void ClientSetSpectateTargetInfo(SolarPlayerState* TargetPS, SolarCharacter* TargetCharacter);// 0x1ac4312cd041
	void ClientSetServerRecording(bool bInServerRecording);// 0x1ac3312cd041
	void ClientSendSwitchSpectateTargetFailed();// 0x1ac2312cd041
	void ClientRemoveSpectatingMePlayer(SolarPlayerState* Player);// 0x1ac1312cd041
	void ClientOnReconnected(enum InSpecPhase, FString InTargetPSId, const FString[] InSpectatorsOfMyTargetId, const FString[] InSpectatingMePlayersId);// 0x1abf312cd041
	void ClientNotifyTaskActionResult(enum ActionType, int InTaskID, int CurTasklevel, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, int NowLikeValue);// 0x1abe312cd041
	void ClientNotifySelfTaskActionResult(enum ActionType, int InTaskID, int CurTasklevel, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, int NowLikeValue);// 0x1abd312cd041
	void ClientNotifySelfLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x1abc312cd041
	void ClientNotifyLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x1aba312cd041
	void ClientNotifyAvailableTaskResult(const int[] AvailableTask);// 0x1ab9312cd041
	void ClientAddSpectatingMePlayer(SolarPlayerState* Player);// 0x1ab8312cd041
	bool CheckIsCanSpectateOthers();// 0x1ab7312cd041
	bool CanISpectate(const SolarPlayerState* Target);// 0x1ab6312cd041

--------------------------------
Class: SpectatingOthersInfo

--------------------------------
Class: SpectateConditions
	bool bCanBeSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bCanBeSpectateByHostilePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanBeSpectateByFriendlyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bCanISpectateBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bCanISpectateHostilePlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float LookAtSelfDeathBoxCountDown;//[Offset: 0x8, Size: 0x4]
	enum[] FindSpectateTargetPolicy;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SolarReplayManager.Object
	bool bMeshWidgetOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	SoftObjectPath WaitingOBMap;//[Offset: 0x40, Size: 0x18]
	SoftClassPath WaitingReplayStartUIClass;//[Offset: 0x58, Size: 0x18]
	SoftClassPath OBModeSpectatorPawnClass;//[Offset: 0x70, Size: 0x18]
	SoftClassPath OBModeHUDClass;//[Offset: 0x88, Size: 0x18]
	SoftClassPath OBHeadInfoWidgetClass;//[Offset: 0xa0, Size: 0x18]
	GameplayCueTag PerspectiveCueTag;//[Offset: 0xb8, Size: 0x8]
	GameplayCueTag PerspectiveInSmokeCueTag;//[Offset: 0xc0, Size: 0x8]
	SoftObjectPath PerspectiveMaterial;//[Offset: 0xc8, Size: 0x18]
	AddMultiplePassMaterialChangeParams PerspectiveMaterialParams;//[Offset: 0xe0, Size: 0x40]
	SoftClassPath DirectorModeSpectatorPawnClass;//[Offset: 0x120, Size: 0x18]
	FName DirectorModeInputModeName;//[Offset: 0x138, Size: 0x8]
	float UpdateDistanceInterval;//[Offset: 0x140, Size: 0x4]
	float OBTeamListNearbyDistance;//[Offset: 0x144, Size: 0x4]
	float OBHeadInfoNearDistance;//[Offset: 0x148, Size: 0x4]
	float OBHeadInfoFarDistance;//[Offset: 0x14c, Size: 0x4]
	float OBDamageTextHideDistance;//[Offset: 0x150, Size: 0x4]
	float OBDelayTimeForTournament;//[Offset: 0x154, Size: 0x4]
	float OBLivePreDownloadTime;//[Offset: 0x158, Size: 0x4]
	float OBSkipBeginningTime;//[Offset: 0x15c, Size: 0x4]
	float[] OBPlaybackSpeedList;//[Offset: 0x160, Size: 0x10]
	byte OBPlaybackSpeedDefaultIndex;//[Offset: 0x170, Size: 0x1]
	FName OBLockCameraBindBoneName;//[Offset: 0x174, Size: 0x8]
	Vector OBLockCameraBindBoneOffset;//[Offset: 0x17c, Size: 0xc]
	float OBInitLockDistance;//[Offset: 0x188, Size: 0x4]
	float OBMinLockDistance;//[Offset: 0x18c, Size: 0x4]
	float OBMaxLockDistance;//[Offset: 0x190, Size: 0x4]
	float OBMinLockPitch;//[Offset: 0x194, Size: 0x4]
	float OBMaxLockPitch;//[Offset: 0x198, Size: 0x4]
	float OBPitchAdjustTriggerFloor;//[Offset: 0x19c, Size: 0x4]
	float OBPitchAdjustValue;//[Offset: 0x1a0, Size: 0x4]
	int ReplayCacheFileRetentionTimeInSeconds;//[Offset: 0x1a4, Size: 0x4]
	delegate OnPlayingStartedDelegate;//[Offset: 0x1b0, Size: 0x10]
	delegate OnPlayingLoadLevelsStartedDelegate;//[Offset: 0x1c0, Size: 0x10]
	delegate OnPlayingLevelLoadedDelegate;//[Offset: 0x1d0, Size: 0x10]
	delegate OnPlayingStreamReadiedDelegate;//[Offset: 0x1e0, Size: 0x10]
	delegate OnPlayingAtEndDelegate;//[Offset: 0x1f0, Size: 0x10]
	delegate OnPlayingFinishedDelegate;//[Offset: 0x200, Size: 0x10]
	delegate OnRecordingStartedDelegate;//[Offset: 0x210, Size: 0x10]
	delegate OnRecordingStartFailedDelegate;//[Offset: 0x220, Size: 0x10]
	delegate OnRecordingFinishedDelegate;//[Offset: 0x230, Size: 0x10]
	delegate OnPlayingScrubStartDelegate;//[Offset: 0x240, Size: 0x10]
	delegate OnPlayingPreScrubDelegate;//[Offset: 0x250, Size: 0x10]
	delegate OnPlayingFirstScrubFinishedDelegate;//[Offset: 0x260, Size: 0x10]
	delegate OnPlayingScrubFailedDelegate;//[Offset: 0x270, Size: 0x10]
	delegate OnPlayingScrubCharactersCreatedDelegate;//[Offset: 0x280, Size: 0x10]
	delegate OnPlayingPauseDelegate;//[Offset: 0x290, Size: 0x10]
	delegate OnPlayingContinueDelegate;//[Offset: 0x2a0, Size: 0x10]
	delegate OnPlaybackSpeedChangedDelegate;//[Offset: 0x2b0, Size: 0x10]
	UserWidget* WaitingReplayStartUI;//[Offset: 0x318, Size: 0x8]
	void TravelToLobby();// 0x19e8312cd041
	void StopRecording();// 0x19e7312cd041
	void StopPlayReplay();// 0x19e6312cd041
	void StartRecording(FString SessionName, FString UploadUrl, bool bIsToLocal);// 0x19e5312cd041
	void SpeedUpTimeDilation();// 0x19e4312cd041
	void SlowDownTimeDilation();// 0x19e3312cd041
	void SetTimeDilation(float Dilation);// 0x19e2312cd041
	void SetStartSpectateTournamentTime();// 0x19e1312cd041
	void SetRequestTryStrategy(float Interval, int Times);// 0x19e0312cd041
	void SetReadyToRecord(bool bIsReady, out const FString[] OBPlayerIDs);// 0x19df312cd041
	void SetEnableCompressForHttpReplay(bool bEnable);// 0x19de312cd041
	void RetryPlayReplayFromServer();// 0x19dd312cd041
	void RequestPlayReplayOfCurrentBattle();// 0x19dc312cd041
	void RequestPlayReplay(FString InBattleID, bool IsLive);// 0x19db312cd041
	void RequestBattleList(int PageIndex, int PageSize);// 0x19da312cd041
	void ReplayManagerNoParamDelegate__DelegateSignature();// 0x19d9312cd041
	void RecordReplayInfosOnRecordingStarted();// 0x19d8312cd041
	void ReceivePlayingStartFailed();// 0x19d7312cd041
	bool ReceivePlayingFinished(enum Reason);// 0x19d5312cd041
	void PlayReplayFromServer(FString SessionName, FString DownloadUrl);// 0x19d4312cd041
	void PlayReplayFromLocal(FString ReplayFileName);// 0x19d3312cd041
	void PlayingFinishedInternal();// 0x19d2312cd041
	void PausePlayReplay();// 0x19d1312cd041
	void OnPlayingFinished(World* World);// 0x19d0312cd041
	void OnPlayingAtEnd(World* World);// 0x19cf312cd041
	void NotifyTournamentSpectate(bool bIsInLiveReplay);// 0x19ce312cd041
	bool NotifyBackendPlayReplayFinished();// 0x19cd312cd041
	void LuaOnPostLoadMapWithWorld(FString LevelName);// 0x19cc312cd041
	void LuaBindDelegates();// 0x19cb312cd041
	bool IsTournament();// 0x19ca312cd041
	bool IsReplayLive();// 0x19c9312cd041
	bool IsRecording();// 0x19c8312cd041
	bool IsReady();// 0x19c7312cd041
	bool IsPlaying();// 0x19c6312cd041
	bool IsPausing();// 0x19c5312cd041
	bool IsLocal();// 0x19c4312cd041
	bool IsInState(enum CheckState);// 0x19c2312cd041
	void GotoTimeInSecond(float Second);// 0x19c1312cd041
	float GetTotalSessionTimeInSecond();// 0x19c0312cd041
	float GetTimeDilation();// 0x19bf312cd041
	float GetCurrentSessionTimeInSecond();// 0x19be312cd041
	FString GetCurrentSessionName();// 0x19bd312cd041
	FString GetBattleIDByIndex(int Index);// 0x19bc312cd041
	void EnterSettlementStage();// 0x19bb312cd041
	void DestroyWaitingOBStartUI();// 0x19ba312cd041
	void CreateWaitingOBStartUI();// 0x19b9312cd041
	void ContinuePlayReplay();// 0x19b8312cd041

--------------------------------
Class: GameplayCueTag
	GameplayTag GameplayCueTag;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AddMultiplePassMaterialChangeParams
	GameplayTag PriorityTag;//[Offset: 0x0, Size: 0x8]
	enum ResolveStrategy;//[Offset: 0x8, Size: 0x1]
	enum CompatibilityMode;//[Offset: 0x9, Size: 0x1]
	GameplayTagContainer SpecifiedPriorityTags;//[Offset: 0x10, Size: 0x20]
	bool bNeedMultiplePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bForceFrontFaceCull;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bIgnoreTranslucentSection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	int MainPassDepthStencilValue;//[Offset: 0x34, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GiftSenderInfo
	int Gold;//[Offset: 0x0, Size: 0x4]
	int Diamond;//[Offset: 0x4, Size: 0x4]
	FString playerName;//[Offset: 0x8, Size: 0x10]
	FString PlayerId;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: InteractiveTaskStatus
	int TaskID;//[Offset: 0x0, Size: 0x4]
	int CurLevel;//[Offset: 0x4, Size: 0x4]
	int ProgressValue;//[Offset: 0x8, Size: 0x4]
	int TargetValue;//[Offset: 0xc, Size: 0x4]
	int Param;//[Offset: 0x10, Size: 0x4]
	bool bAvailableToNxtLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	GiftSenderInfo[] TaskGiftPlayerInfo;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: ReplicateItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]
	int Slot;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ReplicateMaxPileData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int MaxPile;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CharacterRoleAbilityInfo
	bool bHasAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float StartCDTime;//[Offset: 0x4, Size: 0x4]
	float TotalCDTime;//[Offset: 0x8, Size: 0x4]
	int State;//[Offset: 0xc, Size: 0x4]
	bool bOngoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: BattleUpgradeEffectParamData
	enum EffectType;//[Offset: 0x0, Size: 0x1]
	int ParameterSum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	delegate PendingBeginPlay;//[Offset: 0x658, Size: 0x10]
	delegate OnPlayerStatePossessDelegate;//[Offset: 0x680, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x690, Size: 0x10]
	enum SolarCharacterType;//[Offset: 0x6a0, Size: 0x1]
	Vector2D CharacterCapsuleSizeOverride;//[Offset: 0x6fc, Size: 0x8]
	bool bInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x705, Size: 0x1]
	float CheckInRoomInterval;//[Offset: 0x708, Size: 0x4]
	ReconnectionParams ReconnectionParams;//[Offset: 0x732, Size: 0x1]
	SolarAnimInstance* SolarAnimInstance;//[Offset: 0x750, Size: 0x8]
	<enum,AnimInstance*> SolarAnimInstances;//[Offset: 0x758, Size: 0x50]
	int BodyHitSoundCount;//[Offset: 0x7bc, Size: 0x4]
	int BodyHitByPunchSoundCount;//[Offset: 0x7c0, Size: 0x4]
	SolarPile*[] ChargingPileQueue;//[Offset: 0x7c8, Size: 0x10]
	int64 ChargingDoneSoundCD;//[Offset: 0x7d8, Size: 0x8]
	class CameraShake* HitCameraShake;//[Offset: 0x7f0, Size: 0x8]
	float CameraShakeCD;//[Offset: 0x7f8, Size: 0x4]
	MaterialParameterCollection* CameraFOVParameterCollection;//[Offset: 0x800, Size: 0x8]
	delegate OnCharacterIDSet;//[Offset: 0x818, Size: 0x10]
	delegate OnSkinIDSet;//[Offset: 0x828, Size: 0x10]
	delegate OnCharacterSkinReset;//[Offset: 0x838, Size: 0x10]
	enum BodyScaleType;//[Offset: 0x848, Size: 0x1]
	int AssignedCharacterID;//[Offset: 0x84c, Size: 0x4]
	int AssignedSkinID;//[Offset: 0x850, Size: 0x4]
	<GameplayTag,SkeletalMeshComponent*> SkeletalOrnaments;//[Offset: 0x860, Size: 0x50]
	<GameplayTag,StaticMeshComponent*> StaticOrnaments;//[Offset: 0x8b0, Size: 0x50]
	<GameplayTag,CharacterTagListenerForMeshComp> MeshOrnamentVisibleTagDependencies;//[Offset: 0x900, Size: 0x50]
	SolarAttributeSubComponent* AttributeSubComp;//[Offset: 0xa90, Size: 0x8]
	class GameplayEffect* ExtraVJetTimesEffect;//[Offset: 0xac8, Size: 0x8]
	class GameplayEffect* VJetChargeScaleEffect;//[Offset: 0xad0, Size: 0x8]
	class GameplayEffect* ExtraHJetTimesEffect;//[Offset: 0xad8, Size: 0x8]
	class GameplayEffect* HJetChargeScaleEffect;//[Offset: 0xae0, Size: 0x8]
	GameplayTag ExtraJetTimesSetterTag;//[Offset: 0xae8, Size: 0x8]
	GameplayTag JetChargeScaleSetterTag;//[Offset: 0xaf0, Size: 0x8]
	int DeathBoxId;//[Offset: 0xaf8, Size: 0x4]
	int MonsterDeathBoxId;//[Offset: 0xafc, Size: 0x4]
	SolarBackpackActor* SolarBackpackActor;//[Offset: 0xb08, Size: 0x8]
	SolarBackpackComponent* SolarBackpackComponent;//[Offset: 0xb10, Size: 0x8]
	delegate OnBackpackItemUpdate;//[Offset: 0xb40, Size: 0x10]
	delegate OnBackpackEnergyUpdate;//[Offset: 0xb50, Size: 0x10]
	delegate OnBackpackEquipUpdate;//[Offset: 0xb60, Size: 0x10]
	delegate OnBatteryIdUpdate;//[Offset: 0xb70, Size: 0x10]
	delegate OnEnergyStateUpdate;//[Offset: 0xb80, Size: 0x10]
	delegate OnChargeInfoUpdate;//[Offset: 0xb90, Size: 0x10]
	delegate OnConsumableNumUpdated;//[Offset: 0xba0, Size: 0x10]
	delegate OnMaxEnergyUpdate;//[Offset: 0xbb0, Size: 0x10]
	delegate OnCurEnergyUpdate;//[Offset: 0xbc0, Size: 0x10]
	delegate OnBackpackWeaponPartUpdate;//[Offset: 0xbd0, Size: 0x10]
	<int,int> ShieldUpMatCostMap;//[Offset: 0xbe0, Size: 0x50]
	<int,int> MaxPileMap;//[Offset: 0xc30, Size: 0x50]
	ReplicateMaxPileData[] MaxPileArray;//[Offset: 0xc80, Size: 0x10]
	ReplicateBagGradeData[] GradeKeyBagGradeArray;//[Offset: 0xc90, Size: 0x10]
	BagRequirementData[] BagRequirementArr;//[Offset: 0xca0, Size: 0x10]
	<int,SolarItemData> IdKeyItemMap;//[Offset: 0xcb0, Size: 0x50]
	ReplicateItemData[] IdKeyItemArray;//[Offset: 0xd00, Size: 0x10]
	<enum,SolarItemData> TypeKeyItemMap;//[Offset: 0xd10, Size: 0x50]
	ReplicateItemData[] TypeKeyItemArray;//[Offset: 0xd60, Size: 0x10]
	ReplicateItemData[] WeaponDataArray;//[Offset: 0xd70, Size: 0x10]
	<int,SolarItemData> WeaponDataMap;//[Offset: 0xd80, Size: 0x50]
	int[] WeaponPartsArray;//[Offset: 0xe20, Size: 0x10]
	byte[] IgnoreScopeSlots;//[Offset: 0xe38, Size: 0x10]
	int BeReplacedWeaponItemID;//[Offset: 0xe48, Size: 0x4]
	byte EnergyState;//[Offset: 0xe4c, Size: 0x1]
	float MaxEnergyValue;//[Offset: 0xe50, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0xe54, Size: 0x4]
	float MaxExtraEnergyValue;//[Offset: 0xe58, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0xe5c, Size: 0x4]
	int EnergyModuleID;//[Offset: 0xe60, Size: 0x4]
	float AddedEnergyMax;//[Offset: 0xe64, Size: 0x4]
	int ExtraEnergyModuleID;//[Offset: 0xe68, Size: 0x4]
	float AddedExtraEnergyMax;//[Offset: 0xe6c, Size: 0x4]
	int VJetPackModuleID;//[Offset: 0xe70, Size: 0x4]
	int HJetPackModuleID;//[Offset: 0xe74, Size: 0x4]
	bool bSettingEnergyCostEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe79, Size: 0x1]
	int DayLightID;//[Offset: 0xe7c, Size: 0x4]
	float SolarChargeRatio;//[Offset: 0xe80, Size: 0x4]
	bool bReviveItemCleared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe84, Size: 0x1]
	BackpackJetPrepelInfo JetPropellingInfo;//[Offset: 0xe88, Size: 0xc]
	enum BackpackPropellingMode;//[Offset: 0xe94, Size: 0x1]
	Vector2D InputVector;//[Offset: 0xe98, Size: 0x8]
	GyroscopeConfig* GyroscopeConfig;//[Offset: 0xea0, Size: 0x8]
	byte IdleTurnType;//[Offset: 0xea8, Size: 0x1]
	Rotator CharacterLookAt;//[Offset: 0xeb0, Size: 0xc]
	float TurnSpeed;//[Offset: 0xed8, Size: 0x4]
	float TurnChangeSpeedThreshold;//[Offset: 0xedc, Size: 0x4]
	float TurnAngleThreshold;//[Offset: 0xee0, Size: 0x4]
	float SprintTolerantAngle;//[Offset: 0xee4, Size: 0x4]
	CharacterOperationEvent CharacterOperationEvt;//[Offset: 0xef0, Size: 0x10]
	delegate OnHealthUpdateDelegate;//[Offset: 0xf18, Size: 0x10]
	float PendingRegeneration;//[Offset: 0xf28, Size: 0x4]
	float DiedTime;//[Offset: 0xf2c, Size: 0x4]
	bool bIsDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf34, Size: 0x1]
	FName DissolvedDeathFXBindingSocketName;//[Offset: 0xf40, Size: 0x8]
	SolarTeamRescueComponent* SolarTeamRescueComponent;//[Offset: 0xf50, Size: 0x8]
	SolarCharacter* RescuingCharater;//[Offset: 0xf58, Size: 0x8]
	SolarUAVRescue* RescuingUAV;//[Offset: 0xf60, Size: 0x8]
	byte CurrentRescueState;//[Offset: 0xf68, Size: 0x1]
	byte LastRescueState;//[Offset: 0xf69, Size: 0x1]
	InjectorMeshPreset RescueInjectorPreset;//[Offset: 0xf80, Size: 0x50]
	int FastReliefPassiveTextID;//[Offset: 0xfd0, Size: 0x4]
	SolarCharacter* RescuedCharater;//[Offset: 0xfd4, Size: 0x8]
	float RescuedStartTime;//[Offset: 0xfdc, Size: 0x4]
	int RescueTextID;//[Offset: 0xfe0, Size: 0x4]
	StaticMeshComponent* RescueInjector;//[Offset: 0xfe8, Size: 0x8]
	float RescueTime;//[Offset: 0x1014, Size: 0x4]
	SolarPlayerWeapon*[] DeathBoxWeaponArray;//[Offset: 0x1020, Size: 0x10]
	SolarItemData[] DeathBoxArray;//[Offset: 0x1030, Size: 0x10]
	float DeathBoxEnergy;//[Offset: 0x1040, Size: 0x4]
	SolarWaterActorNew* WaterActor;//[Offset: 0x1048, Size: 0x8]
	float KneeWaterInfluencesCharacterSpeed;//[Offset: 0x1050, Size: 0x4]
	float WaterDraftDepthWhenDeathVerge;//[Offset: 0x1054, Size: 0x4]
	float ShoalWaterMaxDepth;//[Offset: 0x1058, Size: 0x4]
	float HeavyJumpWaterMinAxisVelocity;//[Offset: 0x105c, Size: 0x4]
	WaterEffectPreset SwimmingWaterEffectPreset;//[Offset: 0x1060, Size: 0x50]
	ParticleSystemComponent* SwimmingWaterEffect;//[Offset: 0x10b0, Size: 0x8]
	WaterEffectPreset HeavyJumpWaterEffectPreset;//[Offset: 0x10b8, Size: 0x50]
	ParticleSystemComponent* HeavyJumpWaterEffect;//[Offset: 0x1108, Size: 0x8]
	WaterEffectPreset[] SoftJumpWaterEffectPresets;//[Offset: 0x1110, Size: 0x10]
	ParticleSystemComponent*[] HorizontalFlyWaterEffects;//[Offset: 0x1120, Size: 0x10]
	int AirDropSkillTextID;//[Offset: 0x1134, Size: 0x4]
	FName PickupCollisionProfileName;//[Offset: 0x1138, Size: 0x8]
	SolarItemComponent* SolarItemComponent;//[Offset: 0x1140, Size: 0x8]
	SolarPickupComponent* SolarPickupComponent;//[Offset: 0x1148, Size: 0x8]
	bool bIsElectricStoreOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1150, Size: 0x1]
	float RecommendCriticalHealth;//[Offset: 0x1154, Size: 0x4]
	FString TreatFX;//[Offset: 0x1158, Size: 0x10]
	float MinHealthRatioToShowMedicineFX;//[Offset: 0x1168, Size: 0x4]
	SolarTreatmentComponent* SolarTreatmentComponent;//[Offset: 0x1170, Size: 0x8]
	int TreatmentTextID;//[Offset: 0x1178, Size: 0x4]
	enum CurrentTreatState;//[Offset: 0x117c, Size: 0x1]
	int TreatmentCount;//[Offset: 0x1180, Size: 0x4]
	int ResurrectTextID;//[Offset: 0x1184, Size: 0x4]
	DeathTreasureBox* SelfDeathBox;//[Offset: 0x1188, Size: 0x8]
	float ResurrectTime;//[Offset: 0x1190, Size: 0x4]
	delegate OnShieldRecharge;//[Offset: 0x1198, Size: 0x10]
	delegate OnShieldBreak;//[Offset: 0x11a8, Size: 0x10]
	delegate OnShowShieldHUD;//[Offset: 0x11b8, Size: 0x10]
	delegate OnShowShieldHUDItem;//[Offset: 0x11c8, Size: 0x10]
	delegate OnShieldUpFX;//[Offset: 0x11d8, Size: 0x10]
	delegate OnCurShieldValueChanged;//[Offset: 0x11e8, Size: 0x10]
	delegate OnShieldIDChanged;//[Offset: 0x11f8, Size: 0x10]
	delegate OnShieldValueLow;//[Offset: 0x1208, Size: 0x10]
	int CurrShieldId;//[Offset: 0x121c, Size: 0x4]
	int CurUniqueShieldId;//[Offset: 0x1220, Size: 0x4]
	float MaxShieldValue;//[Offset: 0x1224, Size: 0x4]
	int NextUpgradeShieldID;//[Offset: 0x1228, Size: 0x4]
	int NextUpgradeShieldEnergy;//[Offset: 0x122c, Size: 0x4]
	float CurrShieldValue;//[Offset: 0x1230, Size: 0x4]
	enum CurrShieldState;//[Offset: 0x1234, Size: 0x1]
	int CurrShieldLevel;//[Offset: 0x1238, Size: 0x4]
	bool bHasPreAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1240, Size: 0x1]
	OperatorMeshPreset ShieldOperatorPreset;//[Offset: 0x12f0, Size: 0xd0]
	StaticMeshComponent* ShieldRepairOperator;//[Offset: 0x13c0, Size: 0x8]
	StaticMesh* ShieldOperatorSM;//[Offset: 0x13c8, Size: 0x8]
	StaticMesh* ShieldOperatorBigSM;//[Offset: 0x13d0, Size: 0x8]
	ParticleSystemComponent* ShieldRepairFX;//[Offset: 0x13d8, Size: 0x8]
	ParticleSystemComponent* ShieldMultiRecoverFX;//[Offset: 0x13e0, Size: 0x8]
	ParticleSystemComponent* ShieldUpgradeBodyFX;//[Offset: 0x13e8, Size: 0x8]
	ParticleSystem*[] ShieldUpgradeBodyLoopFXTemplate;//[Offset: 0x13f0, Size: 0x10]
	ParticleSystem*[] ShieldUpgradeBodyEndFXTemplate;//[Offset: 0x1400, Size: 0x10]
	CurveFloat* ShieldOperatorExpandCurve;//[Offset: 0x1410, Size: 0x8]
	CurveFloat* ShieldOperatorNarrowCurve;//[Offset: 0x1418, Size: 0x8]
	Timeline ShieldOperatorExpandTimeline;//[Offset: 0x1420, Size: 0x98]
	Timeline ShieldOperatorNarrowTimeline;//[Offset: 0x14b8, Size: 0x98]
	FName EffectAttachBone;//[Offset: 0x1550, Size: 0x8]
	FString ShieldRechargeEffect;//[Offset: 0x1558, Size: 0x10]
	FString ShieldBrokenEffect;//[Offset: 0x1568, Size: 0x10]
	float HitEffectOffset;//[Offset: 0x1578, Size: 0x4]
	int ShieldRechargeTextID;//[Offset: 0x157c, Size: 0x4]
	int ShieldRechargePassiveTextID;//[Offset: 0x1580, Size: 0x4]
	<enum,ShieldSoundData> ShieldSounds;//[Offset: 0x1588, Size: 0x50]
	TreasureBoxOperatorMeshPreset TreasureBoxOperatorMeshPreset;//[Offset: 0x15e0, Size: 0x50]
	StaticMeshComponent* TreasureBoxOperator;//[Offset: 0x1630, Size: 0x8]
	DeathTreasureBox* CurChargingDeathBox;//[Offset: 0x1638, Size: 0x8]
	DeathTreasureBox*[] DeathBoxes;//[Offset: 0x1640, Size: 0x10]
	ParticleSystem* RevivePickupFX;//[Offset: 0x1658, Size: 0x28]
	ParticleSystem* ReviveClearFX;//[Offset: 0x1680, Size: 0x28]
	delegate OnLocalPlayerSpectateMeStatusChanged;//[Offset: 0x16a8, Size: 0x10]
	delegate OnHUDNickNameSet;//[Offset: 0x16b8, Size: 0x10]
	delegate OnHUDTeamPosSet;//[Offset: 0x16c8, Size: 0x10]
	delegate OnHUDDistanceSet;//[Offset: 0x16d8, Size: 0x10]
	delegate OnHUDDistanceDisplaySet;//[Offset: 0x16e8, Size: 0x10]
	delegate OnHUDRescueBtnActivitySet;//[Offset: 0x16f8, Size: 0x10]
	SolarTeammateHUDWidgetComponent* TeammateHUDComp;//[Offset: 0x1708, Size: 0x8]
	TeammateHUDPreset TeammateHUDPreset;//[Offset: 0x1710, Size: 0x20]
	float HUDZNomral;//[Offset: 0x1738, Size: 0x4]
	float HUDZSwim;//[Offset: 0x173c, Size: 0x4]
	float HUDZCrouch;//[Offset: 0x1740, Size: 0x4]
	float HUDZCrawl;//[Offset: 0x1744, Size: 0x4]
	float HUDChangeTime;//[Offset: 0x1748, Size: 0x4]
	float HUDChangeSpeed;//[Offset: 0x174c, Size: 0x4]
	float CheckHUDDistanceToCenter;//[Offset: 0x1750, Size: 0x4]
	float HUDTranslucentValue;//[Offset: 0x1754, Size: 0x4]
	class SolarTeammateHUDWidgetComponent* HUDComponentClass;//[Offset: 0x1758, Size: 0x8]
	RadarScanSoundDataAsset* RadarScanSoundDataAsset;//[Offset: 0x1778, Size: 0x8]
	FName RadarScannedEffectID;//[Offset: 0x1780, Size: 0x8]
	GameplayCueTag RadarDetectedEffectCueTag;//[Offset: 0x1788, Size: 0x8]
	GameplayCueTag RadarDetectedInSmokeEffectCueTag;//[Offset: 0x1790, Size: 0x8]
	SolarRadarComponent* SolarRadarComponent;//[Offset: 0x1798, Size: 0x8]
	RadarDataSpecContainer ActivatedRadars;//[Offset: 0x17a0, Size: 0x120]
	SolarRadarStation* TargetRadarStation;//[Offset: 0x18c0, Size: 0x8]
	SolarElectricShop* TargetElectricShop;//[Offset: 0x18c8, Size: 0x8]
	TimerHandle StatisticsTimerHandle;//[Offset: 0x18e0, Size: 0x8]
	SolarCharacter* CachedInstigatorCharacter;//[Offset: 0x1958, Size: 0x8]
	float DamageLimitTime;//[Offset: 0x196c, Size: 0x4]
	float ArmorReduceValue;//[Offset: 0x1970, Size: 0x4]
	float HeadHitValue;//[Offset: 0x1974, Size: 0x4]
	delegate OnTakeDamageDelegate;//[Offset: 0x1978, Size: 0x10]
	int InstigatorCharacterWeaponItemID;//[Offset: 0x199c, Size: 0x4]
	CriticalHitInfo[] CriticalHits;//[Offset: 0x19a0, Size: 0x10]
	float DamagingDuration;//[Offset: 0x19d0, Size: 0x4]
	float DefaultHitTraceLifetime;//[Offset: 0x19e8, Size: 0x4]
	CurveFloat* DefaultHitTraceWidgetScaleCurve;//[Offset: 0x19f0, Size: 0x8]
	float SniperHitTraceLifetime;//[Offset: 0x19f8, Size: 0x4]
	CurveFloat* SniperHitTraceWidgetScaleCurve;//[Offset: 0x1a00, Size: 0x8]
	float MeleeHitTraceLifetime;//[Offset: 0x1a08, Size: 0x4]
	float VehicleHitTraceLifetime;//[Offset: 0x1a0c, Size: 0x4]
	CurveFloat* VehicleHitTraceWidgetScaleCurve;//[Offset: 0x1a10, Size: 0x8]
	WorldMarkComponent* WorldMarkComponent;//[Offset: 0x1a50, Size: 0x8]
	float PeekSpeed;//[Offset: 0x1a58, Size: 0x4]
	int DesirePeekValue;//[Offset: 0x1a5c, Size: 0x4]
	IMChatObject* IMChatObj;//[Offset: 0x1a60, Size: 0x8]
	int AIActorCapacity;//[Offset: 0x1a68, Size: 0x4]
	SolarCharacterAbility* CharacterAbility;//[Offset: 0x1a90, Size: 0x8]
	float StandJogSpeed;//[Offset: 0x1b00, Size: 0x4]
	float StandRunSpeed;//[Offset: 0x1b04, Size: 0x4]
	float StandSprintSpeed;//[Offset: 0x1b08, Size: 0x4]
	float StandGatlingSpeed;//[Offset: 0x1b0c, Size: 0x4]
	float CrouchJogSpeed;//[Offset: 0x1b10, Size: 0x4]
	float CrouchRunSpeed;//[Offset: 0x1b14, Size: 0x4]
	float CrouchSprintSpeed;//[Offset: 0x1b18, Size: 0x4]
	float CrouchGatlingSpeed;//[Offset: 0x1b1c, Size: 0x4]
	float JetLandingTriggerMinVelocity;//[Offset: 0x1b20, Size: 0x4]
	float JetLandingHeightThreshold;//[Offset: 0x1b24, Size: 0x4]
	float JetLandingVelocity;//[Offset: 0x1b28, Size: 0x4]
	delegate OnJogSetClient;//[Offset: 0x1b30, Size: 0x10]
	bool bIsSprintingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b40, Size: 0x1]
	SolarCharacterMovementComponent* CachedSolarCharacterMovement;//[Offset: 0x1b98, Size: 0x8]
	bool bIsJog;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ba4, Size: 0x1]
	float MoveSpeedReduceBonusInHipFire;//[Offset: 0x1bb0, Size: 0x4]
	float MoveSpeedReduceBonusInAdsHipFire;//[Offset: 0x1bb4, Size: 0x4]
	bool bEnableCustomJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb8, Size: 0x1]
	enum CurrentCustomJumpType;//[Offset: 0x1bb9, Size: 0x1]
	enum CurrentJetFlyType;//[Offset: 0x1bbc, Size: 0x1]
	bool bNewJetFlyCheckFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bbd, Size: 0x1]
	CruiseAssetSet* CruiseAssetSet;//[Offset: 0x1c00, Size: 0x8]
	FString AirborneStartSound;//[Offset: 0x1c08, Size: 0x10]
	FString AirborneJumpSound;//[Offset: 0x1c18, Size: 0x10]
	AnimSequence* CruiseStartAnim;//[Offset: 0x1c28, Size: 0x8]
	AnimSequence* CruiseLoopAnim;//[Offset: 0x1c30, Size: 0x8]
	AnimSequence* CruiseEndAnim;//[Offset: 0x1c38, Size: 0x8]
	float PrepareToParachuteStartTime;//[Offset: 0x1c40, Size: 0x4]
	float PrepareToParachuteDuration;//[Offset: 0x1c44, Size: 0x4]
	Vector PrepareToParachuteLocation;//[Offset: 0x1c48, Size: 0xc]
	Vector AgreedParachuteLocation;//[Offset: 0x1c54, Size: 0xc]
	int CapsuleID;//[Offset: 0x1c78, Size: 0x4]
	bool bEnableCruising;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c7c, Size: 0x1]
	SolarCapsuleRoot* BoardedRoot;//[Offset: 0x1c80, Size: 0x8]
	enum CruiseState;//[Offset: 0x1c88, Size: 0x1]
	int ForceParachuteCountDown;//[Offset: 0x1c8c, Size: 0x4]
	CharacterCruiseComponent* CruiseComponentPrivate;//[Offset: 0x1c90, Size: 0x8]
	SkydivingEffectPreset[] SkydivingEffectClassList;//[Offset: 0x1ca0, Size: 0x10]
	float LowerLimitOfSpeedForSkydivingSoundEffect;//[Offset: 0x1cb0, Size: 0x4]
	float MinPitchToPlaySkydivingLandingEffect;//[Offset: 0x1cb4, Size: 0x4]
	delegate OnSkydiveTraced;//[Offset: 0x1cb8, Size: 0x10]
	ExponentialHeightFog* HeightFogActor;//[Offset: 0x1cc8, Size: 0x8]
	ParticleSystemComponent*[] SkydiveFlyingEffects;//[Offset: 0x1cd0, Size: 0x10]
	ParticleSystemComponent*[] SkydiveLandingEffects;//[Offset: 0x1ce0, Size: 0x10]
	ParticleSystemComponent*[] SkydiveWholeLifetimeEffects;//[Offset: 0x1cf0, Size: 0x10]
	FName StartSkydiveLoopSoundGroup_Speed;//[Offset: 0x1d00, Size: 0x8]
	FName StopSkydiveLoopSoundGroup_Speed;//[Offset: 0x1d08, Size: 0x8]
	FName StopSkydiveLoopSoundGroup_Height;//[Offset: 0x1d10, Size: 0x8]
	enum CurrentSkydiveStage;//[Offset: 0x1d18, Size: 0x1]
	delegate OnSkydivingStageChangedDelegate;//[Offset: 0x1d20, Size: 0x10]
	ActorComponent* FollowedLeaderMovementComponent;//[Offset: 0x1d50, Size: 0x8]
	WeaponSystemPlayerBase* WeaponSystemComponent;//[Offset: 0x1d80, Size: 0x8]
	MaterialInstance* MarkMaterial;//[Offset: 0x1dc0, Size: 0x8]
	SkeletalMeshComponentConfig* FirstPersonMeshConfig;//[Offset: 0x1dd0, Size: 0x8]
	SkeletalMeshComponent* FirstPersonMesh;//[Offset: 0x1dd8, Size: 0x8]
	float BaseGunCollisionTraceDis;//[Offset: 0x1de0, Size: 0x4]
	float CurrentGunCollisionTraceDis;//[Offset: 0x1de4, Size: 0x4]
	<enum,float> GunCollisionTraceStartHighIdle;//[Offset: 0x1de8, Size: 0x50]
	<enum,float> GunCollisionTraceStartHighCrouch;//[Offset: 0x1e38, Size: 0x50]
	float MinDistanceGun2Wall;//[Offset: 0x1e88, Size: 0x4]
	float GunCollisionXYAdjustDownSide;//[Offset: 0x1e8c, Size: 0x4]
	float GunCollisionCheckZLimit;//[Offset: 0x1e90, Size: 0x4]
	class WeaponSystemPlayer* WeaponSystemPlayerClass;//[Offset: 0x1e98, Size: 0x8]
	class WeaponSystemPlayerAI* WeaponSystemAIClass;//[Offset: 0x1ea0, Size: 0x8]
	class MapMarkBase* TrackingMarkWidgetClass;//[Offset: 0x1ea8, Size: 0x8]
	Vector WeaponAimStartOffset;//[Offset: 0x1eb0, Size: 0xc]
	SolarPlayerWeapon* TempSwitchWeapon;//[Offset: 0x1ec8, Size: 0x8]
	SolarPlayerWeapon* CachedCurrentWeapon;//[Offset: 0x1ed0, Size: 0x8]
	WeaponSystemVehicleComponent* WeaponSystemVehicle;//[Offset: 0x1fb8, Size: 0x8]
	BoardedVehicleInfo BoardedVehicleInfo;//[Offset: 0x1fd8, Size: 0x10]
	bool bOutVehicleShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe8, Size: 0x1]
	VehicleRepairToolMeshPreset VehicleRepairToolMeshPreset;//[Offset: 0x20c0, Size: 0x50]
	int RepairWeakPointTextID;//[Offset: 0x2110, Size: 0x4]
	StaticMeshComponent* VehicleRepairToolMesh;//[Offset: 0x2118, Size: 0x8]
	class ActorEffect* VehicleStealthEffectClass;//[Offset: 0x2120, Size: 0x8]
	delegate OnCharacterActivateEMP;//[Offset: 0x2140, Size: 0x10]
	delegate OnCharacterSwitchEMPEffect;//[Offset: 0x2150, Size: 0x10]
	bool bActiveEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2160, Size: 0x1]
	bool bActiveInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2161, Size: 0x1]
	bool bNoticedCantCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2162, Size: 0x1]
	enum CurrentSkillAnimType;//[Offset: 0x2163, Size: 0x1]
	enum CurrentSkillAnimRightHandType;//[Offset: 0x2164, Size: 0x1]
	class StaticMeshComponent* MassInvisibilityWarningIconClass;//[Offset: 0x2168, Size: 0x8]
	StaticMeshComponent* MassInvWarningIconComponent;//[Offset: 0x2170, Size: 0x8]
	bool bShowMapVoiceStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2194, Size: 0x1]
	bool bShowMapVoiceFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2195, Size: 0x1]
	WidgetComponent* ReplayInfoHUDComponent;//[Offset: 0x2208, Size: 0x8]
	float VaultDegree;//[Offset: 0x221c, Size: 0x4]
	float VaultHalfHeight;//[Offset: 0x2220, Size: 0x4]
	FName DetectorProfile;//[Offset: 0x2224, Size: 0x8]
	DebugReplicator* DebugReplicator;//[Offset: 0x22c8, Size: 0x8]
	FString DebugStringToDrawGASServer;//[Offset: 0x22d0, Size: 0x10]
	int RoleAbilityCharacterID;//[Offset: 0x22e0, Size: 0x4]
	int[] RoleAbilityBoundPlayerLevels;//[Offset: 0x22e8, Size: 0x10]
	GameplayAbilitySpecHandle[] RoleAbilitySpecHandles;//[Offset: 0x22f8, Size: 0x10]
	float[] RoleAbilityStartCDServerTime;//[Offset: 0x2308, Size: 0x10]
	int BattleUpgradeEffectCurrentLevel;//[Offset: 0x2348, Size: 0x4]
	BattleUpgradeEffectContainer BattleUpgradeEffects;//[Offset: 0x2350, Size: 0x120]
	int UAVCount;//[Offset: 0x2498, Size: 0x4]
	SolarUAVRescue* PermanentRescueUAV;//[Offset: 0x24a8, Size: 0x8]
	SolarNightComesActor* EffectingNightComesActor;//[Offset: 0x24cc, Size: 0x8]
	bool WorldToScreen(out const Vector Location, out Vector2D Screen);// 0x1f1e312cd041
	void UpgradeShieldResponse(const bool bSuccess);// 0x1f1d312cd041
	void UpgradeGenericSkill(int LevelUp);// 0x1f1c312cd041
	void UpgradeClassTypeSkill(int LevelUp);// 0x1f1b312cd041
	void UpdateWeaponCrosshair(float InDeltaTime);// 0x1f1a312cd041
	void UpdateVehicleStealthProgress(float StealthMaterialPercent);// 0x1f19312cd041
	void UpdateTeammateHUDData(byte InNewPosInTeam);// 0x1f18312cd041
	void UpdateShieldUpgradeMatMaxPile();// 0x1f17312cd041
	void UpdateShieldPropertyByAblility();// 0x1f16312cd041
	void UpdateRoleAbilityState(byte RoleAbilityIndex, enum Ope);// 0x1f15312cd041
	void UpdateJetFlyDataToSpectating();// 0x1f14312cd041
	void UpdateExtraMagToSpectateInfo(SolarSpectateInfo* SpectateInfo);// 0x1f13312cd041
	void UpdateDyingAttr(float DeltaTime);// 0x1f12312cd041
	float UpdateCurrentHealth(const float UpdateValue, const byte ChangeType, SolarCharacter* InInstigatorCharacter, Actor* InDamageCauserActor, out SolarPointDamageEvent DamageEvent, SolarMapElementBase* ElementObj);// 0x1f11312cd041
	void UpdateBattleUpgradeEffectToSpectateInfo(SolarSpectateInfo* SpectateInfo);// 0x1f10312cd041
	void UnbindActorToSelfTeam(Actor* Actor);// 0x1f0f312cd041
	void TurnCharacterWithAngle(float Degree, bool bIsYawOrPitch);// 0x1f0e312cd041
	void TurnCharacterToDirection(out const Vector Dir);// 0x1f0d312cd041
	void TryStopShieldRecharge();// 0x1f0c312cd041
	void TryStatisticsRechargedTimes();// 0x1f0b312cd041
	void TryStartShieldRecharge(bool bUseBigRecharger);// 0x1f0a312cd041
	void TrySetTeammateHUDShow();// 0x1f09312cd041
	void TrySetTeammateHUDHide();// 0x1f08312cd041
	void TrySetTeamateHUDVisiblity();// 0x1f07312cd041
	void TryRechargeShield(bool bUseBigRecharger);// 0x1f06312cd041
	void TryHideShieldOperator();// 0x1f05312cd041
	void TryDiscardShieldUpgradeMatItems(const int InItemNum);// 0x1f04312cd041
	void TryCreatingOwnTeammate();// 0x1f03312cd041
	void TryBreakShieldRecharge();// 0x1f02312cd041
	void TryBreakScopeStatus();// 0x1f01312cd041
	void TryBindPowerBarDelegates();// 0x1f00312cd041
	void TryBindPickupDelegates();// 0x1eff312cd041
	void TryBindItemPanelDelegates();// 0x1efe312cd041
	void TryBindHPPanelDelegates();// 0x1efd312cd041
	void TryAutoMarkItemForTeammateServer(const SolarItemData[] ItemData);// 0x1efc312cd041
	void ToggleDebugInfo();// 0x1efb312cd041
	void ToggleDebugGASInfo();// 0x1efa312cd041
	void TickShieldOperatorTimeline(float InDeltaTime);// 0x1ef9312cd041
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1ef8312cd041
	void StopTreatmentProgressBar();// 0x1ef7312cd041
	void StopTreatment();// 0x1ef6312cd041
	void StopShieldRechargeProgressBar();// 0x1ef5312cd041
	void StopShieldRechargeProgress();// 0x1ef4312cd041
	void StopRescueProgressBar(const int TextID);// 0x1ef3312cd041
	void StopRepairWeakPointProgressBar();// 0x1ef2312cd041
	void StopClimbSound();// 0x1ef1312cd041
	void StatisticElectricShopOnActivated(out const Vector InLocation);// 0x1ef0312cd041
	void StartTreatmentProgressBar(const float Duration);// 0x1eef312cd041
	void StartTreatment();// 0x1eee312cd041
	void StartShieldRechargeProgressBar(const float InRechargeDuration, int InContributorCharacterId);// 0x1eed312cd041
	void StartShieldRechargeProgress();// 0x1eec312cd041
	void StartRescueProgressBar(const float Duration, const float RemainingTime, const int TextID, const bool bShowBtn, bool bIsUAV);// 0x1eeb312cd041
	void StartRepairWeakPointProgressBar(const float Duration);// 0x1eea312cd041
	void StartCheckShieldTutorials();// 0x1ee9312cd041
	void StartCheckBackpackTutorials();// 0x1ee8312cd041
	void SpecAnimInstStopMontage(enum SpecAnimType, AnimMontage* AnimMontage);// 0x1ee7312cd041
	float SpecAnimInstPlayMontage(enum SpecAnimType, AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x1ee6312cd041
	AnimMontage* SpecAnimInstGetCurrentMontage(enum SpecAnimType);// 0x1ee5312cd041
	void SpawnDeathBoxActor();// 0x1ee4312cd041
	void SolarLaunchCharacter(out const Vector LaunchVelocity, bool bXYOverride, bool bZOverride, Actor* JumpPad);// 0x1ee3312cd041
	void SolarGM_UpgradeBattleUpgradeEffectLevel(int UpgradeTo);// 0x1ee2312cd041
	void SolarGM_ServerUpgradeBattleUpgradeEffectLevel(int UpgradeTo);// 0x1ee1312cd041
	void SolarGM_ServerEnableCustomJump(bool bEnabled);// 0x1ee0312cd041
	void SolarGM_Server_ChangeTailFlameId(int InTailFlameId);// 0x1edf312cd041
	void SolarGM_Server_ChangeBagId(int InBagId);// 0x1ede312cd041
	void SolarGM_SelectBattleUpgradeEffect(int Level, int SelectedIndex);// 0x1edd312cd041
	void SolarGM_EnableDebugAutoMove(bool bEnabled, float SwitchInterval);// 0x1edc312cd041
	void SolarGM_EnableCustomJump(int Enabled);// 0x1edb312cd041
	void SolarGM_ChangeTailFlameId(int InTailFlameId);// 0x1eda312cd041
	void SolarGM_ChangeBagId(int InBagId);// 0x1ed9312cd041
	void ShowShieldUIFX(const int ShiledID);// 0x1ed8312cd041
	void ShowShieldUI(const bool IsShow);// 0x1ed7312cd041
	void ShowRevivePickupEffect();// 0x1ed6312cd041
	void ShowReviveClearEffect();// 0x1ed5312cd041
	void ShowRescueInjector();// 0x1ed4312cd041
	void ShowNoticeCantCharge();// 0x1ed3312cd041
	bool ShouldForceOverrideDamageTaken(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser, out float OverrideDamageTaken);// 0x1ed2312cd041
	void ShieldUpgradeToNextLevel();// 0x1ed1312cd041
	void ShieldOperatorInterpFunc(float InValue);// 0x1ed0312cd041
	void SetSpectateTargetCharacter(SolarCharacter* InSpectateTargetCharacter);// 0x1ecf312cd041
	void SetShowMapVoiceStep(bool bInShowMapVoiceStep);// 0x1ece312cd041
	void SetShowMapVoiceFight(bool bInShowMapVoiceFight);// 0x1ecd312cd041
	void SetSelfEnergyCostEnable(bool bEnable);// 0x1ecc312cd041
	void SetRequirementBySetting();// 0x1ecb312cd041
	void SetRenderMode(byte Mode);// 0x1eca312cd041
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x1ec9312cd041
	void SetNewCharacterSkin(SkeletalMesh* NewMesh, MaterialInterface* NewMaterial, class Object NewAnimClass);// 0x1ec8312cd041
	void SetMaxWalkSpeed(float NewWalkSpeed);// 0x1ec7312cd041
	void SetInfiniteAmmoState(const bool Enable);// 0x1ec6312cd041
	void SetCurrShieldValue(const float InValue);// 0x1ec5312cd041
	void SetCurrExtraEnergy(float Amount);// 0x1ec4312cd041
	void SetBackpackConfig(const int InCharacterId);// 0x1ec3312cd041
	void SetActiveRescueBtn(bool bIsActive);// 0x1ec2312cd041
	void ServerUseItemRequest(int ItemID, int Num);// 0x1ec1312cd041
	bool ServerUpgradeShield();// 0x1ec0312cd041
	void ServerTryRechargeShield(const float InRecoverySpeed);// 0x1ebf312cd041
	void ServerTriggerRadarStation(SolarRadarStation* InRadarStation);// 0x1ebe312cd041
	void ServerSwitchVehicleSeat(float LocalTime, SolarVehiclePawn* InVehicle, int TargetSeatIndex, const Vector_NetQuantize VehicleLocation, const Vector_NetQuantizeNormal VehicleEuler);// 0x1ebd312cd041
	void ServerSwitchShield(const SolarItemData NewShieldData);// 0x1ebc312cd041
	void ServerStatisticsRechargedTimes(const int RechargedTimes, const int BigRechargedTimes);// 0x1ebb312cd041
	void ServerStatisticElectricShopOnActivated(const Vector InLocation);// 0x1eba312cd041
	void ServerStartRescue(SolarCharacter* TargetCharacter);// 0x1eb9312cd041
	void ServerSpawnProjectile(class Object ProjClass, const Vector StartLocation, const Vector Velocity);// 0x1eb8312cd041
	void ServerSetTreasureBoxState(SolarTreasureBoxActor* TreasureBox, const enum NewState, SolarCharacter* RequestCharacter);// 0x1eb6312cd041
	void ServerSetJetPackModule(const int NewJetPackModuleID, const bool bForVertical);// 0x1eb5312cd041
	void ServerSetInputVector(uint16 AxisX, uint16 AxisY);// 0x1eb4312cd041
	void ServerSetIdleTurnType(byte TurnType);// 0x1eb2312cd041
	void ServerSetEnergyState(enum State);// 0x1eb1312cd041
	void ServerSetDesirePeek(int NewValue);// 0x1eb0312cd041
	void ServerSetDebugCharacterGASValue(int Value);// 0x1eaf312cd041
	void ServerSetCurChargingDeathBox(DeathTreasureBox* DeathBox);// 0x1eae312cd041
	void ServerSetChargingPile(const bool bEnter, SolarPile* InChargingPile);// 0x1ead312cd041
	void ServerSetCharacterOperation(enum InType, Object* Target);// 0x1eac312cd041
	void ServerSetCanBeDamaged(bool bInCanBeDamaged);// 0x1eab312cd041
	void ServerSendGameplayEvent(const GameplayTag EventTag, const GameplayEventData Payload);// 0x1eaa312cd041
	void ServerSelectLevelSkill(int Level, int SelectedIndex);// 0x1ea9312cd041
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x1ea8312cd041
	void ServerRPCUpgradeShield();// 0x1ea7312cd041
	void ServerRPCUnLockBagGrid(const int Grade, const int NewUnLockNum);// 0x1ea6312cd041
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x1ea5312cd041
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x1ea4312cd041
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x1ea3312cd041
	void ServerRPCSwapBagGrid(const int FromGrade, const int FromGridIndex, const int TargetGrade, const int TargetIndex);// 0x1ea2312cd041
	void ServerRPCSetSettlements();// 0x1ea1312cd041
	void ServerRPCSetSelfEnergyCostEnable(bool bEnable);// 0x1ea0312cd041
	void ServerRPCSetBagRequirementArr(const BagRequirementData[] BagRequirements);// 0x1e9f312cd041
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x1e9e312cd041
	void ServerRPCInitSettlementNeedRankArr();// 0x1e9d312cd041
	void ServerRPCInitBagGradeData();// 0x1e9c312cd041
	void ServerRPCFixBagGrid(const int InGrade, const int InGridIndex);// 0x1e9b312cd041
	void ServerRPCDisplayAllElectricShops();// 0x1e9a312cd041
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x1e99312cd041
	void ServerRPCDiscardWeapon(const int InSlot);// 0x1e98312cd041
	void ServerRPCDiscardItem(const int InItemID, const int InItemNum);// 0x1e97312cd041
	void ServerRPCDiscardHomeItem(const int Grade, const int gridIndex);// 0x1e96312cd041
	void ServerRPCArrangeBag();// 0x1e95312cd041
	void ServerRequestStartResurrect(DeathTreasureBox* TargetDeathBox);// 0x1e94312cd041
	void ServerRequestCancelResurrect();// 0x1e93312cd041
	void ServerRecieveHitDataFromClient(SolarWeapon* Weapon, const BulletHitData HitData, const bool IsNotDelay);// 0x1e8e312cd041
	void ServerPlayTreatmentCancelSound();// 0x1e8d312cd041
	void ServerPickUpWeapon(Actor* Actor, bool bIsAutoPickup, Vector ClientCharPos, Vector ClientItemPos);// 0x1e8c312cd041
	void ServerPickUpTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x1e8b312cd041
	void ServerPickUpItem(SolarItemActor* ItemActor, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x1e8a312cd041
	void ServerPickUpHomeItemsGM(const int InItemID, const int InItemNum);// 0x1e89312cd041
	void ServerPerformShieldUpgradeInteract(SolarShieldUpgradeItemShop* InShop);// 0x1e88312cd041
	void ServerOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x1e87312cd041
	void ServerOnDestructActor(SolarDestructibleActor* DestructibleActor, SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x1e86312cd041
	void ServerKillMe(enum DamageType);// 0x1e85312cd041
	void ServerInitSheildComp(const int InShiledID);// 0x1e84312cd041
	void ServerHideShieldOperator();// 0x1e83312cd041
	void ServerGMVehicleSubHealth(int SubHealth);// 0x1e82312cd041
	void ServerGetOnVehicle(float LocalTime, SolarVehiclePawn* InVehicle, int SeatIndex);// 0x1e81312cd041
	void ServerGetOffVehicleEjectedByDefaultParams(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection);// 0x1e80312cd041
	void ServerGetOffVehicleEjected(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection, const VehicleEjectParams Params);// 0x1e7e312cd041
	void ServerGetOffVehicle(bool bNeedNotify);// 0x1e7d312cd041
	void ServerDetectBlock();// 0x1e7c312cd041
	void ServerConsumeExtraEnergy(const float InAmount, const enum InUsage);// 0x1e7b312cd041
	void ServerConsumeEnergy(const float InAmount, const enum InUsage);// 0x1e7a312cd041
	void ServerClearJetModule();// 0x1e79312cd041
	void ServerClearEnergyState(enum State);// 0x1e78312cd041
	void ServerChangeRechargeState(const bool bRecharge, const bool bUseBigRecharger);// 0x1e77312cd041
	void ServerCancelVehicleAbility(byte AbilityIndex);// 0x1e76312cd041
	void ServerCancelVault(float InAnimPosition, Vector InLandLocation);// 0x1e75312cd041
	void ServerCancelRescue();// 0x1e74312cd041
	void ServerCancelOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x1e73312cd041
	void ServerCancelMeleeWarp();// 0x1e72312cd041
	void ServerBackpackGM(const enum InGmType, const int InItemID, const int InItemNum, const int InSlot);// 0x1e71312cd041
	void ServerAskForActiveAbilityInfosToRestoreOnReconnected();// 0x1e70312cd041
	void ServerApplyVehicleAbility(byte AbilityIndex);// 0x1e6f312cd041
	void ServerAddVehicleTime(float InAddTime);// 0x1e6e312cd041
	void RoleAbilityForbiddenAbilityTagCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x1e6d312cd041
	void RoleAbilityEndedCallBack(GameplayAbility* InAbility);// 0x1e6c312cd041
	void RoleAbilityCoolDownTagCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x1e6b312cd041
	void RoleAbilityCoolDownResetCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x1e6a312cd041
	void RoleAbilityCommittedCallBack(GameplayAbility* InAbility);// 0x1e69312cd041
	void ReturnMostValuableItemIDServer(const byte TeammatePosInTeam, const int64 ItemThisID);// 0x1e68312cd041
	void ResponseChosenMark();// 0x1e67312cd041
	void RequestUseBackpackItemServer(const int InItemID, const int InItemNum);// 0x1e66312cd041
	void RequestToStopVehicleRepairing();// 0x1e65312cd041
	void RequestToStartVehicleRepairing(SolarVehiclePawn* InVehicle);// 0x1e64312cd041
	void RequestPlayShieldSound(out ShieldSoundData ShieldSound, bool bIsOnly1P);// 0x1e61312cd041
	void RequestDisplayAllElectricShops();// 0x1e60312cd041
	void RequestCancelRescue();// 0x1e5f312cd041
	void RemoveTreasureBoxOperator();// 0x1e5e312cd041
	void RemoveTempComponent(PrimitiveComponent* TargetComp);// 0x1e5d312cd041
	void RemoveTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag);// 0x1e5c312cd041
	void RemoveShieldRepairEffectItem();// 0x1e5b312cd041
	void RemoveShieldOperator();// 0x1e5a312cd041
	void RefreshWeaponDataMapAndArray();// 0x1e59312cd041
	void RefreshTypeItemMapAndArray();// 0x1e58312cd041
	void RefreshTeammateHUDUI(SolarPlayerState* SelfData);// 0x1e57312cd041
	void RefreshRenderConsoleVarForSkydive();// 0x1e56312cd041
	void RefreshMaxPileMapAndArray();// 0x1e55312cd041
	void RefreshIdItemMapAndArray();// 0x1e54312cd041
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x1e53312cd041
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0x1e52312cd041
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x1e51312cd041
	void ReceiveOnVehicleAbilityInput(byte AbilityIndex);// 0x1e50312cd041
	void ReceivedOnShieldIdChanged(int LastShieldId);// 0x1e4f312cd041
	void ReceiveAfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1e4e312cd041
	void QuitVehicleWholeShield();// 0x1e4d312cd041
	void QuitVehicleStealth();// 0x1e4c312cd041
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x1e4b312cd041
	void PostNotEnoughEnergyNotice();// 0x1e4a312cd041
	void PlaySquatSound();// 0x1e49312cd041
	void PlaySpeedUpEffect(bool bIsUp);// 0x1e48312cd041
	void PlayShieldSoundByType(enum ShieldSoundType);// 0x1e46312cd041
	void PlayParachuteStartSound();// 0x1e45312cd041
	void PlayerStateReplicatedForHUD();// 0x1e44312cd041
	void OnVaultInput();// 0x1e43312cd041
	void OnUsingSkillStatusChanged(const GameplayTag Tag, int NewCount);// 0x1e42312cd041
	void OnUpdateShieldId();// 0x1e41312cd041
	void OnUIDuationGameplayEffectRemoved(out const ActiveGameplayEffect ActiveGameplayEffect);// 0x1e40312cd041
	void OnUIDuationGameplayEffectApplied(AbilitySystemComponent* ASC, out const GameplayEffectSpec InGameplayEffectSpec, ActiveGameplayEffectHandle InGameplayEffectHandle);// 0x1e3f312cd041
	void OnUAVSpawnRelatedTagChange(const GameplayTag Tag, int NewCount);// 0x1e3e312cd041
	void OnTeamIDChange();// 0x1e3d312cd041
	void OnTakeDamage__DelegateSignature(const SolarCharacter* Character, out const SolarPointDamageEvent DamageEvent, float HPDamage);// 0x1e3c312cd041
	void OnStartResurrectProgress(const int InTextId, const float InDuration, const float InRemaining, const bool bShowCancel);// 0x1e3b312cd041
	void OnSpawnExpItem();// 0x1e3a312cd041
	void OnSkydiveTraced__DelegateSignature(out const HitResult HitResult);// 0x1e39312cd041
	void OnSkydiveStageChanged(enum LastStage, enum CurrentStage);// 0x1e38312cd041
	void OnShowShieldHUD__DelegateSignature(bool bIsShowShieldHUD);// 0x1e37312cd041
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1e36312cd041
	void OnShieldValueLowDelegate__DelegateSignature(bool bIsShieldValueLow);// 0x1e35312cd041
	void OnShieldRechargeStart();// 0x1e34312cd041
	void OnShieldRechargeProgressBarComplete();// 0x1e33312cd041
	void OnShieldRechargeProgressBarCancel();// 0x1e32312cd041
	void OnShieldRechargeEnd();// 0x1e31312cd041
	void OnShieldIDChangedDelegate__DelegateSignature(float CurValue, float MaxValue, int QualityColor, bool bIsAdvancedShield);// 0x1e30312cd041
	void OnSheildUpFXDelegate__DelegateSignature();// 0x1e2f312cd041
	void OnSheildRechargeDelegate__DelegateSignature();// 0x1e2e312cd041
	void OnSheildBreakDelegate__DelegateSignature();// 0x1e2d312cd041
	void OnReplayCameraModeChanged(enum OldMode, enum CurMode);// 0x1e2c312cd041
	void OnRepItemWeaponParts();// 0x1e2b312cd041
	void OnRepIgnoreScopeSlots();// 0x1e2a312cd041
	void OnRep_WeaponSystemVehicle();// 0x1e29312cd041
	void OnRep_WeaponSystemComponentChanged();// 0x1e28312cd041
	void OnRep_WeaponDataMap();// 0x1e27312cd041
	void OnRep_VJetPackModuleID();// 0x1e26312cd041
	void OnRep_TypeKeyItemArrayChange();// 0x1e25312cd041
	void OnRep_TreatmentState(enum LastState);// 0x1e23312cd041
	void OnRep_TreatmentCount(int LastCount);// 0x1e22312cd041
	void OnRep_SettingEnergyCostChanged();// 0x1e21312cd041
	void OnRep_RoleAbilityStartCDServerTime();// 0x1e20312cd041
	void OnRep_RoleAbilitySpecHandles();// 0x1e1f312cd041
	void OnRep_ReviveItemCleared();// 0x1e1e312cd041
	void OnRep_RescueState();// 0x1e1d312cd041
	void OnRep_RescuedStartTime(float LastRescuedStartTime);// 0x1e1c312cd041
	void OnRep_PlayBodyHitSound(int LastBodyHitSoundCount);// 0x1e1b312cd041
	void OnRep_PlayBodyHitByPunchSound(int LastBodyHitByPunchSoundCount);// 0x1e1a312cd041
	void OnRep_PendingRegeneration();// 0x1e19312cd041
	void OnRep_OutVehicleShotState();// 0x1e18312cd041
	void OnRep_MaxPileArrayChange();// 0x1e17312cd041
	void OnRep_MaxExtraEnergyChanged();// 0x1e16312cd041
	void OnRep_JetPropellingInfo();// 0x1e15312cd041
	void OnRep_IsDeathVerge();// 0x1e14312cd041
	void OnRep_IdKeyItemArrayChange();// 0x1e13312cd041
	void OnRep_HJetPackModuleID();// 0x1e12312cd041
	void OnRep_GradeKeyBagGradeArrayChange();// 0x1e11312cd041
	void OnRep_ForceParachuteCountDown();// 0x1e10312cd041
	void OnRep_ExtraEnergyModuleIDChanged();// 0x1e0f312cd041
	void OnRep_EnergyStateChanged();// 0x1e0e312cd041
	void OnRep_EnableCruising();// 0x1e0d312cd041
	void OnRep_EffectingNightComesActor();// 0x1e0c312cd041
	void OnRep_DiedTime();// 0x1e0b312cd041
	void OnRep_CurUniqueShieldId();// 0x1e0a312cd041
	void OnRep_CurrShieldValue(float PreviousValue);// 0x1e09312cd041
	void OnRep_CurrShieldState(enum LastState);// 0x1e07312cd041
	void OnRep_CurrShieldId(int InLastShieldId);// 0x1e06312cd041
	void OnRep_CurrentSkydiveStage(enum LastStage);// 0x1e05312cd041
	void OnRep_CurrentSkillAnimType();// 0x1e04312cd041
	void OnRep_CurrentEnergyChanged(float LastEnergyValue);// 0x1e03312cd041
	void OnRep_CurChargingDeathBoxChanged(DeathTreasureBox* PreBox);// 0x1e02312cd041
	void OnRep_CruiseState();// 0x1e01312cd041
	void OnRep_CharacterCapsuleSizeOverride();// 0x1e00312cd041
	void OnRep_CapsuleID();// 0x1dff312cd041
	void OnRep_BagRequirementArrChange();// 0x1dfe312cd041
	void OnRep_BackpackPropellingMode();// 0x1dfd312cd041
	void OnRep_ActiveInfiniteAmmo();// 0x1dfc312cd041
	void OnRep_ActiveEMP();// 0x1dfb312cd041
	void OnRegisterShieldChangedWithIDEvent();// 0x1dfa312cd041
	void OnRegisterShieldAvailableChangedWithIDEvent();// 0x1df9312cd041
	void OnRegisterRescueStateChangedWithIDEvent();// 0x1df8312cd041
	void OnRegisterHPChangedWithIDEvent();// 0x1df7312cd041
	void OnPlayingScrubCharactersCreated();// 0x1df6312cd041
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x1df5312cd041
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x1df4312cd041
	void OnPlayerDataRepAsPlayer(byte TeamID);// 0x1df3312cd041
	void OnPlayerBackpackEnergyUpdate();// 0x1df2312cd041
	void OnPickupSettingChanged();// 0x1df1312cd041
	void OnOwnTeammateHUDCreated(SolarPlayerState* SelfData);// 0x1df0312cd041
	void OnOutVehicleStateChanged();// 0x1def312cd041
	void OnNotInBattle();// 0x1dee312cd041
	void OnMaxEnergyUpdateEvent__DelegateSignature(float InMaxValue);// 0x1ded312cd041
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* LocalPlayerSpectateInfo);// 0x1dec312cd041
	void OnLocalPlayerSpectateMeStatusChanged__DelegateSignature(SolarCharacter* Character, bool bIsSpectating);// 0x1deb312cd041
	void OnLevelSequence_PlayAirborneJumpSound();// 0x1dea312cd041
	void OnJogSetClient__DelegateSignature(bool bSet);// 0x1de9312cd041
	void OnInBattle();// 0x1de8312cd041
	void OnHUDTeamPosSet__DelegateSignature(byte PosInTeam);// 0x1de7312cd041
	void OnHUDRescueBtnActivitySet__DelegateSignature(bool bIsActive);// 0x1de6312cd041
	void OnHUDNickNameSet__DelegateSignature(FString NickName);// 0x1de5312cd041
	void OnHUDDistanceSet__DelegateSignature(float Distance);// 0x1de4312cd041
	void OnHUDDistanceDisplaySet__DelegateSignature(bool bShown);// 0x1de3312cd041
	void OnHealthUpdated__DelegateSignature(const SolarCharacter* Character);// 0x1de2312cd041
	bool OnExitOpenTreasureBox();// 0x1de1312cd041
	bool OnEnterOpenTreasureBox();// 0x1de0312cd041
	void OnEnterCombat(enum battleType);// 0x1dde312cd041
	void OnEnergyStateUpdateEvent__DelegateSignature(byte InEnergyState);// 0x1ddd312cd041
	void OnDrivingStateChanged(SolarVehiclePawn* SolarVehicle, enum NewDriveState, enum OldDriveState, int NewSeatIndex, int OldSeatIndex);// 0x1ddc312cd041
	void OnDetectRadarStation(bool bEnter, SolarRadarStation* InRadarStation);// 0x1ddb312cd041
	void OnDetectElectricShop(bool bEnter, SolarElectricShop* InElectricShop);// 0x1dda312cd041
	void OnCurShieldValueChangedDelegate__DelegateSignature(enum WidgetState, float InCurValue, float InChangeValue, FString InSolarPlayerID);// 0x1dd8312cd041
	void OnCurEnergyUpdateEvent__DelegateSignature(float InCurValue, float InChangeValue);// 0x1dd7312cd041
	void OnConsumableNumChangedEvent__DelegateSignature();// 0x1dd6312cd041
	void OnClientMovementComponentEnabled();// 0x1dd5312cd041
	void OnChargeInfoUpdateEvent__DelegateSignature(SolarCharacter* OwnerCharacter, const float ChargeFrequency, const float ChargeQuantity);// 0x1dd4312cd041
	void OnCharacterSpawnDeathBox(const bool bCheat, const bool bKilledByTeammate, const int InExpItemCount, const int InMaxSheildMatCount);// 0x1dd3312cd041
	void OnCharacterSkinReset__DelegateSignature();// 0x1dd2312cd041
	void OnCharacterDeathEnd();// 0x1dd1312cd041
	void OnCharacterDaraSet__DelegateSignature(int DataID);// 0x1dd0312cd041
	void OnCancelResurrectProgress(const int InTextId);// 0x1dcf312cd041
	void OnBatteryIdUpdateEvent__DelegateSignature(int InBatteryId);// 0x1dce312cd041
	void OnBackpackWeaponPartUpdateEvent__DelegateSignature();// 0x1dcd312cd041
	void OnBackpackItemUpdateEvent__DelegateSignature();// 0x1dcc312cd041
	void OnBackpackEquipUpdateEvent__DelegateSignature();// 0x1dcb312cd041
	void OnBackpackEnergyUpdateEvent__DelegateSignature();// 0x1dca312cd041
	void OnApplyDyingDamage(float DeltaTime);// 0x1dc9312cd041
	void NotifyLeaveSafeArea();// 0x1dc8312cd041
	void NotifyEnterSafeArea();// 0x1dc7312cd041
	void NetTriggerRadarStation();// 0x1dc6312cd041
	bool NetGetOnVehicle(SolarVehiclePawn* InVehicle, int SeatIndex);// 0x1dc5312cd041
	bool NetGetOffVehicle(bool bShouldEject, bool bNeedNotify);// 0x1dc4312cd041
	void MultiSetGetOffVehicleLocationAndRotation(const Vector DropLocation, float TeleportRotYaw);// 0x1dc3312cd041
	void MultiResetCharacter(const Vector Location, const Rotator Rotation, bool bClearWeapons);// 0x1dc2312cd041
	void MultiOnRebirth();// 0x1dc1312cd041
	void MarkWarningOnWorld();// 0x1dc0312cd041
	void MarkQuickChatOnWorld(FString IconImg);// 0x1dbf312cd041
	void MarkPointOnWorld();// 0x1dbe312cd041
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x1dbd312cd041
	void LeaveNightComes(SolarNightComesActor* InNightComesActor);// 0x1dbc312cd041
	void KillMe();// 0x1dbb312cd041
	void K2_SetCanShowBattlePrompt(bool NewValue);// 0x1dba312cd041
	void K2_RemoveGameplayTag(GameplayTag Tag, bool bReplicated);// 0x1db9312cd041
	void K2_PlaySoundGroup(FName GroupName, SoundGroupPlayContext Context);// 0x1db7312cd041
	bool K2_IsSwimming();// 0x1db6312cd041
	bool K2_IsInAir();// 0x1db5312cd041
	bool K2_HasMatchingGameplayTag(GameplayTag Tag);// 0x1db4312cd041
	WidgetComponent* K2_GetTeamHUDComp();// 0x1db3312cd041
	HUD* K2_GetControlledHUD();// 0x1db2312cd041
	void K2_AddGameplayTag(GameplayTag Tag, bool bReplicated);// 0x1db1312cd041
	bool IsWeaponsAvailable();// 0x1db0312cd041
	bool IsWeaponCauseTeamDamage();// 0x1daf312cd041
	bool IsViewportFocused();// 0x1dae312cd041
	bool IsVerticalJetFlying();// 0x1dad312cd041
	bool IsVehicleFire();// 0x1dac312cd041
	bool IsTeammateWith(const SolarCharacter* Other);// 0x1dab312cd041
	bool IsTeamHUDValid();// 0x1daa312cd041
	bool IsSprinting();// 0x1da9312cd041
	bool IsSpectatingOtherPlayer();// 0x1da8312cd041
	bool IsSkyCharging();// 0x1da7312cd041
	bool IsShowMapVoiceStep();// 0x1da6312cd041
	bool IsShowMapVoiceFight();// 0x1da5312cd041
	bool IsShieldValueLow();// 0x1da4312cd041
	bool IsShieldMaxLevel();// 0x1da3312cd041
	bool IsShieldFullyCharged();// 0x1da2312cd041
	bool IsScopeOpening();// 0x1da1312cd041
	bool IsRescuing();// 0x1da0312cd041
	bool IsReplayPlaying();// 0x1d9f312cd041
	bool IsReloading();// 0x1d9e312cd041
	bool IsRechargerEnough();// 0x1d9d312cd041
	bool IsPlayerLocallyControlledOrSpectated();// 0x1d9c312cd041
	bool IsPileCharging();// 0x1d9b312cd041
	bool IsOwnerOffline();// 0x1d9a312cd041
	bool IsOpeningTreasureBox();// 0x1d99312cd041
	bool IsNoCharging();// 0x1d98312cd041
	bool IsMovingOnGround(enum VelocityStatus);// 0x1d96312cd041
	bool IsMeleeAttacking();// 0x1d95312cd041
	bool IsMaxLevelInGame();// 0x1d94312cd041
	bool IsLocalPlayerSpectatingMe();// 0x1d93312cd041
	bool IsLocalPlayerSpectateAsThirdPerson();// 0x1d92312cd041
	bool IsLaunching();// 0x1d91312cd041
	bool IsJumping();// 0x1d90312cd041
	bool IsJetFlying();// 0x1d8f312cd041
	bool IsInVehicle();// 0x1d8e312cd041
	bool IsInsideVehicle();// 0x1d8d312cd041
	bool IsInShoulderOrScopeView();// 0x1d8c312cd041
	bool IsInScopeView();// 0x1d8b312cd041
	bool IsInRescueState();// 0x1d8a312cd041
	bool IsInMassInvisibilityPrepare();// 0x1d89312cd041
	bool IsInMassInvisibility();// 0x1d88312cd041
	bool IsInInvisibleStatus();// 0x1d87312cd041
	bool IsInDeathVerge();// 0x1d86312cd041
	bool IsHumanCharacter();// 0x1d85312cd041
	bool IsHorizontalJetFlying();// 0x1d84312cd041
	bool IsHoldingWeapon();// 0x1d83312cd041
	bool IsFullHealth();// 0x1d82312cd041
	bool IsFullBodyMeleeAttacking();// 0x1d81312cd041
	bool IsFiring();// 0x1d80312cd041
	bool IsExistWeaponSeatedVehicleSeat();// 0x1d7f312cd041
	bool IsEnergyCostAndChargeDisabled();// 0x1d7e312cd041
	bool IsE2M();// 0x1d7d312cd041
	bool IsDying();// 0x1d7c312cd041
	bool IsDoingAnyAttack();// 0x1d7b312cd041
	bool IsCruising();// 0x1d7a312cd041
	bool IsClimbing();// 0x1d79312cd041
	bool IsCharacterDebugBlockDetectionEnabled();// 0x1d78312cd041
	bool IsCanShowTeammateHUD();// 0x1d77312cd041
	bool IsBoxCharging();// 0x1d76312cd041
	bool IsBolting();// 0x1d75312cd041
	bool IsBigRechargerEnough();// 0x1d74312cd041
	bool IsBeingSpectated();// 0x1d73312cd041
	bool IsBeingRescue();// 0x1d72312cd041
	bool IsAllEnergyFull();// 0x1d71312cd041
	bool IsAiming();// 0x1d70312cd041
	bool IsAbleToContinueRecharge();// 0x1d6f312cd041
	void InitShieldUpgradeMatMaxPile();// 0x1d6e312cd041
	void InitShieldPropertyByConfig();// 0x1d6d312cd041
	void InitShieldOperatorTimeline();// 0x1d6c312cd041
	void InitializeCharacterData(const int InCharacterId, const int InSkinID);// 0x1d6b312cd041
	void InitGameStatisticEquipment();// 0x1d6a312cd041
	void InitDefaultDayNight();// 0x1d69312cd041
	void InitCharacterDefaultShield(out const SolarItemData InShiledID);// 0x1d68312cd041
	void IncreaseRechargedTimes();// 0x1d67312cd041
	void HideShieldRepairEffectItem();// 0x1d66312cd041
	void HideShieldOperator();// 0x1d65312cd041
	void HideRescueInjector();// 0x1d64312cd041
	bool HasBlockBetweenUs(const Actor* A, const Actor* B, const bool bIsVehicle, const bool bShowLog);// 0x1d63312cd041
	bool HasAnyShieldEquiped();// 0x1d62312cd041
	bool HasAnyRecharger();// 0x1d61312cd041
	bool HandleDying(byte ChangeType, Controller* InstigatorController);// 0x1d60312cd041
	<enum,int> GetWeaponPartsMap();// 0x1d5e312cd041
	int[] GetWeaponPartsArray();// 0x1d5d312cd041
	bool GetWeaponItemDataBySlot(const int InSlot, out SolarItemData ItemData);// 0x1d5c312cd041
	<int,SolarItemData> GetWeaponDataMap();// 0x1d5b312cd041
	int GetVerticalJetFlyTotalTimes();// 0x1d5a312cd041
	int GetVerticalJetFlyRestTimes();// 0x1d59312cd041
	void GetVerticalJetFlyCharging(out float OutValue, out float OutPercent);// 0x1d58312cd041
	void GetVerticalJetFlyCD(out float OutValue, out float OutPercent);// 0x1d57312cd041
	SolarVehicleWeapon* GetVehicleWeapon();// 0x1d56312cd041
	byte GetVehicleAbilityCounter();// 0x1d55312cd041
	<enum,SolarItemData> GetTypeKeyItemMap();// 0x1d54312cd041
	float GetTreatmentRemaining();// 0x1d53312cd041
	float GetTreatmentDuration();// 0x1d52312cd041
	void GetTeamHUDTranslucentData(out float CheckDistance, out float TranslucentValue);// 0x1d51312cd041
	UserWidget* GetTeamHUD();// 0x1d50312cd041
	SolarSpectateInfo* GetSpectateInfo();// 0x1d4f312cd041
	AnimInstance* GetSpecAnimInstance(enum SpecAnimType);// 0x1d4d312cd041
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x1d4c312cd041
	SolarPlayerState* GetSolarPlayerState();// 0x1d4b312cd041
	FString GetSolarPlayerID();// 0x1d4a312cd041
	SolarPlayerController* GetSolarPlayerController(bool bSkipPossessCheck);// 0x1d49312cd041
	SolarCharacterMovementComponent* GetSolarCharacterMovementComponent();// 0x1d48312cd041
	SolarBotAIController* GetSolarAIController();// 0x1d47312cd041
	SolarAbilitySystemComponent* GetSolarAbilitySystemComponentSimple();// 0x1d46312cd041
	float GetSkydiveLandingHeight();// 0x1d45312cd041
	CharacterSkinConfig* GetSkinConfig(const int InSkinID);// 0x1d44312cd041
	int GetShieldWorthByID(const int InShieldID);// 0x1d43312cd041
	int GetShieldUpgradeNeedMatNum();// 0x1d42312cd041
	int GetShieldUpgradeMatNum();// 0x1d41312cd041
	int GetShieldUpgradeMatMaxPile();// 0x1d40312cd041
	float GetShieldRecoveryAmount();// 0x1d3f312cd041
	float GetShieldRechargeRemainningTime();// 0x1d3e312cd041
	float GetShieldRechargeDuration();// 0x1d3d312cd041
	int GetShieldMaxLevel();// 0x1d3c312cd041
	SolarCharacterMovementComponent* GetSafeSolarCharacterMovement();// 0x1d3b312cd041
	enum GetRoleAbilityState(byte RoleAbilityIndex);// 0x1d39312cd041
	SolarUAVRescue* GetRescuingUAV();// 0x1d38312cd041
	SolarCharacter* GetRescuingCharacter();// 0x1d37312cd041
	float GetRescueTime();// 0x1d36312cd041
	float GetRecoveryDuartionModify();// 0x1d35312cd041
	float GetRecoveryAmountModify();// 0x1d34312cd041
	SolarUAVRescue* GetPermanentRescueUAV();// 0x1d33312cd041
	Rotator GetNormalizeCameraRotation();// 0x1d32312cd041
	bool GetNewItemData(int InItemID, int InItemNum, out SolarItemData OutItemData);// 0x1d31312cd041
	byte GetMyTeamID();// 0x1d30312cd041
	float GetMaxShieldValue();// 0x1d2f312cd041
	float GetMaxExtraEnergy();// 0x1d2e312cd041
	float GetMaxEnergy();// 0x1d2d312cd041
	SolarPlayerState* GetLastDownBy();// 0x1d2c312cd041
	int GetJetPackModuleLevel(const bool bVertical);// 0x1d2b312cd041
	int GetItemNumById(const int InItemID);// 0x1d2a312cd041
	int GetItemMaxPile(int InItemID);// 0x1d29312cd041
	bool GetItemDataByType(const enum ItemType, out SolarItemData ItemData);// 0x1d28312cd041
	bool GetItemDataById(const int InItemID, out SolarItemData ItemData);// 0x1d27312cd041
	bool GetIsActiveEMP();// 0x1d26312cd041
	Vector GetInputVector();// 0x1d25312cd041
	<int,SolarItemData> GetIdKeyItemMap();// 0x1d24312cd041
	int GetHorizontalJetFlyTotalTimes();// 0x1d23312cd041
	int GetHorizontalJetFlyRestTimes();// 0x1d22312cd041
	void GetHorizontalJetFlyCharging(out float OutValue, out float OutPercent);// 0x1d21312cd041
	void GetHorizontalJetFlyCD(out float OutValue, out float OutPercent);// 0x1d20312cd041
	int GetGenericSkillLevel();// 0x1d1f312cd041
	float GetFactorialAttributeModifies(int AttributeID);// 0x1d1e312cd041
	int GetExtraEnergyModuleID();// 0x1d1d312cd041
	float GetEnergyConsumptionModify();// 0x1d1c312cd041
	enum GetDriveState();// 0x1d1a312cd041
	float GetDesirePeekValue();// 0x1d19312cd041
	Actor* GetDamagerCauserActor();// 0x1d18312cd041
	float GetCurrShieldValue();// 0x1d17312cd041
	int GetCurrShieldID();// 0x1d16312cd041
	float GetCurrExtraEnergy();// 0x1d15312cd041
	SolarPlayerWeapon* GetCurrentWeapon();// 0x1d14312cd041
	enum GetCurrentWalkMode();// 0x1d12312cd041
	float GetCurrentVehicleAbilityCooldownRemaining(byte AbilityIndex);// 0x1d11312cd041
	float GetCurrentVehicleAbilityCooldownDuration(byte AbilityIndex);// 0x1d10312cd041
	int GetCurrentShieldLevel();// 0x1d0f312cd041
	byte GetCurrentRenderMode();// 0x1d0d312cd041
	enum GetCurrentCustomJumpType();// 0x1d0b312cd041
	float GetCurrEnergy();// 0x1d0a312cd041
	float GetCumulativeAttributeModifies(int AttributeID);// 0x1d09312cd041
	PlayerController* GetControllingOrReplayController();// 0x1d08312cd041
	StaticMesh* GetClipMeshOfHoldingWeapon();// 0x1d07312cd041
	int GetClassTypeSkillLevel();// 0x1d06312cd041
	void GetChargingStateForUI(out bool IsSky, out bool IsPile, out bool IsBox, out bool IsE2M);// 0x1d05312cd041
	Rotator GetCharacterLookAt();// 0x1d04312cd041
	bool GetCanShowBattlePrompt();// 0x1d03312cd041
	Rotator GetCameraRotation();// 0x1d02312cd041
	Vector GetCameraLocation();// 0x1d01312cd041
	void GetAllSkydiveLandingEffects(out ParticleSystemComponent*[] OutEffects);// 0x1d00312cd041
	void GetAllSkydiveFlyingEffects(out ParticleSystemComponent*[] OutEffects);// 0x1cff312cd041
	void GatheringDeathBoxItem(const bool bCheat, const bool bKilledByTeammate, const int InExpItemCount, const int InMaxSheildMatCount);// 0x1cfe312cd041
	void GameStatisticsWeaponHit(SolarCharacterBase* DamageCauserCharacter, out const SolarPointDamageEvent DamageInfo, const float ActualDamage);// 0x1cfd312cd041
	void GameStatisticsVehicleLanded(out const HitResult Hit);// 0x1cfc312cd041
	void GameStatisticsVehicleInAir();// 0x1cfb312cd041
	void GameStatisticsVehicleHit(Actor* DamageCauser, float HitDamage);// 0x1cfa312cd041
	void GameStatisticsItemChange(const int ItemID, const enum PickType, const int OldNum, const int NewNum, const int TriggerType);// 0x1cf8312cd041
	void GameStatisticsGodWeapon();// 0x1cf7312cd041
	void GameStatisticsGetOnVehicleReason(int Type, FString Type_Parameter);// 0x1cf6312cd041
	void GameStatisticsGetOffVehicleReason(const SolarWeapon* CurrentWeapon, FString Param);// 0x1cf5312cd041
	void GameStatisticsEquipment();// 0x1cf4312cd041
	void GameStatisticsElectricShopActivated(out const Vector InLocation);// 0x1cf3312cd041
	void GameStatisticsDamageReason(out const SolarPointDamageEvent InDamageEvent, const float ActualDamage);// 0x1cf2312cd041
	void GameStatisticsCharacterSkill(bool bIsSuperSkill);// 0x1cf1312cd041
	void GameStatisticsBackpackFly(out const BackpackStatisticsInfo InBackpackStatisticsInfo);// 0x1cef312cd041
	void ForceBreakSprintState();// 0x1cee312cd041
	void FindMostValuableItemClient(const SolarItemData[] ItemData, const byte FromWhichTeammate);// 0x1ced312cd041
	void ExitDyingMovement();// 0x1cec312cd041
	void ExitDeathVerge(bool bClientSimulation);// 0x1ceb312cd041
	void ExecuteGM(FString GMType, FString Param1, FString Param2);// 0x1cea312cd041
	void EnterVehicleWholeShield(MaterialInterface* ShieldMaterialSource);// 0x1ce9312cd041
	void EnterVehicleStealth();// 0x1ce8312cd041
	void EnterDyingMovement();// 0x1ce7312cd041
	void EnterDeathVerge(bool bClientSimulation);// 0x1ce6312cd041
	void EnableCharacterDebugInfo_BlockDetection(bool bEnabled);// 0x1ce5312cd041
	void DoOperation(enum OperationType, Object* Target);// 0x1ce3312cd041
	void DisCardShield();// 0x1ce2312cd041
	float DealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1ce1312cd041
	void CreateTreasureBoxOperator();// 0x1ce0312cd041
	void CreateShieldRepairEffectItem();// 0x1cdf312cd041
	void CreateShieldOperator();// 0x1cde312cd041
	WidgetComponent* CreateOwnTeammateHUDInternal(SolarPlayerState* SelfData);// 0x1cdd312cd041
	WidgetComponent* CreateOwnTeammateHUD();// 0x1cdc312cd041
	void ClientWeaponPartReplaceNotice(const int OldWeaponPartId, const int NewWeaponPartId);// 0x1cdb312cd041
	void ClientUpdateTracking(int Mode, int Index, const Vector Location);// 0x1cda312cd041
	void ClientSuperRadarOnceScanned(int ScannedNum);// 0x1cd9312cd041
	void ClientStartRecharge(const float InCurrentValue, const float InRecoveryDuration, const float InRecoveryAmount, const enum ShieldRechargeType, const int InShieldContributorCharacterId, bool bFixPreAdd);// 0x1cd7312cd041
	void ClientSomeOneIsOpening();// 0x1cd6312cd041
	void ClientSetServerBlockDetectionResult(FString Info);// 0x1cd5312cd041
	void ClientRPCDisplayAllElectricShops(const Vector[] AllPositions);// 0x1cd4312cd041
	void ClientRestoreActiveAbilitiesOnReconnected(const RestoreAbilityInfo[] SpecHandles);// 0x1cd2312cd041
	void ClientReceiveVehicleWeaponMessageArray(const PlayerWeaponMsg[] InPlayerWeaponMessageArray);// 0x1cd1312cd041
	void ClientReceiveVehicleWeaponMessage(const PlayerWeaponMsg InPlayerWeaponMessage);// 0x1cd0312cd041
	void ClientReceiveScanResult(const ScannedInfo_NetQuantize[] ScannedDatas, const float SpanTimer);// 0x1cce312cd041
	void ClientReceiveCharacterWeaponMessageArray(const PlayerWeaponMsg[] InPlayerWeaponMessageArray);// 0x1ccd312cd041
	void ClientReceiveCharacterWeaponMessage(const PlayerWeaponMsg InPlayerWeaponMessage);// 0x1cca312cd041
	void ClientRadarOnceScanned(int ScannedNum);// 0x1cc9312cd041
	void ClientPlaySoundGroup(const FName GroupName);// 0x1cc8312cd041
	void ClientPlayHitEffect(const HitResult HitResult, class SolarBullet BulletClass, const enum HitType, const PlayerController* Attacker, const Vector RelativeVector, const float VFXScale, const SolarWeapon* AttackerWeapon);// 0x1cc6312cd041
	void ClientOnTriggerCharacterDown();// 0x1cc5312cd041
	void ClientOnShieldUpgrade();// 0x1cc4312cd041
	void ClientOnReconnecting(const ReconnectionParams Params);// 0x1cc2312cd041
	void ClientOnContinuousTreatmentStarted();// 0x1cc1312cd041
	void ClientNotifyMarkedBySuperRadar(float InRadarLifeTime, const GameplayTag InTag);// 0x1cc0312cd041
	void ClientNotifyMarkedByOnceScan(float InRadarLifeTime, const GameplayTag InTag);// 0x1cbf312cd041
	void ClientNotifyGameProgressCondition(out const GameplayTag InProgressTag);// 0x1cbe312cd041
	void ClientNotifyCharacterExposed(float InRadarLifeTime, const GameplayTag InTag);// 0x1cbd312cd041
	void ClientNoticePickup(const int ItemID, const int ItemQuality);// 0x1cbc312cd041
	void ClientKilledCharacter();// 0x1cbb312cd041
	void ClientHideShieldOperator();// 0x1cba312cd041
	void ClientEquipReplaceNotice(const int OldEquipItemId, const int CurEquipItemId, const int EquipType);// 0x1cb9312cd041
	void ClientCreateTreatEffect();// 0x1cb8312cd041
	void ClientCompleteRecharge(const float InCurrentValue, const float InChangeValue);// 0x1cb7312cd041
	void ClientCancelRecharge(const bool BreakAnimOnly, const float InCurrentValue, const float InChangeValue, const float MaxShieldVal, const enum CancelReason);// 0x1cb5312cd041
	void ClientBroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, byte RoleAbilityIndex);// 0x1cb4312cd041
	void ClientAddHitTrace(const HitTraceInfo Info);// 0x1cb3312cd041
	void ClientAckValidShieldUpgradeInteract(SolarShieldUpgradeItemShop* InShop, enum AckReason);// 0x1cb1312cd041
	void ClearGameStatisticEquipment();// 0x1cb0312cd041
	void ClearDeathBoxData();// 0x1caf312cd041
	float CheckSelfAltitudeInstantlyByTrace(out HitResult HitGeography, bool bCheckEveryFrame, float traceDistOverride, bool bSimpleCheck);// 0x1cae312cd041
	void ChangeSeatByIndex(int TargetSeatIndex);// 0x1cad312cd041
	void ChangeSeatByDefault();// 0x1cac312cd041
	void CGM_SpawnDeathBox();// 0x1cab312cd041
	void CGM_EnterDeath();// 0x1caa312cd041
	bool CanStickOutOfVehicle(bool bIgnoreSelfWeaponCheck);// 0x1ca9312cd041
	bool CanRebirth();// 0x1ca8312cd041
	bool CanPeek();// 0x1ca7312cd041
	bool CanMarkPointOnWorld();// 0x1ca6312cd041
	void CancelVehicleAbility();// 0x1ca5312cd041
	void CancelTreatment();// 0x1ca4312cd041
	void CalculateBubbleKillNum(out SolarCharacter*[] InstigatorCharacters, Actor* AttackWeapon);// 0x1ca3312cd041
	void BroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, byte RoleAbilityIndex);// 0x1ca2312cd041
	void BreakRechargeShield();// 0x1ca1312cd041
	void BindUpdateHUDToOnHealthUpdateDelegateProc(const SolarCharacter* Character);// 0x1ca0312cd041
	void BindLocalPlayerSpectateDelegates(SolarSpectateInfo* LocalSpecInfo);// 0x1c9f312cd041
	void BindActorToSelfTeam(Actor* Actor);// 0x1c9e312cd041
	void BeginplayPending__DelegateSignature();// 0x1c9d312cd041
	void BeginPlayBlueprint();// 0x1c9c312cd041
	void AutoMarkItemForTeammateClient(const int64 ItemThisID);// 0x1c9b312cd041
	void ApplyVehicleAbility(byte AbilityIndex);// 0x1c9a312cd041
	void AfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1c99312cd041
	void AfterDealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1c91312cd041
	void AddTrackingTarget(SolarCharacterBase* Tracked);// 0x1c90312cd041
	void AddTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag, float Value);// 0x1c8f312cd041
	void AddDebugString(FString DebugString);// 0x1c8e312cd041
	void AddCurrExtraEnergyValue(float DeltaEnergy);// 0x1c8d312cd041

--------------------------------
Class: SolarCharacterBase.Character.Pawn.Actor.Object
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x4f4, Size: 0x4]
	SolarAbilityComponent* SolarAbilityComponent;//[Offset: 0x4f8, Size: 0x8]
	bool bPendingEnterWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	SolarCharacterBase* InstigatorCharacter;//[Offset: 0x508, Size: 0x8]
	ParticleSystem* DedicatedDeathEffect;//[Offset: 0x510, Size: 0x8]
	ParticleSystem* DeathEffectSoft;//[Offset: 0x518, Size: 0x28]
	float VehicleCollisionProtectionTimeOnJumpingOff;//[Offset: 0x574, Size: 0x4]
	SolarAbilitySystemComponent* SolarAbilitySystemComponent;//[Offset: 0x578, Size: 0x8]
	bool bHoldSignificanceWhenDyingForAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0x5a8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x5b0, Size: 0x8]
	CharacterSoundConfig* CharacterSoundConfig;//[Offset: 0x5b8, Size: 0x8]
	float DefaultRefreshBonesCountDown;//[Offset: 0x5c0, Size: 0x4]
	void SetAttributeWithGAS(const GameplayAttribute InAttribute, byte ModifyType, float InValue);// 0x1c8b312cd041
	void ResetAudioComponentTransform();// 0x1c8a312cd041
	void PostAkEventByName(FString EventName1, FString EventName2);// 0x1c89312cd041
	void OnRep_PendingEnterWater();// 0x1c88312cd041
	void MulticastAddHitTrace(const HitTraceInfo Info);// 0x1c85312cd041
	void LazyRefreshBones(float DelayTime);// 0x1c84312cd041
	bool K2_IsInWater();// 0x1c83312cd041
	bool K2_IsAlive();// 0x1c82312cd041
	bool IsPlayerLocallyControlled();// 0x1c81312cd041
	bool IsInWater();// 0x1c80312cd041
	bool IsInSight(out const Vector InTargetPos, const float InMaxAngle, const bool bHorizontalOnly);// 0x1c7f312cd041
	bool IsInRoom();// 0x1c7e312cd041
	bool IsBlocked(const Actor* InOtherActor);// 0x1c7d312cd041
	bool InSameTeamWithFirstPlayerController();// 0x1c7c312cd041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x1c7b312cd041
	FString GetSoundEventString(enum SoundOpt);// 0x1c79312cd041
	SolarAkGameObject* GetSolarAkGameObject();// 0x1c78312cd041
	SolarAbilitySystemComponent* GetSafeASC();// 0x1c77312cd041
	float GetMaxHealth();// 0x1c76312cd041
	float GetCurrentHealth();// 0x1c75312cd041
	enum GetCharacterType();// 0x1c73312cd041
	Vector GetCharacterLocation(bool bMiddle);// 0x1c72312cd041
	Vector GetCharacterDirection();// 0x1c71312cd041
	SolarBackpackComponent* GetBackpack();// 0x1c70312cd041
	void ClientOnPushedByVehicle();// 0x1c6f312cd041
	bool CheckOpenParticleOptimization(int Bias);// 0x1c6e312cd041
	void ChangeCurrentHealthWithGAS(byte ModifyType, float InValue);// 0x1c6d312cd041

--------------------------------
Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0x10]
	FieldPathProperty Attribute;//[Size: 0x20]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: HitTraceInfo
	Vector_NetQuantizeNormal TraceDirection;//[Offset: 0x0, Size: 0xc]
	float Damage;//[Offset: 0xc, Size: 0x4]
	enum WeaponType;//[Offset: 0x10, Size: 0x1]
	bool bIsVehicleHitTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: SpawnedActorHandle
	uint32 Handle;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ReconnectionParams
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SolarAbilityComponent.ActorComponent.Object
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectMap;//[Offset: 0xb8, Size: 0x50]
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectsThisTick;//[Offset: 0x108, Size: 0x50]
	ReplicateEffectData[] ReplicateEffectDatas;//[Offset: 0x158, Size: 0x10]
	<class SolarAbilityEffectAccessory,SolarAbilityEffectAccessory*> EffectAccessoryMap;//[Offset: 0x168, Size: 0x50]
	bool CharacterWeaponDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	bool CharacterMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1]
	float MoveSpeedCoeffient;//[Offset: 0x1c4, Size: 0x4]
	MaterialInterface* OriginalMaterial;//[Offset: 0x1c8, Size: 0x8]
	float ShieldRechargeCostCoefficient;//[Offset: 0x1d0, Size: 0x4]
	void OnRep_SpeedCoeffient();// 0x43e5312cd041
	void OnRep_ReplicateEffectData();// 0x43e4312cd041
	int GetCharacterLevel();// 0x43e3312cd041

--------------------------------
Class: SolarAbilityEffect.Object
	SoftObjectPath EffectIconPath;//[Offset: 0x28, Size: 0x18]
	SolarAttributeModifier[] AttributeModifiers;//[Offset: 0x40, Size: 0x10]
	class SolarAbilityEffectAccessory[] AbilityEffectAccessoryClass;//[Offset: 0x50, Size: 0x10]
	bool bAllowMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	SolarCharacterBase* AbilityEffectAffectingCharacter;//[Offset: 0x120, Size: 0x8]
	SolarAbilityComponent* AbilityEffectAffectingAbilityComponent;//[Offset: 0x128, Size: 0x8]
	SolarAbility* AffectingAbility;//[Offset: 0x130, Size: 0x8]
	FString ExtraInfo;//[Offset: 0x138, Size: 0x10]
	<FString,float> AttributeParamMap;//[Offset: 0x148, Size: 0x50]

--------------------------------
Class: SolarAttributeModifier
	byte SolarAttributeType;//[Offset: 0x0, Size: 0x1]
	enum AttributeDurationType;//[Offset: 0x1, Size: 0x1]
	enum AttributeDurationSourceType;//[Offset: 0x2, Size: 0x1]
	float AttributeModifyDuration;//[Offset: 0x4, Size: 0x4]
	FString AttributeModifyDurationSourceKey;//[Offset: 0x8, Size: 0x10]
	float AttributeModifyMinDistance;//[Offset: 0x18, Size: 0x4]
	float AttributeModifyMaxDistance;//[Offset: 0x1c, Size: 0x4]
	CurveFloat* AttributeDistanceScaleCurve;//[Offset: 0x20, Size: 0x8]
	bool AttributeUseTargetValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float AttributeTargetValue;//[Offset: 0x2c, Size: 0x4]
	enum AttributeChangeValueSourceType;//[Offset: 0x30, Size: 0x1]
	float AttributeChangeValue;//[Offset: 0x34, Size: 0x4]
	float AttributeChangeValueForVehicle;//[Offset: 0x38, Size: 0x4]
	FString AttributeChangeValueSourceKey;//[Offset: 0x40, Size: 0x10]
	bool AttributeChangeValueIsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum AttributeChangeSpeedSourceType;//[Offset: 0x58, Size: 0x1]
	FString AttributeChangeSpeedSourceKey;//[Offset: 0x60, Size: 0x10]
	float AttributeChangeSpeed;//[Offset: 0x70, Size: 0x4]
	bool AttributeApplyChargingScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	int[] AttributeExtraIntParam;//[Offset: 0x78, Size: 0x10]
	float[] AttributeExtraFloatParam;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: SolarAbilityEffectAccessory.Actor.Object
	SolarCharacterBase* EffectAffectingCharacter;//[Offset: 0x228, Size: 0x8]
	byte EffectAccessoryInstanceType;//[Offset: 0x230, Size: 0x1]
	bool SpawnAtHitLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]

--------------------------------
Class: SolarAbility.Actor.Object
	class SolarAbility* MyAbilityClass;//[Offset: 0x228, Size: 0x8]
	class SolarAbilityEffect[] AbilityEffectClasses;//[Offset: 0x230, Size: 0x10]
	SolarCharacter* AbilitySourceCharacter;//[Offset: 0x240, Size: 0x8]
	Transform SpawnTransform;//[Offset: 0x250, Size: 0x30]
	bool InstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool DoNotAutoApply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	bool ApplyToSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 0x1]
	bool RadialAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 0x1]
	float RadialAbilityRadius;//[Offset: 0x284, Size: 0x4]
	bool bRadialIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bRadialIgnoreVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	bool CheckSourceToTargetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 0x1]
	bool EnableAbilityDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 0x1]
	bool bActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	FString ExtraInfo;//[Offset: 0x290, Size: 0x10]
	Actor* InitiatorActor;//[Offset: 0x2a0, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x2a8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x2b0, Size: 0x8]
	<FString,float> EffectParams;//[Offset: 0x2b8, Size: 0x50]
	void WeaponApplyAbility(const Object* WorldContextObject, class SolarAbility SolarAbilityClass, Actor* SourceActor, Actor* TargetActor, out const Vector HitLocation, out const FName HitBoneName, float Scale, out const Rotator ProjRotator, FString InExtarInfo, PrimitiveComponent* HitComponent);// 0x43e2312cd041
	void StopSound();// 0x43e1312cd041
	void StaticRemoveSolarAbilityFrom(class SolarAbility AbilityClass, Actor* AffectingActor);// 0x43e0312cd041
	void StaticApplySolarAbilityToWithHitResult(class SolarAbility AbilityClass, Actor* AffectingActor, out const HitResult HitResult, const float Scale, FString InExtarInfo, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation);// 0x43df312cd041
	void StaticApplySolarAbilityTo(class SolarAbility AbilityClass, Actor* AffectingActor, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation, out const Vector HitLocation, out const FName HitBoneName, float Scale, FString InExtraInfo, PrimitiveComponent* HitComponent);// 0x43de312cd041
	void ServerSetActivated();// 0x43dd312cd041
	void RestoreSound();// 0x43dc312cd041
	void RemoveSolarAbilityFrom(Actor* ApplyToActor);// 0x43db312cd041
	void PlaySound();// 0x43da312cd041
	void PauseSound();// 0x43d9312cd041
	bool IsLocalControl();// 0x43d8312cd041
	bool InSameTeam();// 0x43d7312cd041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x43d6312cd041
	bool CheckActor(Actor* SourceActor, Actor* TargetActor);// 0x43d5312cd041
	void ApplySolarAbilityTo(Actor* ApplyToActor, Actor* SourceActor);// 0x43d4312cd041

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 0x1]
	byte OcclusionCollisionChannel;//[Offset: 0x338, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 0x1]
	float OuterRadius;//[Offset: 0x33c, Size: 0x4]
	float InnerRadius;//[Offset: 0x340, Size: 0x4]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x348, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x350, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x360, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x364, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x368, Size: 0x4]
	float roomReverbAuxBusGain;//[Offset: 0x36c, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x370, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x374, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x378, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37c, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37c, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37c, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37c, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x380, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x384, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x3867312cd041
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x3866312cd041
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x3865312cd041
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x3864312cd041
	void SetOutputBusVolume(float BusVolume);// 0x3863312cd041
	void SetListeners(out const AkComponent*[] Listeners);// 0x3862312cd041
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);// 0x3861312cd041
	void SetEarlyReflectionsVolume(float SendVolume);// 0x3860312cd041
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x385f312cd041
	void SetAttenuationScalingFactor(float Value);// 0x385e312cd041
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x385d312cd041
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x385c312cd041
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x385b312cd041
	int PostAkEventByName(FString in_EventName);// 0x385a312cd041
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3859312cd041
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3858312cd041
	float GetAttenuationRadius();// 0x3857312cd041

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x318, Size: 0x8]
	FString EventName;//[Offset: 0x320, Size: 0x10]
	void Stop();// 0x3856312cd041
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x3855312cd041
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x3854312cd041
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x3853312cd041
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x3852312cd041
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x3851312cd041
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x3850312cd041

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 0x4]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa0, Size: 0x50]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AkAssetData.Object
	uint32 CachedHash;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 0x8]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MinimumDuration;//[Offset: 0xc0, Size: 0x4]
	float MaximumDuration;//[Offset: 0xc4, Size: 0x4]
	float GetMinimumDuration();// 0x384f312cd041
	float GetMaximumDuration();// 0x384e312cd041
	float GetMaxAttenuationRadius();// 0x384d312cd041
	bool GetIsInfinite();// 0x384c312cd041

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 0x10]
	uint32 GroupShortID;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 0x4]
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: SolarAkGameObject.Object
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	void Wakeup();// 0x44ce312cd041
	void UnloadBank(FString InBankName);// 0x44cd312cd041
	void UnLoadAllBanks();// 0x44cc312cd041
	void Suspend(bool in_bRenderAnyway);// 0x44cb312cd041
	int StopSoundByEvent(FString in_EventName);// 0x44ca312cd041
	int StaticStopSoundByEvent(FString in_EventName);// 0x44c9312cd041
	int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString in_EventName, LatentActionInfo LatentInfo);// 0x44c8312cd041
	int StaticPostAkEventByName(FString in_EventName);// 0x44c7312cd041
	int StaticPlaySoundByEvent(FString in_EventName);// 0x44c6312cd041
	int StaticComponentPostAkEventByName(AkComponent* AkComponent, FString in_EventName);// 0x44c5312cd041
	void SolarLoadAllBanks();// 0x44c4312cd041
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x44c3312cd041
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x44c2312cd041
	void SetMasterRTPCValue(float Value, int InterpolationTimeMs);// 0x44c1312cd041
	void SetMasterRTPCMute(bool Mute);// 0x44c0312cd041
	void SetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x44bf312cd041
	void ReceiveTick(float DeltaTime);// 0x44be312cd041
	void ReceiveEndPlay(const byte EndPlayReason);// 0x44bd312cd041
	void ReceiveBeginPlay();// 0x44bc312cd041
	int PostAkEventByNameAndWaitForEnd(FString in_EventName, LatentActionInfo LatentInfo);// 0x44bb312cd041
	int PostAkEventByName(FString InEventName1, FString InEventName2);// 0x44ba312cd041
	int PlaySoundByEvent(FString in_EventName);// 0x44b9312cd041
	void LoadBank(FString InBankName);// 0x44b8312cd041
	void LoadAllBanks();// 0x44b7312cd041

--------------------------------
Class: ReplicateEffectData
	SoftObjectPath IconPath;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: SolarAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	SolarGameplayAbilitySet* DefaultAbilitySet;//[Offset: 0x1300, Size: 0x8]
	SkeletalMeshComponent* OptionMeshForRepMontage;//[Offset: 0x1368, Size: 0x8]
	bool bPendingMontageRepForMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1370, Size: 0x1]
	GameplayAbilityLocalAnimMontageForMesh[] LocalAnimMontageInfoForMeshes;//[Offset: 0x1378, Size: 0x10]
	GameplayAbilityRepAnimMontageForMesh[] RepAnimMontageInfoForMeshes;//[Offset: 0x1388, Size: 0x10]
	GameplayAbilitySpecHandle UpgradeAbilityLevelBySpec(GameplayAbilitySpecHandle AbilitySpecHandle, bool bForNextActivate, int LevelUp);// 0x440a312cd041
	void UpgradeAbilityLevelByClass(const class GameplayAbility AbilityClass, bool bForNextActivate, int LevelUp);// 0x4409312cd041
	void UpgradeAbilityLevel(GameplayTagContainer AbilityTags, bool bForNextActivate, int LevelUp);// 0x4408312cd041
	void ServerCurrentMontageSetPlayRateForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float InPlayRate);// 0x4407312cd041
	void ServerCurrentMontageSetNextSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x4406312cd041
	void ServerCurrentMontageJumpToSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, FName SectionName);// 0x4405312cd041
	void PostDefaultAbilitiesGranted();// 0x4404312cd041
	void OnRep_ReplicatedAnimMontageForMesh();// 0x4403312cd041
	void OnNotifiedTagChanged(out const GameplayTag Tag, bool bAdded);// 0x4402312cd041
	void OnInternalMetaAttributeUpdate(SolarMetaAttributeSet* MetaAttributeSet, out GameplayModifierEvaluatedData EvaluatedData, out const GameplayEffectSpec EffectSpec, out MetaAttributeUpdateEvent UpdateEvent);// 0x4401312cd041
	void NotifySourceMetaAttributeExecution(out const MetaAttributeUpdateEvent UpdateEvent);// 0x4400312cd041
	void K2_RemoveGameplayCueLocalShared(Object* Instigator, const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x43ff312cd041
	void K2_RemoveGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x43fe312cd041
	int K2_RemoveActiveEffectsWithTag(GameplayTag GameplayTag);// 0x43fd312cd041
	GameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(const class GameplayAbility AbilityClass, int Level);// 0x43fc312cd041
	GameplayAbilitySpecHandle K2_GiveAbility(const class GameplayAbility AbilityClass, int Level);// 0x43fb312cd041
	void K2_GetEffectMaxTimeRemainingAndDuration(GameplayTag EffectTag, out float TimeRemaining, out float Duration);// 0x43fa312cd041
	AttributeSet* K2_FindOwnedAttributeSetByClass(class AttributeSet Class);// 0x43f9312cd041
	void K2_ExecuteGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x43f8312cd041
	void K2_ClearAbility(out const GameplayAbilitySpecHandle Handle);// 0x43f7312cd041
	void K2_CancelAbilityByTag(GameplayTag AbilityTag);// 0x43f6312cd041
	void K2_AddGameplayCueLocalShared(Object* Instigator, const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x43f5312cd041
	void K2_AddGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x43f4312cd041
	bool IsNotifiedTagAvailable(out const GameplayTag Tag);// 0x43f3312cd041
	GameplayAbilitySpecHandle GiveDefaultAbility(const class GameplayAbility AbilityClass);// 0x43f2312cd041
	ActiveGameplayEffectHandle ChangeActiveEffectRemainTime(ActiveGameplayEffectHandle InEffect, float InValue, byte InOption);// 0x43f1312cd041
	ActiveGameplayEffectHandle ChangeActiveEffectDuration(ActiveGameplayEffectHandle InEffect, float InDuration, enum InChangeProxy);// 0x43f0312cd041

--------------------------------
Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x130, Size: 0x10]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x140, Size: 0x10]
	FName AffectedAnimInstanceTag;//[Offset: 0x150, Size: 0x8]
	float OutgoingDuration;//[Offset: 0x2f8, Size: 0x4]
	float IncomingDuration;//[Offset: 0x2fc, Size: 0x4]
	FString[] ClientDebugStrings;//[Offset: 0x320, Size: 0x10]
	FString[] ServerDebugStrings;//[Offset: 0x330, Size: 0x10]
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 0x1]
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 0x1]
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 0x1]
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x3a8, Size: 0x10]
	Actor* OwnerActor;//[Offset: 0x3e0, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x3e8, Size: 0x8]
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x400, Size: 0x120]
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x550, Size: 0x10]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x730, Size: 0x38]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 0x1]
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x770, Size: 0x30]
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x840, Size: 0x480]
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xcc0, Size: 0x128]
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xde8, Size: 0x128]
	byte[] BlockedAbilityBindings;//[Offset: 0x1038, Size: 0x10]
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x1170, Size: 0x60]
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x11e0, Size: 0x118]
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0x125f312cd041
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0x125e312cd041
	void TargetConfirm();// 0x125d312cd041
	void TargetCancel();// 0x125c312cd041
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0x125b312cd041
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0x125a312cd041
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0x1259312cd041
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x1258312cd041
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0x1257312cd041
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x1256312cd041
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0x1255312cd041
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0x1253312cd041
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x1252312cd041
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0x1251312cd041
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0x1250312cd041
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0x124f312cd041
	void ServerPrintDebug_Request();// 0x124e312cd041
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey);// 0x124d312cd041
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0x124c312cd041
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x124b312cd041
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0x124a312cd041
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x1249312cd041
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0x1247312cd041
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0x1246312cd041
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x1245312cd041
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0x1244312cd041
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0x1243312cd041
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0x1242312cd041
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0x1241312cd041
	void OnRep_ServerDebugString();// 0x1240312cd041
	void OnRep_ReplicatedAnimMontage();// 0x123f312cd041
	void OnRep_OwningActor();// 0x123e312cd041
	void OnRep_ClientDebugString();// 0x123d312cd041
	void OnRep_ActivateAbilities();// 0x123c312cd041
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x123b312cd041
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x123a312cd041
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x1239312cd041
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x1238312cd041
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x1237312cd041
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x1236312cd041
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x1235312cd041
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x1233312cd041
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0x1230312cd041
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x122f312cd041
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0x122e312cd041
	GameplayEffectContextHandle MakeEffectContext();// 0x122d312cd041
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0x122c312cd041
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0x122b312cd041
	bool GetUserAbilityActivationInhibited();// 0x122a312cd041
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0x1229312cd041
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0x1228312cd041
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0x1227312cd041
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0x1224312cd041
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0x1223312cd041
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0x1221312cd041
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0x1220312cd041
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo);// 0x121f312cd041
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x121c312cd041
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x121b312cd041
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0x121a312cd041
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0x1219312cd041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0x1218312cd041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0x1217312cd041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0x1216312cd041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0x1215312cd041
	void AbilityConfirmOrCancel__DelegateSignature();// 0x1214312cd041
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0x1213312cd041

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x1212312cd041
	enum K2_RunGameplayTask(interface class_                                                                                                    TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x1210312cd041

--------------------------------
Class: GameplayAbilitySpecHandle
	int Handle;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AttributeDefaults
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 0x8]
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeSet.Object

--------------------------------
Class: SolarGameplayAbilitySet.DataAsset.Object
	class GameplayAbility[] Abilities;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: GameplayAbility.Object
	GameplayTagContainer AbilityTags;//[Offset: 0xa8, Size: 0x20]
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	byte ReplicationPolicy;//[Offset: 0xce, Size: 0x1]
	byte InstancingPolicy;//[Offset: 0xcf, Size: 0x1]
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0xd8, Size: 0x20]
	GameplayEventData CurrentEventData;//[Offset: 0xf8, Size: 0xb0]
	byte NetExecutionPolicy;//[Offset: 0x1a8, Size: 0x1]
	byte NetSecurityPolicy;//[Offset: 0x1a9, Size: 0x1]
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x1b0, Size: 0x8]
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x1b8, Size: 0x10]
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x1c8, Size: 0x8]
	GameplayTagQuery CancelAbilitiesMatchingTagQuery;//[Offset: 0x1d0, Size: 0x48]
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x218, Size: 0x20]
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x238, Size: 0x20]
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x258, Size: 0x20]
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x278, Size: 0x20]
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x298, Size: 0x20]
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x2b8, Size: 0x20]
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x2d8, Size: 0x20]
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x2f8, Size: 0x20]
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x318, Size: 0x20]
	GameplayTask*[] ActiveTasks;//[Offset: 0x358, Size: 0x10]
	AnimMontage* CurrentMontage;//[Offset: 0x378, Size: 0x8]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 0x1]
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0x3545312cd041
	void SetCanBeCanceled(bool bCanBeCanceled);// 0x3544312cd041
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0x3543312cd041
	void RemoveGrantedByEffect();// 0x3542312cd041
	void MontageStop(float OverrideBlendOutTime);// 0x3541312cd041
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0x3540312cd041
	void MontageJumpToSection(FName SectionName);// 0x353f312cd041
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0x353e312cd041
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0x353d312cd041
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0x353c312cd041
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0x353b312cd041
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0x353a312cd041
	void K2_OnEndAbility(bool bWasCancelled);// 0x3539312cd041
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x3538312cd041
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0x3537312cd041
	void K2_EndAbility();// 0x3536312cd041
	void K2_CommitExecute();// 0x3535312cd041
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0x3534312cd041
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0x3533312cd041
	bool K2_CommitAbility();// 0x3532312cd041
	bool K2_CheckAbilityCost();// 0x3531312cd041
	bool K2_CheckAbilityCooldown();// 0x3530312cd041
	void K2_CancelAbility();// 0x352f312cd041
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, out GameplayTagContainer RelevantTags);// 0x352e312cd041
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0x352d312cd041
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0x352c312cd041
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0x352b312cd041
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0x352a312cd041
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0x3529312cd041
	void K2_ActivateAbility();// 0x3528312cd041
	void InvalidateClientPredictionKey();// 0x3527312cd041
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0x3526312cd041
	Actor* GetOwningActorFromActorInfo();// 0x3525312cd041
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0x3524312cd041
	Object* GetCurrentSourceObject();// 0x3523312cd041
	AnimMontage* GetCurrentMontage();// 0x3522312cd041
	float GetCooldownTimeRemaining();// 0x3521312cd041
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0x3520312cd041
	Actor* GetAvatarActorFromActorInfo();// 0x351f312cd041
	GameplayAbilityActorInfo GetActorInfo();// 0x351e312cd041
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0x351d312cd041
	int GetAbilityLevel();// 0x351c312cd041
	void EndTaskByInstanceName(FName InstanceName);// 0x351b312cd041
	void EndAbilityState(FName OptionalStateNameToEnd);// 0x351a312cd041
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0x3519312cd041
	void CancelTaskByInstanceName(FName InstanceName);// 0x3518312cd041
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x3517312cd041
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0x3516312cd041
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0x3515312cd041
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x3514312cd041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x3513312cd041

--------------------------------
Class: GameplayEventData
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	Actor* Instigator;//[Offset: 0x8, Size: 0x8]
	Actor* Target;//[Offset: 0x10, Size: 0x8]
	Object* OptionalObject;//[Offset: 0x18, Size: 0x8]
	Object* OptionalObject2;//[Offset: 0x20, Size: 0x8]
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 0x18]
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 0x20]
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 0x20]
	float EventMagnitude;//[Offset: 0x80, Size: 0x4]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 0x28]

--------------------------------
Class: GameplayEffectContextHandle

--------------------------------
Class: GameplayAbilityTargetDataHandle

--------------------------------
Class: GameplayAbilityActivationInfo
	byte ActivationMode;//[Offset: 0x0, Size: 0x1]
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: PredictionKey
	int16 Current;//[Offset: 0x0, Size: 0x2]
	int16 Base;//[Offset: 0x2, Size: 0x2]
	PackageMap* PredictiveConnection;//[Offset: 0x8, Size: 0x8]
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: GameplayAbilityTargetingLocationInfo
	byte LocationType;//[Offset: 0x8, Size: 0x1]
	Transform LiteralTransform;//[Offset: 0x10, Size: 0x30]
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8]
	MeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8]
	GameplayAbility* SourceAbility;//[Offset: 0x50, Size: 0x8]
	FName SourceSocketName;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: GameplayEffect.Object
	enum DurationPolicy;//[Offset: 0x30, Size: 0x1]
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 0x1a8]
	ScalableFloat Period;//[Offset: 0x1e0, Size: 0x20]
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	enum PeriodicInhibitionPolicy;//[Offset: 0x201, Size: 0x1]
	GameplayModifierInfo[] Modifiers;//[Offset: 0x208, Size: 0x10]
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x218, Size: 0x10]
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x228, Size: 0x20]
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x248, Size: 0x10]
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x258, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x268, Size: 0x10]
	class GameplayEffect[] OverflowEffects;//[Offset: 0x278, Size: 0x10]
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x290, Size: 0x10]
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2a0, Size: 0x10]
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	GameplayEffectCue[] GameplayCues;//[Offset: 0x2b8, Size: 0x10]
	GameplayEffectUIData* UIData;//[Offset: 0x2c8, Size: 0x8]
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x2d0, Size: 0x60]
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x330, Size: 0x60]
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x390, Size: 0x50]
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x3e0, Size: 0x50]
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x430, Size: 0x50]
	GameplayTagRequirements RemovalSourceTagRequirements;//[Offset: 0x480, Size: 0x50]
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x4d0, Size: 0x60]
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x530, Size: 0x50]
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x580, Size: 0x150]
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x6d8, Size: 0x150]
	enum StackingType;//[Offset: 0x829, Size: 0x1]
	int StackLimitCount;//[Offset: 0x82c, Size: 0x4]
	enum StackDurationRefreshPolicy;//[Offset: 0x830, Size: 0x1]
	enum StackPeriodResetPolicy;//[Offset: 0x831, Size: 0x1]
	enum StackExpirationPolicy;//[Offset: 0x832, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x838, Size: 0x10]

--------------------------------
Class: GameplayEffectModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x20]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 0xf8]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x120, Size: 0x78]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x198, Size: 0x10]

--------------------------------
Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 0x20]
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 0x40]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 0x10]
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 0x1]
	enum FinalChannel;//[Offset: 0xb1, Size: 0x1]
	GameplayTagContainer SourceTagFilter;//[Offset: 0xb8, Size: 0x20]
	GameplayTagContainer TargetTagFilter;//[Offset: 0xd8, Size: 0x20]

--------------------------------
Class: GameplayEffectAttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38]
	enum AttributeSource;//[Offset: 0x38, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: CustomCalculationBasedFloat
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 0x20]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0x355e312cd041

--------------------------------
Class: GameplayEffectCalculation.Object
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GameplayEffectSpec
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 0x28]
	float Duration;//[Offset: 0x50, Size: 0x4]
	float Period;//[Offset: 0x54, Size: 0x4]
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 0x4]
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 0x88]
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 0x88]
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 0x20]
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 0x20]
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 0x10]
	int StackCount;//[Offset: 0x1c0, Size: 0x4]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 0x18]
	float Level;//[Offset: 0x290, Size: 0x4]

--------------------------------
Class: GameplayEffectModifiedAttribute
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	float TotalMagnitude;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GameplayEffectAttributeCaptureSpecContainer
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10]
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: GameplayEffectAttributeCaptureSpec
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: TagContainerAggregator
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: GameplayAbilitySpecDef
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 0x8]
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 0x20]
	int InputID;//[Offset: 0x28, Size: 0x4]
	enum RemovalPolicy;//[Offset: 0x2c, Size: 0x1]
	Object* SourceObject;//[Offset: 0x30, Size: 0x8]
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameplayModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 0x20]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x60, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x208, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x210, Size: 0x50]
	GameplayTagRequirements TargetTags;//[Offset: 0x260, Size: 0x50]

--------------------------------
Class: GameplayModEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: GameplayTagRequirements
	enum RequireTagCheckRule;//[Offset: 0x0, Size: 0x1]
	GameplayTagContainer RequireTags;//[Offset: 0x8, Size: 0x20]
	enum IgnoreTagCheckRule;//[Offset: 0x28, Size: 0x1]
	GameplayTagContainer IgnoreTags;//[Offset: 0x30, Size: 0x20]

--------------------------------
Class: GameplayEffectExecutionDefinition
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 0x20]
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 0x10]
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0x355d312cd041

--------------------------------
Class: GameplayEffectCustomExecutionParameters

--------------------------------
Class: GameplayEffectCustomExecutionOutput
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 0x10]
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: GameplayModifierEvaluatedData
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	float Magnitude;//[Offset: 0x3c, Size: 0x4]
	ActiveGameplayEffectHandle Handle;//[Offset: 0x40, Size: 0x8]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ActiveGameplayEffectHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: GameplayEffectExecutionScopedModifierInfo
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 0x40]
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 0x8]
	enum AggregatorType;//[Offset: 0x48, Size: 0x1]
	byte ModifierOp;//[Offset: 0x49, Size: 0x1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1f8, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x200, Size: 0x50]
	GameplayTagRequirements TargetTags;//[Offset: 0x250, Size: 0x50]

--------------------------------
Class: ConditionalGameplayEffect
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: GameplayEffectCustomApplicationRequirement.Object
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0x355c312cd041

--------------------------------
Class: GameplayEffectCue
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 0x38]
	float MinLevel;//[Offset: 0x38, Size: 0x4]
	float MaxLevel;//[Offset: 0x3c, Size: 0x4]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: GameplayEffectUIData.Object

--------------------------------
Class: InheritedTagContainer
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer Added;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: GameplayEffectQuery
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 0x10]
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 0x48]
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 0x48]
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 0x48]
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 0x38]
	Object* EffectSource;//[Offset: 0x130, Size: 0x8]
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 0x8]

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10]
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	FString AutoDescription;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: AbilityTriggerData
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 0x8]
	byte TriggerSource;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GameplayEffectSpecHandle

--------------------------------
Class: GameplayAbilityActorInfo
	Actor* OwnerActor;//[Offset: 0x8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x10, Size: 0x8]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 0x8]
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 0x8]
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 0x8]
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: GameplayCueParameters
	float NormalizedMagnitude;//[Offset: 0x0, Size: 0x4]
	float RawMagnitude;//[Offset: 0x4, Size: 0x4]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18]
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 0x8]
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 0x8]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 0xc]
	Actor* Instigator;//[Offset: 0x88, Size: 0x8]
	Actor* EffectCauser;//[Offset: 0x90, Size: 0x8]
	Object* SourceObject;//[Offset: 0x98, Size: 0x8]
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 0x8]
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 0x4]
	int AbilityLevel;//[Offset: 0xac, Size: 0x4]
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x1208312cd041
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x1207312cd041
	void EndTask();// 0x1206312cd041

--------------------------------
Class: GameplayAbilityLocalAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityLocalAnimMontage LocalMontageInfo;//[Offset: 0x8, Size: 0x30]

--------------------------------
Class: GameplayAbilityLocalAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]
	GameplayAbility* AnimatingAbility;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: GameplayAbilityRepAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityRepAnimMontage RepMontageInfo;//[Offset: 0x8, Size: 0x38]

--------------------------------
Class: GameplayAbilityRepAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	float BlendTime;//[Offset: 0x10, Size: 0x4]
	byte NextSectionID;//[Offset: 0x14, Size: 0x1]
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	byte SectionIdToPlay;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: SolarMetaAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData Damage;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData ShieldDamage;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SolarAttributeSet.AttributeSet.Object
	void K2_SetAttributeValue(FName AttributeName, float NewVal);// 0x3d0b312cd041
	void K2_OnReplicationAttribute(out const GameplayAttributeData OldValue, out const GameplayAttributeData ReplicatedAttribute, FName AttributeName);// 0x3d0a312cd041
	void K2_InitAttributeValue(out GameplayAttributeData OriginAttribute, float NewVal);// 0x3d09312cd041
	float K2_GetAttributeValue(out const GameplayAttributeData OriginAttribute);// 0x3d08312cd041
	GameplayAttribute K2_GetAttribute(FName AttributeName);// 0x3d07312cd041

--------------------------------
Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x8, Size: 0x4]
	float CurrentValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MetaAttributeUpdateEvent
	int TypeID;//[Offset: 0x8, Size: 0x4]
	SolarAbilitySystemComponent* TargetASC;//[Offset: 0x10, Size: 0x8]
	SolarMetaAttributeSet* MetaAttributeSet;//[Offset: 0x18, Size: 0x8]
	GameplayAttribute MetaAttribute;//[Offset: 0x20, Size: 0x38]
	float MetaAttributeValue;//[Offset: 0x58, Size: 0x4]
	MetaAttributeProduceEffect[] Effects;//[Offset: 0x60, Size: 0x10]
	MetaAttributeUpdateEvent_Character CharacterEventData;//[Offset: 0x70, Size: 0x3]

--------------------------------
Class: MetaAttributeProduceEffect
	SolarAttributeSet* EffectAttributeSet;//[Offset: 0x0, Size: 0x8]
	GameplayAttribute EffectAttribute;//[Offset: 0x8, Size: 0x38]
	float EffectValue;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MetaAttributeUpdateEvent_Character
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: ServerAbilityRPCBatch
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 0x4]
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 0x18]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x20, Size: 0x28]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]

--------------------------------
Class: GameplayEffectSpecForRPC
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 0x18]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	float Level;//[Offset: 0x70, Size: 0x4]
	float AbilityLevel;//[Offset: 0x74, Size: 0x4]

--------------------------------
Class: GameplayAbilityTargetActor.Actor.Object
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x230, Size: 0x60]
	PlayerController* MasterPC;//[Offset: 0x2c0, Size: 0x8]
	GameplayAbility* OwningAbility;//[Offset: 0x2c8, Size: 0x8]
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	Actor* SourceActor;//[Offset: 0x2d8, Size: 0x8]
	WorldReticleParameters ReticleParams;//[Offset: 0x2e0, Size: 0xc]
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x2f0, Size: 0x8]
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x2f8, Size: 0x10]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	AbilitySystemComponent* GenericDelegateBoundASC;//[Offset: 0x320, Size: 0x8]
	void ConfirmTargeting();// 0x3547312cd041
	void CancelTargeting();// 0x3546312cd041

--------------------------------
Class: WorldReticleParameters
	Vector AOEScale;//[Offset: 0x0, Size: 0xc]

--------------------------------
Class: GameplayAbilityWorldReticle.Actor.Object
	WorldReticleParameters Parameters;//[Offset: 0x228, Size: 0xc]
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236, Size: 0x1]
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x237, Size: 0x1]
	PlayerController* MasterPC;//[Offset: 0x238, Size: 0x8]
	Actor* TargetingActor;//[Offset: 0x240, Size: 0x8]
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0x354d312cd041
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0x354c312cd041
	void OnValidTargetChanged(bool bNewValue);// 0x354b312cd041
	void OnTargetingAnActor(bool bNewValue);// 0x354a312cd041
	void OnParametersInitialized();// 0x3549312cd041
	void FaceTowardSource(bool bFaceIn2D);// 0x3548312cd041

--------------------------------
Class: GameplayTargetDataFilterHandle

--------------------------------
Class: GameplayAbilitySpecContainer.FastArraySerializer
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]

--------------------------------
Class: GameplayAbilitySpec.FastArraySerializerItem
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 0x4]
	GameplayAbility* Ability;//[Offset: 0x10, Size: 0x8]
	int Level;//[Offset: 0x18, Size: 0x4]
	int InputID;//[Offset: 0x1c, Size: 0x4]
	Object* SourceObject;//[Offset: 0x20, Size: 0x8]
	byte ActiveCount;//[Offset: 0x28, Size: 0x1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 0x20]
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x50, Size: 0x10]
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x60, Size: 0x10]
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ActiveGameplayEffectsContainer.FastArraySerializer
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x138, Size: 0x10]
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x458, Size: 0x10]

--------------------------------
Class: ActiveGameplayEffect.FastArraySerializerItem
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 0x298]
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 0x18]
	float StartServerWorldTime;//[Offset: 0x2c8, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0x2cc, Size: 0x4]
	float StartWorldTime;//[Offset: 0x2d0, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]

--------------------------------
Class: ActiveGameplayCueContainer.FastArraySerializer
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 0x8]

--------------------------------
Class: ActiveGameplayCue.FastArraySerializerItem
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 0x8]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	GameplayCueParameters Parameters;//[Offset: 0x30, Size: 0xc0]
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: MinimalReplicationTagCountMap
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: ReplicatedPredictionKeyMap.FastArraySerializer
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: ReplicatedPredictionKeyItem.FastArraySerializerItem
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: SolarAnimInstance.AnimInstance.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x268, Size: 0x8]
	byte OwnerRole;//[Offset: 0x270, Size: 0x1]
	FName LeftHandIKSocketName;//[Offset: 0x27c, Size: 0x8]
	FName RightHandWeaponSocketName;//[Offset: 0x284, Size: 0x8]
	Transform LeftHandIKSocket2BoneTrans;//[Offset: 0x290, Size: 0x30]
	Vector LeftHandEffectorLocation;//[Offset: 0x2c0, Size: 0xc]
	Rotator LeftHandEffectorRotation;//[Offset: 0x2cc, Size: 0xc]
	Vector CurrentLeftHandJointLocation;//[Offset: 0x2fc, Size: 0xc]
	Vector RightHandEffectorLocation;//[Offset: 0x308, Size: 0xc]
	Vector RightHandJointLocation;//[Offset: 0x314, Size: 0xc]
	float LeftIKHandWeight;//[Offset: 0x320, Size: 0x4]
	float CurrentReloadTimeRate;//[Offset: 0x324, Size: 0x4]
	float CurrentSwitchWeaponTimeRate;//[Offset: 0x328, Size: 0x4]
	float CurrentBoltTimeRate;//[Offset: 0x32c, Size: 0x4]
	bool IsJog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	float ViewPitch;//[Offset: 0x334, Size: 0x4]
	float ViewYaw;//[Offset: 0x338, Size: 0x4]
	float SimulatedProxyViewSmoothSpeed;//[Offset: 0x33c, Size: 0x4]
	BlendSpace* FireTPPBlendSpace;//[Offset: 0x348, Size: 0x8]
	float FireTPPBlendSpaceX;//[Offset: 0x350, Size: 0x4]
	float FIreTPPBlendSpaceY;//[Offset: 0x354, Size: 0x4]
	float MinSwimSpeed;//[Offset: 0x358, Size: 0x4]
	float Direction;//[Offset: 0x35c, Size: 0x4]
	float Speed;//[Offset: 0x360, Size: 0x4]
	float InputDirection;//[Offset: 0x364, Size: 0x4]
	byte IdleTurnType;//[Offset: 0x368, Size: 0x1]
	float TurnExplicitTime;//[Offset: 0x36c, Size: 0x4]
	float DamageDirection;//[Offset: 0x370, Size: 0x4]
	float DamageReactionAlpha;//[Offset: 0x374, Size: 0x4]
	float DamageNomalizeTime;//[Offset: 0x378, Size: 0x4]
	LeftHandGripConfig CurrentGripData;//[Offset: 0x484, Size: 0x84]
	float Fire2PlayRateStand;//[Offset: 0x58c, Size: 0x4]
	float Fire2PlayRateCrouch;//[Offset: 0x590, Size: 0x4]
	bool bHoldingShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 0x1]
	bool ShieldRechargeIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 0x1]
	float FallingInputScale;//[Offset: 0x5cc, Size: 0x4]
	Vector IKOffsetLeftFootVector;//[Offset: 0x5d0, Size: 0xc]
	Vector IKOffsetRightFootVector;//[Offset: 0x5dc, Size: 0xc]
	Vector JointTargetLeftFootVector;//[Offset: 0x5e8, Size: 0xc]
	Vector JointTargetRightFootVector;//[Offset: 0x5f4, Size: 0xc]
	Rotator LeftFootRotation;//[Offset: 0x600, Size: 0xc]
	Rotator RightFootRotation;//[Offset: 0x60c, Size: 0xc]
	Vector HipOffsetVector;//[Offset: 0x618, Size: 0xc]
	float FootIKTraceDistanceRate;//[Offset: 0x624, Size: 0x4]
	float CrouchFootIKTraceDistanceRate;//[Offset: 0x628, Size: 0x4]
	float FootIKInterpSpeed;//[Offset: 0x62c, Size: 0x4]
	FName LeftFootSocket;//[Offset: 0x630, Size: 0x8]
	FName RightFootSocket;//[Offset: 0x638, Size: 0x8]
	bool AnimParam_LeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 0x1]
	bool bNeedJetLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x641, Size: 0x1]
	float LandingBlendWeight;//[Offset: 0x644, Size: 0x4]
	float DefaultLeftHandWeaponAttachingBlendTime;//[Offset: 0x648, Size: 0x4]
	float DefaultLeftHandWeaponDetachingBlendTime;//[Offset: 0x64c, Size: 0x4]
	float CurrentLeftHandWeaponAttachingBlendTime;//[Offset: 0x650, Size: 0x4]
	float CurrentLeftHandWeaponDetachingBlendTime;//[Offset: 0x654, Size: 0x4]
	float FootIKEnableDelayTime;//[Offset: 0x680, Size: 0x4]
	bool bActiveFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 0x1]
	float FlailRate;//[Offset: 0x6b8, Size: 0x4]
	float ConfigPitchToZeroTime;//[Offset: 0x6bc, Size: 0x4]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeX;//[Offset: 0x6c0, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeY;//[Offset: 0x6c8, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeZ;//[Offset: 0x6d0, Size: 0x8]
	float JetPack2PoseRestoreSmoothSpeed;//[Offset: 0x6d8, Size: 0x4]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeX;//[Offset: 0x6dc, Size: 0x8]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeY;//[Offset: 0x6e4, Size: 0x8]
	bool bNewJet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fa, Size: 0x1]
	bool bIsJetFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fb, Size: 0x1]
	int DesirePeekDir;//[Offset: 0x6fc, Size: 0x4]
	float PeekSpeed;//[Offset: 0x700, Size: 0x4]
	float PeekDirection;//[Offset: 0x704, Size: 0x4]
	bool bEnableDamageReact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x708, Size: 0x1]
	bool bEnableWeaponAdditiveA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x708, Size: 0x1]
	bool bEnableHandIK;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x708, Size: 0x1]
	bool bEnableFootIK;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x708, Size: 0x1]
	bool bEnableWeaponAdditiveB;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x708, Size: 0x1]
	bool bEnableWeaponJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x708, Size: 0x1]
	byte MaxLODDamageReact;//[Offset: 0x709, Size: 0x1]
	byte MaxLODWeaponAdditiveA;//[Offset: 0x70a, Size: 0x1]
	byte MaxLODHandIK;//[Offset: 0x70b, Size: 0x1]
	byte MaxLODFootIK;//[Offset: 0x70c, Size: 0x1]
	byte MaxLODWeaponAdditiveB;//[Offset: 0x70d, Size: 0x1]
	byte MaxLODWeaponJitter;//[Offset: 0x70e, Size: 0x1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70f, Size: 0x1]
	float DeathAnimStartPosition;//[Offset: 0x710, Size: 0x4]
	<enum,class AnimInstance> SpecAnimBPs;//[Offset: 0x718, Size: 0x50]
	bool bIsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x768, Size: 0x1]
	bool bIsCrouching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x768, Size: 0x1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x768, Size: 0x1]
	bool bIsFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x768, Size: 0x1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x768, Size: 0x1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x768, Size: 0x1]
	bool bIsSixDirRunForward;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x768, Size: 0x1]
	enum CurrentWalkMode;//[Offset: 0x769, Size: 0x1]
	enum LastWalkMode;//[Offset: 0x76a, Size: 0x1]
	enum CurrentAirMoveMode;//[Offset: 0x76b, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x76c, Size: 0x1]
	enum CurrentCruiseState;//[Offset: 0x76d, Size: 0x1]
	AnimSequence* CruiseStartSequence;//[Offset: 0x770, Size: 0x8]
	AnimSequence* CruiseLoopSequence;//[Offset: 0x778, Size: 0x8]
	AnimSequence* CruiseEndSequence;//[Offset: 0x780, Size: 0x8]
	float MinSpeedForSkydiveFlyingInputBonus;//[Offset: 0x788, Size: 0x4]
	float MaxSpeedForSkydiveFlyingInputBonus;//[Offset: 0x78c, Size: 0x4]
	float InputYThresholdToCalcInputYByCamera;//[Offset: 0x790, Size: 0x4]
	float MinDeltaYawFromCameraToGetMaxInputY;//[Offset: 0x794, Size: 0x4]
	enum CurrentSkydiveStage;//[Offset: 0x798, Size: 0x1]
	enum WeaponStatus;//[Offset: 0x799, Size: 0x1]
	bool bIsBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79a, Size: 0x1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79a, Size: 0x1]
	bool bIsLeftHandDetaching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x79a, Size: 0x1]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x79a, Size: 0x1]
	enum CurrentSkillAnimType;//[Offset: 0x79b, Size: 0x1]
	void OnMontagePlayEnded(AnimMontage* Montage, bool bInterrupted);// 0x44e1312cd041
	bool NeedResolveWeaponJitter();// 0x44e0312cd041
	bool JetPack2IsDashingCompletelyOver();// 0x44df312cd041
	bool IsHoldingWeapon();// 0x44de312cd041
	bool IsAiming();// 0x44dd312cd041
	bool HasMatchingGameplayTag(GameplayTag GameplayTag);// 0x44dc312cd041
	bool HasAnyMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x44db312cd041
	bool HasAllMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x44da312cd041
	Vector2D GetSkydiveFlyingInput();// 0x44d9312cd041
	int GetOwnerGroupID();// 0x44d8312cd041
	Vector GetJetPackDashAnimationBlend();// 0x44d7312cd041
	Vector GetInputVector();// 0x44d6312cd041
	Vector GetFallingInputVector();// 0x44d5312cd041
	float GenJumpDirection(float InInputDirection);// 0x44d4312cd041
	float GenBackwardDirection(float InInputDirection);// 0x44d3312cd041
	bool CheckNewJetAndReset();// 0x44d2312cd041

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: LeftHandGripConfig
	Rotator HandL;//[Offset: 0x0, Size: 0xc]
	Rotator Thumbl01;//[Offset: 0xc, Size: 0xc]
	Rotator Thumbl02;//[Offset: 0x18, Size: 0xc]
	Rotator Index01;//[Offset: 0x24, Size: 0xc]
	Rotator Index02;//[Offset: 0x30, Size: 0xc]
	Rotator Middle01;//[Offset: 0x3c, Size: 0xc]
	Rotator Middle02;//[Offset: 0x48, Size: 0xc]
	Rotator Ring01;//[Offset: 0x54, Size: 0xc]
	Rotator Ring02;//[Offset: 0x60, Size: 0xc]
	Rotator Pinky01;//[Offset: 0x6c, Size: 0xc]
	Rotator Pinky02;//[Offset: 0x78, Size: 0xc]

--------------------------------
Class: JetPackPoseSpeedRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CharacterSoundConfig.DataAsset.Object
	<enum,FString> SoundEventTable;//[Offset: 0x30, Size: 0x50]
	<FName,SoundGroupBase*> SoundGroupTable;//[Offset: 0x80, Size: 0x50]
	Transform DefaultTransform;//[Offset: 0xd0, Size: 0x30]

--------------------------------
Class: SoundGroupBase.Object

--------------------------------
Class: SolarPile.SolarMapElementBase.Actor.Object
	StaticMeshComponent* NormalMesh;//[Offset: 0x2b0, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x2b8, Size: 0x8]
	ActorComponent*[] ExtraChargingVFXComps;//[Offset: 0x2c0, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2d0, Size: 0x4]
	enum Channel;//[Offset: 0x2ec, Size: 0x1]
	enum PileType;//[Offset: 0x2ed, Size: 0x1]
	int Zone;//[Offset: 0x2f0, Size: 0x4]
	float MaxEnergy;//[Offset: 0x2f4, Size: 0x4]
	float PowerRecoveryCD;//[Offset: 0x2f8, Size: 0x4]
	float PowerRecoveryFrequency;//[Offset: 0x2fc, Size: 0x4]
	float PowerRecoveryQuantity;//[Offset: 0x300, Size: 0x4]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	bool bCanRecover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 0x1]
	bool bIsActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307, Size: 0x1]
	int Level;//[Offset: 0x308, Size: 0x4]
	bool bIsLosingEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	int OwnerTeam;//[Offset: 0x310, Size: 0x4]
	SolarCharacter* OwnerCharacter;//[Offset: 0x314, Size: 0x8]
	ChargingInfo defaultChargingInfo;//[Offset: 0x320, Size: 0x30]
	ChargingInfo[] ChargingInfoList;//[Offset: 0x350, Size: 0x10]
	float CurrentEnergy;//[Offset: 0x360, Size: 0x4]
	float SphereRadius;//[Offset: 0x368, Size: 0x4]
	TimerHandle RecoveryHandle;//[Offset: 0x370, Size: 0x8]
	TimerHandle ServerChargingTimerHandle;//[Offset: 0x380, Size: 0x8]
	TimerHandle ClientChargingTimerHandle;//[Offset: 0x388, Size: 0x8]
	ParticleSystemComponent*[] ChargeParticleEffects;//[Offset: 0x390, Size: 0x10]
	AkComponent* AkAudioComponent;//[Offset: 0x3a0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x3a8, Size: 0x8]
	bool bEnableHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 0x1]
	float MaxHealth;//[Offset: 0x3b4, Size: 0x4]
	float ReducedHealth;//[Offset: 0x3b8, Size: 0x4]
	float CurrentHealth;//[Offset: 0x3bc, Size: 0x4]
	float TweenTimeSpeed;//[Offset: 0x3c0, Size: 0x4]
	float RestTweenTime;//[Offset: 0x3c4, Size: 0x4]
	float TargetOpacity;//[Offset: 0x3c8, Size: 0x4]
	float CurrentOpacity;//[Offset: 0x3cc, Size: 0x4]
	float OpacityTweenTime;//[Offset: 0x3d0, Size: 0x4]
	MaterialInstanceDynamic* DynamicMatChargingCircle;//[Offset: 0x3d8, Size: 0x8]
	ChargingPilePreset ChargingPilePreset;//[Offset: 0x3e0, Size: 0x150]
	StaticMeshComponent* RangeRingMeshComp;//[Offset: 0x530, Size: 0x8]
	StaticMeshComponent* ChargeCircleMeshComp;//[Offset: 0x538, Size: 0x8]
	bool bCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	void ToggleExtraChargingVFX(bool Toggle);// 0x460f312cd041
	void SetIsActivated(bool bActivated);// 0x460e312cd041
	void RemoveChargeParticle(SolarCharacter* InCharacter);// 0x460d312cd041
	void RemoveAllEffects();// 0x460c312cd041
	void ReceivePileExpired();// 0x460b312cd041
	void ReceiveEnergyChanged();// 0x460a312cd041
	void ReceiveChargingPileInitialize();// 0x4609312cd041
	void ReceiveCharacterShowEffect(const Actor* Other);// 0x4608312cd041
	void ReceiveCharacterHideEffect(const Actor* Other);// 0x4607312cd041
	void PlaySkillStartSound();// 0x4606312cd041
	void PlaySkillEndSound();// 0x4605312cd041
	void PlayRecoveryAnim(bool bStart);// 0x4604312cd041
	void PlayChargingAnimation(bool Reverse);// 0x4603312cd041
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4602312cd041
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4601312cd041
	void OnRep_IsLosingEnergyChanged();// 0x4600312cd041
	void OnRep_Energy();// 0x45ff312cd041
	void OnRep_Enable();// 0x45fe312cd041
	void OnRep_CurrentHealth();// 0x45fd312cd041
	void OnRep_ChargingInfoListChanged();// 0x45fc312cd041
	void OnRep_CanRecover();// 0x45fb312cd041
	void OnRep_Broken();// 0x45fa312cd041
	void OnRefreshRangeRing();// 0x45f9312cd041
	void OnRefreshChargeCircle(const bool InCharging);// 0x45f8312cd041
	void OnCharacterBatteryIdChanged(SolarCharacter* InCharacter, float Frequency, float Quantity);// 0x45f7312cd041
	bool IsCharacterInRange(SolarCharacter* InCharacter);// 0x45f6312cd041
	bool IsAnyCharacterInRange();// 0x45f5312cd041
	ChargingInfo GetChargingInfoByCharacter(SolarCharacter* Character);// 0x45f4312cd041
	void GameStatisticsChargingPile(out ChargingInfo ChargingInfo, int pileLevel, Vector Location, float energyUse);// 0x45f3312cd041
	void CreateChargeParticle(SolarCharacter* InCharacter);// 0x45f2312cd041
	void ChangeColor();// 0x45f1312cd041
	bool CanWork();// 0x45f0312cd041

--------------------------------
Class: SolarMapElementBase.Actor.Object
	FString Side;//[Offset: 0x238, Size: 0x10]
	FString Job;//[Offset: 0x248, Size: 0x10]
	FString ElementID;//[Offset: 0x258, Size: 0x10]
	enum Type;//[Offset: 0x268, Size: 0x1]
	enum State;//[Offset: 0x269, Size: 0x1]
	enum Visibility;//[Offset: 0x26a, Size: 0x1]
	class SolarGameMode_HandleElementRPC* BP_HandleActorRPC;//[Offset: 0x270, Size: 0x8]
	FName ElementTypeName;//[Offset: 0x278, Size: 0x8]
	FString GroupKey;//[Offset: 0x280, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0x290, Size: 0x1]
	void SetElementVisibility(const enum NewType);// 0x4039312cd041
	enum SetElementState(const enum NewState);// 0x4038312cd041
	void OnRep_ElementVisibility();// 0x4037312cd041
	void OnRep_ElementState();// 0x4036312cd041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x4035312cd041
	void OnElementStateChanged(const enum CurrentState);// 0x4034312cd041

--------------------------------
Class: SolarGameMode_HandleElementRPC.ActorComponent.Object
	FName ComponentTagName;//[Offset: 0xb0, Size: 0x8]
	void OnRep_ComponentName();// 0x4795312cd041

--------------------------------
Class: ChargingInfo
	SolarCharacter* Ch;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
	float LastChargeTime;//[Offset: 0xc, Size: 0x4]
	bool bShowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float Quantity;//[Offset: 0x14, Size: 0x4]
	float Frequency;//[Offset: 0x18, Size: 0x4]
	enum PileHealingType;//[Offset: 0x1c, Size: 0x1]
	float TotalChargeEnergy;//[Offset: 0x20, Size: 0x4]
	SolarBackpackComponent* BackpackComponent;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SolarBackpackComponent.ActorComponent.Object
	float DeathBoxEnergyRate;//[Offset: 0xb8, Size: 0x4]
	float RebirthEnergyRate;//[Offset: 0xbc, Size: 0x4]
	delegate OnWeaponCreateCompleteDelegate;//[Offset: 0xc8, Size: 0x10]
	float InitialSolarCharge;//[Offset: 0x150, Size: 0x4]
	float SolarChargeInterval;//[Offset: 0x154, Size: 0x4]
	float InitialEnergyLimit;//[Offset: 0x158, Size: 0x4]
	float InitialExtraEnergyLimit;//[Offset: 0x15c, Size: 0x4]
	float InitialExtraEnergyCharge;//[Offset: 0x160, Size: 0x4]
	float InitialChargeCD;//[Offset: 0x164, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0x178, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x17c, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0x180, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0x184, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0x188, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0x18c, Size: 0x4]
	float JetPackVerticalDashSpeedScale;//[Offset: 0x220, Size: 0x4]
	float JetPackHorizontalDashSpeedScale;//[Offset: 0x224, Size: 0x4]
	<int,class GameplayAbility> ItemAbilities;//[Offset: 0x228, Size: 0x50]
	<int,GameplayAbilitySpecHandle> GivenAbilityHandles;//[Offset: 0x278, Size: 0x50]
	bool bWeaponPartPickable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	<int,int> defaultDeathBoxEnergyConfig;//[Offset: 0x320, Size: 0x50]
	<int,DateTime> DroppedItemIDMap;//[Offset: 0x370, Size: 0x50]
	float DiscardItemDelayNoticeTime;//[Offset: 0x3c0, Size: 0x4]
	float[] GradeRankProportion;//[Offset: 0x3c8, Size: 0x10]
	int[] InitialGridNum;//[Offset: 0x3d8, Size: 0x10]
	int[] CustomMode_Hunt_InitialGridNum;//[Offset: 0x3e8, Size: 0x10]
	void WeaponCreateCompleteDelegate__DelegateSignature(byte SlotType, SolarPlayerWeapon* WeaponPtr, SolarBackpackComponent* SolarBackpackComponent);// 0x1ab5312cd041
	void UpdateCurrentExtraEnergy(float UpdateValue, enum Usage);// 0x1ab4312cd041
	void UpdateCurrentEnergy(float UpdateValue, enum Usage);// 0x1ab3312cd041
	void UpdateConsumeSlotUI();// 0x1ab2312cd041
	bool TryTriggerAbility(const int InItemID);// 0x1ab1312cd041
	void TrySendDropItemTips(const int InDroppedItemID);// 0x1ab0312cd041
	float TakeDeathBoxEnergy();// 0x1aaf312cd041
	int SupportWeaponSlotNum();// 0x1aae312cd041
	void StartCheckTutorials();// 0x1aad312cd041
	void SmoothEnergy(const float Amount);// 0x1aac312cd041
	void SetSettlementsOnServer();// 0x1aab312cd041
	void SetRequirementBySetting();// 0x1aaa312cd041
	void SetMaxPileMap(int ItemID, int MaxNum);// 0x1aa9312cd041
	void SetBoxCharging(bool bSet);// 0x1aa8312cd041
	void SetBackPackGM(enum gmtypy, int ID, int Num, int Slot);// 0x1aa7312cd041
	bool ServerUseItem(int ItemID, int Num);// 0x1aa6312cd041
	void ServerSwapBagGrid(int FromGrade, int FromGridIndex, int TargetGrade, int TargetIndex);// 0x1aa5312cd041
	void ServerSetJetPackModule(int NewJetPackModuleID, bool bForVertical);// 0x1aa4312cd041
	void ServerSetEnergyState(enum State);// 0x1aa3312cd041
	bool ServerSendOutItem(int ItemID, int Num);// 0x1aa2312cd041
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x1aa1312cd041
	void ServerRPCUpgradeShield();// 0x1aa0312cd041
	void ServerRPCUnLockBagGrid(const int Grade, const int NewUnLockNum);// 0x1a9f312cd041
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x1a9e312cd041
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x1a9d312cd041
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x1a9c312cd041
	void ServerRPCSwapBagGridLuaCall(int FromGrade, int FromGridIndex, int TargetGrade, int TargetIndex);// 0x1a9b312cd041
	void ServerRPCSwapBagGrid(const int FromGrade, const int FromGridIndex, const int TargetGrade, const int TargetIndex);// 0x1a9a312cd041
	void ServerRPCSetSettlements_Implementation();// 0x1a99312cd041
	void ServerRPCSetBagRequirementArr(out const BagRequirementData[] BagRequirements);// 0x1a97312cd041
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x1a96312cd041
	void ServerRPCInitSettlementNeedRankArr();// 0x1a95312cd041
	void ServerRPCInitBagGradeData();// 0x1a94312cd041
	void ServerRPCFixBagGrid(const int InGrade, const int InGridIndex);// 0x1a93312cd041
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x1a92312cd041
	void ServerRPCDisCardWeaponLuaCall(int Slot);// 0x1a91312cd041
	void ServerRPCDiscardWeapon(const int InSlot);// 0x1a90312cd041
	void ServerRPCDisCardItemUICall(int ID, int Num);// 0x1a8f312cd041
	void ServerRPCDiscardItem(const int InItemID, const int InItemNum);// 0x1a8e312cd041
	void ServerRPCDisCardHomeItemLuaCall(int Grade, int gridIndex);// 0x1a8d312cd041
	void ServerRPCDiscardHomeItem(const int Grade, const int gridIndex);// 0x1a8c312cd041
	void ServerRPCArrangeBag();// 0x1a8b312cd041
	void ServerPickUpHomeItemsGM(const int InItemID, const int InItemNum);// 0x1a8a312cd041
	bool ServerPickUpHomeItems(int ItemID, bool isAutoPick);// 0x1a89312cd041
	int ServerGetDefaultGridNum(int Grade);// 0x1a88312cd041
	void ServerFixBagGrid(int Grade, int gridIndex);// 0x1a87312cd041
	bool ServerDiscardWeapon(const int Slot, const int InTriggerType);// 0x1a86312cd041
	bool ServerDiscardHomeItem(int Grade, int gridIndex);// 0x1a85312cd041
	bool ServerDiscardFromBackpackByType(const enum ItemType, const bool InDropItem, const int InTriggerType);// 0x1a84312cd041
	bool ServerDiscardFromBackpack(const int ItemID, const int Num, const bool InDropItem, const int InTriggerType);// 0x1a83312cd041
	void ServerConsumeExtraEnergy(const float Amount, const enum Usage);// 0x1a82312cd041
	void ServerConsumeEnergy(const float Amount, const enum Usage);// 0x1a81312cd041
	void ServerClearJetModule();// 0x1a80312cd041
	void ServerClearEnergyState(enum State);// 0x1a7e312cd041
	void ServerClearAllItems();// 0x1a7d312cd041
	void ServerBackpackGM(const enum InGmType, const int InItemID, const int InItemNum, const int InSlot);// 0x1a7b312cd041
	void ServerArrangeBag();// 0x1a7a312cd041
	bool ServerAddWeaponToWeaponSysByDataCache(const byte SlotType, out const SolarItemData WeaponData, const bool bDestroyPrev, const bool IsAutoPickup, const int InTriggerType, SolarPlayerWeapon* WeaponActorExists);// 0x1a79312cd041
	int ServerAddToItemMapByIdAndNumForced(const int ItemID, const int Num);// 0x1a78312cd041
	int ServerAddToItemMap(SolarItemData ItemData);// 0x1a77312cd041
	void ServerAddToEquipMap(out const SolarItemData ItemData, bool Bydefault, bool InDropItem);// 0x1a76312cd041
	int ServerAddToBackpackByIdAndNum(const int ItemID, const int Num, const bool Bydefault, const float CurValue, const bool NeedReset, const int UserId, const int TriggerType);// 0x1a75312cd041
	int ServerAddToBackpack(out const SolarItemData ItemData, const bool Bydefault, const int TriggerType);// 0x1a74312cd041
	bool ServerAddHomeItemToBagGrid(int ItemID, int Grade, int gridIndex);// 0x1a73312cd041
	void ReqUseEnergy(float Amount, enum Usage);// 0x1a72312cd041
	void RequestWeaponReplaceNotice(int OldWeaponItemId, int CurWeaponItemId, int OldWeaponLevel, int CurWeaponLevel);// 0x1a71312cd041
	void RequestWeaponPartReplaceNotice(const int OldWeaponPartId, const int NewWeaponPartId);// 0x1a70312cd041
	void RequestUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x1a6f312cd041
	void RequestUpgradeShield();// 0x1a6e312cd041
	void RequestEquipReplaceNotice(int OldEquipItemId, int CurEquipItemId, int EquipType);// 0x1a6d312cd041
	void ReqesutPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x1a6c312cd041
	void RefreshWeaponPartsInBackPackUI();// 0x1a6b312cd041
	void RefreshWeaponInBackPackUIInternal();// 0x1a6a312cd041
	void RefreshWeaponInBackPackUI();// 0x1a69312cd041
	void RefreshItemInBackPackUI();// 0x1a68312cd041
	void RefreshHomeItemBackPackUI();// 0x1a67312cd041
	void RefreshEquipInBackPackUI();// 0x1a66312cd041
	void RefreshBackPackUIState();// 0x1a65312cd041
	void PurchaseEShopItemsResponse_Implementation(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x1a64312cd041
	int PredictEnergy(const float Amount);// 0x1a63312cd041
	void OnUnLockGrid(int Grade);// 0x1a62312cd041
	void OnReceiveItemAbilityCoolDown(out const GameplayTag Tags, const bool bAdd);// 0x1a61312cd041
	void OnGameModeGlobalSettingChanged(GameModeGlobalSetting* InNewSettings);// 0x1a60312cd041
	void OnDayNightChange(const int ID);// 0x1a5f312cd041
	bool NetUseEnergy(float InCostEnergy, enum Usage);// 0x1a5e312cd041
	void NetTakeWeaponPartToBagLuaCall(const int Slot, const int WeaponPartType);// 0x1a5d312cd041
	void NetTakeBagPartToWeaponLuaCall(const int Slot, const int WeaponPartType);// 0x1a5c312cd041
	void NetSwitchWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x1a5b312cd041
	void NetDiscardWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x1a5a312cd041
	bool ModuleOverflow2(int ModuleMax);// 0x1a59312cd041
	bool ModuleOverflow(int ModuleMax);// 0x1a58312cd041
	ReplicateBagGridData[] MergeAllGrade();// 0x1a57312cd041
	void LogBackPackItem();// 0x1a56312cd041
	bool IsReviveItemRecommend();// 0x1a55312cd041
	bool IsReviveItemPickable();// 0x1a54312cd041
	bool IsReviveItem(const int InItemID);// 0x1a53312cd041
	bool IsExtraEnergyID(int ID);// 0x1a52312cd041
	bool IsEquippedWeapon(const int InThisID);// 0x1a51312cd041
	bool IsEquippedOrHasBetterPart(const int PartType, const int Level);// 0x1a50312cd041
	bool IsEnergyID(int ID);// 0x1a4f312cd041
	int IsBetterWeaponThanEquiped(out const SolarItemData InItemData, const int InWeaponLevel, const int InWeaponExp);// 0x1a4e312cd041
	bool IsBetterWeaponForBag(out const SolarItemData InItemData, int InWeaponLevel, int InWeaponExp);// 0x1a4d312cd041
	bool IsBetterScopeForBag(const int PartType, const int Level);// 0x1a4c312cd041
	bool IsBetterPartForBag(const int PartType, const int Level);// 0x1a4b312cd041
	void InitSettlementNeedRankArrOnServer();// 0x1a4a312cd041
	void InitEquipItemUI();// 0x1a49312cd041
	void InitDefaultItem(int ItemID, int Num);// 0x1a48312cd041
	void InitDefaultDayNight(const int GameModeID);// 0x1a47312cd041
	void InitDeathBoxEnergyRate();// 0x1a46312cd041
	void InitBagGradeDataOnServer();// 0x1a45312cd041
	bool HasPickEnoughItem(int ItemID, out int requirementIndex);// 0x1a44312cd041
	bool HasEmptyWeaponSlot();// 0x1a43312cd041
	bool GetWeaponSlotEmpty(int Slot);// 0x1a42312cd041
	bool GetWeaponPartInBagClient(int TargetPartType, out int OutPartLevel, out int OutItemID);// 0x1a41312cd041
	SolarItemData GetWeaponItemDataBySlot(int Slot);// 0x1a40312cd041
	bool GetWeaponDataBySolt(int Slot, out SolarItemData ItemData);// 0x1a3f312cd041
	float GetTotalEnergy();// 0x1a3e312cd041
	float GetQuantityFrom(enum Usage);// 0x1a3d312cd041
	int GetPlayerRank();// 0x1a3c312cd041
	SolarItemData GetNewItemData(int ItemID, int Num);// 0x1a3b312cd041
	int GetNeedRankNumOnServer(int Grade);// 0x1a3a312cd041
	float GetMaxExtraEnergy();// 0x1a39312cd041
	float GetMaxEnergy();// 0x1a38312cd041
	float GetMaxDeathBoxEnergyFromConfig();// 0x1a37312cd041
	bool GetLastNormalGrid(out int outGrade, out int outGridIndex);// 0x1a36312cd041
	int GetItemNumById(int ItemID);// 0x1a35312cd041
	int GetItemMaxPile(int ItemID);// 0x1a34312cd041
	bool GetItemDataByType(enum ItemType, out SolarItemData ItemData);// 0x1a33312cd041
	bool GetItemDataById(int ItemID, out SolarItemData ItemData);// 0x1a32312cd041
	int GetHasUnLockGridNum(int Grade);// 0x1a31312cd041
	float GetFrequencyFrom(enum Usage);// 0x1a30312cd041
	SolarItemData GetEquipItemDataByType(enum ItemType);// 0x1a2f312cd041
	int GetEquipIdByType(enum ItemType);// 0x1a2e312cd041
	int GetDefaultAddGrade();// 0x1a2d312cd041
	int GetDafalutAddGrid(int Grade);// 0x1a2c312cd041
	float GetCurrExtraEnergy();// 0x1a2b312cd041
	SolarItemData GetCurrentWeaponItemData();// 0x1a2a312cd041
	bool GetCurrentWeaponIsOverloading();// 0x1a29312cd041
	void GetCurrentEquipItems(out int[] OutArray);// 0x1a28312cd041
	float GetCurrEnergy();// 0x1a27312cd041
	SolarCharacter* GetCharacterOwner();// 0x1a26312cd041
	byte GetBestSuitSlotForCandidateWeapon(out const SolarItemData WeaponData, const bool IsAutoPickup);// 0x1a24312cd041
	void GetBagGridDatasByGrade(int Grade, out ReplicateBagGridData[] OutBagGridDataArray);// 0x1a21312cd041
	bool GetAnyScopeInBagClient(out int OutPartType, out int OutPartLevel, out int OutItemID);// 0x1a20312cd041
	float GetAbilityRemainingCD(const int InItemID);// 0x1a1f312cd041
	float GetAbilityDuration(const int InItemID);// 0x1a1e312cd041
	void GameStatistics_ItemUseCount(out const SolarItemData InItemData);// 0x1a1d312cd041
	void FixBagGrid(int Grade, int gridIndex);// 0x1a1c312cd041
	void ExecuteGM(FString InStrGM);// 0x1a1b312cd041
	void EquipModuleByID(int ModuleID);// 0x1a1a312cd041
	int EquipModule(const int ID, const float ModuleMax);// 0x1a19312cd041
	void EquipBatteryByID(int BatteryID);// 0x1a18312cd041
	int EquipBattery(const int ID, const float BatteryMax, const float Charge, const float CD);// 0x1a17312cd041
	void DiscardItemAndResetCharacterData(out const SolarItemData DiscardItem, const bool DiscardDataOnly);// 0x1a16312cd041
	void DiscardItem(SolarItemData DiscardItem);// 0x1a12312cd041
	void DelayCheckClearAbility(const int InItemID);// 0x1a11312cd041
	void CompleteWholeRowOnServer(int Grade);// 0x1a10312cd041
	void CommitEnergy(const int ID);// 0x1a0f312cd041
	void ClientWeaponPartReplaceNotice(const int OldWeaponPartId, const int NewWeaponPartId);// 0x1a0e312cd041
	void ClientEquipReplaceNotice(const int OldEquipItemId, const int CurEquipItemId, const int EquipType);// 0x1a0d312cd041
	bool ClearBackpackItemByID(const int InItemID);// 0x1a0c312cd041
	void CheckToGiveAbility(const int InItemID);// 0x1a0b312cd041
	void CheckToClearAbility(const int InItemID);// 0x1a0a312cd041
	bool CheckIsRecWeaponParts(const int ItemID);// 0x1a09312cd041
	bool CheckIsEquippedDifferentScope(const int PartID);// 0x1a08312cd041
	bool CheckCanAutoPickupWeaponPart(const int ItemID);// 0x1a07312cd041
	float ChargeMain(const float Amount, enum Usage);// 0x1a06312cd041
	float ChargeExtra(const float Amount, enum Usage);// 0x1a04312cd041
	void CancelEnergy(const int ID);// 0x1a03312cd041
	bool CanAutoPickupHomeItem(const int InItemID);// 0x1a02312cd041
	bool BatteryOverflow(int BatteryMax);// 0x1a01312cd041
	void ArrangeBag();// 0x1a00312cd041
	enum AddBackpackItemByID(const int InItemID, const int InItemNum, const bool InDropItem);// 0x19fe312cd041

--------------------------------
Class: SolarPlayerWeapon.SolarWeapon.Actor.Object
	float SpawnOffset;//[Offset: 0xd10, Size: 0x4]
	bool bIsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd14, Size: 0x1]
	SolarItemData ItemData;//[Offset: 0xd40, Size: 0xb0]
	byte[] MarkedTeamIdList;//[Offset: 0xdf0, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0xe00, Size: 0x1]
	SphereComponent* SphereComponent;//[Offset: 0xe08, Size: 0x8]
	Vector DroppedLocation;//[Offset: 0xe10, Size: 0xc]
	SolarCharacterBase* WeaponOwner;//[Offset: 0xe20, Size: 0x8]
	WeaponAnimationComponent* WeaponAnimationComponent;//[Offset: 0xe28, Size: 0x8]
	byte WeaponCurrentDiscardState;//[Offset: 0xe30, Size: 0x1]
	byte WeaponCurrentState;//[Offset: 0xe31, Size: 0x1]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0xe38, Size: 0x10]
	SoftObjectPath HoldMeshMaterialPath;//[Offset: 0xe48, Size: 0x18]
	MaterialInterface* OutlineBaseMat;//[Offset: 0xe60, Size: 0x8]
	bool bNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe69, Size: 0x1]
	ParticleSystemComponent*[] SkinExtraPSCArray;//[Offset: 0xe70, Size: 0x10]
	ParticleSystemComponent* SkinSpecialEffect;//[Offset: 0xe80, Size: 0x8]
	float LifespanAfterAutoDrop;//[Offset: 0xe98, Size: 0x4]
	ParticleSystem* SkinDedicatedKillEffect;//[Offset: 0xea0, Size: 0x8]
	ParticleSystem* SkinDedicatedSpecialEffect;//[Offset: 0xea8, Size: 0x8]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 0x1]
	void YieldCmdExec();// 0x4d5c312cd041
	void UpdateCharacterState(enum CharacterState, bool bIsOnGround, bool bResetState);// 0x4d5b312cd041
	void UpdateCharacterPosture(bool IsCrouch);// 0x4d5a312cd041
	void UpdateAppearanceCmdExec();// 0x4d59312cd041
	void SwitchPossessMaterial();// 0x4d58312cd041
	void SwitchDiscardMaterial();// 0x4d57312cd041
	void SetWeaponOutlineVisibility(const bool bInVisible, const bool bInTryForceSet);// 0x4d56312cd041
	void SetSkinID(int NewSkinID);// 0x4d55312cd041
	void SetOpenScopeOnVehicle(const bool InbOpenScope);// 0x4d54312cd041
	void SetDedicatedSkinEffect(const WeaponSkinData* InSkinData);// 0x4d53312cd041
	void ResumeCmdExec();// 0x4d52312cd041
	void ResetSkinID();// 0x4d51312cd041
	void ResetMaterial();// 0x4d50312cd041
	void RequestUnlimitedAmmo(const bool InEnable);// 0x4d4f312cd041
	void PostUpdateAppearance();// 0x4d4e312cd041
	void OnWeaponSkinRefresh(bool bValid, int SkinId);// 0x4d4d312cd041
	void OnWeaponAppreanceChanged(const bool bPart, const enum PartType);// 0x4d4c312cd041
	void OnSetWeaponSkinMesh(SkeletalMesh* InMesh, class Object InAnimClass);// 0x4d4b312cd041
	void OnRep_WeaponCurrentStateChanged();// 0x4d4a312cd041
	void OnRep_WeaponCurrentDiscardStateChanged();// 0x4d49312cd041
	void OnClientMeshLodChanged(int LOD);// 0x4d48312cd041
	void NotifyThisItemWasPickedUp();// 0x4d47312cd041
	void MarkDirty();// 0x4d46312cd041
	void K2_SwitchDrawDistance(bool Hold);// 0x4d45312cd041
	void K2_OnHold(bool bLocal);// 0x4d44312cd041
	void K2_OnDrop();// 0x4d43312cd041
	bool IsOpenedScopeOnVehicle();// 0x4d42312cd041
	bool IsItemWeapon();// 0x4d41312cd041
	bool IsExistPart(out const enum PartType);// 0x4d40312cd041
	void Hold(bool bInHold);// 0x4d3f312cd041
	bool HasScope();// 0x4d3e312cd041
	float GetWeaponSilencerMagnitude();// 0x4d3d312cd041
	PlayerWeaponRecoilComponent* GetRecoilComp();// 0x4d3c312cd041
	int GetQualityByLevel(int Level);// 0x4d3b312cd041
	int GetQuality();// 0x4d3a312cd041
	byte GetItemCurrentState();// 0x4d39312cd041
	bool GetIsHolded();// 0x4d38312cd041
	Vector GetFPPLocation();// 0x4d37312cd041
	float GetFire2AnimPlayRate();// 0x4d36312cd041
	float GetDistanceToEyeWhenScope();// 0x4d35312cd041
	Vector GetCurrentScopeAimCenterPoint();// 0x4d34312cd041
	WeaponPartClipComp* GetCurrentClip();// 0x4d33312cd041
	void EnqueueUpdateAppearanceCmd(const byte Cmd, FString Params);// 0x4d32312cd041
	void CRecieveProto_RefreshSkinAction(bool bAutonomous, FString paramters);// 0x4d31312cd041
	void ClearSkinExtraPSC();// 0x4d30312cd041
	void ClearDedicatedSkinEffect();// 0x4d2f312cd041

--------------------------------
Class: SolarWeapon.Actor.Object
	delegate OnWeaponUnhold;//[Offset: 0x3b0, Size: 0x10]
	WeaponMechanicalState WeaponState;//[Offset: 0x3c0, Size: 0x50]
	class SolarWeaponFireStateMachine* WeaponFireStateMachineClass;//[Offset: 0x410, Size: 0x8]
	SolarWeaponFireStateMachine* WeaponFireStateMachine;//[Offset: 0x418, Size: 0x8]
	class SolarWeaponSkillStateMachine* WeaponSkillStateMachineClass;//[Offset: 0x420, Size: 0x8]
	SolarWeaponSkillStateMachine* WeaponSkillStateMachine;//[Offset: 0x428, Size: 0x8]
	float HitHeadValue;//[Offset: 0x430, Size: 0x4]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x435, Size: 0x1]
	bool bBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x436, Size: 0x1]
	bool bAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x437, Size: 0x1]
	enum PrimaryShootingOption;//[Offset: 0x439, Size: 0x1]
	ImpactDisplayInfo ImpactInfo;//[Offset: 0x43c, Size: 0x10]
	bool bSkillCostSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	SolarVirtualBulletCollector* VirtualBulletCollector;//[Offset: 0x460, Size: 0x8]
	WeaponFireLaserCollector* LaserCollector;//[Offset: 0x468, Size: 0x8]
	int ExtraPoints;//[Offset: 0x474, Size: 0x4]
	int ExtraPointsForInit;//[Offset: 0x478, Size: 0x4]
	bool bUseSkillStateMachine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 0x1]
	int ExtraPointsLimit;//[Offset: 0x480, Size: 0x4]
	int SecModeLimitTypeID;//[Offset: 0x484, Size: 0x4]
	float RestoreProgressPerSec;//[Offset: 0x488, Size: 0x4]
	float RestoreProgressPerKill;//[Offset: 0x498, Size: 0x4]
	float RestoreProgressPerDmg;//[Offset: 0x49c, Size: 0x4]
	float RestoreProgressAccumulation;//[Offset: 0x4a0, Size: 0x4]
	float RestoreProgressAccumulationForInit;//[Offset: 0x4a4, Size: 0x4]
	byte FireModeIndex;//[Offset: 0x4b1, Size: 0x1]
	int BurstMaxCount;//[Offset: 0x4b8, Size: 0x4]
	enum OverloadState;//[Offset: 0x4c8, Size: 0x1]
	float OverloadAccum;//[Offset: 0x4cc, Size: 0x4]
	CurveFloat* OverloadCurve;//[Offset: 0x4e0, Size: 0x8]
	float GatlingRollSpeed;//[Offset: 0x4ec, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x4f0, Size: 0x4]
	float GatlingRollSpeedInterp;//[Offset: 0x4f4, Size: 0x4]
	int GatlingRepState;//[Offset: 0x4f8, Size: 0x4]
	bool bResetMuzzleIndexWhenStopFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 0x1]
	float FireChargingTime;//[Offset: 0x520, Size: 0x4]
	int FireChargingPhase;//[Offset: 0x524, Size: 0x4]
	float FireChargingSumTime;//[Offset: 0x528, Size: 0x4]
	float ChargeAnimationRate;//[Offset: 0x530, Size: 0x4]
	class GameplayEffect* ChargingEffect;//[Offset: 0x538, Size: 0x8]
	AbilitySystemComponent* OwnerGAS;//[Offset: 0x548, Size: 0x8]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x558, Size: 0x8]
	int CurrentMode;//[Offset: 0x560, Size: 0x4]
	FireMode[] FireModes;//[Offset: 0x570, Size: 0x10]
	Actor* WeaponHolder;//[Offset: 0x580, Size: 0x8]
	SolarCharacterBase* ControlWeaponCharacter;//[Offset: 0x588, Size: 0x8]
	GameplayAbilitySpecHandle[] EquippedAbilityHandles;//[Offset: 0x590, Size: 0x10]
	bool bControlWeaponCharacterChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	Actor* AimTarget;//[Offset: 0x5a8, Size: 0x8]
	class SolarWeaponProjectileSpline* ProjSplineClass;//[Offset: 0x5b0, Size: 0x8]
	SolarWeaponProjectileSpline* ProjSpline;//[Offset: 0x5b8, Size: 0x8]
	enum[] ShootingOptArray;//[Offset: 0x5c0, Size: 0x10]
	bool bShowSpecialEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	int SecondaryModeBurstMaxCount;//[Offset: 0x5d4, Size: 0x4]
	SingleWeaponConfig* Config;//[Offset: 0x5d8, Size: 0x8]
	Texture2D* WeaponIcon;//[Offset: 0x5e0, Size: 0x8]
	SlateWidgetStyleAsset* PrimaryFireBtnStyle;//[Offset: 0x5e8, Size: 0x8]
	SlateWidgetStyleAsset* SecondaryFireBtnStyle;//[Offset: 0x5f0, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfig;//[Offset: 0x5f8, Size: 0x8]
	WeaponRecoilComponent* RecoilComponent;//[Offset: 0x600, Size: 0x8]
	int weaponid;//[Offset: 0x608, Size: 0x4]
	WeaponSpreadAndRecoil* SpreadAndRecoil;//[Offset: 0x610, Size: 0x8]
	bool bInitCfgFromTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61a, Size: 0x1]
	bool bTeamDamageEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61b, Size: 0x1]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	bool bInfinitePackageAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61d, Size: 0x1]
	int ExtraAmmo;//[Offset: 0x620, Size: 0x4]
	<ParticleSystem*,ParticleLoopListener*> LoopParticlesMap;//[Offset: 0x628, Size: 0x50]
	int CurrentClipAmmo;//[Offset: 0x678, Size: 0x4]
	<enum,WeaponAnimationInfo> WeaponAnimationMap;//[Offset: 0x788, Size: 0x50]
	CameraShakeData[] WeaponFireCameraShakes;//[Offset: 0x7d8, Size: 0x10]
	CameraShakeData[] WeaponScopeFireCameraShakes;//[Offset: 0x7e8, Size: 0x10]
	CameraShakeData[] UsingSkillCameraShakes;//[Offset: 0x7f8, Size: 0x10]
	CameraShakeData[] WeaponChargingCameraShakes;//[Offset: 0x808, Size: 0x10]
	enum WeaponChargePhase;//[Offset: 0x818, Size: 0x1]
	bool bUseEmptyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x819, Size: 0x1]
	SoftObjectPath FightMeshPath;//[Offset: 0x820, Size: 0x18]
	SkeletalMeshComponent* Mesh;//[Offset: 0x838, Size: 0x8]
	SkeletalMesh* OriginalMesh;//[Offset: 0x840, Size: 0x8]
	class WeaponAnimInstance* OriginalAnimBP;//[Offset: 0x848, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x850, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x858, Size: 0x8]
	int SoundFireAutoCount;//[Offset: 0x860, Size: 0x4]
	bool bTriggerSoundFireAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x864, Size: 0x1]
	int OldSoundFireAutoCount;//[Offset: 0x868, Size: 0x4]
	bool bTriggerSoundB9A04Skill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86c, Size: 0x1]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86d, Size: 0x1]
	int SkillFireCount;//[Offset: 0x870, Size: 0x4]
	int SingleFireCount;//[Offset: 0x874, Size: 0x4]
	int FireOverloadCount;//[Offset: 0x878, Size: 0x4]
	int FireLastCount;//[Offset: 0x87c, Size: 0x4]
	FName SkillReleaseResult;//[Offset: 0x8d4, Size: 0x8]
	OverrideBulletStruct OverrideBullet;//[Offset: 0x900, Size: 0x10]
	bool bInitFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 0x1]
	bool bClientInitFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 0x1]
	bool bLoadInitAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x912, Size: 0x1]
	bool bLoadAllCfgAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x913, Size: 0x1]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0x918, Size: 0x8]
	<FireUniqueID,float> FireHitVerifyMap;//[Offset: 0x920, Size: 0x50]
	bool bDetectedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x978, Size: 0x1]
	ParticleSystemComponent*[] GatlingOverHeatPSCs;//[Offset: 0x980, Size: 0x10]
	SolarEnergyShield*[] IgnoreEnergyShieldArray;//[Offset: 0xac0, Size: 0x10]
	MaterialInterface* SpecialFireChargeMaterial;//[Offset: 0xad8, Size: 0x8]
	<int,Color> SpecialFireChargeColorMap;//[Offset: 0xae0, Size: 0x50]
	bool bDisplayPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb30, Size: 0x1]
	bool bPerspectiveForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb31, Size: 0x1]
	enum CurrentSpreadState;//[Offset: 0xb50, Size: 0x1]
	int ContinuousAddSpreadByFireCount;//[Offset: 0xb54, Size: 0x4]
	bool bLastAddSpreadByFireIsHipFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb58, Size: 0x1]
	int8 LastAddSpreadByFireFireMode;//[Offset: 0xb59, Size: 0x1]
	float LastAddSpreadByFireTime;//[Offset: 0xb5c, Size: 0x4]
	float SpreadPrepareTimer;//[Offset: 0xb60, Size: 0x4]
	float PendingBaseSpread;//[Offset: 0xb64, Size: 0x4]
	float TargetBaseSpread;//[Offset: 0xb68, Size: 0x4]
	float PendingAddSpread;//[Offset: 0xb6c, Size: 0x4]
	float TargetAddSpread;//[Offset: 0xb70, Size: 0x4]
	HitResult AimHitResult;//[Offset: 0xba8, Size: 0x88]
	void WeaponStateOnRepReload();// 0x4d2e312cd041
	bool VerifyLastClipAmmo(int InFireModeType, int InLastClipAmmo);// 0x4d2d312cd041
	bool UseEnergy(int Mode);// 0x4d2c312cd041
	bool TryHitOperation(out const FireUniqueID FireUniqueID, out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const float DamageScale, out const BulletHitDetailData HitDetailData, const bool IsNotDelay);// 0x4d2b312cd041
	void StopSoundDelay(const float DelayTime);// 0x4d2a312cd041
	void StopSound(enum Opt, int idx);// 0x4d29312cd041
	void StopLastValidFire();// 0x4d28312cd041
	void StopGatlingSound();// 0x4d27312cd041
	void StartSound(enum Opt, int idx);// 0x4d26312cd041
	void StartAsyncLoading();// 0x4d25312cd041
	SolarProjBullet* SpawnProjWithFireID(out const SpawnBulletParam Param, out const FireUniqueID FireID, const bool Local);// 0x4d24312cd041
	bool SkillCost();// 0x4d23312cd041
	void ShowSpecialEffect(bool bShow);// 0x4d22312cd041
	void SetWeaponAnimState(enum InWeaponAnimState);// 0x4d21312cd041
	void SetReservedAmmoForce(int InFireModeType, int InAmount);// 0x4d20312cd041
	void SetPrimaryShootingOption(enum Opt);// 0x4d1f312cd041
	void SetLastFireTime(int InFireModeType, float InFireTime);// 0x4d1e312cd041
	void SetHolder(Actor* holder);// 0x4d1d312cd041
	void ServerWeaponSound(const enum Opt, const bool TriggerSound);// 0x4d1c312cd041
	void ServerVirtualBulletShotHit(const SolarVirtualBulletHitParameter[] AllHitParams, Pawn* SourcePawn);// 0x4d1b312cd041
	void ServerVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter, const bool bMuzzleBlocked);// 0x4d1a312cd041
	void ServerUpdateMechanicalState(enum NewMechanicalState, enum NewSubFlags);// 0x4d19312cd041
	void ServerUpdateLaserInfo(const Vector InTarget, Actor* InTargetActor);// 0x4d18312cd041
	void ServerUpdateGatlingRepState(int InState);// 0x4d17312cd041
	void ServerSpawnProjWithVelocity(const SpawnProjParam Param);// 0x4d16312cd041
	void ServerSpawnProjWithFireID(const SpawnBulletParam Param, const FireUniqueID FireID);// 0x4d15312cd041
	void ServerSkillCost();// 0x4d14312cd041
	void ServerSetTarget(Actor* Target);// 0x4d13312cd041
	void ServerSetPrimaryOption(const enum Opt);// 0x4d12312cd041
	void ServerSetImpactInfo(const Vector_NetQuantize Position, const float Scale);// 0x4d11312cd041
	void ServerSetHipFire(const bool InbHipFire);// 0x4d10312cd041
	void ServerSetDisplayPreview(const bool InbDisplay, const bool InbSuccessful);// 0x4d0f312cd041
	void ServerResetFireCount();// 0x4d0e312cd041
	void ServerRequestSummonItem(const byte fireModeType, const bool InIsQuickSummon, const SolarSummonData InSummonData);// 0x4d0d312cd041
	void ServerRequestDropWeapon();// 0x4d0c312cd041
	void ServerReceiveHitDataFromClient(const BulletHitData HitData, const bool IsNotDelay);// 0x4d0b312cd041
	void ServerPlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength);// 0x4d0a312cd041
	void ServerModeState(const byte ModeIndex);// 0x4d09312cd041
	void ServerLaserHit(const HitResult[] Hits, float InActivateTime);// 0x4d08312cd041
	void ServerInterruptLaser();// 0x4d07312cd041
	void ServerInstantLineShot(const byte ModeIndex, const Vector_NetQuantize Start, const Vector_NetQuantize End, const float DamageScale, const MutiBulletHitData HitData, const bool bMuzzleBlocked);// 0x4d06312cd041
	void ServerHit(const HitResult Impact, const byte ModeIndex, bool TriggerAnim, float Scale);// 0x4d05312cd041
	void ServerFireChargeShoot(const AmmoConfig* InAmmo, const int8 InFireChargingPhase, int InFireChargingTime);// 0x4d04312cd041
	void ServerFireChargePhaseChange(const int8 InFireChargingPhase);// 0x4d03312cd041
	void ServerFire_JustAbilitiesAmmo(const byte ModeIndex);// 0x4d02312cd041
	void ServerChangeWeaponChargePhase(const enum InChargeState);// 0x4d01312cd041
	void ServerChangeOverloadState(const enum InState);// 0x4d00312cd041
	void ServerCanisterShot(const byte ModeIndex, const Vector_NetQuantize Start, const Vector_NetQuantize End, const float RandomA, const float RandomB, const MutiBulletHitData HitData, const bool bMuzzleBlocked);// 0x4cff312cd041
	void ServerAddOrRemoveGameplayTagsToCharacter(bool bInAddTag, const GameplayTagContainer InTags);// 0x4cfe312cd041
	void ServerAddExpWithReason(int InExp, int InReasonID);// 0x4cfd312cd041
	void ServerActivateLaserShot(const Vector InTarget, Actor* InTargetActor);// 0x4cfc312cd041
	void RuntimeUpdateData(int Cmd, FString Params);// 0x4cfb312cd041
	void ResetRecoilComponent();// 0x4cfa312cd041
	AmmoConfig* ReLoadAmmoData(const AmmoConfig* BaseConfig, int AmmoID);// 0x4cf9312cd041
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0x4cf8312cd041
	void ReceiveChargingState(const int Index, const enum State);// 0x4cf7312cd041
	void PrimaryCost();// 0x4cf6312cd041
	void PlayVibrate(enum InType);// 0x4cf5312cd041
	void PlayReloadRestoreVibrate();// 0x4cf4312cd041
	void PlayReloadGetOldVibrate();// 0x4cf3312cd041
	void PlayFireVibrate();// 0x4cf2312cd041
	void PlayChargeVibrate();// 0x4cf1312cd041
	void PlayBulletHitEffect(out const HitResult HitResult, SolarBullet* Bullet, bool bForce, Pawn* HitCauser, float HitEffectScale);// 0x4cf0312cd041
	void PlayBoltVibrate();// 0x4cef312cd041
	void PlayAutoSingleSound();// 0x4cee312cd041
	void PlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength, bool bNeedNetMulticast, int AnimCount);// 0x4ced312cd041
	void OverrideFireMode(int InFireModeType, const AmmoConfig* InNewAmmoConfig);// 0x4cec312cd041
	void OnRep_WeaponState();// 0x4ceb312cd041
	void OnRep_WeaponChargePhase();// 0x4cea312cd041
	void OnRep_SoundFireSkillCast();// 0x4ce9312cd041
	void OnRep_SoundFireSingle();// 0x4ce8312cd041
	void OnRep_SoundFireOverload();// 0x4ce7312cd041
	void OnRep_SoundFireLast();// 0x4ce6312cd041
	void OnRep_SoundFireBurst();// 0x4ce5312cd041
	void OnRep_SoundFireAutoCount();// 0x4ce4312cd041
	void OnRep_SoundB9A04Skill();// 0x4ce3312cd041
	void OnRep_OverloadStateChange(enum PreviousState);// 0x4ce2312cd041
	void OnRep_ImpactPosition();// 0x4ce1312cd041
	void OnRep_FireModes();// 0x4ce0312cd041
	void OnRep_FireChargingPhase(int InOldFireChargingPhase);// 0x4cdf312cd041
	void OnRep_ExtraAmmo();// 0x4cde312cd041
	void OnRep_DisplayPreview();// 0x4cdd312cd041
	void OnRep_CurrentMode();// 0x4cdc312cd041
	void OnRep_ControlWeaponCharacterChanged();// 0x4cdb312cd041
	void OnRep_bInitFinishChanged();// 0x4cda312cd041
	void OnPlayMuzzleEffect(int ModeIdx, bool bMuzzleBlocked);// 0x4cd9312cd041
	void OnOverrideWeaponConfigByTable(int PrimaryAmmoSoundID, int SecondaryAmmoSoundID);// 0x4cd8312cd041
	void OnLoadInitAssetComplete();// 0x4cd7312cd041
	void OnLoadCfgAssetsComplete();// 0x4cd6312cd041
	void OnInternalUnControlled();// 0x4cd5312cd041
	void OnInternalControlled(SolarCharacterBase* OwnerChar);// 0x4cd4312cd041
	void OnInstantLineShotHit(out const HitResult InHit, const float DamageScale);// 0x4cd3312cd041
	void OnInitFlowComplete(SolarWeaponState* Last);// 0x4cd2312cd041
	void OnGatlingRollChange(bool bIncrease);// 0x4cd1312cd041
	void OnFireChargeBurstCountChange(int BurstSum);// 0x4cd0312cd041
	void OnBeamFinished(ParticleSystemComponent* PS);// 0x4ccf312cd041
	enum NextShootingPrimaryOption();// 0x4cce312cd041
	void LuaStopSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x4ccd312cd041
	void LuaStartSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x4ccc312cd041
	void LoadInitAsset();// 0x4ccb312cd041
	void LoadAllCfgAssets();// 0x4cca312cd041
	AmmoConfig* K2_GetOverrideAmmoConfigBase(int ModeIndex);// 0x4cc9312cd041
	SingleWeaponConfig* K2_GetCurrentConfig();// 0x4cc8312cd041
	bool IsVisible();// 0x4cc7312cd041
	bool IsSummonWeapon();// 0x4cc6312cd041
	bool IsShowCoolDownWidget();// 0x4cc5312cd041
	bool IsShotAimEnemy();// 0x4cc4312cd041
	bool IsShootingOptionSupport(int idx);// 0x4cc3312cd041
	bool IsScopeOpen();// 0x4cc2312cd041
	bool IsOpenedScope();// 0x4cc1312cd041
	bool IsMultipleShootingPrimaryShooting();// 0x4cc0312cd041
	bool IsHipFire();// 0x4cbf312cd041
	bool IsEnergyID(const int BulletItemID);// 0x4cbe312cd041
	bool IsControlled();// 0x4cbd312cd041
	bool IsCanFire();// 0x4cbc312cd041
	ParticleSystemComponent* InternalPlayEffectAttached(ParticleSystem* PS, SceneComponent* AttachToComponent, FName AttachPointName, AttachedEffectParam Param);// 0x4cbb312cd041
	ParticleSystemComponent* InternalPlayEffectAtLocation(const Object* WorldContext, ParticleSystem* PS, out const Vector Location, LocationEffectParam Param, bool bUseDistScale);// 0x4cba312cd041
	void InternalClientPlayFiringEffects(const int ModeIdx, bool bMuzzleBlocked);// 0x4cb9312cd041
	bool InSameTeam();// 0x4cb8312cd041
	void InitSkin();// 0x4cb7312cd041
	void InitLevel();// 0x4cb6312cd041
	void InitConfigs();// 0x4cb5312cd041
	bool ImmediatelyFire(int idx, const bool bEnable);// 0x4cb4312cd041
	bool HasLoadInitAsset();// 0x4cb3312cd041
	bool HasLoadAllCfgAssets();// 0x4cb2312cd041
	bool HasInitSkin();// 0x4cb1312cd041
	bool HasInitLevel();// 0x4cb0312cd041
	bool HasInitFinish();// 0x4caf312cd041
	bool HasInitConfigs();// 0x4cae312cd041
	void HandFireModeInput(byte WeaponFireModeType, bool Press);// 0x4cad312cd041
	enum GetWeaponType();// 0x4cac312cd041
	FString GetWeaponTextType();// 0x4cab312cd041
	uint32 GetWeaponNoticeID(out const FName InNoticeType);// 0x4caa312cd041
	WeaponNetComponent* GetWeaponNetComp();// 0x4ca9312cd041
	int GetWeaponLevel();// 0x4ca8312cd041
	int GetWeaponID();// 0x4ca7312cd041
	Texture2D* GetWeaponIcon();// 0x4ca6312cd041
	enum GetWeaponBrand();// 0x4ca5312cd041
	AnimSequence* GetWeaponAnimSequence(const enum InMontageType);// 0x4ca4312cd041
	WeaponAnimationInfo GetWeaponAnimationInfo(const enum InMontageType);// 0x4ca3312cd041
	SlateBrush GetTriggerIcon(const int InFireModeType);// 0x4ca2312cd041
	int GetSpareAmmo(int InFireModeType);// 0x4ca1312cd041
	float GetSoundRTPCValue();// 0x4ca0312cd041
	int GetSkinID();// 0x4c9f312cd041
	float GetShotGunSpreadSeed();// 0x4c9e312cd041
	Vector GetShotDir(bool NeedSpread);// 0x4c9d312cd041
	Vector GetShootingTraceStartLocation(int FireModeIdx);// 0x4c9c312cd041
	FString GetShootingPrimaryShootingOptionName(const enum Opt);// 0x4c9b312cd041
	float GetSecondModeValue();// 0x4c9a312cd041
	int GetReservedAmmo(int idx);// 0x4c99312cd041
	float GetReloadProgress();// 0x4c98312cd041
	WeaponRecoilComponent* GetRecoilComponent();// 0x4c97312cd041
	int GetPrimaryShootingOptionIndex();// 0x4c96312cd041
	float GetPostFireDuration(int idx);// 0x4c95312cd041
	WeaponPartsComponent* GetPartsComponent();// 0x4c94312cd041
	float GetOverloadPercent();// 0x4c93312cd041
	float GetOverloadMaxValue();// 0x4c92312cd041
	SolarWeaponProjectileSpline* GetOrCreateWeaponProjectileSpline();// 0x4c91312cd041
	int GetMaxAmmo(int idx, bool bWithExtraAmmoByChaAbility);// 0x4c90312cd041
	float GetLastFireTime(int InFireModeType);// 0x4c8f312cd041
	bool GetIsVehicleMounted();// 0x4c8e312cd041
	bool GetIsSupportSecondaryFire();// 0x4c8d312cd041
	bool GetIsSupportAutoFire();// 0x4c8c312cd041
	bool GetIsSupportAssistAim();// 0x4c8b312cd041
	bool GetIsQuickScope();// 0x4c8a312cd041
	bool GetIsInitialized();// 0x4c89312cd041
	bool GetIsGatlingRoll();// 0x4c88312cd041
	bool GetIsCoolDown(int Mode);// 0x4c87312cd041
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x4c86312cd041
	int GetFireModeNameLocalizationID(int InFireModeType);// 0x4c85312cd041
	float GetFireIntervalProgress(int idx);// 0x4c84312cd041
	float GetFireInterval(int idx);// 0x4c83312cd041
	void GetFireChargeInfo(out int OutChargingPhase, out float OutChargingTime, out float OutRate, out FireChargeData OutChargeData);// 0x4c82312cd041
	float GetFireCD(int idx);// 0x4c81312cd041
	float GetExtraPointsPercent();// 0x4c80312cd041
	int GetExtraPoints();// 0x4c7f312cd041
	ParticleSystem* GetDedicatedKillEffect();// 0x4c7e312cd041
	SoftObjectPath GetDedicatedDissolvedDeathFXPath();// 0x4c7d312cd041
	class ActorEffect GetDedicatedDissolvedDeathActorEffectClass();// 0x4c7c312cd041
	WeaponDebugFlag GetDebugFlag();// 0x4c7b312cd041
	int GetCurScopeType();// 0x4c7a312cd041
	enum GetCurrentShootingPrimaryOption();// 0x4c79312cd041
	enum GetCurrentScopeType();// 0x4c78312cd041
	FireChargeData GetCurrentFireChargeData(const AmmoConfig* InAmmo);// 0x4c77312cd041
	AmmoConfig* GetCurrentFireChargeAmmoData(const AmmoConfig* InAmmo);// 0x4c76312cd041
	int GetCurrentClipAmmo(int InFireModeType);// 0x4c75312cd041
	bool GetCurrentChargeModePercent(int InFireModeType, out int OutChargeMode, out float OutChargePercent);// 0x4c74312cd041
	int GetCostPreAttack(int idx);// 0x4c73312cd041
	float GetCoolDownPercent();// 0x4c72312cd041
	SolarCharacterBase* GetControlWeaponCharacter();// 0x4c71312cd041
	float GetChargingPercent(int idx);// 0x4c70312cd041
	float GetBurstInterval(int idx);// 0x4c6f312cd041
	float GetBurstInternalInterval(int idx);// 0x4c6e312cd041
	void GetBulletHitEffectRot(out const HitResult HitResult, const SolarBullet* Bullet, out Rotator TargetPos, const bool bIsHittedShield);// 0x4c6d312cd041
	void GetBulletHitEffectPos(out const HitResult HitResult, out Vector TargetRot, float Offset);// 0x4c6c312cd041
	SolarBullet* GetBulletDefaultObject(const int idx, const AmmoConfig* AmmoCfg);// 0x4c6b312cd041
	class SolarBullet GetBulletClass(const int idx, const AmmoConfig* AmmoCfg);// 0x4c6a312cd041
	float GetBotAIDamageFactor();// 0x4c69312cd041
	enum GetAmmoTriggerType(const int fireModeType);// 0x4c68312cd041
	int GetAmmoItemID(int idx);// 0x4c67312cd041
	bool GetAllInitAssetPath(out SoftObjectPath[] PathArray);// 0x4c66312cd041
	bool GetAllCfgAssetsPath(out SoftObjectPath[] PathArray);// 0x4c65312cd041
	void GetAimStartEnd(const AmmoConfig* InAmmo, out Vector OutStart, out Vector OutEnd, out Actor* OutTargetActor, bool NeedSpread);// 0x4c64312cd041
	bool FireVerify_Location(out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x4c63312cd041
	bool FireVerify_EffectRange(out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x4c62312cd041
	bool FireVerify_Block(out const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, out const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x4c61312cd041
	bool FireValidate(const int idx, const float InLastShootTime);// 0x4c60312cd041
	enum FindMontageKeyFromWeaponAnim(const AnimSequence* InAnimation);// 0x4c5f312cd041
	void ExitBoltState();// 0x4c5e312cd041
	void EnterOverloadState();// 0x4c5d312cd041
	void DestroyWeaponProjectileSpline();// 0x4c5c312cd041
	void ClientVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter, const bool bMuzzleBlocked);// 0x4c5b312cd041
	void ClientUpdateLaserInfo(const Vector InTarget, Actor* InTargetActor);// 0x4c5a312cd041
	void ClientSkillRelease(bool InbSuccess, uint32 InResultID);// 0x4c59312cd041
	void ClientPlayHitEffect(const MultiHitResult InMultiHitResult);// 0x4c58312cd041
	void ClientPlayFiringEffects(const int ModeIdx, bool bMuzzleBlocked);// 0x4c57312cd041
	void ClientPlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength);// 0x4c56312cd041
	void ClientNotifyUpdateReservedAmmoForce(int InFireModeType, int InAmount);// 0x4c55312cd041
	void ClientLaserHit(const HitResult[] Hits, float InActivateTime);// 0x4c54312cd041
	void ClientInterruptLaser();// 0x4c53312cd041
	void ClientInstantLineShot(const byte ModeIndex, const HitResult[] HitResults, const Vector_NetQuantize End, const float DamageScale, const bool bMuzzleBlocked);// 0x4c52312cd041
	void ClientFireChargeShoot(const AmmoConfig* InAmmo, const int8 InFireChargingPhase, int InFireChargingTime);// 0x4c51312cd041
	void ClientCanisterShot(const byte ModeIndex, const Vector_NetQuantize Start, const WeaponShotHitResult[] ValidHits, const bool bMuzzleBlocked, const Vector_NetQuantize Target);// 0x4c50312cd041
	void ClientActivateLaserShot(const Vector InTarget, Actor* InTargetActor);// 0x4c4f312cd041
	void ClearFireHitVerify();// 0x4c4e312cd041
	bool CheckOpenParticleOptimization(int Bias);// 0x4c4d312cd041
	bool CanOverload();// 0x4c4c312cd041
	bool CanCauseTeamDamage();// 0x4c4b312cd041
	float CalcScale(out const FireMode Mode);// 0x4c4a312cd041
	int CalcCost(out const FireMode Mode);// 0x4c49312cd041
	void AsyncCheckShotAimHitResult();// 0x4c48312cd041
	void AddOrRemoveGameplayTagsToCharacter(bool InbAdd, out const GameplayTagContainer InTags);// 0x4c47312cd041
	void AddOrRemoveBlockCharacterSprintTag(bool InbAdd);// 0x4c46312cd041
	void AddExtraPoints(const enum InHitType, const int InDamage);// 0x4c45312cd041

--------------------------------
Class: SolarItemData.FastArraySerializerItem
	int ItemID;//[Offset: 0xc, Size: 0x4]
	int64 ThisID;//[Offset: 0x10, Size: 0x8]
	FString Name;//[Offset: 0x18, Size: 0x10]
	FString Icon;//[Offset: 0x28, Size: 0x10]
	FString Info;//[Offset: 0x38, Size: 0x10]
	int count;//[Offset: 0x48, Size: 0x4]
	enum ItemType;//[Offset: 0x4c, Size: 0x4]
	int Quality;//[Offset: 0x50, Size: 0x4]
	int MaxPile;//[Offset: 0x54, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	FString AbilityBP;//[Offset: 0x60, Size: 0x10]
	FString ItemBP;//[Offset: 0x70, Size: 0x10]
	int DropTime;//[Offset: 0x80, Size: 0x4]
	int UnPickupTime;//[Offset: 0x84, Size: 0x4]
	bool IsRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	bool IsPickupLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1]
	int64 UserId;//[Offset: 0x90, Size: 0x8]
	int Level;//[Offset: 0x98, Size: 0x4]
	int Prize;//[Offset: 0x9c, Size: 0x4]
	float CurValue;//[Offset: 0xa0, Size: 0x4]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	enum AppearanceType;//[Offset: 0xa5, Size: 0x1]

--------------------------------
Class: FireUniqueID
	int Data;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BulletHitDetailData
	Pawn* SourcePawn;//[Offset: 0x0, Size: 0x8]
	Actor* HitActor;//[Offset: 0x8, Size: 0x8]
	PrimitiveComponent* HitComponent;//[Offset: 0x10, Size: 0x8]
	Vector HitActorLocation;//[Offset: 0x18, Size: 0xc]
	Vector HitLocation;//[Offset: 0x24, Size: 0xc]
	Vector HitNormal;//[Offset: 0x30, Size: 0xc]
	FName HitBone;//[Offset: 0x3c, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: SpawnBulletParam
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float SpeedScale;//[Offset: 0x18, Size: 0x4]
	int Mode;//[Offset: 0x1c, Size: 0x4]
	bool TriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float Scale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	bool bStartBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: WeaponMechanicalState
	enum UniqueState;//[Offset: 0x0, Size: 0x1]
	enum SideFlags;//[Offset: 0x4, Size: 0x4]
	SolarWeapon* Weapon;//[Offset: 0x10, Size: 0x8]
	SingleWeaponConfig* Config;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SingleWeaponConfig.DataAsset.Object
	WeaponDebugFlag DebugFlag;//[Offset: 0x30, Size: 0x4]
	enum WeaponBrand;//[Offset: 0x34, Size: 0x1]
	enum WeaponType;//[Offset: 0x35, Size: 0x1]
	bool bSupportSecondaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	<FString,float> CharacterStateWeightMap;//[Offset: 0x38, Size: 0x50]
	MoveSpeedReduceCurveConfig[] MoveSpeedReduceCurveConfigs;//[Offset: 0x88, Size: 0x10]
	float MoveSpeedReduceBonusInHipFire;//[Offset: 0x98, Size: 0x4]
	float MoveSpeedReduceBonusInAdsHipFire;//[Offset: 0x9c, Size: 0x4]
	FName[] MultiMuzzleSocketNames;//[Offset: 0xa0, Size: 0x10]
	FName[] MultiBulletSocketNames;//[Offset: 0xb0, Size: 0x10]
	FName[] MultiCastShellSocketNames;//[Offset: 0xc0, Size: 0x10]
	FName[] MultiCastShellOnScopeSocketNames;//[Offset: 0xd0, Size: 0x10]
	bool bIsSingleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bIsHeavyFireWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	bool bUseSpecialFireInputRespondConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1]
	SolarWeaponFireInputRespondConfig FireInputRespondConfig;//[Offset: 0xe3, Size: 0xa]
	float AimOffsetReferenceAimDistance;//[Offset: 0xf0, Size: 0x4]
	float MaxSpread;//[Offset: 0xf4, Size: 0x4]
	float MinSpread;//[Offset: 0xf8, Size: 0x4]
	float HipFireBaseSpread;//[Offset: 0xfc, Size: 0x4]
	float ShoulderFireBaseSpread;//[Offset: 0x100, Size: 0x4]
	float ADSBaseSpread;//[Offset: 0x104, Size: 0x4]
	float VhADSBaseSpread;//[Offset: 0x108, Size: 0x4]
	WeaponShootConfig* WeaponShootConfig;//[Offset: 0x110, Size: 0x8]
	bool bCalcSpreadByStandardDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	float SpreadStandardDistance;//[Offset: 0x11c, Size: 0x4]
	float SpreadStandardOriginMaxRange;//[Offset: 0x120, Size: 0x4]
	bool bCalcSpreadByDistributionCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	RuntimeFloatCurve SpreadDistributionCurve;//[Offset: 0x128, Size: 0x88]
	<FString,float> SpreadCOPMap;//[Offset: 0x1b0, Size: 0x50]
	float SpreadStatuSpeed;//[Offset: 0x200, Size: 0x4]
	<FString,float> SpreadStatuIncreaseCoefficient;//[Offset: 0x208, Size: 0x50]
	<FString,float> SpreadStatuReduceCoefficient;//[Offset: 0x258, Size: 0x50]
	class SolarWeaponAT_CtrlFireBase* CtrlFireTaskClass;//[Offset: 0x2a8, Size: 0x8]
	class SolarWeaponAT_FireBase* FireTaskClass;//[Offset: 0x2b0, Size: 0x8]
	AmmoConfig* PrimaryAmmo;//[Offset: 0x2b8, Size: 0x8]
	int PrimaryAmmoIndex;//[Offset: 0x2c0, Size: 0x4]
	int PrimaryAmmoCap;//[Offset: 0x2c4, Size: 0x4]
	AmmoConfig* SecondaryAmmo;//[Offset: 0x2c8, Size: 0x8]
	int SecondaryAmmoIndex;//[Offset: 0x2d0, Size: 0x4]
	int SecondaryAmmoCap;//[Offset: 0x2d4, Size: 0x4]
	AmmoConfig* UpgradedSecAmmo;//[Offset: 0x2d8, Size: 0x8]
	LinearColor UpgradedSecAmmoColor;//[Offset: 0x2e0, Size: 0x10]
	bool bNeedOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	float OverloadMaxValue;//[Offset: 0x2f4, Size: 0x4]
	float NormalOverloadCoolingRate;//[Offset: 0x2f8, Size: 0x4]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x300, Size: 0x8]
	float OverloadCoolingPeriod;//[Offset: 0x308, Size: 0x4]
	CurveFloat* OverloadReduceRateCurve;//[Offset: 0x310, Size: 0x8]
	float OverloadWarningRate;//[Offset: 0x318, Size: 0x4]
	float WeaponSwitchTime;//[Offset: 0x31c, Size: 0x4]
	bool bCanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	float AutoFireDelayMs;//[Offset: 0x324, Size: 0x4]
	float AutoFireEndDelayMs;//[Offset: 0x328, Size: 0x4]
	float AutoFireCompensationRate;//[Offset: 0x32c, Size: 0x4]
	bool bCanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	WeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAll;//[Offset: 0x338, Size: 0x60]
	bool bOneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	float ScopeOpenTime;//[Offset: 0x39c, Size: 0x4]
	float ScopeOpenFOVTimeScale;//[Offset: 0x3a0, Size: 0x4]
	enum[] SupportChangeTypeArray;//[Offset: 0x3a8, Size: 0x10]
	int[] DefaultPartsArray;//[Offset: 0x3b8, Size: 0x10]
	float RecoilFireTimeWithScope;//[Offset: 0x3c8, Size: 0x4]
	float RecoilRecoverTimeWithScope;//[Offset: 0x3cc, Size: 0x4]
	float RecoilMagnitudeWithScope;//[Offset: 0x3d0, Size: 0x4]
	CurveFloat* RecoilCurveWithScope;//[Offset: 0x3d8, Size: 0x8]
	int RecoilSkipSequenceSumWithScope;//[Offset: 0x3e0, Size: 0x4]
	Vector2D[] RecoilCurveSequenceWithScope;//[Offset: 0x3e8, Size: 0x10]
	float RecoilFireTimeNoScope;//[Offset: 0x3f8, Size: 0x4]
	float RecoilRecoverTimeNoScope;//[Offset: 0x3fc, Size: 0x4]
	float RecoilMagnitudeNoScope;//[Offset: 0x400, Size: 0x4]
	CurveFloat* RecoilCurveNoScope;//[Offset: 0x408, Size: 0x8]
	int RecoilSkipSequenceSumNoScope;//[Offset: 0x410, Size: 0x4]
	Vector2D[] RecoilCurveSequenceNoScope;//[Offset: 0x418, Size: 0x10]
	bool bIsGatling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	float GatlingRotaryAcceleration;//[Offset: 0x42c, Size: 0x4]
	float GatlingFireRotarySpeed;//[Offset: 0x430, Size: 0x4]
	float GatlingMaxRotarySpeed;//[Offset: 0x434, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x438, Size: 0x4]
	float GatlingRotaryAttenuation;//[Offset: 0x43c, Size: 0x4]
	float GatlingScatteringMagnification;//[Offset: 0x440, Size: 0x4]
	ParticleSystem* GatlingOverHeatSmokeEffect;//[Offset: 0x448, Size: 0x8]
	class GameplayAbility[] GasAbilities;//[Offset: 0x450, Size: 0x10]
	FName Socket;//[Offset: 0x460, Size: 0x8]
	FName LeftHandIKTargetSocket;//[Offset: 0x468, Size: 0x8]
	Vector LeftHandIkEffectLocation;//[Offset: 0x470, Size: 0xc]
	Vector LeftHandIkJointLocation;//[Offset: 0x47c, Size: 0xc]
	Vector LeftHandIkJointLocationForGunIdle;//[Offset: 0x488, Size: 0xc]
	Vector LeftHandIkJointLocationForGunIdleWhenCrouch;//[Offset: 0x494, Size: 0xc]
	Vector RightHandIkEffectLocation;//[Offset: 0x4a0, Size: 0xc]
	Vector RightHandIkJointLocation;//[Offset: 0x4ac, Size: 0xc]
	LeftHandGripConfig LeftHandGripRotationConfig;//[Offset: 0x4b8, Size: 0x84]
	LeftHandGripConfig LeftHandGripRotationConfigForGunIdle;//[Offset: 0x53c, Size: 0x84]
	bool bShowCoolDownWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	class CrossHairWidget* Crosshair;//[Offset: 0x5c8, Size: 0x8]
	class FeedbackWidget* FeedbackWidget;//[Offset: 0x5d0, Size: 0x8]
	SolarWeaponCrosshairData CrosshairWidgetData;//[Offset: 0x5d8, Size: 0x38]
	SoftObjectPath WeaponIcon;//[Offset: 0x610, Size: 0x18]
	SlateBrush PrimaryFireBrush;//[Offset: 0x628, Size: 0x98]
	int PrimaryFireTxt;//[Offset: 0x6c0, Size: 0x4]
	SlateBrush SecondaryFireBrush;//[Offset: 0x6c8, Size: 0x98]
	int SecondaryFireTxt;//[Offset: 0x760, Size: 0x4]
	FString WeaponTextType;//[Offset: 0x768, Size: 0x10]
	SoftObjectPath ItemIcon;//[Offset: 0x778, Size: 0x18]
	SoftObjectPath UpgradeParticleSystem;//[Offset: 0x790, Size: 0x18]
	void InitSupportChangeTypeArray(int[] Data);// 0x43d1312cd041
	void InitStatuSpreadCoefficient(out const FString[] Increasekeys, out const float[] Increasevalues, out const FString[] Reducekeys, out const float[] Reducevalues);// 0x43d0312cd041
	void InitSpreadData(float Max, float Min, float hipbase, float adsbase, float vhadsbase, float statuspeed);// 0x43cf312cd041
	void InitSpreadCOPMap(out const FString[] Keys, out const float[] Values);// 0x43ce312cd041
	void InitScopeData(bool onekey, float scopetime);// 0x43cd312cd041
	void InitOverload(bool InAllow, float InMax, float InNormalCoolingRate, float InCoolingPeriod, float InOverloadWarningRate);// 0x43cc312cd041
	void InitBase(int WPType);// 0x43cb312cd041
	bool GetIsSupportPart(enum Type);// 0x43ca312cd041

--------------------------------
Class: WeaponDebugFlag
	bool bIgnoreActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bExtraInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bMechanicalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bShowShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: MoveSpeedReduceCurveConfig
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	RuntimeFloatCurve MoveSpeedReduceCurveOnHoldingWeapon;//[Offset: 0x50, Size: 0x88]

--------------------------------
Class: SolarWeaponFireInputRespondConfig
	bool bAutoCloseScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bShootAtPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bShootAtPressAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bCanAutoShootWhilePress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bCanAutoShootWhilePressAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bCanShootWhileScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bCanShootWhileScopingAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bCanManuallyCanceled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bCanManuallyCanceledAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: WeaponShootConfig.DataAsset.Object
	bool bEnableNewShootAlgorithm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float ShootOriginRange;//[Offset: 0x34, Size: 0x4]
	float StandardShootDistance;//[Offset: 0x38, Size: 0x4]
	float BaseSpread;//[Offset: 0x3c, Size: 0x4]
	float SpreadSmoothSpeed;//[Offset: 0x40, Size: 0x4]
	RuntimeFloatCurve SpreadDistributionCurve;//[Offset: 0x48, Size: 0x88]
	WeaponAttributeModifiersByTag[] ModifiersByOwnerTag;//[Offset: 0xd0, Size: 0x10]
	float SprayingResetTime;//[Offset: 0xe0, Size: 0x4]
	WeaponSpreadPattern* SpreadPattern;//[Offset: 0xe8, Size: 0x8]
	WeaponRecoilPattern* RecoilPattern;//[Offset: 0xf0, Size: 0x8]
	WeaponRecoilPattern* ScopeKickPattern;//[Offset: 0xf8, Size: 0x8]
	<enum,Vector2D> ScopeKickScaleMap;//[Offset: 0x100, Size: 0x50]
	bool bIsolateCrossHairFromScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	WeaponRecoilPattern* CrossHairKickPattern;//[Offset: 0x158, Size: 0x8]
	<enum,Vector2D> CrossHairKickScaleMap;//[Offset: 0x160, Size: 0x50]
	WeaponCameraShakePattern* ShakePatternOnShot;//[Offset: 0x1b0, Size: 0x8]
	WeaponCameraShakePattern* ShakePatternOnScopeShot;//[Offset: 0x1b8, Size: 0x8]
	<enum,float> ShakeScaleMapOnScopeShot;//[Offset: 0x1c0, Size: 0x50]

--------------------------------
Class: WeaponAttributeModifiersByTag.WeaponAttributeModifierContainer
	GameplayTagRequirements TagRequirements;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: WeaponAttributeModifierContainer
	WeaponAttributeModifier[] Modifiers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeaponAttributeModifier
	GameplayTag AttributeTag;//[Offset: 0x0, Size: 0x8]
	WeaponAttributeParam[] Modifiers;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: WeaponAttributeParam
	enum ParamType;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponSpreadPattern.Object

--------------------------------
Class: WeaponRecoilPattern.Object

--------------------------------
Class: WeaponCameraShakePattern.Object

--------------------------------
Class: SolarWeaponAT_CtrlFireBase.SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	delegate OnDoFire;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	delegate OnTaskEnd;//[Offset: 0x78, Size: 0x10]
	GameplayAbility* OwnerAbility;//[Offset: 0x88, Size: 0x8]
	SolarCharacter* TaskCharacter;//[Offset: 0x90, Size: 0x8]
	SolarWeapon* TaskWeapon;//[Offset: 0x98, Size: 0x8]
	WeaponSystemBase* TaskWeaponSysBase;//[Offset: 0xa0, Size: 0x8]
	SolarWeaponAT_TaskBase* CreateTaskDynamically(class SolarWeaponAT_TaskBase RealClass, GameplayAbility* OwningAbility, const FName TaskInstanceName, SolarCharacter* InCharacter);// 0x54db312cd041

--------------------------------
Class: SolarAbilityTask.AbilityTask.GameplayTask.Object

--------------------------------
Class: AbilityTask.GameplayTask.Object
	GameplayAbility* Ability;//[Offset: 0x60, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: WeaponSystemBase.ActorComponent.Object
	WeaponSystemAutoFire* WeaponSystemAutoFire;//[Offset: 0x128, Size: 0x8]
	SolarWeaponFireInputResolver* WeaponSystemFireInputResolver;//[Offset: 0x130, Size: 0x8]
	WeaponSystemAssistAim* WeaponSystemAssistAim;//[Offset: 0x138, Size: 0x8]
	WeaponSystemInteract WeaponSysIneract;//[Offset: 0x140, Size: 0x50]
	Actor* MyPossessPawn;//[Offset: 0x1a8, Size: 0x8]
	bool bAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	bool bAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 0x1]
	void WeaponAssistSystemTick(float InDeltaTime);// 0x578f312cd041
	void SwitchSingleWeaponPressMode();// 0x578e312cd041
	void SwitchDoScopeMode();// 0x578d312cd041
	void SwitchAutoScopeEnable();// 0x578c312cd041
	void SwitchAutoFireEnable();// 0x578b312cd041
	void SwitchAutoFire(bool Open);// 0x578a312cd041
	void SwitchAssistAim(bool opened);// 0x5789312cd041
	void SetCurrentActiveWeapon(SolarWeapon* Weapon);// 0x5788312cd041
	void SetCrosshairVisible(bool InVisible);// 0x5787312cd041
	void SetAutoScope(bool bOpen);// 0x5786312cd041
	void ServerPlayNoAmmoSound();// 0x5785312cd041
	void ReceiveMsgFromPlayer(bool bClient, out const PlayerWeaponMsg Msg);// 0x5784312cd041
	void OnTouchScreen();// 0x5783312cd041
	void OnToggleAutoFire();// 0x5782312cd041
	void OnToggleAssistAim();// 0x5781312cd041
	void OnOtherPlayerSpectateMyOwner();// 0x5780312cd041
	void NetMulticastPlayNoAmmoSound();// 0x577f312cd041
	bool IsUsingSpecialQuickAdsButton();// 0x577e312cd041
	SolarWeaponFireInputResolver* GetFireInputResolver();// 0x577d312cd041
	void GetFireButtonInputState(out enum OutLeftFireButton, out enum OutRightFireButton, out enum OutQuickAdsButton);// 0x577c312cd041
	WeaponSysStateStruct GetCurrentState();// 0x577b312cd041
	bool CheckAutoFire(out bool canfire);// 0x577a312cd041

--------------------------------
Class: PlayerWeaponMsg
	byte MsgType;//[Offset: 0x0, Size: 0x1]
	FString MsgDetail;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarWeaponFireInputResolver.Object
	enum GetRightFireButtonState();// 0x5523312cd041
	enum GetQuickAdsButtonState();// 0x5522312cd041
	enum GetLeftFireButtonState();// 0x5521312cd041

--------------------------------
Class: WeaponSysStateStruct
	int State;//[Offset: 0x0, Size: 0x4]
	FString Parameter;//[Offset: 0x8, Size: 0x10]
	bool bPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WeaponSystemAutoFire.Object
	void OnWeaponFire();// 0x5779312cd041

--------------------------------
Class: WeaponSystemAssistAim.Object
	void RefreshCurrentWeapon(SolarWeapon* Weapon);// 0x5778312cd041
	bool Init(out const interface class_                                                                                                    AAInterface);// 0x5777312cd041
	bool GetActive();// 0x5776312cd041

--------------------------------
Class: WeaponSystemInteract

--------------------------------
Class: SolarWeaponAT_FireBase.SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	AmmoConfig* Ammo;//[Offset: 0xc0, Size: 0x8]
	void K2_RequireEndFireTask();// 0x54df312cd041
	void K2_RealFireTick(float DeltaTime);// 0x54de312cd041
	void K2_PrepareRealFire();// 0x54dd312cd041
	void K2_ActivateRealFire();// 0x54dc312cd041

--------------------------------
Class: AmmoConfig.DataAsset.Object
	enum HoldAction;//[Offset: 0x30, Size: 0x1]
	FireChargeData[] FireChargeDatas;//[Offset: 0x38, Size: 0x10]
	FString FireChargeStopSoundName;//[Offset: 0x48, Size: 0x10]
	float ChargingToleranceEndTime;//[Offset: 0x58, Size: 0x4]
	float ChargingWorkingEndTime;//[Offset: 0x5c, Size: 0x4]
	float ChargingHoldingEndTime;//[Offset: 0x60, Size: 0x4]
	float ChargingTrajectoryTime;//[Offset: 0x64, Size: 0x4]
	bool bScaleHitEffectByChargingTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x6c, Size: 0x4]
	bool bForceFullShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxChargingDamageScale;//[Offset: 0x74, Size: 0x4]
	bool bIsTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	TracerBulletData TracerData;//[Offset: 0x7c, Size: 0xc]
	float DeltaAngle;//[Offset: 0x88, Size: 0x4]
	FString Name;//[Offset: 0x90, Size: 0x10]
	FString Des;//[Offset: 0xa0, Size: 0x10]
	int PropID;//[Offset: 0xb0, Size: 0x4]
	float Lifetime;//[Offset: 0xb4, Size: 0x4]
	enum FireMethodType;//[Offset: 0xb8, Size: 0x1]
	enum TrajectoryType;//[Offset: 0xb9, Size: 0x1]
	float CustomValue;//[Offset: 0xbc, Size: 0x4]
	class SolarBullet* BulletClass;//[Offset: 0xc0, Size: 0x8]
	enum BulletBounce;//[Offset: 0xc8, Size: 0x1]
	int BounceTimes;//[Offset: 0xcc, Size: 0x4]
	enum TriggerType;//[Offset: 0xd0, Size: 0x1]
	float MaxRange;//[Offset: 0xd4, Size: 0x4]
	float EffRange;//[Offset: 0xd8, Size: 0x4]
	float Radius;//[Offset: 0xdc, Size: 0x4]
	float InitSpeed;//[Offset: 0xe0, Size: 0x4]
	enum FireCostType;//[Offset: 0xe4, Size: 0x1]
	int FireCostPerAttack;//[Offset: 0xe8, Size: 0x4]
	int FireSpeedChangeTime;//[Offset: 0xec, Size: 0x4]
	float FireSpeedChangeCOP;//[Offset: 0xf0, Size: 0x4]
	float FastestFireInterval;//[Offset: 0xf4, Size: 0x4]
	float SlowestFireInterval;//[Offset: 0xf8, Size: 0x4]
	float BaseFireInterval;//[Offset: 0xfc, Size: 0x4]
	float FireIntervalRevertPreTime;//[Offset: 0x100, Size: 0x4]
	float FireIntervalReavertSpeed;//[Offset: 0x104, Size: 0x4]
	float BoltActionTime;//[Offset: 0x108, Size: 0x4]
	float StartBoltDuration;//[Offset: 0x10c, Size: 0x4]
	float AutoFireBreakTime;//[Offset: 0x110, Size: 0x4]
	float FirePrepareTime;//[Offset: 0x114, Size: 0x4]
	float FireStateBreakTime;//[Offset: 0x118, Size: 0x4]
	float FireStreakBreakTime;//[Offset: 0x11c, Size: 0x4]
	int FireIdx;//[Offset: 0x120, Size: 0x4]
	bool bTimedExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]
	float BaseReloadTime;//[Offset: 0x128, Size: 0x4]
	float PostFireOverload;//[Offset: 0x12c, Size: 0x4]
	bool bPlayHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool bPlayExplodeSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	float FlySoundReceiveRadius;//[Offset: 0x134, Size: 0x4]
	float FlySoundIgnoreDistance;//[Offset: 0x138, Size: 0x4]
	int SingleSoundCount;//[Offset: 0x13c, Size: 0x4]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x140, Size: 0x10]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x150, Size: 0x10]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x160, Size: 0x10]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x170, Size: 0x10]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x180, Size: 0x10]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x190, Size: 0x10]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x1a0, Size: 0x10]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1b0, Size: 0x10]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1c0, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x1d0, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1e0, Size: 0x10]
	FString Play_Fire_Empty_1p;//[Offset: 0x1f0, Size: 0x10]
	FString Play_Fire_Empty_3p;//[Offset: 0x200, Size: 0x10]
	FString Play_Fire_Empty_3p_Enemy;//[Offset: 0x210, Size: 0x10]
	CurveFloat* PostFireSpreadCurveStruct;//[Offset: 0x220, Size: 0x8]
	float VhADSSpreadCOP;//[Offset: 0x228, Size: 0x4]
	float ADSSpreadCOP;//[Offset: 0x22c, Size: 0x4]
	float SpreadFirePreTime;//[Offset: 0x230, Size: 0x4]
	float SpreadPostFireSpeed;//[Offset: 0x234, Size: 0x4]
	float SpreadRestorePreTime;//[Offset: 0x238, Size: 0x4]
	float SpreadRestoreSpeed;//[Offset: 0x23c, Size: 0x4]
	float[] SkillCDDiscountArray;//[Offset: 0x240, Size: 0x10]
	WeaponFireTPPAnimConfig TPPRecoilConfig;//[Offset: 0x250, Size: 0x28]
	WeaponFireFPPAnimConfig FPPRecoilConfigNoScope;//[Offset: 0x278, Size: 0x70]
	WeaponFireFPPAnimConfig FPPRecoilConfigWithScope;//[Offset: 0x2e8, Size: 0x70]
	AmmonVerticalRecoilStruct PitchRecoilStruct;//[Offset: 0x358, Size: 0x30]
	AmmonHorizontalRecoilStruct YawRecoilStruct;//[Offset: 0x388, Size: 0x30]
	AmmonRecoilRollStruct RollRecoilStruct;//[Offset: 0x3b8, Size: 0x40]
	AmmonRecoilScope ScopeRecoil;//[Offset: 0x3f8, Size: 0xb8]
	float ADSRecoilCOP;//[Offset: 0x4b0, Size: 0x4]
	<FString,float> RecoilCOPMap;//[Offset: 0x4b8, Size: 0x50]
	byte[] IgnoreEPhysicalSurface;//[Offset: 0x508, Size: 0x10]
	SoftObjectPath SummonConfigPath;//[Offset: 0x518, Size: 0x18]
	bool bAutoBurstFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	float BurstFireInterval;//[Offset: 0x534, Size: 0x4]
	float BurstFireInternalInterval;//[Offset: 0x538, Size: 0x4]
	float FireAnimationPlayRate;//[Offset: 0x53c, Size: 0x4]
	int AmmoSoundType;//[Offset: 0x540, Size: 0x4]
	float ProjectileMaxGravity;//[Offset: 0x544, Size: 0x4]
	float ParticleStartDistance;//[Offset: 0x548, Size: 0x4]
	float TrajectoryStartDistance;//[Offset: 0x54c, Size: 0x4]
	bool bPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	float PenetrationRadius;//[Offset: 0x554, Size: 0x4]
	CurveFloat* PenetrationDamageMultiplierCurve;//[Offset: 0x558, Size: 0x8]
	CurveFloat* CylinderDamageMultiplierCurve;//[Offset: 0x560, Size: 0x8]
	SlateBrush TriggerIcon;//[Offset: 0x568, Size: 0x98]
	CurveFloat* BulletDamageCurve;//[Offset: 0x600, Size: 0x8]
	CurveFloat* BulletScaleCurve;//[Offset: 0x608, Size: 0x8]
	CurveFloat* BulletSpeedCurve;//[Offset: 0x610, Size: 0x8]
	bool bThirdPesonViewXScaledByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	bool bForceApplyAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 0x1]
	class SolarAbility[] AmmoAbilityClasses;//[Offset: 0x620, Size: 0x10]
	class SolarAbility[] AmmoAbilityClassesOnDestroyed;//[Offset: 0x630, Size: 0x10]
	class SolarAbility* AmmoAbilityClassesOnSelf;//[Offset: 0x640, Size: 0x8]
	int SkillType;//[Offset: 0x648, Size: 0x4]
	int NameLocalTextIDNumber;//[Offset: 0x64c, Size: 0x4]
	int DescriptionLocalTextIDNumber;//[Offset: 0x650, Size: 0x4]
	int RangeLocalTextID;//[Offset: 0x654, Size: 0x4]
	int DifficultyLocalTextID;//[Offset: 0x658, Size: 0x4]
	void InitVerticalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x3ce0312cd041
	void InitSpreadData(float adscop, float vhadscop, float firepre, float changespeed, float restorepre, float restorespeed);// 0x3cdf312cd041
	void InitScopeRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x3cde312cd041
	void InitScopeAndCrossHairVibration(const float ScopeVMaxDistanceOffSet, const float ScopeVVibrationDuration, const float ScopeHMaxDistanceOffSet, const float ScopeHVibrationDuration, const float ScopeVContinuousFallingDuration, const float ScopeVContinuousFallingPointIndex, const float VMaxDistanceOffSetScale, const float VVibrationDurationScale, const float VSingleOffSetScale, const float VContinuousOffSetScale, const float HMaxDistanceOffSetScale, const float HVibrationDurationScale, const float HSingleOffSetScale, const float HContinuousOffSetScale, const float HOffSetProbabilityScale);// 0x3cdd312cd041
	void InitRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x3cdc312cd041
	void InitRecoilCOPMap(out const FString[] Keys, out const float[] Values);// 0x3cdb312cd041
	void InitPostFireSpreadCurveStruct(FString Path);// 0x3cda312cd041
	void InitHorizontalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x3cd9312cd041
	void InitBaseData(int Trigger);// 0x3cd8312cd041

--------------------------------
Class: FireChargeData
	bool IfContinuousCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ChargeTime;//[Offset: 0x4, Size: 0x4]
	CurveFloat* ChargeDamageRadiusCurve;//[Offset: 0x8, Size: 0x8]
	CurveFloat* ChargeDamageMagnificationCurve;//[Offset: 0x10, Size: 0x8]
	bool IfPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	AmmoConfig* OverrideAmmo;//[Offset: 0x20, Size: 0x8]
	int OverrideAmmoID;//[Offset: 0x28, Size: 0x4]
	FString ChargeSoundName;//[Offset: 0x30, Size: 0x10]
	FString ChargeSoundEnemyName;//[Offset: 0x40, Size: 0x10]
	FString FireSoundName;//[Offset: 0x50, Size: 0x10]
	FString FireSoundEnemyName;//[Offset: 0x60, Size: 0x10]
	bool IfBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	CurveFloat* BulletBurstCountCurve;//[Offset: 0x78, Size: 0x8]
	bool IfCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x84, Size: 0x4]
	bool IfForceFullShotCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bNeedPlayCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	CurveFloat* AmmoSpeedScaleCurve;//[Offset: 0x90, Size: 0x8]
	CurveFloat* AmmoEffectScaleCurve;//[Offset: 0x98, Size: 0x8]
	CurveFloat* OverloadCurve;//[Offset: 0xa0, Size: 0x8]
	float ChargeAnimationRate;//[Offset: 0xa8, Size: 0x4]
	CurveFloat* DeflectionAngleCurve;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: TracerBulletData
	float DeflectionAnglePerSec;//[Offset: 0x0, Size: 0x4]
	float MaximumDetectionAngle;//[Offset: 0x4, Size: 0x4]
	float HomingRange;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarBullet.Actor.Object
	float TotalEffectTime;//[Offset: 0x228, Size: 0x4]
	bool bAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]
	bool bShowHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1]
	bool bShowHitToTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e, Size: 0x1]
	bool bShowHitWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f, Size: 0x1]
	ParticleSystem* BulletEffect;//[Offset: 0x230, Size: 0x8]
	ParticleSystem* TrajectoryEffect;//[Offset: 0x238, Size: 0x8]
	ParticleSystem* TrajectoryEffectOther;//[Offset: 0x240, Size: 0x8]
	SoftObjectPath SimpleCanisterShotEffectPath;//[Offset: 0x248, Size: 0x18]
	ParticleSystem* TrajectoryBeamEffect;//[Offset: 0x260, Size: 0x8]
	ParticleSystem* TrajectoryBeamEffectOther;//[Offset: 0x268, Size: 0x8]
	ParticleSystem* HitEffect;//[Offset: 0x270, Size: 0x8]
	ParticleSystem* MuzzleEffect;//[Offset: 0x278, Size: 0x8]
	bool bKeepOneActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	ParticleSystem* MuzzleEffectScope;//[Offset: 0x288, Size: 0x8]
	ParticleSystem* MuzzleEffectOther;//[Offset: 0x290, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffect;//[Offset: 0x298, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectScope;//[Offset: 0x2a0, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectOther;//[Offset: 0x2a8, Size: 0x8]
	ParticleSystem* SpecialEffect;//[Offset: 0x2b0, Size: 0x8]
	ParticleSystem* DecalEffect;//[Offset: 0x2b8, Size: 0x8]
	ParticleSystem* DecalEffect2;//[Offset: 0x2c0, Size: 0x8]
	SoftObjectPath ShieldEffect;//[Offset: 0x2c8, Size: 0x18]
	<byte,SoftObjectPath> PhysicsHitEffects;//[Offset: 0x2e0, Size: 0x50]
	float DecalLifeSpan;//[Offset: 0x330, Size: 0x4]
	ParticleSystem* ShellCaseEffect;//[Offset: 0x338, Size: 0x8]
	ParticleSystem* ShellCaseEffectOnScope;//[Offset: 0x340, Size: 0x8]
	float ProjectTileSummonDistance;//[Offset: 0x348, Size: 0x4]
	bool CanExplodeWhenOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	FString HoldingPreViewSound_1P;//[Offset: 0x350, Size: 0x10]
	FString HoldingPreViewSound_3P;//[Offset: 0x360, Size: 0x10]
	byte BulletCollisionType;//[Offset: 0x370, Size: 0x1]
	void OnPlayImpactEffect(ParticleSystemComponent* PSC);// 0x459e312cd041
	SoftObjectPath GetHitPhysicEffectPath(out const byte HitSurface);// 0x459d312cd041

--------------------------------
Class: WeaponFireTPPAnimConfig
	float SingleFirePulse;//[Offset: 0x0, Size: 0x4]
	float SingleStiffnessCoefficient;//[Offset: 0x4, Size: 0x4]
	float LoopFirePulse;//[Offset: 0x8, Size: 0x4]
	float LoopStiffnessCoefficient;//[Offset: 0xc, Size: 0x4]
	float RecoverSpeed;//[Offset: 0x10, Size: 0x4]
	float BlendSpaceScale;//[Offset: 0x14, Size: 0x4]
	BlendSpace* BlendSpace;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: WeaponFireFPPAnimConfig
	float SingleFireStraightPulse;//[Offset: 0x0, Size: 0x4]
	float SingleStiffnessCoefficient;//[Offset: 0x4, Size: 0x4]
	float SingleFireBackwardOffset;//[Offset: 0x8, Size: 0x4]
	float LoopFireStraightPulse;//[Offset: 0xc, Size: 0x4]
	float LoopStiffnessCoefficient;//[Offset: 0x10, Size: 0x4]
	float LoopFireBackwardOffset;//[Offset: 0x14, Size: 0x4]
	CurveFloat* StraightStiffnessCurve;//[Offset: 0x18, Size: 0x8]
	float StraightRecoverSpeed;//[Offset: 0x20, Size: 0x4]
	Vector ShakePivotOffset;//[Offset: 0x24, Size: 0xc]
	Vector2D[] ShakeOffsets;//[Offset: 0x30, Size: 0x10]
	Rotator[] ShakeRotations;//[Offset: 0x40, Size: 0x10]
	bool bNeedEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	CurveVector* EndShakeOffsetCurve;//[Offset: 0x58, Size: 0x8]
	CurveVector* EndShakeRotateCurve;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: AmmonVerticalRecoilStruct.AmmonRecoilStruct
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AmmonRecoilStruct
	float CostTime;//[Offset: 0x0, Size: 0x4]
	CurveFloat* RecoilRangeCurve;//[Offset: 0x8, Size: 0x8]
	int APointCurveKeyIndex;//[Offset: 0x10, Size: 0x4]
	float APointMin;//[Offset: 0x14, Size: 0x4]
	float APointMax;//[Offset: 0x18, Size: 0x4]
	int BPointCurveKeyIndex;//[Offset: 0x1c, Size: 0x4]
	float BPointMin;//[Offset: 0x20, Size: 0x4]
	float BPointMax;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: AmmonHorizontalRecoilStruct.AmmonRecoilStruct
	CurveVector* ContinuousFireInfoCurve;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AmmonRecoilRollStruct.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	float ADSRollCOP;//[Offset: 0x30, Size: 0x4]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AmmonRecoilScope
	bool EnableScopeVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool EnableCrossHairVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool EnableScopeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x4, Size: 0x4]
	float ScopeVVibrationDuration;//[Offset: 0x8, Size: 0x4]
	CurveFloat* ScopeVSingleOffSetCurve;//[Offset: 0x10, Size: 0x8]
	CurveFloat* ScopeVContinuousOffSetCurve;//[Offset: 0x18, Size: 0x8]
	float ScopeVContinuousFallingDuration;//[Offset: 0x20, Size: 0x4]
	CurveFloat* ScopeVContinuousFallingCurve;//[Offset: 0x28, Size: 0x8]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x30, Size: 0x4]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x34, Size: 0x4]
	float ScopeHVibrationDuration;//[Offset: 0x38, Size: 0x4]
	CurveFloat* ScopeHSingleOffSetCurve;//[Offset: 0x40, Size: 0x8]
	CurveFloat* ScopeHContinuousOffSetCurve;//[Offset: 0x48, Size: 0x8]
	CurveFloat* ScopeHOffSetProbabilityCurve;//[Offset: 0x50, Size: 0x8]
	AmmonRecoilCrossHair CrossHairScaleSettings;//[Offset: 0x58, Size: 0x24]
	AmmonRecoilScopeRoll ScopeRollSettings;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: AmmonRecoilCrossHair
	float VMaxDistanceOffSetScale;//[Offset: 0x0, Size: 0x4]
	float VVibrationDurationScale;//[Offset: 0x4, Size: 0x4]
	float VSingleOffSetScale;//[Offset: 0x8, Size: 0x4]
	float VContinuousOffSetScale;//[Offset: 0xc, Size: 0x4]
	float HMaxDistanceOffSetScale;//[Offset: 0x10, Size: 0x4]
	float HVibrationDurationScale;//[Offset: 0x14, Size: 0x4]
	float HSingleOffSetScale;//[Offset: 0x18, Size: 0x4]
	float HContinuousOffSetScale;//[Offset: 0x1c, Size: 0x4]
	float HOffSetProbabilityScale;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: AmmonRecoilScopeRoll.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: WeaponAssistAimWeaponConfigAll
	WeaponAssistAimWeaponConfig* DefaultConfig;//[Offset: 0x0, Size: 0x8]
	WeaponAssistAimWeaponConfig* DefaultScopeConfig;//[Offset: 0x8, Size: 0x8]
	<enum,WeaponAssistAimWeaponConfig*> ScopeConfigMap;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: WeaponAssistAimWeaponConfig.DataAsset.Object
	float MaxTargetDetectionDistance;//[Offset: 0x30, Size: 0x4]
	GameplayTagRequirements BaseFollowTagRequirements;//[Offset: 0x38, Size: 0x50]
	float BaseFollowHorizontalSpeed;//[Offset: 0x88, Size: 0x4]
	float BaseFollowVerticalSpeed;//[Offset: 0x8c, Size: 0x4]
	BaseFollowSpeedByTag[] BaseFollowSpeedByTags;//[Offset: 0x90, Size: 0x10]
	GameplayTagRequirements TargetVelocityFollowTagRequirements;//[Offset: 0xa0, Size: 0x50]
	float TargetVelocityFollowDeactivationDelay;//[Offset: 0xf0, Size: 0x4]
	RuntimeFloatCurve TargetVelocityFollowHorizontalRatioCurve;//[Offset: 0xf8, Size: 0x88]
	RuntimeFloatCurve TargetVelocityFollowVerticalRatioCurve;//[Offset: 0x180, Size: 0x88]
	float TargetVelocityFollowHorizontalRatioCurveScale;//[Offset: 0x208, Size: 0x4]
	float TargetVelocityFollowVerticalRatioCurveScale;//[Offset: 0x20c, Size: 0x4]
	float TargetVelocityFollowMaxHorizontalSpeed;//[Offset: 0x210, Size: 0x4]
	float TargetVelocityFollowMaxVerticalSpeed;//[Offset: 0x214, Size: 0x4]
	RuntimeFloatCurve GlobalSensitivityScaleCurve;//[Offset: 0x218, Size: 0x88]
	float GlobalSensitivityScaleCurveScale;//[Offset: 0x2a0, Size: 0x4]

--------------------------------
Class: BaseFollowSpeedByTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	float HorizontalSpeed;//[Offset: 0x50, Size: 0x4]
	float VerticalSpeed;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: CrossHairWidget.UserWidget.Widget.Visual.Object
	<enum,CrosshairLayout> CrosshairStorageLayout;//[Offset: 0x260, Size: 0x50]
	CrosshairSprite CrosshairSprites;//[Offset: 0x2b0, Size: 0x30]
	CrosshairCanvasPanel* RootPanel;//[Offset: 0x2e8, Size: 0x8]
	float MinSpread;//[Offset: 0x2f0, Size: 0x4]
	CrosshairLayout CurrentLayout;//[Offset: 0x2f8, Size: 0x4]
	void SetCrosshairSprite(PaperSprite* InSprite);// 0x3e88312cd041
	void OnWeaponFired();// 0x3e87312cd041
	void OnUpdateReloadProgress(float InReloadProgress, int InMaxAmmo);// 0x3e86312cd041
	void OnUpdateGatlingRoll(float DeltaTmie, float InRollSpeedInterp, bool bWantFire);// 0x3e85312cd041
	void OnUpdateCoolDownProgress(float InCoolDownProgress);// 0x3e84312cd041
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress, int InChargeBurstCount);// 0x3e83312cd041
	void OnUpdateAimState(bool InbLockEnemy);// 0x3e82312cd041
	void OnReloadStarted(float InReloadTime);// 0x3e81312cd041
	void OnReloadFinished(bool InbReloadSuccess, int InReloadAmmo, int InReservedAmmo, int InMaxAmmo);// 0x3e80312cd041
	void OnPlayWeaponSpecialFire(enum InState, float PlayRate);// 0x3e7f312cd041
	void OnOverloadStateChanged(bool bEnter);// 0x3e7e312cd041
	void OnCrosshairInNormalState();// 0x3e7d312cd041
	void OnAmmoChanged(int InReservedAmmo, int InMaxAmmo, bool InbFirst);// 0x3e7c312cd041
	void InitializeCrosshairSpread(float Spread);// 0x3e7b312cd041
	void InitializeCrosshair(const enum WeaponType, const bool bIsWeaponEnergy);// 0x3e7a312cd041
	void HandleCrosshairState(enum InCrosshairState, bool InbQuitState);// 0x3e79312cd041
	Widget* GetSpreadCanvasWidget();// 0x3e78312cd041
	UserWidget* GetReloadWidget();// 0x3e77312cd041
	UserWidget* GetOverloadWidget();// 0x3e76312cd041
	UserWidget* GetCoolDownWidget();// 0x3e75312cd041
	UserWidget* GetChargeWidget();// 0x3e74312cd041
	UserWidget* GetAmmoWidget();// 0x3e73312cd041
	Vector2D CalcDeltaScaleBySpread(const float Spread);// 0x3e72312cd041
	Vector2D CalcDeltaPosBySpread(const float Spread);// 0x3e71312cd041
	float CalcDeltaAngleBySpread(const float Spread);// 0x3e70312cd041

--------------------------------
Class: CrosshairLayout
	float InitSpread;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: CrosshairSprite
	SoftObjectPath Normal;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath Energy;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: CrosshairCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	<enum,StateMapItemStruct> CrosshairStateConfigList;//[Offset: 0x160, Size: 0x50]
	Widget*[] IgonreWidgetToStateMap;//[Offset: 0x1b0, Size: 0x10]
	UICrossHairSpreadStruct[] SpreadItemList;//[Offset: 0x1c0, Size: 0x10]
	UICrossHairAimColorStruct[] AimColorItemList;//[Offset: 0x1d0, Size: 0x10]
	TweenImage* ReloadingTween;//[Offset: 0x1e0, Size: 0x8]
	GaugeImage* BulletGauge;//[Offset: 0x1e8, Size: 0x8]
	TweenImage* OverloadingTween;//[Offset: 0x1f0, Size: 0x8]
	ProgressBar* OverloadBar_Normal;//[Offset: 0x1f8, Size: 0x8]
	ProgressBar* OverloadBar_Warn;//[Offset: 0x200, Size: 0x8]
	TweenWidget* OverloadNormalPanelTween;//[Offset: 0x208, Size: 0x8]
	ProgressBar*[] CoolDownBars;//[Offset: 0x210, Size: 0x10]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	int ReservedLayerSpace;//[Offset: 0x14c, Size: 0x4]
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x3e6f312cd041

--------------------------------
Class: StateMapItemStruct
	StateItemStruct[] ChildWidgetConfigList;//[Offset: 0x0, Size: 0x10]
	bool bLoadChildWidgetTool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: StateItemStruct
	Widget* CrosshairChildWidget;//[Offset: 0x0, Size: 0x8]
	enum VisibilityType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: UICrossHairSpreadStruct
	Widget* TargetWidget;//[Offset: 0x0, Size: 0x8]
	enum SpreadType;//[Offset: 0x8, Size: 0x1]
	bool bPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	float Angle;//[Offset: 0xc, Size: 0x4]
	bool Pos_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	Vector2D ScaleFactor;//[Offset: 0x14, Size: 0x8]
	bool Scale_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bRenderAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	float RenderAngleFactor;//[Offset: 0x20, Size: 0x4]
	bool Angle_UseCustomizeFunc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	Vector2D OrginalVector;//[Offset: 0x28, Size: 0x8]
	Vector2D OrginalScale;//[Offset: 0x30, Size: 0x8]
	float OrginalAngle;//[Offset: 0x38, Size: 0x4]
	Vector2D Dir;//[Offset: 0x3c, Size: 0x8]

--------------------------------
Class: UICrossHairAimColorStruct
	Image* TargetImg;//[Offset: 0x0, Size: 0x8]
	LinearColor TargetColor;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x138, Size: 0x98]
	delegate BrushDelegate;//[Offset: 0x1d0, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x1e0, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1f0, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x204, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x37aa312cd041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x37a9312cd041
	void SetBrushTintColor(SlateColor TintColor);// 0x37a8312cd041
	void SetBrushSize(Vector2D DesiredSize);// 0x37a7312cd041
	void SetBrushResourceObject(Object* ResourceObject);// 0x37a6312cd041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x37a5312cd041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x37a4312cd041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x37a3312cd041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x37a2312cd041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x37a1312cd041
	void SetBrushFromAtlasInterface(interface class_                                                                                                    AtlasRegion, bool bMatchSize);// 0x37a0312cd041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x379f312cd041
	void SetBrush(out const SlateBrush InBrush);// 0x379e312cd041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x379d312cd041

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 0x98]

--------------------------------
Class: TweenImage.TweenBase.UserWidget.Widget.Visual.Object
	Image* TargetImg;//[Offset: 0x2d8, Size: 0x8]
	UIScaleTween ScaleTween;//[Offset: 0x2e0, Size: 0x40]
	UIPositionTween PostionTween;//[Offset: 0x320, Size: 0x40]
	ImageColorTween ColorTween;//[Offset: 0x360, Size: 0x48]
	UIRenderOpacityTween OpacityTween;//[Offset: 0x3a8, Size: 0x28]
	void InitImageTween();// 0x561e312cd041

--------------------------------
Class: TweenBase.UserWidget.Widget.Visual.Object
	bool AutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	float Interval;//[Offset: 0x264, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bEndHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	delegate OnTweenStart;//[Offset: 0x290, Size: 0x10]
	delegate OnTweenStop;//[Offset: 0x2a0, Size: 0x10]
	Widget* LinkWidget;//[Offset: 0x2c0, Size: 0x8]
	float Progress;//[Offset: 0x2cc, Size: 0x4]
	void Stop();// 0x561d312cd041
	void Reset();// 0x561c312cd041
	void Play();// 0x561b312cd041
	void InitAndPlay();// 0x561a312cd041
	void Init();// 0x5619312cd041

--------------------------------
Class: UIScaleTween.UITweenBaseStruct
	Vector2D OriginalScale;//[Offset: 0x20, Size: 0x8]
	Vector2D TargetScale;//[Offset: 0x28, Size: 0x8]
	bool bHandleAsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: UITweenBaseStruct
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum InterpolationType;//[Offset: 0x9, Size: 0x1]
	byte EaseType;//[Offset: 0xa, Size: 0x1]
	CurveFloat* InterpolationCurve;//[Offset: 0x10, Size: 0x8]
	Widget* Widget;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: UIPositionTween.UITweenBaseStruct
	Vector2D OriginalPosition;//[Offset: 0x20, Size: 0x8]
	Vector2D TargetPosition;//[Offset: 0x28, Size: 0x8]
	bool bHandleAsRelativeChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: ImageColorTween.UITweenBaseStruct
	LinearColor Original;//[Offset: 0x20, Size: 0x10]
	LinearColor TargetColor;//[Offset: 0x30, Size: 0x10]
	Image* Image;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: UIRenderOpacityTween.UITweenBaseStruct
	float OriginalOpacity;//[Offset: 0x20, Size: 0x4]
	float TargetOpacity;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: GaugeImage.UserWidget.Widget.Visual.Object
	enum GaugeType;//[Offset: 0x260, Size: 0x1]
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	Vector2D ImageSize;//[Offset: 0x264, Size: 0x8]
	float InitialDegree;//[Offset: 0x26c, Size: 0x4]
	bool bSymmetric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	Vector2D CenterOffset;//[Offset: 0x274, Size: 0x8]
	Object* ResourceObject;//[Offset: 0x280, Size: 0x8]
	float Progress;//[Offset: 0x288, Size: 0x4]
	MaterialInterface* MaterialDegree360;//[Offset: 0x290, Size: 0x8]
	MaterialInterface* MaterialDegree180;//[Offset: 0x298, Size: 0x8]
	MaterialInterface* MaterialDegree90;//[Offset: 0x2a0, Size: 0x8]
	MaterialInterface* MaterialDegreeLR;//[Offset: 0x2a8, Size: 0x8]
	MaterialInterface* MaterialDegreeUD;//[Offset: 0x2b0, Size: 0x8]
	Image* TargetImage;//[Offset: 0x2b8, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x2c0, Size: 0x8]
	void UpdateProgress(float InProgress);// 0x3f3e312cd041
	void SetProgress(float InProgress);// 0x3f3d312cd041
	void SetImage(Object* RO);// 0x3f3c312cd041
	Image* GetInternalImage();// 0x3f3b312cd041

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x138, Size: 0x1d0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x308, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x310, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x318, Size: 0x8]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x320, Size: 0x8]
	float Percent;//[Offset: 0x328, Size: 0x4]
	byte BarFillType;//[Offset: 0x32c, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x330, Size: 0x8]
	delegate PercentDelegate;//[Offset: 0x338, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x348, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x358, Size: 0x10]
	void SetPercent(float InPercent);// 0x59b4312cd041
	void SetIsMarquee(bool InbIsMarquee);// 0x59b3312cd041
	void SetFillColorAndOpacity(LinearColor InColor);// 0x59b2312cd041

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 0x98]
	SlateBrush FillImage;//[Offset: 0xa0, Size: 0x98]
	SlateBrush MarqueeImage;//[Offset: 0x138, Size: 0x98]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: TweenWidget.TweenBase.UserWidget.Widget.Visual.Object
	Widget* TargetWidget;//[Offset: 0x2d8, Size: 0x8]
	UIScaleTween ScaleTween;//[Offset: 0x2e0, Size: 0x40]
	UIPositionTween PostionTween;//[Offset: 0x320, Size: 0x40]
	UIRenderOpacityTween OpacityTween;//[Offset: 0x360, Size: 0x28]

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x2c]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	int ZOrder;//[Offset: 0x68, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x597c312cd041
	void SetSize(Vector2D InSize);// 0x597b312cd041
	void SetPosition(Vector2D InPosition);// 0x597a312cd041
	void SetOffsets(Margin InOffset);// 0x5979312cd041
	void SetMinimum(Vector2D InMinimumAnchors);// 0x5978312cd041
	void SetMaximum(Vector2D InMaximumAnchors);// 0x5977312cd041
	void SetLayout(out const AnchorData InLayoutData);// 0x5976312cd041
	void SetAutoSize(bool InbAutoSize);// 0x5975312cd041
	void SetAnchors(Anchors InAnchors);// 0x5974312cd041
	void SetAlignment(Vector2D InAlignment);// 0x5973312cd041
	int GetZOrder();// 0x5972312cd041
	Vector2D GetSize();// 0x5971312cd041
	Vector2D GetPosition();// 0x5970312cd041
	Margin GetOffsets();// 0x596f312cd041
	AnchorData GetLayout();// 0x596e312cd041
	bool GetAutoSize();// 0x596d312cd041
	Anchors GetAnchors();// 0x596c312cd041
	Vector2D GetAlignment();// 0x596b312cd041

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	Vector2D Alignment;//[Offset: 0x24, Size: 0x8]

--------------------------------
Class: FeedbackWidget.UserWidget.Widget.Visual.Object
	FeedbackCanvasPanel* FeedbackPanel;//[Offset: 0x260, Size: 0x8]
	float VisibilityTime;//[Offset: 0x268, Size: 0x4]
	float VisibilityTimer;//[Offset: 0x26c, Size: 0x4]
	FeedbackSingleData CurrentFeedbackSingleData;//[Offset: 0x270, Size: 0x30]

--------------------------------
Class: FeedbackCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	<FString,FeedbackSingleData> FeedbackMap;//[Offset: 0x160, Size: 0x50]

--------------------------------
Class: FeedbackSingleData
	UserWidget* AnimationWidget;//[Offset: 0x0, Size: 0x8]
	FName AnimationName;//[Offset: 0x8, Size: 0x8]
	float AnimationPlaySpeed;//[Offset: 0x10, Size: 0x4]
	float AnimationStartTime;//[Offset: 0x14, Size: 0x4]
	float AnimationAgainStartTime;//[Offset: 0x18, Size: 0x4]
	int AnimationLoopNumber;//[Offset: 0x1c, Size: 0x4]
	FName AudioName;//[Offset: 0x20, Size: 0x8]
	enum AnimationType;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: SolarWeaponCrosshairData
	byte HasReload;//[Offset: 0x0, Size: 0x1]
	byte HasForbid;//[Offset: 0x1, Size: 0x1]
	byte HasOverload;//[Offset: 0x2, Size: 0x1]
	byte HasChargeProgress;//[Offset: 0x3, Size: 0x1]
	byte HasFeedback;//[Offset: 0x4, Size: 0x1]
	enum WeaponType;//[Offset: 0x5, Size: 0x1]
	bool bIsEnergyType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	class UserWidget* CrossHairWidget;//[Offset: 0x8, Size: 0x8]
	class UserWidget* BulletContainerWidget;//[Offset: 0x10, Size: 0x8]
	class UserWidget* WeaponRechamberWidget;//[Offset: 0x18, Size: 0x8]
	SolarNoAmmoAlertWidgetLayout AmmoAlertWidgetLayout;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: SolarNoAmmoAlertWidgetLayout
	bool bOverrideLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4, Size: 0x8]
	float SpinAngle;//[Offset: 0xc, Size: 0x4]
	Vector2D Scale;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SolarProjBullet.SolarBullet.Actor.Object
	Vector SpawnedLocation;//[Offset: 0x380, Size: 0xc]
	float EffRange;//[Offset: 0x38c, Size: 0x4]
	float MaxRange;//[Offset: 0x390, Size: 0x4]
	int RocketNum;//[Offset: 0x394, Size: 0x4]
	Vector SecondVelocity;//[Offset: 0x398, Size: 0xc]
	Vector FirstBulletSpeed;//[Offset: 0x3ac, Size: 0xc]
	bool bNoRTImpactEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	HitResult RocketHitResult;//[Offset: 0x3cc, Size: 0x88]
	AmmoConfig* AmmoConfig;//[Offset: 0x458, Size: 0x8]
	bool bScaledByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	bool bHiddenWhenExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 0x1]
	Actor* ParentWeaponPtr;//[Offset: 0x468, Size: 0x8]
	SolarPlayerController* BulletOwnerController;//[Offset: 0x470, Size: 0x8]
	int ModeIdx;//[Offset: 0x47c, Size: 0x4]
	ShapeComponent* CollisionComp;//[Offset: 0x480, Size: 0x8]
	ProjectileMovementComponent* MovementComp;//[Offset: 0x488, Size: 0x8]
	SolarSplineMovementComponent* SplineMovementComp;//[Offset: 0x490, Size: 0x8]
	float GravityScaleRate;//[Offset: 0x498, Size: 0x4]
	CurveFloat* BounceCurve;//[Offset: 0x4a0, Size: 0x8]
	bool bHitSpecificActorsExplodeWithBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	bool bForcePenetrateEnergyShiled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 0x1]
	Vector_NetQuantize SimulatedInitialVelocity;//[Offset: 0x4ac, Size: 0xc]
	Vector OwnerDirection;//[Offset: 0x4b8, Size: 0xc]
	bool bExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 0x1]
	bool bTriggerEffRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c5, Size: 0x1]
	bool bTriggerMaxRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c6, Size: 0x1]
	bool bWaitToBeDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c7, Size: 0x1]
	bool bDontAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ca, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0x4d0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x4e0, Size: 0x8]
	float FlySoundPlayDistance;//[Offset: 0x4ec, Size: 0x4]
	ParticleSystemComponent* ParticleComp;//[Offset: 0x4f0, Size: 0x8]
	ParticleSystemComponent* TrajPSC;//[Offset: 0x4f8, Size: 0x8]
	int PoolLimit;//[Offset: 0x510, Size: 0x4]
	bool bVerifyFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a1, Size: 0x1]
	bool bSpecialVerifyFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a2, Size: 0x1]
	FireUniqueID FireUniqueID;//[Offset: 0x6a4, Size: 0x4]
	bool bBulletActiveAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1]
	void StopSound(enum Opt);// 0x4d86312cd041
	void StartSound(enum Opt);// 0x4d85312cd041
	void SpawnSoundPlayerAndPlayFlySound();// 0x4d84312cd041
	void SetLocationByEnergyShield();// 0x4d83312cd041
	void OnStop(out const HitResult HitResult);// 0x4d82312cd041
	void OnSplineMovementCompStop(out const HitResult HitResult, bool bBlocking);// 0x4d81312cd041
	void OnRep_SimulatedInitialVelocity();// 0x4d80312cd041
	void OnRep_RocketHitResult();// 0x4d7f312cd041
	void OnRep_bExploded();// 0x4d7e312cd041
	void OnOutRange();// 0x4d7d312cd041
	void OnBounce(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x4d7c312cd041
	void OnAttachedActorDestroyed(Actor* Other);// 0x4d7b312cd041
	void OnActorDestroyed(Actor* DestroyedActor);// 0x4d7a312cd041
	bool IsAllowPlayEffect();// 0x4d79312cd041
	void InitSplineMovementComp(SolarSplineMovementComponent* Comp);// 0x4d78312cd041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4d77312cd041
	void ExplodeBegin();// 0x4d76312cd041
	void DelayDestroy(float DelayTime);// 0x4d75312cd041
	SolarSplineMovementComponent* BlueprintGetSplineMovementComp();// 0x4d74312cd041

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xec, Size: 0x4]
	float MaxSpeed;//[Offset: 0xf0, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf4, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf4, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf4, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf4, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf4, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf4, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf4, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf5, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf5, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf5, Size: 0x1]
	float PreviousHitTime;//[Offset: 0xf8, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0xfc, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x108, Size: 0x4]
	float Buoyancy;//[Offset: 0x10c, Size: 0x4]
	float Bounciness;//[Offset: 0x110, Size: 0x4]
	float Friction;//[Offset: 0x114, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x118, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x11c, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x120, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x130, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x140, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x144, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x14c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x150, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x154, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x158, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x15c, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x160, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x164, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x10ab312cd041
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x10aa312cd041
	void SetInterpolatedComponent(SceneComponent* Component);// 0x10a9312cd041
	void ResetInterpolation();// 0x10a8312cd041
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x10a7312cd041
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x10a6312cd041
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x10a5312cd041
	Vector LimitVelocity(Vector NewVelocity);// 0x10a4312cd041
	bool IsVelocityUnderSimulationThreshold();// 0x10a3312cd041
	bool IsInterpolationComplete();// 0x10a2312cd041

--------------------------------
Class: SolarSplineMovementComponent.MovementComponent.ActorComponent.Object
	delegate OnSolarSplineMovementComponentStop;//[Offset: 0xf0, Size: 0x10]
	SplineComponent* SplineComponent;//[Offset: 0x100, Size: 0x8]
	float SplineDistance;//[Offset: 0x108, Size: 0x4]
	SolarProjBullet* SolarProjBullet;//[Offset: 0x10c, Size: 0x8]
	Vector LastLocation;//[Offset: 0x114, Size: 0xc]
	Rotator VelocityRotator;//[Offset: 0x120, Size: 0xc]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x540, Size: 0x68]
	InterpCurveVector SplineInfo;//[Offset: 0x5a8, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5c0, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5d8, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x5f0, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x60c, Size: 0x4]
	float Duration;//[Offset: 0x610, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x617, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61a, Size: 0x1]
	float LoopPosition;//[Offset: 0x61c, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x620, Size: 0xc]
	void UpdateSpline();// 0x39a6312cd041
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x39a5312cd041
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x39a4312cd041
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x39a3312cd041
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x39a2312cd041
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x39a1312cd041
	void SetSplineWorldPoints(out const Vector[] Points);// 0x39a0312cd041
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x399f312cd041
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x399e312cd041
	void SetSplineLocalPoints(out const Vector[] Points);// 0x399d312cd041
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x399c312cd041
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x399b312cd041
	void SetDrawDebug(bool bShow);// 0x399a312cd041
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x3999312cd041
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x3998312cd041
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x3997312cd041
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x3996312cd041
	bool IsClosedLoop();// 0x3995312cd041
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x3994312cd041
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x3993312cd041
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x3992312cd041
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x3991312cd041
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x3990312cd041
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x398f312cd041
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x398e312cd041
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x398d312cd041
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x398c312cd041
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x398b312cd041
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x398a312cd041
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3989312cd041
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3988312cd041
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3987312cd041
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x3986312cd041
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x3985312cd041
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x3984312cd041
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x3983312cd041
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3982312cd041
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3981312cd041
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3980312cd041
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x397f312cd041
	byte GetSplinePointType(int PointIndex);// 0x397e312cd041
	float GetSplineLength();// 0x397d312cd041
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x397c312cd041
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x397b312cd041
	Vector GetScaleAtSplineInputKey(float InKey);// 0x397a312cd041
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x3979312cd041
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3978312cd041
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3977312cd041
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3976312cd041
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3975312cd041
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3974312cd041
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3973312cd041
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3972312cd041
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3971312cd041
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x3970312cd041
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x396f312cd041
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x396e312cd041
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x396d312cd041
	int GetNumberOfSplineSegments();// 0x396c312cd041
	int GetNumberOfSplinePoints();// 0x396b312cd041
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x396a312cd041
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3969312cd041
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x3968312cd041
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x3967312cd041
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x3966312cd041
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x3965312cd041
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x3964312cd041
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x3963312cd041
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x3962312cd041
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x3961312cd041
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x3960312cd041
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x395f312cd041
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x395e312cd041
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x395d312cd041
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x395c312cd041
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x395b312cd041
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x395a312cd041
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3959312cd041
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x3958312cd041
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3957312cd041
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x3956312cd041
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3955312cd041
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3954312cd041
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3953312cd041
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3952312cd041
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x3951312cd041
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x3950312cd041
	void ClearSplinePoints(bool bUpdateSpline);// 0x394f312cd041
	void AddSplineWorldPoint(out const Vector Position);// 0x394e312cd041
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x394d312cd041
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x394c312cd041
	void AddSplineLocalPoint(out const Vector Position);// 0x394b312cd041
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x394a312cd041
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x3949312cd041

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SolarWeaponFireStateMachine.SolarWeaponStateMachine.Object
	bool bTryGotoOverloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	bool bTryGotoIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]
	bool bTryGotoBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 0x1]
	bool bTryGotoFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 0x1]
	bool bTryGotoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 0x1]
	bool bTryGotoBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef, Size: 0x1]
	bool bTryGotoGatlingRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool ToReload(SolarWeaponState* CurState);// 0x5549312cd041
	bool ToOverloading(SolarWeaponState* CurState);// 0x5548312cd041
	bool ToIdle(SolarWeaponState* CurState);// 0x5547312cd041
	bool ToGatlingRoll(SolarWeaponState* CurState);// 0x5546312cd041
	bool ToFiring(SolarWeaponState* CurState);// 0x5545312cd041
	bool ToBurst(SolarWeaponState* CurState);// 0x5544312cd041
	bool ToBolt(SolarWeaponState* CurState);// 0x5543312cd041

--------------------------------
Class: SolarWeaponStateMachine.Object
	SolarWeaponState* CurrentState;//[Offset: 0x60, Size: 0x8]
	class SolarWeaponState* StartStateSubClass;//[Offset: 0x68, Size: 0x8]
	class SolarWeaponState* CurStateSubClass;//[Offset: 0x70, Size: 0x8]
	WeaponStateFlowItem[] FlowData;//[Offset: 0x78, Size: 0x10]
	<class SolarWeaponState,SolarWeaponState*> StateMap;//[Offset: 0x88, Size: 0x50]
	WeaponStateMapItem[] StateFlowMap;//[Offset: 0xd8, Size: 0x10]
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	void Update(float DeltaTime);// 0x5542312cd041
	void Start();// 0x5541312cd041
	void Resume();// 0x5540312cd041
	void Reset(bool bAutoStart);// 0x553f312cd041
	void Pause();// 0x553e312cd041
	void LogStartMsg(SolarWeaponState* State);// 0x553d312cd041
	void LogEndMsg(SolarWeaponState* Last);// 0x553c312cd041
	void LogChangeMsg(SolarWeaponState* From, SolarWeaponState* To);// 0x553b312cd041
	bool IsRunning();// 0x553a312cd041
	bool IsPause();// 0x5539312cd041
	void GotoState(out const class SolarWeaponState InWeaponState);// 0x5538312cd041
	void GotoNext();// 0x5537312cd041
	SolarWeaponState* GetStateInstance(out const class SolarWeaponState StateSubClass);// 0x5536312cd041
	bool GetNextState(out class SolarWeaponState Next);// 0x5535312cd041
	bool CheckCurStateToNextState(out const WeaponStateFlowItem StateFlowItem);// 0x5534312cd041
	bool CheckConditionNative(out const FName ConditionFunc);// 0x5533312cd041

--------------------------------
Class: SolarWeaponState.Object
	SolarWeaponState* NextState;//[Offset: 0x28, Size: 0x8]
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SolarWeaponStateMachine* OwnerStateMachine;//[Offset: 0x38, Size: 0x8]
	void UpdateState(float DeltaTime);// 0x5528312cd041
	bool IsRunning();// 0x5527312cd041
	void GotoNext();// 0x5526312cd041
	void EnterState(SolarWeaponState* InPrevState);// 0x5525312cd041
	void EndState(SolarWeaponState* InNextState);// 0x5524312cd041

--------------------------------
Class: WeaponStateFlowItem
	class SolarWeaponState* Current;//[Offset: 0x0, Size: 0x8]
	class SolarWeaponState* Next;//[Offset: 0x8, Size: 0x8]
	byte Weight;//[Offset: 0x10, Size: 0x1]
	bool bBpFuncCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	FName ConditonFunc;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: WeaponStateMapItem
	class SolarWeaponState* Current;//[Offset: 0x0, Size: 0x8]
	WeaponStateFlowItem[] NextList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarWeaponSkillStateMachine.SolarWeaponStateMachine.Object
	bool IsTriggerSkillSuccessed(SolarWeaponState* CurState);// 0x5568312cd041
	bool IsTriggerSkillFailed(SolarWeaponState* CurState);// 0x5567312cd041

--------------------------------
Class: ImpactDisplayInfo
	Vector Pos;//[Offset: 0x0, Size: 0xc]
	float Scale;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolarVirtualBulletCollector.ActorComponent.Object
	SolarWeapon* CacheWeapon;//[Offset: 0xb0, Size: 0x8]
	SolarCharacterBase* CacheCharacter;//[Offset: 0xb8, Size: 0x8]
	World* CacheWorld;//[Offset: 0xc0, Size: 0x8]
	SolarVirtualBullet[] Bullets;//[Offset: 0xc8, Size: 0x10]
	SolarVirtualBullet[] BulletsInSimulated;//[Offset: 0xd8, Size: 0x10]
	SolarVirtualBullet[] BulletsInDedicatedServer;//[Offset: 0xe8, Size: 0x10]
	SolarBullet* EffectBulletCDO;//[Offset: 0x148, Size: 0x8]

--------------------------------
Class: SolarVirtualBullet
	ParticleSystemComponent* BulletEffect;//[Offset: 0x8, Size: 0x8]
	ParticleSystemComponent* TrajectoryEffect;//[Offset: 0x10, Size: 0x8]
	ParticleSystemComponent* TrajectoryBeamEffect;//[Offset: 0x18, Size: 0x8]
	SolarVirtualBulletAKComponent* AkComponent;//[Offset: 0x20, Size: 0x8]
	Actor*[] IgnoreHitedActors;//[Offset: 0x28, Size: 0x10]
	Vector_NetQuantize AntiCheatCameraForwardLoc;//[Offset: 0x158, Size: 0xc]

--------------------------------
Class: SolarVirtualBulletAKComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponFireLaserCollector.ActorComponent.Object
	SolarWeapon* OwnerWeapon;//[Offset: 0xb8, Size: 0x8]
	AkComponent* FireAkComponent;//[Offset: 0xc0, Size: 0x8]
	AkComponent* ImpactAkComponent;//[Offset: 0xc8, Size: 0x8]
	WeaponFireLaserElement ActElement;//[Offset: 0xd0, Size: 0x48]
	WeaponFireLaserElement[] FadingElements;//[Offset: 0x118, Size: 0x10]
	ParticleSystem* ExplodeEffectParticle;//[Offset: 0x140, Size: 0x8]
	ParticleSystem* DecalsEffectParticle;//[Offset: 0x148, Size: 0x8]
	ParticleSystemComponent*[] CacheParticles;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: WeaponFireLaserElement
	ParticleSystemComponent* BeamEffect;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: WeaponAnimationComponent.ActorComponent.Object
	WeaponAnimInstance* WeaponAnimInstance;//[Offset: 0xb0, Size: 0x8]
	SolarWeapon* MyWeapon;//[Offset: 0xb8, Size: 0x8]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0xc0, Size: 0x8]
	<enum,AnimSequence*> AnimSequenceMap;//[Offset: 0xc8, Size: 0x50]
	void SRecieveProto_SwitchStateAction(FString paramters);// 0x55c4312cd041
	void SetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x55c3312cd041
	void PostWeaponAnimStateToSimulation(enum InWeaponAnimState, float InAnimPlaySpeed, bool bForceSetAnimState);// 0x55c2312cd041
	void InternalSetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x55c1312cd041
	void InitSkeletaMesh(SkeletalMeshComponent* Mesh);// 0x55c0312cd041
	void GotoState(enum State, float Interval);// 0x55bf312cd041
	void CRecieveProto_SwitchStateAction(bool bAutonomous, FString paramters);// 0x55be312cd041

--------------------------------
Class: WeaponAnimInstance.AnimInstance.Object
	bool bInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	bool bOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	bool bBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1]
	AnimMsgData[] MsgArray;//[Offset: 0x270, Size: 0x10]
	AnimMsgData CurrentMsg;//[Offset: 0x280, Size: 0x8]
	bool bCurrentMsgUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	AnimSequence* IdleAnim;//[Offset: 0x290, Size: 0x8]
	AnimSequence* FireAnim;//[Offset: 0x298, Size: 0x8]
	AnimSequence* AltFireAnim;//[Offset: 0x2a0, Size: 0x8]
	AnimSequence* ReloadAnim;//[Offset: 0x2a8, Size: 0x8]
	AnimSequence* OverloadAnim;//[Offset: 0x2b0, Size: 0x8]
	AnimSequence* OpenScopeAnim;//[Offset: 0x2b8, Size: 0x8]
	AnimSequence* CloseScopeAnim;//[Offset: 0x2c0, Size: 0x8]
	AnimSequence* BoltAnim;//[Offset: 0x2c8, Size: 0x8]
	bool SwitchStateCheck(enum CheckState);// 0x55cd312cd041
	void SetInterruptIsTrue();// 0x55cc312cd041
	bool RouterNodeJudge();// 0x55cb312cd041
	void OnQuitState(enum State);// 0x55ca312cd041
	void OnEnterState(enum State);// 0x55c9312cd041
	void Interrupt();// 0x55c8312cd041
	bool HasMsg();// 0x55c7312cd041
	bool ConsumMsg();// 0x55c6312cd041
	bool AddMsg(enum State, float Speed);// 0x55c5312cd041

--------------------------------
Class: AnimMsgData
	enum State;//[Offset: 0x0, Size: 0x1]
	float Speed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WeaponNetComponent.ActorComponent.Object
	WeaponUpgradeNetData UpgradeData;//[Offset: 0xb0, Size: 0x20]
	WeaponPartsNetData PartsData;//[Offset: 0xd0, Size: 0x60]
	bool bSkinModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool bUpgradeModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	bool bPartsModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132, Size: 0x1]
	WeaponLevelUpInfo LevelData;//[Offset: 0x133, Size: 0x3]
	int PartsInitCount;//[Offset: 0x138, Size: 0x4]
	void OnRep_UpgradeData();// 0x5701312cd041
	void OnRep_PartsInitCount();// 0x5700312cd041
	void OnRep_PartsData();// 0x56ff312cd041
	void OnRep_Level();// 0x56fe312cd041

--------------------------------
Class: WeaponUpgradeNetData
	int TotalScore;//[Offset: 0x0, Size: 0x4]
	int LevelScore;//[Offset: 0x4, Size: 0x4]
	UpgradeSlotStruct[] UpgradeSlots;//[Offset: 0x8, Size: 0x10]
	int UpgradeCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: UpgradeSlotStruct
	int SlotID;//[Offset: 0x0, Size: 0x4]
	bool Unlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum AccessoryType;//[Offset: 0x5, Size: 0x1]
	int AccessoryID;//[Offset: 0x8, Size: 0x4]
	SlateBrush IconOverride;//[Offset: 0x10, Size: 0x98]
	LinearColor IconColorOverride;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: WeaponPartsNetData
	WeaponPartsData Data;//[Offset: 0x0, Size: 0x28]
	int ChangedPartType;//[Offset: 0x48, Size: 0x4]
	int ChangedPartID;//[Offset: 0x4c, Size: 0x4]
	int OriginalPartID;//[Offset: 0x50, Size: 0x4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	WeaponSkinConfigID Skin;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: WeaponPartsData
	int ScopeID;//[Offset: 0x0, Size: 0x4]
	int GripID;//[Offset: 0x4, Size: 0x4]
	int GunStockID;//[Offset: 0x8, Size: 0x4]
	int MuzzleID;//[Offset: 0xc, Size: 0x4]
	int ClipID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WeaponSkinConfigID
	int ID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: WeaponLevelUpInfo
	byte Level;//[Offset: 0x0, Size: 0x1]
	byte LastLevel;//[Offset: 0x1, Size: 0x1]
	byte AllowPlayVFX;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: WeaponSkinData.DataAsset.Object
	enum WeaponSkinType;//[Offset: 0x30, Size: 0x1]
	WeaponBodyData WeaponData;//[Offset: 0x38, Size: 0xf0]
	WeaponSkinPartData[] WeaponBarMap;//[Offset: 0x128, Size: 0x10]
	bool WeaponBarLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	WeaponSkinPartData[] WeaponClipMap;//[Offset: 0x140, Size: 0x10]
	bool WeaponClipLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	WeaponSkinPartData[] WeaponGripMap;//[Offset: 0x158, Size: 0x10]
	bool WeaponGripLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool bUseGripIkSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	WeaponSkinPartData[] WeaponScopeMap;//[Offset: 0x170, Size: 0x10]
	<int,Transform> ScopeOffsetMap;//[Offset: 0x180, Size: 0x50]
	bool WeaponScopeLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	WeaponSkinPartData[] WeaponStockMap;//[Offset: 0x1d8, Size: 0x10]
	bool WeaponStockLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	class SolarBullet* DedicatedBulletEffect;//[Offset: 0x1f0, Size: 0x8]
	class SolarBullet* DedicatedSkillEffect;//[Offset: 0x1f8, Size: 0x8]
	SoftClassPath DedicatedBulletEffectPath;//[Offset: 0x200, Size: 0x18]
	SoftClassPath DedicatedSkillEffectPath;//[Offset: 0x218, Size: 0x18]
	ParticleSystem* DedicatedKillEffect;//[Offset: 0x230, Size: 0x8]
	SoftObjectPath DedicatedKillEffectPath;//[Offset: 0x238, Size: 0x18]
	SoftObjectPath DedicatedSpecialEffectPath;//[Offset: 0x250, Size: 0x18]
	class ActorEffect* DedicatedDissolvedDeathActorEffect;//[Offset: 0x268, Size: 0x8]
	SoftObjectPath DedicatedDissolvedDeathFXPath;//[Offset: 0x270, Size: 0x18]
	FString PlayAudioEventName;//[Offset: 0x288, Size: 0x10]
	FString StopAudioEventName;//[Offset: 0x298, Size: 0x10]
	AnimSequence* OutsideAnimation;//[Offset: 0x2a8, Size: 0x8]
	void ModifyResPath();// 0x56fd312cd041
	bool IsMeshReplace();// 0x56fc312cd041
	bool GetPartLockedInfoByType(const enum PartType);// 0x56fb312cd041
	bool GetPartDataArrayByType(const enum PartType, out WeaponSkinPartData[] PartDataMap);// 0x56fa312cd041

--------------------------------
Class: WeaponBodyData
	int weaponid;//[Offset: 0x0, Size: 0x4]
	FString WeaponDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath WeaponMesh;//[Offset: 0x18, Size: 0x18]
	class WeaponAnimInstance* WeaponAnimBP;//[Offset: 0x30, Size: 0x8]
	<enum,SoftObjectPath> OverrideWeaponAnimSequenceMap;//[Offset: 0x38, Size: 0x50]
	SoftObjectPath LodpMesh;//[Offset: 0x88, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0xa0, Size: 0x10]
	Vector MeshExtraFPPLocation;//[Offset: 0xb0, Size: 0xc]
	Vector NoMeshExtraFPPLocation;//[Offset: 0xbc, Size: 0xc]
	Rotator MeshExtraFPPRotation;//[Offset: 0xc8, Size: 0xc]
	Rotator NoMeshExtraFPPRotation;//[Offset: 0xd4, Size: 0xc]
	WeaponSkinExtraPS[] SkinPSArray;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: WeaponSkinExtraPS
	bool bStimulatedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName Socket;//[Offset: 0x4, Size: 0x8]
	ParticleSystem* PS;//[Offset: 0x10, Size: 0x8]
	SoftObjectPath PSPath;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: WeaponSkinPartData
	int WeaponPartId;//[Offset: 0x0, Size: 0x4]
	FString WeaponPartDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath PartDataAsset;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ActorEffect.Object
	class ActorEffectController* ControllerClass;//[Offset: 0x28, Size: 0x8]
	ActorEffectController* Controller;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ActorEffectController.Object

--------------------------------
Class: PlayerWeaponRecoilComponent.WeaponRecoilComponent.ActorComponent.Object
	enum CurrentCharacterState;//[Offset: 0x230, Size: 0x1]
	enum CurrentPostureType;//[Offset: 0x231, Size: 0x1]

--------------------------------
Class: WeaponRecoilComponent.ActorComponent.Object
	SolarGameInstanceBase* GameInstance;//[Offset: 0xb8, Size: 0x8]
	bool bHActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bVActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bRActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	SolarWeapon* MyWeaponActor;//[Offset: 0xc8, Size: 0x8]
	SingleWeaponConfig* WeaponConfig;//[Offset: 0xd0, Size: 0x8]
	CurveFloat* YawCurve;//[Offset: 0xd8, Size: 0x8]
	CurveFloat* PitchCurve;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* RollCurve;//[Offset: 0xe8, Size: 0x8]
	CurveFloat* ScopeRollCurve;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* ScopePitchCurve;//[Offset: 0xf8, Size: 0x8]
	RichCurveKey[] OriginalScopePitchKeys;//[Offset: 0x100, Size: 0x10]
	AmmoConfig* CurrentAmmoConfig;//[Offset: 0x110, Size: 0x8]
	CurveFloat*[] YawCurveArray;//[Offset: 0x1e0, Size: 0x10]
	CurveFloat*[] PitchCurveArray;//[Offset: 0x1f0, Size: 0x10]
	CurveFloat* PitchEndCurve;//[Offset: 0x200, Size: 0x8]
	CurveFloat*[] RollCurveArray;//[Offset: 0x208, Size: 0x10]
	CurveFloat*[] ScopeRollCurveArray;//[Offset: 0x218, Size: 0x10]
	void SetRecoilVActive(bool bActive);// 0x4226312cd041
	void SetRecoilRActive(bool bActive);// 0x4225312cd041
	void SetRecoilHActive(bool bActive);// 0x4224312cd041
	void SetRecoilActive(bool bActive);// 0x4223312cd041
	bool JudgeHorizontalRecoilDir(out const Vector factorVector, bool bCurrentRight, int instantCout);// 0x4222312cd041
	bool IsRunning();// 0x4221312cd041
	CurveFloat* GetYawCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x4220312cd041
	CurveFloat* GetRollCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x421f312cd041
	CurveFloat* GetPitchCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x421e312cd041
	Rotator GetCurrentRecoil();// 0x421d312cd041
	Rotator GetAndClearCurrentRecoil();// 0x421c312cd041
	void Fire(bool hipfire, bool primary);// 0x421b312cd041

--------------------------------
Class: SolarGameInstanceBase.QFrameworkArchitecture.GameInstance.Object
	SoftObjectPath LoginMap;//[Offset: 0x1d0, Size: 0x18]
	SoftObjectPath LobbyMap;//[Offset: 0x1e8, Size: 0x18]
	SoftObjectPath EntryMap;//[Offset: 0x200, Size: 0x18]
	SoftObjectPath GameMap;//[Offset: 0x218, Size: 0x18]
	SoftObjectPath SettlementMap;//[Offset: 0x230, Size: 0x18]
	SoftObjectPath ConfigServerMap;//[Offset: 0x248, Size: 0x18]
	FString ConfigBattleAddr;//[Offset: 0x260, Size: 0x10]
	int ConfigBattlePort;//[Offset: 0x270, Size: 0x4]
	FString ConfigBackendAddr;//[Offset: 0x278, Size: 0x10]
	int ConfigBackendPort;//[Offset: 0x288, Size: 0x4]
	int BuildNumber;//[Offset: 0x28c, Size: 0x4]
	class SolarSaveGame* SaveGameClass;//[Offset: 0x290, Size: 0x28]
	SoftClassPath DefaultOperationLayout;//[Offset: 0x2b8, Size: 0x18]
	SoftClassPath DefaultLockSettings;//[Offset: 0x2d0, Size: 0x18]
	SoftClassPath ReplayManagerClass;//[Offset: 0x2e8, Size: 0x18]
	SoftClassPath DefaultGameModeLockSettings;//[Offset: 0x300, Size: 0x18]
	bool bNeedRebootButNot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	int LastChoosedVoiceLangID;//[Offset: 0x31c, Size: 0x4]
	FString CachedNetworkErrorString;//[Offset: 0x320, Size: 0x10]
	SolarOperationUIElement* CachedDefaultOperationLayout;//[Offset: 0x330, Size: 0x8]
	bool bBaseManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	bool bGameManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1]
	bool bLuaManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a, Size: 0x1]
	delegate OnBaseManagersInit;//[Offset: 0x340, Size: 0x10]
	delegate OnGameManagersInit;//[Offset: 0x350, Size: 0x10]
	delegate OnLuaManagersInit;//[Offset: 0x360, Size: 0x10]
	GameArgs* GameArgsManager;//[Offset: 0x4e8, Size: 0x8]
	UIManager* UIManager;//[Offset: 0x4f0, Size: 0x8]
	UINavigationManager* UINavigationManager;//[Offset: 0x4f8, Size: 0x8]
	SolarInputMappingManager* SolarInputMappingManager;//[Offset: 0x500, Size: 0x8]
	SolarTimerManager* SolarTimerManager;//[Offset: 0x508, Size: 0x8]
	SolarMainPlayerModel* MainPlayerModel;//[Offset: 0x510, Size: 0x8]
	SolarGameConfigManager* GameConfigManager;//[Offset: 0x518, Size: 0x8]
	BattlePassConfigInfo* BattlePassConfigInfo;//[Offset: 0x520, Size: 0x8]
	SolarLuaHelper* SolarLuaHelper;//[Offset: 0x528, Size: 0x8]
	SolarAnoHelper* SolarAnoHelper;//[Offset: 0x530, Size: 0x8]
	SolarTableManager* SolarTableManager;//[Offset: 0x538, Size: 0x8]
	SolarTcpNetworkManager* SolarTcpNetworkManager;//[Offset: 0x540, Size: 0x8]
	SolarUDPManager* SolarUDPManager;//[Offset: 0x548, Size: 0x8]
	SolarAssetManager* SolarAssetManager;//[Offset: 0x550, Size: 0x8]
	SolarItemManager* SolarItemManager;//[Offset: 0x558, Size: 0x8]
	SolarInteractableManager* SolarInteractableManager;//[Offset: 0x560, Size: 0x8]
	SolarPlatformHelper* SolarPlatformHelper;//[Offset: 0x568, Size: 0x8]
	SolarMapManager* SolarMapManager;//[Offset: 0x570, Size: 0x8]
	WeaponGrowthManager* WeaponGrowthManager;//[Offset: 0x578, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x580, Size: 0x8]
	IMChatObject* SolarIMChatObject;//[Offset: 0x588, Size: 0x8]
	SolarLuaManager* SolarLuaManager;//[Offset: 0x590, Size: 0x8]
	SolarGameStatistics* SolarGameStatistics;//[Offset: 0x598, Size: 0x8]
	SolarWeaponMergeMeshManager* WeaponMergeMeshManager;//[Offset: 0x5a0, Size: 0x8]
	CrashReportManager* CrashReportManager;//[Offset: 0x5a8, Size: 0x8]
	SolarPopPanelManager* SolarPopPanelManager;//[Offset: 0x5b0, Size: 0x8]
	SolarApplicationLifetimeManager* SolarApplicationLifetimeManager;//[Offset: 0x5b8, Size: 0x8]
	SolarHomeActorManager* SolarHomeActorManager;//[Offset: 0x5c0, Size: 0x8]
	SolarGameplayLogger* SolarGameplayLoggger;//[Offset: 0x5c8, Size: 0x8]
	SolarAttributeSubSystem* SolarAttributeSubSystem;//[Offset: 0x5d0, Size: 0x8]
	SCustomizedGameModeManager* CustomizedGameManager;//[Offset: 0x5d8, Size: 0x8]
	SolarRedHintManager* SolarRedHintMgr;//[Offset: 0x5e0, Size: 0x8]
	SolarGameModeSelectionManager* SolarGameModeSelectionMgr;//[Offset: 0x5e8, Size: 0x8]
	SolarPingFpsManager* SolarPingFpsMgr;//[Offset: 0x5f0, Size: 0x8]
	SolarGameUserSettingsMgr* SolarGameUserSettingsMgr;//[Offset: 0x5f8, Size: 0x8]
	SolarLoginManager* SolarLoginManager;//[Offset: 0x600, Size: 0x8]
	SolarLockSettingsMgr* SolarLockSettingsMgr;//[Offset: 0x608, Size: 0x8]
	SolarGameProgressManager* SolarGameProgressMgr;//[Offset: 0x610, Size: 0x8]
	SolarABTestManager* SolarABTestManager;//[Offset: 0x618, Size: 0x8]
	SolarHttpManager* SolarHttpManager;//[Offset: 0x620, Size: 0x8]
	SolarActivityManager* SolarActivityManager;//[Offset: 0x628, Size: 0x8]
	SolarTutorialManager* SolarTutorialManager;//[Offset: 0x630, Size: 0x8]
	SolarVibrateManager* SolarVibrateManager;//[Offset: 0x638, Size: 0x8]
	SolarReplayManager* SolarReplayManager;//[Offset: 0x640, Size: 0x8]
	SolarSaveGame* SolarSaveGame;//[Offset: 0x648, Size: 0x8]
	class SettlementStageManager* SettlementManagerClass;//[Offset: 0x650, Size: 0x28]
	SettlementStageManager* SettlementManager;//[Offset: 0x678, Size: 0x8]
	CGMCrossLevelDataMgr* CrossLevelDataMgr;//[Offset: 0x680, Size: 0x8]
	class SolarGraphicSettings* SolarGraphicSettingsClass;//[Offset: 0x6a0, Size: 0x28]
	SolarAccessLuaDataUtils* LuaDataAccessUtils;//[Offset: 0x6c8, Size: 0x8]
	SolarAkSoundManager* SolarAkSoundManager;//[Offset: 0x6d0, Size: 0x8]
	bool bIsDedicatedServerStressTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 0x1]
	KeyMappingManager* KeyMappingManager;//[Offset: 0x6e0, Size: 0x8]
	SolarEasyAntiCheatManager* SolarEasyAntiCheatManager;//[Offset: 0x6e8, Size: 0x8]
	SolarSpecialEffectsMgr* SolarSpecialEffectsManager;//[Offset: 0x6f0, Size: 0x8]
	PakHashManager* SolarPakHashManager;//[Offset: 0x6f8, Size: 0x8]
	SolarFontManager* SolarFontManager;//[Offset: 0x700, Size: 0x8]
	SolarGraphicSettings* SolarGraphicSettings;//[Offset: 0x708, Size: 0x8]
	AndroidInputManager* AndroidInputManager;//[Offset: 0x710, Size: 0x8]
	delegate OnPatchComplete;//[Offset: 0x728, Size: 0x10]
	delegate OnTouchInputDelegate;//[Offset: 0x738, Size: 0x10]
	RegistedActorContainer CachedRegistedActors;//[Offset: 0x748, Size: 0x50]
	bool IsHotPatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 0x1]
	bool bCheatedInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b4, Size: 0x1]
	FText KickOutReason;//[Offset: 0x7b8, Size: 0x18]
	delegate OnSsmDSGetConfigSuccess;//[Offset: 0x7d0, Size: 0x10]
	AntiCheatSetting[] AntiCheatSettings;//[Offset: 0x7e0, Size: 0x10]
	void UpdateAntiCheatSetting();// 0x18aa312cd041
	void SolarGm_UploadLogFile();// 0x18a9312cd041
	void SolarGM_Tut(FString Cmd, out const FString[] Args);// 0x18a8312cd041
	void SolarGM_TriggerSteamAntiCheat(const int ActionReason, FString ActionDetials);// 0x18a7312cd041
	void SolarGM_TransmitGMLua(FString playerName, out const FString[] GmArray);// 0x18a6312cd041
	void SolarGM_TransmitGM(FString playerName, out const FString[] transmitGm);// 0x18a5312cd041
	void SolarGm_SwitchFastFont(bool bIsEnable);// 0x18a4312cd041
	void SolarGm_StopRecordingRePlay();// 0x18a3312cd041
	void SolarGm_StopPlayingReplay();// 0x18a2312cd041
	void SolarGm_StartRecordingLocalReplay(FString Filename);// 0x18a1312cd041
	void SolarGM_SetQuality(int InQuality);// 0x18a0312cd041
	void SolarGm_RequestReplayList(int PageIndex, int PageSize);// 0x189f312cd041
	void SolarGm_RequestPlayReplayByIdx(uint32 Index);// 0x189e312cd041
	void SolarGm_RequestPlayReplayByBattleID(FString BattleID, bool IsLive);// 0x189d312cd041
	void SolarGm_RequestPlayReplay(FString BattleID, FString DownloadUrl);// 0x189c312cd041
	void SolarGm_PlayLocalReplay(FString Filename);// 0x189b312cd041
	void SolarGM_LobbyLua(FString CmdName, out const FString[] Params);// 0x189a312cd041
	void SolarGM_Lobby(FString CmdName, out const FString[] Params);// 0x1899312cd041
	void SolarGM_GoHome();// 0x1898312cd041
	void SolarGm_EnableLuaCallStackProfile(bool bIsEnable);// 0x1897312cd041
	void SolarGM_AddWeaponExpLua(int weaponid, int count);// 0x1896312cd041
	void SolarGM_AddWeaponExp(int weaponid, int count);// 0x1895312cd041
	void SolarGM_AddItemLua(int ItemID, int count);// 0x1894312cd041
	void SolarGM_AddItem(int ItemID, int count);// 0x1893312cd041
	void ShutDownLimSdk();// 0x1892312cd041
	void ShutdownAnoSDK();// 0x1891312cd041
	void SetIsFirstLaunch(bool bIsFirst);// 0x1890312cd041
	void SetCleanUpfile(bool bCleanCache);// 0x188f312cd041
	bool ServerTravel(FString Map, int ListenPort, bool bSpectator, bool bSkipGameNotify, FString options);// 0x188e312cd041
	void SaveGame();// 0x188d312cd041
	void RequestShutDown(FString Reason);// 0x188c312cd041
	void ReportLoadingInfoToBI(out FString[] LoadingInfo, float LoadingTime, bool bIsFinished);// 0x188b312cd041
	void RegisterNetworkManager();// 0x188a312cd041
	void OnStartBattle(FString BattleID);// 0x1889312cd041
	void OnSsmDSGetConfigSuccess__DelegateSignature();// 0x1888312cd041
	void OnManagersInitialized__DelegateSignature();// 0x1887312cd041
	void OnHotPatchComplete();// 0x1886312cd041
	void OnDisconnect();// 0x1885312cd041
	void LuaStartGameFrameWork();// 0x1884312cd041
	void LuaInitGameFrameWork();// 0x1883312cd041
	bool IsStandalone();// 0x1882312cd041
	bool IsSolarServer(const Object* WorldContextObject);// 0x1881312cd041
	bool IsSkipLogin();// 0x1880312cd041
	bool IsServerOrStandalone();// 0x187f312cd041
	bool IsListenServer();// 0x187e312cd041
	bool IsGIsEditor();// 0x187d312cd041
	bool IsFirstLaunchAfterVersionUpdate();// 0x187c312cd041
	bool IsEditor();// 0x187b312cd041
	bool IsDedicatedServerStressTest();// 0x187a312cd041
	bool IsDedicatedServer();// 0x1879312cd041
	bool IsClientOrStandalone();// 0x1878312cd041
	bool IsClient();// 0x1877312cd041
	void InitLuaClasses();// 0x1876312cd041
	void InitGameManagers();// 0x1875312cd041
	bool IfUseSteamSDKLogin();// 0x1874312cd041
	bool HasCommandlineParam(FString Param);// 0x1873312cd041
	void GoHomeLuaCall();// 0x1872312cd041
	SolarWeaponMergeMeshManager* GetWeaponMergeMeshManager();// 0x1871312cd041
	WeaponGrowthManager* GetWeaponGrowthManager();// 0x1870312cd041
	UINavigationManager* GetUINavigationManager();// 0x186f312cd041
	SolarVibrateManager* GetSolarVibrateManager();// 0x186e312cd041
	SolarTutorialManager* GetSolarTutorialManager();// 0x186d312cd041
	SolarTimerManager* GetSolarTimerManager();// 0x186c312cd041
	SolarTcpNetworkManager* GetSolarTcpNetworkManager();// 0x186b312cd041
	SolarTableManager* GetSolarTableManager();// 0x186a312cd041
	SolarSaveGame* GetSolarSaveGame();// 0x1869312cd041
	SolarReplayManager* GetSolarReplayManager();// 0x1868312cd041
	SolarRedHintManager* GetSolarRedHintManager();// 0x1867312cd041
	SolarPopPanelManager* GetSolarPopPanelManager();// 0x1866312cd041
	SolarPlatformHelper* GetSolarPlatformHelper();// 0x1865312cd041
	SolarPingFpsManager* GetSolarPingFpsManager();// 0x1864312cd041
	SolarMapManager* GetSolarMapManager();// 0x1863312cd041
	SolarMainPlayerModel* GetSolarMainPlayerModel();// 0x1862312cd041
	SolarLuaManager* GetSolarLuaManager();// 0x1861312cd041
	SolarLuaHelper* GetSolarLuaHelper();// 0x1860312cd041
	SolarLoginManager* GetSolarLoginManager();// 0x185f312cd041
	SolarLockSettingsMgr* GetSolarLockSettingsManager();// 0x185e312cd041
	SolarItemManager* GetSolarItemManager();// 0x185d312cd041
	SolarInteractableManager* GetSolarInteractableManager();// 0x185c312cd041
	SolarInputMappingManager* GetSolarInputMappingManager();// 0x185b312cd041
	IMChatObject* GetSolarIMChatObject();// 0x185a312cd041
	SolarHttpManager* GetSolarHttpManager();// 0x1859312cd041
	SolarHomeActorManager* GetSolarHomeActorManager();// 0x1858312cd041
	SolarGameUserSettingsMgr* GetSolarGameUserSettingsManager();// 0x1857312cd041
	SolarGameplayLogger* GetSolarGameplayLogger();// 0x1856312cd041
	SolarGameModeSelectionManager* GetSolarGameModeSelectionManager();// 0x1855312cd041
	SolarGameInstanceBase* GetSolarGameInstanceBase(Object* WorldContextObject);// 0x1854312cd041
	SolarEasyAntiCheatManager* GetSolarEasyAntiCheatManager();// 0x1853312cd041
	SolarAnoHelper* GetSolarAnoHelperStatic(Object* WorldContextObject);// 0x1852312cd041
	SolarAnoHelper* GetSolarAnoHelper();// 0x1851312cd041
	SolarAkSoundManager* GetSolarAkSoundManager();// 0x1850312cd041
	SolarAkGameObject* GetSolarAkGameObject();// 0x184f312cd041
	SolarActivityManager* GetSolarActivityManager();// 0x184e312cd041
	SolarABTestManager* GetSolarABTestManager();// 0x184d312cd041
	SettlementStageManager* GetSettlementStageManager();// 0x184c312cd041
	byte GetPlayStage();// 0x184a312cd041
	SolarCharacter* GetPlayerCharacter();// 0x1849312cd041
	FString GetPIEServerURL();// 0x1848312cd041
	int GetPIEInstance();// 0x1847312cd041
	FString GetNetModeString();// 0x1846312cd041
	byte GetNetMode();// 0x1844312cd041
	KeyMappingManager* GetKeyMappingManager();// 0x1843312cd041
	bool GetIsMutiPlayer();// 0x1842312cd041
	SolarGameStatistics* GetGameStatistics();// 0x1841312cd041
	SolarGameConfigManager* GetGameConfigManager();// 0x1840312cd041
	SolarOperationUIElement* GetDefaultOperationLayout();// 0x183f312cd041
	SCustomizedGameModeManager* GetCustomizedGameManager();// 0x183e312cd041
	CGMCrossLevelDataMgr* GetCrossLevelDataMgr();// 0x183d312cd041
	CrashReportManager* GetCrashReportManager();// 0x183c312cd041
	int GetClientNumber();// 0x183b312cd041
	void GetCategorizedActorsOfType(const Object* WorldContextObject, enum InActorType, out Actor*[] OutActors);// 0x1839312cd041
	void GetCategorizedActorsByBits(const Object* WorldContextObject, byte InActorBit, out Actor*[] OutActors);// 0x1838312cd041
	BattlePassConfigInfo* GetBattlePassConfigInfo();// 0x1837312cd041
	SolarAssetManager* GetAssetManager();// 0x1836312cd041
	int64 GetAppActiveTimestampInterval();// 0x1835312cd041
	void ExecuteCommandArray(out const FString[] cmdArray);// 0x1834312cd041
	void ExecuteCommand(FString Cmd);// 0x1833312cd041
	void ExecuteBackKeyLuaCall();// 0x1832312cd041
	void ExecGameArgs(FString Args, out FString FailReason, out byte Branches);// 0x1830312cd041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, int FGuid_A, int FGuid_B, int FGuid_C, int FGuid_D);// 0x182f312cd041
	void ClearGameManagers();// 0x182e312cd041
	void CheckSavedDirFiles(out FString[] Files);// 0x182d312cd041
	void Browse(FString URL, byte TravelType);// 0x182b312cd041

--------------------------------
Class: QFrameworkArchitecture.GameInstance.Object
	QFrameworkIocContainer* Container;//[Offset: 0x1a0, Size: 0x8]
	SolarGameManager*[] InitManagers;//[Offset: 0x1a8, Size: 0x10]
	SolarAbstractModel*[] InitViewModels;//[Offset: 0x1b8, Size: 0x10]
	SolarAbstractModel* RegisterModel(out const class SolarAbstractModel ModelClass);// 0x182a312cd041
	SolarGameManager* RegisterManager(out const class SolarGameManager ManagerClass);// 0x1829312cd041
	SolarAbstractModel* GetModel(out const class SolarAbstractModel ModelClass);// 0x1828312cd041
	SolarGameManager* GetManager(out const class SolarGameManager ManagerClass);// 0x1827312cd041

--------------------------------
Class: QFrameworkIocContainer.Object
	<uint32,Object*> InstanceDict;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: SolarGameManager.Object
	SolarGameInstanceBase* OwnerGameInstance;//[Offset: 0x28, Size: 0x8]
	void ReceiveManagerIntialized(SolarGameInstanceBase* GameInstance);// 0x22ab312cd041

--------------------------------
Class: SolarAbstractModel.Object
	SolarGameInstanceBase* OwnerGameInstance;//[Offset: 0x28, Size: 0x8]
	void ReceiveModelIntialized(SolarGameInstanceBase* GameInstance);// 0x4428312cd041

--------------------------------
Class: SolarSaveGame.SaveGame.Object
	bool HasShowNewPlayerGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int EditorGameModeId;//[Offset: 0x2c, Size: 0x4]
	NeverShowCheckWindow[] NeverShowCheckWindowList;//[Offset: 0x30, Size: 0x10]
	bool HasReadSurvey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool HasReadSurvey2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool HasPlayedHuntMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	byte MatchTimes;//[Offset: 0x43, Size: 0x1]
	bool HasCompleteTeamUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool IsMorrowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bClickSocialEntranceBtnDiscord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bClickSocialEntranceBtnFacebook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	bool bClickSocialEntranceBtnYouTube;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bClickSocialEntranceBtnTikTok;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bClickSocialEntranceBtnInstagram;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bClickSocialTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bClickLiveBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int64 SocialLinkLastClickTime;//[Offset: 0x50, Size: 0x8]
	bool bHasReportedOnline15min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bHasReportedOnline30min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bHasPlayedPackEnterAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool bHasClickClanPermission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	int BattlePassID;//[Offset: 0x5c, Size: 0x4]
	int[] MarkingPassTaskID;//[Offset: 0x60, Size: 0x10]
	int[] DisplayedProductIDs;//[Offset: 0x70, Size: 0x10]
	int[] ClickedPosterRecIDs;//[Offset: 0x80, Size: 0x10]
	uint32[] ReadMailIds;//[Offset: 0x98, Size: 0x10]
	bool ValidateNeverShowCheckWindow(int TargetConfirmID);// 0x4df5312cd041
	void UpdateNeverShowCheckWindow(int TargetConfirmID, enum NewDuration);// 0x4df4312cd041
	void UpdateMarkTask(int InBattlePassID, int TaskID, bool Add);// 0x4df3312cd041
	void UpdateDisplayedIDs(out const int[] InIDs);// 0x4df2312cd041
	void UpdateClickedPosterRecIDs(const int InID);// 0x4df1312cd041
	void SetMarkingTask(int InBattlePassID, out int[] InTaskID);// 0x4df0312cd041
	void PrintTwiceConfirmCheckWindowList();// 0x4def312cd041
	void GetMarkingTask(int InBattlePassID, out int[] OutTaskID);// 0x4dee312cd041
	bool DeleteNeverShowCheckWindow(int TargetConfirmID);// 0x4ded312cd041
	void ClearDisplayIDs();// 0x4dec312cd041

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: NeverShowCheckWindow
	int ConfirmID;//[Offset: 0x0, Size: 0x4]
	DateTime Timestamp;//[Offset: 0x8, Size: 0x8]
	enum Duration;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: DateTime

--------------------------------
Class: SolarOperationUIElement.Object
	OperationUIElement[] CharacterOperationUI;//[Offset: 0x28, Size: 0x10]
	OperationUIElement[] DirectionOperationUI;//[Offset: 0x38, Size: 0x10]
	OperationUIElement[] SteeringOperationUI;//[Offset: 0x48, Size: 0x10]
	OperationUIElement[] JoyStickOperationUI;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: OperationUIElement
	FString PanelName;//[Offset: 0x0, Size: 0x10]
	FString PanelAliasName;//[Offset: 0x10, Size: 0x10]
	float CurScale;//[Offset: 0x20, Size: 0x4]
	float MinScale;//[Offset: 0x24, Size: 0x4]
	float MaxScale;//[Offset: 0x28, Size: 0x4]
	float CurOpacity;//[Offset: 0x2c, Size: 0x4]
	float MinOpacity;//[Offset: 0x30, Size: 0x4]
	float MaxOpacity;//[Offset: 0x34, Size: 0x4]
	bool bCanHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bLockAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float minOffsetY;//[Offset: 0x3c, Size: 0x4]
	float maxOffsetY;//[Offset: 0x40, Size: 0x4]
	bool bCannotChangeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bCannotChangeOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	Vector2D Translation;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: GameArgs.Object
	FString[] CommandLineArgs;//[Offset: 0x30, Size: 0x10]
	bool SkipTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool ExecGameArgs(FString Args, out FString FailReason);// 0x3ed1312cd041

--------------------------------
Class: UIManager.SolarGameManager.Object
	delegate[] OnBigMapOpenDelegateGroup;//[Offset: 0x60, Size: 0x10]
	delegate[] OnBigMapVisibilityChangedDelegateGroup;//[Offset: 0x70, Size: 0x10]
	DataTable* BattleWidgetSettings;//[Offset: 0x80, Size: 0x8]
	SolarUIRoot* SolarUIRoot;//[Offset: 0x88, Size: 0x8]
	DestroyObjectStruct[] NeedToDestroyObjects;//[Offset: 0x90, Size: 0x10]
	void WatchReference();// 0x569e312cd041
	void WatchAllReference();// 0x569d312cd041
	void UpdateButtonSprite(Button* TargetButton, FString AtlasType, FString NormalSpName, FString PressedSpName, FString HoveredSpName, FString DisableSpName);// 0x569c312cd041
	void TriggerDelegate();// 0x569b312cd041
	SolarUserWidget* ShowUIByName(FString InName, int RootID);// 0x569a312cd041
	void SetWidgetLayout(Widget* InWidget, float Scale, float Opacity, float PositionX, float PositionY, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY);// 0x5699312cd041
	void SetWidgetChildrenLayout(UserWidget* InRootWidget, out const FName PanelAliasName, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY);// 0x5698312cd041
	SolarUserWidget* SetUIActive(SolarUserWidget* InWidget, const bool Inactive);// 0x5697312cd041
	void SetMaterialInstanceParams(Image* Image, FString ParamName, float Value);// 0x5696312cd041
	void SetMaterialInstanceColor(Image* Image, FString ParamName, out const LinearColor Value);// 0x5695312cd041
	void SetLoadingUIByLevelAndDisplay(int InModelID, int InLevel, int InMapIndex, bool InDisableCustomLoading);// 0x5694312cd041
	void SetImageTintColor(Image* Img, out const LinearColor InColor);// 0x5693312cd041
	void SetImageTexture(Image* Img, Texture2D* Texture);// 0x5692312cd041
	void SetImageFromTextureOrSprite(Image* DstImage, out const SoftObjectPath Path, bool bMatchSize);// 0x5691312cd041
	void SetImageColor(Image* Img, float R, float G, float B, float A);// 0x5690312cd041
	void SetFireInputStyle(FireInputWidget* FireInput, const SlateWidgetStyleAsset* Style);// 0x568f312cd041
	void SetCheckedState(CheckBox* Box, const enum State);// 0x568e312cd041
	void SetCheckboxStyle(CheckBox* CheckBox, const SlateWidgetStyleAsset* Style);// 0x568d312cd041
	void SetCheckBoxIsChecked(CheckBox* CheckBox, bool Checked);// 0x568c312cd041
	void SetButtonStyle(Button* Btn, const SlateWidgetStyleAsset* Style);// 0x568b312cd041
	void RemoveAllWidgets();// 0x568a312cd041
	void OpenUIGM(FString UIID, int RootID);// 0x5689312cd041
	void OpenConfirmUIInLua(int ConfirmID);// 0x5688312cd041
	void OnLuaHotReloadFileChanged(FString LuaSysPath, FString LuaPathName);// 0x5687312cd041
	void OnInitLuaHotReload();// 0x5686312cd041
	void OnGameManagersInitialized();// 0x5685312cd041
	void OnClientStartGame();// 0x5684312cd041
	void LuaCloseUI(FString MapName);// 0x5683312cd041
	Texture2D* LoadTexture2DBySoftPath(out const SoftObjectPath Path);// 0x5682312cd041
	Texture2D* LoadTexture2DByPath(Object* InOuter, FString FullPath);// 0x5681312cd041
	Texture2D* LoadTexture2D(Object* InOuter, FString TextureType, FString TexName);// 0x5680312cd041
	Texture2D* LoadQualityBG(Object* InOuter, const int InQuality);// 0x567f312cd041
	PaperSprite* LoadPaperSprite(Object* InOuter, FString AtlasPath, FString SpName);// 0x567e312cd041
	MaterialInterface* LoadMaterialInstance(Object* InOuter, FString MaterialType, FString MaterialName);// 0x567d312cd041
	bool IsWidgetVisibleForDisplay(const Widget* InWidget);// 0x567c312cd041
	void InvalidateWidgetPrepass(Widget* InWidget);// 0x567b312cd041
	void InitLvlTextWidget(TextBlock* InHeadTextWidget, TextBlock* InTrailTextWidget);// 0x567a312cd041
	SolarCharacter* GetWidgetOwningCharacter(const Widget* InWidget);// 0x5679312cd041
	FString GetWeaponTextureFullPath(out FString IconPath);// 0x5678312cd041
	UserWidget* GetUIPanel(FString MapName);// 0x5677312cd041
	FString GetTexture2DFullPath(out FString PrePath, out FString IconPath);// 0x5676312cd041
	FString GetQualityBGFullPath(const int InQuality, const bool bWithSuffix);// 0x5675312cd041
	Texture2D* GetPlayerAvatarByID(int PlayerAvatarID);// 0x5674312cd041
	int GetLobbyID();// 0x5673312cd041
	bool GetCheckBoxIsChecked(CheckBox* CheckBox);// 0x5672312cd041
	CanvasPanelSlot* GetCanvasPanelSlotForWidget(Widget* Widget);// 0x5671312cd041
	CustomWidget_TableRow GetBattleWidgetSetting(FString ConfigName);// 0x5670312cd041
	UserWidget* GetBattleBackpackWidget();// 0x566f312cd041
	void ExitSpectateMode();// 0x566e312cd041
	void EnterSpectateMode();// 0x566d312cd041
	void CloseUIGM(FString UIID);// 0x566c312cd041
	void CloseLoadingUI();// 0x566b312cd041
	Margin ClampInScreenOffsets(Widget* WorldContextObject, out const Margin Offsets, out const Anchors Anchors, out const Vector2D Alignment);// 0x566a312cd041

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x150, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x158, Size: 0x2b8]
	LinearColor ColorAndOpacity;//[Offset: 0x410, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x420, Size: 0x10]
	byte ClickMethod;//[Offset: 0x430, Size: 0x1]
	byte TouchMethod;//[Offset: 0x431, Size: 0x1]
	byte PressMethod;//[Offset: 0x432, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x433, Size: 0x1]
	delegate OnClicked;//[Offset: 0x438, Size: 0x10]
	delegate OnPressed;//[Offset: 0x448, Size: 0x10]
	delegate OnReleased;//[Offset: 0x458, Size: 0x10]
	delegate OnHovered;//[Offset: 0x468, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x478, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x3770312cd041
	void SetStyle(out const ButtonStyle InStyle);// 0x376f312cd041
	void SetPressMethod(byte InPressMethod);// 0x376e312cd041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x376d312cd041
	void SetClickMethod(byte InClickMethod);// 0x376c312cd041
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x376b312cd041
	bool IsPressed();// 0x376a312cd041

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x169e312cd041
	PanelSlot* GetContentSlot();// 0x169d312cd041
	Widget* GetContent();// 0x169c312cd041

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 0x98]
	SlateBrush Hovered;//[Offset: 0xa0, Size: 0x98]
	SlateBrush Pressed;//[Offset: 0x138, Size: 0x98]
	SlateBrush Disabled;//[Offset: 0x1d0, Size: 0x98]
	Margin NormalPadding;//[Offset: 0x268, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x278, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x288, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x2a0, Size: 0x18]

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: FireInputWidget.Widget.Visual.Object
	SlateBrush JoyStickThumb;//[Offset: 0x138, Size: 0x98]
	SlateBrush JoyStickThumbPress;//[Offset: 0x1d0, Size: 0x98]
	SlateBrush JoyStickIcon;//[Offset: 0x268, Size: 0x98]
	Vector2D VisualSize;//[Offset: 0x300, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x308, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x310, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x318, Size: 0x8]
	float ActiveOpacity;//[Offset: 0x320, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x324, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x328, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 0x1]
	delegate OnJoystickPressed;//[Offset: 0x340, Size: 0x10]
	delegate OnJoystickRelease;//[Offset: 0x350, Size: 0x10]
	delegate OnInputYawAndPitch;//[Offset: 0x360, Size: 0x10]
	void SetJoyStickThumbBrush(out const ButtonStyle ButtonStyle);// 0x3ed0312cd041
	void SetJoyStickIcon(out const SlateBrush Icon);// 0x3ecf312cd041
	void SetInputScale(Vector2D Scale);// 0x3ece312cd041
	void ResetControlInput();// 0x3ecd312cd041

--------------------------------
Class: SolarUIRoot.SolarUserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: DestroyObjectStruct
	UserWidget* RootWidget;//[Offset: 0x0, Size: 0x8]
	FString FullPath;//[Offset: 0x8, Size: 0x10]
	DestroyObjectEntry[] Objects;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: DestroyObjectEntry
	Object* Object;//[Offset: 0x0, Size: 0x8]
	FString FullPath;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x149, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x14c, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x160, Size: 0x610]
	SlateWidgetStyleAsset* Style;//[Offset: 0x770, Size: 0x8]
	SlateBrushAsset* UncheckedImage;//[Offset: 0x778, Size: 0x8]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0x780, Size: 0x8]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0x788, Size: 0x8]
	SlateBrushAsset* CheckedImage;//[Offset: 0x790, Size: 0x8]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0x798, Size: 0x8]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0x7a0, Size: 0x8]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0x7a8, Size: 0x8]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0x7b0, Size: 0x8]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0x7b8, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x7c0, Size: 0x1]
	Margin Padding;//[Offset: 0x7c4, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0x7d8, Size: 0x28]
	byte ClickMethod;//[Offset: 0x800, Size: 0x1]
	byte TouchMethod;//[Offset: 0x801, Size: 0x1]
	byte PressMethod;//[Offset: 0x802, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x803, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0x808, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x468f312cd041
	void SetPressMethod(byte InPressMethod);// 0x468e312cd041
	void SetIsChecked(bool InIsChecked);// 0x468d312cd041
	void SetClickMethod(byte InClickMethod);// 0x468c312cd041
	void SetCheckedState(enum InCheckedState);// 0x468b312cd041
	bool IsPressed();// 0x468a312cd041
	bool IsChecked();// 0x4689312cd041
	enum GetCheckedState();// 0x4688312cd041

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0x98]
	SlateBrush UncheckedHoveredImage;//[Offset: 0xa8, Size: 0x98]
	SlateBrush UncheckedPressedImage;//[Offset: 0x140, Size: 0x98]
	SlateBrush CheckedImage;//[Offset: 0x1d8, Size: 0x98]
	SlateBrush CheckedHoveredImage;//[Offset: 0x270, Size: 0x98]
	SlateBrush CheckedPressedImage;//[Offset: 0x308, Size: 0x98]
	SlateBrush UndeterminedImage;//[Offset: 0x3a0, Size: 0x98]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x438, Size: 0x98]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x4d0, Size: 0x98]
	Margin Padding;//[Offset: 0x568, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x578, Size: 0x28]
	SlateColor BorderBackgroundColor;//[Offset: 0x5a0, Size: 0x28]
	SlateSound CheckedSlateSound;//[Offset: 0x5c8, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x5e0, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x5f8, Size: 0x18]

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x160, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x178, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x188, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1c0, Size: 0x58]
	SlateBrush StrikeBrush;//[Offset: 0x218, Size: 0x98]
	Vector2D ShadowOffset;//[Offset: 0x2b0, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x2b8, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2c8, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x2d8, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd, Size: 0x1]
	enum TextTransformPolicy;//[Offset: 0x2de, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2df, Size: 0x1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x16bf312cd041
	void SetText(FText InText);// 0x16be312cd041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x16bd312cd041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x16bc312cd041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x16bb312cd041
	void SetOpacity(float InOpacity);// 0x16ba312cd041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x16b9312cd041
	void SetFont(SlateFontInfo InFontInfo);// 0x16b8312cd041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x16b7312cd041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x16b6312cd041
	FText GetText();// 0x16b5312cd041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x16b4312cd041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x16b3312cd041

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x138, Size: 0x3]
	byte Justification;//[Offset: 0x13b, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x13c, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 0x1]
	float WrapTextAt;//[Offset: 0x140, Size: 0x4]
	Margin Margin;//[Offset: 0x144, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x154, Size: 0x4]
	bool AlwaysKeepJustification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 0x1]
	void SetJustification(byte InJustification);// 0x1650312cd041

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20]
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8]
	int Size;//[Offset: 0x48, Size: 0x4]
	int LetterSpacing;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: CustomWidget_TableRow.TableRowBase
	SoftObjectPath TeammateState;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath BattleScore;//[Offset: 0x20, Size: 0x18]
	SoftObjectPath SpectatorListPath;//[Offset: 0x38, Size: 0x18]
	SoftObjectPath SafeAreaProgress;//[Offset: 0x50, Size: 0x18]
	SoftObjectPath JobEffectListPath;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath JobEffectSelectPanelPath;//[Offset: 0x80, Size: 0x18]

--------------------------------
Class: TableRowBase

--------------------------------
Class: UINavigationManager.SolarGameManager.Object
	<FString,SolarUserWidget*> WidgetOpenedMap;//[Offset: 0x38, Size: 0x50]
	SolarUserWidget*[] TmpRemovedWidgets;//[Offset: 0x88, Size: 0x10]
	SolarUIRoot* SolarUIRoot;//[Offset: 0xa8, Size: 0x8]
	void UnbindCustomControlDefine(SolarUserWidget* PanelWidget, SolarUserWidget* UserWidget);// 0x56c1312cd041
	SolarUserWidget* ShowUIBySubClass(const class SolarUserWidget SubClass, enum RootID);// 0x56c0312cd041
	bool ShowPanelUI(SolarUserWidget* createWidget, FString UniqueWidgetKey);// 0x56bf312cd041
	void RemoveUIFromOpenedMap(FString UniqueWidgetKey);// 0x56be312cd041
	void RemoveAllSolarWidgets();// 0x56bd312cd041
	void PrePooledWidgetReset(UserWidget* UserWidget);// 0x56bc312cd041
	void OnShowPanelUI(SolarUserWidget* UserWidget);// 0x56bb312cd041
	void OnPostLoadMapInitUIRoot(World* InWorld);// 0x56ba312cd041
	void OnOpenPanelUI(SolarUserWidget* UserWidget);// 0x56b9312cd041
	void OnHidePanelUI(SolarUserWidget* UserWidget);// 0x56b8312cd041
	void OnClosePanelUI(SolarUserWidget* UserWidget);// 0x56b7312cd041
	SolarUserWidget* GetShowTopWidget();// 0x56b6312cd041
	UserWidget* GetOpenedWidget(FString UniqueWidgetKey);// 0x56b5312cd041
	void CloseUIBySubClass(const class SolarUserWidget SubClass);// 0x56b4312cd041
	void ClosePanelUI(SolarUserWidget* closeWidget, FString UniqueWidgetKey);// 0x56b3312cd041
	void ClearAllOpenedWidget();// 0x56b2312cd041
	void BindWidgetVisibilityChangedEvent(out const delegate VisibilityChangedEvent);// 0x56b1312cd041
	void BindCustomControlDefine(SolarUserWidget* PanelWidget, SolarUserWidget* UserWidget, FString FullPath);// 0x56b0312cd041
	void BatchRemovedWidgets(bool bRemoveAll);// 0x56af312cd041
	void AddUIToOpenedMap(FString UniqueWidgetKey, SolarUserWidget* Widget);// 0x56ae312cd041
	void AddBatchRemovedWidget(SolarUserWidget* UserWidget);// 0x56ad312cd041

--------------------------------
Class: SolarInputMappingManager.SolarGameManager.Object
	delegate OnInputMappingUpdate;//[Offset: 0x38, Size: 0x10]
	<FString,InputKeyMappingEntry> KeyMappingEntryDict;//[Offset: 0x48, Size: 0x50]
	void SplitInputChord(out const InputChord InInputChord, out FString KeyStr1, out FString KeyStr2);// 0x49fb312cd041
	InputKeyMappingEntry[] GetKeyMappingEntries();// 0x49fa312cd041
	InputKeyMappingEntry FindKeyMappingEntry(FString ActionID);// 0x49f9312cd041
	InputKeyMappingEntry CreateKeyMappingEntry(FString InActionID, FString InActionName, const enum InActionType, float InScale, FString InKeyStr1, FString InKeyStr2, FString InKeyStr3);// 0x49f8312cd041
	bool CreateInputChord(FString KeyStr1, FString KeyStr2, out InputChord OutInputChord);// 0x49f7312cd041
	void ApplyKeyMappings();// 0x49f6312cd041

--------------------------------
Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: InputKeyMappingEntry
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString ActionID;//[Offset: 0x8, Size: 0x10]
	FString ActionName;//[Offset: 0x18, Size: 0x10]
	enum ActionType;//[Offset: 0x28, Size: 0x1]
	float Scale;//[Offset: 0x2c, Size: 0x4]
	InputKeyMappingPair[] KeyMappingPairList;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: InputKeyMappingPair
	FString KeyStr1;//[Offset: 0x0, Size: 0x10]
	FString KeyStr2;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SolarTimerManager.Object
	bool bFullCleanup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void UnPauseTimerInternal(TimerHandle Handle);// 0x53e1312cd041
	void TimerCallbackToLuaInternal(FString CallbackKey);// 0x53e0312cd041
	TimerHandle SetTimerForNextTickInternal(FString CallbackKey);// 0x53df312cd041
	void PauseTimerInternal(TimerHandle Handle);// 0x53de312cd041
	void OnLuaContextCleanup(const bool InBFullCleanup);// 0x53dd312cd041
	bool IsValidTimerInternal(TimerHandle Handle);// 0x53dc312cd041
	bool IsTimerActiveInternal(TimerHandle Handle);// 0x53db312cd041
	void ClearTimerInternal(TimerHandle Handle);// 0x53da312cd041
	TimerHandle AddTimerInternal(FString CallbackKey, const float Rate, const bool IsLoop, const float InitialStartDelay);// 0x53d9312cd041

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarMainPlayerModel.Object
	void SyncFromPlayerData(int InAccountFlag);// 0x4b2a312cd041
	bool IsAccountFlagOn();// 0x4b29312cd041

--------------------------------
Class: SolarGameConfigManager.Object
	DataTable* WeaponDTInstance;//[Offset: 0x30, Size: 0x8]
	DataTable* WeaponAppearanceDTInstance;//[Offset: 0x38, Size: 0x8]
	DataTable* ItemActorDTInstance;//[Offset: 0x40, Size: 0x8]
	DataTable* BackpackTrailAssembingDTInstance;//[Offset: 0x48, Size: 0x8]
	DataTable* CharacterDTInstance;//[Offset: 0x50, Size: 0x8]
	DataTable* ItemResourceDTInstance;//[Offset: 0x58, Size: 0x8]
	DataTable* BuffEffectDTInstance;//[Offset: 0x60, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfigAsset;//[Offset: 0x68, Size: 0x8]
	GlobalVehicleWeaponConfig* GlobalVehicleWeaponConfigAsset;//[Offset: 0x70, Size: 0x8]
	SolarRoleSkillDataConfig* RoleConfigAsset;//[Offset: 0x78, Size: 0x8]
	float HeadHitValue;//[Offset: 0x80, Size: 0x4]
	float ShieldReducePhy;//[Offset: 0x84, Size: 0x4]
	float ShieldReduceEn;//[Offset: 0x88, Size: 0x4]
	float ArmorReducePhy;//[Offset: 0x8c, Size: 0x4]
	float ArmorReduceEn;//[Offset: 0x90, Size: 0x4]
	float BaseHeadShotAddit;//[Offset: 0x94, Size: 0x4]
	int BackpackEnergyID;//[Offset: 0x98, Size: 0x4]
	int BackpackExtraEnergyID;//[Offset: 0x9c, Size: 0x4]
	int MedicineItemId;//[Offset: 0xa0, Size: 0x4]
	int RadarItemId;//[Offset: 0xa4, Size: 0x4]
	int ShieldRechargerItemId;//[Offset: 0xa8, Size: 0x4]
	int ShieldBigRechargerItemId;//[Offset: 0xac, Size: 0x4]
	float UnPickupItemTime;//[Offset: 0xb0, Size: 0x4]
	float UnAutoPickupItemTime;//[Offset: 0xb4, Size: 0x4]
	float AutoPickupTime;//[Offset: 0xb8, Size: 0x4]
	float AutoMarkCDTime;//[Offset: 0xbc, Size: 0x4]
	int[] AutoMarkItemTypeList;//[Offset: 0xc0, Size: 0x10]
	float AutoMarkTeammateDistance;//[Offset: 0xd0, Size: 0x4]
	float PickupCapsuleRadius;//[Offset: 0xd4, Size: 0x4]
	float PickupCapsuleHalfHeight;//[Offset: 0xd8, Size: 0x4]
	float MapVoiceSurviveTime;//[Offset: 0xdc, Size: 0x4]
	float MapVoiceDataRefreshTime;//[Offset: 0xe0, Size: 0x4]
	void OnInitialized();// 0x477f312cd041
	SolarRoleSkillDataConfig* GetSolarRoleSkillDataConfig();// 0x477e312cd041
	LinearColor GetLowQualityColorByQuality(int Quality);// 0x477d312cd041
	LinearColor GetHUDDecorateColorByQuality(int Quality);// 0x477c312cd041
	LinearColor GetHUDColorByQuality(int Quality);// 0x477b312cd041
	LinearColor GetHUDBGColorByQuality(int Quality);// 0x477a312cd041
	LinearColor GetHighQualityColorByQuality(int Quality);// 0x4779312cd041
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x4778312cd041
	GlobalVehicleWeaponConfig* GetGlobalVehicleWeaponConfig();// 0x4777312cd041
	FString GetFGByQuality(int Quality);// 0x4776312cd041
	LinearColor GetColorByQuality(int Quality);// 0x4775312cd041

--------------------------------
Class: GlobalWeaponConfig.SolarDataAsset.DataAsset.Object
	Vector2D StandardViewportSize;//[Offset: 0x38, Size: 0x8]
	float StandardDPIScale;//[Offset: 0x40, Size: 0x4]
	bool bWeaponReceiveShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	enum AimOffsetAdjustType;//[Offset: 0x45, Size: 0x1]
	enum AimTraceOriginType;//[Offset: 0x46, Size: 0x1]
	bool bEnableNewShootAlgorithm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	WeaponAttributeGameplayTags WeaponAttributeTags;//[Offset: 0x48, Size: 0x18]
	DataTable* WeaponScopeSensitivityTable;//[Offset: 0x60, Size: 0x8]
	bool bSecondLimitFullForGameDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float DoScopeInterval;//[Offset: 0x6c, Size: 0x4]
	float DoScopeMixedTimeThreshold;//[Offset: 0x70, Size: 0x4]
	float SprintingFireDelay;//[Offset: 0x74, Size: 0x4]
	<class Actor,WeaponHitResponse> WeaponHitResponseClassMap;//[Offset: 0x78, Size: 0x50]
	<FName,WeaponHitResponse> WeaponHitResponseTagMap;//[Offset: 0xc8, Size: 0x50]
	<class Actor,WeaponHitResponse> WeaponHitResponseSameTeamClassMap;//[Offset: 0x118, Size: 0x50]
	<FName,WeaponHitResponse> WeaponHitResponseSameTeamTagMap;//[Offset: 0x168, Size: 0x50]
	float MuzzleInWallCheckDistance;//[Offset: 0x1b8, Size: 0x4]
	RuntimeFloatCurve HitEffectScaleRuntimeCurve;//[Offset: 0x1c0, Size: 0x88]
	bool bCanOperateWhenOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	RuntimeFloatCurve WeaponCrosshairSpreadSpeedRuntimeCurve;//[Offset: 0x250, Size: 0x88]
	RuntimeFloatCurve WeaponCrosshairBackSpeedRuntimeCurve;//[Offset: 0x2d8, Size: 0x88]
	float WeaponSkillDataUIDisplayDistance;//[Offset: 0x360, Size: 0x4]
	float PriamayFireIgnoreInterval;//[Offset: 0x364, Size: 0x4]
	float AssistAimAutoFireRadius;//[Offset: 0x368, Size: 0x4]
	byte[] AssistAimAutoFireBlockTypes;//[Offset: 0x370, Size: 0x10]
	WeaponAssistAimConfig* AssistAimConfig;//[Offset: 0x380, Size: 0x8]
	SoftObjectPath PartUpgradeMaterial;//[Offset: 0x388, Size: 0x18]
	float PartUpgradeFadeInterval;//[Offset: 0x3a0, Size: 0x4]
	<enum,FString> CharaterPostureMap;//[Offset: 0x3a8, Size: 0x50]
	GameplayTagContainer BlockCharacterSprintTags;//[Offset: 0x3f8, Size: 0x20]
	DataTable* WeaponPartEffectDescTable;//[Offset: 0x418, Size: 0x8]
	int WeaponPartEffectTipMaxinum;//[Offset: 0x420, Size: 0x4]
	<enum,FString> HitFeedbackMapForUI;//[Offset: 0x428, Size: 0x50]
	<int,enum> AudioPromptForNoAmmoTable;//[Offset: 0x478, Size: 0x50]
	int WeaponSummonBlockNoticeID;//[Offset: 0x4c8, Size: 0x4]
	int WeaponSummonOverRangeNoticeID;//[Offset: 0x4cc, Size: 0x4]
	FString GetStateByPosture(enum posture);// 0x3f42312cd041
	FString GetStateByAnimState(enum CharacterState);// 0x3f41312cd041
	bool GetIsGroundByAnimState(enum CharacterState);// 0x3f40312cd041

--------------------------------
Class: SolarDataAsset.DataAsset.Object
	void InitFromAsset();// 0x3f3f312cd041

--------------------------------
Class: WeaponAttributeGameplayTags
	GameplayTag Spread;//[Offset: 0x0, Size: 0x8]
	GameplayTag HorizontalRecoil;//[Offset: 0x8, Size: 0x8]
	GameplayTag VerticalRecoil;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WeaponHitResponse
	bool bForceBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bForcePenetrate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectHalo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bTakeDamage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bShowExplode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bShowDecal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bPlaySound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: WeaponAssistAimConfig.DataAsset.Object
	bool bEnableNewAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	byte AssistAimTargetFlag;//[Offset: 0x31, Size: 0x1]
	byte[] TargetDetectionBlockTypes;//[Offset: 0x38, Size: 0x10]
	byte[] LockAimingBlockTypes;//[Offset: 0x48, Size: 0x10]
	bool bEnableAssistFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bEnableGlobalSensitivityScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	WeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAll;//[Offset: 0x60, Size: 0x60]

--------------------------------
Class: GlobalVehicleWeaponConfig.SolarDataAsset.DataAsset.Object
	AssitLockBoneWeight[] AssistLockBoneWeight;//[Offset: 0x38, Size: 0x10]
	AssitLockBoneWeight[] SortAssistLockBoneWeight;//[Offset: 0x48, Size: 0x10]
	float CoefficientHUD;//[Offset: 0x58, Size: 0x4]
	float CoefficientWorld;//[Offset: 0x5c, Size: 0x4]
	float CoefficientHUDUnlock;//[Offset: 0x60, Size: 0x4]
	float CoefficientWorldUnlock;//[Offset: 0x64, Size: 0x4]
	float HudDistFromAssistLockPawnToSecondReticle;//[Offset: 0x68, Size: 0x4]
	RuntimeFloatCurve AssistLockUIScaleCurve;//[Offset: 0x70, Size: 0x88]

--------------------------------
Class: AssitLockBoneWeight
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float BoneWeight;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarRoleSkillDataConfig.DataAsset.Object
	PassiveSkillDataAsset* ClassCommonPassiveSkill;//[Offset: 0x30, Size: 0x28]
	<enum,HeroClassConfig> HeroClassConfigs;//[Offset: 0x58, Size: 0x50]
	DataTable* RoleSkillDataTable;//[Offset: 0xa8, Size: 0x8]
	int RoleSkillCannotActiveNoticeID;//[Offset: 0xb0, Size: 0x4]
	SoftClassPath UniqueSkillForbiddenGameplayEffect;//[Offset: 0xb8, Size: 0x18]
	SoftClassPath TacticalSkillForbiddenGameplayEffect;//[Offset: 0xd0, Size: 0x18]
	SoftClassPath InitCDValueGameplayEffect;//[Offset: 0xe8, Size: 0x18]
	SoftClassPath SuperSkillBlockGameplayEffect;//[Offset: 0x100, Size: 0x18]
	SoftClassPath TacticalSkillBlockGameplayEffect;//[Offset: 0x118, Size: 0x18]
	class GameplayEffect* UsingContinuousSkillStatusEffect;//[Offset: 0x130, Size: 0x8]
	class GameplayEffect* HoldingSkillStatusEffect;//[Offset: 0x138, Size: 0x8]
	DataTable* WeaponUIStyleDataTable;//[Offset: 0x140, Size: 0x8]
	<int,FString> CharacterUpgradeEffects;//[Offset: 0x148, Size: 0x50]
	enum GetLevelUpRewardType(const int CharacterId, const int TargetLevel);// 0x4deb312cd041
	SoftObjectPath GetLevelUpInnerIconPath(const int CharacterId, const int TargetLevel);// 0x4dea312cd041
	FString GetLevelUpInnerDescription(const int CharacterId, const int TargetLevel);// 0x4de9312cd041
	SoftObjectPath[] GetLevelUpAllInnerIconPath(const int CharacterId, const int TargetLevel);// 0x4de8312cd041
	FString[] GetLevelUpAllInnerDescription(const int CharacterId, const int TargetLevel);// 0x4de7312cd041
	FString GetEffectIdForCharacterUpgrade(const int TargetLevel);// 0x4de6312cd041
	enum GetClassTypeForCharacter(const int CharacterId);// 0x4de5312cd041

--------------------------------
Class: PassiveSkillDataAsset.PrimaryDataAsset.DataAsset.Object
	SoftClassPath SkillClassPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SkillIconPath;//[Offset: 0x48, Size: 0x18]
	WrappedLocalTextID SkillName;//[Offset: 0x60, Size: 0x4]
	WrappedLocalTextID SkillDescription;//[Offset: 0x64, Size: 0x4]
	PassiveSkillLevelDescription[] LevelUpConfigs;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: WrappedLocalTextID
	int LocalTextId;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PassiveSkillLevelDescription
	WrappedLocalTextID InnerDescriptionLocalTextID;//[Offset: 0x0, Size: 0x4]
	WrappedLocalTextID ShortDescriptionLocalTextID;//[Offset: 0x4, Size: 0x4]
	SoftObjectPath InnerIconPath;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: HeroClassConfig
	PassiveSkillDataAsset* SpecificPassiveSkill;//[Offset: 0x0, Size: 0x28]
	float HPGridUnit;//[Offset: 0x28, Size: 0x4]
	bool bEnableCombatRegeneration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	int RegenGrids;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: BattlePassConfigInfo.Object
	BattlePassLevelInfo[] BattlePassLevel;//[Offset: 0x28, Size: 0x10]
	bool IsMaxLevelWithExp(int BattlePassID, int TotalExp);// 0x3d29312cd041
	void Initialize();// 0x3d28312cd041
	int GetLevelByTestExp(int BattlePassID, int InTestExp);// 0x3d27312cd041
	int GetExpNeedForLv(int BattlePassID, int Level);// 0x3d26312cd041
	int GetBattllePassMaxLevel(int BattlePassID);// 0x3d25312cd041

--------------------------------
Class: BattlePassLevelInfo

--------------------------------
Class: SolarLuaHelper.Object
	DataTable* KeyMappingInfoDataTable;//[Offset: 0x30, Size: 0x8]
	DataTable* KeyMappingDisplayInfoDataTable;//[Offset: 0x38, Size: 0x8]
	SolarPlayerReport[] SettleTeamReports;//[Offset: 0x40, Size: 0x10]
	bool WriteFile(FString FilePath, FString Content);// 0x4b23312cd041
	void UELogWarning(FString str);// 0x4b22312cd041
	void UELogNetwork(FString str);// 0x4b21312cd041
	void UELogError(FString str);// 0x4b20312cd041
	void UELog(FString str);// 0x4b1f312cd041
	Object* TryLoadBySoftObjectPath(out const SoftObjectPath ObjectPath);// 0x4b1e312cd041
	bool TryConvertFilenameToLongPackageName(FString InFilename, out FString OutPackageName);// 0x4b1d312cd041
	void StaticSetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x4b1c312cd041
	void StaticSetAkState(FName StateGroup, FName State);// 0x4b1b312cd041
	void StaticSetAkBusConfig(FString BusName, enum ChannelConfiguration);// 0x4b1a312cd041
	int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString InEventName, LatentActionInfo LatentInfo);// 0x4b19312cd041
	int StaticPostAkEventByName(FString InEventName);// 0x4b18312cd041
	void SolarSetShadowQuality(int InQuality);// 0x4b17312cd041
	void SolarSetMSAAEnabled(bool bEnable);// 0x4b16312cd041
	void SolarSetGraphicsQuality(enum InLevel);// 0x4b15312cd041
	void SolarSetFrameRate(enum FrameRateLevel);// 0x4b14312cd041
	void SolarSetColorGrading(enum InTheme);// 0x4b13312cd041
	bool SolarGetTextureStreamingEnable();// 0x4b12312cd041
	void SolarEnableTextureStreaming(bool bEnable);// 0x4b11312cd041
	int ShouldEnterLobby();// 0x4b10312cd041
	void SetSwitch(SolarAkGameObject* SolarAkGameObject, FString SwitchGroup, FString SwitchState);// 0x4b0f312cd041
	void SetSkeletalMeshMatFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMatResPath, int ElementIndex);// 0x4b0e312cd041
	void SetSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMatResPath, int ElementIndex);// 0x4b0d312cd041
	void SetSkeletalMeshFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMeshResPath);// 0x4b0c312cd041
	void SetSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMeshResPath);// 0x4b0b312cd041
	void SetSkeletalAnimBPFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewAnimBPResPath);// 0x4b0a312cd041
	void SetSkeletalAnimBP(SkeletalMeshComponent* SkeletalMeshComponent, FString NewAnimBPResPath);// 0x4b09312cd041
	void SetRenderBatch(int Mode);// 0x4b08312cd041
	void SetPlayerSettlementReport(out const SolarGameModeInfo GameInfo);// 0x4b07312cd041
	void SetPatchBuildVersion(FString Version);// 0x4b06312cd041
	void SetCurThirdPartyInfo(FString InCurThirdPartyInfo);// 0x4b05312cd041
	void SetChangeListNumber(FString ChangeListNum);// 0x4b04312cd041
	void SetActorYawByDelta(Actor* InActor, float InDeltaYaw);// 0x4b03312cd041
	void ResumeBatching();// 0x4b02312cd041
	Object* ResolveSoftObjectPath(out const SoftObjectPath ObjectPath);// 0x4b01312cd041
	FString ReadFileContent(FString FilePath);// 0x4b00312cd041
	int PostAkEventByName(SolarAkGameObject* SolarAkGameObject, FString InEventName);// 0x4aff312cd041
	void PlayVoiceLocaly(int CharacterId, int SkinId, enum Type);// 0x4afe312cd041
	bool MoveFile(FString DestFilePath, FString SrcFilePath);// 0x4afd312cd041
	Object* LoadObject_WithOuter(Object* Outer, FString ObjectName);// 0x4afc312cd041
	byte[] LoadFileToArray(FString FilePath);// 0x4afb312cd041
	bool IsWorldTearingDown();// 0x4afa312cd041
	bool IsLocalBuild();// 0x4af9312cd041
	bool IsBattlePassInfoUpdated(SolarPlayerState* InPlayerState);// 0x4af8312cd041
	bool HasReviveItemManager(Object* InWorldContext);// 0x4af7312cd041
	FString HashMd5(FString InputText);// 0x4af6312cd041
	int64 GetUtcNowTimestamp();// 0x4af5312cd041
	FString GetTaskDesc(int TaskID);// 0x4af4312cd041
	FString GetSourceCommitHash();// 0x4af3312cd041
	FString GetSourceBuildVersion();// 0x4af2312cd041
	SolarGameState* GetSolarGameState();// 0x4af1312cd041
	FString GetShortName(FString LongName);// 0x4af0312cd041
	FString[] GetServersUrlList();// 0x4aef312cd041
	FString GetServerEnvTag();// 0x4aee312cd041
	Vector2D GetScreenSizeXY();// 0x4aed312cd041
	FString GetPatchBuildVersion();// 0x4aec312cd041
	int GetMonsterDropItemOutcomeID(int MonsterAICharID, int StrengthGrade);// 0x4aeb312cd041
	int GetMonsterDeathBoxID(int MonsterAICharID);// 0x4aea312cd041
	FString GetMainBuildVersion();// 0x4ae9312cd041
	SolarReplayPlayerController* GetLocalSolarReplayPlayerController();// 0x4ae8312cd041
	SolarPlayerState* GetLocalSolarPlayerState();// 0x4ae7312cd041
	SolarPlayerController* GetLocalSolarPlayerController();// 0x4ae6312cd041
	PlayerController* GetLocalPlayerController();// 0x4ae5312cd041
	Key GetLeftMouseKeyDown();// 0x4ae4312cd041
	void GetKeyMappingInfoByRowName(FString RowName, out KeyMappingRowInfo OutClassInfo);// 0x4ae3312cd041
	FString GetHostByDomainName(FString DomainName, bool bAppendPort);// 0x4ae2312cd041
	FString GetGameModeParam(int GameModeID, FString Key);// 0x4ae1312cd041
	FString GetExtBackdoorUrl();// 0x4ae0312cd041
	EmojiBubbleSubsystem* GetEmojiBubbleSubsystem(SolarGameInstanceBase* GI);// 0x4adf312cd041
	FString GetClipboardPasteText();// 0x4ade312cd041
	FString GetChangeListNumber();// 0x4add312cd041
	FString GetBuildVariation();// 0x4adc312cd041
	FString GetBuildMode();// 0x4adb312cd041
	Vector GetBoneLocationByName(SkeletalMeshComponent* SkeletalMeshComponent, FName BoneName, byte Space);// 0x4ada312cd041
	FString GetBackdoorUrl();// 0x4ad9312cd041
	FString GetAndroidPkgName();// 0x4ad8312cd041
	FString[] GetAllLoadedPackagesPath();// 0x4ad7312cd041
	void GetAllKeyMappingInfoFromTable(out KeyMappingRowInfo[] OutKeyMappingInfo);// 0x4ad6312cd041
	FString GetActualBuildVersion();// 0x4ad5312cd041
	FString GetAbsolutePathForWrite(FString FilePath);// 0x4ad4312cd041
	FString GetAbsolutePathForRead(FString FilePath);// 0x4ad3312cd041
	Color FromHex(FString HexString);// 0x4ad2312cd041
	FString[] FindFiles(FString Directory, FString FileExtension);// 0x4ad1312cd041
	void EndOfPlayInEditor(Object* InWorldContext, FString EndReason, bool bPopMsgBox);// 0x4ad0312cd041
	void DoLuaDebug(out const FString[] cmdArray);// 0x4acf312cd041
	bool DirectoryExist(FString TargetDirectory);// 0x4ace312cd041
	bool DeleteFile(FString FilePath);// 0x4acd312cd041
	bool DeleteDirectoryRecursively(FString Path);// 0x4acc312cd041
	bool DeleteDirectory(FString Path);// 0x4acb312cd041
	FString DecodeFile(FString InFilePath);// 0x4aca312cd041
	LevelStreamingDynamic* CreateStreamInstance(World* World, FString PackageName);// 0x4ac9312cd041
	Actor* CreateEmptySkeletalMeshActor();// 0x4ac8312cd041
	MaterialInstanceDynamic* CreateDynamicMaterial(CameraActor* CameraActor, FString TemplateMatResPath, const int RTSizeX, const int RTSizeY, byte RenderTargetFormat);// 0x4ac7312cd041
	bool CreateDirectoryTree(FString Path);// 0x4ac6312cd041
	bool CreateDirectory(FString Path);// 0x4ac5312cd041
	bool CopyFile(FString DestFilePath, FString SrcFilePath);// 0x4ac4312cd041
	void ConvertKeyMappingName(out const Key Key, out FString OutDisplayName);// 0x4ac3312cd041
	void CloseVirtualKeyboard();// 0x4ac2312cd041
	void ClipboardCopyText(FString Content);// 0x4ac1312cd041
	void ClearSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent);// 0x4ac0312cd041
	bool CheckIsNeedDownLoad(int ChunkID);// 0x4abf312cd041
	void ApplyVehicleSkinPreview(Object* PreviewVehicleObj, int SkinId, int PageType, Vector DefaultLoc);// 0x4abe312cd041

--------------------------------
Class: SolarPlayerReport
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	uint64 UserId;//[Offset: 0x10, Size: 0x8]
	FString NickName;//[Offset: 0x18, Size: 0x10]
	int CharacterId;//[Offset: 0x28, Size: 0x4]
	int SkinId;//[Offset: 0x2c, Size: 0x4]
	int PlayerRank;//[Offset: 0x30, Size: 0x4]
	int Gender;//[Offset: 0x34, Size: 0x4]
	int AccountFlag;//[Offset: 0x38, Size: 0x4]
	int TeamRank;//[Offset: 0x3c, Size: 0x4]
	int TeamID;//[Offset: 0x40, Size: 0x4]
	int PosInTeam;//[Offset: 0x44, Size: 0x4]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	int KillNum;//[Offset: 0x4c, Size: 0x4]
	int KillNumToRealPlayer;//[Offset: 0x50, Size: 0x4]
	int[] VehicleKillNum_ID;//[Offset: 0x58, Size: 0x10]
	int[] VehicleKillNum_Value;//[Offset: 0x68, Size: 0x10]
	int KillTeammate;//[Offset: 0x78, Size: 0x4]
	int KillInAirNum;//[Offset: 0x7c, Size: 0x4]
	int KillDownInAirNum;//[Offset: 0x80, Size: 0x4]
	int WeaponSkillKillNum;//[Offset: 0x84, Size: 0x4]
	int P_KillStreak;//[Offset: 0x88, Size: 0x4]
	int[] KillStreakHistory;//[Offset: 0x90, Size: 0x10]
	int RevengeNum;//[Offset: 0xa0, Size: 0x4]
	int DeathNum;//[Offset: 0xa4, Size: 0x4]
	int KillDownNum;//[Offset: 0xa8, Size: 0x4]
	int KillDownTeammate;//[Offset: 0xac, Size: 0x4]
	float AccurateDamage;//[Offset: 0xb0, Size: 0x4]
	int AccurateDameageTimes;//[Offset: 0xb4, Size: 0x4]
	int AccurateKillTimes;//[Offset: 0xb8, Size: 0x4]
	int AccurateKillDownTimes;//[Offset: 0xbc, Size: 0x4]
	float CauseDamage;//[Offset: 0xc0, Size: 0x4]
	float CauseDamageToRealPlayer;//[Offset: 0xc4, Size: 0x4]
	float ReceivedDamage;//[Offset: 0xc8, Size: 0x4]
	int AssistNum;//[Offset: 0xcc, Size: 0x4]
	float CollectEnergy;//[Offset: 0xd0, Size: 0x4]
	int BuyESElectricNum;//[Offset: 0xd4, Size: 0x4]
	int ResurrectionCapsule;//[Offset: 0xd8, Size: 0x4]
	int TeamFriendRevive;//[Offset: 0xdc, Size: 0x4]
	float ReceivedHeal;//[Offset: 0xe0, Size: 0x4]
	float HealSelf;//[Offset: 0xe4, Size: 0x4]
	float TeammateHeal;//[Offset: 0xe8, Size: 0x4]
	int OpenAirBoxNum;//[Offset: 0xec, Size: 0x4]
	float Lifetime;//[Offset: 0xf0, Size: 0x4]
	int SaveCount;//[Offset: 0xf4, Size: 0x4]
	int FlyCount;//[Offset: 0xf8, Size: 0x4]
	int VehicleTime;//[Offset: 0xfc, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0x100, Size: 0x4]
	int TotalCharacterExp;//[Offset: 0x104, Size: 0x4]
	bool bCharExpFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	int[] CharacterExpReason;//[Offset: 0x110, Size: 0x10]
	int CharacterExp;//[Offset: 0x120, Size: 0x4]
	int AccountExp;//[Offset: 0x124, Size: 0x4]
	int TotalAccountExp;//[Offset: 0x128, Size: 0x4]
	int AccountLevel;//[Offset: 0x12c, Size: 0x4]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int RankID;//[Offset: 0x134, Size: 0x4]
	int RankBeforeScore;//[Offset: 0x138, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x13c, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x140, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x144, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x148, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x14c, Size: 0x4]
	int RankAfterScore;//[Offset: 0x150, Size: 0x4]
	int RankLegend;//[Offset: 0x154, Size: 0x4]
	byte RankProtectType;//[Offset: 0x158, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	int Zomborg;//[Offset: 0x15c, Size: 0x4]
	float MvpScore;//[Offset: 0x160, Size: 0x4]
	float KDA;//[Offset: 0x164, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1]
	int[] SettlementItems;//[Offset: 0x170, Size: 0x10]
	FString[] StringExtraRewards;//[Offset: 0x180, Size: 0x10]
	int[] SendGiftGold;//[Offset: 0x190, Size: 0x10]
	int[] SendGiftDiamond;//[Offset: 0x1a0, Size: 0x10]
	FString[] SendGiftPlayerName;//[Offset: 0x1b0, Size: 0x10]
	FString[] SendGiftPlayerID;//[Offset: 0x1c0, Size: 0x10]
	int[] WeaponExpIds;//[Offset: 0x1d0, Size: 0x10]
	int[] WeaponLevel;//[Offset: 0x1e0, Size: 0x10]
	int[] CurWeaponExp;//[Offset: 0x1f0, Size: 0x10]
	int[] WeaponExps;//[Offset: 0x200, Size: 0x10]
	int[] WeaponKillNum_ID;//[Offset: 0x210, Size: 0x10]
	float[] WeaponKillNum_Value;//[Offset: 0x220, Size: 0x10]
	int[] WeaponDamage_ID;//[Offset: 0x230, Size: 0x10]
	float[] WeaponDamage_Value;//[Offset: 0x240, Size: 0x10]
	int[] VehicleDamage_ID;//[Offset: 0x250, Size: 0x10]
	float[] VehicleDamage_Value;//[Offset: 0x260, Size: 0x10]
	int[] VehicleDistance_ID;//[Offset: 0x270, Size: 0x10]
	int[] VehicleDistance_Value;//[Offset: 0x280, Size: 0x10]
	int SettlementConfigID;//[Offset: 0x290, Size: 0x4]
	int GameModeSubID;//[Offset: 0x294, Size: 0x4]
	FString KillerPlayerID;//[Offset: 0x298, Size: 0x10]
	uint64 KillerUserId;//[Offset: 0x2a8, Size: 0x8]
	FString KillerNickName;//[Offset: 0x2b0, Size: 0x10]
	FString KillerOS;//[Offset: 0x2c0, Size: 0x10]
	FString OS;//[Offset: 0x2d0, Size: 0x10]
	int[] CharacterKillNumIDs;//[Offset: 0x2e0, Size: 0x10]
	int[] CharacterKillNumValues;//[Offset: 0x2f0, Size: 0x10]
	int WarmType;//[Offset: 0x300, Size: 0x4]
	int[] AchievementIDs;//[Offset: 0x308, Size: 0x10]
	int[] AchievementValues;//[Offset: 0x318, Size: 0x10]
	int LikeValue;//[Offset: 0x328, Size: 0x4]
	int[] StrategyConditionIDs;//[Offset: 0x330, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x340, Size: 0x4]
	int LastUseVehicleID;//[Offset: 0x344, Size: 0x4]
	FString[] SavedTeammateIDArr;//[Offset: 0x348, Size: 0x10]
	int[] SavedTeammateBonusArr;//[Offset: 0x358, Size: 0x10]
	byte[] SettlementRewards;//[Offset: 0x368, Size: 0x10]
	byte[] CrateRewardData;//[Offset: 0x378, Size: 0x10]
	FString ClanId;//[Offset: 0x388, Size: 0x10]
	int KnockoutPoints;//[Offset: 0x398, Size: 0x4]
	bool bIsKnockoutPointsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	int BattlePassAddExp;//[Offset: 0x3a0, Size: 0x4]
	int BattlePassExp;//[Offset: 0x3a4, Size: 0x4]
	int BattlePassID;//[Offset: 0x3a8, Size: 0x4]
	int[] BattlePassTaskWeek;//[Offset: 0x3b0, Size: 0x10]
	int[] BattlePassTaskID;//[Offset: 0x3c0, Size: 0x10]
	int[] BattlePassTaskAdd;//[Offset: 0x3d0, Size: 0x10]
	int[] BattlePassTaskVal;//[Offset: 0x3e0, Size: 0x10]
	int[] UsedCharacterIDs;//[Offset: 0x3f0, Size: 0x10]
	int CardPose;//[Offset: 0x400, Size: 0x4]
	int Cardbackground;//[Offset: 0x404, Size: 0x4]
	int SameClanCnt;//[Offset: 0x408, Size: 0x4]

--------------------------------
Class: SolarGameModeInfo
	int GameModeID;//[Offset: 0x0, Size: 0x4]
	FString MapName;//[Offset: 0x8, Size: 0x10]
	int NumMode;//[Offset: 0x18, Size: 0x4]
	int PlayerCount;//[Offset: 0x1c, Size: 0x4]
	int TeamCount;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SolarGameState.GameState.GameStateBase.Info.Actor.Object
	SolarPlayerState*[] SolarPlayerStateArray;//[Offset: 0x298, Size: 0x10]
	SolarPlayerState*[] RealPlayerStateArray;//[Offset: 0x2a8, Size: 0x10]
	PlayerState*[] PlayerArray_SameTeam;//[Offset: 0x2b8, Size: 0x10]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	PrePooledBundle[] PrePooledBundles;//[Offset: 0x2d8, Size: 0x10]
	int RemainingPlayersCount;//[Offset: 0x2e8, Size: 0x4]
	int RemainingTeamCount;//[Offset: 0x2ec, Size: 0x4]
	int PlayersCount;//[Offset: 0x2f0, Size: 0x4]
	int TeamCount;//[Offset: 0x2f4, Size: 0x4]
	int TotalBoardingNum;//[Offset: 0x2f8, Size: 0x4]
	int CapsulePlayerNum;//[Offset: 0x2fc, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x300, Size: 0x4]
	<class Object> LimitMaxReplicatedNumClasses;//[Offset: 0x308, Size: 0x50]
	float StartTime;//[Offset: 0x358, Size: 0x4]
	int GameWarmID;//[Offset: 0x35c, Size: 0x4]
	int TeammateNumMode;//[Offset: 0x360, Size: 0x4]
	bool bLuaReportBattleEndServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	GameStartConditionList GameStartConditions;//[Offset: 0x380, Size: 0x58]
	SolarGameplayConfigComponent* GameplayConfigComponent;//[Offset: 0x3d8, Size: 0x8]
	void UpdateTeammateRelationship();// 0x1981312cd041
	void SetTeamLastVehicleLocation(byte InTeamId, out const Vector InVehiclePosition);// 0x1980312cd041
	void SetSettlementStageConfigID(const int InConfigID);// 0x197f312cd041
	void PlayTeamVictoryVoice();// 0x197e312cd041
	void OnRep_SettlementStageConfigID();// 0x197d312cd041
	void OnRep_CapsulePlayerNum();// 0x197c312cd041
	void OnPlayersNumberChange();// 0x197b312cd041
	void NotifyCheatedPlayer(SolarPlayerState* CheatedPlayerState, out const FText OutReason);// 0x197a312cd041
	void NotifyBombingEnd(int BombId);// 0x1979312cd041
	void NotifyBombingBegin(int BombId, const Vector Location, float Radius);// 0x1978312cd041
	void NetMulticastNotifyCheatedPlayer(SolarPlayerState* CheatedPlayerState, const FText BanReason);// 0x1977312cd041
	void K2_SetCanShowBattlePrompt(bool NewValue);// 0x1976312cd041
	bool IsSupportWeaponUpgrade();// 0x1975312cd041
	bool IsSupportCharacterTacticalAbility();// 0x1974312cd041
	bool IsSupportCharacterSuperAbility();// 0x1973312cd041
	bool IsSupportCharacterRole();// 0x1972312cd041
	bool IsSupportCharacterInGameLeveling();// 0x1971312cd041
	bool IsSameTeamWithReferToPlayer(const SolarPlayerState* Other);// 0x1970312cd041
	float GetWorldStartTimeSeconds();// 0x196f312cd041
	int GetWatchingPlayerCount(bool IgnoreOffline);// 0x196e312cd041
	SolarPlayerState* GetTeamPlayerState(const byte InTeamId, const byte InPosInTeam);// 0x196d312cd041
	int GetTeamNumCount();// 0x196c312cd041
	byte GetTeammateNum(const byte InTeamId);// 0x196b312cd041
	enum GetTacticalSkillStateOperationOnInit();// 0x196a312cd041
	enum GetSuperSkillStateOperationOnInit();// 0x1968312cd041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x1967312cd041
	SolarSafeArea* GetSolarSafeArea();// 0x1966312cd041
	int GetSettlementStageConfigID();// 0x1965312cd041
	int GetRemainingTeamCount();// 0x1964312cd041
	int GetRemainingPlayersCount();// 0x1963312cd041
	SolarPlayerState* GetReferToPlayerTeamEntry(byte InPosInTeam);// 0x1962312cd041
	SolarPlayerState*[] GetReferToPlayerTeamArray();// 0x1961312cd041
	SolarPlayerState* GetReferToPlayerState();// 0x1960312cd041
	SolarPlayerState*[] GetPlayerStatesInTeam(out const byte InTeamId);// 0x195f312cd041
	int GetPlayersCount();// 0x195e312cd041
	SolarCharacter* GetPlayerByPlayerID(FString InPlayerID);// 0x195d312cd041
	SolarPlayerState* GetOfflinePlayerState(FString OfflinePlayerId);// 0x195c312cd041
	SolarPlayerState* GetLocalSolarPlayerState();// 0x195b312cd041
	bool GetCanShowBattlePrompt();// 0x195a312cd041
	float GetBattleStartTimeSeconds();// 0x1959312cd041
	void GetAllCharactersExceptTeammate(out SolarCharacter*[] CharacterArray);// 0x1958312cd041
	int GetAliveSolarPlayersCount(bool IgnoreOffline);// 0x1957312cd041
	byte GetAlivePlayerNumInTeamExceptDying(const byte InTeamId);// 0x1956312cd041
	byte CalculateTeamNum();// 0x1955312cd041
	void CacheSafeArea(SolarSafeArea* SafeArea);// 0x1954312cd041
	void BroadcastDeath(const KillInfo KillInfo);// 0x1952312cd041

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x274, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x27c, Size: 0x8]
	int ElapsedTime;//[Offset: 0x284, Size: 0x4]
	void OnRep_MatchState();// 0x1951312cd041
	void OnRep_ElapsedTime();// 0x1950312cd041

--------------------------------
Class: PrePooledBundle
	FName ClassPath;//[Offset: 0x0, Size: 0x8]
	int Number;//[Offset: 0x8, Size: 0x4]
	bool bNeedOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bNeedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: SolarSafeArea.SCMMapElementBase.Actor.Object
	Actor*[] AffectedActorArr;//[Offset: 0x280, Size: 0x10]
	int CurrentIndex;//[Offset: 0x290, Size: 0x4]
	float TargetTime;//[Offset: 0x294, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x298, Size: 0x4]
	float DamageValue;//[Offset: 0x29c, Size: 0x4]
	Vector BeginLocation;//[Offset: 0x2a0, Size: 0xc]
	float BeginScale;//[Offset: 0x2ac, Size: 0x4]
	enum AreaStatus;//[Offset: 0x2b0, Size: 0x1]
	enum LocalPlayerCameraInSafeAreaState;//[Offset: 0x2c1, Size: 0x1]
	enum LocalViewFocusedCharacterInSafeAreaState;//[Offset: 0x2c2, Size: 0x1]
	FString LeaveSafeAreaSoundName;//[Offset: 0x318, Size: 0x10]
	FString EnterSafeAreaSoundName;//[Offset: 0x328, Size: 0x10]
	FString InPoisonPerSecSoundName;//[Offset: 0x338, Size: 0x10]
	float InPoisonSoundSecond;//[Offset: 0x348, Size: 0x4]
	class GameplayAbility* GAAbilityClass;//[Offset: 0x350, Size: 0x8]
	SolarPlayerController* LocalController;//[Offset: 0x360, Size: 0x8]
	void StartShrink();// 0x46b3312cd041
	void ShowPoisonPerSecond();// 0x46b2312cd041
	void ShowPoisonEffect(bool bShow);// 0x46b1312cd041
	void ShowEffectInside(bool bInside);// 0x46b0312cd041
	void Resume();// 0x46af312cd041
	void ReceiveShrinkEnd();// 0x46ae312cd041
	void ReceiveActorLeaveSafeAreaCircle(Actor* Actor);// 0x46ad312cd041
	void ReceiveActorLeavePoisonCircle(Actor* Actor);// 0x46ac312cd041
	void ReceiveActorEnterSafeAreaCircle(Actor* Actor);// 0x46ab312cd041
	void ReceiveActorEnterPoisonCircle(Actor* Actor);// 0x46aa312cd041
	void Pause();// 0x46a9312cd041
	void LocalPlayerCameraLeavePoisonCircle();// 0x46a8312cd041
	void LocalPlayerCameraEnterPoisonCircle();// 0x46a7312cd041
	bool IsPause();// 0x46a6312cd041
	bool IsLocationInSafeArea(out const Vector Pos);// 0x46a5312cd041
	bool IsLocationInPoisonCircle(out const Vector InLocation);// 0x46a4312cd041
	bool IsInSafeArea(Actor* Actor);// 0x46a3312cd041
	void GMStartShrinkArea();// 0x46a2312cd041
	enum GetSafeAreaStatus();// 0x46a1312cd041
	Vector GetNextAreaLocation();// 0x46a0312cd041
	float GetCurrentDamage();// 0x469f312cd041
	void AddAffectedActors(const Actor*[] Actors);// 0x469e312cd041

--------------------------------
Class: SCMMapElementBase.Actor.Object
	bool bPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	FString Side;//[Offset: 0x230, Size: 0x10]
	FString Job;//[Offset: 0x240, Size: 0x10]
	FString ElementID;//[Offset: 0x250, Size: 0x10]
	enum Type;//[Offset: 0x260, Size: 0x1]
	enum State;//[Offset: 0x261, Size: 0x1]
	enum Visibility;//[Offset: 0x262, Size: 0x1]
	class SCMMapElementRPCComponent* MapElementRPCComponentClass;//[Offset: 0x268, Size: 0x8]
	FName ElementName;//[Offset: 0x270, Size: 0x8]
	byte bUseSceneActorOptimization;//[Offset: 0x278, Size: 0x1]
	enum SetElementVisibility(const enum NewType);// 0x427d312cd041
	enum SetElementState(const enum NewState);// 0x427c312cd041
	void OnRep_ElementVisibility();// 0x427b312cd041
	void OnRep_ElementState();// 0x427a312cd041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x4279312cd041
	void OnElementStateChanged(const enum CurrentState);// 0x4278312cd041

--------------------------------
Class: SCMMapElementRPCComponent.ActorComponent.Object

--------------------------------
Class: KillInfo
	FString KillerPlayerID;//[Offset: 0x0, Size: 0x10]
	FString KillerName;//[Offset: 0x10, Size: 0x10]
	FString KillIcon;//[Offset: 0x20, Size: 0x10]
	FString KilledPlayerID;//[Offset: 0x30, Size: 0x10]
	FString KilledName;//[Offset: 0x40, Size: 0x10]
	int WeaponSkinID;//[Offset: 0x50, Size: 0x4]
	int KillerFlag;//[Offset: 0x54, Size: 0x4]
	int KillerSkinId;//[Offset: 0x58, Size: 0x4]
	int VictimSkinId;//[Offset: 0x5c, Size: 0x4]
	int KilledFlag;//[Offset: 0x60, Size: 0x4]
	byte KillerTeamId;//[Offset: 0x64, Size: 0x1]
	byte KilledTeamId;//[Offset: 0x65, Size: 0x1]
	bool bDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	bool bHeadHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1]
	bool bRevenge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]

--------------------------------
Class: GameStartConditionList
	GameplayTagContainer ServerStartConditionList;//[Offset: 0x8, Size: 0x20]
	GameplayTagContainer ClientStartConditionList;//[Offset: 0x28, Size: 0x20]
	GameStateBase* Owner;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SolarGameplayConfigComponent.ActorComponent.Object
	bool EnableTestGameplayConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	class GameplayConfigBase* CGMConfig;//[Offset: 0xb8, Size: 0x8]
	class GameplayConfigBase* TestCGMConfig;//[Offset: 0xc0, Size: 0x8]
	GameplayConfigBase* InstGameplayConfig;//[Offset: 0xc8, Size: 0x8]
	GameplayConfigBase* InstTestGameplayConfig;//[Offset: 0xd0, Size: 0x8]
	GameplayConfigBase* GetConfigs();// 0x3d9d312cd041

--------------------------------
Class: GameplayConfigBase.DataAsset.Object
	GameModeGlobalSetting* GameModeSettingTemplate;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: GameModeGlobalSetting.Object
	delegate OnGlobalSettingChanged;//[Offset: 0x28, Size: 0x10]
	bool bCanVJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bCanHJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bOverrideVJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float OverridenVJetCD;//[Offset: 0x3c, Size: 0x4]
	bool bOverrideHJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float OverridenHJetCD;//[Offset: 0x44, Size: 0x4]
	bool bEnableJetCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	enum JetAltitudeLimitationMode;//[Offset: 0x49, Size: 0x1]
	bool bEnableEnergyCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bEnableTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bEnableMinHPLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	float MinHPToLock;//[Offset: 0x50, Size: 0x4]
	bool bEnableSkydiveFollowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bEnableBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bShowVehicleOnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	bool bShowMapVoiceStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 0x1]
	bool bShowMapVoiceFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int KillStreakEndNoticeNumber;//[Offset: 0x5c, Size: 0x4]
	int KillLeaderMinKillNumber;//[Offset: 0x60, Size: 0x4]
	bool bShowRevengeNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bShowKillStreakEndNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool bShowTotalKillNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	bool bShowKillDownNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1]
	bool bShowKillLeaderNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bShowKillLeaderShutDownNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	bool bShowClearTeamNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 0x1]
	enum WeaponInfiniteAmmoMode;//[Offset: 0x6b, Size: 0x1]
	enum AssistAimSwitchFlag;//[Offset: 0x6c, Size: 0x1]
	bool bEnableWeaponPartEffectTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	float[] WeaponLevelDamageFactorArray;//[Offset: 0x70, Size: 0x10]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool bCanRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	bool bCanLoginBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 0x1]
	bool bEnableBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bEnableBattlePrompt_BeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bKillPlayerWhenOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	int ConfigGameModeId;//[Offset: 0x88, Size: 0x4]
	void SetWeaponInfiniteAmmoMode(enum NewValue);// 0x3f29312cd041
	void SetTeamDamageEnabled(bool bNewValue);// 0x3f28312cd041
	void SetSkydiveFollowMovementEnabled(bool bNewValue);// 0x3f27312cd041
	void SetShowVehicleOnMap(bool bNewValue);// 0x3f26312cd041
	void SetShowTotalKillNotice(bool InShowTotalKillNotice);// 0x3f25312cd041
	void SetShowShowClearTeamNotice(bool InShowClearTeamNotice);// 0x3f24312cd041
	void SetShowRevengeNotice(bool InShowRevengeNotice);// 0x3f23312cd041
	void SetShowMapVoiceStep(bool bNewValue);// 0x3f22312cd041
	void SetShowMapVoiceFight(bool bNewValue);// 0x3f21312cd041
	void SetShowKillStreakEndNotice(bool InShowKillStreakEndNotice);// 0x3f20312cd041
	void SetShowKillLeaderShutDownNotice(bool InShowKillLeaderShutDownNotice);// 0x3f1f312cd041
	void SetShowKillLeaderNotice(bool InShowKillLeaderNotice);// 0x3f1e312cd041
	void SetShowKillDownNotice(bool InShowKillDownNotice);// 0x3f1d312cd041
	void SetMinHPToLock(float NewValue);// 0x3f1c312cd041
	void SetMinHPLockEnabled(bool bNewValue);// 0x3f1b312cd041
	void SetKillStreakEndNoticeNumber(int InKillStreakEndNoticeNumber);// 0x3f1a312cd041
	void SetKillPlayerWhenOut(bool bNewValue);// 0x3f19312cd041
	void SetKillLeaderMinKillNumber(int InKillLeaderMinKillNumber);// 0x3f18312cd041
	void SetJetCostEnabled(bool bNewValue);// 0x3f17312cd041
	void SetJetAltitudeLimitationMode(enum NewValue);// 0x3f16312cd041
	void SetGameCanRebirth(bool bNewValue);// 0x3f15312cd041
	void SetEnergyCostEnabled(bool bNewValue);// 0x3f14312cd041
	void SetDamageEnabled(bool bNewValue);// 0x3f13312cd041
	void SetCanVJetInWater(bool bNewValue);// 0x3f12312cd041
	void SetCanLoginBattle(bool bNewValue);// 0x3f11312cd041
	void SetCanHJetInWater(bool bNewValue);// 0x3f10312cd041
	void SetBigMapEnabled(bool bNewValue);// 0x3f0f312cd041
	void SetAssistAimSwitchFlag(enum InFlag);// 0x3f0e312cd041
	void ReceiveSettingChanged();// 0x3f0d312cd041
	bool IsVJetCDOverriden();// 0x3f0c312cd041
	bool IsTeamDamageEnabled();// 0x3f0b312cd041
	bool IsSkydiveFollowMovementEnabled();// 0x3f0a312cd041
	bool IsShowVehicleOnMap();// 0x3f09312cd041
	bool IsShowTotalKillNotice();// 0x3f08312cd041
	bool IsShowRevengeNotice();// 0x3f07312cd041
	bool IsShowMapVoiceStep();// 0x3f06312cd041
	bool IsShowMapVoiceFight();// 0x3f05312cd041
	bool IsShowKillStreakEndNotice();// 0x3f04312cd041
	bool IsShowKillLeaderShutDownNotice();// 0x3f03312cd041
	bool IsShowKillLeaderNotice();// 0x3f02312cd041
	bool IsShowKillDownNotice();// 0x3f01312cd041
	bool IsShowClearTeamNotice();// 0x3f00312cd041
	bool IsMinHPLockEnabled();// 0x3eff312cd041
	bool IsKillPlayerWhenOut();// 0x3efe312cd041
	bool IsJetCostEnabledEnabled();// 0x3efd312cd041
	bool IsHJetCDOverriden();// 0x3efc312cd041
	bool IsGameCanRebirth();// 0x3efb312cd041
	bool IsGameCanLoginBattle();// 0x3efa312cd041
	bool IsEnergyCostEnabled();// 0x3ef9312cd041
	bool IsEnableWeaponPartEffectTip();// 0x3ef8312cd041
	bool IsDestroyWeaponOnDiscard();// 0x3ef7312cd041
	bool IsDestroyItemOnDiscard();// 0x3ef6312cd041
	bool IsDamageEnabled();// 0x3ef5312cd041
	bool IsBigMapEnabled();// 0x3ef4312cd041
	enum GetWeaponInfiniteAmmoMode();// 0x3ef3312cd041
	float GetOverridenVJetCD();// 0x3ef2312cd041
	float GetOverridenHJetCD();// 0x3ef1312cd041
	float GetMinHPToLock();// 0x3ef0312cd041
	int GetKillStreakEndNoticeNumber();// 0x3eef312cd041
	int GetKillLeaderMinKillNumber();// 0x3eee312cd041
	enum GetJetAltitudeLimitationMode();// 0x3eed312cd041
	float GetDamageFactorByWeaponLevel(int InWeaponLevel);// 0x3eec312cd041
	int GetConfigGameModeId();// 0x3eeb312cd041
	enum GetAssistAimSwitchFlag();// 0x3eea312cd041
	bool CanVJetInWater();// 0x3ee9312cd041
	bool CanHJetInWater();// 0x3ee8312cd041

--------------------------------
Class: SolarReplayPlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	float WaitFirstTeamNumberInputTime;//[Offset: 0xc20, Size: 0x4]
	float WaitTeamNumberInputTime;//[Offset: 0xc24, Size: 0x4]
	SolarReplayCameraControlComp* SolarReplayCameraControlComp;//[Offset: 0xc28, Size: 0x8]
	<FString,float> HorizontalDistanceBetweenPlayerAndOBCamera;//[Offset: 0xc30, Size: 0x50]
	SolarReplayManager* ReplayManager;//[Offset: 0xc80, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc88, Size: 0x8]
	<byte,MaterialInstanceDynamic*> TeamNumToPerspectiveMaterialMap;//[Offset: 0xd00, Size: 0x50]
	void UpdateDistanceBetweenOBCamAndPlayer();// 0x4dca312cd041
	void StopSpectatePlayer();// 0x4dc9312cd041
	void StopPlayReplay();// 0x4dc8312cd041
	void SpectatePlayerByPlayerID(FString SolarPlayerId);// 0x4dc7312cd041
	void SolarGM_ToggleProgressControlButton();// 0x4dc6312cd041
	void SolarGM_ReplayDebugLog(bool bOpenDebugLog);// 0x4dc5312cd041
	bool ShowDamageText(out SolarDamageText InDamageText);// 0x4dc4312cd041
	void SetPlayerInfoHUDVisible(bool bIsVisible);// 0x4dc3312cd041
	void SetDamageTextVisible(bool bIsVisible);// 0x4dc2312cd041
	void SetBattleOBHUDType(out const enum Type);// 0x4dc1312cd041
	void PauseReplay();// 0x4dc0312cd041
	void OnReplayPlayingLevelLoaded();// 0x4dbf312cd041
	void OnReplayPlayingFirstScrubFinished();// 0x4dbe312cd041
	void OnPlayingFinished();// 0x4dbd312cd041
	void OnBattleOBHUDTypeChanged(out const enum CurrentType);// 0x4dbc312cd041
	bool IsSpectatingPlayer();// 0x4dbb312cd041
	<FString,float> GetHorizontalDistanceBetweenPlayerAndOBCamera();// 0x4dba312cd041
	FString GetCurrentSpectatePlayerID();// 0x4db9312cd041
	enum GetBattleOBHUDType();// 0x4db8312cd041
	void ContinueReplay();// 0x4db7312cd041

--------------------------------
Class: SolarDamageText
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bBrokenShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int Damage;//[Offset: 0x4, Size: 0x4]
	Actor* Target;//[Offset: 0x8, Size: 0x8]
	Actor* Source;//[Offset: 0x10, Size: 0x8]
	Vector HitLocation;//[Offset: 0x18, Size: 0xc]
	uint32 TargetUniqueID;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SolarReplayCameraControlComp.ActorComponent.Object
	delegate OnReplayCameraModeChanged;//[Offset: 0xb0, Size: 0x10]
	float DefaultSpeed;//[Offset: 0xc0, Size: 0x4]
	float MoveSpeedChangeStep;//[Offset: 0xc4, Size: 0x4]
	float MoveSpeedMin;//[Offset: 0xc8, Size: 0x4]
	float MoveSpeedMax;//[Offset: 0xcc, Size: 0x4]
	float SpeedUpScale;//[Offset: 0xd0, Size: 0x4]
	float DefaultTurnRate;//[Offset: 0xd4, Size: 0x4]
	float TurnRateChangeStep;//[Offset: 0xd8, Size: 0x4]
	float TurnSpeedMin;//[Offset: 0xdc, Size: 0x4]
	float TurnSpeedMax;//[Offset: 0xe0, Size: 0x4]
	float DistanceChangeStep;//[Offset: 0xe4, Size: 0x4]
	SolarPlayerState* CurrentTarget;//[Offset: 0xe8, Size: 0x8]
	SolarGameState* SolarGameState;//[Offset: 0x100, Size: 0x8]
	SolarSpectateInfo* ReplayPCSpectateInfo;//[Offset: 0x108, Size: 0x8]
	void OnStreamingReadied();// 0x1c15312cd041
	void OnSpectateInfoRep(SolarSpectateInfo* InSpecInfo);// 0x1c14312cd041
	void OnReplayCameraModeChanged__DelegateSignature(enum OldMode, enum CurMode);// 0x1c13312cd041
	void OnPlayingScrubStart();// 0x1c12312cd041
	void OnPlayingScrubCharactersCreated();// 0x1c11312cd041
	enum GetReplayCameraMode();// 0x1c0f312cd041

--------------------------------
Class: KeyMappingRowInfo.TableRowBase
	FString Label;//[Offset: 0x8, Size: 0x10]
	FString ActionDisplayName;//[Offset: 0x18, Size: 0x10]
	FString ActionName;//[Offset: 0x28, Size: 0x10]
	bool Continuity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float Scale;//[Offset: 0x3c, Size: 0x4]
	FString RealAction;//[Offset: 0x40, Size: 0x10]
	FString[] FirstDefaultKeys;//[Offset: 0x50, Size: 0x10]
	FString[] SecondDefaultKeys;//[Offset: 0x60, Size: 0x10]
	FString Description;//[Offset: 0x70, Size: 0x10]
	FString[] RelatedActions;//[Offset: 0x80, Size: 0x10]
	bool Stationary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: EmojiBubbleSubsystem.GameInstanceSubsystem.Subsystem.Object
	DataTable* EmojiTable;//[Offset: 0x40, Size: 0x8]
	void ShowEmojiBubbleToContainerInLobby(int EmojiID, SolarLobbyCharacter* InLobbyCharacter, FString PlayerId);// 0x3ec6312cd041
	void ShowEmojiBubbleToContainer(int EmojiID, SolarCharacter* InCharacter);// 0x3ec5312cd041
	void ResetAllEmojiBubble();// 0x3ec4312cd041
	bool GetEmojiConfigByID(int EmojiID, out EmojiBubbleConfig OutConfig);// 0x3ec3312cd041

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: SolarLobbyCharacter.Pawn.Actor.Object
	AkComponent* AkAudioComponent;//[Offset: 0x290, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x298, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x2a0, Size: 0x8]
	SkeletalMeshComponent* MirrorSkeletalMesh;//[Offset: 0x2a8, Size: 0x8]
	Actor* LobbyAccessory;//[Offset: 0x2b0, Size: 0x8]
	Actor* MirrorLobbyAccessory;//[Offset: 0x2b8, Size: 0x8]
	bool bCanPlayVoiceInIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	bool bOpenMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	bool CharacterIsVisiblity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 0x1]
	<FString,MaterialInterface*> CharacterChangeMat;//[Offset: 0x2c8, Size: 0x50]
	CurveFloat* CharacterMatCurve;//[Offset: 0x318, Size: 0x28]
	SolarCharacterChangeEffectInfo[] ChangeEffectInfos;//[Offset: 0x340, Size: 0x10]
	CurveFloat* ChangeMatCurve;//[Offset: 0x350, Size: 0x8]
	ParticleSystem* ChangeParticlePath;//[Offset: 0x358, Size: 0x28]
	int CurSkinId;//[Offset: 0x390, Size: 0x4]
	int CurChunkId;//[Offset: 0x394, Size: 0x4]
	void UpdateLobbyAccessory(FString InAccessoryPath);// 0x4ab6312cd041
	void StopPlayIdleShow();// 0x4ab5312cd041
	void SetPropVisiable(bool isVisiable);// 0x4ab4312cd041
	void SetMeshVisibility(bool IsVisible);// 0x4ab3312cd041
	void SetCharacterRotationByDelta(float InDeltaYaw);// 0x4ab2312cd041
	void SetCharacterMeshAndMat(int InSkinID, bool IsForce);// 0x4ab1312cd041
	void SetCharacterByLoadedData(SolarLobbyCharacterData* InData);// 0x4ab0312cd041
	void PlayIdleShow();// 0x4aaf312cd041
	void OpenLookAtAndSetPostProcessABPCameraLocation(const bool bOpen, FString ModuleCameraName);// 0x4aae312cd041
	void OnChangeEffectTimer();// 0x4aad312cd041
	bool IsCanOpenMirror();// 0x4aac312cd041
	bool IsCanOpenChangeAnim();// 0x4aab312cd041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4aaa312cd041
	void InitCharacterByLua();// 0x4aa9312cd041
	SolarAkGameObject* GetSolarAkGameObject();// 0x4aa8312cd041
	SolarLobbyCharacterData* GetLobbySkinResourceBySkinId(int InSkinID, bool IsLowRes);// 0x4aa7312cd041
	SolarLobbyAnimInstance* GetCharAnimInstance();// 0x4aa6312cd041
	void ClearCharacterByLua();// 0x4aa5312cd041
	void AttachCharacterSocketPS(out PSAttachElem[] PSAttachArray);// 0x4aa4312cd041

--------------------------------
Class: SolarLobbyCharacterData.DataAsset.Object
	SoftObjectPath SkinShareImage;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SkinBackgroundShare;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath Mesh;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath Material;//[Offset: 0x78, Size: 0x18]
	<uint16,CharacterTransformData> CharacterTransformData;//[Offset: 0x90, Size: 0x50]
	SoftObjectPath[] MaterialArray;//[Offset: 0xe0, Size: 0x10]
	<FString,MaterialInterface*> CharacterChangeMat;//[Offset: 0xf0, Size: 0x50]
	SoftObjectPath AnimBlueprint;//[Offset: 0x140, Size: 0x18]
	SoftObjectPath WinAnimation;//[Offset: 0x158, Size: 0x18]
	SoftObjectPath[] IdleShowList;//[Offset: 0x170, Size: 0x10]
	SoftObjectPath LobbyIdleAnimation;//[Offset: 0x180, Size: 0x18]
	SoftObjectPath AccessoryBlueprint;//[Offset: 0x198, Size: 0x18]
	SoftObjectPath EnterAnim;//[Offset: 0x1b0, Size: 0x18]
	SoftObjectPath ExitAnim;//[Offset: 0x1c8, Size: 0x18]
	SoftObjectPath RefuseAnim;//[Offset: 0x1e0, Size: 0x18]
	SoftObjectPath EncounterIdleAnim;//[Offset: 0x1f8, Size: 0x18]
	SoftObjectPath[] EncounterIdleShowList;//[Offset: 0x210, Size: 0x10]
	SoftObjectPath RecommendAnimBlueprint;//[Offset: 0x220, Size: 0x18]
	bool bParameterChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	PSAttachElem[] PSAttachArray;//[Offset: 0x240, Size: 0x10]
	SoftObjectPath IdleShowSequence;//[Offset: 0x250, Size: 0x18]
	SoftObjectPath LeftHandProp;//[Offset: 0x268, Size: 0x18]
	SoftObjectPath RightHandProp;//[Offset: 0x280, Size: 0x18]

--------------------------------
Class: CharacterTransformData
	Vector CharacterOffset;//[Offset: 0x0, Size: 0xc]
	Rotator CharacterRot;//[Offset: 0xc, Size: 0xc]
	Vector CharacterScale;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: PSAttachElem
	SoftObjectPath ParticleSystemPath;//[Offset: 0x0, Size: 0x18]
	FName SocketName;//[Offset: 0x18, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x20, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: SolarLobbyAnimInstance.AnimInstance.Object
	bool bPlayIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bInIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	void ShowRecommendUI(bool bVisible);// 0x4aa3312cd041
	void SetCharacterCanBeLooked(bool IsVisible);// 0x4aa2312cd041
	void RefreshTick();// 0x4aa1312cd041
	void RandIdleShow();// 0x4aa0312cd041
	void LookAtFunctionSwitcher(const bool bOpen);// 0x4a9f312cd041
	void KawaiiPhysicsSwitcher(const bool bOpen);// 0x4a9e312cd041
	void GetCameraLocation(FString ModuleCameraName);// 0x4a9d312cd041
	void ExitAnimFinish();// 0x4a9c312cd041

--------------------------------
Class: SolarCharacterChangeEffectInfo
	MaterialInterface* OriginMat;//[Offset: 0x0, Size: 0x8]
	MaterialInstanceDynamic* EffectMat;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: EmojiBubbleConfig.TableRowBase
	class SolarUserWidget* EmojiClassType;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x151, Size: 0x1]
	LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x6175312cd041
	LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x6174312cd041

--------------------------------
Class: SolarAnoHelper.Object
	bool bOpenAnoSDK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void SendAntiDataToSsmOnDs(FString AntiDataLog, const SolarPlayerController* PC);// 0x44ed312cd041
	void SendAntiDataToSsmOnClientNative(FString ExtraParam, byte AntiType);// 0x44ec312cd041
	void SendAntiDataToSsmOnClient(FString Param, const byte AntiType);// 0x44eb312cd041
	void InitializeBind();// 0x44ea312cd041
	FString GetAntiLogOnClient(const byte Type);// 0x44e9312cd041
	void AnoUnRegisterCallBack();// 0x44e8312cd041
	void AnoSentDataToSvr(AnoSDKAntiData Data);// 0x44e7312cd041
	void AnoSentCoreTimeData(AnoSDKAntiData AntiData);// 0x44e6312cd041
	void AnoSDKSendData(AnoSDKAntiData AntiData);// 0x44e5312cd041
	void AnoSDKResume();// 0x44e4312cd041
	void AnoSDKPause();// 0x44e3312cd041
	void AnoChangeAntiDataFlow(AnoSDKAntiData Data);// 0x44e2312cd041

--------------------------------
Class: AnoSDKAntiData
	int Length;//[Offset: 0x0, Size: 0x4]
	FString AntiData;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarTableManager.Object
	enum SystemLang;//[Offset: 0x30, Size: 0x1]
	void SetIMInitFlag(bool Flag);// 0x4ef5312cd041
	void SetCurrentLangEnum(enum InLang);// 0x4ef4312cd041
	void SetCurrentLang(FString InLang);// 0x4ef3312cd041
	void ReceiveInit();// 0x4ef2312cd041
	void OnSetCurrentLang(FString InLang);// 0x4ef1312cd041
	bool IsLocalTextIDValid(int ID);// 0x4ef0312cd041
	FString GetLocalTextWithLang(int ID, enum InLang);// 0x4eef312cd041
	FString GetLocalText(int ID);// 0x4eee312cd041
	bool GetIMInitFlag();// 0x4eed312cd041
	enum GetCurrentLangEnum();// 0x4eec312cd041
	FString GetCurrentLang();// 0x4eeb312cd041
	enum ConvertLangNameToEnum(FString LangName);// 0x4eea312cd041

--------------------------------
Class: SolarTcpNetworkManager.Object
	bool bIsSsmMatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	SolarTCPSocketClient* SocketClient;//[Offset: 0x50, Size: 0x8]
	SCMMatchChannelAction* MatchChannelAction;//[Offset: 0x58, Size: 0x8]
	bool IsSsm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FString EncryptKeyClientTCPDynamic;//[Offset: 0x68, Size: 0x10]
	bool bEncrypt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	delegate DisconnectedDelegate;//[Offset: 0x7c, Size: 0x10]
	delegate ConnectedDelegate;//[Offset: 0x8c, Size: 0x10]
	delegate MessageReceivedDelegate;//[Offset: 0x9c, Size: 0x10]
	SolarPlayerReport MyReport;//[Offset: 0xb0, Size: 0x410]
	void UpdateTeamRank(byte TeamID, int Rank);// 0x538a312cd041
	void UpdatePlayerData(FString PlayerId, SolarPlayerState* PlayerState);// 0x5389312cd041
	void UpdatePlayerBattleInfo(SolarPlayerState* PS);// 0x5388312cd041
	bool UpdateBotAIData(int AIIndex, SolarPlayerState* PlayerState);// 0x5387312cd041
	void TryEndBattle();// 0x5386312cd041
	void SyncSsmDataToGameState();// 0x5385312cd041
	void SsmDSSendGiftRequest(const int GiftID, const int Num, FString SendPlayerId, FString RecivePlayerId, SolarPlayerState* SendPlayer);// 0x5384312cd041
	void SsmDSChangeRoleIDRequest(FString InPlayerID, int InRoleID);// 0x5383312cd041
	void SetKnockoutPoints(FString InClanId, const int InKnockoutPoints);// 0x5382312cd041
	void RequestOpenMatchChannel(const int InMatchType, out const int[] InPlayerStructure, const int InMaxMatchTime);// 0x5381312cd041
	void ReportTournamentSpectate(out <FString,FString> TournamentSpectateData);// 0x5380312cd041
	void ReportPlayerBattleInfo(SolarPlayerState* PS);// 0x537f312cd041
	void RecordLastUsedVehicle();// 0x537e312cd041
	void PlayerRequireToChangeGold(const int InChangedGoldType, const int InGoldNum, FString InPlayerID, SolarPlayerState* InPlayer);// 0x537d312cd041
	void PlayerCancelJoin(FString PlayerId);// 0x537c312cd041
	void OpenSupplement(int MaxSecond);// 0x537b312cd041
	void OnStartBattleResponse();// 0x537a312cd041
	void OnRecvData(out const byte[] Data);// 0x5379312cd041
	bool OnReceivedTeamPreJoinRequest(out const FString[] PlayerIds, int TeamID);// 0x5378312cd041
	void OnReceivedPlayerJoinData(FString PlayerId);// 0x5377312cd041
	void OnReceivedPlayerCancelJoin(FString PlayerId);// 0x5376312cd041
	void OnPostLoadMapWithWorld(World* World);// 0x5375312cd041
	void OnPlayerLogin(FString PlayerId);// 0x5374312cd041
	void OnMessageReceived(int ConnId, out const byte[] Message);// 0x5373312cd041
	void OnDisconnected(int ConnId);// 0x5372312cd041
	void OnConnected(int ConnId);// 0x5371312cd041
	void NotifyTournamentSpectateState(bool bIsEnterReplay, out FString BattleID);// 0x5370312cd041
	void NotifyRoomDataChanged(bool bEnableInvite);// 0x536f312cd041
	void NotifyPlayerReward_CustomMode(out const SCustomMode_PlayerReport Report);// 0x536e312cd041
	void NotifyPlayerReward();// 0x536d312cd041
	void NotifyPlayerOffline(SolarPlayerController* PC);// 0x536c312cd041
	void NotifyPlayerEnterBattle(SolarPlayerController* PC);// 0x536b312cd041
	void NotifyOBPlayersChanged(out FString[] PlayerIds);// 0x536a312cd041
	void NotifyClientBattleStateFish();// 0x5369312cd041
	void NotifyBattleGroupResultRequest(byte TeamID, int Rank);// 0x5368312cd041
	bool IsEnableAITeamManager();// 0x5367312cd041
	bool IsAllowReconnectGame();// 0x5366312cd041
	void HandlePlayerLogoutInPreparatoryPhase(Controller* PC);// 0x5365312cd041
	void HandlePlayerLogoutInBattlePhase(Controller* PC);// 0x5364312cd041
	void GetWeaponUpgradeSlotByWeaponID(out UpgradeSlotStruct[] outData, FString PlayerId, const int weaponid);// 0x5363312cd041
	int GetWeaponSkinIDByWeaponID(FString PlayerId, const int weaponid);// 0x5362312cd041
	int GetWarmGameType();// 0x5361312cd041
	int GetTournamentID();// 0x5360312cd041
	void GetStartBattleRequestInfo(out StartBattleRequestInfo OutResult);// 0x535f312cd041
	SolarGameModeInfo GetSolarGameModeInfo();// 0x535e312cd041
	int GetRuleID();// 0x535d312cd041
	void GetReportWeaponExpIds(out int[] OutWeaponExpIds);// 0x535c312cd041
	int GetRankMatchID();// 0x535b312cd041
	int[] GetPlayerUsableTailFlameIds(FString PlayerId);// 0x535a312cd041
	int[] GetPlayerUsableJetpackIds(FString PlayerId);// 0x5359312cd041
	byte[] GetPlayerTeamIDs();// 0x5358312cd041
	FString[] GetPlayerRoleAndOpenIDs();// 0x5357312cd041
	int GetPlayerCount();// 0x5356312cd041
	FString GetPlayerClanID(FString PlayerId);// 0x5355312cd041
	void GetPlayerBattleRequestInfo(FString InSolarPlayerID, out PlayerBattleRequestInfo OutResult);// 0x5354312cd041
	int GetNumMode();// 0x5353312cd041
	int[] GetMLRelatedAIDataMLRatio();// 0x5352312cd041
	int[] GetMLRelatedAIDataMLFeature();// 0x5351312cd041
	bool GetMLRelatedAIDataMLClosed();// 0x5350312cd041
	int GetMaxPlayerNum();// 0x534f312cd041
	FString GetLocalPlayerID();// 0x534e312cd041
	FString GetLocalIPAddress();// 0x534d312cd041
	KnockoutParams GetKnockoutPointParams();// 0x534c312cd041
	bool GetIsCloseMatch();// 0x534b312cd041
	bool GetHasMonster();// 0x534a312cd041
	bool GetHasMachineLearning();// 0x5349312cd041
	int GetGameModeGroupId();// 0x5348312cd041
	int GetEntryID();// 0x5347312cd041
	float GetBotShootSimulatorRatio();// 0x5346312cd041
	FString GetBattleID();// 0x5345312cd041
	<int,int> GetAILevelConfig();// 0x5344312cd041
	int GetAIAccompanyTimelineID();// 0x5343312cd041
	int GetAboutToEnterPlayerCount();// 0x5342312cd041
	void FakePlayerJoin(FString PlayerId, int TeamID);// 0x5341312cd041
	void CloseSupplement();// 0x5340312cd041
	bool CheckPlayerLeave(FString PlayerId);// 0x533f312cd041
	bool CheckJoinToken(FString Token, FString PlayerId);// 0x533e312cd041
	bool CheckIfPlayerHasJoined(FString PlayerId);// 0x533d312cd041
	void CheckBattleOver();// 0x533c312cd041

--------------------------------
Class: SolarTCPSocketClient.Actor.Object
	int SendBufferSize;//[Offset: 0x228, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x22c, Size: 0x4]
	float TimeBetweenTicks;//[Offset: 0x230, Size: 0x4]
	bool SendData(int ConnectionId, byte[] Data);// 0x39c3312cd041
	void Disconnect(int ConnectionId);// 0x39c2312cd041
	void Connect(FString IP, int Port, out const delegate OnConnected, out const delegate OnDisconnected, out const delegate OnMessageReceived, out int ConnectionId);// 0x39c1312cd041

--------------------------------
Class: SCustomMode_PlayerReport.SolarPlayerReport
	<int,int> RewardItems;//[Offset: 0x410, Size: 0x50]

--------------------------------
Class: StartBattleRequestInfo
	int aiNum;//[Offset: 0x0, Size: 0x4]
	int AILevel;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PlayerBattleRequestInfo
	FString NickName;//[Offset: 0x0, Size: 0x10]
	int AccountLevel;//[Offset: 0x10, Size: 0x4]
	PlatformParams PlatformParams;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: PlatformParams
	int64 UserId;//[Offset: 0x0, Size: 0x8]
	FString OpenId;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: KnockoutParams
	float KnockoutKillPoint;//[Offset: 0x0, Size: 0x4]
	float[] KnockoutRankPoints;//[Offset: 0x8, Size: 0x10]
	float KnockoutDamagePoint;//[Offset: 0x18, Size: 0x4]
	float KnockoutDamageTakenPoint;//[Offset: 0x1c, Size: 0x4]
	float ScalarParam;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SCMMatchChannelAction.BlueprintAsyncActionBase.Object
	Object* WorldContextObject;//[Offset: 0x48, Size: 0x8]
	delegate OnMatchChannelChange;//[Offset: 0x50, Size: 0x10]
	SCMMatchChannelAction* OpenMatchChannel(Object* WorldContextObject, const enum MatchType, out const int[] PlayerStructure, const int MaxMatchTime);// 0x427f312cd041
	void HandleMatchChannelChange(bool InMatchResult, int RPCID);// 0x427e312cd041

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x3919312cd041

--------------------------------
Class: SolarUDPManager.Object
	int SendBufferSize;//[Offset: 0x30, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x34, Size: 0x4]
	void OnMessageReceived(out const byte[] Data);// 0x5481312cd041

--------------------------------
Class: SolarAssetManager.AssetManager.Object
	SolarChunkAssignData* ChunkAssignDataCache;//[Offset: 0x440, Size: 0x8]
	<FString,Object*> CachedObjMap;//[Offset: 0x448, Size: 0x50]
	void UnLoadPrimaryAssetByLabelPathForLua(FString PrimaryAssetPath);// 0x44f3312cd041
	void PreloadGameNormalAssets(SolarGameInstanceBase* GameInstancePtr);// 0x44f2312cd041
	void OnBindingActorDestory(Actor* Actor);// 0x44f1312cd041

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4]

--------------------------------
Class: SolarChunkAssignData.DataAsset.Object
	DirectoryPath[] DirectoriesToNeverClean;//[Offset: 0x30, Size: 0x10]
	<FString,ChunkAssignRule> Rules;//[Offset: 0x40, Size: 0x50]

--------------------------------
Class: ChunkAssignRule
	FString FullPath;//[Offset: 0x0, Size: 0x10]
	int ChunkID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SolarItemManager.Object
	SolarItemRootActor* RootActor;//[Offset: 0x30, Size: 0x8]
	SolarItemSpawner*[] ItemSpawners;//[Offset: 0xd8, Size: 0x10]
	SolarItemSpawner*[] NSItemSpanwers;//[Offset: 0xe8, Size: 0x10]
	<int,SolarItemSpawner*> ItemSpawnersMap;//[Offset: 0xf8, Size: 0x50]
	<int,SolarAirDropSpawner*> AirDropSpawnersMap;//[Offset: 0x148, Size: 0x50]
	<int,SolarItemSpawnerArray> NSItemSpawnerMap;//[Offset: 0x198, Size: 0x50]
	<int,OutcomeData> ItemOutcomeDatas;//[Offset: 0x1e8, Size: 0x50]
	<int,OutcomeDataCollection> OutcomeCollection;//[Offset: 0x238, Size: 0x50]
	<int,SimpleDropItemDataCollection> OriginDropItemDatas;//[Offset: 0x288, Size: 0x50]
	<int,FinalDropDataCollection> AirDropItemDatas;//[Offset: 0x2d8, Size: 0x50]
	<int,int> AirDropChestIndexMap;//[Offset: 0x328, Size: 0x50]
	<int,int> UsedAirDropChestIndexMap;//[Offset: 0x378, Size: 0x50]
	<int,int> MaxPileMap;//[Offset: 0x3c8, Size: 0x50]
	RandomStream ItemStream;//[Offset: 0x418, Size: 0x8]
	float DelaySpawnTime;//[Offset: 0x420, Size: 0x4]
	FString[] SubLevelNames;//[Offset: 0x428, Size: 0x10]
	bool BInitSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	bool BSpawnerDestoryed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 0x1]
	TimerHandle ItemInitSpawnerHandle;//[Offset: 0x440, Size: 0x8]
	float DelayInitSpawnerTime;//[Offset: 0x448, Size: 0x4]
	TimerHandle ItemLoopSpawnHandle;//[Offset: 0x450, Size: 0x8]
	float SpawnLoopInterval;//[Offset: 0x458, Size: 0x4]
	float SpawnMinDisSquared;//[Offset: 0x45c, Size: 0x4]
	float SpawnMaxHeightOffset;//[Offset: 0x460, Size: 0x4]
	float ChestSpawnMinDisSquared;//[Offset: 0x464, Size: 0x4]
	float VehicleSpawnMinDisSquared;//[Offset: 0x468, Size: 0x4]
	DataTable* ItemResReferenceTable;//[Offset: 0x470, Size: 0x8]
	FString ItemResReferenceTablePath;//[Offset: 0x478, Size: 0x10]
	bool BOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	int FirstSpawnerIndex;//[Offset: 0x4c4, Size: 0x4]
	int FirstTBoxIndex;//[Offset: 0x4c8, Size: 0x4]
	int FirstAirDropIndex;//[Offset: 0x4cc, Size: 0x4]
	int FirstVehicleIndex;//[Offset: 0x4d0, Size: 0x4]
	int ChestKeyCode;//[Offset: 0x4d4, Size: 0x4]
	int Level1OutcomeID;//[Offset: 0x4d8, Size: 0x4]
	int Level2OutcomeID;//[Offset: 0x4dc, Size: 0x4]
	int Level3OutcomeID;//[Offset: 0x4e0, Size: 0x4]
	<int,enum> ItemID2Types;//[Offset: 0x4f8, Size: 0x50]
	int64 ThisIdRefCount;//[Offset: 0x548, Size: 0x8]
	int64 ServerNowSeconds;//[Offset: 0x550, Size: 0x8]
	FString RootActorBpPath;//[Offset: 0x558, Size: 0x10]
	float CheckDropRadius;//[Offset: 0x568, Size: 0x4]
	float CheckDropHeight;//[Offset: 0x56c, Size: 0x4]
	float DropLineTraceLength;//[Offset: 0x570, Size: 0x4]
	float DropUnitOffset;//[Offset: 0x574, Size: 0x4]
	SolarMapManager* MapManager;//[Offset: 0x578, Size: 0x8]
	SolarAirDropSpawner*[] ActiveAirDropBox;//[Offset: 0x580, Size: 0x10]
	AirDropTreasureBox*[] AirDropsList;//[Offset: 0x630, Size: 0x10]
	DeathTreasureBox*[] DeathTreasureBoxList;//[Offset: 0x640, Size: 0x10]
	void UpdateItemParams();// 0x4a92312cd041
	bool TryDropAtLocation(SolarCharacterBase* Owner, out Vector CheckPos);// 0x4a91312cd041
	void SpawnTreasureBoxByID(const int TreasureId, Transform trans, SolarItemData[] ItemsToSpawn, SolarCharacter* SummonCharacter, const float InSpawnDelay, const float InStartHeight);// 0x4a90312cd041
	void SpawnMutipleItems(SolarCharacter* InCharacter, const int InItemID, const int InPerCount, const int InTotalCount);// 0x4a8f312cd041
	void SpawnItemsByOutcomeID(const int OutcomeID, out Transform trans);// 0x4a8e312cd041
	void SpawnItems(const int ItemID, const int ItemNum, Transform trans);// 0x4a8d312cd041
	SolarItemData SpawnItemData(int ItemID);// 0x4a8c312cd041
	void SpawnDeathBox(SolarCharacterBase* Owner, out const Rotator Rotator, out SolarItemData[] DataTarray, out const int DeathBoxId, out const SolarPlayerWeapon*[] DeathBoxWeaponArray, out const float CurrEnergyValue, out const float CurrExtraEnergyValue, out const int MonsterID);// 0x4a8b312cd041
	void SpawnAirDropByID(const int ChestID, Vector Location, SolarItemData[] ItemsToSpawn);// 0x4a8a312cd041
	void ResetThisID();// 0x4a89312cd041
	bool RefreshOutcomePoolContent(out OutcomeData InOutcomeData);// 0x4a88312cd041
	void OnUpdateServerNowSeconds(const int InNowSeconds);// 0x4a87312cd041
	void OnAsyncLoadTreasureBoxComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Transform trans, SolarCharacter* InCharacter, const float InSpawnDelay, const float InStartHeight);// 0x4a86312cd041
	void OnAsyncLoadItemComplete(SoftClassPath SClassPath, SolarItemData ItemData, Transform trans);// 0x4a85312cd041
	void OnAsyncLoadDiscardItemComplete(SoftClassPath SClassPath, SolarCharacter* Owner, SolarItemData ItemData);// 0x4a84312cd041
	void OnAsyncLoadDeathBoxComplete(class Object DeathBoxClass, SolarCharacterBase* Owner, Rotator Rotator, SolarItemData[] DataTarray, SolarItemData DeathBoxData, SolarPlayerWeapon*[] DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, const int MonsterID);// 0x4a83312cd041
	void OnAsyncLoadAirdropComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Vector Location);// 0x4a82312cd041
	void NotifySpawnerDestroy();// 0x4a81312cd041
	void NotifyAvailableAirDropsNumChanged();// 0x4a80312cd041
	void NotifyAirDropOpened();// 0x4a7f312cd041
	void NetStartAirDrops(const int SpawnerID, const int ChestID);// 0x4a7e312cd041
	bool NetRunSpecOutcome(const int InData, out SolarItemData[] OutItemArray);// 0x4a7d312cd041
	void NetRunGlobalDrop();// 0x4a7c312cd041
	void NetRunDrop();// 0x4a7b312cd041
	bool NetDropOutcomeContent(const int TargetContentID, out OutcomeData OutcomeData, out <int,SimpleDropItemDataCollection> InDropItemDatas, bool fromSpawner, out const Transform trans);// 0x4a7a312cd041
	bool NetDropOutcome(out OutcomeData OutcomeData, out int OutTargetContentID);// 0x4a79312cd041
	void NetDropGlobalOutcome(out GlobalOutcomeData GlobalOutcomeData);// 0x4a78312cd041
	void LoadSpawnerLevelComplete();// 0x4a77312cd041
	void LoadItemSpawnerLevels();// 0x4a76312cd041
	bool IsPosBlocked(out const Vector CheckPos);// 0x4a75312cd041
	bool IsInSafeArea(out const Vector Location);// 0x4a74312cd041
	void InitWeaponPartLevel(out SolarItemData InItemData);// 0x4a73312cd041
	void InitWeaponLevel(out SolarItemData InItemData);// 0x4a72312cd041
	void InitVehicleSpawnGroupData(out <int,int> VehicleGroupIdToNum);// 0x4a71312cd041
	void InitItemDataShieldValue(out SolarItemData InItemData);// 0x4a70312cd041
	int64 IncreaseThisID();// 0x4a6f312cd041
	int GetVehicleIDBySingleSpawnId(const int SpawnID);// 0x4a6e312cd041
	int GetVehicleIDByGroupIDAndIndex(int groupid, int GroupIndex);// 0x4a6d312cd041
	int GetVehicleGroupIDByVehicleID(int InVehicleID);// 0x4a6c312cd041
	SolarVehicleData GetVehicleConfigData(const int InVehicleID);// 0x4a6b312cd041
	int GetServerNowSeconds();// 0x4a6a312cd041
	int GetRandomIDInMap(const int TotalWeight, out <int,int> WeightIDMap);// 0x4a69312cd041
	int GetRandomAirDropIDInMap();// 0x4a68312cd041
	int GetOutcomeIdByTreasureBoxId(const int TreasureBoxID);// 0x4a67312cd041
	OutcomeData GetOutcomeDataByID(const int OutcomeID);// 0x4a66312cd041
	OutcomeContentData GetOutcomeContentDataByID(const int ContentID);// 0x4a65312cd041
	bool GetItemResReference(int InItemID, out ItemResReference outData);// 0x4a64312cd041
	int GetItemPrize(const int InItemID);// 0x4a63312cd041
	int GetItemMaxPileByID(const int InItemID);// 0x4a62312cd041
	bool GetGlobalOutcomeData(const int GamePlayMode, out GlobalOutcomeData[] GlobalOutcomeDatas);// 0x4a61312cd041
	int GetEntryID();// 0x4a60312cd041
	bool GetCurrItemSubLevels(FString InMapName, out FString[] OutSubLevelNames);// 0x4a5f312cd041
	OutcomeData GetCookedOutcomeDataByID(const int OutcomeID);// 0x4a5e312cd041
	bool GetChestsFromChestSpawn(const int ChestSpawnID, out int[] ChestIDs);// 0x4a5d312cd041
	int GetAvailableAirDropsNum();// 0x4a5c312cd041
	bool GetAirDropChestIDsByGamePlayMode(const int GamePlayMode, out int[] ChestIDs);// 0x4a5b312cd041
	SolarAirDropSpawner*[] GetActiveAirDropBox();// 0x4a5a312cd041
	void FindTransformForBoxItem(Actor* TargetActor, out Transform InTrans, bool bUseNewLocation);// 0x4a59312cd041
	Rotator FindRotationForDropItem(Actor* TargetActor, out Vector FindTargetPos);// 0x4a58312cd041
	bool FindPosForDropItem(SolarCharacterBase* Owner, out Vector FindTargetPos, const bool bPreferCenter);// 0x4a57312cd041
	SolarItemData CreateItemDataByKey(const int InItemID);// 0x4a56312cd041
	void ConvertOriginDatasToItemDatas();// 0x4a55312cd041
	void ClearSpawnLoopTimer();// 0x4a54312cd041
	void CheckSpawnItemByDis();// 0x4a53312cd041
	bool CheckPointInCircle(Vector2D Center, float Radius, Vector2D PlayerPoint);// 0x4a52312cd041
	void AddVehicleGroupDataSingle(int groupid, out int[] SingleData);// 0x4a51312cd041
	void AddOneDropDataToTempDatas(const int SpawnerID, const int InItemID, const int InItemNum, out <int,SimpleDropItemDataCollection> InDropItemDatas);// 0x4a50312cd041
	void AddAirDropToList(AirDropTreasureBox* AirDrop);// 0x4a4f312cd041

--------------------------------
Class: SolarItemRootActor.Actor.Object
	int MAX_LOAD_NUM;//[Offset: 0x228, Size: 0x4]
	int MAX_SPAWN_NUM;//[Offset: 0x22c, Size: 0x4]
	int CurrLoadNum;//[Offset: 0x230, Size: 0x4]
	int CurrSpawnNum;//[Offset: 0x234, Size: 0x4]
	int TempFrame;//[Offset: 0x238, Size: 0x4]
	int FrameInterval;//[Offset: 0x23c, Size: 0x4]

--------------------------------
Class: SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnerID;//[Offset: 0x294, Size: 0x4]
	enum SpawnerType;//[Offset: 0x2c8, Size: 0x1]
	enum SpawnerLevel;//[Offset: 0x2c9, Size: 0x1]
	int OutcomeID;//[Offset: 0x2cc, Size: 0x4]
	Vector OriginPos;//[Offset: 0x2d0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0x2dc, Size: 0xc]
	Box SpawnerBox;//[Offset: 0x2e8, Size: 0x1c]
	float RotateAngleRange;//[Offset: 0x304, Size: 0x4]
	bool HasSpawnedItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bActiveSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	FString SyncItemId;//[Offset: 0x310, Size: 0x10]
	bool BOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	bool bRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]
	float RefreshTime;//[Offset: 0x324, Size: 0x4]
	bool bUseSpawnerTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	int NumberOfPoints;//[Offset: 0x32c, Size: 0x4]
	float fScalarParams;//[Offset: 0x330, Size: 0x4]
	enum AppearanceType;//[Offset: 0x334, Size: 0x1]
	TimerHandle ItemLoadHandle;//[Offset: 0x358, Size: 0x8]
	TimerHandle ItemSpawnHandle;//[Offset: 0x360, Size: 0x8]
	TimerHandle ItemRefreshHandle;//[Offset: 0x368, Size: 0x8]
	void SpawnSingleItem();// 0x4464312cd041
	void SpawnInNextTick();// 0x4463312cd041
	void SaveSpawnerRange();// 0x4462312cd041
	void RandomRotatorForItem(enum ItemType, out Quat TargetRotator);// 0x4461312cd041
	void RandomPosInBoundingBox(out Vector TargetPos);// 0x4460312cd041
	void PlaceItemToTheGround(out Vector InOutLocation);// 0x445f312cd041
	void OnItemSpawned(Actor* Item);// 0x445e312cd041
	void OnAsyncLoadComplete(SoftClassPath SClassPath, SolarItemData ItemData);// 0x445d312cd041
	void NetStartSpawnItems(SolarItemRootActor* OwnerActor);// 0x445c312cd041
	void LoadSingleWeaponAsset(out const SolarItemData ItemData);// 0x445b312cd041
	void LoadSingleItemAsset();// 0x445a312cd041
	void LoadInNextTick();// 0x4459312cd041
	void InitSpawnerBound();// 0x4458312cd041
	void GetSuitableDropPos(out Vector TargetPos);// 0x4457312cd041
	void GenerateDropPosition();// 0x4456312cd041
	void ClearUnpickedItems();// 0x4455312cd041
	void ClearLoopTimer();// 0x4454312cd041

--------------------------------
Class: SolarAirDropSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	float SpawnDelay;//[Offset: 0x394, Size: 0x4]
	float AudioActorHeightOffset;//[Offset: 0x398, Size: 0x4]
	float AudioActorFallSpeed;//[Offset: 0x39c, Size: 0x4]
	SoftClassPath PillarMeshBPClassPathName;//[Offset: 0x3a0, Size: 0x18]
	int ChestID;//[Offset: 0x3c0, Size: 0x4]

--------------------------------
Class: SolarItemSpawnerArray
	SolarItemSpawner*[] ItemSpawnerArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: OutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int[] Contents;//[Offset: 0x8, Size: 0x10]
	enum OutcomeType;//[Offset: 0x18, Size: 0x1]
	<int,int> OutcomePools;//[Offset: 0x20, Size: 0x50]
	<int,int> OutcomeDynamicWeights;//[Offset: 0x70, Size: 0x50]
	<int,int> OutcomeSubWeights;//[Offset: 0xc0, Size: 0x50]
	int PoolTotalWeight;//[Offset: 0x110, Size: 0x4]
	int PoolOutcomeID;//[Offset: 0x114, Size: 0x4]
	int MaxTimes;//[Offset: 0x118, Size: 0x4]
	int MinTimes;//[Offset: 0x11c, Size: 0x4]
	int SpawnerID;//[Offset: 0x120, Size: 0x4]
	int NetSetTimes;//[Offset: 0x124, Size: 0x4]
	int DropedTimes;//[Offset: 0x128, Size: 0x4]
	<int,OutcomeContentData> ContentDatas;//[Offset: 0x130, Size: 0x50]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	int GlobalDropTimes;//[Offset: 0x184, Size: 0x4]
	OutcomeTypeLimitData[] LimitTypeDatas;//[Offset: 0x188, Size: 0x10]
	OutcomeIDLimitData[] LimitIDDatas;//[Offset: 0x198, Size: 0x10]

--------------------------------
Class: OutcomeContentData
	int ID;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	int Weight;//[Offset: 0x8, Size: 0x4]
	int[] RandomNums;//[Offset: 0x10, Size: 0x10]
	int MaxTimes;//[Offset: 0x20, Size: 0x4]
	int MinTimes;//[Offset: 0x24, Size: 0x4]
	int RelatedContentID;//[Offset: 0x28, Size: 0x4]
	enum ItemType;//[Offset: 0x2c, Size: 0x4]
	int DropedTimes;//[Offset: 0x30, Size: 0x4]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool IsDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]

--------------------------------
Class: OutcomeTypeLimitData
	enum LimitType;//[Offset: 0x0, Size: 0x4]
	int MinTimes;//[Offset: 0x4, Size: 0x4]
	int MaxTimes;//[Offset: 0x8, Size: 0x4]
	int CurrDropTimes;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: OutcomeIDLimitData
	int[] LimitIDs;//[Offset: 0x0, Size: 0x10]
	int MinTimes;//[Offset: 0x10, Size: 0x4]
	int MaxTimes;//[Offset: 0x14, Size: 0x4]
	int CurrDropTimes;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: OutcomeDataCollection
	OutcomeData[] Datas;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SimpleDropItemDataCollection
	<int,int> Datas;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: FinalDropDataCollection
	SolarItemData[] Datas;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarMapManager.SolarGameManager.Object
	MapData MapData;//[Offset: 0x38, Size: 0x3c]
	VehicleData VehicleData;//[Offset: 0x74, Size: 0x10]
	MiniMapAirlineData CurAirlineData;//[Offset: 0x84, Size: 0x30]
	Vector AirlineActorLoc;//[Offset: 0xb4, Size: 0xc]
	int CurrentMapID;//[Offset: 0xc0, Size: 0x4]
	FString CurrentMapName;//[Offset: 0xc8, Size: 0x10]
	float RespawnMinLength;//[Offset: 0xd8, Size: 0x4]
	float RespawnMaxLength;//[Offset: 0xdc, Size: 0x4]
	float FootMinLength;//[Offset: 0xe0, Size: 0x4]
	float FootMaxLength;//[Offset: 0xe4, Size: 0x4]
	float GunMinLength;//[Offset: 0xe8, Size: 0x4]
	float GunMaxLength;//[Offset: 0xec, Size: 0x4]
	float VehicleMinLength;//[Offset: 0xf0, Size: 0x4]
	float VehicleMaxLength;//[Offset: 0xf4, Size: 0x4]
	<enum,Vector2D> MapVoiceRangeMap;//[Offset: 0xf8, Size: 0x50]
	VisualSoundConfig* BattlePromptConfig;//[Offset: 0x1b8, Size: 0x8]
	GameModeGlobalSetting* GameModeGlobalSetting;//[Offset: 0x1c0, Size: 0x8]
	BattlePromptData BattlePromptData;//[Offset: 0x1c8, Size: 0x18]
	MapVoiceData WorldLocationToVoiceData(out const enum Type, out const Vector PlayerPos, out const Vector EnemyPos);// 0x4b44312cd041
	Vector2D WorldLocationToMiniMap(Vector WorldLocation);// 0x4b43312cd041
	float WorldLengthToMiniMap(float WorldLength);// 0x4b42312cd041
	void UnInitMapData();// 0x4b41312cd041
	void ReceiveInitMapData(int MapID);// 0x4b40312cd041
	Vector2D Normal2D(Vector2D VectorToTransForm);// 0x4b3f312cd041
	Vector MiniMapToWorldLocation(Vector2D PositionXY, float Z);// 0x4b3e312cd041
	bool IsOutOfBound(Vector2D PlayerNavPos);// 0x4b3d312cd041
	bool IsMiniMapAirlineDataValid(out const MiniMapAirlineData InData);// 0x4b3c312cd041
	bool IsCharacterInRange(Vector Pos, enum VoiceType);// 0x4b3b312cd041
	void InitMapData(int MapID);// 0x4b3a312cd041
	SolarCharacter* GetViewportFocusedCharacter();// 0x4b39312cd041
	bool GetSafeAreaInfo(out SafeAreaMapInfo OutAreaInfo);// 0x4b38312cd041
	Vector GetRandomVectorFromMapDarkData(Object* WorldContextObject, enum InType, bool GetWhiteArea);// 0x4b37312cd041
	CurveFloat* GetMiniMapFOVCurve(float InRadius);// 0x4b36312cd041
	int GetLenegthFromPlayerToMarkPoint(Vector MarkPosRealWorld, Vector CurrentPlayerLocation);// 0x4b35312cd041
	bool GetIntersectionOnMapFrame(Vector2D TeamMatePos, Vector2D MapAPos, float MapFrameHeight, float MapFrameWidth, out Vector2D InterSecionList, out enum CrossDirection);// 0x4b34312cd041
	float GetDistanceToSafeArea(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x4b33312cd041
	int GetCurrentMapID();// 0x4b32312cd041
	MiniMapAirlineData GetCurAirlineData();// 0x4b31312cd041
	VisualSoundConfig* GetBattlePromptConfig();// 0x4b30312cd041
	void GetAllEnemyActions(out MapVoiceDataListMap VoiceDataMap);// 0x4b2f312cd041
	Vector2D FixNavPos(Vector2D PlayerNavPos);// 0x4b2e312cd041
	bool CheckMapDarkDataWithVector(Vector InVector, enum InType, bool GetWhiteArea);// 0x4b2d312cd041
	bool CheckIfMarkedPointValid(out const Vector2D InMarkedPoint);// 0x4b2c312cd041
	float CalculatePoisonDistance(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x4b2b312cd041

--------------------------------
Class: MapVoiceData
	int Direction;//[Offset: 0x0, Size: 0x4]
	float TransparencyPercent;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MiniMapAirlineData
	enum AirlineType;//[Offset: 0x0, Size: 0x1]
	Vector2D StartPoint;//[Offset: 0x4, Size: 0x8]
	Vector2D EndPoint;//[Offset: 0xc, Size: 0x8]
	Vector2D RealStartPoint;//[Offset: 0x14, Size: 0x8]
	Vector2D RealEndPoint;//[Offset: 0x1c, Size: 0x8]
	Vector2D AirlineDir;//[Offset: 0x24, Size: 0x8]
	float AirlineLength;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MapData
	Vector2D MapTopLeftCoord;//[Offset: 0x0, Size: 0x8]
	Vector2D MapRightBottomCoord;//[Offset: 0x8, Size: 0x8]
	Vector2D MapImageSize;//[Offset: 0x10, Size: 0x8]
	int MapImage;//[Offset: 0x18, Size: 0x4]
	float AirlineZ;//[Offset: 0x1c, Size: 0x4]
	float HorizonLineZ;//[Offset: 0x20, Size: 0x4]
	float TopZ;//[Offset: 0x24, Size: 0x4]
	float BottomZ;//[Offset: 0x28, Size: 0x4]
	float AverageZ;//[Offset: 0x2c, Size: 0x4]
	float InitFogZ;//[Offset: 0x30, Size: 0x4]
	float TargetFogZ;//[Offset: 0x34, Size: 0x4]
	float MapFOV;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: VehicleData
	float Speed1;//[Offset: 0x0, Size: 0x4]
	float Fov1;//[Offset: 0x4, Size: 0x4]
	float Speed2;//[Offset: 0x8, Size: 0x4]
	float Fov2;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SafeAreaMapInfo
	Vector CurrentLocation;//[Offset: 0x0, Size: 0xc]
	float CurrentRadius;//[Offset: 0xc, Size: 0x4]
	Vector NextLocation;//[Offset: 0x10, Size: 0xc]
	float NextRadius;//[Offset: 0x1c, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x20, Size: 0x4]
	float TargetShrinkTime;//[Offset: 0x24, Size: 0x4]
	float CurrentConfigRadius;//[Offset: 0x28, Size: 0x4]
	Vector CurrentAreaBeginLocation;//[Offset: 0x2c, Size: 0xc]

--------------------------------
Class: VisualSoundConfig.DataAsset.Object
	byte ElemMaxCount;//[Offset: 0x30, Size: 0x1]
	float VehicleMoveDecidingSpeed;//[Offset: 0x34, Size: 0x4]
	<enum,VisualSoundData> VisualSoundDataMap;//[Offset: 0x38, Size: 0x50]
	<enum,float> DetectionDisMap;//[Offset: 0x88, Size: 0x50]
	<enum,float> AliveTimeMap;//[Offset: 0xd8, Size: 0x50]
	<enum,float> BreakTimeMap;//[Offset: 0x128, Size: 0x50]

--------------------------------
Class: VisualSoundData
	GameplayTagContainer RequiedTagsAny;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer LosingTagsAny;//[Offset: 0x20, Size: 0x20]
	float DetectionDis;//[Offset: 0x40, Size: 0x4]
	float AliveTime;//[Offset: 0x44, Size: 0x4]
	float CanBreakTime;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: BattlePromptData
	byte MaxLength;//[Offset: 0x0, Size: 0x1]
	BattlePromptElem[] BattlePromptElemArr;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BattlePromptElem
	enum Type;//[Offset: 0x8, Size: 0x1]
	enum RealType;//[Offset: 0x9, Size: 0x1]
	Vector CacheLoc;//[Offset: 0xc, Size: 0xc]
	float Distance;//[Offset: 0x18, Size: 0x4]
	float StartTime;//[Offset: 0x1c, Size: 0x4]
	float DestroyTime;//[Offset: 0x20, Size: 0x4]
	float ReplaceTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: MapVoiceDataListMap
	<enum,MapVoiceDataList> VoiceMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: MapVoiceDataList
	MapVoiceData[] VoiceList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AirDropTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	bool bIsOpening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 0x1]
	float openProgress;//[Offset: 0x59c, Size: 0x4]
	SolarCharacter* OpeningCharacter;//[Offset: 0x5a0, Size: 0x8]
	float OpenTime;//[Offset: 0x5a8, Size: 0x4]
	float ProtectionTime;//[Offset: 0x5ac, Size: 0x4]
	bool bBoxLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bd, Size: 0x1]
	FString SummonPlayerID;//[Offset: 0x610, Size: 0x10]
	float StartDropHeight;//[Offset: 0x620, Size: 0x4]
	Rotator TargetRotation;//[Offset: 0x624, Size: 0xc]
	Vector TargetLocation;//[Offset: 0x630, Size: 0xc]
	ParticleSystem* LandHitEffect;//[Offset: 0x640, Size: 0x8]
	class Actor* WarningEffect;//[Offset: 0x648, Size: 0x8]
	ParticleSystem* LandSmokeEffect;//[Offset: 0x650, Size: 0x28]
	class SolarAbility* RangeAbility;//[Offset: 0x678, Size: 0x8]
	float dropGravity;//[Offset: 0x680, Size: 0x4]
	float maxDropSpeed;//[Offset: 0x684, Size: 0x4]
	float originHeight;//[Offset: 0x688, Size: 0x4]
	float DecelerateHeight;//[Offset: 0x68c, Size: 0x4]
	float DecelerateTime;//[Offset: 0x690, Size: 0x4]
	float AirDropSpawnDelay;//[Offset: 0x694, Size: 0x4]
	float AudioActorHeightOffset;//[Offset: 0x698, Size: 0x4]
	float AudioActorFallSpeed;//[Offset: 0x69c, Size: 0x4]
	SoftClassPath AirDropGuideMeshBPClassPath;//[Offset: 0x6a0, Size: 0x18]
	float DropApprochDuration;//[Offset: 0x6b8, Size: 0x4]
	bool bSummonBySkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 0x1]
	enum MovementState;//[Offset: 0x6bd, Size: 0x1]
	enum OpenState;//[Offset: 0x6be, Size: 0x1]
	FString SNameAirDropOpen;//[Offset: 0x710, Size: 0x10]
	FString SNameLandHit;//[Offset: 0x720, Size: 0x10]
	FString SNameAirDropSpawn;//[Offset: 0x730, Size: 0x10]
	FString SNameAirDropSpawnWarning;//[Offset: 0x740, Size: 0x10]
	FString SNameAirDropStopSpawnWarning;//[Offset: 0x750, Size: 0x10]
	FString SNameAirDropApprochWarning;//[Offset: 0x760, Size: 0x10]
	FString SNameAirDropStopApprochWarning;//[Offset: 0x770, Size: 0x10]
	FString SNameStartDrop;//[Offset: 0x780, Size: 0x10]
	FString SNameStopDrop;//[Offset: 0x790, Size: 0x10]
	FString SNameDecelerateAudio;//[Offset: 0x7a0, Size: 0x10]
	FString SNamePlayLandedLoopAudio;//[Offset: 0x7b0, Size: 0x10]
	FString SNameStopLandedLoopAudio;//[Offset: 0x7c0, Size: 0x10]
	FString SNamePlayOnGroundBroadcastLoopAudio;//[Offset: 0x7d0, Size: 0x10]
	FString SNameStopOnGroundBroadcastLoopAudio;//[Offset: 0x7e0, Size: 0x10]
	FString SNamePlayStartHackAudio;//[Offset: 0x7f0, Size: 0x10]
	FString SNameStopStartHackAudio;//[Offset: 0x800, Size: 0x10]
	FString SNamePlayHackingLoopAudio;//[Offset: 0x810, Size: 0x10]
	FString SNameStopHackingLoopAudio;//[Offset: 0x820, Size: 0x10]
	FString SNameStopHackingLoopAudioAux;//[Offset: 0x830, Size: 0x10]
	void PlayLandingAnimation();// 0x3cbd312cd041
	bool OpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x3cbc312cd041
	void OnStateChanged();// 0x3cbb312cd041
	void OnRep_TargetLocation();// 0x3cba312cd041
	void OnRep_SummonPlayerID();// 0x3cb9312cd041
	void OnRep_StartDropHeight();// 0x3cb8312cd041
	void OnRep_OpenState(enum OpenState);// 0x3cb7312cd041
	void OnRep_OpenProgressChange();// 0x3cb6312cd041
	void OnRep_OpenCharacterChange();// 0x3cb5312cd041
	void OnRep_MovementState(enum MovementState);// 0x3cb4312cd041
	void OnRep_IsOpening();// 0x3cb3312cd041
	void OnRep_bBoxLanded();// 0x3cb2312cd041
	void OnOpenStateChanged(enum InPrevOpenState, enum InCurrOpenState);// 0x3cb1312cd041
	void OnMovementStateChanged(enum InPrevMovementState, enum InCurrMovementState);// 0x3cb0312cd041
	bool IsSummonedByCharacter();// 0x3caf312cd041
	bool IsOpenningCharacterOffline();// 0x3cae312cd041
	bool IsOpeningCharacterInRange();// 0x3cad312cd041
	bool CancelOpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x3cac312cd041

--------------------------------
Class: SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	enum CurrentState;//[Offset: 0x3d0, Size: 0x1]
	SolarItemDataArray ItemDataList;//[Offset: 0x3d8, Size: 0x118]
	SolarItemData[] SortedGameItemDatas;//[Offset: 0x4f0, Size: 0x10]
	int DataLeng;//[Offset: 0x520, Size: 0x4]
	enum CostType;//[Offset: 0x524, Size: 0x1]
	int CostNum;//[Offset: 0x528, Size: 0x4]
	int HighestItemQuality;//[Offset: 0x580, Size: 0x4]
	AkComponent* AkAudioComponent;//[Offset: 0x588, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x590, Size: 0x8]
	void UpdateTreasureBoxInternal();// 0x3cab312cd041
	void UpdateOpenBoxUIByState(const enum NewState);// 0x3caa312cd041
	void UpdateItemDataListInternal();// 0x3ca9312cd041
	void ServerSetState(const enum NewState, SolarCharacter* RequestCharacter);// 0x3ca8312cd041
	void ServerNotifyPlayerOpen(SolarCharacter* RequestCharacter, enum InItemType);// 0x3ca7312cd041
	void PlayOpenAnimation();// 0x3ca6312cd041
	void OnRep_ItemDataList();// 0x3ca5312cd041
	void OnRep_CurrentState();// 0x3ca4312cd041
	void OnClientItemHighestQualityChanged(int NewQuality, int PrevQuality);// 0x3ca3312cd041
	bool IsEmpty();// 0x3ca2312cd041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x3ca1312cd041
	int GetNumCost();// 0x3ca0312cd041
	SolarItemData[] GetItemList();// 0x3c9f312cd041
	enum GetCostType();// 0x3c9e312cd041
	void ConstructTreasureBoxTest(out int[] itemIdList);// 0x3c9d312cd041
	void ConstructTreasureBox(int dropId);// 0x3c9c312cd041
	bool BOpened();// 0x3c9b312cd041

--------------------------------
Class: SolarItemActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x268, Size: 0xb0]
	float SpawnOffset;//[Offset: 0x318, Size: 0x4]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x320, Size: 0x10]
	SoftObjectPath OutlineMatPath;//[Offset: 0x330, Size: 0x18]
	SoftObjectPath FXPath;//[Offset: 0x348, Size: 0x18]
	FString FXBPPath;//[Offset: 0x360, Size: 0x10]
	SphereComponent* SphereComponent;//[Offset: 0x370, Size: 0x8]
	Actor* FXActor;//[Offset: 0x37c, Size: 0x8]
	byte ItemCurrentState;//[Offset: 0x384, Size: 0x1]
	byte[] MarkedTeamIdList;//[Offset: 0x390, Size: 0x10]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x3a8, Size: 0x8]
	MaterialInstanceDynamic*[] NormalMats;//[Offset: 0x3b0, Size: 0x10]
	MaterialInstanceDynamic*[] OutlineMats;//[Offset: 0x3c0, Size: 0x10]
	void UnMarkThisItem(byte TeamID);// 0x3c9a312cd041
	void SwitchDiscardMaterials();// 0x3c99312cd041
	void SetOutlineMeshVisible(bool Visible);// 0x3c98312cd041
	void SetItemData(out const SolarItemData _ItemData);// 0x3c97312cd041
	void OnServerPawned();// 0x3c96312cd041
	void OnRep_ItemDataChange();// 0x3c95312cd041
	void OnRep_ItemCurrentStateChanged();// 0x3c94312cd041
	void NotifyThisItemWasPickedUp();// 0x3c93312cd041
	void MarkThisItem(byte TeamID);// 0x3c92312cd041
	StaticMeshComponent* GetStaticMeshComp();// 0x3c91312cd041
	int GetQuality();// 0x3c90312cd041

--------------------------------
Class: SolarDormantActor.Actor.Object

--------------------------------
Class: SolarItemDataArray.FastArraySerializer
	SolarItemData[] ItemDatas;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	float CharacterPickupRange;//[Offset: 0x598, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0x59c, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0x5a0, Size: 0x4]
	FString PlayerId;//[Offset: 0x5a8, Size: 0x10]
	FString NickName;//[Offset: 0x5b8, Size: 0x10]
	bool IsPickuped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	SolarPlayerWeapon*[] WeaponList;//[Offset: 0x5d0, Size: 0x10]
	BoxChargingInfo[] ChargingChars;//[Offset: 0x5e0, Size: 0x10]
	float ResurrectDistance;//[Offset: 0x5f0, Size: 0x4]
	byte CurrResurrectionState;//[Offset: 0x5f4, Size: 0x1]
	float ReviveTotalTime;//[Offset: 0x5f8, Size: 0x4]
	float ReviveStartTime;//[Offset: 0x5fc, Size: 0x4]
	SkeletalMeshComponent* PreViewMesh;//[Offset: 0x600, Size: 0x8]
	FName ReviveStartSound;//[Offset: 0x608, Size: 0x8]
	FName ReviveBeforeCompleteSound;//[Offset: 0x610, Size: 0x8]
	FName ReviveCompleteSound;//[Offset: 0x618, Size: 0x8]
	FName ReviveFailedSound;//[Offset: 0x620, Size: 0x8]
	float ResurrectionBeforeSoundTime;//[Offset: 0x628, Size: 0x4]
	ParticleSystem* ReviveCompletePS;//[Offset: 0x630, Size: 0x8]
	FName ReviveCompletePSAttachedSocket;//[Offset: 0x638, Size: 0x8]
	float PreviewMeshZOffset;//[Offset: 0x640, Size: 0x4]
	float PreviewMeshZRotation;//[Offset: 0x644, Size: 0x4]
	SceneComponent* FXPosComponent;//[Offset: 0x658, Size: 0x8]
	ParticleSystem*[] QualityPS;//[Offset: 0x660, Size: 0x10]
	class ActorEffect* RevivePreviewEffectClass;//[Offset: 0x680, Size: 0x8]
	<enum,SoftObjectPath> PreviewAnim;//[Offset: 0x690, Size: 0x50]
	void ReceiveSetUIEnable(bool IsShow);// 0x3ea3312cd041
	void ReceiveRemoveEffect(const SolarCharacter* SolarChar);// 0x3ea2312cd041
	void ReceiveRefreshExtraEnergy(FString Message);// 0x3ea1312cd041
	void ReceiveAddEffect(const SolarCharacter* SolarChar);// 0x3ea0312cd041
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3e9f312cd041
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3e9e312cd041
	void OnRep_ReviveStartTime();// 0x3e9d312cd041
	void OnRep_PickupedChanged();// 0x3e9c312cd041
	void OnRep_CurrExtraEnergyValueChanged();// 0x3e9b312cd041
	void OnRep_BResurrectionStateChanged();// 0x3e9a312cd041
	void OnRefreshPickupStatusEffect(bool IsShow);// 0x3e99312cd041
	bool IsInResurrectRange(SolarCharacter* InReqCharacter, out float RealDistance);// 0x3e98312cd041
	bool CanBuyResurrect(const SolarCharacter* InReqCharacter);// 0x3e97312cd041

--------------------------------
Class: BoxChargingInfo

--------------------------------
Class: GlobalOutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int SingleMaxTimes;//[Offset: 0x4, Size: 0x4]
	int TotalMaxTimes;//[Offset: 0x8, Size: 0x4]
	int TotalMinTimes;//[Offset: 0xc, Size: 0x4]
	int NetSetTimes;//[Offset: 0x10, Size: 0x4]
	int DropedTimes;//[Offset: 0x14, Size: 0x4]
	<int,int> ItemIDNumMap;//[Offset: 0x18, Size: 0x50]
	int[] AffectedOutcomes;//[Offset: 0x68, Size: 0x10]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: SolarVehicleData
	int VehicleID;//[Offset: 0x0, Size: 0x4]
	FString VehicleBP;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ItemResReference.TableRowBase
	FString Description;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath Icon;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath AbilityBP;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: SolarInteractableManager.SolarGameManager.Object
	int ZoneNum;//[Offset: 0x40, Size: 0x4]
	int TotalNum;//[Offset: 0x44, Size: 0x4]
	RadarStationCollection[] CurrRadarStations;//[Offset: 0x48, Size: 0x10]
	SolarElectricShop*[] CurrElectricShops;//[Offset: 0x58, Size: 0x10]
	SolarShieldUpgradeItemShop*[] ActiveShieldUpgradeItemShopList;//[Offset: 0x68, Size: 0x10]
	void OnClientShowShieldUpgradeItemShops();// 0x4a00312cd041

--------------------------------
Class: RadarStationCollection
	int Zone;//[Offset: 0x0, Size: 0x4]
	SolarRadarStation*[] AllRadarStations;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarRadarStation.SolarInteractableActor.Actor.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	int Zone;//[Offset: 0x238, Size: 0x4]
	float MaxTirggerDistance;//[Offset: 0x23c, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x240, Size: 0x4]
	GameplayTag CDTag;//[Offset: 0x244, Size: 0x8]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	bool bInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1]
	float CoolDownTime;//[Offset: 0x250, Size: 0x4]
	float CostEnergy;//[Offset: 0x254, Size: 0x4]
	float RemainCDTime;//[Offset: 0x258, Size: 0x4]
	SphereComponent* CollisionComp;//[Offset: 0x260, Size: 0x8]
	StaticMeshComponent* NormalMesh;//[Offset: 0x268, Size: 0x8]
	SolarObjAbilitySystemComponent* ObjAbilitySystemComp;//[Offset: 0x270, Size: 0x8]
	class SolarObjGameplayAbility* ObjAbilityClass;//[Offset: 0x278, Size: 0x8]
	GameplayAbilitySpecHandle ObjAbilityHandle;//[Offset: 0x280, Size: 0x4]
	bool TryTriggerRadarStation(SolarCharacter* InUser);// 0x4db6312cd041
	void ServerInitailizeAbility();// 0x4db5312cd041
	void OnResetCD();// 0x4db4312cd041
	void OnRep_Broken();// 0x4db3312cd041
	void OnRep_BInCD();// 0x4db2312cd041
	void OnRadarStationCDChanged();// 0x4db1312cd041
	void OnPlayStartScanEffect();// 0x4db0312cd041
	void OnGameplayTagChanged(GameplayTag Tag, bool bAdd);// 0x4daf312cd041
	void OnClientStartScan();// 0x4dae312cd041
	void OnBrokenChanged(bool InBroken);// 0x4dad312cd041
	void InitailizeAbilityParams();// 0x4dac312cd041
	float GetAbilityReaminingCD();// 0x4dab312cd041
	float GetAbilityCostEnergy();// 0x4daa312cd041
	float GetAbilityCooldown();// 0x4da9312cd041
	bool CanActivateNow();// 0x4da8312cd041

--------------------------------
Class: SolarInteractableActor.Actor.Object
	enum InteractType;//[Offset: 0x228, Size: 0x1]
	byte bUseSceneActorOptimization;//[Offset: 0x234, Size: 0x1]
	void SetUserActor(Actor* InUser);// 0x45d6312cd041
	void InteractWithActor(Actor* InActor);// 0x45d5312cd041
	Actor* GetUserActor();// 0x45d4312cd041

--------------------------------
Class: SolarObjAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	GameplayTagContainer NotifyTags;//[Offset: 0x1308, Size: 0x20]
	GameplayTagContainer RepNotifiedTags;//[Offset: 0x1328, Size: 0x20]
	void OnRep_RepNotifiedTags(out const GameplayTagContainer Previous);// 0x4b77312cd041

--------------------------------
Class: SolarObjGameplayAbility.GameplayAbility.Object
	class GameplayEffect* ActivateEffect;//[Offset: 0x400, Size: 0x8]
	float CostEnergy;//[Offset: 0x408, Size: 0x4]
	SolarInteractableActor* GetAbilityInstigator();// 0x4b75312cd041
	Actor* GetAbilityEffectUser();// 0x4b74312cd041

--------------------------------
Class: SolarElectricShop.SolarInteractableActor.Actor.Object
	int MaxWeaponLevel;//[Offset: 0x238, Size: 0x4]
	int MaxShieldLevel;//[Offset: 0x23c, Size: 0x4]
	float[] UpgradeEnergyCosts;//[Offset: 0x240, Size: 0x10]
	StaticMeshComponent* ShopMesh;//[Offset: 0x250, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x258, Size: 0x8]
	int SpawnID;//[Offset: 0x260, Size: 0x4]
	bool bSpecificShopID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	DataTable* ShopMeshPathTable;//[Offset: 0x268, Size: 0x28]
	bool bIfShowInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	class MapMarkBase* MapIcon;//[Offset: 0x298, Size: 0x28]
	int MapIconID;//[Offset: 0x2c0, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x2c4, Size: 0x4]
	int ShopID;//[Offset: 0x2c8, Size: 0x4]
	bool bIsBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	float TirggerDistance;//[Offset: 0x2d0, Size: 0x4]
	enum CurrentModeAnimType;//[Offset: 0x2d4, Size: 0x1]
	enum WantedModeAnimType;//[Offset: 0x2d5, Size: 0x1]
	SolarCharacter*[] InstigateCharacters;//[Offset: 0x2d8, Size: 0x10]
	DataTable* ShopMeshDataTable;//[Offset: 0x2e8, Size: 0x8]
	ElectricShopSection[] ItemSections;//[Offset: 0x2f0, Size: 0x10]
	ElectricShopCDRecord[] ItemCDRecords;//[Offset: 0x300, Size: 0x10]
	float[] PoolRefreshTimeList;//[Offset: 0x310, Size: 0x10]
	PoolRefreshInfo[] PoolRefreshInfoList;//[Offset: 0x320, Size: 0x10]
	int CurPoolGroupID;//[Offset: 0x330, Size: 0x4]
	MapMarkBase*[] MapMarkArray;//[Offset: 0x348, Size: 0x10]
	TimerHandle[] CachedHandles;//[Offset: 0x358, Size: 0x10]
	float DemoRotationSpeed;//[Offset: 0x368, Size: 0x4]
	float DemoSwtichTime;//[Offset: 0x36c, Size: 0x4]
	float DemoOffsetFromZ;//[Offset: 0x370, Size: 0x4]
	DataTable* ItemDemoBPTable;//[Offset: 0x378, Size: 0x28]
	DataTable* ItemDemoBPDataTable;//[Offset: 0x3a0, Size: 0x8]
	<SoftObjectPath,ElectricShopItemDemo*> DemoActorMap;//[Offset: 0x3a8, Size: 0x50]
	ElectricShopItemDemo* CurDemo;//[Offset: 0x3f8, Size: 0x8]
	TimerHandle DemoLoopPlaybackHandle;//[Offset: 0x400, Size: 0x8]
	ElectricShopItemDemo*[] SpawnedDemoActorList;//[Offset: 0x408, Size: 0x10]
	Object*[] CachedDemoItemsClass;//[Offset: 0x440, Size: 0x10]
	void UpgradeWeaponResponse(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x4746312cd041
	void UpgradeShieldResponse(SolarCharacter* InCharacter);// 0x4745312cd041
	bool ServerUpgradeWeapon(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x4744312cd041
	bool ServerUpgradeShield(SolarCharacter* InCharacter);// 0x4743312cd041
	void ServerStatisticElectricShop(const SolarCharacter* ActivateCharacter, enum StatisticType, const int InValueA, const int InValueB);// 0x4742312cd041
	bool ServerPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarCharacter* InCharacter);// 0x4741312cd041
	bool RemoveInstigator(SolarCharacter* InCharacter);// 0x4740312cd041
	bool RefreshSellingItem(const int InProductID);// 0x473f312cd041
	void RefreshItemCDRecords(out const ElectricShopItem InItem, FString InPlayerID);// 0x473e312cd041
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarCharacter* InCharacter);// 0x473d312cd041
	void OnShopIDReplicatedBP();// 0x473c312cd041
	void OnRep_ShopID();// 0x473b312cd041
	void OnRep_ItemSections();// 0x473a312cd041
	void OnRep_ItemCDRecords();// 0x4739312cd041
	void OnRep_CurPoolGroupID(int PrePoolGroupID);// 0x4738312cd041
	void OnPlayWeaponUpgradeAnim();// 0x4737312cd041
	void OnPlayPurchaseAnim();// 0x4736312cd041
	void OnPlayIdleAnim();// 0x4735312cd041
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4734312cd041
	void OnCurrentAnimFinish();// 0x4733312cd041
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4732312cd041
	bool IsProductRecommendEquipType(const enum ProductType);// 0x4731312cd041
	bool IsInteractable(SolarCharacter* InCharacter);// 0x4730312cd041
	void InitWeaponUpgradeEnergyCost();// 0x472f312cd041
	void InitializeElectricShop();// 0x472e312cd041
	float GetServerWorldTime();// 0x472d312cd041
	float GetRemainingCD(const int ProductID);// 0x472c312cd041
	float GetDiscountedPrice(SolarCharacter* BuyerCharacter, float Price);// 0x472b312cd041
	void GetDiscountedItem(SolarCharacter* BuyerCharacter, out ElectricShopItem OutItem);// 0x472a312cd041
	bool GetCurrentItem(const int InProductID, out ElectricShopItem OutItem);// 0x4729312cd041
	FString GetBuyerID(const int ProductID);// 0x4728312cd041
	ElectricShopItem GenerateNewItem(const int InProductID);// 0x4727312cd041
	void ClientUpgradeWeaponSuccess();// 0x4726312cd041
	void ClientUpgradeShieldSuccess();// 0x4725312cd041
	void ClientUpdateModelAnim();// 0x4724312cd041
	void ClientPurchaseSuccess();// 0x4723312cd041
	void ClientHUDUpgradeWeaponSuccess(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x4722312cd041
	void ClientHUDUpgradeShieldSuccess(SolarCharacter* InCharacter);// 0x4721312cd041
	void ClientHUDPurchaseSuccess(const int InProductID, SolarCharacter* InCharacter);// 0x4720312cd041
	void ClientHUDPoolRefresh(SolarCharacter* InCharacter);// 0x471f312cd041
	void ClientHUDItemRefresh(SolarCharacter* InCharacter);// 0x471e312cd041
	void ClientHUDCDRefresh(SolarCharacter* InCharacter);// 0x471d312cd041
	void AddInstigator(SolarCharacter* InCharacter);// 0x471c312cd041

--------------------------------
Class: MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	MiniMapBase* MapOwner;//[Offset: 0x340, Size: 0x8]
	Vector2D MarkIconRealLoc;//[Offset: 0x348, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x350, Size: 0x8]
	bool IsOnBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	enum MarkerType;//[Offset: 0x359, Size: 0x1]
	bool IsMapObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35a, Size: 0x1]
	bool MoveAble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35b, Size: 0x1]
	bool SupportEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1]
	bool SupportEdgeWithBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d, Size: 0x1]
	Actor* TargetActorRef;//[Offset: 0x360, Size: 0x8]
	void UpdateIconWithActor(Actor* InTargetActor);// 0x40a8312cd041
	void SetUpdateState(bool ShouldUpdateLocation);// 0x40a7312cd041
	void SetMarkPos(out const Vector Loc);// 0x40a6312cd041
	void SetEdgeSupport(bool IsSupportEdge, bool WithBigMap);// 0x40a5312cd041
	void SetColorOpacityIndex(byte InColorOpacityIndex);// 0x40a4312cd041
	void OnBigMapOpen();// 0x40a3312cd041
	void InitVehicleMarkIcon(int VehicleID);// 0x40a2312cd041
	void InitStaticIcon(int MarkID);// 0x40a1312cd041
	void InitMarkIcon(int MarkID, Actor* InTargetActor, bool InMoveable);// 0x40a0312cd041
	void EdgeFix(Vector2D Pos);// 0x409f312cd041
	void CleanData();// 0x409e312cd041

--------------------------------
Class: MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MaxPool;//[Offset: 0x340, Size: 0x4]
	<FString,MapMarkElemArray> MapMarkPool;//[Offset: 0x348, Size: 0x50]
	void RemoveMarkIcon(MapMarkBase* InMapMark);// 0x40cb312cd041
	void RemoveDotLineOnMap(int DotLineID);// 0x40ca312cd041
	void RemoveAllMapMarks();// 0x40c9312cd041
	bool RecycleMapMark(FString MapMarkName, MapMarkBase* MapMarkToRecycle);// 0x40c8312cd041
	void PlayVoiceOnMiniMap(enum InVoiceType, out const MapVoiceData InVoiceData);// 0x40c7312cd041
	void MapScaleFormat(MapMarkBase* MapMark);// 0x40c6312cd041
	MapMarkBase* InitMarkIconOnMapFrame(class MapMarkBase InMapMarkClass, out const Vector2D Pivot, int ZOrder);// 0x40c5312cd041
	MapMarkBase* InitMarkIcon(class MapMarkBase InMapMarkClass, out const Vector2D InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int ZOrder);// 0x40c4312cd041
	void InitMapMarkPool();// 0x40c3312cd041
	MapMarkBase* GetFreeMapMark(FString MapMarkName);// 0x40c2312cd041
	bool EdgeSupportMarkFix(MapMarkBase* InMarkInstance, out Vector2D FixedPos);// 0x40c1312cd041
	MapMarkBase* CreateMapMark(FString MapMarkName);// 0x40c0312cd041
	int AddDotLineOnMap(Actor* StartPointActor, Actor* EndPointActor, LinearColor DotLineColor);// 0x40bf312cd041

--------------------------------
Class: MapMarkElemArray
	MapMarkElem[] MapMarkElems;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MapMarkElem
	MapMarkBase* MapMark;//[Offset: 0x0, Size: 0x8]
	bool bUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ElectricShopSection
	ElectricShopItem[] Items;//[Offset: 0x0, Size: 0x10]
	float CoolDownDuration;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ElectricShopItem
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float Prize;//[Offset: 0x4, Size: 0x4]
	int Num;//[Offset: 0x8, Size: 0x4]
	int ProductID;//[Offset: 0xc, Size: 0x4]
	float CoolDown;//[Offset: 0x10, Size: 0x4]
	int Generation;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ElectricShopCDRecord
	int ProductID;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	float EndWorldTime;//[Offset: 0x8, Size: 0x4]
	FString BuyerID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PoolRefreshInfo
	int PoolGroupID;//[Offset: 0x0, Size: 0x4]
	float PoolRefreshTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ElectricShopItemDemo.Actor.Object

--------------------------------
Class: SolarShieldUpgradeItemShop.SolarInteractableActor.Actor.Object
	int groupid;//[Offset: 0x238, Size: 0x4]
	int ServerActiveGroupID;//[Offset: 0x23c, Size: 0x4]
	StaticMeshComponent* BodyMesh;//[Offset: 0x240, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x248, Size: 0x8]
	StaticMeshComponent* HeadUpIconMesh;//[Offset: 0x250, Size: 0x8]
	int UpgradeItemNum;//[Offset: 0x258, Size: 0x4]
	ParticleSystem* InteractionTriggeredEffect;//[Offset: 0x260, Size: 0x28]
	SolarIntArray InteractedPlayerIDList;//[Offset: 0x288, Size: 0x130]
	SphereComponent* AudioTriggerComp;//[Offset: 0x3d0, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x3d8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x3e0, Size: 0x8]
	FString SNameHint;//[Offset: 0x3e8, Size: 0x10]
	FString SNameStopHint;//[Offset: 0x3f8, Size: 0x10]
	void OnRep_InteractedPlayerIDList();// 0x4e0a312cd041
	void OnRep_ActiveGroupID();// 0x4e09312cd041
	void OnOtherPlayerInteracted();// 0x4e08312cd041
	void OnCurrentPlayerChanged();// 0x4e07312cd041
	void OnActorEndOverlapAudioSphere(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4e06312cd041
	void OnActorEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4e05312cd041
	void OnActorBeginOverlapAudioSphere(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4e04312cd041
	void OnActorBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4e03312cd041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4e02312cd041

--------------------------------
Class: SolarIntArray.FastArraySerializer
	SolarIntEntry[] Elements;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: SolarIntEntry.FastArraySerializerItem
	int IntProperty;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolarPlatformHelper.Object
	SolarPlatformStats* SolarPlatformStats;//[Offset: 0x30, Size: 0x8]
	SolarGameInstanceBase* SolarGameInstanceBase;//[Offset: 0x38, Size: 0x8]
	bool UseRenderThread();// 0x4c15312cd041
	bool SupportsMultithreading();// 0x4c14312cd041
	double Seconds();// 0x4c13312cd041
	void ReceiveShutdown();// 0x4c12312cd041
	void ReceiveInit();// 0x4c11312cd041
	bool IsThisApplicationForeground();// 0x4c10312cd041
	bool IsRunningOnBattery();// 0x4c0f312cd041
	bool Is64bitOperatingSystem();// 0x4c0e312cd041
	int64 GetVideoMemory();// 0x4c0d312cd041
	FString GetUniqueDeviceId();// 0x4c0c312cd041
	FString GetTimeZoneId();// 0x4c0b312cd041
	FString GetSuitableStringWithUnitOfBytes(uint64 NumberOfBytes, FString ExtraUnit);// 0x4c0a312cd041
	SolarPlatformStats* GetSolarPlatformStats();// 0x4c09312cd041
	int GetSimultaneousInstanceId();// 0x4c08312cd041
	FString GetPrimaryGPUBrand();// 0x4c07312cd041
	FString GetPathVarDelimiter();// 0x4c06312cd041
	void GetOSVersions(out FString out_OSVersionLabel, out FString out_OSSubVersionLabel);// 0x4c05312cd041
	FString GetOSVersion();// 0x4c04312cd041
	uint32 GetMoniterWidth();// 0x4c03312cd041
	uint32 GetMoniterRefreshRate();// 0x4c02312cd041
	uint32 GetMoniterHeight();// 0x4c01312cd041
	int GetMaxPathLength();// 0x4c00312cd041
	GameUserSettings* GetGameUserSettings();// 0x4bff312cd041
	FString GetEnvironmentVariable(FString VariableName);// 0x4bfe312cd041
	Engine* GetEngine();// 0x4bfd312cd041
	bool GetDiskTotalAndFreeSpace(FString InPath, out uint64 TotalNumberOfBytes, out uint64 NumberOfFreeBytes);// 0x4bfc312cd041
	float GetDeviceTemperatureLevel();// 0x4bfb312cd041
	FString GetDeviceMakeAndModel();// 0x4bfa312cd041
	FString GetDefaultDeviceProfileName();// 0x4bf9312cd041
	FString GetCPUVendor();// 0x4bf8312cd041
	uint32 GetCPUInfo();// 0x4bf7312cd041
	FString GetCPUChipset();// 0x4bf6312cd041
	FString GetCPUBrand();// 0x4bf5312cd041
	int GetBatteryLevel();// 0x4bf4312cd041
	FString ClipboardPaste();// 0x4bf3312cd041
	void ClipboardCopy(FString str);// 0x4bf2312cd041

--------------------------------
Class: SolarPlatformStats.Object
	uint64 MaxUsedPhysical;//[Offset: 0x30, Size: 0x8]
	void ReceiveWorldCleanup(World* World, bool bSessionEnded, bool bCleanupResources);// 0x4c1f312cd041
	void ReceiveShutdown();// 0x4c1e312cd041
	void ReceivePostWorldInitialization(World* World);// 0x4c1d312cd041
	void ReceiveInit();// 0x4c1c312cd041
	uint64 GetRHIUsedMemory();// 0x4c1b312cd041
	float GetRenderThreadTime();// 0x4c1a312cd041
	int GetNumDrawCalls();// 0x4c19312cd041
	int GetMinFPS();// 0x4c18312cd041
	float GetGameThreadTime();// 0x4c17312cd041
	int GetAverageFPS();// 0x4c16312cd041

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4]
	int WindowPosX;//[Offset: 0x90, Size: 0x4]
	int WindowPosY;//[Offset: 0x94, Size: 0x4]
	int FullscreenMode;//[Offset: 0x98, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4]
	uint32 Version;//[Offset: 0xa4, Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10]
	void ValidateSettings();// 0x5dbb312cd041
	bool SupportsHDRDisplayOutput();// 0x5dba312cd041
	void SetVSyncEnabled(bool bEnable);// 0x5db9312cd041
	void SetVisualEffectQuality(int Value);// 0x5db8312cd041
	void SetViewDistanceQuality(int Value);// 0x5db7312cd041
	void SetToDefaults();// 0x5db6312cd041
	void SetTextureQuality(int Value);// 0x5db5312cd041
	void SetShadowQuality(int Value);// 0x5db4312cd041
	void SetShadingQuality(int Value);// 0x5db3312cd041
	void SetScreenResolution(IntPoint Resolution);// 0x5db2312cd041
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x5db1312cd041
	void SetResolutionScaleValue(int NewScaleValue);// 0x5db0312cd041
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x5daf312cd041
	void SetPostProcessingQuality(int Value);// 0x5dae312cd041
	void SetOverallScalabilityLevel(int Value);// 0x5dad312cd041
	void SetFullscreenMode(byte InFullscreenMode);// 0x5dac312cd041
	void SetFrameRateLimit(float NewLimit);// 0x5dab312cd041
	void SetFoliageQuality(int Value);// 0x5daa312cd041
	void SetDynamicResolutionEnabled(bool bEnable);// 0x5da9312cd041
	void SetBenchmarkFallbackValues();// 0x5da8312cd041
	void SetAudioQualityLevel(int QualityLevel);// 0x5da7312cd041
	void SetAntiAliasingQuality(int Value);// 0x5da6312cd041
	void SaveSettings();// 0x5da5312cd041
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x5da4312cd041
	void RevertVideoMode();// 0x5da3312cd041
	void ResetToCurrentSettings();// 0x5da2312cd041
	void LoadSettings(bool bForceReload);// 0x5da1312cd041
	bool IsVSyncEnabled();// 0x5da0312cd041
	bool IsVSyncDirty();// 0x5d9f312cd041
	bool IsScreenResolutionDirty();// 0x5d9e312cd041
	bool IsHDREnabled();// 0x5d9d312cd041
	bool IsFullscreenModeDirty();// 0x5d9c312cd041
	bool IsDynamicResolutionEnabled();// 0x5d9b312cd041
	bool IsDynamicResolutionDirty();// 0x5d9a312cd041
	bool IsDirty();// 0x5d99312cd041
	int GetVisualEffectQuality();// 0x5d98312cd041
	int GetViewDistanceQuality();// 0x5d97312cd041
	int GetTextureQuality();// 0x5d96312cd041
	int GetSyncInterval();// 0x5d95312cd041
	int GetShadowQuality();// 0x5d94312cd041
	int GetShadingQuality();// 0x5d93312cd041
	IntPoint GetScreenResolution();// 0x5d92312cd041
	float GetResolutionScaleNormalized();// 0x5d91312cd041
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x5d90312cd041
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x5d8f312cd041
	float GetRecommendedResolutionScale();// 0x5d8e312cd041
	byte GetPreferredFullscreenMode();// 0x5d8d312cd041
	int GetPostProcessingQuality();// 0x5d8c312cd041
	int GetOverallScalabilityLevel();// 0x5d8b312cd041
	IntPoint GetLastConfirmedScreenResolution();// 0x5d8a312cd041
	byte GetLastConfirmedFullscreenMode();// 0x5d89312cd041
	GameUserSettings* GetGameUserSettings();// 0x5d88312cd041
	byte GetFullscreenMode();// 0x5d87312cd041
	float GetFrameRateLimit();// 0x5d86312cd041
	int GetFramePace();// 0x5d85312cd041
	int GetFoliageQuality();// 0x5d84312cd041
	IntPoint GetDesktopResolution();// 0x5d83312cd041
	IntPoint GetDefaultWindowPosition();// 0x5d82312cd041
	byte GetDefaultWindowMode();// 0x5d81312cd041
	float GetDefaultResolutionScale();// 0x5d80312cd041
	IntPoint GetDefaultResolution();// 0x5d7f312cd041
	int GetCurrentHDRDisplayNits();// 0x5d7e312cd041
	int GetAudioQualityLevel();// 0x5d7d312cd041
	int GetAntiAliasingQuality();// 0x5d7c312cd041
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x5d7b312cd041
	void ConfirmVideoMode();// 0x5d7a312cd041
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x5d79312cd041
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x5d78312cd041
	void ApplyNonResolutionSettings();// 0x5d77312cd041
	void ApplyHardwareBenchmarkResults();// 0x5d76312cd041

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18]
	Font* SmallFont;//[Offset: 0x50, Size: 0x8]
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18]
	Font* MediumFont;//[Offset: 0x70, Size: 0x8]
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18]
	Font* LargeFont;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10]
	FString[] AdditionalFontNames;//[Offset: 0xe8, Size: 0x10]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 0x8]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 0x8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 0x18]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 0x8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 0x8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 0x18]
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x190, Size: 0x8]
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x198, Size: 0x18]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1b0, Size: 0x8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 0x8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 0x8]
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 0x18]
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 0x8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 0x8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x288, Size: 0x8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 0x8]
	SoftClassPath RuntimeAssetsCollectionClassName;//[Offset: 0x2b0, Size: 0x18]
	RuntimeAssetsCollectionBase* RuntimeAssetsCollection;//[Offset: 0x2c8, Size: 0x8]
	Texture2D* DefaultTexture;//[Offset: 0x2d0, Size: 0x8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2d8, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2f0, Size: 0x8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2f8, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x310, Size: 0x8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x318, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x330, Size: 0x8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x338, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x350, Size: 0x8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x358, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x370, Size: 0x8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x378, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x390, Size: 0x8]
	FString WireframeMaterialName;//[Offset: 0x398, Size: 0x10]
	Material* DebugMeshMaterial;//[Offset: 0x3a8, Size: 0x8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x3b0, Size: 0x18]
	Material* EmissiveMeshMaterial;//[Offset: 0x3c8, Size: 0x8]
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3d0, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x3e8, Size: 0x8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3f0, Size: 0x10]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x400, Size: 0x8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x408, Size: 0x10]
	Material* LightingTexelDensityMaterial;//[Offset: 0x418, Size: 0x8]
	FString LightingTexelDensityName;//[Offset: 0x420, Size: 0x10]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x430, Size: 0x8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x438, Size: 0x10]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x448, Size: 0x8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x450, Size: 0x10]
	Material* RemoveSurfaceMaterial;//[Offset: 0x460, Size: 0x8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x468, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x480, Size: 0x8]
	FString VertexColorMaterialName;//[Offset: 0x488, Size: 0x10]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x498, Size: 0x8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x4a0, Size: 0x10]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x4b0, Size: 0x8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x4b8, Size: 0x10]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4c8, Size: 0x8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4d0, Size: 0x10]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4e0, Size: 0x8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4e8, Size: 0x10]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4f8, Size: 0x8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x500, Size: 0x10]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x510, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x528, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x530, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x538, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x540, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x548, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x550, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x558, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x560, Size: 0x8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x568, Size: 0x8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x570, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x588, Size: 0x8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x590, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x5a8, Size: 0x8]
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x5b0, Size: 0x8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x5b8, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x5d0, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5e0, Size: 0x10]
	LinearColor[] QuadComplexityColors;//[Offset: 0x5f0, Size: 0x10]
	LinearColor[] LightComplexityColors;//[Offset: 0x600, Size: 0x10]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x610, Size: 0x10]
	LinearColor[] LODColorationColors;//[Offset: 0x620, Size: 0x10]
	LinearColor[] HLODColorationColors;//[Offset: 0x630, Size: 0x10]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x640, Size: 0x10]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x650, Size: 0x4]
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x654, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x658, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x65c, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x660, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x664, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x668, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x66c, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x670, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x680, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x690, Size: 0x10]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x6a0, Size: 0x8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6a8, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6c0, Size: 0x10]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6d0, Size: 0x10]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6e0, Size: 0x10]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6f0, Size: 0x10]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x700, Size: 0x8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x708, Size: 0x18]
	Texture2D* BlueNoiseTexture;//[Offset: 0x720, Size: 0x8]
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x728, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x740, Size: 0x8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x748, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x760, Size: 0x8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x768, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x780, Size: 0x8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x788, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x7a8, Size: 0x8]
	FString[] DeferredCommands;//[Offset: 0x7b0, Size: 0x10]
	int TickCycles;//[Offset: 0x7c0, Size: 0x4]
	int GameCycles;//[Offset: 0x7c4, Size: 0x4]
	int ClientCycles;//[Offset: 0x7c8, Size: 0x4]
	float NearClipPlane;//[Offset: 0x7cc, Size: 0x4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x7d4, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d8, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d8, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d8, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d8, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d8, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d8, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x7dc, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7e0, Size: 0x10]
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7f0, Size: 0x8]
	FString SkipLODStripStaticMeshNames;//[Offset: 0x818, Size: 0x10]
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x828, Size: 0x18]
	TimecodeProvider* TimecodeProvider;//[Offset: 0x840, Size: 0x8]
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x868, Size: 0x18]
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x884, Size: 0x8]
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x88c, Size: 0x4]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x894, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x89c, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x8a0, Size: 0x4]
	Color C_AddWire;//[Offset: 0x8a4, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x8a8, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x8ac, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x8b0, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x8b4, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x8b8, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x8bc, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x8c0, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x8c4, Size: 0x4]
	Color C_Volume;//[Offset: 0x8c8, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x8cc, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x8d0, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x8d8, Size: 0x10]
	enum TransitionType;//[Offset: 0x8e8, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x8f0, Size: 0x10]
	FString TransitionGameMode;//[Offset: 0x900, Size: 0x10]
	float MeshLODRange;//[Offset: 0x910, Size: 0x4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x914, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x918, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x91c, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x920, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x924, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x92c, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x930, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x938, Size: 0x10]
	float NetClientTicksPerSecond;//[Offset: 0x948, Size: 0x4]
	float DisplayGamma;//[Offset: 0x94c, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x950, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x954, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x964, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x974, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x984, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x994, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a5, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a5, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a5, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9a5, Size: 0x1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x9a8, Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x9b0, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b4, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0x9b8, Size: 0x10]
	float SelectionHighlightIntensity;//[Offset: 0x9c8, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x9cc, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9d0, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc20, Size: 0x10]
	FString[] ServerActors;//[Offset: 0xc30, Size: 0x10]
	FString[] RuntimeServerActors;//[Offset: 0xc40, Size: 0x10]
	float NetErrorLogInterval;//[Offset: 0xc50, Size: 0x4]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc54, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0xc68, Size: 0x4]

--------------------------------
Class: RuntimeAssetsCollectionBase.Object

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10]
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10]
	FString NewPluginName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4]
	Timecode GetTimecode();// 0x6287312cd041
	enum GetSynchronizationState();// 0x6286312cd041
	QualifiedFrameTime GetQualifiedFrameTime();// 0x6285312cd041
	FrameRate GetFrameRate();// 0x6284312cd041
	Timecode GetDelayedTimecode();// 0x6283312cd041
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x6282312cd041

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4]
	int Minutes;//[Offset: 0x4, Size: 0x4]
	int Seconds;//[Offset: 0x8, Size: 0x4]
	int Frames;//[Offset: 0xc, Size: 0x4]
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	FString Comment;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WeaponGrowthManager.Object
	FString GetWeaponBpPath(int ID);// 0x56f9312cd041

--------------------------------
Class: IMChatObject.Object
	bool IsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void SendPlayerPosToIMServerEveryFrame(out const Vector PlayerPosition);// 0x4047312cd041

--------------------------------
Class: SolarLuaManager.Object
	delegate OnHandleLuaException;//[Offset: 0x30, Size: 0x10]
	SoftObjectPath LuaErrorWidgetPath;//[Offset: 0x50, Size: 0x18]
	LuaErrorWidgetBase* LuaErrorWidget;//[Offset: 0x70, Size: 0x8]
	void SetLuaErrorPopWidget(LuaErrorWidgetBase* Widget);// 0x4b28312cd041
	void OnLuaContextCleanup(bool bFullCleanup);// 0x4b27312cd041
	enum GetBuildConfiguration();// 0x4b26312cd041
	void AddToDoNotShowAgainList(FString Msg);// 0x4b25312cd041

--------------------------------
Class: LuaErrorWidgetBase.UserWidget.Widget.Visual.Object
	void ShowLuaError(out const FString[] LuaErrorMsgs);// 0x4b24312cd041

--------------------------------
Class: SolarGameStatistics.Object
	FString PlayerIdName;//[Offset: 0x30, Size: 0x10]
	FString LogTypeName;//[Offset: 0x40, Size: 0x10]
	SolarGameInstanceBase* Owner;//[Offset: 0x50, Size: 0x8]
	SolarGameStatisticsLogHeadInfo LogHeadInfo;//[Offset: 0x58, Size: 0x28]
	SolarGameStatisticsLogHeadInfo StaticGetLogHeadInfo();// 0x48c0312cd041
	void SetSwapLogFileSize(int InSize);// 0x48bf312cd041
	void SetSwapLogFileInterval(int InInterval);// 0x48be312cd041
	void SetLogValueSeparater(FString InValueSeparater);// 0x48bd312cd041
	void SetLogTerminator(FString InTerminator);// 0x48bc312cd041
	void SetLogFileNameSuffix(FString InLogFileNameSuffix);// 0x48bb312cd041
	void SetLogFileNamePrefix(FString InLogFileNamePrefix);// 0x48ba312cd041
	void SetLogFileExtension(FString InLogFileExtension);// 0x48b9312cd041
	void SetLogFileDir(FString InLogFileDir);// 0x48b8312cd041
	void SetLogElementSeparater(FString InElementSeparater);// 0x48b7312cd041
	void SetLogCheckIntervalMS(int InLogCheckIntervalMS);// 0x48b6312cd041
	void ReceiveShutdown();// 0x48b5312cd041
	void ReceiveInit();// 0x48b4312cd041
	void NotifyBattleStart(FString InBattleID);// 0x48b3312cd041
	void NotifyBattleEnd();// 0x48b2312cd041
	void LogInternal(FString InLog);// 0x48b1312cd041
	void LogGameStats_KeyValues(FString InKey, out const FString[] InValues);// 0x48b0312cd041
	void LogGameStats_KeyValue(FString InKey, FString InValue);// 0x48af312cd041
	void LogGameStats_Key(FString InKey);// 0x48ae312cd041
	bool IsUseEmptyHeadData(FString InPlayerID);// 0x48ad312cd041
	int GetSwapLogFileSize();// 0x48ac312cd041
	int GetSwapLogFileInterval();// 0x48ab312cd041
	FString GetSCMLogDataString(const bool bIncludeStatistics, SolarPlayerState* InPS);// 0x48aa312cd041
	FString GetProperLogElement(FString InElement);// 0x48a9312cd041
	FString GetLogValueSeparater();// 0x48a8312cd041
	FString GetLogTerminator();// 0x48a7312cd041
	SolarGameStatisticsLogHeadInfo GetLogHeadInfo();// 0x48a6312cd041
	FString GetLogFileNameSuffix();// 0x48a5312cd041
	FString GetLogFileNamePrefix();// 0x48a4312cd041
	FString GetLogFileExtension();// 0x48a3312cd041
	FString GetLogFileDir();// 0x48a2312cd041
	FString GetLogElementSeparater();// 0x48a1312cd041
	FString GetLogDataString(const bool bIncludeStatistics, FString InPlayerID);// 0x48a0312cd041
	int GetLogCheckIntervalMS();// 0x489f312cd041
	FString GetHeadDataString(FString InPlayerID);// 0x489e312cd041
	FString GetEmptyHeadDataString();// 0x489d312cd041
	bool CanReportBIWrapper(FString InLogType);// 0x489c312cd041

--------------------------------
Class: SolarGameStatisticsLogHeadInfo
	int BattleInstanceId;//[Offset: 0x0, Size: 0x4]
	int PIEInstance;//[Offset: 0x4, Size: 0x4]
	FString BattleID;//[Offset: 0x8, Size: 0x10]
	FString WorldName;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: SolarWeaponMergeMeshManager.Object
	WeaponMergeMeshStruct[] MergeMeshArray;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: WeaponMergeMeshStruct
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	int weaponid;//[Offset: 0x10, Size: 0x4]
	int SkinId;//[Offset: 0x14, Size: 0x4]
	int[] Parts;//[Offset: 0x18, Size: 0x10]
	SkeletalMesh* MergeMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: CrashReportManager.Object
	void SetUserId(out FString UserId);// 0x3e6e312cd041
	void ReportLuaException(FString ErrorMsg, FString Traceback, bool bHandled);// 0x3e6d312cd041

--------------------------------
Class: SolarPopPanelManager.SolarGameManager.Object

--------------------------------
Class: SolarApplicationLifetimeManager.SolarGameManager.Object
	int64 AppWillDeactivateTimestamp;//[Offset: 0x38, Size: 0x8]
	int64 AppHasReactivatedTimestamp;//[Offset: 0x40, Size: 0x8]
	void ReceiveOnWindowMinimized(const bool bIsMinimized);// 0x44f0312cd041
	void ReceiveOnAppWillDeactivate(int64 InTimestamp);// 0x44ef312cd041
	void ReceiveOnAppHasReactivated(int64 InTimestamp);// 0x44ee312cd041

--------------------------------
Class: SolarHomeActorManager.Object
	<FString,SolarHomeActor*> SpawnedHomeActors;//[Offset: 0x38, Size: 0x50]
	<IntVector,SolarHomeActor*> SpawnedConstructsLocKey;//[Offset: 0x88, Size: 0x50]
	<IntVector,SolarHomeActor*> PreviewConstructsLocKey;//[Offset: 0xd8, Size: 0x50]
	<SolarHomeConnectedGraph*> ConnectedGraphSet;//[Offset: 0x128, Size: 0x50]
	<FString,SolarHomeActor*> ClippingHomeActors;//[Offset: 0x178, Size: 0x50]
	<FString,SolarHomeActor*> InValidHomeActors;//[Offset: 0x1c8, Size: 0x50]
	<FString,SubPoolOfHomeActor*> HomeActorPools;//[Offset: 0x218, Size: 0x50]
	<int,HomeActorStaticData> StaticDataMap;//[Offset: 0x268, Size: 0x50]
	<FString,class Object> HomeActorClassPool;//[Offset: 0x2b8, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> SpawnedSpacesLocKey;//[Offset: 0x378, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> ShowsSpacesLocKey;//[Offset: 0x3c8, Size: 0x50]
	DataTable* HomeObjectTable;//[Offset: 0x470, Size: 0x8]
	SolarHomeShaderConfig* ShaderConfig;//[Offset: 0x478, Size: 0x8]
	DataTable* TextureDataTable;//[Offset: 0x480, Size: 0x8]
	DataTable* IconDataTable;//[Offset: 0x488, Size: 0x8]
	DataTable* PicDataTable;//[Offset: 0x490, Size: 0x8]
	int BuildCountPerFrame;//[Offset: 0x498, Size: 0x4]
	SolarHomeSpaceSpawner* HomeSpaceSpawner;//[Offset: 0x4b0, Size: 0x8]
	SolarHomePlayerController* HomePlayerCtrl;//[Offset: 0x4b8, Size: 0x8]
	SolarWaterActorNew* WaterActor;//[Offset: 0x4e0, Size: 0x8]
	<HomeShaderData,MaterialInstanceDynamic*> HomeObjShadersPool;//[Offset: 0x4e8, Size: 0x50]
	bool bIsConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]
	bool IsLoadingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 0x1]
	<SolarHomeDragUI*> CacheDragUIs;//[Offset: 0x5a8, Size: 0x50]
	<SolarHomeDragUI*> UsedDragUIs;//[Offset: 0x5f8, Size: 0x50]
	void UpdateCanSendSaveMsg();// 0x4968312cd041
	void UpdateCameraLayer(int NewLayer);// 0x4967312cd041
	bool TrySelectHomeActor(out const FString SelectedThisID, bool bSelect);// 0x4966312cd041
	bool TrySaveAllHomeActors();// 0x4965312cd041
	void TryResetAllHomeActors();// 0x4964312cd041
	void TryRemoveHomeActors(out const FString[] RemoveThisID);// 0x4963312cd041
	void TryRemoveHomeActor(out const FString RemoveThisID);// 0x4962312cd041
	void TryRemoveAllInvalidHomeActors();// 0x4961312cd041
	void TryRemoveAllHomeActors();// 0x4960312cd041
	void TryDyeHomeActor(out const FString DyeThisID, out const FString SlotName, out const FString TexturesID);// 0x495f312cd041
	void TryCreateHomeActorsNoLimit(out const HomeBuildReqData[] ReqDataArr);// 0x495e312cd041
	void TryCreateHomeActors(out const HomeBuildReqData[] ReqData);// 0x495d312cd041
	void TryCreateHomeActor(out const HomeBuildReqData ReqData);// 0x495c312cd041
	void TryConfirmHomeActor(out const FString SelectedThisID, bool bCancel);// 0x495b312cd041
	void TryCancelHomeActor(out const FString SelectedThisID);// 0x495a312cd041
	void SetLastSelectingThisID(out const FString InThisID);// 0x4959312cd041
	void SetLastCreateThisID(out const FString InThisID);// 0x4958312cd041
	void SetIsConstruct(bool bNewConstruct);// 0x4957312cd041
	void SetHomeActorValid(SolarHomeActor* TargetActor, bool bNewValid);// 0x4956312cd041
	void SetHoldingType(enum NewType);// 0x4955312cd041
	void SetDragUILoc(SolarHomeDragUI* TargetUI, out const Vector NewLoc);// 0x4954312cd041
	void SetCurSelectingThisID(out const FString InThisID, bool bSelected);// 0x4953312cd041
	void SetCurBuildingID(int NewItemID);// 0x4952312cd041
	void SelectHomeActor_Request(out const FString SelectedThisID, bool bSelect);// 0x4951312cd041
	void SelectHomeActor_Other(FString ThisID);// 0x4950312cd041
	void SaveBuilding_Request(bool bSave);// 0x494f312cd041
	void RotateHomeActor(SolarHomeActor* TargetHomeActor, int DeltaAngle);// 0x494e312cd041
	void RemoveHomeActors_Request(out const FString[] WillRemoveThisIDs);// 0x494d312cd041
	void RemoveHomeActor_Request(out const FString WillRemoveThisID);// 0x494c312cd041
	void RemoveAllHomeActors_Request();// 0x494b312cd041
	void OnSelectingThisIDChanged(bool bSelect, out const FString NewThisID);// 0x494a312cd041
	void OnSelectingActorCanSaveChanged(bool bNewCanSave);// 0x4949312cd041
	bool OnIsDragChanged(bool bIsDrag);// 0x4948312cd041
	void OnInvalidActorsCountChanged(int NewCount);// 0x4947312cd041
	void OnHoldingTypeChanged(enum OldType, enum NewType);// 0x4946312cd041
	void NotifyWhenWallDevicePutOnOtherPlace();// 0x4945312cd041
	void NotifyWhenFloorDevicePutOnOtherPlace();// 0x4944312cd041
	void NotifyWhenClickActorOnOtherFloor();// 0x4943312cd041
	void NotifyWhenCeilingDevicePutOnOtherPlace();// 0x4942312cd041
	void NotifyLoadingUIChanged(bool bShow);// 0x4941312cd041
	void MoveDevice(SolarHomeActor* TargetHomeActor, const SolarHomeActor* ParHomeActor, enum HitDir, out const Vector NewLoc);// 0x4940312cd041
	void MoveConstruct(SolarHomeActor* TargetHomeActor, SolarHomeBaseSpace* NewSpace);// 0x493f312cd041
	bool HasFoundation();// 0x493e312cd041
	DataTable* GetTextureDataTable();// 0x493d312cd041
	HomeActorStaticData GetStaticDataByItemID(int ItemID);// 0x493c312cd041
	SolarHomeShaderConfig* GetShaderConfig();// 0x493b312cd041
	void GetMeshDefaultMat(int64 InItemID, out BuildMeshSlotData[] outData);// 0x493a312cd041
	FString GetLastCreateThisID();// 0x4939312cd041
	int GetInvalidActorsCount();// 0x4938312cd041
	SolarHomeSpaceSpawner* GetHomeSpaceSpawner();// 0x4937312cd041
	SolarHomePlayerController* GetHomePlayerCtrl();// 0x4936312cd041
	bool GetHomePicConfig(FString Name, out HomePic OutConfig);// 0x4935312cd041
	bool GetHomeObjectConfig(int InItemID, out HomeObject OutConfig);// 0x4934312cd041
	bool GetHomeIconConfig(FString Name, out HomeIcon OutConfig);// 0x4933312cd041
	enum GetHomeActorSecondType(int ItemID);// 0x4932312cd041
	enum GetHomeActorFirstType(int ItemID);// 0x4931312cd041
	SolarHomeActor* GetHomeActorByThisID(out const FString InThisID);// 0x4930312cd041
	SolarHomeActor* GetHomeActorByLoc(out const Vector InLoc);// 0x492f312cd041
	FString GetCurSelectingThisID();// 0x492e312cd041
	enum GetCurHoldingItemType();// 0x492d312cd041
	int GetCurBuildingID();// 0x492c312cd041
	bool GetActorCanSave(SolarHomeActor* InActor);// 0x492b312cd041
	void ExportHomeActorDataToPath(FString FilePath);// 0x492a312cd041
	void DyeingHomeActor_Request(out const FString WillDyeingThisID, out const FString SlotName, out const FString TexturesID);// 0x4929312cd041
	void DeSelectAllHomeActors_Request();// 0x4928312cd041
	void CreateHomeActors_Request(out const HomeBuildReqData[] WillCreateDatas);// 0x4927312cd041
	void CreateHomeActor_Request(out const HomeBuildReqData WillCreateData);// 0x4926312cd041
	void ClientUpdateHomeActor_UseQueue(out const HomeActorServerData UpdateData);// 0x4925312cd041
	void ClientUpdateHomeActor(out const HomeActorServerData UpdateData);// 0x4924312cd041
	void ClientRemoveHomeActor_UseQueue(out const HomeActorServerData RemoveData);// 0x4923312cd041
	void ClientRemoveHomeActor(out const HomeActorServerData RemoveData);// 0x4922312cd041
	void ClientCreateHomeActor_UseQueue(out const HomeActorServerData WillCreateData, enum InLoadingType);// 0x4921312cd041
	bool ClientCreateHomeActor(out const HomeActorServerData WillCreateData, bool InIsConstruct);// 0x4920312cd041
	void Clear();// 0x491f312cd041
	void ChangeCameraLayer(int DeltaLayer);// 0x491e312cd041
	bool CanPreviewWithBuilding(int TypeID);// 0x491d312cd041
	bool CanDevicePlace(enum DeviceType, out const SolarHomeActor* HitConstruct, out const enum HitDir);// 0x491c312cd041

--------------------------------
Class: HomeBuildReqData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]
	BuildMeshSlotData[] MatDataArr;//[Offset: 0x20, Size: 0x10]
	FString ParentThisID;//[Offset: 0x30, Size: 0x10]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: BuildMeshSlotData
	FString SlotName;//[Offset: 0x0, Size: 0x10]
	FString TexturesID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SolarHomeActor.Actor.Object
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x228, Size: 0x8]
	HomeActorStaticData HomeActorStaticData;//[Offset: 0x230, Size: 0x38]
	HomeActorServerData HomeActorServerData;//[Offset: 0x268, Size: 0x68]
	<FName,HomeOriginalShader> OriginalShaders;//[Offset: 0x2d0, Size: 0x50]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x330, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x338, Size: 0x10]
	<SolarHomeActor*,int> HitHomeActors;//[Offset: 0x348, Size: 0x50]
	SolarHomeConnectedGraph* CurrentConnectedGraph;//[Offset: 0x398, Size: 0x8]
	SolarHomeActor*[] NeighborFloors;//[Offset: 0x3a0, Size: 0x10]
	SolarHomeActor*[] NeighborWalls;//[Offset: 0x3b0, Size: 0x10]
	void UpdateHomeActor(out const HomeActorServerData NewServerData);// 0x491b312cd041
	void UpdateHitHomeActors(SolarHomeActor* NewActor, bool isAdd);// 0x491a312cd041
	void SetStaticData(out const HomeActorStaticData NewData);// 0x4919312cd041
	void SetServerData(out const HomeActorServerData NewData);// 0x4918312cd041
	void SetMaterial(out const HomeActorServerData InServerData, bool bPlaceable);// 0x4917312cd041
	void OnOverlayEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4916312cd041
	void OnOverlayBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4915312cd041
	void OnOverLap(Actor* OtherActor, bool isHitBegin);// 0x4914312cd041
	void OnCreatedByServer(out const HomeActorStaticData NewStaticData, out const HomeActorServerData NewServerData);// 0x4913312cd041
	void OnCanSaveChanged(bool bNewCanSave);// 0x4912312cd041
	DataTable* GetTextureDataTable();// 0x4911312cd041
	StaticMeshComponent* GetStaticMeshComp();// 0x4910312cd041
	HomeActorStaticData GetStaticData();// 0x490f312cd041
	SolarHomeShaderConfig* GetShaderConfig();// 0x490e312cd041
	HomeActorServerData GetServerData();// 0x490d312cd041
	bool GetNextLegalRotator(float RotAngle, out Rotator OutNextRot);// 0x490c312cd041
	enum GetHitSurface(out const Vector HitNormal);// 0x490b312cd041
	bool GetCanSave();// 0x490a312cd041
	bool CanSelected();// 0x4909312cd041
	bool CanRemove();// 0x4908312cd041

--------------------------------
Class: HomeActorServerData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	FString ThisID;//[Offset: 0x8, Size: 0x10]
	enum Owner;//[Offset: 0x18, Size: 0x4]
	bool isPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool isDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	Vector CurLocation;//[Offset: 0x20, Size: 0xc]
	Rotator CurRotation;//[Offset: 0x2c, Size: 0xc]
	BuildMeshSlotData[] FacesMatData;//[Offset: 0x38, Size: 0x10]
	FString ParentObject;//[Offset: 0x48, Size: 0x10]
	FString[] ChildObjects;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: HomeActorStaticData
	int64 ItemID;//[Offset: 0x0, Size: 0x8]
	enum FirstType;//[Offset: 0x8, Size: 0x4]
	enum SecondType;//[Offset: 0xc, Size: 0x4]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	FString BpPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: HomeOriginalShader

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x558, Size: 0xc]
	float LineThickness;//[Offset: 0x564, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x5c47312cd041
	Vector GetUnscaledBoxExtent();// 0x5c46312cd041
	Vector GetScaledBoxExtent();// 0x5c45312cd041

--------------------------------
Class: SolarHomeConnectedGraph.Object
	<SolarHomeActor*> ConnectedFloors;//[Offset: 0x28, Size: 0x50]
	<SolarHomeActor*> BaseWalls;//[Offset: 0x78, Size: 0x50]

--------------------------------
Class: SolarHomeShaderConfig.DataAsset.Object
	SoftObjectPath EmissiveMatPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath MaskedMatPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath TranslucentMatPath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath DeleteEmissiveMatPath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath DeleteMaskedMatPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath DeleteTranslucentMatPath;//[Offset: 0xa8, Size: 0x18]
	LinearColor PrdinaryColor;//[Offset: 0xc0, Size: 0x10]
	LinearColor PlaceableColor;//[Offset: 0xd0, Size: 0x10]
	LinearColor UnPlaceableColor;//[Offset: 0xe0, Size: 0x10]
	LinearColor PlaceableColorOther;//[Offset: 0xf0, Size: 0x10]
	float BreathLightTimeScale;//[Offset: 0x100, Size: 0x4]
	float PlaceableEmissveA;//[Offset: 0x104, Size: 0x4]
	float UnPlaceableEmissveA;//[Offset: 0x108, Size: 0x4]

--------------------------------
Class: SolarHomeDragUI.Actor.Object

--------------------------------
Class: SolarHomeBaseSpace.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x228, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x230, Size: 0x10]
	BaseSpaceData BaseSpaceData;//[Offset: 0x240, Size: 0xc]
	void UpdateHomeSpaceByData(out const BaseSpaceData NewData);// 0x496f312cd041
	void ShowBaseSpace();// 0x496e312cd041
	void OnBaseSpaceUnOccupied();// 0x496d312cd041
	void OnBaseSpaceOccupied();// 0x496c312cd041
	void OnBaseSpaceCreated(int Layer, enum BaseSpaceType);// 0x496b312cd041
	void HideBaseSpace();// 0x496a312cd041
	BaseSpaceData GetData();// 0x4969312cd041

--------------------------------
Class: BaseSpaceData
	int Layer;//[Offset: 0x0, Size: 0x4]
	enum BaseSpaceType;//[Offset: 0x4, Size: 0x4]
	bool IsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: SolarHomeSpaceSpawner.SolarMapElementBase.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x298, Size: 0x8]
	<enum,class Object> TypeClassMap;//[Offset: 0x2a0, Size: 0x50]
	<float,int> LayerMap;//[Offset: 0x2f0, Size: 0x50]
	float FloorUnit;//[Offset: 0x360, Size: 0x4]
	float WallUnit;//[Offset: 0x364, Size: 0x4]
	float BaseUnit;//[Offset: 0x368, Size: 0x4]
	float RoundOnBase;//[Offset: 0x36c, Size: 0x4]
	float RoundOnFloor;//[Offset: 0x370, Size: 0x4]
	float ArrowOnBase;//[Offset: 0x374, Size: 0x4]
	float ArrowOnFloor;//[Offset: 0x378, Size: 0x4]
	float ArrowToWall;//[Offset: 0x37c, Size: 0x4]
	Transform[] BasisFloorsTransArr;//[Offset: 0x388, Size: 0x10]
	bool IsAirWallOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	void OpenAirWall();// 0x49a4312cd041
	void Init(int InBuildWidth, int InBuildHeight);// 0x49a3312cd041
	bool GetIsAirWallOpen();// 0x49a2312cd041
	void CloseAirWall();// 0x49a1312cd041

--------------------------------
Class: SolarHomePlayerController.SolarPlayerController.PlayerController.Controller.Actor.Object
	InputComponent* ConstructionInputComponent;//[Offset: 0xc20, Size: 0x8]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0xc28, Size: 0x8]
	SolarHomeActor* DragActor;//[Offset: 0xc30, Size: 0x8]
	float MinCheckDistance;//[Offset: 0xc38, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xc3c, Size: 0x4]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0xc40, Size: 0x8]
	bool bIsViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc48, Size: 0x1]
	bool bIsConstruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc49, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0xc50, Size: 0x8]
	float MoveCheckDis;//[Offset: 0xc58, Size: 0x4]
	float CheckDis;//[Offset: 0xdf0, Size: 0x4]
	SolarHomeCameraManager* CameraManager;//[Offset: 0xe80, Size: 0x8]
	Vector LookAtLocation;//[Offset: 0xe88, Size: 0xc]
	Vector OriginalLookAtLocation;//[Offset: 0xe94, Size: 0xc]
	Actor* CurrentViewTarget;//[Offset: 0xea0, Size: 0x8]
	Actor* OriginalViewTarget;//[Offset: 0xea8, Size: 0x8]
	void StopBuilding();// 0x49a0312cd041
	void StartFadeOutEffect();// 0x499f312cd041
	void StartBuilding();// 0x499e312cd041
	void SolarGM_Home_ResetLayer(int InLayer);// 0x499d312cd041
	void SolarGM_FillUpHome();// 0x499c312cd041
	void SolarGM_ExportHomeActorToPath(FString FilePath);// 0x499b312cd041
	void ShowBuildMainUI(bool bShow);// 0x499a312cd041
	void SetNormalCameraTarget();// 0x4999312cd041
	void SetConstructionCameraTarget();// 0x4998312cd041
	void SendMoveToBackend(out const ServerMoveData MoveData);// 0x4997312cd041
	void ResetConstructionCamera();// 0x4996312cd041
	void ResetCameraRotation();// 0x4995312cd041
	void OnTouchMove(int Index, out const Vector Location);// 0x4994312cd041
	void OnTouchEnd(int Index, out const Vector Location);// 0x4993312cd041
	void OnTouchBegin(int Index, out const Vector Location);// 0x4992312cd041
	void OnDragBegin(out const Vector Location);// 0x4991312cd041
	void OnCameraRight(const float Value);// 0x4990312cd041
	void OnCameraForward(const float Value);// 0x498f312cd041
	bool GetIsConstruction();// 0x498e312cd041
	int GetCameraCurrentLayer();// 0x498d312cd041
	void BindConstructionInput();// 0x498c312cd041
	void BindBattleInput();// 0x498b312cd041

--------------------------------
Class: ServerMoveData
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	int64 ServerTimeStamp;//[Offset: 0x8, Size: 0x8]
	Vector Acceleration;//[Offset: 0x10, Size: 0xc]
	Vector Velocity;//[Offset: 0x1c, Size: 0xc]
	Vector Loction;//[Offset: 0x28, Size: 0xc]
	byte CompressedMoveFlags;//[Offset: 0x34, Size: 0x1]
	byte RollByte;//[Offset: 0x35, Size: 0x1]
	uint32 YawPitchInt;//[Offset: 0x38, Size: 0x4]
	byte MovementMode;//[Offset: 0x3c, Size: 0x1]
	uint32 FullBodyAnimationState;//[Offset: 0x40, Size: 0x4]
	uint32 MontageAnimState;//[Offset: 0x44, Size: 0x4]
	byte JetPackFlag;//[Offset: 0x48, Size: 0x1]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]

--------------------------------
Class: SolarHomeCameraManager.ActorComponent.Object
	CameraMovementParameters CameraMovementSetting;//[Offset: 0xb8, Size: 0x68]
	Vector LookAtLocation;//[Offset: 0x134, Size: 0xc]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x140, Size: 0x8]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0x150, Size: 0x8]
	CameraActor* BuildCamera;//[Offset: 0x158, Size: 0x8]
	Actor* BattleCamera;//[Offset: 0x160, Size: 0x8]
	CameraComponent* BuildCameraComp;//[Offset: 0x168, Size: 0x8]
	void UpdateSliderScaleUI(float InScale);// 0x4987312cd041
	void UpdateCameraDistanceUI(float InPercent, float InScale);// 0x4986312cd041
	void SetNormalCameraTarget();// 0x4985312cd041
	void SetConstructionCameraTarget();// 0x4984312cd041
	void RotateCameraSpin(const float Value);// 0x4983312cd041
	void RotateCameraPitch(const float Value);// 0x4982312cd041
	void MoveCameraRight(const float Value);// 0x4981312cd041
	void MoveCameraForward(const float Value);// 0x4980312cd041
	void MoveCamera(int Index, out const Vector Location, const <int,Vector> FingerLocations);// 0x497f312cd041
	bool ChangeCameraMode(enum InMode);// 0x497e312cd041
	void ChangeCameraDistancePercent(bool IsDoubleFinger, float InPercent);// 0x497d312cd041
	void ChangeCameraDistanceDiff(bool IsDoubleFinger, float InValue);// 0x497c312cd041

--------------------------------
Class: CameraMovementParameters
	float OneFingerMoveScale;//[Offset: 0x0, Size: 0x4]
	float MouseMoveScale;//[Offset: 0x4, Size: 0x4]
	float OneFingerZoomScale;//[Offset: 0x8, Size: 0x4]
	float MouseZoomScale;//[Offset: 0xc, Size: 0x4]
	float DoubleFingerSpinScale;//[Offset: 0x10, Size: 0x4]
	float DoubleFingerPitchScale;//[Offset: 0x14, Size: 0x4]
	float MouseRotateScale;//[Offset: 0x18, Size: 0x4]
	float LookAtLocationHeigh;//[Offset: 0x1c, Size: 0x4]
	float MinPitch;//[Offset: 0x20, Size: 0x4]
	float MaxPitch;//[Offset: 0x24, Size: 0x4]
	float PanoramicDefaultPitch;//[Offset: 0x28, Size: 0x4]
	float homeCameraBoundary;//[Offset: 0x2c, Size: 0x4]
	CurveFloat* DistanceCurve;//[Offset: 0x30, Size: 0x8]
	float DefultTime;//[Offset: 0x38, Size: 0x4]
	CurveFloat* DistanceCurve_Orthographic;//[Offset: 0x40, Size: 0x8]
	float DefaultTime_Orthographic;//[Offset: 0x48, Size: 0x4]
	CurveFloat* LayerTransitionCurve;//[Offset: 0x50, Size: 0x8]
	CurveFloat* CeilingTransitionCurve;//[Offset: 0x58, Size: 0x8]
	CurveFloat* PanoramicTransitionCurve;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: HomePic.TableRowBase
	SoftObjectPath PicPath;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: HomeObject.TableRowBase
	FString HomeObjectDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath BpPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath PreviewBpPath;//[Offset: 0x30, Size: 0x18]
	BuildMeshSlotData[] DefaultMat;//[Offset: 0x48, Size: 0x10]
	bool IsFocusCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool IsDrawable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool IsRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool IsRotateHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	int RotateAngleSingle;//[Offset: 0x60, Size: 0x4]
	SoftObjectPath Build_SFPath;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath Remove_SFXPath;//[Offset: 0x80, Size: 0x18]
	float FRemove_SFXTime;//[Offset: 0x98, Size: 0x4]
	FString FSBuild_Audio;//[Offset: 0xa0, Size: 0x10]
	FString FSRemove_Audio;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: HomeIcon.TableRowBase
	SoftObjectPath NormalIconPath;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath SelectedIconPath;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: SubPoolOfHomeActor.Object
	SolarHomeActor*[] UseActors;//[Offset: 0x30, Size: 0x10]
	SolarHomeActor*[] UnUseActors;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SolarWaterActorNew.StaticMeshActor.Actor.Object
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x234, Size: 0x4]
	void OnExitWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x54d4312cd041
	void OnEnterWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x54d3312cd041
	float GetWaterLineHeight();// 0x54d2312cd041

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x228, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x231, Size: 0x1]
	void SetMobility(byte InMobility);// 0x46dc312cd041

--------------------------------
Class: HomeShaderData

--------------------------------
Class: SolarGameplayLogger.Object
	enum[] DefaultChannels;//[Offset: 0x28, Size: 0x10]
	void SolarDebugLog(enum Channel, FString Message);// 0x4898312cd041
	void EnableDebugLogChannel(enum Channel);// 0x4897312cd041
	void DisableDebugLogChannel(enum Channel);// 0x4896312cd041

--------------------------------
Class: SolarAttributeSubSystem.SolarGameManager.Object
	<int,SolarAttributeConfig> AttributeDefaultData;//[Offset: 0x38, Size: 0x50]
	<int,SolarAttributeSubModifierGroup*> GlobalModifiers;//[Offset: 0x88, Size: 0x50]
	float CharacterTakeDamage(SolarAttributeSubComponent* AttributeSubComp, out const float Damage);// 0x4500312cd041
	float CalcWeaponFireDamage(SolarAttributeSubComponent* AttributeSet, out const int ModeIdx);// 0x44ff312cd041

--------------------------------
Class: SolarAttributeConfig
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]
	float BaseValue;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarAttributeSubModifierGroup.Object

--------------------------------
Class: SolarAttributeSubComponent.ActorComponent.Object
	<int,SolarAttributeSubData*> AttributeSubs;//[Offset: 0xb0, Size: 0x50]
	SolarAttributeSubReplicateData[] AttributeSubRepData;//[Offset: 0x100, Size: 0x10]
	<int,float> ClientAttributeSubValues;//[Offset: 0x110, Size: 0x50]
	void RemoveModifier(int AttributeSubID, out const FName Name);// 0x44fd312cd041
	void OnRep_AttributeSubRepDatas();// 0x44fc312cd041
	void OnAttributeSubChanged();// 0x44fb312cd041
	float GetValue(int AttributeSubID);// 0x44fa312cd041
	SolarAttributeSubSystem* GetAttributeSubSystem();// 0x44f9312cd041
	SolarAttributeSubComponent* GetAttributeSubComponentFromActor(Actor* InActor);// 0x44f8312cd041
	int AddModifier(int AttributeSubID, byte InOpType, float Magnitude, out const FName Name);// 0x44f7312cd041

--------------------------------
Class: SolarAttributeSubData.Object
	SolarAttributeSubModifierGroup* LocalModifier;//[Offset: 0x28, Size: 0x8]
	SolarAttributeSubModifierGroup* GlobalModifier;//[Offset: 0x30, Size: 0x8]
	int AttributeID;//[Offset: 0x50, Size: 0x4]
	float CurrentValue;//[Offset: 0x54, Size: 0x4]
	float MaxValue;//[Offset: 0x58, Size: 0x4]
	float MinValue;//[Offset: 0x5c, Size: 0x4]
	float BaseValue;//[Offset: 0x60, Size: 0x4]
	void OnModifierChanged();// 0x44fe312cd041

--------------------------------
Class: SolarAttributeSubReplicateData
	int AttributeID;//[Offset: 0x0, Size: 0x4]
	float AttributeValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SCustomizedGameModeManager.Object
	SolarGameMode_JobManager* JobManager;//[Offset: 0x30, Size: 0x8]
	SolarGameMode_DataManager* DataManager;//[Offset: 0x38, Size: 0x8]
	SolarGameMode_PlayerManager* PlayerManager;//[Offset: 0x40, Size: 0x8]
	SolarGameMode_CharacterManager* CharacterManager;//[Offset: 0x48, Size: 0x8]
	SolarGameMode_LevelManager* LevelManager;//[Offset: 0x50, Size: 0x8]
	SolarGameMode_ElementManager* ElementManager;//[Offset: 0x58, Size: 0x8]
	SolarGameMode_EffectJobManager* EffectJobManager;//[Offset: 0x60, Size: 0x8]
	SCustomizedMode_AttributeManager* AttributeManager;//[Offset: 0x68, Size: 0x8]
	SolarGameModeData* GameModeData;//[Offset: 0x70, Size: 0x8]
	void InitModeById(int ModeID);// 0x435e312cd041

--------------------------------
Class: SolarGameMode_JobManager.Object
	<FString,GameMode_SideData*> SideList;//[Offset: 0x38, Size: 0x50]
	SCustomizedGameMode* CurrentGameMode;//[Offset: 0x88, Size: 0x8]
	DataTable* CurrentModeJobData;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: GameMode_SideData.Object
	<FString,GameMode_JobData*> JobList;//[Offset: 0x28, Size: 0x50]
	SGameMode_Player*[] PlayerList;//[Offset: 0x78, Size: 0x10]
	FString Name;//[Offset: 0x88, Size: 0x10]
	int SideIndex;//[Offset: 0x98, Size: 0x4]
	int MatchCount;//[Offset: 0x9c, Size: 0x4]

--------------------------------
Class: GameMode_JobData.Object
	SGameMode_Player*[] PlayerList;//[Offset: 0x28, Size: 0x10]
	FString Name;//[Offset: 0x38, Size: 0x10]
	FString[] Tags;//[Offset: 0x48, Size: 0x10]
	GameMode_JobManagerRow JobData;//[Offset: 0x58, Size: 0x120]
	int MatchCount;//[Offset: 0x178, Size: 0x4]

--------------------------------
Class: SGameMode_Player.Object
	Controller* Controller;//[Offset: 0x28, Size: 0x8]
	int PlayerId;//[Offset: 0x30, Size: 0x4]
	FString SolarPlayerId;//[Offset: 0x38, Size: 0x10]
	byte SolarTeamId;//[Offset: 0x48, Size: 0x1]
	byte PosInTeam;//[Offset: 0x49, Size: 0x1]
	int Gender;//[Offset: 0x4c, Size: 0x4]
	int AvatarID;//[Offset: 0x50, Size: 0x4]
	FString SideName;//[Offset: 0x58, Size: 0x10]
	FString JobName;//[Offset: 0x68, Size: 0x10]
	FString SolarNickName;//[Offset: 0x78, Size: 0x10]
	FString OS;//[Offset: 0x88, Size: 0x10]
	int UserId;//[Offset: 0x98, Size: 0x4]
	bool bIsAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	enum PlayerState;//[Offset: 0x9d, Size: 0x1]
	void OnRep_PlayerController();// 0x4887312cd041
	SolarPlayerState* GetBindedPlayerState();// 0x4886312cd041
	Pawn* GetBindedPawn();// 0x4885312cd041
	SolarCharacter* GetBindedCharacter();// 0x4884312cd041
	void ClientShowUI(FString WidgetPath, FString UIName);// 0x4883312cd041
	void ClientCloseUI(FString UIName);// 0x4882312cd041
	void BindNewCharacter(SolarCharacter* NewCharacter);// 0x4881312cd041

--------------------------------
Class: GameMode_JobManagerRow.TableRowBase
	FString Name;//[Offset: 0x8, Size: 0x10]
	FString Desc;//[Offset: 0x18, Size: 0x10]
	int count;//[Offset: 0x28, Size: 0x4]
	int MatchCount;//[Offset: 0x2c, Size: 0x4]
	FString Side;//[Offset: 0x30, Size: 0x10]
	FString Job;//[Offset: 0x40, Size: 0x10]
	FString[] Tag;//[Offset: 0x50, Size: 0x10]
	SoftObjectPath BP_Join;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath BP_Deploy;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath BP_Slay;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath BP_Assist;//[Offset: 0xa8, Size: 0x18]
	SoftObjectPath BP_Die;//[Offset: 0xc0, Size: 0x18]
	SoftObjectPath BP_Hit;//[Offset: 0xd8, Size: 0x18]
	SoftObjectPath BP_GetHit;//[Offset: 0xf0, Size: 0x18]
	SoftObjectPath BP_ControllerLogic;//[Offset: 0x108, Size: 0x18]

--------------------------------
Class: SCustomizedGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	SolarGameMode_LogicComponent* ModeLogicComponent;//[Offset: 0x4d8, Size: 0x8]
	SolarGameMode_RewardComponent* ModeRewardComponent;//[Offset: 0x4e0, Size: 0x8]
	SCustomizedGameModeManager* CustomModeManager;//[Offset: 0x4e8, Size: 0x8]
	SolarGameMode_DataManager* CustomModeDataManager;//[Offset: 0x4f0, Size: 0x8]
	void OnReceivePlayerLogin(PlayerController* PlayerController);// 0x435c312cd041
	void OnReceiveBattleStart(PlayerController* PlayerController);// 0x435b312cd041

--------------------------------
Class: SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnPlayerDisconnectedGame;//[Offset: 0x4a8, Size: 0x10]
	delegate OnPlayerReconnectedGame;//[Offset: 0x4b8, Size: 0x10]
	int SettlementStageConfigID;//[Offset: 0x4d0, Size: 0x4]
	void SettlePlayerBattleData(SolarPlayerState* Player);// 0x225f312cd041
	void ReceiveBattleSettlement();// 0x225e312cd041
	void ReceiveBattleOver();// 0x225d312cd041
	void OnPlayerLeaveDSTimeOut(SolarPlayerState* PlayerState);// 0x225c312cd041
	bool IsAutoSettlementWhenKilled();// 0x225b312cd041
	bool IsAllowReconnectGame(SolarPlayerState* Player);// 0x225a312cd041

--------------------------------
Class: SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate PreStartPlay;//[Offset: 0x310, Size: 0x10]
	delegate CalledStartPlay;//[Offset: 0x320, Size: 0x10]
	delegate PostStartPlay;//[Offset: 0x330, Size: 0x10]
	delegate PreHandleMatchHasStarted;//[Offset: 0x340, Size: 0x10]
	delegate CalledHandleMatchHasStarted;//[Offset: 0x350, Size: 0x10]
	delegate PostHandleMatchHasStarted;//[Offset: 0x360, Size: 0x10]
	delegate PreRestartPlayer;//[Offset: 0x370, Size: 0x10]
	delegate CalledRestartPlayer;//[Offset: 0x380, Size: 0x10]
	delegate PostRestartPlayer;//[Offset: 0x390, Size: 0x10]
	delegate PreEndPlay;//[Offset: 0x3a0, Size: 0x10]
	delegate CalledEndPlay;//[Offset: 0x3b0, Size: 0x10]
	delegate PostEndPlay;//[Offset: 0x3c0, Size: 0x10]
	GameModeCompBase*[] GameModeComponents;//[Offset: 0x3d0, Size: 0x10]
	int GamePlayMode;//[Offset: 0x3e4, Size: 0x4]
	class Actor[] ManagerClasses;//[Offset: 0x3e8, Size: 0x10]
	FString CharacterClassPath;//[Offset: 0x3f8, Size: 0x10]
	int CharacterIdInTrainningCourse;//[Offset: 0x408, Size: 0x4]
	int SkinIdInTrainningCourse;//[Offset: 0x40c, Size: 0x4]
	int BagIdInTrainingCourse;//[Offset: 0x410, Size: 0x4]
	bool bManuallyModifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	int SpecifiedCharacterSkinID;//[Offset: 0x418, Size: 0x4]
	bool bManuallyModifyCharacterBagId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	int SpecifiedCharacterBagID;//[Offset: 0x420, Size: 0x4]
	bool bManuallyModifyCharacterBagTrailId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	int SpecifiedCharacterBagTrailID;//[Offset: 0x428, Size: 0x4]
	delegate OnPostSpawnDefaultSolarCharacterAtTransform;//[Offset: 0x430, Size: 0x10]
	SolarGameModeAIComponent* AIMgrComponent;//[Offset: 0x440, Size: 0x8]
	SolarGameModeStatisticsComponent* StatComponent;//[Offset: 0x448, Size: 0x8]
	void UpdatePlayerDataForBotAI(int AIConfigID, SolarPlayerState* PlayerState);// 0x1f8b312cd041
	void UpdatePlayerData(int CharacterSkinID, int CharacterBagID, int CharacterBagTrailID, SolarPlayerState* PlayerState);// 0x1f8a312cd041
	void UpdateBotPlayerData(SolarPlayerState* PlayerState);// 0x1f89312cd041
	void UpdateBackpackData(FString PlayerId, int Grade, int NewUnLockNum);// 0x1f88312cd041
	FString TryKickOutOnlinePlayer(FString PlayerId, const bool IsAllowReconnect);// 0x1f87312cd041
	void SetGamePlayMode(int InGamePlayMode);// 0x1f86312cd041
	void SendHitMsgWithBool(SolarCharacterBase* HitedPlayer, out const interface class_                                                                                                    PC, enum MsgType, float Damage, bool bo);// 0x1f85312cd041
	void SendHitMsg(SolarCharacterBase* HitedPlayer, out const interface class_                                                                                                    PC, enum MsgType, float Damage, FString Params);// 0x1f84312cd041
	void RestartPlayerTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x1f83312cd041
	void RestartPlayerEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x1f82312cd041
	void PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature(SolarPlayerState* NewPlayer, SolarCharacter* NewCharacter);// 0x1f81312cd041
	void OnStartBattleresponded();// 0x1f80312cd041
	bool OnPlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x1f7f312cd041
	void NotifyItemStateChanged(const Actor* Item, const int State);// 0x1f7e312cd041
	void KickOutPlayerToLobby(FString InPlayerID);// 0x1f7d312cd041
	void KickOutAllPlayerToLobby();// 0x1f7c312cd041
	void InitCharacterClassPath(int CharacterId);// 0x1f7b312cd041
	int[] GetRandomAISkinID(const SolarPlayerState* InPS);// 0x1f7a312cd041
	int GetGamePlayMode();// 0x1f79312cd041
	GameModeGlobalSetting* GetGameModeSetting(const Object* WorldContextObject);// 0x1f78312cd041
	int GetBotAINumber();// 0x1f77312cd041
	void GameModeComponentTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x1f76312cd041
	void GameModeComponentEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection);// 0x1f75312cd041
	void EndPlayTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x1f74312cd041
	void EndPlayEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x1f73312cd041

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c8, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	int NumSpectators;//[Offset: 0x2d4, Size: 0x4]
	int NumPlayers;//[Offset: 0x2d8, Size: 0x4]
	int NumBots;//[Offset: 0x2dc, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x2e0, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x2e4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e8, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2f0, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x300, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x304, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	void StartMatch();// 0x1f72312cd041
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x1f71312cd041
	void Say(FString Msg);// 0x1f70312cd041
	void RestartGame();// 0x1f6f312cd041
	bool ReadyToStartMatch();// 0x1f6e312cd041
	bool ReadyToEndMatch();// 0x1f6d312cd041
	void K2_OnSetMatchState(FName NewState);// 0x1f6c312cd041
	bool IsMatchInProgress();// 0x1f6b312cd041
	bool HasMatchEnded();// 0x1f6a312cd041
	FName GetMatchState();// 0x1f69312cd041
	void EndMatch();// 0x1f68312cd041
	void AbortMatch();// 0x1f67312cd041

--------------------------------
Class: GameModeCompBase.ActorComponent.Object
	bool bPreStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bTakeChargeStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bPostStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	bool bPreHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]
	bool bTakeChargeHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 0x1]
	bool bPostHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf, Size: 0x1]
	bool bPreRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bTakeChargeRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]
	bool bPostRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bPreEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 0x1]
	bool bTakeChargeEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bPostEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	void PreStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x3cd3312cd041
	void PreRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x3cd2312cd041
	void PreHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x3cd1312cd041
	void PreGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x3cd0312cd041
	void PreGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x3ccf312cd041
	void PreGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x3cce312cd041
	void PreGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x3ccd312cd041
	void PreEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x3ccc312cd041
	void PostStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x3ccb312cd041
	void PostRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x3cca312cd041
	void PostHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x3cc9312cd041
	void PostGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x3cc8312cd041
	void PostGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x3cc7312cd041
	void PostGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x3cc6312cd041
	void PostGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x3cc5312cd041
	void PostEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x3cc4312cd041
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x3cc3312cd041
	void OnGameModeRestartPlayer(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x3cc2312cd041
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x3cc1312cd041
	void OnGameModeEndPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x3cc0312cd041
	SolarGameMode* GetGameModeOwner();// 0x3cbf312cd041

--------------------------------
Class: SolarGameMode_LogicComponent.ActorComponent.Object
	void OnPlayerQuit(SGameMode_Player* QuitPlayer);// 0x47b1312cd041
	void OnPlayerPlacedFinished(SGameMode_Player* Player, FString LevelName);// 0x47b0312cd041
	void OnPlayerOfflineTimeOut(SGameMode_Player* OfflineTimeoutPlayer);// 0x47af312cd041
	void OnPlayerLevelLoaded(SGameMode_Player* Player, FString LevelName);// 0x47ae312cd041
	void OnPlayerJoin(SGameMode_Player* NewPlayer);// 0x47ad312cd041
	void OnPlayerJobChange(SGameMode_Player* Player, FString OldSide, FString OldJob, FString NewSide, FString NewJob);// 0x47ac312cd041
	void OnOpenSupplement();// 0x47ab312cd041
	void OnMatchEnd(const int RPCID);// 0x47aa312cd041
	void OnGameModeInit();// 0x47a9312cd041
	void OnCloseSupplement();// 0x47a8312cd041
	void OnBotAIDataReady();// 0x47a7312cd041
	void OnBattleTick(float BattleTime);// 0x47a6312cd041
	void OnBattleBegin();// 0x47a5312cd041

--------------------------------
Class: SolarGameMode_RewardComponent.ActorComponent.Object
	void OnPlayerOut(SGameMode_Player* Player, enum PlayerOutType);// 0x47b3312cd041
	void ClientOnPlayerOut(SGameMode_Player* Player, enum PlayerOutType);// 0x47b2312cd041

--------------------------------
Class: SolarGameMode_DataManager.Object
	<enum,SolarGameMode_DataAccessorBase*> Accessors;//[Offset: 0x40, Size: 0x50]
	SolarGameMode_JobManager* JobManager;//[Offset: 0x98, Size: 0x8]
	SCustomizedGameMode* CurrentGameMode;//[Offset: 0xa0, Size: 0x8]
	SCustomizedMode_ModeDataReady* ModeDataReadyAction;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: SolarGameMode_DataAccessorBase.Object
	SolarGameMode_RankManager* RankManager;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: SolarGameMode_RankManager.Object
	SolarGameMode_RankData[] NewRanking;//[Offset: 0x30, Size: 0x10]
	SolarGameMode_RankData[] OldRanking;//[Offset: 0x40, Size: 0x10]
	<FString,SolarGameMode_RankDataMap> RankObjectList;//[Offset: 0x50, Size: 0x50]
	void RemoveRangeEvent(FString RankDataName);// 0x47bc312cd041
	void BindEvent(FString RankDataName, delegate Delegate);// 0x47bb312cd041

--------------------------------
Class: SolarGameMode_RankData
	Object* HostObject;//[Offset: 0x0, Size: 0x8]
	int RankingNumber;//[Offset: 0x8, Size: 0x4]
	int IntValue;//[Offset: 0xc, Size: 0x4]
	float FloatValue;//[Offset: 0x10, Size: 0x4]
	FString RankDataName;//[Offset: 0x18, Size: 0x10]
	FString ValueName;//[Offset: 0x28, Size: 0x10]
	enum DataType;//[Offset: 0x38, Size: 0x1]
	enum HostType;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: SolarGameMode_RankDataMap
	enum RankDataType;//[Offset: 0x0, Size: 0x1]
	SolarGameMode_RankData[] CurrentRanking;//[Offset: 0x8, Size: 0x10]
	<Object*,SolarGameMode_RankData> RankDatas;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: SCustomizedMode_ModeDataReady.BlueprintAsyncActionBase.Object
	delegate OnModeDataReadyComplete;//[Offset: 0x38, Size: 0x10]
	void HandleModeDataReadyComplete();// 0x436d312cd041
	SCustomizedMode_ModeDataReady* BindModeDataReady(Object* WorldContextObject);// 0x436c312cd041

--------------------------------
Class: SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	class SolarBotAIController* BotAIControllerClass;//[Offset: 0xd0, Size: 0x8]
	class SolarAIControllerBase* OfflinePlayerAIControllerClass;//[Offset: 0xd8, Size: 0x8]
	SolarGameMode* GameModeOwner;//[Offset: 0xe0, Size: 0x8]
	bool bEnableIrisAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bEnableMLSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	bool bPreserveBotOnMatchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	bool bEnableWarmClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]
	class SolarBotAITeamManager* BotTeamManagerClass;//[Offset: 0xf0, Size: 0x8]
	int MaxNumPreservedBots;//[Offset: 0xf8, Size: 0x4]
	float MaxRatioPreservedBots;//[Offset: 0xfc, Size: 0x4]
	SolarBotAITeamManager* BotTeamManager;//[Offset: 0x110, Size: 0x8]
	bool bCanBotTeamRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bCanPlayerTeamRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	bool bCanBotTeamBuyRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]
	bool bCanPlayerTeamBuyRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1]
	bool PreserveBot(SolarBotAIController* InBotController, out const Vector InPreservedLocation);// 0x3d75312cd041
	bool PopPreservedBot(out SolarBotAIController* OutController, out const Vector OutTeleportLocation, SolarBotAIController* InSpecificController);// 0x3d74312cd041
	void OnPlayerRequestWarmBot(SolarPlayerController* Player);// 0x3d73312cd041
	void OnAcquiredIrisAIFeedStrategy(out const FeedBotStrategyInfo[] StrategyInfos);// 0x3d72312cd041
	void GetDeathBoxExtraStuff(SolarPlayerState* BotState, SolarPlayerState* PlayerState, out <int,int> Stuff);// 0x3d71312cd041

--------------------------------
Class: SolarBotAIController.SolarAIControllerBase.AIController.Controller.Actor.Object
	SolarBotLootComponent* BotLootComponent;//[Offset: 0x380, Size: 0x8]
	SolarPerceptionComponent* BotPerceptionComponent;//[Offset: 0x388, Size: 0x8]
	NavAgentProperties VehicleAgentProperties;//[Offset: 0x390, Size: 0x30]
	int UniqueSpawnerID;//[Offset: 0x3c0, Size: 0x4]
	GameplayTag BattleSubTreeTag;//[Offset: 0x3c4, Size: 0x8]
	int DefaultDifficultyLevel;//[Offset: 0x3cc, Size: 0x4]
	int CurrentDifficultyLevel;//[Offset: 0x3d0, Size: 0x4]
	float CharacterLookAtInterpSpeed;//[Offset: 0x3d4, Size: 0x4]
	float MinSpecVehicleDeltaPitch;//[Offset: 0x3d8, Size: 0x4]
	bool bInitDefaultWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 0x1]
	int BotDefaultWeaponId;//[Offset: 0x3e0, Size: 0x4]
	bool bPreventFatalDamageToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 0x1]
	bool bAimBoneWhenFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5, Size: 0x1]
	FName FireTargetBoneName;//[Offset: 0x3e8, Size: 0x8]
	BotFireConfig DefaultFireConfig;//[Offset: 0x3f0, Size: 0x10]
	BotFireConfig FireConfigToBot;//[Offset: 0x400, Size: 0x10]
	BotFireConfig VehicleFireConfig;//[Offset: 0x410, Size: 0x10]
	BotFireConfig VehicleFireConfigToBot;//[Offset: 0x420, Size: 0x10]
	float DamageFactorToVehicle;//[Offset: 0x430, Size: 0x4]
	float DamageFactorToBotVehicle;//[Offset: 0x434, Size: 0x4]
	float DamageFactorToSummonItem;//[Offset: 0x438, Size: 0x4]
	float DamageFactorToBotSummonItem;//[Offset: 0x43c, Size: 0x4]
	float BotAIAttackRange;//[Offset: 0x440, Size: 0x4]
	float BotAIAttackRangeUnArm;//[Offset: 0x444, Size: 0x4]
	bool bSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	BotBonusDropConfig BonusDropConfig;//[Offset: 0x44c, Size: 0x18]
	float MinimumDistanceForRepeatedBoarding;//[Offset: 0x464, Size: 0x4]
	enum BotAIType;//[Offset: 0x468, Size: 0x1]
	int BotFeature;//[Offset: 0x46c, Size: 0x4]
	Vector2D MovementVector;//[Offset: 0x470, Size: 0x8]
	class NavigationQueryFilter* BPDefaultNavigationFilterClass;//[Offset: 0x478, Size: 0x8]
	<GameplayTag,BehaviorTree*> SubTreeMap;//[Offset: 0x4b0, Size: 0x50]
	Actor* AITarget;//[Offset: 0x538, Size: 0x8]
	SolarBotShootSimulater* ShootSimulater;//[Offset: 0x540, Size: 0x8]
	bool bEnableShootSimulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	SolarBotShootConfig DefaultShootConfig;//[Offset: 0x54c, Size: 0x58]
	SolarWarmTargetComponent* WarmTargetComponent;//[Offset: 0x608, Size: 0x8]
	delegate OnBotAIDeath;//[Offset: 0x610, Size: 0x10]
	SolarCharacter* PossessedCharacer;//[Offset: 0x62c, Size: 0x8]
	SolarFollowingComponent* PathFollowingComp;//[Offset: 0x638, Size: 0x8]
	NgaiAIControllerComponent* NgaiComponent;//[Offset: 0x648, Size: 0x8]
	void UpdateDynamicSubtree();// 0x4557312cd041
	void UpdateCharacterRotate(float DeltaTime);// 0x4556312cd041
	void StopBehaviorTree();// 0x4555312cd041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x4554312cd041
	bool SetupBotAITargetSelectConfig();// 0x4553312cd041
	bool SetupBotAIDifficulty(int DifficultyLevel, bool bAsDefault);// 0x4552312cd041
	bool SetupBotAICanUseCharacterData(int CharacterId, int SkinId);// 0x4551312cd041
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x4550312cd041
	void OnReset();// 0x454f312cd041
	void OnEnterLanding();// 0x454e312cd041
	bool IsTeamLeader();// 0x454d312cd041
	bool IsInPlayerTeam();// 0x454c312cd041
	bool IsIndependent();// 0x454b312cd041
	bool IsAccompanyingPlayer();// 0x454a312cd041
	void InitBotAIConfig();// 0x4549312cd041
	SolarCharacter* GetSolarCharacter();// 0x4548312cd041
	byte GetMyTeamID();// 0x4547312cd041
	bool CanActivateVehicleAbility(int SeatIndex, int AbilityIndex);// 0x4546312cd041
	float CalculateScoreForAITarget(const Actor* AITargetActor);// 0x4545312cd041

--------------------------------
Class: SolarAIControllerBase.AIController.Controller.Actor.Object
	BehaviorTree* BehaviorTree;//[Offset: 0x350, Size: 0x8]
	AISenseConfig_Sight* SightConfig;//[Offset: 0x358, Size: 0x8]
	AISenseConfig_Damage* DamageSenseConfig;//[Offset: 0x360, Size: 0x8]
	int aiCharacterID;//[Offset: 0x368, Size: 0x4]
	void DestroyCharacterCorpse();// 0x4450312cd041

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f0, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f0, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f0, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2f8, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x300, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x308, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x310, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x318, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x320, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x328, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x330, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x444f312cd041
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x444e312cd041
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x444d312cd041
	void SetMoveBlockDetection(bool bEnable);// 0x444c312cd041
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x444b312cd041
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x444a312cd041
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x4449312cd041
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4448312cd041
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4447312cd041
	void K2_SetFocus(Actor* NewFocus);// 0x4446312cd041
	void K2_SetFocalPoint(Vector FP);// 0x4445312cd041
	void K2_ClearFocus();// 0x4444312cd041
	bool HasPartialPath();// 0x4443312cd041
	PathFollowingComponent* GetPathFollowingComponent();// 0x4442312cd041
	byte GetMoveStatus();// 0x4441312cd041
	Vector GetImmediateMoveDestination();// 0x4440312cd041
	Actor* GetFocusActor();// 0x443f312cd041
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x443e312cd041
	Vector GetFocalPoint();// 0x443d312cd041
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x443c312cd041
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x443b312cd041

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x637a312cd041
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x6379312cd041
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x6378312cd041
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x6377312cd041
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x6376312cd041
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x6375312cd041
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x6374312cd041
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x6373312cd041
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x6372312cd041
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x6371312cd041
	bool IsVectorValueSet(out const FName KeyName);// 0x6370312cd041
	Vector GetValueAsVector(out const FName KeyName);// 0x636f312cd041
	FString GetValueAsString(out const FName KeyName);// 0x636e312cd041
	Rotator GetValueAsRotator(out const FName KeyName);// 0x636d312cd041
	Object* GetValueAsObject(out const FName KeyName);// 0x636c312cd041
	FName GetValueAsName(out const FName KeyName);// 0x636b312cd041
	int GetValueAsInt(out const FName KeyName);// 0x636a312cd041
	float GetValueAsFloat(out const FName KeyName);// 0x6369312cd041
	byte GetValueAsEnum(out const FName KeyName);// 0x6368312cd041
	class Object GetValueAsClass(out const FName KeyName);// 0x6367312cd041
	bool GetValueAsBool(out const FName KeyName);// 0x6366312cd041
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x6365312cd041
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x6364312cd041
	void ClearValue(out const FName KeyName);// 0x6363312cd041

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8]
	void StopLogic(FString Reason);// 0x635e312cd041
	void StartLogic();// 0x635d312cd041
	void RestartLogic();// 0x635c312cd041
	bool IsRunning();// 0x635b312cd041
	bool IsPaused();// 0x635a312cd041

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4]
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8]
	float SightRadius;//[Offset: 0x50, Size: 0x4]
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4]
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4]
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4]
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8]
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4]
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4]
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4]
	void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x634a312cd041
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x6349312cd041
	bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x6348312cd041
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x6347312cd041
	class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x6346312cd041

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9b, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8]
	void AILoggingVerbose();// 0x6357312cd041
	void AIIgnorePlayers();// 0x6356312cd041

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x130, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x268, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x6361312cd041
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x6360312cd041
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CoolDownDuration, bool bAddToExistingDuration);// 0x635f312cd041

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8]
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x63b8312cd041

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] options;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4]
	byte TestPurpose;//[Offset: 0x30, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x2a77312cd041
	Vector[] GetResultsAsLocations();// 0x2a76312cd041
	Actor*[] GetResultsAsActors();// 0x2a75312cd041
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x2a74312cd041
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x2a73312cd041
	float GetItemScore(int ItemIndex);// 0x2a72312cd041
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x2a70312cd041

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x6334312cd041

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x63bf312cd041
	void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x63be312cd041
	bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x63bd312cd041
	int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x63bc312cd041
	int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x63bb312cd041
	int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x63ba312cd041
	int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x63b9312cd041

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]
	void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation);// 0x6352312cd041

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Vector HitLocation;//[Offset: 0x10, Size: 0xc]
	Actor* DamagedActor;//[Offset: 0x20, Size: 0x8]
	Actor* Instigator;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SolarBotLootComponent.ActorComponent.Object
	GameplayTag LootSubTreeTag;//[Offset: 0xb0, Size: 0x8]
	float MoveCostFactor;//[Offset: 0xb8, Size: 0x4]
	float DistSelfToSpawnerFactor;//[Offset: 0xbc, Size: 0x4]
	float DistSpawnerOffsetFactor;//[Offset: 0xc0, Size: 0x4]
	float AvgDistSpawnerToTeammatesFactor;//[Offset: 0xc4, Size: 0x4]
	float AssualtRifleBaseValue;//[Offset: 0xc8, Size: 0x4]
	float ShotgunBaseValue;//[Offset: 0xcc, Size: 0x4]
	float SubmachinegunBaseValue;//[Offset: 0xd0, Size: 0x4]
	float SniperBaseValue;//[Offset: 0xd4, Size: 0x4]
	float WeaponQualityValue;//[Offset: 0xd8, Size: 0x4]
	float AmmoBaseValue;//[Offset: 0xdc, Size: 0x4]
	float AmmoMatchFactor;//[Offset: 0xe0, Size: 0x4]
	float ShieldBaseValue;//[Offset: 0xe4, Size: 0x4]
	float ShieldQualityValue;//[Offset: 0xe8, Size: 0x4]
	float JetpackModuleBaseValue;//[Offset: 0xec, Size: 0x4]
	float JetpackModuleQualityValue;//[Offset: 0xf0, Size: 0x4]
	float MedkitBaseValue;//[Offset: 0xf4, Size: 0x4]
	float MedkitHPRatioFactor;//[Offset: 0xf8, Size: 0x4]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x100, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x476b312cd041
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x476a312cd041
	Vector GetPathDestination();// 0x4769312cd041
	byte GetPathActionType();// 0x4768312cd041

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x230, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x238, Size: 0x78]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b0, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b0, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2b1, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2b4, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2b8, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3a0, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x4b85312cd041
	void RequestStimuliListenerUpdate();// 0x4b84312cd041
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x4b83312cd041
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x4b82312cd041
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4b81312cd041
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4b80312cd041
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4b7f312cd041
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x4b7e312cd041
	void ForgetAll();// 0x4b7d312cd041

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x63cb312cd041
	bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x63ca312cd041
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x63c9312cd041
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x63c8312cd041

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x63c2312cd041
	void Finish(byte WithResult);// 0x63c1312cd041
	PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x63c0312cd041

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	float ThreatUpdateInterval;//[Offset: 0x180, Size: 0x4]
	float AttackTriggerThreshold;//[Offset: 0x184, Size: 0x4]
	float CancelAttackTriggerThreshold;//[Offset: 0x188, Size: 0x4]
	float DistanceThreshold;//[Offset: 0x18c, Size: 0x4]
	float DistanceThresholdInSmoke;//[Offset: 0x190, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x194, Size: 0x4]
	float SwitchTargetDifferenceValue;//[Offset: 0x198, Size: 0x4]
	float SightIncreaseBase;//[Offset: 0x19c, Size: 0x4]
	float SightIncreaseDistanceFactor;//[Offset: 0x1a0, Size: 0x4]
	float SightDecreaseBase;//[Offset: 0x1a4, Size: 0x4]
	float SightDecreaseDistanceFactor;//[Offset: 0x1a8, Size: 0x4]
	float SightDecreaseMax;//[Offset: 0x1ac, Size: 0x4]
	float SightMaxValue;//[Offset: 0x1b0, Size: 0x4]
	float HearingAddBase;//[Offset: 0x1b4, Size: 0x4]
	float HearingAddDistanceFactor;//[Offset: 0x1b8, Size: 0x4]
	float HearingDecreasePerTick;//[Offset: 0x1bc, Size: 0x4]
	float HearingMaxValue;//[Offset: 0x1c0, Size: 0x4]
	float HitSoundAlertRange;//[Offset: 0x1c4, Size: 0x4]
	float BotThreatFactor;//[Offset: 0x1c8, Size: 0x4]
	float PlayerThreatFactor;//[Offset: 0x1cc, Size: 0x4]
	float DeathVergeFactor;//[Offset: 0x1d0, Size: 0x4]
	float MassInvisibilityPrepareFactor;//[Offset: 0x1d4, Size: 0x4]
	float MaxDistanceThreatFactor;//[Offset: 0x1d8, Size: 0x4]
	float DistanceThreatFactorDecayRate;//[Offset: 0x1dc, Size: 0x4]
	float AccompanyThreatMaxValue;//[Offset: 0x1e0, Size: 0x4]
	float AccompanyThreatAddBase;//[Offset: 0x1e4, Size: 0x4]
	float AccompanyDecreasePerTick;//[Offset: 0x1e8, Size: 0x4]
	<enum,class Actor> ConfigAreaTypeIdentifyMap;//[Offset: 0x1f0, Size: 0x50]
	PerceivableEAInfluenceConfig EffectAreasInfluenceConfig;//[Offset: 0x240, Size: 0x60]
	float MaxInfluenceRadius;//[Offset: 0x2a0, Size: 0x4]
	float SmokeGrenadeAffectRadius;//[Offset: 0x2a4, Size: 0x4]
	float EnergyBubbleAffectRadius;//[Offset: 0x2a8, Size: 0x4]
	float SummonWallAffectRadius;//[Offset: 0x2ac, Size: 0x4]
	float UAVShieldAffectRadius;//[Offset: 0x2b0, Size: 0x4]
	float UAVRescueAffectRadius;//[Offset: 0x2b4, Size: 0x4]
	bool bTargetSelectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	FName[] ForbiddenTags;//[Offset: 0x2c0, Size: 0x10]
	void UpdateSenseConfig(float NewSightRadius);// 0x4b8d312cd041
	void SetTargetSelectEnabled(bool bInEnable);// 0x4b8c312cd041
	void SetForbiddenTags(out const FName[] Tags, bool bCleanExists);// 0x4b8b312cd041
	void OnBotPerceptionUpdated(Actor* Actor, AIStimulus Stimulus);// 0x4b8a312cd041
	bool IsInEffectAreaOfType(enum Type, const Actor* InTestActor);// 0x4b89312cd041
	bool IsInAnyEffectArea(out PerceivableEffectArea[] ActiveEffectAreas, const Actor* InTestActor);// 0x4b88312cd041
	float GetTargetCurrentThreatValue(SolarCharacter* ThreatTarget);// 0x4b87312cd041
	void ClearCurrentThreat(bool bCleanBestTarget);// 0x4b86312cd041

--------------------------------
Class: PerceivableEAInfluenceConfig
	<enum,float> AreaTypeValueMap;//[Offset: 0x0, Size: 0x50]
	float HostileAreaFactor;//[Offset: 0x50, Size: 0x4]
	float NeutralAreaFactor;//[Offset: 0x54, Size: 0x4]
	float FriendlyAreaFactor;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: PerceivableEffectArea
	enum AreaType;//[Offset: 0x0, Size: 0x1]
	Vector EffectLocation;//[Offset: 0x4, Size: 0xc]
	float EffectRadius;//[Offset: 0x10, Size: 0x4]
	Actor* EffectActor;//[Offset: 0x14, Size: 0x8]
	Actor* Instigator;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: BotFireConfig
	float ShootDisperse;//[Offset: 0x0, Size: 0x4]
	float HitRate;//[Offset: 0x4, Size: 0x4]
	float ActiveDamageRate;//[Offset: 0x8, Size: 0x4]
	float ActiveDamageFactor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BotBonusDropConfig
	float ActiveTime;//[Offset: 0x0, Size: 0x4]
	float DeactiveTime;//[Offset: 0x4, Size: 0x4]
	int NumOfAmmo;//[Offset: 0x8, Size: 0x4]
	int KitId;//[Offset: 0xc, Size: 0x4]
	int NumOfKit;//[Offset: 0x10, Size: 0x4]
	int NumOfElectricity;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SolarBotShootSimulater.Object
	SolarBotAIController* OwnerController;//[Offset: 0x28, Size: 0x8]
	Actor* LockedTargetActor;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SolarBotShootConfig
	enum FirePolicy;//[Offset: 0x0, Size: 0x1]
	float FollowInterpSpeed;//[Offset: 0x4, Size: 0x4]
	float AntiHorizRecoilStrenghth;//[Offset: 0x8, Size: 0x4]
	float AntiVertRecoilStrenghth;//[Offset: 0xc, Size: 0x4]
	float LockHeightOffset;//[Offset: 0x10, Size: 0x4]
	float AimInterpSpeed;//[Offset: 0x14, Size: 0x4]
	float MaxFollowDeltaAngle;//[Offset: 0x18, Size: 0x4]
	float MaxPreciseMoveAngle;//[Offset: 0x1c, Size: 0x4]
	float RoughMoveMaxAngle;//[Offset: 0x20, Size: 0x4]
	float FollowMoveSpeed;//[Offset: 0x24, Size: 0x4]
	float PreciseMoveSpeed;//[Offset: 0x28, Size: 0x4]
	float RoughMoveSpeed;//[Offset: 0x2c, Size: 0x4]
	float LockMoveSpeed;//[Offset: 0x30, Size: 0x4]
	float PreciseMoveDeviationYaw;//[Offset: 0x34, Size: 0x4]
	float PreciseMoveDeviationPitch;//[Offset: 0x38, Size: 0x4]
	float RoughMoveDeviationYaw;//[Offset: 0x3c, Size: 0x4]
	float RoughMoveDeviationPitch;//[Offset: 0x40, Size: 0x4]
	float LockMoveMaxDeltaYaw;//[Offset: 0x44, Size: 0x4]
	float LockMoveMaxDeltaPitch;//[Offset: 0x48, Size: 0x4]
	float RoughMoveReactionTime;//[Offset: 0x4c, Size: 0x4]
	float PreciseMoveReactionTime;//[Offset: 0x50, Size: 0x4]
	float MaxFollowUnreachTime;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: SolarWarmTargetComponent.ActorComponent.Object
	SolarPlayerController* WarmPlayerController;//[Offset: 0xb0, Size: 0x8]
	bool bEnableWarmClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bEnableWarmDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bExcludeHasEnemyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	bool bExcludeHasTeammatePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb, Size: 0x1]
	bool bExcludeHasEnemyBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	bool bExcludeHasSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]

--------------------------------
Class: SolarFollowingComponent.CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bEnableOffmeshDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	float MinDetectInterval;//[Offset: 0x2a0, Size: 0x4]
	uint32 MaxDetectIteration;//[Offset: 0x2a4, Size: 0x4]
	Vector InitialOffmeshSolveExtent;//[Offset: 0x2a8, Size: 0xc]
	float MinZDiffDetectUndergroud;//[Offset: 0x2b4, Size: 0x4]
	float AgentSwimingHalfHeightPct;//[Offset: 0x2b8, Size: 0x4]
	float AgentNormalHalfHeightPct;//[Offset: 0x2bc, Size: 0x4]
	float ReachTestCheckAngleWV;//[Offset: 0x2c0, Size: 0x4]
	float MinSpeedLastSegmentWV;//[Offset: 0x2c4, Size: 0x4]
	float TurningSpeedWV;//[Offset: 0x2c8, Size: 0x4]
	float TurningSteeringThresholdWV;//[Offset: 0x2cc, Size: 0x4]
	float BlockDetectionDistanceCharacter;//[Offset: 0x2d0, Size: 0x4]
	float BlockDetectionDistanceVehicle;//[Offset: 0x2d4, Size: 0x4]
	bool bEnableSolveBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	SolarVehiclePawn* VehicleActor;//[Offset: 0x320, Size: 0x8]
	float SensorTraceDistance;//[Offset: 0x334, Size: 0x4]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	float RightSensorAlpha;//[Offset: 0x33c, Size: 0x4]
	float CentralSensorAlpha;//[Offset: 0x340, Size: 0x4]
	float LeftSensorAlpha;//[Offset: 0x344, Size: 0x4]
	float SteeringAngle;//[Offset: 0x348, Size: 0x4]
	float VehicleSteeringSensitivity;//[Offset: 0x34c, Size: 0x4]
	float BrakingForce;//[Offset: 0x350, Size: 0x4]
	float DecelerationDistance;//[Offset: 0x354, Size: 0x4]
	float VehicleDecelerationSpeed;//[Offset: 0x358, Size: 0x4]
	float VehicleTurningSpeed;//[Offset: 0x35c, Size: 0x4]
	float CheckReverseDistance;//[Offset: 0x360, Size: 0x4]
	float HoverCheckBlockSpeed;//[Offset: 0x364, Size: 0x4]
	float WheeledCheckBlockSpeed;//[Offset: 0x368, Size: 0x4]
	float LeggedVehicleCheckBlockSpeed;//[Offset: 0x36c, Size: 0x4]
	float CheckBlockTime;//[Offset: 0x374, Size: 0x4]
	int TryReverseTimes;//[Offset: 0x380, Size: 0x4]
	float TryReverseDurationTime;//[Offset: 0x384, Size: 0x4]
	float SolveBlockGoFrontTime;//[Offset: 0x390, Size: 0x4]
	bool bPathFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	void SetVehicle(Actor* VehicleActorIn);// 0x476f312cd041
	void OnUpdatedCharacterMovementModeChanged(Character* Character, byte PrevMovementMode, byte PreviousCustomMode);// 0x476e312cd041
	void OnUpdatedCharacterLanded(out const HitResult Hit);// 0x476d312cd041

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x268, Size: 0x8]
	Vector CrowdAgentMoveDirection;//[Offset: 0x270, Size: 0xc]
	void SuspendCrowdSteering(bool bSuspend);// 0x476c312cd041

--------------------------------
Class: SolarVehiclePawn.Pawn.Actor.Object
	PrimitiveComponent* VehicleRoot;//[Offset: 0x2b8, Size: 0x8]
	SkeletalMeshComponentBudgeted* VehicleMesh;//[Offset: 0x2c0, Size: 0x8]
	uint32 VehicleID;//[Offset: 0x2c8, Size: 0x4]
	bool bVehicleMeshAggregationTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	class SkeletalMeshComponentBudgeted* VehicleStencilClass;//[Offset: 0x2d0, Size: 0x28]
	SkeletalMeshComponentBudgeted* VehicleStencilNew;//[Offset: 0x2f8, Size: 0x8]
	SolarNetMovementComponent* NetMovementComponent;//[Offset: 0x300, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x308, Size: 0x8]
	SolarVehicleAbilitySystemComponent* VehicleAbilitySystem;//[Offset: 0x310, Size: 0x8]
	SolarVehicleSpringArmComponent* SpringArmComponent;//[Offset: 0x318, Size: 0x8]
	SolarVehicleCameraComponent* CameraComponent;//[Offset: 0x320, Size: 0x8]
	SolarVehicleAttributeSet* VehicleAttributeSet;//[Offset: 0x328, Size: 0x8]
	BasedMovement BasedMovement;//[Offset: 0x330, Size: 0x28]
	VehicleSeatSlot[] SeatSlots;//[Offset: 0x358, Size: 0x10]
	int HealthUIID;//[Offset: 0x368, Size: 0x4]
	Texture2D* VehicleBrandIcon;//[Offset: 0x370, Size: 0x28]
	float OverlapWaterRadius;//[Offset: 0x398, Size: 0x4]
	Vector OutVehicleOffset;//[Offset: 0x39c, Size: 0xc]
	float WaterDraftDepth;//[Offset: 0x3a8, Size: 0x4]
	float CarpadProtectTime;//[Offset: 0x3ac, Size: 0x4]
	float CarPadAccelerationMultiplier;//[Offset: 0x3b0, Size: 0x4]
	Vector[] DropPassengerLocations;//[Offset: 0x3b8, Size: 0x10]
	Vector DropPassengerAtTop;//[Offset: 0x3c8, Size: 0xc]
	FName BodySocketName;//[Offset: 0x3d4, Size: 0x8]
	Vector DamageBoxLocation;//[Offset: 0x3dc, Size: 0xc]
	Vector DamageBoxExtent;//[Offset: 0x3e8, Size: 0xc]
	FName[] PenetrationDamageBones;//[Offset: 0x3f8, Size: 0x10]
	float VehicleMaxSpeedOnUI;//[Offset: 0x408, Size: 0x4]
	enum VehicleControlUIType;//[Offset: 0x40c, Size: 0x1]
	enum VehicleAnimationType;//[Offset: 0x40d, Size: 0x1]
	VehicleVFX NosCameraVFX;//[Offset: 0x410, Size: 0x90]
	float NOSCameraEffectAngle;//[Offset: 0x4a0, Size: 0x4]
	<byte,ParticleSystem*> RaiseDustEffects;//[Offset: 0x4a8, Size: 0x50]
	VehicleVFX[] NosVFXes;//[Offset: 0x4f8, Size: 0x10]
	float SpeedThresholdForCollidingDamage;//[Offset: 0x508, Size: 0x4]
	float SpeedThresholdForStandingOn;//[Offset: 0x50c, Size: 0x4]
	float SpeedThresholdForGetOnVehicle;//[Offset: 0x510, Size: 0x4]
	ParticleSystem* EnterWaterVFX;//[Offset: 0x518, Size: 0x28]
	float SprayVelocity;//[Offset: 0x5b8, Size: 0x4]
	float HeavyInSpeed;//[Offset: 0x5bc, Size: 0x4]
	float CriticalAngle;//[Offset: 0x5c0, Size: 0x4]
	Vector OffsetBasedVechileLoction;//[Offset: 0x5c4, Size: 0xc]
	float CollisionSparkThreshold;//[Offset: 0x5d0, Size: 0x4]
	ParticleSystem* CollisionSparkParticle;//[Offset: 0x5d8, Size: 0x28]
	FName CollisionSparkParamNowel;//[Offset: 0x600, Size: 0x8]
	FName CollisionSparkParamQuantity;//[Offset: 0x608, Size: 0x8]
	float VehicleSpeedThresholdToPlayVFX;//[Offset: 0x610, Size: 0x4]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToNowel;//[Offset: 0x618, Size: 0x88]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToQuantity;//[Offset: 0x6a0, Size: 0x88]
	VehicleVFX SpeedParticle;//[Offset: 0x730, Size: 0x90]
	VehicleVFXMesh[] DriverOnVFXMeshes;//[Offset: 0x7c0, Size: 0x10]
	VehicleVFX[] DriverOnVFXs;//[Offset: 0x7d0, Size: 0x10]
	Vector SpawnOffset;//[Offset: 0x7e0, Size: 0xc]
	SeatCameraSetting DefaultCameraSetting;//[Offset: 0x7ec, Size: 0x30]
	RuntimeFloatCurve CameraFovCurve;//[Offset: 0x820, Size: 0x88]
	<int,float> VehicleOutShotFovCoefficients;//[Offset: 0x8a8, Size: 0x50]
	float CameraFovInterpSpeed;//[Offset: 0x8f8, Size: 0x4]
	RuntimeFloatCurve CameraDistanceMultiplierCurve;//[Offset: 0x900, Size: 0x88]
	float CameraDistanceInterpSpeed;//[Offset: 0x988, Size: 0x4]
	bool bCameraFollowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98c, Size: 0x1]
	RuntimeFloatCurve CameraFollowSpeedCurve;//[Offset: 0x990, Size: 0x88]
	float CameraFollowTimeThreshold;//[Offset: 0xa18, Size: 0x4]
	float CamearResetFollowSpeed;//[Offset: 0xa1c, Size: 0x4]
	float CameraFollowSpeedThreshold;//[Offset: 0xa20, Size: 0x4]
	RuntimeFloatCurve CameraZLagDistanceCurve;//[Offset: 0xa28, Size: 0x88]
	bool bResetTargetPitchOffsetBasedOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 0x1]
	FString SpeedVibrationHeString;//[Offset: 0xab8, Size: 0x10]
	RuntimeFloatCurve SpeedVibrationCurve;//[Offset: 0xac8, Size: 0x88]
	float MinSpeedDifferenceForCollisionVibration;//[Offset: 0xb50, Size: 0x4]
	FString CollisionVibrationHeString;//[Offset: 0xb58, Size: 0x10]
	FString LandingVibrationHeString;//[Offset: 0xb68, Size: 0x10]
	RuntimeFloatCurve LandingVibrationCurve;//[Offset: 0xb78, Size: 0x88]
	float MaxSpeedDecelerationRate;//[Offset: 0xc00, Size: 0x4]
	SolarVehicleMaterialData BackLampData;//[Offset: 0xc08, Size: 0x28]
	SolarVehicleMaterialData[] VehicleMaterialDataArray;//[Offset: 0xc30, Size: 0x10]
	SolarVehicleSoundDataAsset* VehicleSoundDataAsset;//[Offset: 0xc40, Size: 0x8]
	class GameplayEffect* DefaultAttributes;//[Offset: 0xc48, Size: 0x8]
	class GameplayEffect* CanDriveEffect;//[Offset: 0xc50, Size: 0x8]
	class GameplayEffect* CanGetOnEffect;//[Offset: 0xc58, Size: 0x8]
	class GameplayEffect* UnderWaterEffect;//[Offset: 0xc60, Size: 0x8]
	class SolarAbility* ExplosionAbilityClass;//[Offset: 0xc68, Size: 0x8]
	VehicleVFX ExplosionVFX;//[Offset: 0xc70, Size: 0x90]
	VehicleVFXMesh VehicleBrokenMesh;//[Offset: 0xd00, Size: 0x80]
	VehicleVFX VehicleDamagedVFXs;//[Offset: 0xd80, Size: 0x90]
	class GameplayEffect* VehicleDamageStatusEffects;//[Offset: 0x1050, Size: 0x8]
	int MaxLodLevelForUpdateVisual;//[Offset: 0x1078, Size: 0x4]
	VehicleWeakPointSpec[] VehicleWeakPointContainer;//[Offset: 0x1080, Size: 0x10]
	PrimitiveComponent* PlatformComponent;//[Offset: 0x1090, Size: 0x8]
	bool bCanStandOnPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1098, Size: 0x1]
	float DistanceThresholdForAttachPlatform;//[Offset: 0x109c, Size: 0x4]
	float DegreeThresholdForAttachPlatform;//[Offset: 0x10a0, Size: 0x4]
	float SpeedThresholdForAttachPlatform;//[Offset: 0x10a4, Size: 0x4]
	class SolarAbility* CollideDamageAbility;//[Offset: 0x10a8, Size: 0x8]
	float CrashDamageWeight;//[Offset: 0x10b0, Size: 0x4]
	float SelfCrashDamageRate;//[Offset: 0x10b4, Size: 0x4]
	float PassengerDamageRatio;//[Offset: 0x10b8, Size: 0x4]
	float MinPlayerDamageVelocity;//[Offset: 0x10bc, Size: 0x4]
	float CollidedCharacterDmgRatio;//[Offset: 0x10c0, Size: 0x4]
	float CollideUpBoundingRatio;//[Offset: 0x10c4, Size: 0x4]
	CurveFloat* CollidePushSpeedCurve;//[Offset: 0x10c8, Size: 0x8]
	float CollidePushUpAngle;//[Offset: 0x10d0, Size: 0x4]
	float CharacterProtectTime;//[Offset: 0x10d4, Size: 0x4]
	float CollisionCompensationImpulseForSimulatedProxy;//[Offset: 0x10d8, Size: 0x4]
	int[] StealthHideMats;//[Offset: 0x10e0, Size: 0x10]
	bool bRemoveStencil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f8, Size: 0x1]
	bool IsLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1110, Size: 0x1]
	delegate OnPlayerGetOnVehicle;//[Offset: 0x1130, Size: 0x1]
	delegate OnPlayerGetOffVehicle;//[Offset: 0x1131, Size: 0x1]
	int[] OccupiedSeats;//[Offset: 0x1230, Size: 0x10]
	Vector_NetQuantizeNormal ReplicatedPlayerInputVector;//[Offset: 0x1240, Size: 0xc]
	Vector_NetQuantize RepLocation;//[Offset: 0x124c, Size: 0xc]
	Actor*[] ActorsOnPlatform;//[Offset: 0x1298, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x12cc, Size: 0x4]
	byte CurPlayerInputMask;//[Offset: 0x12d0, Size: 0x1]
	byte ReplicatedPlayerInputMask;//[Offset: 0x12d1, Size: 0x1]
	SolarNavModifierComponent* SolarNavModifierComp;//[Offset: 0x1318, Size: 0x8]
	bool bDynamicAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1320, Size: 0x1]
	int SkinId;//[Offset: 0x1370, Size: 0x4]
	AbilityCooldownTimer[] ActivedAbilityCooldownArray;//[Offset: 0x1388, Size: 0x10]
	byte CurrentDamageStatus;//[Offset: 0x1398, Size: 0x1]
	bool bVehicleBurningStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1399, Size: 0x1]
	float EnterWaterDuration;//[Offset: 0x1460, Size: 0x4]
	float WaterLineHeight;//[Offset: 0x1468, Size: 0x4]
	SolarWaterActorNew* WaterActor;//[Offset: 0x1470, Size: 0x8]
	void StatVehicleAutoMove(int MoveTime);// 0x44aa312cd041
	void SetWeakPointHealth(byte WeakPointID, float InHealth);// 0x44a9312cd041
	void SetTakeMoveInput(bool bInTakeInput);// 0x44a8312cd041
	void SetPlayerInputVector(out const Vector2D InputVector, float CameraYaw);// 0x44a7312cd041
	void SetCurrentHealth(float InHealth);// 0x44a6312cd041
	void SetCrossCarpad(SolarCarPad* InCarpad);// 0x44a5312cd041
	void ServerSetPlayerInput(const Vector_NetQuantizeNormal InputVector, const byte InputMask);// 0x44a4312cd041
	void ServerSetCrossCarpad(SolarCarPad* InCarpad);// 0x44a3312cd041
	void ServerSendsTransformToEveryoneWithMovementBase(const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x44a2312cd041
	void ServerSendsTransformToEveryone(const byte[] Value);// 0x44a1312cd041
	void ServerSendsTeleportStateToEveryone(const Vector_NetQuantize InLocation, const Vector_NetQuantizeNormal InNormalizeEuler, float InServerTimeStamp);// 0x44a0312cd041
	void ServerSendCorrectionToClient(float ServerTimeStamp, Vector_NetQuantize WorldLocation, Vector_NetQuantizeNormal WorldRotationCompressed);// 0x449f312cd041
	void ServerHandleVehicleCollision(const VehicleCollisionInfo InVehicleCollisionInfo);// 0x449e312cd041
	void ServerDrawActorLocationAndRotationOnClient(const Vector InLocation, const Rotator InRotator);// 0x449d312cd041
	void ServerApplyVehicleSkin(int InSkinID);// 0x449c312cd041
	void ServerApplyDamageToVehilceAndPassenger(Actor* OtherActor, float DamageToSelf, float DamageToOther, const Vector_NetQuantize HitLocation);// 0x449b312cd041
	void ServerApplyAbilityDamageToTargets(const Pawn*[] Targets, GameplayAbilitySpecHandle AbilityHandle);// 0x449a312cd041
	void RemoveSeatSlot(byte SeatIndex);// 0x4499312cd041
	void ReleaseDamagedStatusVFX(byte InDamagedStatus);// 0x4498312cd041
	void PlayVehicleEjectSound(SolarCharacter* ejectedCharacter);// 0x4497312cd041
	void PlaySpeedboardSound();// 0x4496312cd041
	void PlayDamagedStatusVFX(byte InDamagedStatus);// 0x4495312cd041
	void OverlapWater();// 0x4494312cd041
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x4493312cd041
	void OnStencilLoaded();// 0x4492312cd041
	void OnSkinDataAssetLoadedNext(SoftClassPath SkinVehiclePath);// 0x4491312cd041
	void OnRep_WeakPointHealthOrStateChanged(VehicleWeakPointSpec[] OldVehicleWeakPointDatas);// 0x4490312cd041
	void OnRep_VehicleBurning();// 0x448f312cd041
	void OnRep_SkinId();// 0x448e312cd041
	void OnRep_ReplicatedPlayerInputMask(byte OldReplicatedPlayerInputMask);// 0x448d312cd041
	void OnRep_RemoveStencil();// 0x448c312cd041
	void OnRep_CachedActorHandle();// 0x448b312cd041
	bool IsVehicleFullHealth();// 0x448a312cd041
	bool IsVehicleDangerous();// 0x4489312cd041
	bool IsVehicleBroken();// 0x4488312cd041
	bool IsTeammateWith(const Pawn* Pawn);// 0x4487312cd041
	bool IsManuallyCancelAbilityActive(byte SeatIndex);// 0x4486312cd041
	bool IsExistEnemy(const SolarCharacter* Character);// 0x4485312cd041
	bool IsAbilityActive(byte SeatIndex, byte AbilityIndex);// 0x4484312cd041
	bool InSameTeam();// 0x4483312cd041
	VehicleWeakPointSpec[] GetVehicleWeakPoints();// 0x4482312cd041
	int GetVehicleTypeID();// 0x4481312cd041
	byte GetVehicleTeamId();// 0x4480312cd041
	PhysicalMaterial* GetVehicleRootPhysMaterial();// 0x447f312cd041
	int GetVehicleGroupID();// 0x447e312cd041
	float GetSpeedInKmh();// 0x447d312cd041
	float GetSpeed();// 0x447c312cd041
	Vector GetSpawnOffset();// 0x447b312cd041
	Vector2D GetPlayerInputVector();// 0x447a312cd041
	int GetPassengerCount();// 0x4479312cd041
	int GetNextVacantSeat(int InCurrentSeatIndex);// 0x4478312cd041
	float GetMaxHealth();// 0x4477312cd041
	int GetManuallyCancelAbilityIndex(byte SeatIndex);// 0x4476312cd041
	int GetHealthPercentInt();// 0x4475312cd041
	SolarCharacter* GetDriverCharacter();// 0x4474312cd041
	float GetDangerHealthPrecent();// 0x4473312cd041
	float GetCurrentHealth();// 0x4472312cd041
	bool DoesAbilitySatisfyTagRequirements(int CurSeatIndex, byte AbilityIndex);// 0x4471312cd041
	void DeleteStencilMesh();// 0x4470312cd041
	void ClientVehicleExplosion();// 0x446f312cd041
	void ClientVehicleBroken();// 0x446e312cd041
	void ClientSendsTransformToServerWithMovementBaseAfterCorrection(float DriverLocalTime, float ServerTimeStamp, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x446d312cd041
	void ClientSendsTransformToServerWithMovementBase(float DriverLocalTime, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x446c312cd041
	void ClientSendsTransformToServerAfterCorrection(float DriverLocalTime, float ServerTimeStamp, const byte[] Value);// 0x446b312cd041
	void ClientSendsTransformToServer(float DriverLocalTime, const byte[] Value);// 0x446a312cd041
	bool CheckUpdateVisual();// 0x4469312cd041
	bool CheckOpenParticleOptimization(int Bias);// 0x4468312cd041
	bool CanActivateAbility(byte SeatIndex, byte AbilityIndex);// 0x4467312cd041
	void ApplySkinFromCDO(SolarVehiclePawn* SkinVehiclePawnCDO);// 0x4466312cd041
	byte AddSeatSlot(out const VehicleSeatSlot SeatSlot);// 0x4465312cd041

--------------------------------
Class: SolarCarPad.SolarInteractableActor.Actor.Object
	float Duration;//[Offset: 0x238, Size: 0x4]
	float SpeedMultiplier;//[Offset: 0x23c, Size: 0x4]
	float DistanceThresholdForValidation;//[Offset: 0x240, Size: 0x4]

--------------------------------
Class: VehicleCollisionInfo
	PrimitiveComponent* CollidedPrimitive;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize SelfPreVelocity;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize SelfCurrentVelocity;//[Offset: 0x14, Size: 0xc]
	Vector_NetQuantize OtherVehicleLinearVelocity;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantize OtherVehicleAngularVelocity;//[Offset: 0x2c, Size: 0xc]
	Vector_NetQuantize OtherVehicleLocation;//[Offset: 0x38, Size: 0xc]
	Vector_NetQuantizeNormal OtherVehicleRotation;//[Offset: 0x44, Size: 0xc]

--------------------------------
Class: VehicleWeakPointSpec
	float CurrentHealth;//[Offset: 0x0, Size: 0x4]
	bool bInRepairing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	SolarVehicleWeakPointComponent* WeakPointMeshComponent;//[Offset: 0x8, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x10, Size: 0x8]
	byte WeakPointID;//[Offset: 0x18, Size: 0x1]
	FName[] WeakPointSockets;//[Offset: 0x20, Size: 0x10]
	Vector WeakPointOffset;//[Offset: 0x30, Size: 0xc]
	StaticMesh* WeakPointStaticMesh;//[Offset: 0x40, Size: 0x28]
	Transform WeakPointRelativeTransform;//[Offset: 0x70, Size: 0x30]
	float MaxWeakPointHealth;//[Offset: 0xa0, Size: 0x4]
	float RepairDuration;//[Offset: 0xa4, Size: 0x4]
	bool bRecoverBoneScaleAfterVFXFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	class GameplayEffect* BrokenEffect;//[Offset: 0xb0, Size: 0x8]
	float FacingAngle;//[Offset: 0xc0, Size: 0x4]
	float DistFromCharacterToWeakPoint;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: SolarVehicleWeakPointComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: VehicleSeatSlot
	FName SeatSocketName;//[Offset: 0x0, Size: 0x8]
	FName SeatWeaponSocket;//[Offset: 0x8, Size: 0x8]
	bool bDisplayBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverrideCameraSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	SeatCameraSetting SeatCameraSetting;//[Offset: 0x14, Size: 0x30]
	bool SeatStickOutEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	OutVehicleShootSetting OutVehicleShotSetting;//[Offset: 0x48, Size: 0xc8]
	VehicleSeatAbility[] VechicleAbilities;//[Offset: 0x110, Size: 0x10]
	class SolarVehicleWeapon* VehicleWeaponClass;//[Offset: 0x120, Size: 0x8]
	class SolarVehicleWeapon* VehicleWeaponSkinClass;//[Offset: 0x128, Size: 0x8]
	bool bAutoEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	Texture2D* SeatDisplayIcon;//[Offset: 0x138, Size: 0x28]
	float DamageRatio;//[Offset: 0x160, Size: 0x4]
	float PenetrationDamageRatio;//[Offset: 0x164, Size: 0x4]
	BoxSphereBounds PenetrationSphere;//[Offset: 0x168, Size: 0x1c]
	Rotator EjectRotation;//[Offset: 0x184, Size: 0xc]
	bool bOverrideDefaultEjectParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	VehicleEjectParams EjectParams;//[Offset: 0x194, Size: 0x10]
	SolarCharacter* SeatPassenger;//[Offset: 0x1a4, Size: 0x8]
	SolarVehicleWeapon* SeatWeapon;//[Offset: 0x1b0, Size: 0x8]

--------------------------------
Class: SeatCameraSetting
	float DistanceToTarget;//[Offset: 0x0, Size: 0x4]
	Vector OffsetToTarget;//[Offset: 0x4, Size: 0xc]
	Vector OffsetToTargetForTrace;//[Offset: 0x10, Size: 0xc]
	float DefaultPitch;//[Offset: 0x1c, Size: 0x4]
	float MinPitch;//[Offset: 0x20, Size: 0x4]
	float MaxPitch;//[Offset: 0x24, Size: 0x4]
	float MinYaw;//[Offset: 0x28, Size: 0x4]
	float MaxYaw;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: OutVehicleShootSetting
	Vector OutShotCameraOffset;//[Offset: 0x0, Size: 0xc]
	Rotator OutShotCameraRotation;//[Offset: 0xc, Size: 0xc]
	Vector2D OutShotCameraYawLimite;//[Offset: 0x18, Size: 0x8]
	CurveFloat* OutShotPitchLimiteCurve;//[Offset: 0x20, Size: 0x8]
	Vector ShotAimCameraOffset;//[Offset: 0x28, Size: 0xc]
	RuntimeFloatCurve ShotAimCameraFovCurve;//[Offset: 0x38, Size: 0x88]
	float OutShotBlendTime;//[Offset: 0xc0, Size: 0x4]
	float ShotAimBlendTime;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: VehicleSeatAbility
	class SolarVehicleGameplayAbility* AbilityClass;//[Offset: 0x0, Size: 0x8]
	GameplayAbilitySpecHandle ServerOrDriverAbilityHandle;//[Offset: 0x8, Size: 0x4]
	GameplayAbilitySpecHandle SkinPreAbilityHandle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolarVehicleGameplayAbility.GameplayAbility.Object
	bool bCancelAfterVacateSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	bool bCancelManually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 0x1]
	byte AbilityIndex;//[Offset: 0x3fb, Size: 0x1]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x400, Size: 0x20]
	FString AbilityActivateVirationHeString;//[Offset: 0x420, Size: 0x10]
	FString AbilityEndVirationHeString;//[Offset: 0x430, Size: 0x10]
	bool bCheckInstigatorBeforeActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool bActivateAbilityOnGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	float DurationTime;//[Offset: 0x444, Size: 0x4]
	class GameplayEffect* ActivateEffect;//[Offset: 0x448, Size: 0x8]
	Texture2D* AbilityIcon;//[Offset: 0x450, Size: 0x28]
	Texture2D* ActivatedAbilityIcon;//[Offset: 0x478, Size: 0x28]
	int AbilityDescription;//[Offset: 0x4a0, Size: 0x4]
	FString AbilityTextType;//[Offset: 0x4a8, Size: 0x10]
	float DamageToVehicle;//[Offset: 0x4b8, Size: 0x4]
	float DamageToCharacter;//[Offset: 0x4bc, Size: 0x4]

--------------------------------
Class: SolarVehicleWeapon.SolarWeapon.Actor.Object
	float MaxWeaponPitch;//[Offset: 0xc40, Size: 0x4]
	float MinWeaponPitch;//[Offset: 0xc44, Size: 0x4]
	float MaxWeaponYaw;//[Offset: 0xc48, Size: 0x4]
	float MinWeaponYaw;//[Offset: 0xc4c, Size: 0x4]
	float PitchFollowSpeed;//[Offset: 0xc50, Size: 0x4]
	float YawFollowSpeed;//[Offset: 0xc54, Size: 0x4]
	bool bAbsoluteRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 0x1]
	bool bHasScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc59, Size: 0x1]
	bool bHiddenMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5a, Size: 0x1]
	Vector ScopeCameraOffset;//[Offset: 0xc5c, Size: 0xc]
	Vector ScopeTargetOffset;//[Offset: 0xc68, Size: 0xc]
	float ScopeCameraDistance;//[Offset: 0xc74, Size: 0x4]
	float ScopeBlendTime;//[Offset: 0xc78, Size: 0x4]
	float ScopeFOVSwitchSpeed;//[Offset: 0xc7c, Size: 0x4]
	enum DefaultWeaponScopeType;//[Offset: 0xc80, Size: 0x1]
	class VehicleWeaponScopeWidget* ScopeUI;//[Offset: 0xc88, Size: 0x8]
	float PitchCameraOffset;//[Offset: 0xc90, Size: 0x4]
	bool bCameraFocusWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc94, Size: 0x1]
	bool bUseNormalCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc95, Size: 0x1]
	byte FireType;//[Offset: 0xc96, Size: 0x1]
	FName FireSocketName;//[Offset: 0xc98, Size: 0x8]
	FName[] MuzzleCheckSocketNames;//[Offset: 0xca0, Size: 0x10]
	byte FireAixsType;//[Offset: 0xcb0, Size: 0x1]
	FName TurretVSocketName;//[Offset: 0xcb4, Size: 0x8]
	FName TurretHSocketName;//[Offset: 0xcbc, Size: 0x8]
	SolarVehiclePawn* AttachedVehicle;//[Offset: 0xcc8, Size: 0x8]
	SolarCharacter* WeaponOwner;//[Offset: 0xcd0, Size: 0x8]
	bool bVehicleWeaponScopeOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd8, Size: 0x1]
	bool bActivedWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd9, Size: 0x1]
	uint32 RotationYawAndPitchPacket;//[Offset: 0xcdc, Size: 0x4]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0xce8, Size: 0x8]
	class SkeletalMeshComponent* VehicleStencilClass;//[Offset: 0xcf0, Size: 0x28]
	SkeletalMeshComponent* VehicleStencilNew;//[Offset: 0xd18, Size: 0x8]
	FName AttachBoneName;//[Offset: 0xd20, Size: 0x8]
	SolarCharacter* CahedLastOwner;//[Offset: 0xd28, Size: 0x8]
	bool bUseAssistLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1060, Size: 0x1]
	bool bShowAssistLockUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1060, Size: 0x1]
	Vector2D AssistLockImageSize;//[Offset: 0x1064, Size: 0x8]
	bool bAutoLockSpreadSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x106c, Size: 0x1]
	float AutoLockSpreadDecPerSecond;//[Offset: 0x1070, Size: 0x4]
	float PreSelectProgress;//[Offset: 0x1074, Size: 0x4]
	RuntimeFloatCurve ProgressUpgradeSpeedCurve;//[Offset: 0x1078, Size: 0x88]
	enum AssistLockState;//[Offset: 0x1100, Size: 0x1]
	bool bSimulateWeaponFireSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1101, Size: 0x1]
	float TriggerSmoothReticleDistance;//[Offset: 0x1104, Size: 0x4]
	Vector2D SmoothReticleSpeed;//[Offset: 0x1108, Size: 0x8]
	Transform CachedWeaponRelativeTransform;//[Offset: 0x1110, Size: 0x30]
	Transform CachedFireMuzzleTransform;//[Offset: 0x1140, Size: 0x30]
	Transform CachedTurretVSocketTransform;//[Offset: 0x1170, Size: 0x30]
	Transform CachedTurretHSocketTransform;//[Offset: 0x11a0, Size: 0x30]
	float WeaponFollowCameraYaw;//[Offset: 0x11d0, Size: 0x4]
	float WeaponFollowCameraPitch;//[Offset: 0x11d4, Size: 0x4]
	Rotator SimulateWeaponRot;//[Offset: 0x11d8, Size: 0xc]
	Transform SimulateMuzzleTransform;//[Offset: 0x11f0, Size: 0x30]
	Rotator SimulateWeaponTargetRotator;//[Offset: 0x1220, Size: 0xc]
	class SolarBullet* VehicleWeaponPrimaryOverrideBulletClass;//[Offset: 0x1230, Size: 0x8]
	class SolarBullet* VehicleWeaponSecondaryOverrideBulletClass;//[Offset: 0x1238, Size: 0x8]
	GameplayTagContainer BlockVehicleWeaponFireTags;//[Offset: 0x1240, Size: 0x20]
	bool bEnablePreAimingLaser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1279, Size: 0x1]
	bool bNotOptTickIntervalPreAimingActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127a, Size: 0x1]
	FName PreAimingLaserLaunchScoket;//[Offset: 0x127c, Size: 0x8]
	ParticleSystem* PreAimingLaserFX;//[Offset: 0x1288, Size: 0x28]
	ParticleSystem* PreAimingLaserEnermyFX;//[Offset: 0x12b0, Size: 0x28]
	int PreAimingLaserChagringPhase;//[Offset: 0x12d8, Size: 0x4]
	ParticleSystemComponent* PreAimingLaserEffect;//[Offset: 0x12e0, Size: 0x8]
	bool bEnableBackupAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e8, Size: 0x1]
	int BackupAmmoFireCost;//[Offset: 0x12ec, Size: 0x4]
	int MaxBackupAmmo;//[Offset: 0x12f0, Size: 0x4]
	float ReloadBackupAmmoInterval;//[Offset: 0x12f4, Size: 0x4]
	int ReloadBackupAmmoNum;//[Offset: 0x12f8, Size: 0x4]
	int CurrentBackupAmmo;//[Offset: 0x12fc, Size: 0x4]
	bool bEnableRechamber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1308, Size: 0x1]
	float PlayRechamberFinishTime;//[Offset: 0x130c, Size: 0x4]
	FString RechamberStartAndStopSound;//[Offset: 0x1310, Size: 0x10]
	FString RechamberFinishSound;//[Offset: 0x1320, Size: 0x10]
	FString ReloadSoundName1P;//[Offset: 0x1330, Size: 0x10]
	FString ReloadSoundName3P;//[Offset: 0x1340, Size: 0x10]
	FString ReloadSoundName3PEnemy;//[Offset: 0x1350, Size: 0x10]
	bool bKeepReloadAfterUncontrol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1360, Size: 0x1]
	ActiveGameplayEffectHandle ActivedReloadEffectHandle;//[Offset: 0x1364, Size: 0x8]
	void VehicleWeaponOpenScope();// 0x54b1312cd041
	void VehicleWeaponCloseScope();// 0x54b0312cd041
	void UpdateWeaponSimulateTransform(float DeltaTime);// 0x54af312cd041
	void ServerUpdateVehicleWeaponRotate(uint32 PackedRotation);// 0x54ae312cd041
	void ResetWeaponRotation(float DeltaTime);// 0x54ad312cd041
	void RegisterReloadEffectTag();// 0x54ac312cd041
	void OnVehicleWeaponUnControlled();// 0x54ab312cd041
	void OnVehicleWeaponReloadTagChanged(const GameplayTag Tag, int NewCount);// 0x54aa312cd041
	void OnVehicleWeaponControlled();// 0x54a9312cd041
	void OnStencilLoaded();// 0x54a8312cd041
	void OnRep_BackupAmmoChanged(int InOldAmmo);// 0x54a7312cd041
	void LocallyVehicleWeaponTick(float DeltaTime);// 0x54a6312cd041
	bool IsPlayerLocallyControlledWeapon();// 0x54a5312cd041
	void InitializeVehicleWeapon(SolarVehiclePawn* VehicleWeaponOwner, out const FName WeaponAttachSocket);// 0x54a4312cd041
	Vector GetShotTargetLocation();// 0x54a3312cd041
	byte GetFireType();// 0x54a2312cd041
	Vector GetAimTargetLocation();// 0x54a1312cd041
	bool CheckCanOpenScope();// 0x54a0312cd041
	bool CanEnterFireState();// 0x549f312cd041

--------------------------------
Class: VehicleWeaponScopeWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum PresetScopeType;//[Offset: 0x340, Size: 0x1]
	Image* img_Vehicle;//[Offset: 0x348, Size: 0x8]
	Image* Img_Weapon;//[Offset: 0x350, Size: 0x8]
	CanvasPanel* Panel_Pitch;//[Offset: 0x358, Size: 0x8]
	WeaponScopeSliderWidget* Crosshair_Slider;//[Offset: 0x360, Size: 0x8]
	SolarCheckBox* Btn_Pitch;//[Offset: 0x368, Size: 0x8]
	CanvasPanel* SecondReticlePanel;//[Offset: 0x370, Size: 0x8]
	CanvasPanel* Panel_BG;//[Offset: 0x378, Size: 0x8]
	CanvasPanel* Panel_Border;//[Offset: 0x380, Size: 0x8]
	Image* ReticleDirection;//[Offset: 0x388, Size: 0x8]
	CanvasPanel* Coredot;//[Offset: 0x390, Size: 0x8]
	SolarWeaponRechamberWidget* HUD_CarFireCD_L;//[Offset: 0x398, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x3a0, Size: 0x8]
	CanvasPanelSlot* SecondReticleSlot;//[Offset: 0x3a8, Size: 0x8]
	CanvasPanelSlot* ReticleDirectionSlot;//[Offset: 0x3b0, Size: 0x8]
	Image* ProgressImage;//[Offset: 0x3b8, Size: 0x8]
	WidgetAnimation* ProgressAnima;//[Offset: 0x3c0, Size: 0x8]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x3c8, Size: 0x8]
	void UpdateScopeUI(SolarVehicleWeapon* VehicleWeapon, out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x56e3312cd041
	void SetChargeProgress(out Image* InProgressImage, out WidgetAnimation* InProgressAnima);// 0x56e2312cd041
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress);// 0x56e1312cd041
	void OnScopeTriggerChanged(bool bChecked);// 0x56e0312cd041
	void OnScopeOpened();// 0x56df312cd041
	void InitScopeUI(SolarVehiclePawn* InVehicle, bool bSpectate);// 0x56de312cd041
	void ApplyWeaponCrossHairToScope(out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x56dd312cd041

--------------------------------
Class: VehicleWeaponCrossHairInfo
	bool bShowCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D CrossHairPosition;//[Offset: 0x4, Size: 0x8]
	float CrossHairOpacity;//[Offset: 0xc, Size: 0x4]
	bool bShowReticleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D ReticleDirectionPosition;//[Offset: 0x14, Size: 0x8]
	float ReticleDirectionAngle;//[Offset: 0x1c, Size: 0x4]
	bool bCrossHairForbid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: WeaponScopeSliderWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	ScopeSliderData[] ScopeSliderDatas;//[Offset: 0x340, Size: 0x10]
	int ScopeSliderType;//[Offset: 0x350, Size: 0x4]
	float SliderAnimPlaySpeed;//[Offset: 0x354, Size: 0x4]
	float SliderValueScale;//[Offset: 0x358, Size: 0x4]
	Slider* Slider_ADS;//[Offset: 0x360, Size: 0x8]
	SolarTextBlock* Txt_Scope;//[Offset: 0x368, Size: 0x8]
	WidgetAnimation* Anim_Type0;//[Offset: 0x370, Size: 0x8]
	WidgetAnimation* Anim_Type1;//[Offset: 0x378, Size: 0x8]
	WidgetAnimation* AnimToPlay;//[Offset: 0x380, Size: 0x8]
	void SetSliderDisplay(bool bSkipAnimation);// 0x5775312cd041
	void OnSliderValueChangedOnPC(float InValue);// 0x5774312cd041
	void OnSliderValueChanged(float InValue);// 0x5773312cd041

--------------------------------
Class: ScopeSliderData
	Vector2D SliderPercentRange;//[Offset: 0x0, Size: 0x8]
	float SliderAnimeTimer;//[Offset: 0x8, Size: 0x4]
	enum ScopeMagnifier;//[Offset: 0xc, Size: 0x1]
	FText DisplayText;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x138, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x13c, Size: 0x10]
	float MinValue;//[Offset: 0x14c, Size: 0x4]
	float MaxValue;//[Offset: 0x150, Size: 0x4]
	SliderStyle WidgetStyle;//[Offset: 0x158, Size: 0x3a0]
	byte Orientation;//[Offset: 0x4f8, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x4fc, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x50c, Size: 0x10]
	Vector2D SliderHandleOffset;//[Offset: 0x51c, Size: 0x8]
	bool CommitTouchStartValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 0x1]
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x527, Size: 0x1]
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 0x1]
	float StepSize;//[Offset: 0x52c, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x538, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x548, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x558, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x568, Size: 0x10]
	delegate OnValueChanged;//[Offset: 0x578, Size: 0x10]
	void SetValue(float InValue);// 0x3708312cd041
	void SetStepSize(float InValue);// 0x3707312cd041
	void SetSliderHandleOffset(Vector2D InValue);// 0x3706312cd041
	void SetSliderHandleColor(LinearColor InValue);// 0x3705312cd041
	void SetSliderBarColor(LinearColor InValue);// 0x3704312cd041
	void SetNormalBarImage(out const SlateBrush InImage);// 0x3703312cd041
	void SetMinValue(float InValue);// 0x3702312cd041
	void SetMaxValue(float InValue);// 0x3701312cd041
	void SetLocked(bool InValue);// 0x3700312cd041
	void SetIndentHandle(bool InValue);// 0x36ff312cd041
	void SetHoveredBarImage(out const SlateBrush InImage);// 0x36fe312cd041
	void SetBarThickness(float InValue);// 0x36fd312cd041
	float GetValue();// 0x36fc312cd041
	float GetNormalizedValue();// 0x36fb312cd041

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x8, Size: 0x98]
	SlateBrush HoveredBarImage;//[Offset: 0xa0, Size: 0x98]
	SlateBrush DisabledBarImage;//[Offset: 0x138, Size: 0x98]
	SlateBrush NormalThumbImage;//[Offset: 0x1d0, Size: 0x98]
	SlateBrush HoveredThumbImage;//[Offset: 0x268, Size: 0x98]
	SlateBrush DisabledThumbImage;//[Offset: 0x300, Size: 0x98]
	float BarThickness;//[Offset: 0x398, Size: 0x4]

--------------------------------
Class: SolarTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	FText Text;//[Offset: 0x160, Size: 0x18]
	int LocTextID;//[Offset: 0x178, Size: 0x4]
	enum PreviewLang;//[Offset: 0x17c, Size: 0x1]
	bool bUsingAccurateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d, Size: 0x1]
	Vector2D CalcSize;//[Offset: 0x180, Size: 0x8]
	delegate TextDelegate;//[Offset: 0x188, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x198, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1c0, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1d0, Size: 0x58]
	SlateFontSizeForLang SpecialLangFont;//[Offset: 0x228, Size: 0x18]
	SlateBrush StrikeBrush;//[Offset: 0x240, Size: 0x98]
	Vector2D ShadowOffset;//[Offset: 0x2d8, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x2e0, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2f0, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x300, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 0x1]
	void SetWrapTextAt(float InWrapTextAt);// 0x53c9312cd041
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x53c8312cd041
	void SetText(FText InText);// 0x53c7312cd041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x53c6312cd041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x53c5312cd041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x53c4312cd041
	void SetOpacity(float InOpacity);// 0x53c3312cd041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x53c2312cd041
	void SetMargin(Margin InMargin);// 0x53c1312cd041
	void SetLocTextID(int InLocTextID);// 0x53c0312cd041
	void SetLocLangTextData(FText InText, bool InEnableLocText, int InLocTextID, enum InPreviewLang, SlateFontSizeForLang InSlateFontSizeForLang);// 0x53bf312cd041
	void SetLineHeightPercentage(float InLineHeightPercentage);// 0x53be312cd041
	void SetFont(SlateFontInfo InFontInfo);// 0x53bd312cd041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x53bc312cd041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x53bb312cd041
	Vector2D GetTextSize();// 0x53ba312cd041
	FText GetText();// 0x53b9312cd041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x53b8312cd041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x53b7312cd041

--------------------------------
Class: SlateFontSizeForLang
	bool bEnableFontForLang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int DefaultFontSize;//[Offset: 0x4, Size: 0x4]
	SlateFontSizeLangData[] FontForLangGroup;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SlateFontSizeLangData
	enum SpecialLang;//[Offset: 0x0, Size: 0x1]
	int SpecialFontSize;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarCheckBox.CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	Widget* OnGroup;//[Offset: 0x838, Size: 0x8]
	Widget* OffGroup;//[Offset: 0x840, Size: 0x8]
	enum CheckedGroupVisibility;//[Offset: 0x848, Size: 0x1]
	enum UncheckedGroupVisibility;//[Offset: 0x849, Size: 0x1]
	void OnStateChanged(bool bIsChecked);// 0x4691312cd041
	void ManualSetIsChecked(bool InIsChecked);// 0x4690312cd041

--------------------------------
Class: SolarWeaponRechamberWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* img_FireCD;//[Offset: 0x340, Size: 0x8]
	WidgetAnimation* EmptyBullet_Anim;//[Offset: 0x348, Size: 0x8]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x350, Size: 0x8]

--------------------------------
Class: VehicleEjectParams
	float EjectTime;//[Offset: 0x0, Size: 0x4]
	float EjectDistance;//[Offset: 0x4, Size: 0x4]
	float EjectBreakableTime;//[Offset: 0x8, Size: 0x4]
	float EjectCameraFadeOutTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc38, Size: 0x1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc38, Size: 0x1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc38, Size: 0x1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x346b312cd041

--------------------------------
Class: SolarNetMovementComponent.ActorComponent.Object
	float InterpolatedBackTime;//[Offset: 0xe4, Size: 0x4]
	float ServerBufferCheckTimeInterval;//[Offset: 0xe8, Size: 0x4]
	int ServerBufferCheckCount;//[Offset: 0xec, Size: 0x4]
	float ServerBufferCheckMinSpeed;//[Offset: 0xf0, Size: 0x4]
	float ServerBufferIgnoreCheckTimer;//[Offset: 0xf4, Size: 0x4]
	float AtRestThresholdCount;//[Offset: 0xf8, Size: 0x4]
	enum ExtrapolationMode;//[Offset: 0xfc, Size: 0x1]
	bool bUseExtrapolationTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 0x1]
	float ExtrapolationTimeLimit;//[Offset: 0x100, Size: 0x4]
	bool bUseExtrapolationDistanceLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	float ExtrapolationDistanceLimit;//[Offset: 0x108, Size: 0x4]
	float SendPositionThreshold;//[Offset: 0x10c, Size: 0x4]
	float SendRotationThreshold;//[Offset: 0x110, Size: 0x4]
	float SendVelocityThreshold;//[Offset: 0x114, Size: 0x4]
	float SendAngularVelocityThreshold;//[Offset: 0x118, Size: 0x4]
	float LinearVelcolityForPositionThreshold;//[Offset: 0x11c, Size: 0x4]
	float ReceivedPositionThreshold;//[Offset: 0x120, Size: 0x4]
	float AngularVelocityForRotationThreshold;//[Offset: 0x124, Size: 0x4]
	float ReceivedRotationThreshold;//[Offset: 0x128, Size: 0x4]
	float PositionSnapThreshold;//[Offset: 0x12c, Size: 0x4]
	float RotationSnapThreshold;//[Offset: 0x130, Size: 0x4]
	float PositionLerpSpeed;//[Offset: 0x134, Size: 0x4]
	float RotationLerpSpeed;//[Offset: 0x138, Size: 0x4]
	float SpeedOfLerp;//[Offset: 0x13c, Size: 0x4]
	enum SyncPosition;//[Offset: 0x140, Size: 0x1]
	enum SyncRotation;//[Offset: 0x141, Size: 0x1]
	enum SyncVelocity;//[Offset: 0x142, Size: 0x1]
	enum SyncAngularVelocity;//[Offset: 0x143, Size: 0x1]
	bool bSyncDesiredYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool isPositionCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	bool isRotationCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 0x1]
	bool isVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 0x1]
	bool isAngularVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	float SendRate;//[Offset: 0x14c, Size: 0x4]
	float TimeSmoothing;//[Offset: 0x150, Size: 0x4]
	bool bUsingOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	bool bAlwaysSendOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 0x1]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x190, Size: 0x8]
	SceneComponent* RelativeComponent;//[Offset: 0x198, Size: 0x8]
	SolarVehiclePawn* PreviousBaseVehicleActor;//[Offset: 0x1a0, Size: 0x8]
	float AtRestPositionThreshold;//[Offset: 0x510, Size: 0x4]
	float AtRestRotationThreshold;//[Offset: 0x514, Size: 0x4]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x528, Size: 0x8]

--------------------------------
Class: SolarVehicleAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object

--------------------------------
Class: SolarVehicleSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarVehicleCameraComponent* VehicleCamera;//[Offset: 0x3f8, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x400, Size: 0x8]

--------------------------------
Class: SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float CameraLocationLagTime;//[Offset: 0x3b0, Size: 0x4]
	bool HandleTargetOffsetAsRelativeValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	SolarSpringArmComponent* GetSpringArmComponentFromActor(const Actor* InActor);// 0x45e3312cd041

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x314, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x318, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x324, Size: 0xc]
	float ProbeSize;//[Offset: 0x330, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x334, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x335, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x335, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x335, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x335, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x335, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x335, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x335, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x335, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x336, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x338, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x33c, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x340, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x344, Size: 0x4]
	bool IsCollisionFixApplied();// 0x45e2312cd041
	Vector GetUnfixedCameraPosition();// 0x45e1312cd041
	Rotator GetTargetRotation();// 0x45e0312cd041

--------------------------------
Class: SolarVehicleCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarVehiclePawn* Vehicle;//[Offset: 0x9f8, Size: 0x8]

--------------------------------
Class: SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float ConfigDistanceToTarget;//[Offset: 0x980, Size: 0x4]
	Vector ConfigCameraOffset;//[Offset: 0x984, Size: 0xc]
	Vector ConfigTargetOffset;//[Offset: 0x990, Size: 0xc]
	float ConfigFOV;//[Offset: 0x99c, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x9a0, Size: 0x4]
	float ViewPitchMin;//[Offset: 0x9a4, Size: 0x4]
	float ViewYawMax;//[Offset: 0x9a8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x9ac, Size: 0x4]
	float CameraOccupiedRoom;//[Offset: 0x9b0, Size: 0x4]
	bool EnableDistanceSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 0x1]
	bool EnableFOVSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b5, Size: 0x1]
	SolarCameraComponent* GetCameraComponentFromActor(const Actor* InActor);// 0x45c2312cd041

--------------------------------
Class: SolarVehicleAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData CurrentVehicleHealth;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData MaxVehicleHealth;//[Offset: 0x40, Size: 0x10]
	GameplayAttributeData MaxBrokenHealth;//[Offset: 0x50, Size: 0x10]
	GameplayAttributeData StealthMaterialPercent;//[Offset: 0x60, Size: 0x10]
	GameplayAttributeData SpeedMultiplier;//[Offset: 0x70, Size: 0x10]
	GameplayAttributeData CurrentVehicleWholeShield;//[Offset: 0x80, Size: 0x10]
	GameplayAttributeData MaxVehicleWholeShield;//[Offset: 0x90, Size: 0x10]
	void OnRep_StealthMaterialPercent(out const GameplayAttributeData OldStealthMaterialPercent);// 0x5496312cd041
	void OnRep_SpeedMultiplier(out const GameplayAttributeData OldSpeedMultiplier);// 0x5495312cd041
	void OnRep_MaxVehicleWholeShield(out const GameplayAttributeData OldMaxVehicleWholeShield);// 0x5494312cd041
	void OnRep_MaxVehicleHealth(out const GameplayAttributeData OldMaxVehicleHealth);// 0x5493312cd041
	void OnRep_MaxBrokenHealth(out const GameplayAttributeData OldMaxBrokenHealth);// 0x5492312cd041
	void OnRep_CurrentVehicleWholeShield(out const GameplayAttributeData OldVehicleWholeShield);// 0x5491312cd041
	void OnRep_CurrentVehicleHealth(out const GameplayAttributeData OldVehicleHealth);// 0x5490312cd041

--------------------------------
Class: BasedMovement
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x8, Size: 0xc]
	Rotator Rotation;//[Offset: 0x14, Size: 0xc]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: VehicleVFX
	ParticleSystem* Particle;//[Offset: 0x0, Size: 0x28]
	FName AttachedSocket;//[Offset: 0x28, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x30, Size: 0x30]
	CurveFloat* ActivateCurve;//[Offset: 0x60, Size: 0x8]
	FName ParameterName;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: VehicleVFXMesh
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x28]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x28, Size: 0x10]
	FName AttachedSocket;//[Offset: 0x38, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x40, Size: 0x30]

--------------------------------
Class: SolarVehicleMaterialData
	int8 MaterialIndex;//[Offset: 0x0, Size: 0x1]
	FName ParamName;//[Offset: 0x4, Size: 0x8]
	float OnValue;//[Offset: 0xc, Size: 0x4]
	float OffValue;//[Offset: 0x10, Size: 0x4]
	float ActiveSpeed;//[Offset: 0x14, Size: 0x4]
	MaterialInstanceDynamic* MatInstanceDynamic;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SolarVehicleSoundDataAsset.DataAsset.Object
	FString Engine_3P;//[Offset: 0x30, Size: 0x10]
	FString Engine_3P_Enemy;//[Offset: 0x40, Size: 0x10]
	FString Engine_Down_3P;//[Offset: 0x50, Size: 0x10]
	FString Engine_Down_3P_Enemy;//[Offset: 0x60, Size: 0x10]
	FString Engine_RTPC;//[Offset: 0x70, Size: 0x10]
	FString Engine_Stop_3P;//[Offset: 0x80, Size: 0x10]
	FString Engine_Stop_3P_Enemy;//[Offset: 0x90, Size: 0x10]
	FString Engine_Input_RTPC;//[Offset: 0xa0, Size: 0x10]
	float MaxMoveSpeed;//[Offset: 0xb0, Size: 0x4]
	FString MoveSpeed_Acc_RTPC;//[Offset: 0xb8, Size: 0x10]
	FString Tire_3P;//[Offset: 0xc8, Size: 0x10]
	FString Tire_3P_Enemy;//[Offset: 0xd8, Size: 0x10]
	FString Tire_End_3P;//[Offset: 0xe8, Size: 0x10]
	FString Tire_End_3P_Enemy;//[Offset: 0xf8, Size: 0x10]
	FString Tire_RTPC;//[Offset: 0x108, Size: 0x10]
	FString Tire_Group;//[Offset: 0x118, Size: 0x10]
	<byte,FString> Tire_States;//[Offset: 0x128, Size: 0x50]
	bool bUseEngineRpm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	FString Vehicle_Collision_3P;//[Offset: 0x180, Size: 0x10]
	FString Vehicle_Collision_3P_Enemy;//[Offset: 0x190, Size: 0x10]
	FString Vehicle_Collision_RTPC;//[Offset: 0x1a0, Size: 0x10]
	FString Play_Booster_3P;//[Offset: 0x1b0, Size: 0x10]
	FString Play_Booster_3P_Enemy;//[Offset: 0x1c0, Size: 0x10]
	FString Stop_Booster_3P;//[Offset: 0x1d0, Size: 0x10]
	FString Stop_Booster_3P_Enemy;//[Offset: 0x1e0, Size: 0x10]
	FString Vehicle_Speedboard_1P;//[Offset: 0x1f0, Size: 0x10]
	FString Vehicle_Speedboard_3P;//[Offset: 0x200, Size: 0x10]
	FString Vehicle_Speedboard_3P_Enemy;//[Offset: 0x210, Size: 0x10]
	FString Vehicle_Eject_1P;//[Offset: 0x220, Size: 0x10]
	FString Vehicle_Eject_3P;//[Offset: 0x230, Size: 0x10]
	FString Vehicle_Eject_3P_Enemy;//[Offset: 0x240, Size: 0x10]
	FString Play_Vehicle_Destroyed;//[Offset: 0x250, Size: 0x10]
	FString Weakpoint_Broken_3P;//[Offset: 0x260, Size: 0x10]
	FString Weakpoint_Broken_3P_Enemy;//[Offset: 0x270, Size: 0x10]
	FString Weakpoint_Fixed_3P;//[Offset: 0x280, Size: 0x10]
	FString Weakpoint_Fixed_3P_Enemy;//[Offset: 0x290, Size: 0x10]
	FString Engine_Start_3P;//[Offset: 0x2a0, Size: 0x10]
	FString Engine_Start_3P_Enemy;//[Offset: 0x2b0, Size: 0x10]
	FString Braking_Loop_RTPC;//[Offset: 0x2c0, Size: 0x10]
	FString Play_Braking_Loop_3P;//[Offset: 0x2d0, Size: 0x10]
	FString Play_Braking_Loop_3P_Enemy;//[Offset: 0x2e0, Size: 0x10]
	FString Stop_Braking_Loop_3P;//[Offset: 0x2f0, Size: 0x10]
	FString Stop_Braking_Loop_3P_Enemy;//[Offset: 0x300, Size: 0x10]
	float BrakingLoopSoundDegree;//[Offset: 0x310, Size: 0x4]
	float BrakingLoopSoundSpeed;//[Offset: 0x314, Size: 0x4]
	FString Play_Reverse_Loop;//[Offset: 0x318, Size: 0x10]
	FString Stop_Reverse_Loop;//[Offset: 0x328, Size: 0x10]
	FString Drift_RTPC;//[Offset: 0x338, Size: 0x10]
	FString Drift_Start;//[Offset: 0x348, Size: 0x10]
	FString Drift_Stop;//[Offset: 0x358, Size: 0x10]
	byte SpeedDifferenceInKmThresholdForHitSound;//[Offset: 0x368, Size: 0x1]
	FString Play_SelfHealing_3P;//[Offset: 0x370, Size: 0x10]
	FString Stop_SelfHealing_3P;//[Offset: 0x380, Size: 0x10]
	FString Play_vehicle_crash_ground_3P;//[Offset: 0x390, Size: 0x10]
	FString Play_vehicle_crash_ground_3P_enemy;//[Offset: 0x3a0, Size: 0x10]
	FString Vehicle_Crash_Ground_RTPC;//[Offset: 0x3b0, Size: 0x10]
	float VehicleCrashGroundRtpcMultiplier;//[Offset: 0x3c0, Size: 0x4]
	FString Play_vehicle_crash_water_3P;//[Offset: 0x3c8, Size: 0x10]
	FString Play_vehicle_crash_water_3P_enemy;//[Offset: 0x3d8, Size: 0x10]
	FString Play_vehicle_fixing_weakpoint_3P;//[Offset: 0x3e8, Size: 0x10]
	FString Stop_vehicle_fixing_weakpoint_3P;//[Offset: 0x3f8, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Start_1P;//[Offset: 0x408, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Loop_1P;//[Offset: 0x418, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Start_3P;//[Offset: 0x428, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Loop_3P;//[Offset: 0x438, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Start_1P;//[Offset: 0x448, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Loop_1P;//[Offset: 0x458, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Start_3P;//[Offset: 0x468, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Loop_3P;//[Offset: 0x478, Size: 0x10]
	FString Play_HitVehicleWholdShield_1P;//[Offset: 0x488, Size: 0x10]
	FString Play_HitVehicleWholdShield_3P;//[Offset: 0x498, Size: 0x10]
	FString HoverJumpOnActive1P;//[Offset: 0x4a8, Size: 0x10]
	FString HoverJumpOnActive3P;//[Offset: 0x4b8, Size: 0x10]
	FString HoverJumpWhileActive1P;//[Offset: 0x4c8, Size: 0x10]
	FString HoverJumpWhileActive3P;//[Offset: 0x4d8, Size: 0x10]
	FString HoverJumpOnRemove1P;//[Offset: 0x4e8, Size: 0x10]
	FString HoverJumpOnRemove3P;//[Offset: 0x4f8, Size: 0x10]
	FString Play_VehicleTrumpet_1P;//[Offset: 0x508, Size: 0x10]
	FString Play_VehicleTrumpet_3P;//[Offset: 0x518, Size: 0x10]
	FString Stop_VehicleTrumpet_1P;//[Offset: 0x528, Size: 0x10]
	FString Stop_VehicleTrumpet_3P;//[Offset: 0x538, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P;//[Offset: 0x548, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x558, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P;//[Offset: 0x568, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x578, Size: 0x10]
	FString Play_Vehicle_UpShift_3P;//[Offset: 0x588, Size: 0x10]
	FString Play_Vehicle_UpShift_3P_Enemy;//[Offset: 0x598, Size: 0x10]
	FString Play_Vehicle_DownShift_3P;//[Offset: 0x5a8, Size: 0x10]
	FString Play_Vehicle_DownShift_3P_Enemy;//[Offset: 0x5b8, Size: 0x10]
	FString Play_IronMan_Laser_Hit;//[Offset: 0x5c8, Size: 0x10]
	FString FootPlant;//[Offset: 0x5d8, Size: 0x10]
	FString Landing_3P;//[Offset: 0x5e8, Size: 0x10]
	FString Landing_3P_Enemy;//[Offset: 0x5f8, Size: 0x10]

--------------------------------
Class: SolarNavModifierComponent.NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	void OnVehicleRootHit(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x4b68312cd041
	void OnDriverGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x4b67312cd041
	void OnDriverGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x4b66312cd041

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe0, Size: 0x8]
	Vector FailsafeExtent;//[Offset: 0xe8, Size: 0xc]
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	void SetAreaClass(class NavArea NewAreaClass);// 0x4b65312cd041

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	Object* CachedNavParent;//[Offset: 0xd8, Size: 0x8]
	void SetNavigationRelevancy(bool bRelevant);// 0x4b64312cd041

--------------------------------
Class: AbilityCooldownTimer
	byte CooldownAbilityIndex;//[Offset: 0x0, Size: 0x1]
	float AbilityAppliedTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NgaiAIControllerComponent.ActorComponent.Object
	SolarCharacterBase* EnemyCharacterBase;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: SolarBotAITeamManager.Object
	float UpdateInterval;//[Offset: 0x28, Size: 0x4]
	float DefaultSeparateDistance;//[Offset: 0x2c, Size: 0x4]
	float DefaultReturnDistance;//[Offset: 0x30, Size: 0x4]
	class SolarBotTeamVisualizer* DebugVisualizerClass;//[Offset: 0x90, Size: 0x8]
	SolarBotTeamVisualizer* DebugVisualizer;//[Offset: 0x98, Size: 0x8]
	<SolarCharacter*,SolarBotAIController*> AllocatedCharacters;//[Offset: 0xa0, Size: 0x50]
	SolarCharacter*[] AbandonedCharacters;//[Offset: 0xf0, Size: 0x10]
	void UpdateAllocatedList(SolarBotAIController* InController, out const SolarCharacter*[] AliveCharacterArray);// 0x4579312cd041
	bool TryCancelCurrentRescueTarget(SolarBotAIController* InController, const SolarCharacter* CancelledCharacter);// 0x4578312cd041
	bool ShouldTeamActivate(out const SolarBotTeamInfo BotInfo);// 0x4577312cd041
	void SetTeamBlackboardValueAsVector(int TeamID, out const FName KeyName, Vector VectorValue, enum InBotState, bool bSkipIndependent);// 0x4576312cd041
	void SetTeamBlackboardValueAsString(int TeamID, out const FName KeyName, FString StringValue, enum InBotState, bool bSkipIndependent);// 0x4575312cd041
	void SetTeamBlackboardValueAsRotator(int TeamID, out const FName KeyName, Rotator VectorValue, enum InBotState, bool bSkipIndependent);// 0x4574312cd041
	void SetTeamBlackboardValueAsObject(int TeamID, out const FName KeyName, Object* ObjectValue, enum InBotState, bool bSkipIndependent);// 0x4573312cd041
	void SetTeamBlackboardValueAsName(int TeamID, out const FName KeyName, FName NameValue, enum InBotState, bool bSkipIndependent);// 0x4572312cd041
	void SetTeamBlackboardValueAsInt(int TeamID, out const FName KeyName, int IntValue, enum InBotState, bool bSkipIndependent);// 0x4571312cd041
	void SetTeamBlackboardValueAsFloat(int TeamID, out const FName KeyName, float FloatValue, enum InBotState, bool bSkipIndependent);// 0x4570312cd041
	void SetTeamBlackboardValueAsEnum(int TeamID, out const FName KeyName, byte EnumValue, enum InBotState, bool bSkipIndependent);// 0x456f312cd041
	void SetTeamBlackboardValueAsClass(int TeamID, out const FName KeyName, class Object ClassValue, enum InBotState, bool bSkipIndependent);// 0x456e312cd041
	void SetTeamBlackboardValueAsBool(int TeamID, out const FName KeyName, bool BoolValue, enum InBotState, bool bSkipIndependent);// 0x456d312cd041
	void SetBotDropOut(const SolarBotAIController* InController, bool bDropOut);// 0x456c312cd041
	void OnTeamDeactive(out const SolarBotTeamInfo TeamInfo);// 0x456b312cd041
	void OnTeamActivate(out const SolarBotTeamInfo TeamInfo);// 0x456a312cd041
	void OnBotUnRegister(out const SolarBotMemberInfo BotInfo);// 0x4569312cd041
	void OnBotStateChanged(out const SolarBotMemberInfo BotInfo, enum OldState);// 0x4568312cd041
	void OnBotRegister(out const SolarBotMemberInfo BotInfo);// 0x4567312cd041
	bool IsValidTeamID(int InTeamId);// 0x4566312cd041
	bool IsTeamLeader(const SolarBotAIController* InController);// 0x4565312cd041
	bool IsIndependent(const SolarBotAIController* InController);// 0x4564312cd041
	bool GetTeamPlayerInfo(SolarBotAIController* InController, out SolarCharacter*[] PlayerArray);// 0x4563312cd041
	bool GetRescueInfo(SolarBotAIController* InController, out SolarCharacter*[] DyingPlayerArray, out SolarCharacter*[] DeadPlayerArray, out SolarCharacter*[] DyingBotArray, out SolarCharacter*[] DeadBotArray);// 0x4562312cd041
	bool GetBotTeamInfo(SolarBotAIController* InController, out SolarBotTeamInfo OutTeamInfo);// 0x4561312cd041
	bool GetBotMemberInfo(SolarBotAIController* InController, out SolarBotMemberInfo OutMemberInfo);// 0x4560312cd041
	SolarBotAITeamManager* Get(const Object* Context);// 0x455f312cd041
	bool CheckBotTeamState(const SolarBotAIController* InController, enum MemberState);// 0x455e312cd041
	Vector CalculateTeamPosition(out const SolarBotTeamInfo TeamInfo);// 0x455d312cd041
	bool AllocatedRescueTarget(SolarBotAIController* InController, SolarCharacter* RescuedCharacter);// 0x455c312cd041
	void AbandonedCurrentRescueTarget(SolarBotAIController* InController, SolarCharacter* AbandonedCharacter);// 0x455b312cd041

--------------------------------
Class: SolarBotTeamVisualizer.Info.Actor.Object
	Color[] DrawDebugColors;//[Offset: 0x228, Size: 0x10]
	Font* TextFont;//[Offset: 0x238, Size: 0x8]
	BotTeamDebugInfo[] BotTeamDebugInfos;//[Offset: 0x240, Size: 0x10]

--------------------------------
Class: BotTeamDebugInfo
	int TeamID;//[Offset: 0x0, Size: 0x4]
	BotMemberDebugInfo[] MemberDebugInfos;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BotMemberDebugInfo
	Vector MemberLocation;//[Offset: 0x0, Size: 0xc]
	FString IDStr;//[Offset: 0x10, Size: 0x10]
	enum MemberState;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: SolarBotTeamInfo
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int TeamID;//[Offset: 0x4, Size: 0x4]
	Vector TeamPosition;//[Offset: 0x8, Size: 0xc]
	float SeparateDistance;//[Offset: 0x14, Size: 0x4]
	float ReturnDistance;//[Offset: 0x18, Size: 0x4]
	SolarBotMemberInfo[] MemberInfos;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SolarBotMemberInfo
	SolarBotAIController* BotController;//[Offset: 0x0, Size: 0x8]
	enum MemberState;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: FeedBotStrategyInfo
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	float FeedPriority;//[Offset: 0x10, Size: 0x4]
	float Difficulty;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SolarGameModeStatisticsComponent.GameModeCompBase.ActorComponent.Object
	<FString,PlayerStatisticsData*> AllPlayerStatData;//[Offset: 0xd8, Size: 0x50]
	enum[] SpecialFuncTag;//[Offset: 0x128, Size: 0x10]
	int[] GetValue_IntArray(FString InPlayerID, enum InType);// 0x4895312cd041
	int GetValue_Int(FString InPlayerID, enum InType);// 0x4894312cd041
	PlayerStatisticsData* GetPlayerStatData(FString InPlayerID);// 0x4893312cd041

--------------------------------
Class: PlayerStatisticsData.Object
	delegate OnPlayerStatDataUpdate;//[Offset: 0x28, Size: 0x10]
	delegate OnIncreaseWeaponKillNum;//[Offset: 0x38, Size: 0x10]
	Vector GetValue_Vector(enum InType);// 0x4892312cd041
	void GetValue_MapKeyWithValueInt(enum InType, out int[] OutValue);// 0x4891312cd041
	void GetValue_MapKeyWithValueFloat(enum InType, out int[] OutValue);// 0x4890312cd041
	int GetValue_IntFromMap(enum InType, int IntKey);// 0x488f312cd041
	void GetValue_IntArray(enum InType, out int[] OutResult);// 0x488e312cd041
	int GetValue_Int(enum InType);// 0x488d312cd041
	float GetValue_FloatFromMap(enum InType, int IntKey, bool Floor);// 0x488c312cd041
	void GetValue_FloatArray(enum InType, out float[] OutResult);// 0x488b312cd041
	float GetValue_Float(enum InType, bool Floor);// 0x488a312cd041

--------------------------------
Class: SolarGameMode_PlayerManager.Object
	SGameMode_Player*[] Players;//[Offset: 0x30, Size: 0x10]
	<Controller*,SGameMode_Player*> ControllerMap;//[Offset: 0x40, Size: 0x50]
	SGameMode_Player* LocalPlayer;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: SolarGameMode_CharacterManager.Object
	SolarCharacter*[] Characters;//[Offset: 0x30, Size: 0x10]
	void PlaceCharacterAtStart(SolarCharacter* Character, PlayerStart* PlayerStart, const bool bClearAllItems, const bool bEmptyEnergy, const bool bReChargeJetToFull, const bool bClearWeapons);// 0x47b7312cd041
	void PlaceCharacterAtLocation(SolarCharacter* Character, out const Vector Location);// 0x47b6312cd041

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x24c, Size: 0x8]

--------------------------------
Class: SolarGameMode_LevelManager.Object
	<FString,SGameMode_LevelConfig> LevelConfigs;//[Offset: 0xc8, Size: 0x50]
	<FString,LevelStreamingDynamic*> LevelKeyToObject;//[Offset: 0x118, Size: 0x50]
	<SolarCharacter*> MovementDisabledCharacters;//[Offset: 0x168, Size: 0x50]
	<FString,ElementLevelStreaming> PersistentElementLevelStreamings;//[Offset: 0x208, Size: 0x50]
	FString[] LoadingElementLevelNames;//[Offset: 0x258, Size: 0x10]
	FString[] UnLoadingElementLevelNames;//[Offset: 0x268, Size: 0x10]
	void ShowTransitionUI();// 0x47cc312cd041
	void SetMinimapFootprintVisible(bool bVisible);// 0x47cb312cd041
	void OnStreamingLevelLoaded();// 0x47ca312cd041
	void OnLevelLoaded();// 0x47c9312cd041
	void OnElementStreamingLevelUnLoaded();// 0x47c8312cd041
	void OnElementStreamingLevelLoaded();// 0x47c7312cd041
	void OnCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x47c6312cd041
	void HideTransitionUI();// 0x47c5312cd041

--------------------------------
Class: SGameMode_LevelConfig
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString Desc;//[Offset: 0x10, Size: 0x10]
	SoftObjectPath LevelMap;//[Offset: 0x20, Size: 0x18]
	int MiniMapId;//[Offset: 0x38, Size: 0x4]
	bool IsStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	SolarElementGroupPath[] ElementGroups;//[Offset: 0x40, Size: 0x10]
	class LoadingUIBase* LoadingUI;//[Offset: 0x50, Size: 0x28]

--------------------------------
Class: SolarElementGroupPath
	FString Name;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ElementLevel;//[Offset: 0x10, Size: 0x18]
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bPersistentLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: LoadingUIBase.LoadingWidgetBase.UserWidget.Widget.Visual.Object
	Image* Img_BG;//[Offset: 0x260, Size: 0x8]
	ProgressBar* LoadProgress;//[Offset: 0x268, Size: 0x8]
	SolarTextBlock* Txt_Percent_Num;//[Offset: 0x270, Size: 0x8]
	SolarTextBlock* Txt_Tips;//[Offset: 0x278, Size: 0x8]
	SolarTextBlock* Txt_Tips_Title;//[Offset: 0x280, Size: 0x8]
	SolarTextBlock* Txt_Tips_Left;//[Offset: 0x288, Size: 0x8]
	SolarTextBlock* Txt_Tips_Mid;//[Offset: 0x290, Size: 0x8]
	SolarTextBlock* Txt_Tips_Right;//[Offset: 0x298, Size: 0x8]
	<FString,Texture2D*> BGImgMap;//[Offset: 0x2a0, Size: 0x50]
	SolarTextBlock* Txt_Task;//[Offset: 0x2f0, Size: 0x8]
	SolarTextBlock* Txt_Task;//[Offset: 0x2f8, Size: 0x8]
	SolarTextBlock* Txt_Task;//[Offset: 0x300, Size: 0x8]
	SolarTextBlock* Txt_Task;//[Offset: 0x308, Size: 0x8]
	SolarTextBlock* Txt_Task;//[Offset: 0x310, Size: 0x8]
	SolarTextBlock* Txt_Task;//[Offset: 0x318, Size: 0x8]
	SolarTextBlock* Txt_Task;//[Offset: 0x320, Size: 0x8]
	ULoadingDataEntry[] ShowBgLoadingArray;//[Offset: 0x480, Size: 0x10]
	float FakeProgress;//[Offset: 0x4a0, Size: 0x4]
	void StartDisplayLoading(out const ULoadingDataEntry[] InLoadingBgArray, float InShowBgTime, bool bInOrder, float InShowTipsTime);// 0x409d312cd041
	void SetTips(out const FText InTips);// 0x409c312cd041
	void SetLoadingProgress(float InPercent);// 0x409b312cd041
	void SetFakeProgress(float NewProgress);// 0x409a312cd041
	void SetBGImgFromPath(out const SoftObjectPath Path);// 0x4099312cd041
	void SetBGImg(FString ImgName);// 0x4098312cd041
	void OnWidgetReleasedAsLoadingScreen(Object* Outer);// 0x4097312cd041
	void OnWidgetCreatedAsLoadingScreen(Object* Outer);// 0x4096312cd041
	void OnLevelPreLoad(FString MapPackageName);// 0x4095312cd041
	void OnAsyncLoadingFlushUpdate();// 0x4094312cd041

--------------------------------
Class: LoadingWidgetBase.UserWidget.Widget.Visual.Object
	void LoadingStarted();// 0x3593312cd041
	void LoadingFinished();// 0x3592312cd041

--------------------------------
Class: ULoadingDataEntry
	SoftObjectPath LoadingBg;//[Offset: 0x0, Size: 0x18]
	int[] TipIntArray;//[Offset: 0x18, Size: 0x10]
	WrappedLocalTextID[] TipLocalTitleArray;//[Offset: 0x28, Size: 0x10]
	WrappedLocalTextID[] TipLocalLeftArray;//[Offset: 0x38, Size: 0x10]
	WrappedLocalTextID[] TipLocalMidArray;//[Offset: 0x48, Size: 0x10]
	WrappedLocalTextID[] TipLocalRightArray;//[Offset: 0x58, Size: 0x10]
	FString[] TipArray;//[Offset: 0x68, Size: 0x10]
	FString[] TipTitleArray;//[Offset: 0x78, Size: 0x10]
	FString[] TipLeftArray;//[Offset: 0x88, Size: 0x10]
	FString[] TipMidArray;//[Offset: 0x98, Size: 0x10]
	FString[] TipRightArray;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: ElementLevelStreaming
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bPersistentLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	LevelStreamingDynamic* LevelStreamingDynamic;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SolarGameMode_ElementManager.Object
	SolarMapElementBase*[] ElementsList;//[Offset: 0x30, Size: 0x10]
	SolarPlayerStart*[] PlayerStartList;//[Offset: 0x40, Size: 0x10]
	<FName,class SolarGameMode_HandleElementRPC> HandleActorRPCBPs;//[Offset: 0x50, Size: 0x50]
	<FString,SolarMapElementBase*> ElementMap;//[Offset: 0xa0, Size: 0x50]

--------------------------------
Class: SolarPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x260, Size: 0x4]
	FString Side;//[Offset: 0x268, Size: 0x10]
	FString Job;//[Offset: 0x278, Size: 0x10]
	FString ElementID;//[Offset: 0x288, Size: 0x10]
	enum Type;//[Offset: 0x298, Size: 0x1]
	enum State;//[Offset: 0x299, Size: 0x1]
	enum Visibility;//[Offset: 0x29a, Size: 0x1]
	FName ElementTypeName;//[Offset: 0x29c, Size: 0x8]
	FString GroupKey;//[Offset: 0x2a8, Size: 0x10]
	Vector[] PlayerLocations;//[Offset: 0x2b8, Size: 0x10]
	void SetElementVisibility(const enum NewType);// 0x4d6a312cd041
	enum SetElementState(const enum NewState);// 0x4d69312cd041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x4d68312cd041
	void OnElementStateChanged(const enum CurrentState);// 0x4d67312cd041

--------------------------------
Class: SolarGameMode_EffectJobManager.Object

--------------------------------
Class: SCustomizedMode_AttributeManager.Object

--------------------------------
Class: SolarGameModeData.Object
	int GameModeID;//[Offset: 0x30, Size: 0x4]
	SGameMode_ModeConfig* CurrentModeData;//[Offset: 0x38, Size: 0x8]
	FString ModeConfigPath;//[Offset: 0x40, Size: 0x10]
	FString ModeParamsStr;//[Offset: 0x50, Size: 0x10]
	DataTable* JobDataTable;//[Offset: 0x60, Size: 0x8]
	DataTable* BoardDataTable;//[Offset: 0x68, Size: 0x8]
	DataTable* AttributeDataTable;//[Offset: 0x70, Size: 0x8]
	<FString,FString> ModeParams;//[Offset: 0xa8, Size: 0x50]
	void ReadConfigData();// 0x47b9312cd041
	void InitModeParams(FString ParamStr);// 0x47b8312cd041

--------------------------------
Class: SGameMode_ModeConfig.DataAsset.Object
	SoftObjectPath BP_Mode;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath BP_Reward;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath RewardMap;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath JobStructure;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath DataStructure;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath AttributeModifier;//[Offset: 0xa8, Size: 0x18]
	SoftObjectPath WellEffectJobRelationTable;//[Offset: 0xc0, Size: 0x18]
	SoftObjectPath BadEffectJobRelationTable;//[Offset: 0xd8, Size: 0x18]
	FString UIConfig;//[Offset: 0xf0, Size: 0x10]
	SCustomMode_GameModeSetting GameModeSetting;//[Offset: 0x100, Size: 0x68]
	SGameMode_LevelConfig[] Levels;//[Offset: 0x168, Size: 0x10]
	<FString,FString> Arguments;//[Offset: 0x178, Size: 0x50]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	float AllowJoinBattleLifeTime;//[Offset: 0x1cc, Size: 0x4]
	bool bAllowJoinAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	bool bConsiderPotentialPlayerWhenSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 0x1]

--------------------------------
Class: SCustomMode_GameModeSetting
	SoftObjectPath PlayerControllerClass;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath DefaultPawnClass;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath PlayerStateClass;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath HUDClass;//[Offset: 0x48, Size: 0x18]
	int SettlementStageConfigID;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: SolarRedHintManager.SolarGameManager.Object

--------------------------------
Class: SolarGameModeSelectionManager.SolarGameManager.Object
	SolarGameModeLockSettings* CurGameModeLockSettings;//[Offset: 0x38, Size: 0x8]
	SolarGameModeLockSettings* DefaultGameModeLockSettings;//[Offset: 0x58, Size: 0x8]
	void SaveGameModeLockSettings();// 0x4889312cd041
	void LoadGameModeLockSettings();// 0x4888312cd041

--------------------------------
Class: SolarGameModeLockSettings.SaveGame.Object
	<int,bool> GameModeLockStatus;//[Offset: 0x28, Size: 0x50]
	int[] LobbyGameModeRecIDs;//[Offset: 0x78, Size: 0x10]
	int[] GameModeGuideIDs;//[Offset: 0x88, Size: 0x10]
	void CopyFrom(SolarGameModeLockSettings* InLockSettings);// 0x4880312cd041

--------------------------------
Class: SolarPingFpsManager.Object
	byte GetPingDS;//[Offset: 0x30, Size: 0x1]
	float GetPingBackend;//[Offset: 0x34, Size: 0x4]
	float FPS;//[Offset: 0x38, Size: 0x4]
	byte GetPingBattleServer();// 0x4bee312cd041
	float GetPacketsLossRate();// 0x4bed312cd041
	float GetAverageFPS();// 0x4bec312cd041

--------------------------------
Class: SolarGameUserSettingsMgr.Object
	SolarGameUserSettings* CurGameUserSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameSettingsRange* DefaultGameSettingsRange;//[Offset: 0x30, Size: 0x8]
	bool bIsDefalutSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x40, Size: 0x8]
	void SaveGameSettings();// 0x48d6312cd041
	void ResetToDefault(enum SettingPart);// 0x48d5312cd041
	void RefreshValid(SolarGameInstanceBase* GameInstance, bool SaveIfDirty);// 0x48d4312cd041
	void OnSettingConfigSaved();// 0x48d3312cd041
	void OnPickupSettingChanged();// 0x48d2312cd041
	void InitializeSettings(SolarGameInstanceBase* GameInstance);// 0x48d1312cd041
	void Init(SolarGameInstanceBase* GameInstance);// 0x48d0312cd041
	bool FixConfigVersion();// 0x48cf312cd041

--------------------------------
Class: SolarGameUserSettings.DeveloperSettings.Object
	PickupUserSettings PickupSettings;//[Offset: 0x38, Size: 0x18]
	GraphicsUserSettings GraphicsSettings;//[Offset: 0x50, Size: 0x38]
	WeaponUserSettings WeaponSettings;//[Offset: 0x88, Size: 0x20]
	LanguageUserSettings LanguageSettings;//[Offset: 0xa8, Size: 0x3]
	CharacterVoiceUserSettings CharacterVoiceSettings;//[Offset: 0xab, Size: 0x1]
	SoundUserSettings SoundSettings;//[Offset: 0xac, Size: 0x2c]
	BasicUserSettings BasicSettings;//[Offset: 0xd8, Size: 0x7]
	SensitivityUserSettings SensitivitySettings;//[Offset: 0xe0, Size: 0x8c]
	ShakeUserSettings ShakeSettings;//[Offset: 0x16c, Size: 0x1]
	VehicleControlUserSettings DriverSettings;//[Offset: 0x16d, Size: 0x4]
	ChatOperatorUserSettings ChatOperatorSettings;//[Offset: 0x171, Size: 0x2]
	SoftClassPath DefaultSettingsRangePath;//[Offset: 0x178, Size: 0x18]
	bool bIsSynchronized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	enum ConfigVersion;//[Offset: 0x191, Size: 0x1]
	bool bFirstTimeLanunchGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192, Size: 0x1]
	FString ToJsonObjectString();// 0x48ce312cd041
	WeaponUserSettings GetWeaponSettings();// 0x48cd312cd041
	SoundUserSettings GetSoundSettings();// 0x48cc312cd041
	ShakeUserSettings GetShakeSettings();// 0x48cb312cd041
	SensitivityUserSettings GetSensitivitySettings();// 0x48ca312cd041
	PickupUserSettings GetPickupSettings();// 0x48c9312cd041
	LanguageUserSettings GetLanguageSettings();// 0x48c8312cd041
	GraphicsUserSettings GetGraphicsSettings();// 0x48c7312cd041
	VehicleControlUserSettings GetDriverSettings();// 0x48c6312cd041
	ChatOperatorUserSettings GetChatOperatorSettings();// 0x48c5312cd041
	CharacterVoiceUserSettings GetCharacterVoiceSettings();// 0x48c4312cd041
	BasicUserSettings GetBasicSettings();// 0x48c3312cd041
	void FromJsonObjectString(FString JsonStr);// 0x48c2312cd041
	bool CheckJsonObjectString(FString JsonStr);// 0x48c1312cd041

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: WeaponUserSettings
	bool bAimAssist_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bVehicleWeaponAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bAutoScope_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bAutoScope_SpecialButtonGlobal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bAutoScopeRifle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bAutoScopeSubmachinegun_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bAutoScopeShotgunSingle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bAutoScopeShotgunAuto_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bAutoScopeSniperSingle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bAutoScopeSniperAuto_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bAutoScopeSpecial_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bSniperSingleShootOnPressed_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bShotgunSingleShootOnPressed_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	CurveFloat* HitEffectDistanceToScaleCurve;//[Offset: 0x10, Size: 0x8]
	enum DoScopeMode_Global;//[Offset: 0x18, Size: 0x1]
	bool bOpenVehicleWeaponCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: SoundUserSettings
	ConditionValue Sound_Global;//[Offset: 0x0, Size: 0x8]
	ConditionValue Sound_Action;//[Offset: 0x8, Size: 0x8]
	ConditionValue Sound_BackGround;//[Offset: 0x10, Size: 0x8]
	ConditionValue Sound_Character;//[Offset: 0x18, Size: 0x8]
	int MicroPhoneVolume;//[Offset: 0x20, Size: 0x4]
	int LoudSpeakerVolume;//[Offset: 0x24, Size: 0x4]
	enum Sound_Quality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ConditionValue
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int CurValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PickupUserSettings
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bStopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	PickupItemData[] PickupItemList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: PickupItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemNum;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GraphicsUserSettings
	enum FpsLevel;//[Offset: 0x0, Size: 0x1]
	enum ColorThemeType;//[Offset: 0x1, Size: 0x1]
	bool MSAAIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	FloatValue AdaptationUIValue;//[Offset: 0x4, Size: 0x4]
	enum SelectQualityLevel;//[Offset: 0x8, Size: 0x1]
	int SavedVersion;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: FloatValue
	float Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: LanguageUserSettings
	enum CurLanguage;//[Offset: 0x0, Size: 0x1]
	enum CurCharacterVoiceLanguage;//[Offset: 0x1, Size: 0x1]
	bool HasLoadedChinese;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: CharacterVoiceUserSettings
	enum CurVoiceLanguage;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: BasicUserSettings
	bool bOpenUniversalMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOpenQuickChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAutoOverturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bPowerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bOpenRecruitRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum curGyroscpeChooseLevel;//[Offset: 0x5, Size: 0x1]
	enum CurrentDamageTextDisplayMode;//[Offset: 0x6, Size: 0x1]

--------------------------------
Class: SensitivityUserSettings
	FloatValue Sensitivity_Free;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_SecondarySkills;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_SuperSkills;//[Offset: 0x8, Size: 0x4]
	CameraSensitivityData Sensitivity_NoShoot;//[Offset: 0xc, Size: 0x20]
	CameraSensitivityData Sensitivity_Shoot;//[Offset: 0x2c, Size: 0x20]
	GyroscopeSensitivityData GyroscopeData;//[Offset: 0x4c, Size: 0x20]
	FloatValue Sensitivity_VehicleDriver;//[Offset: 0x6c, Size: 0x4]
	FloatValue Sensitivity_VehicleFire;//[Offset: 0x70, Size: 0x4]
	VehicleCameraSensitivityData Sensitivity_Vehicle_NoShoot;//[Offset: 0x74, Size: 0xc]
	VehicleCameraSensitivityData Sensitivity_Vehicle_Shoot;//[Offset: 0x80, Size: 0xc]

--------------------------------
Class: CameraSensitivityData
	FloatValue Sensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue Sensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue Sensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue Sensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: GyroscopeSensitivityData
	FloatValue GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue GyroscopeSensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue GyroscopeSensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: VehicleCameraSensitivityData
	FloatValue Sensitivity_Lens_Two;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ShakeUserSettings
	enum ShakeMainStatus;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: VehicleControlUserSettings
	enum WheeledVehicleDriveType;//[Offset: 0x0, Size: 0x1]
	bool bCanAdjustInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanAutoSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	enum LastWheeledVehicleDriveType;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: ChatOperatorUserSettings
	enum Speaker;//[Offset: 0x0, Size: 0x1]
	enum Mic;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: SolarGameSettingsRange.Object
	SoundSettingsRange SoundSettings;//[Offset: 0x28, Size: 0x20]
	SensitivitySettingsRange SensitivitySettings;//[Offset: 0x48, Size: 0x118]
	GraphicsSettingsRange GraphicsSettings;//[Offset: 0x160, Size: 0x8]

--------------------------------
Class: SoundSettingsRange
	RangeData Sound_Global;//[Offset: 0x0, Size: 0x8]
	RangeData Sound_Action;//[Offset: 0x8, Size: 0x8]
	RangeData Sound_BackGround;//[Offset: 0x10, Size: 0x8]
	RangeData Sound_Character;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: RangeData
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SensitivitySettingsRange
	RangeData Sensitivity_Free;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_SecondarySkills;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_SuperSkills;//[Offset: 0x10, Size: 0x8]
	CameraSensitivityRangeData Sensitivity_NoShoot;//[Offset: 0x18, Size: 0x40]
	CameraSensitivityRangeData Sensitivity_Shoot;//[Offset: 0x58, Size: 0x40]
	VehicleCameraSensitivityRangeData Sensitivity_Vehicle_NoShoot;//[Offset: 0x98, Size: 0x18]
	VehicleCameraSensitivityRangeData Sensitivity_Vehicle_Shoot;//[Offset: 0xb0, Size: 0x18]
	RangeData Sensitivity_VehicleDriver;//[Offset: 0xc8, Size: 0x8]
	RangeData Sensitivity_VehicleFire;//[Offset: 0xd0, Size: 0x8]
	GyroscopeSensitivityRangeData Sensitivity_GyroscopeData;//[Offset: 0xd8, Size: 0x40]

--------------------------------
Class: CameraSensitivityRangeData
	RangeData Sensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData Sensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData Sensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData Sensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: VehicleCameraSensitivityRangeData
	RangeData Sensitivity_Lens_Two;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: GyroscopeSensitivityRangeData
	RangeData GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData GyroscopeSensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData GyroscopeSensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: GraphicsSettingsRange
	RangeData AdaptationUIValue;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SolarLoginManager.SolarGameManager.Object
	void InitFromLogin();// 0x4abd312cd041
	void Init(SolarGameInstanceBase* GameInstance);// 0x4abc312cd041

--------------------------------
Class: SolarLockSettingsMgr.Object
	SolarLockSettings* CurLockSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	SolarLockSettings* DefaultLockSettings;//[Offset: 0x48, Size: 0x8]
	void SaveLockSettings();// 0x4abb312cd041
	void LoadLockSettings();// 0x4aba312cd041
	void Init(SolarGameInstanceBase* GameInstance);// 0x4ab9312cd041

--------------------------------
Class: SolarLockSettings.SaveGame.Object
	<int,bool> FeaturesLockStatus;//[Offset: 0x28, Size: 0x50]
	void CopyFrom(SolarLockSettings* InLockSettings);// 0x4ab8312cd041

--------------------------------
Class: SolarGameProgressManager.SolarGameManager.Object
	delegate OnGameStart;//[Offset: 0x38, Size: 0x10]
	void OnWorldConditionsCompleted();// 0x22b9312cd041
	void OnStreamingLevelComplete();// 0x22b8312cd041
	void OnShadersCompileComplete();// 0x22b7312cd041
	void OnGameStart__DelegateSignature();// 0x22b6312cd041
	void K2_ReceiveGlobalConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x22b5312cd041
	void K2_ReceiveConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x22b4312cd041
	void K2_OnGlobalConditionCompleted(GameplayTag CompletedCondition);// 0x22b3312cd041
	void K2_OnConditionCompleted(World* CurrentWorld, GameplayTag CompletedCondition);// 0x22b2312cd041
	bool IsGameStartNeedCondition(const Object* WorldContextObject, out const GameplayTag InCondition);// 0x22b1312cd041
	bool IsConditionInList(out const GameplayTag InCondition, World* WorldCheck);// 0x22b0312cd041
	bool IsAllStartGameConditionCompleted(World* WorldCheck);// 0x22af312cd041
	bool InitGameStartCondition(World* CurrentWorld, GameplayTagContainer ConditionList);// 0x22ae312cd041
	bool HasGameStarted(const Object* WorldContextObject);// 0x22ad312cd041
	SolarGameProgressManager* Get(const Object* WorldContextObject);// 0x22ac312cd041

--------------------------------
Class: SolarABTestManager.SolarGameManager.Object

--------------------------------
Class: SolarHttpManager.SolarGameManager.Object
	<FString,int> ReportStr2ReprotTimes;//[Offset: 0x40, Size: 0x50]
	int ReportRetryTimes;//[Offset: 0x90, Size: 0x4]
	delegate OnImgUploaded;//[Offset: 0x98, Size: 0x10]
	int Jank;//[Offset: 0xc4, Size: 0x4]
	int BigJank;//[Offset: 0xc8, Size: 0x4]
	float FPS25;//[Offset: 0xcc, Size: 0x4]
	int PeakPlayerNum;//[Offset: 0xf8, Size: 0x4]
	int PeakAINum;//[Offset: 0xfc, Size: 0x4]
	int PeakVehicleNum;//[Offset: 0x100, Size: 0x4]
	void UploadToHTTP(FString URL, FString str);// 0x22d6312cd041
	void UploadImg(out const int AppId, out const int AppUid, FString AppToken, out const int GameID, out const int Uid, FString SourceImgPath);// 0x22d5312cd041
	FString StringToBase64(FString str);// 0x22d4312cd041
	void StopRecordJank();// 0x22d3312cd041
	void StartRecordJank();// 0x22d2312cd041
	void ResetPerfData(bool bKeepCurrentData);// 0x22d1312cd041
	void ReportAbnormalPlayerWeaponToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InAttackLocation, FString InHitLocation, FString InHitBoneScale, FString InWeaponBlueprintName);// 0x22d0312cd041
	void ReportAbnormalPlayerVehicleToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InVehiclePreviousLocation, FString InVehiclePresentLocation, FString InVehicleBlueprintName);// 0x22cf312cd041
	void ReportAbnormalPlayerToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue);// 0x22ce312cd041
	void ReCordOnlineError(FString InStr);// 0x22cd312cd041
	void OnImgUploaded__DelegateSignature(int RespCode, FString RespMsg, FString ImgUrl);// 0x22cc312cd041
	void InitializeDelegates();// 0x22cb312cd041
	FString GetHttpReportUrl();// 0x22ca312cd041
	float GetAvgNum(int PerfType);// 0x22c9312cd041
	void ClearDelegates();// 0x22c8312cd041
	void CleanPerfDirtyData();// 0x22c7312cd041
	FString Base64ToMD5(FString str);// 0x22c6312cd041

--------------------------------
Class: SolarActivityManager.SolarGameManager.Object

--------------------------------
Class: SolarTutorialManager.SolarGameManager.Object
	enum CurrentTutorialStage;//[Offset: 0x52, Size: 0x1]
	delegate OnRegisterEvent;//[Offset: 0x58, Size: 0x10]
	delegate OnStepActionBegan;//[Offset: 0x68, Size: 0x10]
	delegate OnStepActionEnded;//[Offset: 0x78, Size: 0x10]
	delegate OnStepActionReset;//[Offset: 0x88, Size: 0x10]
	delegate OnStepActionDisposed;//[Offset: 0x98, Size: 0x10]
	TutorialGlobalConfig* TutorialGlobalConfig;//[Offset: 0xf8, Size: 0x8]
	<int,TutorialTableRow> TutorialTableMapRows;//[Offset: 0x100, Size: 0x50]
	TutorialActionTableRow[] ActionTableRows;//[Offset: 0x150, Size: 0x10]
	<int,TutorialConditionTableRow> ConditionTableMapRows;//[Offset: 0x160, Size: 0x50]
	<int,Tutorial*> Tutorials;//[Offset: 0x1b0, Size: 0x50]
	bool bIsConditionCheckCodeParsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364, Size: 0x1]
	int64 LastCheckTimestamp;//[Offset: 0x368, Size: 0x8]
	FString TutorialDataTablePath;//[Offset: 0x370, Size: 0x10]
	FString ActionDataTablePath;//[Offset: 0x380, Size: 0x10]
	FString ConditionDataTablePath;//[Offset: 0x390, Size: 0x10]
	FString TutorialGlobalConfigPath;//[Offset: 0x3a0, Size: 0x10]
	<uint16,FName> OriginCheckFuncNames;//[Offset: 0x3b0, Size: 0x50]
	<uint16,Function*> CheckFuncs;//[Offset: 0x400, Size: 0x50]
	<FString,CacheConditionInfo> CacheRanConditions;//[Offset: 0x460, Size: 0x50]
	TutorialLevelSaveGame* CurrentTutorialLevelSaveGame;//[Offset: 0x4c0, Size: 0x8]
	FString[] TriggerWidgetClicked(out const FString[] Params);// 0x5470312cd041
	FString[] TriggerWeaponSlotHasSpecifiedItem(out const FString[] Params);// 0x546f312cd041
	FString[] TriggerUseSpecifiedWeaponAbility(out const FString[] Params);// 0x546e312cd041
	FString[] TriggerUseSpecifiedVehicleWeapon(out const FString[] Params);// 0x546d312cd041
	FString[] TriggerUseSpecifiedVehicleAbility(out const FString[] Params);// 0x546c312cd041
	void TriggerTutorialModuleEvents(enum Module);// 0x546b312cd041
	FString[] TriggerTutorialLevelDone(out const FString[] Params);// 0x546a312cd041
	void TriggerTutorialEvents(out enum[] TriggerTypeArrays, bool bPostTrigger);// 0x5469312cd041
	void TriggerTutorialEventInternal(byte TriggerID);// 0x5468312cd041
	void TriggerTutorialEvent(enum TriggerType, bool bPostTrigger);// 0x5467312cd041
	FString[] TriggerSprintingContinuously(out const FString[] Params);// 0x5466312cd041
	FString[] TriggerShieldNotFull(out const FString[] Params);// 0x5465312cd041
	FString[] TriggerRunningStep(out const FString[] Params);// 0x5464312cd041
	FString[] TriggerPlayerLevelGreaterThan(out const FString[] Params);// 0x5463312cd041
	FString[] TriggerPlayerInTargetStage(out const FString[] Params);// 0x5462312cd041
	FString[] TriggerOpenTreasureBox(out const FString[] Params);// 0x5461312cd041
	FString[] TriggerOpenBigMapUMG(out const FString[] Params);// 0x5460312cd041
	FString[] TriggerNearAirDropBox(out const FString[] Params);// 0x545f312cd041
	FString[] TriggerJumpBegin(out const FString[] Params);// 0x545e312cd041
	FString[] TriggerHasTakenDamage(out const FString[] Params);// 0x545d312cd041
	FString[] TriggerHasSpecifiedItem(out const FString[] Params);// 0x545c312cd041
	FString[] TriggerHasSpecifiedEquipmentByType(out const FString[] Params);// 0x545b312cd041
	FString[] TriggerFeatureUnlock(out const FString[] Params);// 0x545a312cd041
	void TriggerEvent(enum Module);// 0x5459312cd041
	FString[] TriggerEquipSpecifiedWeapon(out const FString[] Params);// 0x5458312cd041
	FString[] TriggerBotAIDying(out const FString[] Params);// 0x5457312cd041
	FString[] TriggerApproachElectronicTreasureBox(out const FString[] Params);// 0x5456312cd041
	FString[] TriggerAirDropBoxLanded(out const FString[] Params);// 0x5455312cd041
	void TickActivatedTutorials();// 0x5454312cd041
	void SetWidgetInteractionFlag(FString InWidgetName, enum InWidgetInteractionFlag);// 0x5453312cd041
	void SetTutorialTipsUIInteractionFlag(int TutorialID, bool boolChange);// 0x5452312cd041
	void SetSignNameBoolChange(FString SignName, bool NboolChangeum);// 0x5451312cd041
	void SetFlagNameIntCount(FString FlagName, int Num);// 0x5450312cd041
	void SetAirDropBoxLandedAddOneNum(int Value);// 0x544f312cd041
	void SaveTutorialLevelSaveGame();// 0x544e312cd041
	void SaveLevelTutorialID(FString InLevelName, int InTutorialID);// 0x544d312cd041
	void SaveLevelTutorialHasFinished(FString InLevelName, bool InFinished);// 0x544c312cd041
	void SaveLevelPlayerStartTag(FString InLevelName, FString InPlayerStartTag);// 0x544b312cd041
	void ReceivePostSetupData();// 0x544a312cd041
	void ReceiveOnSingleTutorialStart(int TutorialID);// 0x5449312cd041
	void ReceiveOnSingleTutorialFinished(int TutorialID);// 0x5448312cd041
	void ReceiveOnPostLoadMapWithWorld(FString LevelName);// 0x5447312cd041
	void ReceiveOnAllTutorialsFinished();// 0x5446312cd041
	void ReceiveLoadTutorialLevelData();// 0x5445312cd041
	void ReceiveLoadData();// 0x5444312cd041
	void ReceiveClearData();// 0x5443312cd041
	void OnPostLoadMap(FString LevelName);// 0x5442312cd041
	bool IsInTutorialLevel();// 0x5441312cd041
	void InitGuideActorByActionID(int[] ActionIDs, TutorialLevelInteractableActor* TutorialGuideActor);// 0x5440312cd041
	bool HasAnyTutorialPlaying();// 0x543f312cd041
	bool HasAnyMandatoryTutorialPlaying();// 0x543e312cd041
	void GM_OpenUI(int ID);// 0x543d312cd041
	void GM_CloseUI(int ID);// 0x543c312cd041
	enum GetWidgetInteractionFlag(FString InWidgetName);// 0x543b312cd041
	bool GetTutorialTipsUIInteractionFlag(int TutorialID);// 0x543a312cd041
	int GetTutorialSingleRoundTriggerMax(int TutorialID);// 0x5439312cd041
	TutorialLevelSaveGame* GetTutorialLevelSaveGame();// 0x5438312cd041
	bool GetSignNameBoolChange(FString SignName);// 0x5437312cd041
	int GetLevelTutorialID(FString InLevelName, int DefaultValue);// 0x5436312cd041
	bool GetLevelTutorialHasFinished(FString InLevelName, bool DefaultValue);// 0x5435312cd041
	int GetFlagNameIntCount(FString FlagName);// 0x5434312cd041
	byte GetCurrentPlayerLevel();// 0x5433312cd041
	TutorialActionTableRow GetActionDataByID(int ActionDataID);// 0x5432312cd041
	void EnterTutorialLevel(FString LevelName, int Proficiency);// 0x5431312cd041
	bool CheckTutorialTipUIOnClick(out const FString[] InParams);// 0x5430312cd041
	void CheckTutorials(enum InTutorialModule, float InCheckInterval, bool bForceCheck);// 0x542f312cd041
	bool CheckIfWidgetReleased(out const FString[] InParams);// 0x542e312cd041
	bool CheckIfWidgetPressed(out const FString[] InParams);// 0x542d312cd041
	bool CheckIfWidgetPlayAnimationFinish(out const FString[] InParams);// 0x542c312cd041
	bool CheckIfWidgetClicked(out const FString[] InParams);// 0x542b312cd041
	bool CheckIfWeaponSlotHasSpecifiedItem(out const FString[] InParams);// 0x542a312cd041
	bool CheckIfUIPanelOpened(out const FString[] InParams);// 0x5429312cd041
	bool CheckIfTutorialLevelDone(out const FString[] InParams);// 0x5428312cd041
	bool CheckIfTakeDamage(out const FString[] InParams);// 0x5427312cd041
	bool CheckIfSprintingContinuously(out const FString[] InParams);// 0x5426312cd041
	bool CheckIfShieldNotFull();// 0x5425312cd041
	bool CheckIfRunningStep(out const FString[] InParams);// 0x5424312cd041
	bool CheckIfReloading();// 0x5423312cd041
	bool CheckIfRechargingShield();// 0x5422312cd041
	bool CheckIfPlayerLevel(out const FString[] InParams);// 0x5421312cd041
	bool CheckIfPlayerInTargetScene(out const FString[] InParams);// 0x5420312cd041
	bool CheckIfOpenBigMapUMG();// 0x541f312cd041
	bool CheckIfNearAirDropBox();// 0x541e312cd041
	bool CheckIfJumpBegin();// 0x541d312cd041
	bool CheckIfJetFlyingVertically();// 0x541c312cd041
	bool CheckIfJetFlyingHorizontally();// 0x541b312cd041
	bool CheckIfInWater();// 0x541a312cd041
	bool CheckIfInVehicle();// 0x5419312cd041
	bool CheckIfInAir();// 0x5418312cd041
	bool CheckIfHasSpecifiedItem(out const FString[] InParams);// 0x5417312cd041
	bool CheckIfHasSpecifiedEquipmentByType(out const FString[] InParams);// 0x5416312cd041
	bool CheckIfHasSpecifiedEquipmentById(out const FString[] InParams);// 0x5415312cd041
	bool CheckIfHasShield();// 0x5414312cd041
	bool CheckIfHasMatched();// 0x5413312cd041
	bool CheckIfGrowTaskInLevelReceivedAnimationFinish(out const FString[] InParams);// 0x5412312cd041
	bool CheckIfGrowLevelRewardIsInStatus(out const FString[] InParams);// 0x5411312cd041
	bool CheckIfFeatureUnlock(out const FString[] InParams);// 0x5410312cd041
	bool CheckIfFeatureOpen(out const FString[] InParams);// 0x540f312cd041
	bool CheckIfEquipSpecifiedWeapon(out const FString[] InParams);// 0x540e312cd041
	bool CheckIfDying();// 0x540d312cd041
	bool CheckIfDead();// 0x540c312cd041
	bool CheckIfCurrentWeaponAmmoFull();// 0x540b312cd041
	bool CheckIfConsumingMedicine();// 0x540a312cd041
	bool CheckIfClaimBattlePassLevelReward(out const FString[] InParams);// 0x5409312cd041
	bool CheckIfCanUseSpecifiedWeaponAbility(out const FString[] InParams);// 0x5408312cd041
	bool CheckIfCanUseSpecifiedVehicleWeapon(out const FString[] InParams);// 0x5407312cd041
	bool CheckIfCanUseSpecifiedVehicleAbility(out const FString[] InParams);// 0x5406312cd041
	bool CheckIfCanOpenTreasureBox();// 0x5405312cd041
	bool CheckIfCanJetFlyVertically();// 0x5404312cd041
	bool CheckIfCanJetFlyHorizontally();// 0x5403312cd041
	bool CheckIfBoughtBattlePass();// 0x5402312cd041
	bool CheckIfBotAIDying(out const FString[] InParams);// 0x5401312cd041
	bool CheckIfBattlePassLevelGreaterThan(out const FString[] InParams);// 0x5400312cd041
	bool CheckIfApproachElectronicTreasureBox();// 0x53ff312cd041
	bool CheckIfAlreadyTriggeredMaxCount(out const FString[] InParams);// 0x53fe312cd041
	bool CheckIfAirDropBoxLanded();// 0x53fd312cd041
	bool CheckConsumeItemButtonType(out const FString[] InParams);// 0x53fc312cd041

--------------------------------
Class: TutorialGlobalConfig.DataAsset.Object
	bool bSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	<FString,enum> MapName2TutorialStage;//[Offset: 0x38, Size: 0x50]
	float SubtitleDisappearTime;//[Offset: 0x88, Size: 0x4]
	float AsyncLoadUIDelayTime;//[Offset: 0x8c, Size: 0x4]
	float SameConditionCheckInterval;//[Offset: 0x90, Size: 0x4]
	TutorialLevelConfig TutorialLevelConfig;//[Offset: 0x98, Size: 0x38]
	enum GetTutorialStageByLevelName(FString LevelName);// 0x53fb312cd041
	FString GetTutorialLevelMainMapPath();// 0x53fa312cd041
	FString GetTutorialLevelMainMapName();// 0x53f9312cd041
	TutorialLevelConfigData GetTutorialLevelConfigDataByName(FString LevelName);// 0x53f8312cd041

--------------------------------
Class: TutorialLevelConfig
	TutorialLevelConfigData[] LevelConfigDatas;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath MainMapPath;//[Offset: 0x10, Size: 0x18]
	int VeteranTutorialID;//[Offset: 0x28, Size: 0x4]
	float RepeatOperationTime;//[Offset: 0x2c, Size: 0x4]
	float WaitToEndTime;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TutorialLevelConfigData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	int[] TutorialIds;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TutorialTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	enum Type;//[Offset: 0x20, Size: 0x1]
	enum TriggerStage;//[Offset: 0x21, Size: 0x1]
	enum Module;//[Offset: 0x22, Size: 0x1]
	TutorialSoftCondition TriggerCondition;//[Offset: 0x28, Size: 0x28]
	int EndNum;//[Offset: 0x50, Size: 0x4]
	TutorialSoftCondition ForeverClosedCondition;//[Offset: 0x58, Size: 0x28]
	int[] ActionIDs;//[Offset: 0x80, Size: 0x10]
	bool bUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bMandatory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool bStartUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]
	bool bWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93, Size: 0x1]
	bool biOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAndroid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]

--------------------------------
Class: TutorialTableRowBase.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TutorialSoftCondition
	FString ConditionStr;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ConditionBP;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: TutorialActionTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	TutorialTipAndEffectUI TutorialTipAndEffectUI;//[Offset: 0x20, Size: 0x88]
	TutorialNoticeUI TutorialNoticeUI;//[Offset: 0xa8, Size: 0x30]
	TutorialSpecialUI TutorialSpecialUI;//[Offset: 0xd8, Size: 0x38]
	TutorialSubtitle TutorialSubtitle;//[Offset: 0x110, Size: 0x18]
	bool bRepeatTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	TutorialRepeatTip RepeatTip;//[Offset: 0x130, Size: 0x18]
	TutorialBackgroundMusicTableRow TutorialBackgroundMusic;//[Offset: 0x148, Size: 0x20]
	TutorialSoftCondition EndCondition;//[Offset: 0x168, Size: 0x28]
	TutorialSoftCondition InterruptCondition;//[Offset: 0x190, Size: 0x28]
	float WaitTime;//[Offset: 0x1b8, Size: 0x4]
	float MinExecuteTime;//[Offset: 0x1bc, Size: 0x4]
	int[] OpenBehaviors;//[Offset: 0x1c0, Size: 0x10]
	int[] CloseBehaviors;//[Offset: 0x1d0, Size: 0x10]
	int FixedTriggerAreaID;//[Offset: 0x1e0, Size: 0x4]
	int[] BotAISpawnIDs;//[Offset: 0x1e8, Size: 0x10]
	int[] BotAIDeathIDs;//[Offset: 0x1f8, Size: 0x10]
	int[] BotAIOnVehicleSpawnIDs;//[Offset: 0x208, Size: 0x10]
	int[] BotAIOnVehicleDeathIDs;//[Offset: 0x218, Size: 0x10]

--------------------------------
Class: TutorialTipAndEffectUI
	FString LinkedComponent;//[Offset: 0x0, Size: 0x10]
	FString LimitedListView;//[Offset: 0x10, Size: 0x10]
	SoftObjectPath TutorialExpressionBPPath;//[Offset: 0x20, Size: 0x18]
	SoftObjectPath TutorialEffectBPPath;//[Offset: 0x38, Size: 0x18]
	Vector2D TutorialBPLocation;//[Offset: 0x50, Size: 0x8]
	bool HorizontalDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int LocTextID;//[Offset: 0x5c, Size: 0x4]
	float LocTextDuration;//[Offset: 0x60, Size: 0x4]
	float DelayShowUITime;//[Offset: 0x64, Size: 0x4]
	float WaitUIShowTime;//[Offset: 0x68, Size: 0x4]
	FString TextUISlotAnchorsAndAlignment;//[Offset: 0x70, Size: 0x10]
	enum UIParent;//[Offset: 0x80, Size: 0x1]
	bool OpenEffectSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool NeedMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]

--------------------------------
Class: TutorialNoticeUI
	SoftObjectPath NoticeUIBPPath;//[Offset: 0x0, Size: 0x18]
	FString NoticeUISlotAnchorsAndAlignment;//[Offset: 0x18, Size: 0x10]
	int NoticeUILocTextId;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: TutorialSpecialUI
	SoftObjectPath TutorialSpecialUIBPPath;//[Offset: 0x0, Size: 0x18]
	FString NeedTouchOffLinkNodeButton;//[Offset: 0x18, Size: 0x10]
	FString ClickTouchOffLinkNodeButton;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: TutorialSubtitle
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x0, Size: 0x10]
	float DelayTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: TutorialSingleSubtitle
	FString LocalTextId;//[Offset: 0x0, Size: 0x10]
	FString Voice;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TutorialRepeatTip
	float StartTime;//[Offset: 0x0, Size: 0x4]
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TutorialBackgroundMusicTableRow
	FString TutorialPlayMusicName;//[Offset: 0x0, Size: 0x10]
	FString TutorialStopMusicName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TutorialConditionTableRow.TutorialTableRowBase.TableRowBase
	byte TriggerType;//[Offset: 0xc, Size: 0x1]
	FString[] Parameters;//[Offset: 0x10, Size: 0x10]
	FString Description;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TutorialLevelInteractableActor.Actor.Object
	void UnregisterEvent();// 0x5600312cd041
	void RegisterEvent();// 0x55ff312cd041
	SolarTutorialManager* GetSolarTutorialManager();// 0x55fe312cd041

--------------------------------
Class: TutorialLevelSaveGame.SaveGame.Object
	<FString,TutorialLevelSaveData> TutorialLevelSaveDatas;//[Offset: 0x28, Size: 0x50]
	enum PlayerProficiency;//[Offset: 0x78, Size: 0x1]

--------------------------------
Class: TutorialLevelSaveData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	FString PlayerStartTag;//[Offset: 0x10, Size: 0x10]
	bool bTutorialHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int TutorialID;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: Tutorial.Object
	TutorialTableRow Data;//[Offset: 0x68, Size: 0x98]
	TutorialTriggerCondition* TriggerConditionBP;//[Offset: 0x100, Size: 0x8]
	TutorialTaskSequenceAction* TutorialTask;//[Offset: 0x108, Size: 0x8]
	void Stop();// 0x55f2312cd041
	void ReceiveOnStart();// 0x55f1312cd041
	void ReceiveOnSingleTaskFinish();// 0x55f0312cd041
	void ReceiveOnFinish();// 0x55ef312cd041
	void OnSingleTaskFinish();// 0x55ee312cd041
	TutorialTableRow GetTableRowData();// 0x55ed312cd041
	int GetCurrentFinishNum();// 0x55ec312cd041

--------------------------------
Class: TutorialTriggerCondition.TutorialCondition.Object
	SolarTutorialManager* GetSolarTutorialManager();// 0x5618312cd041
	bool CheckSatisfy(out const TutorialTableRow InData);// 0x5617312cd041

--------------------------------
Class: TutorialCondition.Object
	FString GetWorldName();// 0x55f4312cd041
	SolarCharacter* GetPlayer();// 0x55f3312cd041

--------------------------------
Class: TutorialTaskSequenceAction.SequenceNode.ActionNode.Object

--------------------------------
Class: SequenceNode.ActionNode.Object
	ActionNode*[] Nodes;//[Offset: 0x70, Size: 0x10]
	ActionNode*[] ExecutingNodes;//[Offset: 0x80, Size: 0x10]
	int TotalCount();// 0x43ab312cd041
	ActionNode* GetCurrentExecutingNode();// 0x43aa312cd041
	SequenceNode* Append(ActionNode* Node);// 0x43a9312cd041

--------------------------------
Class: ActionNode.Object
	delegate OnBeganCallback;//[Offset: 0x28, Size: 0x10]
	delegate OnEndedCallback;//[Offset: 0x38, Size: 0x10]
	delegate OnResetCallback;//[Offset: 0x48, Size: 0x10]
	delegate OnDisposedCallback;//[Offset: 0x58, Size: 0x10]
	void Reset();// 0x3c5b312cd041
	bool Finished();// 0x3c5a312cd041
	void Finish();// 0x3c59312cd041
	bool Execute(float DeltaTime);// 0x3c58312cd041
	bool Disposed();// 0x3c57312cd041
	void Dispose();// 0x3c56312cd041

--------------------------------
Class: CacheConditionInfo

--------------------------------
Class: SolarVibrateManager.SolarGameManager.Object
	GameplayVibrateDataAsset* GameplayVibrateDataAsset;//[Offset: 0x50, Size: 0x8]
	<enum,enum> CurrentVibrateCategoryIntensity;//[Offset: 0x58, Size: 0x50]
	DataTable* WeaponVibrateTable;//[Offset: 0xa8, Size: 0x8]
	VibrateConfig* VibrateConfig;//[Offset: 0xb0, Size: 0x8]
	enum WeaponVibrateFactor;//[Offset: 0xb8, Size: 0x1]
	float CacheWeaponChargeTime;//[Offset: 0xbc, Size: 0x4]
	void Stop();// 0x54cf312cd041
	void SetWeaponVibrateFactor();// 0x54ce312cd041
	void SetVibrateAbilityEnable(bool bOnEnable);// 0x54cd312cd041
	void SetGameplayVibrateIntensityByUserSetting();// 0x54cc312cd041
	void SetGameplayVibrateIntensity(enum Category, enum Intensity);// 0x54cb312cd041
	void SendLoopParam(int Amplitude, int Interval);// 0x54ca312cd041
	void PlayWeaponVibrate(int InWeaponID, enum InType, float InChargeTime);// 0x54c9312cd041
	void Play(FString Name, int Duration, int Loop, int Priority, int Interval, int Amplitude);// 0x54c8312cd041
	bool GetVibrateAbilityEnable();// 0x54c7312cd041

--------------------------------
Class: GameplayVibrateDataAsset.DataAsset.Object
	<enum,VibrateIntensityPlayParams> CategoryIntensityMap;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: VibrateIntensityPlayParams
	<enum,VibratePlayParams> IntensityMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: VibratePlayParams
	FString ClipToPlay;//[Offset: 0x0, Size: 0x10]
	int Duration;//[Offset: 0x10, Size: 0x4]
	int Loop;//[Offset: 0x14, Size: 0x4]
	int Priority;//[Offset: 0x18, Size: 0x4]
	int Interval;//[Offset: 0x1c, Size: 0x4]
	int Amplitude;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: VibrateConfig.DataAsset.Object
	DataTable* dataTab;//[Offset: 0x30, Size: 0x8]
	<enum,float> WeaponVibrateFactorMap;//[Offset: 0x38, Size: 0x50]
	SoftObjectPath WeaponDataTabPath;//[Offset: 0x88, Size: 0x18]

--------------------------------
Class: SettlementStageManager.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	int CurStageIndex;//[Offset: 0x38, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x3c, Size: 0x4]
	DataTable* SettlementConfig;//[Offset: 0x40, Size: 0x8]
	SettlementFormula* Formula;//[Offset: 0x48, Size: 0x8]
	void UpdateModeConfig(const int InConfigID);// 0x43c5312cd041
	void SkipToTarget();// 0x43c4312cd041
	void ShowNextStage();// 0x43c3312cd041
	void ShowDiePage();// 0x43c2312cd041
	void Init();// 0x43c1312cd041
	class SolarUWSettlementBase GetSettlementUIClass();// 0x43c0312cd041
	int GetSettlementStageID();// 0x43bf312cd041
	SettlementConfig GetSettlementConfigRow();// 0x43be312cd041
	SettlementFormula* GetFormula();// 0x43bd312cd041
	FString GetClassRelativePathName(const class Object InClass);// 0x43bc312cd041
	void CloseDiePage();// 0x43bb312cd041

--------------------------------
Class: SettlementFormula.Actor.Object
	FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x43b9312cd041
	int GetZomborg(out const SettlementParam_Zomborg InParam);// 0x43b8312cd041
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x43b7312cd041
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam);// 0x43b6312cd041
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x43b5312cd041
	int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam);// 0x43b4312cd041
	FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam);// 0x43b3312cd041
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerId, out FString PBName);// 0x43b2312cd041
	float GetKDA(out const SettlementParam_KDA InParam);// 0x43b1312cd041
	FString[] GetGroupResultPlayerExData(FString SolarPlayerId, out FString PBName);// 0x43b0312cd041
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam);// 0x43af312cd041
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x43ae312cd041
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x43ad312cd041
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param);// 0x43ac312cd041

--------------------------------
Class: SettlementParam_Zomborg
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float Lifetime;//[Offset: 0x8, Size: 0x4]
	int PlayerRank;//[Offset: 0xc, Size: 0x4]
	float GoldPunishRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SettlementParam_WeaponExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float UseTime;//[Offset: 0x8, Size: 0x4]
	int WeaponKillNum;//[Offset: 0xc, Size: 0x4]
	int WeaponAssitNum;//[Offset: 0x10, Size: 0x4]
	float ExpRatio;//[Offset: 0x14, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SettlementParam_PageParam
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int WeaponExpSettlmentNum;//[Offset: 0x4, Size: 0x4]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SettlementParam_CommonExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float Lifetime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x24, Size: 0x4]
	float CoinPunishRatio;//[Offset: 0x28, Size: 0x4]
	int RankCorePunish;//[Offset: 0x2c, Size: 0x4]
	int BaseExp;//[Offset: 0x30, Size: 0x4]
	float ExpRatio;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: SettlementParam_KDA
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DeathNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SettlementParam_MVP
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float Lifetime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SolarUWSettlementBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MvpCharacterID;//[Offset: 0x340, Size: 0x4]
	int MvpSkinID;//[Offset: 0x344, Size: 0x4]
	SettlementStageManager* SettlementStageManager;//[Offset: 0x348, Size: 0x8]
	void SetStageManager(SettlementStageManager* InStageManager);// 0x548e312cd041
	void PlayMvpCharacterVoice();// 0x548d312cd041

--------------------------------
Class: SettlementConfig.TableRowBase
	int SettlementID;//[Offset: 0x8, Size: 0x4]
	SettlementStageConfig StageConfig;//[Offset: 0x10, Size: 0x40]
	class SettlementFormula* Formula;//[Offset: 0x50, Size: 0x28]
	bool IsValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: SettlementStageConfig
	class SolarUWSettlementBase* Page_Die;//[Offset: 0x0, Size: 0x28]
	int Page_SkipIndex;//[Offset: 0x28, Size: 0x4]
	class SolarUWSettlementBase[] SettlementStage;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: CGMCrossLevelDataMgr.Object
	<FString,Object*> CrossLevelData;//[Offset: 0x28, Size: 0x50]
	void RegistryCrossLevelData(FString InSoltName, Object* InDataObj);// 0x3d77312cd041
	Object* GetCrossLevelData(FString InSoltName);// 0x3d76312cd041

--------------------------------
Class: SolarGraphicSettings.Object
	uint32 CurrentActiveColorThemeIndex;//[Offset: 0x28, Size: 0x4]
	FrameRateLevelItem FrameRateLevelItem;//[Offset: 0x2c, Size: 0x10]
	<enum,enum> DefaultQualityToDefaultFrameRateLevel;//[Offset: 0x70, Size: 0x50]
	<enum,MaxQualityConfig> DefaultAndCurQualityToMaxFrameRateLevel;//[Offset: 0xc0, Size: 0x50]
	int DefaultMSAALevel;//[Offset: 0x110, Size: 0x4]

--------------------------------
Class: FrameRateLevelItem
	enum FrameRateLevel;//[Offset: 0x0, Size: 0x1]
	float FrameRateLobby;//[Offset: 0x4, Size: 0x4]
	float FrameRateInGame;//[Offset: 0x8, Size: 0x4]
	float FrameRatePC;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaxQualityConfig
	<enum,enum> CurQualityToMaxFrameRateLevel;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: SolarAccessLuaDataUtils.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	void GetMatchResult(out MatchResult MatchResult);// 0x4429312cd041

--------------------------------
Class: MatchResult
	FString BattleID;//[Offset: 0x0, Size: 0x10]
	FString BattleAddr;//[Offset: 0x10, Size: 0x10]
	FString Token;//[Offset: 0x20, Size: 0x10]
	int ModeID;//[Offset: 0x30, Size: 0x4]
	int RuleID;//[Offset: 0x34, Size: 0x4]
	FString SelfPlayerID;//[Offset: 0x38, Size: 0x10]
	MatchResult_Group[] Groups;//[Offset: 0x48, Size: 0x10]
	FString MapName;//[Offset: 0x58, Size: 0x10]
	SoftObjectPath MapPath;//[Offset: 0x68, Size: 0x18]

--------------------------------
Class: MatchResult_Group
	int groupid;//[Offset: 0x0, Size: 0x4]
	MatchResult_Player[] Players;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MatchResult_Player
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	FString playerName;//[Offset: 0x10, Size: 0x10]
	int AvatarID;//[Offset: 0x20, Size: 0x4]
	int fightCharacterID;//[Offset: 0x24, Size: 0x4]
	int fightCharacterSkinID;//[Offset: 0x28, Size: 0x4]
	SoftObjectPath SkinConfigPath;//[Offset: 0x30, Size: 0x18]
	FString CharacterName;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SolarAkSoundManager.SolarGameManager.Object
	void SetVoiceLanguage();// 0x44d1312cd041
	void OnAkBankUnloadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x44d0312cd041
	void OnAkBankLoadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x44cf312cd041

--------------------------------
Class: KeyMappingManager.Object
	delegate OnKeyMappingUpdate;//[Offset: 0x120, Size: 0x10]
	delegate OnKeyMappingConfirm;//[Offset: 0x130, Size: 0x10]
	delegate OnKeyboardUpdate;//[Offset: 0x140, Size: 0x10]
	<FString,FString> OccupiedKeyMap;//[Offset: 0x160, Size: 0x50]
	KeyMappingFileMgr* KeyMappingFileMgr;//[Offset: 0x260, Size: 0x8]
	void SwitchKeyMappingPlanIndex(int PlanIndex);// 0x408e312cd041
	void SwitchKeyMapping(FString ActionName, int SettingIndex, bool Enable, bool Force);// 0x408d312cd041
	void ResetKeyMapping();// 0x408c312cd041
	bool IsComboKey(FString KeyName);// 0x408b312cd041
	void ImportKeyMappingSetting();// 0x408a312cd041
	bool HasKeyModified();// 0x4089312cd041
	FString[] GetAllActionNames(int PlanIndex);// 0x4088312cd041
	FString[] GetActionKeyMapping(FString ActionName, int PlanIndex, int SettingIndex);// 0x4087312cd041
	void ApplyResult();// 0x4086312cd041

--------------------------------
Class: KeyMappingFileMgr.Object

--------------------------------
Class: SolarEasyAntiCheatManager.Object
	bool EnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bEnableAntiCheatLauncherCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	void TestSendDSAction(const int ActionReason, FString ActionDetials);// 0x4718312cd041
	void SwitchAntiCheatState();// 0x4717312cd041
	void SendSteamAntiCheatRequest(const int ErrorCode);// 0x4716312cd041
	void ReportAntiCheatBI(const int ErrorCode);// 0x4715312cd041
	bool IsLaunchbyEOSBootstrapper();// 0x4714312cd041
	bool IsEOSSettingChanged();// 0x4713312cd041
	void EasyAntiCheatLogin(FString AppToken);// 0x4712312cd041
	void AntiCheatLauncherCheck();// 0x4711312cd041
	bool AntiCheatEosSettingCheck();// 0x4710312cd041

--------------------------------
Class: SolarSpecialEffectsMgr.Object

--------------------------------
Class: PakHashManager.Object
	delegate OnPakHashCheckFailed;//[Offset: 0x30, Size: 0x10]
	bool bEnablePakHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	<FString,FString> MountedPakHashMap;//[Offset: 0x60, Size: 0x50]
	bool IsPakFileHashsReady();// 0x41b3312cd041
	bool IsEnablePakHash();// 0x41b2312cd041
	<FString,FString> GetReadyPakFileHashs();// 0x41b1312cd041
	FString[] GetAllMountedPakNames();// 0x41b0312cd041
	bool CheckAllMountedPaks(out const <FString,FString> BasePakMap, out const <FString,FString> PatchPakMap);// 0x41af312cd041
	void CalculatePakFileMD5();// 0x41ae312cd041

--------------------------------
Class: SolarFontManager.Object
	Font* ChineseFont;//[Offset: 0x30, Size: 0x8]
	void SaveChineseFontSetting(bool bHasLoad);// 0x4774312cd041
	bool MergeCompositeFont(FString NewFontAssetPath);// 0x4773312cd041
	Font* LoadNewFont(FString NewFontAssetPath);// 0x4772312cd041
	bool IsNeedMergeChineseFont(bool bAutoLoad);// 0x4771312cd041
	void Init();// 0x4770312cd041

--------------------------------
Class: AndroidInputManager.Object
	delegate OnAndroidBackPressed;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: RegistedActorContainer

--------------------------------
Class: AntiCheatSetting
	int64 ID;//[Offset: 0x0, Size: 0x8]
	int64 ValueType;//[Offset: 0x8, Size: 0x8]
	double ValueStart;//[Offset: 0x10, Size: 0x8]
	double ValueEnd;//[Offset: 0x18, Size: 0x8]
	int64 Tolerance;//[Offset: 0x20, Size: 0x8]
	int64 ProbeInterval;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WeaponPartClipComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool IsSupportExtract();// 0x571a312cd041
	Rotator GetHandRotOffset();// 0x5719312cd041
	Vector GetHandLocOffset();// 0x5718312cd041
	float GetDropLifeSpan();// 0x5717312cd041
	FName GetCharacterHandSocket();// 0x5716312cd041
	FName GetCharacterHandInverseSocket();// 0x5715312cd041

--------------------------------
Class: WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PartID;//[Offset: 0x5f4, Size: 0x4]
	bool bDataAssetInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc, Size: 0x1]
	bool bMeshAssetsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fd, Size: 0x1]
	WeaponPartDataAsset* OrginDataAsset;//[Offset: 0x600, Size: 0x8]
	WeaponPartDataAsset* SkinPartDataAsset;//[Offset: 0x608, Size: 0x8]
	StaticMesh* PartFightMesh;//[Offset: 0x610, Size: 0x8]
	WeaponSkinData* WeaponSkin;//[Offset: 0x618, Size: 0x8]
	WeaponSkinPartData SkinMatchedPartData;//[Offset: 0x620, Size: 0x40]
	enum WeaponPartType;//[Offset: 0x662, Size: 0x1]
	void SwitchLOD(int LOD);// 0x5714312cd041
	void SetPartVisibility(bool bVisibility);// 0x5713312cd041
	void SetPartIDAndPartData(const int InPartID);// 0x5712312cd041
	void ResetSkin();// 0x5711312cd041
	void PartInitializeServer();// 0x5710312cd041
	void PartInitializeClient();// 0x570f312cd041
	void PartInitialize(const int InPartID);// 0x570e312cd041
	void OnLoadSkinDataCompleted();// 0x570d312cd041
	void OnLoadMeshDataCompleted();// 0x570c312cd041
	void OnLoadCompletedInternal(bool bSuccess);// 0x570b312cd041
	void OnLoadCompleted(bool bSuccess);// 0x570a312cd041
	bool IsValidPart();// 0x5709312cd041
	bool IsPartEnable();// 0x5708312cd041
	bool IsOnlyData();// 0x5707312cd041
	void InitializeMeshLOD();// 0x5706312cd041
	bool HasInitialized();// 0x5705312cd041
	enum GetPartType();// 0x5704312cd041
	int GetPartID();// 0x5703312cd041
	WeaponPartDataAsset* GetPartData();// 0x5702312cd041

--------------------------------
Class: WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponPartDataAsset.DataAsset.Object
	bool bOnlyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SoftObjectPath ViewStaticMeshPath;//[Offset: 0x38, Size: 0x18]
	Transform PreviewTransform;//[Offset: 0x50, Size: 0x30]
	SoftObjectPath FightStaticMeshPath;//[Offset: 0x80, Size: 0x18]
	SoftObjectPath PartIcon;//[Offset: 0x98, Size: 0x18]
	<int,Vector> SpecificScaleMap;//[Offset: 0xb0, Size: 0x50]
	WeaponPartWeaponAttributeDataAsset* WeaponAttributeConfig;//[Offset: 0x100, Size: 0x8]

--------------------------------
Class: WeaponPartWeaponAttributeDataAsset.DataAsset.Object
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x30, Size: 0x10]
	WeaponPartWeaponAttributeByWeaponType[] ModifiersByWeaponType;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: WeaponPartWeaponAttributeByWeaponType
	enum WeaponType;//[Offset: 0x0, Size: 0x1]
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x8, Size: 0x10]
	WeaponPartWeaponAttributeByWeaponID[] ModifiersByWeaponID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: WeaponPartWeaponAttributeByWeaponID
	int weaponid;//[Offset: 0x0, Size: 0x4]
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SolarVirtualBulletHitParameter
	byte ModeIndex;//[Offset: 0x0, Size: 0x1]
	int8 FireChargePhase;//[Offset: 0x1, Size: 0x1]
	float FireChargeTime;//[Offset: 0x4, Size: 0x4]
	int HitStartIndex;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize StartLoc;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize TargetLoc;//[Offset: 0x18, Size: 0xc]
	AmmoConfig* Ammo;//[Offset: 0x28, Size: 0x8]
	SolarWeaponHitAntiData[] HitAntiDatas;//[Offset: 0x30, Size: 0x10]
	HitResult[] Hits;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SolarWeaponHitAntiData
	Vector_NetQuantize RelavantHitLocationWithCharacter;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize HitBoneScale;//[Offset: 0xc, Size: 0xc]
	Quat HitBoneRotation;//[Offset: 0x20, Size: 0x10]
	Vector_NetQuantize AntiCheatCameraForwardLoc;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: SolarVirtualBulletSpawnParameter
	byte ModeIndex;//[Offset: 0x0, Size: 0x1]
	byte IsScopeOpen;//[Offset: 0x1, Size: 0x1]
	int8 FireChargePhase;//[Offset: 0x2, Size: 0x1]
	float FireChargeTime;//[Offset: 0x4, Size: 0x4]
	Vector_NetQuantize StartLoc;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize TargetLoc;//[Offset: 0x14, Size: 0xc]
	SolarVirtualBulletHomingTarget HomingTarget;//[Offset: 0x20, Size: 0x18]
	AmmoConfig* Ammo;//[Offset: 0x38, Size: 0x8]
	FString AntiData;//[Offset: 0x40, Size: 0x10]
	Actor* Target;//[Offset: 0x50, Size: 0x8]
	Vector HitTargetRelativeLocation;//[Offset: 0x58, Size: 0xc]
	Vector_NetQuantize AntiCheatCameraForwardLoc;//[Offset: 0x64, Size: 0xc]

--------------------------------
Class: SolarVirtualBulletHomingTarget
	bool bSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Actor* HomingTargetActor;//[Offset: 0x4, Size: 0x8]
	Vector CurrentLoc;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SpawnProjParam
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	byte Mode;//[Offset: 0x18, Size: 0x1]
	byte CurRocketNum;//[Offset: 0x19, Size: 0x1]
	bool bStartBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1]
	bool bTriggerAnim;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a, Size: 0x1]
	float Scale;//[Offset: 0x1c, Size: 0x4]
	float SpeedScale;//[Offset: 0x20, Size: 0x4]
	Actor* Target;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SolarSummonData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	Rotator Orientation;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: BulletHitData
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	int8 FireMode;//[Offset: 0x4, Size: 0x1]
	bool bValidHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	Vector WeaponLocation;//[Offset: 0x14, Size: 0xc]
	float ServerTimeSeconds;//[Offset: 0x20, Size: 0x4]
	float DamageScale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	SolarWeaponHitAntiData HitAntiData;//[Offset: 0x30, Size: 0x40]
	BulletHitDetailData HitDetailData;//[Offset: 0x70, Size: 0x4c]

--------------------------------
Class: MutiBulletHitData
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	int8 FireMode;//[Offset: 0x4, Size: 0x1]
	int8 IsScopeOpen;//[Offset: 0x5, Size: 0x1]
	bool bValidHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	Vector WeaponLocation;//[Offset: 0x14, Size: 0xc]
	Vector_NetQuantize AntiCheatCameraForwardLoc;//[Offset: 0x20, Size: 0xc]
	float ServerTimeSeconds;//[Offset: 0x2c, Size: 0x4]
	float DamageScale;//[Offset: 0x30, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x34, Size: 0x4]
	float LastFireTime;//[Offset: 0x38, Size: 0x4]
	SolarWeaponHitAntiData[] HitAntiDatas;//[Offset: 0x40, Size: 0x10]
	BulletHitDetailData[] HitDetailDataArray;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: PlaySoundParams
	bool HasSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool InSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int SoundFireAutoCount;//[Offset: 0x4, Size: 0x4]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: FireMode
	enum HoldAction;//[Offset: 0x0, Size: 0x1]
	byte Index;//[Offset: 0x1, Size: 0x1]
	int AmmoReserve;//[Offset: 0x8, Size: 0x4]
	int AmmoCapacity;//[Offset: 0xc, Size: 0x4]
	float FireRateAccumulation;//[Offset: 0x10, Size: 0x4]
	float FireRateAccumulationBurstInterval;//[Offset: 0x14, Size: 0x4]
	ParticleSystemComponent* BeamEffect;//[Offset: 0x38, Size: 0x8]
	ParticleSystemComponent* ChargingEffect;//[Offset: 0x40, Size: 0x8]
	AmmoConfig* Ammo;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SolarWeaponProjectileSpline.Actor.Object
	SplineComponent* Spline;//[Offset: 0x228, Size: 0x8]
	SolarSummonPreviewComponent* PreviewComponent;//[Offset: 0x234, Size: 0x8]
	SplineMeshComponent* SplineMeshComponentCache;//[Offset: 0x240, Size: 0x8]
	StaticMeshComponent* PreviewedStaticMesh;//[Offset: 0x248, Size: 0x8]
	SkeletalMeshComponent* PreviewedSkeletalMesh;//[Offset: 0x250, Size: 0x8]
	StaticMeshComponent* PreviewedRangeMesh;//[Offset: 0x258, Size: 0x8]
	SceneComponent* PreviewRoot;//[Offset: 0x260, Size: 0x8]
	void ShowHitPointAt(out const Vector Loc);// 0x555b312cd041
	void SetPreviewTransform(out const Vector PreviewLoc, out const Vector PreviewUpDir, out const Vector PreviewScale);// 0x555a312cd041
	void SetPoints(out const Vector[] Points);// 0x5559312cd041
	void SetNeedUpdateDisplayThrowTrajectory(bool Value);// 0x5558312cd041
	bool RequestDisplayPreview(SolarSummonDetectionComponent* InSummonDetectionComponent, out const Vector InSummonLocation, out const Vector InSummonNormal);// 0x5557312cd041
	void HideHitPoint();// 0x5556312cd041
	void HideAllSummonPreview();// 0x5555312cd041
	void Hide();// 0x5554312cd041
	SplineMeshComponent* GetSplineMeshComponent();// 0x5553312cd041
	void DrawSplineMesh(out const Vector[] InPredictPoints);// 0x5552312cd041
	void ChangeSummonPreviewAttachParent();// 0x5551312cd041

--------------------------------
Class: SolarSummonDetectionComponent.SolarPreviewDetectionComponent.ActorComponent.Object
	SolarQuickSummonProxy* QuickSummonProxy;//[Offset: 0x108, Size: 0x8]
	void ResetQucikSummonTimer();// 0x4e6a312cd041
	bool IsWithinQuickSummonTime(const float InDeltaTime);// 0x4e69312cd041

--------------------------------
Class: SolarPreviewDetectionComponent.ActorComponent.Object
	SoftObjectPath DetectionConfigPath;//[Offset: 0xb0, Size: 0x18]
	bool IsAllowPreview(out const Vector InLocation, out const Vector InNormal);// 0x4d73312cd041
	bool CheckIsPreviewValid(out const SolarSummonData InSummonData, bool InbAccept);// 0x4d72312cd041

--------------------------------
Class: SolarQuickSummonProxy.Object
	SolarSummonDetectionComponent* SummonDetectionComponent;//[Offset: 0x28, Size: 0x8]
	SolarSummonDetectionConfig* SummonConfig;//[Offset: 0x30, Size: 0x8]
	bool TryGetSummonHitResult(out HitResult OutHitResult, Actor* InSummoner, SolarSummonDetectionConfig* InSummonConfig);// 0x4d91312cd041
	Vector RotateDirection(out const Vector InDirection, out const Vector InNormal);// 0x4d90312cd041
	bool IsPlaceable(Actor* Summoner);// 0x4d8f312cd041
	bool IsCheckedWorldStatic(Actor* InActor, out const Vector InDirection, out const Vector InCheckOffset, float InLength);// 0x4d8e312cd041
	bool GetTraceHitResult(Actor* InSummoner, out const Vector InStart, out const Vector InEndPoint, out HitResult OutHitResult);// 0x4d8d312cd041
	bool GetImpactPoint(Actor* InSummoner, out const Vector InStart, out const Vector InEndPoint, out Vector OutLocation, out Vector OutNormal);// 0x4d8c312cd041
	bool FindPlaceableSpace(out const Vector InSummonLocation, out const Vector InSummonNormal);// 0x4d8b312cd041
	bool CanSummon(Actor* InSummoner, SolarSummonDetectionConfig* InSummonConfig, out const HitResult InHitResult, out HitResult OutHitResult);// 0x4d8a312cd041

--------------------------------
Class: SolarSummonDetectionConfig.SolarPreviewDetectionConfig.DataAsset.Object
	int ItemID;//[Offset: 0xb0, Size: 0x4]
	SolarPreviewStaticMeshData PreviewRangeData;//[Offset: 0xc0, Size: 0x80]
	SolarPreviewStaticMeshData PreviewMobileData;//[Offset: 0x140, Size: 0x80]
	SolarPreviewDecalEffectData PreviewDecalData;//[Offset: 0x1c0, Size: 0x90]
	bool EnableQuickSummon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	bool EnableQuickSummonInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 0x1]
	class SolarQuickSummonProxy* QuickSummonClass;//[Offset: 0x258, Size: 0x8]
	float QuickSummonTime;//[Offset: 0x260, Size: 0x4]
	bool EnableCheckCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	class SolarSummonPlaceholder* SummonPlaceholderClass;//[Offset: 0x268, Size: 0x8]
	SolarSummonCondition SummonCondition;//[Offset: 0x270, Size: 0x48]

--------------------------------
Class: SolarPreviewDetectionConfig.DataAsset.Object
	SolarPreviewMeshData PreviewMeshData;//[Offset: 0x30, Size: 0x80]

--------------------------------
Class: SolarPreviewStaticMeshData
	SoftObjectPath MeshPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath ValidMaterialPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath InvalidMaterialPath;//[Offset: 0x30, Size: 0x18]
	Transform RelativeTransform;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: SolarPreviewMeshData
	SoftObjectPath MeshPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath ValidMaterialPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath InvalidMaterialPath;//[Offset: 0x30, Size: 0x18]
	Transform RelativeTransform;//[Offset: 0x50, Size: 0x30]

--------------------------------
Class: SolarPreviewDecalEffectData
	SoftObjectPath ValidEffectPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath InvalidEffectPath;//[Offset: 0x18, Size: 0x18]
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30]
	int SortOrder;//[Offset: 0x60, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x64, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x68, Size: 0x4]
	float FadeDuration;//[Offset: 0x6c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x70, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x74, Size: 0x4]
	Vector DecalSize;//[Offset: 0x78, Size: 0xc]

--------------------------------
Class: SolarSummonPlaceholder.Actor.Object
	void SetCollisionSize(out const Vector InSize);// 0x4e81312cd041

--------------------------------
Class: SolarSummonCondition
	bool bUseChannelTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte TestCollisionChannel;//[Offset: 0x1, Size: 0x1]
	byte[] CollisionCheckTypes;//[Offset: 0x8, Size: 0x10]
	byte[] ForbiddenSurfaces;//[Offset: 0x18, Size: 0x10]
	float MaxPlaceableAngle;//[Offset: 0x28, Size: 0x4]
	bool bDisplayOverThanPlaceableAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Vector CheckSize;//[Offset: 0x30, Size: 0xc]
	float CollisionToGroundDistance;//[Offset: 0x3c, Size: 0x4]
	bool bEnableSummonInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x5f8, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x650, Size: 0xc]
	float SplineBoundaryMin;//[Offset: 0x65c, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x660, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x670, Size: 0x8]
	float SplineBoundaryMax;//[Offset: 0x678, Size: 0x4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67c, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67c, Size: 0x1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x67c, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x67d, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x680, Size: 0x4]
	void UpdateMesh();// 0x6258312cd041
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x6257312cd041
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x6256312cd041
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x6255312cd041
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x6254312cd041
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x6253312cd041
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x6252312cd041
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x6251312cd041
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x6250312cd041
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x624f312cd041
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x624e312cd041
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x624d312cd041
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x624c312cd041
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x624b312cd041
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x624a312cd041
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x6249312cd041
	Vector GetStartTangent();// 0x6248312cd041
	Vector2D GetStartScale();// 0x6247312cd041
	float GetStartRoll();// 0x6246312cd041
	Vector GetStartPosition();// 0x6245312cd041
	Vector2D GetStartOffset();// 0x6244312cd041
	Vector GetSplineUpDir();// 0x6243312cd041
	byte GetForwardAxis();// 0x6242312cd041
	Vector GetEndTangent();// 0x6241312cd041
	Vector2D GetEndScale();// 0x6240312cd041
	float GetEndRoll();// 0x623f312cd041
	Vector GetEndPosition();// 0x623e312cd041
	Vector2D GetEndOffset();// 0x623d312cd041
	float GetBoundaryMin();// 0x623c312cd041
	float GetBoundaryMax();// 0x623b312cd041

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8]
	Vector EndTangent;//[Offset: 0x40, Size: 0xc]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SolarSummonPreviewComponent.SolarPreviewComponent.ActorComponent.Object
	bool RequestDisplayPreviewDecalEffect(DecalComponent* InDecalComponent, out const SolarPreviewDecalEffectData InDecalEffectData, FString InDecalMaterialPath, out const Transform InDecalRelativeTransform);// 0x4e82312cd041

--------------------------------
Class: SolarPreviewComponent.ActorComponent.Object
	bool RequestReplacePreviewMesh(MeshComponent* InMeshComponent, FString InPreviewMeshPath);// 0x4d71312cd041
	bool RequestReplacePreviewMaterial(MeshComponent* InMeshComponent, FString InPreviewMaterialPath);// 0x4d70312cd041
	bool RequestDisplayPreviewMesh(MeshComponent* InMeshComponent, FString InPreviewMeshPath, FString InPreviewMaterialPath, out const Transform InPreviewRelativeTransform);// 0x4d6f312cd041

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x318, Size: 0x8]
	int SortOrder;//[Offset: 0x320, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x324, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x328, Size: 0x4]
	float FadeDuration;//[Offset: 0x32c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x330, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x334, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	Vector DecalSize;//[Offset: 0x33c, Size: 0xc]
	void SetSortOrder(int Value);// 0x5c8a312cd041
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x5c89312cd041
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x5c88312cd041
	void SetFadeIn(float StartDelay, float Duaration);// 0x5c87312cd041
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x5c86312cd041
	float GetFadeStartDelay();// 0x5c85312cd041
	float GetFadeInStartDelay();// 0x5c84312cd041
	float GetFadeInDuration();// 0x5c83312cd041
	float GetFadeDuration();// 0x5c82312cd041
	MaterialInterface* GetDecalMaterial();// 0x5c81312cd041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x5c80312cd041

--------------------------------
Class: WeaponSpreadAndRecoil.Object
	SolarWeapon* Weapon;//[Offset: 0x28, Size: 0x8]
	WeaponSpreadPatternRuntime* SpreadPattern;//[Offset: 0x38, Size: 0x8]
	WeaponRecoilPatternRuntime* RecoilPattern;//[Offset: 0x40, Size: 0x8]
	WeaponRecoilPatternRuntime* ScopeKickPattern;//[Offset: 0x48, Size: 0x8]
	WeaponRecoilPatternRuntime* CrossHairKickPattern;//[Offset: 0x50, Size: 0x8]
	WeaponCameraShakePatternRuntime* ShakePatternOnShot;//[Offset: 0x58, Size: 0x8]
	WeaponCameraShakePatternRuntime* ShakePatternOnScopeShot;//[Offset: 0x60, Size: 0x8]
	<enum,WeaponCameraShakePatternRuntime*> ShakePatternMapOnScopeShot;//[Offset: 0x68, Size: 0x50]

--------------------------------
Class: WeaponSpreadPatternRuntime.Object
	WeaponSpreadPattern* PattenData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WeaponRecoilPatternRuntime.Object
	WeaponRecoilPattern* PattenData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WeaponCameraShakePatternRuntime.Object
	WeaponCameraShakePattern* PattenData;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ParticleLoopListener.Object
	void OnParticleFinished(ParticleSystemComponent* PS);// 0x54d5312cd041

--------------------------------
Class: WeaponAnimationInfo
	SoftObjectPath AssetPath;//[Offset: 0x0, Size: 0x18]
	float PlayRate;//[Offset: 0x18, Size: 0x4]
	bool bUseAdaptivePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	AnimSequence* Animation;//[Offset: 0x20, Size: 0x8]
	AnimSequence* AnimOverride;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: CameraShakeData
	class CameraShake* CameraShakeClass;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AttachedEffectParam
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Scale;//[Offset: 0x18, Size: 0xc]
	byte LocationType;//[Offset: 0x24, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x26, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: LocationEffectParam
	Rotator Rotation;//[Offset: 0x0, Size: 0xc]
	Vector Scale;//[Offset: 0xc, Size: 0xc]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x19, Size: 0x1]
	bool bAutoActivateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: WeaponPartsComponent.ActorComponent.Object
	WeaponPartRunesComp* RunesComp;//[Offset: 0xe0, Size: 0x8]
	WeaponPartScopeComp* ScopeComp;//[Offset: 0xe8, Size: 0x8]
	WeaponPartClipComp* ClipComp;//[Offset: 0xf0, Size: 0x8]
	WeaponPartMuzzleComp* MuzzleComp;//[Offset: 0xf8, Size: 0x8]
	WeaponPartGripComp* GripComp;//[Offset: 0x100, Size: 0x8]
	WeaponPartGunStockComp* GunStockComp;//[Offset: 0x108, Size: 0x8]
	StaticMeshComponent* CrossHairPlane;//[Offset: 0x110, Size: 0x8]
	StaticMeshComponent* RedCrosshairPanel;//[Offset: 0x118, Size: 0x8]
	bool bQuickScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 0x1]
	FName ScopeSocket;//[Offset: 0x124, Size: 0x8]
	FName GripSocket;//[Offset: 0x12c, Size: 0x8]
	FName ClipSocket;//[Offset: 0x134, Size: 0x8]
	FName OldClipSocket;//[Offset: 0x13c, Size: 0x8]
	FName MuzzleSocket;//[Offset: 0x144, Size: 0x8]
	FName GunStockSocket;//[Offset: 0x14c, Size: 0x8]
	SolarWeapon* MyWeaponActor;//[Offset: 0x158, Size: 0x8]
	WeaponNetComponent* WeaponNetComp;//[Offset: 0x160, Size: 0x8]
	void UpdateSkin(const WeaponSkinData* SkinData);// 0x5736312cd041
	void UpdateSinglePartHoldView(WeaponPartComp* PartComp, bool bLocal);// 0x5735312cd041
	void UpdateHoldView(bool bLocal);// 0x5734312cd041
	bool SinglePartHasInitilized(WeaponPartComp* Part);// 0x5733312cd041
	void ShowParts(bool Show, byte Flag);// 0x5732312cd041
	void SetSinglePartSkin(WeaponPartComp* Part, const WeaponSkinData* SkinData);// 0x5731312cd041
	void ResetSkin();// 0x5730312cd041
	void ResetPartSkin(WeaponPartComp* Part);// 0x572f312cd041
	bool OverrideWeaponAmmoConfig(int InFireModeType, int InAmmoID);// 0x572e312cd041
	bool IsPartExist(int ID);// 0x572d312cd041
	bool IsDefaultPart(const int PartID);// 0x572c312cd041
	bool IsAmmoExist(int ID);// 0x572b312cd041
	void InitEffectData(out const float[] hipV, out const float[] shoulderV, out WeaponPartsNetData Data);// 0x572a312cd041
	void InitAllPartsEffectData(out WeaponPartsNetData Data);// 0x5729312cd041
	bool HasInitilizeFinish();// 0x5728312cd041
	WeaponPartComp*[] GetValidWeaponParts();// 0x5727312cd041
	int GetPartsTypeByID(int ID);// 0x5726312cd041
	FString GetPartsBpByID(int ID);// 0x5725312cd041
	int GetPartLevelByID(int ID);// 0x5724312cd041
	WeaponPartsNetData GetNetData();// 0x5723312cd041
	void AttachToRightSocket(WeaponPartComp* PartComp);// 0x5722312cd041

--------------------------------
Class: WeaponPartRunesComp.ActorComponent.Object
	int[] Runes;//[Offset: 0xb0, Size: 0x10]
	void UpdateData(out const int[] Data);// 0x5721312cd041
	void OnInitilizeServer();// 0x5720312cd041
	void OnInitilizeClient();// 0x571f312cd041
	bool IsValid();// 0x571e312cd041
	enum GetPartType();// 0x571d312cd041

--------------------------------
Class: WeaponPartScopeComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 0x1]
	float FovValue;//[Offset: 0x70c, Size: 0x4]
	float HipToAdsTime;//[Offset: 0x710, Size: 0x4]
	CurveFloat* FovChangeCurve;//[Offset: 0x718, Size: 0x8]
	float HitEffectScale;//[Offset: 0x720, Size: 0x4]
	void OpenScope(float Time);// 0x573f312cd041
	bool IsOpened();// 0x573e312cd041
	bool IsNeedThermalImage();// 0x573d312cd041
	int GetScopeType();// 0x573c312cd041
	Vector GetScopeAimCenterPoint();// 0x573b312cd041
	Rotator GetFPPRotation();// 0x573a312cd041
	Vector GetFPPLocation();// 0x5739312cd041
	float GetDistanceToEyeWhenScope();// 0x5738312cd041
	void CloseScope();// 0x5737312cd041

--------------------------------
Class: WeaponPartMuzzleComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool HasSilencer();// 0x571c312cd041
	bool HasFlameArrester();// 0x571b312cd041

--------------------------------
Class: WeaponPartGripComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WeaponPartGunStockComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: MultiHitResult.HitResult
	byte Num;//[Offset: 0x88, Size: 0x1]
	byte Seed;//[Offset: 0x89, Size: 0x1]
	byte Mode;//[Offset: 0x8a, Size: 0x1]
	Vector_NetQuantize Start;//[Offset: 0x8c, Size: 0xc]
	Vector_NetQuantize End;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: WeaponShotHitResult
	Actor* Actor;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize Location;//[Offset: 0x8, Size: 0xc]
	FName BoneName;//[Offset: 0x14, Size: 0x8]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x1c, Size: 0xc]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	PrimitiveComponent* Component;//[Offset: 0x2c, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: OverrideBulletStruct
	class SolarBullet* PrimaryOverrideBulletClass;//[Offset: 0x0, Size: 0x8]
	class SolarBullet* SecondaryOverrideBulletClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SolarEnergyShield.SummonItemBase.Pawn.Actor.Object
	ParticleSystem* HitEffect;//[Offset: 0x3a0, Size: 0x8]
	ParticleSystem* VehicleWholeShieldBrokenEffect;//[Offset: 0x3a8, Size: 0x28]
	Vector HitEffectScale;//[Offset: 0x3d0, Size: 0xc]
	byte OwnerTeam;//[Offset: 0x3dc, Size: 0x1]
	<enum,FString> StartSoundMap;//[Offset: 0x3e0, Size: 0x50]
	<enum,FString> LoopSoundMap;//[Offset: 0x430, Size: 0x50]
	<enum,FString> HitSoundMap;//[Offset: 0x480, Size: 0x50]
	<enum,FString> EndSoundMap;//[Offset: 0x4d0, Size: 0x50]
	<enum,FString> BrokenSoundMap;//[Offset: 0x520, Size: 0x50]
	<Actor*,float> OverlapActorsTimeMap;//[Offset: 0x578, Size: 0x50]
	float OverlapActorIntervalTime;//[Offset: 0x5c8, Size: 0x4]
	float BounceForceToUniqueSkill;//[Offset: 0x5cc, Size: 0x4]
	void PlaySkillStartSound();// 0x475c312cd041
	void PlaySkillEndSound();// 0x475b312cd041
	void PlayHitSound();// 0x475a312cd041
	void PlayHitEffectOnVehicleWholeShield(int IndexToPlayHitEffect, out const Vector HitLocation);// 0x4759312cd041
	void PlayHitEffect(out const HitResult HitResult);// 0x4758312cd041
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4757312cd041
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4756312cd041
	void ChangeColor(const bool IsChanged);// 0x4755312cd041

--------------------------------
Class: SummonItemBase.Pawn.Actor.Object
	AkComponent* AkAudioComponent;//[Offset: 0x2a8, Size: 0x8]
	StaticMeshComponent* HPBar;//[Offset: 0x2b0, Size: 0x8]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2b8, Size: 0x4]
	SolarCharacter* SourceSummoner;//[Offset: 0x2bc, Size: 0x8]
	float CurrentHealth;//[Offset: 0x2c4, Size: 0x4]
	Actor* EffectingNightComesActor;//[Offset: 0x2c8, Size: 0x8]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	float TimerMaxTime;//[Offset: 0x2d4, Size: 0x4]
	float Timer;//[Offset: 0x2d8, Size: 0x4]
	float MaxHealth;//[Offset: 0x2e8, Size: 0x4]
	float ReducedHealth;//[Offset: 0x2ec, Size: 0x4]
	float DelayDestroyTime;//[Offset: 0x2f0, Size: 0x4]
	bool bTeammateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool bSuicideWithSummonerChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	bool bEnableTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 0x1]
	bool bOnlyOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f7, Size: 0x1]
	bool bEnableHPBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	bool bHPDefaultVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	FName HPBarTagName;//[Offset: 0x2fc, Size: 0x8]
	FName HPBarPercentName;//[Offset: 0x304, Size: 0x8]
	FName HPBarColorName;//[Offset: 0x30c, Size: 0x8]
	LinearColor HPBarColorTeammate;//[Offset: 0x314, Size: 0x10]
	LinearColor HPBarColorEnemy;//[Offset: 0x324, Size: 0x10]
	int HPBarMaterialIndex;//[Offset: 0x334, Size: 0x4]
	Vector CenterLocationOffset;//[Offset: 0x338, Size: 0xc]
	bool bSupportAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	WeaponAssistAimTargetConfig AssistAimTargetConfig;//[Offset: 0x348, Size: 0x48]
	bool bCanAffectedByEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 0x1]
	void SwitchTimer(bool InbEnable, float InMaxTime);// 0x4754312cd041
	void Suicide();// 0x4753312cd041
	bool RequestPlaySoundByTeam(out const <enum,SolarSummonSoundData> InSoundData);// 0x4752312cd041
	bool RequestPlaySound(out const FString[] InSoundData);// 0x4751312cd041
	void ReceiveUpdateTimerEvent(float InTimerRate);// 0x4750312cd041
	void ReceiveUpdateHealthEvent(float InCurrentHealthRate);// 0x474f312cd041
	void ReceiveDeathEvent();// 0x474e312cd041
	void OnSourceCharacterChange();// 0x474d312cd041
	void OnRep_CurrentHealth();// 0x474c312cd041
	bool IsDead();// 0x474b312cd041
	SolarCharacter* GetSourceSummoner();// 0x474a312cd041
	float GetMaxHealth();// 0x4749312cd041
	float GetCurrentHealth();// 0x4748312cd041
	class Object GetClassType();// 0x4747312cd041

--------------------------------
Class: SolarSummonSoundData
	FString[] SoundNames;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeaponAssistAimTargetConfig
	Vector2D BaseFollowTriggerExtent;//[Offset: 0x0, Size: 0x8]
	Vector2D BaseFollowStopExtent;//[Offset: 0x8, Size: 0x8]
	BaseFollowExtentByTag[] BaseFollowExtentByTags;//[Offset: 0x10, Size: 0x10]
	Vector2D TargetVelocityFollowTriggerExtent;//[Offset: 0x20, Size: 0x8]
	Vector2D LockAimingExtent;//[Offset: 0x28, Size: 0x8]
	Vector2D GlobalSensitivityScaleTriggerExtent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: BaseFollowExtentByTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	Vector2D BaseFollowTriggerExtent;//[Offset: 0x50, Size: 0x8]
	Vector2D BaseFollowStopExtent;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: BagRequirementData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ReplicateBagGridData
	SolarItemData ItemData;//[Offset: 0x0, Size: 0xb0]
	enum GridType;//[Offset: 0xb0, Size: 0x1]
	int BagGrade;//[Offset: 0xb4, Size: 0x4]
	int Index;//[Offset: 0xb8, Size: 0x4]
	bool IsRequirementTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]

--------------------------------
Class: ChargingPilePreset
	SoftObjectPath NormalMeshPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath BrokenMeshPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath BrokenMatPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath RangeRingPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath RangeRingMatPath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath ChargeCirclePath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath ChargeCircleMatPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath ChargeParticleEffectPath;//[Offset: 0xa8, Size: 0x18]
	SoftObjectPath OutlineMatPath;//[Offset: 0xc0, Size: 0x18]
	Transform RangeRingTrans;//[Offset: 0xe0, Size: 0x30]
	Transform ChargeCircleTrans;//[Offset: 0x110, Size: 0x30]
	Vector BeamStartPos;//[Offset: 0x140, Size: 0xc]

--------------------------------
Class: SolarPointDamageEvent.PointDamageEvent.DamageEvent
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bIgnoreShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	float ActualShieldDamage;//[Offset: 0xac, Size: 0x4]
	bool bBreakArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bIgnoreArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	float ActualArmorDamage;//[Offset: 0xb4, Size: 0x4]
	byte SolarAttributeType;//[Offset: 0xb8, Size: 0x1]
	bool bPreFakeInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	byte HealthChangeType;//[Offset: 0xba, Size: 0x1]
	SolarAbility* DamageAbility;//[Offset: 0xc0, Size: 0x8]
	SolarAbilityEffect* DamageAbilityEffect;//[Offset: 0xc8, Size: 0x8]
	enum ResultType;//[Offset: 0xd0, Size: 0x1]
	bool bJustForShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bCanDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	int UseWeaponID;//[Offset: 0xd4, Size: 0x4]
	enum DamageType;//[Offset: 0xd8, Size: 0x1]
	Actor* DamageCauser;//[Offset: 0xdc, Size: 0x8]
	FString HitBoneName;//[Offset: 0xf0, Size: 0x10]
	bool bHitVehicleWeakPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	bool bHitHumanoidTargetHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 0x1]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 0xc]
	HitResult HitInfo;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	enum BattleState;//[Offset: 0xa0c, Size: 0x1]
	enum PlayerOutType;//[Offset: 0xa0d, Size: 0x1]
	enum PlayerType;//[Offset: 0xa0e, Size: 0x1]
	enum PlayerGameRole;//[Offset: 0xa0f, Size: 0x1]
	delegate OnSideChange;//[Offset: 0xa20, Size: 0x10]
	HeroPickInfo* HeroPickInfo;//[Offset: 0xa30, Size: 0x8]
	SCMReplicateHostData[] ReplicateData;//[Offset: 0xa38, Size: 0x10]
	float ReviveStartTime;//[Offset: 0xa58, Size: 0x4]
	SolarCharacter* RevivingTeammate;//[Offset: 0xa60, Size: 0x8]
	SolarTaskComponent* TaskSystem;//[Offset: 0xa68, Size: 0x8]
	void UpdateTaskInfo(out const TaskUpdateInfo InTaskInfo);// 0x42a5312cd041
	void UpDateDataManager(const SCMReplicateHostData[] InReplicateData, bool bInit);// 0x42a4312cd041
	void ServerBeginSpectate(SCMPlayerState* TargetPlayer);// 0x42a3312cd041
	void RequestStartGame();// 0x42a2312cd041
	void RequestSetInviteEnable(bool bEnable);// 0x42a1312cd041
	void RequestSetExchangeEnable(bool bEnable);// 0x42a0312cd041
	void RequestKickPlayerOut(SCMPlayerState* Player);// 0x429f312cd041
	void RequestExchangeSidesAndPos(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x429e312cd041
	void RequestChangeSide(SCMPlayerState* Player, FString NewSide, const int NewPosInTeam);// 0x429d312cd041
	void RequesJoinOB(SCMPlayerState* Player);// 0x429c312cd041
	void PlayerSelectHero(int InCharacterId, int InSkinID, bool bConfirm);// 0x429b312cd041
	void OnUpdateLifeTime();// 0x429a312cd041
	void OnReviveSucceed(FString TargetPlayerID);// 0x4299312cd041
	void OnRep_RevivingTeammate(SolarCharacter* LastRevivingTeammate);// 0x4298312cd041
	void OnRep_HeroPickInfo();// 0x4297312cd041
	void OnRep_BattleState();// 0x4296312cd041
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x4295312cd041
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x4294312cd041
	void NotifyUpdateCGMData(FString InDataName);// 0x4293312cd041
	void NotifyClientUpdateDataManager(bool bInit);// 0x4292312cd041
	bool NeedConsiderRepData();// 0x4291312cd041
	bool IsPreJoinPlayer();// 0x4290312cd041
	void InitTaskInfo(out const BattlePassInfo InTaskInfo);// 0x428f312cd041
	SCMReplicateHostData[] GetReplicateDataArray();// 0x428e312cd041
	SCMPlayerState*[] GetMySidePlayerList();// 0x428d312cd041
	SCMPlayerState*[] GetMySideJobPlayerList();// 0x428c312cd041
	void EventOnEndRevived(const SolarCharacter* InTeammate);// 0x428b312cd041
	void EventOnBeginRevived(SolarCharacter* InTeammate);// 0x428a312cd041
	void CanPlayerBattle();// 0x4289312cd041

--------------------------------
Class: TaskUpdateInfo
	bool delAllTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int64[] delIDs;//[Offset: 0x8, Size: 0x10]
	BattlePassInfo Task;//[Offset: 0x18, Size: 0x28]
	FString PlayerId;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BattlePassInfo
	TaskBriefData[] tasks;//[Offset: 0x0, Size: 0x10]
	int64 BattlePassID;//[Offset: 0x10, Size: 0x8]
	int64 currWeek;//[Offset: 0x18, Size: 0x8]
	int64 maxWeek;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TaskBriefData
	int64 TaskID;//[Offset: 0x0, Size: 0x8]
	int64 BaseValue;//[Offset: 0x8, Size: 0x8]
	int64 CurValue;//[Offset: 0x10, Size: 0x8]
	int64 status;//[Offset: 0x20, Size: 0x8]
	enum page;//[Offset: 0x28, Size: 0x1]
	int64 week;//[Offset: 0x30, Size: 0x8]
	bool IsMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SCMReplicateHostData
	enum HostType;//[Offset: 0x0, Size: 0x1]
	FString HostID;//[Offset: 0x8, Size: 0x10]
	SCMRepData[] RepDataArray;//[Offset: 0x18, Size: 0x10]
	SCMRepDataArray[] RepArrDataArray;//[Offset: 0x28, Size: 0x10]
	SCMRepDataMap[] RepMapDataArray;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SCMRepData
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum DataChangeType;//[Offset: 0x11, Size: 0x1]
	int VInt;//[Offset: 0x14, Size: 0x4]
	float VFloat;//[Offset: 0x18, Size: 0x4]
	Vector_NetQuantize100 VVector;//[Offset: 0x1c, Size: 0xc]
	FString VString;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SCMRepDataArray
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	uint32[] ChangeIndexArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SCMRepDataMap
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	FString[] KeyArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: HeroPickInfo.Info.Actor.Object
	FString SideName;//[Offset: 0x228, Size: 0x10]
	enum HeroPickType;//[Offset: 0x238, Size: 0x1]
	HeroPickWidget* HeroPickWidget;//[Offset: 0x240, Size: 0x8]
	PlayerSelectInfo[] PlayerSelectInfos;//[Offset: 0x248, Size: 0x10]
	float HeroPickTime;//[Offset: 0x258, Size: 0x4]
	float WaitingToStartTime;//[Offset: 0x260, Size: 0x4]
	int CurrentPickPlayerIndex;//[Offset: 0x264, Size: 0x4]
	float Duration;//[Offset: 0x268, Size: 0x4]
	void OnRep_WaitingToStartTime();// 0x3f55312cd041
	void OnRep_SelectPlayerChange();// 0x3f54312cd041
	void OnRep_PlayerSelectInfos();// 0x3f53312cd041
	void OnRep_HeroPickTime();// 0x3f52312cd041

--------------------------------
Class: HeroPickWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	HeroPickInfo* PickInfo;//[Offset: 0x348, Size: 0x8]
	TileView* CharacterList;//[Offset: 0x350, Size: 0x8]
	HeroPickPlayerSlot*[] PlayerSlots;//[Offset: 0x358, Size: 0x10]
	<int,HeroPickCharacterData*> SelectDataMap;//[Offset: 0x368, Size: 0x50]
	HeroPickDetail* UI_HeroPick_Detail;//[Offset: 0x3d0, Size: 0x8]
	int CurrentSelectCharacterID;//[Offset: 0x3d8, Size: 0x4]
	void ShowPlayerConfirm(int Pos);// 0x3f6d312cd041
	void ShowMyTurn(bool bShow);// 0x3f6c312cd041
	void ShowMainUICharacter(bool bShow);// 0x3f6b312cd041
	void SetHeroHPAndSpeed(const int HP, const int Speed);// 0x3f6a312cd041
	void SetCountDowText(FString Text);// 0x3f69312cd041
	void SetClassNameAndIcon(FString ClassName, out const Texture2D* ClassIcon);// 0x3f68312cd041
	void SetCharacterNameAndIcon(FString Name, FString SkinName, out const Texture2D* CharacterIcon);// 0x3f67312cd041
	void RefreshTacticalSkillIcon(out const Texture2D* TacticalSkillIcon);// 0x3f66312cd041
	void RefreshSuperSkillIcon(out const Texture2D* SuperSkillIcon);// 0x3f65312cd041
	void RefreshPassiveSKillIcon(out const Texture2D* PassiveSkillIcon);// 0x3f64312cd041
	void PlayCharacterConfirmVoice(int SkinId);// 0x3f63312cd041
	void ConfirmSelect();// 0x3f62312cd041

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0x94c, Size: 0x4]
	float EntryWidth;//[Offset: 0x950, Size: 0x4]
	enum TileAlignment;//[Offset: 0x954, Size: 0x1]
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x955, Size: 0x1]
	void SetEntryWidth(float NewWidth);// 0x3800312cd041
	void SetEntryHeight(float NewHeight);// 0x37ff312cd041

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	byte Orientation;//[Offset: 0x888, Size: 0x1]
	byte SelectionMode;//[Offset: 0x889, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0x88a, Size: 0x1]
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88b, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c, Size: 0x1]
	float EntrySpacing;//[Offset: 0x890, Size: 0x4]
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 0x1]
	float ListItemStartPosOffset;//[Offset: 0x898, Size: 0x4]
	Object*[] ListItems;//[Offset: 0x8a0, Size: 0x10]
	bool EnableDelayAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 0x1]
	float DelayAddInterval;//[Offset: 0x8c4, Size: 0x4]
	int NumInPanel;//[Offset: 0x8c8, Size: 0x4]
	Object*[] DelayAddedListItems;//[Offset: 0x8d0, Size: 0x10]
	bool DelayAddAnimFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 0x1]
	delegate BP_OnEntryInitialized;//[Offset: 0x8e8, Size: 0x10]
	delegate BP_OnItemClicked;//[Offset: 0x8f8, Size: 0x10]
	delegate BP_OnItemDoubleClicked;//[Offset: 0x908, Size: 0x10]
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0x918, Size: 0x10]
	delegate BP_OnItemSelectionChanged;//[Offset: 0x928, Size: 0x10]
	delegate BP_OnItemScrolledIntoView;//[Offset: 0x938, Size: 0x10]
	void SetSelectionMode(byte SelectionMode);// 0x37db312cd041
	void SetSelectedIndex(int Index);// 0x37da312cd041
	void ScrollIndexIntoView(int Index);// 0x37d9312cd041
	void RemoveItem(Object* Item);// 0x37d8312cd041
	void NavigateToIndex(int Index);// 0x37d7312cd041
	bool IsRefreshPending();// 0x37d6312cd041
	int GetNumItems();// 0x37d5312cd041
	Object*[] GetListItems();// 0x37d4312cd041
	Object* GetItemAt(int Index);// 0x37d3312cd041
	int GetIndexForItem(Object* Item);// 0x37d2312cd041
	Object*[] GetDelayAddedListItems();// 0x37d1312cd041
	void ClearListItems();// 0x37d0312cd041
	void BP_SetSelectedItem(Object* Item);// 0x37cf312cd041
	void BP_SetListItems(out const Object*[] InListItems);// 0x37ce312cd041
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x37cd312cd041
	void BP_SetDelayAddListItems(out const Object*[] InListItems);// 0x37cc312cd041
	void BP_ScrollItemIntoView(Object* Item);// 0x37cb312cd041
	void BP_NavigateToItem(Object* Item);// 0x37ca312cd041
	bool BP_IsItemVisible(Object* Item);// 0x37c9312cd041
	bool BP_GetSelectedItems(out Object*[] Items);// 0x37c8312cd041
	Object* BP_GetSelectedItem();// 0x37c7312cd041
	int BP_GetNumItemsSelected();// 0x37c6312cd041
	void BP_DoDelayAddTick(float DeltaTime);// 0x37c5312cd041
	void BP_ClearSelection();// 0x37c4312cd041
	void BP_CancelScrollIntoView();// 0x37c3312cd041
	void AddItem(Object* Item);// 0x37c2312cd041

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x138, Size: 0x8]
	float WheelScrollMultiplier;//[Offset: 0x140, Size: 0x4]
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	bool bClampScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 0x1]
	bool bDisableScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 0x1]
	float FixedLineScrollOffset;//[Offset: 0x148, Size: 0x4]
	delegate BP_OnEntryGenerated;//[Offset: 0x150, Size: 0x10]
	delegate BP_OnEntryReleased;//[Offset: 0x160, Size: 0x10]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x170, Size: 0x80]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x1f0, Size: 0x560]
	enum ScrollBarVisibility;//[Offset: 0x750, Size: 0x1]
	Vector2D ScrollbarThickness;//[Offset: 0x754, Size: 0x8]
	Margin ScrollbarPadding;//[Offset: 0x75c, Size: 0x10]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76c, Size: 0x1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76d, Size: 0x1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x37c1312cd041
	void SetScrollOffset(const float InScrollOffset);// 0x37c0312cd041
	void SetScrollBarVisibility(enum InVisibility);// 0x37bf312cd041
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x37be312cd041
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x37bd312cd041
	void SetEnableScrollAnimation(bool bNewEnableScrollAnimation);// 0x37bc312cd041
	void SetDisableScroll(bool bInDisableScroll);// 0x37bb312cd041
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x37ba312cd041
	void ScrollToTop();// 0x37b9312cd041
	void ScrollToBottom();// 0x37b8312cd041
	void RequestRefresh();// 0x37b7312cd041
	void RegenerateAllEntries();// 0x37b6312cd041
	float GetScrollOffset();// 0x37b5312cd041
	UserWidget*[] GetDisplayedEntryWidgets();// 0x37b4312cd041
	bool GetDisableScroll();// 0x37b3312cd041

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 0x98]
	SlateBrush VerticalBackgroundImage;//[Offset: 0xa0, Size: 0x98]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x138, Size: 0x98]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1d0, Size: 0x98]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x268, Size: 0x98]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x300, Size: 0x98]
	SlateBrush NormalThumbImage;//[Offset: 0x398, Size: 0x98]
	SlateBrush HoveredThumbImage;//[Offset: 0x430, Size: 0x98]
	SlateBrush DraggedThumbImage;//[Offset: 0x4c8, Size: 0x98]

--------------------------------
Class: HeroPickPlayerSlot.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum UiState;//[Offset: 0x348, Size: 0x1]
	void UpdateSelectPercent(float Percent);// 0x3f61312cd041
	void UpdateIconAndName(FString HeroName, int HeroExpLevel, out const Texture2D* IconPath);// 0x3f60312cd041
	void ShowConfirm();// 0x3f5f312cd041
	void SetPlayerPos(FString playerName, const byte InPosInTeam);// 0x3f5e312cd041
	void ChangeUIStage(enum State);// 0x3f5d312cd041

--------------------------------
Class: HeroPickCharacterData.Object
	int CharacterId;//[Offset: 0x28, Size: 0x4]
	int SkinId;//[Offset: 0x2c, Size: 0x4]
	int CharacterProficiencyLevel;//[Offset: 0x30, Size: 0x4]
	enum OwnType;//[Offset: 0x34, Size: 0x1]
	int ConfigSortNum;//[Offset: 0x38, Size: 0x4]
	FString HeroName;//[Offset: 0x40, Size: 0x10]
	int[] SelectedPlayerPos;//[Offset: 0x50, Size: 0x10]
	int ConfirmPos;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: HeroPickDetail.SolarUserWidget.UserWidget.Widget.Visual.Object
	void UpdateCharacterDetails(const int CharacterId);// 0x3f51312cd041
	void RefreshSkillInfo(int SkillType, FString Attribute, FString SkillName, FString SkillDescription, out const Texture2D* SkillIcon);// 0x3f50312cd041

--------------------------------
Class: PlayerSelectInfo
	SCMPlayerState* Player;//[Offset: 0x0, Size: 0x8]
	int PlayerPos;//[Offset: 0x8, Size: 0x4]
	int CharacterId;//[Offset: 0xc, Size: 0x4]
	int SkinId;//[Offset: 0x10, Size: 0x4]
	int HeroExpLevel;//[Offset: 0x14, Size: 0x4]
	bool HasConfirm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float PlayerSelectTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SolarTaskComponent.ActorComponent.Object
	delegate TaskUpdateDelegate;//[Offset: 0xb8, Size: 0x10]
	delegate TaskCompoleteDelegate;//[Offset: 0xc8, Size: 0x10]
	delegate MarkingTaskChangedDelegate;//[Offset: 0xd8, Size: 0x10]
	delegate ClientTaskUpdatedDelegate;//[Offset: 0xe8, Size: 0x10]
	delegate ClientBattlePassTimeInfoDelegate;//[Offset: 0xf8, Size: 0x10]
	DataTable* TaskTypeHandleConfig;//[Offset: 0x108, Size: 0x8]
	class TaskFormula* TaskFormula;//[Offset: 0x110, Size: 0x8]
	TaskFormula* FormulaInst;//[Offset: 0x118, Size: 0x8]
	int64[] MarkingTask;//[Offset: 0x120, Size: 0x10]
	BattlePassTimeInfo BattlePassTimeInfo;//[Offset: 0x130, Size: 0x18]
	TaskBriefData[] tasks;//[Offset: 0x148, Size: 0x10]
	void ServerEnableMarkTask(int64 InTaskID, bool bMarking);// 0x533b312cd041
	void OnRep_Tasks();// 0x533a312cd041
	void OnRep_MarkingTask();// 0x5339312cd041
	void OnRep_BattlePassTimeInfo();// 0x5338312cd041
	bool IsMaxLevel();// 0x5337312cd041
	bool IsEnable();// 0x5336312cd041
	BattlePassTimeInfo GetBattlePassTimeInfo();// 0x5335312cd041
	TaskBriefData[] GetAllTaskBriefData();// 0x5334312cd041
	int64[] GetAllMarkTask();// 0x5333312cd041
	void EnableMarkTask(int64 InTaskID, bool bMarking);// 0x5332312cd041
	void ClientNotifyTaskComplete(const TaskBriefData InTaskInfo);// 0x5331312cd041

--------------------------------
Class: BattlePassTimeInfo
	int64 BattlePassID;//[Offset: 0x0, Size: 0x8]
	int64 currWeek;//[Offset: 0x8, Size: 0x8]
	int64 maxWeek;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TaskFormula.Info.Actor.Object
	SolarTaskComponent* TaskSystem;//[Offset: 0x228, Size: 0x8]
	void SetTaskProgress(int64 InTaskID, int64 ProgressValue, bool bOverrideLastMatch);// 0x5330312cd041
	void IncreaseTaskProgress(int64 InTaskID, int64 ProgressValue);// 0x532f312cd041
	int GetTaskConditionValue(int64 InTaskID, int64 Index);// 0x532e312cd041

--------------------------------
Class: SolarDestructibleActor.StaticMeshActor.Actor.Object
	byte[] OnHitIgnoreChannels;//[Offset: 0x238, Size: 0x10]
	float AddForceCoefficient;//[Offset: 0x248, Size: 0x4]
	float BrokenDestroyTime;//[Offset: 0x24c, Size: 0x4]
	bool bChildDetachOnBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	void OnDestructibleActorHit(Actor* SelfActor, Actor* OtherActor, out const HitResult Hit, float SpeedDifference);// 0x46df312cd041
	void OnClientBrokenEffect();// 0x46de312cd041
	void OnBroken(SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x46dd312cd041

--------------------------------
Class: CharacterTagListenerForMeshComp
	<MeshCompAndVisibilityConfigPair> MeshCompPairs;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: MeshCompAndVisibilityConfigPair
	MeshComponent* MeshComp;//[Offset: 0x0, Size: 0x8]
	MeshComponentVisibilityConfig* VisibilityConfig;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MeshComponentVisibilityConfig.DataAsset.Object
	GameplayTagRequirements VisibleTagRequirements;//[Offset: 0x30, Size: 0x50]
	GameplayTag VisibilityFlagTag;//[Offset: 0x80, Size: 0x8]
	GameplayTagRequirements GetVisibleTagRequirements();// 0x40bb312cd041
	GameplayTag GetVisibilityFlagTag();// 0x40ba312cd041

--------------------------------
Class: SolarBackpackActor.Actor.Object
	SceneComponent* BackpackRoot;//[Offset: 0x228, Size: 0x8]
	BackpackVertAnimMeshComponent* BackpackMesh;//[Offset: 0x230, Size: 0x8]
	SolarCharacter* BackPackActorOwner;//[Offset: 0x238, Size: 0x8]
	SolarBackpackSFX*[] BackpackSFX;//[Offset: 0x240, Size: 0x10]
	SolarBackpackSFX* BackpackOffgasSFX;//[Offset: 0x250, Size: 0x8]
	float OriginScale;//[Offset: 0x264, Size: 0x4]
	class SolarBackpackSFX* TrailClass;//[Offset: 0x288, Size: 0x8]
	class SolarBackpackSFX* OffgasClass;//[Offset: 0x290, Size: 0x8]
	<ParticleSystemComponent*> ListenSet;//[Offset: 0x298, Size: 0x50]
	FString AssemblingId;//[Offset: 0x2f0, Size: 0x10]
	FName KnapsackFlySoundName;//[Offset: 0x300, Size: 0x8]
	FName StartKnapsackLandingSoundName;//[Offset: 0x308, Size: 0x8]
	FName StopKnapsackLandingSoundName;//[Offset: 0x310, Size: 0x8]
	void SetRenderMode(byte Mode);// 0x450b312cd041
	void SetBackpackVisibilityByFlag(bool bNewVisibility, int Flag);// 0x450a312cd041
	void RefreshActorEffect();// 0x4509312cd041
	void OnMeshEffectFactorChange();// 0x4508312cd041
	void OnChildPSCompPreActive(ParticleSystemComponent* PSComponent);// 0x4507312cd041
	void OnChildPSCompFinish(ParticleSystemComponent* PSComponent);// 0x4506312cd041
	bool IsFly();// 0x4505312cd041
	bool IsCharging();// 0x4504312cd041
	bool HasEnergy();// 0x4503312cd041
	float GetBackpackOrginScale();// 0x4502312cd041

--------------------------------
Class: BackpackVertAnimMeshComponent.VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VertexAnimInfo DefaultAnimInfo;//[Offset: 0x620, Size: 0x10]
	<byte,VertexAnimInfo> BackPackAnimInfoMap;//[Offset: 0x630, Size: 0x50]
	SolarCharacter* SolarCharacter;//[Offset: 0x680, Size: 0x8]
	SolarBackpackActor* BackPackActor;//[Offset: 0x688, Size: 0x8]

--------------------------------
Class: VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void PlayInfo(out const VertexAnimInfo InAnimInfo);// 0x3d06312cd041
	void Play(int InStartFrame, int InEndFrame, float InLength, bool InLoop);// 0x3d05312cd041

--------------------------------
Class: VertexAnimInfo
	int StartFrame;//[Offset: 0x0, Size: 0x4]
	int EndFrame;//[Offset: 0x4, Size: 0x4]
	float Length;//[Offset: 0x8, Size: 0x4]
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SolarBackpackSFX.Actor.Object
	void OnPropellingModeChanged(enum PropellingMode);// 0x4518312cd041
	ParticleSystemComponent* GetTrailEffectComponent();// 0x4517312cd041
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal);// 0x4516312cd041
	void BackpackSFXEnd();// 0x4515312cd041
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0x4514312cd041

--------------------------------
Class: ReplicateBagGradeData
	int BagGrade;//[Offset: 0x0, Size: 0x4]
	ReplicateBagGridData[] BagGridDataArray;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BackpackJetPrepelInfo
	bool IsPropelling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int PropellingCounter;//[Offset: 0x4, Size: 0x4]
	byte JetType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GyroscopeConfig.DataAsset.Object
	DataTable* dataTab;//[Offset: 0x30, Size: 0x8]
	DataTable* gyroscopeSensitivityDataTab;//[Offset: 0x38, Size: 0x8]
	DataTable* GyroscopeDeviceModelDataTab;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: CharacterOperationEvent
	enum Name;//[Offset: 0x0, Size: 0x1]
	Object* Target;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SolarTeamRescueComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb8, Size: 0x8]
	float MaxRescureDis;//[Offset: 0xc0, Size: 0x4]
	float MaxRescureAngle;//[Offset: 0xc4, Size: 0x4]
	float RescueRecoveryHp;//[Offset: 0xc8, Size: 0x4]
	float TempTime;//[Offset: 0xcc, Size: 0x4]
	float CheckInterval;//[Offset: 0xd0, Size: 0x4]
	float TempReqTime;//[Offset: 0xd4, Size: 0x4]
	float RequestTimeout;//[Offset: 0xd8, Size: 0x4]
	bool bSendRequest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	bool bLastRescueBtnVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]
	SolarCharacter* ClosestTarget;//[Offset: 0xe0, Size: 0x8]
	SolarCharacter*[] NearByDeathVergeTeamMates;//[Offset: 0xe8, Size: 0x10]
	void TryRescueClosestTeammateLuaCall();// 0x53b6312cd041
	void TryRescueClosestTeammate();// 0x53b5312cd041
	void ShowTeamRescueToUI(bool IsShow);// 0x53b4312cd041
	void SetRescueBtnVisibility(bool bIsVisible);// 0x53b3312cd041
	void ReqStartTeamRescue(SolarCharacter* TargetCharacter);// 0x53b2312cd041
	void ReqCancelTeamRescure();// 0x53b1312cd041
	void OnRescueStateChangeInternal();// 0x53b0312cd041
	void OnRescueStateChange();// 0x53af312cd041
	void DetectRescueTeammate(float DeltaTime);// 0x53ae312cd041
	bool CanRescue(SolarCharacter* Player, const bool bStart);// 0x53ad312cd041

--------------------------------
Class: SolarUAVRescue.SolarUAV.SummonItemBase.Pawn.Actor.Object
	enum NewState;//[Offset: 0x40d, Size: 0x1]
	AnimationAsset* SuspendAnim_Active_NotWork;//[Offset: 0x410, Size: 0x8]
	AnimationAsset* SuspendAnim_Active_Work;//[Offset: 0x418, Size: 0x8]
	AnimationAsset* SuspendAnim_Deactive;//[Offset: 0x420, Size: 0x8]
	AnimationAsset* ActiveAnim;//[Offset: 0x428, Size: 0x8]
	AnimationAsset* DeactiveAnim;//[Offset: 0x430, Size: 0x8]
	AnimationAsset* BeginWorkAnim;//[Offset: 0x438, Size: 0x8]
	AnimationAsset* EndWorkAnim;//[Offset: 0x440, Size: 0x8]
	AnimationAsset* ExplodeAnim;//[Offset: 0x448, Size: 0x8]
	ParticleSystem* ActiveEffect;//[Offset: 0x450, Size: 0x8]
	ParticleSystem* ActiveLoopEffect;//[Offset: 0x458, Size: 0x8]
	ParticleSystem* ChaActiveEffect;//[Offset: 0x460, Size: 0x8]
	ParticleSystem* ExplodeEffect;//[Offset: 0x468, Size: 0x8]
	ParticleSystem* DeathVergeEffect;//[Offset: 0x470, Size: 0x8]
	FName ChaActiveEffectSocket;//[Offset: 0x478, Size: 0x8]
	CurveFloat* AppearCurve;//[Offset: 0x480, Size: 0x8]
	MaterialInstance* Material_Appearing;//[Offset: 0x488, Size: 0x8]
	MaterialInstance* Material_EndAppear;//[Offset: 0x490, Size: 0x8]
	FString BeginSound;//[Offset: 0x498, Size: 0x10]
	FString EndSound;//[Offset: 0x4a8, Size: 0x10]
	FString ActiveChaSound;//[Offset: 0x4b8, Size: 0x10]
	FString ActiveAnimSound;//[Offset: 0x4c8, Size: 0x10]
	FString BeginActiveLoopSound;//[Offset: 0x4d8, Size: 0x10]
	FString EndActiveLoopSound;//[Offset: 0x4e8, Size: 0x10]
	FString DeactiveAnimSound;//[Offset: 0x4f8, Size: 0x10]
	FString ExplodeSound;//[Offset: 0x508, Size: 0x10]
	FString BeginDeathVergeLoopSound;//[Offset: 0x518, Size: 0x10]
	FString EndDeathVergeLoopSound;//[Offset: 0x528, Size: 0x10]
	float ActorWorldLocZOffset;//[Offset: 0x538, Size: 0x4]
	float MeshRelativeLocXOffset;//[Offset: 0x53c, Size: 0x4]
	float MeshRelativeLocYOffset;//[Offset: 0x540, Size: 0x4]
	float ChaSpeedThreshold;//[Offset: 0x544, Size: 0x4]
	float MeshMoveSpeed;//[Offset: 0x548, Size: 0x4]
	float MeshRotateSpeed;//[Offset: 0x54c, Size: 0x4]
	float MeshYawOffset;//[Offset: 0x550, Size: 0x4]
	bool bLookAtCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554, Size: 0x1]
	float CameraLagSpeed_Fast;//[Offset: 0x558, Size: 0x4]
	float CameraRotationLagSpeed_Fast;//[Offset: 0x55c, Size: 0x4]
	bool bDealCharacterMoveJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	float ChaMoveJitterCheckInterval;//[Offset: 0x564, Size: 0x4]
	float ChaMoveJitterHorSpeedDiffRange;//[Offset: 0x568, Size: 0x4]
	float ChaMoveJitterCountThreshold;//[Offset: 0x56c, Size: 0x4]
	float CameraLagSpeedChangeDelta;//[Offset: 0x570, Size: 0x4]
	CurveFloat* ActivatingScaleCurve;//[Offset: 0x578, Size: 0x8]
	CurveFloat* DeactivatingScaleCurve;//[Offset: 0x580, Size: 0x8]
	float ActiveDuration;//[Offset: 0x588, Size: 0x4]
	float ActiveEffectLength;//[Offset: 0x58c, Size: 0x4]
	float DeathVergeHealthThreshold;//[Offset: 0x590, Size: 0x4]
	SoftObjectPath UAVIcon;//[Offset: 0x598, Size: 0x18]
	ParticleSystemComponent* DeathVergeEffectHandle;//[Offset: 0x5c0, Size: 0x8]
	ParticleSystemComponent* ActiveLoopEffectHandle;//[Offset: 0x5c8, Size: 0x8]
	bool bFollowCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	bool bAppearEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d3, Size: 0x1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1]
	bool bPermanent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9, Size: 0x1]
	bool bExplodeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fa, Size: 0x1]
	float HealTickInterval;//[Offset: 0x640, Size: 0x4]
	float HealHealthAmount;//[Offset: 0x644, Size: 0x4]
	float HealShieldAmount;//[Offset: 0x648, Size: 0x4]
	ParticleSystem* HealLineEffect;//[Offset: 0x650, Size: 0x8]
	FName HealMeshSocket;//[Offset: 0x658, Size: 0x8]
	FString BeginHealSound;//[Offset: 0x660, Size: 0x10]
	FString BeginHealLoopSound;//[Offset: 0x670, Size: 0x10]
	FString EndHealSound;//[Offset: 0x680, Size: 0x10]
	FString EndHealLoopSound;//[Offset: 0x690, Size: 0x10]
	FString BeginHealHPLoopSound;//[Offset: 0x6a0, Size: 0x10]
	FString EndHealHPLoopSound;//[Offset: 0x6b0, Size: 0x10]
	FString BeginHealShieldLoopSound;//[Offset: 0x6c0, Size: 0x10]
	FString EndHealShieldLoopSound;//[Offset: 0x6d0, Size: 0x10]
	ParticleSystemComponent* HealLineEffectHandle;//[Offset: 0x6e0, Size: 0x8]
	ParticleSystem* RescueEffect;//[Offset: 0x6f0, Size: 0x8]
	ParticleSystem* RescueEffect_Enermy;//[Offset: 0x6f8, Size: 0x8]
	Transform RescueEffectTransform;//[Offset: 0x700, Size: 0x30]
	FName RescueMeshSocket;//[Offset: 0x730, Size: 0x8]
	float RescueTime;//[Offset: 0x738, Size: 0x4]
	bool bCheckRescueBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 0x1]
	float CheckRescueBlockInteval;//[Offset: 0x740, Size: 0x4]
	FString BeginRescueLoopSound;//[Offset: 0x748, Size: 0x10]
	FString EndRescueLoopSound;//[Offset: 0x758, Size: 0x10]
	FString CompleteRescueSound;//[Offset: 0x768, Size: 0x10]
	ParticleSystemComponent* RescueEffectHandle;//[Offset: 0x778, Size: 0x8]
	bool bNavigateToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]
	float RecordInterval;//[Offset: 0x794, Size: 0x4]
	float NavigateInterval;//[Offset: 0x798, Size: 0x4]
	float BeginNavigateDistance;//[Offset: 0x79c, Size: 0x4]
	float EndNavigateDistance;//[Offset: 0x7a0, Size: 0x4]
	class GameplayEffect* UAVHealBuffGameplayEffect;//[Offset: 0x7d0, Size: 0x8]
	class GameplayEffect* UAVRescueGameplayEffect;//[Offset: 0x7d8, Size: 0x8]
	void TickRescue(float DeltaTime);// 0x547f312cd041
	void TickNavigate(float DeltaTime);// 0x547e312cd041
	void TickHeal(float DeltaTime);// 0x547d312cd041
	void ServerSetRescueBlocked(bool bBlocked);// 0x547c312cd041
	void OnRescueComplete();// 0x547b312cd041
	void OnRep_NewState();// 0x547a312cd041
	void OnRep_Active();// 0x5479312cd041
	void OnCheckUAVInvisible(const GameplayTag Tag, int NewCount);// 0x5478312cd041
	void OnCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x5477312cd041
	void OnCharacterDeathVergeStatusTag(const GameplayTag Tag, int NewCount);// 0x5476312cd041
	void OnCharacterDeathStatusTag(const GameplayTag Tag, int NewCount);// 0x5475312cd041
	float GetRescueTime();// 0x5474312cd041

--------------------------------
Class: SolarUAV.SummonItemBase.Pawn.Actor.Object
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 0x1]
	float DebugLineThickness;//[Offset: 0x394, Size: 0x4]
	SkeletalMeshComponent* Mesh;//[Offset: 0x398, Size: 0x8]
	SpringArmComponent* SpringArm;//[Offset: 0x3a0, Size: 0x8]
	FName AttachCharacterSocketName;//[Offset: 0x3a8, Size: 0x8]
	AnimationAsset* AppearAnim;//[Offset: 0x3b0, Size: 0x8]
	float AppearAnimLength;//[Offset: 0x3b8, Size: 0x4]
	AnimationAsset* DisappearAnim;//[Offset: 0x3c0, Size: 0x8]
	float DisppearAnimLength;//[Offset: 0x3c8, Size: 0x4]
	bool bProbeCollisionConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	float ProbeCollisionInterval;//[Offset: 0x3dc, Size: 0x4]
	float ProbeCollisionRadius;//[Offset: 0x3e0, Size: 0x4]
	float AvoidCollisionMaxHeight;//[Offset: 0x3e4, Size: 0x4]
	float AvoidCollisionOverTime;//[Offset: 0x3e8, Size: 0x4]
	float AvoidCollisionCDTime;//[Offset: 0x3ec, Size: 0x4]
	void UAVDestroy();// 0x5473312cd041
	void OnCharacterInVehicleTag(const GameplayTag Tag, int NewCount);// 0x5472312cd041
	void Disappear();// 0x5471312cd041

--------------------------------
Class: InjectorMeshPreset
	SoftObjectPath InjectorMeshPath;//[Offset: 0x0, Size: 0x18]
	Transform InjectorRelativeTrans;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: WaterEffectPreset
	ParticleSystem* EffectResource;//[Offset: 0x0, Size: 0x28]
	FName DefaultTrackSocket;//[Offset: 0x28, Size: 0x8]
	FName FTrackSocket;//[Offset: 0x30, Size: 0x8]
	FName BTrackSocket;//[Offset: 0x38, Size: 0x8]
	FName LTrackSocket;//[Offset: 0x40, Size: 0x8]
	FName RTrackSocket;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SolarItemComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb0, Size: 0x8]
	void UseItemRequestLuaCall(int ItemID, int Num);// 0x4a4e312cd041
	void OnPlayerBackpackItemUpdate();// 0x4a4d312cd041
	bool CanUseMedicine();// 0x4a4c312cd041

--------------------------------
Class: SolarPickupComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* OwnerChar;//[Offset: 0x560, Size: 0x8]
	float PickUpHighlyThresholdFactor;//[Offset: 0x570, Size: 0x4]
	bool bWantedClearItemData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 0x1]
	<enum,SolarPickupHandlerBase*> PickupHandlerMap;//[Offset: 0x578, Size: 0x50]
	SolarPickupHandlerBase* NormalPickupHandler;//[Offset: 0x5c8, Size: 0x8]
	bool GlobalPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	AirDropTreasureBox* TagetAirDropBox;//[Offset: 0x5d4, Size: 0x8]
	ActorArrayMap NormalPickupItems;//[Offset: 0x5e8, Size: 0x50]
	Actor*[] ProccessedList;//[Offset: 0x638, Size: 0x10]
	Actor*[] SortedPickupActors;//[Offset: 0x648, Size: 0x10]
	bool ItemUIToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 0x1]
	UIManager* UIManager;//[Offset: 0x660, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x668, Size: 0x8]
	bool GlobalAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c2, Size: 0x1]
	float UnAutoPickupItemTime;//[Offset: 0x6c4, Size: 0x4]
	float AutoPickupTime;//[Offset: 0x6c8, Size: 0x4]
	bool StopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 0x1]
	bool bReqPickItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d1, Size: 0x1]
	bool bPickupCheckBoxOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 0x1]
	TimerHandle AutoPickupTimer;//[Offset: 0x6f0, Size: 0x8]
	SolarGameUserSettings* UserSettings;//[Offset: 0x718, Size: 0x8]
	delegate OnItemDataSet;//[Offset: 0x730, Size: 0x10]
	delegate UpdateCheckBoxesVisibility;//[Offset: 0x740, Size: 0x10]
	delegate OnUpdateCheckBoxesHighLight;//[Offset: 0x750, Size: 0x10]
	delegate OnUpdateCheckBoxesStates;//[Offset: 0x760, Size: 0x10]
	delegate OnPickupListClear;//[Offset: 0x770, Size: 0x10]
	delegate OnTogglePickupList;//[Offset: 0x780, Size: 0x10]
	bool ListenFireReslutFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]
	float DelayedDisplayTime;//[Offset: 0x794, Size: 0x4]
	TimerHandle AutoShowPickupListHandle;//[Offset: 0x798, Size: 0x8]
	TimerHandle DelayProcessFireResultHandle;//[Offset: 0x7a0, Size: 0x8]
	TimerHandle EnsuredAutoShowHandle;//[Offset: 0x7a8, Size: 0x8]
	FString[] FireResultMsgs;//[Offset: 0x7b0, Size: 0x10]
	DeathTreasureBox*[] NearByDeathboxes;//[Offset: 0x7d0, Size: 0x10]
	DeathTreasureBox* NearestResurrectBox;//[Offset: 0x7e0, Size: 0x8]
	bool LastResurrecteBtnVisbile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 0x1]
	float CheckResurrectInterval;//[Offset: 0x7ec, Size: 0x4]
	float TempResurrectInterval;//[Offset: 0x7f0, Size: 0x4]
	float CheckStopResurrectInterval;//[Offset: 0x7f4, Size: 0x4]
	float TempStopResurrectInterval;//[Offset: 0x7f8, Size: 0x4]
	int PickupRecommendPriority;//[Offset: 0x7fc, Size: 0x4]
	<enum,int> ItemPriorityMap;//[Offset: 0x800, Size: 0x50]
	<enum,int> ItemMutiPickupMap;//[Offset: 0x850, Size: 0x50]
	<enum,int> WeaponPartPriorityMap;//[Offset: 0x8a0, Size: 0x50]
	<int,int> WeaponPartIDPriorityMap;//[Offset: 0x8f0, Size: 0x50]
	Actor* PendingFirstItemActor;//[Offset: 0x940, Size: 0x8]
	void UpdateResurrection(const float InDeltaTime);// 0x4beb312cd041
	void UpdateItemUI(bool bForce);// 0x4bea312cd041
	void UpdateCheckboxSwitches(const bool InPickupOpen);// 0x4be9312cd041
	void TryReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x4be8312cd041
	void TryPickupTreasureItem(SolarTreasureBoxActor* PickActor, out const SolarItemData ItemData);// 0x4be7312cd041
	void TryPickupItem(Actor* PickActor);// 0x4be6312cd041
	bool TryOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x4be5312cd041
	void TryClearDirtyData(const bool bForce);// 0x4be4312cd041
	bool TryCancelOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x4be3312cd041
	void ToggleItemUI(bool Flag);// 0x4be2312cd041
	void StopListenFireInput(bool bIsInstantlyStop);// 0x4be1312cd041
	void StopAutoPickupTimer();// 0x4be0312cd041
	void StartListenFireInput();// 0x4bdf312cd041
	void StartCheckTutorials(enum TriggerType);// 0x4bde312cd041
	void StartAutoPickupTimer();// 0x4bdd312cd041
	void ShowPickupList(bool Flag);// 0x4bdc312cd041
	bool ShouldPickupTreasureBoxItem(SolarTreasureBoxActor* InTreasureBox);// 0x4bdb312cd041
	void SetStopAutoPickupWhenClose(const bool InStopAutoPickupWhenClose);// 0x4bda312cd041
	void SetPickupSwitchInLua(const bool IsOpen);// 0x4bd9312cd041
	void SetPickupSwitch(const bool IsOpen);// 0x4bd8312cd041
	void SetPickupCapsuleSize(out const Vector Size);// 0x4bd7312cd041
	void SetAutoPickupSwitch(const bool InCanAutoPickup);// 0x4bd6312cd041
	void RestartPickupTimer();// 0x4bd5312cd041
	void ReqPickupWeapon(Actor* WeaponData, bool IsAutoPickup);// 0x4bd4312cd041
	void ReqPickupTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool IsAutoPickup, int TargetIndex, enum InItemType, bool bSorted);// 0x4bd3312cd041
	void ReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x4bd2312cd041
	void ReqOpenTreasureBox(SolarTreasureBoxActor* TreasureBox);// 0x4bd1312cd041
	void RemoveNearbyDeathbox(DeathTreasureBox* InDeathbox);// 0x4bd0312cd041
	void RefreshResurrectBtn();// 0x4bcf312cd041
	void RefreshPickupTimer();// 0x4bce312cd041
	void RefreshItemUI();// 0x4bcd312cd041
	void RecheckPendingActors();// 0x4bcc312cd041
	void ReceiveFireResult(FString InFireResultMsg);// 0x4bcb312cd041
	void ProcessFireResultMsgs();// 0x4bca312cd041
	void OnWeaponUpgrade(SolarPlayerWeapon* InWeapon);// 0x4bc9312cd041
	void OnWeaponSlotEquip(int InWeaponSlotID, SolarPlayerWeapon* InWeapon);// 0x4bc8312cd041
	void OnUsingSkillStatusChanged();// 0x4bc7312cd041
	void OnUpdateItemUIDataChanged(Object* Object, int OldItemID, int NewItemID);// 0x4bc6312cd041
	void OnTreasureBoxStateChange(int64 ThisID, const enum State);// 0x4bc5312cd041
	void OnPickupSettingChanged();// 0x4bc4312cd041
	void OnPickupConfirmHandle();// 0x4bc3312cd041
	void OnPickupActorEnd(Actor* ItemActor);// 0x4bc2312cd041
	void OnPickupActorBegin(Actor* ItemActor);// 0x4bc1312cd041
	void OnEquipChanged();// 0x4bc0312cd041
	void OnCharacterDeathBegin();// 0x4bbf312cd041
	void OnActorDestroyed(Actor* Actor);// 0x4bbe312cd041
	void MarkDirtyForTick();// 0x4bbd312cd041
	bool IsValidItemActor(const Actor* ItemActor);// 0x4bbc312cd041
	bool IsNeedReplace(const enum InType, out const SolarItemData InItemData);// 0x4bbb312cd041
	bool IsEquipItem(const enum InType);// 0x4bba312cd041
	bool IsCharacterInAir();// 0x4bb9312cd041
	void InitPickupPriorityMaps();// 0x4bb8312cd041
	SolarItemData GetTreasureItemDataByThisID(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID);// 0x4bb7312cd041
	int GetPickupWeaponPartTypePriority(out const SolarItemData InItemData);// 0x4bb6312cd041
	int GetPickupTypePriority(const enum InItemType);// 0x4bb5312cd041
	Actor* GetPickupTreasureBoxActor();// 0x4bb4312cd041
	int GetPickupPriority(out const SolarItemData InItemType);// 0x4bb3312cd041
	DeathTreasureBox* GetNearestResurrectBox();// 0x4bb2312cd041
	<int,ActorArray> GetItemDataMap();// 0x4bb1312cd041
	int GetItemDataCount(enum PickupItemType);// 0x4bb0312cd041
	bool GetIsGlobalPickup();// 0x4baf312cd041
	bool GetIsAutoPickupHomeItems();// 0x4bae312cd041
	void DoStopOpeningAirDropBox();// 0x4bad312cd041
	void DoOpenAirDropBox();// 0x4bac312cd041
	void DetectNearestResurrectTarget();// 0x4bab312cd041
	void CloseItemUI();// 0x4baa312cd041
	void ClearAutoShowPickupListHandle();// 0x4ba9312cd041
	void ClearAllTimer();// 0x4ba8312cd041
	void CheckToShowConfirm(out const SolarItemData ItemData);// 0x4ba7312cd041
	bool CheckIsItemMaximizing(const int ItemID);// 0x4ba6312cd041
	bool CanResurrectOwner(DeathTreasureBox* InDeathbox, out float OutDistance);// 0x4ba5312cd041
	bool CanMutiAutoPickup(const enum InItemType);// 0x4ba4312cd041
	void CallHUDSetTreasureBoxActor(Actor* InActor);// 0x4ba3312cd041
	void CallHUDSetAirdropBoxActor(Actor* InActor);// 0x4ba2312cd041
	void CallHUDSetActiveResurrectBtn(const bool Inactive);// 0x4ba1312cd041
	void CallHUDSetActiveOpenBoxProgress(const bool Inactive);// 0x4ba0312cd041
	void CallHUDSetActiveOpenBoxBtn(const bool Inactive);// 0x4b9f312cd041
	void CallHUDHideOpenBoxUIByThisID(const int64 InThisID);// 0x4b9e312cd041
	void CallHUDHideAirdropBoxUIByThisID(const int64 InThisID);// 0x4b9d312cd041
	void AddNearbyDeathbox(DeathTreasureBox* InDeathbox);// 0x4b9c312cd041

--------------------------------
Class: SolarPickupHandlerBase.Object
	enum Type;//[Offset: 0x28, Size: 0x1]
	SolarPickupComponent* OwnerComponent;//[Offset: 0x30, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ActorArrayMap
	<int,ActorArray> ActorArrayMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ActorArray
	Actor*[] ActorArray;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SolarTreatmentComponent.ActorComponent.Object
	delegate OnCharacterHealthLow;//[Offset: 0xb8, Size: 0x10]
	int MedicineItemId;//[Offset: 0xc8, Size: 0x4]
	float DefaultTreatmentDuration;//[Offset: 0xcc, Size: 0x4]
	SolarCharacter* OwnerCharacter;//[Offset: 0xd0, Size: 0x8]
	void TryStopTreatment();// 0x53f7312cd041
	void TryStatisticsTreatedTimes();// 0x53f6312cd041
	void TryStartTreatment();// 0x53f5312cd041
	void StopProgress();// 0x53f4312cd041
	void StartProgress();// 0x53f3312cd041
	bool IsMedicineEnough();// 0x53f2312cd041
	bool IsFullHealth();// 0x53f1312cd041
	bool IsAbleToContinueTreatment();// 0x53f0312cd041
	void IncreaseTreatedTimes();// 0x53ef312cd041
	FString GetModuleName_Implementation();// 0x53ee312cd041
	bool CanStartTreatment();// 0x53ed312cd041
	bool CanBeTreated();// 0x53ec312cd041

--------------------------------
Class: OperatorMeshPreset
	ParticleSystem* ShieldRepairFXResourceSoft;//[Offset: 0x0, Size: 0x28]
	Vector ShieldRepairFXRelativeLocation;//[Offset: 0x28, Size: 0xc]
	ParticleSystem* ShieldMultiRecoverFXResourceSoft;//[Offset: 0x38, Size: 0x28]
	Vector ShieldMultiRecoverFXRelativeLocation;//[Offset: 0x60, Size: 0xc]
	SoftObjectPath ShieldOperatorMeshPath;//[Offset: 0x70, Size: 0x18]
	SoftObjectPath ShieldOperatorBigMeshPath;//[Offset: 0x88, Size: 0x18]
	Transform ShieldOperatorRelativeTrans;//[Offset: 0xa0, Size: 0x30]

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ShieldSoundData
	<enum,enum> SoundData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TreasureBoxOperatorMeshPreset
	SoftObjectPath TreasureBoxOperatorMeshPath;//[Offset: 0x0, Size: 0x18]
	Transform TreasureBoxOperatorRelativeTrans;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: SolarTeammateHUDWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CheckHUDDistanceToCenter;//[Offset: 0x68c, Size: 0x4]
	float HUDTranslucentValue;//[Offset: 0x690, Size: 0x4]
	float LocationUpdateTolerance;//[Offset: 0x694, Size: 0x4]
	float InterpolationTimeRatio;//[Offset: 0x698, Size: 0x4]
	float InterpolationEaseInOutExp;//[Offset: 0x69c, Size: 0x4]
	CurveFloat* DistanceToScaleCurve;//[Offset: 0x6a0, Size: 0x8]
	bool bUseDistanceToCharacterForScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x571, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x572, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x578, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x580, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1]
	float RedrawTime;//[Offset: 0x58c, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x598, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x5a4, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ad, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x5ae, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5af, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5b0, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x5b8, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x5c8, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x5d8, Size: 0x4]
	enum BlendMode;//[Offset: 0x5dc, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dd, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5de, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x5e0, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x608, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x610, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x618, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x620, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x628, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x630, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x638, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x640, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x648, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x654, Size: 0x8]
	int LayerZOrder;//[Offset: 0x65c, Size: 0x4]
	enum GeometryMode;//[Offset: 0x660, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x664, Size: 0x4]
	void SetWindowVisibility(enum InVisibility);// 0x53ac312cd041
	void SetWindowFocusable(bool bInWindowFocusable);// 0x53ab312cd041
	void SetWidgetSpace(enum NewSpace);// 0x53aa312cd041
	void SetWidget(UserWidget* Widget);// 0x53a9312cd041
	void SetTwoSided(const bool bWantTwoSided);// 0x53a8312cd041
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x53a7312cd041
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x53a6312cd041
	void SetRedrawTime(float InRedrawTime);// 0x53a5312cd041
	void SetPivot(out const Vector2D InPivot);// 0x53a4312cd041
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x53a3312cd041
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x53a2312cd041
	void SetGeometryMode(enum InGeometryMode);// 0x53a1312cd041
	void SetDrawSize(Vector2D Size);// 0x53a0312cd041
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x539f312cd041
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x539e312cd041
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x539d312cd041
	void RequestRedraw();// 0x539c312cd041
	enum GetWindowVisiblility();// 0x539b312cd041
	bool GetWindowFocusable();// 0x539a312cd041
	enum GetWidgetSpace();// 0x5399312cd041
	UserWidget* GetUserWidgetObject();// 0x5398312cd041
	bool GetTwoSided();// 0x5397312cd041
	bool GetTickWhenOffscreen();// 0x5396312cd041
	TextureRenderTarget2D* GetRenderTarget();// 0x5395312cd041
	float GetRedrawTime();// 0x5394312cd041
	Vector2D GetPivot();// 0x5393312cd041
	LocalPlayer* GetOwnerPlayer();// 0x5392312cd041
	MaterialInstanceDynamic* GetMaterialInstance();// 0x5391312cd041
	bool GetManuallyRedraw();// 0x5390312cd041
	enum GetGeometryMode();// 0x538f312cd041
	Vector2D GetDrawSize();// 0x538e312cd041
	bool GetDrawAtDesiredSize();// 0x538d312cd041
	float GetCylinderArcAngle();// 0x538c312cd041
	Vector2D GetCurrentDrawSize();// 0x538b312cd041

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xc0, Size: 0x4]
	int SizeY;//[Offset: 0xc4, Size: 0x4]
	bool bAutoRTSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	LinearColor ClearColor;//[Offset: 0xcc, Size: 0x10]
	byte AddressX;//[Offset: 0xdc, Size: 0x1]
	byte AddressY;//[Offset: 0xdd, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xde, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xde, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xde, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xdf, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0xe1, Size: 0x1]
	byte MipsAddressU;//[Offset: 0xe2, Size: 0x1]
	byte MipsAddressV;//[Offset: 0xe3, Size: 0x1]
	byte OverrideFormat;//[Offset: 0xe4, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: TeammateHUDPreset
	class UserWidget* TeammateHUDClass;//[Offset: 0x0, Size: 0x8]
	bool bUseDesireSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	Vector2D DrawSize;//[Offset: 0xc, Size: 0x8]
	int ZOrder;//[Offset: 0x14, Size: 0x4]
	float DisplayMaxDistance;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: RadarScanSoundDataAsset.DataAsset.Object
	FString RadarScan_Loop_Start;//[Offset: 0x30, Size: 0x10]
	FString RadarScan_Loop_End;//[Offset: 0x40, Size: 0x10]
	FString RadarScan_Once_Success;//[Offset: 0x50, Size: 0x10]
	FString RadarScan_Once_Failed;//[Offset: 0x60, Size: 0x10]
	FString SuperRadarScan_FoundEnemy;//[Offset: 0x70, Size: 0x10]
	FString SuperRadarScan_FoundByEnemy;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: SolarRadarComponent.ActorComponent.Object
	RadarScanSoundDataAsset* RadarScanSoundDataAsset;//[Offset: 0xb8, Size: 0x8]
	class UserWidget* ScannedScreenUIClass;//[Offset: 0xc0, Size: 0x8]
	FName ScannedEffectID;//[Offset: 0xc8, Size: 0x8]
	UserWidget* CreatedScreenUI;//[Offset: 0xe8, Size: 0x8]
	TimerHandle DetectedTimerHandle;//[Offset: 0xf0, Size: 0x8]
	SolarCharacter* CharacterOwner;//[Offset: 0xf8, Size: 0x8]
	ScannedInfo[] CurrentScanResults;//[Offset: 0x100, Size: 0x10]
	float CurrentSpanTimer;//[Offset: 0x110, Size: 0x4]
	FName[] ActivedRadarTags;//[Offset: 0x118, Size: 0x10]
	MaterialChangeHandle DetectedMaterialHandle;//[Offset: 0x128, Size: 0x8]
	void WarningByRadarNotifation(float InRemainingTime);// 0x4da7312cd041
	void OnRecivedScanResults();// 0x4da6312cd041
	void OnRecieveOnceScanStart(int ScanedNum, bool bSuperRader);// 0x4da5312cd041
	void OnRadarScanStart(out RadarDataSpec RadarDataSpec);// 0x4da4312cd041
	void OnRadarScanEnd(out RadarDataSpec RadarDataSpec);// 0x4da3312cd041
	void OnRadarImmunityTagChanged(const GameplayTag Tag, int NewCount);// 0x4da2312cd041
	void OnDetectedByRadar(bool bOnceScan, float InDetectedTime, out const GameplayTag InRadarImmunityTag, bool bSuperRader);// 0x4da1312cd041
	void OnceScanSuccessNotifation(int ScanedNum);// 0x4da0312cd041
	void OnceScanFailedNotifation();// 0x4d9f312cd041
	void MarkedByOnceScanNotifation();// 0x4d9e312cd041
	FString GetModuleName_Implementation();// 0x4d9d312cd041
	void ExposedByRadarNotifation();// 0x4d9c312cd041
	void ChangeDetectedMaterial(bool bInDetected);// 0x4d9b312cd041

--------------------------------
Class: RadarDataSpec.FastArraySerializerItem
	GameplayAbilitySpecHandle RadarHandle;//[Offset: 0xc, Size: 0x4]
	byte RadarType;//[Offset: 0x10, Size: 0x1]
	Vector2D RadarRange;//[Offset: 0x14, Size: 0x8]
	Pawn* RadarSpawner;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ScannedInfo
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	enum TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector TargetLocation;//[Offset: 0xc, Size: 0xc]
	float TargetToward;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: MaterialChangeHandle

--------------------------------
Class: RadarDataSpecContainer.FastArraySerializer
	RadarDataSpec[] Radars;//[Offset: 0x108, Size: 0x10]
	SolarRadarComponent* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: CriticalHitInfo
	SolarPlayerState* Instigator;//[Offset: 0x0, Size: 0x8]
	float Damage;//[Offset: 0x8, Size: 0x4]
	float DamageTime;//[Offset: 0xc, Size: 0x4]
	int LastDamageWeaponID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: WorldMarkComponent.ActorComponent.Object
	SolarCharacter* Owner;//[Offset: 0xb8, Size: 0x8]
	uint32 WorldMarkPoolOriginSize;//[Offset: 0xc0, Size: 0x4]
	float MinCheckDistance;//[Offset: 0xc4, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xc8, Size: 0x4]
	void VehicleNotify(int VehicleID, int NameLocID, SolarPlayerController* Controller);// 0x5815312cd041
	void UpdateAttachedMarks();// 0x5814312cd041
	void UnMarkItemByIDLuaCall(int64 instanceID);// 0x5813312cd041
	void ResponseChosenMark();// 0x5812312cd041
	void RemoveAttachedMarkByActors(out Actor*[] InActors);// 0x5811312cd041
	void RecycleWorldMark(HUD_WorldMark* WorldMark);// 0x5810312cd041
	void NotifyThatToFarToMark();// 0x580f312cd041
	void MarkWarningOnWorld();// 0x580e312cd041
	void MarkQuickChatOnWorld(FString IconImg);// 0x580d312cd041
	void MarkPointOnWorld();// 0x580c312cd041
	void MarkOnWorldByMinimapPosition(int PosInTeam, out const Vector2D MinimapPos);// 0x580b312cd041
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x580a312cd041
	void MarkActorByAttachToThem(Actor* InActor);// 0x5809312cd041
	void LuaRelease();// 0x5808312cd041
	void LuaInit();// 0x5807312cd041
	void InteractTypeNotify(enum Type, SolarPlayerController* Controller);// 0x5806312cd041
	void Init(SolarCharacter* Character);// 0x5805312cd041
	HUD_WorldMarkPanel* GetWorldMarkPanel();// 0x5804312cd041
	HUD_WorldMark* GetFreeWorldMark();// 0x5803312cd041
	void CreateWorldMark(int PosInTeam, out const WorldMarkData InWorldMarkedData);// 0x5802312cd041
	void CreateWarningWidget(WorldMarkData Data);// 0x5801312cd041
	void CreateItemMarkWidget(WorldMarkData Data);// 0x5800312cd041
	void CreateInvalidWidget(WorldMarkData Data, bool bShouldNotify);// 0x57ff312cd041
	bool CheckMarkPointIsOutOfMap(out const Vector Location);// 0x57fe312cd041

--------------------------------
Class: HUD_WorldMark.SolarUserWidget.UserWidget.Widget.Visual.Object
	float LiveTime;//[Offset: 0x340, Size: 0x4]
	float RefreshTime;//[Offset: 0x344, Size: 0x4]
	Vector WorldPos;//[Offset: 0x348, Size: 0xc]
	Vector2D ScreenSize;//[Offset: 0x354, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x35c, Size: 0x8]
	bool bIsOutOfRangeLastTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	bool bHasBeenAnsweredByMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 0x1]
	bool bIfWasChosen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x366, Size: 0x1]
	bool bIsCreateBySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x367, Size: 0x1]
	Image* ImgMarkArrow;//[Offset: 0x368, Size: 0x8]
	Image* ImgItemMarkArrow;//[Offset: 0x370, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x378, Size: 0x8]
	int PosInTeam;//[Offset: 0x380, Size: 0x4]
	enum Type;//[Offset: 0x384, Size: 0x1]
	float MaxWorldDistance;//[Offset: 0x388, Size: 0x4]
	float MinWorldDistance;//[Offset: 0x38c, Size: 0x4]
	CurveFloat* OpacityCurve;//[Offset: 0x390, Size: 0x8]
	bool bAttachToObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	void UpdateDistance(out const Vector TargetPos);// 0x3fdd312cd041
	void SwitchWidget(bool bOutOfRange);// 0x3fdc312cd041
	void SetIfBeChosen(bool bIfChosen);// 0x3fdb312cd041
	void LogMarkResponse();// 0x3fda312cd041
	void InitAttachedWidget(Actor* ActorAttachedTo);// 0x3fd9312cd041
	void DestroySelf();// 0x3fd8312cd041

--------------------------------
Class: HUD_WorldMarkPanel.SolarUserWidget.UserWidget.Widget.Visual.Object
	HUD_MarkEnemyInfo*[] MarkdEnemyWidgets;//[Offset: 0x340, Size: 0x10]
	CanvasPanel* MarkPanel;//[Offset: 0x350, Size: 0x8]
	class HUD_MarkEnemyInfo* MarkEnemyInfoWidgetClass;//[Offset: 0x358, Size: 0x8]
	HUD_MarkEnemyInfo*[] MarkEnemyWidgets;//[Offset: 0x360, Size: 0x10]
	void OnSuperRadarStart(out const FString[] InPlayers);// 0x3fe4312cd041
	void OnSuperRadarRemovePlayer(FString InPlayer);// 0x3fe3312cd041
	void OnSuperRadarEnd();// 0x3fe2312cd041
	void OnSpectateTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x3fe1312cd041
	FString OnRegisterPositionMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, out const Vector InPosition);// 0x3fe0312cd041
	FString OnRegisterActorMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, Actor* FollowActor);// 0x3fdf312cd041
	void OnDamagingActorsChange();// 0x3fde312cd041

--------------------------------
Class: HUD_MarkEnemyInfo.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarTextBlock* Txt_Lvl;//[Offset: 0x340, Size: 0x8]
	DeathViewHPWidget* HPAndShield;//[Offset: 0x348, Size: 0x8]
	CanvasPanel* CanvasPanel;//[Offset: 0x350, Size: 0x8]
	WidgetAnimation* Anim_Exit;//[Offset: 0x358, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x360, Size: 0x8]
	float UpdateVisibleInterval;//[Offset: 0x368, Size: 0x4]
	CurveFloat* DistaceToScaleCurve;//[Offset: 0x370, Size: 0x8]
	<class Actor> OcculusionIgnoreClasses;//[Offset: 0x378, Size: 0x50]
	float MinDisplayHpValue;//[Offset: 0x3c8, Size: 0x4]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 0x1]
	float ZOffset;//[Offset: 0x3e0, Size: 0x4]
	void OnEnemyShieldValueChanged(const enum WidgetState, const float InCurValue, const float InChangeValue, FString InSolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x3f9b312cd041
	void OnEnemyShieldChanged(FString InSolarPlayerID, const float CurValue, const float MaxValue, const int QualityColor, const bool bAdvancedShield);// 0x3f9a312cd041

--------------------------------
Class: DeathViewHPWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	bool bSplitHPBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	SolarShieldProgressBoard* AdvBar_Shield;//[Offset: 0x380, Size: 0x8]
	SolarHPProgressBoard* AdvBar_HP;//[Offset: 0x388, Size: 0x8]
	LinearColor HPColorNormal;//[Offset: 0x3b0, Size: 0x10]
	LinearColor HPColorDying;//[Offset: 0x3c0, Size: 0x10]
	void UpdateShieldValue(const enum WidgetState, const float InCurValue, const float InChangeValue, const enum RechargeState, bool bFixPreAdd);// 0x3eab312cd041
	void UpdateHPColor(const byte InRescueState);// 0x3eaa312cd041
	void UpdateHPBar(const float InCurHealth, const float InMaxHealth);// 0x3ea9312cd041
	void ShowShieldUI(const bool bIsShow);// 0x3ea8312cd041
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x3ea7312cd041
	void OnCharacterEndPlay(SolarCharacter* Character);// 0x3ea6312cd041
	void InitShieldHUD(const float InCurValue, const float InMaxValue, const int QualityColor, const bool bIsAdvancedShield);// 0x3ea5312cd041

--------------------------------
Class: SolarShieldProgressBoard.SolarAdvProgressBoard.UserWidget.Widget.Visual.Object
	float AutoRechargeSpeed;//[Offset: 0x2b4, Size: 0x4]
	float RechargeTime;//[Offset: 0x2b8, Size: 0x4]
	float PreChangeSpeed;//[Offset: 0x2bc, Size: 0x4]
	void UpdateCurrentValue(float Current);// 0x4e01312cd041
	void SetSpeed(float NewSpeed);// 0x4e00312cd041
	void SetProgressColorByID(out const LinearColor InColor, const int InID);// 0x4dff312cd041
	void SetPreAddColor();// 0x4dfe312cd041
	void PreAddValue(const float InCurrentValue, const float InChangeValue, const enum RechargeState, const bool bInFixPreAdd);// 0x4dfd312cd041
	void InitProgressBoard(float Current, float Max, int Fragment);// 0x4dfc312cd041
	void InitProgress();// 0x4dfb312cd041
	float GetSpeed();// 0x4dfa312cd041
	void DoMinusValue(const float InCurrentValue, const float InChangeValue);// 0x4df9312cd041
	void DoAddValue(const float InCurrentValue);// 0x4df8312cd041
	void CancelAddValue(const float InCurrentValue, const float InChangeValue);// 0x4df7312cd041

--------------------------------
Class: SolarAdvProgressBoard.UserWidget.Widget.Visual.Object
	Image* ProgressBoard;//[Offset: 0x260, Size: 0x8]
	MaterialInstance* ProgressShader;//[Offset: 0x268, Size: 0x8]
	LinearColor IncreaseColor;//[Offset: 0x270, Size: 0x10]
	LinearColor DecreaseColor;//[Offset: 0x280, Size: 0x10]

--------------------------------
Class: SolarHPProgressBoard.UserWidget.Widget.Visual.Object
	Image* ProgressBoard;//[Offset: 0x260, Size: 0x8]
	MaterialInstance* ProgressShader;//[Offset: 0x268, Size: 0x8]
	float Speed;//[Offset: 0x270, Size: 0x4]
	float RechargeSpeed;//[Offset: 0x274, Size: 0x4]
	float RechargeTime;//[Offset: 0x278, Size: 0x4]
	int RechargeIndex;//[Offset: 0x27c, Size: 0x4]
	bool bDebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	float Percent1;//[Offset: 0x284, Size: 0x4]
	float Percent2;//[Offset: 0x288, Size: 0x4]
	float Percent3;//[Offset: 0x28c, Size: 0x4]
	float Percent4;//[Offset: 0x290, Size: 0x4]
	bool bNeedAlternateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	LinearColor IncreaseColor;//[Offset: 0x298, Size: 0x10]
	LinearColor DecreaseColor;//[Offset: 0x2a8, Size: 0x10]
	void UpdateMaxValue(float Max);// 0x49c2312cd041
	void UpdateCurrentValue(float Current);// 0x49c1312cd041
	void SetSpacing(const float InValue);// 0x49c0312cd041
	void SetProgressColorByID(out const LinearColor InColor, const int InID);// 0x49bf312cd041
	void SetPreAddColor();// 0x49be312cd041
	void SetPercentageByIndex(float Percent, int Index);// 0x49bd312cd041
	void SetFragment(float Num);// 0x49bc312cd041
	void SetCurrentValueInstantly(float Current);// 0x49bb312cd041
	void SetAlternateColor(out const LinearColor InColor, bool IsChangeBoth, bool IsForIncrease);// 0x49ba312cd041
	void PreAddValue(const float InCurrentValue, const float InChangeValue, const enum RechargeState, const bool bInFixPreAdd, const bool bInAdaptiveRecharge);// 0x49b9312cd041
	void InitProgressBoard(float Current, float Max, float Fragment);// 0x49b8312cd041
	void InitProgress();// 0x49b7312cd041
	LinearColor GetAlternateColor(bool bIncrease);// 0x49b6312cd041
	void DoMinusValue(const float InCurrentValue, const float InChangeValue);// 0x49b5312cd041
	void DoAddValue(const float InCurrentValue, const float InChangeValue);// 0x49b4312cd041
	void CancelAddValue(const float InCurrentValue, const float InChangeValue);// 0x49b3312cd041

--------------------------------
Class: SolarCharacterAbility.SolarAbility.Actor.Object
	enum[] Conditions;//[Offset: 0x310, Size: 0x10]
	enum TriggerType;//[Offset: 0x320, Size: 0x1]
	float CoolDown;//[Offset: 0x324, Size: 0x4]
	int CharacterId;//[Offset: 0x328, Size: 0x4]
	int Level;//[Offset: 0x32c, Size: 0x4]
	int LevelOutside;//[Offset: 0x330, Size: 0x4]
	SolarCharacterAbilityCondition*[] ConditionInsts;//[Offset: 0x338, Size: 0x10]
	void UpdateParamsFromConfig();// 0x45da312cd041
	void UpdateParam(FString ParamKey, float ParamValue);// 0x45d9312cd041
	void PrepareConfigData();// 0x45d8312cd041
	void GiveCharacterAbility(class SolarCharacterAbility AbilityClass, SolarCharacter* SolarCharacter);// 0x45d7312cd041

--------------------------------
Class: SolarCharacterAbilityCondition.Object

--------------------------------
Class: SolarCharacterMovementComponent.SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x6a0, Size: 0x8]
	float DefaultUnscaledCapsuleHalfHeight;//[Offset: 0x6a8, Size: 0x4]
	bool bKeepWalkSpeedOnTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 0x1]
	float MinJogSpeedScaleOnBlocked;//[Offset: 0x6c8, Size: 0x4]
	float MinRunSpeedScaleOnBlocked;//[Offset: 0x6cc, Size: 0x4]
	float MinSprintSpeedScaleOnBlocked;//[Offset: 0x6d0, Size: 0x4]
	float MinCrawlSpeedScaleOnBlocked;//[Offset: 0x6d4, Size: 0x4]
	float MinSwimSpeedScaleOnBlocked;//[Offset: 0x6d8, Size: 0x4]
	bool bOverrideFallingGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 0x1]
	float OverriddenFallingGravity;//[Offset: 0x6e0, Size: 0x4]
	float FallingHorizontalSpeedUpperLimit;//[Offset: 0x6e4, Size: 0x4]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x6e8, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x6ec, Size: 0x1]
	enum CurrentAirMoveMode;//[Offset: 0x706, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x707, Size: 0x1]
	CustomJumpParams CustomJumpParams;//[Offset: 0x708, Size: 0xc]
	CustomJumpParams CustomLaunchParams;//[Offset: 0x714, Size: 0xc]
	JetPackConfig* JetPackConfig;//[Offset: 0x730, Size: 0x8]
	SkydiveConfig* SkydiveConfig;//[Offset: 0x750, Size: 0x8]
	float HinderAngel;//[Offset: 0x78c, Size: 0x4]
	float HinderPercent;//[Offset: 0x790, Size: 0x4]
	float HinderZ;//[Offset: 0x794, Size: 0x4]
	float SwimSpeedWhenSprintLockConfig;//[Offset: 0x798, Size: 0x4]
	float SwimSpeedConfig;//[Offset: 0x79c, Size: 0x4]
	float SwimSpeedSmoothSpeed;//[Offset: 0x7a0, Size: 0x4]
	float SwimMaxFloatingUpSpeed;//[Offset: 0x7a4, Size: 0x4]
	float SwimMaxSinkingSpeed;//[Offset: 0x7a8, Size: 0x4]
	PhysicsVolume* NextPhysicsVolume;//[Offset: 0x7ac, Size: 0x8]
	bool bWantDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1]
	float DeathVergeBodyRadius;//[Offset: 0x7e4, Size: 0x4]
	float DeathVergeHalfHeight;//[Offset: 0x7e8, Size: 0x4]
	void SetHinderZ(float InHinderZ);// 0x3f78312cd041
	void SetHinderAngel(float InHinderAngel);// 0x3f77312cd041
	void OnMovementBaseChanged(Character* Character, PrimitiveComponent* OldBase, PrimitiveComponent* NewBase);// 0x3f76312cd041
	void HinderUphill(out const Vector SlopeNormal, out Vector MoveVelocity);// 0x3f75312cd041
	byte GetSteppedSurfaceType();// 0x3f74312cd041
	enum GetLastWalkMode();// 0x3f73312cd041
	enum GetCurrentWalkMode();// 0x3f72312cd041

--------------------------------
Class: SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float SimStepOptimizedDist;//[Offset: 0x614, Size: 0x4]
	int TimeDiscrepancyUploadThres;//[Offset: 0x650, Size: 0x4]
	SolarClientAdjustPositionInfo CachedClientAdjustPositionInfo;//[Offset: 0x658, Size: 0x38]

--------------------------------
Class: SolarClientAdjustPositionInfo
	PrimitiveComponent* NewBase;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CustomJumpParams
	float JumpHeight;//[Offset: 0x0, Size: 0x4]
	float JumpTime;//[Offset: 0x4, Size: 0x4]
	float JumpDelay;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: JetPackConfig.DataAsset.Object
	float CurrentSpeedResidueHorizontal;//[Offset: 0x30, Size: 0x4]
	float CurrentSpeedResidueVertical;//[Offset: 0x34, Size: 0x4]
	float AltitudeLimitation;//[Offset: 0x38, Size: 0x4]
	float DashHeightForLimitedAltitude;//[Offset: 0x3c, Size: 0x4]
	float SlantDashInputThreshold;//[Offset: 0x40, Size: 0x4]
	float VerticalDashTime;//[Offset: 0x44, Size: 0x4]
	float VerticalDashHeight;//[Offset: 0x48, Size: 0x4]
	float VerticalDashAngle;//[Offset: 0x4c, Size: 0x4]
	float VerticalDashMaxHorizontalEndSpeed;//[Offset: 0x50, Size: 0x4]
	float VerticalDashBreakableTime;//[Offset: 0x54, Size: 0x4]
	float VerticalDashCameraFadeOutTime;//[Offset: 0x58, Size: 0x4]
	float SlantDashTime;//[Offset: 0x5c, Size: 0x4]
	float SlantDashHeight;//[Offset: 0x60, Size: 0x4]
	float SlantDashAngle;//[Offset: 0x64, Size: 0x4]
	float SlantDashMaxHorizontalEndSpeed;//[Offset: 0x68, Size: 0x4]
	float SlantDashBreakableTime;//[Offset: 0x6c, Size: 0x4]
	float SlantDashCameraFadeOutTime;//[Offset: 0x70, Size: 0x4]
	float HorizontalDashTime;//[Offset: 0x74, Size: 0x4]
	float HorizontalDashDistance;//[Offset: 0x78, Size: 0x4]
	float HorizontalDashAngle;//[Offset: 0x7c, Size: 0x4]
	float HorizontalDashEndSpeed;//[Offset: 0x80, Size: 0x4]
	float HorizontalDashBreakableTime;//[Offset: 0x84, Size: 0x4]
	float HorizontalDashCameraFadeOutTime;//[Offset: 0x88, Size: 0x4]
	float UnderWaterHorizontalDashTime;//[Offset: 0x8c, Size: 0x4]
	float UnderWaterHorizontalDashDistance;//[Offset: 0x90, Size: 0x4]
	float UnderWaterHorizontalDashBreakableTime;//[Offset: 0x94, Size: 0x4]
	float UnderWaterHorizontalDashCameraFadeOutTime;//[Offset: 0x98, Size: 0x4]
	VehicleEjectParams DefaultVehicleEjectParams;//[Offset: 0x9c, Size: 0x10]

--------------------------------
Class: SkydiveConfig.DataAsset.Object
	float DefaultFallingSpeed;//[Offset: 0x30, Size: 0x4]
	float MinFallingSpeed;//[Offset: 0x34, Size: 0x4]
	float FallingBrakingDeceleration;//[Offset: 0x38, Size: 0x4]
	RuntimeFloatCurve FlyingForwardPitchMappingCurve;//[Offset: 0x40, Size: 0x88]
	RuntimeFloatCurve MaxFlyingForwardSpeedCurve;//[Offset: 0xc8, Size: 0x88]
	float MaxFlyingSidewardSpeed;//[Offset: 0x150, Size: 0x4]
	float MaxFlyingAcceleration;//[Offset: 0x154, Size: 0x4]
	float MinFlyingBrakingDeceleration;//[Offset: 0x158, Size: 0x4]
	float MaxFlyingBrakingDeceleration;//[Offset: 0x15c, Size: 0x4]
	float FlyingRotationSmoothSpeedYaw;//[Offset: 0x160, Size: 0x4]
	float FlyingRotationSmoothSpeedPitch;//[Offset: 0x164, Size: 0x4]
	float FlyingRotationSmoothSpeedYawOnFollowing;//[Offset: 0x168, Size: 0x4]
	float FlyingRotationSmoothSpeedPitchOnFollowing;//[Offset: 0x16c, Size: 0x4]
	float LandingHeight;//[Offset: 0x170, Size: 0x4]
	float LandingFallingSpeed;//[Offset: 0x174, Size: 0x4]
	float LandingFallingBrakingDeceleration;//[Offset: 0x178, Size: 0x4]
	float LandingMaxFlyingSpeed;//[Offset: 0x17c, Size: 0x4]
	float LandingFlyingAcceleration;//[Offset: 0x180, Size: 0x4]
	FName[] LandingIgnoredActorTags;//[Offset: 0x188, Size: 0x10]
	Vector[] FollowFormation;//[Offset: 0x198, Size: 0x10]
	float SmoothTimeToCatchUpWithLeaderOnBeginning;//[Offset: 0x1a8, Size: 0x4]
	CharacterMovementNetworkOptions NetworkOptions;//[Offset: 0x1ac, Size: 0xc]
	CharacterMovementSimulationOptions SimulationOptions;//[Offset: 0x1b8, Size: 0x10]

--------------------------------
Class: CharacterMovementNetworkOptions
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x4, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: CharacterMovementSimulationOptions
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x4, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x8, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: CruiseAssetSet.DataAsset.Object
	SoftClassPath CapsuleActorClass;//[Offset: 0x30, Size: 0x18]
	SoftClassPath[] CruiseAbilityClasses;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SolarCapsuleRoot.Actor.Object
	SceneComponent* RootComp;//[Offset: 0x230, Size: 0x8]
	WidgetComponent* LocationSign;//[Offset: 0x238, Size: 0x8]
	float CatchupDuration;//[Offset: 0x250, Size: 0x4]
	float CatchupBaseLerp;//[Offset: 0x254, Size: 0x4]
	MiniMapAirlineData MiniMapData;//[Offset: 0x27c, Size: 0x30]
	UsingAirlineData CurrentAirline;//[Offset: 0x2ac, Size: 0x44]
	float CruiseStartTime;//[Offset: 0x2f0, Size: 0x4]
	Vector CruiseStartLoc;//[Offset: 0x2f4, Size: 0xc]
	Rotator CruiseStartRot;//[Offset: 0x300, Size: 0xc]
	int ForceParachuteWarningTime;//[Offset: 0x30c, Size: 0x4]
	float MaxAllowedSmoothDistance;//[Offset: 0x310, Size: 0x4]
	float ClientSpeedScale;//[Offset: 0x314, Size: 0x4]
	float ClientRotationSmoothSpeed;//[Offset: 0x318, Size: 0x4]
	CapsuleFormationData* CapsuleFormationData;//[Offset: 0x338, Size: 0x8]
	<Vector,TeamFormationUnit> CruiseFormation;//[Offset: 0x340, Size: 0x50]
	BoarderInfo[] BoardingPlayerList;//[Offset: 0x390, Size: 0x10]
	void ServerUnBoardCharacter(SolarCharacter* Character);// 0x45d3312cd041
	void OnRep_MiniMapAirline();// 0x45d2312cd041
	void OnRep_CurrentAirline();// 0x45d1312cd041
	MiniMapAirlineData K2_GetAirlineData();// 0x45d0312cd041
	SolarCapsuleRoot* GetSolarCapsuleRoot(const Object* WorldContextObject);// 0x45cf312cd041
	float GetCruiseProgress();// 0x45ce312cd041
	int BoardingCharacter(out const BoarderInfo BoarderInfo);// 0x45cd312cd041

--------------------------------
Class: BoarderInfo
	SolarCharacter* Boarder;//[Offset: 0x0, Size: 0x8]
	int BoarderTeamID;//[Offset: 0x8, Size: 0x4]
	int BoarderTeamSize;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UsingAirlineData
	int MapID;//[Offset: 0x0, Size: 0x4]
	Vector StartPoint;//[Offset: 0x4, Size: 0xc]
	Vector EndPoint;//[Offset: 0x10, Size: 0xc]
	Vector2D Direction;//[Offset: 0x1c, Size: 0x8]
	float Speed;//[Offset: 0x24, Size: 0x4]
	float Height;//[Offset: 0x28, Size: 0x4]
	Vector CanParachutePoint;//[Offset: 0x2c, Size: 0xc]
	Vector ForceParachutePoint;//[Offset: 0x38, Size: 0xc]

--------------------------------
Class: CapsuleFormationData.DataAsset.Object
	<byte,EchelonFormation> TeamFormation;//[Offset: 0x30, Size: 0x50]
	CruiseFormation CruiseFormation;//[Offset: 0x80, Size: 0x10]
	void OverrideTeamFormation(out const <byte,EchelonFormation> InNewFormation);// 0x3d50312cd041
	void ClearTeamFormationData();// 0x3d4f312cd041
	void ClearCruiseFormationData();// 0x3d4e312cd041
	void AddTeamFormationLocation(const byte InEchelon, out const Vector InLocation);// 0x3d4d312cd041
	void AddLocationToTeamFormation(out <byte,EchelonFormation> InFormation, const byte InEchelon, out const Vector InLocation);// 0x3d4c312cd041
	void AddEchelonFormation(const byte InEchelon, out const EchelonFormation InFormation);// 0x3d4b312cd041
	void AddCruiseFormation(out const CruiseFormation InFormation);// 0x3d4a312cd041

--------------------------------
Class: EchelonFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CruiseFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TeamFormationUnit
	<byte,EchelonFormationUnit> TeamFormation;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: EchelonFormationUnit
	BoardingSpotInfo[] EchelonFormation;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BoardingSpotInfo
	Vector SpotLocation;//[Offset: 0x0, Size: 0xc]
	SolarPlayerState* BoardingPlayer;//[Offset: 0x10, Size: 0x8]
	SolarPlayerState* LeaderPlayer;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CharacterCruiseComponent.ActorComponent.Object
	SolarCapsuleActor* BoardedCapsulePrivate;//[Offset: 0xb0, Size: 0x8]
	FName CruiseStartSoundGroupName;//[Offset: 0xc4, Size: 0x8]
	SolarCharacter* GetCharacterOwner();// 0x3e55312cd041

--------------------------------
Class: SolarCapsuleActor.Actor.Object
	SoftObjectPath StartCruisingPath;//[Offset: 0x228, Size: 0x18]
	SoftObjectPath StopCruisingPath;//[Offset: 0x240, Size: 0x18]
	FName CruiseCharacterBindingName;//[Offset: 0x258, Size: 0x8]
	FName CruiseCapsuleBindingName;//[Offset: 0x260, Size: 0x8]
	FName CruiseCameraBindingName;//[Offset: 0x268, Size: 0x8]
	float SequenceCameraBlendDuration;//[Offset: 0x270, Size: 0x4]
	AnimationAsset* CapsuleCruisingLoopAnim;//[Offset: 0x278, Size: 0x8]
	AnimSequence* CharacterCruiseLoopAnim;//[Offset: 0x280, Size: 0x8]
	SoftObjectPath CapsuleCruisingStopAnimPath;//[Offset: 0x288, Size: 0x18]
	AnimSequence* CharacterCruiseEndAnim;//[Offset: 0x2a0, Size: 0x8]
	SkeletalMeshComponent* CapsuleSkeletalMesh;//[Offset: 0x2a8, Size: 0x8]
	StaticMeshComponent*[] AirflowMeshEffects;//[Offset: 0x2b0, Size: 0x10]
	ParticleSystemComponent*[] AirflowParticleEffects;//[Offset: 0x2c0, Size: 0x10]
	LevelSequenceActor* SequenceActor;//[Offset: 0x2d0, Size: 0x8]
	CineCameraActor* SequenceCamera;//[Offset: 0x2d8, Size: 0x8]
	LevelSequence* StartCruisingSequence;//[Offset: 0x2e0, Size: 0x8]
	LevelSequence* StopCruisingSequence;//[Offset: 0x2e8, Size: 0x8]
	AnimationAsset* CapsuleCruisingEndAnim;//[Offset: 0x2f0, Size: 0x8]
	SolarCharacter* BoardedCharacterPrivate;//[Offset: 0x2f8, Size: 0x8]
	ParticleSystemComponent* CloudParticleComponent;//[Offset: 0x300, Size: 0x8]
	SoftObjectPath CloudParticlePath;//[Offset: 0x308, Size: 0x18]
	ParticleSystem* CloudParticleAsset;//[Offset: 0x340, Size: 0x8]
	void StopCruiseSequenceFinished();// 0x45cc312cd041
	void StartCruiseSequenceFinished();// 0x45cb312cd041
	void PlayStopCruiseSequence();// 0x45ca312cd041
	void PlayStopCruiseAnimation();// 0x45c9312cd041
	void PlayStartCruiseSequence();// 0x45c8312cd041
	void PlayCruiseLoopAnimation();// 0x45c7312cd041
	void HideCapsuleAirflowVFX();// 0x45c6312cd041
	SolarCapsuleActor* CreateCapsuleActorForBoarder(SolarCharacter* InBoarder, class SolarCapsuleActor CapsuleActorClass);// 0x45c5312cd041

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x238, Size: 0x14]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x250, Size: 0x8]
	SoftObjectPath LevelSequence;//[Offset: 0x258, Size: 0x18]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x270, Size: 0x10]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x280, Size: 0x2]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x288, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x290, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x298, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x298, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x2a0, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2a8, Size: 0x8]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	void ShowBurnin();// 0x3148312cd041
	void SetSequence(LevelSequence* InSequence);// 0x3147312cd041
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x3146312cd041
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x3145312cd041
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x3144312cd041
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x3143312cd041
	void ResetBindings();// 0x3142312cd041
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x3141312cd041
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x3140312cd041
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x313f312cd041
	void OnLevelSequenceLoaded__DelegateSignature();// 0x313e312cd041
	LevelSequence* LoadSequence();// 0x313d312cd041
	void HideBurnin();// 0x313c312cd041
	LevelSequencePlayer* GetSequencePlayer();// 0x313b312cd041
	LevelSequence* GetSequence();// 0x313a312cd041
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x3139312cd041
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x3138312cd041
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x3137312cd041
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x3136312cd041

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x888, Size: 0x10]
	CameraComponent* GetActiveCameraComponent();// 0x5b78312cd041
	LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x5b77312cd041

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x408, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x418, Size: 0x10]
	delegate OnStop;//[Offset: 0x428, Size: 0x10]
	delegate OnPause;//[Offset: 0x438, Size: 0x10]
	delegate OnFinished;//[Offset: 0x448, Size: 0x10]
	byte status;//[Offset: 0x458, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x460, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x468, Size: 0x4]
	int DurationFrames;//[Offset: 0x46c, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x470, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x488, Size: 0x14]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4a0, Size: 0x320]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x828, Size: 0x10]
	interface class _                                                                                                   * PlaybackClient;//[Offset: 0x838, Size: 0x10]
	void StopAtCurrentTime();// 0x3ae2312cd041
	void Stop();// 0x3ae1312cd041
	void SetTimeRange(float StartTime, float Duration);// 0x3ae0312cd041
	void SetPlayRate(float PlayRate);// 0x3adf312cd041
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x3ade312cd041
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x3add312cd041
	void SetFrameRate(FrameRate FrameRate);// 0x3adc312cd041
	void SetFrameRange(int StartFrame, int Duration);// 0x3adb312cd041
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x3ada312cd041
	void ScrubToSeconds(float TimeInSeconds);// 0x3ad9312cd041
	bool ScrubToMarkedFrame(FString InLabel);// 0x3ad8312cd041
	void ScrubToFrame(FrameTime NewPosition);// 0x3ad7312cd041
	void Scrub();// 0x3ad6312cd041
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x3ad5312cd041
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x3ad4312cd041
	void PlayToSeconds(float TimeInSeconds);// 0x3ad3312cd041
	bool PlayToMarkedFrame(FString InLabel);// 0x3ad2312cd041
	void PlayToFrame(FrameTime NewPosition);// 0x3ad1312cd041
	void PlayReverse();// 0x3ad0312cd041
	void PlayLooping(int NumLoops);// 0x3acf312cd041
	void Play();// 0x3ace312cd041
	void Pause();// 0x3acd312cd041
	void JumpToSeconds(float TimeInSeconds);// 0x3acc312cd041
	void JumpToPosition(float NewPlaybackPosition);// 0x3acb312cd041
	bool JumpToMarkedFrame(FString InLabel);// 0x3aca312cd041
	void JumpToFrame(FrameTime NewPosition);// 0x3ac9312cd041
	bool IsReversed();// 0x3ac8312cd041
	bool IsPlaying();// 0x3ac7312cd041
	bool IsPaused();// 0x3ac6312cd041
	void GoToEndAndStop();// 0x3ac5312cd041
	QualifiedFrameTime GetStartTime();// 0x3ac4312cd041
	float GetPlayRate();// 0x3ac3312cd041
	float GetPlaybackStart();// 0x3ac2312cd041
	float GetPlaybackPosition();// 0x3ac1312cd041
	float GetPlaybackEnd();// 0x3ac0312cd041
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x3abf312cd041
	float GetLength();// 0x3abe312cd041
	FrameRate GetFrameRate();// 0x3abd312cd041
	int GetFrameDuration();// 0x3abc312cd041
	QualifiedFrameTime GetEndTime();// 0x3abb312cd041
	QualifiedFrameTime GetDuration();// 0x3aba312cd041
	bool GetDisableCameraCuts();// 0x3ab9312cd041
	QualifiedFrameTime GetCurrentTime();// 0x3ab8312cd041
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x3ab7312cd041
	void ChangePlaybackDirection();// 0x3ab6312cd041

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 0x50]
	class Object* DirectorClass;//[Offset: 0x490, Size: 0x8]
	void RemoveMetaDataByClass(class Object InClass);// 0x5b72312cd041
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x5b71312cd041
	Object* FindMetaDataByClass(class Object InClass);// 0x5b70312cd041
	Object* CopyMetaData(Object* InMetaData);// 0x5b6f312cd041

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x5b73312cd041

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x260, Size: 0xb8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x318, Size: 0x8]
	void SetSettings(Object* InSettings);// 0x5b75312cd041
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x5b74312cd041

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x800, Size: 0x50]
	CineCameraComponent* GetCineCameraComponent();// 0x4e5d312cd041

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x930, Size: 0xc]
	CameraFilmbackSettings Filmback;//[Offset: 0x93c, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x948, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x960, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x9b8, Size: 0x4]
	float CurrentAperture;//[Offset: 0x9bc, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x9c0, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x9d0, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0x9e0, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0x9f0, Size: 0x10]
	FString DefaultFilmbackPreset;//[Offset: 0xa00, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0xa10, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0xa20, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0xa24, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x5a42312cd041
	void SetFilmbackPresetByName(FString InPresetName);// 0x5a41312cd041
	void SetCurrentFocalLength(out const float InFocalLength);// 0x5a40312cd041
	float GetVerticalFieldOfView();// 0x5a3f312cd041
	NamedLensPreset[] GetLensPresetsCopy();// 0x5a3e312cd041
	FString GetLensPresetName();// 0x5a3d312cd041
	float GetHorizontalFieldOfView();// 0x5a3c312cd041
	FString GetFilmbackPresetName();// 0x5a3b312cd041
	FString GetDefaultFilmbackPresetName();// 0x5a3a312cd041

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: SkydivingEffectPreset
	ParticleSystem* EffectResource;//[Offset: 0x0, Size: 0x28]
	Transform AttachmentOffset;//[Offset: 0x30, Size: 0x30]
	FName AttachmentSocket;//[Offset: 0x60, Size: 0x8]
	enum Lifetime;//[Offset: 0x68, Size: 0x1]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x228, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	void OnRep_bEnabled();// 0x5ccf312cd041

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	bool EnableFarlightMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	SLDistanceFogData DistanceFogData_M;//[Offset: 0x318, Size: 0x18]
	SLHeightFogData HeightFogData_M;//[Offset: 0x330, Size: 0x10]
	SLDirectionalLightScattering ScatteringData_M;//[Offset: 0x340, Size: 0x20]
	LinearColor FogColor_M;//[Offset: 0x360, Size: 0x10]
	float FogDensity;//[Offset: 0x370, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x374, Size: 0x4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x378, Size: 0xc]
	LinearColor FogInscatteringColor;//[Offset: 0x384, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x398, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x3a0, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x3a4, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x3b4, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x3b8, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x3bc, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x3c0, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x3c4, Size: 0x10]
	float FogMaxOpacity;//[Offset: 0x3d4, Size: 0x4]
	float StartDistance;//[Offset: 0x3d8, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x3dc, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x3e4, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x3e8, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x3ec, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x3fc, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x400, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x404, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x5cf6312cd041
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x5cf5312cd041
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x5cf4312cd041
	void SetVolumetricFogDistance(float NewValue);// 0x5cf3312cd041
	void SetVolumetricFogAlbedo(Color NewValue);// 0x5cf2312cd041
	void SetVolumetricFog(bool bNewValue);// 0x5cf1312cd041
	void SetStartDistance(float Value);// 0x5cf0312cd041
	void SetSecondFogData_FogHeightOffset(float Value);// 0x5cef312cd041
	void SetSecondFogData_FogHeightFalloff(float Value);// 0x5cee312cd041
	void SetSecondFogData_FogDensity(float Value);// 0x5ced312cd041
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x5cec312cd041
	void SetInscatteringTextureTint(LinearColor Value);// 0x5ceb312cd041
	void SetInscatteringColorCubemapAngle(float Value);// 0x5cea312cd041
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x5ce9312cd041
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x5ce8312cd041
	void SetFogMaxOpacity(float Value);// 0x5ce7312cd041
	void SetFogInscatteringColor(LinearColor Value);// 0x5ce6312cd041
	void SetFogHeightFalloff(float Value);// 0x5ce5312cd041
	void SetFogDensity(float Value);// 0x5ce4312cd041
	void SetFogCutoffDistance(float Value);// 0x5ce3312cd041
	void SetDirectionalInscatteringStartDistance(float Value);// 0x5ce2312cd041
	void SetDirectionalInscatteringExponent(float Value);// 0x5ce1312cd041
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x5ce0312cd041
	void Set_HStartDistance(float _HStartDistance);// 0x5cdf312cd041
	void Set_HMaxFadingDistance(float _HMaxFadingDistance);// 0x5cde312cd041
	void Set_HFogHeight(float _HFogHeight);// 0x5cdd312cd041
	void Set_HFogFallOff(float _HFogFallOff);// 0x5cdc312cd041
	void Set_FogColor_M(LinearColor _FogColor_M);// 0x5cdb312cd041
	void Set_DStartDistance(float _DStartDistance);// 0x5cda312cd041
	void Set_DMaxOpacity(float _DMaxOpacity);// 0x5cd9312cd041
	void Set_DMaxDistance(float _DMaxDistance);// 0x5cd8312cd041
	void Set_DirectionalInscatteringStartDistance_M(float _DirectionalInscatteringStartDistance_M);// 0x5cd7312cd041
	void Set_DirectionalInscatteringMaxDistance_M(float _DirectionalInscatteringMaxDistance_M);// 0x5cd6312cd041
	void Set_DirectionalInscatteringGamma_M(float _DirectionalInscatteringGamma_M);// 0x5cd5312cd041
	void Set_DirectionalInscatteringExponent_M(float _DirectionalInscatteringExponent_M);// 0x5cd4312cd041
	void Set_DirectionalInscatteringColor_M(LinearColor _DirectionalInscatteringColor_M);// 0x5cd3312cd041
	void Set_DFogHeight(float _DFogHeight);// 0x5cd2312cd041
	void Set_DFogGamma(float _DFogGamma);// 0x5cd1312cd041
	void Set_DFogFallOff(float _DFogFallOff);// 0x5cd0312cd041

--------------------------------
Class: SLDistanceFogData
	float DFogHeight;//[Offset: 0x0, Size: 0x4]
	float DFogFallOff;//[Offset: 0x4, Size: 0x4]
	float DMaxDistance;//[Offset: 0x8, Size: 0x4]
	float DFogGamma;//[Offset: 0xc, Size: 0x4]
	float DMaxOpacity;//[Offset: 0x10, Size: 0x4]
	float DStartDistance;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SLHeightFogData
	float HFogHeight;//[Offset: 0x0, Size: 0x4]
	float HFogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float HStartDistance;//[Offset: 0x8, Size: 0x4]
	float HMaxFadingDistance;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SLDirectionalLightScattering
	float DirectionalInscatteringExponent_M;//[Offset: 0x0, Size: 0x4]
	float DirectionalInscatteringStartDistance_M;//[Offset: 0x4, Size: 0x4]
	float DirectionalInscatteringMaxDistance_M;//[Offset: 0x8, Size: 0x4]
	LinearColor DirectionalInscatteringColor_M;//[Offset: 0xc, Size: 0x10]
	float DirectionalInscatteringGamma_M;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: WeaponSystemPlayerBase.WeaponSystemBase.ActorComponent.Object
	SolarGameInstanceBase* GameInstance;//[Offset: 0x1c8, Size: 0x8]
	SolarWeaponSlotData[] WeaponSlotDatas;//[Offset: 0x1d0, Size: 0x10]
	SolarWeaponSystemData WeaponSystemData;//[Offset: 0x1e0, Size: 0x28]
	SolarCharacter* MyPawn;//[Offset: 0x208, Size: 0x8]
	WeaponAction WeaponPickupAction;//[Offset: 0x230, Size: 0x8]
	WeaponAction WeaponSwitchAction;//[Offset: 0x238, Size: 0x8]
	WeaponAction WeaponReplaceAction;//[Offset: 0x240, Size: 0x8]
	WeaponAction WeaponDropAction;//[Offset: 0x248, Size: 0x8]
	WeaponAction WeaponClearAction;//[Offset: 0x250, Size: 0x8]
	WeaponAction WeaponDataUpdateAction;//[Offset: 0x258, Size: 0x8]
	WeaponAction WeaponSwapAction;//[Offset: 0x260, Size: 0x8]
	void TriggerBoltAnim();// 0x57b1312cd041
	void SpawnMeleeWeapon(SolarCharacter* Owner);// 0x57b0312cd041
	void ResetCurrentWeaponFireState();// 0x57af312cd041
	void PostBolt();// 0x57ae312cd041
	void OpenScopeForSpectator();// 0x57ad312cd041
	void OnRep_WeaponSystemData(SolarWeaponSystemData InLastWeaponSystemData);// 0x57ac312cd041
	void OnRep_WeaponSwitchAction();// 0x57ab312cd041
	void OnRep_WeaponSwapAction();// 0x57aa312cd041
	void OnRep_WeaponReplaceAction();// 0x57a9312cd041
	void OnRep_WeaponPickupAction();// 0x57a8312cd041
	void OnRep_WeaponDropAction();// 0x57a7312cd041
	void OnRep_WeaponDataUpdateAction();// 0x57a6312cd041
	void OnRep_WeaponClearAction();// 0x57a5312cd041
	SolarPlayerWeapon* GetWeaponBySlot(int Slot);// 0x57a4312cd041
	SolarUnArmWeapon* GetUnArmWeapon();// 0x57a3312cd041
	SolarPlayerWeapon* GetPackSecondaryWeapon();// 0x57a2312cd041
	SolarPlayerWeapon* GetPackPrimaryWeapon();// 0x57a1312cd041
	int GetLastActiveWeaponSlot();// 0x57a0312cd041
	bool GetIsUnArm();// 0x579f312cd041
	float GetCurrentWeaponReloadTime(int Mode);// 0x579e312cd041
	bool GetCurrentWeaponIsOverloading();// 0x579d312cd041
	Texture2D* GetCurrentWeaponIcon();// 0x579c312cd041
	float GetCurrentWeaponBoltTime(int Mode);// 0x579b312cd041
	SolarPlayerWeapon* GetCurrentWeapon();// 0x579a312cd041
	float GetCurrentSwitchWeaponTime();// 0x5799312cd041
	int GetCurrentActiveSlot();// 0x5798312cd041
	StaticMesh* GetClipMeshOfCurrentWeapon();// 0x5797312cd041
	void GameStatisticsWeaponSkill(FString Param);// 0x5796312cd041
	void CrosshairQuitReload();// 0x5795312cd041
	void CrosshairEnterReload();// 0x5794312cd041
	void CloseScopeForSpectator();// 0x5793312cd041
	void CleanWeaponSlotsUI();// 0x5792312cd041
	void ChangeShootingOption();// 0x5791312cd041
	void CancelSecondaryFire();// 0x5790312cd041

--------------------------------
Class: SolarWeaponSystemData
	SolarPlayerWeapon*[] PlayerWeaponArray;//[Offset: 0x0, Size: 0x10]
	SolarUnArmWeapon* PlayerPunch;//[Offset: 0x10, Size: 0x8]
	int8 CurrentActiveSlot;//[Offset: 0x18, Size: 0x1]
	int8 LocalCurrentActiveSlot;//[Offset: 0x19, Size: 0x1]
	int8 LastActiveSlot;//[Offset: 0x1a, Size: 0x1]
	SolarPlayerWeapon* CurrentPlayerWeaponPTR;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: SolarUnArmWeapon.Actor.Object
	float Angle;//[Offset: 0x230, Size: 0x4]
	byte[] HitDetectableTypes;//[Offset: 0x238, Size: 0x10]
	float Interval;//[Offset: 0x248, Size: 0x4]
	class UserWidget* Crosshair;//[Offset: 0x250, Size: 0x8]
	SoftObjectPath FireIconPath;//[Offset: 0x258, Size: 0x18]
	class SolarAbilityEffectAccessory[] AbilityEffectAccessoryClass;//[Offset: 0x270, Size: 0x10]
	SlateBrush FireBtnBrush;//[Offset: 0x280, Size: 0x98]
	SolarAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x318, Size: 0x8]
	SolarCharacterBase* AttackTargetCharacter;//[Offset: 0x328, Size: 0x8]
	class SolarAbility* MeleeAbilityClass;//[Offset: 0x380, Size: 0x8]
	class SolarGameplayAbility[] MeleeAbilities;//[Offset: 0x388, Size: 0x10]
	GameplayAbilitySpecHandle[] AbilitySpecHandles;//[Offset: 0x398, Size: 0x10]
	void TryDealMeleeDamage(out const Vector Location, float DetectSphereRadius);// 0x5486312cd041
	void ServerDealMeleeDamage(SolarCharacterBase* Target, Vector ClientHitLoc, bool bHeavyPunch);// 0x5485312cd041
	bool HitAnyCharacters(out SolarCharacterBase* HitTarget, out const Vector Location, out const float DetectSphereRadius);// 0x5484312cd041
	SlateBrush GetFireButtonBrush();// 0x5483312cd041
	SolarCharacterBase* GetAttackTargetCharacter();// 0x5482312cd041

--------------------------------
Class: SolarGameplayAbility.GameplayAbility.Object
	bool bTryActivateWhenGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	enum InputID;//[Offset: 0x3fa, Size: 0x1]
	bool bAllowReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb, Size: 0x1]
	bool bActiveOnPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	AbilityMeshMontage[] CurrentAbilityMeshMontages;//[Offset: 0x400, Size: 0x10]
	void RemoveGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x3dc2312cd041
	void ReceivingGiven(out const GameplayAbilityActorInfo ActorInfo, out const GameplayAbilitySpec Spec);// 0x3dc1312cd041
	bool OnLevelUp(const int OldLevel, out const GameplayAbilitySpec Spec);// 0x3dc0312cd041
	void MontageStopForMesh(SkeletalMeshComponent* InMesh, float OverrideBlendOutTime);// 0x3dbf312cd041
	void MontageStopForAllMeshes(float OverrideBlendOutTime);// 0x3dbe312cd041
	void MontageSetNextSectionNameForMesh(SkeletalMeshComponent* InMesh, FName FromSectionName, FName ToSectionName);// 0x3dbd312cd041
	void MontageJumpToSectionForMesh(SkeletalMeshComponent* InMesh, FName SectionName);// 0x3dbc312cd041
	int GetDefaultGrantedLevel(const Actor* InOwner, const Actor* InAvatar);// 0x3dbb312cd041
	AnimMontage* GetCurrentMontageForMesh(SkeletalMeshComponent* InMesh);// 0x3dba312cd041
	void ExecuteGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x3db9312cd041
	void AddGameplayCueLocal(const GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x3db8312cd041

--------------------------------
Class: AbilityMeshMontage
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	AnimMontage* Montage;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SolarWeaponSlotData

--------------------------------
Class: WeaponAction
	int ActionCount;//[Offset: 0x0, Size: 0x4]
	int ActionParameter;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SkeletalMeshComponentConfig.DataAsset.Object
	SoftObjectPath AnimClass;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SkeletalMesh;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: WeaponSystemPlayer.WeaponSystemPlayerBase.WeaponSystemBase.ActorComponent.Object
	bool bCanOperateWhenOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	bool bInitializeWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ba, Size: 0x1]
	float ReloadBlockTimeMax;//[Offset: 0x2d0, Size: 0x4]
	FString ReceviedReloadMessage;//[Offset: 0x2d8, Size: 0x10]
	StaticMeshActor* DroppedClip;//[Offset: 0x2f8, Size: 0x8]
	StaticMeshActor* ExtractedClip;//[Offset: 0x300, Size: 0x8]
	bool bHoldFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	void TestSetSkin(int SkinId);// 0x57e3312cd041
	void TestSafeArea();// 0x57e2312cd041
	void TakeOffEquipAttributes(SolarPlayerWeapon* Weapon);// 0x57e1312cd041
	void SwitchFireMode();// 0x57e0312cd041
	void ServerSwitch(const byte TargetSlot);// 0x57df312cd041
	void ServerSwap(const byte SourceSlot, const byte TargetSlot);// 0x57de312cd041
	void ServerReplaceUpgradeRoute(const byte Slot);// 0x57dd312cd041
	void ServerReload(const byte CurrentSlot, const byte FireMode);// 0x57dc312cd041
	bool ServerPackDropWeapon(int Slot);// 0x57db312cd041
	void ServerGameStaticsWeaponSkill(const byte FireMode);// 0x57da312cd041
	void ServerAutoDropWeapon(SolarPlayerWeapon* InPendingDropWeapon);// 0x57d9312cd041
	void ReplaceUpgradeRoute(const int Slot);// 0x57d8312cd041
	void RecieveSafeAreaUpdateMsg(const int Num);// 0x57d7312cd041
	void RecieveExpPackMsg(int ItemID, int Num);// 0x57d6312cd041
	void RecieveExpMsg(bool bClient, int Type, int Num, int Slot);// 0x57d5312cd041
	void RecieveAssistMsg(enum HitedCharacterType);// 0x57d4312cd041
	void PutEquipAttributes(SolarPlayerWeapon* Weapon);// 0x57d3312cd041
	void PrintSensitivityGM();// 0x57d2312cd041
	void PostAddWeaponEXPMessageWhenKill(const int InWeaponSlot, const enum InHitType, const float InDamage, const bool InbKillPlayer);// 0x57d1312cd041
	void OnWeaponUpgrade(int InCurrentLevel, uint32 InUniqueID);// 0x57d0312cd041
	void OnWeaponUpdateSkillPoint(uint32 InWeaponUniqueID, bool InbCoolDownFinish, int InCurrentExtraPoint);// 0x57cf312cd041
	void OnWeaponUpdatePart(int InNewPartId, int InOldPartID, uint32 InWeaponUniqueID);// 0x57ce312cd041
	void OnWeaponUpdateExp(float InTotalExp, float InCurrentExp, uint32 InUniqueID);// 0x57cd312cd041
	void OnWeaponUpdateClipCapacity(int InFireMode, const SolarWeapon* InWeapon);// 0x57cc312cd041
	void OnWeaponUnlockAttributeSlot();// 0x57cb312cd041
	void OnWeaponSwitchOverload(bool InbSwitchOn, uint32 InUniqueID);// 0x57ca312cd041
	void OnWeaponReleaseSkill(bool InbSuccess, uint32 InUniqueID, uint32 InResultID);// 0x57c9312cd041
	void OnWeaponQuitReload(int InFireMode, bool InbReloadSuccess, uint32 InUniqueID);// 0x57c8312cd041
	void OnWeaponEnterReload(int InFireMode, uint32 InUniqueID);// 0x57c7312cd041
	void OnWeaponEnterFireCD(int InFireMode, uint32 InUniqueID);// 0x57c6312cd041
	void OnWeaponEnterBurstFire(int InFireMode);// 0x57c5312cd041
	void OnWeaponChangeAppreance(bool InbWeaponPart, enum InWeaponPartType);// 0x57c4312cd041
	void OnPlayerEnergyUpdate();// 0x57c3312cd041
	void OnEnterBattleAction(enum battleType);// 0x57c2312cd041
	bool NeedThermalImage();// 0x57c1312cd041
	bool IsWeaponAmmoUseEnergy(int Slot, int FireMode);// 0x57c0312cd041
	bool IsReloadBlock();// 0x57bf312cd041
	bool IsOwnUpgradeRoute(int Slot);// 0x57be312cd041
	bool IsCurrentWeapon(uint32 InUniqueID);// 0x57bd312cd041
	bool InternalReplaceUpgradeRoute(SolarPlayerWeapon* wp);// 0x57bc312cd041
	void InitializeWeaponSystem(SolarCharacter* InOwner);// 0x57bb312cd041
	int GetWeaponSkin(SolarPlayerWeapon* Weapon);// 0x57ba312cd041
	SolarPlayerWeapon* GetWeaponByItemID(int ItemInstanceId);// 0x57b9312cd041
	SolarPlayerWeapon* GetWeaponByID(int ID);// 0x57b8312cd041
	int GetSlotByItemID(int64 InItemThisID);// 0x57b7312cd041
	float GetRetrofitCost(int Slot);// 0x57b6312cd041
	bool CurrentWeaponIsThermalImage();// 0x57b5312cd041
	void ClientRecieveExpMsg(int Type, int Num, int Slot);// 0x57b4312cd041
	void ClearWeapons();// 0x57b3312cd041
	bool CanReplaceUpgradeRoute(int Slot);// 0x57b2312cd041

--------------------------------
Class: WeaponSystemPlayerAI.WeaponSystemPlayerBase.WeaponSystemBase.ActorComponent.Object
	void ServerAIPickupWeapon(const byte Slot);// 0x57e6312cd041
	bool IsCurrentWeapon(int ID);// 0x57e5312cd041
	void ClearWeapons();// 0x57e4312cd041

--------------------------------
Class: WeaponSystemVehicleComponent.WeaponSystemBase.ActorComponent.Object
	WeaponSystemInteract WeaponSystemInteract;//[Offset: 0x1b8, Size: 0x50]
	SolarVehicleWeapon* CurrentWeapon;//[Offset: 0x228, Size: 0x8]
	SolarCharacter* MyPawn;//[Offset: 0x230, Size: 0x8]
	WeaponAction WeaponEquipAction;//[Offset: 0x270, Size: 0x8]
	WeaponAction WeaponUnequipAction;//[Offset: 0x278, Size: 0x8]
	WeaponAction WeaponStartReloadAction;//[Offset: 0x280, Size: 0x8]
	<FName,enum> SavedWeaponScopeMap;//[Offset: 0x288, Size: 0x50]
	enum CurrentScopeType;//[Offset: 0x2d8, Size: 0x1]
	void ServerStatVehicleWeaponFire(FString Param);// 0x57f0312cd041
	void ServerStartReload();// 0x57ef312cd041
	void ServerReload(const byte ModeIndex, const int Need);// 0x57ee312cd041
	void ServerChangeWeaponScopeType(enum InScopeType);// 0x57ed312cd041
	void OnRep_WeaponUnequipAction();// 0x57ec312cd041
	void OnRep_WeaponStartReloadAction();// 0x57eb312cd041
	void OnRep_WeaponEquipAction();// 0x57ea312cd041
	void OnRep_CurrentWeapon(SolarVehicleWeapon* PreviousWeapon);// 0x57e9312cd041
	SolarVehicleWeapon* GetCurrentVehicleWeapon();// 0x57e8312cd041
	void FireInput(bool bPress);// 0x57e7312cd041

--------------------------------
Class: BoardedVehicleInfo
	SolarVehiclePawn* BoardedVehicle;//[Offset: 0x0, Size: 0x8]
	int BoardedSeatIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: VehicleRepairToolMeshPreset
	SoftObjectPath MeshPath;//[Offset: 0x0, Size: 0x18]
	Transform RelativeTrans;//[Offset: 0x20, Size: 0x30]

--------------------------------
Class: DebugReplicator.Actor.Object

--------------------------------
Class: BattleUpgradeEffectContainer.FastArraySerializer
	BattleUpgradeEffect[] DataArray;//[Offset: 0x108, Size: 0x10]
	SolarCharacter* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: BattleUpgradeEffect.FastArraySerializerItem
	int Level;//[Offset: 0xc, Size: 0x4]
	int EffectID;//[Offset: 0x10, Size: 0x4]
	int[] EffectCandidate;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: SolarNightComesActor.SummonItemBase.Pawn.Actor.Object
	float BeginEffectDuration;//[Offset: 0x394, Size: 0x4]
	float OngoingEffectDuration;//[Offset: 0x398, Size: 0x4]
	float OngoingEffectClearDelay;//[Offset: 0x39c, Size: 0x4]
	float EndEffectDuration;//[Offset: 0x3a0, Size: 0x4]
	float VisualEffectBeginDelay_AfterBeginEffect;//[Offset: 0x3a4, Size: 0x4]
	float VisualEffectEndDelay_AfterEndEffect;//[Offset: 0x3a8, Size: 0x4]
	ParticleSystem* BeginEffect;//[Offset: 0x3b0, Size: 0x8]
	ParticleSystem* OngoingEffect;//[Offset: 0x3b8, Size: 0x8]
	ParticleSystem* EndEffect;//[Offset: 0x3c0, Size: 0x8]
	ParticleSystem* ItemEffect;//[Offset: 0x3c8, Size: 0x8]
	ParticleSystem* ItemExplodeEffect;//[Offset: 0x3d0, Size: 0x8]
	ParticleSystem* ItemDisappearEffect;//[Offset: 0x3d8, Size: 0x8]
	float EffectRadius;//[Offset: 0x3e0, Size: 0x4]
	float NightfellRadius;//[Offset: 0x3e4, Size: 0x4]
	float NightFellRadius_WithBuff;//[Offset: 0x3e8, Size: 0x4]
	float NightFellCapacity;//[Offset: 0x3ec, Size: 0x4]
	float NightfellFadeness;//[Offset: 0x3f0, Size: 0x4]
	CurveFloat* ItemFellRadiusCurve;//[Offset: 0x3f8, Size: 0x8]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 0x1]
	bool bOpenVisualFell;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 0x1]
	float UpdateEffectingCharacterInterval;//[Offset: 0x404, Size: 0x4]
	StaticMeshComponent* StaticMeshCollision;//[Offset: 0x408, Size: 0x8]
	StaticMeshComponent* SummonItemMesh;//[Offset: 0x410, Size: 0x8]
	Vector EffectScale;//[Offset: 0x418, Size: 0xc]
	FString StartLoopSound;//[Offset: 0x428, Size: 0x10]
	FString EndLoopSound;//[Offset: 0x438, Size: 0x10]
	FString EnterSound;//[Offset: 0x448, Size: 0x10]
	FString ExitSound;//[Offset: 0x458, Size: 0x10]
	FString ExplodeSound;//[Offset: 0x468, Size: 0x10]
	FString HitBy1pSound;//[Offset: 0x478, Size: 0x10]
	FString StateLowPassFilter;//[Offset: 0x488, Size: 0x10]
	float MeshVisibleDelay;//[Offset: 0x498, Size: 0x4]
	int PerspectiveMeshSortPriority;//[Offset: 0x49c, Size: 0x4]
	MaterialInterface* StencilMaterial;//[Offset: 0x4a0, Size: 0x8]
	class GameplayEffect* NightComesContinousEffect;//[Offset: 0x4a8, Size: 0x8]
	enum CurrentState;//[Offset: 0x4b0, Size: 0x1]
	ParticleSystemComponent* BeginEffectHandle;//[Offset: 0x4e8, Size: 0x8]
	ParticleSystemComponent* OngingEffectHandle;//[Offset: 0x4f0, Size: 0x8]
	ParticleSystemComponent* EndEffectHandle;//[Offset: 0x4f8, Size: 0x8]
	ParticleSystemComponent* ItemEffectHandle;//[Offset: 0x500, Size: 0x8]
	SolarCharacter* InstigatorCharacter;//[Offset: 0x508, Size: 0x8]
	Actor*[] EffectingActors;//[Offset: 0x520, Size: 0x10]
	void OnRep_NightComesState();// 0x4b73312cd041
	void OnMeshVisible();// 0x4b72312cd041
	void OnGoingPhase();// 0x4b71312cd041
	void OnEndPhase();// 0x4b70312cd041
	void OnDeath();// 0x4b6f312cd041
	void OnComponentEndOverlap(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4b6e312cd041
	void OnComponentBeginOverlap(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4b6d312cd041
	void OnBeginPhase();// 0x4b6c312cd041
	void LocalRemoveSelf();// 0x4b6b312cd041
	void EndVisualEffect();// 0x4b6a312cd041
	void BeginVisualEffect();// 0x4b69312cd041

--------------------------------
Class: SoundGroupPlayContext
	SolarCharacter* Instigator;//[Offset: 0x0, Size: 0x8]
	SolarCharacter* LocalCharacter;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CharacterSkinConfig.DataAsset.Object
	SoftObjectPath SkinIcon;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath DefaultIcon;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath SkinRes;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath CharaSkinRes;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath ShieldRes;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath InvincibleMAT;//[Offset: 0xa8, Size: 0x18]
	SoftClassPath AnimBPRes;//[Offset: 0xc0, Size: 0x18]
	SoftObjectPath OrnamentRes;//[Offset: 0xd8, Size: 0x18]
	SoftClassPath OrnamentABPRes;//[Offset: 0xf0, Size: 0x18]
	FName OrnamentAttachSocket;//[Offset: 0x108, Size: 0x8]
	Transform OrnamentRelativeTransform;//[Offset: 0x110, Size: 0x30]
	<GameplayTag,StaticMeshOrnamentConfig> StaticMeshOrnamentsConfig;//[Offset: 0x140, Size: 0x50]
	<GameplayTag,SkeletalMeshOrnamentConfig> SkeletalMeshOrnamentsConfig;//[Offset: 0x190, Size: 0x50]
	<GameplayTag,StaticMeshOrnamentConfig> GetStaticMeshOrnamentsConfig();// 0x3e64312cd041
	SoftObjectPath GetSkinRes();// 0x3e63312cd041
	SoftObjectPath GetSkinIcon();// 0x3e62312cd041
	<GameplayTag,SkeletalMeshOrnamentConfig> GetSkeletalMeshOrnamentsConfig();// 0x3e61312cd041
	SoftObjectPath GetInvincibleMAT();// 0x3e60312cd041
	SoftObjectPath GetCharaSkinRes();// 0x3e5f312cd041
	SoftObjectPath GetAnimBPRes();// 0x3e5e312cd041

--------------------------------
Class: StaticMeshOrnamentConfig
	SoftObjectPath OrnamentRes;//[Offset: 0x0, Size: 0x18]
	FName OrnamentAttachSocket;//[Offset: 0x18, Size: 0x8]
	Transform OrnamentRelativeTransform;//[Offset: 0x20, Size: 0x30]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: SkeletalMeshOrnamentConfig
	SoftObjectPath OrnamentRes;//[Offset: 0x0, Size: 0x18]
	SoftClassPath OrnamentABPRes;//[Offset: 0x18, Size: 0x18]
	FName OrnamentAttachSocket;//[Offset: 0x30, Size: 0x8]
	Transform OrnamentRelativeTransform;//[Offset: 0x40, Size: 0x30]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x70, Size: 0x18]

--------------------------------
Class: BackpackStatisticsInfo
	bool IsVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector PlayerStartLocation;//[Offset: 0x4, Size: 0xc]
	Vector PlayerEndLocation;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: RestoreAbilityInfo
	GameplayAbilitySpecHandle Handle;//[Offset: 0x0, Size: 0x4]
	PredictionKey ActivationPredictionKey;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: ScannedInfo_NetQuantize
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	byte TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize TargetLocation;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: SpectateReportInfo
	uint32 RankLevelID;//[Offset: 0x0, Size: 0x4]
	FString TargetUserID;//[Offset: 0x8, Size: 0x10]
	byte TargetType;//[Offset: 0x18, Size: 0x1]
	uint32 SpectateElapsedTime;//[Offset: 0x1c, Size: 0x4]
	byte Type;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: InteractiveTaskConfig.TableRowBase
	int TaskID;//[Offset: 0x8, Size: 0x4]
	int GiftID;//[Offset: 0xc, Size: 0x4]
	int TaskName;//[Offset: 0x10, Size: 0x4]
	FString Describe;//[Offset: 0x18, Size: 0x10]
	int TaskUpgradeDescribe;//[Offset: 0x28, Size: 0x4]
	SoftObjectPath TaskIcon;//[Offset: 0x30, Size: 0x18]
	enum CurrencyType;//[Offset: 0x48, Size: 0x1]
	int MaxTaskLevel;//[Offset: 0x4c, Size: 0x4]
	int[] TaskTarget;//[Offset: 0x50, Size: 0x10]
	int[] UpgradePrice;//[Offset: 0x60, Size: 0x10]
	int[] TaskReward;//[Offset: 0x70, Size: 0x10]
	enum TaskType;//[Offset: 0x80, Size: 0x1]
	int Param;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: SolarReplayHighlightComponent.ActorComponent.Object

--------------------------------
Class: SettlementTempData
	int TotalAccountExp;//[Offset: 0x0, Size: 0x4]
	int AccountLevel;//[Offset: 0x4, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0x58, Size: 0x4]
	int TotalCharacterExp;//[Offset: 0x5c, Size: 0x4]
	bool bCharExpFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	int RankBeforeScore;//[Offset: 0x64, Size: 0x4]
	int RankAfterScore;//[Offset: 0x68, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x6c, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x70, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x74, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x78, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x7c, Size: 0x4]
	int RankLegend;//[Offset: 0x80, Size: 0x4]
	byte RankProtectType;//[Offset: 0x84, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	int BattlePassID;//[Offset: 0x88, Size: 0x4]
	int BattlePassAddExp;//[Offset: 0x8c, Size: 0x4]
	int BattlePassExp;//[Offset: 0x90, Size: 0x4]
	int[] BattlePassTaskID;//[Offset: 0x98, Size: 0x10]
	int[] BattlePassTaskWeek;//[Offset: 0xa8, Size: 0x10]
	int[] BattlePassTaskAdd;//[Offset: 0xb8, Size: 0x10]
	int[] BattlePassTaskVal;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: ExposeLocationMap
	<SolarPlayerState*,int> InnerMap;//[Offset: 0x0, Size: 0x50]
	SolarPlayerState* Owner;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: SolarAchievementComponent.ActorComponent.Object
	DataTable* AchievementHandleConfig;//[Offset: 0xb0, Size: 0x8]
	class AchievementFormula* AchievementFormulaClass;//[Offset: 0xb8, Size: 0x8]
	AchievementFormula* AchievementFormula;//[Offset: 0xc0, Size: 0x8]
	<int,AchievementResult> AllStatisticAchievement;//[Offset: 0x170, Size: 0x50]
	void UnlockAchievement(int InAchievementID);// 0x4431312cd041
	void SetAchievementValue(int InAchievementID, int InUpdateValue);// 0x4430312cd041
	bool IsAchievementCompleted(int InAchievementID);// 0x442f312cd041
	void IncreaseAchievementValue(int InAchievementID, int InUpdateValue);// 0x442e312cd041
	int GetAchievementPorgressValue(int InAchievementID);// 0x442d312cd041

--------------------------------
Class: AchievementFormula.Actor.Object
	SolarAchievementComponent* GetAchievementComponent();// 0x442c312cd041
	int GetAchievedTargetValue(int InAchievementID);// 0x442b312cd041
	int[] GetAchievedConditionValue(int InAchievementID);// 0x442a312cd041

--------------------------------
Class: AchievementResult
	int AchievementID;//[Offset: 0x0, Size: 0x4]
	int ProgressValue;//[Offset: 0x4, Size: 0x4]
	bool IsUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum AchievementReportType;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: SpatializeInfoTrack.SpatializeInfo.Info.Actor.Object
	TrackArray TrackArray;//[Offset: 0x230, Size: 0x130]
	float Timeout;//[Offset: 0x3ec, Size: 0x4]
	float MinRevealDistance;//[Offset: 0x3f0, Size: 0x4]
	int MaxTrackNum;//[Offset: 0x3f4, Size: 0x4]
	<TrackItem,3DMeshWidgetTrack*> CurTrackWidgets;//[Offset: 0x3f8, Size: 0x50]
	void UpdateWidgets(bool bFromNetUpdate);// 0x55ac312cd041

--------------------------------
Class: SpatializeInfo.Info.Actor.Object

--------------------------------
Class: TrackArray.FastArraySerializer
	TrackItem[] Tracks;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: TrackItem.SpatializeItem.FastArraySerializerItem
	float Time;//[Offset: 0x18, Size: 0x4]
	FString PID;//[Offset: 0x20, Size: 0x10]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bProjected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	Vector FloorLocation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: SpatializeItem.FastArraySerializerItem
	Vector Location;//[Offset: 0xc, Size: 0xc]

--------------------------------
Class: 3DMeshWidgetTrack.3DMeshWidget.Actor.Object
	Vector BoxHalfExtent;//[Offset: 0x240, Size: 0xc]
	float PlayerNearbyAlpha;//[Offset: 0x24c, Size: 0x4]
	bool bDebugCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	FName MaterialAlphaParamName;//[Offset: 0x254, Size: 0x8]
	FName MaterialCountDownName;//[Offset: 0x25c, Size: 0x8]
	float MaxTraceDist;//[Offset: 0x264, Size: 0x4]
	float DistFromGround;//[Offset: 0x268, Size: 0x4]
	StaticMeshComponent* StaticMeshCountDown;//[Offset: 0x270, Size: 0x8]
	TextRenderComponent* DistTextComp;//[Offset: 0x278, Size: 0x8]
	MaterialInstanceDynamic* DynamicMaterialIcon;//[Offset: 0x280, Size: 0x8]
	MaterialInstanceDynamic* DynamicMaterialCountDown;//[Offset: 0x288, Size: 0x8]
	MaterialInstanceDynamic* DynamicMaterialDistText;//[Offset: 0x290, Size: 0x8]

--------------------------------
Class: 3DMeshWidget.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x540, Size: 0x18]
	MaterialInterface* TextMaterial;//[Offset: 0x558, Size: 0x8]
	Font* Font;//[Offset: 0x560, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x568, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x569, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x56c, Size: 0x4]
	float XScale;//[Offset: 0x570, Size: 0x4]
	float YScale;//[Offset: 0x574, Size: 0x4]
	float WorldSize;//[Offset: 0x578, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x57c, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x580, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x584, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x588, Size: 0x1]
	void SetYScale(float Value);// 0x6295312cd041
	void SetXScale(float Value);// 0x6294312cd041
	void SetWorldSize(float Value);// 0x6293312cd041
	void SetVertSpacingAdjust(float Value);// 0x6292312cd041
	void SetVerticalAlignment(byte Value);// 0x6291312cd041
	void SetTextRenderColor(Color Value);// 0x6290312cd041
	void SetTextMaterial(MaterialInterface* Material);// 0x628f312cd041
	void SetText(FString Value);// 0x628e312cd041
	void SetHorizSpacingAdjust(float Value);// 0x628d312cd041
	void SetHorizontalAlignment(byte Value);// 0x628c312cd041
	void SetFont(Font* Value);// 0x628b312cd041
	void K2_SetText(out const FText Value);// 0x628a312cd041
	Vector GetTextWorldSize();// 0x6289312cd041
	Vector GetTextLocalSize();// 0x6288312cd041

--------------------------------
Class: WidgetInputManager.Object
	delegate OnTouchStartDetected;//[Offset: 0x28, Size: 0x10]
	delegate OnTouchUpdate;//[Offset: 0x38, Size: 0x10]
	delegate OnTouchEndDetected;//[Offset: 0x48, Size: 0x10]
	delegate OnPointerStartDetected;//[Offset: 0x58, Size: 0x10]
	delegate OnPointerUpdate;//[Offset: 0x68, Size: 0x10]
	delegate OnPointerEndDetected;//[Offset: 0x78, Size: 0x10]
	<int,Vector2D> TouchedList;//[Offset: 0x90, Size: 0x50]
	<int,Vector2D> PointerList;//[Offset: 0xe0, Size: 0x50]
	Widget* K2_GetManagedWidget();// 0x57f3312cd041
	bool GetWidgetTouchedList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x57f2312cd041
	bool GetWidgetPointerList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x57f1312cd041

--------------------------------
Class: PlayAnimationParams

--------------------------------
Class: SolarCharacterSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarCharacterCameraComponent* Camera;//[Offset: 0x3f8, Size: 0x8]
	SolarCharacter* OwnerCharacter;//[Offset: 0x400, Size: 0x8]
	void UnregisterOverlappingObstacle(const Actor* InObstacle);// 0x45e5312cd041
	void RegisterOverlappingObstacle(const Actor* InObstacle);// 0x45e4312cd041

--------------------------------
Class: SolarCharacterCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* Character;//[Offset: 0x9b8, Size: 0x8]
	float ThirdPersonVerticalOffset;//[Offset: 0x9c4, Size: 0x4]
	float ThirdPersonVerticalOffsetWhenCrouched;//[Offset: 0x9c8, Size: 0x4]
	float ThirdPersonVerticalOffsetWhenCrouchMoving;//[Offset: 0x9cc, Size: 0x4]
	float ThirdPersonHorizontalOffset;//[Offset: 0x9d0, Size: 0x4]
	CurveFloat* FollowForwardOffsetCurve;//[Offset: 0x9d8, Size: 0x8]
	float FollowForwardOffsetMultiplier;//[Offset: 0x9e0, Size: 0x4]
	float CrouchCameraLagTime;//[Offset: 0x9e4, Size: 0x4]
	float UnCrouchCameraLagTime;//[Offset: 0x9e8, Size: 0x4]
	float ShoulderShotVerticalOffset;//[Offset: 0x9ec, Size: 0x4]
	float ShoulderShotVerticalOffsetWhenCrouched;//[Offset: 0x9f0, Size: 0x4]
	float ShoulderShotHorizontalOffset;//[Offset: 0x9f4, Size: 0x4]
	float ShoulderShotDistanceToTarget;//[Offset: 0x9f8, Size: 0x4]
	CurveFloat* ShoulderShotFollowDistanceCurve;//[Offset: 0xa00, Size: 0x8]
	float ShoulderShotCameraFOV;//[Offset: 0xa08, Size: 0x4]
	float ShoulderShotCameraZoomInOutTime;//[Offset: 0xa0c, Size: 0x4]
	float ScopeShotVerticalOffsetWithStanding;//[Offset: 0xa10, Size: 0x4]
	float ScopeShotVerticalOffsetWhenCrouch;//[Offset: 0xa14, Size: 0x4]
	float DistanceToScopePivot;//[Offset: 0xa18, Size: 0x4]
	float ArmDistanceToCamera;//[Offset: 0xa1c, Size: 0x4]
	float ScopeHorizontalOffset;//[Offset: 0xa20, Size: 0x4]
	float ThirdPeekVerticalOffset;//[Offset: 0xa24, Size: 0x4]
	float ThirdPeekHorizontalOffset;//[Offset: 0xa28, Size: 0x4]
	float FirstPeekAngle;//[Offset: 0xa2c, Size: 0x4]
	float SwimDistanceToTarget;//[Offset: 0xa30, Size: 0x4]
	float SwimDistSwitchSpeed;//[Offset: 0xa34, Size: 0x4]
	Vector CuriseCameraOffset;//[Offset: 0xa38, Size: 0xc]
	Vector CuriseTargetOffset;//[Offset: 0xa44, Size: 0xc]
	float CuriseDistanceToTarget;//[Offset: 0xa50, Size: 0x4]
	Vector SkydiveCameraOffset;//[Offset: 0xa54, Size: 0xc]
	Vector SkydiveTargetOffset;//[Offset: 0xa60, Size: 0xc]
	float SkydiveDistanceToTarget;//[Offset: 0xa6c, Size: 0x4]
	float SkydiveDistanceToTargetOnBoosting;//[Offset: 0xa70, Size: 0x4]
	float SkydiveViewPitchMax;//[Offset: 0xa74, Size: 0x4]
	float SkydiveViewPitchMin;//[Offset: 0xa78, Size: 0x4]
	CameraSettings JetFlySettingsVertical;//[Offset: 0xa7c, Size: 0x20]
	CameraSettings JetFlySettingsFront;//[Offset: 0xa9c, Size: 0x20]
	CameraSettings JetFlySettingsBack;//[Offset: 0xabc, Size: 0x20]
	CameraSettings JetFlySettingsLeft;//[Offset: 0xadc, Size: 0x20]
	CameraSettings JetFlySettingsRight;//[Offset: 0xafc, Size: 0x20]
	RuntimeFloatCurve JetFlyFadeInCurve;//[Offset: 0xb20, Size: 0x88]
	RuntimeFloatCurve JetFlyFadeOutCurve;//[Offset: 0xba8, Size: 0x88]
	class CameraShake* CameraShakeSkydiveFlying;//[Offset: 0xc30, Size: 0x8]
	float CameraShakeSkydiveFlyingSpeedMin;//[Offset: 0xc38, Size: 0x4]
	float CameraShakeSkydiveFlyingSpeedMax;//[Offset: 0xc3c, Size: 0x4]
	class CameraShake* CameraShakeJetPackLaunch;//[Offset: 0xc40, Size: 0x8]
	class CameraShake* CameraShakeLand;//[Offset: 0xc48, Size: 0x8]
	class CameraShake* CameraShakeVehicleEjectLaunch;//[Offset: 0xc50, Size: 0x8]
	float CameraShakeLandDistanceMin;//[Offset: 0xc58, Size: 0x4]
	float CameraShakeLandDistanceMax;//[Offset: 0xc5c, Size: 0x4]
	float TakeOffCamPitchMin;//[Offset: 0xc60, Size: 0x4]
	float TakeOffCamPitchMax;//[Offset: 0xc64, Size: 0x4]
	float LandingSpeedThreshold;//[Offset: 0xc68, Size: 0x4]
	CamEffectSettings ParkourCamSettings;//[Offset: 0xc70, Size: 0x38]
	<enum,class CameraShake> CamShakeConfig;//[Offset: 0xd40, Size: 0x50]

--------------------------------
Class: CameraSettings
	float DistanceToTarget;//[Offset: 0x0, Size: 0x4]
	float CameraFOV;//[Offset: 0x4, Size: 0x4]
	Vector TargetOffset;//[Offset: 0x8, Size: 0xc]
	Vector CameraOffset;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: CamEffectSettings
	float FadeIn;//[Offset: 0x0, Size: 0x4]
	float FadeOut;//[Offset: 0x4, Size: 0x4]
	float Duration;//[Offset: 0x8, Size: 0x4]
	bool bEnableOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	CurveVector* OffsetCurve;//[Offset: 0x10, Size: 0x8]
	bool bEnableRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	CurveVector* RotationCurve;//[Offset: 0x20, Size: 0x8]
	bool bEnableFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	CurveFloat* FOVCurve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: GameplayHitInfo

--------------------------------
Class: SolarGlobalEventSystem.GameInstanceSubsystem.Subsystem.Object
	<class SolarGlobalEventBase,ListenerEventsByClass(MulticastInlineDelegateProperty)> ListenerEventsByClass;//[Offset: 0x30, Size: 0x50]
	<FName,ListenerEventsByName(MulticastInlineDelegateProperty)> ListenerEventsByName;//[Offset: 0x80, Size: 0x50]
	<GameplayTag,ListenerEventsByGameplayTag(MulticastInlineDelegateProperty)> ListenerEventsByGameplayTag;//[Offset: 0xd0, Size: 0x50]
	void UnbindGlobalEventByName(FName EventName, out const delegate Event);// 0x48ff312cd041
	void UnbindGlobalEventByGameplayTag(GameplayTag EventGameplayTag, out const delegate Event);// 0x48fe312cd041
	void UnbindGlobalEventByClass(class SolarGlobalEventBase EventClass, out const delegate Event);// 0x48fd312cd041
	void UnbindAllGlobalEventsByName(Object* Unsubscriber, FName EventName);// 0x48fc312cd041
	void UnbindAllGlobalEventsByGameplayTag(Object* Unsubscriber, GameplayTag EventGameplayTag);// 0x48fb312cd041
	void UnbindAllGlobalEventsByClass(Object* Unsubscriber, class SolarGlobalEventBase EventClass);// 0x48fa312cd041
	void GetAllBoundObjectsToEventByName(FName EventName, out Object*[] Objects);// 0x48f9312cd041
	void GetAllBoundObjectsToEventByGameplayTag(GameplayTag EventGameplayTag, out Object*[] Objects);// 0x48f8312cd041
	void GetAllBoundObjectsToEventByClass(class SolarGlobalEventBase EventClass, out Object*[] Objects);// 0x48f7312cd041
	void GetAllActiveGlobalEventsClass(out class SolarGlobalEventBase[] Events);// 0x48f6312cd041
	void GetAllActiveGlobalEventNames(out FName[] Events);// 0x48f5312cd041
	void GetAllActiveGlobalEventGameplayTag(out GameplayTag[] Events);// 0x48f4312cd041
	void ClearGlobalEventByName(FName EventName, const bool bForceClear);// 0x48f3312cd041
	void ClearGlobalEventByGameplayTag(GameplayTag EventGameplayTag, const bool bForceClear);// 0x48f2312cd041
	void ClearGlobalEventByClass(class SolarGlobalEventBase EventClass, const bool bForceClear);// 0x48f1312cd041
	void ClearAllGlobalEventsClass(const bool bForceClear);// 0x48f0312cd041
	void ClearAllGlobalEventNames(const bool bForceClear);// 0x48ef312cd041
	void ClearAllGlobalEventGameplayTags(const bool bForceClear);// 0x48ee312cd041
	void CallGlobalEventByName(Object* Publisher, FName EventName, Object* Payload, out const FString[] MetaData);// 0x48ed312cd041
	void CallGlobalEventByGameplayTag(Object* Publisher, GameplayTag EventGameplayTag, Object* Payload, out const FString[] MetaData);// 0x48ec312cd041
	void CallGlobalEventByClass(Object* Publisher, class SolarGlobalEventBase EventClass, Object* Payload, out const FString[] MetaData);// 0x48eb312cd041
	void BindGlobalEventByName(FName EventName, out const delegate Event);// 0x48ea312cd041
	void BindGlobalEventByGameplayTag(GameplayTag EventGameplayTag, out const delegate Event);// 0x48e9312cd041
	void BindGlobalEventByClass(class SolarGlobalEventBase EventClass, out const delegate Event);// 0x48e8312cd041

--------------------------------
Class: SolarGlobalEventBase.Object

--------------------------------
Class: SolarWarmClockComponent.ActorComponent.Object
	float RingWarmClockTimeMin;//[Offset: 0xb0, Size: 0x4]
	float RingWarmClockTimeMax;//[Offset: 0xb4, Size: 0x4]
	int MaxWarmBotNum;//[Offset: 0xb8, Size: 0x4]
	float RangeCheckNearby;//[Offset: 0xbc, Size: 0x4]
	int NumLimitNearby;//[Offset: 0xc0, Size: 0x4]
	float StartFirstDelay;//[Offset: 0xc4, Size: 0x4]
	SolarWarmTargetComponent*[] WarmTargetCompList;//[Offset: 0xd8, Size: 0x10]
	bool bEnableRecordMoveTrail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	float TrailSampleInterval;//[Offset: 0xec, Size: 0x4]
	int TrailSampleMaxCount;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: SolarSwitchTargetCameraControlComp.ActorComponent.Object
	class SolarSpectateLevelSequenceActor* SpectateLevelSequenceActorClass;//[Offset: 0xb0, Size: 0x8]
	float CameraBlendCurveHeightScale;//[Offset: 0xb8, Size: 0x4]
	float CameraBlendSpeed;//[Offset: 0xbc, Size: 0x4]
	float MinCameraBlendDistanceBetweenTargets;//[Offset: 0xc0, Size: 0x4]
	SolarSpectateLevelSequenceActor* SpectateLevelSequenceActor;//[Offset: 0x100, Size: 0x8]
	CameraActor* IntermediatePointCameraActor;//[Offset: 0x118, Size: 0x8]
	Actor* IntermediateEndTarget;//[Offset: 0x130, Size: 0x8]
	CameraComponent* EndTargetCameraCache;//[Offset: 0x138, Size: 0x8]
	void OnViewTargetBlendComplete();// 0x4e8a312cd041
	void OnScoutPlayerWorkComplete();// 0x4e89312cd041

--------------------------------
Class: SolarSpectateLevelSequenceActor.LevelSequenceActor.Actor.Object
	SoftObjectPath SwitchTargetSequencePath;//[Offset: 0x2b8, Size: 0x18]
	FString AtLeastPlayToMark;//[Offset: 0x2d0, Size: 0x10]
	LevelSequence* SwitchTargetSequence;//[Offset: 0x2f8, Size: 0x8]
	CineCameraActor* SequenceCamera;//[Offset: 0x300, Size: 0x8]
	CameraRig_Crane* SequenceCameraRigCrane;//[Offset: 0x308, Size: 0x8]
	void OnSequenceStoped();// 0x4e5f312cd041
	void OnSequenceFinished();// 0x4e5e312cd041

--------------------------------
Class: CameraRig_Crane.Actor.Object
	float CranePitch;//[Offset: 0x228, Size: 0x4]
	float CraneYaw;//[Offset: 0x22c, Size: 0x4]
	float CraneArmLength;//[Offset: 0x230, Size: 0x4]
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	SceneComponent* TransformComponent;//[Offset: 0x238, Size: 0x8]
	SceneComponent* CraneYawControl;//[Offset: 0x240, Size: 0x8]
	SceneComponent* CranePitchControl;//[Offset: 0x248, Size: 0x8]
	SceneComponent* CraneCameraMount;//[Offset: 0x250, Size: 0x8]

--------------------------------
Class: FixedAntiCheatData
	int FOV;//[Offset: 0x0, Size: 0x4]
	byte AxisConstraint;//[Offset: 0x4, Size: 0x1]
	bool bAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector HeadBoneScale;//[Offset: 0x8, Size: 0xc]
	Vector CurrWeaponRecoil;//[Offset: 0x14, Size: 0xc]
	float LatestTimeDiscrepancyError;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: LocTextParam
	FString ParamName;//[Offset: 0x0, Size: 0x10]
	int LocTextID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: RotationBarMarkWidget.UserWidget.Widget.Visual.Object
	FName FlagName;//[Offset: 0x288, Size: 0x8]
	FName TextName;//[Offset: 0x290, Size: 0x8]
	Image* FlagImage;//[Offset: 0x298, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2a0, Size: 0x8]
	Actor* TargetActor;//[Offset: 0x2a8, Size: 0x8]
	void SetupOrder(int InOrderID);// 0x4262312cd041
	void SetUpdateState(bool ShouldUpdateLocation);// 0x4261312cd041
	void SetPosition(Vector2D InPosition);// 0x4260312cd041
	void SetFlagIcon(PaperSprite* InSprite);// 0x425f312cd041
	void InitializeMark(Actor* InTargetActor, bool InMoveable);// 0x425e312cd041
	float GetAngle();// 0x425d312cd041

--------------------------------
Class: SolarInputModeDataBase

--------------------------------
Class: SolarPlayerCameraManager.PlayerCameraManager.Actor.Object
	Actor* OldViewTarget;//[Offset: 0x2fc0, Size: 0x8]
	CameraModifier_CameraShakeWithCurve* CachedCameraShakeModWithCurve;//[Offset: 0x2fc8, Size: 0x8]
	void OnPlayerGetOnViewTargetVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x4c3f312cd041
	MinimalViewInfo GetDebugPOV();// 0x4c3e312cd041

--------------------------------
Class: CameraModifier_CameraShakeWithCurve.CameraModifier.Object
	<class CameraShakeWithCurve,CameraShakeWithCurvePool> ShakePoolByClass;//[Offset: 0x48, Size: 0x50]
	CameraShakeWithCurveTemplatePool[] ShakePoolByTemplate;//[Offset: 0x98, Size: 0x10]
	ActiveCameraShakeWithCurve[] ActiveShakes;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: CameraShakeWithCurve.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bDisableObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	CameraModifier_CameraShakeWithCurve* Modifier;//[Offset: 0x30, Size: 0x8]
	float ShakeTime;//[Offset: 0x38, Size: 0x4]
	RuntimeFloatCurve ShakeCurve;//[Offset: 0x40, Size: 0x88]
	CameraShakeWithCurve_Element*[] ShakeElements;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: CameraShakeWithCurve_Element.Object

--------------------------------
Class: CameraShakeWithCurvePool
	CameraShakeWithCurve*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraShakeWithCurveTemplatePool
	CameraShakeWithCurve*[] PooledShakes;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ActiveCameraShakeWithCurve
	CameraShakeWithCurve* ShakeInstance;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: BP_HUD_TrainingMode_C.BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a0, Size: 0x8]
	UI_BattleInfo_TrainingMode_C* BattleInfo;//[Offset: 0x3a8, Size: 0x8]
	UI_TrainingMode_HUD_C* HUD;//[Offset: 0x3b0, Size: 0x8]
	void ReceiveBeginPlay();// 0x1e9b93154d001
	void Ready();// 0xfffffffec38c4b00
	void ExecuteUbergraph_BP_HUD_TrainingMode(int EntryPoint, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc___A_Bind_On_Basic_System_Ready_bReady, UI_TrainingMode_HUD_C* K2Node_DynamicCast_AsUI_Training_Mode_HUD, bool K2Node_DynamicCast_bSuccess, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromHUD_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, BP_TrainingModeDispatcher_C* K2Node_DynamicCast_AsBP_Training_Mode_Dispatcher, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue);// 0xffffffff0176cc90

--------------------------------
Class: BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x380, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x388, Size: 0x8]
	delegate OnWindowVisibiltyChanged;//[Offset: 0x390, Size: 0x10]
	void BP_SCustomHUDBase_AutoGenFunc(Object* Publisher, Object* Payload, out const FString[] MetaData, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x8b4e3154d001
	void ReceiveBeginPlay();// 0x8b4d3154d001
	void EventOnWindowVisibiltyChanged(byte UIType, byte Visibility);// 0xa2e63158d021
	void ExecuteUbergraph_BP_HUD_Framework(int EntryPoint, byte K2Node_CustomEvent_UIType, byte K2Node_CustomEvent_Visibility, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0xaed5312cd041
	void OnWindowVisibiltyChanged__DelegateSignature(byte UIType, byte Visibility);// 0xffffffff127bc200

--------------------------------
Class: BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object

--------------------------------
Class: BattleHUDBase.SolarHUD.HUD.Actor.Object
	class HUDDispatcherBase* Dispatcher;//[Offset: 0x318, Size: 0x8]
	HUDDispatcherBase* WidgetEventDispatcher;//[Offset: 0x320, Size: 0x8]
	bool bUseBattleDeathView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	void ShowDiePage_Deprecated();// 0x3d14312cd041
	UISubsystem* GetUISubSystem();// 0x3d13312cd041
	void CloseDiePage_Deprecated(const class UserWidget InDiePageClass);// 0x3d12312cd041

--------------------------------
Class: SolarHUD.HUD.Actor.Object

--------------------------------
Class: UI_BattleInfo_TrainingMode_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	TextBlock* Player;//[Offset: 0x268, Size: 0x8]
	void Format 剩余时间字符串                                                                        (int 秒数                                                                                              , out FString 时间                                                                                              , int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_SelectString_ReturnValue, FString CallFunc_SelectString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xffffff87312cd000
	void Construct();// 0x2dffb5315bd02e
	void PlayerCountC(enum ChangeType, int OldValue, int NewValue);// 0xffffffff388e22c0
	static void ExecuteUbergraph_UI_BattleInfo_TrainingMode(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, PanelWidget* CallFunc_GetParent_ReturnValue, bool CallFunc_BindDataChangeEventInt_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, enum K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_OldValue, int K2Node_CustomEvent_NewValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_SetDataInt_ReturnValue);// 0xfffffffebcd8c200

--------------------------------
Class: UI_TrainingMode_HUD_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	UI_BattleInfo_TrainingMode_C* UI_BattleInfo_TrainingMode;//[Offset: 0x340, Size: 0x8]

--------------------------------
Class: HUDDispatcherBase.Object
	delegate OnTeammateStateReplicated;//[Offset: 0x30, Size: 0x10]
	delegate OnTeammatePlayerStateReplicated;//[Offset: 0x40, Size: 0x10]
	delegate OnCharacterPSInGameChanged;//[Offset: 0x50, Size: 0x10]
	delegate OnPlayerOperationInGameChanged;//[Offset: 0x60, Size: 0x10]
	delegate OnTeammatePSRemoveWhenPreparation;//[Offset: 0x70, Size: 0x10]
	delegate OnTeammatePSRemoveWhenBattle;//[Offset: 0x80, Size: 0x10]
	delegate OnTeammateHPChanged;//[Offset: 0x90, Size: 0x10]
	delegate OnTeammateShieldChanged;//[Offset: 0xa0, Size: 0x10]
	delegate OnTeammateReviveItemChanged;//[Offset: 0xb0, Size: 0x10]
	delegate OnTeammateReviveManagerChanged;//[Offset: 0xc0, Size: 0x10]
	delegate OnTeammateReviveStateChanged;//[Offset: 0xd0, Size: 0x10]
	delegate OnTeammateNetStateChanged;//[Offset: 0xe0, Size: 0x10]
	delegate OnNavMapMarked;//[Offset: 0xf0, Size: 0x10]
	delegate OnNavMapMarkCleared;//[Offset: 0x100, Size: 0x10]
	delegate OnTalentInitialized;//[Offset: 0x110, Size: 0x10]
	delegate OnTeammateCharacterIdChanged;//[Offset: 0x120, Size: 0x10]
	delegate OnTeammateSkinIdChanged;//[Offset: 0x130, Size: 0x10]
	delegate OnLevelChanged;//[Offset: 0x140, Size: 0x10]
	delegate OnSkillCDStateChanged;//[Offset: 0x150, Size: 0x10]
	delegate OnTeammateTalentStateChanged;//[Offset: 0x160, Size: 0x10]
	delegate OnSpecTargetChanged;//[Offset: 0x170, Size: 0x10]
	delegate OnSkydivingLeaderIndexReplicated;//[Offset: 0x180, Size: 0x10]
	delegate OnSkydivingMemberStatusUpdated;//[Offset: 0x190, Size: 0x10]
	delegate OnSkydivingFollowInvitationResponded;//[Offset: 0x1a0, Size: 0x10]
	delegate OnSkydivingLeaderTransferResponded;//[Offset: 0x1b0, Size: 0x10]
	delegate OnSkydiveFollowDisabled;//[Offset: 0x1c0, Size: 0x10]
	delegate OnSkydiveFollowEnabled;//[Offset: 0x1d0, Size: 0x10]
	delegate TrySkydiveUnfollow;//[Offset: 0x1e0, Size: 0x10]
	delegate OnBindHPPanelDelegate;//[Offset: 0x220, Size: 0x10]
	delegate OnBindItemPanelDelegate;//[Offset: 0x230, Size: 0x10]
	delegate OnBindPowerBarDelegate;//[Offset: 0x240, Size: 0x10]
	delegate OnRefreshBackpackItemDelegate;//[Offset: 0x250, Size: 0x10]
	delegate OnRefreshBackpackEquipDelegate;//[Offset: 0x260, Size: 0x10]
	delegate OnRefreshBackpackWeaponDelegate;//[Offset: 0x270, Size: 0x10]
	delegate OnRefreshBackpackWeaponPartDelegate;//[Offset: 0x280, Size: 0x10]
	delegate OnSetActiveOpenBoxBtnDelegate;//[Offset: 0x290, Size: 0x10]
	delegate OnSetActiveOpenBoxProgressDelegate;//[Offset: 0x2a0, Size: 0x10]
	delegate OnSetTreasureBoxActorDelegate;//[Offset: 0x2b0, Size: 0x10]
	delegate OnSetAirdropBoxActorDelegate;//[Offset: 0x2c0, Size: 0x10]
	delegate OnHideTreasureBoxUIDelegate;//[Offset: 0x2d0, Size: 0x10]
	delegate OnHideAirdropBoxUIDelegate;//[Offset: 0x2e0, Size: 0x10]
	delegate OnSetPickupSwitchDelegate;//[Offset: 0x2f0, Size: 0x10]
	delegate OnAirdropCharChangeDelegate;//[Offset: 0x300, Size: 0x10]
	delegate OnAirdropProgressChangeDelegate;//[Offset: 0x310, Size: 0x10]
	delegate OnPlayerNumberChanged;//[Offset: 0x320, Size: 0x10]
	delegate OnCapsulePlayerNumChanged;//[Offset: 0x330, Size: 0x10]
	delegate OnBombingStarted;//[Offset: 0x340, Size: 0x10]
	delegate OnBombingStopped;//[Offset: 0x350, Size: 0x10]
	delegate OnItemDiscarded;//[Offset: 0x360, Size: 0x10]
	delegate OnSettingRequestOpened;//[Offset: 0x370, Size: 0x10]
	delegate OnSettingRequestClosed;//[Offset: 0x380, Size: 0x10]
	delegate OnMigrateAccountVisibilityRequestChanged;//[Offset: 0x390, Size: 0x10]
	delegate OnCustomizeVisibilityRequestChanged;//[Offset: 0x3a0, Size: 0x10]
	delegate OnDriveCustomizeOpened;//[Offset: 0x3b0, Size: 0x10]
	delegate OnDriveCustomizeClosed;//[Offset: 0x3c0, Size: 0x10]
	delegate OnBackpackTookPickup;//[Offset: 0x3d0, Size: 0x10]
	delegate OnBackpackReleasedPickup;//[Offset: 0x3e0, Size: 0x10]
	delegate OnToggleCursorVisibility;//[Offset: 0x3f0, Size: 0x10]
	delegate OnBackpackVisibilitySet;//[Offset: 0x400, Size: 0x10]
	delegate OnElectricShopVisibilitySet;//[Offset: 0x410, Size: 0x10]
	delegate OnBigMapVisibilitySet;//[Offset: 0x420, Size: 0x10]
	delegate OnRescueBtnVisibilitySet;//[Offset: 0x430, Size: 0x10]
	delegate OnBuyResurrectBtnVisibilitySet;//[Offset: 0x440, Size: 0x10]
	delegate OnBigMapCloseButtonClicked;//[Offset: 0x450, Size: 0x10]
	delegate OnPickupFlagChanged;//[Offset: 0x460, Size: 0x10]
	delegate OnPickupListVisibilityChanged;//[Offset: 0x470, Size: 0x10]
	delegate OnPickupItemSet;//[Offset: 0x480, Size: 0x10]
	delegate OnPickupItemCalculated;//[Offset: 0x490, Size: 0x10]
	delegate OnPickupCheckValidUpdated;//[Offset: 0x4a0, Size: 0x10]
	delegate OnPickupCheckHighlightUpdated;//[Offset: 0x4b0, Size: 0x10]
	delegate OnPickupCheckStatesUpdated;//[Offset: 0x4c0, Size: 0x10]
	delegate OnPickupItemSelected;//[Offset: 0x4d0, Size: 0x10]
	delegate OnTogglePickupDelegate;//[Offset: 0x4e0, Size: 0x10]
	delegate OnPlayerDead;//[Offset: 0x4f0, Size: 0x10]
	delegate OnJoyStickSprintStateReset;//[Offset: 0x500, Size: 0x10]
	delegate OnJoyStickInputReset;//[Offset: 0x510, Size: 0x10]
	delegate OnJoyStickResetAll;//[Offset: 0x520, Size: 0x10]
	delegate OnTutorialGettingWidget;//[Offset: 0x530, Size: 0x10]
	delegate OnBattleTutorialWidgetDisplayed;//[Offset: 0x540, Size: 0x10]
	delegate OnTutorialSequenceRequested;//[Offset: 0x550, Size: 0x10]
	delegate OnDrivingTutorialStopped;//[Offset: 0x560, Size: 0x10]
	delegate OnFireButtonsInputReset;//[Offset: 0x570, Size: 0x10]
	bool bBackpackVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 0x1]
	bool bElectricShopVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 0x1]
	bool bBigMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x582, Size: 0x1]
	bool bRescueBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x583, Size: 0x1]
	bool bBuyResurrectBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 0x1]
	delegate OnInBattle;//[Offset: 0x588, Size: 0x10]
	delegate OnNotInBattle;//[Offset: 0x598, Size: 0x10]
	delegate OnRadarStationUpdated;//[Offset: 0x5a8, Size: 0x10]
	delegate OnAngleViewEnabled;//[Offset: 0x5b8, Size: 0x10]
	delegate OnCharacterSwimStateChanged;//[Offset: 0x5c8, Size: 0x10]
	delegate OnCharacterWaterClimbAvailable;//[Offset: 0x5d8, Size: 0x10]
	delegate OnHitTraceUpdated;//[Offset: 0x5e8, Size: 0x10]
	delegate OnHitTraceRemoved;//[Offset: 0x5f8, Size: 0x10]
	delegate OnHitTraceCleared;//[Offset: 0x608, Size: 0x10]
	delegate OnProfessionFunctionalChanged;//[Offset: 0x618, Size: 0x10]
	delegate OnBackpackModeChanged;//[Offset: 0x628, Size: 0x10]
	delegate OnPickupListAdd;//[Offset: 0x638, Size: 0x10]
	delegate OnPickupListRemove;//[Offset: 0x648, Size: 0x10]
	delegate OnTeammateStateChanged;//[Offset: 0x658, Size: 0x10]
	delegate OnRepliableMessageChanged;//[Offset: 0x668, Size: 0x10]
	delegate OnPlayerFlagDisplayChanged;//[Offset: 0x678, Size: 0x10]
	delegate OnSpectateModeEntered;//[Offset: 0x688, Size: 0x10]
	delegate OnSpectateModeExited;//[Offset: 0x698, Size: 0x10]
	delegate OnSpectateReferToChanged;//[Offset: 0x6a8, Size: 0x10]
	delegate OnSpectateTargetItemsChanged;//[Offset: 0x6b8, Size: 0x10]
	delegate OnMarkButtonHoverChanged;//[Offset: 0x6c8, Size: 0x10]
	delegate OnMarkButtonTouchMoved;//[Offset: 0x6d8, Size: 0x10]
	delegate OnMarkButtonBeenLongPressed;//[Offset: 0x6e8, Size: 0x10]
	delegate OnMarkButtonDragSelectEnded;//[Offset: 0x6f8, Size: 0x10]
	delegate OnBattleModeChanged;//[Offset: 0x708, Size: 0x10]
	delegate OnCharacterSet;//[Offset: 0x720, Size: 0x10]
	delegate OnCharacterIDSet;//[Offset: 0x730, Size: 0x10]
	delegate OnCharacterHPChanged;//[Offset: 0x740, Size: 0x10]
	delegate OnCharacterDead;//[Offset: 0x760, Size: 0x10]
	delegate OnCharacterEnterWater;//[Offset: 0x770, Size: 0x10]
	delegate OnCharacterSelfRebirth;//[Offset: 0x780, Size: 0x10]
	delegate OnCharacterLevelUp;//[Offset: 0x790, Size: 0x10]
	delegate OnCharacterGainExp;//[Offset: 0x7a0, Size: 0x10]
	delegate OnCharacterLevelExpChanged;//[Offset: 0x7b0, Size: 0x10]
	delegate OnBattleUpgradeEffect;//[Offset: 0x7c0, Size: 0x10]
	delegate OnSelectingBattleUpgradeEffectBegin;//[Offset: 0x7d0, Size: 0x10]
	delegate OnSelectingBattleUpgradeEffectFinish;//[Offset: 0x7e0, Size: 0x10]
	delegate OnSpectateBattleUpgradeEffectUpdate;//[Offset: 0x7f0, Size: 0x10]
	delegate OnTeammateRebirth;//[Offset: 0x800, Size: 0x10]
	delegate OnDamagingActorsChange;//[Offset: 0x810, Size: 0x10]
	delegate OnRapidBoostActivationChanged;//[Offset: 0x830, Size: 0x10]
	delegate OnTrySpawnSuperRadar;//[Offset: 0x840, Size: 0x10]
	delegate OnSuperScaningStart;//[Offset: 0x850, Size: 0x10]
	delegate OnSuperScaningRemovePlayer;//[Offset: 0x860, Size: 0x10]
	delegate OnSuperScaningEnd;//[Offset: 0x870, Size: 0x10]
	delegate OnSuperScanCameraMoveForward;//[Offset: 0x880, Size: 0x10]
	delegate OnSuperScanCameraMoveRight;//[Offset: 0x890, Size: 0x10]
	delegate OnSuperScaningWidgetShow;//[Offset: 0x8a0, Size: 0x10]
	delegate OnRoleAbilityChange;//[Offset: 0x8b0, Size: 0x10]
	delegate OnRoleAbilityStartCD;//[Offset: 0x8c0, Size: 0x10]
	delegate OnRoleAbilityEndCD;//[Offset: 0x8d0, Size: 0x10]
	delegate OnRoleAbilityCDDurationChange;//[Offset: 0x8e0, Size: 0x10]
	delegate OnRoleAbilityStartCDUTCTimeUpdate;//[Offset: 0x8f0, Size: 0x10]
	delegate OnRoleAbilityStateChange;//[Offset: 0x900, Size: 0x10]
	delegate OnRoleAbilityEnd;//[Offset: 0x910, Size: 0x10]
	delegate OnRoleAbilityContinous;//[Offset: 0x920, Size: 0x10]
	delegate OnRoleAbilityBuffContinous;//[Offset: 0x930, Size: 0x10]
	delegate OnRoleAbilityBuffEnd;//[Offset: 0x940, Size: 0x10]
	delegate OnRoleAbilityBuffPause;//[Offset: 0x950, Size: 0x10]
	delegate OnRoleAbilityBuffResume;//[Offset: 0x960, Size: 0x10]
	delegate OnRoleAbilityHideControlHUD;//[Offset: 0x970, Size: 0x10]
	delegate OnRoleAbilityInputAction;//[Offset: 0x980, Size: 0x10]
	delegate OnRoleAbilityAddSummonBuff;//[Offset: 0x990, Size: 0x10]
	delegate OnRoleAbilityUsingStatusChanged;//[Offset: 0x9a0, Size: 0x10]
	delegate OnCharacterNightComesActorChanged;//[Offset: 0x9b0, Size: 0x10]
	delegate OnRoleGEShieldMultiRecoverCoolDownEffect;//[Offset: 0x9c0, Size: 0x10]
	delegate OnMemberFlagIDChanged01;//[Offset: 0x9d0, Size: 0x10]
	delegate OnMemberFlagIDChanged02;//[Offset: 0x9e0, Size: 0x10]
	delegate OnMemberFlagIDChanged03;//[Offset: 0x9f0, Size: 0x10]
	delegate OnMemberFlagIDChanged04;//[Offset: 0xa00, Size: 0x10]
	delegate OnSideAttributeSetRemoved;//[Offset: 0xa10, Size: 0x10]
	delegate OnSideAttributeSetAdded;//[Offset: 0xa20, Size: 0x10]
	delegate OnSideAttributeSetChanged;//[Offset: 0xa30, Size: 0x10]
	delegate OnDrivingStateChanged;//[Offset: 0xa40, Size: 0x10]
	delegate OnVehicleScopeInitialized;//[Offset: 0xa50, Size: 0x10]
	delegate OnVehicleScopeValueChanged;//[Offset: 0xa60, Size: 0x10]
	delegate OnEquipVehicleWeaponDelegate;//[Offset: 0xa70, Size: 0x10]
	delegate OnVehicleWeaponScopeDelegate;//[Offset: 0xa80, Size: 0x10]
	delegate OnTransformerChangeWeaponDelegate;//[Offset: 0xa90, Size: 0x10]
	delegate OnVehicleTypeChangeDelegate;//[Offset: 0xaa0, Size: 0x10]
	delegate OnVehicleWeaponNoAmmoAlert;//[Offset: 0xab0, Size: 0x10]
	delegate OnVehicleAbilityActivationChanged;//[Offset: 0xac0, Size: 0x10]
	delegate OnInputSprintLockStart;//[Offset: 0xad0, Size: 0x10]
	delegate OnSprintIconActived;//[Offset: 0xae0, Size: 0x10]
	delegate OnSprintIconHide;//[Offset: 0xaf0, Size: 0x10]
	delegate OnSprintLockIconActived;//[Offset: 0xb00, Size: 0x10]
	delegate OnTeamMessageReceive;//[Offset: 0xb10, Size: 0x10]
	delegate OnVJetForbiddenChanged;//[Offset: 0xb20, Size: 0x10]
	delegate OnHJetForbiddenChanged;//[Offset: 0xb30, Size: 0x10]
	delegate OnVJetTotalTimesSet;//[Offset: 0xb40, Size: 0x10]
	delegate OnHJetTotalTimesSet;//[Offset: 0xb50, Size: 0x10]
	delegate OnVJetRestTimesSet;//[Offset: 0xb60, Size: 0x10]
	delegate OnHJetRestTimesSet;//[Offset: 0xb70, Size: 0x10]
	delegate OnVJetChargeStateChanged;//[Offset: 0xb80, Size: 0x10]
	delegate OnVJetCDStateChanged;//[Offset: 0xb90, Size: 0x10]
	delegate OnHJetChargeStateChanged;//[Offset: 0xba0, Size: 0x10]
	delegate OnHJetCDStateChanged;//[Offset: 0xbb0, Size: 0x10]
	delegate OnVJetTimesCharging;//[Offset: 0xbc0, Size: 0x10]
	delegate OnHJetTimesCharging;//[Offset: 0xbd0, Size: 0x10]
	delegate OnVJetCoolingDown;//[Offset: 0xbe0, Size: 0x10]
	delegate OnHJetCoolingDown;//[Offset: 0xbf0, Size: 0x10]
	delegate OnVJetModuleLevelChanged;//[Offset: 0xc00, Size: 0x10]
	delegate OnHJetModuleLevelChanged;//[Offset: 0xc10, Size: 0x10]
	delegate OnSkydiveFlyStateChanged;//[Offset: 0xc20, Size: 0x10]
	delegate OnSkydiveAltitudeUpdate;//[Offset: 0xc30, Size: 0x10]
	delegate OnSkydiveSpeedUpdate;//[Offset: 0xc40, Size: 0x10]
	delegate OnShowGameNoticeDelegate;//[Offset: 0xc50, Size: 0x10]
	delegate OnStartCountDownDelegate;//[Offset: 0xc60, Size: 0x10]
	delegate OnStopCountDownDelegate;//[Offset: 0xc70, Size: 0x10]
	delegate OnHideInteractionListRequested;//[Offset: 0xc80, Size: 0x10]
	delegate OnCancelHideInteractionListRequested;//[Offset: 0xc90, Size: 0x10]
	delegate OnInteractionTriggerAppear;//[Offset: 0xca0, Size: 0x10]
	delegate OnInteractionTriggerDisappear;//[Offset: 0xcb0, Size: 0x10]
	delegate OnStartInteractionCountDown;//[Offset: 0xcc0, Size: 0x10]
	delegate OnStopInteractionCountDown;//[Offset: 0xcd0, Size: 0x10]
	delegate OnStartReviveTeammateCountDownDelegate;//[Offset: 0xce0, Size: 0x10]
	delegate OnStopReviveTeammateCountDownDelegate;//[Offset: 0xcf0, Size: 0x10]
	delegate OnReviveWillBeDisabledHintDelegate;//[Offset: 0xd00, Size: 0x10]
	delegate OnStartReviveItemRecycleCountDownDelegate;//[Offset: 0xd10, Size: 0x10]
	delegate OnOverlapElectricShopDelegate;//[Offset: 0xd30, Size: 0x10]
	delegate OnUpdateVehicleInteractionDelegate;//[Offset: 0xd40, Size: 0x10]
	delegate OnCruiseHeightSet;//[Offset: 0xd50, Size: 0x10]
	delegate OnEnterCruisingDelegate;//[Offset: 0xd60, Size: 0x10]
	delegate OnEnterParachutingDelegate;//[Offset: 0xd70, Size: 0x10]
	delegate OnEnterLandingDelegate;//[Offset: 0xd80, Size: 0x10]
	delegate OnEShopWeaponUpgradeDelegate;//[Offset: 0xd90, Size: 0x10]
	delegate OnEShopShieldUpgradeDelegate;//[Offset: 0xda0, Size: 0x10]
	delegate OnEShopPurchaseSuccessDelegate;//[Offset: 0xdb0, Size: 0x10]
	delegate OnEShopItemCDRefreshDelegate;//[Offset: 0xdc0, Size: 0x10]
	delegate OnEShopItemRefreshDelegate;//[Offset: 0xdd0, Size: 0x10]
	delegate OnEShopSlotWeaponUpgradeDelegate;//[Offset: 0xde0, Size: 0x10]
	delegate OnEShopWeaponChangeDelegate;//[Offset: 0xdf0, Size: 0x10]
	delegate OnEShopPoolRefreshDelegate;//[Offset: 0xe00, Size: 0x10]
	delegate TryOpenElectricShopDelegate;//[Offset: 0xe10, Size: 0x10]
	delegate OnTeammateHomePanelGetting;//[Offset: 0xe20, Size: 0x10]
	delegate OnHomeBattleUIGetting;//[Offset: 0xe30, Size: 0x10]
	delegate OnHomeMainBuildGetting;//[Offset: 0xe40, Size: 0x10]
	delegate OnHomeFriendListGetting;//[Offset: 0xe50, Size: 0x10]
	delegate OnHomeLevelUpUIGetting;//[Offset: 0xe60, Size: 0x10]
	delegate OnShieldAvailableChanged;//[Offset: 0xe70, Size: 0x10]
	delegate OnShieldChanged;//[Offset: 0xe80, Size: 0x10]
	delegate OnRechargeShieldEnd;//[Offset: 0xe90, Size: 0x10]
	delegate OnShieldFXUpdated;//[Offset: 0xea0, Size: 0x10]
	delegate OnShieldValueChanged;//[Offset: 0xeb0, Size: 0x10]
	delegate OnMaxShieldValueUpdate;//[Offset: 0xec0, Size: 0x10]
	delegate FOnSteamRechargeShield;//[Offset: 0xed0, Size: 0x10]
	delegate TryCancelCountDown;//[Offset: 0xee0, Size: 0x10]
	delegate OnEnemyShieldChanged;//[Offset: 0xef0, Size: 0x10]
	delegate OnEnemyShieldValueChanged;//[Offset: 0xf00, Size: 0x10]
	delegate OnShieldUpgradeStart;//[Offset: 0xf10, Size: 0x10]
	delegate OnShieldUpgradeInterrupt;//[Offset: 0xf20, Size: 0x10]
	delegate OnShieldUpgradeFinish;//[Offset: 0xf30, Size: 0x10]
	delegate OnShieldUpgradeItemCountChanged;//[Offset: 0xf40, Size: 0x10]
	delegate OnShieldUpgradeItemCountChangedBP;//[Offset: 0xf50, Size: 0x10]
	delegate OnAckShieldUpgradeShopInteract;//[Offset: 0xf60, Size: 0x10]
	delegate TryOpenTreasureBoxDelegate;//[Offset: 0xf70, Size: 0x10]
	delegate TryOpenAirDropTreasureBoxDelegate;//[Offset: 0xf80, Size: 0x10]
	delegate TryCancelAirDropTreasureBoxDelegate;//[Offset: 0xf90, Size: 0x10]
	delegate TryPickupFirstItemDelegate;//[Offset: 0xfa0, Size: 0x10]
	delegate CheckPickupItemValidDelegate;//[Offset: 0xfb0, Size: 0x10]
	delegate OnPickupEntryPlayAnim;//[Offset: 0xfc0, Size: 0x10]
	delegate OnRequstPickupEntryPlayAnim;//[Offset: 0xfd0, Size: 0x10]
	delegate OnRequstPickupEntryPlayAnimCustom;//[Offset: 0xfe0, Size: 0x10]
	delegate OnInteractEvent;//[Offset: 0xff0, Size: 0x10]
	delegate OnBattleControlTeammateStateRemoved;//[Offset: 0x1000, Size: 0x10]
	delegate OnSetBackpackDropMaskVisibility;//[Offset: 0x1010, Size: 0x10]
	delegate OnEndBackpackDragDrop;//[Offset: 0x1020, Size: 0x10]
	delegate OnBattleHUDVisibilityChanged;//[Offset: 0x1030, Size: 0x10]
	delegate OnSwitchEMP;//[Offset: 0x1040, Size: 0x10]
	delegate OnToggleAssitAim;//[Offset: 0x1050, Size: 0x10]
	delegate OnToggleAutoFire;//[Offset: 0x1060, Size: 0x10]
	delegate OnTreatmentEnd;//[Offset: 0x1070, Size: 0x10]
	void VehicleWeaponScopeChanged__DelegateSignature(bool BOpened);// 0x2425312cd041
	void VehicleWeaponNoAmmoAlert__DelegateSignature();// 0x2424312cd041
	void VehicleTypeChanged__DelegateSignature();// 0x2423312cd041
	void VehicleAbilityActivationChanged__DelegateSignature(bool bInActivated, bool bCanCancel, byte InAbilityIndex, float InDurationTime);// 0x2422312cd041
	void TwoIntUIInteractDelegate__DelegateSignature(int Value01, int Value02);// 0x2421312cd041
	void TwoIntImplementableDelegate__DelegateSignature(int Value01, int Value02);// 0x2420312cd041
	bool TrySkydiveUnfollow__DelegateSignature();// 0x241f312cd041
	void TransformerWeaponChanged__DelegateSignature(enum InType);// 0x241d312cd041
	void ToggledBigMapVisibility();// 0x241c312cd041
	void ToggledBackpackVisibility();// 0x241b312cd041
	void StopDrivingTutorial();// 0x241a312cd041
	void SprintLockIconActived__DelegateSignature(out const Vector2D InSprintPosition);// 0x2419312cd041
	void SimpleUIInteractDelegate__DelegateSignature();// 0x2418312cd041
	void SimpleTriggerDelegate__DelegateSignature();// 0x2417312cd041
	void SimpleSpectatorDelegate__DelegateSignature();// 0x2416312cd041
	void SimplePlayerStateDelegate__DelegateSignature(SolarPlayerState* TeammatePS);// 0x2415312cd041
	void SimpleOnRefreshDelegate__DelegateSignature();// 0x2414312cd041
	bool SimpleOnBindRetOneParamDelegate__DelegateSignature(bool bAutoPickup);// 0x2413312cd041
	bool SimpleOnBindRetOneIntParamDelegate__DelegateSignature(int InIthisID);// 0x2412312cd041
	bool SimpleOnBindRetDelegate__DelegateSignature();// 0x2411312cd041
	void SimpleOnBindDelegate__DelegateSignature();// 0x2410312cd041
	void SimpleImplementableDelegate__DelegateSignature();// 0x240f312cd041
	void SimpleFloatDelegate__DelegateSignature(float Value);// 0x240e312cd041
	void SimpleCharacterLuaDelegate__DelegateSignature();// 0x240d312cd041
	void SimpleBoolDelegate__DelegateSignature(bool Value);// 0x240c312cd041
	void ShowSuperScanChooseUI(bool bShow);// 0x240b312cd041
	void ShieldUpgradeItemCntChangedBPDelegate__DelegateSignature(const int ShieldLevel, const int ShieldMaxLevel, const int ShieldUpgradeItemNum, const int NeedShieldUpgradeItemNum, const int MaxShieldUpgradeItemNum);// 0x240a312cd041
	void SetRescueBtnVisibility(bool bVisible);// 0x2409312cd041
	void SetElectricShopVisibility(bool bVisible);// 0x2408312cd041
	void SetBuyResurrectBtnVisibility(const bool bVisible);// 0x2407312cd041
	void SetBigMapVisibility(bool bVisible);// 0x2406312cd041
	void SetBackpackVisibility(bool bInValue);// 0x2405312cd041
	void RequestHideInteractionList();// 0x2404312cd041
	void RequestCancelHideInteractionList();// 0x2403312cd041
	void RemoveItemFromPickup(Object* InCardItem, const bool bPickup);// 0x2402312cd041
	void ReceivePlayerDeath(out const KillInfo KillInfo);// 0x2401312cd041
	void PlayerTutorialSequence(const bool bPlay);// 0x2400312cd041
	void PickupListRemoveDelegate__DelegateSignature(Object* CardItem, bool bPickup);// 0x23ff312cd041
	void PickupListDelegate__DelegateSignature(Object* CardItem);// 0x23fe312cd041
	void OnWidgetVisibilitySet__DelegateSignature(bool bVisible);// 0x23fd312cd041
	void OnWidgetButtonClicked__DelegateSignature();// 0x23fc312cd041
	void OnVehicleScopeValueChanged__DelegateSignature(float InValue);// 0x23fb312cd041
	void OnVehicleScopeInitialized__DelegateSignature(UserWidget* Widget, bool bInSpectate);// 0x23fa312cd041
	void OnUpdateVehicleInteractionDelegate__DelegateSignature(enum UiState, SolarVehiclePawn* InVehicleComponent);// 0x23f8312cd041
	void OnTutorialSequenceRequested__DelegateSignature(bool bPlay);// 0x23f7312cd041
	FString OnTutorialGettingWidget__DelegateSignature(out Widget* Result, out const FName[] WidgetNameLink);// 0x23f6312cd041
	void OnTrySpawnSuperRadar__DelegateSignature(bool bSpawn);// 0x23f5312cd041
	void OnTreatmentDelegate__DelegateSignature();// 0x23f4312cd041
	void OnTeamMessageReceive__DelegateSignature(FString MemberName, FString Message1, bool bLocalPlayer, bool bSound, int PosInTeam, FString Message2);// 0x23f3312cd041
	void OnTeammateTalentStateChanged__DelegateSignature(enum TalentState, byte PosInTeam, float AdditionalParam);// 0x23f2312cd041
	void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh);// 0x23f1312cd041
	void OnTeammateShieldChanged__DelegateSignature(byte PosInTeam, out const ShieldInfo OldShield, out const ShieldInfo NewShield);// 0x23f0312cd041
	void OnTeammateReviveStateChanged__DelegateSignature(SolarPlayerState* RevivingMePlayer);// 0x23ef312cd041
	void OnTeammateReviveItemChanged__DelegateSignature(byte PosInTeam, byte ReviveItemNum, bool bCanRebirth);// 0x23ee312cd041
	void OnTeammatePlatStateRemove__DelegateSignature(byte PosInTeam, bool bLastOne);// 0x23ed312cd041
	void OnTeammateIntegerDataChanged__DelegateSignature(int Data, byte PosInTeam);// 0x23ec312cd041
	void OnTeammateHPChanged__DelegateSignature(byte PosInTeam, float CurrentHP, float MaxHP);// 0x23eb312cd041
	void OnSwitchEMP__DelegateSignature(SolarCharacter* InCharacter, bool InbSwitchOnEMP);// 0x23ea312cd041
	void OnSuperScaningWidgetShow__DelegateSignature(bool bShow);// 0x23e9312cd041
	void OnSuperScaningStart__DelegateSignature(out const FString[] InScanPlayers);// 0x23e8312cd041
	void OnSuperScaningRemovePlayer__DelegateSignature(FString InRemovePlayer);// 0x23e7312cd041
	void OnSuperScaningEnd__DelegateSignature();// 0x23e6312cd041
	void OnStopCountDownDelegate__DelegateSignature(const int InTextId);// 0x23e5312cd041
	void OnSteamRechargeShieldDecl__DelegateSignature(const bool bUseBigRecharger);// 0x23e4312cd041
	void OnStartCountDownDelegate__DelegateSignature(out const CountDownInfo InCountDownInfo);// 0x23e3312cd041
	void OnSprintIconHide__DelegateSignature();// 0x23e2312cd041
	void OnSprintIconActived__DelegateSignature(out const Vector2D InSprintPosition);// 0x23e1312cd041
	void OnSpectateTargetItemsChanged__DelegateSignature(ReplicateItemData[] InItemDatas);// 0x23e0312cd041
	void OnSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x23df312cd041
	void OnSpectateReferToChanged__DelegateSignature(const SolarPlayerState* ReferToPlayerState, enum State);// 0x23dd312cd041
	void OnSpectateBattleUpgradeEffectUpdate__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x23dc312cd041
	void OnSpecTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x23db312cd041
	void OnSkydivingMemberDataUpdated__DelegateSignature(SolarPlayerState* MemberPS);// 0x23da312cd041
	void OnSkydivingFollowRequestResponded__DelegateSignature(SolarPlayerState* Follower, bool bAgreed);// 0x23d9312cd041
	void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed);// 0x23d8312cd041
	void OnSkydiveFollowEnabled__DelegateSignature();// 0x23d7312cd041
	void OnSkydiveFollowDisabled__DelegateSignature();// 0x23d6312cd041
	void OnSkydiveFlyStateChanged__DelegateSignature(bool bInFly);// 0x23d5312cd041
	void OnSkydiveDataUpdate__DelegateSignature(float NewData);// 0x23d4312cd041
	void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue);// 0x23d3312cd041
	void OnSkillActivationChanged__DelegateSignature(bool bActivated);// 0x23d2312cd041
	void OnSideAttributeSetRemoved__DelegateSignature(FString SideName);// 0x23d1312cd041
	void OnSideAttributeSetChanged__DelegateSignature(FString SideName, out const SideAttributeSet SideRef);// 0x23d0312cd041
	void OnShowGameNotice__DelegateSignature(const int InNoticeID, out const HUDNoticeParams InNoiceParams);// 0x23cf312cd041
	void OnShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, FString SolarPlayerId, const enum ShieldRechargeState, bool bFixPreAdd);// 0x23ce312cd041
	void OnShieldDelegate__DelegateSignature();// 0x23cd312cd041
	void OnShieldChanged__DelegateSignature(float CurValue, float MaxValue, int QualityColor, bool bAdvancedShield);// 0x23cc312cd041
	void OnShieldAvailableChanged__DelegateSignature(bool bAvailable);// 0x23cb312cd041
	void OnSetTreasureBoxActorDelegate__DelegateSignature(Actor* InActor);// 0x23ca312cd041
	void OnSetPickupSwitchDelegate__DelegateSignature(enum InType, bool InFlag);// 0x23c9312cd041
	void OnSetBackpackDropMaskVisibility__DelegateSignature(bool bVisible);// 0x23c8312cd041
	void OnSetActiveOpenBoxDelegate__DelegateSignature(bool Inactive);// 0x23c7312cd041
	void OnSelectingBattleUpgradeEffectFinish__DelegateSignature(int SelectedIndex);// 0x23c6312cd041
	void OnSelectingBattleUpgradeEffectBegin__DelegateSignature(SolarCharacter* Target, int Level, out const int[] EffectIDArray);// 0x23c5312cd041
	void OnRoleGEShieldMultiRecoverCoolDownChange__DelegateSignature(int NewCount);// 0x23c4312cd041
	void OnRoleAbilityUsingStatusChanged__DelegateSignature(const GameplayTag Tag, int NewCount);// 0x23c3312cd041
	void OnRoleAbilityStateChange__DelegateSignature(int RoleAbilityIndex, int State);// 0x23c2312cd041
	void OnRoleAbilityStartCDUTCTimeUpdate__DelegateSignature(int RoleAbilityIndex, float InServerTime);// 0x23c1312cd041
	void OnRoleAbilityStartCD__DelegateSignature(int RoleAbilityIndex, float StartCDServerTime, float StartCDTimeForReplay);// 0x23c0312cd041
	void OnRoleAbilityInputAction__DelegateSignature(int RoleAbilityIndex, bool bPress, bool bCanActive);// 0x23bf312cd041
	void OnRoleAbilityHideControlHUD__DelegateSignature(bool bHide);// 0x23be312cd041
	void OnRoleAbilityEndCD__DelegateSignature(int RoleAbilityIndex);// 0x23bd312cd041
	void OnRoleAbilityEnd__DelegateSignature(int RoleAbilityIndex);// 0x23bc312cd041
	void OnRoleAbilityContinous__DelegateSignature(int RoleAbilityIndex, bool bTurnOn, float Duration);// 0x23bb312cd041
	void OnRoleAbilityChange__DelegateSignature(int RoleAbilityIndex, bool bHaveAbility, int CharacterId, int PlayerLevel);// 0x23ba312cd041
	void OnRoleAbilityCDDurationChange__DelegateSignature(int RoleAbilityIndex, int Duration, bool bDurationReduced);// 0x23b9312cd041
	void OnRoleAbilityBuffPause__DelegateSignature(bool bIsMainDuration, const SolarCharacter* SourceCharacter, byte AbilityIndex);// 0x23b8312cd041
	void OnRoleAbilityBuffEnd__DelegateSignature(bool bIsMainDuration, out const ActiveGameplayEffectHandle InGameplayEffectHandle);// 0x23b7312cd041
	void OnRoleAbilityBuffContinous__DelegateSignature(bool bIsMainDuration, const SolarCharacter* SourceCharacter, byte AbilityIndex, float Duration, out const ActiveGameplayEffectHandle ActiveEffectHandle);// 0x23b6312cd041
	void OnRoleAbilityAddSummonBuff__DelegateSignature(out const SoftObjectPath ImagePath, const Actor* InActor);// 0x23b5312cd041
	void OnRepliableMessageChanged__DelegateSignature();// 0x23b4312cd041
	void OnQuickVoiceWheelLongPressEnd__DelegateSignature(bool bPlayerDead);// 0x23b3312cd041
	void OnPoisonEffectUpdated__DelegateSignature(float PosX, float PosY, float Radius);// 0x23b2312cd041
	void OnPlayerFlagDisplayChanged__DelegateSignature(bool bDisplay);// 0x23b1312cd041
	void OnPlayerDead__DelegateSignature(out const KillInfo DeathMsgInfo);// 0x23b0312cd041
	void OnPickupListVisibilityChanged__DelegateSignature(bool bVisible);// 0x23af312cd041
	void OnPickupItemSet__DelegateSignature(out const Actor*[] ObjectList, enum Type);// 0x23ae312cd041
	void OnPickupItemSelected__DelegateSignature(Object* SelectWidget, int SelectWidgetThisID);// 0x23ad312cd041
	void OnPickupFlagChanged__DelegateSignature(bool bFlag, bool bNotSelf);// 0x23ac312cd041
	void OnPickupCheckValidUpdated__DelegateSignature(out const ItemCountsList ItemCountsList);// 0x23ab312cd041
	void OnPickupCheckStatesUpdated__DelegateSignature(bool bItemUpdate);// 0x23aa312cd041
	void OnPickupCheckHighlightUpdated__DelegateSignature(enum Type, bool IsRecommend);// 0x23a9312cd041
	void OnOverlapElectricShopDelegate__DelegateSignature(const bool InOverlap);// 0x23a8312cd041
	void OnNavMapMarked__DelegateSignature(byte PosInTeam, out const Vector2D MarkPosition);// 0x23a7312cd041
	void OnNavMapMarkCleared__DelegateSignature(byte PosInTeam);// 0x23a6312cd041
	void OnMemberFlagIDChanged__DelegateSignature(int FlagID, bool bClanFlag);// 0x23a5312cd041
	void OnMaxShieldValueUpdate__DelegateSignature(const float MaxShieldVal);// 0x23a4312cd041
	void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter);// 0x23a3312cd041
	void OnMarkButtonSimpleTriggered__DelegateSignature();// 0x23a2312cd041
	void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered);// 0x23a1312cd041
	void OnJetTimesChanged__DelegateSignature(int NewTimes);// 0x23a0312cd041
	void OnJetModuleLevelChanged__DelegateSignature(int NewLevel);// 0x239f312cd041
	void OnJetFlyStateChanged__DelegateSignature(bool bStart);// 0x239e312cd041
	void OnJetFlyForbiddenChanged__DelegateSignature(enum ForbiddenType, bool bAdded);// 0x239d312cd041
	void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent);// 0x239c312cd041
	void OnInteractionTriggerDelegate__DelegateSignature(out const InteractionTriggerInfo TriggerInfo);// 0x239b312cd041
	void OnInputSprintLockStart__DelegateSignature();// 0x239a312cd041
	void OnInitElectricShopDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x2399312cd041
	UserWidget* OnHomelandGetWidget__DelegateSignature();// 0x2398312cd041
	int OnHitTraceUpdated__DelegateSignature(int HitTraceID, enum HitTraceType, float Angle, float WidgetScale);// 0x2396312cd041
	void OnHideUIByThisIDDelegate__DelegateSignature(int64 InThisID);// 0x2395312cd041
	void OnEShopWeaponUpgradeDelegate__DelegateSignature(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x2394312cd041
	void OnEShopWeaponChangeDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x2393312cd041
	void OnEShopSlotWeaponUpgradeDelegate__DelegateSignature(int InWeaponSlot);// 0x2392312cd041
	void OnEShopShieldUpgradeDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x2391312cd041
	void OnEShopPurchaseSuccessDelegate__DelegateSignature(int InProductID, SolarCharacter* InCharacter);// 0x2390312cd041
	void OnEShopInfoUpdateDelegate__DelegateSignature(SolarElectricShop* InElectricShop);// 0x238f312cd041
	void OnEnemyShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, FString SolarPlayerId, const enum ShieldRechargeState, bool bFixPreAdd);// 0x238e312cd041
	void OnEnemyShieldChanged__DelegateSignature(FString SolarPlayerId, float CurValue, float MaxValue, int QualityColor, bool bAdvancedShield);// 0x238d312cd041
	void OnDrivingTutorialStopped__DelegateSignature();// 0x238c312cd041
	void OnDrivingStateChanged__DelegateSignature(enum DriveState);// 0x238b312cd041
	void OnDamagingActorsChange__DelegateSignature();// 0x238a312cd041
	void OnCharacterStateChanged__DelegateSignature();// 0x2389312cd041
	void OnCharacterSet__DelegateSignature(SolarCharacter* ControlledCharacter);// 0x2388312cd041
	void OnCharacterSelfRebirth__DelegateSignature(SolarCharacter* RebirthCharacter);// 0x2387312cd041
	void OnCharacterRescueStateChanged__DelegateSignature(byte NewRescueState);// 0x2386312cd041
	void OnCharacterNightComesActorChanged__DelegateSignature(Actor* InActor);// 0x2385312cd041
	void OnCharacterLevelUp__DelegateSignature(int NewLevel, int OldLevel, FString DynamicTip);// 0x2384312cd041
	void OnCharacterLevelExpChanged__DelegateSignature(int NewLevel, float NewExpRatio);// 0x2383312cd041
	void OnCharacterIDSet__DelegateSignature(int CharacterId);// 0x2382312cd041
	void OnCharacterHPChanged__DelegateSignature(float CurrentHP, float MaxHP);// 0x2381312cd041
	void OnCharacterGainExp__DelegateSignature(int ExpAdded);// 0x2380312cd041
	void OnCharacterDead__DelegateSignature(SolarCharacter* InCharacter);// 0x237f312cd041
	void OnBombingStarted__DelegateSignature(int BombId, out const Vector Location, float Radius);// 0x237e312cd041
	void OnBattleUpgradeEffect__DelegateSignature(enum EffectType, int ParamSum);// 0x237d312cd041
	void OnBattleTutorialWidgetDisplayed__DelegateSignature(Widget* TutorialWidget, byte ParentPanelType);// 0x237c312cd041
	void OnBattleModeChanged__DelegateSignature(byte NewModeType);// 0x237b312cd041
	void OnBattleHUDVisibilityChanged__DelegateSignature(bool bVisible);// 0x237a312cd041
	void OnBackpackTookPickup__DelegateSignature(out const Vector2D NewPosition);// 0x2379312cd041
	void OnAirdropBoxInfoChangeDelegate__DelegateSignature(AirDropTreasureBox* InAirdropBox);// 0x2378312cd041
	void LocalPlayerSkidivingCaptainChanged__DelegateSignature(int TeamIndex, FString playerName, bool IsLocalPlayer);// 0x2377312cd041
	void JoyStickSimpleDeleghate__DelegateSignature();// 0x2376312cd041
	bool IsElectricShopVisible();// 0x2375312cd041
	void IntUIInteractDelegate__DelegateSignature(int Value);// 0x2374312cd041
	void IntImplementableDelegate__DelegateSignature(int Value);// 0x2373312cd041
	void InternalCallSkydiveSpeed();// 0x2372312cd041
	void InternalCallSkydiveFlyStateChanged();// 0x2371312cd041
	void IntCharacterLuaDelegate__DelegateSignature(int Value);// 0x2370312cd041
	void IntBackpackDelegate__DelegateSignature(int Value);// 0x236f312cd041
	SolarUserWidget* GetWorldMarkPanel();// 0x236e312cd041
	Widget* GetWidgetFromBattleUIForTutorial(out const FName[] InWidgetNameLink);// 0x236d312cd041
	UserWidget* GetTeammateHomePanel();// 0x236c312cd041
	HUDDispatcherBase* GetHUDDispatcher_FromUI(const Widget* InWidget);// 0x236b312cd041
	HUDDispatcherBase* GetHUDDispatcher_FromPC(const PlayerController* InPC);// 0x236a312cd041
	HUDDispatcherBase* GetHUDDispatcher_FromHUD(const HUD* InHUD);// 0x2369312cd041
	HUDDispatcherBase* GetHUDDispatcher_FromCharacter(const SolarCharacter* InCharacter, bool bCheckControlled);// 0x2368312cd041
	UserWidget* GetHomeMainBuild();// 0x2367312cd041
	UserWidget* GetHomeLevelUpUI();// 0x2366312cd041
	UserWidget* GetHomeFriendList();// 0x2365312cd041
	UserWidget* GetHomeBattleUI();// 0x2364312cd041
	void EquipVehicleWeapon__DelegateSignature(SolarVehicleWeapon* InVehicleWeapon);// 0x2363312cd041
	void DisplayBattleTutorialWidget(Widget* InTutorialWidget, const byte InParentType);// 0x2362312cd041
	void BroadcastVJetForbiddenChanged(enum Types, bool bAdded);// 0x2361312cd041
	void BroadcastVJetCDStateChanged(bool bCD);// 0x2360312cd041
	void BroadcastTrySpawnSuperRadar(bool bSpawn);// 0x235f312cd041
	bool BroadcastTryPickupFirstItem(const bool bAutoPickup);// 0x235e312cd041
	void BroadcastToggleCursorVisibility(const bool bIsVisible);// 0x235d312cd041
	void BroadcastToggleAutoFire();// 0x235c312cd041
	void BroadcastToggleAssitAim();// 0x235b312cd041
	void BroadcastSpectateTargetItemsChanged(out const ReplicateItemData[] InItemDatas);// 0x235a312cd041
	void BroadcastSpectateTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x2359312cd041
	void BroadcastSpectateBattleUpgradeEffectUpdate(SolarSpectateInfo* SpectateInfo);// 0x2358312cd041
	void BroadcastSkydiveSpeed();// 0x2357312cd041
	bool BroadcastShieldValueChanged(const enum WidgetState, const float InCurValue, const float InChangeValue, FString InSolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x2356312cd041
	void BroadcastShieldUpgradeStart();// 0x2355312cd041
	void BroadcastShieldUpgradeShopInteract();// 0x2354312cd041
	void BroadcastShieldUpgradeItemCountChanged(const int NewCount, const int LastCount);// 0x2353312cd041
	void BroadcastShieldUpgradeInterrupt();// 0x2352312cd041
	void BroadcastShieldUpgradeFinish();// 0x2351312cd041
	void BroadcastShieldFXUpdated();// 0x2350312cd041
	bool BroadcastShieldChanged(const float CurValue, const float MaxValue, const int QualityColor, const bool bAdvancedShield);// 0x234f312cd041
	bool BroadcastShieldAvailable(const bool bAvailable);// 0x234e312cd041
	void BroadcastSettingRequestOpened(const int InOwnerType);// 0x234d312cd041
	void BroadcastSettingRequestClosed();// 0x234c312cd041
	void BroadcastSetBackpackDropMaskVisibility(const bool bVisible);// 0x234b312cd041
	void BroadcastSelectingBattleUpgradeEffectFinish(int SelectedIndex);// 0x234a312cd041
	void BroadcastSelectingBattleUpgradeEffectBegin(SolarCharacter* Target, int Level, out const int[] EffectIDArray);// 0x2349312cd041
	void BroadcastRescueBtnVisibility();// 0x2348312cd041
	void BroadcastRequsetPickupEntryPlayAnimCustom(Object* InCustomObj);// 0x2347312cd041
	void BroadcastRequsetPickupEntryPlayAnim(const int InThisID);// 0x2346312cd041
	void BroadcastProfessionFunctionalChanged(const bool bEnabled);// 0x2345312cd041
	void BroadcastPlayerFlagDisplayChanged(bool bDisplay);// 0x2344312cd041
	void BroadcastPickupToggleChanged();// 0x2343312cd041
	void BroadcastPickupEntryPlayAnim(const float InAnimTime);// 0x2342312cd041
	void BroadcastOnTeammateStateChangedDelegate();// 0x2341312cd041
	void BroadcastOnTeammateReviveStateChanged(SolarPlayerState* RevivingMeTeammatePlayer);// 0x2340312cd041
	void BroadcastOnTeammateRebirth();// 0x233f312cd041
	void BroadcastOnStopRescueTeammateCountDown(const int InTextId);// 0x233e312cd041
	void BroadcastOnStopInteractionCountDown(out const CountDownInfo InCountInfo);// 0x233d312cd041
	void BroadcastOnStopCountDownDelegate(const int InTextId);// 0x233c312cd041
	void BroadcastOnStartReviveItemRecycleCountDown(const int CurrentTime, const int DurationTime);// 0x233b312cd041
	void BroadcastOnStartRescueTeammateCountDown(out const CountDownInfo InCountDownInfo);// 0x233a312cd041
	void BroadcastOnStartInteractionCountDown(out const CountDownInfo InCountInfo);// 0x2339312cd041
	void BroadcastOnStartCountDownDelegate(out const CountDownInfo InCountDownInfo);// 0x2336312cd041
	void BroadcastOnSkydiveFlyStateChanged();// 0x2335312cd041
	void BroadcastOnShowGameNoticeDelegate(const int InNoticeID, out const HUDNoticeParams InNoticeParams);// 0x2333312cd041
	void BroadcastOnSetTreasureBoxActorDelegate(Actor* InActor);// 0x2332312cd041
	void BroadcastOnSetPickupSwitchDelegate(const enum InType, const bool InFlag);// 0x2331312cd041
	void BroadcastOnSetAirdropBoxActorDelegate(Actor* InActor);// 0x2330312cd041
	void BroadcastOnSetActiveOpenBoxProgressDelegate(const bool Inactive);// 0x232f312cd041
	void BroadcastOnSetActiveOpenBoxBtnDelegate(const bool Inactive);// 0x232e312cd041
	void BroadcastOnRightMouseButtonDownEvent();// 0x232d312cd041
	void BroadcastOnReviveWillBeDisabledHint(const int HintDuration);// 0x232c312cd041
	void BroadcastOnReviveDisabledHint();// 0x232b312cd041
	void BroadcastOnRefreshBackpackWeaponPartDelegate();// 0x232a312cd041
	void BroadcastOnRefreshBackpackWeaponDelegate();// 0x2329312cd041
	void BroadcastOnRefreshBackpackItemDelegate();// 0x2328312cd041
	void BroadcastOnRefreshBackpackEquipDelegate();// 0x2327312cd041
	void BroadcastOnOverlapElectricShopDelegate(const bool InOverlap);// 0x2326312cd041
	void BroadcastOnInteractionTriggerDisappear(out const InteractionTriggerInfo TriggerInfo);// 0x2325312cd041
	void BroadcastOnInteractionTriggerAppear(out const InteractionTriggerInfo TriggerInfo);// 0x2323312cd041
	bool BroadcastOnInteractEvent();// 0x2322312cd041
	void BroadcastOnInitElectricShopDelegate(SolarCharacter* InCharcter);// 0x2321312cd041
	void BroadcastOnHideTreasureBoxUIDelegate(const int64 InThisID);// 0x2320312cd041
	void BroadcastOnHideAirdropBoxUIDelegate(const int64 InThisID);// 0x231f312cd041
	void BroadcastOnEShopWeaponUpgradeDelegate(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x231e312cd041
	void BroadcastOnEShopWeaponChangeDelegate(SolarCharacter* InCharacter);// 0x231d312cd041
	void BroadcastOnEShopSlotWeaponUpgradeDelegate(int InWeaponSlot);// 0x231c312cd041
	void BroadcastOnEShopShieldUpgradeDelegate(SolarCharacter* InCharacter);// 0x231b312cd041
	void BroadcastOnEShopPurchaseSuccessDelegate(int InProductID, SolarCharacter* InCharacter);// 0x231a312cd041
	void BroadcastOnEShopPoolRefreshDelegate(SolarElectricShop* InElectricShop);// 0x2319312cd041
	void BroadcastOnEShopItemRefreshDelegate(SolarElectricShop* InElectricShop);// 0x2318312cd041
	void BroadcastOnEShopItemCDRefreshDelegate(SolarElectricShop* InElectricShop);// 0x2317312cd041
	void BroadcastOnBindPowerBarDelegates();// 0x2316312cd041
	void BroadcastOnBindItemPanelDelegates();// 0x2315312cd041
	void BroadcastOnBindHPPanelDelegates();// 0x2314312cd041
	void BroadcastOnBattleControlTeammateStateRemoved();// 0x2313312cd041
	void BroadcastOnAirdropProgressChangeDelegate(AirDropTreasureBox* InAirdropBox);// 0x2312312cd041
	void BroadcastOnAirdropCharChangeDelegate(AirDropTreasureBox* InAirdropBox);// 0x2311312cd041
	void BroadcastMigrateAccountVisibilityRequestChanged(const bool bVisible);// 0x2310312cd041
	void BroadcastMaxShieldValueUpdate(const float MaxShieldValue);// 0x230f312cd041
	void BroadcastJoyStickSprintStateReset();// 0x230e312cd041
	void BroadcastJoyStickResetAll();// 0x230d312cd041
	void BroadcastJoyStickInputReset();// 0x230c312cd041
	void BroadcastItemDiscarded(const int InItemID, const int InTotalCount);// 0x230b312cd041
	void BroadcastHJetTimesChargingProgress(float Value, float Percent);// 0x230a312cd041
	void BroadcastHJetForbiddenChanged(enum Types, bool bAdded);// 0x2308312cd041
	void BroadcastHJetCDStateChanged(bool bCD);// 0x2307312cd041
	void BroadcastFireButtonsReset();// 0x2306312cd041
	bool BroadcastEnemyShieldValueChanged(const enum WidgetState, const float InCurValue, const float InChangeValue, FString InSolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x2305312cd041
	bool BroadcastEnemyShieldChanged(FString InSolarPlayerID, const float CurValue, const float MaxValue, const int QualityColor, const bool bAdvancedShield);// 0x2304312cd041
	void BroadcastEndBackpackDragDrop(const bool bVisible);// 0x2303312cd041
	void BroadcastDriveCustomizeOpened(const int InLayoutType);// 0x2302312cd041
	void BroadcastDriveCustomizeClosed();// 0x2301312cd041
	void BroadcastDamagingActorsChange();// 0x2300312cd041
	void BroadcastCustomizeVisibilityRequestChanged(const bool bVisible);// 0x22ff312cd041
	bool BroadcastCheckPickupItemVaild(const int InThisID);// 0x22fe312cd041
	void BroadcastCharacterRescueStateChanged(const byte NewRescueState);// 0x22fd312cd041
	void BroadcastCharacterLevelExpChanged(const int NewLevel, const float NewExpRatio);// 0x22fc312cd041
	void BroadcastCharacterHPState();// 0x22fb312cd041
	void BroadcastCharacterGainExp(const int ExpAdded);// 0x22fa312cd041
	void BroadcastBuyResurrectBtnVisibility();// 0x22f9312cd041
	void BroadcastBattleUpgradeEffect(const enum EffectType, const int ParamSum);// 0x22f8312cd041
	void BroadcastBattleState();// 0x22f7312cd041
	void BroadcastBattleModeChanged(byte InModeType);// 0x22f6312cd041
	void BroadcastBattleHUDVisibilityChanged(const bool bVisible);// 0x22f5312cd041
	void BroadcastBackpackTakesPickup(out const Vector2D NewPosition);// 0x22f4312cd041
	void BroadcastBackpackReleasesPickup();// 0x22f3312cd041
	void BroadcastBackpackModeChanged(const int NewMode);// 0x22f2312cd041
	void BoolUIInteractDelegate__DelegateSignature(bool bValue);// 0x22f1312cd041
	void BoolGameModeLuaDelegate__DelegateSignature(bool bValue);// 0x22f0312cd041
	void BoolCharacterLuaDelegate__DelegateSignature(bool bValue);// 0x22ef312cd041
	void BindLocalSpectateDelegates(SolarSpectateInfo* SpectateInfo);// 0x22ee312cd041
	void AddItemToPickup(Object* InCardItem);// 0x22ed312cd041

--------------------------------
Class: CountDownInfo
	int TextID;//[Offset: 0x0, Size: 0x4]
	float Time;//[Offset: 0x4, Size: 0x4]
	float RemainingTime;//[Offset: 0x8, Size: 0x4]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int PassiveTextID;//[Offset: 0x10, Size: 0x4]
	GameplayTag GameplayTag;//[Offset: 0x14, Size: 0x8]
	int ContributorCharacterId;//[Offset: 0x40, Size: 0x4]
	enum State;//[Offset: 0x44, Size: 0x1]

--------------------------------
Class: SideAttributeSet.FastArraySerializerItem
	FString SideName;//[Offset: 0x10, Size: 0x10]
	SideAttribute SideTreatmentDurationReductionMultiple;//[Offset: 0x20, Size: 0x18]
	SideAttribute SideShieldChargeDurationReductionMultiple;//[Offset: 0x38, Size: 0x18]
	SideAttribute SideBigShieldChargeDurationReductionMultiple;//[Offset: 0x50, Size: 0x18]
	SideAttribute SideItemDiscountMultiple;//[Offset: 0x68, Size: 0x18]
	SideAttribute SideItemAdditionMultiple;//[Offset: 0x80, Size: 0x18]

--------------------------------
Class: SideAttribute
	float Value;//[Offset: 0x0, Size: 0x4]
	SCMPlayerState*[] Contributors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: HUDNoticeParams
	<FString,FString> Params;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ItemCountsList
	<enum,int> Type2IntMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: InteractionTriggerInfo
	GameplayTag GameplayTag;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: BP_TrainingModeDispatcher_C.TechDesignUIOperationDispatcher.HUDDispatcherBase.Object
	bool ButtonVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1260, Size: 0x1]
	delegate OnButtonHidden;//[Offset: 0x1268, Size: 0x10]
	void BroadcastButtonHidden();// 0x10b1d3154d001
	void OnButtonHidden__DelegateSignature();// 0x11c46312cd001

--------------------------------
Class: TechDesignUIOperationDispatcher.HUDDispatcherBase.Object
	delegate OnWidgetAddToBattleUIRequest;//[Offset: 0x1080, Size: 0x10]
	delegate OnWidgetAddToBackpackUIRequest;//[Offset: 0x1090, Size: 0x10]
	delegate OnWidgetAddToMapUIRequest;//[Offset: 0x10a0, Size: 0x10]
	delegate OnClearBattleUISlotRequest;//[Offset: 0x10b0, Size: 0x10]
	delegate OnClearBackpackUISlotRequest;//[Offset: 0x10c0, Size: 0x10]
	delegate OnClearMapUISlotRequest;//[Offset: 0x10d0, Size: 0x10]
	delegate OnSetBattleUISubItemVisibilityByGameMode;//[Offset: 0x10e0, Size: 0x10]
	delegate RegisterCustomMapMarkToMiniMap;//[Offset: 0x10f0, Size: 0x10]
	delegate RegisterCustomMapMarkToBigMap;//[Offset: 0x1100, Size: 0x10]
	delegate RemoveCustomMapMarkFromMiniMap;//[Offset: 0x1110, Size: 0x10]
	delegate RemoveCustomMapMarkFromBigMap;//[Offset: 0x1120, Size: 0x10]
	delegate RegisterCustomRotBarMark;//[Offset: 0x1130, Size: 0x10]
	delegate RemoveCustomRotBarMark;//[Offset: 0x1140, Size: 0x10]
	delegate OnAllPlayerNavVisibilityChanged;//[Offset: 0x1150, Size: 0x10]
	delegate OnBattleUIVisibilityChanged;//[Offset: 0x1160, Size: 0x10]
	delegate OnPowerBarVisibilityChanged;//[Offset: 0x1170, Size: 0x10]
	delegate OnRotationBarVisibilityChanged;//[Offset: 0x1180, Size: 0x10]
	delegate OnMiniMapFovChangeRequested;//[Offset: 0x1190, Size: 0x10]
	delegate OnMiniMapPlayVoiceRequested;//[Offset: 0x11a0, Size: 0x10]
	delegate OnMiniMapInitMarkIconRequested;//[Offset: 0x11b0, Size: 0x10]
	delegate OnBigMapAddDotLineRequested;//[Offset: 0x11c0, Size: 0x10]
	delegate OnMiniMapAddDotLineRequested;//[Offset: 0x11d0, Size: 0x10]
	delegate OnBigMapRemoveDotLineRequested;//[Offset: 0x11e0, Size: 0x10]
	delegate OnMiniMapRemoveDotLineRequested;//[Offset: 0x11f0, Size: 0x10]
	delegate RegisterPositionMark;//[Offset: 0x1200, Size: 0x10]
	delegate RegisterActorMark;//[Offset: 0x1210, Size: 0x10]
	delegate OnBattleUIVisibilityHasChanged;//[Offset: 0x1220, Size: 0x10]
	delegate OnGettingCanvasPositionOnBattleUI;//[Offset: 0x1230, Size: 0x10]
	delegate OnGettingWidgetRenderTransOnBattleUI;//[Offset: 0x1240, Size: 0x10]
	delegate OnGettingTextOnBackpackUI;//[Offset: 0x1250, Size: 0x10]
	void SimpleTDDelegate__DelegateSignature();// 0x255d312cd041
	void OnWidgetVisibilityHasChanged__DelegateSignature(bool bVisible);// 0x255c312cd041
	FString OnWidgetAddToBattleUIRequest__DelegateSignature(out PanelSlot* Result, Widget* WidgetForAdd, out const FName PanelNameToAdd, bool bReplaceOld);// 0x255b312cd041
	FString OnSetBattleUISubItemVisibilityByGameMode__DelegateSignature(enum GameModeType);// 0x2559312cd041
	FString OnRegisterPositionMarkRequested__DelegateSignature(out ActorMarkBase* Result, class ActorMarkBase MarkClass, out const Vector Position);// 0x2558312cd041
	FString OnRegisterActorMarkRequested__DelegateSignature(out ActorMarkBase* Result, class ActorMarkBase MarkClass, Actor* FollowActor);// 0x2557312cd041
	void OnMiniMapPlayVoiceRequested__DelegateSignature(enum VoiceType, out const MapVoiceData VoiceData);// 0x2554312cd041
	MapMarkBase* OnMiniMapInitMarkIconRequested__DelegateSignature(class MapMarkBase MapMarkClass, out const Vector2D Pivot, int ZOrder);// 0x2553312cd041
	void OnMiniMapFovChangeRequested__DelegateSignature(float TargetFOV, float PlayTime, bool bWithIconScale);// 0x2552312cd041
	int OnMapAddDotLineRequested__DelegateSignature(Actor* StartPointActor, Actor* EndPointActor, LinearColor DotLineColor);// 0x2551312cd041
	FString OnGettingWidgetTransRequest__DelegateSignature(out WidgetTransform Result, out const FName WidgetName);// 0x2550312cd041
	FString OnGettingVector2DRequest__DelegateSignature(out Vector2D Result, out const FName WidgetName);// 0x254f312cd041
	FString OnGettingTextRequest__DelegateSignature(out FText Result, out const FName TextBlockName);// 0x254e312cd041
	void OnCustomRotationBarMarkRemoved__DelegateSignature(RotationBarMarkWidget* MarkToRemove);// 0x254d312cd041
	RotationBarMarkWidget* OnCustomRotationBarMarkRegistered__DelegateSignature(class RotationBarMarkWidget RotationBarMarkClass, out const Vector MarkPos, const int ZOrder);// 0x254c312cd041
	void OnCustomMapMarkRemoved__DelegateSignature(MapMarkBase* MarkToRemove);// 0x254b312cd041
	MapMarkBase* OnCustomMapMarkRegistered__DelegateSignature(class MapMarkBase MapMarkClass, out const Vector2D MarkPos, bool bSupportEdge, bool bSupportEdgeInBigMap, int ZOrder);// 0x254a312cd041
	FString OnClearBattleUISlotRequest__DelegateSignature(out const FName PanelNameToClear);// 0x2549312cd041
	void IntTDDelegate__DelegateSignature(int Value);// 0x2548312cd041
	bool GetWidgetRenderTransOnBattleUI(out WidgetTransform Result, FName WidgetName);// 0x2547312cd041
	bool GetTextOnBackpackUI(out FText Result, FName TextBlockName);// 0x2546312cd041
	bool GetCanvasPositionOnBattleUI(out Vector2D Result, FName ChildName);// 0x2545312cd041
	void BroadcastRotationBarVisibilityChanged(const bool bVisible);// 0x2544312cd041
	void BroadcastPowerBarVisibilityChanged(const bool bVisible);// 0x2543312cd041
	void BroadcastBattleUIVisibilityChanged(const bool bVisible);// 0x2542312cd041
	void BroadcastAllPlayerNavVisibilityChanged(const bool bVisible);// 0x2541312cd041
	void BoolTDDelegate__DelegateSignature(bool bValue);// 0x2540312cd041

--------------------------------
Class: UISubsystem.GameInstanceSubsystem.Subsystem.Object
	UIGlobalConfig* GlobalConfig;//[Offset: 0x30, Size: 0x8]
	UIPanelConfig* UIPanelConfig;//[Offset: 0x38, Size: 0x8]
	<FString,SolarUserWidget*> CacheWidgets;//[Offset: 0x40, Size: 0x50]
	void PostInitializeAfterPatch();// 0x56c6312cd041

--------------------------------
Class: UIGlobalConfig.DataAsset.Object
	<byte,TeamMemberColor> TeamMemberColors;//[Offset: 0x30, Size: 0x50]
	<byte,ItemQualityData> ItemQualityData;//[Offset: 0x80, Size: 0x50]
	<byte,OBTeamColor> OBTeamColors;//[Offset: 0xd0, Size: 0x50]
	OBTeamColor GetOBTeamColor(const int TeamNum);// 0x5669312cd041

--------------------------------
Class: OBTeamColor
	FString Desc;//[Offset: 0x0, Size: 0x10]
	LinearColor Main;//[Offset: 0x10, Size: 0x10]
	LinearColor Vice;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TeamMemberColor
	LinearColor Main;//[Offset: 0x0, Size: 0x10]
	LinearColor Vice;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ItemQualityData
	LinearColor BaseColor;//[Offset: 0x0, Size: 0x10]
	LinearColor HUDColor;//[Offset: 0x10, Size: 0x10]
	LinearColor HighQualityColor;//[Offset: 0x20, Size: 0x10]
	LinearColor LowQualityColor;//[Offset: 0x30, Size: 0x10]
	LinearColor HUDBGColor;//[Offset: 0x40, Size: 0x10]
	LinearColor HUDDecorateColor;//[Offset: 0x50, Size: 0x10]
	SoftObjectPath QualityIcon;//[Offset: 0x60, Size: 0x18]
	FString QualityChar;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: UIPanelConfig.Object
	<enum,UIPanelConfigEntry> PanelConfigs;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: UIPanelConfigEntry
	SoftClassPath MobileUIPath;//[Offset: 0x0, Size: 0x18]
	SoftClassPath DesktopUIPath;//[Offset: 0x18, Size: 0x18]
	enum UILayerRoot;//[Offset: 0x30, Size: 0x1]
	bool bPrecache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]

--------------------------------
Class: BP_Character_TrainingMode_C.BP_CustomiaedCharacterBase_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x25a0, Size: 0x8]
	SolarVehiclePawn* Vehicle;//[Offset: 0x25a8, Size: 0x8]
	S_AiItem NewVar;//[Offset: 0x25b0, Size: 0xc]
	void OnCompleted_84F20D844D539263D5B45F9E9A20B26D(SolarPlayerWeapon* Weapon);// 0xffffff87312cd044
	void BeginPlayBlueprint();// 0x2666bb20
	void ShowNotice();// 0xae30312cd041
	void BatchSetItem(out const S_AiItem[] ItemList);// 0xffffff87312cd044
	void ExecuteUbergraph_BP_Character_TrainingMode(int EntryPoint, const S_AiItem[] K2Node_CustomEvent_ItemList, const byte Temp_byte_Variable, int CallFunc_Array_Length_ReturnValue, const byte Temp_byte_Variable, const byte Temp_byte_Variable, const byte Temp_byte_Variable, byte Temp_byte_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const int K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const byte Temp_byte_Variable, const byte Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, S_AiItem CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte Temp_byte_Variable, SolarPlayerWeapon* Temp_object_Variable, const byte K2Node_Select_Default, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, int Temp_int_Variable, S_AiItem CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, const byte[] K2Node_MakeArray_Array, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, enum CallFunc_AddBackpackItem_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_SetWeaponPartByPartID_Success, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x199713154d008

--------------------------------
Class: BP_CustomiaedCharacterBase_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	void 获取健康状态                                                                                  (out byte 状态                                                                                              , bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, bool CallFunc_IsDying_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, byte K2Node_Select_Default, byte K2Node_Select_Default);// 0x3fd07312e086c

--------------------------------
Class: BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x24f0, Size: 0x8]
	SolarAbilityComponent* SolarAbility;//[Offset: 0x24f8, Size: 0x8]
	Vector PreviousLocation;//[Offset: 0x2500, Size: 0xc]
	float Time;//[Offset: 0x250c, Size: 0x4]
	float CurrentTime;//[Offset: 0x2510, Size: 0x4]
	float PreviousTime;//[Offset: 0x2514, Size: 0x4]
	float DeltaTime;//[Offset: 0x2518, Size: 0x4]
	Vector DeltaLocation;//[Offset: 0x251c, Size: 0xc]
	bool OnTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2528, Size: 0x1]
	float Speed;//[Offset: 0x252c, Size: 0x4]
	Vector2D Direction;//[Offset: 0x2530, Size: 0x8]
	float[] SpeedRecord;//[Offset: 0x2538, Size: 0x10]
	Vector[] LocationRecord;//[Offset: 0x2548, Size: 0x10]
	float[] Record_X;//[Offset: 0x2558, Size: 0x10]
	float[] Record_y;//[Offset: 0x2568, Size: 0x10]
	float SpeedFixBase;//[Offset: 0x2578, Size: 0x4]
	CurveFloat* SpeedFix;//[Offset: 0x2580, Size: 0x8]
	delegate OnEjectingStateChanged;//[Offset: 0x2588, Size: 0x10]
	byte EjectState;//[Offset: 0x2598, Size: 0x1]
	int PoisonDamageNum;//[Offset: 0x259c, Size: 0x4]
	SolarCameraComponent* GetSolarCameraComponent();// 0x9c113154d001
	SolarSpringArmComponent* GetSolarSpringArmComponent();// 0x1ebfd3154d001
	void RefreshRenderConsoleVarForSkydive(BP_Fog_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x9c0f3154d001
	bool Is Observation Target(bool CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue, bool CallFunc_IsLocalPlayerSpectatingMe_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9c0e3154d001
	float FixSpeed(float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x9c0d3154d001
	void FigureSpeed(float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_GetFixedSpeed_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x9c0c3154d001
	float GetFixedY(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue);// 0x9c0b3154d001
	float GetFixedX(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue);// 0x9c0a3154d001
	void SetCameraInput(Vector NewLocalVar, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector Temp_struct_Variable, float CallFunc_GetFixedY_ReturnValue, float CallFunc_GetFixedX_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Multiply_VectorFloat_ReturnValue);// 0x9c093154d001
	void SetCameraInput(float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, FString CallFunc_Conv_Vector2dToString_ReturnValue);// 0x9c083154d001
	Vector GetFixedLocation(Vector InLocation, int NewLocalVar, Vector NewLocalVar, bool Temp_bool_Variable, bool Temp_bool_Variable, Vector Temp_struct_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector CallFunc_Divide_VectorInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Array_Get_Item, Vector K2Node_Select_Default, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x9c073154d001
	float GetFixedSpeed(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9c063154d001
	void DecelerationEffectUpdate(out float Altitude, out ParticleSystemComponent*[] Effects, float tmpAltitudePercent, float CallFunc_GetSkydiveLandingHeight_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x9c053154d001
	void UndecelerationEffectUpdate(out float Altitude, out ParticleSystemComponent*[] Effects, float L_Var, CurveFloat* UndecelerationEffectCurve, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetFloatValue_ReturnValue);// 0xffffff8a312cd002
	void InpActEvt_BackSpace_K2Node_InputKeyEvent(Key Key);// 0x9c033154d001
	void InpActEvt_Home_K2Node_InputKeyEvent(Key Key);// 0x9c023154d001
	void InpActEvt_End_K2Node_InputKeyEvent(Key Key);// 0x9c013154d001
	void InpActEvt_Delete_K2Node_InputKeyEvent(Key Key);// 0x9c003154d001
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x9bff3154d001
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x9bfe3154d001
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x9bfd3154d001
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0xad30312cd041
	void ReceiveEndPlay(byte EndPlayReason);// 0x9bea3154d001
	void ReceiveBeginPlay();// 0x9be93154d001
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x9be83154d001
	void Event_UseReviveItem(SCMPlayerState* Player);// 0x9be73154d001
	void OnSkydiveStageChanged(enum LastStage, enum CurrentStage);// 0xffffff87312cd000
	void OnCharacterEjectStateChanged(byte State);// 0x9be53154d001
	void ExecuteUbergraph_BP_SolarCharacterPlayer(int EntryPoint, byte K2Node_CustomEvent_State, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, float K2Node_Event_DistanceToGround, ParticleSystemComponent*[] CallFunc_GetAllSkydiveLandingEffects_OutEffects, bool K2Node_Event_bIsInWater, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, ParticleSystemComponent*[] CallFunc_GetAllSkydiveFlyingEffects_OutEffects, float K2Node_Event_FallingRate, byte K2Node_Event_EndPlayReason, bool CallFunc_IsEditor_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, float K2Node_Event_InDuration, bool K2Node_Event_bInOpenScope, SCMPlayerState* K2Node_CustomEvent_Player, Key K2Node_InputKeyEvent_Key, Key K2Node_InputKeyEvent_Key, bool CallFunc_IsEditor_ReturnValue, bool CallFunc_IsEditor_ReturnValue, bool CallFunc_IsEditor_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, enum K2Node_Event_LastStage, enum K2Node_Event_CurrentStage, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, ABP_SolarCharacter_FPP_C* K2Node_DynamicCast_AsABP_Solar_Character_FPP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, byte K2Node_Select_Default);// 0xffffff8a312cd002
	void OnEjectingStateChanged__DelegateSignature(byte State, SolarCharacter* TargetCharacter);// 0xffffff87312cd000

--------------------------------
Class: S_AiItem
	enum ItemType_2_314140C646418678444E9DB5DBB9CB11;//[Offset: 0x0, Size: 0x1]
	int ItemID_5_9414785640F928576D3321856C20F5FD;//[Offset: 0x4, Size: 0x4]
	int Count_7_49130AA64D9339657AC5579D1E066466;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BP_Fog_C.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]
	TimerHandle LoopTimer;//[Offset: 0x230, Size: 0x8]
	ExponentialHeightFog* HeightFog;//[Offset: 0x238, Size: 0x8]
	float Fog_MinZ;//[Offset: 0x240, Size: 0x4]
	float Fog_MaxZ;//[Offset: 0x244, Size: 0x4]
	float Fog_Add_Z;//[Offset: 0x248, Size: 0x4]
	bool StopLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	float Character_MaxZ;//[Offset: 0x250, Size: 0x4]
	float Character_MinZ;//[Offset: 0x254, Size: 0x4]
	float Not Add Height;//[Offset: 0x258, Size: 0x4]
	LinearColor FogColor;//[Offset: 0x25c, Size: 0x10]
	float GlobalTreeCullDistance;//[Offset: 0x26c, Size: 0x4]
	SolarWaterActorNew* WaterActor;//[Offset: 0x270, Size: 0x8]
	LinearColor FogColorDown;//[Offset: 0x278, Size: 0x10]
	SolarCharacter* Solar Character;//[Offset: 0x288, Size: 0x8]
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	float CallFunc_BreakVector_X;//[Offset: 0x294, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0x298, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0x29c, Size: 0x4]
	ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors;//[Offset: 0x2a0, Size: 0x10]
	ExponentialHeightFog* CallFunc_Array_Get_Item;//[Offset: 0x2b0, Size: 0x8]
	float CallFunc_BreakVector_X;//[Offset: 0x2b8, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0x2bc, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0x2c0, Size: 0x4]
	bool K2Node_SwitchInteger_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x2c8, Size: 0x10]
	enum K2Node_CustomEvent_Now_State;//[Offset: 0x2d8, Size: 0x1]
	SolarCharacter* K2Node_CustomEvent_Solar_Character;//[Offset: 0x2e0, Size: 0x8]
	SolarCharacter* K2Node_CustomEvent_Solar_Character;//[Offset: 0x2e8, Size: 0x8]
	float CallFunc_BreakVector_X;//[Offset: 0x2f0, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0x2f4, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0x2f8, Size: 0x4]
	float CallFunc_BreakVector_X;//[Offset: 0x2fc, Size: 0x4]
	float CallFunc_BreakVector_Y;//[Offset: 0x300, Size: 0x4]
	float CallFunc_BreakVector_Z;//[Offset: 0x304, Size: 0x4]
	HitResult CallFunc_K2_SetActorLocation_SweepHitResult;//[Offset: 0x308, Size: 0x88]
	SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller;//[Offset: 0x390, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller;//[Offset: 0x3a0, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	void UserConstructionScript();// 0x2dffb5315bd02e
	void SetFogLocationZ();// 0xacc7312cd041
	void RequestFogToSettle(SolarCharacter* bpp__SolarxCharacter__pfT);// 0x462d0ac22e1bfe45
	void OnBattleStart(enum bpp__NowxState__pfT);// 0xc4c93154d001
	void Fog_Change(SolarCharacter* bpp__SolarxCharacter__pfT);// 0xffffff87312cd000

--------------------------------
Class: BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa70, Size: 0x8]
	BPC_GM_Common_C* BPC_GM_Common;//[Offset: 0xa78, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xa80, Size: 0x8]
	Vector[] DeathLocations;//[Offset: 0xa88, Size: 0x10]
	Vector[] LandLocations;//[Offset: 0xa98, Size: 0x10]
	bool Presettling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa8, Size: 0x1]
	int ResurrectTime;//[Offset: 0xaac, Size: 0x4]
	Vector ResurrectLocation;//[Offset: 0xab0, Size: 0xc]
	class SolarUserWidget* ResurrectUI;//[Offset: 0xac0, Size: 0x28]
	S_ResurrectInfo ResurrectOptions;//[Offset: 0xae8, Size: 0x5]
	delegate OnResurrectionBegin;//[Offset: 0xaf0, Size: 0x10]
	delegate OnResurrectionFinished;//[Offset: 0xb00, Size: 0x10]
	UI_Resurrect_C* ResurrectUIObj;//[Offset: 0xb10, Size: 0x8]
	byte ResurrectType;//[Offset: 0xb18, Size: 0x1]
	bool bIsResurrecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb19, Size: 0x1]
	BP_Logic_Framework_C* Logic;//[Offset: 0xb20, Size: 0x8]
	bool bShouldSettle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb28, Size: 0x1]
	UI_MapMark_ReviveTeammates_C*[] UI_MapMark_ReviveTeammatesArr;//[Offset: 0xb30, Size: 0x10]
	ActorMarkBase* DeathBoxMark;//[Offset: 0xb40, Size: 0x8]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0xb48, Size: 0x8]
	TimerHandle LandedDetectionHandel;//[Offset: 0xb50, Size: 0x8]
	MapMarkBase*[] DeathBoxMiniMapMark;//[Offset: 0xb58, Size: 0x10]
	delegate OnResurrectTimeChange;//[Offset: 0xb68, Size: 0x10]
	int AiCompCd;//[Offset: 0xb78, Size: 0x4]
	ActorMarkBase* RebirthedDeathBoxMark;//[Offset: 0xb80, Size: 0x8]
	bool bIsReviveSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb88, Size: 0x1]
	BP_DI_DeathBoxA_TreasureBox_C* DeathBoxRef;//[Offset: 0xb90, Size: 0x8]
	Vector DeathBoxLoc;//[Offset: 0xb98, Size: 0xc]
	bool ShowRebirthUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba4, Size: 0x1]
	byte CharacterHealthState;//[Offset: 0xba5, Size: 0x1]
	enum ResurrectMethod;//[Offset: 0xba6, Size: 0x1]
	Vector TempDeathBoxLoc;//[Offset: 0xba8, Size: 0xc]
	SolarPlayerState* LocalKillerPS;//[Offset: 0xbb8, Size: 0x8]
	FString GetModuleName();// 0xffffff87312cd044
	void LocalKillerPSUpdateHandler(SolarPlayerState* KillerPS);// 0xffffff87312cd000
	void OnRep_LocalKillerPS();// 0x8007bfa531ecd01f
	void GetResurrectLocation(out Vector Location);// 0xffffff8a312cd002
	void Remove All Revive Mark(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, MapMarkBase* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xffffff87312cd044
	Vector GetDeathBoxLocation(BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_Get_Death_Box_Loc_Loc);// 0xffffff87312cd000
	bool PlayerCanRebirthBlueprint(CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess);// 0xffffff87312cd000
	void OnRep_CharacterHealthState(GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess);// 0xb6263154d001
	void Handling Is Resurrecting(bool CallFunc_IsServer_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xd968312cd041
	static void GetSpecialHitTypeArray(out int[] NewParam, byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int[] K2Node_MakeArray_Array);// 0xbc20312cd041
	void Set Death Box Ref(BP_DI_DeathBoxA_TreasureBox_C* InDeathbox, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x88ec312d5845
	void OnRep_bIsReviveSkydiving(bool CallFunc_IsServer_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffff8a312cd002
	void Remove Punctuation(bool bKeepRebornLine, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, UI_MapMark_ReviveTeammates_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffffff6ad9a1a0
	static int GetExpByBehavior(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage, int Multiplier, int ID, int Temp_int_Variable, int CallFunc_FTrunc_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, byte CallFunc_MakeLiteralByte_ReturnValue, int[] CallFunc_GetSpecialHitTypeArray_NewParam, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, const SolarTablesData_Behavior CallFunc_GetRowData_ReturnValue, const SolarTablesData_EscapeExp CallFunc_GetRowData_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_ItemBehavior CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue);// 0xffffff8a312cd002
	void IsAiCompCdClear(out bool Result, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x32ffb7315bd065
	bool IsBuyingResurrection(BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0xb17f3154d001
	void OnRep_bIsResurrecting();// 0xb1613154d001
	void Create Punctuation(Vector InputPin, int Temp_int_Array_Index_Variable, MapMarkBase*[] CallFunc_RegisterMarkToMap_ReturnValue, int CallFunc_Array_Length_ReturnValue, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, UI_WorldMark_ReviveTeammates_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_SI_RebornLine_C* CallFunc_FinishSpawningActor_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, MapMarkBase* CallFunc_Array_Get_Item, UI_MapMark_ReviveTeammates_C* K2Node_DynamicCast_AsUI_Map_Mark_Revive_Teammates, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, MapMarkBase* CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0xb1603154d001
	void GetLogicBase(out BP_Logic_Framework_C* Output_Get, bool CallFunc_IsValid_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess);// 0xb1633154d001
	void OnRep_ResurrectTime(bool CallFunc_IsServer_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0xb15e3154d001
	void Death Cleanup UI(PlayerController* CallFunc_GetPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue);// 0xb15d3154d001
	void GetResurrectUI(out UI_Resurrect_C* Output_Get, UserWidget* CallFunc_ShowSolarWidget_ReturnValue, UI_Resurrect_C* K2Node_DynamicCast_AsUI_Resurrect, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0xb1623154d001
	void GetLastDeathLocation(out Vector Output, int CallFunc_Array_LastIndex_ReturnValue, Vector CallFunc_Array_Get_Item);// 0xb15b3154d001
	void OnCharacterLanded();// 0xffffff8a312cd002
	void OnPlayerInteract(byte InteractType);// 0xb1583154d001
	void ReceiveBeginPlay();// 0xffffff8a312cd002
	void OnCharacterEjectStateChanged(byte State, SolarCharacter* TargetCharacter);// 0xb1593154d001
	void OnTimeCut();// 0xffffff8a312cd002
	void [s]RequestResurrectInTime(int Time, byte Type, Vector Location, S_ResurrectInfo options, bool bUseParamZ);// 0xb1553154d001
	void [c]ShowResurrectUI(int Time, byte Type);// 0xb1573154d001
	void FadeRevert();// 0xb1533154d001
	void DropPickableItem(Object* Item);// 0xb1523154d001
	void PickupPickableItem(Object* Item);// 0xffffffff0d185800
	void Event_CreateDeathBoxMark();// 0xb1503154d001
	void Event_OnResEnd(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0xb14e3154d001
	void Event_NotifTeammatesHelp();// 0xb14d3154d001
	void Event_ClientPlayerMarkAnim();// 0xb1513154d001
	void OnReviveSucceed(FString TargetPlayerID);// 0xb14b3154d001
	void RebirthFadeStart();// 0xb14a3154d001
	void RebirthFadeEnd();// 0xb14f3154d001
	void AiCompCountDown();// 0xb1483154d001
	void ResetAiCompTimer(int Time);// 0xb1473154d001
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0xb14c3154d001
	void [C]OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum Type);// 0xb1453154d001
	void EventOnBeginRevived(SolarCharacter* InTeammate);// 0xb1443154d001
	void EventOnEndRevived(const SolarCharacter* InTeammate);// 0xb1493154d001
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0xb1423154d001
	void Event_EnterSkydiveFly();// 0xb1413154d001
	void OnInteractBtnHit(Object* Publisher, Object* Payload, out const FString[] MetaData);// 0xb1463154d001
	void [S] Request Actor Removal(Actor* Target Actor);// 0xffffff86312cd002
	void OnOtherPlayerStopSpectateMyTeam(SolarSpectateInfo* InSpectateInfo);// 0x1a72f3154d008
	void ExecuteUbergraph_BP_PlayerState_Framework(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, UI_WorldMark_ReviveTeammatesDeathbox_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates_Deathbox, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, float Temp_float_Variable, bool CallFunc_IsServer_ReturnValue, byte Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsServer_ReturnValue, MapMarkBase* CallFunc_Array_Get_Item, UI_MapMark_ReviveTeammates_C* K2Node_DynamicCast_AsUI_Map_Mark_Revive_Teammates, bool K2Node_DynamicCast_bSuccess, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, byte K2Node_CustomEvent_InteractType, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_Add_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Location, S_ResurrectInfo K2Node_CustomEvent_Options, bool K2Node_CustomEvent_bUseParamZ, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, UI_Resurrect_C* CallFunc_GetResurrectUI_Output_Get, interface class_                                                                                                    K2Node_DynamicCast_AsI_Resurrect, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_GetEndTime_ReturnValue, bool CallFunc_IsServer_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool Temp_bool_Variable, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector K2Node_Select_Default, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int Temp_int_Variable, Object* K2Node_CustomEvent_Item, Object* K2Node_CustomEvent_Item, interface class_                                                                                                    K2Node_DynamicCast_AsI_Pickable_Item, bool K2Node_DynamicCast_bSuccess, interface class_                                                                                                    K2Node_DynamicCast_AsI_Pickable_Item, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, bool CallFunc_IsServer_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, int Temp_int_Array_Index_Variable, byte K2Node_CustomEvent_ResurrectType, BP_PlayerState_Framework_C* K2Node_CustomEvent_TargetPlayer, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, UI_MapMark_ReviveTeammates_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, UI_WorldMark_ReviveTeammates_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsSpectatingOtherPlayer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, FString K2Node_Event_TargetPlayerID, float CallFunc_Add_FloatFloat_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int K2Node_CustomEvent_Time, int K2Node_Event_GainedExp, int K2Node_Event_CurrentExp, int K2Node_Event_TotalExp, enum K2Node_Event_BehaviorType, int K2Node_CustomEvent_GainedExp, int K2Node_CustomEvent_CurrentExp, int K2Node_CustomEvent_TotalExp, enum K2Node_CustomEvent_Type, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SolarCharacter* K2Node_Event_InTeammate, const SolarCharacter* K2Node_Event_InTeammate, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, PlayerController* K2Node_Event_PC, bool CallFunc_IsValid_ReturnValue, UI_Resurrect_C* CallFunc_GetResurrectUI_Output_Get, interface class_                                                                                                    K2Node_DynamicCast_AsI_Resurrect, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, UI_Resurrect_C* CallFunc_GetResurrectUI_Output_Get, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, UI_Resurrect_C* CallFunc_GetResurrectUI_Output_Get, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, Object* K2Node_CustomEvent_Publisher, Object* K2Node_CustomEvent_Payload, const FString[] K2Node_CustomEvent_Metadata, int Temp_int_Variable, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, Actor* K2Node_CustomEvent_Target_Actor, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, enum CallFunc_GetBuildConfiguration_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Vector CallFunc_Get_Death_Box_Loc_Loc, BP_SI_RebornLine_C* CallFunc_FinishSpawningActor_ReturnValue, MapMarkBase*[] CallFunc_RegisterMarkToMap_ReturnValue, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, enum Temp_byte_Variable, bool CallFunc_IsValid_ReturnValue, int K2Node_Select_Default, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_QuickVoice CallFunc_GetRowData_ReturnValue, SolarSpectateInfo* K2Node_Event_InSpectateInfo, Vector CallFunc_GetResurrectLocation_Location, Transform CallFunc_MakeTransform_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_ResurrectCharacter_ReturnValue, float Temp_float_Variable, float K2Node_Select_Default);// 0xffffff86312cd002
	void OnResurrectTimeChange__DelegateSignature(int Time);// 0xb1433154d001
	void OnResurrectionFinished__DelegateSignature(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0xb1b43154d001
	void OnResurrectionBegin__DelegateSignature(int Time, byte Type, Vector Location, S_ResurrectInfo options);// 0x787cef37a194d000

--------------------------------
Class: BPC_GM_Common_C.CustomConsoleCommandsComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	bool OpenDetailedLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	SCMPlayerState* TargetPlayer;//[Offset: 0xc0, Size: 0x8]
	FString[] Args;//[Offset: 0xc8, Size: 0x10]
	byte CommandType;//[Offset: 0xd8, Size: 0x1]
	int DrawCircleID;//[Offset: 0xdc, Size: 0x4]
	bool UseNewAiComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	FString WarmGameTimeLine;//[Offset: 0xe8, Size: 0x10]
	delegate OnNewAiCompChange;//[Offset: 0xf8, Size: 0x10]
	void 修改CD                                                                                            (bool CallFunc_IsServer_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue);// 0x9e683154d001
	void 无限复活                                                                                        (CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, FString CallFunc_Array_Get_Item, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc_ToBool_bool);// 0x9e673154d001
	void InfiniteJet(FString Temp_string_Variable, FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Array_Get_Item, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_ToBool_bool, SolarCheatManager* K2Node_DynamicCast_AsSolar_Cheat_Manager, bool K2Node_DynamicCast_bSuccess, FString K2Node_Select_Default);// 0x9e663154d001
	void SetSkillCD(enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Variable, FString CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, enum K2Node_Select_Default, byte K2Node_Select_Default);// 0x9e653154d001
	void HPLock(bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, bool CallFunc_ToBool_bool, GameModeGlobalSetting* CallFunc_GetGameModeSetting_ReturnValue);// 0x9e643154d001
	static void TPToAI(SolarCharacter*[] Character, SCMPlayerState*[] NewLocalVar, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, int CallFunc_Array_Add_ReturnValue, int Temp_int_Loop_Counter_Variable, bool Temp_bool_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, const FString[] K2Node_MakeArray_Array, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_ToBool_bool, bool CallFunc_EqualEqual_IntInt_ReturnValue, const FString[] K2Node_Select_Default, int K2Node_Select_Default, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int K2Node_Select_Default, SolarCharacter* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue);// 0x9ea03154d001
	static void KillAI(int NewLocalVar, SCMPlayerState*[] NewLocalVar, bool Temp_bool_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, const FString[] K2Node_MakeArray_Array, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, bool CallFunc_ToBool_bool, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const FString[] K2Node_Select_Default, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int K2Node_Select_Default);// 0x9e623154d001
	static void SpawnAI(int Difficulty, int count, bool CanMove, int Character, FString TargetSide, bool bIsTeammate, class SolarBotAIController Temp_class_Variable, class SolarBotAIController Temp_class_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_Variable, int CallFunc_GetRandomCharacter_Output, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, class SolarBotAIController K2Node_Select_Default, int Temp_int_Variable, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString[] CallFunc_GetJobList_OutResult, Vector CallFunc_Add_VectorFloat_ReturnValue, FString CallFunc_Array_Get_Item, SCMPlayerState* CallFunc_CreateBotAISingle_ReturnValue, int CallFunc_FindPlayerSideJob_OutCountCurrent, int CallFunc_FindPlayerSideJob_OutCountMax, int CallFunc_FindPlayerSideJob_OutMatchCountCurrent, int CallFunc_FindPlayerSideJob_OutMatchCountMax, SCMPlayerState* CallFunc_CreateBotAISingle_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, bool CallFunc_ToBool_bool, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, FString CallFunc_Array_Get_Item, int K2Node_Select_Default, bool CallFunc_ToBool_bool);// 0x9e613154d001
	void OnRep_WarmGameTimeLine();// 0x9e603154d001
	void OnRep_UseNewAiComp();// 0x9e5f3154d001
	void EggAbility(bool CallFunc_IsServer_ReturnValue, enum CallFunc_GetPlayerPawn_outType, Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_Character_BattleRoyale_C* K2Node_DynamicCast_AsBP_Character_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x9e5e3154d001
	static void DrawPoisonCircleInClient(int Index, int Temp_int_Array_Index_Variable, const FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, Vector CallFunc_Get_Safe_Area_Center_Pos, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_VectorToString_ReturnValue, int[] CallFunc_Map_Keys_Keys, Vector CallFunc_Add_VectorVector_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, S_Event_BattleRoyale CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Conv_IntToFloat_ReturnValue);// 0x9e5d3154d001
	void OpenDetailLog(bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, bool K2Node_SwitchString_CmpSuccess);// 0x9e5c3154d001
	void 修改玩家背包                                                                                  (bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue);// 0x9e5b3154d001
	void 修改玩家角色                                                                                  (bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_ChangePlayerCharacter_ReturnValue);// 0x9e5a3154d001
	void GetCommandType(FString Command, out byte Type, int CallFunc_MakeLiteralInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9e593154d001
	static void SetCharacter(SCMPlayerState* Player, int CharacterId, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int[] CallFunc_GetRowKeys_OutKeys, int CallFunc_GetRowKeys_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, const SolarTablesData_Skin CallFunc_GetRowData_ReturnValue, bool CallFunc_ChangePlayerCharacter_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x9e583154d001
	void OnLoaded_C6AD5CEF49C118922616E194AD23CE46(class Object Loaded);// 0x9e573154d001
	void OnLoaded_518ADE834F1B5CC1BB900E9CF5982B48(class Object Loaded);// 0x9e563154d001
	void ExecGMCommand(FString CommandParameters, out const FString[] ArgsStr);// 0x9e553154d001
	void [s]OnCommandExec(byte CommandType, SCMPlayerState* PlayerState, out const FString[] Args);// 0x9e543154d001
	void Event_DrawPoisonCircleInClient(float Radius, Vector Center);// 0x9e533154d001
	void Event_ClearPoisonCircleInClient();// 0xffffff8a312cd002
	void [CS]OnCommandExec();// 0x9e513154d001
	void ExecuteUbergraph_BPC_GM_Common(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsServer_ReturnValue, class Object Temp_class_Variable, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsServer_ReturnValue, class Object K2Node_CustomEvent_Loaded, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, int Temp_int_Variable, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Add_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_IsServer_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString K2Node_Event_CommandParameters, const FString[] K2Node_Event_ArgsStr, byte K2Node_CustomEvent_CommandType, SCMPlayerState* K2Node_CustomEvent_PlayerState, const FString[] K2Node_CustomEvent_Args, byte CallFunc_GetCommandType_Type, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, float K2Node_CustomEvent_Radius, Vector K2Node_CustomEvent_Center, MiniMapUMG_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_IsServer_ReturnValue, MiniMapUMG_C*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, bool CallFunc_IsServer_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, MiniMapUMG_C* CallFunc_Array_Get_Item, int Temp_int_Loop_Counter_Variable, int CallFunc_AddCircle_ReturnValue, int CallFunc_Max_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, enum CallFunc__S_GetBuildPackageType_____, bool CallFunc_IsServer_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, FString CallFunc_Array_Get_Item, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Concat_StrStr_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BPC_WarmGame_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_ToBool_bool, bool CallFunc_IsServer_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, FString CallFunc_Array_Get_Item, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc_ToBool_bool, int Temp_int_Array_Index_Variable, MiniMapUMG_C* CallFunc_Array_Get_Item, const FString[] Temp_string_Variable, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, FString CallFunc_Array_Get_Item, BattleRoyaleGameModeAIComp_Custom_C* K2Node_DynamicCast_AsBattle_Royale_Game_Mode_AIComp_Custom, bool K2Node_DynamicCast_bSuccess, FName CallFunc_Conv_StringToName_ReturnValue, FallbackStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, const FString[] Temp_string_Variable, Transform CallFunc_MakeTransform_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, Vector CallFunc_K2_GetActorLocation_ReturnValue, BattleRoyaleGameModeAIComp_Custom_C* K2Node_DynamicCast_AsBattle_Royale_Game_Mode_AIComp_Custom, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Add_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_AiCompManagerBase_C* CallFunc_FinishSpawningActor_ReturnValue, class Object Temp_class_Variable, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, FString CallFunc_Array_Get_Item, Actor* CallFunc_FinishSpawningActor_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, class Object K2Node_CustomEvent_Loaded, S_WarmGameSetting_AiCompBase CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, const enum[] K2Node_MakeArray_Array, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsAIPlayer_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_CheckMapDarkDataWithVector_ReturnValue, SoftClassPath CallFunc_MakeSoftClassPath_ReturnValue, FString CallFunc_Array_Get_Item, class Object CallFunc_Conv_SoftClassPathToSoftClassRef_ReturnValue, SoftClassPath CallFunc_MakeSoftClassPath_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, class Object CallFunc_Conv_SoftClassPathToSoftClassRef_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_FinishSpawningActor_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_IsServer_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_WarmGameLogic_NoramlWarmGame_C* CallFunc_FinishSpawningActor_ReturnValue, FString CallFunc_Array_Get_Item, GameModeGlobalSetting* CallFunc_GetGameModeSetting_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, SolarPoisonDamageEvent K2Node_MakeStruct_SolarPoisonDamageEvent, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_IsServer_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Array_Get_Item, float CallFunc_Conv_StringToFloat_ReturnValue, SolarPointDamageEvent K2Node_MakeStruct_SolarPointDamageEvent);// 0xffffff8a312cd002
	void OnNewAiCompChange__DelegateSignature();// 0xffffffff079f7260

--------------------------------
Class: CustomConsoleCommandsComponent.ActorComponent.Object
	void ExecGMCommand(FString CommandParameters, out const FString[] ArgsStr);// 0x3e89312cd041

--------------------------------
Class: CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	class CGFormula* Formula;//[Offset: 0x38, Size: 0x8]
	SettlementPageConfig* SettlePageConfig;//[Offset: 0x40, Size: 0x8]
	<FString,SCMMapConfig> MapConfig;//[Offset: 0x48, Size: 0x50]
	DataManagerConfig DataManagerConfig;//[Offset: 0x98, Size: 0x10]
	JobManagerConfig JobConfig;//[Offset: 0xa8, Size: 0x8]
	bool EnableUltimateSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	enum UltimateSkillStateOperationOnInit;//[Offset: 0xb1, Size: 0x1]
	bool EnableTacticalSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1]
	enum TacticalSkillStateOperationOnInit;//[Offset: 0xb3, Size: 0x1]
	int AirDropSkillMode;//[Offset: 0xb4, Size: 0x4]
	bool EnableWeaponUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	int InitInGamePlayerLevel;//[Offset: 0xbc, Size: 0x4]
	bool EnablePlayerUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	InGameLevelingConfig InGameLevelingConfig;//[Offset: 0xc8, Size: 0x8]
	enum[] CharacterDamageUpgradeTypes;//[Offset: 0xd0, Size: 0x10]
	ExpItemConfig ExpItemConfig;//[Offset: 0xe0, Size: 0x10]
	bool bIfShouldSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool bIfSupportDeathverge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	<int,int> DeathBoxEnergyLimitConfig;//[Offset: 0xf8, Size: 0x50]
	bool EnableSect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	CustomRoomData CustomRoomData;//[Offset: 0x150, Size: 0x70]
	bool bIsCustomRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	bool bEnableTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1]
	float InitTrackingDelay;//[Offset: 0x1c4, Size: 0x4]
	float TrackingTimeInterval;//[Offset: 0x1c8, Size: 0x4]
	float DefaultTrackMaxRevealDistance;//[Offset: 0x1cc, Size: 0x4]
	float TrackReplaceDistance;//[Offset: 0x1d0, Size: 0x4]
	float MinRevealDistance;//[Offset: 0x1d4, Size: 0x4]
	float TrackTimeout;//[Offset: 0x1d8, Size: 0x4]
	int MaxTrackNum;//[Offset: 0x1dc, Size: 0x4]
	bool IsEnableSect();// 0x3d81312cd041
	bool IsCustomRoomMode();// 0x3d80312cd041
	int GetRequiredExpForLevel(int InLevel);// 0x3d7f312cd041
	int GetMaxShieldMatCountToDeathbox(const int InLevel);// 0x3d7e312cd041
	int GetMaxInGameLevel();// 0x3d7d312cd041
	int GetExpItemCountByLevel(const int InLevel, const int InLevelGap);// 0x3d7c312cd041
	CustomRoomData GetCustomRoomData();// 0x3d7b312cd041

--------------------------------
Class: CustomRoomData
	FString Name;//[Offset: 0x0, Size: 0x10]
	int64 MinPlayerLimit;//[Offset: 0x10, Size: 0x8]
	int64 MaxPlayerLimit;//[Offset: 0x18, Size: 0x8]
	FString OwnerID;//[Offset: 0x20, Size: 0x10]
	FString Passwd;//[Offset: 0x30, Size: 0x10]
	int LevelLimit;//[Offset: 0x40, Size: 0x4]
	int64 ShowID;//[Offset: 0x48, Size: 0x8]
	int64 MaxOBPlayerLimit;//[Offset: 0x50, Size: 0x8]
	bool bIsEnabledSwapPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bIsEnabledInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bIsEnableTeamJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	enum RoomType;//[Offset: 0x5b, Size: 0x1]
	TournamentData TournamentData;//[Offset: 0x5c, Size: 0x10]

--------------------------------
Class: TournamentData
	int StartTime;//[Offset: 0x0, Size: 0x4]
	int DelayTime;//[Offset: 0x4, Size: 0x4]
	int Turn;//[Offset: 0x8, Size: 0x4]
	enum TournamentType;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: CGFormula.Info.Actor.Object
	KnockoutParams KnockoutParams;//[Offset: 0x228, Size: 0x28]
	bool bInitKnockParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x3d70312cd041
	bool IsSettlementBagItem(SolarPlayerState* InPS);// 0x3d6f312cd041
	void InitKnockoutPointParams(out KnockoutParams InParams);// 0x3d6e312cd041
	int GetZomborg(SolarPlayerState* InPS);// 0x3d6d312cd041
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x3d6c312cd041
	int GetWeaponExp(SolarPlayerState* InPS, int InWeaponID);// 0x3d6b312cd041
	void GetTeamScoreComparison(SolarPlayerState* InPS, out FString OutTeamScore);// 0x3d6a312cd041
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x3d69312cd041
	void GetShowPageIndexs(SolarPlayerState* InPS, out const SettlePageParam InParam, out int[] OutResult);// 0x3d68312cd041
	SettlementReward[] GetSettlementRewards(SolarPlayerState* InPS);// 0x3d67312cd041
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerId, out FString InPBName);// 0x3d66312cd041
	float GetKDA(SolarPlayerState* InPS);// 0x3d65312cd041
	FString[] GetGroupResultPlayerExData(FString SolarPlayerId, out FString InPBName);// 0x3d64312cd041
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(SolarPlayerState* InPS);// 0x3d63312cd041
	void GetCharacterExp(SolarPlayerState* InPS, out int OutGetExp, out int[] OutReason);// 0x3d62312cd041
	int GetAccountExp(SolarPlayerState* InPS);// 0x3d61312cd041
	int CalculateTeamRank(SolarPlayerState* InPS);// 0x3d60312cd041
	int CalculatePlayerRank(SolarPlayerState* InPS);// 0x3d5f312cd041
	float CalculateMVPScore(SolarPlayerState* InPS);// 0x3d5e312cd041
	int CalculateKnockoutPoints(const int InTeamRank, const int InKillNum, const float InTotalDamage, const float InTotalDamageTaken);// 0x3d5d312cd041

--------------------------------
Class: SettlePageParam
	int WeaponExpSettlmentNum;//[Offset: 0x0, Size: 0x4]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SettlementPageConfig.DataAsset.Object
	int PageSkipIndex;//[Offset: 0x30, Size: 0x4]
	class SolarUWSettlementBase[] SettlementPage;//[Offset: 0x38, Size: 0x10]
	FString EnterSettleSoundEvent;//[Offset: 0x48, Size: 0x10]
	FString ExitSettleSoundEvent;//[Offset: 0x58, Size: 0x10]
	int[] PageIndexs;//[Offset: 0x68, Size: 0x10]
	bool IsCustomRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: SCMMapConfig
	FString Desc;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath LevelMap;//[Offset: 0x10, Size: 0x18]
	int MiniMapId;//[Offset: 0x28, Size: 0x4]
	bool IsStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	<FString,SCMElementMapConfig> ElementGroups;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: SCMElementMapConfig
	SoftObjectPath ElementLevel;//[Offset: 0x0, Size: 0x18]
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum LoadType;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: DataManagerConfig
	DataTable* GeneralDataTable;//[Offset: 0x0, Size: 0x8]
	DataTable* DataTable;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: JobManagerConfig
	DataTable* JobTable;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: InGameLevelingConfig
	DataTable* ExpTable;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ExpItemConfig
	DataTable* ConfigTable;//[Offset: 0x0, Size: 0x8]
	DataTable* KilledConfigTable;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CFG_Framework_C.CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	BP_ConfigSave_C* ModeConfig;//[Offset: 0x1e0, Size: 0x8]
	bool 自动无限复活                                                                                  ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	CustomRoomData GetCustomRoomData(bool Temp_bool_Variable, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, CustomRoomData K2Node_Select_Default);// 0xffffff8a312cd002
	bool IsCustomRoomMode(bool Temp_bool_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default);// 0xffffff8a312cd002
	void GetSavedConfig(out BP_ConfigSave_C* AsBP Config Save, out bool bSuccess, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ConfigSave_C* K2Node_DynamicCast_AsBP_Config_Save, bool K2Node_DynamicCast_bSuccess);// 0xffffff8a312cd002

--------------------------------
Class: BP_ConfigSave_C.SaveGame.Object
	bool bEnableAiTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bEnableCustomRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	CustomRoomData CustomRoomConfig;//[Offset: 0x30, Size: 0x70]
	bool bIsCustomRoomHost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: SolarCheatManager.CheatManager.Object
	SoftObjectPath PSOGatherCubeBPAssetPath;//[Offset: 0x3c8, Size: 0x18]
	float PSOGatherCubeDistanceToCamera;//[Offset: 0x3e0, Size: 0x4]
	FString PSOGatherBPHuntAssetPath;//[Offset: 0x3e8, Size: 0x10]
	FString PSOGatherBPTutorialAssetPath;//[Offset: 0x3f8, Size: 0x10]
	SoftObjectPath AirShipBPAssetPath;//[Offset: 0x450, Size: 0x18]
	void StopEffectScreen(int InHandle);// 0x4687312cd041
	void StopEffectActor(int InHandle);// 0x4686312cd041
	void StartPSOGatheringiOSTutorial();// 0x4685312cd041
	void StartPSOGatheringiOSHunt();// 0x4684312cd041
	void StartPSOGathering();// 0x4683312cd041
	void StartEffectScreen(FString RowName);// 0x4682312cd041
	void StartEffectActor(FString RowName);// 0x4681312cd041
	void SpawnVehicleWithVehicleID(const int VehicleID);// 0x4680312cd041
	void SpawnVehicle(const int SpawnID);// 0x467f312cd041
	void SpawnTreasureBox(const int TreasureBoxID);// 0x467e312cd041
	void SpawnSolarRadar(FString BpPath);// 0x467d312cd041
	void SpawnPSOGatherCube();// 0x467c312cd041
	void SpawnOutcomeContent(const int OutcomeID);// 0x467b312cd041
	void SpawnChargingPile(FString BpPath);// 0x467a312cd041
	void SpawnAirdrop(const int AirdropID);// 0x4679312cd041
	void SolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed);// 0x4678312cd041
	void SolarWeaponReload(int PrimaryAmmoCap, int SecondaryAmmoCap);// 0x4677312cd041
	void SolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);// 0x4676312cd041
	void SolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);// 0x4675312cd041
	void SolarTestReportAbnormalPlayerWeapon(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InAttackLocation, FString InHitLocation, FString InHitBoneScale, FString InWeaponBlueprintName);// 0x4674312cd041
	void SolarTestReportAbnormalPlayerVehicle(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InVehiclePreviousLocation, FString InVehiclePresentLocation, FString InVehicleBlueprintName);// 0x4673312cd041
	void SolarTestReportAbnormalPlayer(FString InPlayerID, FString InVariableName, FString InVariableValue);// 0x4672312cd041
	void SolarTeleport(const float DestLocationX, const float DestLocationY, const float DestLocationZ);// 0x4671312cd041
	void SolarServerCmd(FString Cmd);// 0x4670312cd041
	void SolarGMSetPlayerValueInternal(FString InType, FString InValue);// 0x466f312cd041
	void SolarGM_ValidateAirline(float InBufferX, float InBufferY, float InBufferZ);// 0x466e312cd041
	void SolarGM_UnforbidCharacterUniqueSkillCD();// 0x466d312cd041
	void SolarGM_TestCrash();// 0x466c312cd041
	void SolarGM_TeleportToBotAI(uint32 CtrlIndex);// 0x466b312cd041
	void SolarGM_StopBotAIBehaviorTree(bool bStop);// 0x466a312cd041
	void SolarGM_SpawnBotAIAtCrosshairByNum(int Num);// 0x4669312cd041
	void SolarGM_ShowEmojiBubble(int EmojiID);// 0x4668312cd041
	void SolarGM_SetPlayerValue(FString InType, FString InValue);// 0x4667312cd041
	void SolarGM_SetPlayerLevel(int InLv);// 0x4666312cd041
	void SolarGM_SetEMPForceFieldTestRange(float InRadius, float InHeight);// 0x4665312cd041
	void SolarGM_SetEMPForceFieldCoreSize(float InX, float InY, float InZ);// 0x4664312cd041
	void SolarGM_SetCharacterRoleAbilitySkillCDDuration(float InCD);// 0x4663312cd041
	void SolarGM_SetAssistAimTargetVelocityFollowMaxSpeed(float MaxHorizontalSpeed, float MaxVerticalSpeed);// 0x4662312cd041
	void SolarGM_SetAssistAimTargetConfig_TargetVelocityFollowTriggerExtent(FString BodyType, FString status, float ExtentX, float ExtentY);// 0x4661312cd041
	void SolarGM_SetAssistAimTargetConfig_LockAimingExtent(FString BodyType, FString status, float ExtentX, float ExtentY);// 0x4660312cd041
	void SolarGM_SetAssistAimTargetConfig_GlobalSensitivityScaleTriggerExtent(FString BodyType, FString status, float ExtentX, float ExtentY);// 0x465f312cd041
	void SolarGM_SetAssistAimTargetConfig_BaseFollowTriggerExtent(FString BodyType, FString status, FString CharacterTagStr, float ExtentX, float ExtentY);// 0x465e312cd041
	void SolarGM_SetAssistAimTargetConfig_BaseFollowStopExtent(FString BodyType, FString status, FString CharacterTagStr, float ExtentX, float ExtentY);// 0x465d312cd041
	void SolarGM_SetAssistAimCurveScales(float TargetVelocityFollowHorizontalRatioCurveScale, float TargetVelocityFollowVerticalRatioCurveScale, float GlobalSensitivityScaleCurveScale);// 0x465c312cd041
	void SolarGM_SetAssistAimBaseFollowSpeed(FString StatusTagStr, float HorizontalSpeed, float VerticalSpeed);// 0x465b312cd041
	void SolarGM_RestoreRecommend();// 0x465a312cd041
	void SolarGM_ResetCharacterUniqueSkillCD();// 0x4659312cd041
	void SolarGM_PlayerUpgrade(int InLv);// 0x4658312cd041
	void SolarGM_KillAllAI(bool KillBot);// 0x4657312cd041
	void SolarGM_GainExperience(int InExp);// 0x4656312cd041
	void SolarGM_EnableNewAssistAim(bool bEnabled);// 0x4655312cd041
	void SolarGM_ClearCharacterUniqueSkillCD();// 0x4654312cd041
	void SolarGM_CallAirdropByAirShipHere();// 0x4653312cd041
	void SolarGM_CallAirdropByAirShip(float Loc_X, float Loc_Y);// 0x4652312cd041
	void SolarGM_ApplyVehicleSkin(int SkinId);// 0x4651312cd041
	void SolarAsyncLoad(FString ResPath);// 0x4650312cd041
	void SolarAmmoSpreadPerBullet(int AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);// 0x464f312cd041
	void SolarAmmoRangeSpeedDamage(int AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);// 0x464e312cd041
	void SolarAmmoFiring(int AmmoIndex, int FireCostType, int FireCostPerAttack, int FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);// 0x464d312cd041
	void SolarAmmoBoltAndMag(int AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);// 0x464c312cd041
	void SolarAmmoBasicMovement(int AmmoIndex, int TimedExplode, int BounceTimes, float Lifetime, float BaseReloadTime, int TrajectoryType, float CustomValue);// 0x464b312cd041
	void SetGameplayVibrateIntensity(FString Category, FString Intensity);// 0x464a312cd041
	void ExecuteGMCommandsInCustomMode(FString CommandParameters, FString ArgsStr);// 0x4649312cd041
	void BookmarkEnd(FString Message);// 0x4648312cd041
	void BookmarkBegin(FString Message);// 0x4647312cd041

--------------------------------
Class: SolarTables_TablesReader.Object
	SolarTables_Reader_AccountFixedExp* AccountFixedExp;//[Offset: 0x28, Size: 0x8]
	SolarTables_Reader_AccountFlag* AccountFlag;//[Offset: 0x30, Size: 0x8]
	SolarTables_Reader_Airline* Airline;//[Offset: 0x38, Size: 0x8]
	SolarTables_Reader_Armory* Armory;//[Offset: 0x40, Size: 0x8]
	SolarTables_Reader_BattleUpgradeEffect* BattleUpgradeEffect;//[Offset: 0x48, Size: 0x8]
	SolarTables_Reader_BattleUpgradeContent* BattleUpgradeContent;//[Offset: 0x50, Size: 0x8]
	SolarTables_Reader_BattleUpgradeEffectPool* BattleUpgradeEffectPool;//[Offset: 0x58, Size: 0x8]
	SolarTables_Reader_BattleEndRankSettlement* BattleEndRankSettlement;//[Offset: 0x60, Size: 0x8]
	SolarTables_Reader_BpAward* BpAward;//[Offset: 0x68, Size: 0x8]
	SolarTables_Reader_Behavior* Behavior;//[Offset: 0x70, Size: 0x8]
	SolarTables_Reader_EscapeExp* EscapeExp;//[Offset: 0x78, Size: 0x8]
	SolarTables_Reader_UnitCharacter* UnitCharacter;//[Offset: 0x80, Size: 0x8]
	SolarTables_Reader_CharacterAbility* CharacterAbility;//[Offset: 0x88, Size: 0x8]
	SolarTables_Reader_CharacterPassiveAbility* CharacterPassiveAbility;//[Offset: 0x90, Size: 0x8]
	SolarTables_Reader_GetPoint* GetPoint;//[Offset: 0x98, Size: 0x8]
	SolarTables_Reader_ChestSpawn* ChestSpawn;//[Offset: 0xa0, Size: 0x8]
	SolarTables_Reader_ClanFlag* ClanFlag;//[Offset: 0xa8, Size: 0x8]
	SolarTables_Reader_DayAndNight* DayAndNight;//[Offset: 0xb0, Size: 0x8]
	SolarTables_Reader_DsVariableRange* DsVariableRange;//[Offset: 0xb8, Size: 0x8]
	SolarTables_Reader_EShop* EShop;//[Offset: 0xc0, Size: 0x8]
	SolarTables_Reader_EShopDemoModel* EShopDemoModel;//[Offset: 0xc8, Size: 0x8]
	SolarTables_Reader_EShopGoodsPool* EShopGoodsPool;//[Offset: 0xd0, Size: 0x8]
	SolarTables_Reader_EShopGoodsPoolGroup* EShopGoodsPoolGroup;//[Offset: 0xd8, Size: 0x8]
	SolarTables_Reader_EShopSpawn* EShopSpawn;//[Offset: 0xe0, Size: 0x8]
	SolarTables_Reader_GameModeGroup* GameModeGroup;//[Offset: 0xe8, Size: 0x8]
	SolarTables_Reader_GameModeMain* GameModeMain;//[Offset: 0xf0, Size: 0x8]
	SolarTables_Reader_BattleRoyaleMode* BattleRoyaleMode;//[Offset: 0xf8, Size: 0x8]
	SolarTables_Reader_OutcomeSet* OutcomeSet;//[Offset: 0x100, Size: 0x8]
	SolarTables_Reader_GameTimeLine* GameTimeLine;//[Offset: 0x108, Size: 0x8]
	SolarTables_Reader_GlobalOutcome* GlobalOutcome;//[Offset: 0x110, Size: 0x8]
	SolarTables_Reader_GlobalSensitivity* GlobalSensitivity;//[Offset: 0x118, Size: 0x8]
	SolarTables_Reader_InputMapping* InputMapping;//[Offset: 0x120, Size: 0x8]
	SolarTables_Reader_InputAction* InputAction;//[Offset: 0x128, Size: 0x8]
	SolarTables_Reader_Item* Item;//[Offset: 0x130, Size: 0x8]
	SolarTables_Reader_GunProperty* GunProperty;//[Offset: 0x138, Size: 0x8]
	SolarTables_Reader_ArmorProperty* ArmorProperty;//[Offset: 0x140, Size: 0x8]
	SolarTables_Reader_BackpackProperty* BackpackProperty;//[Offset: 0x148, Size: 0x8]
	SolarTables_Reader_BackpackTrailProperty* BackpackTrailProperty;//[Offset: 0x150, Size: 0x8]
	SolarTables_Reader_CapsuleProperty* CapsuleProperty;//[Offset: 0x158, Size: 0x8]
	SolarTables_Reader_Chest* Chest;//[Offset: 0x160, Size: 0x8]
	SolarTables_Reader_Emote* Emote;//[Offset: 0x168, Size: 0x8]
	SolarTables_Reader_EnergyProperty* EnergyProperty;//[Offset: 0x170, Size: 0x8]
	SolarTables_Reader_ExtraEnergyProperty* ExtraEnergyProperty;//[Offset: 0x178, Size: 0x8]
	SolarTables_Reader_ItemWeaponParts* ItemWeaponParts;//[Offset: 0x180, Size: 0x8]
	SolarTables_Reader_ItemBehavior* ItemBehavior;//[Offset: 0x188, Size: 0x8]
	SolarTables_Reader_JetPackModuleProperty* JetPackModuleProperty;//[Offset: 0x190, Size: 0x8]
	SolarTables_Reader_MaterialProperty* MaterialProperty;//[Offset: 0x198, Size: 0x8]
	SolarTables_Reader_ShieldProperty* ShieldProperty;//[Offset: 0x1a0, Size: 0x8]
	SolarTables_Reader_VehicleSkinProperty* VehicleSkinProperty;//[Offset: 0x1a8, Size: 0x8]
	SolarTables_Reader_WeaponSkinProperty* WeaponSkinProperty;//[Offset: 0x1b0, Size: 0x8]
	SolarTables_Reader_ItemCustomType* ItemCustomType;//[Offset: 0x1b8, Size: 0x8]
	SolarTables_Reader_ItemQuality* ItemQuality;//[Offset: 0x1c0, Size: 0x8]
	SolarTables_Reader_ItemSound* ItemSound;//[Offset: 0x1c8, Size: 0x8]
	SolarTables_Reader_LobbyAutoDownload* LobbyAutoDownload;//[Offset: 0x1d0, Size: 0x8]
	SolarTables_Reader_Localization* Localization;//[Offset: 0x1d8, Size: 0x8]
	SolarTables_Reader_LanguageSwitcher* LanguageSwitcher;//[Offset: 0x1e0, Size: 0x8]
	SolarTables_Reader_Localization_BattleUI* Localization_BattleUI;//[Offset: 0x1e8, Size: 0x8]
	SolarTables_Reader_Localization_EventSystem* Localization_EventSystem;//[Offset: 0x1f0, Size: 0x8]
	SolarTables_Reader_Localization_General* Localization_General;//[Offset: 0x1f8, Size: 0x8]
	SolarTables_Reader_Localization_Heroes* Localization_Heroes;//[Offset: 0x200, Size: 0x8]
	SolarTables_Reader_Localization_Item* Localization_Item;//[Offset: 0x208, Size: 0x8]
	SolarTables_Reader_Localization_Tournament* Localization_Tournament;//[Offset: 0x210, Size: 0x8]
	SolarTables_Reader_Localization_Uncategorized* Localization_Uncategorized;//[Offset: 0x218, Size: 0x8]
	SolarTables_Reader_GameMap* GameMap;//[Offset: 0x220, Size: 0x8]
	SolarTables_Reader_MapMarkIcon* MapMarkIcon;//[Offset: 0x228, Size: 0x8]
	SolarTables_Reader_MatchRule* MatchRule;//[Offset: 0x230, Size: 0x8]
	SolarTables_Reader_RankMatch* RankMatch;//[Offset: 0x238, Size: 0x8]
	SolarTables_Reader_NameCardBackground* NameCardBackground;//[Offset: 0x240, Size: 0x8]
	SolarTables_Reader_NameCardPose* NameCardPose;//[Offset: 0x248, Size: 0x8]
	SolarTables_Reader_ObGift* ObGift;//[Offset: 0x250, Size: 0x8]
	SolarTables_Reader_Outcome* Outcome;//[Offset: 0x258, Size: 0x8]
	SolarTables_Reader_OutcomeContent* OutcomeContent;//[Offset: 0x260, Size: 0x8]
	SolarTables_Reader_PickupPriorityItem* PickupPriorityItem;//[Offset: 0x268, Size: 0x8]
	SolarTables_Reader_PickupPriorityWeaponPart* PickupPriorityWeaponPart;//[Offset: 0x270, Size: 0x8]
	SolarTables_Reader_QuickChat* QuickChat;//[Offset: 0x278, Size: 0x8]
	SolarTables_Reader_QuickVoice* QuickVoice;//[Offset: 0x280, Size: 0x8]
	SolarTables_Reader_CharacterVoiceover* CharacterVoiceover;//[Offset: 0x288, Size: 0x8]
	SolarTables_Reader_VODownload* VODownload;//[Offset: 0x290, Size: 0x8]
	SolarTables_Reader_RankLevel* RankLevel;//[Offset: 0x298, Size: 0x8]
	SolarTables_Reader_Rescue* Rescue;//[Offset: 0x2a0, Size: 0x8]
	SolarTables_Reader_Skin* Skin;//[Offset: 0x2a8, Size: 0x8]
	SolarTables_Reader_Achievement* Achievement;//[Offset: 0x2b0, Size: 0x8]
	SolarTables_Reader_TaskSystem* TaskSystem;//[Offset: 0x2b8, Size: 0x8]
	SolarTables_Reader_TaskProgress* TaskProgress;//[Offset: 0x2c0, Size: 0x8]
	SolarTables_Reader_PlayerOperationListLayout* PlayerOperationListLayout;//[Offset: 0x2c8, Size: 0x8]
	SolarTables_Reader_Variables* Variables;//[Offset: 0x2d0, Size: 0x8]
	SolarTables_Reader_Vehicle* Vehicle;//[Offset: 0x2d8, Size: 0x8]
	SolarTables_Reader_VehicleSkin* VehicleSkin;//[Offset: 0x2e0, Size: 0x8]
	SolarTables_Reader_VehicleType* VehicleType;//[Offset: 0x2e8, Size: 0x8]
	SolarTables_Reader_VehicleSpawn* VehicleSpawn;//[Offset: 0x2f0, Size: 0x8]
	SolarTables_Reader_VehicleSpawnGroup* VehicleSpawnGroup;//[Offset: 0x2f8, Size: 0x8]
	SolarTables_Reader_WarmGame* WarmGame;//[Offset: 0x300, Size: 0x8]
	SolarTables_Reader_WarmGameMode* WarmGameMode;//[Offset: 0x308, Size: 0x8]
	SolarTables_Reader_Weapon* Weapon;//[Offset: 0x310, Size: 0x8]
	SolarTables_Reader_WeaponDamage* WeaponDamage;//[Offset: 0x318, Size: 0x8]
	SolarTables_Reader_WeaponAmmo* WeaponAmmo;//[Offset: 0x320, Size: 0x8]
	SolarTables_Reader_WeaponBattleUpgrade* WeaponBattleUpgrade;//[Offset: 0x328, Size: 0x8]
	SolarTables_Reader_WeaponDefault* WeaponDefault;//[Offset: 0x330, Size: 0x8]
	SolarTables_Reader_WeaponKillTip* WeaponKillTip;//[Offset: 0x338, Size: 0x8]
	SolarTables_Reader_WeaponParts* WeaponParts;//[Offset: 0x340, Size: 0x8]
	SolarTables_Reader_WeaponPartsOp* WeaponPartsOp;//[Offset: 0x348, Size: 0x8]
	SolarTables_Reader_WeaponQuality* WeaponQuality;//[Offset: 0x350, Size: 0x8]
	SolarTables_Reader_SecondMode* SecondMode;//[Offset: 0x358, Size: 0x8]
	SolarTables_Reader_WeaponSkin* WeaponSkin;//[Offset: 0x360, Size: 0x8]
	SolarTables_Reader_WeaponSound* WeaponSound;//[Offset: 0x368, Size: 0x8]
	SolarTables_Reader_WeaponStatu* WeaponStatu;//[Offset: 0x370, Size: 0x8]

--------------------------------
Class: SolarTables_Reader_AccountFixedExp.SolarTableReaderBase.Object
	SolarTablesData_AccountFixedExp TryGetRowData(int Key, out bool HasKey);// 0x4f13312cd041
	bool HasRowKey(int Key);// 0x4f12312cd041
	bool HasColKey(FString Key);// 0x4f11312cd041
	FString GetTableName();// 0x4f10312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f0f312cd041
	SolarTablesData_AccountFixedExp GetRowData(int Key);// 0x4f0e312cd041
	int GetRowCount();// 0x4f0d312cd041
	int GetDataNum();// 0x4f0c312cd041
	FString[] GetColKeys();// 0x4f0b312cd041
	int GetColCount();// 0x4f0a312cd041

--------------------------------
Class: SolarTableReaderBase.Object
	int RandomRangeInt(out const SolarTablesRangeInt InData);// 0x4f09312cd041
	float RandomRangeFloat(out const SolarTablesRangeFloat InData);// 0x4f08312cd041
	bool IsReaderValid();// 0x4f07312cd041
	FString GetLocText(out const SolarTablesLocalText InData);// 0x4f06312cd041
	FString GetDeviceRes(out const SolarTablesDeviceRes InData);// 0x4f05312cd041
	bool ContainsRangeInt(out const SolarTablesRangeInt InData, int In, bool bEqualMin, bool bEqualMax);// 0x4f04312cd041
	bool ContainsRangeFloat(out const SolarTablesRangeFloat InData, float In, bool bEqualMin, bool bEqualMax);// 0x4f03312cd041

--------------------------------
Class: SolarTablesData_AccountFixedExp.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Exp;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SolarTablesDataBase

--------------------------------
Class: SolarTablesRangeInt
	int Left;//[Offset: 0x0, Size: 0x4]
	int Right;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarTablesRangeFloat
	float Left;//[Offset: 0x0, Size: 0x4]
	float Right;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SolarTablesLocalText
	int ID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SolarTablesDeviceRes
	FString res;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_AccountFlag.SolarTableReaderBase.Object
	SolarTablesData_AccountFlag TryGetRowData(int Key, out bool HasKey);// 0x4f1d312cd041
	bool HasRowKey(int Key);// 0x4f1c312cd041
	bool HasColKey(FString Key);// 0x4f1b312cd041
	FString GetTableName();// 0x4f1a312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f19312cd041
	SolarTablesData_AccountFlag GetRowData(int Key);// 0x4f18312cd041
	int GetRowCount();// 0x4f17312cd041
	int GetDataNum();// 0x4f16312cd041
	FString[] GetColKeys();// 0x4f15312cd041
	int GetColCount();// 0x4f14312cd041

--------------------------------
Class: SolarTablesData_AccountFlag.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int FlagType;//[Offset: 0x10, Size: 0x4]
	FString FlagIcon;//[Offset: 0x18, Size: 0x10]
	FString StateName;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_Airline.SolarTableReaderBase.Object
	SolarTablesData_Airline TryGetRowData(int Key, out bool HasKey);// 0x4f31312cd041
	bool HasRowKey(int Key);// 0x4f30312cd041
	bool HasColKey(FString Key);// 0x4f2f312cd041
	FString GetTableName();// 0x4f2e312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f2d312cd041
	SolarTablesData_Airline GetRowData(int Key);// 0x4f2c312cd041
	int GetRowCount();// 0x4f2b312cd041
	int GetDataNum();// 0x4f2a312cd041
	FString[] GetColKeys();// 0x4f29312cd041
	int GetColCount();// 0x4f28312cd041

--------------------------------
Class: SolarTablesData_Airline.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float[] AirlineCoordinateA;//[Offset: 0x10, Size: 0x10]
	float[] RealPointA;//[Offset: 0x20, Size: 0x10]
	float[] AirlineCoordinateB;//[Offset: 0x30, Size: 0x10]
	float[] RealPointB;//[Offset: 0x40, Size: 0x10]
	int UseGameMode;//[Offset: 0x50, Size: 0x4]
	int MapID;//[Offset: 0x54, Size: 0x4]
	float AirlineAltitude;//[Offset: 0x58, Size: 0x4]
	float CapsuleSpeed;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_Armory.SolarTableReaderBase.Object
	SolarTablesData_Armory TryGetRowData(int Key, out bool HasKey);// 0x4f45312cd041
	bool HasRowKey(int Key);// 0x4f44312cd041
	bool HasColKey(FString Key);// 0x4f43312cd041
	FString GetTableName();// 0x4f42312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f41312cd041
	SolarTablesData_Armory GetRowData(int Key);// 0x4f40312cd041
	int GetRowCount();// 0x4f3f312cd041
	int GetDataNum();// 0x4f3e312cd041
	FString[] GetColKeys();// 0x4f3d312cd041
	int GetColCount();// 0x4f3c312cd041

--------------------------------
Class: SolarTablesData_Armory.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WeaponType;//[Offset: 0x10, Size: 0x4]
	int WeaponDescription;//[Offset: 0x14, Size: 0x4]
	int SkillName;//[Offset: 0x18, Size: 0x4]
	int SkillDescription;//[Offset: 0x1c, Size: 0x4]
	FString UrlName;//[Offset: 0x20, Size: 0x10]
	FString WeaponMovie;//[Offset: 0x30, Size: 0x10]
	FString WeaponConfig;//[Offset: 0x40, Size: 0x10]
	int WeaponUnlockLevel;//[Offset: 0x50, Size: 0x4]
	int WeaponDamage;//[Offset: 0x54, Size: 0x4]
	int WeaponRateOfFire;//[Offset: 0x58, Size: 0x4]
	int WeaponRecoil;//[Offset: 0x5c, Size: 0x4]
	int WeaponSpread;//[Offset: 0x60, Size: 0x4]
	int WeaponRange;//[Offset: 0x64, Size: 0x4]
	int WeaponMobility;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_BattleUpgradeEffect.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeEffect TryGetRowData(int Key, out bool HasKey);// 0x4f81312cd041
	bool HasRowKey(int Key);// 0x4f80312cd041
	bool HasColKey(FString Key);// 0x4f7f312cd041
	FString GetTableName();// 0x4f7e312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f7d312cd041
	SolarTablesData_BattleUpgradeEffect GetRowData(int Key);// 0x4f7c312cd041
	int GetRowCount();// 0x4f7b312cd041
	int GetDataNum();// 0x4f7a312cd041
	FString[] GetColKeys();// 0x4f79312cd041
	int GetColCount();// 0x4f78312cd041

--------------------------------
Class: SolarTablesData_BattleUpgradeEffect.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum Effect;//[Offset: 0x10, Size: 0x1]
	int EffectValue;//[Offset: 0x14, Size: 0x4]
	int StackingTimes;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_BattleUpgradeContent.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeContent TryGetRowData(int Key, out bool HasKey);// 0x4f77312cd041
	bool HasRowKey(int Key);// 0x4f76312cd041
	bool HasColKey(FString Key);// 0x4f75312cd041
	FString GetTableName();// 0x4f74312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f73312cd041
	SolarTablesData_BattleUpgradeContent GetRowData(int Key);// 0x4f72312cd041
	int GetRowCount();// 0x4f71312cd041
	int GetDataNum();// 0x4f70312cd041
	FString[] GetColKeys();// 0x4f6f312cd041
	int GetColCount();// 0x4f6e312cd041

--------------------------------
Class: SolarTablesData_BattleUpgradeContent.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ModelID;//[Offset: 0x10, Size: 0x10]
	int Grade;//[Offset: 0x20, Size: 0x4]
	int[] UpgradeContent;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_BattleUpgradeEffectPool.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeEffectPool TryGetRowData(int Key, out bool HasKey);// 0x4f8b312cd041
	bool HasRowKey(int Key);// 0x4f8a312cd041
	bool HasColKey(FString Key);// 0x4f89312cd041
	FString GetTableName();// 0x4f88312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f87312cd041
	SolarTablesData_BattleUpgradeEffectPool GetRowData(int Key);// 0x4f86312cd041
	int GetRowCount();// 0x4f85312cd041
	int GetDataNum();// 0x4f84312cd041
	FString[] GetColKeys();// 0x4f83312cd041
	int GetColCount();// 0x4f82312cd041

--------------------------------
Class: SolarTablesData_BattleUpgradeEffectPool.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] Pool;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_BattleEndRankSettlement.SolarTableReaderBase.Object
	SolarTablesData_BattleEndRankSettlement TryGetRowData(int Key, out bool HasKey);// 0x4f63312cd041
	bool HasRowKey(int Key);// 0x4f62312cd041
	bool HasColKey(FString Key);// 0x4f61312cd041
	FString GetTableName();// 0x4f60312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f5f312cd041
	SolarTablesData_BattleEndRankSettlement GetRowData(int Key);// 0x4f5e312cd041
	int GetRowCount();// 0x4f5d312cd041
	int GetDataNum();// 0x4f5c312cd041
	FString[] GetColKeys();// 0x4f5b312cd041
	int GetColCount();// 0x4f5a312cd041

--------------------------------
Class: SolarTablesData_BattleEndRankSettlement.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int RuleID;//[Offset: 0x10, Size: 0x4]
	int RealPerson;//[Offset: 0x14, Size: 0x4]
	int[] ItemDrop;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_BpAward.SolarTableReaderBase.Object
	SolarTablesData_BpAward TryGetRowData(int Key, out bool HasKey);// 0x4f9f312cd041
	bool HasRowKey(int Key);// 0x4f9e312cd041
	bool HasColKey(FString Key);// 0x4f9d312cd041
	FString GetTableName();// 0x4f9c312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f9b312cd041
	SolarTablesData_BpAward GetRowData(int Key);// 0x4f9a312cd041
	int GetRowCount();// 0x4f99312cd041
	int GetDataNum();// 0x4f98312cd041
	FString[] GetColKeys();// 0x4f97312cd041
	int GetColCount();// 0x4f96312cd041

--------------------------------
Class: SolarTablesData_BpAward.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int BpID;//[Offset: 0x10, Size: 0x4]
	int Level;//[Offset: 0x14, Size: 0x4]
	int Exp;//[Offset: 0x18, Size: 0x4]
	int UpdateValue;//[Offset: 0x1c, Size: 0x4]
	int[] FreeAward;//[Offset: 0x20, Size: 0x10]
	int[] PayAward;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_Behavior.SolarTableReaderBase.Object
	SolarTablesData_Behavior TryGetRowData(int Key, out bool HasKey);// 0x4f95312cd041
	bool HasRowKey(int Key);// 0x4f94312cd041
	bool HasColKey(FString Key);// 0x4f93312cd041
	FString GetTableName();// 0x4f92312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f91312cd041
	SolarTablesData_Behavior GetRowData(int Key);// 0x4f90312cd041
	int GetRowCount();// 0x4f8f312cd041
	int GetDataNum();// 0x4f8e312cd041
	FString[] GetColKeys();// 0x4f8d312cd041
	int GetColCount();// 0x4f8c312cd041

--------------------------------
Class: SolarTablesData_Behavior.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum BehaviorType;//[Offset: 0x10, Size: 0x1]
	int CharacterGetExp;//[Offset: 0x14, Size: 0x4]
	int WeaponGetExp;//[Offset: 0x18, Size: 0x4]
	int WeaponExp;//[Offset: 0x1c, Size: 0x4]
	int WeaponExp;//[Offset: 0x20, Size: 0x4]
	int WeaponExp;//[Offset: 0x24, Size: 0x4]
	SolarTablesLocalText CharaGetExpText;//[Offset: 0x28, Size: 0x4]
	int WeaponGetExpText;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_EscapeExp.SolarTableReaderBase.Object
	SolarTablesData_EscapeExp TryGetRowData(int Key, out bool HasKey);// 0x5017312cd041
	bool HasRowKey(int Key);// 0x5016312cd041
	bool HasColKey(FString Key);// 0x5015312cd041
	FString GetTableName();// 0x5014312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5013312cd041
	SolarTablesData_EscapeExp GetRowData(int Key);// 0x5012312cd041
	int GetRowCount();// 0x5011312cd041
	int GetDataNum();// 0x5010312cd041
	FString[] GetColKeys();// 0x500f312cd041
	int GetColCount();// 0x500e312cd041

--------------------------------
Class: SolarTablesData_EscapeExp.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum BehaviorType;//[Offset: 0x10, Size: 0x1]
	int CharacterGetExp;//[Offset: 0x14, Size: 0x4]
	int WeaponGetExp;//[Offset: 0x18, Size: 0x4]
	int WeaponExp;//[Offset: 0x1c, Size: 0x4]
	int WeaponExp;//[Offset: 0x20, Size: 0x4]
	int WeaponExp;//[Offset: 0x24, Size: 0x4]
	SolarTablesLocalText CharaGetExpText;//[Offset: 0x28, Size: 0x4]
	int WeaponGetExpText;//[Offset: 0x2c, Size: 0x4]
	int ExpID;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_UnitCharacter.SolarTableReaderBase.Object
	SolarTablesData_UnitCharacter TryGetRowData(int Key, out bool HasKey);// 0x5247312cd041
	bool HasRowKey(int Key);// 0x5246312cd041
	bool HasColKey(FString Key);// 0x5245312cd041
	FString GetTableName();// 0x5244312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5243312cd041
	SolarTablesData_UnitCharacter GetRowData(int Key);// 0x5242312cd041
	int GetRowCount();// 0x5241312cd041
	int GetDataNum();// 0x5240312cd041
	FString[] GetColKeys();// 0x523f312cd041
	int GetColCount();// 0x523e312cd041

--------------------------------
Class: SolarTablesData_UnitCharacter.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText name_extra;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText Info;//[Offset: 0x18, Size: 0x4]
	int Gender;//[Offset: 0x1c, Size: 0x4]
	int Body;//[Offset: 0x20, Size: 0x4]
	enum CharacterType;//[Offset: 0x24, Size: 0x1]
	FString ClassTypeIcon;//[Offset: 0x28, Size: 0x10]
	SolarTablesLocalText ClassTypeInfo;//[Offset: 0x38, Size: 0x4]
	bool defaultChara;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int defaultSkin;//[Offset: 0x40, Size: 0x4]
	int defaultPose;//[Offset: 0x44, Size: 0x4]
	int defaultBackground;//[Offset: 0x48, Size: 0x4]
	bool usableChara;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	FString CharacterProtrait;//[Offset: 0x50, Size: 0x10]
	FString UrlName;//[Offset: 0x60, Size: 0x10]
	<FString,FString> CharacterAttributesID;//[Offset: 0x70, Size: 0x50]
	float MaxNormalHP;//[Offset: 0xc0, Size: 0x4]
	int defaultArmor;//[Offset: 0xc4, Size: 0x4]
	int defaultShield;//[Offset: 0xc8, Size: 0x4]
	int defaultJetPackModule;//[Offset: 0xcc, Size: 0x4]
	FString BasicItemMax;//[Offset: 0xd0, Size: 0x10]
	float InitialSolarCharge;//[Offset: 0xe0, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0xe4, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0xe8, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0xec, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0xf0, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0xf4, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0xf8, Size: 0x4]
	float InitialEnergyLimit;//[Offset: 0xfc, Size: 0x4]
	float InitialExtraEnergyLimit;//[Offset: 0x100, Size: 0x4]
	float InitialExtraEnergyCharge;//[Offset: 0x104, Size: 0x4]
	float InitialChargeCD;//[Offset: 0x108, Size: 0x4]
	int ExpID;//[Offset: 0x10c, Size: 0x4]
	float ExpBonus;//[Offset: 0x110, Size: 0x4]
	int CharaGiftID;//[Offset: 0x114, Size: 0x4]
	FString CharacterIngameBP;//[Offset: 0x118, Size: 0x10]
	FString AnimBPResPath;//[Offset: 0x128, Size: 0x10]
	int StandJogSpeed;//[Offset: 0x138, Size: 0x4]
	int StandRunSpeed;//[Offset: 0x13c, Size: 0x4]
	int StandSprintSpeed;//[Offset: 0x140, Size: 0x4]
	int CrouchJogSpeed;//[Offset: 0x144, Size: 0x4]
	int CrouchRunSpeed;//[Offset: 0x148, Size: 0x4]
	int CrouchSprintSpeed;//[Offset: 0x14c, Size: 0x4]
	int ShopPropertyid;//[Offset: 0x150, Size: 0x4]
	float BackpackScale;//[Offset: 0x154, Size: 0x4]
	int CharacterSize;//[Offset: 0x158, Size: 0x4]
	int BotConfigID;//[Offset: 0x15c, Size: 0x4]
	int CharacterSort;//[Offset: 0x160, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_CharacterAbility.SolarTableReaderBase.Object
	SolarTablesData_CharacterAbility TryGetRowData(int Key, out bool HasKey);// 0x4fb3312cd041
	bool HasRowKey(int Key);// 0x4fb2312cd041
	bool HasColKey(FString Key);// 0x4fb1312cd041
	FString GetTableName();// 0x4fb0312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4faf312cd041
	SolarTablesData_CharacterAbility GetRowData(int Key);// 0x4fae312cd041
	int GetRowCount();// 0x4fad312cd041
	int GetDataNum();// 0x4fac312cd041
	FString[] GetColKeys();// 0x4fab312cd041
	int GetColCount();// 0x4faa312cd041

--------------------------------
Class: SolarTablesData_CharacterAbility.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int CharacterId;//[Offset: 0x10, Size: 0x4]
	FString DataAssetsPath;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Name;//[Offset: 0x28, Size: 0x4]
	SolarTablesLocalText Info;//[Offset: 0x2c, Size: 0x4]
	int DataID;//[Offset: 0x30, Size: 0x4]
	FString AbilityBP;//[Offset: 0x38, Size: 0x10]
	FString Icon;//[Offset: 0x48, Size: 0x10]
	int Data;//[Offset: 0x58, Size: 0x4]
	bool IfActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: SolarTables_Reader_CharacterPassiveAbility.SolarTableReaderBase.Object
	SolarTablesData_CharacterPassiveAbility TryGetRowData(int Key, out bool HasKey);// 0x4fbd312cd041
	bool HasRowKey(int Key);// 0x4fbc312cd041
	bool HasColKey(FString Key);// 0x4fbb312cd041
	FString GetTableName();// 0x4fba312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4fb9312cd041
	SolarTablesData_CharacterPassiveAbility GetRowData(int Key);// 0x4fb8312cd041
	int GetRowCount();// 0x4fb7312cd041
	int GetDataNum();// 0x4fb6312cd041
	FString[] GetColKeys();// 0x4fb5312cd041
	int GetColCount();// 0x4fb4312cd041

--------------------------------
Class: SolarTablesData_CharacterPassiveAbility.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString DataAssetsPath;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_GetPoint.SolarTableReaderBase.Object
	SolarTablesData_GetPoint TryGetRowData(int Key, out bool HasKey);// 0x5085312cd041
	bool HasRowKey(int Key);// 0x5084312cd041
	bool HasColKey(FString Key);// 0x5083312cd041
	FString GetTableName();// 0x5082312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5081312cd041
	SolarTablesData_GetPoint GetRowData(int Key);// 0x5080312cd041
	int GetRowCount();// 0x507f312cd041
	int GetDataNum();// 0x507e312cd041
	FString[] GetColKeys();// 0x507d312cd041
	int GetColCount();// 0x507c312cd041

--------------------------------
Class: SolarTablesData_GetPoint.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Point;//[Offset: 0x10, Size: 0x4]
	int TaskValue;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText TaskText;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_ChestSpawn.SolarTableReaderBase.Object
	SolarTablesData_ChestSpawn TryGetRowData(int Key, out bool HasKey);// 0x4fdb312cd041
	bool HasRowKey(int Key);// 0x4fda312cd041
	bool HasColKey(FString Key);// 0x4fd9312cd041
	FString GetTableName();// 0x4fd8312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4fd7312cd041
	SolarTablesData_ChestSpawn GetRowData(int Key);// 0x4fd6312cd041
	int GetRowCount();// 0x4fd5312cd041
	int GetDataNum();// 0x4fd4312cd041
	FString[] GetColKeys();// 0x4fd3312cd041
	int GetColCount();// 0x4fd2312cd041

--------------------------------
Class: SolarTablesData_ChestSpawn.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum ChestType;//[Offset: 0x10, Size: 0x1]
	int[] Chests;//[Offset: 0x18, Size: 0x10]
	int[] Weight;//[Offset: 0x28, Size: 0x10]
	int SpawnCount;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_ClanFlag.SolarTableReaderBase.Object
	SolarTablesData_ClanFlag TryGetRowData(int Key, out bool HasKey);// 0x4fe5312cd041
	bool HasRowKey(int Key);// 0x4fe4312cd041
	bool HasColKey(FString Key);// 0x4fe3312cd041
	FString GetTableName();// 0x4fe2312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4fe1312cd041
	SolarTablesData_ClanFlag GetRowData(int Key);// 0x4fe0312cd041
	int GetRowCount();// 0x4fdf312cd041
	int GetDataNum();// 0x4fde312cd041
	FString[] GetColKeys();// 0x4fdd312cd041
	int GetColCount();// 0x4fdc312cd041

--------------------------------
Class: SolarTablesData_ClanFlag.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString FlagIcon;//[Offset: 0x10, Size: 0x10]
	FString WebIcon;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_DayAndNight.SolarTableReaderBase.Object
	SolarTablesData_DayAndNight TryGetRowData(int Key, out bool HasKey);// 0x4fef312cd041
	bool HasRowKey(int Key);// 0x4fee312cd041
	bool HasColKey(FString Key);// 0x4fed312cd041
	FString GetTableName();// 0x4fec312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4feb312cd041
	SolarTablesData_DayAndNight GetRowData(int Key);// 0x4fea312cd041
	int GetRowCount();// 0x4fe9312cd041
	int GetDataNum();// 0x4fe8312cd041
	FString[] GetColKeys();// 0x4fe7312cd041
	int GetColCount();// 0x4fe6312cd041

--------------------------------
Class: SolarTablesData_DayAndNight.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int TimeOfDays;//[Offset: 0x10, Size: 0x4]
	int ChangingSpeed;//[Offset: 0x14, Size: 0x4]
	float ChargingRate;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_DsVariableRange.SolarTableReaderBase.Object
	SolarTablesData_DsVariableRange TryGetRowData(int Key, out bool HasKey);// 0x4ff9312cd041
	bool HasRowKey(int Key);// 0x4ff8312cd041
	bool HasColKey(FString Key);// 0x4ff7312cd041
	FString GetTableName();// 0x4ff6312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4ff5312cd041
	SolarTablesData_DsVariableRange GetRowData(int Key);// 0x4ff4312cd041
	int GetRowCount();// 0x4ff3312cd041
	int GetDataNum();// 0x4ff2312cd041
	FString[] GetColKeys();// 0x4ff1312cd041
	int GetColCount();// 0x4ff0312cd041

--------------------------------
Class: SolarTablesData_DsVariableRange.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString VariableName;//[Offset: 0x10, Size: 0x10]
	float ValueStart;//[Offset: 0x20, Size: 0x4]
	float ValueEnd;//[Offset: 0x24, Size: 0x4]
	int ValueType;//[Offset: 0x28, Size: 0x4]
	int Tolerance;//[Offset: 0x2c, Size: 0x4]
	int ProbeInterval;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_EShop.SolarTableReaderBase.Object
	SolarTablesData_EShop TryGetRowData(int Key, out bool HasKey);// 0x5021312cd041
	bool HasRowKey(int Key);// 0x5020312cd041
	bool HasColKey(FString Key);// 0x501f312cd041
	FString GetTableName();// 0x501e312cd041
	int GetRowKeys(out int[] OutKeys);// 0x501d312cd041
	SolarTablesData_EShop GetRowData(int Key);// 0x501c312cd041
	int GetRowCount();// 0x501b312cd041
	int GetDataNum();// 0x501a312cd041
	FString[] GetColKeys();// 0x5019312cd041
	int GetColCount();// 0x5018312cd041

--------------------------------
Class: SolarTablesData_EShop.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] PoolGroupID;//[Offset: 0x10, Size: 0x10]
	bool IfMapShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int[] PoolRefreshTime;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_EShopDemoModel.SolarTableReaderBase.Object
	SolarTablesData_EShopDemoModel TryGetRowData(int Key, out bool HasKey);// 0x502b312cd041
	bool HasRowKey(int Key);// 0x502a312cd041
	bool HasColKey(FString Key);// 0x5029312cd041
	FString GetTableName();// 0x5028312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5027312cd041
	SolarTablesData_EShopDemoModel GetRowData(int Key);// 0x5026312cd041
	int GetRowCount();// 0x5025312cd041
	int GetDataNum();// 0x5024312cd041
	FString[] GetColKeys();// 0x5023312cd041
	int GetColCount();// 0x5022312cd041

--------------------------------
Class: SolarTablesData_EShopDemoModel.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ModelID;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_EShopGoodsPool.SolarTableReaderBase.Object
	SolarTablesData_EShopGoodsPool TryGetRowData(int Key, out bool HasKey);// 0x5035312cd041
	bool HasRowKey(int Key);// 0x5034312cd041
	bool HasColKey(FString Key);// 0x5033312cd041
	FString GetTableName();// 0x5032312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5031312cd041
	SolarTablesData_EShopGoodsPool GetRowData(int Key);// 0x5030312cd041
	int GetRowCount();// 0x502f312cd041
	int GetDataNum();// 0x502e312cd041
	FString[] GetColKeys();// 0x502d312cd041
	int GetColCount();// 0x502c312cd041

--------------------------------
Class: SolarTablesData_EShopGoodsPool.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] Equipments;//[Offset: 0x10, Size: 0x10]
	int[] Prize;//[Offset: 0x20, Size: 0x10]
	int[] Nums;//[Offset: 0x30, Size: 0x10]
	int[] Weight;//[Offset: 0x40, Size: 0x10]
	int NumbersToDisplay;//[Offset: 0x50, Size: 0x4]
	int ColdDown;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_EShopGoodsPoolGroup.SolarTableReaderBase.Object
	SolarTablesData_EShopGoodsPoolGroup TryGetRowData(int Key, out bool HasKey);// 0x503f312cd041
	bool HasRowKey(int Key);// 0x503e312cd041
	bool HasColKey(FString Key);// 0x503d312cd041
	FString GetTableName();// 0x503c312cd041
	int GetRowKeys(out int[] OutKeys);// 0x503b312cd041
	SolarTablesData_EShopGoodsPoolGroup GetRowData(int Key);// 0x503a312cd041
	int GetRowCount();// 0x5039312cd041
	int GetDataNum();// 0x5038312cd041
	FString[] GetColKeys();// 0x5037312cd041
	int GetColCount();// 0x5036312cd041

--------------------------------
Class: SolarTablesData_EShopGoodsPoolGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] PoolIDs;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_EShopSpawn.SolarTableReaderBase.Object
	SolarTablesData_EShopSpawn TryGetRowData(int Key, out bool HasKey);// 0x5049312cd041
	bool HasRowKey(int Key);// 0x5048312cd041
	bool HasColKey(FString Key);// 0x5047312cd041
	FString GetTableName();// 0x5046312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5045312cd041
	SolarTablesData_EShopSpawn GetRowData(int Key);// 0x5044312cd041
	int GetRowCount();// 0x5043312cd041
	int GetDataNum();// 0x5042312cd041
	FString[] GetColKeys();// 0x5041312cd041
	int GetColCount();// 0x5040312cd041

--------------------------------
Class: SolarTablesData_EShopSpawn.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] Eshops;//[Offset: 0x10, Size: 0x10]
	int[] Weight;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_GameModeGroup.SolarTableReaderBase.Object
	SolarTablesData_GameModeGroup TryGetRowData(int Key, out bool HasKey);// 0x5067312cd041
	bool HasRowKey(int Key);// 0x5066312cd041
	bool HasColKey(FString Key);// 0x5065312cd041
	FString GetTableName();// 0x5064312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5063312cd041
	SolarTablesData_GameModeGroup GetRowData(int Key);// 0x5062312cd041
	int GetRowCount();// 0x5061312cd041
	int GetDataNum();// 0x5060312cd041
	FString[] GetColKeys();// 0x505f312cd041
	int GetColCount();// 0x505e312cd041

--------------------------------
Class: SolarTablesData_GameModeGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText ModeGroupName;//[Offset: 0x10, Size: 0x4]
	int SortId;//[Offset: 0x14, Size: 0x4]
	int[] ModeID;//[Offset: 0x18, Size: 0x10]
	FString Icon_s;//[Offset: 0x28, Size: 0x10]
	FString Icon_mini;//[Offset: 0x38, Size: 0x10]
	FString Icon_recruit;//[Offset: 0x48, Size: 0x10]
	int DefaultSelect;//[Offset: 0x58, Size: 0x4]
	bool IfMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	FString GuideVideoUrl;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_GameModeMain.SolarTableReaderBase.Object
	SolarTablesData_GameModeMain TryGetRowData(int Key, out bool HasKey);// 0x5071312cd041
	bool HasRowKey(int Key);// 0x5070312cd041
	bool HasColKey(FString Key);// 0x506f312cd041
	FString GetTableName();// 0x506e312cd041
	int GetRowKeys(out int[] OutKeys);// 0x506d312cd041
	SolarTablesData_GameModeMain GetRowData(int Key);// 0x506c312cd041
	int GetRowCount();// 0x506b312cd041
	int GetDataNum();// 0x506a312cd041
	FString[] GetColKeys();// 0x5069312cd041
	int GetColCount();// 0x5068312cd041

--------------------------------
Class: SolarTablesData_GameModeMain.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int groupid;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText Desc;//[Offset: 0x18, Size: 0x4]
	SolarTablesLocalText DetailDes;//[Offset: 0x1c, Size: 0x4]
	FString Icon;//[Offset: 0x20, Size: 0x10]
	FString Icon_s;//[Offset: 0x30, Size: 0x10]
	FString Icon_recruit;//[Offset: 0x40, Size: 0x10]
	FString Icon_mini;//[Offset: 0x50, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int ModeType;//[Offset: 0x64, Size: 0x4]
	int OutcomeSet;//[Offset: 0x68, Size: 0x4]
	int Lifetime;//[Offset: 0x6c, Size: 0x4]
	int[] AccessClient;//[Offset: 0x70, Size: 0x10]
	int[] AccessServer;//[Offset: 0x80, Size: 0x10]
	int[] AccessAccount;//[Offset: 0x90, Size: 0x10]
	int[] AccessActivity;//[Offset: 0xa0, Size: 0x10]
	int UnlockLvl;//[Offset: 0xb0, Size: 0x4]
	int[] MatchRule;//[Offset: 0xb8, Size: 0x10]
	int DefaultMatchRule;//[Offset: 0xc8, Size: 0x4]
	int Backpack;//[Offset: 0xcc, Size: 0x4]
	FString UIConfig;//[Offset: 0xd0, Size: 0x10]
	FString ModeConfig;//[Offset: 0xe0, Size: 0x10]
	FString Parameters;//[Offset: 0xf0, Size: 0x10]
	int DefaultSelect;//[Offset: 0x100, Size: 0x4]
	bool AIMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	FString SettlementBPPath;//[Offset: 0x108, Size: 0x10]
	bool ReEnterBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool IsAutoFillTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	int[] CustomRoomNum;//[Offset: 0x120, Size: 0x10]
	bool GetSupplyBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int ChunkID;//[Offset: 0x134, Size: 0x4]
	int[] ChunkIdList;//[Offset: 0x138, Size: 0x10]
	enum ClassModeType;//[Offset: 0x148, Size: 0x1]
	int CustomRoomName;//[Offset: 0x14c, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_BattleRoyaleMode.SolarTableReaderBase.Object
	SolarTablesData_BattleRoyaleMode TryGetRowData(int Key, out bool HasKey);// 0x4f6d312cd041
	bool HasRowKey(int Key);// 0x4f6c312cd041
	bool HasColKey(FString Key);// 0x4f6b312cd041
	FString GetTableName();// 0x4f6a312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f69312cd041
	SolarTablesData_BattleRoyaleMode GetRowData(int Key);// 0x4f68312cd041
	int GetRowCount();// 0x4f67312cd041
	int GetDataNum();// 0x4f66312cd041
	FString[] GetColKeys();// 0x4f65312cd041
	int GetColCount();// 0x4f64312cd041

--------------------------------
Class: SolarTablesData_BattleRoyaleMode.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] GlobalOutcomes;//[Offset: 0x10, Size: 0x10]
	int BattleMap;//[Offset: 0x20, Size: 0x4]
	int ReadyMap;//[Offset: 0x24, Size: 0x4]
	float ReadyStateTime;//[Offset: 0x28, Size: 0x4]
	int StartTime;//[Offset: 0x2c, Size: 0x4]
	float EenTime;//[Offset: 0x30, Size: 0x4]
	int CharacterEXPCoefficient;//[Offset: 0x34, Size: 0x4]
	FString[] EventSets;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_OutcomeSet.SolarTableReaderBase.Object
	SolarTablesData_OutcomeSet TryGetRowData(int Key, out bool HasKey);// 0x51bb312cd041
	bool HasRowKey(int Key);// 0x51ba312cd041
	bool HasColKey(FString Key);// 0x51b9312cd041
	FString GetTableName();// 0x51b8312cd041
	int GetRowKeys(out int[] OutKeys);// 0x51b7312cd041
	SolarTablesData_OutcomeSet GetRowData(int Key);// 0x51b6312cd041
	int GetRowCount();// 0x51b5312cd041
	int GetDataNum();// 0x51b4312cd041
	FString[] GetColKeys();// 0x51b3312cd041
	int GetColCount();// 0x51b2312cd041

--------------------------------
Class: SolarTablesData_OutcomeSet.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] OutcomeRef;//[Offset: 0x10, Size: 0x10]
	int[] GlobalOutcome;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_GameTimeLine.SolarTableReaderBase.Object
	SolarTablesData_GameTimeLine TryGetRowData(int Key, out bool HasKey);// 0x507b312cd041
	bool HasRowKey(int Key);// 0x507a312cd041
	bool HasColKey(FString Key);// 0x5079312cd041
	FString GetTableName();// 0x5078312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5077312cd041
	SolarTablesData_GameTimeLine GetRowData(int Key);// 0x5076312cd041
	int GetRowCount();// 0x5075312cd041
	int GetDataNum();// 0x5074312cd041
	FString[] GetColKeys();// 0x5073312cd041
	int GetColCount();// 0x5072312cd041

--------------------------------
Class: SolarTablesData_GameTimeLine.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] CheckEvent;//[Offset: 0x10, Size: 0x10]
	int GameMode;//[Offset: 0x20, Size: 0x4]
	int StartTime;//[Offset: 0x24, Size: 0x4]
	int DaylightChange;//[Offset: 0x28, Size: 0x4]
	int AirDrops;//[Offset: 0x2c, Size: 0x4]
	bool IfPoisonShrink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int[] RedZone;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_GlobalOutcome.SolarTableReaderBase.Object
	SolarTablesData_GlobalOutcome TryGetRowData(int Key, out bool HasKey);// 0x508f312cd041
	bool HasRowKey(int Key);// 0x508e312cd041
	bool HasColKey(FString Key);// 0x508d312cd041
	FString GetTableName();// 0x508c312cd041
	int GetRowKeys(out int[] OutKeys);// 0x508b312cd041
	SolarTablesData_GlobalOutcome GetRowData(int Key);// 0x508a312cd041
	int GetRowCount();// 0x5089312cd041
	int GetDataNum();// 0x5088312cd041
	FString[] GetColKeys();// 0x5087312cd041
	int GetColCount();// 0x5086312cd041

--------------------------------
Class: SolarTablesData_GlobalOutcome.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ItemIDs;//[Offset: 0x10, Size: 0x10]
	int[] ItemNums;//[Offset: 0x20, Size: 0x10]
	int SingleMaxTimes;//[Offset: 0x30, Size: 0x4]
	int TotalMaxTimes;//[Offset: 0x34, Size: 0x4]
	int TotalMinTimes;//[Offset: 0x38, Size: 0x4]
	int[] AffectedOutcomes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_GlobalSensitivity.SolarTableReaderBase.Object
	SolarTablesData_GlobalSensitivity TryGetRowData(int Key, out bool HasKey);// 0x5099312cd041
	bool HasRowKey(int Key);// 0x5098312cd041
	bool HasColKey(FString Key);// 0x5097312cd041
	FString GetTableName();// 0x5096312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5095312cd041
	SolarTablesData_GlobalSensitivity GetRowData(int Key);// 0x5094312cd041
	int GetRowCount();// 0x5093312cd041
	int GetDataNum();// 0x5092312cd041
	FString[] GetColKeys();// 0x5091312cd041
	int GetColCount();// 0x5090312cd041

--------------------------------
Class: SolarTablesData_GlobalSensitivity.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float[] HoldWeaponSensitivity;//[Offset: 0x10, Size: 0x10]
	float[] FireWeaponSensitivity;//[Offset: 0x20, Size: 0x10]
	float ShoulderShootSenSItivity;//[Offset: 0x30, Size: 0x4]
	float ShoulderShootFireSenSItivity;//[Offset: 0x34, Size: 0x4]
	float[] SkillSensitivity;//[Offset: 0x38, Size: 0x10]
	float[] SightSensitivity;//[Offset: 0x48, Size: 0x10]
	float[] VehicleDriverSensitivity;//[Offset: 0x58, Size: 0x10]
	float[] VehicleFireSensitivity;//[Offset: 0x68, Size: 0x10]
	float[] SuperSkillSensitivity;//[Offset: 0x78, Size: 0x10]
	float[] TacticalSkillSensitivity;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_InputMapping.SolarTableReaderBase.Object
	SolarTablesData_InputMapping TryGetRowData(FString Key, out bool HasKey);// 0x50b7312cd041
	bool HasRowKey(FString Key);// 0x50b6312cd041
	bool HasColKey(FString Key);// 0x50b5312cd041
	FString GetTableName();// 0x50b4312cd041
	int GetRowKeys(out FString[] OutKeys);// 0x50b3312cd041
	SolarTablesData_InputMapping GetRowData(FString Key);// 0x50b2312cd041
	int GetRowCount();// 0x50b1312cd041
	int GetDataNum();// 0x50b0312cd041
	FString[] GetColKeys();// 0x50af312cd041
	int GetColCount();// 0x50ae312cd041

--------------------------------
Class: SolarTablesData_InputMapping.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	FString ActionName;//[Offset: 0x20, Size: 0x10]
	enum ActionType;//[Offset: 0x30, Size: 0x1]
	float Scale;//[Offset: 0x34, Size: 0x4]
	FString FirstDefaultKeys;//[Offset: 0x38, Size: 0x10]
	FString SecondDefaultKeys;//[Offset: 0x48, Size: 0x10]
	FString ThirdDefaultKeys;//[Offset: 0x58, Size: 0x10]
	enum CtrlType;//[Offset: 0x68, Size: 0x1]
	enum ContextType;//[Offset: 0x69, Size: 0x1]
	enum RelatedType;//[Offset: 0x6a, Size: 0x1]
	SolarTablesLocalText ActionDisplayName;//[Offset: 0x6c, Size: 0x4]
	SolarTablesLocalText ActionTipsDesc;//[Offset: 0x70, Size: 0x4]
	enum TabType;//[Offset: 0x74, Size: 0x1]
	int GroupIndex;//[Offset: 0x78, Size: 0x4]
	SolarTablesLocalText GroupTitle;//[Offset: 0x7c, Size: 0x4]
	enum GroupType;//[Offset: 0x80, Size: 0x1]
	int GroupPriority;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_InputAction.SolarTableReaderBase.Object
	SolarTablesData_InputAction TryGetRowData(FString Key, out bool HasKey);// 0x50ad312cd041
	bool HasRowKey(FString Key);// 0x50ac312cd041
	bool HasColKey(FString Key);// 0x50ab312cd041
	FString GetTableName();// 0x50aa312cd041
	int GetRowKeys(out FString[] OutKeys);// 0x50a9312cd041
	SolarTablesData_InputAction GetRowData(FString Key);// 0x50a8312cd041
	int GetRowCount();// 0x50a7312cd041
	int GetDataNum();// 0x50a6312cd041
	FString[] GetColKeys();// 0x50a5312cd041
	int GetColCount();// 0x50a4312cd041

--------------------------------
Class: SolarTablesData_InputAction.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	bool bFlagBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bFlagBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool bFlagChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	bool bFlagParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]
	bool bFlagSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: SolarTables_Reader_Item.SolarTableReaderBase.Object
	SolarTablesData_Item TryGetRowData(int Key, out bool HasKey);// 0x50c1312cd041
	bool HasRowKey(int Key);// 0x50c0312cd041
	bool HasColKey(FString Key);// 0x50bf312cd041
	FString GetTableName();// 0x50be312cd041
	int GetRowKeys(out int[] OutKeys);// 0x50bd312cd041
	SolarTablesData_Item GetRowData(int Key);// 0x50bc312cd041
	int GetRowCount();// 0x50bb312cd041
	int GetDataNum();// 0x50ba312cd041
	FString[] GetColKeys();// 0x50b9312cd041
	int GetColCount();// 0x50b8312cd041

--------------------------------
Class: SolarTablesData_Item.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]

--------------------------------
Class: SolarTables_Reader_GunProperty.SolarTableReaderBase.Object
	SolarTablesData_GunProperty TryGetRowData(int Key, out bool HasKey);// 0x50a3312cd041
	bool HasRowKey(int Key);// 0x50a2312cd041
	bool HasColKey(FString Key);// 0x50a1312cd041
	FString GetTableName();// 0x50a0312cd041
	int GetRowKeys(out int[] OutKeys);// 0x509f312cd041
	SolarTablesData_GunProperty GetRowData(int Key);// 0x509e312cd041
	int GetRowCount();// 0x509d312cd041
	int GetDataNum();// 0x509c312cd041
	FString[] GetColKeys();// 0x509b312cd041
	int GetColCount();// 0x509a312cd041

--------------------------------
Class: SolarTablesData_GunProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	int weaponid;//[Offset: 0x78, Size: 0x4]
	FString BigIcon;//[Offset: 0x80, Size: 0x10]
	int WeaponLv;//[Offset: 0x90, Size: 0x4]
	bool UseWeaponAccessory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	int WeaponAccessory1;//[Offset: 0x98, Size: 0x4]
	int WeaponAccessory2;//[Offset: 0x9c, Size: 0x4]
	int WeaponAccessory3;//[Offset: 0xa0, Size: 0x4]
	int WeaponAccessory4;//[Offset: 0xa4, Size: 0x4]
	int WeaponAccessory5;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_ArmorProperty.SolarTableReaderBase.Object
	SolarTablesData_ArmorProperty TryGetRowData(int Key, out bool HasKey);// 0x4f3b312cd041
	bool HasRowKey(int Key);// 0x4f3a312cd041
	bool HasColKey(FString Key);// 0x4f39312cd041
	FString GetTableName();// 0x4f38312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f37312cd041
	SolarTablesData_ArmorProperty GetRowData(int Key);// 0x4f36312cd041
	int GetRowCount();// 0x4f35312cd041
	int GetDataNum();// 0x4f34312cd041
	FString[] GetColKeys();// 0x4f33312cd041
	int GetColCount();// 0x4f32312cd041

--------------------------------
Class: SolarTablesData_ArmorProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	float MaxValue;//[Offset: 0x78, Size: 0x4]
	float RecoverySpeed;//[Offset: 0x7c, Size: 0x4]
	float EnergyCost;//[Offset: 0x80, Size: 0x4]
	float MaterialCost;//[Offset: 0x84, Size: 0x4]
	float MinMaterialCost;//[Offset: 0x88, Size: 0x4]
	int ArmorWorth;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_BackpackProperty.SolarTableReaderBase.Object
	SolarTablesData_BackpackProperty TryGetRowData(int Key, out bool HasKey);// 0x4f4f312cd041
	bool HasRowKey(int Key);// 0x4f4e312cd041
	bool HasColKey(FString Key);// 0x4f4d312cd041
	FString GetTableName();// 0x4f4c312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f4b312cd041
	SolarTablesData_BackpackProperty GetRowData(int Key);// 0x4f4a312cd041
	int GetRowCount();// 0x4f49312cd041
	int GetDataNum();// 0x4f48312cd041
	FString[] GetColKeys();// 0x4f47312cd041
	int GetColCount();// 0x4f46312cd041

--------------------------------
Class: SolarTablesData_BackpackProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	FString BackpackMeshPath;//[Offset: 0x78, Size: 0x10]
	FString PreviewBpPath;//[Offset: 0x88, Size: 0x10]
	int StartFrame;//[Offset: 0x98, Size: 0x4]
	int EndFrame;//[Offset: 0x9c, Size: 0x4]
	float Length;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_BackpackTrailProperty.SolarTableReaderBase.Object
	SolarTablesData_BackpackTrailProperty TryGetRowData(int Key, out bool HasKey);// 0x4f59312cd041
	bool HasRowKey(int Key);// 0x4f58312cd041
	bool HasColKey(FString Key);// 0x4f57312cd041
	FString GetTableName();// 0x4f56312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f55312cd041
	SolarTablesData_BackpackTrailProperty GetRowData(int Key);// 0x4f54312cd041
	int GetRowCount();// 0x4f53312cd041
	int GetDataNum();// 0x4f52312cd041
	FString[] GetColKeys();// 0x4f51312cd041
	int GetColCount();// 0x4f50312cd041

--------------------------------
Class: SolarTablesData_BackpackTrailProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	FString BackpackTrailPath;//[Offset: 0x78, Size: 0x10]
	FString PreviewTrailPath;//[Offset: 0x88, Size: 0x10]
	FString BackpackOffgasPath;//[Offset: 0x98, Size: 0x10]
	FString AssemblingId;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_CapsuleProperty.SolarTableReaderBase.Object
	SolarTablesData_CapsuleProperty TryGetRowData(int Key, out bool HasKey);// 0x4fa9312cd041
	bool HasRowKey(int Key);// 0x4fa8312cd041
	bool HasColKey(FString Key);// 0x4fa7312cd041
	FString GetTableName();// 0x4fa6312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4fa5312cd041
	SolarTablesData_CapsuleProperty GetRowData(int Key);// 0x4fa4312cd041
	int GetRowCount();// 0x4fa3312cd041
	int GetDataNum();// 0x4fa2312cd041
	FString[] GetColKeys();// 0x4fa1312cd041
	int GetColCount();// 0x4fa0312cd041

--------------------------------
Class: SolarTablesData_CapsuleProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	FString CapsuleBPPath;//[Offset: 0x78, Size: 0x10]
	FString PreviewBpPath;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_Chest.SolarTableReaderBase.Object
	SolarTablesData_Chest TryGetRowData(int Key, out bool HasKey);// 0x4fd1312cd041
	bool HasRowKey(int Key);// 0x4fd0312cd041
	bool HasColKey(FString Key);// 0x4fcf312cd041
	FString GetTableName();// 0x4fce312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4fcd312cd041
	SolarTablesData_Chest GetRowData(int Key);// 0x4fcc312cd041
	int GetRowCount();// 0x4fcb312cd041
	int GetDataNum();// 0x4fca312cd041
	FString[] GetColKeys();// 0x4fc9312cd041
	int GetColCount();// 0x4fc8312cd041

--------------------------------
Class: SolarTablesData_Chest.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	int openType;//[Offset: 0x78, Size: 0x4]
	int CostQuantity;//[Offset: 0x7c, Size: 0x4]
	int CostType;//[Offset: 0x80, Size: 0x4]
	int OpenTime;//[Offset: 0x84, Size: 0x4]
	int Drop;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_Emote.SolarTableReaderBase.Object
	SolarTablesData_Emote TryGetRowData(int Key, out bool HasKey);// 0x5003312cd041
	bool HasRowKey(int Key);// 0x5002312cd041
	bool HasColKey(FString Key);// 0x5001312cd041
	FString GetTableName();// 0x5000312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4fff312cd041
	SolarTablesData_Emote GetRowData(int Key);// 0x4ffe312cd041
	int GetRowCount();// 0x4ffd312cd041
	int GetDataNum();// 0x4ffc312cd041
	FString[] GetColKeys();// 0x4ffb312cd041
	int GetColCount();// 0x4ffa312cd041

--------------------------------
Class: SolarTablesData_Emote.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	int EmoteType;//[Offset: 0x78, Size: 0x4]
	FString EmoteBlueprintPath;//[Offset: 0x80, Size: 0x10]
	FString EmoteResourcePath;//[Offset: 0x90, Size: 0x10]
	float EmoteDuration;//[Offset: 0xa0, Size: 0x4]
	FString EmoteAppearSound;//[Offset: 0xa8, Size: 0x10]
	FString EmoteSound;//[Offset: 0xb8, Size: 0x10]
	int ShopID;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_EnergyProperty.SolarTableReaderBase.Object
	SolarTablesData_EnergyProperty TryGetRowData(int Key, out bool HasKey);// 0x500d312cd041
	bool HasRowKey(int Key);// 0x500c312cd041
	bool HasColKey(FString Key);// 0x500b312cd041
	FString GetTableName();// 0x500a312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5009312cd041
	SolarTablesData_EnergyProperty GetRowData(int Key);// 0x5008312cd041
	int GetRowCount();// 0x5007312cd041
	int GetDataNum();// 0x5006312cd041
	FString[] GetColKeys();// 0x5005312cd041
	int GetColCount();// 0x5004312cd041

--------------------------------
Class: SolarTablesData_EnergyProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	float AddedEnergyMax;//[Offset: 0x78, Size: 0x4]
	int EnergyModuleWorth;//[Offset: 0x7c, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_ExtraEnergyProperty.SolarTableReaderBase.Object
	SolarTablesData_ExtraEnergyProperty TryGetRowData(int Key, out bool HasKey);// 0x5053312cd041
	bool HasRowKey(int Key);// 0x5052312cd041
	bool HasColKey(FString Key);// 0x5051312cd041
	FString GetTableName();// 0x5050312cd041
	int GetRowKeys(out int[] OutKeys);// 0x504f312cd041
	SolarTablesData_ExtraEnergyProperty GetRowData(int Key);// 0x504e312cd041
	int GetRowCount();// 0x504d312cd041
	int GetDataNum();// 0x504c312cd041
	FString[] GetColKeys();// 0x504b312cd041
	int GetColCount();// 0x504a312cd041

--------------------------------
Class: SolarTablesData_ExtraEnergyProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	int QualityColor;//[Offset: 0x78, Size: 0x4]
	float ExtraEnergyMax;//[Offset: 0x7c, Size: 0x4]
	float ExtraEnergyCharge;//[Offset: 0x80, Size: 0x4]
	float ChargeCD;//[Offset: 0x84, Size: 0x4]
	int ExtraEnergyWorth;//[Offset: 0x88, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0x8c, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x90, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0x94, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0x98, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0x9c, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0xa0, Size: 0x4]
	FString Sketch;//[Offset: 0xa8, Size: 0x10]
	int SketchLevel;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_ItemWeaponParts.SolarTableReaderBase.Object
	SolarTablesData_ItemWeaponParts TryGetRowData(int Key, out bool HasKey);// 0x50f3312cd041
	bool HasRowKey(int Key);// 0x50f2312cd041
	bool HasColKey(FString Key);// 0x50f1312cd041
	FString GetTableName();// 0x50f0312cd041
	int GetRowKeys(out int[] OutKeys);// 0x50ef312cd041
	SolarTablesData_ItemWeaponParts GetRowData(int Key);// 0x50ee312cd041
	int GetRowCount();// 0x50ed312cd041
	int GetDataNum();// 0x50ec312cd041
	FString[] GetColKeys();// 0x50eb312cd041
	int GetColCount();// 0x50ea312cd041

--------------------------------
Class: SolarTablesData_ItemWeaponParts.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	int PartsType;//[Offset: 0x78, Size: 0x4]
	int Level;//[Offset: 0x7c, Size: 0x4]
	FString PreviewIcon;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_ItemBehavior.SolarTableReaderBase.Object
	SolarTablesData_ItemBehavior TryGetRowData(int Key, out bool HasKey);// 0x50cb312cd041
	bool HasRowKey(int Key);// 0x50ca312cd041
	bool HasColKey(FString Key);// 0x50c9312cd041
	FString GetTableName();// 0x50c8312cd041
	int GetRowKeys(out int[] OutKeys);// 0x50c7312cd041
	SolarTablesData_ItemBehavior GetRowData(int Key);// 0x50c6312cd041
	int GetRowCount();// 0x50c5312cd041
	int GetDataNum();// 0x50c4312cd041
	FString[] GetColKeys();// 0x50c3312cd041
	int GetColCount();// 0x50c2312cd041

--------------------------------
Class: SolarTablesData_ItemBehavior.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	int BehaviorExpID;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_JetPackModuleProperty.SolarTableReaderBase.Object
	SolarTablesData_JetPackModuleProperty TryGetRowData(int Key, out bool HasKey);// 0x50fd312cd041
	bool HasRowKey(int Key);// 0x50fc312cd041
	bool HasColKey(FString Key);// 0x50fb312cd041
	FString GetTableName();// 0x50fa312cd041
	int GetRowKeys(out int[] OutKeys);// 0x50f9312cd041
	SolarTablesData_JetPackModuleProperty GetRowData(int Key);// 0x50f8312cd041
	int GetRowCount();// 0x50f7312cd041
	int GetDataNum();// 0x50f6312cd041
	FString[] GetColKeys();// 0x50f5312cd041
	int GetColCount();// 0x50f4312cd041

--------------------------------
Class: SolarTablesData_JetPackModuleProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	int VerticalDashSpeedTimes;//[Offset: 0x78, Size: 0x4]
	int HorizontalDashSpeedTimes;//[Offset: 0x7c, Size: 0x4]
	float VerticalDashSpeedScale;//[Offset: 0x80, Size: 0x4]
	float HorizontalDashSpeedScale;//[Offset: 0x84, Size: 0x4]
	float VerticalDashCoolDownScale;//[Offset: 0x88, Size: 0x4]
	float HorizontalDashCoolDownScale;//[Offset: 0x8c, Size: 0x4]
	float VerticalDashEnergyScale;//[Offset: 0x90, Size: 0x4]
	float HorizontalDashEnergyScale;//[Offset: 0x94, Size: 0x4]
	float VerticalChargingScale;//[Offset: 0x98, Size: 0x4]
	float HorizontalChargingScale;//[Offset: 0x9c, Size: 0x4]
	int JetPackModuleWorth;//[Offset: 0xa0, Size: 0x4]
	FString Sketch;//[Offset: 0xa8, Size: 0x10]
	int SketchLevel;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_MaterialProperty.SolarTableReaderBase.Object
	SolarTablesData_MaterialProperty TryGetRowData(int Key, out bool HasKey);// 0x517f312cd041
	bool HasRowKey(int Key);// 0x517e312cd041
	bool HasColKey(FString Key);// 0x517d312cd041
	FString GetTableName();// 0x517c312cd041
	int GetRowKeys(out int[] OutKeys);// 0x517b312cd041
	SolarTablesData_MaterialProperty GetRowData(int Key);// 0x517a312cd041
	int GetRowCount();// 0x5179312cd041
	int GetDataNum();// 0x5178312cd041
	FString[] GetColKeys();// 0x5177312cd041
	int GetColCount();// 0x5176312cd041

--------------------------------
Class: SolarTablesData_MaterialProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	int Prize;//[Offset: 0x78, Size: 0x4]
	bool IfCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	int Level;//[Offset: 0x80, Size: 0x4]
	SolarTablesLocalText CoverName;//[Offset: 0x84, Size: 0x4]
	int Substitution;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_ShieldProperty.SolarTableReaderBase.Object
	SolarTablesData_ShieldProperty TryGetRowData(int Key, out bool HasKey);// 0x521f312cd041
	bool HasRowKey(int Key);// 0x521e312cd041
	bool HasColKey(FString Key);// 0x521d312cd041
	FString GetTableName();// 0x521c312cd041
	int GetRowKeys(out int[] OutKeys);// 0x521b312cd041
	SolarTablesData_ShieldProperty GetRowData(int Key);// 0x521a312cd041
	int GetRowCount();// 0x5219312cd041
	int GetDataNum();// 0x5218312cd041
	FString[] GetColKeys();// 0x5217312cd041
	int GetColCount();// 0x5216312cd041

--------------------------------
Class: SolarTablesData_ShieldProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	float MaxValue;//[Offset: 0x78, Size: 0x4]
	float RecoverySpeed;//[Offset: 0x7c, Size: 0x4]
	float EnergyCost;//[Offset: 0x80, Size: 0x4]
	int CoolDownTime;//[Offset: 0x84, Size: 0x4]
	float RecoveryDuration;//[Offset: 0x88, Size: 0x4]
	float RecoveryDurationB;//[Offset: 0x8c, Size: 0x4]
	float RecoveryAmount;//[Offset: 0x90, Size: 0x4]
	float EnergyConsumption;//[Offset: 0x94, Size: 0x4]
	int ShieldWorth;//[Offset: 0x98, Size: 0x4]
	FString Sketch;//[Offset: 0xa0, Size: 0x10]
	int SketchLevel;//[Offset: 0xb0, Size: 0x4]
	int QualityColor;//[Offset: 0xb4, Size: 0x4]
	int AutoRecharge;//[Offset: 0xb8, Size: 0x4]
	float LeaveCombatTime;//[Offset: 0xbc, Size: 0x4]
	float AutoRechargeInterval;//[Offset: 0xc0, Size: 0x4]
	float AutoRechargeValue;//[Offset: 0xc4, Size: 0x4]
	int NextUpgradeCost;//[Offset: 0xc8, Size: 0x4]
	int NextUpgradeItemID;//[Offset: 0xcc, Size: 0x4]
	int UpgradeItemCost;//[Offset: 0xd0, Size: 0x4]
	float UpgradeTimeCost;//[Offset: 0xd4, Size: 0x4]
	float ShieldRechargeDelayTime;//[Offset: 0xd8, Size: 0x4]
	float ShieldRecoveryTime;//[Offset: 0xdc, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_VehicleSkinProperty.SolarTableReaderBase.Object
	SolarTablesData_VehicleSkinProperty TryGetRowData(int Key, out bool HasKey);// 0x526f312cd041
	bool HasRowKey(int Key);// 0x526e312cd041
	bool HasColKey(FString Key);// 0x526d312cd041
	FString GetTableName();// 0x526c312cd041
	int GetRowKeys(out int[] OutKeys);// 0x526b312cd041
	SolarTablesData_VehicleSkinProperty GetRowData(int Key);// 0x526a312cd041
	int GetRowCount();// 0x5269312cd041
	int GetDataNum();// 0x5268312cd041
	FString[] GetColKeys();// 0x5267312cd041
	int GetColCount();// 0x5266312cd041

--------------------------------
Class: SolarTablesData_VehicleSkinProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	int VehicleSkinId;//[Offset: 0x78, Size: 0x4]
	int VehicleSkinAquiredThre;//[Offset: 0x7c, Size: 0x4]
	int JumpPage;//[Offset: 0x80, Size: 0x4]
	FString KillBroadcast;//[Offset: 0x88, Size: 0x10]
	bool DisplayInVehiclery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: SolarTables_Reader_WeaponSkinProperty.SolarTableReaderBase.Object
	SolarTablesData_WeaponSkinProperty TryGetRowData(int Key, out bool HasKey);// 0x5319312cd041
	bool HasRowKey(int Key);// 0x5318312cd041
	bool HasColKey(FString Key);// 0x5317312cd041
	FString GetTableName();// 0x5316312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5315312cd041
	SolarTablesData_WeaponSkinProperty GetRowData(int Key);// 0x5314312cd041
	int GetRowCount();// 0x5313312cd041
	int GetDataNum();// 0x5312312cd041
	FString[] GetColKeys();// 0x5311312cd041
	int GetColCount();// 0x5310312cd041

--------------------------------
Class: SolarTablesData_WeaponSkinProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	int Pile;//[Offset: 0x3c, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool defaultItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	enum StackType;//[Offset: 0x75, Size: 0x1]
	int WeaponSkinID;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_ItemCustomType.SolarTableReaderBase.Object
	SolarTablesData_ItemCustomType TryGetRowData(int Key, out bool HasKey);// 0x50d5312cd041
	bool HasRowKey(int Key);// 0x50d4312cd041
	bool HasColKey(FString Key);// 0x50d3312cd041
	FString GetTableName();// 0x50d2312cd041
	int GetRowKeys(out int[] OutKeys);// 0x50d1312cd041
	SolarTablesData_ItemCustomType GetRowData(int Key);// 0x50d0312cd041
	int GetRowCount();// 0x50cf312cd041
	int GetDataNum();// 0x50ce312cd041
	FString[] GetColKeys();// 0x50cd312cd041
	int GetColCount();// 0x50cc312cd041

--------------------------------
Class: SolarTablesData_ItemCustomType.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ItemIDs;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_ItemQuality.SolarTableReaderBase.Object
	SolarTablesData_ItemQuality TryGetRowData(int Key, out bool HasKey);// 0x50df312cd041
	bool HasRowKey(int Key);// 0x50de312cd041
	bool HasColKey(FString Key);// 0x50dd312cd041
	FString GetTableName();// 0x50dc312cd041
	int GetRowKeys(out int[] OutKeys);// 0x50db312cd041
	SolarTablesData_ItemQuality GetRowData(int Key);// 0x50da312cd041
	int GetRowCount();// 0x50d9312cd041
	int GetDataNum();// 0x50d8312cd041
	FString[] GetColKeys();// 0x50d7312cd041
	int GetColCount();// 0x50d6312cd041

--------------------------------
Class: SolarTablesData_ItemQuality.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float[] Color;//[Offset: 0x10, Size: 0x10]
	float[] HUDColor;//[Offset: 0x20, Size: 0x10]
	float[] OutsideColor;//[Offset: 0x30, Size: 0x10]
	float[] InsideColor;//[Offset: 0x40, Size: 0x10]
	float[] HighQualityColor;//[Offset: 0x50, Size: 0x10]
	float[] LowQualityColor;//[Offset: 0x60, Size: 0x10]
	float[] HUDBGColor;//[Offset: 0x70, Size: 0x10]
	float[] HUDDecorateColor;//[Offset: 0x80, Size: 0x10]
	FString Qualitypic;//[Offset: 0x90, Size: 0x10]
	FString QualityColor;//[Offset: 0xa0, Size: 0x10]
	FString Qualitystr;//[Offset: 0xb0, Size: 0x10]
	FString QualityBG;//[Offset: 0xc0, Size: 0x10]
	FString QualityBG2;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_ItemSound.SolarTableReaderBase.Object
	SolarTablesData_ItemSound TryGetRowData(int Key, out bool HasKey);// 0x50e9312cd041
	bool HasRowKey(int Key);// 0x50e8312cd041
	bool HasColKey(FString Key);// 0x50e7312cd041
	FString GetTableName();// 0x50e6312cd041
	int GetRowKeys(out int[] OutKeys);// 0x50e5312cd041
	SolarTablesData_ItemSound GetRowData(int Key);// 0x50e4312cd041
	int GetRowCount();// 0x50e3312cd041
	int GetDataNum();// 0x50e2312cd041
	FString[] GetColKeys();// 0x50e1312cd041
	int GetColCount();// 0x50e0312cd041

--------------------------------
Class: SolarTablesData_ItemSound.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString PickupSound;//[Offset: 0x10, Size: 0x10]
	FString EquippedSound;//[Offset: 0x20, Size: 0x10]
	FString PassiveSound;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_LobbyAutoDownload.SolarTableReaderBase.Object
	SolarTablesData_LobbyAutoDownload TryGetRowData(int Key, out bool HasKey);// 0x5111312cd041
	bool HasRowKey(int Key);// 0x5110312cd041
	bool HasColKey(FString Key);// 0x510f312cd041
	FString GetTableName();// 0x510e312cd041
	int GetRowKeys(out int[] OutKeys);// 0x510d312cd041
	SolarTablesData_LobbyAutoDownload GetRowData(int Key);// 0x510c312cd041
	int GetRowCount();// 0x510b312cd041
	int GetDataNum();// 0x510a312cd041
	FString[] GetColKeys();// 0x5109312cd041
	int GetColCount();// 0x5108312cd041

--------------------------------
Class: SolarTablesData_LobbyAutoDownload.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ChunkID;//[Offset: 0x10, Size: 0x4]
	int ChunkName;//[Offset: 0x14, Size: 0x4]
	bool IncludeMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool IncludeOptional;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: SolarTables_Reader_Localization.SolarTableReaderBase.Object
	SolarTablesData_Localization TryGetRowData(int Key, out bool HasKey);// 0x511b312cd041
	bool HasRowKey(int Key);// 0x511a312cd041
	bool HasColKey(FString Key);// 0x5119312cd041
	FString GetTableName();// 0x5118312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5117312cd041
	SolarTablesData_Localization GetRowData(int Key);// 0x5116312cd041
	int GetRowCount();// 0x5115312cd041
	int GetDataNum();// 0x5114312cd041
	FString[] GetColKeys();// 0x5113312cd041
	int GetColCount();// 0x5112312cd041

--------------------------------
Class: SolarTablesData_Localization.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_LanguageSwitcher.SolarTableReaderBase.Object
	SolarTablesData_LanguageSwitcher TryGetRowData(FString Key, out bool HasKey);// 0x5107312cd041
	bool HasRowKey(FString Key);// 0x5106312cd041
	bool HasColKey(FString Key);// 0x5105312cd041
	FString GetTableName();// 0x5104312cd041
	int GetRowKeys(out FString[] OutKeys);// 0x5103312cd041
	SolarTablesData_LanguageSwitcher GetRowData(FString Key);// 0x5102312cd041
	int GetRowCount();// 0x5101312cd041
	int GetDataNum();// 0x5100312cd041
	FString[] GetColKeys();// 0x50ff312cd041
	int GetColCount();// 0x50fe312cd041

--------------------------------
Class: SolarTablesData_LanguageSwitcher.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	FString ButtonText;//[Offset: 0x20, Size: 0x10]
	bool IfOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int LanguageIndex;//[Offset: 0x34, Size: 0x4]
	FString MarqueeDirection;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_Localization_BattleUI.SolarTableReaderBase.Object
	SolarTablesData_Localization_BattleUI TryGetRowData(int Key, out bool HasKey);// 0x5125312cd041
	bool HasRowKey(int Key);// 0x5124312cd041
	bool HasColKey(FString Key);// 0x5123312cd041
	FString GetTableName();// 0x5122312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5121312cd041
	SolarTablesData_Localization_BattleUI GetRowData(int Key);// 0x5120312cd041
	int GetRowCount();// 0x511f312cd041
	int GetDataNum();// 0x511e312cd041
	FString[] GetColKeys();// 0x511d312cd041
	int GetColCount();// 0x511c312cd041

--------------------------------
Class: SolarTablesData_Localization_BattleUI.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_Localization_EventSystem.SolarTableReaderBase.Object
	SolarTablesData_Localization_EventSystem TryGetRowData(int Key, out bool HasKey);// 0x512f312cd041
	bool HasRowKey(int Key);// 0x512e312cd041
	bool HasColKey(FString Key);// 0x512d312cd041
	FString GetTableName();// 0x512c312cd041
	int GetRowKeys(out int[] OutKeys);// 0x512b312cd041
	SolarTablesData_Localization_EventSystem GetRowData(int Key);// 0x512a312cd041
	int GetRowCount();// 0x5129312cd041
	int GetDataNum();// 0x5128312cd041
	FString[] GetColKeys();// 0x5127312cd041
	int GetColCount();// 0x5126312cd041

--------------------------------
Class: SolarTablesData_Localization_EventSystem.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_Localization_General.SolarTableReaderBase.Object
	SolarTablesData_Localization_General TryGetRowData(int Key, out bool HasKey);// 0x5139312cd041
	bool HasRowKey(int Key);// 0x5138312cd041
	bool HasColKey(FString Key);// 0x5137312cd041
	FString GetTableName();// 0x5136312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5135312cd041
	SolarTablesData_Localization_General GetRowData(int Key);// 0x5134312cd041
	int GetRowCount();// 0x5133312cd041
	int GetDataNum();// 0x5132312cd041
	FString[] GetColKeys();// 0x5131312cd041
	int GetColCount();// 0x5130312cd041

--------------------------------
Class: SolarTablesData_Localization_General.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_Localization_Heroes.SolarTableReaderBase.Object
	SolarTablesData_Localization_Heroes TryGetRowData(int Key, out bool HasKey);// 0x5143312cd041
	bool HasRowKey(int Key);// 0x5142312cd041
	bool HasColKey(FString Key);// 0x5141312cd041
	FString GetTableName();// 0x5140312cd041
	int GetRowKeys(out int[] OutKeys);// 0x513f312cd041
	SolarTablesData_Localization_Heroes GetRowData(int Key);// 0x513e312cd041
	int GetRowCount();// 0x513d312cd041
	int GetDataNum();// 0x513c312cd041
	FString[] GetColKeys();// 0x513b312cd041
	int GetColCount();// 0x513a312cd041

--------------------------------
Class: SolarTablesData_Localization_Heroes.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_Localization_Item.SolarTableReaderBase.Object
	SolarTablesData_Localization_Item TryGetRowData(int Key, out bool HasKey);// 0x514d312cd041
	bool HasRowKey(int Key);// 0x514c312cd041
	bool HasColKey(FString Key);// 0x514b312cd041
	FString GetTableName();// 0x514a312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5149312cd041
	SolarTablesData_Localization_Item GetRowData(int Key);// 0x5148312cd041
	int GetRowCount();// 0x5147312cd041
	int GetDataNum();// 0x5146312cd041
	FString[] GetColKeys();// 0x5145312cd041
	int GetColCount();// 0x5144312cd041

--------------------------------
Class: SolarTablesData_Localization_Item.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_Localization_Tournament.SolarTableReaderBase.Object
	SolarTablesData_Localization_Tournament TryGetRowData(int Key, out bool HasKey);// 0x5157312cd041
	bool HasRowKey(int Key);// 0x5156312cd041
	bool HasColKey(FString Key);// 0x5155312cd041
	FString GetTableName();// 0x5154312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5153312cd041
	SolarTablesData_Localization_Tournament GetRowData(int Key);// 0x5152312cd041
	int GetRowCount();// 0x5151312cd041
	int GetDataNum();// 0x5150312cd041
	FString[] GetColKeys();// 0x514f312cd041
	int GetColCount();// 0x514e312cd041

--------------------------------
Class: SolarTablesData_Localization_Tournament.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_Localization_Uncategorized.SolarTableReaderBase.Object
	SolarTablesData_Localization_Uncategorized TryGetRowData(int Key, out bool HasKey);// 0x5161312cd041
	bool HasRowKey(int Key);// 0x5160312cd041
	bool HasColKey(FString Key);// 0x515f312cd041
	FString GetTableName();// 0x515e312cd041
	int GetRowKeys(out int[] OutKeys);// 0x515d312cd041
	SolarTablesData_Localization_Uncategorized GetRowData(int Key);// 0x515c312cd041
	int GetRowCount();// 0x515b312cd041
	int GetDataNum();// 0x515a312cd041
	FString[] GetColKeys();// 0x5159312cd041
	int GetColCount();// 0x5158312cd041

--------------------------------
Class: SolarTablesData_Localization_Uncategorized.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_GameMap.SolarTableReaderBase.Object
	SolarTablesData_GameMap TryGetRowData(int Key, out bool HasKey);// 0x505d312cd041
	bool HasRowKey(int Key);// 0x505c312cd041
	bool HasColKey(FString Key);// 0x505b312cd041
	FString GetTableName();// 0x505a312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5059312cd041
	SolarTablesData_GameMap GetRowData(int Key);// 0x5058312cd041
	int GetRowCount();// 0x5057312cd041
	int GetDataNum();// 0x5056312cd041
	FString[] GetColKeys();// 0x5055312cd041
	int GetColCount();// 0x5054312cd041

--------------------------------
Class: SolarTablesData_GameMap.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString MapName;//[Offset: 0x18, Size: 0x10]
	FString ResPath;//[Offset: 0x28, Size: 0x10]
	int MapImage;//[Offset: 0x38, Size: 0x4]
	float[] MapImageSize;//[Offset: 0x40, Size: 0x10]
	float[] MapTopLeftCoord;//[Offset: 0x50, Size: 0x10]
	float[] MapRightBottomCoord;//[Offset: 0x60, Size: 0x10]
	int[] LocationIcon;//[Offset: 0x70, Size: 0x10]
	FString[] ItemSubLevels;//[Offset: 0x80, Size: 0x10]
	float HorizonLineZ;//[Offset: 0x90, Size: 0x4]
	float TopZ;//[Offset: 0x94, Size: 0x4]
	float BottomZ;//[Offset: 0x98, Size: 0x4]
	float AverageZ;//[Offset: 0x9c, Size: 0x4]
	float InitFogZ;//[Offset: 0xa0, Size: 0x4]
	float TargetFogZ;//[Offset: 0xa4, Size: 0x4]
	float MapFOV;//[Offset: 0xa8, Size: 0x4]
	int Speed1;//[Offset: 0xac, Size: 0x4]
	int Speed2;//[Offset: 0xb0, Size: 0x4]
	float MapFOV1;//[Offset: 0xb4, Size: 0x4]
	float MapFOV2;//[Offset: 0xb8, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_MapMarkIcon.SolarTableReaderBase.Object
	SolarTablesData_MapMarkIcon TryGetRowData(int Key, out bool HasKey);// 0x516b312cd041
	bool HasRowKey(int Key);// 0x516a312cd041
	bool HasColKey(FString Key);// 0x5169312cd041
	FString GetTableName();// 0x5168312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5167312cd041
	SolarTablesData_MapMarkIcon GetRowData(int Key);// 0x5166312cd041
	int GetRowCount();// 0x5165312cd041
	int GetDataNum();// 0x5164312cd041
	FString[] GetColKeys();// 0x5163312cd041
	int GetColCount();// 0x5162312cd041

--------------------------------
Class: SolarTablesData_MapMarkIcon.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString AtlasPath;//[Offset: 0x10, Size: 0x10]
	float[] IconSize;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_MatchRule.SolarTableReaderBase.Object
	SolarTablesData_MatchRule TryGetRowData(int Key, out bool HasKey);// 0x5175312cd041
	bool HasRowKey(int Key);// 0x5174312cd041
	bool HasColKey(FString Key);// 0x5173312cd041
	FString GetTableName();// 0x5172312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5171312cd041
	SolarTablesData_MatchRule GetRowData(int Key);// 0x5170312cd041
	int GetRowCount();// 0x516f312cd041
	int GetDataNum();// 0x516e312cd041
	FString[] GetColKeys();// 0x516d312cd041
	int GetColCount();// 0x516c312cd041

--------------------------------
Class: SolarTablesData_MatchRule.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MatchType;//[Offset: 0x10, Size: 0x4]
	int MinPlayer;//[Offset: 0x14, Size: 0x4]
	int MaxPlayer;//[Offset: 0x18, Size: 0x4]
	int NumMode;//[Offset: 0x1c, Size: 0x4]
	int StopMatchTime;//[Offset: 0x20, Size: 0x4]
	int[] PlayerStructure;//[Offset: 0x28, Size: 0x10]
	int MinGroup;//[Offset: 0x38, Size: 0x4]
	int MaxRealGroup;//[Offset: 0x3c, Size: 0x4]
	int LeastRealPlayer;//[Offset: 0x40, Size: 0x4]
	int EloSettleType;//[Offset: 0x44, Size: 0x4]
	int RankSettleType;//[Offset: 0x48, Size: 0x4]
	int groupid;//[Offset: 0x4c, Size: 0x4]
	int RankGroupNameID;//[Offset: 0x50, Size: 0x4]
	bool MatchSameBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	int KeepMatchTimeID;//[Offset: 0x58, Size: 0x4]
	int OBNum;//[Offset: 0x5c, Size: 0x4]
	bool MaxPlayerStopMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int StatisticsType;//[Offset: 0x64, Size: 0x4]
	int HistoryModeType;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_RankMatch.SolarTableReaderBase.Object
	SolarTablesData_RankMatch TryGetRowData(int Key, out bool HasKey);// 0x5201312cd041
	bool HasRowKey(int Key);// 0x5200312cd041
	bool HasColKey(FString Key);// 0x51ff312cd041
	FString GetTableName();// 0x51fe312cd041
	int GetRowKeys(out int[] OutKeys);// 0x51fd312cd041
	SolarTablesData_RankMatch GetRowData(int Key);// 0x51fc312cd041
	int GetRowCount();// 0x51fb312cd041
	int GetDataNum();// 0x51fa312cd041
	FString[] GetColKeys();// 0x51f9312cd041
	int GetColCount();// 0x51f8312cd041

--------------------------------
Class: SolarTablesData_RankMatch.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MatchType;//[Offset: 0x10, Size: 0x4]
	FString MatchMode;//[Offset: 0x18, Size: 0x10]
	FString Abmode;//[Offset: 0x28, Size: 0x10]
	int CCUStart;//[Offset: 0x38, Size: 0x4]
	int CCUEnd;//[Offset: 0x3c, Size: 0x4]
	int EloStart;//[Offset: 0x40, Size: 0x4]
	int EloEnd;//[Offset: 0x44, Size: 0x4]
	int[] MergeTimeDirection;//[Offset: 0x48, Size: 0x10]
	int EloK;//[Offset: 0x58, Size: 0x4]
	int NumOfAI;//[Offset: 0x5c, Size: 0x4]
	int AILevel;//[Offset: 0x60, Size: 0x4]
	FString AILevelConfig;//[Offset: 0x68, Size: 0x10]
	bool EnableTeamManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	int[] MLApplication;//[Offset: 0x80, Size: 0x10]
	int MaxWait;//[Offset: 0x90, Size: 0x4]
	int StopMatchTime;//[Offset: 0x94, Size: 0x4]
	bool HasAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool AIAccompany;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	int AIAccompanyTimeline;//[Offset: 0x9c, Size: 0x4]
	int MinPlayer;//[Offset: 0xa0, Size: 0x4]
	int MaxRealGroup;//[Offset: 0xa4, Size: 0x4]
	int LeastRealPlayer;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_NameCardBackground.SolarTableReaderBase.Object
	SolarTablesData_NameCardBackground TryGetRowData(int Key, out bool HasKey);// 0x5189312cd041
	bool HasRowKey(int Key);// 0x5188312cd041
	bool HasColKey(FString Key);// 0x5187312cd041
	FString GetTableName();// 0x5186312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5185312cd041
	SolarTablesData_NameCardBackground GetRowData(int Key);// 0x5184312cd041
	int GetRowCount();// 0x5183312cd041
	int GetDataNum();// 0x5182312cd041
	FString[] GetColKeys();// 0x5181312cd041
	int GetColCount();// 0x5180312cd041

--------------------------------
Class: SolarTablesData_NameCardBackground.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	int ShopID;//[Offset: 0x18, Size: 0x4]
	int Exclusive;//[Offset: 0x1c, Size: 0x4]
	int IsAIEquiped;//[Offset: 0x20, Size: 0x4]
	FString BackgroundPath;//[Offset: 0x28, Size: 0x10]
	FString BackgroundTexturePath;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_NameCardPose.SolarTableReaderBase.Object
	SolarTablesData_NameCardPose TryGetRowData(int Key, out bool HasKey);// 0x5193312cd041
	bool HasRowKey(int Key);// 0x5192312cd041
	bool HasColKey(FString Key);// 0x5191312cd041
	FString GetTableName();// 0x5190312cd041
	int GetRowKeys(out int[] OutKeys);// 0x518f312cd041
	SolarTablesData_NameCardPose GetRowData(int Key);// 0x518e312cd041
	int GetRowCount();// 0x518d312cd041
	int GetDataNum();// 0x518c312cd041
	FString[] GetColKeys();// 0x518b312cd041
	int GetColCount();// 0x518a312cd041

--------------------------------
Class: SolarTablesData_NameCardPose.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	int ShopID;//[Offset: 0x18, Size: 0x4]
	int Exclusive;//[Offset: 0x1c, Size: 0x4]
	int IsAIEquiped;//[Offset: 0x20, Size: 0x4]
	FString PosePath;//[Offset: 0x28, Size: 0x10]
	FString PosePath_M;//[Offset: 0x38, Size: 0x10]
	FString PosePath_F;//[Offset: 0x48, Size: 0x10]
	FString PosePath_MCP;//[Offset: 0x58, Size: 0x10]
	FString PosePath_FFM;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_ObGift.SolarTableReaderBase.Object
	SolarTablesData_ObGift TryGetRowData(int Key, out bool HasKey);// 0x519d312cd041
	bool HasRowKey(int Key);// 0x519c312cd041
	bool HasColKey(FString Key);// 0x519b312cd041
	FString GetTableName();// 0x519a312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5199312cd041
	SolarTablesData_ObGift GetRowData(int Key);// 0x5198312cd041
	int GetRowCount();// 0x5197312cd041
	int GetDataNum();// 0x5196312cd041
	FString[] GetColKeys();// 0x5195312cd041
	int GetColCount();// 0x5194312cd041

--------------------------------
Class: SolarTablesData_ObGift.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int gift_type;//[Offset: 0x10, Size: 0x4]
	FString item_name;//[Offset: 0x18, Size: 0x10]
	FString item_back_res;//[Offset: 0x28, Size: 0x10]
	FString item_text_res;//[Offset: 0x38, Size: 0x10]
	int gift_hot_num;//[Offset: 0x48, Size: 0x4]
	int currency_type;//[Offset: 0x4c, Size: 0x4]
	int item_price;//[Offset: 0x50, Size: 0x4]
	float item_back;//[Offset: 0x54, Size: 0x4]
	int item_show_time;//[Offset: 0x58, Size: 0x4]
	int item_id;//[Offset: 0x5c, Size: 0x4]
	int small_time;//[Offset: 0x60, Size: 0x4]
	int interact_num;//[Offset: 0x64, Size: 0x4]
	int CD;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_Outcome.SolarTableReaderBase.Object
	SolarTablesData_Outcome TryGetRowData(int Key, out bool HasKey);// 0x51a7312cd041
	bool HasRowKey(int Key);// 0x51a6312cd041
	bool HasColKey(FString Key);// 0x51a5312cd041
	FString GetTableName();// 0x51a4312cd041
	int GetRowKeys(out int[] OutKeys);// 0x51a3312cd041
	SolarTablesData_Outcome GetRowData(int Key);// 0x51a2312cd041
	int GetRowCount();// 0x51a1312cd041
	int GetDataNum();// 0x51a0312cd041
	FString[] GetColKeys();// 0x519f312cd041
	int GetColCount();// 0x519e312cd041

--------------------------------
Class: SolarTablesData_Outcome.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int OutcomeType;//[Offset: 0x10, Size: 0x4]
	int MaxTimes;//[Offset: 0x14, Size: 0x4]
	int MinTimes;//[Offset: 0x18, Size: 0x4]
	int[] Contents;//[Offset: 0x20, Size: 0x10]
	int[] LimitId;//[Offset: 0x30, Size: 0x10]
	int[] LimitIdMax;//[Offset: 0x40, Size: 0x10]
	int[] LimitIdMin;//[Offset: 0x50, Size: 0x10]
	FString Refresh;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_OutcomeContent.SolarTableReaderBase.Object
	SolarTablesData_OutcomeContent TryGetRowData(int Key, out bool HasKey);// 0x51b1312cd041
	bool HasRowKey(int Key);// 0x51b0312cd041
	bool HasColKey(FString Key);// 0x51af312cd041
	FString GetTableName();// 0x51ae312cd041
	int GetRowKeys(out int[] OutKeys);// 0x51ad312cd041
	SolarTablesData_OutcomeContent GetRowData(int Key);// 0x51ac312cd041
	int GetRowCount();// 0x51ab312cd041
	int GetDataNum();// 0x51aa312cd041
	FString[] GetColKeys();// 0x51a9312cd041
	int GetColCount();// 0x51a8312cd041

--------------------------------
Class: SolarTablesData_OutcomeContent.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	int Weight;//[Offset: 0x14, Size: 0x4]
	int[] RandomNum;//[Offset: 0x18, Size: 0x10]
	int MaxTimes;//[Offset: 0x28, Size: 0x4]
	int MinTimes;//[Offset: 0x2c, Size: 0x4]
	int RelatedContentID;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_PickupPriorityItem.SolarTableReaderBase.Object
	SolarTablesData_PickupPriorityItem TryGetRowData(int Key, out bool HasKey);// 0x51c5312cd041
	bool HasRowKey(int Key);// 0x51c4312cd041
	bool HasColKey(FString Key);// 0x51c3312cd041
	FString GetTableName();// 0x51c2312cd041
	int GetRowKeys(out int[] OutKeys);// 0x51c1312cd041
	SolarTablesData_PickupPriorityItem GetRowData(int Key);// 0x51c0312cd041
	int GetRowCount();// 0x51bf312cd041
	int GetDataNum();// 0x51be312cd041
	FString[] GetColKeys();// 0x51bd312cd041
	int GetColCount();// 0x51bc312cd041

--------------------------------
Class: SolarTablesData_PickupPriorityItem.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int PriorityValue;//[Offset: 0x10, Size: 0x4]
	int MutiAutoPickup;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_PickupPriorityWeaponPart.SolarTableReaderBase.Object
	SolarTablesData_PickupPriorityWeaponPart TryGetRowData(int Key, out bool HasKey);// 0x51cf312cd041
	bool HasRowKey(int Key);// 0x51ce312cd041
	bool HasColKey(FString Key);// 0x51cd312cd041
	FString GetTableName();// 0x51cc312cd041
	int GetRowKeys(out int[] OutKeys);// 0x51cb312cd041
	SolarTablesData_PickupPriorityWeaponPart GetRowData(int Key);// 0x51ca312cd041
	int GetRowCount();// 0x51c9312cd041
	int GetDataNum();// 0x51c8312cd041
	FString[] GetColKeys();// 0x51c7312cd041
	int GetColCount();// 0x51c6312cd041

--------------------------------
Class: SolarTablesData_PickupPriorityWeaponPart.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int PriorityValue;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_QuickChat.SolarTableReaderBase.Object
	SolarTablesData_QuickChat TryGetRowData(int Key, out bool HasKey);// 0x51e3312cd041
	bool HasRowKey(int Key);// 0x51e2312cd041
	bool HasColKey(FString Key);// 0x51e1312cd041
	FString GetTableName();// 0x51e0312cd041
	int GetRowKeys(out int[] OutKeys);// 0x51df312cd041
	SolarTablesData_QuickChat GetRowData(int Key);// 0x51de312cd041
	int GetRowCount();// 0x51dd312cd041
	int GetDataNum();// 0x51dc312cd041
	FString[] GetColKeys();// 0x51db312cd041
	int GetColCount();// 0x51da312cd041

--------------------------------
Class: SolarTablesData_QuickChat.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int LocalizationID;//[Offset: 0x10, Size: 0x4]
	FString zh_CN;//[Offset: 0x18, Size: 0x10]
	FString en;//[Offset: 0x28, Size: 0x10]
	FString pt;//[Offset: 0x38, Size: 0x10]
	FString ind;//[Offset: 0x48, Size: 0x10]
	FString fr;//[Offset: 0x58, Size: 0x10]
	FString de;//[Offset: 0x68, Size: 0x10]
	FString ru;//[Offset: 0x78, Size: 0x10]
	FString ar;//[Offset: 0x88, Size: 0x10]
	FString es;//[Offset: 0x98, Size: 0x10]
	FString hi;//[Offset: 0xa8, Size: 0x10]
	FString it;//[Offset: 0xb8, Size: 0x10]
	FString ja;//[Offset: 0xc8, Size: 0x10]
	FString ko;//[Offset: 0xd8, Size: 0x10]
	FString ms;//[Offset: 0xe8, Size: 0x10]
	FString pl;//[Offset: 0xf8, Size: 0x10]
	FString th;//[Offset: 0x108, Size: 0x10]
	FString tl;//[Offset: 0x118, Size: 0x10]
	FString tr;//[Offset: 0x128, Size: 0x10]
	FString vi;//[Offset: 0x138, Size: 0x10]
	FString zh_TW;//[Offset: 0x148, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_QuickVoice.SolarTableReaderBase.Object
	SolarTablesData_QuickVoice TryGetRowData(int Key, out bool HasKey);// 0x51ed312cd041
	bool HasRowKey(int Key);// 0x51ec312cd041
	bool HasColKey(FString Key);// 0x51eb312cd041
	FString GetTableName();// 0x51ea312cd041
	int GetRowKeys(out int[] OutKeys);// 0x51e9312cd041
	SolarTablesData_QuickVoice GetRowData(int Key);// 0x51e8312cd041
	int GetRowCount();// 0x51e7312cd041
	int GetDataNum();// 0x51e6312cd041
	FString[] GetColKeys();// 0x51e5312cd041
	int GetColCount();// 0x51e4312cd041

--------------------------------
Class: SolarTablesData_QuickVoice.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString Icon;//[Offset: 0x10, Size: 0x10]
	int LocalizationID;//[Offset: 0x20, Size: 0x4]
	FString AudioEventName;//[Offset: 0x28, Size: 0x10]
	FString AudioEventNameFemale;//[Offset: 0x38, Size: 0x10]
	int IsMarkIcon;//[Offset: 0x48, Size: 0x4]
	int PassiveTriggeredCD;//[Offset: 0x4c, Size: 0x4]
	int PassiveTriggeredProb;//[Offset: 0x50, Size: 0x4]
	FString ReplyMessageID;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_CharacterVoiceover.SolarTableReaderBase.Object
	SolarTablesData_CharacterVoiceover TryGetRowData(int Key, out bool HasKey);// 0x4fc7312cd041
	bool HasRowKey(int Key);// 0x4fc6312cd041
	bool HasColKey(FString Key);// 0x4fc5312cd041
	FString GetTableName();// 0x4fc4312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4fc3312cd041
	SolarTablesData_CharacterVoiceover GetRowData(int Key);// 0x4fc2312cd041
	int GetRowCount();// 0x4fc1312cd041
	int GetDataNum();// 0x4fc0312cd041
	FString[] GetColKeys();// 0x4fbf312cd041
	int GetColCount();// 0x4fbe312cd041

--------------------------------
Class: SolarTablesData_CharacterVoiceover.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int QuickVoiceID;//[Offset: 0x10, Size: 0x4]
	int CharacterId;//[Offset: 0x14, Size: 0x4]
	int SkinId;//[Offset: 0x18, Size: 0x4]
	FString AudioEventName;//[Offset: 0x20, Size: 0x10]
	int LocalizationID;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_VODownload.SolarTableReaderBase.Object
	SolarTablesData_VODownload TryGetRowData(int Key, out bool HasKey);// 0x5297312cd041
	bool HasRowKey(int Key);// 0x5296312cd041
	bool HasColKey(FString Key);// 0x5295312cd041
	FString GetTableName();// 0x5294312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5293312cd041
	SolarTablesData_VODownload GetRowData(int Key);// 0x5292312cd041
	int GetRowCount();// 0x5291312cd041
	int GetDataNum();// 0x5290312cd041
	FString[] GetColKeys();// 0x528f312cd041
	int GetColCount();// 0x528e312cd041

--------------------------------
Class: SolarTablesData_VODownload.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString LobbyChunkDir;//[Offset: 0x10, Size: 0x10]
	int ChunkID;//[Offset: 0x20, Size: 0x4]
	FString ButtonText;//[Offset: 0x28, Size: 0x10]
	int LanguageIndex;//[Offset: 0x38, Size: 0x4]
	int IsDefaultChunk;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_RankLevel.SolarTableReaderBase.Object
	SolarTablesData_RankLevel TryGetRowData(int Key, out bool HasKey);// 0x51f7312cd041
	bool HasRowKey(int Key);// 0x51f6312cd041
	bool HasColKey(FString Key);// 0x51f5312cd041
	FString GetTableName();// 0x51f4312cd041
	int GetRowKeys(out int[] OutKeys);// 0x51f3312cd041
	SolarTablesData_RankLevel GetRowData(int Key);// 0x51f2312cd041
	int GetRowCount();// 0x51f1312cd041
	int GetDataNum();// 0x51f0312cd041
	FString[] GetColKeys();// 0x51ef312cd041
	int GetColCount();// 0x51ee312cd041

--------------------------------
Class: SolarTablesData_RankLevel.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int RankID;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText RankName;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x18, Size: 0x4]
	int LevelID;//[Offset: 0x1c, Size: 0x4]
	int RankStart;//[Offset: 0x20, Size: 0x4]
	int RankEnd;//[Offset: 0x24, Size: 0x4]
	int RankProtect;//[Offset: 0x28, Size: 0x4]
	int FrustrationValue;//[Offset: 0x2c, Size: 0x4]
	int RankReduce;//[Offset: 0x30, Size: 0x4]
	FString Icon;//[Offset: 0x38, Size: 0x10]
	FString Icon_s;//[Offset: 0x48, Size: 0x10]
	FString IconWord;//[Offset: 0x58, Size: 0x10]
	FString IconWord_s;//[Offset: 0x68, Size: 0x10]
	int random_level;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_Rescue.SolarTableReaderBase.Object
	SolarTablesData_Rescue TryGetRowData(int Key, out bool HasKey);// 0x520b312cd041
	bool HasRowKey(int Key);// 0x520a312cd041
	bool HasColKey(FString Key);// 0x5209312cd041
	FString GetTableName();// 0x5208312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5207312cd041
	SolarTablesData_Rescue GetRowData(int Key);// 0x5206312cd041
	int GetRowCount();// 0x5205312cd041
	int GetDataNum();// 0x5204312cd041
	FString[] GetColKeys();// 0x5203312cd041
	int GetColCount();// 0x5202312cd041

--------------------------------
Class: SolarTablesData_Rescue.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float RescueMaxDistance;//[Offset: 0x10, Size: 0x4]
	float FallenHp;//[Offset: 0x14, Size: 0x4]
	float RescueRecoveryHp;//[Offset: 0x18, Size: 0x4]
	int RescueTime;//[Offset: 0x1c, Size: 0x4]
	float[] FallenLossHp;//[Offset: 0x20, Size: 0x10]
	float[] FallenMoveLossHp;//[Offset: 0x30, Size: 0x10]
	float FallenMoveSpeed;//[Offset: 0x40, Size: 0x4]
	float RescueMoveSpeed;//[Offset: 0x44, Size: 0x4]
	float InvincibleTime;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_Skin.SolarTableReaderBase.Object
	SolarTablesData_Skin TryGetRowData(int Key, out bool HasKey);// 0x5229312cd041
	bool HasRowKey(int Key);// 0x5228312cd041
	bool HasColKey(FString Key);// 0x5227312cd041
	FString GetTableName();// 0x5226312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5225312cd041
	SolarTablesData_Skin GetRowData(int Key);// 0x5224312cd041
	int GetRowCount();// 0x5223312cd041
	int GetDataNum();// 0x5222312cd041
	FString[] GetColKeys();// 0x5221312cd041
	int GetColCount();// 0x5220312cd041

--------------------------------
Class: SolarTablesData_Skin.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int CharaId;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FString BeginTime;//[Offset: 0x20, Size: 0x10]
	int ShopPropertyid;//[Offset: 0x30, Size: 0x4]
	int ItemID;//[Offset: 0x34, Size: 0x4]
	FString MVPDataAssetPath;//[Offset: 0x38, Size: 0x10]
	FString MVPSequencePath;//[Offset: 0x48, Size: 0x10]
	int SceneId;//[Offset: 0x58, Size: 0x4]
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	FString CharacterSkinResource;//[Offset: 0x60, Size: 0x10]
	FString CharacterLobbySkinResource;//[Offset: 0x70, Size: 0x10]
	FString LobbyChunkDir;//[Offset: 0x80, Size: 0x10]
	int ChunkID;//[Offset: 0x90, Size: 0x4]
	FString CharacterLowSkinResource;//[Offset: 0x98, Size: 0x10]
	int[] CharacterPrologue;//[Offset: 0xa8, Size: 0x10]
	FString CharacterProtrait;//[Offset: 0xb8, Size: 0x10]
	int SkinSort;//[Offset: 0xc8, Size: 0x4]
	int MVPSettlementStartFrame;//[Offset: 0xcc, Size: 0x4]
	int MVPSettlementEndFrame;//[Offset: 0xd0, Size: 0x4]
	int MVPAnchorPoint;//[Offset: 0xd4, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_Achievement.SolarTableReaderBase.Object
	SolarTablesData_Achievement TryGetRowData(int Key, out bool HasKey);// 0x4f27312cd041
	bool HasRowKey(int Key);// 0x4f26312cd041
	bool HasColKey(FString Key);// 0x4f25312cd041
	FString GetTableName();// 0x4f24312cd041
	int GetRowKeys(out int[] OutKeys);// 0x4f23312cd041
	SolarTablesData_Achievement GetRowData(int Key);// 0x4f22312cd041
	int GetRowCount();// 0x4f21312cd041
	int GetDataNum();// 0x4f20312cd041
	FString[] GetColKeys();// 0x4f1f312cd041
	int GetColCount();// 0x4f1e312cd041

--------------------------------
Class: SolarTablesData_Achievement.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Order;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText AchieveName;//[Offset: 0x14, Size: 0x4]
	int AchieveTab;//[Offset: 0x18, Size: 0x4]
	int AchieveType;//[Offset: 0x1c, Size: 0x4]
	int AchieveScore;//[Offset: 0x20, Size: 0x4]
	int[] AwardList;//[Offset: 0x28, Size: 0x10]
	FString AchieveIcon;//[Offset: 0x38, Size: 0x10]
	FString AchieveIconS;//[Offset: 0x48, Size: 0x10]
	int AchieveTask;//[Offset: 0x58, Size: 0x4]
	int[] AchieveTV;//[Offset: 0x60, Size: 0x10]
	int AchieveTT;//[Offset: 0x70, Size: 0x4]
	int ReportType;//[Offset: 0x74, Size: 0x4]
	SolarTablesLocalText AchieveTC;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_TaskSystem.SolarTableReaderBase.Object
	SolarTablesData_TaskSystem TryGetRowData(int Key, out bool HasKey);// 0x523d312cd041
	bool HasRowKey(int Key);// 0x523c312cd041
	bool HasColKey(FString Key);// 0x523b312cd041
	FString GetTableName();// 0x523a312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5239312cd041
	SolarTablesData_TaskSystem GetRowData(int Key);// 0x5238312cd041
	int GetRowCount();// 0x5237312cd041
	int GetDataNum();// 0x5236312cd041
	FString[] GetColKeys();// 0x5235312cd041
	int GetColCount();// 0x5234312cd041

--------------------------------
Class: SolarTablesData_TaskSystem.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int taskDesc;//[Offset: 0x10, Size: 0x4]
	int Task;//[Offset: 0x14, Size: 0x4]
	int TaskType;//[Offset: 0x18, Size: 0x4]
	FString cond1_sheet;//[Offset: 0x20, Size: 0x10]
	int cond1;//[Offset: 0x30, Size: 0x4]
	FString cond2_sheet;//[Offset: 0x38, Size: 0x10]
	int cond2;//[Offset: 0x48, Size: 0x4]
	FString cond3_sheet;//[Offset: 0x50, Size: 0x10]
	int cond3;//[Offset: 0x60, Size: 0x4]
	int Target;//[Offset: 0x64, Size: 0x4]
	int[] Item;//[Offset: 0x68, Size: 0x10]
	int MinLevel;//[Offset: 0x78, Size: 0x4]
	int[] link;//[Offset: 0x80, Size: 0x10]
	int Weight;//[Offset: 0x90, Size: 0x4]
	int sort;//[Offset: 0x94, Size: 0x4]
	bool Progress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool isCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	int circleTimes;//[Offset: 0x9c, Size: 0x4]
	int resetType;//[Offset: 0xa0, Size: 0x4]
	int[] taskTips;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_TaskProgress.SolarTableReaderBase.Object
	SolarTablesData_TaskProgress TryGetRowData(int Key, out bool HasKey);// 0x5233312cd041
	bool HasRowKey(int Key);// 0x5232312cd041
	bool HasColKey(FString Key);// 0x5231312cd041
	FString GetTableName();// 0x5230312cd041
	int GetRowKeys(out int[] OutKeys);// 0x522f312cd041
	SolarTablesData_TaskProgress GetRowData(int Key);// 0x522e312cd041
	int GetRowCount();// 0x522d312cd041
	int GetDataNum();// 0x522c312cd041
	FString[] GetColKeys();// 0x522b312cd041
	int GetColCount();// 0x522a312cd041

--------------------------------
Class: SolarTablesData_TaskProgress.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int isRefresh;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_PlayerOperationListLayout.SolarTableReaderBase.Object
	SolarTablesData_PlayerOperationListLayout TryGetRowData(int Key, out bool HasKey);// 0x51d9312cd041
	bool HasRowKey(int Key);// 0x51d8312cd041
	bool HasColKey(FString Key);// 0x51d7312cd041
	FString GetTableName();// 0x51d6312cd041
	int GetRowKeys(out int[] OutKeys);// 0x51d5312cd041
	SolarTablesData_PlayerOperationListLayout GetRowData(int Key);// 0x51d4312cd041
	int GetRowCount();// 0x51d3312cd041
	int GetDataNum();// 0x51d2312cd041
	FString[] GetColKeys();// 0x51d1312cd041
	int GetColCount();// 0x51d0312cd041

--------------------------------
Class: SolarTablesData_PlayerOperationListLayout.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString UIName;//[Offset: 0x10, Size: 0x10]
	int Normal;//[Offset: 0x20, Size: 0x4]
	int Driver;//[Offset: 0x24, Size: 0x4]
	int Passgner;//[Offset: 0x28, Size: 0x4]
	int EquipVehicleWeapon;//[Offset: 0x2c, Size: 0x4]
	int Cruising;//[Offset: 0x30, Size: 0x4]
	int Parachuting;//[Offset: 0x34, Size: 0x4]
	int Swimming;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_Variables.SolarTableReaderBase.Object
	SolarTablesData_Variables TryGetRowData(FString Key, out bool HasKey);// 0x5251312cd041
	bool HasRowKey(FString Key);// 0x5250312cd041
	bool HasColKey(FString Key);// 0x524f312cd041
	FString GetTableName();// 0x524e312cd041
	int GetRowKeys(out FString[] OutKeys);// 0x524d312cd041
	SolarTablesData_Variables GetRowData(FString Key);// 0x524c312cd041
	int GetRowCount();// 0x524b312cd041
	int GetDataNum();// 0x524a312cd041
	FString[] GetColKeys();// 0x5249312cd041
	int GetColCount();// 0x5248312cd041

--------------------------------
Class: SolarTablesData_Variables.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	FString Value;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_Vehicle.SolarTableReaderBase.Object
	SolarTablesData_Vehicle TryGetRowData(int Key, out bool HasKey);// 0x525b312cd041
	bool HasRowKey(int Key);// 0x525a312cd041
	bool HasColKey(FString Key);// 0x5259312cd041
	FString GetTableName();// 0x5258312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5257312cd041
	SolarTablesData_Vehicle GetRowData(int Key);// 0x5256312cd041
	int GetRowCount();// 0x5255312cd041
	int GetDataNum();// 0x5254312cd041
	FString[] GetColKeys();// 0x5253312cd041
	int GetColCount();// 0x5252312cd041

--------------------------------
Class: SolarTablesData_Vehicle.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString VehicleBP;//[Offset: 0x18, Size: 0x10]
	int groupid;//[Offset: 0x28, Size: 0x4]
	int VehicleTypeID;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_VehicleSkin.SolarTableReaderBase.Object
	SolarTablesData_VehicleSkin TryGetRowData(int Key, out bool HasKey);// 0x5265312cd041
	bool HasRowKey(int Key);// 0x5264312cd041
	bool HasColKey(FString Key);// 0x5263312cd041
	FString GetTableName();// 0x5262312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5261312cd041
	SolarTablesData_VehicleSkin GetRowData(int Key);// 0x5260312cd041
	int GetRowCount();// 0x525f312cd041
	int GetDataNum();// 0x525e312cd041
	FString[] GetColKeys();// 0x525d312cd041
	int GetColCount();// 0x525c312cd041

--------------------------------
Class: SolarTablesData_VehicleSkin.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int VehicleTypeID;//[Offset: 0x10, Size: 0x4]
	int ItemID;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText SkinName;//[Offset: 0x18, Size: 0x4]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	FString BeginTime;//[Offset: 0x20, Size: 0x10]
	int[] JumpLink;//[Offset: 0x30, Size: 0x10]
	FString VehicleSkinBPPath;//[Offset: 0x40, Size: 0x10]
	FString VehiclePreviewBP;//[Offset: 0x50, Size: 0x10]
	FString VehicleIcon;//[Offset: 0x60, Size: 0x10]
	FString VehicleSound;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_VehicleType.SolarTableReaderBase.Object
	SolarTablesData_VehicleType TryGetRowData(int Key, out bool HasKey);// 0x528d312cd041
	bool HasRowKey(int Key);// 0x528c312cd041
	bool HasColKey(FString Key);// 0x528b312cd041
	FString GetTableName();// 0x528a312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5289312cd041
	SolarTablesData_VehicleType GetRowData(int Key);// 0x5288312cd041
	int GetRowCount();// 0x5287312cd041
	int GetDataNum();// 0x5286312cd041
	FString[] GetColKeys();// 0x5285312cd041
	int GetColCount();// 0x5284312cd041

--------------------------------
Class: SolarTablesData_VehicleType.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int DefaultId;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	FString VehicleIcon;//[Offset: 0x18, Size: 0x10]
	FString AudioEventName;//[Offset: 0x28, Size: 0x10]
	int VehicleClass;//[Offset: 0x38, Size: 0x4]
	float LobbyDurability;//[Offset: 0x3c, Size: 0x4]
	float LobbySpeed;//[Offset: 0x40, Size: 0x4]
	float LobbyFirepower;//[Offset: 0x44, Size: 0x4]
	float LobbyControl;//[Offset: 0x48, Size: 0x4]
	int SeatNum;//[Offset: 0x4c, Size: 0x4]
	int[] Seat1WeaponID;//[Offset: 0x50, Size: 0x10]
	int[] Seat2WeaponID;//[Offset: 0x60, Size: 0x10]
	int[] Seat3WeaponID;//[Offset: 0x70, Size: 0x10]
	int[] Seat4WeaponID;//[Offset: 0x80, Size: 0x10]
	int[] Seat1SkillID;//[Offset: 0x90, Size: 0x10]
	int[] Seat2SkillID;//[Offset: 0xa0, Size: 0x10]
	int[] Seat3SkillID;//[Offset: 0xb0, Size: 0x10]
	int[] Seat4SkillID;//[Offset: 0xc0, Size: 0x10]
	FString VehicleLink;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_VehicleSpawn.SolarTableReaderBase.Object
	SolarTablesData_VehicleSpawn TryGetRowData(int Key, out bool HasKey);// 0x5279312cd041
	bool HasRowKey(int Key);// 0x5278312cd041
	bool HasColKey(FString Key);// 0x5277312cd041
	FString GetTableName();// 0x5276312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5275312cd041
	SolarTablesData_VehicleSpawn GetRowData(int Key);// 0x5274312cd041
	int GetRowCount();// 0x5273312cd041
	int GetDataNum();// 0x5272312cd041
	FString[] GetColKeys();// 0x5271312cd041
	int GetColCount();// 0x5270312cd041

--------------------------------
Class: SolarTablesData_VehicleSpawn.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] VehicleSet;//[Offset: 0x10, Size: 0x10]
	int[] WeightSet;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_VehicleSpawnGroup.SolarTableReaderBase.Object
	SolarTablesData_VehicleSpawnGroup TryGetRowData(int Key, out bool HasKey);// 0x5283312cd041
	bool HasRowKey(int Key);// 0x5282312cd041
	bool HasColKey(FString Key);// 0x5281312cd041
	FString GetTableName();// 0x5280312cd041
	int GetRowKeys(out int[] OutKeys);// 0x527f312cd041
	SolarTablesData_VehicleSpawnGroup GetRowData(int Key);// 0x527e312cd041
	int GetRowCount();// 0x527d312cd041
	int GetDataNum();// 0x527c312cd041
	FString[] GetColKeys();// 0x527b312cd041
	int GetColCount();// 0x527a312cd041

--------------------------------
Class: SolarTablesData_VehicleSpawnGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] VehicleIds;//[Offset: 0x10, Size: 0x10]
	int[] VehicleCounts;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_WarmGame.SolarTableReaderBase.Object
	SolarTablesData_WarmGame TryGetRowData(int Key, out bool HasKey);// 0x52a1312cd041
	bool HasRowKey(int Key);// 0x52a0312cd041
	bool HasColKey(FString Key);// 0x529f312cd041
	FString GetTableName();// 0x529e312cd041
	int GetRowKeys(out int[] OutKeys);// 0x529d312cd041
	SolarTablesData_WarmGame GetRowData(int Key);// 0x529c312cd041
	int GetRowCount();// 0x529b312cd041
	int GetDataNum();// 0x529a312cd041
	FString[] GetColKeys();// 0x5299312cd041
	int GetColCount();// 0x5298312cd041

--------------------------------
Class: SolarTablesData_WarmGame.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WarmType;//[Offset: 0x10, Size: 0x4]
	int MatchType;//[Offset: 0x14, Size: 0x4]
	int EloStart;//[Offset: 0x18, Size: 0x4]
	int EloEnd;//[Offset: 0x1c, Size: 0x4]
	int NumStart;//[Offset: 0x20, Size: 0x4]
	int NumEnd;//[Offset: 0x24, Size: 0x4]
	int KillStart;//[Offset: 0x28, Size: 0x4]
	int KillEnd;//[Offset: 0x2c, Size: 0x4]
	FString WarmSubType;//[Offset: 0x30, Size: 0x10]
	int UniqueId;//[Offset: 0x40, Size: 0x4]
	FString Abid;//[Offset: 0x48, Size: 0x10]
	FString WarmGameFillCheckBox;//[Offset: 0x58, Size: 0x10]
	FString WarmGameFillTeammate;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_WarmGameMode.SolarTableReaderBase.Object
	SolarTablesData_WarmGameMode TryGetRowData(int Key, out bool HasKey);// 0x52ab312cd041
	bool HasRowKey(int Key);// 0x52aa312cd041
	bool HasColKey(FString Key);// 0x52a9312cd041
	FString GetTableName();// 0x52a8312cd041
	int GetRowKeys(out int[] OutKeys);// 0x52a7312cd041
	SolarTablesData_WarmGameMode GetRowData(int Key);// 0x52a6312cd041
	int GetRowCount();// 0x52a5312cd041
	int GetDataNum();// 0x52a4312cd041
	FString[] GetColKeys();// 0x52a3312cd041
	int GetColCount();// 0x52a2312cd041

--------------------------------
Class: SolarTablesData_WarmGameMode.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int NumOfAI;//[Offset: 0x10, Size: 0x4]
	int AILevel;//[Offset: 0x14, Size: 0x4]
	FString AILevelConfig;//[Offset: 0x18, Size: 0x10]
	bool EnableTeamManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int MinPlayer;//[Offset: 0x2c, Size: 0x4]
	int MaxRealGroup;//[Offset: 0x30, Size: 0x4]
	int LeastRealPlayer;//[Offset: 0x34, Size: 0x4]
	int MaxWait;//[Offset: 0x38, Size: 0x4]
	bool HasMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int ReadyStateTime;//[Offset: 0x40, Size: 0x4]
	int StopMatchTime;//[Offset: 0x44, Size: 0x4]
	bool HasAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool AIAccompany;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	int AIAccompanyTimeline;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_Weapon.SolarTableReaderBase.Object
	SolarTablesData_Weapon TryGetRowData(int Key, out bool HasKey);// 0x52b5312cd041
	bool HasRowKey(int Key);// 0x52b4312cd041
	bool HasColKey(FString Key);// 0x52b3312cd041
	FString GetTableName();// 0x52b2312cd041
	int GetRowKeys(out int[] OutKeys);// 0x52b1312cd041
	SolarTablesData_Weapon GetRowData(int Key);// 0x52b0312cd041
	int GetRowCount();// 0x52af312cd041
	int GetDataNum();// 0x52ae312cd041
	FString[] GetColKeys();// 0x52ad312cd041
	int GetColCount();// 0x52ac312cd041

--------------------------------
Class: SolarTablesData_Weapon.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	enum WeaponType;//[Offset: 0x14, Size: 0x1]
	int WeaponBrand;//[Offset: 0x18, Size: 0x4]
	bool SupportSecondaryAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int[] AccessoryID;//[Offset: 0x20, Size: 0x10]
	FString WeaponIcon;//[Offset: 0x30, Size: 0x10]
	bool Single;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool Burst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool Automatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool OneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	float HitHead;//[Offset: 0x44, Size: 0x4]
	int SecModeLimitTypeID;//[Offset: 0x48, Size: 0x4]
	int BurstMaxCount;//[Offset: 0x4c, Size: 0x4]
	FString WeaponDamage;//[Offset: 0x50, Size: 0x10]
	float MaxSpread;//[Offset: 0x60, Size: 0x4]
	float MinSpread;//[Offset: 0x64, Size: 0x4]
	float HipFireBaseSpread;//[Offset: 0x68, Size: 0x4]
	float VhADSBaseSpread;//[Offset: 0x6c, Size: 0x4]
	float ADSBaseSpread;//[Offset: 0x70, Size: 0x4]
	float SpreadStatuSpeed;//[Offset: 0x74, Size: 0x4]
	float SpreadStatuIncreaseID;//[Offset: 0x78, Size: 0x4]
	float SpreadStatuReduceID;//[Offset: 0x7c, Size: 0x4]
	int SpreadCOPID;//[Offset: 0x80, Size: 0x4]
	int PrimaryAmmo;//[Offset: 0x84, Size: 0x4]
	int PrimaryAmmoCap;//[Offset: 0x88, Size: 0x4]
	int SecondaryAmmo;//[Offset: 0x8c, Size: 0x4]
	int SecondaryAmmoCap;//[Offset: 0x90, Size: 0x4]
	bool CanOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	float OverloadMaxValue;//[Offset: 0x98, Size: 0x4]
	float NormalOverloadCoolingRate;//[Offset: 0x9c, Size: 0x4]
	float OverloadCoolingPeriod;//[Offset: 0xa0, Size: 0x4]
	float OverloadWarningRate;//[Offset: 0xa4, Size: 0x4]
	bool CanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	float AutoFireDelayMs;//[Offset: 0xac, Size: 0x4]
	float AutoFireEndDelayMs;//[Offset: 0xb0, Size: 0x4]
	bool CanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	float[] HipSoftZone;//[Offset: 0xb8, Size: 0x10]
	float HipAimAssistStepRatio;//[Offset: 0xc8, Size: 0x4]
	float HipMinAssistStepRatio;//[Offset: 0xcc, Size: 0x4]
	float HipAimAssistStepSpeed;//[Offset: 0xd0, Size: 0x4]
	float[] AdsSoftZone;//[Offset: 0xd8, Size: 0x10]
	float AdsAimAssistStepRatio;//[Offset: 0xe8, Size: 0x4]
	float AdsMinAssistStepRatio;//[Offset: 0xec, Size: 0x4]
	float AdsAimAssistStepSpeed;//[Offset: 0xf0, Size: 0x4]
	bool CanOpenScopeAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	float OpenScopeAimAssistStepRatio;//[Offset: 0xf8, Size: 0x4]
	float OpenScopeMinAssistStepRatio;//[Offset: 0xfc, Size: 0x4]
	float OpenScopeAssistStepSpeed;//[Offset: 0x100, Size: 0x4]
	float OnVehicleAssistStepRatio;//[Offset: 0x104, Size: 0x4]
	float Weight;//[Offset: 0x108, Size: 0x4]
	float HipFireSpeed;//[Offset: 0x10c, Size: 0x4]
	float ADSFireSpeed;//[Offset: 0x110, Size: 0x4]
	int[] DefaultParts;//[Offset: 0x118, Size: 0x10]
	float ScopeOpenTime;//[Offset: 0x128, Size: 0x4]
	float FovFactor;//[Offset: 0x12c, Size: 0x4]
	float WeaponSwitchTime;//[Offset: 0x130, Size: 0x4]
	int[] PartSlots;//[Offset: 0x138, Size: 0x10]
	<FString,FString> EquipAttributeSub;//[Offset: 0x148, Size: 0x50]
	<FString,FString> HoldAttributeSub;//[Offset: 0x198, Size: 0x50]

--------------------------------
Class: SolarTables_Reader_WeaponDamage.SolarTableReaderBase.Object
	SolarTablesData_WeaponDamage TryGetRowData(int Key, out bool HasKey);// 0x52d3312cd041
	bool HasRowKey(int Key);// 0x52d2312cd041
	bool HasColKey(FString Key);// 0x52d1312cd041
	FString GetTableName();// 0x52d0312cd041
	int GetRowKeys(out int[] OutKeys);// 0x52cf312cd041
	SolarTablesData_WeaponDamage GetRowData(int Key);// 0x52ce312cd041
	int GetRowCount();// 0x52cd312cd041
	int GetDataNum();// 0x52cc312cd041
	FString[] GetColKeys();// 0x52cb312cd041
	int GetColCount();// 0x52ca312cd041

--------------------------------
Class: SolarTablesData_WeaponDamage.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float NpcDamageFactor;//[Offset: 0x10, Size: 0x4]
	float BotDamageFactor;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_WeaponAmmo.SolarTableReaderBase.Object
	SolarTablesData_WeaponAmmo TryGetRowData(int Key, out bool HasKey);// 0x52bf312cd041
	bool HasRowKey(int Key);// 0x52be312cd041
	bool HasColKey(FString Key);// 0x52bd312cd041
	FString GetTableName();// 0x52bc312cd041
	int GetRowKeys(out int[] OutKeys);// 0x52bb312cd041
	SolarTablesData_WeaponAmmo GetRowData(int Key);// 0x52ba312cd041
	int GetRowCount();// 0x52b9312cd041
	int GetDataNum();// 0x52b8312cd041
	FString[] GetColKeys();// 0x52b7312cd041
	int GetColCount();// 0x52b6312cd041

--------------------------------
Class: SolarTablesData_WeaponAmmo.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int AmmoType;//[Offset: 0x10, Size: 0x4]
	int PropID;//[Offset: 0x14, Size: 0x4]
	int SoundID;//[Offset: 0x18, Size: 0x4]
	bool IfTimedExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int BounceTimes;//[Offset: 0x20, Size: 0x4]
	float Lifetime;//[Offset: 0x24, Size: 0x4]
	float BaseReloadTime;//[Offset: 0x28, Size: 0x4]
	enum FireMethodType;//[Offset: 0x2c, Size: 0x1]
	enum TrajectoryType;//[Offset: 0x2d, Size: 0x1]
	float CustomValue;//[Offset: 0x30, Size: 0x4]
	enum TriggerType;//[Offset: 0x34, Size: 0x1]
	float MaxRange;//[Offset: 0x38, Size: 0x4]
	float EffRange;//[Offset: 0x3c, Size: 0x4]
	float ProjectileMaxGravity;//[Offset: 0x40, Size: 0x4]
	float DamageMaxRange;//[Offset: 0x44, Size: 0x4]
	float DamageEffRange;//[Offset: 0x48, Size: 0x4]
	float Radius;//[Offset: 0x4c, Size: 0x4]
	float PostFireOverload;//[Offset: 0x50, Size: 0x4]
	float InitSpeed;//[Offset: 0x54, Size: 0x4]
	float FireStreakBreakTime;//[Offset: 0x58, Size: 0x4]
	enum FireCostType;//[Offset: 0x5c, Size: 0x1]
	int FireCostPerAttack;//[Offset: 0x60, Size: 0x4]
	int FireSpeedChangeTime;//[Offset: 0x64, Size: 0x4]
	float FireSpeedChangeCOP;//[Offset: 0x68, Size: 0x4]
	float FireIntervalRevertPreTime;//[Offset: 0x6c, Size: 0x4]
	float FireIntervalReavertSpeed;//[Offset: 0x70, Size: 0x4]
	float FastestFireInterval;//[Offset: 0x74, Size: 0x4]
	float SlowestFireInterval;//[Offset: 0x78, Size: 0x4]
	float BaseFireInterval;//[Offset: 0x7c, Size: 0x4]
	float BoltActionTime;//[Offset: 0x80, Size: 0x4]
	float BurstShootInterval;//[Offset: 0x84, Size: 0x4]
	float BurstFireInterval;//[Offset: 0x88, Size: 0x4]
	float StartBoltDuration;//[Offset: 0x8c, Size: 0x4]
	bool UsePrimaryModeAmmoCap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool UseBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	float[] SkillCDDiscountArray;//[Offset: 0x98, Size: 0x10]
	int SkillType;//[Offset: 0xa8, Size: 0x4]
	float VhADSSpreadCOP;//[Offset: 0xac, Size: 0x4]
	float ADSSpreadCOP;//[Offset: 0xb0, Size: 0x4]
	float SpreadFirePreTime;//[Offset: 0xb4, Size: 0x4]
	float SpreadPostFireSpeed;//[Offset: 0xb8, Size: 0x4]
	float SpreadRestorePreTime;//[Offset: 0xbc, Size: 0x4]
	float SpreadRestoreSpeed;//[Offset: 0xc0, Size: 0x4]
	float VRecoilCostTime;//[Offset: 0xc4, Size: 0x4]
	int VRecoilAPoint;//[Offset: 0xc8, Size: 0x4]
	float VRecoilAPointMax;//[Offset: 0xcc, Size: 0x4]
	float VRecoilAPointMin;//[Offset: 0xd0, Size: 0x4]
	int VRecoilBPoint;//[Offset: 0xd4, Size: 0x4]
	float VRecoilBPointMax;//[Offset: 0xd8, Size: 0x4]
	float VRecoilBPointMin;//[Offset: 0xdc, Size: 0x4]
	float HRecoilCostTime;//[Offset: 0xe0, Size: 0x4]
	int HRecoilAPoint;//[Offset: 0xe4, Size: 0x4]
	float HRecoilAPointMax;//[Offset: 0xe8, Size: 0x4]
	float HRecoilAPointMin;//[Offset: 0xec, Size: 0x4]
	int HRecoilBPoint;//[Offset: 0xf0, Size: 0x4]
	float HRecoilBPointMax;//[Offset: 0xf4, Size: 0x4]
	float HRecoilBPointMin;//[Offset: 0xf8, Size: 0x4]
	int RecoilCOP;//[Offset: 0xfc, Size: 0x4]
	float ADSRecoilCOP;//[Offset: 0x100, Size: 0x4]
	float RollCostTime;//[Offset: 0x104, Size: 0x4]
	int RollAPoint;//[Offset: 0x108, Size: 0x4]
	int RollBPoint;//[Offset: 0x10c, Size: 0x4]
	float RollHightestPointMax;//[Offset: 0x110, Size: 0x4]
	float RollHightestPointMin;//[Offset: 0x114, Size: 0x4]
	float RollLowesttPointMax;//[Offset: 0x118, Size: 0x4]
	float RollLowesttPointMin;//[Offset: 0x11c, Size: 0x4]
	float ADSRollCOP;//[Offset: 0x120, Size: 0x4]
	float ScopeRollCostTime;//[Offset: 0x124, Size: 0x4]
	int ScopeRollAPoint;//[Offset: 0x128, Size: 0x4]
	int ScopeRollBPoint;//[Offset: 0x12c, Size: 0x4]
	float ScopeRollHightestPointMax;//[Offset: 0x130, Size: 0x4]
	float ScopeRollHightestPointMin;//[Offset: 0x134, Size: 0x4]
	float ScopeRollLowesttPointMax;//[Offset: 0x138, Size: 0x4]
	float ScopeRollLowesttPointMin;//[Offset: 0x13c, Size: 0x4]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x140, Size: 0x4]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x144, Size: 0x4]
	float ScopeVVibrationDuration;//[Offset: 0x148, Size: 0x4]
	float ScopeHVibrationDuration;//[Offset: 0x14c, Size: 0x4]
	float CrossHairVibrationScale;//[Offset: 0x150, Size: 0x4]
	float ScopeVContinuousFallingDuration;//[Offset: 0x154, Size: 0x4]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x158, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_WeaponBattleUpgrade.SolarTableReaderBase.Object
	SolarTablesData_WeaponBattleUpgrade TryGetRowData(int Key, out bool HasKey);// 0x52c9312cd041
	bool HasRowKey(int Key);// 0x52c8312cd041
	bool HasColKey(FString Key);// 0x52c7312cd041
	FString GetTableName();// 0x52c6312cd041
	int GetRowKeys(out int[] OutKeys);// 0x52c5312cd041
	SolarTablesData_WeaponBattleUpgrade GetRowData(int Key);// 0x52c4312cd041
	int GetRowCount();// 0x52c3312cd041
	int GetDataNum();// 0x52c2312cd041
	FString[] GetColKeys();// 0x52c1312cd041
	int GetColCount();// 0x52c0312cd041

--------------------------------
Class: SolarTablesData_WeaponBattleUpgrade.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Exp;//[Offset: 0x10, Size: 0x4]
	int Retrofit;//[Offset: 0x14, Size: 0x4]
	int UpgradeCost;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_WeaponDefault.SolarTableReaderBase.Object
	SolarTablesData_WeaponDefault TryGetRowData(int Key, out bool HasKey);// 0x52dd312cd041
	bool HasRowKey(int Key);// 0x52dc312cd041
	bool HasColKey(FString Key);// 0x52db312cd041
	FString GetTableName();// 0x52da312cd041
	int GetRowKeys(out int[] OutKeys);// 0x52d9312cd041
	SolarTablesData_WeaponDefault GetRowData(int Key);// 0x52d8312cd041
	int GetRowCount();// 0x52d7312cd041
	int GetDataNum();// 0x52d6312cd041
	FString[] GetColKeys();// 0x52d5312cd041
	int GetColCount();// 0x52d4312cd041

--------------------------------
Class: SolarTablesData_WeaponDefault.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum AccessoryType1;//[Offset: 0x10, Size: 0x1]
	int[] SlotSubtype1;//[Offset: 0x18, Size: 0x10]
	int AccessoryID1;//[Offset: 0x28, Size: 0x4]
	enum AccessoryType2;//[Offset: 0x2c, Size: 0x1]
	int[] SlotSubtype2;//[Offset: 0x30, Size: 0x10]
	int AccessoryID2;//[Offset: 0x40, Size: 0x4]
	enum AccessoryType3;//[Offset: 0x44, Size: 0x1]
	int[] SlotSubtype3;//[Offset: 0x48, Size: 0x10]
	int AccessoryID3;//[Offset: 0x58, Size: 0x4]
	enum AccessoryType4;//[Offset: 0x5c, Size: 0x1]
	int[] SlotSubtype4;//[Offset: 0x60, Size: 0x10]
	int AccessoryID4;//[Offset: 0x70, Size: 0x4]
	enum AccessoryType5;//[Offset: 0x74, Size: 0x1]
	int[] SlotSubtype5;//[Offset: 0x78, Size: 0x10]
	int AccessoryID5;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_WeaponKillTip.SolarTableReaderBase.Object
	SolarTablesData_WeaponKillTip TryGetRowData(int Key, out bool HasKey);// 0x52e7312cd041
	bool HasRowKey(int Key);// 0x52e6312cd041
	bool HasColKey(FString Key);// 0x52e5312cd041
	FString GetTableName();// 0x52e4312cd041
	int GetRowKeys(out int[] OutKeys);// 0x52e3312cd041
	SolarTablesData_WeaponKillTip GetRowData(int Key);// 0x52e2312cd041
	int GetRowCount();// 0x52e1312cd041
	int GetDataNum();// 0x52e0312cd041
	FString[] GetColKeys();// 0x52df312cd041
	int GetColCount();// 0x52de312cd041

--------------------------------
Class: SolarTablesData_WeaponKillTip.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int KillTipType;//[Offset: 0x10, Size: 0x4]
	int KillTipValue;//[Offset: 0x14, Size: 0x4]
	FString KillTipIcon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText KillTipname;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_WeaponParts.SolarTableReaderBase.Object
	SolarTablesData_WeaponParts TryGetRowData(int Key, out bool HasKey);// 0x52f1312cd041
	bool HasRowKey(int Key);// 0x52f0312cd041
	bool HasColKey(FString Key);// 0x52ef312cd041
	FString GetTableName();// 0x52ee312cd041
	int GetRowKeys(out int[] OutKeys);// 0x52ed312cd041
	SolarTablesData_WeaponParts GetRowData(int Key);// 0x52ec312cd041
	int GetRowCount();// 0x52eb312cd041
	int GetDataNum();// 0x52ea312cd041
	FString[] GetColKeys();// 0x52e9312cd041
	int GetColCount();// 0x52e8312cd041

--------------------------------
Class: SolarTablesData_WeaponParts.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WeaponLevel;//[Offset: 0x10, Size: 0x4]
	enum PartsType;//[Offset: 0x14, Size: 0x1]
	<FString,FString> AttributeSub;//[Offset: 0x18, Size: 0x50]
	int PartsQuality;//[Offset: 0x68, Size: 0x4]
	FString PartsBPResource;//[Offset: 0x70, Size: 0x10]
	FString PartsIcon;//[Offset: 0x80, Size: 0x10]
	int EffectCondition;//[Offset: 0x90, Size: 0x4]
	int[] PartsEffect;//[Offset: 0x98, Size: 0x10]
	float[] PartsValue;//[Offset: 0xa8, Size: 0x10]
	int[] PartsWeaponID;//[Offset: 0xb8, Size: 0x10]
	int PartsName;//[Offset: 0xc8, Size: 0x4]
	FString[] PartsDesc;//[Offset: 0xd0, Size: 0x10]
	int WeaponPartDamage;//[Offset: 0xe0, Size: 0x4]
	int WeaponPartRateOfFire;//[Offset: 0xe4, Size: 0x4]
	int WeaponPartRecoil;//[Offset: 0xe8, Size: 0x4]
	int WeaponPartSpread;//[Offset: 0xec, Size: 0x4]
	int WeaponPartRange;//[Offset: 0xf0, Size: 0x4]
	int WeaponPartMobility;//[Offset: 0xf4, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_WeaponPartsOp.SolarTableReaderBase.Object
	SolarTablesData_WeaponPartsOp TryGetRowData(int Key, out bool HasKey);// 0x52fb312cd041
	bool HasRowKey(int Key);// 0x52fa312cd041
	bool HasColKey(FString Key);// 0x52f9312cd041
	FString GetTableName();// 0x52f8312cd041
	int GetRowKeys(out int[] OutKeys);// 0x52f7312cd041
	SolarTablesData_WeaponPartsOp GetRowData(int Key);// 0x52f6312cd041
	int GetRowCount();// 0x52f5312cd041
	int GetDataNum();// 0x52f4312cd041
	FString[] GetColKeys();// 0x52f3312cd041
	int GetColCount();// 0x52f2312cd041

--------------------------------
Class: SolarTablesData_WeaponPartsOp.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int EffectOperator;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_WeaponQuality.SolarTableReaderBase.Object
	SolarTablesData_WeaponQuality TryGetRowData(int Key, out bool HasKey);// 0x5305312cd041
	bool HasRowKey(int Key);// 0x5304312cd041
	bool HasColKey(FString Key);// 0x5303312cd041
	FString GetTableName();// 0x5302312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5301312cd041
	SolarTablesData_WeaponQuality GetRowData(int Key);// 0x5300312cd041
	int GetRowCount();// 0x52ff312cd041
	int GetDataNum();// 0x52fe312cd041
	FString[] GetColKeys();// 0x52fd312cd041
	int GetColCount();// 0x52fc312cd041

--------------------------------
Class: SolarTablesData_WeaponQuality.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Quality;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_SecondMode.SolarTableReaderBase.Object
	SolarTablesData_SecondMode TryGetRowData(int Key, out bool HasKey);// 0x5215312cd041
	bool HasRowKey(int Key);// 0x5214312cd041
	bool HasColKey(FString Key);// 0x5213312cd041
	FString GetTableName();// 0x5212312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5211312cd041
	SolarTablesData_SecondMode GetRowData(int Key);// 0x5210312cd041
	int GetRowCount();// 0x520f312cd041
	int GetDataNum();// 0x520e312cd041
	FString[] GetColKeys();// 0x520d312cd041
	int GetColCount();// 0x520c312cd041

--------------------------------
Class: SolarTablesData_SecondMode.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int UpperLimit;//[Offset: 0x10, Size: 0x4]
	float RestoreProgressPerSec;//[Offset: 0x14, Size: 0x4]
	float RestoreProgressPerKill;//[Offset: 0x18, Size: 0x4]
	float RestoreProgressPerDmg;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_WeaponSkin.SolarTableReaderBase.Object
	SolarTablesData_WeaponSkin TryGetRowData(int Key, out bool HasKey);// 0x530f312cd041
	bool HasRowKey(int Key);// 0x530e312cd041
	bool HasColKey(FString Key);// 0x530d312cd041
	FString GetTableName();// 0x530c312cd041
	int GetRowKeys(out int[] OutKeys);// 0x530b312cd041
	SolarTablesData_WeaponSkin GetRowData(int Key);// 0x530a312cd041
	int GetRowCount();// 0x5309312cd041
	int GetDataNum();// 0x5308312cd041
	FString[] GetColKeys();// 0x5307312cd041
	int GetColCount();// 0x5306312cd041

--------------------------------
Class: SolarTablesData_WeaponSkin.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WeaponSkinType;//[Offset: 0x10, Size: 0x4]
	FString WeaponSkillQuality;//[Offset: 0x18, Size: 0x10]
	int SortId;//[Offset: 0x28, Size: 0x4]
	int weaponid;//[Offset: 0x2c, Size: 0x4]
	FString WeaponSkinResource;//[Offset: 0x30, Size: 0x10]
	int WeaponSkinAquiredThru;//[Offset: 0x40, Size: 0x4]
	int JumpPage;//[Offset: 0x44, Size: 0x4]
	FString KillBroadcast;//[Offset: 0x48, Size: 0x10]
	int ShopPropertyid;//[Offset: 0x58, Size: 0x4]
	bool DisplayInWeaponry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	FString LobbyChunkDir;//[Offset: 0x60, Size: 0x10]
	int ChunkID;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: SolarTables_Reader_WeaponSound.SolarTableReaderBase.Object
	SolarTablesData_WeaponSound TryGetRowData(int Key, out bool HasKey);// 0x5323312cd041
	bool HasRowKey(int Key);// 0x5322312cd041
	bool HasColKey(FString Key);// 0x5321312cd041
	FString GetTableName();// 0x5320312cd041
	int GetRowKeys(out int[] OutKeys);// 0x531f312cd041
	SolarTablesData_WeaponSound GetRowData(int Key);// 0x531e312cd041
	int GetRowCount();// 0x531d312cd041
	int GetDataNum();// 0x531c312cd041
	FString[] GetColKeys();// 0x531b312cd041
	int GetColCount();// 0x531a312cd041

--------------------------------
Class: SolarTablesData_WeaponSound.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString Play_Fire_Auto_1P;//[Offset: 0x10, Size: 0x10]
	FString Play_Fire_Auto_3P;//[Offset: 0x20, Size: 0x10]
	FString Play_Fire_Auto_3P_Enemy;//[Offset: 0x30, Size: 0x10]
	FString Stop_Fire_Auto_1P;//[Offset: 0x40, Size: 0x10]
	FString Stop_Fire_Auto_3P;//[Offset: 0x50, Size: 0x10]
	FString Stop_Fire_Auto_3P_Enemy;//[Offset: 0x60, Size: 0x10]
	FString Play_Fire_Sigle_1P;//[Offset: 0x70, Size: 0x10]
	FString Play_Fire_Sigle_3P;//[Offset: 0x80, Size: 0x10]
	FString Play_Fire_Sigle_3P_Enemy;//[Offset: 0x90, Size: 0x10]
	FString Play_Fire_Burst_1P;//[Offset: 0xa0, Size: 0x10]
	FString Play_Fire_Burst_3P;//[Offset: 0xb0, Size: 0x10]
	FString Play_Fire_Burst_3P_Enemy;//[Offset: 0xc0, Size: 0x10]
	FString Stop_Fire_Burst_1P;//[Offset: 0xd0, Size: 0x10]
	FString Stop_Fire_Burst_3P;//[Offset: 0xe0, Size: 0x10]
	FString Stop_Fire_Burst_3P_Enemy;//[Offset: 0xf0, Size: 0x10]
	FString Play_FIRE_LAST_1P;//[Offset: 0x100, Size: 0x10]
	FString Play_FIRE_LAST_3P;//[Offset: 0x110, Size: 0x10]
	FString Play_FIRE_LAST_3P_Enemy;//[Offset: 0x120, Size: 0x10]
	FString Remain_Gun_RTPC_NAME;//[Offset: 0x130, Size: 0x10]
	FString Play_Skill_Cast_1P;//[Offset: 0x140, Size: 0x10]
	FString Play_Skill_Cast_3P;//[Offset: 0x150, Size: 0x10]
	FString Play_Skill_Cast_3P_Enemy;//[Offset: 0x160, Size: 0x10]
	FString Play_Fire_Lay_Tl_1P;//[Offset: 0x170, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P;//[Offset: 0x180, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P_Enemy;//[Offset: 0x190, Size: 0x10]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x1a0, Size: 0x10]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x1b0, Size: 0x10]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x1c0, Size: 0x10]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x1d0, Size: 0x10]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1e0, Size: 0x10]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1f0, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x200, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x210, Size: 0x10]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x220, Size: 0x10]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x230, Size: 0x10]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x240, Size: 0x10]
	FString Play_Fire_Overload_1P;//[Offset: 0x250, Size: 0x10]
	FString Play_Fire_Overload_3P;//[Offset: 0x260, Size: 0x10]
	FString Play_Fire_Overload_3P_Enemy;//[Offset: 0x270, Size: 0x10]
	FString Play_Reload_01_1P;//[Offset: 0x280, Size: 0x10]
	FString Play_Reload_01_3P;//[Offset: 0x290, Size: 0x10]
	FString Play_Reload_01_3P_Enemy;//[Offset: 0x2a0, Size: 0x10]
	FString Play_Reload_02_1P;//[Offset: 0x2b0, Size: 0x10]
	FString Play_Reload_02_3P;//[Offset: 0x2c0, Size: 0x10]
	FString Play_Reload_02_3P_Enemy;//[Offset: 0x2d0, Size: 0x10]
	FString Play_Reload_03_1P;//[Offset: 0x2e0, Size: 0x10]
	FString Play_Reload_03_3P;//[Offset: 0x2f0, Size: 0x10]
	FString Play_Reload_03_3P_Enemy;//[Offset: 0x300, Size: 0x10]
	FString Play_Bolt_1P;//[Offset: 0x310, Size: 0x10]
	FString Play_Bolt_3P;//[Offset: 0x320, Size: 0x10]
	FString Play_Bolt_3P_Enemy;//[Offset: 0x330, Size: 0x10]
	FString Play_Vehicle_Gun_On_3P;//[Offset: 0x340, Size: 0x10]
	FString Play_Vehicle_Gun_On_3P_Enemy;//[Offset: 0x350, Size: 0x10]
	FString Play_Vehicle_Gun_Loop_3P;//[Offset: 0x360, Size: 0x10]
	FString Play_Vehicle_Gun_Loop_3P_Enemy;//[Offset: 0x370, Size: 0x10]
	FString Play_Vehicle_Gun_Off_3P;//[Offset: 0x380, Size: 0x10]
	FString Play_Vehicle_Gun_Off_3P_Enemy;//[Offset: 0x390, Size: 0x10]
	FString Play_Fire_Auto_1P_Mute;//[Offset: 0x3a0, Size: 0x10]
	FString Play_Fire_Auto_3P_Mute;//[Offset: 0x3b0, Size: 0x10]
	FString Play_Fire_Auto_3P_Enemy_Mute;//[Offset: 0x3c0, Size: 0x10]
	FString Stop_Fire_Auto_1P_Mute;//[Offset: 0x3d0, Size: 0x10]
	FString Stop_Fire_Auto_3P_Mute;//[Offset: 0x3e0, Size: 0x10]
	FString Stop_Fire_Auto_3P_Enemy_Mute;//[Offset: 0x3f0, Size: 0x10]
	FString Play_Fire_Sigle_1P_Mute;//[Offset: 0x400, Size: 0x10]
	FString Play_Fire_Sigle_3P_Mute;//[Offset: 0x410, Size: 0x10]
	FString Play_Fire_Sigle_3P_Enemy_Mute;//[Offset: 0x420, Size: 0x10]
	FString Play_Fire_Burst_1P_Mute;//[Offset: 0x430, Size: 0x10]
	FString Play_Fire_Burst_3P_Mute;//[Offset: 0x440, Size: 0x10]
	FString Play_Fire_Burst_3P_Enemy_Mute;//[Offset: 0x450, Size: 0x10]
	FString Stop_Fire_Burst_1P_Mute;//[Offset: 0x460, Size: 0x10]
	FString Stop_Fire_Burst_3P_Mute;//[Offset: 0x470, Size: 0x10]
	FString Stop_Fire_Burst_3P_Enemy_Mute;//[Offset: 0x480, Size: 0x10]
	FString Play_Fire_Lay_Tl_1P_Mute;//[Offset: 0x490, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P_Mute;//[Offset: 0x4a0, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P_Enemy_Mute;//[Offset: 0x4b0, Size: 0x10]
	FString Play_Fire_Empty_1p;//[Offset: 0x4c0, Size: 0x10]
	FString Play_Fire_Empty_3p;//[Offset: 0x4d0, Size: 0x10]
	FString Play_Fire_Empty_3p_Enemy;//[Offset: 0x4e0, Size: 0x10]

--------------------------------
Class: SolarTables_Reader_WeaponStatu.SolarTableReaderBase.Object
	SolarTablesData_WeaponStatu TryGetRowData(int Key, out bool HasKey);// 0x532d312cd041
	bool HasRowKey(int Key);// 0x532c312cd041
	bool HasColKey(FString Key);// 0x532b312cd041
	FString GetTableName();// 0x532a312cd041
	int GetRowKeys(out int[] OutKeys);// 0x5329312cd041
	SolarTablesData_WeaponStatu GetRowData(int Key);// 0x5328312cd041
	int GetRowCount();// 0x5327312cd041
	int GetDataNum();// 0x5326312cd041
	FString[] GetColKeys();// 0x5325312cd041
	int GetColCount();// 0x5324312cd041

--------------------------------
Class: SolarTablesData_WeaponStatu.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float Stand;//[Offset: 0x10, Size: 0x4]
	float CrouchDown;//[Offset: 0x14, Size: 0x4]
	float Still;//[Offset: 0x18, Size: 0x4]
	float Run;//[Offset: 0x1c, Size: 0x4]
	float Spint;//[Offset: 0x20, Size: 0x4]
	float Jump;//[Offset: 0x24, Size: 0x4]
	float Fly;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: BP_Character_BattleRoyale_C.BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x25c8, Size: 0x8]
	delegate OnPlayerRevive;//[Offset: 0x25d0, Size: 0x10]
	ActorMarkBase* DeathBoxMark;//[Offset: 0x25e0, Size: 0x8]
	MapMarkBase*[] DeathBoxMiniMapMark;//[Offset: 0x25e8, Size: 0x10]
	int Index;//[Offset: 0x25f8, Size: 0x4]
	int UI_Relive_StartTime;//[Offset: 0x25fc, Size: 0x4]
	TimerHandle LandedDetectionHandel;//[Offset: 0x2600, Size: 0x8]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0x2608, Size: 0x8]
	<int,float> Level-Damage;//[Offset: 0x2610, Size: 0x50]
	void GetWeaponLevelDamageBonus(out float Result, bool Temp_bool_Variable, float Temp_float_Variable, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, int CallFunc_GetCurrentActiveSlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, float CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default);// 0x9de63154d001
	void Death Cleanup UI(SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue);// 0x9de53154d001
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x9de43154d001
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x9de33154d001
	void SetReviveCameraFade(float Time);// 0x9de23154d001
	void ReceiveBeginPlay();// 0x9de13154d001
	void Debug Set DayAndNightTime(float Time);// 0x9e633154d001
	void SetMapID(int MapID);// 0x9ded3154d001
	void Event_OnResBegin(int Time, byte Type, Vector Location, S_ResurrectInfo options);// 0x9dde3154d001
	void BeginPlayBlueprint();// 0x9ddd3154d001
	void OnCharacterEjectStateChanged(byte State);// 0x9ddc3154d001
	void ExecuteUbergraph_BP_Character_BattleRoyale(int EntryPoint, byte K2Node_Event_State, bool K2Node_SwitchEnum_CmpSuccess, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, float K2Node_Event_Time, float K2Node_CustomEvent_Time, GameInstance* CallFunc_GetGameInstance_ReturnValue, int K2Node_CustomEvent_MapID, bool CallFunc_IsValid_ReturnValue, SolarGameInstanceBase* K2Node_DynamicCast_AsSolar_Game_Instance_Base, bool K2Node_DynamicCast_bSuccess, SolarMapManager* CallFunc_GetSolarMapManager_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Location, S_ResurrectInfo K2Node_CustomEvent_Options, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, float CallFunc_GetCurBattleTime_ReturnValue, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, int CallFunc_FTrunc_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, S_SkillState K2Node_Select_Default);// 0xffffff8a312cd002
	void OnPlayerRevive__DelegateSignature(SolarCharacter* TargetCharacter);// 0xffffff8a312cd002

--------------------------------
Class: BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x25a0, Size: 0x8]
	class GameplayAbility[] DefaultAbilitiesExtra;//[Offset: 0x25a8, Size: 0x10]
	S_AiItem NewVar;//[Offset: 0x25b8, Size: 0xc]
	void GetWeaponLevelDamageBonus(out float Result, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, int CallFunc_GetCurrentActiveSlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x9bf73154d001
	byte [A]GetHealthState(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, bool CallFunc_IsDying_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, byte K2Node_Select_Default, byte K2Node_Select_Default);// 0x9bf63154d001
	bool [S]SkyDiveFly(Vector Location, float Height, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool Temp_bool_Variable, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, bool K2Node_Select_Default);// 0x9bf53154d001
	bool [S]Set Sky Dive State(bool CallFunc_TryActivateAbilityByClass_ReturnValue);// 0x9bf43154d001
	void OnCompleted_84F20D844D539263D5B45F9EDF867241(SolarPlayerWeapon* Weapon);// 0x9bf33154d001
	void OnCompleted_C9B9AA40496B70A95EF897A2092C6753(SolarPlayerWeapon* Weapon);// 0x9bf23154d001
	void OnCompleted_9F8149E84A6F3575574B32ADD8BF2960(SolarPlayerWeapon* Weapon);// 0x9bf13154d001
	void BeginPlayBlueprint();// 0x9bf03154d001
	void SetWeapon(byte Slot, int WeapoinId, out const WeaponPartsData Parts);// 0xad2f312cd041
	void BatchSetItem(out const S_AiItem[] ItemList);// 0xad2e312cd041
	void [s]GiveWeapon(const bool bDestroyPrevWeapon, const byte Slot, const int ItemID);// 0x9bed3154d001
	void ExecuteUbergraph_BP_Character_Framework(int EntryPoint, const byte Temp_byte_Variable, byte Temp_byte_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const int K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, SolarPlayerWeapon* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, SolarPlayerWeapon* Temp_object_Variable, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, const byte Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const byte Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const byte Temp_byte_Variable, const byte Temp_byte_Variable, const byte Temp_byte_Variable, byte Temp_byte_Variable, int Temp_int_Variable, const byte K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, const byte[] K2Node_MakeArray_Array, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_AddBackpackItem_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_SetWeaponPartByPartID_Success, FString CallFunc_Conv_BoolToString_ReturnValue, SolarPlayerWeapon* Temp_object_Variable, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Variable, class GameplayAbility CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameplayAbilitySpecHandle CallFunc_K2_GiveAbility_ReturnValue, byte K2Node_CustomEvent_Slot, int K2Node_CustomEvent_WeapoinId, const WeaponPartsData K2Node_CustomEvent_Parts, bool CallFunc_SetWeaponParts_ReturnValue, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, const S_AiItem[] K2Node_CustomEvent_ItemList, S_AiItem CallFunc_Array_Get_Item, S_AiItem CallFunc_Array_Get_Item, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, const bool K2Node_CustomEvent_bDestroyPrevWeapon, const byte K2Node_CustomEvent_Slot, const int K2Node_CustomEvent_ItemID, const <FString,FString> K2Node_MakeMap_Map, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x9beb3154d001

--------------------------------
Class: SolarGameModeWeaponAction.BlueprintAsyncActionBase.Object
	delegate OnCompleted;//[Offset: 0x30, Size: 0x10]
	SolarGameModeWeaponAction* SetCharacterWeaponBySeq(Object* WorldContextObject, SolarCharacter* TargetCharacter, const bool bDestroyPrevWeapon, const byte Slot, const int ItemID);// 0x4372312cd041
	void OnWeaponCreated(byte SlotIndex, SolarPlayerWeapon* WeaponPtr, SolarBackpackComponent* SolarBackpackComponent);// 0x4371312cd041
	void CreateWeaponAsync(const byte SlotIndex, bool bDestroyPrevWeapon, out const SolarItemData InItemData, SolarBackpackComponent* InSolarBackpackComponent);// 0x4370312cd041

--------------------------------
Class: S_ResurrectInfo
	bool bClearWeapons_8_85433FCD494E4E2DDCA2F6AB69D508C9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bClearAllItems_7_1B66870A49E70A4A31DBD1B93C1AE45D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bEmptyEnergy_9_422079A04E20412A0DD60594501D7D8C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bReChargeJetToFull_10_2649F2CB4F2A722D287E91848E966DBF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	enum ResurrectMethod_15_E3E0A84B479C7DB70DAAF88AAF99DA23;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: CFG_BattleRoyale_C.CFG_Framework_C.CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	int 水台最大等待时间                                                                            ;//[Offset: 0x1ec, Size: 0x4]
	int 开始战斗倒计时                                                                               ;//[Offset: 0x1f0, Size: 0x4]
	int 小队成员数量                                                                                  ;//[Offset: 0x1f4, Size: 0x4]
	BehaviorTree* AI行为树-水台                                                                                  ;//[Offset: 0x1f8, Size: 0x8]
	BehaviorTree* AI行为树-战斗-非队友                                                                        ;//[Offset: 0x200, Size: 0x8]
	BehaviorTree* AI行为树-战斗-队友                                                                           ;//[Offset: 0x208, Size: 0x8]
	int 最大玩家数                                                                                     ;//[Offset: 0x210, Size: 0x4]
	DataTable* 事件表                                                                                           ;//[Offset: 0x218, Size: 0x8]
	int AI难度                                                                                            ;//[Offset: 0x220, Size: 0x4]
	class SolarBotAIController* AIController;//[Offset: 0x228, Size: 0x8]
	bool 跳过跳伞流程                                                                                  ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	float 己方队伍展示时间                                                                            ;//[Offset: 0x234, Size: 0x4]
	float 捍卫者队伍展示时间                                                                         ;//[Offset: 0x238, Size: 0x4]
	int 终结者奖励                                                                                     ;//[Offset: 0x23c, Size: 0x4]
	int 缩圈次数                                                                                        ;//[Offset: 0x240, Size: 0x4]
	int 战斗开始时间                                                                                  ;//[Offset: 0x244, Size: 0x4]
	int 剩余队伍数量                                                                                  ;//[Offset: 0x248, Size: 0x4]
	int 胜利后等待时间                                                                               ;//[Offset: 0x24c, Size: 0x4]
	Int32Range 水台预生成AI数量范围                                                                       ;//[Offset: 0x250, Size: 0x10]
	Int32Range 开局所需玩家数范围                                                                         ;//[Offset: 0x260, Size: 0x10]
	float 毒圈高度                                                                                        ;//[Offset: 0x270, Size: 0x4]
	S_SkillState 水台技能设置                                                                                  ;//[Offset: 0x274, Size: 0x2]
	S_SkillState 巡航技能设置                                                                                  ;//[Offset: 0x276, Size: 0x2]
	<int,int> 开局发放道具                                                                                  ;//[Offset: 0x278, Size: 0x50]
	<int,int> 复活币复活时发放道具                                                                      ;//[Offset: 0x2c8, Size: 0x50]
	S_SkillState 跳伞落地技能设置                                                                            ;//[Offset: 0x318, Size: 0x2]
	S_SkillState 复活币技能设置                                                                               ;//[Offset: 0x31a, Size: 0x2]
	bool 跳过选人及捍卫者                                                                            ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	S_SkillState 买活技能设置                                                                                  ;//[Offset: 0x31d, Size: 0x2]

--------------------------------
Class: S_SkillState
	enum UniqueAbility_4_1687CEEF476DE16EEE6A42B53EC116E7;//[Offset: 0x0, Size: 0x1]
	enum TacticsAbility_5_36D081C34231A20607055BA95F67E65B;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: BP_PlayerState_BattleRoyale_C.BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xbc0, Size: 0x8]
	BPC_GM_BattleRoyal_C* BPC_GM_BattleRoyal;//[Offset: 0xbc8, Size: 0x8]
	BPC_BuyResurrection_C* BPC_BuyResurrection;//[Offset: 0xbd0, Size: 0x8]
	SolarUserWidget* DeathUI;//[Offset: 0xbd8, Size: 0x8]
	byte PlayerBattleState;//[Offset: 0xbe0, Size: 0x1]
	BP_Logic_BattleRoyale_C* MainLogic;//[Offset: 0xbe8, Size: 0x8]
	delegate OnRequestReplied;//[Offset: 0xbf0, Size: 0x10]
	int Intervened By AI;//[Offset: 0xc00, Size: 0x4]
	bool bFirstDive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc04, Size: 0x1]
	void GetResurrectLocation(out Vector Location, bool Temp_bool_Variable, enum Temp_byte_Variable, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger_Battle_Royale, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetFlyLocation_Location, Vector CallFunc_GetResurrectLocation_Location, Vector K2Node_Select_Default, Vector K2Node_Select_Default);// 0x186023154d008
	bool PlayerCanRebirthBlueprint(bool Temp_bool_Variable, bool Temp_bool_Variable, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_PlayerCanRebirthBlueprint_ReturnValue, bool CallFunc_IsPlayerReviving_ReturnValue, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, bool K2Node_Select_Default);// 0xbc0b312cd041
	bool PlayerIsResurrecting();// 0x9e843154d001
	bool IsPlayerWaitingForTeammatesHelp(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x9e833154d001
	static void GetItemData(int ItemID, out bool Valid, out int ID, out int Quality, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_Item CallFunc_GetRowData_ReturnValue);// 0x9e823154d001
	static void GetPlayerChestOpen(out FString Output, FString[] OutputString, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] K2Node_MakeArray_Array, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_GetItemData_Valid, int CallFunc_GetItemData_ID, int CallFunc_GetItemData_Quality, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9ebe3154d001
	void GetSinglePlayerItem(int ItemID, out bool HasItem, out int count, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByID_ItemData, bool CallFunc_GetBackpackItemDataByID_ReturnValue);// 0x9e803154d001
	static void GetWeaponPartData(int ItemID, out bool Valid, out int ID, out int Quality, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_WeaponParts CallFunc_GetRowData_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9e7f3154d001
	static void GetPlayerItems(out FString Output, FString[] OutputString, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] K2Node_MakeArray_Array, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetSinglePlayerItem_HasItem, int CallFunc_GetSinglePlayerItem_Count, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9e7e3154d001
	static void Get Player Accessories(out FString Output, FString[] OutputString, <IntPoint,int> Accessories, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, FString CallFunc_JoinStringArray_ReturnValue, int Temp_int_Variable, IntPoint[] CallFunc_Map_Keys_Keys, IntPoint CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_NotEqual_IntInt_ReturnValue, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_IsValid_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, int Temp_int_Variable, IntPoint K2Node_MakeStruct_IntPoint, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x9e7d3154d001
	static void GetPlayerDataTrace(out <FString,FString> Map, FString CallFunc_GetPlayerItems_Output, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Get_Player_Accessories_Output, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_GetCharacterLocation_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, <FString,FString> K2Node_MakeMap_Map);// 0x9e7c3154d001
	void Set Intervened By AI(int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue);// 0x9e7b3154d001
	FString[] GetBuyResurrectionSavedTeammateNameArr();// 0x9e7a3154d001
	FString[] GetBuyResurrectionSavedTeammateIDArr();// 0x9e793154d001
	int[] GetBuyResurrectionSavedTeammateBonusArr();// 0x9e783154d001
	static void GetNearestPos(byte Index, Vector Nearest, float Distance, Vector CLocation, byte Temp_byte_Variable, class Actor Temp_class_Variable, class Actor Temp_class_Variable, class Actor Temp_class_Variable, class Actor K2Node_Select_Default, Actor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, Actor* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x9e773154d001
	void GetMainLogic(out BP_Logic_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x9e763154d001
	void OnRep_PlayerBattleState(bool CallFunc_IsServer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x9e753154d001
	void [s]SetPlayerState(byte State);// 0x9e743154d001
	void ReceiveBeginPlay();// 0xb1653154d001
	void Event_RespondReconnection();// 0x9e733154d001
	void ResurrectionStateChange(byte State);// 0x9e723154d001
	void RequestNearestPos(byte Type);// 0x9e713154d001
	void OnNearestPosReceived(byte Type, Vector Pos);// 0xffffff87312cd000
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0xb17b3154d008
	void DelayAndBeginSpectate();// 0x9e6f3154d001
	void ExecuteUbergraph_BP_PlayerState_BattleRoyale(int EntryPoint, bool CallFunc_BeginSpectateOtherPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, bool CallFunc___A_Bind_On_Basic_System_Ready_bReady, bool CallFunc_IsServer_ReturnValue, byte K2Node_CustomEvent_State, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, byte K2Node_CustomEvent_Type, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Pos, int K2Node_Event_GainedExp, int K2Node_Event_CurrentExp, int K2Node_Event_TotalExp, enum K2Node_Event_BehaviorType, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xffffff87312cd000
	void OnRequestReplied__DelegateSignature(byte Type, Vector Pos);// 0xd8bf312cd041

--------------------------------
Class: BPC_GM_BattleRoyal_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	<byte,bool> ModeEventValid;//[Offset: 0xb8, Size: 0x50]
	BP_Logic_BattleRoyale_C* MainLogic;//[Offset: 0x108, Size: 0x8]
	byte CommandType;//[Offset: 0x110, Size: 0x1]
	FString[] CommandParams;//[Offset: 0x118, Size: 0x10]
	void 重新跳舱                                                                                        (Vector NewLocalVar, AirlineData AirlineData, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, S_PlayerStateInfo K2Node_MakeStruct_S_PlayerStateInfo, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, SolarCharacter*[] CallFunc__A_GetCharacters_Characters, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, SolarCharacter* CallFunc_Array_Get_Item, bool CallFunc_ResurrectCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue, BP_Mode_BattleRoyale_C* CallFunc_GetBattleRoyaleMode_AsBP_SCM_Battle_Royale, AirlineData K2Node_MakeStruct_AirlineData, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation);// 0x947c3154d001
	BP_Logic_BattleRoyale_C* GetMainLogic(bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x35312cd0ae
	void SetModeEventValid(byte EventType, bool IsValid);// 0x947a3154d001
	void [S]SetModeEvent(byte EventType, bool IsValid);// 0xffffffff7ee65800
	void [c]ExecuteGMCommand(byte Type, out const FString[] Params);// 0x946d3154d001
	void ExecuteUbergraph_BPC_GM_BattleRoyal(int EntryPoint, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte K2Node_CustomEvent_EventType, bool K2Node_CustomEvent_IsValid, enum CallFunc__S_GetBuildPackageType_____, byte Temp_byte_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, FString CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_ToBool_bool, byte Temp_byte_Variable, bool K2Node_Select_Default, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, bool CallFunc_MakeLiteralBool_ReturnValue, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, byte Temp_byte_Variable, int CallFunc_Conv_StringToInt_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, Vector2D CallFunc_Conv_StringToVector2D_OutConvertedVector2D, bool CallFunc_Conv_StringToVector2D_OutIsValid, bool K2Node_SwitchEnum_CmpSuccess, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, byte K2Node_CustomEvent_Type, const FString[] K2Node_CustomEvent_Params, byte Temp_byte_Variable, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_ReturnValue, byte K2Node_Select_Default);// 0xffffffff7ee644a0

--------------------------------
Class: AirlineData
	float AirlineHeight;//[Offset: 0x0, Size: 0x4]
	float AirlineSpeed;//[Offset: 0x4, Size: 0x4]
	Vector2D StartPoint;//[Offset: 0x8, Size: 0x8]
	Vector2D EndPoint;//[Offset: 0x10, Size: 0x8]
	Vector2D RealStartPoint;//[Offset: 0x18, Size: 0x8]
	Vector2D RealEndPoint;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: S_PlayerStateInfo
	FString[] Side_7_608261C648D30F47D7145DA1BAECF195;//[Offset: 0x0, Size: 0x10]
	FString[] Job_6_34C0F29E43512B15F222B087F36445E7;//[Offset: 0x10, Size: 0x10]
	enum[] State_11_86968F0643706CFA3C5E93B4E1F22EF6;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BP_Logic_BattleRoyale_C.BP_Logic_Framework_C.CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1a0, Size: 0x8]
	int WaitTime;//[Offset: 0x1a8, Size: 0x4]
	PlayerStart*[] WaitinglandStart;//[Offset: 0x1b0, Size: 0x10]
	BP_GameState_BattleRoyale_C* GameState;//[Offset: 0x1c0, Size: 0x8]
	delegate OnGoInToBattleState;//[Offset: 0x1c8, Size: 0x10]
	bool bWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	SolarTablesData_WarmGameMode WarmGameInfo;//[Offset: 0x1e0, Size: 0x50]
	DataTable* BattleTimeline;//[Offset: 0x230, Size: 0x8]
	<int,S_EventList_BattleRoyal> EventList;//[Offset: 0x238, Size: 0x50]
	BP_MapInfoComponent_C* MapInfo;//[Offset: 0x288, Size: 0x8]
	int ShrinkIndex;//[Offset: 0x290, Size: 0x4]
	BP_BattleRoylePoisonCircle_C* PoisonCircle;//[Offset: 0x298, Size: 0x8]
	BP_SolarBombingManager_C* BoomingManager;//[Offset: 0x2a0, Size: 0x8]
	byte ModeBattleState;//[Offset: 0x2a8, Size: 0x1]
	Vector[] AirDropPosHistoryRecord;//[Offset: 0x2b0, Size: 0x10]
	int AILevel;//[Offset: 0x2c0, Size: 0x4]
	int DSTime;//[Offset: 0x2c4, Size: 0x4]
	<byte,bool> ModeEventValid;//[Offset: 0x2c8, Size: 0x50]
	int TotalPlayer;//[Offset: 0x318, Size: 0x4]
	FString[] AliveSides;//[Offset: 0x320, Size: 0x10]
	SCMPlayerState*[] AlivePlayers;//[Offset: 0x330, Size: 0x10]
	BP_ReviveItemManger_BattleRoyale_C* ReviveManager;//[Offset: 0x340, Size: 0x8]
	BP_Formula_BattleRoyale_C* BR Formula Manager;//[Offset: 0x348, Size: 0x8]
	int TeamMemberCount;//[Offset: 0x350, Size: 0x4]
	BehaviorTree* BotBehaviorTree;//[Offset: 0x358, Size: 0x8]
	SCMPlayerState*[] PlayersQuitOnWaitingLand;//[Offset: 0x360, Size: 0x10]
	int PlayerCountMax;//[Offset: 0x370, Size: 0x4]
	bool bCanSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	class BP_BattleRoylePoisonCircle_C* PoisonCircleClass;//[Offset: 0x378, Size: 0x8]
	class SolarBotAIController* AIController;//[Offset: 0x380, Size: 0x8]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x388, Size: 0x8]
	float[] RadiusArr;//[Offset: 0x390, Size: 0x10]
	int AILevelMax;//[Offset: 0x3a0, Size: 0x4]
	delegate BattleStateChanged;//[Offset: 0x3a8, Size: 0x10]
	int PlayerCountBattleStart;//[Offset: 0x3b8, Size: 0x4]
	int ChestSpawnerID;//[Offset: 0x3bc, Size: 0x4]
	BPC_AiManagerBattleRoyale_C* AiManager;//[Offset: 0x3c0, Size: 0x8]
	void PresettleAll(int TeamRank, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, FString[] CallFunc_GetSideList_OutResult, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_SetDataBool_ReturnValue, bool CallFunc_SetDataInt_ReturnValue);// 0x9ea83154d001
	static void DealTeammateAISettle(SolarPlayerState* Player, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const FString[] K2Node_MakeArray_Array, bool CallFunc_SetDataBool_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9ee13154d001
	void Custom Room Start(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x9ee23154d001
	static void SendItemToPlayer(SolarPlayerState* Player, out const <int,int> ItemMap, int[] CallFunc_Map_Keys_Keys, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Left_ReturnValue, enum CallFunc_AddBackpackItem_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9ee03154d001
	static void GetVehicleDataTrace(out const <FString,FString> Map, int NewLocalVar, <int,int> VehicleData, FString[] CarNum, int Temp_int_Array_Index_Variable, SolarVehicleSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, Actor*[] CallFunc_GetActiveVehicleList_OutActiveVehicles, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_Array_Get_Item, SolarVehiclePawn* K2Node_DynamicCast_AsSolar_Vehicle_Pawn, bool K2Node_DynamicCast_bSuccess, class Actor CallFunc_GetObjectClass_ReturnValue, int CallFunc_GetVehicleTypeID_ReturnValue, Actor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_JoinStringArray_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Map_Contains_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x9edf3154d001
	static void Init Poison Circle(out BP_MapInfoComponent_C* MapInfo, bool CallFunc_IsValid_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, Vector CallFunc_Get_Safe_Area_Center_Pos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool Temp_bool_Variable, Vector CallFunc_MakeVector_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, int CallFunc__S_GetMapIDByName_MapID, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_BattleRoylePoisonCircle_C* CallFunc_FinishSpawningActor_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector K2Node_Select_Default);// 0x9ede3154d001
	void GetAiManager(out BPC_AiManagerBattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x9edd3154d001
	void SetSkillStateByBattleState(byte Temp_byte_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, bool K2Node_SwitchEnum_CmpSuccess, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, S_SkillState K2Node_Select_Default, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x9edc3154d001
	int Get Shrink Index(bool Temp_bool_Variable, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, int CallFunc_Get_Safe_Area_Centers_Len_Len, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int K2Node_Select_Default);// 0x9edb3154d001
	static void TryPushBattleState(byte TargetState, bool ForcePush, byte StateOld, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool Temp_bool_Variable, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc__A_GetBattleTime_Time, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, int CallFunc_Conv_Int64ToInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_JoinStringArray_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc__A_GetDSTime_Time, int CallFunc_Get_Current_Player_Count_Result, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool Temp_bool_Variable, byte Temp_byte_Variable, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Greater_ByteByte_ReturnValue);// 0x9eda3154d001
	void GetWeaponID(int ItemID, out int weaponid, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, const SolarTablesData_GunProperty CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue);// 0x9f303154d001
	void VehicleDataTrace(<FString,FString> CallFunc_GetVehicleDataTrace_Map);// 0x9ed83154d001
	void GetPlayerDataTrace(BP_PlayerState_BattleRoyale_C* Player, out <FString,FString> Map, int CallFunc_GetPlayerStatisticData_OutValue, int CallFunc_GetPlayerStatisticData_OutValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_GetPlayerItems_Output, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Get_Player_Accessories_Output, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_GetCharacterID_CharacterID, int CallFunc_GetCharacterID_SkinID, int CallFunc_GetCharacterID_ColorID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocationInSafeArea_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc_Clamp_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, Vector CallFunc_GetCharacterLocation_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, <FString,FString> K2Node_MakeMap_Map);// 0x9ed73154d001
	void KickOutExcessAI(BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_DeleteAIFromBattleForPlayer_ReturnValue, int K2Node_Copy_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Greater_IntInt_ReturnValue);// 0x9ed63154d001
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg, bool Temp_bool_Variable, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, FString Temp_string_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, FString Temp_string_Variable, FString K2Node_Select_Default);// 0x9ed53154d001
	void GetAiLevel(SolarPlayerState* Target, out int DefaultDifficultyLevel, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x9ed43154d001
	void Get Config(out CFG_BattleRoyale_C* CFG, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x9ed33154d001
	void DataTrace(const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SCMPlayerState*[] K2Node_MakeArray_Array);// 0x9ed23154d001
	void UpdatePlayerData(SolarPlayerState* Target, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_SetDataByte_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue);// 0x9ed13154d001
	void PreSettleDeal(SCMPlayerState* Player, enum OutType, bool Lamster, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool CallFunc_QuitImmediately_SendToSettle, bool CallFunc_IsLamster_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_IsSideAced_Aced, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_UpdateTeamData_bAced, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, bool K2Node_Select_Default, byte K2Node_Select_Default, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, SCMPlayerState*[] K2Node_MakeArray_Array, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool K2Node_Select_Default);// 0x9ed03154d001
	void Will Master Leaving Disband Room(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9ecf3154d001
	void Is Master Disbanding Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xb9fd3154d001
	void Is Kick Out Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9ecd3154d001
	void Is Side Switch Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9ecc3154d001
	void BuyResurrectionDeal(PlayerState* Player, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9ecb3154d001
	void UpdateWinnerData(FString Side, bool CallFunc_SetDataBool_ReturnValue, const FString[] K2Node_MakeArray_Array, bool CallFunc_SetDataBool_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue);// 0x9eca3154d001
	bool IsLamster(SCMPlayerState* Player, enum Index, bool Temp_bool_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0x9ec93154d001
	bool CanPlayerBattle(SCMPlayerState* Player, byte State, bool IsBot, bool CanRevive, bool Alive, bool Temp_bool_Variable, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_PlayerCanRebirth_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool Temp_bool_Variable, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue);// 0x9ec83154d001
	static void UpdateTeamData(FString Side, out bool bAced, bool Aced, const FString[] Temp_string_Variable, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, bool CallFunc_IsSideAced_Aced, bool CallFunc_Not_PreBool_ReturnValue, const enum[] Temp_byte_Variable, bool CallFunc_BooleanAND_ReturnValue, const FString[] K2Node_MakeArray_Array, bool CallFunc_SetDataBool_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x9ec73154d001
	void IsSideAced(FString Side, out bool Aced, const FString[] K2Node_MakeArray_Array, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9ec63154d001
	void GetConiReviveManager(out BP_ReviveItemManger_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue);// 0x9ec53154d001
	bool IsAllowReconnectGame(SCMPlayerState* InPC, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue);// 0x9ec43154d001
	void QuitImmediately(enum Index, SCMPlayerState* InputPin, out bool SendToSettle, bool ToSettle, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0x9ec33154d001
	void TempSpawnAIGroup(FString Side, int count, int AILevel, FString[] NewLocalVar, int CallFunc_GetRandomCharacter_Output, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int Temp_int_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SCMPlayerState* CallFunc_CreateBotAISingle_ReturnValue, enum CallFunc_GetPlayerPawn_outType, Pawn* CallFunc_GetPlayerPawn_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue);// 0x9ec23154d001
	static void Update Player Data Trace(SCMPlayerState* PlayerState, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, int CallFunc_GetAiLevel_DefaultDifficultyLevel, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_FTrunc_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, FString CallFunc_Conv_IntToString_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetConiReviveManager_Output_Get, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetPlayerForceJumped_ReturnValue, Vector CallFunc_GetPlayerLandLocation_Location, bool CallFunc_GetPlayerLandLocation_Succeed, FString CallFunc_Bool2String_String, FString CallFunc_Vector2String_Str, Vector CallFunc_GetPlayerEjectLocation_Location, bool CallFunc_GetPlayerEjectLocation_Succeed, FString CallFunc_Vector2String_Str, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_VectorArray2String_Str, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_VectorArray2String_Str, int CallFunc_GetZomborg_ReturnValue, int CallFunc_GetAccountExp_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x9ec13154d001
	static void Create Airdrop(int ChestID, Transform TempPos, bool DuplicateFlag, Transform[] TempAirDropPos, int Temp_int_Array_Index_Variable, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, FString CallFunc_Conv_VectorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int Temp_int_Loop_Counter_Variable, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, float CallFunc_GetTimeSeconds_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Transform[] CallFunc_GetSolarItemManagerAirDropRelatedInfo_TransformsArr, int CallFunc_GetSolarItemManagerAirDropRelatedInfo_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Transform CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x9ec03154d001
	void StartCruising(S_PlayerStateInfo K2Node_MakeStruct_S_PlayerStateInfo, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, SolarCharacter*[] CallFunc__A_GetCharacters_Characters, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, AirlineData CallFunc_GetAirline_Airline, int CallFunc_GetAirline_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue);// 0x9ebf3154d001
	void InitElements(Vector CallFunc_MakeVector_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_Formula_BattleRoyale_C* CallFunc_FinishSpawningActor_ReturnValue, BP_SolarBombingManager_C* CallFunc_FinishSpawningActor_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0xffffff87312cd000
	void Get Map Info(out BP_MapInfoComponent_C* MapInfo, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue);// 0x9ebd3154d001
	void Init Timeline Event(out DataTable* BattleTimeline, S_Event_BattleRoyale[] TempList, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_Array_Get_Item, S_Event_BattleRoyale CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_Array_Get_Item, S_Event_BattleRoyale CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, S_Event_BattleRoyale[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, S_EventList_BattleRoyal K2Node_MakeStruct_S_EventList_BattleRoyal, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, int Temp_int_Loop_Counter_Variable, const FString Temp_string_Variable, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, S_EventList_BattleRoyal K2Node_MakeStruct_S_EventList_BattleRoyal, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x9ebc3154d001
	static void ExecuteBattleEvent(out const S_Event_BattleRoyale S_Event_BattleRoyale, const FString Temp_string_Variable, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const FString Temp_string_Variable, int CallFunc_Conv_StringToInt_ReturnValue, const FString Temp_string_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const FString Temp_string_Variable, float CallFunc_Conv_StringToFloat_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, const FString Temp_string_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, bool Temp_bool_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const FString Temp_string_Variable, int CallFunc_Get_Shrink_Index_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Get_Shrink_Index_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, const FString[] Temp_string_Variable, Vector CallFunc_Random_Get_Fake_Bomb_Point_Pos, bool CallFunc_Random_Get_Fake_Bomb_Point_Success, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_Select_Default, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const FString Temp_string_Variable, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector CallFunc_Get_Safe_Area_Center_Pos, int CallFunc_Conv_StringToInt_ReturnValue);// 0x9ebb3154d001
	static void UpdateAliveSideAndPlayer(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc__S_UpdateSideCount_Current, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_UpdatePlayerCount_Current, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x9eba3154d001
	void UpdateBattleState(byte NewState, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_SetDataByte_ReturnValue, BP_GameState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Game_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x9eb93154d001
	void GetGameState(out BP_GameState_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Game_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x9eb83154d001
	void GetPlayerStartOnWaitingland(out PlayerStart*[] PlayerStarts, PlayerStart*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x9eb73154d001
	void GetBattleRoyaleMode(out BP_Mode_BattleRoyale_C* AsBP SCM Battle Royale, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Mode_BattleRoyale_C* K2Node_DynamicCast_AsBP_Mode_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x9eb63154d001
	static void InitModeSetting(SolarTablesData_WarmGameMode NewLocalVar, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetTeamPlayerCount_Num_Mode, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_RandomIntInRange_ReturnValue, int CallFunc_Clamp_ReturnValue, int K2Node_Select_Default, int CallFunc_GetAILevelCurrentMatch_ReturnValue, int CallFunc_GetWramGameType_ReturnValue, int K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc__S_PlayInEditor_bIsEditor, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, int K2Node_Select_Default);// 0x9eb53154d001
	void GMSpawnAI();// 0x9eb43154d001
	void OnMatchEnd(const int RPCID);// 0xffffff8a312cd002
	void OnBattleStateChanged(byte OldState, byte NewState);// 0x9eb33154d001
	void ReceiveBattleTick(float BattleTime, float DeltaTime);// 0x9eb23154d001
	void PreSettle(SCMPlayerState* Player, enum OutType);// 0x9d9c3154d001
	void PlayerBuyResurrected(BP_PlayerState_BattleRoyale_C* Player);// 0x9eb13154d001
	void BattleInitFinished();// 0x9da83154d001
	void OnDSClose();// 0x9d6c3154d001
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0xffffff8a312cd002
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x9d9b3154d001
	void MatchEnd();// 0x9eb03154d001
	void VehicleSnapshot();// 0x9eaf3154d001
	void Snapshot();// 0x9eae3154d001
	void CustomEvent();// 0x9ead3154d001
	void OnCountDownFinished();// 0x9eac3154d001
	void ExecuteUbergraph_BP_Logic_BattleRoyale(int EntryPoint, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, enum Temp_byte_Variable, int Temp_int_Variable, bool Temp_bool_IsClosed_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, enum Temp_byte_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, SCMPlayerState* CallFunc_Array_Get_Item, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, int CallFunc_Array_Length_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_IsValidIndex_ReturnValue, <FString,FString> CallFunc_GetPlayerDataTrace_Map, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_IsPackagedForDistribution_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, const int K2Node_Event_RPCId, byte K2Node_CustomEvent_OldState, byte K2Node_CustomEvent_NewState, int Temp_int_Variable, float K2Node_Event_BattleTime, float K2Node_Event_deltaTime, int CallFunc_FFloor_ReturnValue, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, SCMPlayerState* K2Node_Event_player, enum K2Node_Event_OutType, BP_PlayerState_BattleRoyale_C* K2Node_CustomEvent_Player, S_Event_BattleRoyale CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int64 CallFunc_GetFrameCount_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_Conv_Int64ToInt_ReturnValue, int CallFunc_UpdatePlayerCount_Current, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Abs_Int_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_UpdatePlayerCount_Current, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc__s_UpdateTeamCountMax_ReturnValue, int CallFunc__S_UpdateSideCount_Current, int64 CallFunc_GetFrameCount_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Conv_Int64ToInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_IsAI, int Temp_int_Variable, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc__S_SkyDiveFly_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, SCMPlayerState* K2Node_Event_player, enum K2Node_Event_OutType, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetWorldDeltaSeconds_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, int CallFunc_GetAIAccompanyTimelineID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_MapInfoComponent_C* CallFunc_Init_Poison_Circle_MapInfo, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue, enum Temp_byte_Variable, bool K2Node_Select_Default, enum K2Node_Select_Default, enum Temp_byte_Variable, bool K2Node_Select_Default, GameModeGlobalSetting* CallFunc_GetGameModeSetting_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, S_SkillState K2Node_Select_Default, byte Temp_byte_Variable, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, const Transform CallFunc_GetTransform_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int Temp_int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_HeroPickManager_C* K2Node_DynamicCast_AsBP_Hero_Pick_Manager, bool K2Node_DynamicCast_bSuccess, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, float CallFunc_GetWorldDeltaSeconds_ReturnValue, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue, byte Temp_byte_Variable, FString CallFunc_Array_Get_Item, bool K2Node_Select_Default, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, int CallFunc__s_UpdateTeamCountMax_ReturnValue, enum K2Node_Select_Default, float CallFunc_GetTotalTime_TotalTime, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_IsValidIndex_ReturnValue, <FString,FString> CallFunc_GetPlayerDataTrace_Map, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9ee43154d001
	void BattleStateChanged__DelegateSignature(byte NewState);// 0xffffff8a312cd002
	void OnGoInToBattleState__DelegateSignature();// 0xaf2d3154d001

--------------------------------
Class: BP_Logic_Framework_C.CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x130, Size: 0x8]
	delegate OnBattleStart;//[Offset: 0x138, Size: 0x10]
	delegate OnPlayerOut;//[Offset: 0x148, Size: 0x10]
	bool bBattleStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	bool bZeroMatchFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	delegate OnPlayerJoin;//[Offset: 0x160, Size: 0x10]
	delegate OnZeroMatchFinished;//[Offset: 0x170, Size: 0x10]
	bool bConfigInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	delegate OnConfigInitiated;//[Offset: 0x188, Size: 0x10]
	bool bUseNewAiComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	bool bDSClosing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 0x1]
	void Custom Room Start(const <FString,FString> K2Node_MakeMap_Map);// 0x787cef37a194d000
	void OnPlayerQuit(SCMPlayerState* Player, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, bool CallFunc_IsInPreparation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9dee3154d001
	static void PresettleAll(const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_HasSettled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x9df33154d008
	static void UpdateSidePlayerInfo(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, FString[] CallFunc_GetSideList_OutResult, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, const FString[] K2Node_MakeArray_Array, int CallFunc_Add_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x87733154d008
	void FinishConfigInitiate();// 0xffffffff08b43b40
	void Update();// 0x9ef43154d001
	static void Get Current Player Count(out int Result, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue);// 0x9ef33154d001
	void ReceiveBeginPlay();// 0x9ef23154d001
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x9ef13154d001
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x9ef03154d001
	void PreSettle(SCMPlayerState* Player, enum OutType);// 0x9eef3154d001
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x9eee3154d001
	void BattleInitFinished();// 0x9eed3154d001
	void ReceiveServerLevelLoaded(FString LevelName);// 0x9eec3154d001
	void ReceiveBattleBegin();// 0x9eeb3154d001
	void OnPlayerDisconnect(SCMPlayerState* OfflinePlayer);// 0x9eea3154d001
	void OnMatchEnd(const int RPCID);// 0x9ee93154d001
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x9ee83154d001
	void OnDSClose();// 0x9ee73154d001
	void OnPlayerCheat(SCMPlayerState* CheatPlayer);// 0x9ee63154d001
	static void ExecuteUbergraph_BP_Logic_Framework(int EntryPoint, SCMPlayerState* K2Node_Event_CheatPlayer, SCMPlayerState* K2Node_Event_OfflineTimeoutPlayer, SCMPlayerState* K2Node_Event_OfflineTimeoutPlayer, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SCMPlayerState* K2Node_CustomEvent_Player, enum K2Node_CustomEvent_OutType, SCMPlayerState* K2Node_Event_player, enum K2Node_Event_OutType, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, FString K2Node_Event_LevelName, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, SCMPlayerState* K2Node_Event_OfflinePlayer, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const int K2Node_Event_RPCId, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc__A_GetDSTime_Time, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_IsAI, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc__S_PlayInEditor_bIsEditor, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x9ee53154d001
	void OnConfigInitiated__DelegateSignature();// 0xffffff8a312cd002
	void OnZeroMatchFinished__DelegateSignature();// 0x9eab3154d001
	void OnPlayerJoin__DelegateSignature(SCMPlayerState* NewPlayer, bool bIsAi);// 0x323fde00
	void OnPlayerOut__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0xffffff8a312cd002
	void OnBattleStart__DelegateSignature();// 0x40dfff876ff99ccd

--------------------------------
Class: CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	float TimeOutSeconds;//[Offset: 0xcc, Size: 0x4]
	void ReceiveSpectatorJoinData(SCMPlayerState* Player);// 0x3d9c312cd041
	void ReceiveServerLevelLoaded(FString LevelName);// 0x3d9b312cd041
	bool ReceivePlayerTeamPreJoinRequest(out const SCMPlayerState*[] PreJoinPlayers, int TeamID);// 0x3d9a312cd041
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x3d99312cd041
	void ReceivePlayerReJoin(SCMPlayerState* NewPlayer);// 0x3d98312cd041
	void ReceivePlayerPreLogin(FString PlayerId, SCMPlayerState* OfflinePlayer, out FString ErrorMsg);// 0x3d97312cd041
	void ReceivePlayerNonSpectatorJoinData(SCMPlayerState* Player);// 0x3d96312cd041
	void ReceivePlayerLevelLoaded(SCMPlayerController* Player, FString LevelName);// 0x3d95312cd041
	void ReceivePlayerJoinData(FString PlayerId);// 0x3d94312cd041
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x3d93312cd041
	void ReceivePlayerJoin(SCMPlayerState* NewPlayer, bool IsAI);// 0x3d92312cd041
	void ReceivePlayerCancelJoin(FString PlayerId);// 0x3d91312cd041
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x3d90312cd041
	void ReceiveOBPlayersChanged();// 0x3d8f312cd041
	void ReceiveGameModeInit();// 0x3d8e312cd041
	void ReceiveBattleTick(float BattleTime, float DeltaTime);// 0x3d8d312cd041
	void ReceiveBattleEnd();// 0x3d8c312cd041
	void ReceiveBattleBegin();// 0x3d8b312cd041
	void OnStartBattle();// 0x3d8a312cd041
	void OnPlayerSettled(SCMPlayerState* Player);// 0x3d89312cd041
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x3d88312cd041
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x3d87312cd041
	void OnPlayerDisconnect(SCMPlayerState* OfflinePlayer);// 0x3d86312cd041
	void OnMatchEnd(const int RPCID);// 0x3d85312cd041
	void OnDSClose();// 0x3d84312cd041
	void OnBotAIDataReady(int AICount);// 0x3d83312cd041
	bool IsAllowReconnectGame(SCMPlayerState* InPC);// 0x3d82312cd041

--------------------------------
Class: CustomGameModeComponent.GameModeCompBase.ActorComponent.Object

--------------------------------
Class: BPC_PlayerManager_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	BP_PlayerState_Framework_C*[] AliveRealPlayers;//[Offset: 0xb8, Size: 0x10]
	BP_PlayerState_Framework_C*[] AliveAiPlayers;//[Offset: 0xc8, Size: 0x10]
	BPC_Death_Framework_C* DeathComponent;//[Offset: 0xd8, Size: 0x8]
	BP_PlayerState_Framework_C*[] RealPlayers;//[Offset: 0xe0, Size: 0x10]
	<FString,int> SideRealPlayerCount;//[Offset: 0xf0, Size: 0x50]
	BP_PlayerState_Framework_C*[] GetPlayerList(byte Type, byte Temp_byte_Variable, BP_PlayerState_Framework_C*[] K2Node_Select_Default);// 0x9f293154d001
	void ReceiveBeginPlay();// 0x9f283154d001
	void OnPlayerDie(BP_PlayerState_Framework_C* Player);// 0x9f273154d001
	void OnPlayerResurrect(BP_PlayerState_Framework_C* Player);// 0x9f263154d001
	void BattleStart();// 0x9f253154d001
	void PlayerOut(BP_PlayerState_Framework_C* Player);// 0xffffff87312cd000
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0xffffff8a312cd002
	static void ExecuteUbergraph_BPC_PlayerManager(int EntryPoint, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Array_Index_Variable, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Copy_ReturnValue, int K2Node_Select_Default, BP_PlayerState_Framework_C*[] K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, int CallFunc_Array_Add_ReturnValue, int Temp_int_Loop_Counter_Variable, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_Framework_C* CallFunc_GetComponentByClass_ReturnValue, BPC_Death_Framework_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* K2Node_CustomEvent_NewPlayer, bool K2Node_CustomEvent_bIsAi, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C*[] K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue);// 0xffffff8a312cd002

--------------------------------
Class: BPC_Death_Framework_C.CGMDeathComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd0, Size: 0x8]
	delegate OnPlayerDie;//[Offset: 0xd8, Size: 0x10]
	delegate OnPlayerResurrect;//[Offset: 0xe8, Size: 0x10]
	delegate OnPlayerKill;//[Offset: 0xf8, Size: 0x10]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x108, Size: 0x8]
	S_SkillState SkillStateAfterRevive;//[Offset: 0x110, Size: 0x2]
	static void GMRevive(SCMPlayerState* InKilled, out bool AutoRevive, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetLastDeathLocation_Output, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess);// 0x9ea13154d001
	void Try Buy Resurrect(SCMPlayerState* Player, SolarPointDamageEvent DamageEvent, out bool Succeed, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsOfflinePlayer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_Get_Alive_Team_Player_Num_Num, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x9ed93154d001
	bool CheckTerminator(SCMPlayerState* InKiller, SCMPlayerState* InKilled, BP_DefenderManager_C* CallFunc_GetDefenderManager_AsBP_Defender_Manager, bool CallFunc_UpdateCheckTerminator_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x9e9f3154d001
	void GetDefenderManager(out BP_DefenderManager_C* AsBP Defender Manager, bool CallFunc_IsValid_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0x9e9e3154d001
	static void UpdateDataTrace(byte Type, SCMPlayerState* Killer, SCMPlayerState* Killed, out const SolarPointDamageEvent DamageEvent, Actor* DamageCauser, <FString,FString> AdditionalData, int MoneyNum, <FString,FString> Temp, byte Temp_byte_Variable, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_DeathReason2String_TraceString, FText CallFunc_Conv_BoolToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_BoolToText_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString K2Node_Select_Default, FString Temp_string_Variable, int Temp_int_Array_Index_Variable, FString K2Node_Select_Default, FString CallFunc_Array_Get_Item, <FString,FString> K2Node_MakeMap_Map, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9e9d3154d001
	void ReceivePlayerKill(SCMPlayerState* Killer, SCMPlayerState* Killed, out const SCMPlayerState*[] Assists, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x9e9c3154d001
	void ReceivePlayerDeathVerge(SCMPlayerState* InAttacker, SCMPlayerState* InDeathVergePlayer, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x9e9b3154d001
	void ReceivePlayerResurrect(SolarCharacter* ResurrectCharacter, SCMPlayerState* ResurrectPlayer);// 0xffffff8a312cd002
	static void ExecuteUbergraph_BPC_Death_Framework(int EntryPoint, SCMPlayerState* K2Node_Event_Killer, SCMPlayerState* K2Node_Event_Killed, const SCMPlayerState*[] K2Node_Event_Assists, const SolarPointDamageEvent K2Node_Event_InDamageEvent, Actor* K2Node_Event_InDamageCauser, SCMPlayerState* K2Node_Event_InAttacker, SCMPlayerState* K2Node_Event_InDeathVergePlayer, const SolarPointDamageEvent K2Node_Event_InDamageEvent, Actor* K2Node_Event_InDamageCauser, bool CallFunc_CheckTerminator_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue, SolarCharacter* K2Node_Event_ResurrectCharacter, SCMPlayerState* K2Node_Event_ResurrectPlayer, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x9e8f3154d001
	void OnPlayerKill__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x9ea43154d001
	void OnPlayerResurrect__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0xffffff8a312cd002
	void OnPlayerDie__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x1149e3154d001

--------------------------------
Class: CGMDeathComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	void ReceivePlayerResurrect(SolarCharacter* ResurrectCharacter, SCMPlayerState* ResurrectPlayer);// 0x3d7a312cd041
	void ReceivePlayerKill(SCMPlayerState* Killer, SCMPlayerState* Killed, out const SCMPlayerState*[] Assists, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x3d79312cd041
	void ReceivePlayerDeathVerge(SCMPlayerState* InAttacker, SCMPlayerState* InDeathVergePlayer, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x3d78312cd041

--------------------------------
Class: BP_DefenderManager_C.DefenderManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b8, Size: 0x8]
	UI_OpeningShow_C* DefenderUI;//[Offset: 0x2c0, Size: 0x8]
	float ShowTime-Defender;//[Offset: 0x2c8, Size: 0x4]
	float ShowTime-Self;//[Offset: 0x2cc, Size: 0x4]
	byte UiState;//[Offset: 0x2d0, Size: 0x1]
	int TerminatorReward;//[Offset: 0x2d4, Size: 0x4]
	bool DataReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	UI_Common_Transition_Anim_C* Anim;//[Offset: 0x2e0, Size: 0x8]
	bool bBattleStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	void OnRep_BattleStarted();// 0x917d3154d001
	void DataTraceDefender(SolarPlayerState* Target, out FString Name, out FString Data, bool Temp_bool_Variable, bool CallFunc_IsTerminator_ReturnValue, bool CallFunc_IsDefender_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString K2Node_Select_Default, FString Temp_string_Variable, FString K2Node_Select_Default);// 0x917c3154d001
	void GetExtraReward(out int Reward);// 0x917b3154d001
	void SetShowTime(float ShowTime-Self, float ShowTime-Defender);// 0x917a3154d001
	void GetTotalTime(out float TotalTime, float CallFunc_Add_FloatFloat_ReturnValue);// 0x91793154d001
	static void GetUI(out UI_OpeningShow_C* Output_Get, const FString[] Temp_string_Variable, UserWidget* CallFunc__c_CreateWidget_WidgetObject, UI_OpeningShow_C* K2Node_DynamicCast_AsUI_Opening_Show, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, const enum[] Temp_byte_Variable, const FString[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x91783154d001
	static void OnRep_UIState(bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsPlayingReplay_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsOBPlayer_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Not_PreBool_ReturnValue);// 0x91773154d001
	void ReceiveBeginPlay();// 0x91763154d001
	void [S]ShowDefenderUI();// 0x91753154d001
	void OnUIStateChanged(byte UiState);// 0x924f3154d001
	void OnDefenderDataReady();// 0x91733154d001
	void ShowDefenderUIForReplay();// 0xaa163154d008
	void OnSideHeroPickEnd_Event(FString Side);// 0xebfd312cd041
	void CustomEvent(enum NewState);// 0x91703154d001
	static void ExecuteUbergraph_BP_DefenderManager(int EntryPoint, bool CallFunc_IsValid_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_HeroPickManager_C* K2Node_DynamicCast_AsBP_Hero_Pick_Manager, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_UIState, UI_OpeningShow_C* CallFunc_GetUI_Output_Get, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, const SCMPlayerState*[] CallFunc_GetDefenderList_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_OpeningShow_C* CallFunc_GetUI_Output_Get, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString K2Node_CustomEvent_Side, bool CallFunc_IsOBPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum CallFunc_GetInGameState_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, enum K2Node_CustomEvent_NewState, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue);// 0xaa123154d008

--------------------------------
Class: DefenderManager.GameManagerBase.Info.Actor.Object
	delegate OnRepDefenderListNotify;//[Offset: 0x228, Size: 0x10]
	TerminatorNotifyUIConfig TerminatorNotifyUIConfig;//[Offset: 0x238, Size: 0x28]
	class SolarTrailEffect* TrailEffect;//[Offset: 0x260, Size: 0x8]
	FString DefenderSide;//[Offset: 0x268, Size: 0x10]
	SCMPlayerState*[] DefenderList;//[Offset: 0x278, Size: 0x10]
	FString TerminatorPlayerId;//[Offset: 0x290, Size: 0x10]
	bool UpdateCheckTerminator(SCMPlayerState* InKiller, SCMPlayerState* InKilled);// 0x3ebb312cd041
	void StartConfirmDefender();// 0x3eba312cd041
	void ShowDefenderUIForReplay();// 0x3eb9312cd041
	void OnRep_DefenderList();// 0x3eb8312cd041
	bool IsTerminator(FString InSolarPlayerID);// 0x3eb7312cd041
	bool IsDefender(FString InPlayerSide);// 0x3eb6312cd041
	SCMPlayerState*[] GetDefenderList();// 0x3eb5312cd041

--------------------------------
Class: GameManagerBase.Info.Actor.Object

--------------------------------
Class: TerminatorNotifyUIConfig
	int LocalizationID;//[Offset: 0x0, Size: 0x4]
	class UINoticeBase* TerminatorNotifyUI;//[Offset: 0x18, Size: 0x8]
	enum NoticeType;//[Offset: 0x20, Size: 0x1]
	float NoticeTime;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarRichTextBlock* TextWidget;//[Offset: 0x340, Size: 0x8]
	Image* TxtBg;//[Offset: 0x348, Size: 0x8]
	Image* Icon;//[Offset: 0x350, Size: 0x8]
	Image* IconBg;//[Offset: 0x358, Size: 0x8]
	void ShowEnterAnimation();// 0x3d1c312cd041
	void SetIconBrush(FString IconPath);// 0x3d1b312cd041
	void SetColor(out const NoticeColorData InColorData);// 0x3d1a312cd041
	void ResetIsPlayingVoice(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x3d19312cd041
	WidgetAnimation* GetExitAnimation();// 0x3d18312cd041
	WidgetAnimation* GetEnterAnimation();// 0x3d17312cd041
	void DefaultClose();// 0x3d16312cd041
	void CloseNotice();// 0x3d15312cd041

--------------------------------
Class: NoticeColorData
	LinearColor TextBg;//[Offset: 0x0, Size: 0x10]
	LinearColor IconBg;//[Offset: 0x10, Size: 0x10]
	LinearColor Icon;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SolarRichTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	FText Text;//[Offset: 0x160, Size: 0x18]
	int LocTextID;//[Offset: 0x178, Size: 0x4]
	enum PreviewLang;//[Offset: 0x17c, Size: 0x1]
	DataTable* TextStyleSet;//[Offset: 0x180, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x188, Size: 0x10]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x1a0, Size: 0x2a0]
	float MinDesiredWidth;//[Offset: 0x440, Size: 0x4]
	bool bUsingAccurateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 0x1]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x6e8, Size: 0x10]
	void SetWrapTextAt(float InWrapTextAt);// 0x4de3312cd041
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x4de2312cd041
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x4de1312cd041
	void SetText(out const FText InText);// 0x4de0312cd041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x4ddf312cd041
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x4dde312cd041
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x4ddd312cd041
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x4ddc312cd041
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x4ddb312cd041
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x4dda312cd041
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x4dd9312cd041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x4dd8312cd041
	enum GetWrappingPolicy();// 0x4dd7312cd041
	DataTable* GetTextStyleSet();// 0x4dd6312cd041
	FText GetText();// 0x4dd5312cd041
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x4dd4312cd041
	void ClearAllDefaultStyleOverrides();// 0x4dd3312cd041

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x28]
	Vector2D ShadowOffset;//[Offset: 0x88, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x90, Size: 0x10]
	SlateColor SelectedBackgroundColor;//[Offset: 0xa0, Size: 0x28]
	LinearColor HighlightColor;//[Offset: 0xc8, Size: 0x10]
	SlateBrush HighlightShape;//[Offset: 0xd8, Size: 0x98]
	SlateBrush StrikeBrush;//[Offset: 0x170, Size: 0x98]
	SlateBrush UnderlineBrush;//[Offset: 0x208, Size: 0x98]

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: UI_OpeningShow_C.UIDefenderTeamShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x460, Size: 0x8]
	WidgetAnimation* Enter_Anim;//[Offset: 0x468, Size: 0x8]
	Image* de_img_Bg;//[Offset: 0x470, Size: 0x8]
	Image* Img_BG;//[Offset: 0x478, Size: 0x8]
	Image* Img_Flash_Left;//[Offset: 0x480, Size: 0x8]
	Image* Img_Flash_Right;//[Offset: 0x488, Size: 0x8]
	Image* Img_TitleBg;//[Offset: 0x490, Size: 0x8]
	Image* M_Glitch_Blue_Left;//[Offset: 0x498, Size: 0x8]
	Image* M_Glitch_Blue_Right;//[Offset: 0x4a0, Size: 0x8]
	Image* my_img_Bg;//[Offset: 0x4a8, Size: 0x8]
	Overlay* Overlay_Tip;//[Offset: 0x4b0, Size: 0x8]
	RichTextBlock* Txt_Tips;//[Offset: 0x4b8, Size: 0x8]
	SolarTextBlock* Txt_Title;//[Offset: 0x4c0, Size: 0x8]
	SolarTextBlock* Txt_Title;//[Offset: 0x4c8, Size: 0x8]
	SolarTextBlock* Txt_Title_VX;//[Offset: 0x4d0, Size: 0x8]
	enum BP_TeamType;//[Offset: 0x4d8, Size: 0x1]
	int TerminatorReward;//[Offset: 0x4dc, Size: 0x4]
	void UpdateOpeningShow(enum TeamType);// 0x90f13154d001
	void OnSolarUIOpened();// 0xaa6e3154d008
	void OnSolarUIClosed();// 0xaa7e3154d008
	void ExecuteUbergraph_UI_OpeningShow(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, enum K2Node_Event_TeamType, UIDefenderPlaerShowWidget*[] K2Node_MakeArray_Array, bool CallFunc_GreaterEqual_IntInt_ReturnValue, UIDefenderPlaerShowWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, enum K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue, int K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, int K2Node_Select_Default, bool CallFunc_Conv_IntToBool_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, LinearColor K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, LinearColor K2Node_Select_Default);// 0xffffffff492bdcc0

--------------------------------
Class: UIDefenderTeamShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x340, Size: 0x8]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x348, Size: 0x8]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x350, Size: 0x8]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x358, Size: 0x8]
	WidgetAnimation* Exit_Anim;//[Offset: 0x360, Size: 0x8]
	int PlayerNum;//[Offset: 0x368, Size: 0x4]
	bool bIsMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]
	FName LevelName;//[Offset: 0x370, Size: 0x8]
	FString ActorName;//[Offset: 0x378, Size: 0x10]
	FString ActorName;//[Offset: 0x388, Size: 0x10]
	FString ActorName;//[Offset: 0x398, Size: 0x10]
	FString ActorName;//[Offset: 0x3a8, Size: 0x10]
	FString CameraName;//[Offset: 0x3b8, Size: 0x10]
	FString CameraName;//[Offset: 0x3c8, Size: 0x10]
	FString CameraName;//[Offset: 0x3d8, Size: 0x10]
	FString CameraName;//[Offset: 0x3e8, Size: 0x10]
	SolarPlayerState*[] MyTeamPlayerState;//[Offset: 0x3f8, Size: 0x10]
	SolarPlayerState*[] DefenderTeamPlayerState;//[Offset: 0x408, Size: 0x10]
	UIDefenderPlaerShowWidget*[] ShowWidget;//[Offset: 0x418, Size: 0x10]
	Actor*[] OutActors;//[Offset: 0x428, Size: 0x10]
	SceneCapture2D*[] OutSceneCapture2Ds;//[Offset: 0x438, Size: 0x10]
	WidgetTransform[] Transforms;//[Offset: 0x448, Size: 0x10]
	void UpdateOpeningShow(enum TeamType);// 0x565e312cd041
	void SwitchTeamShow(enum TeamType);// 0x565d312cd041
	void ShowPlayerInfo();// 0x565c312cd041
	void SetMyTeamPlayerState(out const SolarPlayerState*[] TeamPlayerState);// 0x565b312cd041
	void SetDefenderTeamPlayerState(out const SolarPlayerState*[] TeamPlayerState);// 0x565a312cd041
	void CloseDefenderTeamShowWidget();// 0x5659312cd041

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x3806312cd041

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3811312cd041
	void SetPadding(Margin InPadding);// 0x3810312cd041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x380f312cd041

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x160, Size: 0x18]
	DataTable* TextStyleSet;//[Offset: 0x178, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x180, Size: 0x10]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x198, Size: 0x2a0]
	float MinDesiredWidth;//[Offset: 0x438, Size: 0x4]
	enum TextTransformPolicy;//[Offset: 0x43c, Size: 0x1]
	TextBlockStyle DefaultTextStyle;//[Offset: 0x440, Size: 0x2a0]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x6e0, Size: 0x10]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x37ef312cd041
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x37ee312cd041
	void SetText(out const FText InText);// 0x37ed312cd041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x37ec312cd041
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x37eb312cd041
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x37ea312cd041
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x37e9312cd041
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x37e8312cd041
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x37e7312cd041
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x37e6312cd041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x37e5312cd041
	FText GetText();// 0x37e4312cd041
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x37e3312cd041
	void ClearAllDefaultStyleOverrides();// 0x37e2312cd041

--------------------------------
Class: UIDefenderPlaerShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	ScaleBox* ScaleBox_Card;//[Offset: 0x340, Size: 0x8]
	FString playerName;//[Offset: 0x348, Size: 0x10]
	int Level;//[Offset: 0x358, Size: 0x4]
	int RankLevelID;//[Offset: 0x35c, Size: 0x4]
	int PlayerGender;//[Offset: 0x360, Size: 0x4]
	bool bIsMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	int PlayerSeat;//[Offset: 0x368, Size: 0x4]
	bool bIsMySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 0x1]
	int CardPose;//[Offset: 0x370, Size: 0x4]
	int Cardbackground;//[Offset: 0x374, Size: 0x4]
	ExpRankMedalData[] AllExpRankMedalData;//[Offset: 0x378, Size: 0x10]
	int CharacterExp;//[Offset: 0x388, Size: 0x4]
	MedalInfo[] TargetCardMedalArray;//[Offset: 0x390, Size: 0x10]
	SolarPlayerState* PlayerState;//[Offset: 0x3a0, Size: 0x8]
	SolarBusinessCardCharacter* RTCharacter;//[Offset: 0x3a8, Size: 0x8]
	Actor* RTCharacterBackground;//[Offset: 0x3b0, Size: 0x8]
	Vector RTLocation;//[Offset: 0x3b8, Size: 0xc]
	void SetPlayerShowInfo(SolarPlayerState* PS, bool bIsSelf, int Seat, bool bIsSelfTeam, int SelfLevel, Vector CardRTLocation);// 0x5658312cd041
	void SetPlayerBusinessInfo(FString ClanName, FString Name, int PlayerLevel, int PlayerAccountFlag, int PlayerRankLevel, int PlayerPlayerNumber, ExpRankMedalData ExpRankMedalData, int CharacterProficiencyExp, int CharacterId);// 0x5657312cd041
	void SetCharacterSkin();// 0x5656312cd041
	void SetBusinessCard(int PoseId, int BackgroundId, int SkinId, ScaleBox* ParentPanel);// 0x5655312cd041
	void OnRefreshWidget();// 0x5654312cd041
	FString GetNameCardCharacterPathByCharacterIDAndCardPose(int CharacterId, int CardPoseID);// 0x5653312cd041

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x149, Size: 0x1]
	byte StretchDirection;//[Offset: 0x14a, Size: 0x1]
	float UserSpecifiedScale;//[Offset: 0x14c, Size: 0x4]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	float IgnoreSlightScaleModificationPercent;//[Offset: 0x154, Size: 0x4]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x59bf312cd041
	void SetStretchDirection(byte InStretchDirection);// 0x59be312cd041
	void SetStretch(byte InStretch);// 0x59bd312cd041
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x59bc312cd041

--------------------------------
Class: SolarBusinessCardCharacter.Actor.Object
	void SetSkin(SkeletalMesh* LoadedSkinRes, MaterialInterface* LoadedCharaSkinRes);// 0x45a6312cd041

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x238, Size: 0x8]
	void OnInterpToggle(bool bEnable);// 0x6204312cd041

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x228, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 0x8]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x3a8, Size: 0x1]
	float FOVAngle;//[Offset: 0x3ac, Size: 0x4]
	float OrthoWidth;//[Offset: 0x3b0, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x3b8, Size: 0x8]
	bool bAutoSceneCapture2DSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	byte CompositeMode;//[Offset: 0x3c1, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x3d0, Size: 0x5a0]
	float PostProcessBlendWeight;//[Offset: 0x970, Size: 0x4]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x974, Size: 0x1]
	float CustomNearClippingPlane;//[Offset: 0x978, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97c, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x980, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x9c4, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x9d0, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9dc, Size: 0x1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9dc, Size: 0x1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9dd, Size: 0x1]
	bool bControlSceneCaptureComponent2DFPS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9de, Size: 0x1]
	int MaxSceneCaptureComponent2DFPS;//[Offset: 0x9e0, Size: 0x4]
	void CaptureScene();// 0x6206312cd041
	void AddOrUpdateBlendable(interface class_                                                                                                    InBlendableObject, float InWeight);// 0x6205312cd041

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x314, Size: 0x1]
	byte CaptureSource;//[Offset: 0x315, Size: 0x1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x316, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x316, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x318, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x328, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x338, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x348, Size: 0x10]
	float LODDistanceFactor;//[Offset: 0x358, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x35c, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x360, Size: 0x4]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x368, Size: 0x10]
	FString ProfilingEventName;//[Offset: 0x388, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x61dd312cd041
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x61dc312cd041
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x61db312cd041
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x61da312cd041
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x61d9312cd041
	void HideComponent(PrimitiveComponent* InComponent);// 0x61d8312cd041
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x61d7312cd041
	void ClearShowOnlyComponents();// 0x61d6312cd041
	void ClearHiddenComponents();// 0x61d5312cd041

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: UI_Common_Transition_Anim_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8]
	WidgetAnimation* Anim_Transition;//[Offset: 0x348, Size: 0x8]
	void OnSolarUIOpened();// 0xaa663154d008
	void ExecuteUbergraph_UI_Common_Transition_Anim(int EntryPoint, int CallFunc_StaticPostAkEventByName_ReturnValue, int CallFunc_StaticPostAkEventByName_ReturnValue);// 0x90f23154d001

--------------------------------
Class: BP_HeroPickManager_C.HeroPickManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x258, Size: 0x8]
	delegate OnAllHeroPickEnd;//[Offset: 0x260, Size: 0x10]
	delegate OnSideHeroPickEnd;//[Offset: 0x270, Size: 0x10]
	void ReceiveAllHeroPickEnd();// 0x91463154d001
	void ReceiveSidePickHeroEnd(FString SideName);// 0x91453154d001
	void ExecuteUbergraph_BP_HeroPickManager(int EntryPoint, FString K2Node_Event_SideName);// 0xaa6a3154d008
	void OnSideHeroPickEnd__DelegateSignature(FString Side);// 0xaa623154d008
	void OnAllHeroPickEnd__DelegateSignature();// 0xc91f3154d001

--------------------------------
Class: HeroPickManager.GameManagerBase.Info.Actor.Object
	HeroPickInfo*[] HeroPickArray;//[Offset: 0x228, Size: 0x10]
	float HeroPickTime;//[Offset: 0x238, Size: 0x4]
	float TransitionAnimTime;//[Offset: 0x23c, Size: 0x4]
	float WaitingToStartTime;//[Offset: 0x240, Size: 0x4]
	float WaitingForEndTime;//[Offset: 0x244, Size: 0x4]
	HeroPickRuleBase* AIPickRule;//[Offset: 0x248, Size: 0x8]
	bool bIsAllPlayerSelecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	bool SideBeginHeroPick(FString SideName);// 0x3f5c312cd041
	void SetHeroPickTime(float InHeroPickTime);// 0x3f5b312cd041
	void ReceiveSidePickHeroEnd(FString SideName);// 0x3f5a312cd041
	void ReceiveAllHeroPickEnd();// 0x3f59312cd041
	bool PlayerBeginHeroPick(SCMPlayerState* Player);// 0x3f58312cd041
	void On_RepAllPlayerSelectEnd();// 0x3f57312cd041
	void AllPlayersGotoPickHero();// 0x3f56312cd041

--------------------------------
Class: HeroPickRuleBase.Object

--------------------------------
Class: BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4e8, Size: 0x8]
	BPC_PlayerManager_C* PlayerManager;//[Offset: 0x4f0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4f8, Size: 0x8]
	delegate OnBasicSystemReady;//[Offset: 0x500, Size: 0x10]
	bool bBasicSystemReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 0x1]
	delegate OnSideListChanged;//[Offset: 0x518, Size: 0x10]
	delegate OnOBPlayerListChanged;//[Offset: 0x528, Size: 0x10]
	delegate OnRoomDataChanged;//[Offset: 0x538, Size: 0x10]
	delegate OnSidePosInteamChanged;//[Offset: 0x548, Size: 0x10]
	delegate OnSideDataPostChanged;//[Offset: 0x558, Size: 0x10]
	int WarmGameID;//[Offset: 0x568, Size: 0x4]
	delegate OnPlayerBattleStateChanged;//[Offset: 0x570, Size: 0x10]
	delegate OnGameStateChanged;//[Offset: 0x580, Size: 0x10]
	enum GameState;//[Offset: 0x590, Size: 0x1]
	FString GetModuleName();// 0x9f4f3154d001
	void OnRep_GameState();// 0x9f4e3154d001
	void SetGameState(enum NewState);// 0x9f4d3154d001
	void OnDataManagerPrepare();// 0x9f4c3154d001
	void ReceiveBeginPlay();// 0x9f4b3154d001
	void OnSideListChange(out const SCMSideData[] SideList);// 0x9f4a3154d001
	void OnOBPlayerListChange();// 0x9f493154d001
	void OnCustomRoomDataChange(out const CustomRoomData InCustomRoomData);// 0x9f483154d001
	void OnSidePosInTeamChange(FString SideName);// 0x9f473154d001
	void OnSideListPostChanged();// 0x9f463154d001
	void OnPlayerBattleStateChange(const SCMPlayerState* PlayerState);// 0x9f453154d001
	static void ExecuteUbergraph_BP_GameState_Framework(int EntryPoint, bool CallFunc_IsServer_ReturnValue, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FString Temp_string_Variable, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, const SCMSideData[] K2Node_Event_SideList, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString K2Node_Select_Default, const CustomRoomData K2Node_Event_InCustomRoomData, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString K2Node_Event_SideName, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString Temp_string_Variable, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsPlayingReplay_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetWramGameType_ReturnValue, const SCMPlayerState* K2Node_Event_PlayerState);// 0x9f443154d001
	void OnGameStateChanged__DelegateSignature(enum NewState);// 0x9f433154d001
	void OnPlayerBattleStateChanged__DelegateSignature(SCMPlayerState* Player);// 0x9f423154d001
	void OnSideDataPostChanged__DelegateSignature();// 0x9f403154d001
	void OnSidePosInteamChanged__DelegateSignature(FString SideName);// 0x9f323154d001
	void OnRoomDataChanged__DelegateSignature(CustomRoomData RoomData);// 0xffffff8a312cd002
	void OnOBPlayerListChanged__DelegateSignature();// 0xffffff8a312cd002
	void OnSideListChanged__DelegateSignature();// 0xffffff8a312cd002
	void OnBasicSystemReady__DelegateSignature();// 0xaf303154d008

--------------------------------
Class: SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	enum InGameState;//[Offset: 0x3e3, Size: 0x1]
	CustomRoomData CustomRoomData;//[Offset: 0x400, Size: 0x70]
	bool bCustomRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	GameManagerBase*[] GameManagers;//[Offset: 0x478, Size: 0x10]
	GameDataManager* GameDataManager;//[Offset: 0x488, Size: 0x8]
	GameJobManager* GameJobManager;//[Offset: 0x490, Size: 0x8]
	CGMManagerConfigComponent* ManagerConfigComponent;//[Offset: 0x4a8, Size: 0x8]
	CGFormula* InsFormula;//[Offset: 0x4b0, Size: 0x8]
	SolarPlayerState*[] PlayersWithTrackingAbility;//[Offset: 0x4b8, Size: 0x10]
	SpatializeInfoTrack*[] TrackInfos;//[Offset: 0x4c8, Size: 0x10]
	void SetRoomEnableSwapPos(bool bIsEnabled);// 0x19ab312cd041
	void SetRoomEnableInvite(bool bIsEnabled);// 0x19aa312cd041
	void OnTournamentBattleEnd();// 0x19a9312cd041
	void OnSidePosInTeamChange(FString SideName);// 0x19a8312cd041
	void OnSideListPostChanged();// 0x19a7312cd041
	void OnSideListChange(out const SCMSideData[] SideList);// 0x19a4312cd041
	void OnServerCustomRoomDataReady();// 0x19a3312cd041
	void OnRep_InGameState();// 0x19a2312cd041
	void OnRep_GameManagerList();// 0x19a1312cd041
	void OnRep_GameJobManager();// 0x19a0312cd041
	void OnRep_GameDataManager();// 0x199f312cd041
	void OnRep_CustomRoomData();// 0x199e312cd041
	void OnPlayerBattleStateChange(const SCMPlayerState* PlayerState);// 0x199d312cd041
	void OnOBPlayerListChange();// 0x199c312cd041
	void OnDataManagerPrepare();// 0x199b312cd041
	void OnCustomRoomDataChange(out const CustomRoomData InCustomRoomData);// 0x199a312cd041
	void MultiClientAllManagersOnRepDelegate__DelegateSignature();// 0x1999312cd041
	bool IsNeedCalculateTournamentPoints();// 0x1998312cd041
	bool IsInTournament();// 0x1997312cd041
	bool IsCustomRoomMode();// 0x1996312cd041
	bool IsAtNonSettlementStage();// 0x1995312cd041
	void InitKnockoutPointParams(out KnockoutParams InParams);// 0x1993312cd041
	TournamentData GetTournamentData();// 0x1992312cd041
	CGMManagerConfigComponent* GetManagerConfigComponent();// 0x1991312cd041
	CGFormula* GetFormula();// 0x1990312cd041
	CustomRoomData GetCustomRoomData();// 0x198b312cd041
	CGMGameplayConfig* GetCGMGameplayConfig();// 0x198a312cd041
	void ClearCustomRoomData();// 0x1989312cd041
	int CalculateKnockoutPoints(const int InTeamRank, const int InKillNum, const float InTotalDamage, const float InTotalDamageTaken);// 0x1988312cd041

--------------------------------
Class: SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	bool IsBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool IsBattleSettlement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	enum BattleEndType;//[Offset: 0x3e2, Size: 0x1]
	bool IsBattleOver();// 0x1987312cd041
	bool GetIsBattleSettlement();// 0x1986312cd041
	enum GetBattleEndType();// 0x1984312cd041

--------------------------------
Class: SCMSideData
	SCMPlayerState*[] SidePlayerList;//[Offset: 0x0, Size: 0x10]
	SCMJobData[] JobMap;//[Offset: 0x10, Size: 0x10]
	delegate OnPlayerJoinSideEvent;//[Offset: 0x20, Size: 0x10]
	delegate OnPlayerQuitSideEvent;//[Offset: 0x30, Size: 0x10]
	FString SideName;//[Offset: 0x40, Size: 0x10]
	byte TeamID;//[Offset: 0x50, Size: 0x1]
	int AssignableNum;//[Offset: 0x54, Size: 0x4]
	bool IsSideSettle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: SCMJobData
	FString JobName;//[Offset: 0x0, Size: 0x10]
	int MaxCount;//[Offset: 0x10, Size: 0x4]
	int MatchCount;//[Offset: 0x14, Size: 0x4]
	int CurrentMatchCount;//[Offset: 0x18, Size: 0x4]
	SCMPlayerState*[] JobPlayerList;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: GameDataManager.GameManagerBase.Info.Actor.Object
	int[] IntegerValues;//[Offset: 0x228, Size: 0x10]
	float[] FloatValues;//[Offset: 0x238, Size: 0x10]
	byte[] ByteValues;//[Offset: 0x248, Size: 0x10]
	bool[] BoolValues;//[Offset: 0x258, Size: 0x10]
	Vector[] FVectorValues;//[Offset: 0x268, Size: 0x10]
	FString[] FStringValues;//[Offset: 0x278, Size: 0x10]
	SCMHostData GlobalDataMap;//[Offset: 0x2e8, Size: 0x488]
	<FString,SCMHostData> SideDataMap;//[Offset: 0x770, Size: 0x50]
	<FString,SCMHostData> PlayerDataMap;//[Offset: 0x7c0, Size: 0x50]
	SCMHostData SideDataDefaultTemplate;//[Offset: 0x810, Size: 0x488]
	SCMHostData PlayerDataDefaultTemplate;//[Offset: 0xc98, Size: 0x488]
	<FString,Rank*> RanKMap;//[Offset: 0x1120, Size: 0x50]
	DataTable* DataTable;//[Offset: 0x1190, Size: 0x8]
	DataTable* GeneralDataTable;//[Offset: 0x1198, Size: 0x8]
	void RemoveHost(enum HostType, FString HostID);// 0x3ed5312cd041
	void RemoveData(enum HostType, FString HostID, FString DataName, enum DataSetType);// 0x3ed4312cd041
	void NotifyRemoveHost(enum HostType, FString HostID);// 0x3ed3312cd041
	void AddDataByTableRow(FName RowName, out const SCMDataBoardRow InTableRow);// 0x3ed2312cd041

--------------------------------
Class: SCMHostData
	HostChangeData DataChangeToGlobal;//[Offset: 0x0, Size: 0xf0]
	HostChangeData DataChangeToSide;//[Offset: 0xf0, Size: 0xf0]
	HostChangeData DataChangeToSelf;//[Offset: 0x1e0, Size: 0xf0]
	<FString,SCMSaveData> DataMap;//[Offset: 0x2d0, Size: 0x50]
	<FString,SCMArrayData> ArrayDataMap;//[Offset: 0x320, Size: 0x50]
	<FString,SCMMapData> MapDataMap;//[Offset: 0x370, Size: 0x50]
	delegate SCMDataChangeDelegate;//[Offset: 0x460, Size: 0x10]
	FString Name;//[Offset: 0x470, Size: 0x10]
	enum HostType;//[Offset: 0x480, Size: 0x1]

--------------------------------
Class: HostChangeData
	<FString,enum> DataChangeMap;//[Offset: 0x0, Size: 0x50]
	<FString,SCMChangeDataArray> ArrayChangeMap;//[Offset: 0x50, Size: 0x50]
	<FString,SCMChangeDataMap> MapChangeMap;//[Offset: 0xa0, Size: 0x50]

--------------------------------
Class: SCMChangeDataArray
	enum[] ChangeType;//[Offset: 0x0, Size: 0x10]
	uint32[] ChangeIndexArray;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SCMChangeDataMap
	enum[] ChangeType;//[Offset: 0x0, Size: 0x10]
	FString[] ChangeKeyArray;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SCMSaveData.SCMSaveDataBase

--------------------------------
Class: SCMSaveDataBase
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum RepType;//[Offset: 0x11, Size: 0x1]

--------------------------------
Class: SCMArrayData.SCMSaveDataBase

--------------------------------
Class: SCMMapData.SCMSaveDataBase

--------------------------------
Class: SCMDataBoardRow.TableRowBase
	enum Type;//[Offset: 0x8, Size: 0x1]
	enum DataSetType;//[Offset: 0x9, Size: 0x1]
	FString Default;//[Offset: 0x10, Size: 0x10]
	FString[] DefaultArray;//[Offset: 0x20, Size: 0x10]
	<FString,FString> DefaultMap;//[Offset: 0x30, Size: 0x50]
	enum HostType;//[Offset: 0x80, Size: 0x1]
	enum ReplicateType;//[Offset: 0x81, Size: 0x1]
	enum SettleGatherType;//[Offset: 0x82, Size: 0x1]
	enum Rank;//[Offset: 0x83, Size: 0x1]

--------------------------------
Class: Rank.Object
	<uint32,SpecificRankChangeEventMap(MulticastInlineDelegateProperty)> SpecificRankChangeEventMap;//[Offset: 0x28, Size: 0x50]
	SCMRankListMulticast[] RankListChangeMulticasts;//[Offset: 0x78, Size: 0x10]
	enum RankType;//[Offset: 0xa8, Size: 0x1]
	enum HostType;//[Offset: 0xa9, Size: 0x1]

--------------------------------
Class: SCMRankListMulticast
	int BeginRank;//[Offset: 0x0, Size: 0x4]
	int EndRank;//[Offset: 0x4, Size: 0x4]
	delegate RankListChangeMulticast;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: GameJobManager.GameManagerBase.Info.Actor.Object
	delegate SideListChangeEvent;//[Offset: 0x228, Size: 0x10]
	SCMSideData[] SideData;//[Offset: 0x238, Size: 0x10]
	SCMSideData[] AttrData;//[Offset: 0x248, Size: 0x10]
	<FString,uint32> SideIndexMap;//[Offset: 0x258, Size: 0x50]
	<FString,SCMPlayerState*> PlayerIndexMap;//[Offset: 0x2a8, Size: 0x50]
	SCMPlayerState*[] OBPlayerList;//[Offset: 0x2f8, Size: 0x10]
	DataTable* JobDataTable;//[Offset: 0x328, Size: 0x8]
	SideAttributeSetArray SideAttributeSets;//[Offset: 0x330, Size: 0x120]
	bool UnBindPlayerQuitSideEvent(FString TargetSide, out const delegate InEvent);// 0x2257312cd041
	bool UnBindPlayerJoinSideEvent(FString TargetSide, out const delegate InEvent);// 0x2256312cd041
	bool SwitchPlayerSideAndJob(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x2255312cd041
	bool SwitchPlayers(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x2254312cd041
	bool SwitchPlayerPosInTeam(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x2253312cd041
	bool SwitchOBPlayerAndPlayer(SCMPlayerState* OBPlayer, SCMPlayerState* Player);// 0x2252312cd041
	void SideListChangeEvent__DelegateSignature(out const SCMSideData[] SideList);// 0x2251312cd041
	void SetTimerToNoticeSideDataChanged();// 0x2250312cd041
	void ServerSidePosInTeamChange(FString SideName);// 0x224f312cd041
	void RenumberAllPlayerPosInTeam();// 0x224e312cd041
	bool PreAssignOBToPlayer(SCMPlayerState* Player);// 0x224d312cd041
	bool PreAssignJobToPlayer(SCMPlayerState* Player, FString Side, FString Job, int PosInTeam);// 0x224c312cd041
	void OnRep_SideDataList();// 0x224b312cd041
	void OnRep_OBPlayerList();// 0x224a312cd041
	void OnPlayerStateEndPlay(Actor* PlayerState, byte EndPlayReason);// 0x2249312cd041
	void OnOBPlayerListChanged(SCMPlayerState* ChangedPlayer);// 0x2248312cd041
	bool IsPlayerSameTeam(SCMPlayerState* TargetPlayer, FString TargetPlayerID);// 0x2247312cd041
	bool IsExistSideJob(FString NewSide, FString JobName);// 0x2246312cd041
	bool IsExistSide(FString NewSide);// 0x2245312cd041
	bool IsEmptyPosInTeam(FString SideName, const int PosInTeam);// 0x2244312cd041
	int[] GetTeamAssignableNumArray();// 0x2243312cd041
	bool GetSidePreJoinPlayerList(FString SideName, out SCMPlayerState*[] OutPreJoinPlayerList);// 0x2242312cd041
	bool GetSidePlayerList(FString SideName, out SCMPlayerState*[] OutPlayerList);// 0x2241312cd041
	bool GetSideJobPlayerList(FString SideName, FString JobName, out SCMPlayerState*[] OutPlayerList);// 0x2240312cd041
	bool GetSideData(FString InSideName, out SCMSideData outData);// 0x223f312cd041
	bool GetSideAttributeSet(out SideAttributeSet OutSet, FString InSideName);// 0x223c312cd041
	bool GetPreOBPlayerIDList(out FString[] OutPlayerIDList);// 0x223b312cd041
	SCMPlayerState* GetPlayerByPosInTeam(FString Side, const byte PosInTeam);// 0x223a312cd041
	SCMPlayerState* GetPlayerByPlayerID(FString InPlayerID);// 0x2239312cd041
	bool GetOBPlayerList(out SCMPlayerState*[] OutPlayerList);// 0x2238312cd041
	bool GetJobDataBySideAndJob(FString NewSide, FString NewJob, out SCMJobData outData);// 0x2237312cd041
	int GetAssignedSideCount();// 0x2236312cd041
	int GetAllSidePlayerNumber();// 0x2235312cd041
	SCMSideData[] GetAllSideData();// 0x2234312cd041
	bool FindEmptyPosInTeam(FString SideName, out int OutPosInTeam);// 0x2233312cd041
	bool ChangePlayerToOB(SCMPlayerState* Player);// 0x2232312cd041
	bool ChangePlayerPosInTeam(SCMPlayerState* Player, int PosInTeam);// 0x2231312cd041
	bool ChangePlayerJob(SCMPlayerState* Player, FString NewSide, FString NewJob, int PosInTeam);// 0x2230312cd041
	bool BindPlayerQuitSideEvent(FString TargetSide, out const delegate InEvent);// 0x222f312cd041
	bool BindPlayerJoinSideEvent(FString TargetSide, out const delegate InEvent);// 0x222e312cd041

--------------------------------
Class: SideAttributeSetArray.FastArraySerializer
	SideAttributeSet[] AttributeSets_Internal;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: CGMManagerConfigComponent.SolarGameplayConfigComponent.ActorComponent.Object

--------------------------------
Class: SolarTrailEffect.Actor.Object
	FName AttachSocket;//[Offset: 0x228, Size: 0x8]
	void OnFinished();// 0x4760312cd041

--------------------------------
Class: BPC_BuyResurrection_C.SolarResurrectionComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb8, Size: 0x8]
	UI_BuyResurrectionPanel_C* UI_BuyResurrectionPanel;//[Offset: 0xc0, Size: 0x8]
	BP_DI_DeathBoxA_TreasureBox_C* DeathBoxRef;//[Offset: 0xc8, Size: 0x8]
	Vector DeathBoxLoc;//[Offset: 0xd0, Size: 0xc]
	byte State;//[Offset: 0xdc, Size: 0x1]
	int WaitingTime;//[Offset: 0xe0, Size: 0x4]
	float ReturnRatio;//[Offset: 0xe4, Size: 0x4]
	float StartTime;//[Offset: 0xe8, Size: 0x4]
	delegate NewStateChange;//[Offset: 0xf0, Size: 0x10]
	int NumberOfApplications;//[Offset: 0x100, Size: 0x4]
	bool bDeductedOnlyOnceFalg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int TeammateSalary;//[Offset: 0x108, Size: 0x4]
	int ItemID;//[Offset: 0x10c, Size: 0x4]
	SolarCharacter* HelpYourTeammates;//[Offset: 0x110, Size: 0x8]
	int CompLimitedTime;//[Offset: 0x118, Size: 0x4]
	int PurchasesNum;//[Offset: 0x11c, Size: 0x4]
	SCMPlayerState* WaitingResurrectedPlayer;//[Offset: 0x120, Size: 0x8]
	Vector CharacterFlyOffset;//[Offset: 0x128, Size: 0xc]
	bool DelayFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	TimerHandle DelaySetTimeOutHandle;//[Offset: 0x138, Size: 0x8]
	float BP_SI_RebornLine_Life;//[Offset: 0x140, Size: 0x4]
	int SaveTeammatesNum;//[Offset: 0x144, Size: 0x4]
	int ZomborgNum;//[Offset: 0x148, Size: 0x4]
	FString[] SavedTeammateIDArr;//[Offset: 0x150, Size: 0x10]
	int[] SavedTeammateBonusArr;//[Offset: 0x160, Size: 0x10]
	TimerHandle EndJudgmentHander;//[Offset: 0x170, Size: 0x8]
	FString[] SavedTeammateNameArr;//[Offset: 0x178, Size: 0x10]
	BP_ReviveItemManger_BattleRoyale_C* ReviveItemManger;//[Offset: 0x188, Size: 0x8]
	SolarCharacter* NoneVal;//[Offset: 0x190, Size: 0x8]
	int SuccessTime;//[Offset: 0x198, Size: 0x4]
	bool TimeLimitDoOnceFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 0x1]
	bool BuyResurrectionSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d, Size: 0x1]
	float TimeoutAccTime;//[Offset: 0x1a0, Size: 0x4]
	bool bIsTimeoutCountDownPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1]
	delegate TimeoutCountDownStateChanged;//[Offset: 0x1a8, Size: 0x10]
	TimerHandle DelayPauseTimeoutHandle;//[Offset: 0x1b8, Size: 0x8]
	float ResurrectionClutchTime;//[Offset: 0x1c0, Size: 0x4]
	float RemindTeammateEffectCooldown;//[Offset: 0x1c4, Size: 0x4]
	float BuyResurrectionInvincibleTime;//[Offset: 0x1c8, Size: 0x4]
	FString GetModuleName();// 0x94633154d001
	void Get Death Box Loc(out Vector Loc, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SolarGameInstanceBase* CallFunc_GetSolarGameInstanceBase_ReturnValue, SolarItemManager* CallFunc_GetSolarItemManager_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_FindPosForDropItem_FindTargetPos, bool CallFunc_FindPosForDropItem_ReturnValue, bool CallFunc_Vector_IsZero_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x94623154d001
	void Set Death Box Ref(BP_DI_DeathBoxA_TreasureBox_C* InDeathbox, Vector CallFunc_Vector_Zero_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x94613154d001
	void OnRep_bIsTimeoutCountDownPaused(bool CallFunc_IsServer_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x94603154d001
	void RefreshUI(bool CallFunc_IsServer_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x945f3154d001
	void OnRep_CompLimitedTime(float CallFunc_GetCurBattleTime_ReturnValue, float CallFunc_GetCurBattleTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_GreaterEqual_IntInt_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x945e3154d001
	void Get Wait Time Remaining(out int RemainTime, float CallFunc_GetCurBattleTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue);// 0x146bc3154d001
	SCMPlayerState*[] GetTeammatesArr(const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x945c3154d001
	void On All Teammates Killed(int Temp_int_Array_Index_Variable, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FText CallFunc_Conv_ObjectToText_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x945b3154d001
	void Get Alive Team Player Num(SCMPlayerState* OutPlayer, out int Num, int NumberOfSurvivingTeammates, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, bool CallFunc___A_Is_Player_Reviving_Reviving, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xa95c3154d008
	void Get the number of purchases(out int PurchasesNum);// 0x94593154d001
	void OnRep_State(const <FString,FString> K2Node_MakeMap_Map, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x94583154d001
	void Show Buy Resurrection UI(bool Visible, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, UI_BuyResurrectionPanel_C* K2Node_DynamicCast_AsUI_Buy_Resurrection_Panel, bool K2Node_DynamicCast_bSuccess);// 0x94573154d001
	void ReceiveBeginPlay();// 0x94563154d001
	void Event_RebirthCharacter(SolarPlayerState* CostPlayer);// 0x94553154d001
	void Event_EnterBuyResurrectionProcess(SolarPlayerState* PlayerState, bool Affordable);// 0x94543154d001
	void Event_OnSuccessfulPurchase();// 0x94533154d001
	void Event_LeaveWhileWaiting();// 0x94523154d001
	void Event_CheckAllDeath();// 0x94513154d001
	void Event_RespondReconnection();// 0x94503154d001
	void BuyResurrectionTimeOut();// 0x944f3154d001
	void EndJudgment();// 0x944e3154d001
	void Event_NotificationOverTimeLimit();// 0x944d3154d001
	void Event_OnReviveComplete(FString PlayerId);// 0x944c3154d001
	void ClientDoCameraFade();// 0x944b3154d001
	void OnBattleStartEvent();// 0x944a3154d001
	void BeginTimeoutCountDown();// 0x94493154d001
	void DelaySetTimeOut();// 0x94483154d001
	void PauseTimeoutCountDownInternal();// 0x94473154d001
	void ContinueTimeoutCountDownInternal();// 0x94463154d001
	void LazyPauseTimeoutCountDownAtLastRemainTime(float TimeRemainToPause);// 0x94453154d001
	void TryContinueTimeoutCountDown();// 0x94443154d001
	void OnPostRepNotifies();// 0x94433154d001
	static void ExecuteUbergraph_BPC_BuyResurrection(int EntryPoint, int Temp_int_Variable, bool CallFunc_IsServer_ReturnValue, SolarPlayerState* K2Node_CustomEvent_CostPlayer, SolarPlayerState* K2Node_CustomEvent_PlayerState, bool K2Node_CustomEvent_Affordable, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameplayAbilitySpecHandle CallFunc_K2_GiveAbility_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Get_Alive_Team_Player_Num_Num, bool CallFunc_LessEqual_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, FString K2Node_CustomEvent_PlayerID, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, FString CallFunc_GetPlayerNameWithoutUID_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString CallFunc_GetUserID_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, int Temp_int_Array_Index_Variable, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_Array_Get_Item, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int Temp_int_Variable, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float K2Node_CustomEvent_TimeRemainToPause, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Get_Wait_Time_Remaining_RemainTime, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, float CallFunc_GetCurBattleTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_GetCurBattleTime_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_GetCurBattleTime_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_GetCurBattleTime_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, Vector CallFunc_Get_Death_Box_Loc_Loc, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int Temp_int_Variable, bool CallFunc_IsServer_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Alive_Team_Player_Num_Num, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0xffffff97312cd00f
	void TimeoutCountDownStateChanged__DelegateSignature(bool bPaused);// 0xffffffff5b5c9800
	void NewStateChange__DelegateSignature(byte State);// 0x139eb312cd041

--------------------------------
Class: SolarResurrectionComponent.ActorComponent.Object
	bool bStateHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	void OnPostRepNotifies();// 0x4dd2312cd041

--------------------------------
Class: UI_BuyResurrectionPanel_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8]
	CanvasPanel* Root;//[Offset: 0x348, Size: 0x8]
	UI_Component_Btn_C* UI_Component_Btn_HUD;//[Offset: 0x350, Size: 0x8]
	UI_HUD_Notice_BuyResurrection_C* UI_HUD_Notice_BuyResurrection;//[Offset: 0x358, Size: 0x8]
	BPC_BuyResurrection_C* BuyComp;//[Offset: 0x360, Size: 0x8]
	FString NotifyString;//[Offset: 0x368, Size: 0x10]
	bool bIsNotifyInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	void Set Btn Vis(bool Show);// 0x93fc3154d001
	void Set Btna And Tip Visibility(bool Visibility, Actor* CallFunc_GetOwner_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x93fb3154d001
	void Event_Init(BPC_BuyResurrection_C* BuyComp);// 0x93fa3154d001
	void EventOnStateChange(byte State);// 0x93f93154d001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xc9c23154d001
	void BndEvt__UI_Component_Btn_HUD_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature();// 0x60fff3317cd074
	void OnTeammateReviveStateChanged(SolarPlayerState* RevivingMePlayer);// 0x93f63154d001
	void ExecuteUbergraph_UI_BuyResurrectionPanel(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, BPC_BuyResurrection_C* K2Node_CustomEvent_BuyComp, byte K2Node_CustomEvent_State, bool K2Node_SwitchEnum_CmpSuccess, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, int CallFunc_Get_Wait_Time_Remaining_RemainTime, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, const <FString,FString> Temp_string_Variable, FormatArgumentData[] K2Node_MakeArray_Array, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromUI_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarPlayerState* K2Node_CustomEvent_RevivingMePlayer, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xfc30312cd000

--------------------------------
Class: UI_Component_Btn_C.ComponentButtonBaseWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* Anim_Hold;//[Offset: 0x350, Size: 0x8]
	WidgetAnimation* Anim_Hover;//[Offset: 0x358, Size: 0x8]
	SolarImage* Img_Btn;//[Offset: 0x360, Size: 0x8]
	SolarImage* Img_Icon;//[Offset: 0x368, Size: 0x8]
	SolarImage* img_Mask;//[Offset: 0x370, Size: 0x8]
	SolarImage* Img_Shadow;//[Offset: 0x378, Size: 0x8]
	CanvasPanel* Panel_Press;//[Offset: 0x380, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x388, Size: 0x8]
	SizeBox* Size_Btn;//[Offset: 0x390, Size: 0x8]
	SizeBox* Size_Icon;//[Offset: 0x398, Size: 0x8]
	SolarTextBlock* Text_Btn;//[Offset: 0x3a0, Size: 0x8]
	NamedSlot* WidgetSlot;//[Offset: 0x3a8, Size: 0x8]
	byte BtnType;//[Offset: 0x3b0, Size: 0x1]
	byte BtnState;//[Offset: 0x3b1, Size: 0x1]
	Vector2D BtnSize;//[Offset: 0x3b4, Size: 0x8]
	bool IsUseBtnImag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 0x1]
	bool IsUseText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 0x1]
	FString Text;//[Offset: 0x3c0, Size: 0x10]
	bool IsUseLocID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	int LocID;//[Offset: 0x3d4, Size: 0x4]
	enum PreviewLang;//[Offset: 0x3d8, Size: 0x1]
	delegate OnClicked;//[Offset: 0x3e0, Size: 0x10]
	delegate OnPressed;//[Offset: 0x3f0, Size: 0x10]
	delegate OnReleased;//[Offset: 0x400, Size: 0x10]
	bool IsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	Object* Icon;//[Offset: 0x418, Size: 0x8]
	Vector2D Icon_Size;//[Offset: 0x420, Size: 0x8]
	byte NewVar;//[Offset: 0x428, Size: 0x1]
	void SetBtnTxt(FString NewParam, FText CallFunc_Conv_StringToText_ReturnValue);// 0x93c93154d001
	void SetBtnState(byte State, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x93c83154d001
	FString GetLocalText(FString CallFunc_GetLocalText_ReturnValue);// 0x93c73154d001
	void PreConstruct(bool IsDesignTime);// 0x93c63154d001
	void Update(bool IsDesignTime);// 0x93c53154d001
	void SetBtnText(FString 按钮文字                                                                                        , byte 按钮状态                                                                                        );// 0x93c43154d001
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x93c33154d001
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();// 0x93c23154d001
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_8_OnButtonReleasedEvent__DelegateSignature();// 0xffffff87312cd000
	static void ExecuteUbergraph_UI_Component_Btn(int EntryPoint, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, enum K2Node_Select_Default, bool K2Node_CustomEvent_IsDesignTime, FString K2Node_CustomEvent_____, byte K2Node_CustomEvent_____, FString CallFunc_GetLocalText_ReturnValue, FString K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, enum K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, enum K2Node_Select_Default, LinearColor K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y);// 0xa4f312cd002
	void OnReleased__DelegateSignature();// 0xffffffff0ca7dba0
	void OnClicked__DelegateSignature();// 0x618873131d100
	void OnPressed__DelegateSignature();// 0x9e2b3154d001

--------------------------------
Class: ComponentButtonBaseWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarButton* OperateArea;//[Offset: 0x340, Size: 0x8]

--------------------------------
Class: SolarButton.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x150, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x158, Size: 0x2b8]
	byte ImageFillType;//[Offset: 0x410, Size: 0x1]
	float ImageFillRatioHorizontal;//[Offset: 0x414, Size: 0x4]
	float ImageFillRatioVertical;//[Offset: 0x418, Size: 0x4]
	float ImageFillPixelLeft;//[Offset: 0x41c, Size: 0x4]
	float ImageFillPixelTop;//[Offset: 0x420, Size: 0x4]
	float ImageFillPixelRight;//[Offset: 0x424, Size: 0x4]
	float ImageFillPixelBottom;//[Offset: 0x428, Size: 0x4]
	LinearColor ColorAndOpacity;//[Offset: 0x42c, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x43c, Size: 0x10]
	bool bReleaseUnfocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 0x1]
	bool bEnableClickSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 0x1]
	FString ClickSoundEventName;//[Offset: 0x450, Size: 0x10]
	byte ClickMethod;//[Offset: 0x460, Size: 0x1]
	byte TouchMethod;//[Offset: 0x461, Size: 0x1]
	byte PressMethod;//[Offset: 0x462, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x463, Size: 0x1]
	delegate OnClicked;//[Offset: 0x468, Size: 0x10]
	delegate OnPressed;//[Offset: 0x478, Size: 0x10]
	delegate OnReleased;//[Offset: 0x488, Size: 0x10]
	delegate OnHovered;//[Offset: 0x498, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x4a8, Size: 0x10]
	delegate OnFocusLosted;//[Offset: 0x4b8, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x45ae312cd041
	void SetStyle(out const ButtonStyle InStyle);// 0x45ad312cd041
	void SetPressMethod(byte InPressMethod);// 0x45ac312cd041
	void SetImageFillType(byte InImageFillType);// 0x45ab312cd041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x45aa312cd041
	void SetClickMethod(byte InClickMethod);// 0x45a9312cd041
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x45a8312cd041
	bool IsPressed();// 0x45a7312cd041

--------------------------------
Class: SolarImage.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x138, Size: 0x98]
	byte FillType;//[Offset: 0x1d0, Size: 0x1]
	SolarImageProgressInfo ImageProgressInfo;//[Offset: 0x1d8, Size: 0x20]
	delegate BrushDelegate;//[Offset: 0x1f8, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x208, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x218, Size: 0x10]
	bool bEnableLocImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	FText ImagePath;//[Offset: 0x230, Size: 0x18]
	int LocTextID;//[Offset: 0x248, Size: 0x4]
	enum PreviewLang;//[Offset: 0x24c, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x250, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x260, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x270, Size: 0x10]
	void UpdateImageAsync(int NewLocTextID);// 0x49d7312cd041
	void UpdateImage(int NewLocTextID);// 0x49d6312cd041
	void SetOpacity(float InOpacity);// 0x49d5312cd041
	void SetImageProgressInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x49d4312cd041
	void SetImageProgressByInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x49d3312cd041
	void SetImageProgress(float InProgress);// 0x49d2312cd041
	void SetImageFillType(byte InImageFillType);// 0x49d1312cd041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x49d0312cd041
	void SetBrushTintColor(SlateColor TintColor);// 0x49cf312cd041
	void SetBrushSize(Vector2D DesiredSize);// 0x49ce312cd041
	void SetBrushResourceObject(Object* ResourceObject);// 0x49cd312cd041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x49cc312cd041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x49cb312cd041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x49ca312cd041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x49c9312cd041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x49c8312cd041
	void SetBrushFromAtlasInterface(interface class_                                                                                                    AtlasRegion, bool bMatchSize);// 0x49c7312cd041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x49c6312cd041
	void SetBrush(out const SlateBrush InBrush);// 0x49c5312cd041
	float GetImageProgressByInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x49c4312cd041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x49c3312cd041

--------------------------------
Class: SolarImageProgressInfo
	byte ProgressType;//[Offset: 0x0, Size: 0x1]
	byte LineProgressDir;//[Offset: 0x1, Size: 0x1]
	byte QuaterProgressPrivot;//[Offset: 0x2, Size: 0x1]
	byte HalfProgressPrivot;//[Offset: 0x3, Size: 0x1]
	float CircleProgressInitDegree;//[Offset: 0x4, Size: 0x4]
	bool bInvertProgressDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float Progress;//[Offset: 0xc, Size: 0x4]
	Material* Material;//[Offset: 0x10, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x160, Size: 0x4]
	float HeightOverride;//[Offset: 0x164, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0x168, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0x16c, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0x170, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x174, Size: 0x4]
	float MinAspectRatio;//[Offset: 0x178, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0x17c, Size: 0x4]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x180, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x180, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x180, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x180, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x180, Size: 0x1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x180, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x180, Size: 0x1]
	void SetWidthOverride(float InWidthOverride);// 0x3822312cd041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3821312cd041
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x3820312cd041
	void SetMinAspectRatio(float InMinAspectRatio);// 0x381f312cd041
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x381e312cd041
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x381d312cd041
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x381c312cd041
	void SetHeightOverride(float InHeightOverride);// 0x381b312cd041
	void ClearWidthOverride();// 0x381a312cd041
	void ClearMinDesiredWidth();// 0x3819312cd041
	void ClearMinDesiredHeight();// 0x3818312cd041
	void ClearMinAspectRatio();// 0x3817312cd041
	void ClearMaxDesiredWidth();// 0x3816312cd041
	void ClearMaxDesiredHeight();// 0x3815312cd041
	void ClearMaxAspectRatio();// 0x3814312cd041
	void ClearHeightOverride();// 0x3813312cd041

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: UI_HUD_Notice_BuyResurrection_C.UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x368, Size: 0x8]
	WidgetAnimation* ant_exit;//[Offset: 0x370, Size: 0x8]
	WidgetAnimation* Appear_Anim;//[Offset: 0x378, Size: 0x8]
	Image* Img_Txt_bg;//[Offset: 0x380, Size: 0x8]
	RichTextBlock* Txt_Ballte_Notice;//[Offset: 0x388, Size: 0x8]
	SolarTextBlock* Txt_Ballte_Notice;//[Offset: 0x390, Size: 0x8]
	SolarTextBlock* Txt_Ballte_Notice;//[Offset: 0x398, Size: 0x8]
	void Construct();// 0x114b8312cd001
	void ShowNotice(FString Text, float Duration);// 0x2dffb5315bd02e
	static void ExecuteUbergraph_UI_HUD_Notice_BuyResurrection(int EntryPoint, FString K2Node_CustomEvent_Text, float K2Node_CustomEvent_Duration, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xff7a3154d001

--------------------------------
Class: UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10]
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18]
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: BP_DI_DeathBoxA_TreasureBox_C.DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6e0, Size: 0x8]
	SceneComponent* FX_Position;//[Offset: 0x6e8, Size: 0x8]
	SceneComponent* Charge_VFX;//[Offset: 0x6f0, Size: 0x8]
	ParticleSystemComponent*[] ChargeEffects;//[Offset: 0x6f8, Size: 0x10]
	bool ResurrectionComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 0x1]
	LinearColor[] QualityMap;//[Offset: 0x710, Size: 0x10]
	ParticleSystem*[] DeadBox_Particle;//[Offset: 0x720, Size: 0x10]
	ParticleSystemComponent* QualityEffect;//[Offset: 0x730, Size: 0x8]
	int NewBoxParticle;//[Offset: 0x738, Size: 0x4]
	bool CanBuyResurrect(const SolarCharacter* InReqCharacter, SCMPlayerState* OwnerPlayer, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue);// 0x941f3154d001
	bool IsSameTeam(byte CharacterTeamID, FString CallFunc_Conv_ByteToString_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x941e3154d001
	void RemoveEffect(SolarCharacter* NewParam, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, ParticleSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SceneComponent* CallFunc_GetAttachParent_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x941d3154d001
	void Add Effect(SolarCharacter* NewParam, int Temp_int_Array_Index_Variable, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetComponentLocation_ReturnValue, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x941c3154d001
	void UserConstructionScript();// 0x941b3154d001
	void ReceiveAddEffect(const SolarCharacter* SolarChar);// 0x941a3154d001
	void ReceiveRemoveEffect(const SolarCharacter* SolarChar);// 0x94193154d001
	void ReceiveSetUIEnable(bool IsShow);// 0x139f4312cd041
	void ReceiveEndPlay(byte EndPlayReason);// 0x191443154d008
	void ReceiveBeginPlay();// 0x94163154d001
	void ExecuteUbergraph_BP_DI_DeathBoxA_TreasureBox(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, const SolarCharacter* K2Node_Event_SolarChar, const SolarCharacter* K2Node_Event_SolarChar, bool K2Node_Event_IsShow, byte K2Node_Event_EndPlayReason, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x94143154d001

--------------------------------
Class: BP_ReviveItemManger_BattleRoyale_C.BP_ReviveItemManger_0_C.GameReviveItemManager.GameManagerBase.Info.Actor.Object
	int PointError;//[Offset: 0x338, Size: 0x4]
	float R;//[Offset: 0x33c, Size: 0x4]
	float X;//[Offset: 0x340, Size: 0x4]
	float Y;//[Offset: 0x344, Size: 0x4]
	Vector LeftUp;//[Offset: 0x348, Size: 0xc]
	Vector RightDown;//[Offset: 0x354, Size: 0xc]
	static void RevivePlayer(SolarCharacter* 角色                                                                                              , out const Transform 玩家坐标和旋转                                                                               , out bool bool, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, int CallFunc_FTrunc_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetFlyLocation_Location, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, Transform CallFunc_MakeTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x940c3154d001
	static void GetFlyLocation(SCMPlayerState* PlayerSatate, out Vector Location, Vector Local_FlyPoint, Vector Local_CurFlyCriclePoint, float Local_Length, float Local_Distance, Vector Local_SelfLocation, int Local_Index, Vector Local_CircleLocation, float Local_CircleRadius, Vector[] Local_Location, float CallFunc_GetReviveHeight_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float K2Node_MathExpression_ReturnValue, Vector2D[] K2Node_MakeArray_Array, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector2D CallFunc___S_Get_Point_On_Line_TargetPoint, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, float CallFunc_GetReviveHeight_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Vector_Distance2D_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, float CallFunc_GetCurrentSafeAreaRadius_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x945a3154d001

--------------------------------
Class: BP_ReviveItemManger_0_C.GameReviveItemManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 0x8]
	int ReviveItem;//[Offset: 0x250, Size: 0x4]
	<SolarPlayerState*,int> Player_ReviveTimes;//[Offset: 0x258, Size: 0x50]
	int AdvanceNoticeTime;//[Offset: 0x2a8, Size: 0x4]
	F_ReviveItemData[] ReviveItemData;//[Offset: 0x2b0, Size: 0x10]
	float MaxReviveRadius;//[Offset: 0x2c0, Size: 0x4]
	bool ClearItemNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 0x1]
	bool AdvanceNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5, Size: 0x1]
	SolarPlayerState*[] InRevivingPlayerState;//[Offset: 0x2c8, Size: 0x10]
	int CurTime;//[Offset: 0x2d8, Size: 0x4]
	bool bCanReviveImmediatelyWhenDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 0x1]
	int ReviveDisableCountDown;//[Offset: 0x2e0, Size: 0x4]
	int ReviveStartRecycleTime;//[Offset: 0x2e4, Size: 0x4]
	<byte,FString> NoticeSound;//[Offset: 0x2e8, Size: 0x50]
	void SetPlayerReviveData(SolarPlayerState* Player, F_ReviveItemData Data, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, F_ReviveItemData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x93253154d001
	void GetPlayerReviveData(SolarPlayerState* Player, out F_ReviveItemData Data, out bool bFind, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, F_ReviveItemData CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x93243154d001
	void [ A]Is Player Reviving(out const SolarPlayerState* InPlayerState, out bool Reviving, bool CallFunc_Array_Contains_ReturnValue);// 0x93233154d001
	bool IsPlayerReviving(SolarPlayerState* InPlayerState, bool CallFunc_Array_Contains_ReturnValue);// 0x93223154d001
	void RemovePlayerFromRevivingPlayerArr(out const SolarPlayerState* Player, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x93213154d001
	void AddPlayerIntoRevivingPlayerArr(out const SolarPlayerState* Player, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue);// 0x93203154d001
	void OnRep_AdvanceNotice(bool CallFunc_IsServer_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x931f3154d001
	void OnRep_ClearItemNotice();// 0x931e3154d001
	static bool [ S]Try to Revive Player with Item(SolarPlayerState* Player, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, FString CallFunc_Conv_IntToString_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsPlayerReviving_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, bool CallFunc_RevivePlayer_Bool, FString CallFunc_Vector2String_Str, bool CallFunc_PlayerTryUseReviveItem_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_CanPlayerUseReviveItem_ReturnValue);// 0x931d3154d001
	void Set Player Use Revive Item Times(SolarPlayerState* Player, bool Local_Find, F_ReviveItemData CallFunc_GetPlayerReviveData_Data, bool CallFunc_GetPlayerReviveData_bFind, int CallFunc_Add_IntInt_ReturnValue, F_ReviveItemData K2Node_MakeStruct_F_ReviveItemData, F_ReviveItemData K2Node_MakeStruct_F_ReviveItemData);// 0x931c3154d001
	void [ A]Get Player Use Revive Item Times(SolarPlayerState* Player, out int Value, int Local_Times, bool Local_Find, F_ReviveItemData CallFunc_GetPlayerReviveData_Data, bool CallFunc_GetPlayerReviveData_bFind);// 0x931b3154d001
	bool CanPlayerUseReviveItem(SolarPlayerState* InPlayerState, bool bCheckItemNum, int CallFunc_GetMaxReviveUsage_ReturnValue, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetPlayerReviveItemNum_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, bool CallFunc_IsOutBySelf_ReturnValue, bool CallFunc_IsPlayerOffline_ReturnValue, int CallFunc_GetMaxReviveUsage_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x931a3154d001
	bool CanGlobalUseReviveItem(bool CallFunc_CanGlobalUseReviveItem_ReturnValue);// 0x93193154d001
	void RevivePlayer(SolarCharacter* 角色                                                                                              , out const Transform 玩家坐标和旋转                                                                               , out bool bool, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, int CallFunc_FTrunc_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x93183154d001
	void ReceiveBeginPlay();// 0x93173154d001
	void Event_ClearRevive();// 0x93163154d001
	void OnPlayerResurrected(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x93153154d001
	void Event_ClearReviveNotifyInAdvance();// 0x93143154d001
	void Event_InitReviveItem();// 0x93133154d001
	void UpdateTime();// 0x60fff3317cd074
	void DownReviveImmediately(SolarPlayerState* Player);// 0x78142ab42cd000
	void OnPlayerHealthStateChanged(BP_PlayerState_Framework_C* InPlayerState, byte NewState);// 0xffffff87312cd044
	void ReviveDisableNotice(int Time);// 0x38ffb7315bd065
	void ExecuteUbergraph_BP_ReviveItemManger(int EntryPoint, const byte Temp_byte_Variable, const byte Temp_byte_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, const FString[] Temp_string_Variable, int CallFunc_Array_Length_ReturnValue, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, const FString[] Temp_string_Variable, int CallFunc_Array_Length_ReturnValue, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_IsClosed_Variable, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsServer_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_IsClosed_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const byte Temp_byte_Variable, SCMPlayerState* CallFunc_Array_Get_Item, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, const FString[] Temp_string_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, const FString[] Temp_string_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool Temp_bool_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_GetPlayerReviveItemNum_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_ClearBackpackItem_ReturnValue, byte K2Node_CustomEvent_ResurrectType, BP_PlayerState_Framework_C* K2Node_CustomEvent_TargetPlayer, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetReviveItemRepoTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool Temp_bool_Variable, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, const <FString,FString> K2Node_MakeMap_Map, SolarPlayerState* K2Node_CustomEvent_Player, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_PlayerState_Framework_C* K2Node_CustomEvent_InPlayerState, byte K2Node_CustomEvent_NewState, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool Temp_bool_Variable, float CallFunc_GetReviveItemRepoTime_ReturnValue, byte Temp_byte_Variable, int CallFunc_FTrunc_ReturnValue, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, int K2Node_CustomEvent_Time, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, int Temp_int_Variable, int CallFunc_Round_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xc91e3154d001

--------------------------------
Class: GameReviveItemManager.GameManagerBase.Info.Actor.Object
	int MaxReviveUsage;//[Offset: 0x228, Size: 0x4]
	float ReviveItemRepoTime;//[Offset: 0x22c, Size: 0x4]
	float ReviveProximityRadius;//[Offset: 0x230, Size: 0x4]
	float ReviveHeight;//[Offset: 0x234, Size: 0x4]
	float ReviveWaitTime;//[Offset: 0x238, Size: 0x4]
	bool bGlobalUseRevieItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	float DownedReviveButtonDelayTime;//[Offset: 0x240, Size: 0x4]
	void SetGlobalUseReviveItem(const bool InCanUseItem);// 0x3f3a312cd041
	bool PlayerTryUseReviveItem(SolarPlayerState* InPlayerState, const int InUseNum);// 0x3f39312cd041
	void OnTeammateReviveManagerRefresh();// 0x3f38312cd041
	void OnRep_GlobalUseRevieItem();// 0x3f37312cd041
	bool IsPlayerReviving(SolarPlayerState* InPlayerState);// 0x3f36312cd041
	float GetReviveWaitTime();// 0x3f35312cd041
	float GetReviveProximityRadius();// 0x3f34312cd041
	float GetReviveItemRepoTime();// 0x3f33312cd041
	int GetReviveItemID();// 0x3f32312cd041
	float GetReviveHeight();// 0x3f31312cd041
	int GetPlayerReviveItemNum(SolarPlayerState* InPlayerState);// 0x3f30312cd041
	int GetMaxReviveUsage();// 0x3f2f312cd041
	float GetDownedReviveButtonDelayTime();// 0x3f2e312cd041
	void ClearAllPlayersReviveItem();// 0x3f2d312cd041
	bool CanPlayerUseReviveItem(SolarPlayerState* InPlayerState, bool bCheckItemNum);// 0x3f2c312cd041
	bool CanGlobalUseReviveItem();// 0x3f2b312cd041

--------------------------------
Class: F_ReviveItemData
	FString PlayerID_3_454127FA49A9E9B7DFC44B8255034BF1;//[Offset: 0x0, Size: 0x10]
	int Times_5_60AE18DB4EC5A089DB2C648682EFCFC5;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CustomRoomManager.GameManagerBase.Info.Actor.Object
	int RoomTeamMemberLimit;//[Offset: 0x228, Size: 0x4]
	int RoomLeftTime;//[Offset: 0x22c, Size: 0x4]
	bool bIsGameStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	void ReceiveTournamentDealy();// 0x3e96312cd041
	void ReceivePlayerRemoved(const SCMPlayerState* Player, enum Reason);// 0x3e95312cd041
	void OnTournamentDealy();// 0x3e94312cd041
	void OnRoomOwnerLeftRoom();// 0x3e93312cd041
	void OnPlayerRemovedFromRoom(const SCMPlayerState* Player, enum Reason);// 0x3e92312cd041
	bool OnGameStart();// 0x3e91312cd041
	void OnClientRoomDataReady();// 0x3e90312cd041
	bool IsRoomOwner(const SCMPlayerState* Player);// 0x3e8f312cd041
	bool IsRoomHasMinimalSides();// 0x3e8e312cd041
	bool IsRoomHasEnoughPlayers();// 0x3e8d312cd041
	void ExecuteGameStart();// 0x3e8c312cd041

--------------------------------
Class: BP_GameState_BattleRoyale_C.BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x598, Size: 0x8]
	BPC_WarmGame_BattleRoyale_C* BPC_WarmGame_BattleRoyale;//[Offset: 0x5a0, Size: 0x8]
	BPC_CountDown_C* BPC_CountDown;//[Offset: 0x5a8, Size: 0x8]
	int MapID;//[Offset: 0x5b0, Size: 0x4]
	int AirLineID;//[Offset: 0x5b4, Size: 0x4]
	byte BattleState;//[Offset: 0x5b8, Size: 0x1]
	delegate BroadcastBattleStateChange;//[Offset: 0x5c0, Size: 0x10]
	FString WinSide;//[Offset: 0x5d0, Size: 0x10]
	UI_HUD_Notice_VICTORY_C* VICTORYUI;//[Offset: 0x5e0, Size: 0x8]
	void ShowVictoryUI(CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerState* K2Node_DynamicCast_AsSolar_Player_State, bool K2Node_DynamicCast_bSuccess, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_HUD_Notice_VICTORY_C* K2Node_DynamicCast_AsUI_HUD_Notice_VICTORY, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x9f383154d001
	void OnRep_WinSide(bool CallFunc_IsServer_ReturnValue);// 0x9f373154d001
	void OnRep_BattleState();// 0x9f363154d001
	void OnRep_MapID(bool CallFunc_IsServer_ReturnValue);// 0x9f353154d001
	void BattleEnd(FString WinSide);// 0x9f343154d001
	void StartCountDown(int Time);// 0x9f333154d001
	void ReceiveBeginPlay();// 0x22895312cd041
	void OnBattleStateChange(byte ChangeType);// 0x9f413154d001
	void OnConfigInit();// 0x9f313154d001
	void ExecuteUbergraph_BP_GameState_BattleRoyale(int EntryPoint, BP_Fog_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsSupportCharacterRole_ReturnValue, int K2Node_CustomEvent_Time, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, FString K2Node_CustomEvent_WinSide, Transform CallFunc_MakeTransform_ReturnValue, byte K2Node_CustomEvent_ChangeType, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, BP_SI_AirdropShip_C* CallFunc_FinishSpawningActor_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, bool CallFunc_IsServer_ReturnValue, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetCameraFocusedCharacter_ReturnValue);// 0xffffff8a312cd002
	void BroadcastBattleStateChange__DelegateSignature(byte Now State);// 0x9f2e3154d001

--------------------------------
Class: BPC_WarmGame_BattleRoyale_C.SolarWarmGameComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	BP_Logic_BattleRoyale_C* MainLogic;//[Offset: 0xb8, Size: 0x8]
	SCMPlayerState* RealPlayer;//[Offset: 0xc0, Size: 0x8]
	Vector[] VehiclePos;//[Offset: 0xc8, Size: 0x10]
	bool GuidArrowVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	Vector[] SafeAreaCenter;//[Offset: 0xe0, Size: 0x10]
	Vector[] WeaponPos;//[Offset: 0xf0, Size: 0x10]
	Vector[] ItemPos;//[Offset: 0x100, Size: 0x10]
	SolarCharacter* LocalCharacter;//[Offset: 0x110, Size: 0x8]
	UI_WorldMark_Common_C* WorldMark;//[Offset: 0x118, Size: 0x8]
	Vector SafeCenter;//[Offset: 0x120, Size: 0xc]
	UI_HUD_Notice_Lv3_C* Notice;//[Offset: 0x130, Size: 0x8]
	Margin NoticePadding;//[Offset: 0x138, Size: 0x10]
	float ArrowScale;//[Offset: 0x148, Size: 0x4]
	BP_DirectionArrow_C* DirectionArrow;//[Offset: 0x150, Size: 0x8]
	bool isShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	<int,S_WarmGameConfig> 温暖局配置映射                                                                               ;//[Offset: 0x160, Size: 0x50]
	S_WarmGameConfig WarmGameConfig;//[Offset: 0x1b0, Size: 0x18]
	S_WarmGameAiConfig[] AIConfig;//[Offset: 0x1c8, Size: 0x10]
	<int,int> TeammatesAIConfig;//[Offset: 0x1d8, Size: 0x50]
	bool bIsWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	SolarTablesData_WarmGameMode WarmGameInfo;//[Offset: 0x230, Size: 0x50]
	bool bCanAiReviveByItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool IsWarmGame();// 0x9d8a3154d001
	void GetAIPickResult(out const int[] InCharactetIDs, out int OutCharacterID, out int OutSkinId, int SelectedSkin, int cid, S_WarmGameAiConfig[] NewLocalVar, int CallFunc_Array_Length_ReturnValue, int CallFunc__a_GetCharacterIDBySkinID_CharacterID, int CallFunc_Subtract_IntInt_ReturnValue, bool Temp_bool_Variable, S_WarmGameAiConfig CallFunc_Array_Get_Item, int CallFunc__a_GetCharacterIDBySkinID_CharacterID, bool CallFunc_Array_Contains_ReturnValue, int K2Node_Select_Default);// 0x9d893154d001
	void Create Warm Logic Actor And Exec(out bool Success, Transform CallFunc_MakeTransform_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, S_WarmGameConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_WarmGameLogicBase_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x9d883154d001
	void CheckSpAIForWarmGame(out bool SpecialAI, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x9d873154d001
	static void [s]SetBotBT(BehaviorTree* BotBehaviorTree, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, FString CallFunc_GetDisplayName_ReturnValue, bool K2Node_Select_Default, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x9d863154d001
	void [c]ShowNotice(bool Visible, FString Text, float Duration, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_HUD_Notice_Lv3_C* K2Node_DynamicCast_AsUI_HUD_Notice_Lv, bool K2Node_DynamicCast_bSuccess);// 0x9d853154d001
	void [c]RequestNearestPosition(byte Target, float Distance, Vector nearestLocation, Vector PlayerLocation, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x9dc33154d001
	void OnRep_WeaponPos();// 0x9d833154d001
	void UpdatePos();// 0x9d823154d001
	static void [c]CreateWorldMark(Vector Pos, int 隐藏距离                                                                                        , out UI_WorldMark_Common_C* AsUI World Mark Common, SlateBrush K2Node_MakeStruct_SlateBrush, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, UI_WorldMark_Common_C* K2Node_DynamicCast_AsUI_World_Mark_Common, bool K2Node_DynamicCast_bSuccess, Image* CallFunc_SpawnObject_ReturnValue);// 0x9d813154d001
	SolarCharacter* [c]LocalCharacter(bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue);// 0x9d803154d001
	void [c]PlayerHasWeapon(out bool HasWeapon, out bool HasVehicleWeapon, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x9d7f3154d001
	void UpdateArrowDirection(SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, BP_DirectionArrow_C* CallFunc_GetGuidArrow_Output_Get);// 0x9d7e3154d001
	void UpdateItemPos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_SolarItemSpawner_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_SolarItemSpawner_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x9d7d3154d001
	void UpdateWeaponPos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarGroundPreviewActor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, SolarGroundPreviewActor* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x9d7c3154d001
	void GetGuidArrow(out BP_DirectionArrow_C* Output_Get, SolarPlayerCameraManager* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_DirectionArrow_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x9d7b3154d001
	void [C]ShowArrow(bool bNewVisibility, BP_DirectionArrow_C* CallFunc_GetGuidArrow_Output_Get);// 0x9d7a3154d001
	static void UpdateVehiclePos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_SolarVehicleSpawner_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_SolarVehicleSpawner_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x9d793154d001
	static void GetNearestPosition(byte Target, out Vector Location, float Distance, Vector nearestLocation, Vector PlayerLocation, byte Temp_byte_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector[] K2Node_Select_Default, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x9d783154d001
	void [A]GetPlayBattleCount(out int count);// 0x9d773154d001
	void [S]GameModeSpecialConfig(out bool SpecialConfig, out int Order, out bool isB, <int> B_id, <int> A_id, <int> order3, <int> order2, <int> order1, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x9d763154d001
	void [C]PlayerABTest(out bool SpecialConfig);// 0x9d753154d001
	void GetMainLogic(out BP_Logic_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x9d743154d001
	void ReceiveBeginPlay();// 0x9d733154d001
	void ReceiveTick(float DeltaSeconds);// 0x9d723154d001
	void OnSystemReady();// 0x9d713154d001
	void PlanyerEnterSafeArea(Actor* Actor);// 0x9d703154d001
	void PlayerLeaveSafeArea(Actor* Actor);// 0x9d6f3154d001
	void OnNextSafeAreaSetted(Vector Center, float Radius, float WaitTime, float MoveTime, int Index);// 0x9d6e3154d001
	void OnRequestReceived(byte Type, Vector Pos);// 0x9d6d3154d001
	void OnEjectStateChanged(byte State, SolarCharacter* TargetCharacter);// 0xaf143154d001
	void ConfigFinished();// 0x78138eea2cd000
	void CustomEvent();// 0x9d6a3154d001
	static void ExecuteUbergraph_BPC_WarmGame_BattleRoyale(int EntryPoint, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, bool CallFunc_IsServer_ReturnValue, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, Actor* K2Node_CustomEvent_Actor, Actor* K2Node_CustomEvent_Actor, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector K2Node_CustomEvent_Center, float K2Node_CustomEvent_Radius, float K2Node_CustomEvent_WaitTime, float K2Node_CustomEvent_MoveTime, int K2Node_CustomEvent_Index, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc__S_GameModeSpecialConfig_SpecialConfig, int CallFunc__S_GameModeSpecialConfig_Order, bool CallFunc__S_GameModeSpecialConfig_isB, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Pos, UI_WorldMark_Common_C* CallFunc__c_CreateWorldMark_AsUI_World_Mark_Common, bool K2Node_SwitchEnum_CmpSuccess, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocationInSafeArea_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, bool CallFunc_CheckSpAIForWarmGame_SpecialAI, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Create_Warm_Logic_Actor_And_Exec_Success, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, bool CallFunc_IsServer_ReturnValue, FString[] CallFunc_Map_Keys_Keys, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, const FString[] K2Node_MakeArray_Array, bool CallFunc_Less_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SolarBotAIController* K2Node_DynamicCast_AsSolar_Bot_AIController, bool K2Node_DynamicCast_bSuccess, const SolarBotAIController*[] K2Node_MakeArray_Array, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, SolarGameModeAIComponent* CallFunc_GetComponentByClass_ReturnValue);// 0xffffff87a3c809e0

--------------------------------
Class: SolarWarmGameComponent.ActorComponent.Object
	bool IsWarmGame();// 0x54d1312cd041
	void GetAIPickResult(out const int[] InCharactetIDs, out int OutCharacterID, out int OutSkinId);// 0x54d0312cd041

--------------------------------
Class: S_WarmGameAiConfig
	int Difficulty_2_BC1C176F4C7CBB4D6FC889B2806BF007;//[Offset: 0x0, Size: 0x4]
	int Preference_6_7DE61082428EF32F3BEFE6AFA07875B9;//[Offset: 0x4, Size: 0x4]
	int Substitute_5_5FA843ED4EF730ADF049548C170D13E7;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: S_WarmGameConfig
	class Object* WarmGameLogic_11_C4D3600041B8F0E806BDC09E30D6C1D0;//[Offset: 0x0, Size: 0x8]
	S_WarmGameAiConfig[] AiTeammates_15_B5CA8DEC448F508FECCA08B77C240AFC;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BP_WarmGameLogicBase_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
	void Event_ExecLogic();// 0x3f73ff87708486dc
	void ExecuteUbergraph_BP_WarmGameLogicBase(int EntryPoint);// 0xffffff87312cd000

--------------------------------
Class: UI_WorldMark_Common_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x398, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x3a0, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x3a8, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x3b0, Size: 0x8]
	int HideDistance;//[Offset: 0x3b8, Size: 0x4]
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x942d3154d001
	FText Get_Distance_Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x947b3154d001
	void SetIcon(Widget* Content, int 隐藏距离                                                                                        , PanelSlot* CallFunc_AddChild_ReturnValue);// 0x942b3154d001
	void PreConstruct(bool IsDesignTime);// 0x1472e3154d008
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xffffffff7ee65da0
	static void ExecuteUbergraph_UI_WorldMark_Common(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, enum K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue);// 0x1010088322dd101

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x59ec312cd041

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8]
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x59f0312cd041
	void SetSize(SlateChildSize InSize);// 0x59ef312cd041
	void SetPadding(Margin InPadding);// 0x59ee312cd041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x59ed312cd041

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4]
	byte SizeRule;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: UI_HUD_Notice_Lv3_C.UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x368, Size: 0x8]
	WidgetAnimation* ant_exit;//[Offset: 0x370, Size: 0x8]
	WidgetAnimation* Appear_Anim;//[Offset: 0x378, Size: 0x8]
	Image* Img_Txt_bg;//[Offset: 0x380, Size: 0x8]
	SolarRichTextBlock* Txt_Ballte_Notice;//[Offset: 0x388, Size: 0x8]
	static void SetNoticeText(FString InText, FText CallFunc_Conv_StringToText_ReturnValue);// 0x143653154d008
	void Construct();// 0xb1be3154d001
	void ShowNotice(FString Text, float Duration);// 0x74ffcf3190d000
	static void ExecuteUbergraph_UI_HUD_Notice_Lv3(int EntryPoint, FString K2Node_CustomEvent_Text, float K2Node_CustomEvent_Duration, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xc1643154d001

--------------------------------
Class: BP_DirectionArrow_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* FX_G_Mesh_Arrow_Guide_001;//[Offset: 0x230, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x238, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
	void Init(Actor* AttachTarget, float Scale, Vector Position);// 0x946e3154d001
	void SetVisiblity(bool NewVisiblity);// 0x94793154d001
	void UpdateDirection(Rotator Rotation);// 0x8080bf9131ed10c7
	void ExecuteUbergraph_BP_DirectionArrow(int EntryPoint, Actor* K2Node_CustomEvent_AttachTarget, float K2Node_CustomEvent_Scale, Vector K2Node_CustomEvent_Position, Vector CallFunc_MakeVector_ReturnValue, bool K2Node_CustomEvent_NewVisiblity, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, Rotator K2Node_CustomEvent_Rotation, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x94673154d001

--------------------------------
Class: BP_SolarItemSpawner_C.SolarItemSpawner.SolarMapElementBase.Actor.Object
	StaticMeshComponent* Cube;//[Offset: 0x390, Size: 0x8]
	BillboardComponent* Billboard;//[Offset: 0x398, Size: 0x8]
	SceneComponent* SceneRoot;//[Offset: 0x3a0, Size: 0x8]
	void UserConstructionScript(enum Temp_byte_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, Vector CallFunc_Divide_VectorFloat_ReturnValue, MaterialInterface* K2Node_Select_Default, int K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x3f7fff8770acd000

--------------------------------
Class: SolarGroundPreviewActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x268, Size: 0xb0]
	float SpawnOffset;//[Offset: 0x318, Size: 0x4]
	SphereComponent* SphereComponent;//[Offset: 0x320, Size: 0x8]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x328, Size: 0x10]
	SoftObjectPath OutlineMatPath;//[Offset: 0x338, Size: 0x18]
	byte[] MarkedTeamIdList;//[Offset: 0x358, Size: 0x10]
	int WeaponLevel;//[Offset: 0x368, Size: 0x4]
	enum WeaponType;//[Offset: 0x36c, Size: 0x1]
	int FireModeNameLocalizationID;//[Offset: 0x370, Size: 0x4]
	SlateBrush TriggerIcon;//[Offset: 0x378, Size: 0x98]
	int weaponid;//[Offset: 0x410, Size: 0x4]
	bool bIsItemWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	bool bIsSummonVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x415, Size: 0x1]
	bool bIsAntiVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x416, Size: 0x1]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x418, Size: 0x8]
	void UnMarkThisItem(byte TeamID);// 0x4906312cd041
	void SetItemData(out const SolarItemData _ItemData);// 0x4905312cd041
	void OnServerPawned();// 0x4904312cd041
	void OnRep_ItemDataChange();// 0x4903312cd041
	void NotifyThisItemWasPickedUp();// 0x4902312cd041
	void MarkThisItem(byte TeamID);// 0x4901312cd041
	int GetQuality();// 0x4900312cd041

--------------------------------
Class: BP_SolarVehicleSpawner_C.SolarVehicleSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	BoxComponent* Box;//[Offset: 0x430, Size: 0x8]
	StaticMeshComponent* Cube1;//[Offset: 0x438, Size: 0x8]
	StaticMeshComponent* Cube;//[Offset: 0x440, Size: 0x8]
	BillboardComponent* Billboard;//[Offset: 0x448, Size: 0x8]
	SceneComponent* SceneRoot;//[Offset: 0x450, Size: 0x8]
	BP_SummonVehicle_SpawnEffect_C* BPVehicleSpawnEffect;//[Offset: 0x458, Size: 0x8]

--------------------------------
Class: SolarVehicleSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnID;//[Offset: 0x394, Size: 0x4]
	enum VehicleSpawnType;//[Offset: 0x398, Size: 0x1]
	bool bVehicleRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	int VehicleRefreshSecond;//[Offset: 0x3a4, Size: 0x4]
	bool bVehicleRefreshRand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 0x1]
	bool bVehicleRefreshWaitPreBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 0x1]
	int64 VehicleRefreshCheckRoleDisSquared;//[Offset: 0x3b0, Size: 0x8]
	byte[] VehicleCheckObjectTypes;//[Offset: 0x3b8, Size: 0x10]
	Vector VehicleCheckBoxSize;//[Offset: 0x3c8, Size: 0xc]
	class SolarVehicleSpawnEffect* VehicleSpawnEffectClass;//[Offset: 0x3f0, Size: 0x28]
	SolarVehicleSpawnEffect* VehicleSpawnEffect;//[Offset: 0x418, Size: 0x8]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x428, Size: 0x4]
	void StartVehicleRefreshTimer();// 0x54c5312cd041
	void PlayVehicleSpawnEffectFinished();// 0x54c4312cd041
	void OnVehicleRefreshCheck();// 0x54c3312cd041
	void OnVehicleRefresh();// 0x54c2312cd041
	void OnPreVehicleDriverGetOn(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x54c1312cd041
	void OnPreVehicleDestroyed(Actor* DestroyedActor);// 0x54c0312cd041

--------------------------------
Class: SolarVehicleSpawnEffect.Actor.Object
	BoxComponent* BoxCollision;//[Offset: 0x228, Size: 0x8]
	int VehicleID;//[Offset: 0x230, Size: 0x4]
	Vector BoxExtent;//[Offset: 0x234, Size: 0xc]
	float EffectTime;//[Offset: 0x240, Size: 0x4]
	class SolarSummonPlaceholder* EffectClass;//[Offset: 0x248, Size: 0x28]
	SolarSummonPlaceholder* EffectActor;//[Offset: 0x270, Size: 0x8]
	void StartPlayEffect();// 0x54bf312cd041

--------------------------------
Class: BP_SummonVehicle_SpawnEffect_C.BP_Summon_Placeholder_C.SolarSummonPlaceholder.Actor.Object
	StaticMeshComponent* VH_Tire_WL01_A_LOD0;//[Offset: 0x250, Size: 0x8]
	StaticMeshComponent* VH_Tire_WL01_A_Summon;//[Offset: 0x258, Size: 0x8]
	StaticMeshComponent* DepthOnly;//[Offset: 0x260, Size: 0x8]
	bool DepthCullEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	MaterialInterface* Preview;//[Offset: 0x270, Size: 0x8]
	Material* DepthMaterial;//[Offset: 0x278, Size: 0x8]
	float GradientMask_Offset;//[Offset: 0x280, Size: 0x4]
	void SetSummonMesh(StaticMesh* InVehicleMesh, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue);// 0xae8f312cd041
	void UpdateSpawnEffect(float InMaskOffset);// 0x3f7fff8770acd000
	void UserConstructionScript();// 0x1da88312cd041

--------------------------------
Class: BP_Summon_Placeholder_C.SolarSummonPlaceholder.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x230, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x238, Size: 0x8]
	Vector CollisionSize;//[Offset: 0x240, Size: 0xc]
	void ReceiveBeginPlay();// 0xae98312cd041
	void SetCollisionSize(out const Vector InSize);// 0x8a29312cd041
	void ExecuteUbergraph_BP_Summon_Placeholder(int EntryPoint, const Vector K2Node_Event_InSize, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x8959312d5845

--------------------------------
Class: UI_HUD_Notice_VICTORY_C.UINoticeVictory.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x418, Size: 0x8]
	WidgetAnimation* Appear_Anim;//[Offset: 0x420, Size: 0x8]
	Button* Btn_Return;//[Offset: 0x428, Size: 0x8]
	SolarTextBlock* Txt_Ballte_Notice;//[Offset: 0x430, Size: 0x8]
	int CountDownTime;//[Offset: 0x438, Size: 0x4]
	FString GetModuleName();// 0x8a9f3154d001
	void ShowVictory(int Time);// 0xffffff87312cd000
	void Tick Till End();// 0xaed3312cd041
	static void ExecuteUbergraph_UI_HUD_Notice_VICTORY(int EntryPoint, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_GetNoticeFormatText_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int K2Node_CustomEvent_Time, int CallFunc_PlaySound2Dbyname_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int CallFunc_StopSound2Dbyname_ReturnValue);// 0x8aec312cd001

--------------------------------
Class: UINoticeVictory.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	Button* BtnReturn;//[Offset: 0x368, Size: 0x8]
	void OnReturnBtnClick();// 0x56c5312cd041

--------------------------------
Class: BP_SI_AirdropShip_C.SCMMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	StaticMeshComponent* Airdropship;//[Offset: 0x288, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x290, Size: 0x8]
	float TL_Move_MovePercent_3755E1654BBA2D1D5946D69E7B12C849;//[Offset: 0x298, Size: 0x4]
	byte TL_Move__Direction_3755E1654BBA2D1D5946D69E7B12C849;//[Offset: 0x29c, Size: 0x1]
	TimelineComponent* TL_Move;//[Offset: 0x2a0, Size: 0x8]
	float TL_MatParameter_Dissolve_C27A8BEA48A6A9AFC6FB2DA0F53EDDEE;//[Offset: 0x2a8, Size: 0x4]
	byte TL_MatParameter__Direction_C27A8BEA48A6A9AFC6FB2DA0F53EDDEE;//[Offset: 0x2ac, Size: 0x1]
	TimelineComponent* TL_MatParameter;//[Offset: 0x2b0, Size: 0x8]
	float TL_UpDown_UpDownPercent_BD5CDCD24E44D39C909693AB24080166;//[Offset: 0x2b8, Size: 0x4]
	byte TL_UpDown__Direction_BD5CDCD24E44D39C909693AB24080166;//[Offset: 0x2bc, Size: 0x1]
	TimelineComponent* TL_UpDown;//[Offset: 0x2c0, Size: 0x8]
	float TimeToComplete;//[Offset: 0x2c8, Size: 0x4]
	float OffsetZ;//[Offset: 0x2cc, Size: 0x4]
	float UpDownRate;//[Offset: 0x2d0, Size: 0x4]
	int count;//[Offset: 0x2d4, Size: 0x4]
	SplineComponent* SplineCache;//[Offset: 0x2d8, Size: 0x8]
	float PlaybackPosition;//[Offset: 0x2e0, Size: 0x4]
	float FixValue;//[Offset: 0x2e4, Size: 0x4]
	void OnRep_SplineCache();// 0xa14b3154d001
	void ShipMove(float Alpha, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetSplineLength_ReturnValue, float CallFunc_Lerp_ReturnValue, Transform CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, HitResult CallFunc_K2_SetActorTransform_SweepHitResult, bool CallFunc_K2_SetActorTransform_ReturnValue);// 0x180402b31acd100
	void OnRep_PlaybackPosition(bool CallFunc_IsServer_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_GetPlaybackPosition_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0xb0ef3154d001
	SplineComponent* GetSpline(bool CallFunc_IsValid_ReturnValue, Actor*[] CallFunc_GetAllActorsWithTag_OutActors, Actor* CallFunc_Array_Get_Item, SplineComponent* CallFunc_GetComponentByClass_ReturnValue);// 0xb0f93154d001
	void TL_UpDown__FinishedFunc();// 0xb0f83154d001
	void TL_UpDown__UpdateFunc();// 0xffffff87312cd009
	void TL_MatParameter__FinishedFunc();// 0xa1373154d001
	void TL_MatParameter__UpdateFunc();// 0xb0d1312cd001
	void TL_Move__FinishedFunc();// 0xb0f03154d001
	void TL_Move__UpdateFunc();// 0x230393154d001
	void ReceiveBeginPlay();// 0xffffff8a312cd002
	void ReceiveTick(float DeltaSeconds);// 0xffffff87312cd000
	void ShipDissolve();// 0xffffffff38672100
	void ShipAppear();// 0xb0c63154d001
	void ShipToMove();// 0xffffff87312cd000
	void ExecuteUbergraph_BP_SI_AirdropShip(int EntryPoint, SplineComponent* CallFunc_GetSpline_ReturnValue, Rotator CallFunc_GetRotationAtSplinePoint_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, float K2Node_Event_DeltaSeconds, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_GetPlaybackPosition_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xd71c312cd041

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	void Stop();// 0x62ac312cd041
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x62ab312cd041
	void SetTimelineLengthMode(byte NewLengthMode);// 0x62aa312cd041
	void SetTimelineLength(float NewLength);// 0x62a9312cd041
	void SetPlayRate(float NewRate);// 0x62a8312cd041
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x62a7312cd041
	void SetNewTime(float NewTime);// 0x62a6312cd041
	void SetLooping(bool bNewLooping);// 0x62a5312cd041
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x62a4312cd041
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x62a3312cd041
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x62a2312cd041
	void ReverseFromEnd();// 0x62a1312cd041
	void Reverse();// 0x62a0312cd041
	void PlayFromStart();// 0x629f312cd041
	void Play();// 0x629e312cd041
	void OnRep_Timeline();// 0x629d312cd041
	bool IsReversing();// 0x629c312cd041
	bool IsPlaying();// 0x629b312cd041
	bool IsLooping();// 0x629a312cd041
	float GetTimelineLength();// 0x6299312cd041
	float GetPlayRate();// 0x6298312cd041
	float GetPlaybackPosition();// 0x6297312cd041
	bool GetIgnoreTimeDilation();// 0x6296312cd041

--------------------------------
Class: BPC_CountDown_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	UI_CountDown_C* CountDownWidget;//[Offset: 0xb8, Size: 0x8]
	int Time;//[Offset: 0xc0, Size: 0x4]
	TimerHandle Timer;//[Offset: 0xc8, Size: 0x8]
	int LocalTime;//[Offset: 0xd0, Size: 0x4]
	TimerHandle LocalTimer;//[Offset: 0xd8, Size: 0x8]
	delegate OnLocalTimeChange;//[Offset: 0xe0, Size: 0x10]
	delegate OnCountDownFinished;//[Offset: 0xf0, Size: 0x10]
	int MatchingText;//[Offset: 0x100, Size: 0x4]
	int MatchingTime;//[Offset: 0x104, Size: 0x4]
	delegate OnMatchCountDownFinished;//[Offset: 0x108, Size: 0x10]
	TimerHandle TimerMatch;//[Offset: 0x118, Size: 0x8]
	bool bCountDownFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	void [S]StopMatchCountDown(UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0xa06f3154d001
	static void [S]StartMatchCountDown(int MatchTime, out const delegate Event, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0xa06e3154d001
	static void [S]StartCountDown(int Time, out const delegate Event, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0xa06d3154d001
	void [C]StopCountDown(int CallFunc_StopSound2D_ReturnValue);// 0xa06c3154d001
	void OnRep_Time(bool CallFunc_IsServer_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0xa06b3154d001
	void GetCountDownWidget(out UI_CountDown_C* Output_Get1, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_CountDown_C* K2Node_DynamicCast_AsUI_Count_Down, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0xa06a3154d001
	void ReceiveBeginPlay();// 0xa0693154d001
	void StartCountDown(int Time);// 0xa0683154d001
	void OnCountDownTime();// 0xa0673154d001
	void [C]ClientCountDown();// 0xa0663154d001
	void CountDownTick();// 0xa0653154d001
	void MCountDownTick();// 0xa0643154d001
	void CustomEvent(enum NewState);// 0xa0633154d001
	void ExecuteUbergraph_BPC_CountDown(int EntryPoint, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_IntInt_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsServer_ReturnValue, int K2Node_CustomEvent_Time, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, int CallFunc_PlaySound2D_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, GameStateBase* CallFunc_GetGameState_ReturnValue, enum K2Node_CustomEvent_NewState, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0xa0623154d001
	void OnMatchCountDownFinished__DelegateSignature();// 0xa0723154d001
	void OnCountDownFinished__DelegateSignature();// 0xffffffff49f04be0
	void OnLocalTimeChange__DelegateSignature(int Time);// 0xffffff8a312cd002

--------------------------------
Class: UI_CountDown_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8]
	WidgetAnimation* Flip;//[Offset: 0x348, Size: 0x8]
	TextBlock* Number;//[Offset: 0x350, Size: 0x8]
	UI_HUD_Notice_Lv3_C* UI_HUD_Notice_Lv3;//[Offset: 0x358, Size: 0x8]
	WidgetSwitcher* wStyle;//[Offset: 0x360, Size: 0x8]
	int Time;//[Offset: 0x368, Size: 0x4]
	void SequenceEvent__ENTRYPOINTUI_CountDown(Overlay* NumberContainer);// 0x9f053154d001
	void SetMiniCountDownText(FString InText);// 0x9f043154d001
	void SetCountDownStyle(byte Style, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x9f033154d001
	void Finish();// 0x9f023154d001
	void NumberContainer_Event(Overlay* NumberContainer);// 0x9f013154d001
	void PreConstruct(bool IsDesignTime);// 0x9f003154d001
	void 通过参数倒数                                                                                  (int Time);// 0x9eff3154d001
	void CustomEvent();// 0x9efe3154d001
	void 通过数据模块倒数                                                                            (FString 数据名称                                                                                        );// 0x9efd3154d001
	void 倒数值                                                                                           (int OldValue, int NewValue);// 0xaf313154d008
	void CountDownBySingleNumber(int Number);// 0xffffffffae5b6080
	static void ExecuteUbergraph_UI_CountDown(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Overlay* K2Node_CustomEvent_NumberContainer, bool K2Node_Event_IsDesignTime, FText CallFunc_Conv_IntToText_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_Time, FString K2Node_CustomEvent_____, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_GetDataModuleIntValue_CurrentValue, SolarGameMode_CustomData* CallFunc_BindEventToModeDataChange_Int_ReturnValue, int K2Node_CustomEvent_OldValue, int K2Node_CustomEvent_NewValue, int CallFunc_Abs_Int_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_CustomEvent_Number);// 0x9ef93154d001

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x14c, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x3719312cd041
	void SetActiveWidget(Widget* Widget);// 0x3718312cd041
	Widget* GetWidgetAtIndex(int Index);// 0x3717312cd041
	int GetNumWidgets();// 0x3716312cd041
	int GetActiveWidgetIndex();// 0x3715312cd041
	Widget* GetActiveWidget();// 0x3714312cd041

--------------------------------
Class: SolarGameMode_CustomData.Object
	FString[] ReadAccess;//[Offset: 0xa0, Size: 0x10]
	FString[] WriteAccess;//[Offset: 0xb0, Size: 0x10]
	void UnBindChangeEvent(Object* TargetObject);// 0x47c4312cd041
	void GetVector3(const FString Tag, bool bDefaultData, out Vector CurrentValue);// 0x47c3312cd041
	void GetVector2(const FString Tag, bool bDefaultData, out Vector2D CurrentValue);// 0x47c2312cd041
	void GetString(const FString Tag, bool bDefaultData, out FString CurrentValue);// 0x47c1312cd041
	void GetObject(const FString Tag, bool bDefaultData, out Object* CurrentValue);// 0x47c0312cd041
	void GetInt(const FString Tag, bool bDefaultData, out int CurrentValue);// 0x47bf312cd041
	void GetFloat(const FString Tag, bool bDefaultData, out float CurrentValue);// 0x47be312cd041
	void GetBool(const FString Tag, bool bDefaultData, out bool CurrentValue);// 0x47bd312cd041

--------------------------------
Class: S_EventList_BattleRoyal
	S_Event_BattleRoyale[] EventList_3_9C55B4BD476EE1024C917DAC11DB6F31;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: S_Event_BattleRoyale
	int BattleTime_15_6488AAB44E84633B11E7DF844AD3B376;//[Offset: 0x0, Size: 0x4]
	enum EventType_11_8FC191774137C63ED18FD5987B59941D;//[Offset: 0x4, Size: 0x1]
	<FString,FString> EventParam_10_DC47076342DAE72F001FD1A032026480;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: BP_MapInfoComponent_C.CGMMapInfo.GameModeCompBase.ActorComponent.Object
	AirlineData Airline;//[Offset: 0x180, Size: 0x28]
	Vector[] SafeAreaCenters;//[Offset: 0x1a8, Size: 0x10]
	bool StaticAirline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	bool StaticSafeArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 0x1]
	DataTable* DT_EventTimeline_BattleRoyale;//[Offset: 0x1c0, Size: 0x8]
	bool UsePoisonCircleMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	Vector2D TempDir;//[Offset: 0x1cc, Size: 0x8]
	bool UseFakePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	<int,Vector2D> FakePointRangeArr;//[Offset: 0x1d8, Size: 0x50]
	bool UseFakeBombPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	<int,Vector2D> FakeBombPointRangeArr;//[Offset: 0x230, Size: 0x50]
	Vector PreCirclePoint;//[Offset: 0x280, Size: 0xc]
	float[] CircleRadiusArr;//[Offset: 0x290, Size: 0x10]
	int StaticAirlineID;//[Offset: 0x2a0, Size: 0x4]
	void Calculate Required Parameters(out float[] RadiusArr, int Index, out float Radius, out float MaxOffset, out float GoToTheCentreRadius, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_FMin_ReturnValue);// 0x9da73154d001
	void Random Get Fake Bomb Point(out const int Key, out Vector Pos, out bool Success, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_RandomUnitVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x9da63154d001
	void SetFakeBombPointRangeArrr(<int,Vector2D> FakeBombPointRangeArr);// 0x9de03154d001
	void SetFakePointRnageArr(<int,Vector2D> FakePointRnageArr);// 0x9da43154d001
	void Get Safe Area Centers Len(out int Len, int CallFunc_Array_Length_ReturnValue);// 0x9da33154d001
	void CalculateFakePoint(Vector Centre, float SmallRadiu, float LargeRadiu, int Index, out Vector Pos, Vector TempPos, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Max_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Normal_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_VSize2D_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, float CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, float CallFunc_FMin_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, float CallFunc_Abs_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary);// 0x9da23154d001
	void Join Next(float Radius, float MaxOffset, int LastIndex, out Vector[] TargetArray, float GoToTheCentreRadius, bool AddFlag, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, Vector CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_RandomFloatInRange_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Conv_FloatToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int Temp_int_Variable, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Vector_Normal2D_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Random_Selection_Add, int CallFunc_Array_Add_ReturnValue);// 0x9da13154d001
	void Random Selection(float TargetDisMax, float Radius, out Vector[] TargetArray, bool NeedCheckBoundary, out bool Add, int CallFunc_Array_LastIndex_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Array_Get_Item, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, int CallFunc_Array_Add_ReturnValue);// 0x9da03154d001
	void JudgeBoundary(Vector Pos, float Radius, out bool DontInBoundary, Vector2D NewLocalVar, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, bool CallFunc_CheckMapDarkDataWithVector_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsPointInBox_ReturnValue);// 0x9d9f3154d001
	static void Calculate Poison Circle Point Array(out float[] RadiusArr, Vector FirstPoint, bool Failed, int Index, Vector[] TempAreaPosArray, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Calculate_Required_Parameters_Radius, float CallFunc_Calculate_Required_Parameters_MaxOffset, float CallFunc_Calculate_Required_Parameters_GoToTheCentreRadius, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_PoisonCircleMarker_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_GetRandomVectorFromMapDarkData_ReturnValue, int CallFunc_Max_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x9d9e3154d001
	void Get Safe Area Center(int Index, out Vector Pos, Vector Point, bool Temp_bool_Variable, bool CallFunc_Greater_IntInt_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D[] CallFunc_Map_Values_Values, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector2D CallFunc_Array_Get_Item, Vector2D K2Node_Select_Default, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_CalculateFakePoint_Pos, bool CallFunc_BooleanAND_ReturnValue, Vector[] K2Node_Select_Default, Vector CallFunc_Array_Get_Item);// 0x9d9d3154d001
	static int GetAirline(out AirlineData Airline, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue);// 0xaf163154d001
	void SetStaticSafeArea(out Vector[] SafeAreaCenters);// 0xaf123154d001
	void SetStaticAirline(AirlineData Airline, int StaticAirlineID);// 0xaf133154d001

--------------------------------
Class: CGMMapInfo.GameModeCompBase.ActorComponent.Object
	Vector[] AreaPosArray;//[Offset: 0xd0, Size: 0x10]
	int MapID;//[Offset: 0xe0, Size: 0x4]
	int UsedAirlineID;//[Offset: 0xe4, Size: 0x4]
	AirlineData UsedAirlineData;//[Offset: 0xe8, Size: 0x28]
	<int,AirlineData> AirlineDataList;//[Offset: 0x120, Size: 0x50]
	int MaskWidth;//[Offset: 0x170, Size: 0x4]
	float MaskScale;//[Offset: 0x174, Size: 0x4]
	int MapWidth;//[Offset: 0x178, Size: 0x4]
	int MapHeight;//[Offset: 0x17c, Size: 0x4]
	void LoadAirlineData();// 0x3da1312cd041
	void InitInfo(int InMapID);// 0x3da0312cd041
	int GetUsedAirlineData(out AirlineData outData);// 0x3d9f312cd041
	int GetMapIDByName(SCustomGameState* InGameState, FString Name);// 0x3d9e312cd041

--------------------------------
Class: BP_PoisonCircleMarker_C.SolarMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x298, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a0, Size: 0x8]
	void ReceiveBeginPlay();// 0xae3e312cd041
	void ExecuteUbergraph_BP_PoisonCircleMarker(int EntryPoint);// 0xae3f312cd041

--------------------------------
Class: SolarVehicleSubsystem.WorldSubsystem.Subsystem.Object
	delegate OnVehicleSpawned;//[Offset: 0x30, Size: 0x10]
	delegate OnVehicleDestroyed;//[Offset: 0x40, Size: 0x10]
	void GetActiveVehicleList(out Actor*[] OutActiveVehicles);// 0x54c6312cd041

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: BP_BattleRoylePoisonCircle_C.BP_CustomPoisonCircle_Template_C.SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	FString GetModuleName();// 0xae46312cd041

--------------------------------
Class: BP_CustomPoisonCircle_Template_C.SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3d0, Size: 0x8]
	StaticMeshComponent* StaticMeshCicle;//[Offset: 0x3d8, Size: 0x8]
	StaticMeshComponent* SafeArea;//[Offset: 0x3e0, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x3e8, Size: 0x8]
	<SolarAbilitySystemComponent*,GameplayAbilitySpecHandle> AbilityMap;//[Offset: 0x3f0, Size: 0x50]
	class GameplayAbility* DamageAbility;//[Offset: 0x440, Size: 0x8]
	float Distance Threshold;//[Offset: 0x448, Size: 0x4]
	float InitRadius;//[Offset: 0x44c, Size: 0x4]
	Vector InitPosition;//[Offset: 0x450, Size: 0xc]
	FString GetModuleName();// 0x89763154d001
	void SetMeshVisibility(float CallFunc_GetCurrentSafeAreaRadius_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x89753154d001
	static void DataTrace(int inInt, Vector Vector, float InFloat, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x89743154d001
	static void ActorOutSpace(Actor* Target, float CallFunc_GetCurrentDamage_ReturnValue, SolarAbilitySystemComponent* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameplayAbilitySpecHandle CallFunc_K2_GiveAbilityAndActivateOnce_ReturnValue);// 0x89733154d001
	static void ActorEnterSpace(Actor* Target, SolarAbilitySystemComponent* AbilityComponent, SolarAbilitySystemComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameplayAbilitySpecHandle CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x89723154d001
	static void ClearAllAbilities(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarAbilitySystemComponent*[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, SolarAbilitySystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, GameplayAbilitySpecHandle CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x89713154d001
	void OnLoaded_2CF9BD9E4D7B992D773DE7AE62F29135(Object* Loaded);// 0x89703154d001
	void ReceiveBeginPlay();// 0x896f3154d001
	void ReceiveTick(float DeltaSeconds);// 0x896e3154d001
	void [S]SetNextArea(Vector Center, float Radius, float WaitTime, float MoveTime, int DamageLevel);// 0x896d3154d001
	void ShowEffectInside(bool bInside);// 0x896c3154d001
	void Evnet_ResetMaterial();// 0x896b3154d001
	void ReceiveActorEnterPoisonCircle(Actor* Actor);// 0x1c00873141d100
	void ReceiveActorLeavePoisonCircle(Actor* Actor);// 0xfffffffec745a580
	static void ExecuteUbergraph_BP_CustomPoisonCircle_Template(int EntryPoint, float CallFunc_GetCurBattleTime_ReturnValue, bool CallFunc_IsServer_ReturnValue, int CallFunc_FTrunc_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, float K2Node_Event_DeltaSeconds, Vector K2Node_CustomEvent_Center, float K2Node_CustomEvent_Radius, float K2Node_CustomEvent_WaitTime, float K2Node_CustomEvent_MoveTime, int K2Node_CustomEvent_DamageLevel, bool K2Node_Event_bInside, float CallFunc_Conv_IntToFloat_ReturnValue, CircleSafeAreaInfo K2Node_MakeStruct_CircleSafeAreaInfo, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_VectorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, Object* Temp_object_Variable, Object* K2Node_CustomEvent_Loaded, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, Material* K2Node_DynamicCast_AsMaterial, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_Event_Actor, Actor* K2Node_Event_Actor);// 0xae49312cd041

--------------------------------
Class: SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	<float,CurveFloat*> MiniMapScaleMap;//[Offset: 0x370, Size: 0x50]
	CircleSafeAreaInfo[] SafeAreaConfigArr;//[Offset: 0x3c0, Size: 0x10]
	void SetNextSafeArea(out const CircleSafeAreaInfo AreaInfo);// 0x46b8312cd041
	void Init(out const Vector InSafeAreaCenterPos, float InPoisonCircleRadius);// 0x46b7312cd041
	float GetNextSafeAreaRadius();// 0x46b6312cd041
	CurveFloat* GetMiniMapFOVCurveByRadius(float InRadius);// 0x46b5312cd041
	float GetCurrentSafeAreaRadius();// 0x46b4312cd041

--------------------------------
Class: CircleSafeAreaInfo.SafeAreaInfoBase
	float Radius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SafeAreaInfoBase
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float WaitTime;//[Offset: 0xc, Size: 0x4]
	float ShrinkTime;//[Offset: 0x10, Size: 0x4]
	float DamageValue;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BP_SolarBombingManager_C.SolarBombingZoneManager.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 0x8]
	FString GetModuleName();// 0xae48312cd041

--------------------------------
Class: SolarBombingZoneManager.Actor.Object
	class SolarBombActor* BPClass;//[Offset: 0x228, Size: 0x8]
	BombingZone[] ZoneArray;//[Offset: 0x230, Size: 0x10]
	int WeightInCar;//[Offset: 0x244, Size: 0x4]
	int WeightInPoision;//[Offset: 0x248, Size: 0x4]
	int WeightInRoom;//[Offset: 0x24c, Size: 0x4]
	Vector2D LocationLimit;//[Offset: 0x250, Size: 0x8]
	float NotifyTime;//[Offset: 0x258, Size: 0x4]
	void OnCreateBombingZone(int ID, bool bSpecificLocation, Vector TargetLocation);// 0x4544312cd041
	BombingZoneBomb GetBombData(int ZoneId);// 0x4543312cd041
	bool CreateBombingZone(out BombingZone Zone, bool bSpecificLocation, Vector TargetLocation);// 0x4542312cd041

--------------------------------
Class: BombingZoneBomb
	float Radius;//[Offset: 0x0, Size: 0x4]
	float MaxDamage;//[Offset: 0x4, Size: 0x4]
	float MinDamage;//[Offset: 0x8, Size: 0x4]
	float VehicleMaxDamage;//[Offset: 0xc, Size: 0x4]
	float VehicleMinDamage;//[Offset: 0x10, Size: 0x4]
	float InVehicleDamageScale;//[Offset: 0x14, Size: 0x4]
	float LandingTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BombingZone
	int instanceID;//[Offset: 0x0, Size: 0x4]
	int ConfigId;//[Offset: 0x4, Size: 0x4]
	float Radius;//[Offset: 0x8, Size: 0x4]
	float Duration;//[Offset: 0xc, Size: 0x4]
	int MinBomb;//[Offset: 0x10, Size: 0x4]
	int MaxBomb;//[Offset: 0x14, Size: 0x4]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	BombingZoneBomb Bomb;//[Offset: 0x24, Size: 0x1c]
	enum State;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SolarBombActor.Actor.Object
	bool bFireWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	BombingZoneBomb BombConfig;//[Offset: 0x22c, Size: 0x1c]
	bool bAutoDestroyAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float TargetLandingTime;//[Offset: 0x254, Size: 0x4]
	ParticleSystem* WaterBombEffect;//[Offset: 0x258, Size: 0x8]
	ParticleSystem* BombEffect;//[Offset: 0x260, Size: 0x8]
	MaterialInstanceDynamic* GuideLine;//[Offset: 0x268, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x270, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x278, Size: 0x8]
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4541312cd041

--------------------------------
Class: BP_Formula_BattleRoyale_C.BP_FormulaBase_C.CGFormula.Info.Actor.Object
	int WarmGameExp;//[Offset: 0x25c, Size: 0x4]
	<SolarPlayerState*,bool> WeaponExp;//[Offset: 0x260, Size: 0x50]
	<int> WarmGameIdSet;//[Offset: 0x2b0, Size: 0x50]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x300, Size: 0x8]
	SettlementReward[] GetSettlementRewards(SolarPlayerState* InPS, int MatchRuleID, int MaxRealPersonIndex, int MaxRealPerson, int ItemID, int[] ItemDrop, SolarPlayerState* PS, int RealPersonCount, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_Greater_IntInt_ReturnValue, const SolarTablesData_BattleEndRankSettlement CallFunc_GetRowData_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, SolarGameState* K2Node_DynamicCast_AsSolar_Game_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SettlementReward K2Node_MakeStruct_SettlementReward, int CallFunc_Array_Get_Item, SettlementReward[] K2Node_MakeArray_Array, int CallFunc_Array_Get_Item, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_LessEqual_IntInt_ReturnValue, int[] CallFunc_GetRowKeys_OutKeys, int CallFunc_GetRowKeys_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, const SolarTablesData_BattleEndRankSettlement CallFunc_GetRowData_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x95093154d001
	bool IsSettlementBagItem(SolarPlayerState* InPS, byte CallFunc_GetBattleState_State, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x95083154d001
	void GetDefenderManager(out BP_DefenderManager_C* Output_Get, bool CallFunc_IsValid_ReturnValue, DefenderManager* CallFunc_GetDefenderManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0x95073154d001
	void MVPLifeTimeScore(float Life Time, out float LTMVPScore, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x95063154d001
	static void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult, int[] Result, const int Temp_int_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int[] CallFunc_GetStrategyGuideConditions_OutResult, int CallFunc_Array_Add_ReturnValue);// 0x95053154d001
	static int CalculateTeamRank(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x95043154d001
	static int CalculatePlayerRank(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x95033154d001
	float BattleStateDealFloat(float Input, byte Temp_byte_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, byte CallFunc_GetBattleState_State, float K2Node_Select_Default);// 0x95023154d001
	int BattleStateDealInt(int Input, byte Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_GetBattleState_State, int K2Node_Select_Default);// 0x95013154d001
	void GetBattleState(out byte State, byte CallFunc_GetDataByte_OutValue, bool CallFunc_GetDataByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x95003154d001
	float GetKDA(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float Temp_float_Variable, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BattleStateDealFloat_ReturnValue);// 0x94ff3154d001
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(SolarPlayerState* InPS, SettlementParam_ExtraRewardInfo[] CommonRewards, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString Temp_string_Variable, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, bool Temp_bool_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default, byte CallFunc_GetBattleState_State, FString CallFunc_FormatRewardItem_ItemString, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString[] K2Node_MakeArray_Array, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Combine_Reward_Item_RewardString, int Temp_int_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, int K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo[] Temp_struct_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, bool Temp_bool_Variable, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, SettlementParam_ExtraRewardInfo[] K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_FormatRewardItem_ItemString, FString K2Node_Select_Default, FString[] K2Node_MakeArray_Array, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo[] K2Node_MakeArray_Array);// 0x94fe3154d001
	void GetPlayerData(SolarPlayerState* Player, out int KillCount, out int KillDown, out int Assist, out int SaveCount, out float Lifetime, out float CauseDamage, out int Rank, out int TeamRank, out int DeathCount, out bool TeamAced, out bool IsMVP, out bool IsCustomRoomActive, out byte DefenderType, FString SideID, FString PlayerId, byte CallFunc_GetDataByte_OutValue, bool CallFunc_GetDataByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue);// 0x94fd3154d001
	float CalculateMVPScore(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_MVPLifeTimeScore_LTMVPScore, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BattleStateDealFloat_ReturnValue);// 0x94fc3154d001
	int GetZomborg(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool Temp_bool_Variable, int CallFunc_FTrunc_ReturnValue, int Temp_int_Variable, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int K2Node_Select_Default);// 0x94fb3154d001
	int GetWeaponExp(SolarPlayerState* InPS, int InWeaponID, int Exp, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float CallFunc_GetMapDataFloat_OutValue, bool CallFunc_GetMapDataFloat_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int Temp_int_Variable, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, const bool Temp_bool_Variable, int CallFunc_Round_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue);// 0x94fa3154d001
	static void GetCharacterExp(SolarPlayerState* InPS, out int OutGetExp, out int[] OutReason, int[] ExpReason, int Exp, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xa95d3154d008
	int GetAccountExp(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int CallFunc_GetFixedLevelExp_ReturnValue, int K2Node_Select_Default);// 0xffffffff7d13dc90
	void GetShowPageIndexs(SolarPlayerState* InPS, out const SettlePageParam InParam, out int[] OutResult, SolarPlayerState* PlayerState, int[] SettlePages, const int Temp_int_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, const int Temp_int_Variable, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const int Temp_int_Variable, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, SolarGameInstanceBase* CallFunc_GetSolarGameInstanceBase_ReturnValue, SolarLuaHelper* CallFunc_GetSolarLuaHelper_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_IsBattlePassInfoUpdated_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int[] K2Node_MakeArray_Array);// 0x94f63154d008

--------------------------------
Class: BP_FormulaBase_C.CGFormula.Info.Actor.Object
	float ExpGain-LifeTimeLimit;//[Offset: 0x258, Size: 0x4]
	static int GetFixedLevelExp(int Origin, SolarPlayerState* Player, int finalExp, bool Temp_bool_Variable, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_AccountFixedExp CallFunc_TryGetRowData_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default);// 0xe37d312cd041
	static void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult, int[] Result, const int Temp_int_Variable, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_Greater_IntInt_ReturnValue, PlayerStatisticsData* CallFunc_GetPlayerStatData_ReturnValue, int[] CallFunc_GetValue_IntArray_OutResult, int CallFunc_GetPlayerStatisticData_OutValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const int Temp_int_Variable, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x142e73154d008

--------------------------------
Class: BPC_AiManagerBattleRoyale_C.BPC_AiManagerBase_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe8, Size: 0x8]
	SCMPlayerState*[] TempAI;//[Offset: 0xf0, Size: 0x10]
	<FString,int> MemberAIOrder;//[Offset: 0x100, Size: 0x50]
	int SpawnIndex;//[Offset: 0x150, Size: 0x4]
	bool bCanSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	<FString,int> PureAIOrder;//[Offset: 0x158, Size: 0x50]
	bool bSpawnPlayerTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	int AiCountPreSpawn;//[Offset: 0x1ac, Size: 0x4]
	int RealPlayer;//[Offset: 0x1b0, Size: 0x4]
	SCMPlayerState*[] TeammateAI;//[Offset: 0x1b8, Size: 0x10]
	bool bTeammateAiFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	S_WarmGameConfig WarmGameConfig;//[Offset: 0x1d0, Size: 0x18]
	bool bIsWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	FString[] PureAiSides;//[Offset: 0x1f0, Size: 0x10]
	<FString,bool> TeammateAIConditions;//[Offset: 0x200, Size: 0x50]
	void ReplenishAITeammate(SCMPlayerState*[] AIPlayers, FString[] AISide, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const enum[] Temp_byte_Variable, const enum[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, const FString[] Temp_string_Variable, FString CallFunc_PickSide_SIde, const FString[] K2Node_MakeArray_Array, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_ChangePlayerSideJob_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int Temp_int_Loop_Counter_Variable, SCMPlayerState* CallFunc_Array_Get_Item, FString CallFunc_GetPlayerName_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Map_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_PickSide_SIde, const FString[] K2Node_MakeArray_Array, bool CallFunc_ChangePlayerSideJob_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x925b3154d001
	BPC_CountDown_C* GetCountDownComponent(GameStateBase* CallFunc_GetGameState_ReturnValue, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue);// 0x925a3154d001
	void StopAiBehavior(SCMPlayerState*[] Temp, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarBotAIController* CallFunc_GetAIController_Controller, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x92593154d001
	bool CanModeSpawnAiTeammate(bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, bool CallFunc__S_PlayInEditor_bIsEditor, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0x92583154d001
	void GetAIController(SolarPlayerState* PlayerState, out SolarBotAIController* Controller, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue);// 0x92573154d001
	void SpawnAI(bool bTeammateAI, FString Side, out SCMPlayerState* PlayerState, bool Temp_bool_Variable, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Map_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const SCMPlayerState*[] K2Node_Select_Default, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int CallFunc_GetRandomCharacter_Output, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_GetRandomDifficulty_Difficulty, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, Vector CallFunc_SpawnLocation_ReturnValue, SCMPlayerState* CallFunc_CreateBotAISingle_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x92563154d001
	void GetSpawnInterval(out float Interval, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, BPC_CountDown_C* CallFunc_GetCountDownComponent_ReturnValue, BPC_CountDown_C* CallFunc_GetCountDownComponent_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, float K2Node_Select_Default, float K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x92553154d001
	static void UpdatePureAiOrder(int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, FString[] CallFunc_Map_Keys_Keys);// 0x92543154d001
	void PickSide(bool RealPlayerTeam, out FString Side, FString tempSide, bool Temp_bool_Variable, <FString,int> K2Node_Select_Default, FString[] CallFunc_Map_Keys_Keys, bool CallFunc_Map_Remove_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x92533154d001
	static void DeleteTempAI(int count, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, const SCMPlayerState*[] K2Node_MakeArray_Array, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_DeleteAIFromBattleForPlayer_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x92523154d001
	void RunBehaviourTree(SCMPlayerState* Player, BehaviorTree* BTAsset, enum CallFunc_GetPlayerPawn_outType, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x92513154d001
	static Vector SpawnLocation(BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x14c653154d008
	bool IsPlayerFull(BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xa9db3154d008
	BP_Logic_BattleRoyale_C* GetLogicComponent(GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x924e3154d001
	void MatchFinished();// 0x924d3154d001
	void PreSpawnAI();// 0x924c3154d001
	void ReceiveBeginPlay();// 0x924b3154d001
	void SpawnAIDynamic();// 0x924a3154d001
	void OnBattleStateChanged(byte NewState);// 0xfffffffff41fac00
	void CustomEvent();// 0x92483154d001
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0xffffffffa44b6890
	void CreateTeammateAIOrder();// 0x92463154d001
	static void ExecuteUbergraph_BPC_AiManagerBattleRoyale(int EntryPoint, const bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const FString Temp_string_Variable, const bool Temp_bool_Variable, const FString Temp_string_Variable, const bool Temp_bool_Variable, int Temp_int_Variable, int CallFunc_Map_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, bool Temp_bool_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Array_Index_Variable, float CallFunc_GetSpawnInterval_Interval, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, <FString,int> CallFunc_GetMemberAIOrder_Side_Count, bool CallFunc_IsPlayerFull_ReturnValue, SCMPlayerState* CallFunc_SpawnAI_PlayerState, int CallFunc_Map_Length_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_RandomIntInRange_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_NewState, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsPlayerFull_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, bool CallFunc_Array_Contains_ReturnValue, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, SolarBotAIController* CallFunc_GetAIController_Controller, bool CallFunc_LessEqual_IntInt_ReturnValue, const SolarBotAIController*[] K2Node_MakeArray_Array, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Conv_BoolToString_ReturnValue, BehaviorTree* K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_PickSide_SIde, SCMPlayerState* CallFunc_SpawnAI_PlayerState, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, int K2Node_Select_Default, bool CallFunc_CanModeSpawnAiTeammate_ReturnValue, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_bIsAi, bool CallFunc_Not_PreBool_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BPC_WarmGame_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, bool[] CallFunc_Map_Values_Values, bool CallFunc_Array_Contains_ReturnValue);// 0xffffff87312cd000

--------------------------------
Class: BPC_AiManagerBase_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	FString PreSpawnAiSide;//[Offset: 0xb8, Size: 0x10]
	int TeammateCount;//[Offset: 0xc8, Size: 0x4]
	SCMPlayerState*[] AIList;//[Offset: 0xd0, Size: 0x10]
	int AILevelMax;//[Offset: 0xe0, Size: 0x4]
	int DefaultAiLevel;//[Offset: 0xe4, Size: 0x4]
	static void GetRandomDifficulty(out int Difficulty, <int,int> CallFunc_GetAILevelConfigCurrentMatch_AILevelConfig, bool CallFunc_GetAILevelConfigCurrentMatch_ReturnValue, int CallFunc_GetRandomKeyInWidget_HitKey);// 0x8dcf3154d001
	static void GetMemberAIOrder(out <FString,int> Side-Count, FString[] RealPlayerSide, <FString,int> TempSideCount, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, int Temp_int_Array_Index_Variable, const FString[] Temp_string_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_HasTeammatesAI_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x8dce3154d001
	void ReceiveBeginPlay();// 0xffffff8a312cd002
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0xffffff8a312cd002
	void CustomEvent();// 0x8dcb3154d001
	static void ExecuteUbergraph_BPC_AiManagerBase(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, GameModeBase* CallFunc_GetGameMode_ReturnValue, SCMPlayerState* K2Node_CustomEvent_NewPlayer, bool K2Node_CustomEvent_bIsAi, BP_Logic_Framework_C* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_Array_Add_ReturnValue, <int,int> CallFunc_GetAILevelConfigCurrentMatch_AILevelConfig, bool CallFunc_GetAILevelConfigCurrentMatch_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_MaxOfIntArray_IndexOfMaxValue, int CallFunc_MaxOfIntArray_MaxValue);// 0x2dffb5315bd02e

--------------------------------
Class: BPC_AirlineCruise_C.AirlineCruiseComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x190, Size: 0x8]
	int AirLineID;//[Offset: 0x198, Size: 0x4]
	<SolarPlayerState*,Vector> EjectLocation;//[Offset: 0x1a0, Size: 0x50]
	<SolarPlayerState*,Vector> LandLocation;//[Offset: 0x1f0, Size: 0x50]
	SolarPlayerState*[] ForceJumpPlayerList;//[Offset: 0x240, Size: 0x10]
	SolarCharacter*[] CruisePlayers;//[Offset: 0x250, Size: 0x10]
	AirlineData AirlineData;//[Offset: 0x260, Size: 0x28]
	float Height;//[Offset: 0x288, Size: 0x4]
	float Speed;//[Offset: 0x28c, Size: 0x4]
	bool ClearAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool GetPlayerForceJumped(out const SolarPlayerState* TargetPlayer, bool CallFunc_Array_Contains_ReturnValue);// 0x92433154d001
	void GetPlayerLandLocation(out const SolarPlayerState* TargetPlayer, out Vector Location, out bool Succeed, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2dffb5315bd02e
	void GetPlayerEjectLocation(out const SolarPlayerState* TargetPlayer, out Vector Location, out bool Succeed, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x92413154d001
	void GetAirlineData_RealWorld(out const AirlineData AirlineData, out Vector2D LineStart, out Vector2D LineEnd, out Vector2D JumpStart, out Vector2D JumpEnd, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue);// 0x92403154d001
	void MiniMap2RealWorld(Vector2D JumpStart, Vector2D JumpEnd, Vector2D LineStart, Vector2D LineEnd, out Vector2D JumpStartR, out Vector2D JumpEndR, out Vector2D LineStartR, out Vector2D LineEndR, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue);// 0x923f3154d001
	static void StartParachutingWithRandomAirline(out SolarCharacter*[] TargetCharacters, out int Air Line ID, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SolarCharacter* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_BeginCruise_IntoParachuteZoneTime, float CallFunc_BeginCruise_ForceParachuteTime, float CallFunc_BeginCruise_CruiseEndTime, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue, Vector2D CallFunc_GetAirlineData_RealWorld_LineStart, Vector2D CallFunc_GetAirlineData_RealWorld_LineEnd, Vector2D CallFunc_GetAirlineData_RealWorld_JumpStart, Vector2D CallFunc_GetAirlineData_RealWorld_JumpEnd, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x18ecd3154d008
	void StartParachuting(out const SolarCharacter*[] TargetCharacters, bool ClearAllItems, int AirLineID, out const AirlineData AirlineData);// 0xffffff87312cd000
	void OnPlayerEjectingStateChanged(byte State, SolarCharacter* TargetCharacter);// 0xd970312cd041
	void ExecuteUbergraph_BPC_AirlineCruise(int EntryPoint, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const SolarCharacter*[] K2Node_CustomEvent_TargetCharacters, bool K2Node_CustomEvent_ClearAllItems, int K2Node_CustomEvent_AirlineID, const AirlineData K2Node_CustomEvent_AirlineData, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, Vector2D CallFunc_GetAirlineData_RealWorld_LineStart, Vector2D CallFunc_GetAirlineData_RealWorld_LineEnd, Vector2D CallFunc_GetAirlineData_RealWorld_JumpStart, Vector2D CallFunc_GetAirlineData_RealWorld_JumpEnd, int Temp_int_Loop_Counter_Variable, BoarderInfo CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, byte Temp_byte_Variable, SolarCharacter* CallFunc_Array_Get_Item, <SolarPlayerState*,Vector> K2Node_Select_Default, const Transform CallFunc_GetTransform_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_BeginCruise_IntoParachuteZoneTime, float CallFunc_BeginCruise_ForceParachuteTime, float CallFunc_BeginCruise_CruiseEndTime, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue);// 0x2dffb5315bd02e

--------------------------------
Class: AirlineCruiseComponent.GameModeCompBase.ActorComponent.Object
	int UsedAirlineID;//[Offset: 0xcc, Size: 0x4]
	class SolarCapsuleRoot* CapsuleRootClass;//[Offset: 0xd0, Size: 0x8]
	SolarCapsuleRoot* CapsuleRoot;//[Offset: 0xd8, Size: 0x8]
	<int,AirlineData> AirlineDataList;//[Offset: 0xe0, Size: 0x50]
	SolarCharacter* CruiseTemplate;//[Offset: 0x130, Size: 0x8]
	class SolarFlyTrail* FlyTrailClass;//[Offset: 0x140, Size: 0x8]
	bool bEnableSkydiveTrail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	SolarFlyTrail* FlyTrailActor;//[Offset: 0x150, Size: 0x8]
	bool bDebugFlyTrail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	class SolarTrailEffect* DebugTrailEffectClass;//[Offset: 0x160, Size: 0x28]
	bool bDebugFlyTrailPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	void OnPlayerJoin(SCMPlayerState* PlayerState);// 0x3cd7312cd041
	void OnCruiseCompleted(Actor* DestroyedRoot);// 0x3cd6312cd041
	void OnAIJoin(SCMPlayerState* PlayerState);// 0x3cd5312cd041
	int GetUsedAirlineData(out AirlineData outData);// 0x3cd4312cd041

--------------------------------
Class: SBattleRoyaleGameModeAIComp.SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	bool bBotSkipAICruise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e, Size: 0x1]
	float MaxLootDistanceToAirline;//[Offset: 0x120, Size: 0x4]
	bool bCanSelectLootZoneOutPoisonCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 0x1]

--------------------------------
Class: SolarFlyTrail.Actor.Object
	SolarTrailProxyComponent*[] CachedProxyComponents;//[Offset: 0x228, Size: 0x10]
	SoftObjectPath TrailEffectClass;//[Offset: 0x238, Size: 0x18]
	class Object* CachedTrailEffectClass;//[Offset: 0x250, Size: 0x8]
	CharacterSkydiveTrailStaticInfoContainer SkydiveTrailStaticInfo;//[Offset: 0x300, Size: 0x120]
	PackedSkydiveTrailFrameInfoContainer SkydiveTrailFrameInfo;//[Offset: 0x420, Size: 0x120]
	class SkydiveTrailEffect* SkydiveTrailEffectClass;//[Offset: 0x540, Size: 0x8]
	<SolarPlayerState*,CharacterSkydiveTrailData> SkydiveTrailData;//[Offset: 0x548, Size: 0x50]
	SolarPlayerState* LocalPlayerSkydiveTrailProxy;//[Offset: 0x598, Size: 0x8]
	void OnTrailEffectActorDestroyed(Actor* DestroyedActor);// 0x4767312cd041
	void OnTracingCharacterSkydivingStageChanged(SolarCharacter* Character, enum LastStage, enum CurrentStage);// 0x4766312cd041
	void OnRep_TrailEffectClass();// 0x4765312cd041

--------------------------------
Class: SolarTrailProxyComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* PlayerBeingTracked;//[Offset: 0x314, Size: 0x8]

--------------------------------
Class: CharacterSkydiveTrailStaticInfoContainer.FastArraySerializer
	CharacterSkydiveTrailStaticInfo[] InfoArray;//[Offset: 0x108, Size: 0x10]
	SolarFlyTrail* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: CharacterSkydiveTrailStaticInfo.FastArraySerializerItem
	FString CharacterId;//[Offset: 0x10, Size: 0x10]
	SolarPlayerState* PlayerState;//[Offset: 0x20, Size: 0x8]
	FString TrailAssemblingId;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: PackedSkydiveTrailFrameInfoContainer.FastArraySerializer
	PackedSkydiveTrailFrameInfo[] InfoArray;//[Offset: 0x108, Size: 0x10]
	SolarFlyTrail* Owner;//[Offset: 0x118, Size: 0x8]

--------------------------------
Class: PackedSkydiveTrailFrameInfo.FastArraySerializerItem
	float Timestamp;//[Offset: 0xc, Size: 0x4]
	SkydiveTrailFrameInfo[] FrameInfos;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkydiveTrailFrameInfo
	FString CharacterId;//[Offset: 0x0, Size: 0x10]
	SolarPlayerState* OwnerPlayerState;//[Offset: 0x10, Size: 0x8]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	Vector Velocity;//[Offset: 0x30, Size: 0xc]

--------------------------------
Class: SkydiveTrailEffect.Actor.Object
	SolarFlyTrail* FlyTrailManager;//[Offset: 0x228, Size: 0x8]
	void UpdateTrailEffect(const float CurrentTime);// 0x4764312cd041
	void InitEffectAppearance(bool IsDefender, bool IsSameTeamWithLocalPlayer);// 0x4763312cd041
	void InitAppearanceByPlayerState(const SolarPlayerState* PlayerState);// 0x4762312cd041
	void AddTrailPoint(float Timestamp, out const Vector Location, out const Rotator Rotation, out const Vector Velocity);// 0x4761312cd041

--------------------------------
Class: CharacterSkydiveTrailData

--------------------------------
Class: BP_Mode_BattleRoyale_C.BP_Mode_Framework_C.SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	BPC_AiManagerBattleRoyale_C* BPC_AiManagerBattleRoyale;//[Offset: 0x5d0, Size: 0x8]
	NgaiGameModeComponent* NgaiGameMode;//[Offset: 0x5d8, Size: 0x8]
	BattleRoyaleGameModeAIComp_Custom_C* BattleRoyaleGameModeAIComp_Custom;//[Offset: 0x5e0, Size: 0x8]
	BPC_AirlineCruise_C* BPC_AirlineCruise;//[Offset: 0x5e8, Size: 0x8]
	BP_MapInfoComponent_C* BP_MapInfoComponent;//[Offset: 0x5f0, Size: 0x8]
	AirlineCruiseComponent* GetAirlineCruiseComponent();// 0xb95e3154d001

--------------------------------
Class: BP_Mode_Framework_C.SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x5c8, Size: 0x8]

--------------------------------
Class: SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	CGMLogicComponent* LogicComponent;//[Offset: 0x530, Size: 0x8]
	CGMDeathComponent* DeathComponent;//[Offset: 0x538, Size: 0x8]
	SCMPlayerController*[] WaitingPlayers;//[Offset: 0x550, Size: 0x10]
	delegate OnPlayerJoin;//[Offset: 0x570, Size: 0x10]
	delegate OnAIJoin;//[Offset: 0x580, Size: 0x10]
	delegate OnPlayerOutEvent;//[Offset: 0x590, Size: 0x10]
	class GameManagerBase[] GameManagerClasses;//[Offset: 0x5a0, Size: 0x10]
	class CGMLogicComponent* LogicComponentClass;//[Offset: 0x5b0, Size: 0x8]
	class CGMDeathComponent* DeathComponentClass;//[Offset: 0x5b8, Size: 0x8]
	class SCMPlayerRPCComponent* PlayerRPCComponentClass;//[Offset: 0x5c0, Size: 0x8]
	void TimerStartGame();// 0x226e312cd041
	void OnTeamInTournamentSettled(FString Side, byte TeamID);// 0x226d312cd041
	void OnReceivePlayerLogin(PlayerController* PlayerController);// 0x226c312cd041
	void OnReceivePlayerBattleStart(PlayerController* PlayerController);// 0x226b312cd041
	void OnReceiveBattleStart();// 0x226a312cd041
	void OnPlayerOut__DelegateSignature(SCMPlayerState* Player, enum OutType);// 0x2268312cd041
	void OnPlayerJoin__DelegateSignature(SCMPlayerState* Player);// 0x2267312cd041
	void OnBotAIDataReady(int AICount);// 0x2266312cd041
	void OnAIJoin__DelegateSignature(SCMPlayerState* BotAI);// 0x2265312cd041
	void NotifyDSBattleOver();// 0x2264312cd041
	int GetCurMapID();// 0x2263312cd041
	void CreateHomeActor(FString Path);// 0x2262312cd041
	bool ChangePlayerCharacter(SCMPlayerState* Player, int CharacterId, int SkinId);// 0x2261312cd041
	bool ChangeBotAICharacter(SolarPlayerState* Player, int CharacterId, int SkinId);// 0x2260312cd041

--------------------------------
Class: NgaiGameModeComponent.GameModeCompBase.ActorComponent.Object

--------------------------------
Class: BattleRoyaleGameModeAIComp_Custom_C.SBattleRoyaleGameModeAIComp.SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x130, Size: 0x8]
	int AllBOT_Num;//[Offset: 0x138, Size: 0x4]
	int Time;//[Offset: 0x13c, Size: 0x4]
	BP_SolarCharacterPlayer_C*[] AllBOT_Falling;//[Offset: 0x140, Size: 0x10]
	<BP_SolarCharacterPlayer_C*,int> Characater_Time;//[Offset: 0x150, Size: 0x50]
	BP_SolarCharacterPlayer_C*[] AllBOT_Move;//[Offset: 0x1a0, Size: 0x10]
	BP_SolarCharacterPlayer_C* Player;//[Offset: 0x1b0, Size: 0x8]
	<float,int> Time_BotNum;//[Offset: 0x1b8, Size: 0x50]
	bool Old_SetInEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 0x1]
	int Counter;//[Offset: 0x20c, Size: 0x4]
	SolarLootZone*[] Array_LootZone;//[Offset: 0x210, Size: 0x10]
	SolarSafeArea* SafeArea;//[Offset: 0x220, Size: 0x8]
	int MaxPreserveBotNum;//[Offset: 0x228, Size: 0x4]
	Vector AIHideLocation;//[Offset: 0x22c, Size: 0xc]
	BP_SolarCharacterPlayer_C*[] AllCharacters;//[Offset: 0x238, Size: 0x10]
	BP_SolarCharacterPlayer_C*[] AllPlayers;//[Offset: 0x248, Size: 0x10]
	BP_SolarCharacterPlayer_C*[] AllBOTs;//[Offset: 0x258, Size: 0x10]
	int JoinPreserveBotNum;//[Offset: 0x268, Size: 0x4]
	int MinAlivePlayerNum;//[Offset: 0x26c, Size: 0x4]
	int MinBattleTime;//[Offset: 0x270, Size: 0x4]
	TimerHandle TimerHandle_CheckAliveNum;//[Offset: 0x278, Size: 0x8]
	Vector AreaPos;//[Offset: 0x280, Size: 0xc]
	int[] weaponid;//[Offset: 0x290, Size: 0x10]
	int[] ItemID;//[Offset: 0x2a0, Size: 0x10]
	int[] FeedTime;//[Offset: 0x2b0, Size: 0x10]
	FeedBotStrategyInfo[] FeedBotInfo;//[Offset: 0x2c0, Size: 0x10]
	int 计数器                                                                                           ;//[Offset: 0x2d0, Size: 0x4]
	int CurBattleTime;//[Offset: 0x2d4, Size: 0x4]
	BP_SolarCharacterPlayer_C*[] PreserveBots_Land;//[Offset: 0x2d8, Size: 0x10]
	BP_SolarCharacterPlayer_C*[] PreserveBots_Eject;//[Offset: 0x2e8, Size: 0x10]
	bool IsCustomMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	SCMPlayerState*[] AllRealPlayers;//[Offset: 0x300, Size: 0x10]
	bool IsInitBotInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	bool HaBotInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 0x1]
	<BP_SolarCharacterPlayer_C*,int> PreserveBots_Time;//[Offset: 0x318, Size: 0x50]
	bool IsSort;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	BP_AiCompManagerBase_C* AiCompElement;//[Offset: 0x370, Size: 0x8]
	class BP_AiCompManagerBase_C* AiCompElementClass;//[Offset: 0x378, Size: 0x8]
	FString TimelineID;//[Offset: 0x380, Size: 0x10]
	bool UseNewAiComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	static void GetDeathBoxExtraStuff(SolarPlayerState* BotState, SolarPlayerState* PlayerState, out <int,int> Stuff, <int,int> CallFunc_GetDeathBoxExtraStuff_Stuff);// 0x9dd83154d001
	static void Sort Preserver Bots(<BP_SolarCharacterPlayer_C*,FString> Dbug_Local_PlayerSide, BP_SolarCharacterPlayer_C*[] Local_PreserveBots_Land, <BP_SolarCharacterPlayer_C*,FString> Local_PreserveBots_Land_Side, <FString,int> Local_Side_BotNum, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, bool CallFunc_IsEditor_ReturnValue, int Temp_int_Loop_Counter_Variable, BP_SolarCharacterPlayer_C*[] CallFunc_Map_Keys_Keys, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString[] CallFunc_Map_Keys_Keys, int[] CallFunc_Map_Values_Values, FString CallFunc_Array_Get_Item, int CallFunc_MaxOfIntArray_IndexOfMaxValue, int CallFunc_MaxOfIntArray_MaxValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_SelectInt_ReturnValue);// 0x9dd73154d001
	static void GetPreserveBotsOnEject(FString[] Local_BOTSide, int Local_SidePlayerIndex, FString[] Local_PlayerSide, <BP_SolarCharacterPlayer_C*,FString> Local_BOTSide, <BP_SolarCharacterPlayer_C*,FString> Local_BOTSide, <BP_SolarCharacterPlayer_C*,FString> Local_BOTSide, <BP_SolarCharacterPlayer_C*,FString> Local_BOTSide, int Local_Index, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, <BP_SolarCharacterPlayer_C*,FString> K2Node_Select_Default, BP_SolarCharacterPlayer_C*[] CallFunc_Map_Keys_Keys, int CallFunc_Add_IntInt_ReturnValue, <BP_SolarCharacterPlayer_C*,FString> K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, FString[] CallFunc_Map_Values_Values, FString CallFunc_Array_Get_Item, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, <BP_SolarCharacterPlayer_C*,FString> Temp_object_Variable, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Variable, GameJobManager* CallFunc_GetJobManager_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMSideData CallFunc_GetSideData_OutData, bool CallFunc_GetSideData_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, GameJobManager* CallFunc_GetJobManager_ReturnValue, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, const SCMSideData[] CallFunc_GetAllSideData_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, SCMSideData CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_Array_Length_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, <BP_SolarCharacterPlayer_C*,FString> K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9dd63154d001
	static void [S]GameModeSpecialConfig(out bool SpecialConfig, out int Order, out bool isB, <int> B_id, <int> A_id, <int> order3, <int> order2, <int> order1, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, int CallFunc_GetWramGameType_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x9dd53154d001
	void Add Item(SolarCharacter* SolarCharacter, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, int CallFunc_RandomInteger_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Get_Item);// 0x9dd43154d001
	static void Feed Player(FeedBotStrategyInfo TargetPlayer, BP_SolarCharacterPlayer_C* AI, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Array_RemoveItem_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SolarBotAIController* CallFunc_PopPreservedBot_OutController, bool CallFunc_PopPreservedBot_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, FeedBotStrategyInfo CallFunc_Array_Get_Item, int Temp_int_Variable, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_K2_IsAlive_ReturnValue);// 0x9dd33154d001
	void Get Area Pos(out bool bool, Actor* CallFunc_GetOwner_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_Array_Get_Item, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________);// 0x9dd23154d001
	static void Set Preserve Bots(int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, FName CallFunc_MakeLiteralName_ReturnValue, BP_SolarCharacterPlayer_C*[] CallFunc_Map_Keys_Keys, bool CallFunc_Array_IsValidIndex_ReturnValue, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SolarBotAIController* K2Node_DynamicCast_AsSolar_Bot_AIController, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_PreserveBot_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9dd13154d001
	static void CheckPlayerInRang(Actor* Bot, float Distance, out bool InRange, bool Local_InRange, bool Temp_bool_True_if_break_was_hit_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, const Actor*[] Temp_object_Variable, const byte[] K2Node_MakeArray_Array, int Temp_int_Loop_Counter_Variable, SolarCharacter* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_GetCameraLocation_ReturnValue, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x9dd03154d001
	void Get All Characters(int Temp_int_Array_Index_Variable, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue, FeedBotStrategyInfo K2Node_MakeStruct_FeedBotStrategyInfo, bool CallFunc_IsEditor_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_IsEditor_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_AddUnique_ReturnValue, int K2Node_Select_Default, BP_SolarCharacterPlayer_C*[] CallFunc_GetAllActorsOfClass_OutActors);// 0x9dcf3154d001
	void Get Alive Num(out int AliveNum, BP_SolarCharacterPlayer_C*[] Local_Player, BP_SolarCharacterPlayer_C*[] Local_AI, int Local_AliveNum, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9dce3154d001
	void Init  Accompany AI Multi Person(out SolarCharacter*[] AiCharacter, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9dcd3154d001
	void Set BBValue Target Char (SolarCharacter* AiCharacter, SolarCharacter* PlayerCharacter, FName CallFunc_MakeLiteralName_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x9dcc3154d001
	void Set BBValue Area Pos(SolarCharacter* AiCharacter, Vector AreaPos, FName CallFunc_MakeLiteralName_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x9dcb3154d001
	void Loop_DeliverPerformers(int StartTime, int EndTime, int Interval, float CarChance, float Distance, int BotNumStart, int BotNumEnd, int RangeMin, int RangeMax, int RangeRandomR, bool isCar, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_InRange_IntInt_ReturnValue, int Temp_int_Variable, FName CallFunc_MakeLiteralName_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9dca3154d001
	static void Loop_DeliverPlaymates(int StartTime, int EndTime, int Interval, float CarChance, float Distance, bool isCar, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_InRange_IntInt_ReturnValue, const FName[] K2Node_MakeArray_Array, int Temp_int_Variable, FName CallFunc_MakeLiteralName_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xffffff87312cd000
	static void RandomArray(int 人数                                                                                              , int 车数                                                                                              , out int[] Local_Arry1, int[] Local_Arry, int Temp_int_Variable, int CallFunc_Array_Add_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9dc83154d001
	SolarSafeArea* Get Safe Area Actor(bool CallFunc_IsValid_ReturnValue, SolarSafeArea* CallFunc_GetActorOfClass_ReturnValue);// 0x9dc73154d001
	void Get Distance from Poison Circle(out bool 玩家是否在安全区内                                                                         , out Vector 毒圈中心                                                                                        , out float 毒圈半径                                                                                        , out Vector 安全区中心                                                                                     , out float 安全区半径                                                                                     , out Vector 玩家位置                                                                                        , SolarSafeArea* CallFunc_Get_Safe_Area_Actor_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SolarCircleSafeArea* K2Node_DynamicCast_AsSolar_Circle_Safe_Area, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetNextAreaLocation_ReturnValue, float CallFunc_GetNextSafeAreaRadius_ReturnValue, float CallFunc_GetCurrentSafeAreaRadius_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsInSafeArea_ReturnValue);// 0x9dc63154d001
	void Set_SearchForTheEnemy(bool InputPin, BP_SolarCharacterPlayer_C* ControlledActor, bool CallFunc_IsValid_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, BP_BotAIController_BattleRoyale_C* K2Node_DynamicCast_AsBP_Bot_AIController_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x9dc53154d001
	static void GetDeliveryLocation(float R_内圈                                                                                            , float R_外圈                                                                                            , float R_随机点半径                                                                                   , out Vector Output_Get, out bool IsGet, Vector Local_据点相对坐标                                                                            , Vector Local_最终相对坐标                                                                            , float Local_R, Vector Local_据点坐标                                                                                  , float Local_据点和Player的距离                                                                      , Vector Local_PlayerLocation, int Local_次数                                                                                        , float Local_范围                                                                                        , float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int CallFunc_Add_IntInt_ReturnValue, float K2Node_MathExpression_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_FloatFloat_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, int CallFunc_SelectInt_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, SolarLootZone* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_Vector_Distance2D_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_Distance2D_ReturnValue, float K2Node_MathExpression_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float K2Node_MathExpression_ReturnValue, bool Temp_bool_Variable, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float K2Node_Select_Default, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_GetRandomLocationInNavigableRadius_RandomLocation, bool CallFunc_K2_GetRandomLocationInNavigableRadius_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FText CallFunc_Conv_BoolToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Conv_BoolToText_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x9dc43154d001
	static void Delivery(int EventTime, int 传送人数                                                                                        , float 备选AI离玩家最小距离                                                                       , out const FName KeyName, int IntValue, bool 是否关闭索敌                                                                                  , float R_内圈                                                                                            , float R_外圈                                                                                            , float R_随机点半径                                                                                   , bool 是否传车                                                                                        , int 车数量                                                                                           , int Local_传送人数                                                                                  , int Local_BotNum, Vector Local_Location, FName[] Local_Tag, BP_SolarCharacterPlayer_C* Local_CurCharacter, int[] CallFunc_RandomArray_Local_Arry1, Vector CallFunc_GetDeliveryLocation_Output_Get, bool CallFunc_GetDeliveryLocation_IsGet, bool CallFunc_EqualEqual_NameName_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_GetCurCharacter_IsGetCurBot, BP_SolarCharacterPlayer_C* CallFunc_GetCurCharacter_CurBOT, bool CallFunc_Array_Contains_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int Temp_int_Variable, FName CallFunc_MakeLiteralName_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, bool CallFunc_IsValid_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_GetValueAsBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Vector_Distance2D_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x9e063154d001
	static void SetBOTInEnable(out const FName 有Ttag除外                                                                                       , int Local_BotNum, float Local_Time, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_FTrunc_ReturnValue, BP_SolarCharacterPlayer_C*[] CallFunc_GetAllActorsOfClass_OutActors, FString CallFunc_Conv_IntToString_ReturnValue, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, Controller* CallFunc_GetController_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_BotAIController_BattleRoyale_C* K2Node_DynamicCast_AsBP_Bot_AIController_Battle_Royale, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, float[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, float CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue);// 0x9dc23154d001
	static void AddBOTTag(out const FName[] Tag, BP_SolarCharacterPlayer_C* Bot, bool bCleanExists, FName[] Local_Tag, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, BP_SolarCharacterPlayer_C*[] CallFunc_Get_All_BOT_Move_AllBOT_Move, const FName[] K2Node_MakeArray_Array, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, bool CallFunc_Array_Identical_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_BotAIController_BattleRoyale_C* K2Node_DynamicCast_AsBP_Bot_AIController_Battle_Royale, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x9dc13154d001
	void AddBOTSelectedTime(out const BP_SolarCharacterPlayer_C* Bot, int CallFunc_Add_IntInt_ReturnValue);// 0x9dc03154d001
	void RemoveInvalidCharacter(out BP_SolarCharacterPlayer_C*[] Character, out BP_SolarCharacterPlayer_C*[] Out_Character, BP_SolarCharacterPlayer_C*[] Local_Character, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x9dbf3154d001
	void Get All BOT Spare(out BP_SolarCharacterPlayer_C*[] AllBOT_Spare, BP_SolarCharacterPlayer_C*[] Local_AllBOTMove, BP_SolarCharacterPlayer_C*[] Local_AllBot_Spare, BP_SolarCharacterPlayer_C*[] Local_AllBot, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_SolarCharacterPlayer_C*[] CallFunc_Get_All_BOT_Move_AllBOT_Move, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9dbe3154d001
	void Get All BOT Move(out BP_SolarCharacterPlayer_C*[] AllBOT_Move, BP_SolarCharacterPlayer_C*[] Local_AllBot_Spare, BP_SolarCharacterPlayer_C*[] Local_AllBot, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int Temp_int_Loop_Counter_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_SolarCharacterPlayer_C*[] CallFunc_RemoveInvalidCharacter_Out_Character, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, int CallFunc_Array_Length_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_MakeLiteralName_ReturnValue, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, bool CallFunc_GetValueAsBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue);// 0x9dbd3154d001
	void GetCurCharacter(float Distance, out bool IsGetCurBot, out BP_SolarCharacterPlayer_C* CurBOT, BP_SolarCharacterPlayer_C*[] Local_AllBOTSpare, bool IsGet, BP_SolarCharacterPlayer_C* localBot, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Add_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, BP_SolarCharacterPlayer_C*[] CallFunc_Get_All_BOT_Spare_AllBOT_Spare, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_CheckDistanceAndVisible_IsGet, BP_SolarCharacterPlayer_C* CallFunc_CheckDistanceAndVisible_CurBOT, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9dbc3154d001
	void CheckDistanceAndVisible(BP_SolarCharacterPlayer_C* Bot, float Distance, out bool IsGet, out BP_SolarCharacterPlayer_C* CurBOT, FString CallFunc_GetDisplayName_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocationOnPlayerSight_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, float CallFunc_Vector_Distance2D_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x9dbb3154d001
	void Modify_BBValue(int EventTime, float Distance, out const FName KeyName, int IntValue, bool 是否关闭索敌                                                                                  , out const FName[] 不攻击拥有当前Tag的角色                                                                   , bool 是否清理之前Tag对应不攻击的角色                                                       , bool 是否传车                                                                                        , FName[] Local_Tag, BP_SolarCharacterPlayer_C* Local_CurCharacter, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_GetCurCharacter_IsGetCurBot, BP_SolarCharacterPlayer_C* CallFunc_GetCurCharacter_CurBOT, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_BotAIController_BattleRoyale_C* K2Node_DynamicCast_AsBP_Bot_AIController_Battle_Royale, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, float CallFunc_Vector_Distance2D_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_GetValueAsBool_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x9dba3154d001
	void Get All Bot Character and Set Bt Tree(BehaviorTree* BTAsset, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, BP_SolarCharacterPlayer_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Controller* CallFunc_GetController_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, AIController* K2Node_DynamicCast_AsAIController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_RunBehaviorTree_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x9db93154d001
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, bool CallFunc_OnGameModeHandleMatchHasStarted_bOutSuccess);// 0x9db83154d001
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, bool CallFunc_OnGameModeStartPlay_bOutSuccess);// 0x9db73154d001
	void ReceiveBeginPlay();// 0x9db63154d001
	void PostGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x9db53154d001
	void Event_AIBeginPlay();// 0x9db43154d001
	void CallAIBegin();// 0x9db33154d001
	void Event_InitPreserve();// 0x9db23154d001
	void Event_GetAliveNum();// 0x9db13154d001
	void OnAcquiredIrisAIFeedStrategy(out const FeedBotStrategyInfo[] StrategyInfos);// 0x9db03154d001
	void MainTick();// 0x9daf3154d001
	void Event_BOTOnEject(byte State, SolarCharacter* TargetCharacter);// 0x9dae3154d001
	void OnPlayerRequestWarmBot(SolarPlayerController* Player);// 0x9dad3154d001
	void Init();// 0xffffff8a312cd002
	void TimeLine_AI();// 0xffffff8a312cd002
	void TimeLine_AI_B();// 0x9daa3154d001
	void ExecuteUbergraph_BattleRoyaleGameModeAIComp_Custom(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, const GameModeCompBase*[] K2Node_Event_ComponentCollection, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, int CallFunc_Get_Alive_Num_AliveNum, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, SolarBotAIController* CallFunc_PopPreservedBot_OutController, bool CallFunc_PopPreservedBot_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, const FeedBotStrategyInfo[] K2Node_Event_StrategyInfos, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Get_Area_Pos_Bool, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, FString CallFunc_Conv_IntToString_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_IsClosed_Variable, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_Conv_StringToName_ReturnValue, S_WarmGameSetting_AiCompBase CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc__S_PlayInEditor_bIsEditor, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_AiCompManagerBase_C* CallFunc_FinishSpawningActor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Transform CallFunc_MakeTransform_ReturnValue, SolarPlayerController* K2Node_Event_player, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_AiCompManagerBase_C* CallFunc_FinishSpawningActor_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, <FString,FString> K2Node_MakeMap_Map, int CallFunc_GetAIAccompanyTimelineID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, S_WarmGameSetting_AiCompBase CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, bool CallFunc_IsValid_ReturnValue, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetAIAccompanyTimelineID_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const FName[] K2Node_MakeArray_Array, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_MakeLiteralFloat_ReturnValue, bool Temp_bool_IsClosed_Variable, FName CallFunc_MakeLiteralName_ReturnValue, FeedBotStrategyInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const FName[] K2Node_MakeArray_Array, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_MakeLiteralName_ReturnValue, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, FName CallFunc_MakeLiteralName_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, const FName[] K2Node_MakeArray_Array, FName CallFunc_MakeLiteralName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x235703154d001

--------------------------------
Class: SolarLootZone.Actor.Object
	SolarItemSpawner*[] OwnningItemSpawners;//[Offset: 0x230, Size: 0x10]
	<SolarItemSpawner*,ItemSpawnerGraphNode> SpawnerPathGraph;//[Offset: 0x240, Size: 0x50]
	LootZonePath[] LootZonePathGraph;//[Offset: 0x290, Size: 0x10]
	float MaxRadius;//[Offset: 0x2a0, Size: 0x4]
	SolarChargingPile*[] OwnningChargingPiles;//[Offset: 0x2a8, Size: 0x10]

--------------------------------
Class: ItemSpawnerGraphNode
	ItemSpawnerPath[] Paths;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ItemSpawnerPath
	SolarItemSpawner* To;//[Offset: 0x0, Size: 0x8]
	float MoveCost;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LootZonePath
	SolarLootZone* To;//[Offset: 0x0, Size: 0x8]
	float MoveCost;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SolarChargingPile.SolarPile.SolarMapElementBase.Actor.Object

--------------------------------
Class: BP_AiCompManagerBase_C.SCMMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x288, Size: 0x8]
	bool CheckPreserve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	int SilenceCheckTime;//[Offset: 0x294, Size: 0x4]
	int SilenceCheckCycle;//[Offset: 0x298, Size: 0x4]
	FName WarmGameID;//[Offset: 0x29c, Size: 0x8]
	int MaxTeamCount;//[Offset: 0x2a4, Size: 0x4]
	DataTable* ActionTimelineDT;//[Offset: 0x2a8, Size: 0x8]
	DataTable* DownsizingTimelineDT;//[Offset: 0x2b0, Size: 0x8]
	<int,S_Trigger_AiCompBase> ActionTimeline;//[Offset: 0x2b8, Size: 0x50]
	<int,IntPoint> DownsizingTimeline;//[Offset: 0x308, Size: 0x50]
	int BattleTime;//[Offset: 0x358, Size: 0x4]
	float SilenceDistance1;//[Offset: 0x35c, Size: 0x4]
	float SilenceDistance2;//[Offset: 0x360, Size: 0x4]
	Vector SilenceLocation;//[Offset: 0x364, Size: 0xc]
	<FString,byte> Ai-State;//[Offset: 0x370, Size: 0x50]
	<FString,int> PreservedSide;//[Offset: 0x3c0, Size: 0x50]
	S_TriggerItem_AiCompBase[] CurrentTrigger;//[Offset: 0x410, Size: 0x10]
	int DownsizingTarget;//[Offset: 0x420, Size: 0x4]
	int DownsizingEnd;//[Offset: 0x424, Size: 0x4]
	TimerHandle DownsizeHandler;//[Offset: 0x428, Size: 0x8]
	int DownsizeNumber;//[Offset: 0x430, Size: 0x4]
	DataTable* ItemUpdateTimelineDT;//[Offset: 0x438, Size: 0x8]
	<int,S_AiItemSetting_AiCompBase> ItemUpdateTimeline;//[Offset: 0x440, Size: 0x50]
	S_AiItemSetting_AiCompBase CurrentItemSetting;//[Offset: 0x490, Size: 0xf0]
	DataTable* DeathBoxTimelineDT;//[Offset: 0x580, Size: 0x8]
	<int,S_DeathBoxTimelineRow_AiCompBase> DeathBoxTimeline;//[Offset: 0x588, Size: 0x50]
	S_AiItemSetting_AiCompBase CurrentDeathBox;//[Offset: 0x5d8, Size: 0xf0]
	<byte,S_Trigger_AiCompBase> Type-Trigger;//[Offset: 0x6c8, Size: 0x50]
	int MinAliveRealPlayer;//[Offset: 0x718, Size: 0x4]
	int MaxBattleTime;//[Offset: 0x71c, Size: 0x4]
	SBattleRoyaleGameModeAIComp* AiCompManager;//[Offset: 0x720, Size: 0x8]
	float DownsizeDuration;//[Offset: 0x728, Size: 0x4]
	BP_Logic_BattleRoyale_C* MainLogic;//[Offset: 0x730, Size: 0x8]
	SCMPlayerState*[] RealPlayerList;//[Offset: 0x738, Size: 0x10]
	void PopAllAI(FString FailedInfo, Vector LastTelCenter, SolarCharacter* TargetCharacter, SolarBotAIController* TargetAi, int FailedCount, int SuccessCount, const Actor*[] Temp_object_Variable, int Temp_int_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, FString CallFunc_Concat_StrStr_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetDisplayName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_AsBP_Logic_Battle_Royale, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SolarBotAIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_AsBP_Logic_Battle_Royale, SBattleRoyaleGameModeAIComp* CallFunc_GetAiCompManager_Output_Get, FName CallFunc_MakeLiteralName_ReturnValue, Vector CallFunc_GetNextAreaLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, SolarBotAIController* CallFunc_PopPreservedBot_OutController, bool CallFunc_PopPreservedBot_ReturnValue);// 0x9d643154d001
	SolarBotAIController* GetAIController(SolarPlayerState* PlayerState, Actor* CallFunc_GetOwner_ReturnValue, SolarBotAIController* K2Node_DynamicCast_AsSolar_Bot_AIController, bool K2Node_DynamicCast_bSuccess);// 0x9d633154d001
	void InitRealPlayerList(const FString[] Temp_string_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x9d623154d001
	void KillAI(SolarPlayerState* Player, SBattleRoyaleGameModeAIComp* CallFunc_GetAiCompManager_Output_Get, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, SolarBotAIController* CallFunc_PopPreservedBot_OutController, bool CallFunc_PopPreservedBot_ReturnValue);// 0x9d613154d001
	void GetMainLogic(out BP_Logic_BattleRoyale_C* AsBP Logic Battle Royale, bool CallFunc_IsValid_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x9d603154d001
	void Attrition(byte[] K2Node_MakeArray_Array, FString[] K2Node_MakeArray_Array, int CallFunc_GetAiNumberByType_Number, FString[] CallFunc_GetPopAi_Return, FString[] CallFunc_GetPopAi_PopSide, bool CallFunc_Greater_IntInt_ReturnValue, FString[] CallFunc_GetPopAi_Return, FString[] CallFunc_GetPopAi_PopSide, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x9d5f3154d001
	static void GetDataTrace(FString PlayerId, out <FString,FString> Return, <FString,FString> NewLocalVar, <byte,int> NewLocalVar, const FString Temp_string_Variable, const int Temp_int_Variable, <byte,int> K2Node_MakeVariable_MakeVariableOutput, const FString Temp_string_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const FString Temp_string_Variable, FString[] CallFunc_Map_Keys_Keys, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte[] CallFunc_Map_Keys_Keys, FString[] CallFunc_Map_Keys_Keys, byte CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, byte CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9d5e3154d001
	void GetAiCompManager(out SBattleRoyaleGameModeAIComp* Output_Get, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsValid_ReturnValue, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, bool CallFunc_IsValid_ReturnValue);// 0x9d5d3154d001
	static void SetItem(SolarCharacter* Character, out const S_AiItemSetting_AiCompBase Item, byte NewLocalVar, byte NewLocalVar, <byte,S_EquipmentArray_AiCompBase> Part, <byte,IntPoint> Consumable, <byte,S_EquipmentArray_AiCompBase> Equipment, S_AiItem[] ItemList, const int Temp_int_Variable, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, byte Temp_byte_Variable, byte[] CallFunc_Map_Keys_Keys, byte[] CallFunc_Map_Keys_Keys, byte CallFunc_Array_Get_Item, byte CallFunc_Array_Get_Item, S_EquipmentArray_AiCompBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, S_EquipmentArray_AiCompBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_GetRandomKeyInWidget_HitKey, int CallFunc_GetRandomKeyInWidget_HitKey, S_AiItem K2Node_MakeStruct_S_AiItem, S_AiItem K2Node_MakeStruct_S_AiItem, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, byte[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte[] CallFunc_Map_Keys_Keys, int Temp_int_Array_Index_Variable, byte CallFunc_Array_Get_Item, byte CallFunc_Array_Get_Item, byte K2Node_Select_Default, const int K2Node_Select_Default, IntPoint CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, S_EquipmentArray_AiCompBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, int CallFunc_GetRandomKeyInWidget_HitKey, S_AiItem K2Node_MakeStruct_S_AiItem, S_AiItem K2Node_MakeStruct_S_AiItem, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9d5c3154d001
	static void GetDeathBoxExtraStuff(SolarPlayerState* Bot, SolarPlayerState* Player, out <int,int> Stuff, <int,int> ExtraItem, byte Temp_byte_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, int Temp_int_Array_Index_Variable, const int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, byte[] CallFunc_Map_Keys_Keys, byte CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, IntPoint CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const int K2Node_Select_Default, byte[] CallFunc_Map_Keys_Keys, int CallFunc_RandomIntegerInRange_ReturnValue, byte CallFunc_Array_Get_Item, bool CallFunc_NotEqual_ByteByte_ReturnValue, S_EquipmentArray_AiCompBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_PopOneId_ID, bool CallFunc_Less_IntInt_ReturnValue);// 0x9d5b3154d001
	void Kill Ai Through Random Damage Event(SCMPlayerState* Killed, SCMPlayerState* Killer, SolarItemData[] KillerWeapon, BP_Character_Framework_C* KilledCharacter, BP_Character_Framework_C* KillerCharacter, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, byte[] K2Node_MakeArray_Array, int CallFunc_GetAiNumberByType_Number, byte[] K2Node_MakeArray_Array, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetAiNumberByType_Number, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, SolarPointDamageEvent K2Node_MakeStruct_SolarPointDamageEvent);// 0x9d5a3154d001
	static SolarCharacter* GetKiller(FString[] CallFunc_GetAiByType_Return, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue);// 0x9d593154d001
	int GetTeamWithRealPlayerCount(int count, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString[] CallFunc_GetSideList_OutResult, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_TeamHasRealPlayer_ReturnValue);// 0x9d583154d001
	void SetAiIsPreset(SolarCharacter* AiCharacter, FName CallFunc_MakeLiteralName_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x9d573154d001
	void InitDeathBoxTimeline(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FName[] CallFunc_GetDataTableRowNames_OutRowNames, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Array_Get_Item, S_DeathBoxTimelineRow_AiCompBase CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9d563154d001
	void InitItemTimeline(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FName[] CallFunc_GetDataTableRowNames_OutRowNames, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Array_Get_Item, S_ItemUpdateTimelineRow_AiCompBase CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9d553154d001
	void InitDownsizeTimeline(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, S_DownsizingTimelineRow_AiCompBase CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint);// 0x9d543154d001
	void InitActionTimeline(S_TriggerItem_AiCompBase[] TempTimeline, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, S_Trigger_AiCompBase K2Node_MakeStruct_S_Trigger_AiCompBase, FName[] CallFunc_GetDataTableRowNames_OutRowNames, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Array_Get_Item, S_ActionTimelineRow_AiCompBase CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, S_Trigger_AiCompBase K2Node_MakeStruct_S_Trigger_AiCompBase, S_Trigger_AiCompBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x9d533154d001
	static S_TriggerItem_AiCompBase[] RemoveTriggerWithParam(out S_TriggerItem_AiCompBase[] TriggerList, <FString,FString> Param, bool Identical, S_TriggerItem_AiCompBase[] Return, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, S_TriggerItem_AiCompBase CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, FString[] CallFunc_Map_Keys_Keys, FString CallFunc_Array_Get_Item, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanNAND_ReturnValue, bool CallFunc_BooleanNAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9d523154d001
	static bool CheckTriggerParam(<FString,FString> Param, S_TriggerItem_AiCompBase Trigger, const FString Temp_string_Variable, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const FString Temp_string_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x9d513154d001
	int Get Alive Player Number(BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_AsBP_Logic_Battle_Royale, int CallFunc_Array_Length_ReturnValue);// 0x9d503154d001
	static void TriggerAiByEventType(byte Type, BP_PlayerState_Framework_C* TargetPlayer, <FString,FString> Parameter, const FString Temp_string_Variable, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, const FString Temp_string_Variable, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, S_Trigger_AiCompBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, S_TriggerItem_AiCompBase CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xb65a3154d001
	void GetAiByType(byte Type, out FString[] Return, FString[] ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, byte CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x9d4e3154d001
	static void CheckDeathBoxTimeline(bool Set, int ItemTime, int[] TimelineKeys, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, S_DeathBoxTimelineRow_AiCompBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int[] CallFunc_Map_Keys_Keys, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x9d4d3154d001
	void GetWeaponPartItemId(int PartID, out int ItemID, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_WeaponParts CallFunc_GetRowData_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9d4c3154d001
	static void GetRandomWeaponParts(<byte,S_EquipmentArray_AiCompBase> PartSetting, WeaponPartsData OriginPart, out WeaponPartsData Part, int PartID, int GunStock, int Scope, int Clip, int Grip, int Muzzle, bool Temp_bool_Variable, byte[] CallFunc_Map_Keys_Keys, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, byte CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, S_EquipmentArray_AiCompBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_PopOneId_ID, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetWeaponPartItemId_ItemId, int CallFunc_GetWeaponPartItemId_ItemId, int CallFunc_GetWeaponPartItemId_ItemId, int CallFunc_GetWeaponPartItemId_ItemId, int K2Node_Select_Default, int CallFunc_GetWeaponPartItemId_ItemId, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, WeaponPartsData K2Node_MakeStruct_WeaponPartsData);// 0x9d4b3154d001
	static void CheckItemUpdateTimeline(bool Set, int ItemTime, int[] TimelineKeys, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, S_AiItemSetting_AiCompBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int[] CallFunc_Map_Keys_Keys);// 0x9d843154d001
	void UpdateSelectionListWithTargetId(out int[] TargetId, <int,int> DefaultSelectionList, out <int,int> UpdateSelectionList, <int,int> ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Get_Item, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9d493154d001
	static bool TeamHasRealPlayer(FString Side, bool HasRealPlayer, const FString[] Temp_string_Variable, const FString[] K2Node_MakeArray_Array, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9d483154d001
	void GetHigherLevelWeaponId(int WeaponItemID, out int[] TargetItemId, int weaponid, int[] ReturnList, int CurrentLevel, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_HasRowKey_ReturnValue, int[] CallFunc_GetRowKeys_OutKeys, int CallFunc_GetRowKeys_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, const SolarTablesData_GunProperty CallFunc_GetRowData_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_GunProperty CallFunc_GetRowData_ReturnValue);// 0x9d473154d001
	void UpdateAiWeapon(SolarCharacter* AiCharacter, const byte WeaponSlot, const <int,int> weaponid, <byte,S_EquipmentArray_AiCompBase> WeaponPartSetting, out const byte Slot, out int NewWeapon, out WeaponPartsData Part, int Weapon, WeaponPartsData WeaponParts, <int,int> TargetWeapon, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Map_Length_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, byte Temp_byte_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, bool Temp_bool_Variable, const int K2Node_Select_Default, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, WeaponPartsData K2Node_MakeStruct_WeaponPartsData, int[] CallFunc_GetHigherLevelWeaponId_TargetItemId, WeaponPartsData CallFunc_GetRandomWeaponParts_Part, <int,int> CallFunc_UpdateSelectionListWithTargetId_UpdateSelectionList, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, WeaponPartsData CallFunc_GetRandomWeaponParts_Part, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, <int,int> K2Node_Select_Default, int CallFunc_PopOneId_ID);// 0x9d463154d001
	static void SetAiData(SolarCharacter* AiCharacter, <byte,IntPoint> DataSetting, byte[] CallFunc_Map_Keys_Keys, float CallFunc_GetCurrentHealth_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_FTrunc_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, byte CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, IntPoint CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, SolarPointDamageEvent CallFunc_UpdateCurrentHealth_DamageEvent, float CallFunc_UpdateCurrentHealth_ReturnValue);// 0x9d453154d001
	static void PopOneId(<int,int> IdArray, out int ID, int SelectedId, int Random, int[] CallFunc_Map_Keys_Keys, int[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, int CallFunc_SumOfIntArray_Sum, bool Temp_bool_True_if_break_was_hit_Variable, int CallFunc_RandomIntegerInRange_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Get_Item, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x9d443154d001
	void SetAiCharacter(int CharacterId, BP_PlayerState_Framework_C* AI, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, const SolarTablesData_UnitCharacter CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, bool CallFunc_ChangePlayerCharacter_ReturnValue);// 0x9d433154d001
	static void SetAiDifficulty(int Diffifulty, SolarCharacter* AiCharacter, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, const SolarBotAIController*[] K2Node_MakeArray_Array);// 0x9d423154d001
	void SetTeleVehicle(SolarCharacter* AiCharacter, S_VehicleSetting_AiCompBase Vehicle, FName CallFunc_MakeLiteralName_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, int CallFunc_PopOneId_ID, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue);// 0x9d413154d001
	void GetRandomTeleCenter(Actor* PlayerCharacter, IntPoint Radius, IntPoint Angle, out Vector Center, Vector CallFunc_GetActorForwardVector_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GreaterGreater_VectorRotator_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x9d403154d001
	static void SetTeleCenter(SolarCharacter* AiCharacter, S_TeleCenterSetting_AiCompBase TeleCenter, SolarCharacter* Player, Vector Center, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, Vector CallFunc_GetRandomTeleCenter_Center, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x9d3f3154d001
	void SetPopAi(S_AiSetting_AiCompBase Setting, BP_PlayerState_Framework_C* AI, BP_PlayerState_Framework_C* TargetPlayer, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue);// 0x9d3e3154d001
	static void SetTargetCharacter(SolarCharacter* AiCharacter, Object* PlayerCharacter, FName CallFunc_MakeLiteralName_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x9d3d3154d001
	static void Check Downsizing Timeline(bool Set, int DownsizeTime, int[] TimelineKeys, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, int[] CallFunc_Map_Keys_Keys, bool CallFunc_GreaterEqual_IntInt_ReturnValue, IntPoint CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x9d3c3154d001
	static void GetAiNumberByType(out byte[] Type, out int Number, int count, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x9d3b3154d001
	static void Update Ai State(SolarPlayerState* AI, const byte NewState, int Number, const FString[] Temp_string_Variable, const FString[] K2Node_MakeArray_Array, <FString,FString> CallFunc_GetDataTrace_Return, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9d3a3154d001
	static void StartAiComp(BP_PlayerState_Framework_C* TargetPlayer, S_TriggerItem_AiCompBase Trigger, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_AiCompElement_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x9d393154d001
	static void GetPreservedSideByAiNumber(int Number, out FString[] Side, FString[] OnePlayerSide, FString[] TwoPlayerSide, FString[] ThreePlayerSide, FString[] SideList, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x9d383154d001
	void GetRandomLocation(Vector Center, int Radius, out Vector Location);// 0x9d373154d001
	void GetPopAi(int RequiredNumber, out FString[] Except, const byte NewState, out FString[] Return, out FString[] PopSide, SCMPlayerState*[] Players, FString[] PopGroup, FString[] GroupWithRightNumber, int[] SearchList, FString[] PopAiList, FString[] RequiedSide, FString[] PopSideList, int MaxNumber, int Temp_int_Variable, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString[] CallFunc_GetPreservedSideByAiNumber_Side, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Array_RemoveItem_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, FString[] CallFunc_Map_Keys_Keys, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_RandomInteger_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Get_Item, FString[] CallFunc_GetPreservedSideByAiNumber_Side, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, const FString[] Temp_string_Variable, bool CallFunc_Less_IntInt_ReturnValue, const enum[] Temp_byte_Variable, bool CallFunc_BooleanAND_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x9d363154d001
	void PopSingleAi(BP_PlayerState_Framework_C* AI, BP_PlayerState_Framework_C* Player, S_AiSetting_AiCompBase AiSetting, out bool Success, byte[] K2Node_MakeArray_Array, int CallFunc_GetAiNumberByType_Number, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SBattleRoyaleGameModeAIComp* CallFunc_GetAiCompManager_Output_Get, bool CallFunc_IsValid_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_Conv_IntToString_ReturnValue, SolarBotAIController* CallFunc_PopPreservedBot_OutController, bool CallFunc_PopPreservedBot_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map);// 0x9d353154d001
	static void InitAiData(byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, BP_BotAIController_C* K2Node_DynamicCast_AsBP_Bot_AIController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_TeamHasRealPlayer_ReturnValue, const byte K2Node_Select_Default);// 0x9d343154d001
	bool Insight(BP_PlayerState_Framework_C* Player, SolarPlayerState* AI, Vector CallFunc_GetPlayerLocation_Location, Vector CallFunc_GetPlayerLocation_Location, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, float CallFunc_DegAcos_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x9d333154d001
	void GetPlayerLocation(SolarPlayerState* PlayerState, out Vector Location, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x9d323154d001
	static void PreserveAi(BP_PlayerState_Framework_C* AI, const <FString,FString> K2Node_MakeMap_Map, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, SBattleRoyaleGameModeAIComp* CallFunc_GetAiCompManager_Output_Get, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_PreserveBot_ReturnValue);// 0x9d313154d001
	void ShouldAiCheckSilence(BP_PlayerState_Framework_C* AI, out bool Result, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_TeamHasRealPlayer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, byte CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_BooleanAND_ReturnValue);// 0x9d303154d001
	static void GetAliveRealPlayers(out BP_PlayerState_Framework_C*[] AliveRealPlayers, BP_PlayerState_Framework_C*[] Temp, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const enum[] K2Node_MakeArray_Array, SCMPlayerState* CallFunc_Array_Get_Item, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x9d2f3154d001
	void GetAliveAiPlayers(out BP_PlayerState_Framework_C*[] AliveAiPlayers, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue);// 0x9d2e3154d001
	static void CheckSingleTimelineTrigger(S_TriggerItem_AiCompBase TimelineTrigger, byte Action, byte TriggerType, S_TriggerItem_AiCompBase[] TempList, S_TriggerItem_AiCompBase[] K2Node_MakeArray_Array, S_Trigger_AiCompBase K2Node_MakeStruct_S_Trigger_AiCompBase, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Array_Add_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, S_Trigger_AiCompBase K2Node_MakeStruct_S_Trigger_AiCompBase, S_Trigger_AiCompBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetAliveRealPlayers_AliveRealPlayers, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, S_TriggerItem_AiCompBase[] CallFunc_RemoveTriggerWithParam_ReturnValue);// 0x9d2d3154d001
	static void CheckActionTimeline(bool Set, int TriggerTime, int[] TimelineKeys, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int[] CallFunc_Map_Keys_Keys, S_Trigger_AiCompBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x9d2c3154d001
	void InitTimeline(S_TriggerItem_AiCompBase[] TempTimeline, const <FString,FString> K2Node_MakeMap_Map, S_WarmGameSetting_AiCompBase CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x9d2b3154d001
	void CheckSingleAiState(BP_PlayerState_Framework_C* AI, out bool NotHasPlayerAround, bool RealPlayerCanSee, bool HasRealPlayer, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_GetPlayerLocation_Location, Vector CallFunc_GetPlayerLocation_Location, FString CallFunc_Conv_VectorToString_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_GetPlayerLocation_Location, int Temp_int_Array_Index_Variable, FString CallFunc_Conv_VectorToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, BP_PlayerState_Framework_C*[] CallFunc_GetAliveRealPlayers_AliveRealPlayers, int Temp_int_Loop_Counter_Variable, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, Vector CallFunc_GetPlayerLocation_Location, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsLocationOnPlayerSight_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x9d2a3154d001
	void Check Preserve(int CallFunc_Get_Alive_Player_Number_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xb65b3154d001
	void OnCompleted_2B14868C46B96136A1D9A18ADBB5AD62(SolarPlayerWeapon* Weapon);// 0x9d283154d001
	void Tick();// 0x9d273154d001
	void SetDownsizingTimer();// 0x9d263154d001
	void KillPreservedAi();// 0x9d253154d001
	void OnPreserveAi();// 0x9d243154d001
	void OnTriggerChange();// 0x9d233154d001
	void OnUpdateAiItem();// 0x9d223154d001
	void PopOneAi(BP_PlayerState_Framework_C* AI, BP_PlayerState_Framework_C* TargetPlayer, S_AiSetting_AiCompBase Setting);// 0x9d213154d001
	void PopAll();// 0x9d203154d001
	void Init();// 0xffffff8a312cd002
	void BattleStart();// 0xffffff8a312cd002
	void Event_SetAiItem(out const S_AiItem[] ItemList, SolarCharacter* Character);// 0x9d1d3154d001
	void PlayerDie(BP_PlayerState_Framework_C* Player);// 0x9d1c3154d001
	static void ExecuteUbergraph_BP_AiCompManagerBase(int EntryPoint, SolarPlayerWeapon* Temp_object_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, byte Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, int Temp_int_Array_Index_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, const byte Temp_byte_Variable, int CallFunc_Add_IntInt_ReturnValue, const byte Temp_byte_Variable, const byte Temp_byte_Variable, const byte Temp_byte_Variable, const <FString,FString> K2Node_MakeMap_Map, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc__A_GetBattleTime_Time, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, const byte Temp_byte_Variable, float CallFunc_Divide_FloatFloat_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetAliveAiPlayers_AliveAiPlayers, const byte Temp_byte_Variable, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_CheckSingleAiState_NotHasPlayerAround, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, S_TriggerItem_AiCompBase CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_CustomEvent_Ai, BP_PlayerState_Framework_C* K2Node_CustomEvent_TargetPlayer, S_AiSetting_AiCompBase K2Node_CustomEvent_Setting, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString[] CallFunc_GetAiByType_Return, FString CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_CheckSingleAiState_NotHasPlayerAround, bool CallFunc_ShouldAiCheckSilence_Result, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Variable, BP_SliencePosition_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, byte Temp_byte_Variable, BP_PlayerState_Framework_C*[] CallFunc_GetAliveRealPlayers_AliveRealPlayers, int CallFunc_Array_Length_ReturnValue, int CallFunc_GetTeamWithRealPlayerCount_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetPathName_ReturnValue, FString CallFunc_GetPathName_ReturnValue, FString CallFunc_GetPathName_ReturnValue, FString CallFunc_GetPathName_ReturnValue, const S_AiItem[] K2Node_CustomEvent_ItemList, SolarCharacter* K2Node_CustomEvent_Character, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetDisplayName_ReturnValue, S_AiItem CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, enum CallFunc_AddBackpackItem_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const byte K2Node_Select_Default, const int K2Node_Select_Default, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_SetWeaponPartByPartID_Success, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool K2Node_SwitchEnum_CmpSuccess, SBattleRoyaleGameModeAIComp* CallFunc_GetAiCompManager_Output_Get, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarBotAIController* CallFunc_PopPreservedBot_OutController, bool CallFunc_PopPreservedBot_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, float CallFunc_RandomFloatInRange_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, byte[] K2Node_MakeArray_Array, GameModeBase* CallFunc_GetGameMode_ReturnValue, int CallFunc_GetAiNumberByType_Number, BPC_Death_Framework_C* CallFunc_GetComponentByClass_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue);// 0x7817468c2cd000

--------------------------------
Class: S_Trigger_AiCompBase
	S_TriggerItem_AiCompBase[] Trigger_3_93BDA1884A2BBD87A3845FBBE4FA189F;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: S_TriggerItem_AiCompBase
	enum TriggerType_2_BEB26C2A4141C52136B9A19F8C06055C;//[Offset: 0x0, Size: 0x1]
	int CoolDown_30_5AF35B8D4693268D4C775B8ADDB18B5F;//[Offset: 0x4, Size: 0x4]
	bool ApplyOnTeam_24_A1B578364A69FF58A4EE66B5A3E3B96F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int ApplyOnTeamRange_27_3936C50945C041ADEC41E09AFD20FC30;//[Offset: 0xc, Size: 0x4]
	S_AiGroup_AiCompBase[] AiGroup_22_C14D1C57492200282B35DEBACC4305D7;//[Offset: 0x10, Size: 0x10]
	S_Filter_AiCompBase Filter_36_2B44835D40F02B33ACF96FBDC89C32CF;//[Offset: 0x20, Size: 0x18]
	S_RecheckSetting_AiCompBase Recheck_33_3A2B5E9C4CCDB711A3980798BDBBCB1C;//[Offset: 0x38, Size: 0x8]
	<FString,FString> Parameter_41_F3AAED884967B98F2AA588925201DCEA;//[Offset: 0x40, Size: 0x50]
	enum Action_44_E917063042B97A3F6F6DBCB1464A2C87;//[Offset: 0x90, Size: 0x1]

--------------------------------
Class: S_AiGroup_AiCompBase
	S_AiGroupSetting_AiCompBase[] AiGroupSetting_14_A687F5C94BF1C7F5840FBB8AC4334C0A;//[Offset: 0x0, Size: 0x10]
	int TimeOut_9_F640B9744B21E97226F07583CDB4F870;//[Offset: 0x10, Size: 0x4]
	int NextWave_12_966ADD384DED2C469CAF52BC47BCDEB6;//[Offset: 0x14, Size: 0x4]
	int AiCapacity_18_F09CC6AC401197E66B6BB98EBC38EAE8;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: S_AiGroupSetting_AiCompBase
	S_AiSetting_AiCompBase[] Group_3_B8320C5A4C8302EBED3BC19B28B28E7E;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: S_AiSetting_AiCompBase
	int AiDifficulty_8_4974E4014585827DEEE7C4A2DD04C574;//[Offset: 0x0, Size: 0x4]
	S_VehicleSetting_AiCompBase Vehicle_31_62776A384FE3DF706792D787ECE21400;//[Offset: 0x8, Size: 0x58]
	int Character_5_1C83A7F644D28AEAEDC0E5A7C719F40D;//[Offset: 0x60, Size: 0x4]
	<enum,IntPoint> AiDataSetting_19_CE7523924778F4A2E8FB8E98FB609BC9;//[Offset: 0x68, Size: 0x50]
	S_AiItemSetting_AiCompBase AiItemSetting_24_C13AF7C7447904A20998EFA0633681A8;//[Offset: 0xb8, Size: 0xf0]
	S_TeleCenterSetting_AiCompBase TeleCenterSetting_29_19DB9A7E4832B3643DA07E85E3B0B87E;//[Offset: 0x1a8, Size: 0x14]

--------------------------------
Class: S_VehicleSetting_AiCompBase
	bool HasVehicle_1_65D3F5CB42EABC653978A3BB187614F1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	<int,int> VehicleId_6_1DD8025A4E78B76EFC5B37B83362D226;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: S_AiItemSetting_AiCompBase
	<enum,S_EquipmentArray_AiCompBase> Equipment_18_9C814D4B443C3D40AEB7F7BA8C9347DC;//[Offset: 0x0, Size: 0x50]
	<enum,IntPoint> Consumable_16_381728FD4CB1313E0D6308A986EE78AD;//[Offset: 0x50, Size: 0x50]
	<enum,S_EquipmentArray_AiCompBase> WeaponPart_27_A0B9A42B41A500C81FF8A997BC5F7D70;//[Offset: 0xa0, Size: 0x50]

--------------------------------
Class: S_EquipmentArray_AiCompBase
	<int,int> IdArray_10_CAC6F5A640D7560BEC823F818F74414C;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: S_TeleCenterSetting_AiCompBase
	bool SetTeleCenter_1_934127A647EC01FB0575C181F0207AD2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	IntPoint TeleportRadius_6_B6A052FC42B8B1735E5AFF9F69A260B8;//[Offset: 0x4, Size: 0x8]
	IntPoint TeleportAngle_7_E56785284B82170AB9B865A013E3A222;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: S_Filter_AiCompBase
	S_FilterGroup_AiCompBase[] FilterGroup_5_1C1B853F44EB9276E78146B9041C055E;//[Offset: 0x0, Size: 0x10]
	ActorComponent* FilterBP_11_A0A6C68E4056DF7081A4EB94A976515C;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: S_FilterGroup_AiCompBase
	S_FilterItem_AiCompBase[] FilterItem_9_BC990465434249467A45F88F9D411D11;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: S_FilterItem_AiCompBase
	enum Type_2_5F710F734E5DE42D8867F89EAEF8EDDA;//[Offset: 0x0, Size: 0x1]
	<enum,FString> Parameter_9_BF9075834B62C964411A2E904F36CE16;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: S_RecheckSetting_AiCompBase
	int RecheckNumber_2_97C2889540DE0A60DF6715922C7B8FC4;//[Offset: 0x0, Size: 0x4]
	int RecheckTime_4_5D651E194E66838571BE3FA34A3F2083;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: S_DeathBoxTimelineRow_AiCompBase
	int Time_2_928EF68248A34D329E295D8A369D8D2F;//[Offset: 0x0, Size: 0x4]
	S_AiItemSetting_AiCompBase Item_10_9E2EF34E44E80CF3DF7A459098D75A9C;//[Offset: 0x8, Size: 0xf0]

--------------------------------
Class: S_ItemUpdateTimelineRow_AiCompBase
	int Time_2_7FFBDA824D664BA9DCAEF3BAFA087E84;//[Offset: 0x0, Size: 0x4]
	S_AiItemSetting_AiCompBase ItemSetting_5_71BA01FC444A9137E6955BA3B5EA68F6;//[Offset: 0x8, Size: 0xf0]

--------------------------------
Class: S_DownsizingTimelineRow_AiCompBase
	int StartTime_14_A273D8E04EE25E8D2D889AACBBA4C5B8;//[Offset: 0x0, Size: 0x4]
	int EndTime_17_228E647F4CA498BC72379791288866FB;//[Offset: 0x4, Size: 0x4]
	int Mix_9_99173A4E47CF385193A8FD8CB2562C9A;//[Offset: 0x8, Size: 0x4]
	int Max_10_E4F85214403C3476C6DC9C967BE82897;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: S_ActionTimelineRow_AiCompBase
	int StartTime_2_F4B379F640944FDACE2AC89FD6E2A76B;//[Offset: 0x0, Size: 0x4]
	S_TriggerItem_AiCompBase[] Trigger_18_BE912C8040E1D41DD75E3B8044133BBC;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BP_AiCompElement_C.SCMMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x288, Size: 0x8]
	BP_PlayerState_Framework_C* TargetPlayer;//[Offset: 0x290, Size: 0x8]
	int WaveIndex;//[Offset: 0x298, Size: 0x4]
	TimerHandle TimeOutHandler;//[Offset: 0x2a0, Size: 0x8]
	int NextWaveStart;//[Offset: 0x2a8, Size: 0x4]
	BP_PlayerState_Framework_C*[] TriggeredAi;//[Offset: 0x2b0, Size: 0x10]
	S_TriggerItem_AiCompBase TriggerSetting;//[Offset: 0x2c0, Size: 0x98]
	int Recheck;//[Offset: 0x358, Size: 0x4]
	FString[] PopedGroup;//[Offset: 0x360, Size: 0x10]
	BP_AiCompManagerBase_C* AiCompManager;//[Offset: 0x370, Size: 0x8]
	BP_PlayerState_Framework_C*[] TriggeredPlayers;//[Offset: 0x378, Size: 0x10]
	BP_AiCompManagerBase_C* AiCompElement;//[Offset: 0x388, Size: 0x8]
	int ID;//[Offset: 0x390, Size: 0x4]
	FString GetAiNum(out S_AiGroup_AiCompBase[] AiGroupValue, FString[] Return, <int,int> Map, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const int Temp_int_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, S_AiGroup_AiCompBase CallFunc_Array_Get_Item, S_AiGroupSetting_AiCompBase CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, S_AiSetting_AiCompBase CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_JoinStringArray_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9bd83154d001
	static <FString,FString> GetPlayerDataTrace(SolarPlayerState* Player, FString FinishAccompany, FString Type, FString TriggerType, SolarPlayerState* NewLocalVar, byte Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, int CallFunc_GetPlayerStatisticData_OutValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetAiNum_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, FString K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, int CallFunc_GetPlayerStatisticData_OutValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, float CallFunc_GetCurrShieldValue_ReturnValue, int CallFunc_FTrunc_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_GetCurrentHealth_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, <FString,FString> K2Node_MakeMap_Map);// 0x9bd73154d001
	void GetWeaponPartIdList(out int[] ID, int[] ReturnValue, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const int Temp_int_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, int CallFunc_GetWeaponPartId_ItemId, int CallFunc_GetWeaponPartId_ItemId, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_GetWeaponPartId_ItemId, int CallFunc_GetWeaponPartId_ItemId, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_GetWeaponPartId_ItemId, int CallFunc_Array_AddUnique_ReturnValue);// 0x9bd63154d001
	void CheckNumberArray(out int[] Number, <byte,FString> Parameter, out bool Return, bool ReturnValue, int Temp_int_Loop_Counter_Variable, byte[] CallFunc_Map_Keys_Keys, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, byte CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9bd53154d001
	void GetWeaponPartId(int PartID, out int ItemID, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_WeaponParts CallFunc_GetRowData_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x9bd43154d001
	static void CheckTargetPlayerEquipment(out const <byte,FString> Parameter, out bool Return, int[] IdList, const byte Temp_byte_Variable, int[] CallFunc_GetWeaponPartIdList_Id, bool CallFunc_CheckNumberArray_Return, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_CheckNumberArray_Return, bool CallFunc_EqualEqual_IntInt_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, bool CallFunc_CheckNumber_Return, int CallFunc_Array_Add_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x9bd33154d001
	static void CheckEnemyNumber(<byte,FString> Parameter, out bool Return, int Number, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, const byte Temp_byte_Variable, int Temp_int_Array_Index_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_CheckNumber_Return, Vector CallFunc_GetPlayerLocation_Location, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_GetPlayerLocation_Location, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9bd23154d001
	static void CheckTeammateNumber(<byte,FString> Parameter, out bool Return, int Number, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, const byte Temp_byte_Variable, int Temp_int_Array_Index_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_CheckNumber_Return, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_GetPlayerLocation_Location, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_GetPlayerLocation_Location, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9bd13154d001
	void CheckTargetPlayerItem(<byte,FString> Parameter, out bool Return, const byte Temp_byte_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_GetItemNumber_Number, bool CallFunc_CheckNumber_Return);// 0x9bd03154d001
	void CheckTargetPlayerCauseDamage(<byte,FString> Parameter, out bool Return, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_CheckNumber_Return);// 0x9bcf3154d001
	void CheckTargetPlayerKillNumber(<byte,FString> Parameter, out bool Return, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_CheckNumber_Return);// 0x9bce3154d001
	void GetItemNumber(int ItemID, SolarPlayerState* Target, out int Number, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByID_ItemData, bool CallFunc_GetBackpackItemDataByID_ReturnValue);// 0x9bcd3154d001
	static void CheckNumber(int Number, <byte,FString> Parameter, out bool Return, bool ReturnValue, byte[] CallFunc_Map_Keys_Keys, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, byte CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9bcc3154d001
	void CheckFilterGroup(out const S_FilterGroup_AiCompBase Filter, out bool Result, bool ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, S_FilterItem_AiCompBase CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_CheckTargetPlayerEquipment_Return, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_CheckEnemyNumber_Return, bool CallFunc_CheckTeammateNumber_Return, bool CallFunc_CheckTargetPlayerItem_Return, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_CheckTargetPlayerCauseDamage_Return, bool CallFunc_CheckTargetPlayerKillNumber_Return, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x9bcb3154d001
	void GetPlayerLocation(SolarPlayerState* Player, out Vector Location, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0x9bca3154d001
	void CheckFilter(out const S_Filter_AiCompBase Filter, out bool Result, bool ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, S_FilterGroup_AiCompBase CallFunc_Array_Get_Item, bool CallFunc_CheckFilterGroup_Result, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_CheckFilter_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsAiCompCdClear_Result);// 0x9c043154d001
	static void CheckWaveValid(out bool Valid, byte[] K2Node_MakeArray_Array, BP_AiCompManagerBase_C* CallFunc_GetAiCompManager_AiCompManager, int CallFunc_GetAiNumberByType_Number, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x9bc83154d001
	void BreakAiWave(FString WaveSetting, out int[] Result, FString[] CallFunc_ParseIntoArray_ReturnValue, int[] CallFunc_ToInt_StringArray__Int);// 0x9bc73154d001
	void GetAiCompManager(out BP_AiCompManagerBase_C* AiCompManager, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BattleRoyaleGameModeAIComp_Custom_C* CallFunc_GetComponentByClass_ReturnValue);// 0x9bc63154d001
	static void GetRandomLocation(Vector Center, int Radius, out Vector Location, Vector TargetLocation, float CallFunc_Conv_IntToFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, const Actor*[] Temp_object_Variable, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector2D CallFunc_GetRotated2D_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x9bc53154d001
	static void PopAiByGroup(S_AiGroupSetting_AiCompBase GroupSettings, out FString[] Except, Vector GroupLocation, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, S_AiSetting_AiCompBase CallFunc_Array_Get_Item, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_AiCompManagerBase_C* CallFunc_GetAiCompManager_AiCompManager, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc__A_GetBattleTime_Time, int CallFunc__A_GetBattleTime_Time, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_AiCompManagerBase_C* CallFunc_GetAiCompManager_AiCompManager, FString[] CallFunc_GetPopAi_Return, FString[] CallFunc_GetPopAi_PopSide, FString CallFunc_JoinStringArray_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_Array_Get_Item, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, bool CallFunc_PopSingleAi_Success);// 0x9bc43154d001
	void ReceiveBeginPlay();// 0x9bc33154d001
	void AiCompFinish(byte Success);// 0x9bc23154d001
	void Init();// 0x9bc13154d001
	void PopAi();// 0x9bc03154d001
	void BasicSystemReady();// 0x9bbf3154d001
	void OnPlayerDie(BP_PlayerState_Framework_C* Player);// 0xad33312cd041
	void Reinit();// 0x9bbd3154d001
	void PopOneAiFailed(S_AiSetting_AiCompBase Setting);// 0xffffff87312cd000
	void Timeout();// 0x9bbb3154d001
	static void ExecuteUbergraph_BP_AiCompElement(int EntryPoint, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc___A_Bind_On_Basic_System_Ready_bReady, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, byte Temp_byte_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, FString Temp_string_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, FString Temp_string_Variable, int Temp_int_Array_Index_Variable, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString K2Node_Select_Default, <FString,FString> CallFunc_GetPlayerDataTrace_ReturnValue, int Temp_int_Array_Index_Variable, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int Temp_int_Loop_Counter_Variable, FString K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, <FString,FString> CallFunc_GetPlayerDataTrace_ReturnValue, int Temp_int_Array_Index_Variable, byte K2Node_CustomEvent_Success, FString K2Node_Select_Default, <FString,FString> CallFunc_GetPlayerDataTrace_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BPC_Death_Framework_C* CallFunc_GetComponentByClass_ReturnValue, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_CheckWaveValid_Valid, bool CallFunc_CheckWaveValid_Valid, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, S_AiGroupSetting_AiCompBase CallFunc_Array_Get_Item, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_GetPlayerLocation_Location, const FString[] K2Node_MakeArray_Array, float CallFunc_Conv_IntToFloat_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_GetPlayerLocation_Location, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CheckFilter_Result, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, S_AiSetting_AiCompBase K2Node_CustomEvent_Setting, BP_AiCompManagerBase_C* CallFunc_GetAiCompManager_AiCompManager, FString[] CallFunc_GetPopAi_Return, FString[] CallFunc_GetPopAi_PopSide, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, BP_AiCompManagerBase_C* CallFunc_GetAiCompManager_AiCompManager, bool CallFunc_PopSingleAi_Success, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xffffff87312cd000

--------------------------------
Class: BP_BotAIController_C.SolarBotAIController.SolarAIControllerBase.AIController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x650, Size: 0x8]
	void SetWarmGameClock(bool Enable);// 0x9def3154d001
	FString GetModuleName();// 0xaf2a3154d001
	void ReceiveBeginPlay();// 0xaf273154d001
	void ExecuteUbergraph_BP_BotAIController(int EntryPoint);// 0x9ddf3154d001

--------------------------------
Class: S_WarmGameSetting_AiCompBase
	int MaxiumTeam_12_C517CE564EDE787AE3734383D264A254;//[Offset: 0x0, Size: 0x4]
	FString Comment_15_FE32996349B1C0680A106781D7EE6C86;//[Offset: 0x8, Size: 0x10]
	DataTable* Action_5_7DB1AB4A46E32BB245EB5BAAECC0C063;//[Offset: 0x18, Size: 0x8]
	DataTable* Item_7_22057775450469E40587299341C57CCC;//[Offset: 0x20, Size: 0x8]
	DataTable* Downsize_9_CFC5DE0B4AE8A479571703AEE5031A22;//[Offset: 0x28, Size: 0x8]
	DataTable* DeathBox_11_BD72AB2C4EC6B2999BF1C99A081A2563;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: BP_SliencePosition_C.SCMMapElementBase.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: BP_BotAIController_BattleRoyale_C.BP_BotAIController_C.SolarBotAIController.SolarAIControllerBase.AIController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x658, Size: 0x8]
	NgaiAIControllerComponent* NgaiAIController;//[Offset: 0x660, Size: 0x8]
	FString GetModuleName();// 0x9df93154d001
	void ReceiveBeginPlay();// 0x9df83154d001
	void ReceiveTick(float DeltaSeconds);// 0xffffff87312cd000
	void CallAIBegin();// 0xffffff87312cd000
	void 自定义事件                                                                                     ();// 0x9df53154d001
	static void ExecuteUbergraph_BP_BotAIController_BattleRoyale(int EntryPoint, bool CallFunc_UseNewAiComp_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, float K2Node_Event_DeltaSeconds, bool Temp_bool_Has_Been_Initd_Variable, FName CallFunc_MakeLiteralName_ReturnValue, Object* CallFunc_GetValueAsObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_RandomBoolWithWeight_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, Pawn* CallFunc_K2_GetPawn_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SolarVehiclePawn* K2Node_DynamicCast_AsSolar_Vehicle_Pawn, bool K2Node_DynamicCast_bSuccess, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, SolarCharacter* CallFunc_GetDriverCharacter_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, SolarItemData CallFunc_GetBackpackItemDataByID_ItemData, bool CallFunc_GetBackpackItemDataByID_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByID_ItemData, bool CallFunc_GetBackpackItemDataByID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByID_ItemData, bool CallFunc_GetBackpackItemDataByID_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByID_ItemData, bool CallFunc_GetBackpackItemDataByID_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, int CallFunc_RandomInteger_ReturnValue, int CallFunc_RandomInteger_ReturnValue, int CallFunc_RandomInteger_ReturnValue, int CallFunc_RandomInteger_ReturnValue, SolarBotAITeamManager* CallFunc_Get_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, bool Temp_bool_IsClosed_Variable, Object* CallFunc_GetValueAsObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarBotAITeamManager* CallFunc_Get_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_UseNewAiComp_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0xaf293154d001

--------------------------------
Class: BP_SI_RebornLine_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* FX_Tag;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent* FX_Tag_Glow;//[Offset: 0x238, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
	void Event_SetWaitingColor();// 0x2dffb5315bd02e
	void Event_SetFinishColor();// 0xffffff87312cd044
	void ExecuteUbergraph_BP_SI_RebornLine(int EntryPoint);// 0xbc29312cd041

--------------------------------
Class: MiniMapUMG_C.MiniMapWidget.MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x728, Size: 0x8]
	HorizontalBox* Airline;//[Offset: 0x730, Size: 0x8]
	UI_DrawLinePanel_C* DrawLinePanel;//[Offset: 0x738, Size: 0x8]
	CanvasPanel* MapRotate;//[Offset: 0x740, Size: 0x8]
	Image* Route_line;//[Offset: 0x748, Size: 0x8]
	Image* Route_line_end;//[Offset: 0x750, Size: 0x8]
	Image* Route_line_start;//[Offset: 0x758, Size: 0x8]
	CanvasPanel* RTIconLayer;//[Offset: 0x760, Size: 0x8]
	Image* SolarCapsule;//[Offset: 0x768, Size: 0x8]
	float RefreshTime;//[Offset: 0x770, Size: 0x4]
	<int,PlayerMark_C*> PlayerMarkMap;//[Offset: 0x778, Size: 0x50]
	MarkIcon_C*[] MarkersPool;//[Offset: 0x7c8, Size: 0x10]
	Vector2D MapScaleRange;//[Offset: 0x7d8, Size: 0x8]
	float SliderBarValue;//[Offset: 0x7e0, Size: 0x4]
	Vector2D FOVOffset;//[Offset: 0x7e4, Size: 0x8]
	Vector2D SizeSet;//[Offset: 0x7ec, Size: 0x8]
	Vector2D VectorCenter;//[Offset: 0x7f4, Size: 0x8]
	Vector2D RealVector;//[Offset: 0x7fc, Size: 0x8]
	int Index;//[Offset: 0x804, Size: 0x4]
	<int,FString> PlayerIconMap;//[Offset: 0x808, Size: 0x50]
	<int,FString> PlayerOutOfMapMap;//[Offset: 0x858, Size: 0x50]
	float TouchPrecision;//[Offset: 0x8a8, Size: 0x4]
	MarkIcon_C* VehicleMark;//[Offset: 0x8b0, Size: 0x8]
	float MiniFOV;//[Offset: 0x8b8, Size: 0x4]
	MapMarkBase*[] MarkList;//[Offset: 0x8c0, Size: 0x10]
	bool IsCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d0, Size: 0x1]
	FString GetModuleName();// 0x9cd23154d001
	void InitAirline(MiniMapAirlineData InData, float CallFunc_Add_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw);// 0x9cd13154d001
	void InitCapsule(MiniMapAirlineData InData, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue);// 0x9cd03154d001
	void SetAirlineType(MiniMapAirlineData InData, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default);// 0x9ccf3154d001
	int AddDotLineOnMap(Actor* StartPointActor, Actor* EndPointActor, LinearColor DotLineColor, int CallFunc_AddDotLine_ReturnValue);// 0x9cce3154d001
	MapMarkBase* InitMarkIconOnMapFrame(class MapMarkBase InMapMarkClass, out const Vector2D Pivot, int ZOrder, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, MapMarkBase* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x9ccd3154d001
	MapMarkBase* InitMarkIcon(class MapMarkBase InMapMarkClass, out const Vector2D InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int ZOrder, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, MapMarkBase* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_Array_Add_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x9ccc3154d001
	void InitMapFOV(float InitFOV, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x9ccb3154d001
	void DisableOneFinger(PointerEvent Event, BP_MapInputManager_C* K2Node_DynamicCast_AsBP_Map_Input_Manager, bool K2Node_DynamicCast_bSuccess);// 0x9cca3154d001
	static void GetTwoFingerDistance(out float Distance, Vector2D FirstFinger, <int,Vector2D> FingerMapRef, int[] TuchedFingers, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Distance2D_ReturnValue, int[] CallFunc_Map_Keys_Keys, bool CallFunc_IsValid_ReturnValue);// 0x9cc93154d001
	void UpdateAirlineData(float MovePercent, Vector2D InIconPos, float CallFunc_Subtract_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x9cc83154d001
	void InitMapAirline(bool IsShow, MiniMapAirlineData AirlineData);// 0x9cc73154d001
	void PreConstruct(bool IsDesignTime);// 0x9cc63154d001
	void RemoveMarkIcon(MapMarkBase* InMapMark);// 0x9d293154d001
	void RemoveDotLineOnMap(int DotLineID);// 0x9cc43154d001
	void Event_EndOfInitialization();// 0xb6563154d001
	void Destruct();// 0x78e1fd98acd000
	static void ExecuteUbergraph_MiniMapUMG(int EntryPoint, bool K2Node_Event_IsDesignTime, MapMarkBase* K2Node_Event_InMapMark, bool CallFunc_Array_Contains_ReturnValue, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Event_DotLineID, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, MapMarkBase* CallFunc_Array_Get_Item, PanelWidget* CallFunc_GetParent_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerMark_C*[] CallFunc_Map_Values_Values, PlayerMark_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int Temp_int_Variable, PlayerMark_C* CallFunc_Create_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, MapMarkBase* CallFunc_Array_Get_Item, PanelWidget* CallFunc_GetParent_ReturnValue, bool CallFunc_IsValid_ReturnValue, MarkIcon_C* CallFunc_Create_ReturnValue, PlayerNav_C* CallFunc_Create_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xb95a3154d001

--------------------------------
Class: MiniMapWidget.MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	bool bCanCheckEnemyState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1]
	bool bUseAsBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 0x1]
	bool AutoOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ae, Size: 0x1]
	bool OnCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3af, Size: 0x1]
	bool WithIconScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 0x1]
	float DeltaTime;//[Offset: 0x3b4, Size: 0x4]
	float AspectRatio;//[Offset: 0x3b8, Size: 0x4]
	float MapFOV;//[Offset: 0x3bc, Size: 0x4]
	enum CurrentState;//[Offset: 0x3c0, Size: 0x1]
	Vector2D MapSize;//[Offset: 0x3c4, Size: 0x8]
	Anchors CenterAnchors;//[Offset: 0x3cc, Size: 0x10]
	Vector2D IntersectionMarkSlotSize;//[Offset: 0x3dc, Size: 0x8]
	Vector2D SelfNavSlotSize;//[Offset: 0x3e4, Size: 0x8]
	<int,enum> PartnerDirCacheMap;//[Offset: 0x3f0, Size: 0x50]
	<int,PlayerNavWidget*> PlayerNavMap;//[Offset: 0x440, Size: 0x50]
	<int,MarkIconWidget*> PartnerInterSectionMap;//[Offset: 0x4e0, Size: 0x50]
	MapVoiceWidget* MapVoiceLayer;//[Offset: 0x530, Size: 0x8]
	SizeBox* MapFOVSizeBox;//[Offset: 0x538, Size: 0x8]
	CanvasPanel* MapOffset;//[Offset: 0x540, Size: 0x8]
	SolarImage* SolarImageMap;//[Offset: 0x548, Size: 0x8]
	CanvasPanel* ImageFrameLayer;//[Offset: 0x550, Size: 0x8]
	CanvasPanel* MarkerLayer;//[Offset: 0x558, Size: 0x8]
	ScaleBox* MapScale;//[Offset: 0x560, Size: 0x8]
	CanvasPanel* RenderTargetCanvas;//[Offset: 0x568, Size: 0x8]
	SolarImage* Img_EMP;//[Offset: 0x570, Size: 0x8]
	MeshRectangleWidget* IconMeshRectangleWidget;//[Offset: 0x578, Size: 0x8]
	MeshRectangleWidget* AnimIconMeshWidget;//[Offset: 0x580, Size: 0x8]
	ConfigMiniMapMeshWidgetData MiniMapMeshWidgetConfigData;//[Offset: 0x588, Size: 0x18]
	PlayerNavWidget* SelfNav;//[Offset: 0x5a0, Size: 0x8]
	Vector2D CurrentMapOffset;//[Offset: 0x5a8, Size: 0x8]
	Vector2D MapIconScale;//[Offset: 0x5b0, Size: 0x8]
	SolarMapManager* MapMgr;//[Offset: 0x5b8, Size: 0x8]
	bool bBelongToBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	<enum,AirdropMeshWidgetData> AirdropMeshWidgetDataMap;//[Offset: 0x5c8, Size: 0x50]
	float AdjustMapRatio;//[Offset: 0x618, Size: 0x4]
	float AdjustWorldDis;//[Offset: 0x61c, Size: 0x4]
	float AirdropAnimOutsideScale;//[Offset: 0x620, Size: 0x4]
	float AirdropTickRate;//[Offset: 0x624, Size: 0x4]
	float AirdropClearTime;//[Offset: 0x628, Size: 0x4]
	bool bUpdateSelfNav;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 0x1]
	CurveFloat* CacheFOVScaleCurve;//[Offset: 0x648, Size: 0x8]
	void VehicleClear(bool IsOwner);// 0x40e5312cd041
	void UpdateVehicleModeMapFOV();// 0x40e4312cd041
	void UpdatePoisonEffect(float PosX, float PosY, float Radius);// 0x40e3312cd041
	void UpdateMeshWidgetMarkSlotSize(FString MarkKey, out const Vector2D InMarkSlotSize);// 0x40e2312cd041
	void UpdateMeshWidgetMarkColorOpacityIndex(FString MarkKey, const int InColorOpacityIndex);// 0x40e1312cd041
	void UpdateMeshWidgetIconTexId(FString MarkKey, const int InIconTexId);// 0x40e0312cd041
	void UpdateEmp();// 0x40df312cd041
	void SetMapFOVBySpeed(float InSpeed);// 0x40de312cd041
	void SetMapFOVAutoOffset(float InNewFOV);// 0x40dd312cd041
	void SetMapFOV(float InNewFOV, out const Vector2D InScaleCenter);// 0x40dc312cd041
	void SetBelongToBigMap(bool bIsBelongToBigMap);// 0x40db312cd041
	void SetAirdropMeshWidgetStatus(FString InKey, enum InNewStatus);// 0x40da312cd041
	void RemoveMeshWidgetMark(FString MarkKey);// 0x40d9312cd041
	void RegisterDataProvider();// 0x40d8312cd041
	void RefreshLastVehicleLocation();// 0x40d7312cd041
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x40d6312cd041
	void OnReconnect();// 0x40d5312cd041
	void OnFOVScaleChangedByPoison(CurveFloat* InCurve);// 0x40d4312cd041
	void IconSizeFormat();// 0x40d3312cd041
	PlayerNavWidget* GetSelfNav();// 0x40d2312cd041
	SolarPlayerState* GetCameraFocusedCharacterState();// 0x40d1312cd041
	void ClearVehicleMarkWidget();// 0x40d0312cd041
	void ClearPlayerMarkPoint();// 0x40cf312cd041
	void ClearMiniMapMarkWidget();// 0x40ce312cd041
	void AdjustMapOffset(Vector2D MapLocation);// 0x40cd312cd041
	FString AddMeshWidgetMark(out const Vector2D InPosition, out const Vector2D InMarkSlotSize, const enum InMarkType, const float InRenderTransformScaleX, FString InMarkName, const int InMarkIndex);// 0x40cc312cd041

--------------------------------
Class: PlayerNavWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	WidgetSwitcher* IconSwitcher;//[Offset: 0x340, Size: 0x8]
	CanvasPanel* PlayerNav;//[Offset: 0x348, Size: 0x8]
	CanvasPanel* PlayerOutOfMapNav;//[Offset: 0x350, Size: 0x8]
	Image* FOV;//[Offset: 0x358, Size: 0x8]
	Image* ImageRoleNav;//[Offset: 0x360, Size: 0x8]
	TextBlock* PlayerOrder;//[Offset: 0x368, Size: 0x8]
	void SwitchPlayerNav(bool bOutOfBounds);// 0x414a312cd041
	void SetBrushResourceObject(Object* InSprite);// 0x4149312cd041
	void ResetPlayerNav();// 0x4148312cd041
	void ReceivePlayerDead();// 0x4147312cd041
	void OnAllPlayerNavVisibilityChanged(bool bVisible);// 0x4146312cd041

--------------------------------
Class: MarkIconWidget.MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	FString AtlasPath;//[Offset: 0x380, Size: 0x10]
	FString SpriteType;//[Offset: 0x390, Size: 0x10]
	Image* ImageMarker;//[Offset: 0x3a0, Size: 0x8]
	void SetTransparent(float TransparentPercent);// 0x40b2312cd041
	void SetMarkerType(enum Type, bool bRefreshSlot, bool bNeedSyncLoadIcon);// 0x40b1312cd041

--------------------------------
Class: MapVoiceWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	<int,MarkIconWidget*> VoiceIconMap;//[Offset: 0x340, Size: 0x50]
	void AddPlayerMark(enum Type, int DirectID, float TransparentPercent);// 0x40b0312cd041

--------------------------------
Class: MeshRectangleWidget.MeshWidgetUWidget.Widget.Visual.Object
	MaterialInterface* BaseMaterial;//[Offset: 0x148, Size: 0x8]
	int NumFloat4PerInstance;//[Offset: 0x150, Size: 0x4]
	void SetInstanceNum(int NewNum);// 0x3a18312cd041
	void ModifyInstanceNum(int dNum);// 0x3a17312cd041
	void InitUnitTestProvider();// 0x3a16312cd041

--------------------------------
Class: MeshWidgetUWidget.Widget.Visual.Object

--------------------------------
Class: ConfigMiniMapMeshWidgetData
	float TimeSpeed;//[Offset: 0x0, Size: 0x4]
	byte IconTexId;//[Offset: 0x4, Size: 0x1]
	byte ColorOpacityIndex;//[Offset: 0x5, Size: 0x1]
	Vector2D OpacityCoeff;//[Offset: 0x8, Size: 0x8]
	Vector2D ScaleAndRipplingCoeff;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: AirdropMeshWidgetData
	ConfigMiniMapMeshWidgetData IconData;//[Offset: 0x0, Size: 0x18]
	ConfigMiniMapMeshWidgetData DiffuseData;//[Offset: 0x18, Size: 0x18]
	ConfigMiniMapMeshWidgetData FlashData;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x5997312cd041

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x599b312cd041
	void SetSize(SlateChildSize InSize);// 0x599a312cd041
	void SetPadding(Margin InPadding);// 0x5999312cd041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x5998312cd041

--------------------------------
Class: UI_DrawLinePanel_C.DrawLinePanel.SolarUserWidget.UserWidget.Widget.Visual.Object

--------------------------------
Class: DrawLinePanel.SolarUserWidget.UserWidget.Widget.Visual.Object
	float MapSize;//[Offset: 0x340, Size: 0x4]
	float CurrentFOV;//[Offset: 0x344, Size: 0x4]
	LinearColor SafeAreaColor;//[Offset: 0x348, Size: 0x10]
	LinearColor PosionCircleColor;//[Offset: 0x358, Size: 0x10]
	LinearColor DotLineColor;//[Offset: 0x368, Size: 0x10]
	LinearColor AirlineProgressColor;//[Offset: 0x378, Size: 0x10]
	LinearColor CapsuleBackgroundColor;//[Offset: 0x388, Size: 0x10]
	LinearColor AirdropBackgroundColor;//[Offset: 0x398, Size: 0x10]
	float AirdropAirlineSizeY;//[Offset: 0x3a8, Size: 0x4]
	float MaterialCircleSize;//[Offset: 0x3ac, Size: 0x4]
	float DotLineDottedLength;//[Offset: 0x3b0, Size: 0x4]
	float DotLineDottedInterval;//[Offset: 0x3b4, Size: 0x4]
	DotLineData[] DotLineDataList;//[Offset: 0x3c0, Size: 0x10]
	CircleData[] CircleDataList;//[Offset: 0x3d0, Size: 0x10]
	SolarMapManager* MapManager;//[Offset: 0x3e0, Size: 0x8]
	SolarCapsuleRoot* CapsuleRoot;//[Offset: 0x3e8, Size: 0x8]
	SoftObjectPath CircleMaterialPath;//[Offset: 0x3f0, Size: 0x18]
	SoftObjectPath DottedLineMaterialPath;//[Offset: 0x408, Size: 0x18]
	MaterialInstanceDynamic*[] CircleMaterialInstanceArray;//[Offset: 0x420, Size: 0x10]
	MaterialInstanceDynamic*[] DottedLineMaterialInstanceArray;//[Offset: 0x430, Size: 0x10]
	float InitFOV;//[Offset: 0x440, Size: 0x4]
	void RemoveDotLine(int DotLineID);// 0x3ec0312cd041
	void RemoveCircle(int CircleID);// 0x3ebf312cd041
	void InitializePanelFOV(float InFOV);// 0x3ebe312cd041
	int AddDotLine(Actor* StartPointActor, Actor* EndPointActor, LinearColor Color);// 0x3ebd312cd041
	int AddCircle(Vector2D Center, float Radius, LinearColor Color);// 0x3ebc312cd041

--------------------------------
Class: DotLineData
	Actor* StartActor;//[Offset: 0x0, Size: 0x8]
	Actor* EndActor;//[Offset: 0x8, Size: 0x8]
	LinearColor DotLineColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: CircleData
	Vector2D Center;//[Offset: 0x0, Size: 0x8]
	float Radius;//[Offset: 0x8, Size: 0x4]
	LinearColor LineColor;//[Offset: 0xc, Size: 0x10]

--------------------------------
Class: PlayerMark_C.PlayerMark.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	int OrderID;//[Offset: 0x288, Size: 0x4]
	Color Color1;//[Offset: 0x28c, Size: 0x4]
	Color Color2;//[Offset: 0x290, Size: 0x4]
	Color Color3;//[Offset: 0x294, Size: 0x4]
	Color Color4;//[Offset: 0x298, Size: 0x4]
	FString GetModuleName();// 0x9c883154d001
	void SetOrder(int OrderID, bool K2Node_SwitchInteger_CmpSuccess);// 0xffffff8a312cd002
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xffffff8a312cd002
	static void ExecuteUbergraph_PlayerMark(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime);// 0x9c683154d001

--------------------------------
Class: PlayerMark.UserWidget.Widget.Visual.Object
	Image* PlayerMarkImage;//[Offset: 0x260, Size: 0x8]
	TextBlock* Length;//[Offset: 0x268, Size: 0x8]
	SolarMapManager* MapManager;//[Offset: 0x270, Size: 0x8]
	Vector2D MarkPoint;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: MarkIcon_C.MarkIconWidget.MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3b8, Size: 0x8]
	bool IsAddToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	Object* Texture;//[Offset: 0x3c8, Size: 0x8]
	int OrderID;//[Offset: 0x3d0, Size: 0x4]
	Color Color1;//[Offset: 0x3d4, Size: 0x4]
	Color Color2;//[Offset: 0x3d8, Size: 0x4]
	Color Color3;//[Offset: 0x3dc, Size: 0x4]
	Color Color4;//[Offset: 0x3e0, Size: 0x4]
	FString GetModuleName();// 0x9ca13154d001
	void SetOutWindowStateOrder(int OrderID, bool K2Node_SwitchInteger_CmpSuccess, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0xffffff8a312cd002
	void PreConstruct(bool IsDesignTime);// 0xffffff8a312cd002
	void ExecuteUbergraph_MarkIcon(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x1ac273154d008

--------------------------------
Class: BP_MapInputManager_C.WidgetInputManager.Object
	void On Input Leave(PointerEvent Event, PointerEvent tmpEvent, bool CallFunc_PointerEvent_IsTouchEvent_ReturnValue, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, int CallFunc_PointerEvent_GetPointerIndex_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, bool CallFunc_Map_Contains_ReturnValue);// 0xffffff8a312cd002

--------------------------------
Class: PlayerNav_C.PlayerNavWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x378, Size: 0x8]
	Image* Arror;//[Offset: 0x380, Size: 0x8]
	Image* OutOfMapArror;//[Offset: 0x388, Size: 0x8]
	Image* OutOfMapImageRole;//[Offset: 0x390, Size: 0x8]
	int OrderID;//[Offset: 0x398, Size: 0x4]
	SlateColor Color1;//[Offset: 0x3a0, Size: 0x28]
	SlateColor Color2;//[Offset: 0x3c8, Size: 0x28]
	SlateColor Color3;//[Offset: 0x3f0, Size: 0x28]
	SlateColor Color4;//[Offset: 0x418, Size: 0x28]
	LinearColor DeadColor;//[Offset: 0x440, Size: 0x10]
	bool isOutOfMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 0x1]
	int EditorOrder;//[Offset: 0x454, Size: 0x4]
	bool IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	float Rotate;//[Offset: 0x45c, Size: 0x4]
	bool HasDeadHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	FString GetModuleName();// 0x9c6b3154d001
	void SetOrder(int OrderID, bool K2Node_SwitchInteger_CmpSuccess);// 0x9c6a3154d001
	void PreConstruct(bool IsDesignTime);// 0x9c693154d001
	void ResetPlayerNav();// 0x9c863154d001
	void ReceivePlayerDead();// 0xffffff8a312cd002
	void ExecuteUbergraph_PlayerNav(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x1ac453154d008

--------------------------------
Class: FallbackStruct

--------------------------------
Class: BP_WarmGameLogic_NoramlWarmGame_C.BP_WarmGameLogicBase_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 0x8]
	<int,Vector2D> 温暖局毒圈范围                                                                               ;//[Offset: 0x240, Size: 0x50]
	<int,Vector2D> 温暖据轰炸区范围                                                                            ;//[Offset: 0x290, Size: 0x50]
	DataTable* BattleTimelineConfig;//[Offset: 0x2e0, Size: 0x8]
	<int,Vector2D> 航线ID_毒圈中心映射                                                                         ;//[Offset: 0x2e8, Size: 0x50]
	int AirLineID;//[Offset: 0x338, Size: 0x4]
	Vector[] PoisonCircleCenterArray;//[Offset: 0x340, Size: 0x10]
	void 覆盖毒圈                                                                                        (BP_MapInfoComponent_C* InputPin, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x9d8f3154d001
	static void 覆盖航线                                                                                        (BP_MapInfoComponent_C* MapInfo, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int[] CallFunc_Map_Keys_Keys, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Array_Length_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_Subtract_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_Airline CallFunc_GetRowData_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, AirlineData K2Node_MakeStruct_AirlineData);// 0x9d8e3154d001
	void Event_ExecLogic();// 0x9d8d3154d001
	void ExecuteUbergraph_BP_WarmGameLogic_NoramlWarmGame(int EntryPoint, bool CallFunc_IsValid_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, Actor* CallFunc_GetOwner_ReturnValue, BP_Logic_BattleRoyale_C* K2Node_DynamicCast_AsBP_Logic_Battle_Royale, bool K2Node_DynamicCast_bSuccess, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xaf173154d001

--------------------------------
Class: SolarPoisonDamageEvent.SolarSystemDamage.SolarPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: SolarSystemDamage.SolarPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: UI_MapMark_ReviveTeammates_C.MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x380, Size: 0x8]
	WidgetAnimation* Occupy_Loop_Anim;//[Offset: 0x388, Size: 0x8]
	Image* Img_BG;//[Offset: 0x390, Size: 0x8]
	Image* img_Light;//[Offset: 0x398, Size: 0x8]
	Image* img_Light;//[Offset: 0x3a0, Size: 0x8]
	Image* Img_Revival;//[Offset: 0x3a8, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x3b0, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x3b8, Size: 0x8]
	int HideDistance;//[Offset: 0x3c0, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x3c8, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x3d8, Size: 0x10]
	FString PlayerId;//[Offset: 0x3e8, Size: 0x10]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xb0f43154d001
	void SetColor(byte Index, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default);// 0xb0f73154d001
	void SetIcon(Widget* Content, int 隐藏距离                                                                                        , PanelSlot* CallFunc_AddChild_ReturnValue);// 0xa1a33154d001
	void Event_PlayAnim();// 0xae23312cd041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xa1cd3154d001
	static void ExecuteUbergraph_UI_MapMark_ReviveTeammates(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue);// 0xffffff87312cd044

--------------------------------
Class: UI_WorldMark_ReviveTeammates_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x398, Size: 0x8]
	WidgetAnimation* Occupy_Anim;//[Offset: 0x3a0, Size: 0x8]
	CanvasPanel* CanvasPanel;//[Offset: 0x3a8, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x3b0, Size: 0x8]
	Image* Img_Arrow;//[Offset: 0x3b8, Size: 0x8]
	Image* img_HeadBg_Shadow;//[Offset: 0x3c0, Size: 0x8]
	Image* img_Light;//[Offset: 0x3c8, Size: 0x8]
	Image* img_PlayerHead;//[Offset: 0x3d0, Size: 0x8]
	CanvasPanel* Panel;//[Offset: 0x3d8, Size: 0x8]
	Image* ProgressCD;//[Offset: 0x3e0, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x3e8, Size: 0x8]
	SolarTextBlock* Txt_Recover;//[Offset: 0x3f0, Size: 0x8]
	int HideDistance;//[Offset: 0x3f8, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x400, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x410, Size: 0x10]
	FString PlayerId;//[Offset: 0x420, Size: 0x10]
	MaterialInstanceDynamic* CDMaterial;//[Offset: 0x430, Size: 0x8]
	SCMPlayerState* PlayerState;//[Offset: 0x438, Size: 0x8]
	FString DisString;//[Offset: 0x440, Size: 0x10]
	FString RecoverString;//[Offset: 0x450, Size: 0x10]
	FText TimeFormatText;//[Offset: 0x460, Size: 0x18]
	float RemainTime;//[Offset: 0x478, Size: 0x4]
	float TempTickIntervalTime;//[Offset: 0x47c, Size: 0x4]
	void Set Player ID And Change Color(FString PlayerId, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, CharacterSkinConfig* CallFunc_GetSkinConfig_ReturnValue, SoftObjectPath CallFunc_GetSkinIcon_ReturnValue, Texture2D* CallFunc_LoadTexture2DBySoftPath_ReturnValue);// 0x85553154d001
	static void SetColor(byte Index, byte CallFunc_Subtract_ByteByte_ReturnValue, byte CallFunc_BMax_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, SlateColor K2Node_MakeStruct_SlateColor);// 0x85543154d001
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x85533154d001
	static FText Get Distance Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x85523154d001
	void SetIcon(Widget* Content, int 隐藏距离                                                                                        , PanelSlot* CallFunc_AddChild_ReturnValue);// 0x85513154d001
	void PreConstruct(bool IsDesignTime);// 0x85503154d001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x85be312cd001
	void Event_PlayAnim();// 0x8596312cd001
	void OnInitialized();// 0x854d3154d001
	static void ExecuteUbergraph_UI_WorldMark_ReviveTeammates(int EntryPoint, const <FString,FString> Temp_string_Variable, float CallFunc_Subtract_FloatFloat_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetFollowActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_PlaySoundAtLocationbyname_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, LinearColor K2Node_MakeStruct_LinearColor, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Get_Wait_Time_Remaining_RemainTime, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_FFloor_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, float CallFunc_FClamp_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, LinearColor K2Node_MakeStruct_LinearColor, FText CallFunc_Get_Distance_Text_ReturnValue, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Format_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0xffffffffae1c83f0

--------------------------------
Class: UI_Resurrect_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8]
	WidgetAnimation* CountDown_Progress_Anim;//[Offset: 0x348, Size: 0x8]
	WidgetAnimation* CountDown_Anim;//[Offset: 0x350, Size: 0x8]
	WidgetAnimation* Resurrecting_Enter_Anim;//[Offset: 0x358, Size: 0x8]
	WidgetAnimation* ReliveProp_Anim;//[Offset: 0x360, Size: 0x8]
	Overlay* CountDown;//[Offset: 0x368, Size: 0x8]
	Image* img_Props;//[Offset: 0x370, Size: 0x8]
	Image* Img_RebirthTimeMAT;//[Offset: 0x378, Size: 0x8]
	TextBlock* Txt_RebirthTimeNum;//[Offset: 0x380, Size: 0x8]
	TimerHandle TimerHandle;//[Offset: 0x388, Size: 0x8]
	int ReviveWaitTime;//[Offset: 0x390, Size: 0x4]
	BP_PlayerState_Framework_C* Player;//[Offset: 0x398, Size: 0x8]
	void Visible and Invisible Protection(out bool Exec, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue);// 0x858d3154d001
	void SetIcon(byte Type, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x858c3154d001
	void UIEvent_CountDown();// 0xa1dd3154d001
	void UIEvent_Show(int ReviveWaitTime);// 0x858a3154d001
	void ShowResurrectUI(int Time, byte Type, BP_PlayerState_Framework_C* Player);// 0xa1d93154d001
	void RebirthCountDown(int Time);// 0x85883154d001
	void ExecuteUbergraph_UI_Resurrect(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_ReviveWaitTime, FText CallFunc_Conv_IntToText_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_SafeDivide_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, SolarCharacter* CallFunc__C_GetLocalCharacter_ReturnValue, interface class_                                                                                                    K2Node_DynamicCast_AsBPI_Revive_Item_Camera, bool K2Node_DynamicCast_bSuccess, int K2Node_Event_Time, byte K2Node_Event_Type, BP_PlayerState_Framework_C* K2Node_Event_player, enum Temp_byte_Variable, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, enum Temp_byte_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Format_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Visible_and_Invisible_Protection_Exec, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int K2Node_CustomEvent_Time, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, FText CallFunc_Conv_IntToText_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, GameReviveItemManager* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlayerReviving_ReturnValue, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0xffffffff49dece40

--------------------------------
Class: UI_WorldMark_ReviveTeammatesDeathbox_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x398, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x3a0, Size: 0x8]
	Image* Img_BG;//[Offset: 0x3a8, Size: 0x8]
	Image* img_Light;//[Offset: 0x3b0, Size: 0x8]
	Image* img_Light;//[Offset: 0x3b8, Size: 0x8]
	Image* Img_Revival;//[Offset: 0x3c0, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x3c8, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x3d0, Size: 0x8]
	int HideDistance;//[Offset: 0x3d8, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x3e0, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x3f0, Size: 0x10]
	FString PlayerId;//[Offset: 0x400, Size: 0x10]
	FString DistanceLocalString;//[Offset: 0x410, Size: 0x10]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x85343154d001
	static void SetColor(byte Index, byte CallFunc_Subtract_ByteByte_ReturnValue, byte CallFunc_BMax_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, SlateColor K2Node_MakeStruct_SlateColor);// 0x85333154d001
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x85323154d001
	static FText Get_Distance_Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x85313154d001
	void SetIcon(Widget* Content, int 隐藏距离                                                                                        , PanelSlot* CallFunc_AddChild_ReturnValue);// 0x85303154d001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x852f3154d001
	void PreConstruct(bool IsDesignTime);// 0x8562312cd001
	void OnInitialized();// 0xae33312cd041
	static void ExecuteUbergraph_UI_WorldMark_ReviveTeammatesDeathbox(int EntryPoint, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, FText CallFunc_Get_Distance_Text_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x85ca312cd001

--------------------------------
Class: ABP_SolarCharacter_FPP_C.AnimInstance.Object
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x268, Size: 0x30]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x298, Size: 0x28]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2c0, Size: 0x28]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2e8, Size: 0x78]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x360, Size: 0x30]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x390, Size: 0x78]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x408, Size: 0x30]
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x438, Size: 0xb0]
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x4e8, Size: 0x48]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x530, Size: 0x78]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x5a8, Size: 0xa0]
	SolarCharacter* SolarCharacter;//[Offset: 0x648, Size: 0x8]
	bool IsScopeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]
	float ScopeFadeTime;//[Offset: 0x654, Size: 0x4]
	bool IsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]
	bool IsShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 0x1]
	bool ShootDouble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65a, Size: 0x1]
	float Horizontal;//[Offset: 0x65c, Size: 0x4]
	float Vertical;//[Offset: 0x660, Size: 0x4]
	bool bUseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 0x1]
	float K2Node_Event_DeltaTimeX;//[Offset: 0x668, Size: 0x4]
	SolarCharacter* K2Node_DynamicCast_AsSolar_Character;//[Offset: 0x670, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1]
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_TransitionResult_768665AB4918F96C9C3C8F92EF926EE4();// 0x9b97312cd041
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_TransitionResult_01B670704C4A0F8E519CD8A192C5E1D6();// 0x9b96312cd041
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_BlendListByBool_F136F87A4DDCD2678555C9B592100DA7();// 0x9b95312cd041
	void BlueprintUpdateAnimation(float bpp__DeltaTimeX__pf);// 0x9b94312cd041
	void BlueprintInitializeAnimation();// 0x9b93312cd041
	void BlueprintBeginPlay();// 0x9b92312cd041
	void AnimGraph(out PoseLink bpp__AnimGraph__pf);// 0xba003154d001

--------------------------------
Class: PoseLink.PoseLinkBase

--------------------------------
Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x10, Size: 0x10]
	FName Name;//[Offset: 0x20, Size: 0x8]
	FName Group;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNode_Base

--------------------------------
Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x30, Size: 0x8]
	float PlayRateBasis;//[Offset: 0x38, Size: 0x4]
	float PlayRate;//[Offset: 0x3c, Size: 0x4]
	InputScaleBiasClamp PlayRateScaleBiasClamp;//[Offset: 0x40, Size: 0x30]
	float StartPosition;//[Offset: 0x70, Size: 0x4]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]

--------------------------------
Class: AnimNode_AssetPlayerBase.AnimNode_Base
	int GroupIndex;//[Offset: 0x10, Size: 0x4]
	byte GroupRole;//[Offset: 0x14, Size: 0x1]
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	float BlendWeight;//[Offset: 0x18, Size: 0x4]
	float InternalTimeAccumulator;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: InputScaleBiasClamp
	bool bMapRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bInterpResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	InputRange InRange;//[Offset: 0x4, Size: 0x8]
	InputRange OutRange;//[Offset: 0xc, Size: 0x8]
	float Scale;//[Offset: 0x14, Size: 0x4]
	float Bias;//[Offset: 0x18, Size: 0x4]
	float ClampMin;//[Offset: 0x1c, Size: 0x4]
	float ClampMax;//[Offset: 0x20, Size: 0x4]
	float InterpSpeedIncreasing;//[Offset: 0x24, Size: 0x4]
	float InterpSpeedDecreasing;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InputRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AnimNode_StateResult.AnimNode_Root.AnimNode_Base

--------------------------------
Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x10, Size: 0x4]
	int MaxTransitionsPerFrame;//[Offset: 0x14, Size: 0x4]
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x10, Size: 0x10]
	FName SlotName;//[Offset: 0x20, Size: 0x8]
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x10, Size: 0x10]
	float[] BlendTime;//[Offset: 0x20, Size: 0x10]
	enum TransitionType;//[Offset: 0x30, Size: 0x1]
	enum BlendType;//[Offset: 0x31, Size: 0x1]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	CurveFloat* CustomBlendCurve;//[Offset: 0x38, Size: 0x8]
	BlendProfile* BlendProfile;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: Ability_RPG_BaseDamage_C.WeaponAbilityBase.SolarAbility.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3b0, Size: 0x8]
	void OnLoaded_F1E8D1D244089792BF00E29440E0F852(Object* Loaded);// 0x14d703154d008
	void ReceiveBeginPlay();// 0xffffff8a312cd002
	void ExecuteUbergraph_Ability_RPG_BaseDamage(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Object* K2Node_CustomEvent_Loaded, Object* Temp_object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue);// 0xffffff8a312cd002

--------------------------------
Class: WeaponAbilityBase.SolarAbility.Actor.Object
	HitResult HitResult;//[Offset: 0x308, Size: 0x88]
	bool bClientVaild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	bool bServerVaild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 0x1]
	bool bLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 0x1]
	float Lifetime;//[Offset: 0x394, Size: 0x4]
	Actor* TargetActor;//[Offset: 0x398, Size: 0x8]
	SolarWeapon* TargetWeapon;//[Offset: 0x3a4, Size: 0x8]
	bool HasLife();// 0x56ef312cd041

--------------------------------
Class: BP_SolarUnArmWeapon_C.SolarUnArmWeapon.Actor.Object

--------------------------------
Class: AirDropAudioActor.Actor.Object
	Vector DropBeginLocation;//[Offset: 0x228, Size: 0xc]
	Vector DropEndLocation;//[Offset: 0x234, Size: 0xc]
	float CurrZ;//[Offset: 0x240, Size: 0x4]
	bool bOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	Actor* SpawnedWarningEffect;//[Offset: 0x250, Size: 0x8]
	class Actor* WarningEffect;//[Offset: 0x258, Size: 0x8]
	int ThisID;//[Offset: 0x260, Size: 0x4]
	bool bSummonedByCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	FString SNameAirDropSpawnWarning;//[Offset: 0x270, Size: 0x10]
	FString SNameAirDropStopSpawnWarning;//[Offset: 0x280, Size: 0x10]
	FString SNameAirDropApprochWarning;//[Offset: 0x290, Size: 0x10]
	FString SNameAirDropStopApprochWarning;//[Offset: 0x2a0, Size: 0x10]
	AkComponent* AkAudioComponent;//[Offset: 0x2b0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x2b8, Size: 0x8]
	bool bHasLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	void OnAirDropTreasureBoxStateChanged(int ItemID, enum MovementState, enum OpenState);// 0x3c8f312cd041
	void OnAirDropApproch(int InThisID);// 0x3c8e312cd041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x3c8d312cd041

--------------------------------
Class: BP_SI_AirdropBox_Signal_C.AirDropAudioActor.Actor.Object
	StaticMeshComponent* FX_Tag_Glow_Up;//[Offset: 0x2c8, Size: 0x8]
	StaticMeshComponent* FX_Beam_Small;//[Offset: 0x2d0, Size: 0x8]
	ActorSequenceComponent* FX_AutoShow;//[Offset: 0x2d8, Size: 0x8]
	SceneComponent* FX_Prompt;//[Offset: 0x2e0, Size: 0x8]

--------------------------------
Class: ActorSequenceComponent.ActorComponent.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0xb0, Size: 0x14]
	ActorSequence* Sequence;//[Offset: 0xc8, Size: 0x8]
	ActorSequencePlayer* SequencePlayer;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: ActorSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	ActorSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x20]

--------------------------------
Class: ActorSequenceObjectReferenceMap
	Guid[] BindingIds;//[Offset: 0x0, Size: 0x10]
	ActorSequenceObjectReferences[] References;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ActorSequenceObjectReferences
	ActorSequenceObjectReference[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ActorSequenceObjectReference
	enum Type;//[Offset: 0x0, Size: 0x1]
	Guid ActorId;//[Offset: 0x4, Size: 0x10]
	FString PathToComponent;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ActorSequencePlayer.MovieSceneSequencePlayer.Object

--------------------------------
Class: BP_Rifle_B9A03_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	SolarSummonDetectionComponent* SolarSummonDetection;//[Offset: 0xf98, Size: 0x8]
	FString GetModuleName();// 0x1cbfe312cd041

--------------------------------
Class: BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf50, Size: 0x8]
	WeaponPartStaticMeshComponent* RedCrosshair;//[Offset: 0xf58, Size: 0x8]
	WeaponPartStaticMeshComponent* Crosshair;//[Offset: 0xf60, Size: 0x8]
	WeaponPartRunesComp* WeaponPartRunesComp;//[Offset: 0xf68, Size: 0x8]
	WeaponPartMuzzleComp* WeaponPartMuzzleComp;//[Offset: 0xf70, Size: 0x8]
	WeaponPartGripComp* WeaponPartGripComp;//[Offset: 0xf78, Size: 0x8]
	WeaponPartGunStockComp* WeaponPartGunStockComp;//[Offset: 0xf80, Size: 0x8]
	WeaponPartClipComp* WeaponPartClipComp;//[Offset: 0xf88, Size: 0x8]
	WeaponPartScopeComp* WeaponPartScopeComp;//[Offset: 0xf90, Size: 0x8]
	void ReceiveBeginPlay();// 0x111b2313069bc
	void K2_SwitchDrawDistance(bool Hold);// 0xffffff86312cd002
	void ExecuteUbergraph_BP_SolarPlayerWeapon(int EntryPoint, bool K2Node_Event_hold);// 0xffffff87312cd000

--------------------------------
Class: SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	WeaponPartsComponent* WeaponPartsComponent;//[Offset: 0xf48, Size: 0x8]
	bool QueryCanEquipPart(const enum Type, const int InWeaponID);// 0x4d65312cd041
	void PlayUpgradeEffect();// 0x4d64312cd041
	void InitLvAndPartsFromTable();// 0x4d63312cd041
	int GetPartIDByTypeAndLevel(const int InWeaponID, const enum Type, const int Level);// 0x4d62312cd041
	bool GetEquippedScopeTypeAndLevel(out enum Type, out int Level);// 0x4d61312cd041
	int GetEquippedPartLevel(const enum Type);// 0x4d60312cd041
	int GetDefaultPartIDByType(const int InWeaponID, const enum Type);// 0x4d5f312cd041
	void GameStatisticsWeaponAddExp(float newExp, float AddExp, int OldLevel, int NewLevel, int Reason);// 0x4d5e312cd041
	bool CanEquipPart(const enum Type);// 0x4d5d312cd041

--------------------------------
Class: GameLevelManager.GameManagerBase.Info.Actor.Object
	FString DesiredLoadLevel;//[Offset: 0x248, Size: 0x10]
	FString[] DesiredLoadElementLevels;//[Offset: 0x268, Size: 0x10]
	FString[] DesiredUnLoadElementLevels;//[Offset: 0x278, Size: 0x10]
	<FString,LevelStreamingDynamic*> LevelKeyToObject;//[Offset: 0x330, Size: 0x50]
	<SolarCharacter*> MovementDisabledCharacters;//[Offset: 0x380, Size: 0x50]
	FString[] LoadingElementLevelNames;//[Offset: 0x430, Size: 0x10]
	FString[] UnLoadingElementLevelNames;//[Offset: 0x440, Size: 0x10]
	GameMapElementManager* MapElementManager;//[Offset: 0x468, Size: 0x8]
	void SetMinimapFootprintVisible(bool bVisible);// 0x3ee6312cd041
	void OnStreamingLevelLoaded();// 0x3ee5312cd041
	void OnScoutPlayerDepart();// 0x3ee4312cd041
	void OnRep_DesiredUnLoadElementLevels();// 0x3ee3312cd041
	void OnRep_DesiredLoadLevel();// 0x3ee2312cd041
	void OnRep_DesiredLoadElementLevels();// 0x3ee1312cd041
	void OnLevelLoaded();// 0x3ee0312cd041
	void OnElementStreamingLevelUnLoaded();// 0x3edf312cd041
	void OnElementStreamingLevelLoaded();// 0x3ede312cd041
	void OnCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x3edd312cd041
	void LevelManagerTick();// 0x3edc312cd041
	int GetCurrentMapID();// 0x3edb312cd041
	FString GetCurrentLevel();// 0x3eda312cd041

--------------------------------
Class: GameMapElementManager.GameManagerBase.Info.Actor.Object
	<FString,SCMMapElementBase*> MapElementListWithID;//[Offset: 0x228, Size: 0x50]
	SCMMapElementBase*[] MapElementList;//[Offset: 0x278, Size: 0x10]
	SCMPlayerStart*[] PlayerStartList;//[Offset: 0x288, Size: 0x10]
	void OnAddNewMapElement(Actor* InNewActor);// 0x3ee7312cd041

--------------------------------
Class: SCMPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x254, Size: 0x4]
	FString Side;//[Offset: 0x258, Size: 0x10]
	FString Job;//[Offset: 0x268, Size: 0x10]
	FString ElementID;//[Offset: 0x278, Size: 0x10]
	enum Type;//[Offset: 0x288, Size: 0x1]
	enum State;//[Offset: 0x289, Size: 0x1]
	enum Visibility;//[Offset: 0x28a, Size: 0x1]
	FName ElementName;//[Offset: 0x28c, Size: 0x8]
	Vector[] PlayerLocations;//[Offset: 0x298, Size: 0x10]
	enum SetElementVisibility(const enum NewType);// 0x4288312cd041
	enum SetElementState(const enum NewState);// 0x4287312cd041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x4286312cd041
	void OnElementStateChanged(const enum CurrentState);// 0x4285312cd041

--------------------------------
Class: BP_GameState_TrainingMode_C.BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	FString GetModuleName();// 0x680087335fd003

--------------------------------
Class: BP_SETTFormula_BigEscape_C.SettlementFormula.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]
	int[] PersonalRankExpReward;//[Offset: 0x230, Size: 0x10]
	SettlementParam_ExtraRewardInfo RankReward;//[Offset: 0x240, Size: 0x40]
	SettlementParam_ExtraRewardInfo[] CommonRewards;//[Offset: 0x280, Size: 0x10]
	int WarmGame Account Exp;//[Offset: 0x290, Size: 0x4]
	float GetKDA(out const SettlementParam_KDA InParam, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x395fb312f0ad8
	void TEMP Is Player In NewPlayer Games(out bool Result, int CallFunc_GetWramGameType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xffffff86312cd002
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam, int Temp_int_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, int Temp_int_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, int K2Node_Select_Default, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, int Temp_int_Variable, bool Temp_bool_Variable, FString CallFunc_FormatRewardItem_ItemString, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo[] K2Node_MakeArray_Array);// 0x2dffb5315bd02e
	void MVPLifeTimeScore(float Life Time, out float LTMVPScore, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0xffffff87312cd000
	FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam, FString[] K2Node_MakeArray_Array);// 0x166223154d008
	static int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam, int[] FullPage, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, int[] K2Node_MakeArray_Array, int K2Node_Select_Default, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x2dffb5315bd02e
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_MVPLifeTimeScore_LTMVPScore, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0xffffff87312cd044
	int GetZomborg(out const SettlementParam_Zomborg InParam, int Result, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Round_ReturnValue);// 0xffffff87312cd000
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue);// 0xffffff87312cd000
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo, int CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xffffff87312cd000
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_TEMP_Is_Player_In_NewPlayer_Games_Result, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue);// 0x144db3154d008

--------------------------------
Class: BP_SolarItemRoot_C.SolarItemRootActor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]

--------------------------------
Class: BP_PlayerState_TrainingMode_C.BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xbc0, Size: 0x8]
	BPC_ChangeCharacterManager_TrainingMode_C* BPC_ChangeCharacterManager;//[Offset: 0xbc8, Size: 0x8]
	void SaveData(out <int,int> Items1, out <int,int> Weapons1, out <int,WeaponPartsData> WeaponParts1, Image* NewLocalVar, LinearColor NewLocalVar, Image* NewLocalVar, <int,WeaponPartsData> WeaponParts, <int,int> Weapons, <int,int> Items, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UIWeaponPartWidget*[] CallFunc_GetAllWidgetsOfClass_FoundWidgets, UIWeaponPartWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, WeaponPartsData K2Node_Copy_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int[] K2Node_MakeArray_Array, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByID_ItemData, bool CallFunc_GetBackpackItemDataByID_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable);// 0xffffffa1312cd002
	void ReceiveBeginPlay();// 0x3f7fff877046699a
	void ExecuteUbergraph_BP_PlayerState_TrainingMode(int EntryPoint);// 0x1fc003154d001

--------------------------------
Class: BPC_ChangeCharacterManager_TrainingMode_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	UI_TrainingMode_ChangeRole_Btn_C* ChangeRoleBtn;//[Offset: 0xb8, Size: 0x8]
	UI_TrainingMode_ChangeRole_Popup_C* ChangeRolePopup;//[Offset: 0xc0, Size: 0x8]
	bool Valid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool PlayerIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	bool Skill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 0x1]
	int CoolDown;//[Offset: 0xcc, Size: 0x4]
	<int,int> WeaponMap;//[Offset: 0xd0, Size: 0x50]
	static void GetWeaponPartId(int Key, out int ItemID, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_WeaponParts CallFunc_GetRowData_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xa6797593d5a49e86
	void LoadCharacterItems(SolarCharacter* Character, out const S_AiItem[] ItemList, BP_Character_TrainingMode_C* K2Node_DynamicCast_AsBP_Character_Training_Mode, bool K2Node_DynamicCast_bSuccess);// 0x311312cd002
	void SaveCharacterItems(SolarCharacter* Character, out S_AiItem[] ItemList11, S_AiItem[] ItemList, int Temp_int_Array_Index_Variable, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, S_AiItem K2Node_MakeStruct_S_AiItem, bool CallFunc_NotEqual_IntInt_ReturnValue, S_AiItem K2Node_MakeStruct_S_AiItem, bool CallFunc_NotEqual_IntInt_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, S_AiItem K2Node_MakeStruct_S_AiItem, bool CallFunc_NotEqual_IntInt_ReturnValue, S_AiItem K2Node_MakeStruct_S_AiItem, bool CallFunc_NotEqual_IntInt_ReturnValue, const int[] CallFunc_GetWeaponPartsArray_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, S_AiItem K2Node_MakeStruct_S_AiItem, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, int CallFunc_GetWeaponPartId_ItemId, int CallFunc_GetWeaponPartId_ItemId, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetWeaponPartId_ItemId, int CallFunc_GetWeaponPartId_ItemId, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetWeaponPartId_ItemId, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte Temp_byte_Variable, byte Temp_byte_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte Temp_byte_Variable, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int Temp_int_Variable, int Temp_int_Array_Index_Variable, S_AiItem CallFunc_Array_Get_Item, byte K2Node_Select_Default, S_AiItem K2Node_MakeStruct_S_AiItem, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, byte Temp_byte_Variable, int[] K2Node_MakeArray_Array, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByID_ItemData, bool CallFunc_GetBackpackItemDataByID_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte Temp_byte_Variable, S_AiItem K2Node_MakeStruct_S_AiItem, int CallFunc_Array_Add_ReturnValue, byte Temp_byte_Variable, int Temp_int_Variable, byte K2Node_Select_Default, S_AiItem K2Node_MakeStruct_S_AiItem, S_AiItem K2Node_MakeStruct_S_AiItem, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, S_AiItem K2Node_MakeStruct_S_AiItem, S_AiItem K2Node_MakeStruct_S_AiItem, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, S_AiItem K2Node_MakeStruct_S_AiItem, int CallFunc_Array_Add_ReturnValue);// 0xffffffff7f4bb0e0
	void ChangeBtnVisibility(UI_TrainingMode_ChangeRole_Btn_C* CallFunc_GetChangeRoleBtn_ChangeRoleBtn, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_BooleanXOR_ReturnValue);// 0xffffff87312cd044
	void GetChangeRolePopup(out UI_TrainingMode_ChangeRole_Popup_C* ChangeRolePopup, UserWidget* CallFunc_CreateSolarWidget_ReturnValue, UI_TrainingMode_ChangeRole_Popup_C* K2Node_DynamicCast_AsUI_Training_Mode_Change_Role_Popup, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x14057db0
	void GetChangeRoleBtn(out UI_TrainingMode_ChangeRole_Btn_C* ChangeRoleBtn, UserWidget* CallFunc__c_CreateWidget_WidgetObject, UI_TrainingMode_ChangeRole_Btn_C* K2Node_DynamicCast_AsUI_Training_Mode_Change_Role_Btn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x27f04d80
	void ReceiveBeginPlay();// 0x5fa312cd002
	void ReceiveTick(float DeltaSeconds);// 0xffffffffa3c7b2c0
	void [S]ChangeCharacter(int CharacterId);// 0xffffffff7eedca00
	void [C]SetChangeRoleBtnVisibility(bool Visibility);// 0xffffff97312cd00e
	void [C]SetChangeRolePopupVisibility(bool Visibility);// 0xffffffffae0e4d40
	void ChangeCharacterCoolDown();// 0xffffffffc575cb00
	void [C]DisableBtn();// 0x440312cd002
	static void ExecuteUbergraph_BPC_ChangeCharacterManager_TrainingMode(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, int K2Node_CustomEvent_CharacterID, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, BP_Logic_TrainingMode_C* K2Node_DynamicCast_AsBP_Logic_Training_Mode, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, bool K2Node_CustomEvent_Visibility, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, S_AiItem[] CallFunc_SaveCharacterItems_ItemList11, bool K2Node_CustomEvent_Visibility, UI_TrainingMode_ChangeRole_Popup_C* CallFunc_GetChangeRolePopup_ChangeRolePopup, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, float CallFunc_Conv_IntToFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int[] CallFunc_GetRowKeys_OutKeys, int CallFunc_GetRowKeys_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, const SolarTablesData_GunProperty CallFunc_GetRowData_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x14057ed0

--------------------------------
Class: UI_TrainingMode_ChangeRole_Btn_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8]
	SolarButton* Btn_ChangeRole;//[Offset: 0x348, Size: 0x8]
	SolarAdapterWidget* Panel_BattleUI_Map_KeyMapping;//[Offset: 0x350, Size: 0x8]
	FString GetModuleName();// 0xfffffffedcd3a440
	void GetChangeRoleManager(out BPC_ChangeCharacterManager_TrainingMode_C* ChangeCharacterManager, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, BP_PlayerState_TrainingMode_C* K2Node_DynamicCast_AsBP_Player_State_Training_Mode, bool K2Node_DynamicCast_bSuccess);// 0x19cb2312cd000
	void BndEvt__Btn_ChangeRole_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xaf9718866af13a9d
	void OnKeyPressed();// 0x7e13312cd041
	void OnShow();// 0xffffffff7f479d40
	void OnHide();// 0x9ec312cd002
	void OnBackKey(enum BackKeyType);// 0x393cd312eb620
	void ExecuteUbergraph_UI_TrainingMode_ChangeRole_Btn(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, BPC_ChangeCharacterManager_TrainingMode_C* CallFunc_GetChangeRoleManager_ChangeCharacterManager, BPC_ChangeCharacterManager_TrainingMode_C* CallFunc_GetChangeRoleManager_ChangeCharacterManager, UI_TrainingMode_ChangeRole_Popup_C* CallFunc_GetChangeRolePopup_ChangeRolePopup, UI_TrainingMode_ChangeRole_Btn_C* CallFunc_GetChangeRoleBtn_ChangeRoleBtn, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BPC_ChangeCharacterManager_TrainingMode_C* CallFunc_GetChangeRoleManager_ChangeCharacterManager, enum K2Node_Event_BackKeyType);// 0xffffffff06697420

--------------------------------
Class: UI_TrainingMode_ChangeRole_Popup_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8]
	WidgetAnimation* Enter_Anim;//[Offset: 0x348, Size: 0x8]
	UI_Component_Btn_C* Btn_Main;//[Offset: 0x350, Size: 0x8]
	TileView* RoleList;//[Offset: 0x358, Size: 0x8]
	UI_Component_Popup_C* UI_Component_Popup;//[Offset: 0x360, Size: 0x8]
	BP_ChangeRoleListItem_C* Selected;//[Offset: 0x368, Size: 0x8]
	static void LoadData(int[] TempCharacterID, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarCharacter* CallFunc__C_GetLocalCharacter_ReturnValue, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, CFG_TrainingMode_C* K2Node_DynamicCast_AsCFG_Training_Mode, bool K2Node_DynamicCast_bSuccess, BP_ChangeRoleListItem_C* CallFunc_SpawnObject_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, S_ChangeRole CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0xffffffff027aba70
	void PreConstruct(bool IsDesignTime);// 0xffffff87312cd000
	void BndEvt__Btn_Main_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature();// 0xffffffff388de820
	void BndEvt__RoleList_K2Node_ComponentBoundEvent_1_OnListItemSelectionChangedDynamic__DelegateSignature(Object* Item, bool bIsSelected);// 0xffffff87312cd000
	void OnShow();// 0x88ec312d5845
	void OnHide();// 0x1abe23154d008
	void OnCloseKeyPressed();// 0xffffff87312cd000
	void BndEvt__UI_Component_Popup_K2Node_ComponentBoundEvent_5_OnClickedBtnClose__DelegateSignature();// 0xffffffffa44b7010
	void ExecuteUbergraph_UI_TrainingMode_ChangeRole_Popup(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime, SolarCharacter* CallFunc__C_GetLocalCharacter_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, BP_PlayerState_TrainingMode_C* K2Node_DynamicCast_AsBP_Player_State_Training_Mode, bool K2Node_DynamicCast_bSuccess, Object* CallFunc_BP_GetSelectedItem_ReturnValue, BP_ChangeRoleListItem_C* K2Node_DynamicCast_AsBP_Change_Role_List_Item, bool K2Node_DynamicCast_bSuccess, Object* K2Node_ComponentBoundEvent_Item, bool K2Node_ComponentBoundEvent_bIsSelected, BP_ChangeRoleListItem_C* K2Node_DynamicCast_AsBP_Change_Role_List_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_IntInt_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, BP_PlayerState_TrainingMode_C* K2Node_DynamicCast_AsBP_Player_State_Training_Mode, bool K2Node_DynamicCast_bSuccess);// 0xffffff8a312cd002

--------------------------------
Class: UI_Component_Popup_C.SolarPanelWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x390, Size: 0x8]
	WidgetAnimation* Anim_Exit;//[Offset: 0x398, Size: 0x8]
	WidgetAnimation* BG_Light_Anim;//[Offset: 0x3a0, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x3a8, Size: 0x8]
	BackgroundBlur* BlurBG;//[Offset: 0x3b0, Size: 0x8]
	UI_Component_Close_C* Btn_Close;//[Offset: 0x3b8, Size: 0x8]
	Button* Btn_Close_Mask;//[Offset: 0x3c0, Size: 0x8]
	SolarButton* Btn_Continue;//[Offset: 0x3c8, Size: 0x8]
	UI_Component_Btn_C* Btn_Main;//[Offset: 0x3d0, Size: 0x8]
	UI_Component_Btn_C* Btn_Sec;//[Offset: 0x3d8, Size: 0x8]
	SolarButton* Btn_Tip;//[Offset: 0x3e0, Size: 0x8]
	NamedSlot* Content;//[Offset: 0x3e8, Size: 0x8]
	Image* Img_Btn1;//[Offset: 0x3f0, Size: 0x8]
	Image* Img_Btn2;//[Offset: 0x3f8, Size: 0x8]
	SizeBox* Main;//[Offset: 0x400, Size: 0x8]
	CanvasPanel* Panel_BG;//[Offset: 0x408, Size: 0x8]
	CanvasPanel* Panel_BG_VX;//[Offset: 0x410, Size: 0x8]
	CanvasPanel* Panel_Continue;//[Offset: 0x418, Size: 0x8]
	SizeBox* Sec;//[Offset: 0x420, Size: 0x8]
	SolarTextBlock* Txt_Btn_Main;//[Offset: 0x428, Size: 0x8]
	SolarTextBlock* Txt_Btn_Sec;//[Offset: 0x430, Size: 0x8]
	SolarTextBlock* Txt_Continue;//[Offset: 0x438, Size: 0x8]
	SolarTextBlock* Txt_Title;//[Offset: 0x440, Size: 0x8]
	int Top;//[Offset: 0x448, Size: 0x4]
	int Bottom;//[Offset: 0x44c, Size: 0x4]
	FString 标题文本                                                                                        ;//[Offset: 0x450, Size: 0x10]
	bool 是否使用本地化ID                                                                             ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 0x1]
	int 标题本地化ID                                                                                   ;//[Offset: 0x464, Size: 0x4]
	int 按钮宽度                                                                                        ;//[Offset: 0x468, Size: 0x4]
	bool FirstButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 0x1]
	byte 主按钮状态                                                                                     ;//[Offset: 0x46d, Size: 0x1]
	FString 主按钮文本                                                                                     ;//[Offset: 0x470, Size: 0x10]
	int 主按钮本地化ID                                                                                ;//[Offset: 0x480, Size: 0x4]
	bool SecondButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1]
	byte 副按钮状态                                                                                     ;//[Offset: 0x485, Size: 0x1]
	FString 副按钮文本                                                                                     ;//[Offset: 0x488, Size: 0x10]
	int 副按钮本地化ID                                                                                ;//[Offset: 0x498, Size: 0x4]
	bool 是否使用关闭按钮                                                                            ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	delegate OnClickedBtnClose;//[Offset: 0x4a0, Size: 0x10]
	delegate OnClickedBtnFrist;//[Offset: 0x4b0, Size: 0x10]
	delegate OnClickedBtnSecond;//[Offset: 0x4c0, Size: 0x10]
	bool 是否使用继续按钮                                                                            ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
	bool Btn_Icon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 0x1]
	Object* Icon;//[Offset: 0x4d8, Size: 0x8]
	Vector2D Icon_Size;//[Offset: 0x4e0, Size: 0x8]
	LinearColor Icon_Color;//[Offset: 0x4e8, Size: 0x10]
	bool Btn_Icon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	Object* Icon;//[Offset: 0x500, Size: 0x8]
	Vector2D Icon_Size;//[Offset: 0x508, Size: 0x8]
	LinearColor Icon_Color;//[Offset: 0x510, Size: 0x10]
	bool Tip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 0x1]
	delegate OnClickedBtnTip;//[Offset: 0x528, Size: 0x10]
	void SetMainBtnState(byte NewState);// 0x1b3e53154d008
	void SetTitle(FString NewParam, FText CallFunc_Conv_StringToText_ReturnValue);// 0xc1e63154d001
	void PreConstruct(bool IsDesignTime);// 0xbc23312cd041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2302c3154d001
	void ChangePopupState();// 0xffffffb1312cd000
	void Construct();// 0x230383154d001
	void BndEvt__Btn_Sec_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0xffffff87312cd044
	void BndEvt__Btn_Main_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x231583154d001
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x230443154d001
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature();// 0xd5b63154d008
	void BndEvt__Btn_Tip_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0xffffffe9312cd062
	void ExecuteUbergraph_UI_Component_Popup(int EntryPoint, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, Margin K2Node_MakeStruct_Margin, FString CallFunc_________ReturnValue, FString K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, FString CallFunc_________ReturnValue, FString CallFunc_________ReturnValue, FString K2Node_Select_Default, FString K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, enum K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, enum K2Node_Select_Default);// 0xd96c312cd041
	void OnClickedBtnTip__DelegateSignature();// 0xae9d312cd041
	void OnClickedBtnSecond__DelegateSignature();// 0xa1de3154d001
	void OnClickedBtnFrist__DelegateSignature();// 0xffffff87312cd000
	void OnClickedBtnClose__DelegateSignature();// 0x14a2f3154d001

--------------------------------
Class: SolarPanelWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasPanel_Bg;//[Offset: 0x340, Size: 0x8]
	CanvasPanel* CanvasPanel_Content;//[Offset: 0x348, Size: 0x8]
	delegate AnimationEnterStartedEvent;//[Offset: 0x350, Size: 0x10]
	delegate AnimationEnterFinishedEvent;//[Offset: 0x360, Size: 0x10]
	delegate AnimationExitStartedEvent;//[Offset: 0x370, Size: 0x10]
	delegate AnimationExitFinishedEvent;//[Offset: 0x380, Size: 0x10]
	void OnAnimationExitStarted();// 0x407f312cd041
	void OnAnimationExitFinished();// 0x407e312cd041
	void OnAnimationEnterStarted();// 0x407d312cd041
	void OnAnimationEnterFinished();// 0x407c312cd041

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x14c, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x15c, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x15d, Size: 0x1]
	bool bBlurOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e, Size: 0x1]
	bool bBlurState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15f, Size: 0x1]
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	float BlurStrength;//[Offset: 0x164, Size: 0x4]
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	int BlurRadius;//[Offset: 0x16c, Size: 0x4]
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x170, Size: 0x98]
	void StopOnFirstBlur();// 0x595f312cd041
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x595e312cd041
	void SetPadding(Margin InPadding);// 0x595d312cd041
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x595c312cd041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x595b312cd041
	void SetBlurStrength(float InStrength);// 0x595a312cd041
	void SetBlurState(bool BlurState, bool RefreshCount);// 0x5959312cd041
	void SetBlurRadius(int InBlurRadius);// 0x5958312cd041
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x5957312cd041

--------------------------------
Class: UI_Component_Close_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8]
	SolarButton* Btn_Close;//[Offset: 0x348, Size: 0x8]
	Image* Img_Close_Nml;//[Offset: 0x350, Size: 0x8]
	delegate OnClicked;//[Offset: 0x358, Size: 0x10]
	bool Black;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	delegate OnPressed;//[Offset: 0x370, Size: 0x10]
	bool White;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	Vector2D Icon_Size;//[Offset: 0x384, Size: 0x8]
	FString GetModuleName();// 0xa13f3154d001
	void PreConstruct(bool IsDesignTime);// 0xa13e3154d001
	void Construct();// 0xa13d3154d001
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xa13c3154d001
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0xa13b3154d001
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0xa13a3154d001
	void BndEvt__Btn_Close_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();// 0xa1393154d001
	void ExecuteUbergraph_UI_Component_Close(int EntryPoint, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool K2Node_Event_IsDesignTime, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default);// 0xa14c3154d001
	void OnPressed__DelegateSignature();// 0xb0f53154d001
	void OnClicked__DelegateSignature();// 0x4b6cd2b75145d000

--------------------------------
Class: BP_ChangeRoleListItem_C.Object
	S_ChangeRole Character;//[Offset: 0x28, Size: 0x18]
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: S_ChangeRole
	int ID_5_6E7D423247436E7B02E28FAE8A23E69E;//[Offset: 0x0, Size: 0x4]
	Texture* CharacterIcon_2_C75D3BF94C715B1B53478A9C29095906;//[Offset: 0x8, Size: 0x8]
	bool Show_9_7E4B1EB44205C72F1029799E5E6FC5A7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: CFG_TrainingMode_C.CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	DataTable* ValidCharacter;//[Offset: 0x1e0, Size: 0x8]

--------------------------------
Class: SolarAdapterWidget.ContentWidget.PanelWidget.Widget.Visual.Object
	enum WidgetLoadType;//[Offset: 0x149, Size: 0x1]
	SoftClassPath MobileWidgetPath;//[Offset: 0x150, Size: 0x18]
	SoftClassPath DesktopWidgetPath;//[Offset: 0x168, Size: 0x18]
	WidgetOverrideParam[] OverrideParamList;//[Offset: 0x180, Size: 0x10]
	SoftClassPath CurWidgetPath;//[Offset: 0x190, Size: 0x18]
	UserWidget* AdapteeWidget;//[Offset: 0x1a8, Size: 0x8]
	void RefreshUIByOverrideParams(out const WidgetOverrideParam[] WidgetOverrideParams);// 0x443a312cd041
	void LoadUserWidgetResource();// 0x4439312cd041
	UserWidget* GetAdapteeWidget();// 0x4438312cd041

--------------------------------
Class: WidgetOverrideParam
	enum Type;//[Offset: 0x0, Size: 0x1]
	FName ChildName;//[Offset: 0x4, Size: 0x8]
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	FText Text;//[Offset: 0x10, Size: 0x18]
	int LocTextID;//[Offset: 0x28, Size: 0x4]
	SlateBrush Brush;//[Offset: 0x30, Size: 0x98]
	FString CustomParameter;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: BP_Logic_TrainingMode_C.BP_Logic_Framework_C.CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1a0, Size: 0x8]
	void FindSpawn(out SolarPlayerStart*[] Spawn, SolarPlayerStart*[] CallFunc_GetAllActorsOfClass_OutActors);// 0x1db312cd002
	static void PlayerPositionReporting(const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, int Temp_int_Loop_Counter_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_Concat_StrStr_ReturnValue);// 0x22faf3154d001
	void ReceiveBeginPlay();// 0xffffff8a312cd002
	void ReceiveGameModeInit();// 0x1d7263154d001
	void LogPlayerPosition();// 0xbbf7312cd041
	void SetLifeSpan(Actor* SpawnedVehicle);// 0xbc04312cd041
	void StopDestroyVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x1f527312cd041
	void DestroyVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0xdc11312cd041
	void ReceiveBattleBegin();// 0x1f59f3154d008
	void ReceivePlayerJoin(SCMPlayerState* NewPlayer, bool IsAI);// 0xffffff87312cd044
	void PreSettle(SCMPlayerState* Player, enum OutType);// 0xd0fa3154d001
	void PlayerChangeCharacter(SCMPlayerState* Player, int CharacterId);// 0xc1e13154d001
	void ExecuteUbergraph_BP_Logic_TrainingMode(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, const enum[] Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, const FString[] Temp_string_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, const FString[] Temp_string_Variable, int CallFunc_Array_Length_ReturnValue, const FString[] Temp_string_Variable, bool CallFunc_SetDataInt_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, const enum[] Temp_byte_Variable, int CallFunc_Array_Length_ReturnValue, const FString[] Temp_string_Variable, bool CallFunc_SetDataInt_ReturnValue, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, const FString[] Temp_string_Variable, int CallFunc_Array_Length_ReturnValue, const FString[] Temp_string_Variable, bool CallFunc_SetDataInt_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_Character_TrainingMode_C* K2Node_DynamicCast_AsBP_Character_Training_Mode, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, Actor* K2Node_CustomEvent_SpawnedVehicle, int K2Node_CustomEvent_GetOnSeatIndex, SolarCharacter* K2Node_CustomEvent_GetOnPlayer, SolarVehiclePawn* K2Node_DynamicCast_AsSolar_Vehicle_Pawn, bool K2Node_DynamicCast_bSuccess, BP_Character_TrainingMode_C* K2Node_DynamicCast_AsBP_Character_Training_Mode, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_SetDataBool_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int K2Node_CustomEvent_GetOffSeatIndex, SolarCharacter* K2Node_CustomEvent_GetOffPlayer, BP_Character_TrainingMode_C* K2Node_DynamicCast_AsBP_Character_Training_Mode, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetPassengerCount_ReturnValue, SolarPlayerStart*[] CallFunc_FindSpawn_Spawn, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, SolarPlayerStart* CallFunc_Array_Get_Item, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_IsAI, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int Temp_int_Loop_Counter_Variable, SCMPlayerState* K2Node_Event_player, enum K2Node_Event_OutType, SCMPlayerState*[] K2Node_MakeArray_Array, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Add_IntInt_ReturnValue, SCMPlayerState* K2Node_CustomEvent_Player, int K2Node_CustomEvent_CharacterID, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_GetCurrentSkinForCharacter_bCharacterUsable, int CallFunc_GetCurrentSkinForCharacter_OutSkinId, const SolarTablesData_UnitCharacter CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, int K2Node_Select_Default, SolarVehicleSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_ChangePlayerCharacter_ReturnValue);// 0xe86b3154d001

--------------------------------
Class: UIWeaponPartWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* Img_Icon;//[Offset: 0x340, Size: 0x8]
	Image* Img_LevelBg;//[Offset: 0x348, Size: 0x8]
	Image* Img_PartsBg;//[Offset: 0x350, Size: 0x8]
	SizeBox* WidgetSize;//[Offset: 0x358, Size: 0x8]
	class UserWidget* DragDropWidgetClass;//[Offset: 0x360, Size: 0x8]
	LinearColor ColorNotEquip;//[Offset: 0x368, Size: 0x10]
	LinearColor ColorDisable;//[Offset: 0x378, Size: 0x10]
	LinearColor ColorNormal;//[Offset: 0x388, Size: 0x10]
	LinearColor ColorQuality;//[Offset: 0x398, Size: 0x10]
	int ItemID;//[Offset: 0x3a8, Size: 0x4]
	int ItemNum;//[Offset: 0x3ac, Size: 0x4]
	enum ItemType;//[Offset: 0x3b0, Size: 0x4]
	FString ItemName;//[Offset: 0x3b8, Size: 0x10]
	int WeaponSlot;//[Offset: 0x3c8, Size: 0x4]
	enum WeaponPartType;//[Offset: 0x3cc, Size: 0x1]
	int WeaponPartLevel;//[Offset: 0x3d0, Size: 0x4]
	enum EquippedPartType;//[Offset: 0x3d4, Size: 0x1]
	enum CurrentState;//[Offset: 0x3d5, Size: 0x1]
	bool bIsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d6, Size: 0x1]
	bool bUseHUDIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d7, Size: 0x1]
	Vector2D OffsetVec;//[Offset: 0x3d8, Size: 0x8]
	<int,FString> DefaultWeaponPartIconMaps;//[Offset: 0x3e0, Size: 0x50]
	FString WeaponPartPrePath;//[Offset: 0x430, Size: 0x10]
	bool bApplyToWeaponSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	LinearColor PartBGDefaultColor;//[Offset: 0x444, Size: 0x10]
	void UpdateWidgetByEnable(const bool InIsable);// 0x56ce312cd041
	void SetWidgetSize(out const Vector2D InSize);// 0x56cd312cd041
	void SetWeaponSlot(const int InWeaponSlot);// 0x56cc312cd041
	void SetWeaponPartData(const int InID, const int InNumber);// 0x56cb312cd041
	void SetIsEnable(const bool InIsable);// 0x56ca312cd041
	void SetBrushFromTexture(Texture2D* InTextureAsset, const bool InMatchSize);// 0x56c9312cd041
	void InitDefaultWeaponPart(const enum InWeaponPartType, const bool InUseHUDIcon);// 0x56c8312cd041
	void ClearWeaponPartData();// 0x56c7312cd041

--------------------------------
Class: BP_PBags_MC_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object

--------------------------------
Class: BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	MaterialInstanceDynamic* TryCreateDynamicMaterialInstance(PrimitiveComponent* Component, int ElementIndex, MaterialInterface* SourceMaterial, FName OptionlName, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xfffffffee6a3f230
	void FX_Idle();// 0x1bf693154d001
	void FX_Flying();// 0xffffff87312cd000
	void FX_Charging();// 0x1929b312cd041
	void FX_LowPower();// 0x1be693154d008
	void FX_Default(bool CallFunc_IsFly_ReturnValue);// 0xffffffff08b45580

--------------------------------
Class: ChaGCBP_TeamPerspective_LocalPlayer_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a8, Size: 0x8]

--------------------------------
Class: ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	CueContent[] CueContents;//[Offset: 0x298, Size: 0x10]
	bool WhileActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x3e46312cd041
	bool OnRemoveInternal(SolarCharacter* NullableCharacter, out const GameplayCueParameters Parameters);// 0x3e45312cd041
	void OnLocalPlayerSpectateMeStatusChanged(SolarCharacter* Character, bool bIsSpectating);// 0x3e44312cd041
	bool OnExecuteInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x3e43312cd041
	bool OnActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x3e42312cd041
	bool ListenLocalPlayerSpectateMeStatus();// 0x3e41312cd041

--------------------------------
Class: GameplayCueNotify_Actor.Actor.Object
	bool bAutoDestroyOnRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	float AutoDestroyDelay;//[Offset: 0x22c, Size: 0x4]
	bool WarnIfTimelineIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool WarnIfLatentActionIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	GameplayTag GameplayCueTag;//[Offset: 0x234, Size: 0x8]
	GameplayTagReferenceHelper ReferenceHelper;//[Offset: 0x240, Size: 0x10]
	FName GameplayCueName;//[Offset: 0x250, Size: 0x8]
	bool bAutoAttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool IsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	bool bUniqueInstancePerInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 0x1]
	bool bUniqueInstancePerSourceObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 0x1]
	bool bAllowMultipleOnActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	bool bAllowMultipleWhileActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	int NumPreallocatedInstances;//[Offset: 0x260, Size: 0x4]
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x3556312cd041
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x3555312cd041
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x3554312cd041
	bool OnExecute(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x3553312cd041
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x3552312cd041
	void K2_HandleGameplayCue(Actor* MyTarget, byte EventType, out const GameplayCueParameters Parameters);// 0x3551312cd041
	void K2_EndGameplayCue();// 0x3550312cd041

--------------------------------
Class: CueContent
	enum PlayTiming;//[Offset: 0x0, Size: 0x1]
	byte VisibleTargetFlag;//[Offset: 0x1, Size: 0x1]
	GameplayTagRequirements PlayTagRequirements;//[Offset: 0x8, Size: 0x50]
	ActorEffectContent[] ActorEffectContents;//[Offset: 0x58, Size: 0x10]
	BuffEffectContent[] BuffEffectContents;//[Offset: 0x68, Size: 0x10]
	SoundContent[] SoundContents;//[Offset: 0x78, Size: 0x10]
	ParticleSystemContent[] ParticleSystemContents;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ActorEffectContent
	class ActorEffect* ActorEffectClass;//[Offset: 0x0, Size: 0x8]
	enum AffectedActorType;//[Offset: 0x8, Size: 0x1]
	bool bHideFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	GameplayTag VisibilityFlagTag;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: BuffEffectContent
	FName BuffEffectID;//[Offset: 0x0, Size: 0x8]
	bool bStopOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundContent
	FName SoundGroupName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ParticleSystemContent
	ActorParticleEffectSpawnInfo SpawnInfo;//[Offset: 0x0, Size: 0x70]
	bool bStopOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: ActorParticleEffectSpawnInfo
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 0x28]
	enum AttachOption;//[Offset: 0x28, Size: 0x1]
	FName AttachPointName;//[Offset: 0x2c, Size: 0x8]
	byte LocationType;//[Offset: 0x34, Size: 0x1]
	Vector Location;//[Offset: 0x38, Size: 0xc]
	Rotator Rotation;//[Offset: 0x44, Size: 0xc]
	Vector Scale;//[Offset: 0x50, Size: 0xc]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	bool bEnablePooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 0x1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: GameplayTagReferenceHelper

--------------------------------
Class: ChaGCBP_TeamPerspective_Teammate_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a8, Size: 0x8]

--------------------------------
Class: BP_PBags_PQD_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object

--------------------------------
Class: BP_PBagsTrail_Common_C.SolarBackpackSFX.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_Trail;//[Offset: 0x288, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_DropSlowDown;//[Offset: 0x290, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_SkyDivingLanding;//[Offset: 0x298, Size: 0x8]
	SceneComponent* VFX;//[Offset: 0x2a0, Size: 0x8]
	float TrailFade_Size_581709C845BD673DB0841C82710F99F1;//[Offset: 0x2a8, Size: 0x4]
	byte TrailFade__Direction_581709C845BD673DB0841C82710F99F1;//[Offset: 0x2ac, Size: 0x1]
	TimelineComponent* TrailFade;//[Offset: 0x2b0, Size: 0x8]
	void UpdateTrailParticle(ParticleSystem* SoftObjectRef, ParticleSystem* TargetTemplate, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0xffffffff5bea4be0
	ParticleSystemComponent* GetTrailEffectComponent();// 0x1aafc3154d008
	void FX_FinishDeactive();// 0xb739312cd041
	void FX_JetType(byte Selection, bool Condition, bool K2Node_SwitchEnum_CmpSuccess);// 0xb7463154d001
	void FX_MainJetBig(bool Condition);// 0xc62f3154d001
	void FX_SkyDivingLanding();// 0xffffff87312cd044
	void FX_DropSlowDown();// 0xc5c33154d001
	void FX_MainJetSmall();// 0xffffff87312cd000
	void FX_GroundSmoke(bool Condition, Vector Location, out const Vector Z, Rotator CallFunc_MakeRotFromZ_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue);// 0xc65d3154d001
	void FX_InitializeDeactive();// 0xffffffb8312cd000
	void TrailFade__FinishedFunc();// 0xb7443154d001
	void TrailFade__UpdateFunc();// 0xffffff87312cd013
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0x14f5e312cd000
	void BackpackSFXEnd();// 0x1838b3154d008
	void OnBackpackTrailAssembling(out const BackpackTrailAssemblingParams Params, enum PropellingMode);// 0x1397a3154d008
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal);// 0x6800873362d003
	void ExecuteUbergraph_BP_PBagsTrail_Common(int EntryPoint, bool K2Node_Event_GroundDetected, const Vector K2Node_Event_GroundLocation, const Vector K2Node_Event_GroundNormal, byte K2Node_Event_InJetType, bool K2Node_Event_GroundDetected, bool CallFunc_IsActive_ReturnValue, const BackpackTrailAssemblingParams K2Node_Event_Params, enum K2Node_Event_PropellingMode);// 0xffffffff019a87a0

--------------------------------
Class: BackpackTrailAssemblingParams.TableRowBase
	ParticleSystem* TrailParticle;//[Offset: 0x8, Size: 0x28]
	ParticleSystem* OffgasParticle;//[Offset: 0x30, Size: 0x28]

--------------------------------
Class: BP_PBagsOffgas_Common_C.SolarBackpackSFX.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_MainJet;//[Offset: 0x288, Size: 0x8]
	SceneComponent* VFX;//[Offset: 0x290, Size: 0x8]
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0xa1c69348312cd414
	void BackpackSFXEnd();// 0x2665fb80
	void OnBackpackTrailAssembling(out const BackpackTrailAssemblingParams Params, enum PropellingMode);// 0x2665d4c0
	static void ExecuteUbergraph_BP_PBagsOffgas_Common(int EntryPoint, byte K2Node_Event_InJetType, bool K2Node_Event_GroundDetected, const BackpackTrailAssemblingParams K2Node_Event_Params, enum K2Node_Event_PropellingMode, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x2665f000

--------------------------------
Class: BP_VH_Legged_WL09_C.SolarLeggedVehicle.SolarVehiclePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x14f0, Size: 0x8]
	SphereComponent* BlockForVehicle;//[Offset: 0x14f8, Size: 0x8]
	float MinCameraShakeSpeed;//[Offset: 0x1500, Size: 0x4]
	float MinScreenEffectSpeed;//[Offset: 0x1504, Size: 0x4]
	CurveFloat* CameraShakeCurve;//[Offset: 0x1508, Size: 0x8]
	CurveFloat* ScreenEffectOpacityCurve;//[Offset: 0x1510, Size: 0x8]
	CurveFloat* ScreenEffectPlayRateCurve;//[Offset: 0x1518, Size: 0x8]
	class CameraShake* SpeedVehicleCameraShake;//[Offset: 0x1520, Size: 0x8]
	CameraShake* SpeedVehicleCameraShakeModifier;//[Offset: 0x1528, Size: 0x8]
	FX_Widget_VehicleSpeedLine_C* SpeedScreenEffectWidget;//[Offset: 0x1530, Size: 0x8]
	static void IsLocalPlayerOnVehicleOrSpectated(out bool bLocalPlayerOnVehicleOrSpectated, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, VehicleSeatSlot CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsLocalPlayerSpectatingMe_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xffffff87312cd044
	void ReceiveTick(float DeltaSeconds);// 0x1cbf73154d001
	void ExecuteUbergraph_BP_VH_Legged_WL09(int EntryPoint, float K2Node_Event_DeltaSeconds, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GetCameraShakeGlobalSetting_bUseCameraShake, bool CallFunc_IsInViewport_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, CameraShake* CallFunc_PlayCameraShake_ReturnValue, bool CallFunc_IsLocalPlayerOnVehicleOrSpectated_bLocalPlayerOnVehicleOrSpectated, float CallFunc_GetSpeedInKmh_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FX_Widget_VehicleSpeedLine_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x104f93154d001

--------------------------------
Class: SolarLeggedVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SolarLeggedVehicleMovement* LeggedVehicleMovement;//[Offset: 0x14a8, Size: 0x8]
	CapsuleComponent* VehicleCapsule;//[Offset: 0x14b0, Size: 0x8]
	PrimitiveComponent* BlockForVehicleComp;//[Offset: 0x14b8, Size: 0x8]
	float BlockForVehicleCollisionDelay;//[Offset: 0x14c0, Size: 0x4]
	bool bReplicatedRequestJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d0, Size: 0x1]
	Vector_NetQuantize[] InitialFootIkLocations;//[Offset: 0x14d8, Size: 0x10]
	float StandOnVehicleRadiusMultiplier;//[Offset: 0x14e8, Size: 0x4]
	void OnStandOnVehicle(bool bOnVehicle);// 0x4510312cd041
	void OnRep_ReplicatedJumpRequest();// 0x450f312cd041
	void OnRep_InitialFootIkLocations();// 0x450e312cd041

--------------------------------
Class: FX_Widget_VehicleSpeedLine_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* Left;//[Offset: 0x268, Size: 0x8]
	Image* Right;//[Offset: 0x270, Size: 0x8]
	FString GetModuleName();// 0xffffff97312cd00f
	void GetCameraShakeGlobalSetting(out bool bUseCameraShake);// 0xffffff88312cd002
	void SetOpacityParameter(FName Paeameter, float Value, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, LinearColor CallFunc_K2_GetVectorParameterValue_ReturnValue, LinearColor CallFunc_K2_GetVectorParameterValue_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, LinearColor K2Node_MakeStruct_LinearColor);// 0x1cbd13154d001
	void Set Play Rate Parameter(FName ParameterName, float Value, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0xd6d1312cd000
	void Construct();// 0xffffffff312cd044
	void ExecuteUbergraph_FX_Widget_VehicleSpeedLine(int EntryPoint);// 0xffffff87312cd000

--------------------------------
Class: SolarLeggedVehicleMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float LandingSweepTraceDistance;//[Offset: 0x138, Size: 0x4]
	float LandedVFXHeightThreshold;//[Offset: 0x13c, Size: 0x4]
	<byte,VehicleVFX> JumpLandedVFXs;//[Offset: 0x140, Size: 0x50]
	VehicleLocomotionData LocomotionDatas;//[Offset: 0x190, Size: 0x1c]
	float MaxControllableDegreeOffset;//[Offset: 0x1e4, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x1e8, Size: 0x4]
	float GravityZ;//[Offset: 0x1ec, Size: 0x4]
	bool bEnableProceduralAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	bool bAdvancedProceduralAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 0x1]
	float StepHeight;//[Offset: 0x1f4, Size: 0x4]
	float StepDistanceForward;//[Offset: 0x1f8, Size: 0x4]
	float StepDistanceRight;//[Offset: 0x1fc, Size: 0x4]
	float StepSequencePercent;//[Offset: 0x200, Size: 0x4]
	float MinStepDuration;//[Offset: 0x204, Size: 0x4]
	float MinDistanceToUnplant;//[Offset: 0x208, Size: 0x4]
	float FixFeetTargetsAfterPercent;//[Offset: 0x20c, Size: 0x4]
	float FeetTipBonesRotationInterpSpeed;//[Offset: 0x210, Size: 0x4]
	RuntimeFloatCurve SpeedCurve;//[Offset: 0x218, Size: 0x88]
	RuntimeFloatCurve HeightCurve;//[Offset: 0x2a0, Size: 0x88]
	RuntimeFloatCurve BodyRelativeZCurve;//[Offset: 0x328, Size: 0x88]
	CurveVector* BodyRelativeRotatorCurve;//[Offset: 0x3b0, Size: 0x8]
	float BodyTransformLerpSpeedWithoutDriver;//[Offset: 0x3b8, Size: 0x4]
	float TraceLength;//[Offset: 0x3bc, Size: 0x4]
	float DistanceCheckMultiplier;//[Offset: 0x3c0, Size: 0x4]
	float RadiusCheckMultiplier;//[Offset: 0x3c4, Size: 0x4]
	float BodyAlignTerrainBlendSpeed;//[Offset: 0x3c8, Size: 0x4]
	float BodyZOffsetMultiplier;//[Offset: 0x3cc, Size: 0x4]
	float MaxBodyZOffset;//[Offset: 0x3d0, Size: 0x4]
	float MinBodyZOffset;//[Offset: 0x3d4, Size: 0x4]
	float MinBodyAlignPitchDegree;//[Offset: 0x3d8, Size: 0x4]
	float MaxBodyAlignPitchDegree;//[Offset: 0x3dc, Size: 0x4]
	float MinBodyAlignRollDegree;//[Offset: 0x3e0, Size: 0x4]
	float MaxBodyAlignRollDegree;//[Offset: 0x3e4, Size: 0x4]
	bool bRotateOnInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	float MinRotateDegree;//[Offset: 0x3ec, Size: 0x4]
	float LerpSpeedWithinMinRotateDegree;//[Offset: 0x3f0, Size: 0x4]
	float DegreeForRotatePiAnimation;//[Offset: 0x3f4, Size: 0x4]
	float DegreeForRotateHalfPiAnimation;//[Offset: 0x3f8, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x3fc, Size: 0x94]
	LeggedVehiclePostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x490, Size: 0x30]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 0x1]
	float MaxStepHeight;//[Offset: 0x594, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x598, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x59c, Size: 0x4]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 0x1]
	float LedgeCheckThreshold;//[Offset: 0x5a4, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x5a8, Size: 0x4]
	float JumpXYVelocityOnInput;//[Offset: 0x5ac, Size: 0x4]
	GameplayTag JumpFailedTagForNotice;//[Offset: 0x5b0, Size: 0x8]
	int JumpFailedNoticeID;//[Offset: 0x5b8, Size: 0x4]
	float AirControl;//[Offset: 0x5bc, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x5c0, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x5c4, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x5c8, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x5cc, Size: 0x4]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	float JumpOffJumpZFactor;//[Offset: 0x5d4, Size: 0x4]
	float MoveSpeedFactorForPiRotation;//[Offset: 0x5d8, Size: 0x4]
	float MoveSpeedFactorForHalfPiRotation;//[Offset: 0x5dc, Size: 0x4]
	float MinFootIKEffectorZ;//[Offset: 0x5e0, Size: 0x4]
	float MaxFootIKEffectorZ;//[Offset: 0x5e4, Size: 0x4]
	VehicleFootIKData[] FootIKDataArray;//[Offset: 0x5e8, Size: 0x10]
	float IKSweepTraceRadius;//[Offset: 0x5f8, Size: 0x4]
	float IKEffectorBlendSpeed;//[Offset: 0x5fc, Size: 0x4]
	float FloorAndMeshAngleForDoubleSweep;//[Offset: 0x600, Size: 0x4]
	int MaxBrokenWeakPointForLocomotion;//[Offset: 0x604, Size: 0x4]
	float RefreshBoneTransformTimerForDedicatedServer;//[Offset: 0x608, Size: 0x4]
	VehicleVFX[] WeakPointParticles;//[Offset: 0x610, Size: 0x10]
	float MaxJoyStickYaw;//[Offset: 0x620, Size: 0x4]
	float MinJoyStickYaw;//[Offset: 0x624, Size: 0x4]
	float MaxJoyStickPitch;//[Offset: 0x628, Size: 0x4]
	float MinJoyStickPitch;//[Offset: 0x62c, Size: 0x4]
	float RotationBlendSpeed;//[Offset: 0x630, Size: 0x4]
	float MaxFootZValueForAlignGround;//[Offset: 0x634, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x638, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x63c, Size: 0x4]
	float LandingTimerForAnitCheating;//[Offset: 0x640, Size: 0x4]
	float EnablePhysicsCollisionTimer;//[Offset: 0x644, Size: 0x4]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x648, Size: 0x8]
	CapsuleComponent* UpdatedCapsule;//[Offset: 0x650, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x658, Size: 0x8]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x660, Size: 0x8]
	SolarVehicleStateMachine* VehicleStateMachine;//[Offset: 0x668, Size: 0x8]
	void OnPlayerGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x4a9a312cd041
	void OnCapsuleComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x4a99312cd041
	void EnableFootIK(bool bEnable, bool bResetAlpha, bool bResetStandOnStatic);// 0x4a98312cd041

--------------------------------
Class: VehicleLocomotionData
	float Speed;//[Offset: 0x0, Size: 0x4]
	float Acceleration;//[Offset: 0x4, Size: 0x4]
	float Deceleration;//[Offset: 0x8, Size: 0x4]
	float Friction;//[Offset: 0xc, Size: 0x4]
	float RotateFriction;//[Offset: 0x10, Size: 0x4]
	float RotationSpeed;//[Offset: 0x14, Size: 0x4]
	float MovementDegree;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: LeggedVehiclePostPhysicsTickFunction.TickFunction

--------------------------------
Class: VehicleFootIKData
	FName LegBoneName;//[Offset: 0x0, Size: 0x8]
	FName FootBoneName;//[Offset: 0x8, Size: 0x8]
	FName FootVirtualBoneName;//[Offset: 0x10, Size: 0x8]
	FName FootVirtualBoneForGround;//[Offset: 0x18, Size: 0x8]
	FName FootIKBoneName;//[Offset: 0x20, Size: 0x8]
	float FootHorizontalOffsetAfterBroken;//[Offset: 0x28, Size: 0x4]
	float FootVerticalOffsetAfterBroken;//[Offset: 0x2c, Size: 0x4]
	float FootUnderWaterOffset;//[Offset: 0x30, Size: 0x4]
	float RaiseDustEffectScale;//[Offset: 0x34, Size: 0x4]
	float BrokenFootMultiplier;//[Offset: 0x38, Size: 0x4]
	Vector FootBoneOffset;//[Offset: 0x3c, Size: 0xc]
	FName ParentBone;//[Offset: 0x48, Size: 0x8]
	int GroupIndex;//[Offset: 0x50, Size: 0x4]
	float StepDistanceMultiplier;//[Offset: 0x54, Size: 0x4]
	float StepDistanceMultiplierForVelocity;//[Offset: 0x58, Size: 0x4]
	float MinVelocityDegreeForStepDistance;//[Offset: 0x5c, Size: 0x4]
	float MaxVelocityDegreeForStepDistance;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: SolarVehicleStateMachine.Object
	SolarVehiclePawn* Owner;//[Offset: 0x28, Size: 0x8]
	SolarLeggedVehicleMovement* MovementComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: BP_VH_RocketLauncher_C.SolarVehicleRocketLauncherWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1720, Size: 0x8]
	void ReceiveTick(float DeltaSeconds);// 0x1f6be312cd041
	void ExecuteUbergraph_BP_VH_RocketLauncher(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0xffffff8a312cd002

--------------------------------
Class: SolarVehicleRocketLauncherWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	BombingAreaData[] BombingAreaDatas;//[Offset: 0x1370, Size: 0x10]
	<int,BombingAreaAsset> BombingAreaAssetMap;//[Offset: 0x1380, Size: 0x50]
	int SpawnedAreaCounter;//[Offset: 0x13d0, Size: 0x4]
	int PlayedMuzlleEffectCounter;//[Offset: 0x13d4, Size: 0x4]
	TimerHandle FiringEffectTimeHandle;//[Offset: 0x13d8, Size: 0x8]
	Vector CurrentAimPoint;//[Offset: 0x13e0, Size: 0xc]
	SpawnedRocketData[] SpawnedRocketDatas;//[Offset: 0x13f0, Size: 0x10]
	bool bReloadingAfterUncontrol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153c, Size: 0x1]
	BombingAreaAsset PreviewRangeAsset;//[Offset: 0x1558, Size: 0x60]
	BombingAreaAsset BombingAreaAimAsset;//[Offset: 0x15b8, Size: 0x60]
	BombingAreaAsset BombingAreaWarningAsset;//[Offset: 0x1618, Size: 0x60]
	Vector BombingAreaDecalSize;//[Offset: 0x1678, Size: 0xc]
	StaticMesh* AlertLineMeshClass;//[Offset: 0x1688, Size: 0x28]
	ParticleSystem* FireMuzzleParticle;//[Offset: 0x16b0, Size: 0x28]
	float AreaMeshScale;//[Offset: 0x16d8, Size: 0x4]
	float FirstRocketSpawnTimer;//[Offset: 0x16dc, Size: 0x4]
	float RocketSpawnDelay;//[Offset: 0x16e0, Size: 0x4]
	float AlertLineRemainTime;//[Offset: 0x16e4, Size: 0x4]
	float RocketSpawnInterval;//[Offset: 0x16e8, Size: 0x4]
	float BombingAreaDisplayDelay;//[Offset: 0x16ec, Size: 0x4]
	int LaunchRocketNum;//[Offset: 0x16f0, Size: 0x4]
	float BombingAreaRadius;//[Offset: 0x16f4, Size: 0x4]
	float MiniSpawnDistance;//[Offset: 0x16f8, Size: 0x4]
	float SpawnRocketHight;//[Offset: 0x16fc, Size: 0x4]
	Vector2D AimDistanceRange;//[Offset: 0x1700, Size: 0x8]
	FName[] MuzzleSocketNames;//[Offset: 0x1708, Size: 0x10]
	float MuzzleEffectInterval;//[Offset: 0x1718, Size: 0x4]
	void ServerActivateRocketLauncherFire(const Vector_NetQuantize InTargetLocation);// 0x54bb312cd041
	void PlayRocketLauncherFireEffect();// 0x54ba312cd041
	void OnVitrualRocketSpawn(Vector InLocation);// 0x54b9312cd041
	void OnRep_RocketSpawnerChanged();// 0x54b8312cd041
	void OnLocallyActiveFire();// 0x54b7312cd041
	void MulticastPrepareRocketSpawn(const Vector_NetQuantize InLocation);// 0x54b6312cd041
	void MulticastActivateRocketLauncherFire();// 0x54b5312cd041
	void InternalWeaponFireOnClient();// 0x54b4312cd041

--------------------------------
Class: BombingAreaData
	int AreaIndex;//[Offset: 0x0, Size: 0x4]
	Vector_NetQuantize CenterLocation;//[Offset: 0x4, Size: 0xc]
	float ServerStartedTime;//[Offset: 0x10, Size: 0x4]
	byte SpawnedRocketCounter;//[Offset: 0x14, Size: 0x1]
	Vector2D LastLandLocation2D;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: BombingAreaAsset
	StaticMesh* BombingAreaMeshClass;//[Offset: 0x0, Size: 0x28]
	MaterialInterface* BombingDecalMaterialClass;//[Offset: 0x28, Size: 0x28]
	StaticMeshComponent* BombingAreaMeshComponent;//[Offset: 0x50, Size: 0x8]
	DecalComponent* BombingAreaDecalComponent;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: SpawnedRocketData
	Vector RocketSpawnLocation;//[Offset: 0x0, Size: 0xc]
	float RocketSpawnTime;//[Offset: 0xc, Size: 0x4]
	float CurrentSpentTime;//[Offset: 0x10, Size: 0x4]
	bool bRocketSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	StaticMeshComponent* AlertLineBombingMesh;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ChaGCBP_TeamPerspectiveInSmoke_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a8, Size: 0x8]

--------------------------------
Class: GC_Freeze_C.SolarSkillGC_Freeze.GameplayCueNotify_Actor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x380, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x388, Size: 0x8]
	MaterialChangeHandle MaterialChangeHandle;//[Offset: 0x390, Size: 0x8]
	<int,FString> SoundPlayMap;//[Offset: 0x398, Size: 0x50]
	<int,FString> SoundStopMap;//[Offset: 0x3e8, Size: 0x50]
	ParticleSystemComponent* ParticleHandle;//[Offset: 0x438, Size: 0x8]
	FString PlayingAudioEventName;//[Offset: 0x440, Size: 0x10]
	void RemoveFunc(const Actor* Actor, FString CallFunc_GetObjectName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ActorMaterialSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_RemoveMaterialChange_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2dffb5315bd02e
	static void ActiveFunc(Actor* TartgetActor, Actor* TargetActor, AddMaterialChangeParams K2Node_MakeStruct_AddMaterialChangeParams, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ActorMaterialSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, MaterialChangeHandle CallFunc_K2_AddMaterialChange_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_ContainsMaterialChange_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x2219c3154d001
	void Is Teammate(SolarCharacter* Actor1, Actor* Actor2, out bool IsTeammate, bool bIsTeammate, SolarVehiclePawn* K2Node_DynamicCast_AsSolar_Vehicle_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsTeammateWith_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsTeammateWith_ReturnValue);// 0x1c85e3154d008
	void PlaySoundEvent(Actor* TargetActor, bool bPlay, FString CallFunc_Replace_ReturnValue, int CallFunc_PlaySoundbyname_ReturnValue, int CallFunc_PlaySoundbyname_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SolarCharacter* CallFunc__C_GetLocalCharacter_ReturnValue, bool CallFunc_Is_Teammate_IsTeammate, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x238ed3154d001
	void ReceiveBeginPlay();// 0xffffff88312ccfff
	void ReceiveEndPlay(byte EndPlayReason);// 0x17dca3154d008
	void ExecuteUbergraph_GC_Freeze(int EntryPoint, byte K2Node_Event_EndPlayReason);// 0xd4943154d008

--------------------------------
Class: SolarSkillGC_Freeze.GameplayCueNotify_Actor.Actor.Object
	MaterialInterface* FreezeMaterial;//[Offset: 0x298, Size: 0x8]
	AddMaterialChangeParams FreezeMaterialConfig;//[Offset: 0x2a0, Size: 0x28]
	MaterialChangeHandle FreezeMaterialHandle;//[Offset: 0x2c8, Size: 0x8]
	ParticleSystem* IceSmokeParticle;//[Offset: 0x2d0, Size: 0x8]
	FName IceSmokeAttachPointName;//[Offset: 0x2d8, Size: 0x8]
	Transform IceSmokeTransform;//[Offset: 0x2e0, Size: 0x30]
	ParticleSystemComponent* IceSmokeParticleHandle;//[Offset: 0x310, Size: 0x8]
	FString FreezeStartSoundName1P;//[Offset: 0x318, Size: 0x10]
	FString FreezeStartSoundName3P;//[Offset: 0x328, Size: 0x10]
	FString FreezeStartSoundName3PEnemy;//[Offset: 0x338, Size: 0x10]
	FString FreezeEndSoundName1P;//[Offset: 0x348, Size: 0x10]
	FString FreezeEndSoundName3P;//[Offset: 0x358, Size: 0x10]
	FString FreezeEndSoundName3PEnemy;//[Offset: 0x368, Size: 0x10]

--------------------------------
Class: AddMaterialChangeParams
	GameplayTag PriorityTag;//[Offset: 0x8, Size: 0x8]
	enum ResolveStrategy;//[Offset: 0x10, Size: 0x1]
	enum TextureOverrideMode;//[Offset: 0x11, Size: 0x1]
	FName[] TextureParameterNamesToOverride;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ActorMaterialSubsystem.WorldSubsystem.Subsystem.Object
	<Actor*,ActorMaterialInfo> ActorMaterialsMap;//[Offset: 0x30, Size: 0x50]
	bool SetStaticMesh(const Actor* Actor, StaticMeshComponent* MeshComp, StaticMesh* NewMesh);// 0x3c7e312cd041
	bool SetSkeletalMesh(const Actor* Actor, SkeletalMeshComponent* MeshComp, SkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation);// 0x3c7d312cd041
	bool SetOriginalMultiplePassMaterial(const Actor* Actor, MeshComponent* MeshComp, MaterialInterface* Material, bool bNeedMultiplePass);// 0x3c7c312cd041
	bool SetOriginalMaterials(const Actor* Actor, MeshComponent* MeshComp, out const MaterialInterface*[] Materials);// 0x3c7b312cd041
	bool SetOriginalMaterial(const Actor* Actor, MeshComponent* MeshComp, int MaterialIndex, MaterialInterface* Material);// 0x3c7a312cd041
	void RemoveNoChangeMaterials(out const SoftObjectPath[] Materials);// 0x3c79312cd041
	bool RemoveMaterialChange(Actor* Actor, MaterialChangeHandle Handle);// 0x3c78312cd041
	bool RemoveAllMaterialChanges(Actor* Actor);// 0x3c77312cd041
	void RebuildMaterialChangesOnMeshAddedOrRemoved(const Actor* Actor);// 0x3c76312cd041
	void RebuildMaterialChangesOnAllOriginalMaterialsChanged(const Actor* Actor);// 0x3c75312cd041
	MaterialInstanceDynamic* OverrideDynamicMaterialInstanceParameterByIndex(MaterialInstanceDynamic* TargetMaterial, const PrimitiveComponent* SourcePrimitiveComponent, int SourceElementIndex, FName ParameterName, enum ParameterType, bool bOverridenOnly);// 0x3c74312cd041
	MaterialInstanceDynamic* OverrideDynamicMaterialInstanceParameter(MaterialInstanceDynamic* TargetMaterial, const MaterialInterface* SourceMaterial, FName ParameterName, enum ParameterType, bool bOverridenOnly);// 0x3c73312cd041
	void OnActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x3c72312cd041
	bool K2_SetVectorMaterialParameter(const Actor* Actor, MaterialChangeHandle Handle, FName ParameterName, Vector ParameterValue, MaterialFilter Filter);// 0x3c71312cd041
	bool K2_SetScalarMaterialParameter(const Actor* Actor, MaterialChangeHandle Handle, FName ParameterName, float ParameterValue, MaterialFilter Filter);// 0x3c70312cd041
	void K2_RebuildMaterialChangesOnOriginalMaterialChanged(const Actor* Actor, MeshComponent*[] ChangedMeshes);// 0x3c6f312cd041
	MaterialInstanceDynamic* K2_OverrideDynamicMaterialInstanceAllParametersByIndex(MaterialInstanceDynamic* TargetMaterial, const PrimitiveComponent* PrimitiveComponent, int SourceElementIndex, int ParameterTypeFlags, out const MaterialParameterFilter ParameterFilter, bool bOverridenOnly);// 0x3c6e312cd041
	MaterialInstanceDynamic* K2_OverrideDynamicMaterialInstanceAllParameters(MaterialInstanceDynamic* TargetMaterial, const MaterialInterface* SourceMaterial, int ParameterTypeFlags, out const MaterialParameterFilter ParameterFilter, bool bOverridenOnly);// 0x3c6d312cd041
	MaterialInstanceDynamic* K2_CreateDynamicMaterialInstanceOverrideAllParameters(PrimitiveComponent* TargetPrimitiveComponent, MaterialInterface* SourceMaterial, int ParameterTypeFlags, out const MaterialParameterFilter ParameterFilter, int TargetElementIndex, bool bOverridenOnly, FName OptionalMaterialName);// 0x3c6c312cd041
	MaterialChangeHandle K2_AddMaterialChangeByPath(Actor* Actor, out const SoftObjectPath MaterialPath, AddMaterialChangeParams Params);// 0x3c6b312cd041
	MaterialChangeHandle K2_AddMaterialChange(Actor* Actor, MaterialInterface* SourceMaterial, AddMaterialChangeParams Params);// 0x3c6a312cd041
	bool ContainsMaterialChangeByPriority(const Actor* Actor, int Priority);// 0x3c69312cd041
	bool ContainsMaterialChange(const Actor* Actor, MaterialChangeHandle Handle);// 0x3c68312cd041
	bool ContainsAnyMaterialChange(const Actor* Actor);// 0x3c67312cd041
	void AddNoChangeMaterials(out const SoftObjectPath[] Materials);// 0x3c66312cd041

--------------------------------
Class: ActorMaterialInfo
	<MaterialChangeHandle,MaterialInterface*> SourceMaterials;//[Offset: 0x10, Size: 0x50]
	<MaterialChangeHandle,AddMaterialChangeParams> NormalParams;//[Offset: 0x60, Size: 0x50]
	<MaterialChangeHandle,AddMultiplePassMaterialChangeParams> MultiplePassParams;//[Offset: 0xb0, Size: 0x50]
	MeshMaterialInfo[] MeshMaterials;//[Offset: 0x100, Size: 0x10]

--------------------------------
Class: MeshMaterialInfo
	MaterialChange[] NormalMaterialChanges;//[Offset: 0x18, Size: 0x10]
	MaterialChange[] MultiplePassMaterialChanges;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: MaterialChange
	MaterialInterface*[] Materials;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MaterialFilter
	MeshComponent*[] IncludingMeshes;//[Offset: 0x0, Size: 0x10]
	int[] IncludingMaterialIndices;//[Offset: 0x10, Size: 0x10]
	MeshComponent*[] ExcludingMeshes;//[Offset: 0x20, Size: 0x10]
	int[] ExcludingMaterialIndices;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: MaterialParameterFilter
	FName[] IncludingNames;//[Offset: 0x0, Size: 0x10]
	FName[] ExcludingNames;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ChaGCBP_RapidBoost_C.GameplayCueNotify_Actor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x298, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a0, Size: 0x8]
	SolarAbilitySystemComponent* CachedASC;//[Offset: 0x2a8, Size: 0x8]
	TimerHandle PlayEndSoundHandle;//[Offset: 0x2b0, Size: 0x8]
	int CachedScreenEffectHandle;//[Offset: 0x2b8, Size: 0x4]
	int CahcedBackpackFXHandle;//[Offset: 0x2bc, Size: 0x4]
	static void OnPlayEndSound(Actor* CallFunc_GetOwner_ReturnValue, TimerHandle CallFunc_K2_InvalidateTimerHandle_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess);// 0x13e113154d008
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters, SolarCharacter* CachedCharacter, int CallFunc_StartScreenEffect_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, int CallFunc_StartActorEffect_ReturnValue, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, float CallFunc_K2_GetEffectMaxTimeRemainingAndDuration_TimeRemaining, float CallFunc_K2_GetEffectMaxTimeRemainingAndDuration_Duration, TimerHandle CallFunc_K2_SetTimer_ReturnValue);// 0xd04f3154d001
	ParticleSystemComponent* SpawnEmitter(ParticleSystem* EmitterTemplate, SceneComponent* Mesh, FName BoneName, enum PoolingMethod, bool bAbsoluteRotation, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue);// 0x88ec312d5845
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_IsPlayerLocallyControlled_ReturnValue);// 0xffffff87312cd000
	static bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, float CallFunc_K2_GetEffectMaxTimeRemainingAndDuration_TimeRemaining, float CallFunc_K2_GetEffectMaxTimeRemainingAndDuration_Duration, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, int CallFunc_StartActorEffect_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0xffffff87312cd000
	void ReceiveTick(float DeltaSeconds);// 0xfffffffee09b0a80
	static void ExecuteUbergraph_ChaGCBP_RapidBoost(int EntryPoint, ParticleSystemComponent*[] CallFunc_GetActorEffectPSComponents_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, float CallFunc_K2_GetEffectMaxTimeRemainingAndDuration_TimeRemaining, float CallFunc_K2_GetEffectMaxTimeRemainingAndDuration_Duration, bool CallFunc_IsValid_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue);// 0x38ffb7315bd065

--------------------------------
Class: GC_SuperRadarChoose_C.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x298, Size: 0x8]
	int FXRootHandle;//[Offset: 0x2a0, Size: 0x4]
	int FXEyeHandle;//[Offset: 0x2a4, Size: 0x4]
	SolarCharacter* CacheCharacter;//[Offset: 0x2a8, Size: 0x8]
	FString OnsetSound_1P;//[Offset: 0x2b0, Size: 0x10]
	FString OnsetSound_3P;//[Offset: 0x2c0, Size: 0x10]
	void PlayPlayerEffect(int CallFunc_StartActorEffect_ReturnValue, int CallFunc_StartActorEffect_ReturnValue);// 0x1a7583154d008
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x14ecc3154d008
	static bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, TimerHandle CallFunc_K2_SetTimer_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue);// 0x1b77c3154d008

--------------------------------
Class: GC_SuperRadarScan_C.GameplayCueNotify_Actor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x298, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a0, Size: 0x8]
	FString EnutterSound;//[Offset: 0x2a8, Size: 0x10]
	Vector CacheLocation;//[Offset: 0x2b8, Size: 0xc]
	ParticleSystemComponent* CacheEmitter;//[Offset: 0x2c8, Size: 0x8]
	void PlayEmitterEffect(ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue);// 0x19298312cd041
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0xffffffff07a5d080
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters, float CallFunc_BreakGameplayCueParameters_NormalizedMagnitude, float CallFunc_BreakGameplayCueParameters_RawMagnitude, GameplayEffectContextHandle CallFunc_BreakGameplayCueParameters_EffectContext, GameplayTag CallFunc_BreakGameplayCueParameters_MatchedTagName, GameplayTag CallFunc_BreakGameplayCueParameters_OriginalTag, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedSourceTags, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedTargetTags, Vector CallFunc_BreakGameplayCueParameters_Location, Vector CallFunc_BreakGameplayCueParameters_Normal, Actor* CallFunc_BreakGameplayCueParameters_Instigator, Actor* CallFunc_BreakGameplayCueParameters_EffectCauser, Object* CallFunc_BreakGameplayCueParameters_SourceObject, PhysicalMaterial* CallFunc_BreakGameplayCueParameters_PhysicalMaterial, int CallFunc_BreakGameplayCueParameters_GameplayEffectLevel, int CallFunc_BreakGameplayCueParameters_AbilityLevel, SceneComponent* CallFunc_BreakGameplayCueParameters_TargetAttachComponent, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue);// 0xffffffff07a69480
	void ReceiveBeginPlay();// 0x3f7a86cf703e28dd
	void ReceiveTick(float DeltaSeconds);// 0x1ba0c3154d008
	void ExecuteUbergraph_GC_SuperRadarScan(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0xffffff87312cd000

--------------------------------
Class: ChaGCBP_RadarScan_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a8, Size: 0x8]

--------------------------------
Class: GCBP_LaunchCharacter_C.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x298, Size: 0x8]
	bool IsSummonedJumpPad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	static bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters, float CallFunc_BreakGameplayCueParameters_NormalizedMagnitude, float CallFunc_BreakGameplayCueParameters_RawMagnitude, GameplayEffectContextHandle CallFunc_BreakGameplayCueParameters_EffectContext, GameplayTag CallFunc_BreakGameplayCueParameters_MatchedTagName, GameplayTag CallFunc_BreakGameplayCueParameters_OriginalTag, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedSourceTags, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedTargetTags, Vector CallFunc_BreakGameplayCueParameters_Location, Vector CallFunc_BreakGameplayCueParameters_Normal, Actor* CallFunc_BreakGameplayCueParameters_Instigator, Actor* CallFunc_BreakGameplayCueParameters_EffectCauser, Object* CallFunc_BreakGameplayCueParameters_SourceObject, PhysicalMaterial* CallFunc_BreakGameplayCueParameters_PhysicalMaterial, int CallFunc_BreakGameplayCueParameters_GameplayEffectLevel, int CallFunc_BreakGameplayCueParameters_AbilityLevel, SceneComponent* CallFunc_BreakGameplayCueParameters_TargetAttachComponent, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, BP_SI_JumpPad_C* K2Node_DynamicCast_AsBP_SI_Jump_Pad, bool K2Node_DynamicCast_bSuccess, SolarSummonJumpPad* K2Node_DynamicCast_AsSolar_Summon_Jump_Pad, bool K2Node_DynamicCast_bSuccess);// 0x195fb312cd000
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess);// 0xffffffff6ad8ec80

--------------------------------
Class: BP_SI_JumpPad_C.SolarInteractableActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 0x8]
	StaticMeshComponent* FX_Center_Logo;//[Offset: 0x240, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x248, Size: 0x8]
	ParticleSystemComponent* FX_P_JumpPad_002;//[Offset: 0x250, Size: 0x8]
	StaticMeshComponent* VFX_Dark;//[Offset: 0x258, Size: 0x8]
	SceneComponent* VFX;//[Offset: 0x260, Size: 0x8]
	SceneComponent* point001;//[Offset: 0x268, Size: 0x8]
	StaticMeshComponent* Progress;//[Offset: 0x270, Size: 0x8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x278, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x280, Size: 0x8]
	Vector Timeline_0_Scale_EDFE8BE84808C1122C8F3CA456F9CAC3;//[Offset: 0x288, Size: 0xc]
	float Timeline_0_alpha_EDFE8BE84808C1122C8F3CA456F9CAC3;//[Offset: 0x294, Size: 0x4]
	byte Timeline_0__Direction_EDFE8BE84808C1122C8F3CA456F9CAC3;//[Offset: 0x298, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x2a0, Size: 0x8]
	float Zvelority;//[Offset: 0x2a8, Size: 0x4]
	float OriginalZ;//[Offset: 0x2ac, Size: 0x4]
	float CD;//[Offset: 0x2b0, Size: 0x4]
	float CoolDownTime;//[Offset: 0x2b4, Size: 0x4]
	bool IsInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	SolarCharacter*[] Characters;//[Offset: 0x2c0, Size: 0x10]
	bool TransientLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	void ServerCheckLaunch(out bool Launch, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarCharacter* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsInRescueState_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0xffffffff6b292fe0
	void UpdateProgress(float Percent, float CallFunc_FClamp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0xffffff87312cd000
	void ShowInCD(bool InCD, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xe5ac312cd041
	void Timeline_0__FinishedFunc();// 0xffffff87312cd000
	void Timeline_0__UpdateFunc();// 0xffffff86312cd002
	void ReceiveBeginPlay();// 0x23486312cd001
	void ReceiveTick(float DeltaSeconds);// 0x19f783154d001
	void BreakLoop();// 0xffffff8a312cd002
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xffffffff0a634160
	void BndEvt__Box_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0xffffff87312cd000
	void Launch(out const SolarCharacter*[] Characters);// 0x704ed5c7b64526aa
	void ClientFinishLaunch();// 0xffffffff6b008140
	void LaunchEffect();// 0x13c312cd002
	void Set_CD(float CD);// 0xffffff87312cd000
	void Set_State(bool InCD, float CD);// 0x9ef312cd002
	void ExecuteUbergraph_BP_SI_JumpPad(int EntryPoint, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_HasAuthority_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, Vector CallFunc_K2_GetComponentLocation_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, int Temp_int_Array_Index_Variable, SolarCharacter* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, Vector CallFunc_GetUpVector_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Normal_ReturnValue, int CallFunc_Array_Add_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, const SolarCharacter*[] K2Node_CustomEvent_Characters, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, SolarCharacter* CallFunc_Array_Get_Item, bool CallFunc_IsInRescueState_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_K2_IsAlive_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_ServerCheckLaunch_Launch, byte CallFunc_GetLocalRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float K2Node_CustomEvent_CD, bool K2Node_CustomEvent_InCD, float K2Node_CustomEvent_CD);// 0xffffff86312cd002

--------------------------------
Class: SolarSummonJumpPad.SummonItemBase.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x3f0, Size: 0x8]
	AnimSequence* SpawnAnim;//[Offset: 0x3f8, Size: 0x8]
	AnimSequence* LaunchAnim;//[Offset: 0x400, Size: 0x8]
	float HorizantalSpeedMultipleFac;//[Offset: 0x408, Size: 0x4]
	float MaxHorizantalSpeed;//[Offset: 0x40c, Size: 0x4]
	float VerticalSpeed;//[Offset: 0x410, Size: 0x4]
	class GameplayEffect* LaunchCDEffect;//[Offset: 0x418, Size: 0x8]
	FName SpawnSound;//[Offset: 0x420, Size: 0x8]
	FName DestroySound;//[Offset: 0x428, Size: 0x8]
	FName HitSoundAttacker2D;//[Offset: 0x430, Size: 0x8]
	FName HitSound;//[Offset: 0x438, Size: 0x8]
	FName LaunchSound;//[Offset: 0x440, Size: 0x8]
	ParticleSystem* SmokeFX;//[Offset: 0x448, Size: 0x8]
	ParticleSystem* DestroyFX;//[Offset: 0x450, Size: 0x8]
	int LaunchCount;//[Offset: 0x458, Size: 0x4]
	int HitCount;//[Offset: 0x45c, Size: 0x4]
	void OnRep_LaunchCount();// 0x4e70312cd041
	void OnRep_HitCount();// 0x4e6f312cd041
	void OnCharacterEndOverlap(SolarCharacter* OtherCharacter);// 0x4e6e312cd041
	void OnCharacterBeginOverlap(SolarCharacter* OtherCharacter);// 0x4e6d312cd041

--------------------------------
Class: GC_SurroundLightning_C.SolarSkillGC_SurroundLightning.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2f8, Size: 0x8]

--------------------------------
Class: SolarSkillGC_SurroundLightning.GameplayCueNotify_Actor.Actor.Object
	<enum,SolarSurroundLightningConfig> SurroundLightningApplyTypeConfigs;//[Offset: 0x298, Size: 0x50]
	FName EMPEffectID;//[Offset: 0x2e8, Size: 0x8]
	int CharacterEffectHandle;//[Offset: 0x2f0, Size: 0x4]

--------------------------------
Class: SolarSurroundLightningConfig
	Vector ParticleDefaultScale;//[Offset: 0x0, Size: 0xc]
	RuntimeFloatCurve ParticleScaleByDistanceCurve;//[Offset: 0x10, Size: 0x88]

--------------------------------
Class: BP_SMG_B9A04_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x143333154d008

--------------------------------
Class: GC_Weapon_Scan_C.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x298, Size: 0x8]
	float Duration;//[Offset: 0x2a0, Size: 0x4]
	float ScanRadius;//[Offset: 0x2a4, Size: 0x4]
	void PlaySound(SolarCharacter* CueOwner, Vector CueLocation, PlayerController* CallFunc_GetPlayerController_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, int CallFunc_PostEventAtLocation_ReturnValue, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x142e93154d008
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters, float CallFunc_BreakGameplayCueParameters_NormalizedMagnitude, float CallFunc_BreakGameplayCueParameters_RawMagnitude, GameplayEffectContextHandle CallFunc_BreakGameplayCueParameters_EffectContext, GameplayTag CallFunc_BreakGameplayCueParameters_MatchedTagName, GameplayTag CallFunc_BreakGameplayCueParameters_OriginalTag, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedSourceTags, GameplayTagContainer CallFunc_BreakGameplayCueParameters_AggregatedTargetTags, Vector CallFunc_BreakGameplayCueParameters_Location, Vector CallFunc_BreakGameplayCueParameters_Normal, Actor* CallFunc_BreakGameplayCueParameters_Instigator, Actor* CallFunc_BreakGameplayCueParameters_EffectCauser, Object* CallFunc_BreakGameplayCueParameters_SourceObject, PhysicalMaterial* CallFunc_BreakGameplayCueParameters_PhysicalMaterial, int CallFunc_BreakGameplayCueParameters_GameplayEffectLevel, int CallFunc_BreakGameplayCueParameters_AbilityLevel, SceneComponent* CallFunc_BreakGameplayCueParameters_TargetAttachComponent, Vector CallFunc_Conv_FloatToVector_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue);// 0x1888f3154d008

--------------------------------
Class: ChaGCBP_ParkourVertAcc_C.ChaGC_ParkourAcceleration.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x310, Size: 0x8]

--------------------------------
Class: ChaGC_ParkourAcceleration.GameplayCueNotify_Actor.Actor.Object
	FName FlushEffectID;//[Offset: 0x294, Size: 0x8]
	FName TrailEffectID;//[Offset: 0x29c, Size: 0x8]
	<FName,Vector2D> TrailEmitterParameters;//[Offset: 0x2a8, Size: 0x50]
	GameplayTag DurationTag;//[Offset: 0x2f8, Size: 0x8]

--------------------------------
Class: BP_PBags_BDogRM_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object

--------------------------------
Class: BP_Rifle_Mphy08_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x41c4f312e1137

--------------------------------
Class: ChaGCBP_MassInvisibilityPrepare_C.ChaGC_MassInvisibilityPrepare.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2c0, Size: 0x8]

--------------------------------
Class: ChaGC_MassInvisibilityPrepare.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	class ActorEffect* InvisibilityPrepareEffectClass;//[Offset: 0x2a8, Size: 0x8]
	float PrepareDuration;//[Offset: 0x2b0, Size: 0x4]

--------------------------------
Class: ChaGCBP_MassInvisibility_C.ChaGC_MassInvisibility.ChaGC_SuperSkillActorCueBase.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x338, Size: 0x8]

--------------------------------
Class: ChaGC_MassInvisibility.ChaGC_SuperSkillActorCueBase.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	class ActorEffect* InvisibilityEffectClass;//[Offset: 0x2b0, Size: 0x8]
	float InvisibilityValueToTeammate;//[Offset: 0x2b8, Size: 0x4]
	float InvisibilityValueOnSprinting;//[Offset: 0x2bc, Size: 0x4]
	float MaterialSmoothSpeedOnSprinting;//[Offset: 0x2c0, Size: 0x4]
	int SprintingStatusNotificationID;//[Offset: 0x2c4, Size: 0x4]
	int SprintingStatusTipShowInterval;//[Offset: 0x2c8, Size: 0x4]
	float WarningOtherRange;//[Offset: 0x2cc, Size: 0x4]
	float WarningOtherRangeOutThreshold;//[Offset: 0x2d0, Size: 0x4]
	float TimeBeforeEndToStartEndWarning;//[Offset: 0x2d4, Size: 0x4]
	FName EndWarningMaterialParameterName;//[Offset: 0x2d8, Size: 0x8]
	FName EndWarningSoundGroupName;//[Offset: 0x2e0, Size: 0x8]
	float EndWarningSoundTriggerPoint;//[Offset: 0x2e8, Size: 0x4]
	float EndWarningRate;//[Offset: 0x2ec, Size: 0x4]
	class CameraShake* CameraModifierClass;//[Offset: 0x2f0, Size: 0x8]

--------------------------------
Class: ChaGC_SuperSkillActorCueBase.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	GameplayTag SuperSkillGameplayEffectTag;//[Offset: 0x2a8, Size: 0x8]

--------------------------------
Class: ChaGCBP_ParkourHoriAcc_C.ChaGC_ParkourAcceleration.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x310, Size: 0x8]

--------------------------------
Class: BP_Rifle_B9A05_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x2dffb5315bd02e

--------------------------------
Class: GC_UnlimitedAmmo_C.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x298, Size: 0x8]
	ParticleSystemComponent* CharacterVFX;//[Offset: 0x2a0, Size: 0x8]
	UserWidget* ScreenVFX;//[Offset: 0x2a8, Size: 0x8]
	int CharacterEffectHandle;//[Offset: 0x2b0, Size: 0x4]
	int ScreenEffectHandle;//[Offset: 0x2b4, Size: 0x4]
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters, bool Temp_bool_Variable, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, FString Temp_string_Variable, bool CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue, bool CallFunc_InSameTeamWithFirstPlayerController_ReturnValue, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, FString K2Node_Select_Default, FString K2Node_Select_Default);// 0x14f473154d008
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters, bool Temp_bool_Variable, SolarCharacter* K2Node_DynamicCast_AsSolar_Character, bool K2Node_DynamicCast_bSuccess, FString Temp_string_Variable, int CallFunc_StartActorEffect_ReturnValue, bool CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, bool CallFunc_InSameTeamWithFirstPlayerController_ReturnValue, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, int CallFunc_StartScreenEffect_ReturnValue, FString K2Node_Select_Default, FString K2Node_Select_Default);// 0x14237312cd041

--------------------------------
Class: Projectile_VH_TransTL_WL07_Machinegun_Secondary_C.DefaultProjBullet_C.SolarProjBullet.SolarBullet.Actor.Object

--------------------------------
Class: DefaultProjBullet_C.SolarProjBullet.SolarBullet.Actor.Object

--------------------------------
Class: GC_Vehicle_Ability_ToggleStealth_C.VehicleStealthGCNotify_Actor.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4c8, Size: 0x8]

--------------------------------
Class: VehicleStealthGCNotify_Actor.GameplayCueNotify_Actor.Actor.Object
	MaterialInterface* StealthMaterial;//[Offset: 0x298, Size: 0x8]
	RuntimeFloatCurve NormalStealthCurve;//[Offset: 0x2a0, Size: 0x88]
	RuntimeFloatCurve VehicleVelocityCurve;//[Offset: 0x330, Size: 0x88]
	RuntimeFloatCurve VehicleBeDamagedCurve;//[Offset: 0x3b8, Size: 0x88]
	FName StealthMaterialParamPowerName;//[Offset: 0x440, Size: 0x8]
	FName StealthMaterialParamDistanceName;//[Offset: 0x448, Size: 0x8]
	float StealthMaterialParamDistanceValue;//[Offset: 0x450, Size: 0x4]
	FString EnterStealthEngine3p;//[Offset: 0x488, Size: 0x10]
	FString EnterStealthEngine3pEnemy;//[Offset: 0x498, Size: 0x10]
	FString CancelStealthEngine3p;//[Offset: 0x4a8, Size: 0x10]
	FString CancelStealthEngine3pEnemy;//[Offset: 0x4b8, Size: 0x10]
	void OnVehicleSkinUpdate(SolarVehiclePawn* InVehiclePawn);// 0x56d5312cd041
	void OnToggleStealth(bool bInStealh);// 0x56d4312cd041
	void OnPlayerGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x56d3312cd041
	void OnPlayerGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x56d2312cd041

--------------------------------
Class: BP_Rifle_Mphy03_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	SolarSummonDetectionComponent* SolarSummonDetection;//[Offset: 0xf98, Size: 0x8]
	FString GetModuleName();// 0xffffff87312cd000

--------------------------------
Class: BP_PBags_BDogF_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x318, Size: 0x8]
	void FX_Flying();// 0xd2303154d008
	void FX_Idle();// 0x15236312cd041
	void FX_LowPower();// 0xd5083154d008
	void FX_Charging();// 0xffffff87312cd000
	void FX_Default();// 0xfffffffeb7718300
	void OnMeshEffectFactorChange();// 0xffffff87312cd000
	void ExecuteUbergraph_BP_PBags_BDogF_Set01(int EntryPoint);// 0xb9023154d008

--------------------------------
Class: BP_SMG_Psm03_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	SolarSummonDetectionComponent* SolarSummonDetection;//[Offset: 0xf98, Size: 0x8]
	FString GetModuleName();// 0x1b0ea312cd041

--------------------------------
Class: BP_VH_Hover_Soroll04_C.SolarIronManVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1af0, Size: 0x8]
	float MinCameraShakeSpeed;//[Offset: 0x1af8, Size: 0x4]
	float MinScreenEffectSpeed;//[Offset: 0x1afc, Size: 0x4]
	CurveFloat* CameraShakeCurve;//[Offset: 0x1b00, Size: 0x8]
	CurveFloat* ScreenEffectOpacityCurve;//[Offset: 0x1b08, Size: 0x8]
	CurveFloat* ScreenEffectPlayRateCurve;//[Offset: 0x1b10, Size: 0x8]
	class CameraShake* SpeedVehicleCameraShake;//[Offset: 0x1b18, Size: 0x8]
	CameraShake* SpeedVehicleCameraShakeModifier;//[Offset: 0x1b20, Size: 0x8]
	FX_Widget_VehicleSpeedLine_C* SpeedScreenEffectWidget;//[Offset: 0x1b28, Size: 0x8]
	void IsLocalPlayerOnVehicleOrSpectated(out bool bLocalPlayerOnVehicleOrSpectated, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, VehicleSeatSlot CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsLocalPlayerSpectatingMe_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x14d22312cd041
	void ReceiveTick(float DeltaSeconds);// 0xffffff87312cd000
	void ExecuteUbergraph_BP_VH_Hover_Soroll04(int EntryPoint, float K2Node_Event_DeltaSeconds, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GetCameraShakeGlobalSetting_bUseCameraShake, bool CallFunc_IsInViewport_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, CameraShake* CallFunc_PlayCameraShake_ReturnValue, bool CallFunc_IsLocalPlayerOnVehicleOrSpectated_bLocalPlayerOnVehicleOrSpectated, float CallFunc_GetSpeedInKmh_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FX_Widget_VehicleSpeedLine_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x174173154d008

--------------------------------
Class: SolarIronManVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	FName LeftHandSocket;//[Offset: 0x14d0, Size: 0x8]
	FName RightHandSocket;//[Offset: 0x14d8, Size: 0x8]
	FName LeftFootSocket;//[Offset: 0x14e0, Size: 0x8]
	FName RightFootSocket;//[Offset: 0x14e8, Size: 0x8]
	FName BackPackSocket;//[Offset: 0x14f0, Size: 0x8]
	AnimMontage* RotationLaserMontage;//[Offset: 0x14f8, Size: 0x28]
	Vector BoxHalfSize;//[Offset: 0x1520, Size: 0xc]
	int QuerySameActorMaxNum;//[Offset: 0x152c, Size: 0x4]
	float VehicleSpeedThresholdFromStandToLie;//[Offset: 0x1530, Size: 0x4]
	VehicleVFX LeftHandBulletEffect;//[Offset: 0x1540, Size: 0x90]
	VehicleVFX LeftHandMuzzleEffect;//[Offset: 0x15d0, Size: 0x90]
	VehicleVFX RightHandBulletEffect;//[Offset: 0x1660, Size: 0x90]
	VehicleVFX RightHandMuzzleEffect;//[Offset: 0x16f0, Size: 0x90]
	VehicleVFX HitEffect;//[Offset: 0x1780, Size: 0x90]
	VehicleVFX[] IronManJetEffectInfo;//[Offset: 0x1810, Size: 0x10]
	byte[] HitDecalExceptObjTypes;//[Offset: 0x1820, Size: 0x10]
	ParticleSystem* HitDecalParticle;//[Offset: 0x1830, Size: 0x28]
	Vector HitDecalScale;//[Offset: 0x1858, Size: 0xc]
	float HitDecalInterval;//[Offset: 0x1864, Size: 0x4]
	float HitDecalBeginTime;//[Offset: 0x1868, Size: 0x4]
	float HitDecalEndTime;//[Offset: 0x186c, Size: 0x4]
	float HitDecalLength;//[Offset: 0x1870, Size: 0x4]
	float SmoothRotationSpeed;//[Offset: 0x1878, Size: 0x4]
	float MaxJetEffectFXkgValue;//[Offset: 0x187c, Size: 0x4]
	FName JetEffectFXkgName;//[Offset: 0x1880, Size: 0x8]
	class GameplayEffect* CanNotSwitchSeat;//[Offset: 0x1888, Size: 0x8]
	StaticMesh* IronManStaticMeshWithDriver;//[Offset: 0x18e0, Size: 0x28]
	StaticMesh* IronManStaticMeshWithNoDriver;//[Offset: 0x1908, Size: 0x28]
	bool bAddRiderSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1930, Size: 0x1]
	VehicleSeatSlot RiderSeatSlot;//[Offset: 0x1938, Size: 0x1b8]
	void OnIronManRootHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x4a3e312cd041

--------------------------------
Class: SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SolarHoverVehicleMovement* VehicleMovement;//[Offset: 0x14a8, Size: 0x8]
	VehicleBasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x14b0, Size: 0x20]
	void OnVehicleRootHitForAttachPlatform(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x44ad312cd041
	void OnRep_ReplicatedBasedMovement(VehicleBasedMovementInfo PreviousBasedMovement);// 0x44ac312cd041
	void OnPlatformActorEndplay(Actor* Actor, byte EndPlayReason);// 0x44ab312cd041

--------------------------------
Class: SolarHoverVehicleMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x228, Size: 0x8]
	float MinLocationDiffForThrusterTrace;//[Offset: 0x230, Size: 0x4]
	float MinRotationDiffForThrusterTrace;//[Offset: 0x234, Size: 0x4]
	float DriverJustOnTimer;//[Offset: 0x238, Size: 0x4]
	Vector MassOffset;//[Offset: 0x23c, Size: 0xc]
	float HoverForce;//[Offset: 0x248, Size: 0x4]
	float HoverSpringCoefficient;//[Offset: 0x24c, Size: 0x4]
	float HoverDampingCoefficient;//[Offset: 0x250, Size: 0x4]
	float HoverHeight;//[Offset: 0x254, Size: 0x4]
	float MinHoverHeight;//[Offset: 0x258, Size: 0x4]
	float BouncinessForMinHoverHeight;//[Offset: 0x25c, Size: 0x4]
	ThrusterData[] ThrusterDataArray;//[Offset: 0x260, Size: 0x10]
	CurveFloat* DustEffectScaleCurve;//[Offset: 0x270, Size: 0x8]
	float ThrusterTargetAnimationBlendSpeed;//[Offset: 0x278, Size: 0x4]
	float YawDegreeDifference;//[Offset: 0x27c, Size: 0x4]
	float SpoilerRotateSpeed;//[Offset: 0x280, Size: 0x4]
	float MaxRudderRoll;//[Offset: 0x284, Size: 0x4]
	float MinRudderRoll;//[Offset: 0x288, Size: 0x4]
	float MaxRudderYaw;//[Offset: 0x28c, Size: 0x4]
	float MinRudderYaw;//[Offset: 0x290, Size: 0x4]
	RuntimeFloatCurve AccelerationCurve;//[Offset: 0x298, Size: 0x88]
	float MaxSideMovingSpeed;//[Offset: 0x320, Size: 0x4]
	float MaxBackwardMovingSpeed;//[Offset: 0x324, Size: 0x4]
	float DecelerationDegree;//[Offset: 0x328, Size: 0x4]
	float DecelerationOnInput;//[Offset: 0x32c, Size: 0x4]
	float DecelerationOnMovingDirection;//[Offset: 0x330, Size: 0x4]
	float MinDecelerationOnMovingDirection;//[Offset: 0x334, Size: 0x4]
	RuntimeFloatCurve DecelerationOnSide;//[Offset: 0x338, Size: 0x88]
	RuntimeFloatCurve AccelerationMultiplierForSideVelocity;//[Offset: 0x3c0, Size: 0x88]
	float MaxControllableDegree;//[Offset: 0x448, Size: 0x4]
	float AdditionalDegreeForStablize;//[Offset: 0x44c, Size: 0x4]
	GameplayTagContainer InAirControllableTags;//[Offset: 0x450, Size: 0x20]
	float TimerForAntiStuck;//[Offset: 0x470, Size: 0x4]
	float StuckAcceleration;//[Offset: 0x474, Size: 0x4]
	float StuckAccelerationLerpSpeed;//[Offset: 0x478, Size: 0x4]
	float GravityAcceleration;//[Offset: 0x47c, Size: 0x4]
	float GravityWithoutDriver;//[Offset: 0x480, Size: 0x4]
	float LandingDuration;//[Offset: 0x484, Size: 0x4]
	float MaximumVelocityOnZWithoutDriver;//[Offset: 0x488, Size: 0x4]
	float DecelerationRateWithoutDriver;//[Offset: 0x48c, Size: 0x4]
	float AngularDampingWithoutDriver;//[Offset: 0x490, Size: 0x4]
	float WaterLineForFloatingForce;//[Offset: 0x494, Size: 0x4]
	float UpwardAccelerationFloatingOnWater;//[Offset: 0x498, Size: 0x4]
	float WaterAlignSpeed;//[Offset: 0x49c, Size: 0x4]
	float WaterHeightWithoutDriver;//[Offset: 0x4a0, Size: 0x4]
	PIDController UpwardForcePIDController;//[Offset: 0x4a4, Size: 0x1c]
	float RotateAccelaration;//[Offset: 0x4c0, Size: 0x4]
	float RotateDecelaration;//[Offset: 0x4c4, Size: 0x4]
	float MaxAngularSpeed;//[Offset: 0x4c8, Size: 0x4]
	float HoverHeightMultiplierAfterBroken;//[Offset: 0x4cc, Size: 0x4]
	float ParticleMultiplierAfterBroken;//[Offset: 0x4d0, Size: 0x4]
	VehicleVFX[] ThrusterParticles;//[Offset: 0x4d8, Size: 0x10]
	VehicleVFX MovementParticles;//[Offset: 0x4f0, Size: 0x90]
	ThrusterState[] ThrusterStateArray;//[Offset: 0x7a8, Size: 0x10]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x7b8, Size: 0x8]
	SolarNetMovementComponent* VehicleNetMovement;//[Offset: 0x7c0, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x7c8, Size: 0x8]
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x49b2312cd041
	void OnDriverGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x49b1312cd041
	void OnDriverGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x49b0312cd041

--------------------------------
Class: ThrusterData
	float HoverHeightMultiplierInForward;//[Offset: 0x0, Size: 0x4]
	float HoverHeightMultiplierInBackward;//[Offset: 0x4, Size: 0x4]
	float HoverHeightMultiplierInLeft;//[Offset: 0x8, Size: 0x4]
	float HoverHeightMultiplierInRight;//[Offset: 0xc, Size: 0x4]
	bool bRaiseDust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float DustEffectScale;//[Offset: 0x14, Size: 0x4]
	Vector DustEffectOffest;//[Offset: 0x18, Size: 0xc]
	FName ThrusterSocket;//[Offset: 0x24, Size: 0x8]
	Vector ThrusterOffsetIfNoValidSocket;//[Offset: 0x2c, Size: 0xc]
	float SweepRadius;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PIDController
	float PCoeff;//[Offset: 0x0, Size: 0x4]
	float ICoeff;//[Offset: 0x4, Size: 0x4]
	float DCoeff;//[Offset: 0x8, Size: 0x4]
	float Minimum;//[Offset: 0xc, Size: 0x4]
	float Maximum;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ThrusterState
	HitResult TouchGroundHit;//[Offset: 0x38, Size: 0x88]

--------------------------------
Class: VehicleBasedMovementInfo
	SolarVehiclePawn* MovementBaseActor;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 RelativeLocation;//[Offset: 0x8, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x14, Size: 0xc]

--------------------------------
Class: BP_VH_Hover_Soroll04_ShapedGun_C.SolarVehicleIronManWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object

--------------------------------
Class: SolarVehicleIronManWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	AnimMontage* DriverStandAttackRight;//[Offset: 0x1370, Size: 0x28]
	AnimMontage* DriverLieAttackRight;//[Offset: 0x1398, Size: 0x28]
	FName AttackSectionName;//[Offset: 0x13c0, Size: 0x8]
	SkeletalMeshComponent* GetDriverCharacterMesh();// 0x54b3312cd041

--------------------------------
Class: BP_Sniper_9A01_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0x171c3312cd041

--------------------------------
Class: BP_VH_Tire_9A03_Rocket_C.BP_SolarVehicleWeapon_C.SolarVehicleWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1370, Size: 0x8]
	void OnFireChargeBurstCountChange(int BurstSum);// 0x23a45312cd041
	void ExecuteUbergraph_BP_VH_Tire_9A03_Rocket(int EntryPoint, bool CallFunc_IsValid_ReturnValue, int CallFunc_PostAkEventByName_ReturnValue, int K2Node_Event_BurstSum, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xfffffffe6d56b380

--------------------------------
Class: BP_SolarVehicleWeapon_C.SolarVehicleWeapon.SolarWeapon.Actor.Object

--------------------------------
Class: BP_VH_Hover_9A03_C.SolarHoverCraftVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1560, Size: 0x8]
	BoxComponent* Platform;//[Offset: 0x1568, Size: 0x8]
	BoxComponent* AutofirecheckComponent.;//[Offset: 0x1570, Size: 0x8]
	float ThrusterDis;//[Offset: 0x1578, Size: 0x4]
	FName PhysicsBone;//[Offset: 0x157c, Size: 0x8]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1584, Size: 0x1]
	float MinCameraShakeSpeed;//[Offset: 0x1588, Size: 0x4]
	float MinScreenEffectSpeed;//[Offset: 0x158c, Size: 0x4]
	CurveFloat* CameraShakeCurve;//[Offset: 0x1590, Size: 0x8]
	CurveFloat* ScreenEffectOpacityCurve;//[Offset: 0x1598, Size: 0x8]
	CurveFloat* ScreenEffectPlayRateCurve;//[Offset: 0x15a0, Size: 0x8]
	class CameraShake* SpeedVehicleCameraShake;//[Offset: 0x15a8, Size: 0x8]
	CameraShake* SpeedVehicleCameraShakeModifier;//[Offset: 0x15b0, Size: 0x8]
	FX_Widget_VehicleSpeedLine_C* SpeedScreenEffectWidget;//[Offset: 0x15b8, Size: 0x8]
	static void IsLocalPlayerOnVehicleOrSpectated(out bool bLocalPlayerOnVehicleOrSpectated, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, VehicleSeatSlot CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsLocalPlayerSpectatingMe_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xffffff86312cd002
	void OnComponentHit_Event(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0xd6353154d008
	void BndEvt__Sphere3_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xffffff87312cd000
	void BndEvt__Sphere2_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x39457312e9045
	void BndEvt__Sphere1_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xffffff87312cd000
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0xfffffffe78a54400
	void ReceiveBeginPlay();// 0xffffff87312cd000
	void ReceiveTick(float DeltaSeconds);// 0xffffff86312cd002
	void ExecuteUbergraph_BP_VH_Hover_9A03(int EntryPoint, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GetCameraShakeGlobalSetting_bUseCameraShake, bool CallFunc_IsInViewport_ReturnValue, PrimitiveComponent* K2Node_CustomEvent_HitComponent, Actor* K2Node_CustomEvent_OtherActor, PrimitiveComponent* K2Node_CustomEvent_OtherComp, Vector K2Node_CustomEvent_NormalImpulse, const HitResult K2Node_CustomEvent_Hit, float K2Node_Event_DeltaSeconds, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, CameraShake* CallFunc_PlayCameraShake_ReturnValue, bool CallFunc_IsLocalPlayerOnVehicleOrSpectated_bLocalPlayerOnVehicleOrSpectated, float CallFunc_GetSpeedInKmh_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, FX_Widget_VehicleSpeedLine_C* CallFunc_Create_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, bool CallFunc_IsValid_ReturnValue);// 0xfffffffff4807f80

--------------------------------
Class: SolarHoverCraftVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	float MeshOffsetWithoutDriver;//[Offset: 0x14d0, Size: 0x4]
	float MeshOffsetLerpSpeed;//[Offset: 0x14d4, Size: 0x4]
	<enum,float> HoverCraftHitImpulseMul;//[Offset: 0x14d8, Size: 0x50]
	float HoverCraftHitImpulseLimit;//[Offset: 0x1528, Size: 0x4]
	BoxComponent* BodyBoxComp;//[Offset: 0x1530, Size: 0x8]
	int[] BodyTraceExceptVehicleTypeIDs;//[Offset: 0x1538, Size: 0x10]
	void OnHoverCraftVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x49ab312cd041
	void CheckBody();// 0x49aa312cd041

--------------------------------
Class: BP_9A02_Summon_C.BP_VehicleSummonWeapon_C.SolarSummonWeapon_Vehicle.SolarPlayerItemWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf70, Size: 0x8]
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0x16bb23154d001
	void ExecuteUbergraph_BP_9A02_Summon(int EntryPoint, Vector CallFunc_GetSocketLocation_ReturnValue, ParticleSystemComponent* K2Node_Event_PSC, const Vector K2Node_Event_Position, const float K2Node_Event_Scale, bool CallFunc_IsValid_ReturnValue);// 0x521312cd002

--------------------------------
Class: BP_VehicleSummonWeapon_C.SolarSummonWeapon_Vehicle.SolarPlayerItemWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf60, Size: 0x8]
	SolarSummonDetectionComponent* SolarVehicleSummonDetectionComponent;//[Offset: 0xf68, Size: 0x8]
	FString GetModuleName();// 0xfffffffebef0f460
	void K2_SwitchDrawDistance(bool Hold);// 0xfffffffeaed5a480
	void ExecuteUbergraph_BP_VehicleSummonWeapon(int EntryPoint, bool K2Node_Event_hold);// 0xffffff88312cd001

--------------------------------
Class: SolarSummonWeapon_Vehicle.SolarPlayerItemWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	bool bRequestSummonDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf51, Size: 0x1]
	bool bResponseSummonDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf52, Size: 0x1]
	void ServerRequestSummonDetection(const SolarSummonData InSummonData);// 0x4e85312cd041
	void ClientResponseSummonDetection(bool InbValid, const SolarSummonData InSummonData);// 0x4e84312cd041

--------------------------------
Class: SolarPlayerItemWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	SolarCharacter* CurrentAbilityOwner;//[Offset: 0xf48, Size: 0x8]

--------------------------------
Class: BP_WL03_Summon_C.BP_VehicleSummonWeapon_C.SolarSummonWeapon_Vehicle.SolarPlayerItemWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf70, Size: 0x8]
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0xfa0f3154d001
	void ExecuteUbergraph_BP_WL03_Summon(int EntryPoint, Vector CallFunc_GetSocketLocation_ReturnValue, ParticleSystemComponent* K2Node_Event_PSC, const Vector K2Node_Event_Position, const float K2Node_Event_Scale, bool CallFunc_IsValid_ReturnValue);// 0x1014b312cd041

--------------------------------
Class: BP_BigWaterGun_C.BigWaterGun.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x388, Size: 0x8]
	void ReceiveBeginPlay();// 0x1ae71312cd000
	void ExecuteUbergraph_BP_BigWaterGun(int EntryPoint, Pawn* CallFunc_GetPlayerPawn_ReturnValue, SolarCameraComponent* CallFunc_GetCameraComponentFromActor_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0xffffffff08b45580

--------------------------------
Class: BigWaterGun.Actor.Object
	float CylinderRadius;//[Offset: 0x228, Size: 0x4]
	float CylinderLength;//[Offset: 0x22c, Size: 0x4]
	float TraceIntaval;//[Offset: 0x230, Size: 0x4]
	float DamageChaPerInteval;//[Offset: 0x234, Size: 0x4]
	float DamageVehPerInteval;//[Offset: 0x238, Size: 0x4]
	float DamageDecayFirst;//[Offset: 0x23c, Size: 0x4]
	float DamageDecaySecond;//[Offset: 0x240, Size: 0x4]
	SoftObjectPath MeshPath;//[Offset: 0x248, Size: 0x18]
	FName MeshSocket;//[Offset: 0x260, Size: 0x8]
	Rotator WaterColumeEffectRotator;//[Offset: 0x268, Size: 0xc]
	ParticleSystem* WaterColumnEffect;//[Offset: 0x278, Size: 0x8]
	FName InstigatorEffectID;//[Offset: 0x280, Size: 0x8]
	class CameraShake* CameraShakeClass;//[Offset: 0x288, Size: 0x8]
	class UserWidget* InCrossHairClass;//[Offset: 0x290, Size: 0x8]
	float NearlyEndTime;//[Offset: 0x298, Size: 0x4]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	float MuzzleTraceOffset;//[Offset: 0x2a0, Size: 0x4]
	FName ShotAnimNotifyName;//[Offset: 0x2a4, Size: 0x8]
	FName UnequipAnimNotifyName;//[Offset: 0x2ac, Size: 0x8]
	FName UnequipAnimNotifyName_Gatling;//[Offset: 0x2b4, Size: 0x8]
	SkeletalMeshComponent* Mesh;//[Offset: 0x2c0, Size: 0x8]
	bool bInFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	ParticleSystemComponent* ClientWaterColumnEffectHandle;//[Offset: 0x2d0, Size: 0x8]
	int InstigatorEffectHandle;//[Offset: 0x2d8, Size: 0x4]
	CameraShake* CameraShakeInstance;//[Offset: 0x2e0, Size: 0x8]
	CrossHairWidget* CrossHairWidget;//[Offset: 0x2f0, Size: 0x8]
	GameplayEffectSpecHandle SlowDownEffectHandle;//[Offset: 0x2f8, Size: 0x10]
	FName LeftHandIKGripSocketName;//[Offset: 0x378, Size: 0x8]
	GameplayTag BigWaterGunOrnamentTag;//[Offset: 0x380, Size: 0x8]
	void ServerHit(const HitResult Impact, int DamageDacayCount);// 0x3d33312cd041
	void PlayNearlyEndSound();// 0x3d32312cd041
	void OnRep_InFire();// 0x3d31312cd041
	void OnMontageNotifyCallBack(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x3d30312cd041

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
