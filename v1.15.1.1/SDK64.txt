Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x120, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x130, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0x168, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x178, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x180, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x188, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x190, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x198, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b6, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x1b8, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x1c0, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x1c8, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x1d0, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x1d8, Size: 0x8]
	Level*[] Levels;//[Offset: 0x1e0, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x1f0, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x220, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x228, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x238, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x240, Size: 0x8]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x298, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x2a8, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x660, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x6f0, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x6d2f078ea041
	void HandleTimelineScrubbed();// 0x6d2e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x1135078ea031
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x230, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x234, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x235, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x235, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x235, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x235, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x235, Size: 0x1]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0x238, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0x248, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0x258, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0x268, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0x278, Size: 0x10]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x288, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x288, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x288, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x288, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x289, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x290, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x298, Size: 0x8]
	float WorldToMeters;//[Offset: 0x2a0, Size: 0x4]
	float KillZ;//[Offset: 0x2a4, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x2a8, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x2b0, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x2b4, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2b8, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2c0, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2c8, Size: 0x28]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2f0, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2f8, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x2fc, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x308, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x30c, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x310, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x318, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x338, Size: 0x24]
	float MonoCullingDistance;//[Offset: 0x35c, Size: 0x4]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x360, Size: 0x8]
	float TimeDilation;//[Offset: 0x368, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x36c, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x370, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x374, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x378, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x37c, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x380, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x384, Size: 0x40]
	PlayerState* Pauser;//[Offset: 0x3c8, Size: 0x8]
	NetViewer[] ReplicationViewers;//[Offset: 0x3d0, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3e0, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x3f0, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x3f8, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x400, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x408, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x418, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x5fee078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Info.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfHiddenInGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x62, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x63, Size: 0x1]
	byte RemoteRole;//[Offset: 0x64, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x68, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0x9c, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xa0, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xa8, Size: 0x40]
	Actor* Owner;//[Offset: 0xe8, Size: 0x8]
	FName NetDriverName;//[Offset: 0xf0, Size: 0x8]
	byte Role;//[Offset: 0xf8, Size: 0x1]
	byte NetDormancy;//[Offset: 0xf9, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xfa, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0xfb, Size: 0x1]
	int InputPriority;//[Offset: 0xfc, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x100, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x108, Size: 0x4]
	int NetTag;//[Offset: 0x10c, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x110, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x114, Size: 0x4]
	float NetPriority;//[Offset: 0x118, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x120, Size: 0x8]
	Actor*[] Children;//[Offset: 0x128, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x138, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x140, Size: 0x10]
	FName[] Layers;//[Offset: 0x158, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x168, Size: 0x8]
	FName[] Tags;//[Offset: 0x178, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x188, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x189, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x18a, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x18b, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x18c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x18d, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x18e, Size: 0x1]
	delegate OnClicked;//[Offset: 0x18f, Size: 0x1]
	delegate OnReleased;//[Offset: 0x190, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x191, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x192, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x193, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x194, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x195, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x196, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x197, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f8, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x208, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x1b9d078ea041
	void UserConstructionScript();// 0x1b9c078ea041
	void TearOff();// 0x1b9b078ea041
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x1b9a078ea041
	void SetTickGroup(byte NewTickGroup);// 0x1b99078ea041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x1b98078ea041
	void SetReplicates(bool bInReplicates);// 0x1b97078ea041
	void SetReplicateMovement(bool bInReplicateMovement);// 0x1b96078ea041
	void SetOwner(Actor* NewOwner);// 0x1b95078ea041
	void SetNetDormancy(byte NewDormancy);// 0x1b93078ea041
	void SetLifeSpan(float InLifespan);// 0x1b92078ea041
	void SetAutoDestroyWhenFinished(bool bVal);// 0x1b91078ea041
	void SetActorTickInterval(float TickInterval);// 0x1b90078ea041
	void SetActorTickEnabled(bool bEnabled);// 0x1b8f078ea041
	void SetActorScale3D(Vector NewScale3D);// 0x1b8e078ea041
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x1b8d078ea041
	void SetActorHiddenInGame(bool bNewHidden);// 0x1b8c078ea041
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x1b8b078ea041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1b8a078ea041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1b89078ea041
	void ReceiveTick(float DeltaSeconds);// 0x1b88078ea041
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1b87078ea041
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1b86078ea041
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1b85078ea041
	void ReceiveEndPlay(byte EndPlayReason);// 0x1b84078ea041
	void ReceiveDestroyed();// 0x1b83078ea041
	void ReceiveBeginPlay();// 0x1b82078ea041
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1b81078ea041
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1b80078ea041
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x1b7f078ea041
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x1b7e078ea041
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x1b7d078ea041
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x1b7c078ea041
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x1b7b078ea041
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x1b7a078ea041
	void ReceiveActorEndCursorOver();// 0x1b79078ea041
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x1b78078ea041
	void ReceiveActorBeginCursorOver();// 0x1b77078ea041
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x1b76078ea041
	void OnRep_ReplicateMovement();// 0x1b75078ea041
	void OnRep_ReplicatedMovement();// 0x1b74078ea041
	void OnRep_Owner();// 0x1b73078ea041
	void OnRep_Instigator();// 0x1b72078ea041
	void OnRep_AttachmentReplication();// 0x1b71078ea041
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x1b70078ea041
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x1b6f078ea041
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x1b6e078ea041
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b6d078ea041
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x1b6c078ea041
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b6b078ea041
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b6a078ea041
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b69078ea041
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b68078ea041
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b67078ea041
	void K2_OnReset();// 0x1b66078ea041
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1b65078ea041
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x1b64078ea041
	SceneComponent* K2_GetRootComponent();// 0x1b63078ea041
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x1b62078ea041
	Rotator K2_GetActorRotation();// 0x1b61078ea041
	Vector K2_GetActorLocation();// 0x1b60078ea041
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x1b5e078ea041
	void K2_DestroyComponent(ActorComponent* Component);// 0x1b5d078ea041
	void K2_DestroyActor();// 0x1b5c078ea041
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x1b5b078ea041
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x1b59078ea041
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x1b58078ea041
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x1b56078ea041
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b55078ea041
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b54078ea041
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b53078ea041
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b52078ea041
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b51078ea041
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1b50078ea041
	bool IsOverlappingActor(const Actor* Other);// 0x1b4f078ea041
	bool IsChildActor();// 0x1b4e078ea041
	bool IsActorTickEnabled();// 0x1b4d078ea041
	bool IsActorBeingDestroyed();// 0x1b4c078ea041
	bool HasAuthority();// 0x1b4b078ea041
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x1b4a078ea041
	Vector GetVelocity();// 0x1b49078ea041
	Transform GetTransform();// 0x1b48078ea041
	bool GetTickableWhenPaused();// 0x1b47078ea041
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x1b46078ea041
	byte GetRemoteRole();// 0x1b45078ea041
	ChildActorComponent* GetParentComponent();// 0x1b44078ea041
	Actor* GetParentActor();// 0x1b43078ea041
	Actor* GetOwner();// 0x1b42078ea041
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x1b41078ea041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x1b40078ea041
	byte GetLocalRole();// 0x1b3e078ea041
	float GetLifeSpan();// 0x1b3d078ea041
	Controller* GetInstigatorController();// 0x1b3c078ea041
	Pawn* GetInstigator();// 0x1b3b078ea041
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x1b3a078ea041
	float GetInputAxisValue(const FName InputAxisName);// 0x1b39078ea041
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x1b38078ea041
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x1b37078ea041
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x1b36078ea041
	float GetGameTimeSinceCreation();// 0x1b35078ea041
	float GetDotProductTo(const Actor* OtherActor);// 0x1b34078ea041
	float GetDistanceTo(const Actor* OtherActor);// 0x1b33078ea041
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x1b32078ea041
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x1b31078ea041
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x1b30078ea041
	FName GetAttachParentSocketName();// 0x1b2f078ea041
	Actor* GetAttachParentActor();// 0x1b2e078ea041
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x1b2d078ea041
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x1b2c078ea041
	Vector GetActorUpVector();// 0x1b2b078ea041
	float GetActorTimeDilation();// 0x1b2a078ea041
	float GetActorTickInterval();// 0x1b29078ea041
	Vector GetActorScale3D();// 0x1b28078ea041
	Vector GetActorRightVector();// 0x1b27078ea041
	Vector GetActorRelativeScale3D();// 0x1b26078ea041
	Vector GetActorForwardVector();// 0x1b25078ea041
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x1b24078ea041
	bool GetActorEnableCollision();// 0x1b23078ea041
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x1b22078ea041
	void ForceNetUpdate();// 0x1b21078ea041
	void FlushNetDormancy();// 0x1b20078ea041
	void EnableInput(PlayerController* PlayerController);// 0x1b1f078ea041
	void DisableInput(PlayerController* PlayerController);// 0x1b1e078ea041
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x1b1d078ea041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1b1c078ea041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1b1b078ea041
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x1b1a078ea041
	bool ActorHasTag(FName Tag);// 0x1b19078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorTickFunction.TickFunction
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector_NetQuantize100.Vector
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfNotVisiable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14d, Size: 0x1]
	bool bDisableUpdateComponentToWorldIfTickStateCoolingDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14d, Size: 0x1]
	bool bDisableDeferredUpdateComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14d, Size: 0x1]
	byte Mobility;//[Offset: 0x14f, Size: 0x1]
	byte DetailMode;//[Offset: 0x150, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x2cb9078ea041
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x2cb8078ea041
	void SetWorldScale3D(Vector NewScale);// 0x2cb7078ea041
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren, int Flag);// 0x2cb6078ea041
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x2cb5078ea041
	void SetRelativeScale3D(Vector NewScale3D);// 0x2cb4078ea041
	void SetMobility(byte NewMobility);// 0x2cb2078ea041
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x2cb1078ea041
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x2cb0078ea041
	void ResetRelativeTransform();// 0x2caf078ea041
	void OnRep_Visibility(bool OldValue);// 0x2cae078ea041
	void OnRep_Transform();// 0x2cad078ea041
	void OnRep_AttachSocketName();// 0x2cac078ea041
	void OnRep_AttachParent();// 0x2cab078ea041
	void OnRep_AttachChildren();// 0x2caa078ea041
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca9078ea041
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca8078ea041
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca7078ea041
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca6078ea041
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca5078ea041
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca4078ea041
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca3078ea041
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2ca2078ea041
	Transform K2_GetComponentToWorld();// 0x2ca1078ea041
	Vector K2_GetComponentScale();// 0x2ca0078ea041
	Rotator K2_GetComponentRotation();// 0x2c9f078ea041
	Vector K2_GetComponentLocation();// 0x2c9e078ea041
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x2c9d078ea041
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x2c9c078ea041
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x2c9b078ea041
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c9a078ea041
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c99078ea041
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c98078ea041
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c97078ea041
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c96078ea041
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c95078ea041
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c94078ea041
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x2c93078ea041
	bool IsVisible();// 0x2c92078ea041
	bool IsSimulatingPhysics(FName BoneName);// 0x2c91078ea041
	bool IsAnySimulatingPhysics();// 0x2c90078ea041
	Vector GetUpVector();// 0x2c8f078ea041
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace, bool bDoParallel);// 0x2c8d078ea041
	Rotator GetSocketRotation(FName InSocketName);// 0x2c8c078ea041
	Quat GetSocketQuaternion(FName InSocketName);// 0x2c8b078ea041
	Vector GetSocketLocation(FName InSocketName);// 0x2c8a078ea041
	bool GetShouldUpdatePhysicsVolume();// 0x2c89078ea041
	Vector GetRightVector();// 0x2c88078ea041
	Transform GetRelativeTransform();// 0x2c87078ea041
	PhysicsVolume* GetPhysicsVolume();// 0x2c86078ea041
	void GetParentComponents(out SceneComponent*[] Parents);// 0x2c85078ea041
	int GetNumChildrenComponents();// 0x2c84078ea041
	Vector GetForwardVector();// 0x2c83078ea041
	Vector GetComponentVelocity();// 0x2c82078ea041
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x2c81078ea041
	SceneComponent* GetChildComponent(int ChildIndex);// 0x2c80078ea041
	FName GetAttachSocketName();// 0x2c7f078ea041
	SceneComponent* GetAttachParent();// 0x2c7e078ea041
	FName[] GetAllSocketNames();// 0x2c7d078ea041
	bool DoesSocketExist(FName InSocketName);// 0x2c7c078ea041
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x2c7b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 0x1]
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10]
	void ToggleActive();// 0x11b8078ea041
	void SetTickGroup(byte NewTickGroup);// 0x11b6078ea041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x11b5078ea041
	void SetIsReplicated(bool ShouldReplicate);// 0x11b4078ea041
	void SetComponentTickInterval(float TickInterval);// 0x11b3078ea041
	void SetComponentTickEnabled(bool bEnabled);// 0x11b2078ea041
	void SetAutoActivate(bool bNewAutoActivate);// 0x11b1078ea041
	void SetActive(bool bNewActive, bool bReset);// 0x11b0078ea041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x11af078ea041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x11ae078ea041
	void ReceiveTick(float DeltaSeconds);// 0x11ad078ea041
	void ReceiveEndPlay(byte EndPlayReason);// 0x11ac078ea041
	void ReceiveBeginPlay();// 0x11ab078ea041
	void OnRep_IsActive();// 0x11aa078ea041
	void K2_DestroyComponent(Object* Object);// 0x11a9078ea041
	bool IsComponentTickEnabled();// 0x11a8078ea041
	bool IsBeingDestroyed();// 0x11a7078ea041
	bool IsActive();// 0x11a6078ea041
	Actor* GetOwner();// 0x11a5078ea041
	float GetComponentTickInterval();// 0x11a4078ea041
	void Deactivate();// 0x11a3078ea041
	bool ComponentHasTag(FName Tag);// 0x11a2078ea041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x11a1078ea041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x11a0078ea041
	void Activate(bool bReset);// 0x119f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorComponentTickFunction.TickFunction
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x260, Size: 0x4]
	int Priority;//[Offset: 0x264, Size: 0x4]
	float FluidFriction;//[Offset: 0x268, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Volume.Brush.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x228, Size: 0x1]
	Color BrushColor;//[Offset: 0x22c, Size: 0x4]
	int PolyFlags;//[Offset: 0x230, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x234, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x234, Size: 0x1]
	Model* Brush;//[Offset: 0x238, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x240, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x250, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Model.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x540, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x548, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x320, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x324, Size: 0x4]
	float LDMinimalismDrawDistance;//[Offset: 0x328, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x32c, Size: 0x4]
	float MinScreenSizeCulling;//[Offset: 0x330, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x334, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x335, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x336, Size: 0x1]
	enum LightmapType;//[Offset: 0x337, Size: 0x1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x338, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x339, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x339, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x339, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x339, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x339, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x339, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33a, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33a, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33a, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33a, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33a, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33a, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33a, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33a, Size: 0x1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33b, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33b, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33b, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33b, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33b, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33b, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33b, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33b, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33c, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33c, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33c, Size: 0x1]
	bool bForceGenLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33c, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33c, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33c, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33c, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33c, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33d, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33d, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33d, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33d, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33d, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33d, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33d, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33d, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33e, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x33e, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x33e, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33e, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x33e, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x33e, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x33e, Size: 0x1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x33e, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x340, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x342, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x343, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x344, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x348, Size: 0x4]
	int MainPassDepthStencilValue;//[Offset: 0x34c, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x350, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x360, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x370, Size: 0x4]
	int VisibilityId;//[Offset: 0x374, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x378, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x388, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x389, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x38a, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x38b, Size: 0x1]
	float LpvBiasMultiplier;//[Offset: 0x390, Size: 0x4]
	float BoundsScale;//[Offset: 0x39c, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x3b0, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x3c0, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x3e0, Size: 0x130]
	delegate OnComponentHit;//[Offset: 0x510, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x511, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x512, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x513, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x514, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x516, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x517, Size: 0x1]
	delegate OnClicked;//[Offset: 0x518, Size: 0x1]
	delegate OnReleased;//[Offset: 0x519, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x51a, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x51b, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x51c, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x51d, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x538, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0x2f4b078ea041
	void WakeRigidBody(FName BoneName);// 0x2f4a078ea041
	void WakeAllRigidBodies();// 0x2f49078ea041
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x2f48078ea041
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x2f47078ea041
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x2f46078ea041
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x2f45078ea041
	void SetSimulatePhysics(bool bSimulate);// 0x2f44078ea041
	void SetRenderMainPassStencil(bool bValue);// 0x2f43078ea041
	void SetRenderInMainPass(bool bValue);// 0x2f42078ea041
	void SetRenderCustomDepth(bool bValue);// 0x2f41078ea041
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x2f40078ea041
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x2f3f078ea041
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2f3e078ea041
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2f3d078ea041
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x2f3c078ea041
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x2f3b078ea041
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2f3a078ea041
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2f39078ea041
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x2f38078ea041
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x2f37078ea041
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x2f36078ea041
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x2f35078ea041
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x2f34078ea041
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x2f33078ea041
	void SetMassScale(FName BoneName, float InMassScale);// 0x2f32078ea041
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x2f31078ea041
	void SetMainPassStencilValue(int Value);// 0x2f30078ea041
	void SetLinearDamping(float InDamping);// 0x2f2f078ea041
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x2f2e078ea041
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x2f2d078ea041
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x2f2c078ea041
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x2f2b078ea041
	void SetEnableGravity(bool bGravityEnabled);// 0x2f2a078ea041
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x2f29078ea041
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x2f28078ea041
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x2f27078ea041
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x2f26078ea041
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x2f25078ea041
	void SetCustomDepthStencilValue(int Value);// 0x2f24078ea041
	void SetCullDistance(float NewCullDistance);// 0x2f23078ea041
	void SetConstraintMode(byte ConstraintMode);// 0x2f22078ea041
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x2f21078ea041
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x2f20078ea041
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x2f1f078ea041
	void SetCollisionObjectType(byte Channel);// 0x2f1e078ea041
	void SetCollisionEnabled(byte NewType);// 0x2f1d078ea041
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x2f1c078ea041
	void SetCastShadow(bool NewCastShadow);// 0x2f1b078ea041
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x2f1a078ea041
	void SetBoundsScale(float NewBoundsScale);// 0x2f19078ea041
	void SetAngularDamping(float InDamping);// 0x2f18078ea041
	void SetAllUseCCD(bool InUseCCD);// 0x2f17078ea041
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x2f16078ea041
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x2f15078ea041
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x2f14078ea041
	void SetAllMassScale(float InMassScale);// 0x2f13078ea041
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x2f12078ea041
	void PutRigidBodyToSleep(FName BoneName);// 0x2f11078ea041
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2f10078ea041
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2f0f078ea041
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2f0e078ea041
	bool K2_IsQueryCollisionEnabled();// 0x2f0d078ea041
	bool K2_IsPhysicsCollisionEnabled();// 0x2f0c078ea041
	bool K2_IsCollisionEnabled();// 0x2f0b078ea041
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x2f0a078ea041
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x2f09078ea041
	bool IsOverlappingActor(const Actor* Other);// 0x2f08078ea041
	bool IsGravityEnabled();// 0x2f07078ea041
	bool IsAnyRigidBodyAwake();// 0x2f06078ea041
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x2f05078ea041
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x2f04078ea041
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x2f02078ea041
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x2f01078ea041
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x2f00078ea041
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x2eff078ea041
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x2efe078ea041
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x2efd078ea041
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x2efc078ea041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x2efb078ea041
	int GetNumMaterials();// 0x2efa078ea041
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x2ef9078ea041
	MaterialInterface* GetMaterial(int ElementIndex);// 0x2ef8078ea041
	float GetMassScale(FName BoneName);// 0x2ef7078ea041
	float GetMass();// 0x2ef6078ea041
	float GetLinearDamping();// 0x2ef5078ea041
	Vector GetInertiaTensor(FName BoneName);// 0x2ef4078ea041
	bool GetGenerateOverlapEvents();// 0x2ef3078ea041
	byte GetCollisionResponseToChannel(byte Channel);// 0x2ef2078ea041
	FName GetCollisionProfileName();// 0x2ef1078ea041
	byte GetCollisionObjectType();// 0x2ef0078ea041
	byte GetCollisionEnabled();// 0x2eef078ea041
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x2eee078ea041
	Vector GetCenterOfMass(FName BoneName);// 0x2eed078ea041
	float GetAngularDamping();// 0x2eec078ea041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x2eeb078ea041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x2eea078ea041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x2ee9078ea041
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x2ee8078ea041
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x2ee7078ea041
	void ClearMoveIgnoreComponents();// 0x2ee6078ea041
	void ClearMoveIgnoreActors();// 0x2ee5078ea041
	bool CanCharacterStepUp(Pawn* Pawn);// 0x2ee4078ea041
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x2ee3078ea041
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x2ee2078ea041
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x2ee1078ea041
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x2ee0078ea041
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x2edf078ea041
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x2ede078ea041
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2edd078ea041
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x2edc078ea041
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x2edb078ea041
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x2eda078ea041
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x2ed9078ea041
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x2ed8078ea041
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x2ed7078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x120, Size: 0x130]
	Vector BuildScale3D;//[Offset: 0x258, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x1c]
	Transform Transform;//[Offset: 0x70, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicalMaterialPropertyBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x6396078ea041
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x6395078ea041
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x6394078ea041
	PhysicalMaterial* GetPhysicalMaterial();// 0x6393078ea041
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x6392078ea041
	Material* GetBaseMaterial();// 0x6391078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 0xc]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 0xc]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 0xc]
	byte MaterialDomain;//[Offset: 0x150, Size: 0x1]
	byte BlendMode;//[Offset: 0x151, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 0x1]
	byte ShadingModel;//[Offset: 0x154, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 0xc]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 0xc]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c4, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c4, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c4, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c4, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c4, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c5, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x1c6, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c7, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x1c8, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1cc, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x1d0, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d4, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1d8, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1dc, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e0, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e4, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1f4, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f8, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f8, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f8, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fa, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fa, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fb, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fb, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fb, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fb, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fb, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fb, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fb, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1fd, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fe, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fe, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fe, Size: 0x1]
	bool bZWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ff, Size: 0x1]
	byte DepthCompare;//[Offset: 0x200, Size: 0x1]
	bool bMainPassStencilWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x201, Size: 0x1]
	bool bMainPassStencilCompareEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x201, Size: 0x1]
	byte MainPassStencilCompare;//[Offset: 0x202, Size: 0x1]
	byte MainPassStencilRefValue;//[Offset: 0x203, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x204, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x204, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x204, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x205, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x206, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x206, Size: 0x1]
	byte StencilCompare;//[Offset: 0x207, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x208, Size: 0x1]
	byte RefractionMode;//[Offset: 0x209, Size: 0x1]
	int BlendablePriority;//[Offset: 0x20c, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x214, Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x218, Size: 0x4]
	Guid StateId;//[Offset: 0x21c, Size: 0x10]
	float MaxDisplacement;//[Offset: 0x22c, Size: 0x4]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2b8, Size: 0x228]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScalarMaterialInput.MaterialInput
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VectorMaterialInput.MaterialInput
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ColorMaterialInput.MaterialInput
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ShadingModelMaterialInput.MaterialInput
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 0x1a0]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 0x10]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 0x10]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 0x10]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 0x10]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 0x10]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 0x10]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 0x10]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 0x1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialCachedParameters
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 0x40]
	float[] ScalarValues;//[Offset: 0x140, Size: 0x10]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 0x10]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 0x10]
	Font*[] FontValues;//[Offset: 0x170, Size: 0x10]
	int[] FontPageValues;//[Offset: 0x180, Size: 0x10]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 0x10]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 0x10]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 0x10]
	bool[] Overrides;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x48, Size: 0x10]
	int LODBias;//[Offset: 0x58, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x5c, Size: 0x1]
	byte Filter;//[Offset: 0x5d, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0x5e, Size: 0x1]
	byte LODGroup;//[Offset: 0x5f, Size: 0x1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 0x4]
	int StreamingIndex;//[Offset: 0x34, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 0x4]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 0x1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AssetUserData.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xb8, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xbc, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte AddressX;//[Offset: 0xc1, Size: 0x1]
	byte AddressY;//[Offset: 0xc2, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xc4, Size: 0x8]
	int Blueprint_GetSizeY();// 0x66dc078ea041
	int Blueprint_GetSizeX();// 0x66db078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 0x1]
	int Size;//[Offset: 0x30, Size: 0x4]
	int TileCount;//[Offset: 0x34, Size: 0x4]
	int TileSize;//[Offset: 0x38, Size: 0x4]
	int TileBorderSize;//[Offset: 0x3c, Size: 0x4]
	int StreamLowMips;//[Offset: 0x40, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x54, Size: 0x4]
	int GetTileSize();// 0x6c68078ea041
	int GetTileCount();// 0x6c67078ea041
	int GetTileBorderSize();// 0x6c66078ea041
	int GetSize();// 0x6c65078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0xf0, Size: 0xc]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	uint32 BuildHash;//[Offset: 0x100, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4]
	int TileBorderSize;//[Offset: 0x4, Size: 0x4]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	float PlacementJitter;//[Offset: 0x10, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 0x4]
	int MinLOD;//[Offset: 0x1c, Size: 0x4]
	enum Scaling;//[Offset: 0x20, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMesh.StreamableRenderAsset.Object
	byte LODGroupAsInt;//[Offset: 0x60, Size: 0x1]
	bool bStripLastLODLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	PerPlatformInt MinLOD;//[Offset: 0x64, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x68, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x70, Size: 0x10]
	StaticMaterial[] PhysicalMaterialsOverride;//[Offset: 0x80, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x90, Size: 0x4]
	int LightMapResolution;//[Offset: 0x94, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x98, Size: 0x4]
	bool bForceLODsShareLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float DistanceFieldSelfShadowBias;//[Offset: 0xa0, Size: 0x4]
	float MinScreenSize;//[Offset: 0xa4, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0xa8, Size: 0x8]
	int LODForCollision;//[Offset: 0xb0, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb4, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb5, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd8, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xf8, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x104, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x110, Size: 0x1c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x12c, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x130, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x148, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x150, Size: 0x8]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x6ccf078ea041
	int GetNumSections(int InLOD);// 0x6cce078ea041
	int GetNumLODs();// 0x6ccd078ea041
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x6ccc078ea041
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x6ccb078ea041
	int GetMaterialIndex(FName MaterialSlotName);// 0x6cca078ea041
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x6cc9078ea041
	BoxSphereBounds GetBounds();// 0x6cc8078ea041
	Box GetBoundingBox();// 0x6cc7078ea041
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x6cc6078ea041
	StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x6cc5078ea041
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x6cc4078ea041
	void AddSocket(StaticMeshSocket* Socket);// 0x6cc3078ea041
	FName AddMaterial(MaterialInterface* Material);// 0x6cc2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x6574078ea041
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x6573078ea041
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x6572078ea041
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x6571078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x6570078ea041
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x656f078ea041
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x656e078ea041
	void ReversePolygonFacing(PolygonID PolygonID);// 0x656d078ea041
	void ReserveNewVertices(int NumberOfNewVertices);// 0x656c078ea041
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x656b078ea041
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x656a078ea041
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x6569078ea041
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x6568078ea041
	void ReserveNewEdges(int NumberOfNewEdges);// 0x6567078ea041
	bool IsVertexValid(VertexID VertexID);// 0x6566078ea041
	bool IsVertexOrphaned(VertexID VertexID);// 0x6565078ea041
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x6564078ea041
	bool IsTriangleValid(const TriangleID TriangleID);// 0x6563078ea041
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x6562078ea041
	bool IsPolygonValid(PolygonID PolygonID);// 0x6561078ea041
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x6560078ea041
	bool IsEmpty();// 0x655f078ea041
	bool IsEdgeValid(EdgeID EdgeID);// 0x655e078ea041
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x655d078ea041
	bool IsEdgeInternal(EdgeID EdgeID);// 0x655c078ea041
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x655b078ea041
	Vector GetVertexPosition(VertexID VertexID);// 0x655a078ea041
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x6559078ea041
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x6558078ea041
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x6557078ea041
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x6556078ea041
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x6555078ea041
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x6554078ea041
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x6553078ea041
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x6552078ea041
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x6551078ea041
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x6550078ea041
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x654f078ea041
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x654e078ea041
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x654d078ea041
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x654c078ea041
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x654b078ea041
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x654a078ea041
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x6549078ea041
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x6548078ea041
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x6547078ea041
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x6546078ea041
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x6545078ea041
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x6544078ea041
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x6543078ea041
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x6542078ea041
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x6541078ea041
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x6540078ea041
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x653f078ea041
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x653e078ea041
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x653d078ea041
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x653c078ea041
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x653b078ea041
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x653a078ea041
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x6539078ea041
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x6538078ea041
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x6537078ea041
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x6536078ea041
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x6535078ea041
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x6534078ea041
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x6533078ea041
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x6532078ea041
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x6531078ea041
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x6530078ea041
	void Empty();// 0x652f078ea041
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x652e078ea041
	void DeleteVertex(VertexID VertexID);// 0x652d078ea041
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x652c078ea041
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x652b078ea041
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x652a078ea041
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x6529078ea041
	void CreateVertexWithID(VertexID VertexID);// 0x6528078ea041
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x6527078ea041
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x6526078ea041
	VertexID CreateVertex();// 0x6525078ea041
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x6524078ea041
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x6523078ea041
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x6522078ea041
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x6521078ea041
	PolygonGroupID CreatePolygonGroup();// 0x6520078ea041
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x651f078ea041
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x651e078ea041
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x651d078ea041
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x651c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VertexID.ElementID
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PolygonID.ElementID
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VertexInstanceID.ElementID
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PolygonGroupID.ElementID
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TriangleID.ElementID
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EdgeID.ElementID
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x8c]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ScatterRadius;//[Offset: 0x2c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x60, Size: 0x4]
	float NormalScale;//[Offset: 0x64, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x68, Size: 0x4]
	float IOR;//[Offset: 0x6c, Size: 0x4]
	float Roughness0;//[Offset: 0x70, Size: 0x4]
	float Roughness1;//[Offset: 0x74, Size: 0x4]
	float LobeMix;//[Offset: 0x78, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector_NetQuantize.Vector
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector_NetQuantizeNormal.Vector
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x6bf0078ea041
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x6bef078ea041
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x6bee078ea041
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x6bed078ea041
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x6bec078ea041
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x6beb078ea041
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x6bea078ea041
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x6be9078ea041
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x6be8078ea041
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x6be7078ea041
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x6be6078ea041
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x6be5078ea041
	float K2_GetScalarParameterValue(FName ParameterName);// 0x6be4078ea041
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x6be3078ea041
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x6be2078ea041
	void CopyInterpParameters(MaterialInstance* Source);// 0x6be1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 0x40]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 0x1a0]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_AllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bAllowTwosidedFallback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 0x40]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x230, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x234, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x238, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x239, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x23a, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x240, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x248, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x258, Size: 0x8]
	Controller* Controller;//[Offset: 0x260, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x26c, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x278, Size: 0xc]
	void SpawnDefaultController();// 0x1f3b078ea041
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x1f3a078ea041
	void ReceiveUnpossessed(Controller* OldController);// 0x1f39078ea041
	void ReceivePossessed(Controller* NewController);// 0x1f38078ea041
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x1f37078ea041
	void OnRep_PlayerState();// 0x1f36078ea041
	void OnRep_Controller();// 0x1f35078ea041
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1f34078ea041
	Vector K2_GetMovementInputVector();// 0x1f33078ea041
	bool IsPlayerControlled();// 0x1f32078ea041
	bool IsPawnControlled();// 0x1f31078ea041
	bool IsMoveInputIgnored();// 0x1f30078ea041
	bool IsLocallyControlled();// 0x1f2f078ea041
	bool IsControlled();// 0x1f2e078ea041
	bool IsBotControlled();// 0x1f2d078ea041
	Vector GetPendingMovementInputVector();// 0x1f2c078ea041
	Vector GetNavAgentLocation();// 0x1f2b078ea041
	PawnMovementComponent* GetMovementComponent();// 0x1f2a078ea041
	Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x1f29078ea041
	Vector GetLastMovementInputVector();// 0x1f28078ea041
	Rotator GetControlRotation();// 0x1f27078ea041
	Controller* GetController();// 0x1f26078ea041
	Rotator GetBaseAimRotation();// 0x1f25078ea041
	void DetachFromControllerPendingDestroy();// 0x1f24078ea041
	Vector ConsumeMovementInputVector();// 0x1f23078ea041
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x1f22078ea041
	void AddControllerYawInput(float val);// 0x1f21078ea041
	void AddControllerRollInput(float val);// 0x1f20078ea041
	void AddControllerPitchInput(float val);// 0x1f1f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x230, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x240, Size: 0x10]
	FName StateName;//[Offset: 0x250, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x258, Size: 0x8]
	Character* Character;//[Offset: 0x268, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x270, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x2a8, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	void UnPossess();// 0x230e078ea041
	void StopMovement();// 0x230d078ea041
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x230c078ea041
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x230b078ea041
	void SetIgnoreLookInput(bool bNewLookInput);// 0x230a078ea041
	void SetControlRotation(out const Rotator NewRotation);// 0x2309078ea041
	void ResetIgnoreMoveInput();// 0x2308078ea041
	void ResetIgnoreLookInput();// 0x2307078ea041
	void ResetIgnoreInputFlags();// 0x2306078ea041
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x2305078ea041
	void ReceivePossess(Pawn* PossessedPawn);// 0x2304078ea041
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x2303078ea041
	void Possess(Pawn* InPawn);// 0x2302078ea041
	void OnRep_PlayerState();// 0x2301078ea041
	void OnRep_Pawn();// 0x2300078ea041
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x22ff078ea041
	Pawn* K2_GetPawn();// 0x22fe078ea041
	bool IsPlayerController();// 0x22fd078ea041
	bool IsMoveInputIgnored();// 0x22fc078ea041
	bool IsLookInputIgnored();// 0x22fb078ea041
	bool IsLocalPlayerController();// 0x22fa078ea041
	bool IsLocalController();// 0x22f9078ea041
	Actor* GetViewTarget();// 0x22f8078ea041
	Rotator GetDesiredRotation();// 0x22f7078ea041
	Rotator GetControlRotation();// 0x22f6078ea041
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x22f5078ea041
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x22f4078ea041
	PlayerController* CastToPlayerController();// 0x22f3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x228, Size: 0x4]
	int PlayerId;//[Offset: 0x22c, Size: 0x4]
	byte Ping;//[Offset: 0x230, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x232, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x232, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x232, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x232, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x232, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x232, Size: 0x1]
	int StartTime;//[Offset: 0x234, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x238, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x250, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x260, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x290, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x308, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x1dec078ea041
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x1deb078ea041
	void OnRep_UniqueId();// 0x1dea078ea041
	void OnRep_Score();// 0x1de9078ea041
	void OnRep_PlayerName();// 0x1de8078ea041
	void OnRep_PlayerId();// 0x1de7078ea041
	void OnRep_bIsInactive();// 0x1de6078ea041
	FString GetPlayerName();// 0x1de5078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LocalMessage.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UniqueNetIdWrapper
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x288, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x290, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x298, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x2a0, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2d0, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x300, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x304, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x344, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x348, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x350, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x370, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x380, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x390, Size: 0x38]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 0x98]
	void UnCrouch(bool bClientSimulation);// 0x1f6a078ea041
	void StopJumping();// 0x1f69078ea041
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x1f68078ea041
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x1f67078ea041
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x1f66078ea041
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x1f65078ea041
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1f64078ea041
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1f63078ea041
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1f62078ea041
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x1f61078ea041
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x1f60078ea041
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x1f5f078ea041
	void OnRep_RootMotion();// 0x1f5e078ea041
	void OnRep_ReplicatedBasedMovement();// 0x1f5d078ea041
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x1f5c078ea041
	void OnRep_IsCrouched();// 0x1f5b078ea041
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1f5a078ea041
	void OnLanded(out const HitResult Hit);// 0x1f59078ea041
	void OnJumped();// 0x1f58078ea041
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1f57078ea041
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1f56078ea041
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1f55078ea041
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1f54078ea041
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1f53078ea041
	void Jump();// 0x1f52078ea041
	bool IsPlayingRootMotion();// 0x1f51078ea041
	bool IsPlayingNetworkedRootMotionMontage();// 0x1f50078ea041
	bool IsJumpProvidingForce();// 0x1f4f078ea041
	bool HasAnyRootMotion();// 0x1f4e078ea041
	AnimMontage* GetCurrentMontage();// 0x1f4d078ea041
	Vector GetBaseTranslationOffset();// 0x1f4c078ea041
	Rotator GetBaseRotationOffsetRotator();// 0x1f4b078ea041
	float GetAnimRootMotionTranslationScale();// 0x1f4a078ea041
	void Crouch(bool bClientSimulation);// 0x1f49078ea041
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1f48078ea041
	void ClientCheatWalk();// 0x1f47078ea041
	void ClientCheatGhost();// 0x1f46078ea041
	void ClientCheatFly();// 0x1f45078ea041
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1f44078ea041
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1f43078ea041
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1f42078ea041
	void ClientAckGoodMove(float Timestamp);// 0x1f41078ea041
	bool CanJumpInternal();// 0x1f40078ea041
	bool CanJump();// 0x1f3f078ea041
	bool CanCrouch();// 0x1f3e078ea041
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x1f3d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x30]
	float BlendInTime;//[Offset: 0xd8, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 0x30]
	float BlendOutTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 0x4]
	FName SyncGroup;//[Offset: 0x118, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x120, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x6617078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x6616078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x66d8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x66d7078ea041
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x66d6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KeyHandleMap
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	int NotifyFilterSignificanceLevel;//[Offset: 0xa0, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	int TrackIndex;//[Offset: 0xa8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x44d4078ea041
	FString GetNotifyName();// 0x44d3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x790, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x798, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x7a0, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x7a8, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x7b0, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x7d8, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x7e4, Size: 0xc]
	AnimInstance*[] LinkedInstances;//[Offset: 0x810, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x820, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x830, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x860, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x864, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x865, Size: 0x1]
	byte AnimationMode;//[Offset: 0x867, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x869, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x869, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x869, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x869, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x869, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86a, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86a, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86a, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86a, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x86a, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86b, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86b, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86b, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86b, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x86b, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x86b, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x86b, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86c, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86c, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x874, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x874, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x874, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x874, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x874, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x874, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x874, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x874, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x875, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x875, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x875, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x875, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x875, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x875, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x875, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x875, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x876, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x876, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x878, Size: 0x2]
	enum MassMode;//[Offset: 0x87a, Size: 0x1]
	float UniformMass;//[Offset: 0x87c, Size: 0x4]
	float TotalMass;//[Offset: 0x880, Size: 0x4]
	float Density;//[Offset: 0x884, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0x888, Size: 0x4]
	float ClothBlendWeight;//[Offset: 0x88c, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x890, Size: 0x4]
	float BendingStiffness;//[Offset: 0x894, Size: 0x4]
	float AreaStiffness;//[Offset: 0x898, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x89c, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x8a0, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x8a4, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x8a8, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x8b8, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x8c8, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x8d8, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x9a8, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x9ac, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x9b8, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa10, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xae0, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x3bfd078ea041
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x3bfc078ea041
	void ToggleDisablePostProcessBlueprint();// 0x3bfb078ea041
	void TermBodiesBelow(FName ParentBoneName);// 0x3bfa078ea041
	void SuspendClothingSimulation();// 0x3bf9078ea041
	void Stop();// 0x3bf8078ea041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x3bf7078ea041
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x3bf6078ea041
	void SetTeleportRotationThreshold(float Threshold);// 0x3bf5078ea041
	void SetTeleportDistanceThreshold(float Threshold);// 0x3bf4078ea041
	void SetPosition(float InPos, bool bFireNotifies);// 0x3bf3078ea041
	void SetPlayRate(float Rate);// 0x3bf2078ea041
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x3bf1078ea041
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x3bf0078ea041
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x3bef078ea041
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x3bee078ea041
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x3bed078ea041
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x3bec078ea041
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x3beb078ea041
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x3bea078ea041
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x3be9078ea041
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x3be8078ea041
	void SetClothMaxDistanceScale(float Scale);// 0x3be7078ea041
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x3be6078ea041
	void SetAnimClass(class Object NewClass);// 0x3be5078ea041
	void SetAnimationMode(byte InAnimationMode);// 0x3be4078ea041
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x3be3078ea041
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x3be2078ea041
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x3be1078ea041
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x3be0078ea041
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x3bdf078ea041
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x3bde078ea041
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x3bdd078ea041
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x3bdc078ea041
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x3bdb078ea041
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3bda078ea041
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x3bd9078ea041
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x3bd8078ea041
	void ResumeClothingSimulation();// 0x3bd7078ea041
	void ResetClothTeleportMode();// 0x3bd6078ea041
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x3bd5078ea041
	void ResetAllowedAnimCurveEvaluation();// 0x3bd4078ea041
	void ResetAllBodiesSimulatePhysics();// 0x3bd3078ea041
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x3bd2078ea041
	void Play(bool bLooping);// 0x3bd1078ea041
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x3bd0078ea041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3bcf078ea041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3bce078ea041
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x3bcd078ea041
	bool IsPlaying();// 0x3bcc078ea041
	bool IsClothingSimulationSuspended();// 0x3bcb078ea041
	bool IsBodyGravityEnabled(FName BoneName);// 0x3bca078ea041
	bool HasValidAnimationInstance();// 0x3bc9078ea041
	float GetTeleportRotationThreshold();// 0x3bc8078ea041
	float GetTeleportDistanceThreshold();// 0x3bc7078ea041
	Vector GetSkeletalCenterOfMass();// 0x3bc6078ea041
	AnimInstance* GetPostProcessInstance();// 0x3bc5078ea041
	float GetPosition();// 0x3bc4078ea041
	float GetPlayRate();// 0x3bc3078ea041
	float GetMorphTarget(FName MorphTargetName);// 0x3bc2078ea041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3bc1078ea041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3bc0078ea041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3bbf078ea041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3bbe078ea041
	bool GetDisablePostProcessBlueprint();// 0x3bbd078ea041
	bool GetDisableAnimCurves();// 0x3bbc078ea041
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x3bbb078ea041
	float GetClothMaxDistanceScale();// 0x3bba078ea041
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x3bb9078ea041
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x3bb8078ea041
	AnimInstance* GetAnimInstance();// 0x3bb7078ea041
	class Object GetAnimClass();// 0x3bb6078ea041
	byte GetAnimationMode();// 0x3bb5078ea041
	bool GetAllowRigidBodyAnimNode();// 0x3bb4078ea041
	bool GetAllowedAnimCurveEvaluate();// 0x3bb3078ea041
	void ForceClothNextUpdateTeleportAndReset();// 0x3bb2078ea041
	void ForceClothNextUpdateTeleport();// 0x3bb1078ea041
	FName FindConstraintBoneName(int ConstraintIndex);// 0x3bb0078ea041
	void ClearMorphTargets();// 0x3baf078ea041
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x3bae078ea041
	void BindClothToMasterPoseComponent();// 0x3bad078ea041
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x3bac078ea041
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x3bab078ea041
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x3baa078ea041
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x3ba9078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x578, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x580, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x588, Size: 0x10]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x690, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x698, Size: 0x4]
	int MinLodModel;//[Offset: 0x69c, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x6ac, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x6b8, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x6ec, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ee, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6ee, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6ee, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6ee, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6ee, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6ee, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ef, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ef, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ef, Size: 0x1]
	bool bOverrideMeshMinScreenSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6ef, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6ef, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6ef, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6ef, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6ef, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f0, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f0, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f0, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f0, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f0, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f0, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f1, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f1, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x6f4, Size: 0x4]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x708, Size: 0x1c]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x730, Size: 0x40]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x3ba8078ea041
	void UnHideBoneByName(FName BoneName);// 0x3ba7078ea041
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3ba6078ea041
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x3ba5078ea041
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x3ba4078ea041
	void ShowAllMaterialSections(int LODIndex);// 0x3ba3078ea041
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x3ba2078ea041
	bool SetSkinWeightProfile(FName InProfileName);// 0x3ba1078ea041
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x3ba0078ea041
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation);// 0x3b9f078ea041
	void SetRenderStatic(bool bNewValue);// 0x3b9e078ea041
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x3b9d078ea041
	void SetMinLOD(int InNewMinLOD);// 0x3b9c078ea041
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x3b9b078ea041
	void SetForcedLOD(int InNewForcedLOD);// 0x3b9a078ea041
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x3b99078ea041
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x3b98078ea041
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x3b97078ea041
	bool IsUsingSkinWeightProfile();// 0x3b96078ea041
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x3b95078ea041
	bool IsBoneHiddenByName(FName BoneName);// 0x3b94078ea041
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x3b93078ea041
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x3b92078ea041
	FName GetSocketBoneName(FName InSocketName);// 0x3b91078ea041
	Vector GetRefPosePosition(int BoneIndex);// 0x3b90078ea041
	FName GetParentBone(FName BoneName);// 0x3b8f078ea041
	int GetNumLODs();// 0x3b8e078ea041
	int GetNumBones();// 0x3b8d078ea041
	int GetForcedLOD();// 0x3b8c078ea041
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x3b8b078ea041
	FName GetCurrentSkinWeightProfileName();// 0x3b8a078ea041
	FName GetBoneName(int BoneIndex);// 0x3b89078ea041
	int GetBoneIndex(FName BoneName);// 0x3b88078ea041
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x3b87078ea041
	void ClearVertexColorOverride(int LODIndex);// 0x3b86078ea041
	void ClearSkinWeightProfile();// 0x3b85078ea041
	void ClearSkinWeightOverride(int LODIndex);// 0x3b84078ea041
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x3b83078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x540, Size: 0x10]
	bool bNeedMultiplePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	bool bForceFrontFaceCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	bool bIgnoreTranslucentSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 0x1]
	bool bIgnoreMaskedSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 0x1]
	MaterialInterface* MultiplePassMaterial;//[Offset: 0x558, Size: 0x8]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x2f58078ea041
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x2f57078ea041
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x2f56078ea041
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x2f55078ea041
	FName[] GetMaterialSlotNames();// 0x2f54078ea041
	MaterialInterface*[] GetMaterials();// 0x2f53078ea041
	int GetMaterialIndex(FName MaterialSlotName);// 0x2f52078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x60, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x68, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x84, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0xa0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xac, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x138, Size: 0x4]
	byte LODGroup;//[Offset: 0x13c, Size: 0x1]
	float MinScreenSize;//[Offset: 0x140, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x144, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x145, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x146, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x147, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x147, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x147, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x147, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x147, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x148, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x150, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x158, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x160, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x170, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2f8, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x300, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x310, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x340, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x358, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x378, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x6c79078ea041
	int NumSockets();// 0x6c78078ea041
	FString[] K2_GetAllMorphTargetNames();// 0x6c77078ea041
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x6c76078ea041
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x6c75078ea041
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x6c74078ea041
	BoxSphereBounds GetImportedBounds();// 0x6c73078ea041
	BoxSphereBounds GetBounds();// 0x6c72078ea041
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x6c71078ea041
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x6c70078ea041
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x6c6f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x6c7f078ea041
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x6c7e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SmartNameContainer
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 0x1]
	byte RefPoseType;//[Offset: 0x151, Size: 0x1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x160, Size: 0x4]
	FName RetargetSource;//[Offset: 0x164, Size: 0x8]
	enum Interpolation;//[Offset: 0x16c, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimCurveCompressionCodec.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 0x18]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x278, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 0x4]
	int JointIterations;//[Offset: 0x4, Size: 0x4]
	int CollisionIterations;//[Offset: 0x8, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ThumbnailInfo.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x35, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x401a078ea041
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x4019078ea041
	Pawn* TryGetPawnOwner();// 0x4018078ea041
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x4017078ea041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4016078ea041
	void SetRootMotionMode(byte Value);// 0x4015078ea041
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x4014078ea041
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x4013078ea041
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x4012078ea041
	void SavePoseSnapshot(FName SnapshotName);// 0x4011078ea041
	void ResetDynamics(enum InTeleportType);// 0x4010078ea041
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x400f078ea041
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x400e078ea041
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x400d078ea041
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x400c078ea041
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x400b078ea041
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x400a078ea041
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x4009078ea041
	void Montage_Resume(const AnimMontage* Montage);// 0x4008078ea041
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x4007078ea041
	void Montage_Pause(const AnimMontage* Montage);// 0x4006078ea041
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x4005078ea041
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x4004078ea041
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x4003078ea041
	bool Montage_IsActive(const AnimMontage* Montage);// 0x4002078ea041
	float Montage_GetPosition(const AnimMontage* Montage);// 0x4001078ea041
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x4000078ea041
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x3fff078ea041
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x3ffe078ea041
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x3ffd078ea041
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x3ffc078ea041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x3ffb078ea041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x3ffa078ea041
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x3ff9078ea041
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x3ff8078ea041
	bool IsAnyMontagePlaying();// 0x3ff7078ea041
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x3ff6078ea041
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x3ff5078ea041
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x3ff4078ea041
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x3ff3078ea041
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x3ff2078ea041
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x3ff1078ea041
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x3ff0078ea041
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x3fef078ea041
	bool GetReceiveNotifiesFromLinkedInstances();// 0x3fee078ea041
	bool GetPropagateNotifiesToLinkedInstances();// 0x3fed078ea041
	SkeletalMeshComponent* GetOwningComponent();// 0x3fec078ea041
	Actor* GetOwningActor();// 0x3feb078ea041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x3fea078ea041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x3fe9078ea041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x3fe8078ea041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x3fe7078ea041
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x3fe6078ea041
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x3fe5078ea041
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x3fe4078ea041
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x3fe3078ea041
	float GetInstanceMachineWeight(int MachineIndex);// 0x3fe2078ea041
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x3fe1078ea041
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x3fe0078ea041
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x3fdf078ea041
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x3fde078ea041
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x3fdd078ea041
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x3fdc078ea041
	float GetCurveValue(FName CurveName);// 0x3fdb078ea041
	FName GetCurrentStateName(int MachineIndex);// 0x3fda078ea041
	AnimMontage* GetCurrentActiveMontage();// 0x3fd9078ea041
	void GetAllCurveNames(out FName[] OutNames);// 0x3fd8078ea041
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x3fd7078ea041
	void ClearMorphTargets();// 0x3fd6078ea041
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x3fd5078ea041
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x3fd4078ea041
	void BlueprintPostEvaluateAnimation();// 0x3fd3078ea041
	void BlueprintLinkedAnimationLayersInitialized();// 0x3fd2078ea041
	void BlueprintInitializeAnimation();// 0x3fd1078ea041
	void BlueprintBeginPlay();// 0x3fd0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingLODBuiltData
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshSamplingRegionBuiltData
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Struct.Field.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Field.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	FName VariableName;//[Offset: 0x90, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x66e1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x66da078ea041
	LinearColor GetClampedLinearColorValue(float InTime);// 0x66d9078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	class Object* ComponentClass;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ClothingSimulationFactory.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x6579078ea041
	void PhysicsAssetUpdated();// 0x6578078ea041
	void EnableGravityOverride(out const Vector InVector);// 0x6577078ea041
	void DisableGravityOverride();// 0x6576078ea041
	void ClothConfigUpdated();// 0x6575078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x3d5c078ea041
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x3d5b078ea041
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x3d5a078ea041
	FString GetNotifyName();// 0x3d59078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimMetaData.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Vector_NetQuantize10.Vector
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 0x8]
	float GravityScale;//[Offset: 0x150, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x154, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x158, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x164, Size: 0x4]
	byte MovementMode;//[Offset: 0x168, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 0x1]
	float GroundFriction;//[Offset: 0x16c, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x198, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1ac, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 0x4]
	float AirControl;//[Offset: 0x1c4, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 0x4]
	float Buoyancy;//[Offset: 0x1d8, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 0x1]
	bool bNetworkEnableProxyPrediction;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkEnableProxyFindFloorWhenNoPrediction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f3, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f3, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x204, Size: 0x4]
	float Mass;//[Offset: 0x208, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 0x4]
	float PushForceFactor;//[Offset: 0x214, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x21c, Size: 0x4]
	float MinTouchForce;//[Offset: 0x220, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x224, Size: 0x4]
	float RepulsionForce;//[Offset: 0x228, Size: 0x4]
	Vector Acceleration;//[Offset: 0x22c, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x268, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x26c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x270, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x274, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x280, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x28c, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x29c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2a0, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x2a4, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2a8, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2ac, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2b0, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2b4, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2b8, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2bc, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2c0, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2c4, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2c8, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2cc, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2d0, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2d4, Size: 0x4]
	float NetworkLinearSmoothingLerpLimit;//[Offset: 0x2d8, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x2dc, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x2e0, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x2e4, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x2e8, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x2ec, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x2f0, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x2f4, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x388, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x389, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x38a, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38b, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38b, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38b, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38b, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38b, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38c, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38c, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38c, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38c, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38c, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38c, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38c, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38d, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38d, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38d, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38d, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38d, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38d, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38d, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38e, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38e, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38e, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38e, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38e, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38e, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3a0, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3a4, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3b0, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3b4, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3b8, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3bc, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3c0, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3c4, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x470, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x474, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x478, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x47c, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x480, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x484, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x488, Size: 0x30]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4d0, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4d8, Size: 0x38]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5a0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x5e0, Size: 0xc]
	bool bCanAdjustWalkingVelocityOnSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	bool bCanAdjustFallingVelocityOnSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 0x1]
	float LimitedNewVelocityZOnTwoWallAdjust;//[Offset: 0x614, Size: 0x4]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x1cd2078ea041
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x1cd1078ea041
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x1cd0078ea041
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x1ccf078ea041
	void SetGroupsToIgnore(int GroupFlags);// 0x1cce078ea041
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x1ccd078ea041
	void SetGroupsToAvoid(int GroupFlags);// 0x1ccc078ea041
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x1cca078ea041
	void SetAvoidanceGroup(int GroupFlags);// 0x1cc9078ea041
	void SetAvoidanceEnabled(bool bEnable);// 0x1cc8078ea041
	float K2_GetWalkableFloorZ();// 0x1cc7078ea041
	float K2_GetWalkableFloorAngle();// 0x1cc6078ea041
	float K2_GetModifiedMaxAcceleration();// 0x1cc5078ea041
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x1cc4078ea041
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x1cc2078ea041
	bool IsWalking();// 0x1cc1078ea041
	bool IsWalkable(out const HitResult Hit);// 0x1cc0078ea041
	float GetValidPerchRadius();// 0x1cbf078ea041
	float GetPerchRadiusThreshold();// 0x1cbe078ea041
	PrimitiveComponent* GetMovementBase();// 0x1cbd078ea041
	float GetMinAnalogSpeed();// 0x1cbc078ea041
	float GetMaxJumpHeightWithJumpTime();// 0x1cbb078ea041
	float GetMaxJumpHeight();// 0x1cba078ea041
	float GetMaxBrakingDeceleration();// 0x1cb9078ea041
	float GetMaxAcceleration();// 0x1cb8078ea041
	Vector GetLastUpdateVelocity();// 0x1cb7078ea041
	Rotator GetLastUpdateRotation();// 0x1cb6078ea041
	Vector GetLastUpdateLocation();// 0x1cb5078ea041
	Vector GetImpartedMovementBaseVelocity();// 0x1cb4078ea041
	Vector GetCurrentAcceleration();// 0x1cb3078ea041
	Character* GetCharacterOwner();// 0x1cb2078ea041
	float GetAnalogInputModifier();// 0x1cb1078ea041
	void DisableMovement();// 0x1cb0078ea041
	void ClearAccumulatedForces();// 0x1caf078ea041
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x1cae078ea041
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x1cad078ea041
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x1cac078ea041
	void AddForce(Vector Force);// 0x1cab078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 0x8]
	Vector K2_GetInputVector();// 0x1caa078ea041
	bool IsMoveInputIgnored();// 0x1ca9078ea041
	Vector GetPendingInputVector();// 0x1ca8078ea041
	Pawn* GetPawnOwner();// 0x1ca7078ea041
	Vector GetLastInputVector();// 0x1ca6078ea041
	Vector ConsumeInputVector();// 0x1ca5078ea041
	void AddInputVector(Vector WorldVector, bool bForce);// 0x1ca4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 0x8]
	void StopMovementKeepPathing();// 0x1ca1078ea041
	void StopActiveMovement();// 0x1ca0078ea041
	bool IsSwimming();// 0x1c9f078ea041
	bool IsMovingOnGround();// 0x1c9e078ea041
	bool IsFlying();// 0x1c9d078ea041
	bool IsFalling();// 0x1c9c078ea041
	bool IsCrouching();// 0x1c9b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8]
	Vector Velocity;//[Offset: 0xc4, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 0x1]
	void StopMovementImmediately();// 0x11e5078ea041
	void SnapUpdatedComponentToPlane();// 0x11e4078ea041
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x11e3078ea041
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x11e2078ea041
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x11e1078ea041
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x11e0078ea041
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x11df078ea041
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x11de078ea041
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x11dd078ea041
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x11dc078ea041
	float K2_GetModifiedMaxSpeed();// 0x11db078ea041
	float K2_GetMaxSpeedModifier();// 0x11da078ea041
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x11d9078ea041
	Vector GetPlaneConstraintOrigin();// 0x11d8078ea041
	Vector GetPlaneConstraintNormal();// 0x11d7078ea041
	enum GetPlaneConstraintAxisSetting();// 0x11d5078ea041
	PhysicsVolume* GetPhysicsVolume();// 0x11d4078ea041
	float GetMaxSpeed();// 0x11d3078ea041
	float GetGravityZ();// 0x11d2078ea041
	Vector ConstrainNormalToPlane(Vector Normal);// 0x11d1078ea041
	Vector ConstrainLocationToPlane(Vector Location);// 0x11d0078ea041
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x11cf078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoftClassPath.SoftObjectPath
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x558, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x55c, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x553d078ea041
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x553c078ea041
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x553b078ea041
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x553a078ea041
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x5539078ea041
	float GetUnscaledCapsuleRadius();// 0x5538078ea041
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x5537078ea041
	float GetUnscaledCapsuleHalfHeight();// 0x5536078ea041
	float GetShapeScale();// 0x5535078ea041
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x5534078ea041
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x5533078ea041
	float GetScaledCapsuleRadius();// 0x5532078ea041
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x5531078ea041
	float GetScaledCapsuleHalfHeight();// 0x5530078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x540, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x548, Size: 0x8]
	Color ShapeColor;//[Offset: 0x550, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x554, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x554, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x554, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavAreaBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x98]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0x38]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x2b8, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x2c0, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2c8, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x2d0, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2d8, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2e0, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x2ec, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x304, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x310, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x320, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x334, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x338, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x344, Size: 0xc]
	int ClientCap;//[Offset: 0x350, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x358, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x360, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x368, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x370, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x3f1, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x430, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x438, Size: 0x8]
	float InputYawScale;//[Offset: 0x44c, Size: 0x4]
	float InputPitchScale;//[Offset: 0x450, Size: 0x4]
	float InputRollScale;//[Offset: 0x454, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x458, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x458, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x458, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x458, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x45c, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x460, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x470, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x471, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x472, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x473, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x474, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x478, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x47a, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x508, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x510, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x528, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x580, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58c, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x590, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x239f078ea041
	bool WasInputKeyJustPressed(Key Key);// 0x239e078ea041
	void ToggleSpeaking(bool bInSpeaking);// 0x239d078ea041
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x239c078ea041
	void SwitchLevel(FString URL);// 0x239b078ea041
	void StopHapticEffect(enum Hand);// 0x239a078ea041
	void StartFire(byte FireModeNum);// 0x2399078ea041
	void SetVirtualJoystickVisibility(bool bVisible);// 0x2398078ea041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x2397078ea041
	void SetName(FString S);// 0x2396078ea041
	void SetMouseLocation(const int X, const int Y);// 0x2395078ea041
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x2394078ea041
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x2393078ea041
	void SetDisableHaptics(bool bNewDisabled);// 0x2392078ea041
	void SetControllerLightColor(Color Color);// 0x2391078ea041
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x2390078ea041
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x238f078ea041
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x238e078ea041
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x238d078ea041
	void ServerViewPrevPlayer();// 0x238c078ea041
	void ServerViewNextPlayer();// 0x238b078ea041
	void ServerVerifyViewTarget();// 0x238a078ea041
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x2389078ea041
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x2387078ea041
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x2386078ea041
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x2385078ea041
	void ServerToggleAILogging();// 0x2384078ea041
	void ServerShortTimeout();// 0x2383078ea041
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x2382078ea041
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x2381078ea041
	void ServerRestartPlayer();// 0x2380078ea041
	void ServerPause();// 0x237f078ea041
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x237e078ea041
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x237d078ea041
	void ServerExecRPC(FString Msg);// 0x237c078ea041
	void ServerExec(FString Msg);// 0x237b078ea041
	void ServerCheckClientPossessionReliable();// 0x237a078ea041
	void ServerCheckClientPossession();// 0x2379078ea041
	void ServerChangeName(FString S);// 0x2378078ea041
	void ServerCamera(FName NewMode);// 0x2377078ea041
	void ServerAcknowledgePossession(Pawn* P);// 0x2376078ea041
	void SendToConsole(FString Command);// 0x2375078ea041
	void RestartLevel();// 0x2374078ea041
	void ResetControllerLightColor();// 0x2373078ea041
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x2372078ea041
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x2370078ea041
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x236e078ea041
	void Pause();// 0x236d078ea041
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x236c078ea041
	void LocalTravel(FString URL);// 0x236b078ea041
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x236a078ea041
	bool IsInputKeyDown(Key Key);// 0x2369078ea041
	void GetViewportSize(out int SizeX, out int SizeY);// 0x2368078ea041
	SpectatorPawn* GetSpectatorPawn();// 0x2367078ea041
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x2366078ea041
	Vector GetInputVectorKeyState(Key Key);// 0x2365078ea041
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x2364078ea041
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x2363078ea041
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x2362078ea041
	float GetInputKeyTimeDown(Key Key);// 0x2361078ea041
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x235f078ea041
	float GetInputAnalogKeyState(Key Key);// 0x235e078ea041
	HUD* GetHUD();// 0x235d078ea041
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x235c078ea041
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x235b078ea041
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x235a078ea041
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x2359078ea041
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x2358078ea041
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x2356078ea041
	Vector GetFocalLocation();// 0x2355078ea041
	void FOV(float NewFOV);// 0x2354078ea041
	void EnableCheats();// 0x2353078ea041
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x2352078ea041
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x2351078ea041
	void ConsoleKey(Key Key);// 0x2350078ea041
	void ClientWasKicked(const FText KickReason);// 0x234f078ea041
	void ClientVoiceHandshakeComplete();// 0x234e078ea041
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x234c078ea041
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x234b078ea041
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x234a078ea041
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x2349078ea041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x2348078ea041
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x2347078ea041
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x2346078ea041
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x2345078ea041
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x2344078ea041
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x2343078ea041
	void ClientStartOnlineSession();// 0x2342078ea041
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x2341078ea041
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x233e078ea041
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x233d078ea041
	void ClientSetHUD(class HUD NewHUDClass);// 0x233c078ea041
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x233b078ea041
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x233a078ea041
	void ClientSetCameraMode(FName NewCamMode);// 0x2339078ea041
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x2338078ea041
	void ClientSetBlockOnAsyncLoading();// 0x2337078ea041
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x2336078ea041
	void ClientReturnToMainMenu(FString ReturnReason);// 0x2335078ea041
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x2334078ea041
	void ClientRestart(Pawn* NewPawn);// 0x2333078ea041
	void ClientReset();// 0x2332078ea041
	void ClientRepObjRef(Object* Object);// 0x2331078ea041
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x2330078ea041
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x232f078ea041
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x232e078ea041
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x232d078ea041
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x232c078ea041
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x232a078ea041
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x2329078ea041
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x2328078ea041
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x2326078ea041
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x2325078ea041
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x2324078ea041
	void ClientIgnoreMoveInput(bool bIgnore);// 0x2323078ea041
	void ClientIgnoreLookInput(bool bIgnore);// 0x2322078ea041
	void ClientGotoState(FName NewState);// 0x2321078ea041
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x2320078ea041
	void ClientForceGarbageCollection();// 0x231f078ea041
	void ClientFlushLevelStreaming();// 0x231e078ea041
	void ClientEndOnlineSession();// 0x231d078ea041
	void ClientEnableNetworkVoice(bool bEnable);// 0x231c078ea041
	void ClientCommitMapChange();// 0x231b078ea041
	void ClientClearCameraLensEffects();// 0x231a078ea041
	void ClientCapBandwidth(int Cap);// 0x2319078ea041
	void ClientCancelPendingMapChange();// 0x2318078ea041
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x2317078ea041
	void ClearAudioListenerOverride();// 0x2316078ea041
	void ClearAudioListenerAttenuationOverride();// 0x2315078ea041
	bool CanRestartPlayer();// 0x2314078ea041
	void Camera(FName NewMode);// 0x2313078ea041
	void AddYawInput(float val);// 0x2312078ea041
	void AddRollInput(float val);// 0x2311078ea041
	void AddPitchInput(float val);// 0x2310078ea041
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x230f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpTrackInst.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x140, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x150, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x160, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x188, Size: 0x10]
	Margin Padding;//[Offset: 0x198, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a8, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b8, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c8, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1d8, Size: 0x8]
	int Priority;//[Offset: 0x1e0, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e4, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e4, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1e4, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1e4, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1f0, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1f8, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x200, Size: 0x10]
	void UnregisterInputComponent();// 0x1935078ea041
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x1934078ea041
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x1933078ea041
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x1932078ea041
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x1931078ea041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1930078ea041
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x192f078ea041
	void StopListeningForAllInputActions();// 0x192e078ea041
	void StopAnimationsAndLatentActions();// 0x192d078ea041
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x192c078ea041
	void StopAllAnimations();// 0x192b078ea041
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x192a078ea041
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x1929078ea041
	void SetPadding(Margin InPadding);// 0x1928078ea041
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x1927078ea041
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x1926078ea041
	void SetInputActionPriority(int NewPriority);// 0x1925078ea041
	void SetInputActionBlocking(bool bShouldBlock);// 0x1924078ea041
	void SetForegroundColor(SlateColor InForegroundColor);// 0x1923078ea041
	void SetDesiredSizeInViewport(Vector2D Size);// 0x1922078ea041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x1921078ea041
	void SetAnchorsInViewport(Anchors Anchors);// 0x1920078ea041
	void SetAlignmentInViewport(Vector2D Alignment);// 0x191f078ea041
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x191e078ea041
	void RemoveFromViewport();// 0x191d078ea041
	void RegisterInputComponent();// 0x191c078ea041
	void PreConstruct(bool IsDesignTime);// 0x191b078ea041
	void PlaySound(SoundBase* SoundToPlay);// 0x191a078ea041
	void PlayEnterAnim();// 0x1919078ea041
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x1918078ea041
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x1917078ea041
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x1916078ea041
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x1914078ea041
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x1913078ea041
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1912078ea041
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x1911078ea041
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x1910078ea041
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x190f078ea041
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x190e078ea041
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x190d078ea041
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x190c078ea041
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x190b078ea041
	void OnPaint(out PaintContext Context);// 0x190a078ea041
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1909078ea041
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1908078ea041
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x1907078ea041
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1906078ea041
	void OnMouseCaptureLost();// 0x1905078ea041
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1904078ea041
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1903078ea041
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x1902078ea041
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x1900078ea041
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x18ff078ea041
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x18fe078ea041
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x18fd078ea041
	void OnInitialized();// 0x18fc078ea041
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x18fb078ea041
	void OnFocusLost(FocusEvent InFocusEvent);// 0x18fa078ea041
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x18f9078ea041
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x18f8078ea041
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x18f7078ea041
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x18f6078ea041
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x18f5078ea041
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x18f4078ea041
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x18f3078ea041
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x18f2078ea041
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x18f1078ea041
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x18ef078ea041
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x18ed078ea041
	bool IsPlayingAnimation();// 0x18ec078ea041
	bool IsListeningForInputAction(FName ActionName);// 0x18eb078ea041
	bool IsInViewport();// 0x18ea078ea041
	bool IsInteractable();// 0x18e9078ea041
	bool IsAnyAnimationPlaying();// 0x18e8078ea041
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x18e7078ea041
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x18e6078ea041
	Pawn* GetOwningPlayerPawn();// 0x18e5078ea041
	HUD* GetOwningHUD();// 0x18e4078ea041
	bool GetIsVisible();// 0x18e3078ea041
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x18e2078ea041
	Anchors GetAnchorsInViewport();// 0x18e0078ea041
	Vector2D GetAlignmentInViewport();// 0x18df078ea041
	void DoPlayEnterAnim(bool InPlayFlag);// 0x18de078ea041
	void Destruct();// 0x18dd078ea041
	void Construct();// 0x18dc078ea041
	void CancelLatentActions();// 0x18db078ea041
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x18da078ea041
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x18d9078ea041
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x18d7078ea041
	void AddToViewport(int ZOrder);// 0x18d6078ea041
	bool AddToPlayerScreen(int ZOrder);// 0x18d5078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte Cursor;//[Offset: 0xc1, Size: 0x1]
	enum Clipping;//[Offset: 0xc2, Size: 0x1]
	enum Visibility;//[Offset: 0xc3, Size: 0x1]
	float RenderOpacity;//[Offset: 0xc4, Size: 0x4]
	byte DetailMode;//[Offset: 0xc8, Size: 0x1]
	bool bSelectedDetailModeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	int WidthDivisor;//[Offset: 0xcc, Size: 0x4]
	int HeightDivisor;//[Offset: 0xd0, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xd8, Size: 0x8]
	enum FlowDirectionPreference;//[Offset: 0xe0, Size: 0x1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x128, Size: 0x10]
	void SetWidthHeightDivisors(int InWidthDivisor, int InHeightDivisor);// 0x17b7078ea041
	void SetVisibility(enum InVisibility);// 0x17b6078ea041
	void SetUserFocus(PlayerController* PlayerController);// 0x17b5078ea041
	void SetToolTipText(out const FText InToolTipText);// 0x17b4078ea041
	void SetToolTip(Widget* Widget);// 0x17b3078ea041
	void SetSelectedDetailModeOnly(bool InSelectedDetailModeOnly);// 0x17b2078ea041
	void SetRenderTranslation(Vector2D Translation);// 0x17b1078ea041
	void SetRenderTransformPivot(Vector2D Pivot);// 0x17b0078ea041
	void SetRenderTransformAngle(float Angle);// 0x17af078ea041
	void SetRenderTransform(WidgetTransform InTransform);// 0x17ad078ea041
	void SetRenderShear(Vector2D Shear);// 0x17ac078ea041
	void SetRenderScale(Vector2D Scale);// 0x17ab078ea041
	void SetRenderOpacity(float InOpacity);// 0x17aa078ea041
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x17a9078ea041
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x17a8078ea041
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x17a7078ea041
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x17a6078ea041
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x17a5078ea041
	void SetKeyboardFocus();// 0x17a4078ea041
	void SetIsEnabled(bool bInIsEnabled);// 0x17a3078ea041
	void SetFocus();// 0x17a2078ea041
	void SetDetailMode(byte InDetailMode);// 0x17a0078ea041
	void SetCursor(byte InCursor);// 0x179f078ea041
	void SetClipping(enum InClipping);// 0x179e078ea041
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x179c078ea041
	void ResetCursor();// 0x179b078ea041
	void RemoveFromParent();// 0x179a078ea041
	EventReply OnReply__DelegateSignature();// 0x1799078ea041
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x1795078ea041
	bool IsVisible();// 0x1794078ea041
	bool IsHovered();// 0x1793078ea041
	void InvalidateLayoutAndVolatility();// 0x1792078ea041
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x1791078ea041
	bool HasUserFocus(PlayerController* PlayerController);// 0x1790078ea041
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x178f078ea041
	bool HasMouseCapture();// 0x178e078ea041
	bool HasKeyboardFocus();// 0x178d078ea041
	bool HasFocusedDescendants();// 0x178c078ea041
	bool HasAnyUserFocus();// 0x178b078ea041
	Widget* GetWidget__DelegateSignature();// 0x178a078ea041
	enum GetVisibility();// 0x1789078ea041
	Geometry GetTickSpaceGeometry();// 0x1788078ea041
	FText GetText__DelegateSignature();// 0x1787078ea041
	enum GetSlateVisibility__DelegateSignature();// 0x1785078ea041
	SlateColor GetSlateColor__DelegateSignature();// 0x1784078ea041
	SlateBrush GetSlateBrush__DelegateSignature();// 0x1779078ea041
	float GetRenderTransformAngle();// 0x1778078ea041
	float GetRenderOpacity();// 0x1777078ea041
	PanelWidget* GetParent();// 0x1776078ea041
	Geometry GetPaintSpaceGeometry();// 0x1775078ea041
	PlayerController* GetOwningPlayer();// 0x1774078ea041
	LocalPlayer* GetOwningLocalPlayer();// 0x1773078ea041
	byte GetMouseCursor__DelegateSignature();// 0x1771078ea041
	LinearColor GetLinearColor__DelegateSignature();// 0x1770078ea041
	bool GetIsEnabled();// 0x176f078ea041
	int GetInt32__DelegateSignature();// 0x176e078ea041
	GameInstance* GetGameInstance();// 0x176d078ea041
	float GetFloat__DelegateSignature();// 0x176c078ea041
	Vector2D GetDesiredSize();// 0x176b078ea041
	enum GetClipping();// 0x1769078ea041
	enum GetCheckBoxState__DelegateSignature();// 0x1767078ea041
	Geometry GetCachedGeometry();// 0x1765078ea041
	bool GetBool__DelegateSignature();// 0x1764078ea041
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x1763078ea041
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x1762078ea041
	void ForceVolatile(bool bForce);// 0x1761078ea041
	void ForceLayoutPrepass();// 0x1760078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Visual.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10]
	byte DetailMode;//[Offset: 0x378, Size: 0x1]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x6479078ea041
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x6478078ea041
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x6477078ea041
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x6476078ea041
	void SetDetailMode(byte InDetailMode);// 0x6475078ea041
	float GetStartTime();// 0x6474078ea041
	float GetEndTime();// 0x6473078ea041
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x6472078ea041
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x6471078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x401c078ea041
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x401b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 0x4]
	enum Space;//[Offset: 0x4, Size: 0x1]
	Guid Guid;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSegment
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SectionEvaluationDataTree
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvalTemplatePtr
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTrackImplementationPtr
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneFrameRange
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x38, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x94, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceInstanceDataPtr
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneTrackFieldData
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSubSectionFieldData
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	Guid Guid;//[Offset: 0x44, Size: 0x10]
	FString Name;//[Offset: 0x58, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 0x10]
	enum Ownership;//[Offset: 0x80, Size: 0x1]
	FName LevelName;//[Offset: 0x84, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] Ids;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Geometry
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0x645c078ea041
	FName GetUserTag();// 0x645b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x138, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x189d078ea041
	bool RemoveChild(Widget* Content);// 0x189c078ea041
	bool HasChild(Widget* Content);// 0x189b078ea041
	bool HasAnyChildren();// 0x189a078ea041
	int GetChildrenCount();// 0x1899078ea041
	int GetChildIndex(const Widget* Content);// 0x1898078ea041
	Widget* GetChildAt(int Index);// 0x1897078ea041
	Widget*[] GetAllChildren();// 0x1896078ea041
	void ClearChildren();// 0x1895078ea041
	PanelSlot* AddChild(Widget* Content);// 0x1894078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DynamicPropertyPath.CachedPropertyPath
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Function.Struct.Field.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 0x1c]
	float Duration;//[Offset: 0xf4, Size: 0x4]
	float MaxDistance;//[Offset: 0xf8, Size: 0x4]
	float TotalSamples;//[Offset: 0xfc, Size: 0x4]
	float Priority;//[Offset: 0x100, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 0x8]
	SoundModulation Modulation;//[Offset: 0x110, Size: 0x10]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x58]
	SoundClass*[] ChildClasses;//[Offset: 0x80, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x90, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0xa0, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xb0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float StereoBleed;//[Offset: 0x10, Size: 0x4]
	float LFEBleed;//[Offset: 0x14, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 0x4]
	byte OutputTarget;//[Offset: 0x2c, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x2d, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	float OutputVolume;//[Offset: 0x68, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x70, Size: 0x10]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x6ca1078ea041
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x6ca0078ea041
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x6c9f078ea041
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x6c9e078ea041
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x6c9d078ea041
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x6c9c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundEffectSubmixPreset.SoundEffectPreset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundEffectPreset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundfieldEncodingSettingsBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x160, Size: 0x4]
	int StreamingPriority;//[Offset: 0x164, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x168, Size: 0x1]
	byte SoundGroup;//[Offset: 0x16a, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x16c, Size: 0x1]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 0x1]
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x1a0, Size: 0x4]
	FString SpokenText;//[Offset: 0x1e8, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x1f8, Size: 0x4]
	float Volume;//[Offset: 0x1fc, Size: 0x4]
	float Pitch;//[Offset: 0x200, Size: 0x4]
	int NumChannels;//[Offset: 0x204, Size: 0x4]
	int SampleRate;//[Offset: 0x208, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x228, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveTable.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AudioEffectParameters
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundModulationPluginSourceSettingsBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x1c]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0xc, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x14, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3a0]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 0x1]
	float BinauralRadius;//[Offset: 0xb4, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 0x1]
	float OmniRadius;//[Offset: 0xbc, Size: 0x4]
	float StereoSpread;//[Offset: 0xc0, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x200, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 0xc]
	float ConeOffset;//[Offset: 0x20, Size: 0x4]
	float FalloffDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AttenuationSubmixSendSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpatializationPluginSourceSettingsBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OcclusionPluginSourceSettingsBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReverbPluginSourceSettingsBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundEffectSourcePreset.SoundEffectPreset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	float MinSendLevel;//[Offset: 0x14, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendDistance;//[Offset: 0x1c, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x304, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x308, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PointerEvent.InputEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EventReply
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FocusEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KeyEvent.InputEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PaintContext
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MotionEvent.InputEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterEvent.InputEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D LockedSize;//[Offset: 0x14, Size: 0x8]
	bool bUsePixelMargin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	Margin Margin;//[Offset: 0x20, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x30, Size: 0x28]
	SlateBrushOutlineSettings OutlineSettings;//[Offset: 0x60, Size: 0x40]
	Object* ResourceObject;//[Offset: 0xa0, Size: 0x8]
	FName ResourceName;//[Offset: 0xa8, Size: 0x8]
	Box2D UVRegion;//[Offset: 0xb0, Size: 0x14]
	byte DrawAs;//[Offset: 0xc4, Size: 0x1]
	byte Tiling;//[Offset: 0xc5, Size: 0x1]
	byte Mirroring;//[Offset: 0xc6, Size: 0x1]
	byte ImageType;//[Offset: 0xc7, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateBrushOutlineSettings
	Vector4 CornerRadii;//[Offset: 0x0, Size: 0x10]
	SlateColor Color;//[Offset: 0x10, Size: 0x28]
	float Width;//[Offset: 0x38, Size: 0x4]
	byte RoundingType;//[Offset: 0x3c, Size: 0x1]
	bool bUseBrushTransparency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0xb8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x3f10078ea041
	void ShowTitleSafeArea();// 0x3f0f078ea041
	void SetConsoleTarget(int PlayerIndex);// 0x3f0e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScriptViewportClient.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0x121c078ea041
	void ReceiveInit();// 0x121b078ea041
	void HandleTravelError(byte FailureType);// 0x1219078ea041
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x1217078ea041
	void DebugRemovePlayer(int ControllerId);// 0x1216078ea041
	void DebugCreatePlayer(int ControllerId);// 0x1215078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OnlineSession.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x402b078ea041
	bool WasControllerKeyJustPressed(Key Key);// 0x402a078ea041
	bool IsControllerKeyDown(Key Key);// 0x4029078ea041
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x4028078ea041
	Vector GetControllerVectorKeyState(Key Key);// 0x4027078ea041
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x4026078ea041
	float GetControllerKeyTimeDown(Key Key);// 0x4025078ea041
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x4024078ea041
	float GetControllerAnalogKeyState(Key Key);// 0x4023078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x4041078ea041
	void SetBind(FName BindName, FString Command);// 0x4040078ea041
	void InvertAxisKey(const Key AxisKey);// 0x403f078ea041
	void InvertAxis(const FName AxisName);// 0x403e078ea041
	void ClearSmoothing();// 0x403d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x50e6078ea041
	void Dragged(out const PointerEvent PointerEvent);// 0x50e5078ea041
	void DragCancelled(out const PointerEvent PointerEvent);// 0x50e4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnalogInputEvent.KeyEvent.InputEvent
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x228, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x230, Size: 0x8]
	float DefaultFOV;//[Offset: 0x240, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x248, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x250, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x2a0, Size: 0x660]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x900, Size: 0x660]
	TViewTarget ViewTarget;//[Offset: 0xf60, Size: 0x670]
	TViewTarget PendingViewTarget;//[Offset: 0x15d0, Size: 0x670]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1c70, Size: 0x660]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x22d0, Size: 0x660]
	CameraModifier*[] ModifierList;//[Offset: 0x2930, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2940, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x2950, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x2954, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2960, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2980, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2990, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2998, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x29d8, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x29f8, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2a08, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x2a18, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a20, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a20, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2a20, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2a20, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a21, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x2a24, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x2a28, Size: 0x4]
	float ViewYawMin;//[Offset: 0x2a2c, Size: 0x4]
	float ViewYawMax;//[Offset: 0x2a30, Size: 0x4]
	float ViewRollMin;//[Offset: 0x2a34, Size: 0x4]
	float ViewRollMax;//[Offset: 0x2a38, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x2a40, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x55e8078ea041
	void StopCameraFade();// 0x55e7078ea041
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x55e6078ea041
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x55e5078ea041
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x55e4078ea041
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x55e3078ea041
	void StopAllCameraShakes(bool bImmediately);// 0x55e2078ea041
	void StopAllCameraAnims(bool bImmediate);// 0x55e1078ea041
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x55e0078ea041
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x55df078ea041
	void SetGameCameraCutThisFrame();// 0x55de078ea041
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x55dd078ea041
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x55dc078ea041
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x55db078ea041
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x55da078ea041
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x55d9078ea041
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x55d8078ea041
	void OnPhotographySessionStart();// 0x55d7078ea041
	void OnPhotographySessionEnd();// 0x55d6078ea041
	void OnPhotographyMultiPartCaptureStart();// 0x55d5078ea041
	void OnPhotographyMultiPartCaptureEnd();// 0x55d4078ea041
	PlayerController* GetOwningPlayerController();// 0x55d3078ea041
	float GetFOVAngle();// 0x55d2078ea041
	Rotator GetCameraRotation();// 0x55d1078ea041
	Vector GetCameraLocation();// 0x55d0078ea041
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x55cf078ea041
	void ClearCameraLensEffects();// 0x55ce078ea041
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x55cd078ea041
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x55cc078ea041
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x55cb078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x4f9a078ea041
	void ReceivePlayShake(float Scale);// 0x4f99078ea041
	bool ReceiveIsFinished();// 0x4f98078ea041
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x4f97078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x5c0]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x600, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PostProcessSettings
	bool bOverride_LDRSaturation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRContrast;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellOpacity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellFadeness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellSecondRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellLocation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_NightfellSecondLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_PCBloomIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_PCBloomThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1]
	byte BloomMethod;//[Offset: 0x18, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x19, Size: 0x1]
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4]
	float WhiteTint;//[Offset: 0x20, Size: 0x4]
	Vector4 LDRSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 LDRContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 LDRBrightness;//[Offset: 0x50, Size: 0x10]
	float NightfellRadius;//[Offset: 0x60, Size: 0x4]
	float NightfellSecondRadius;//[Offset: 0x64, Size: 0x4]
	float NightfellOpacity;//[Offset: 0x68, Size: 0x4]
	float NightfellFadeness;//[Offset: 0x6c, Size: 0x4]
	Vector4 NightfellLocation;//[Offset: 0x70, Size: 0x10]
	Vector4 NightfellSecondLocation;//[Offset: 0x80, Size: 0x10]
	float PCBloomIntensity;//[Offset: 0x90, Size: 0x4]
	float PCBloomThreshold;//[Offset: 0x94, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0x160, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0x170, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x180, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x190, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x1a0, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x1b0, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x1c0, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x1d0, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x1e0, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x1f0, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x1f4, Size: 0x4]
	float BlueCorrection;//[Offset: 0x1f8, Size: 0x4]
	float ExpandGamut;//[Offset: 0x1fc, Size: 0x4]
	float FilmSlope;//[Offset: 0x200, Size: 0x4]
	float FilmToe;//[Offset: 0x204, Size: 0x4]
	float FilmShoulder;//[Offset: 0x208, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x20c, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x210, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x214, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x224, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x234, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x238, Size: 0x4]
	float FilmSaturation;//[Offset: 0x23c, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x240, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x250, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x260, Size: 0x10]
	float FilmContrast;//[Offset: 0x270, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x274, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x278, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x27c, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x280, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x290, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x294, Size: 0x4]
	float BloomIntensity;//[Offset: 0x298, Size: 0x4]
	float BloomThreshold;//[Offset: 0x29c, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x2a0, Size: 0x4]
	float Bloom1Size;//[Offset: 0x2a4, Size: 0x4]
	float Bloom2Size;//[Offset: 0x2a8, Size: 0x4]
	float Bloom3Size;//[Offset: 0x2ac, Size: 0x4]
	float Bloom4Size;//[Offset: 0x2b0, Size: 0x4]
	float Bloom5Size;//[Offset: 0x2b4, Size: 0x4]
	float Bloom6Size;//[Offset: 0x2b8, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x2bc, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x2cc, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x2dc, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x2ec, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x2fc, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x30c, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x31c, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x320, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x328, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x330, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x334, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x338, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x33c, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x340, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x348, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x34c, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x35c, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x36c, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x370, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x378, Size: 0x4]
	float CameraISO;//[Offset: 0x37c, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x380, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x384, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x388, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x38c, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x390, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x394, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x398, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x3a0, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x3a8, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x3ac, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x3b0, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x3b4, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x3b8, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x3bc, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x3c0, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x3c4, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x3c8, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x3cc, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x3d0, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x3e0, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x3e4, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x3e8, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x3f0, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x470, Size: 0x4]
	float GrainJitter;//[Offset: 0x474, Size: 0x4]
	float GrainIntensity;//[Offset: 0x478, Size: 0x4]
	float AmbientOcclusionIntensity;//[Offset: 0x47c, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x480, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x484, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x488, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x48c, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x490, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x494, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x498, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x49c, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x4a0, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x4a4, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x4a8, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x4ac, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b0, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x4b4, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x4b8, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x4c8, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x4cc, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x4d0, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x4d4, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x4d8, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x4e0, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x4e8, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x4ec, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x4f0, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x4f4, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x4f8, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x4fc, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x500, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x504, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x508, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x50c, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x510, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x514, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x518, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x51c, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x520, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x524, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x528, Size: 0x4]
	float LPVIntensity;//[Offset: 0x52c, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x530, Size: 0x4]
	float LPVSize;//[Offset: 0x534, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x538, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x53c, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x540, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x544, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x548, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x54c, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x550, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x554, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x558, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x55c, Size: 0x4]
	enum ReflectionsType;//[Offset: 0x560, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x564, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x568, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x56c, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x570, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x574, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x578, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x57c, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57d, Size: 0x1]
	enum TranslucencyType;//[Offset: 0x57e, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x580, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x584, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x588, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x58c, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58d, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x590, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x594, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x598, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x59c, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x5a0, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x5a8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextureCube.Texture.StreamableRenderAsset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x5c0]
	float BasePostProcessBlendWeight;//[Offset: 0x620, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x66bf078ea041
	void SetScale(float NewDuration);// 0x66be078ea041
	void SetDuration(float NewDuration);// 0x66bd078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x314, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x318, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x31c, Size: 0x4]
	class CameraShake* CameraShake;//[Offset: 0x320, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	void StopAllCameraShakes(bool bImmediately);// 0x66c3078ea041
	void PlayCameraShake(class CameraShake InCameraShake);// 0x66c2078ea041
	void Play();// 0x66c1078ea041
	float GetAttenuationFactor(out const Vector Location);// 0x66c0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x4576078ea041
	Actor* GetViewTarget();// 0x4575078ea041
	void EnableModifier();// 0x4574078ea041
	void DisableModifier(bool bImmediate);// 0x4573078ea041
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x4572078ea041
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x4571078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x280, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x288, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x290, Size: 0x30]
	float BaseFOV;//[Offset: 0x2c0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x2d8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x228, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x238, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x248, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x258, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x268, Size: 0x10]
	void ToggleActive();// 0x6734078ea041
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x6733078ea041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x6732078ea041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x6731078ea041
	void SetFloatParameter(FName ParameterName, float Param);// 0x6730078ea041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x672f078ea041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x672e078ea041
	void OnRep_bCurrentlyActive();// 0x672d078ea041
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x672c078ea041
	bool IsActive();// 0x672b078ea041
	void Deactivate();// 0x672a078ea041
	void Activate();// 0x6729078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 0x4]
	float Delay;//[Offset: 0xa8, Size: 0x4]
	float DelayLow;//[Offset: 0xac, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 0x1]
	byte LODMethod;//[Offset: 0xb3, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x6bfe078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x58, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	byte SortMode;//[Offset: 0x5a, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	float EmitterDuration;//[Offset: 0x5c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 0x10]
	float EmitterDelay;//[Offset: 0xa0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 0x4]
	float RandomImageTime;//[Offset: 0xb8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xbc, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xcc, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 0x1]
	byte BoundingMode;//[Offset: 0xd1, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 0xc]
	float AlphaThreshold;//[Offset: 0xe0, Size: 0x4]
	int EmitterLoops;//[Offset: 0xe4, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 0x8]
	int MaxDrawCount;//[Offset: 0xf0, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 0xc]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Distribution.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleBurst
	int count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleTypeDataBase.ParticleModule.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleEventBase.ParticleModule.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleEventSendToGame.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x48]
	OrbitOptions OffsetOptions;//[Offset: 0x78, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x80, Size: 0x48]
	OrbitOptions RotationOptions;//[Offset: 0xc8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xd0, Size: 0x48]
	OrbitOptions RotationRateOptions;//[Offset: 0x118, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x34, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x540, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x548, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x558, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x569, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x569, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x569, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x569, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x569, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56a, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56a, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56a, Size: 0x1]
	byte LODMethod;//[Offset: 0x575, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x576, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x578, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x588, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x598, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x5a8, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x5b8, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	Vector OldPosition;//[Offset: 0x5cc, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x5d8, Size: 0xc]
	float WarmupTime;//[Offset: 0x5e4, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x5e8, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x5f0, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x5f8, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x618, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x630, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x688, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x690, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x698, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x699, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x69a, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x6c8, Size: 0x10]
	delegate OnPreSystemActivated;//[Offset: 0x6d8, Size: 0x10]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3d21078ea041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x3d20078ea041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x3d1f078ea041
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x3d1e078ea041
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x3d1d078ea041
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x3d1c078ea041
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x3d1b078ea041
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x3d1a078ea041
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x3d19078ea041
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x3d18078ea041
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x3d17078ea041
	int GetNumActiveParticles();// 0x3d16078ea041
	MaterialInterface* GetNamedMaterial(FName InName);// 0x3d15078ea041
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x3d14078ea041
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x3d13078ea041
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x3d12078ea041
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x3d11078ea041
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x3d10078ea041
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x3d0f078ea041
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x3d0e078ea041
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x3d0d078ea041
	void EndTrails();// 0x3d0c078ea041
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x3d0b078ea041
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x3d0a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x3d09078ea041
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x3d08078ea041
	void SetFloatParameter(FName ParameterName, float Param);// 0x3d07078ea041
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x3d06078ea041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x3d05078ea041
	void SetBoolParameter(FName ParameterName, bool Param);// 0x3d04078ea041
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x3d03078ea041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x3d02078ea041
	void ReleaseToPool();// 0x3d01078ea041
	FXSystemAsset* GetFXSystemAsset();// 0x3d00078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSystemLOD
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x650]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x650]
	PlayerState* PlayerState;//[Offset: 0x660, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x228, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x230, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x238, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	float AspectRatio;//[Offset: 0x24c, Size: 0x4]
	float FOVAngle;//[Offset: 0x250, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x254, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 0x5c0]
	int GetAutoActivatePlayerIndex();// 0x57e7078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x314, Size: 0x4]
	float OrthoWidth;//[Offset: 0x318, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x31c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x320, Size: 0x4]
	float AspectRatio;//[Offset: 0x324, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x328, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x328, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x328, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x329, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x360, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x390, Size: 0x5c0]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x4f93078ea041
	void SetProjectionMode(byte InProjectionMode);// 0x4f92078ea041
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x4f91078ea041
	void SetOrthoWidth(float InOrthoWidth);// 0x4f90078ea041
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x4f8f078ea041
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x4f8e078ea041
	void SetFieldOfView(float InFieldOfView);// 0x4f8d078ea041
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x4f8c078ea041
	void SetAspectRatio(float InAspectRatio);// 0x4f8b078ea041
	void RemoveBlendable(interface classNone InBlendableObject);// 0x4f8a078ea041
	void OnCameraMeshHiddenChanged();// 0x4f89078ea041
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x4f88078ea041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x4f87078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HapticFeedbackEffect_Base.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x284, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x288, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x290, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x298, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x2a0, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 0x1]
	void TurnAtRate(float Rate);// 0x3c54078ea041
	void MoveUp_World(float val);// 0x3c53078ea041
	void MoveRight(float val);// 0x3c52078ea041
	void MoveForward(float val);// 0x3c51078ea041
	void LookUpAtRate(float Rate);// 0x3c50078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x558, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x4957078ea041
	float GetUnscaledSphereRadius();// 0x4956078ea041
	float GetShapeScale();// 0x4955078ea041
	float GetScaledSphereRadius();// 0x4954078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x574, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x578, Size: 0x4]
	int MinLOD;//[Offset: 0x57c, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x580, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x588, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x590, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x594, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x594, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x594, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x594, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x594, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x594, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x594, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x594, Size: 0x1]
	bool bOverrideShadowMapRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x595, Size: 0x1]
	bool bMinimizeLightmapRes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x595, Size: 0x1]
	bool bOverrideMeshMinScreenSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x595, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x595, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x595, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x595, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x595, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x595, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x598, Size: 0x4]
	float LightmapPrecision;//[Offset: 0x59c, Size: 0x4]
	float ShadowmapPrecision;//[Offset: 0x5a0, Size: 0x4]
	int OverriddenShadowMapRes;//[Offset: 0x5a4, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x5a8, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x5ac, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x5b0, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x5b8, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5c8, Size: 0x10]
	bool bClearStaticLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x5dc, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x44fa078ea041
	void SetShadowmapPrecision(float InShadowMapPrecision);// 0x44f9078ea041
	void SetReverseCulling(bool ReverseCulling);// 0x44f8078ea041
	void SetOverrideShadowMapRes(int InOverridShadowMapRes);// 0x44f7078ea041
	void SetOverrideMinLOD(bool bInOverrideMinLOD, int InMinLOD);// 0x44f6078ea041
	void SetOverrideLightMapRes(int InOverrideLightMapRes);// 0x44f5078ea041
	void SetLightmapPrecision(float InLightMapPrecision);// 0x44f4078ea041
	void SetForcedLodModel(int NewForcedLodModel);// 0x44f3078ea041
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x44f2078ea041
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x44f1078ea041
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x44f0078ea041
	void EnableShadowmapResOverride(bool bInOverrideShadowMapRes);// 0x44ef078ea041
	void EnableLightmapResOverride(bool bInOverrideLightMapRes);// 0x44ee078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMeshComponentLODInfo
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x5024078ea041
	void ViewSelf();// 0x5023078ea041
	void ViewPlayer(FString S);// 0x5022078ea041
	void ViewClass(class Actor DesiredClass);// 0x5021078ea041
	void ViewActor(FName ActorName);// 0x5020078ea041
	void UpdateSafeArea();// 0x501f078ea041
	void ToggleServerStatReplicatorUpdateStatNet();// 0x501e078ea041
	void ToggleServerStatReplicatorClientOverwrite();// 0x501d078ea041
	void ToggleDebugCamera();// 0x501c078ea041
	void ToggleAILogging();// 0x501b078ea041
	void TestCollisionDistance();// 0x501a078ea041
	void Teleport();// 0x5019078ea041
	void Summon(FString ClassName);// 0x5018078ea041
	void StreamLevelOut(FName PackageName);// 0x5017078ea041
	void StreamLevelIn(FName PackageName);// 0x5016078ea041
	void SpawnServerStatReplicator();// 0x5015078ea041
	void Slomo(float NewTimeDilation);// 0x5014078ea041
	void SetWorldOrigin();// 0x5013078ea041
	void SetMouseSensitivityToDefault();// 0x5012078ea041
	void ServerToggleAILogging();// 0x5011078ea041
	void ReceiveInitCheatManager();// 0x5010078ea041
	void ReceiveEndPlay();// 0x500f078ea041
	void PlayersOnly();// 0x500e078ea041
	void OnlyLoadLevel(FName PackageName);// 0x500d078ea041
	void LogLoc();// 0x500c078ea041
	void InvertMouse();// 0x500b078ea041
	void God();// 0x500a078ea041
	void Ghost();// 0x5009078ea041
	void FreezeFrame(float Delay);// 0x5008078ea041
	void Fly();// 0x5007078ea041
	void FlushLog();// 0x5006078ea041
	void EnableDebugCamera();// 0x5005078ea041
	void DumpVoiceMutingState();// 0x5004078ea041
	void DumpPartyState();// 0x5003078ea041
	void DumpOnlineSessionState();// 0x5002078ea041
	void DumpChatState();// 0x5001078ea041
	void DisableDebugCamera();// 0x5000078ea041
	void DestroyTarget();// 0x4fff078ea041
	void DestroyServerStatReplicator();// 0x4ffe078ea041
	void DestroyPawns(class Pawn aClass);// 0x4ffd078ea041
	void DestroyAllPawnsExceptTarget();// 0x4ffc078ea041
	void DestroyAll(class Actor aClass);// 0x4ffb078ea041
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x4ffa078ea041
	void DebugCapsuleSweepPawn();// 0x4ff9078ea041
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x4ff8078ea041
	void DebugCapsuleSweepClear();// 0x4ff7078ea041
	void DebugCapsuleSweepChannel(byte Channel);// 0x4ff6078ea041
	void DebugCapsuleSweepCapture();// 0x4ff5078ea041
	void DebugCapsuleSweep();// 0x4ff4078ea041
	void DamageTarget(float DamageAmount);// 0x4ff3078ea041
	void CheatScript(FString ScriptName);// 0x4ff2078ea041
	void ChangeSize(float F);// 0x4ff1078ea041
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x4ff0078ea041
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x4fef078ea041
	void BugIt(FString ScreenShotDescription);// 0x4fee078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a5, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a5, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a5, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a5, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a5, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a5, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a5, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a5, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x5a8, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x5b0, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x5b8, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x5c0, Size: 0x88]
	PlayerController* OriginalControllerRef;//[Offset: 0x648, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x650, Size: 0x8]
	float SpeedScale;//[Offset: 0x658, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x65c, Size: 0x4]
	float InitialAccel;//[Offset: 0x660, Size: 0x4]
	float InitialDecel;//[Offset: 0x664, Size: 0x4]
	void ToggleDisplay();// 0x66ed078ea041
	void ShowDebugSelectedInfo();// 0x66ec078ea041
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x66eb078ea041
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x66ea078ea041
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x66e9078ea041
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x66e8078ea041
	Actor* GetSelectedActor();// 0x66e7078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x540, Size: 0x4]
	float FrustumAngle;//[Offset: 0x544, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x548, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x54c, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x550, Size: 0x4]
	Texture* Texture;//[Offset: 0x558, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x170, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1f0, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x1530, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1b10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x170, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x178, Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	float Time;//[Offset: 0x210, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Package.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	class Object* ChannelClass;//[Offset: 0x10, Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicationDriver.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PackageMap.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x228, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x238, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x240, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x248, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x250, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x258, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x260, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x268, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x270, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x278, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x280, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x288, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x290, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x298, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	void StartPlay();// 0x22b7078ea041
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x22b6078ea041
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x22b5078ea041
	bool ShouldReset(Actor* ActorToReset);// 0x22b4078ea041
	void ReturnToMainMenuHost();// 0x22b3078ea041
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x22b2078ea041
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x22b1078ea041
	void RestartPlayer(Controller* NewPlayer);// 0x22b0078ea041
	void ResetLevel();// 0x22af078ea041
	bool PlayerCanRestart(PlayerController* Player);// 0x22ae078ea041
	bool MustSpectate(PlayerController* NewPlayerController);// 0x22ad078ea041
	void K2_PostLogin(PlayerController* NewPlayer);// 0x22ac078ea041
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x22ab078ea041
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x22aa078ea041
	void K2_OnLogout(Controller* ExitingController);// 0x22a9078ea041
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x22a8078ea041
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x22a7078ea041
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x22a6078ea041
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x22a5078ea041
	bool HasMatchStarted();// 0x22a4078ea041
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x22a3078ea041
	int GetNumSpectators();// 0x22a2078ea041
	int GetNumPlayers();// 0x22a1078ea041
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x22a0078ea041
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x229f078ea041
	Actor* ChoosePlayerStart(Controller* Player);// 0x229e078ea041
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x229d078ea041
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x229c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x228, Size: 0x4]
	int MaxPlayers;//[Offset: 0x22c, Size: 0x4]
	int MaxPartySize;//[Offset: 0x230, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x234, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	FName SessionName;//[Offset: 0x238, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x228, Size: 0x28]
	GameModeBase* AuthorityGameMode;//[Offset: 0x250, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x258, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x260, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x274, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x278, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x27c, Size: 0x4]
	void OnRep_SpectatorClass();// 0x1bae078ea041
	void OnRep_ReplicatedWorldTimeSeconds();// 0x1bad078ea041
	void OnRep_ReplicatedHasBegunPlay();// 0x1bac078ea041
	void OnRep_GameModeClass();// 0x1bab078ea041
	bool HasMatchStarted();// 0x1baa078ea041
	bool HasBegunPlay();// 0x1ba9078ea041
	float GetServerWorldTimeSeconds();// 0x1ba8078ea041
	float GetPlayerStartTime(Controller* Controller);// 0x1ba7078ea041
	float GetPlayerRespawnDelay(Controller* Controller);// 0x1ba6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	uint32 Channels;//[Offset: 0x22c, Size: 0x4]
	uint32 InRate;//[Offset: 0x230, Size: 0x4]
	uint32 OutRate;//[Offset: 0x234, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x23c, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x240, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x244, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x248, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x24c, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x250, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x254, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x258, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x25c, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x260, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x264, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x268, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x26c, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x270, Size: 0x4]
	uint32 InPackets;//[Offset: 0x274, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x278, Size: 0x4]
	uint32 InBunches;//[Offset: 0x27c, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x280, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x284, Size: 0x4]
	uint32 InLoss;//[Offset: 0x288, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x28c, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x290, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x294, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x298, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x29c, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2a0, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2a4, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2a8, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2ac, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x2b0, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2b4, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b8, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x2bc, Size: 0x4]
	uint32 NumActors;//[Offset: 0x2c0, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x2c4, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x2c8, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2cc, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2d0, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x2d4, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d8, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x2dc, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x2e0, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x2e4, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x2e8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x228, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x22c, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x230, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x234, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x238, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x23c, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x240, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x244, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x248, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x250, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x254, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x258, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x25c, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x260, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x264, Size: 0x4]
	float MoveRepSize;//[Offset: 0x268, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x26c, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x270, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x274, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x278, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x27c, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x280, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x284, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x288, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x28c, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x290, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x294, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x298, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x29c, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2a0, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a8, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2ac, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2b0, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b8, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2bc, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2c0, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2c4, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BookmarkBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x228, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x230, Size: 0x8]
	float PlayRate;//[Offset: 0x238, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x240, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x244, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x244, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x248, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x250, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x268, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x278, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x288, Size: 0x1]
	float InterpPosition;//[Offset: 0x28c, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x294, Size: 0x1]
	delegate OnPlay;//[Offset: 0x298, Size: 0x10]
	delegate OnStop;//[Offset: 0x2a8, Size: 0x10]
	delegate OnPause;//[Offset: 0x2b8, Size: 0x10]
	void Stop();// 0x6bf8078ea041
	void SetPosition(float NewPosition, bool bJump);// 0x6bf7078ea041
	void SetLoopingState(bool bNewLooping);// 0x6bf6078ea041
	void Reverse();// 0x6bf5078ea041
	void Play();// 0x6bf4078ea041
	void Pause();// 0x6bf3078ea041
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x6bf2078ea041
	void ChangePlaybackDirection();// 0x6bf1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpGroupDirector.InterpGroup.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x318, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x320, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x328, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x66d5078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Interface.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 0x8]
	<FName,LevelSolarDecorationLightMapGUIDArray> LevelSolarDecorationLightMapGUIDs;//[Offset: 0x1e8, Size: 0x50]
	IntVector LightBuildLevelOffset;//[Offset: 0x238, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x244, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x244, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x298, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x2a8, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x2c8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x558, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x6bcd078ea041
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x6bcc078ea041
	bool RemoteEvent(FName EventName);// 0x6bcb078ea041
	void LevelReset();// 0x6bca078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x230, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x238, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x240, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x540, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1]
	float ScreenSize;//[Offset: 0x54c, Size: 0x4]
	float U;//[Offset: 0x550, Size: 0x4]
	float UL;//[Offset: 0x554, Size: 0x4]
	float V;//[Offset: 0x558, Size: 0x4]
	float VL;//[Offset: 0x55c, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x6649078ea041
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x6648078ea041
	void SetSprite(Texture2D* NewSprite);// 0x6647078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSolarDecorationLightMapGUIDArray
	Guid[] MapBuildDataIdArray;//[Offset: 0x0, Size: 0x10]
	uint32[] LODNumArray;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	int StreamingPriority;//[Offset: 0xb4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xbc, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xf0, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x100, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x110, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x120, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x130, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x138, Size: 0x8]
	bool ShouldBeLoaded();// 0x6bd9078ea041
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x6bd8078ea041
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x6bd7078ea041
	void SetPriority(int NewPriority);// 0x6bd6078ea041
	void SetLevelLODIndex(int LODIndex);// 0x6bd5078ea041
	bool IsStreamingStatePending();// 0x6bd4078ea041
	bool IsLevelVisible();// 0x6bd3078ea041
	bool IsLevelLoaded();// 0x6bd2078ea041
	FName GetWorldAssetPackageFName();// 0x6bd1078ea041
	Level* GetLoadedLevel();// 0x6bd0078ea041
	LevelScriptActor* GetLevelScriptActor();// 0x6bcf078ea041
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x6bce078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x260, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x270, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x271, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x850, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9fc, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xa20, Size: 0x10]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 0x1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xa38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleEventManager.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationSystemBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x6646078ea041
	int GetObjectCount();// 0x6645078ea041
	int GetNewAvoidanceUID();// 0x6644078ea041
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x6643078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x66d0078ea041
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x66cf078ea041
	Vector K2_Project(Vector WorldLocation);// 0x66ce078ea041
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x66cd078ea041
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x66cc078ea041
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x66cb078ea041
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x66ca078ea041
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x66c9078ea041
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x66c8078ea041
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x66c7078ea041
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x66c6078ea041
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x66c5078ea041
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x66c4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReporterGraph.ReporterBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReporterBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x88, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x98, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0xa4, Size: 0x4]
	DirectoryPath[] DirectoriesToScan;//[Offset: 0xa8, Size: 0x10]
	FilePath[] MapsToScan;//[Offset: 0xb8, Size: 0x10]
	DirectoryPath[] DirectoriesToNeverScan;//[Offset: 0xc8, Size: 0x10]
	FilePath[] MapsToNeverScan;//[Offset: 0xd8, Size: 0x10]
	SoftObjectPath[] WaitForShownLevels;//[Offset: 0xe8, Size: 0x10]
	void OnStreamingLevelShownHandle(FName LevelPackageName, LevelStreaming* LevelStreaming);// 0x6d30078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWorldSettings.WorldSettings.Info.Actor.Object
	int MapId;//[Offset: 0x420, Size: 0x4]
	SoftObjectPath PreloadAssets;//[Offset: 0x428, Size: 0x18]
	bool bAsyncPreload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool bHoldAllMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	SolarPostProcessSettingItem* PostProcessItem;//[Offset: 0x448, Size: 0x8]
	int CurrentActiveColorThemeIndex;//[Offset: 0x450, Size: 0x4]
	int SolarMapTypeValue;//[Offset: 0x454, Size: 0x4]
	bool MapEnableLowMemoryGraphOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	Transform SpectatorPawnStartPoint;//[Offset: 0x460, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPostProcessSettingItem.Object
	ColorGradingItem ColorGradingItem;//[Offset: 0x30, Size: 0x5d0]
	void SetPostSettingsByIndex(int Index, PostProcessSettings PPSettings);// 0x5257078ea041
	PostProcessSettings GetPostSettingsByIndex(int Index);// 0x5256078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ColorGradingItem
	enum ColorTheme;//[Offset: 0x0, Size: 0x1]
	PostProcessSettings PPSettings;//[Offset: 0x10, Size: 0x5c0]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeamInfo.Info.Actor.Object
	byte TeamID;//[Offset: 0x240, Size: 0x1]
	byte TeamRank;//[Offset: 0x241, Size: 0x1]
	byte KillCount;//[Offset: 0x242, Size: 0x1]
	byte MemberLimit;//[Offset: 0x243, Size: 0x1]
	FText TeamName;//[Offset: 0x248, Size: 0x18]
	byte MatchCount;//[Offset: 0x260, Size: 0x1]
	bool bHasSettled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x261, Size: 0x1]
	delegate OnJoinTeam;//[Offset: 0x262, Size: 0x1]
	delegate OnLeaveTeam;//[Offset: 0x263, Size: 0x1]
	SolarPlayerState*[] BotMembers;//[Offset: 0x268, Size: 0x10]
	SolarPlayerState*[] PlayerMembers;//[Offset: 0x278, Size: 0x10]
	SolarPlayerState*[] TeamMembers;//[Offset: 0x288, Size: 0x10]
	SolarTeamInfoComponent* TeamInfoDetails;//[Offset: 0x298, Size: 0x8]
	enum MatchResult;//[Offset: 0x2a1, Size: 0x1]
	void Settle(byte Rank);// 0x4543078ea041
	void RemoveFromTeam(SolarPlayerState* PS);// 0x4542078ea041
	void ReceivedTeamID();// 0x4541078ea041
	void ReceivedKillCount();// 0x4540078ea041
	void ReceivedHasSettled();// 0x453f078ea041
	void RearrangeMembersPos();// 0x453e078ea041
	void OnPlayerStateEndPlay(Actor* Actor, byte EndPlayReason);// 0x453d078ea041
	bool IsInTeam(const SolarPlayerState* PS);// 0x453c078ea041
	bool IsAPlayerTeam();// 0x453b078ea041
	bool IsAOnlyPlayerTeam();// 0x453a078ea041
	bool IsAOnlyBotTeam();// 0x4539078ea041
	bool IsA(enum TeamType);// 0x4538078ea041
	void InitFromGameModeConfig();// 0x4537078ea041
	bool HasBeenEliminated();// 0x4536078ea041
	SolarPlayerState* GetTeammatePlayerByPosInTeam(int InPosInTeam);// 0x4535078ea041
	int GetSize();// 0x4534078ea041
	void GetSCMPlayerStateTeamMembers(out SCMPlayerState*[] OutTeamMembers);// 0x4533078ea041
	int GetAliveTeammateNum();// 0x4532078ea041
	void AddToTeam(SolarPlayerState* PS);// 0x4531078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerState.PlayerState.Info.Actor.Object
	delegate OnTeammatePlayerStateRepDelegate;//[Offset: 0x328, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate;//[Offset: 0x338, Size: 0x10]
	delegate OnTeammatePlayerStateRemovedInBattlePhaseDelegate;//[Offset: 0x348, Size: 0x10]
	delegate OnPlayerChangedGoldsDelegate;//[Offset: 0x358, Size: 0x10]
	delegate OnOBPlayerRepDelegate;//[Offset: 0x368, Size: 0x10]
	int Gold;//[Offset: 0x378, Size: 0x4]
	int[] CostedGolds;//[Offset: 0x380, Size: 0x10]
	int[] ReceivedGolds;//[Offset: 0x390, Size: 0x10]
	int CharacterId;//[Offset: 0x3a0, Size: 0x4]
	int SkinId;//[Offset: 0x3a4, Size: 0x4]
	FString ClanId;//[Offset: 0x3a8, Size: 0x10]
	FString ClanName;//[Offset: 0x3b8, Size: 0x10]
	FString ClanShortName;//[Offset: 0x3c8, Size: 0x10]
	int BagId;//[Offset: 0x3d8, Size: 0x4]
	int CapsuleID;//[Offset: 0x3dc, Size: 0x4]
	FString SolarPlayerID;//[Offset: 0x3e0, Size: 0x10]
	FString NickName;//[Offset: 0x3f0, Size: 0x10]
	uint32 BattleVoiceId;//[Offset: 0x400, Size: 0x4]
	int64 RTCType;//[Offset: 0x408, Size: 0x8]
	uint64 UserId;//[Offset: 0x410, Size: 0x8]
	byte PosInTeam;//[Offset: 0x418, Size: 0x1]
	int CharacterLevel;//[Offset: 0x41c, Size: 0x4]
	int AvatarID;//[Offset: 0x420, Size: 0x4]
	FString AvatarUrl;//[Offset: 0x428, Size: 0x10]
	int AvatarFrameID;//[Offset: 0x438, Size: 0x4]
	int Gender;//[Offset: 0x43c, Size: 0x4]
	int AccountLevel;//[Offset: 0x440, Size: 0x4]
	int FriendNum;//[Offset: 0x444, Size: 0x4]
	int RoleID;//[Offset: 0x448, Size: 0x4]
	MedalInfo[] Medals;//[Offset: 0x450, Size: 0x10]
	BattleCharacterData[] AllCharacterData;//[Offset: 0x460, Size: 0x10]
	CharacterSkin[] AllSkins;//[Offset: 0x470, Size: 0x10]
	int[] AllVoices;//[Offset: 0x480, Size: 0x10]
	BattleCharacterData CurUsedCharacterData;//[Offset: 0x490, Size: 0x60]
	int[] KillReports;//[Offset: 0x4f0, Size: 0x10]
	ExpRankMedalData[] AllExpRankMedalData;//[Offset: 0x500, Size: 0x10]
	LastBattleInfo LastBattleInfo;//[Offset: 0x510, Size: 0x1c]
	FString[] ReCombatLimitPlayer;//[Offset: 0x530, Size: 0x10]
	int RoleUltimateSkillCDState;//[Offset: 0x540, Size: 0x4]
	SettlementParam_ExtraRewardInfo[] ExtraRewards;//[Offset: 0x548, Size: 0x10]
	SettlementReward[] SettlementRewards;//[Offset: 0x558, Size: 0x10]
	SettlementCrateReward[] CrateRewards;//[Offset: 0x568, Size: 0x10]
	uint32 PlayerNumber;//[Offset: 0x578, Size: 0x4]
	<int,int> VehicleSkinData;//[Offset: 0x580, Size: 0x50]
	float CurrentHealth;//[Offset: 0x5d0, Size: 0x4]
	float MaxHealth;//[Offset: 0x5d4, Size: 0x4]
	ShieldInfo CurShieldInfo;//[Offset: 0x5d8, Size: 0x8]
	byte ReviveItemNum;//[Offset: 0x5e0, Size: 0x1]
	byte ReviveCountByItem;//[Offset: 0x5e1, Size: 0x1]
	int TalentID;//[Offset: 0x5e4, Size: 0x4]
	int LikeValue;//[Offset: 0x5e8, Size: 0x4]
	int ReceivedGiftNum;//[Offset: 0x5ec, Size: 0x4]
	int SpectatorNum;//[Offset: 0x5f0, Size: 0x4]
	enum TalentState;//[Offset: 0x5f4, Size: 0x1]
	bool HasBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f5, Size: 0x1]
	bool HasGroupBackendVerified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f6, Size: 0x1]
	Vector2D MarkedPointInNavMap;//[Offset: 0x5f8, Size: 0x8]
	Vector SelfLastVehicleLocation;//[Offset: 0x600, Size: 0xc]
	Vector TeamLastVehicleLocation;//[Offset: 0x60c, Size: 0xc]
	byte CurrentPlayerStateInGame;//[Offset: 0x618, Size: 0x1]
	byte CurrentCharacterStateInGame;//[Offset: 0x619, Size: 0x1]
	int AccountFlag;//[Offset: 0x61c, Size: 0x4]
	int ClanFlag;//[Offset: 0x620, Size: 0x4]
	int[] EquippedEmotes;//[Offset: 0x628, Size: 0x10]
	<int,EquippedEmotesData> AllCharacterEquippedEmotes;//[Offset: 0x638, Size: 0x50]
	FString OS;//[Offset: 0x688, Size: 0x10]
	FString OsType;//[Offset: 0x698, Size: 0x10]
	FString DeviceModel;//[Offset: 0x6a8, Size: 0x10]
	enum InputType;//[Offset: 0x6b8, Size: 0x1]
	bool bIsSameTeamWithLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b9, Size: 0x1]
	bool HasReconnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ba, Size: 0x1]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1]
	float HangUpTime;//[Offset: 0x6c4, Size: 0x4]
	float OfflineBattleTime;//[Offset: 0x6c8, Size: 0x4]
	int Elo;//[Offset: 0x6cc, Size: 0x4]
	int RankLevel;//[Offset: 0x6d0, Size: 0x4]
	int RankLevel2;//[Offset: 0x6d4, Size: 0x4]
	int LegendRank;//[Offset: 0x6d8, Size: 0x4]
	float StartWaitTime;//[Offset: 0x6dc, Size: 0x4]
	float ReportedWaitTime;//[Offset: 0x6e0, Size: 0x4]
	byte VipType;//[Offset: 0x6e4, Size: 0x1]
	int WarmupTag;//[Offset: 0x6e8, Size: 0x4]
	float Frustration;//[Offset: 0x6ec, Size: 0x4]
	bool bMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	byte LobbyTeamMemberNum;//[Offset: 0x6f1, Size: 0x1]
	bool bTeamIDHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 0x1]
	int RepliableMessageID;//[Offset: 0x70c, Size: 0x4]
	float RepliableMessageStartTime;//[Offset: 0x710, Size: 0x4]
	bool bIsOBPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 0x1]
	int WarmId;//[Offset: 0x724, Size: 0x4]
	int WarmType;//[Offset: 0x728, Size: 0x4]
	bool AllowOtherJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 0x1]
	FString SocialTeamID;//[Offset: 0x730, Size: 0x10]
	float WaitTimeBeforeEnterSpectateMode;//[Offset: 0x740, Size: 0x4]
	delegate OnSpectateInfoRep;//[Offset: 0x748, Size: 0x10]
	SolarPlayerState* KillerPlayerState;//[Offset: 0x758, Size: 0x8]
	SolarPlayerState* RevengePlayerState;//[Offset: 0x760, Size: 0x8]
	KillEnemySnapshot[] KilledEnemysRecord;//[Offset: 0x768, Size: 0x10]
	SolarSpectateInfo* SpectateInfo;//[Offset: 0x778, Size: 0x8]
	enum NetStateInGame;//[Offset: 0x780, Size: 0x1]
	bool bHasLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x781, Size: 0x1]
	bool bHasUpdateByServerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 0x1]
	SolarReplayHighlightComponent* ReplayHightlightComp;//[Offset: 0x798, Size: 0x8]
	int KillNum;//[Offset: 0x7a0, Size: 0x4]
	int AssistNum;//[Offset: 0x7c0, Size: 0x4]
	Vector DeathPos;//[Offset: 0x7e0, Size: 0xc]
	int ReconnectNum;//[Offset: 0x7ec, Size: 0x4]
	float MultiKillDurationTime;//[Offset: 0x800, Size: 0x4]
	float TotalReceivedDamage;//[Offset: 0x818, Size: 0x4]
	float HealSelf;//[Offset: 0x81c, Size: 0x4]
	float ReceivedHeal;//[Offset: 0x820, Size: 0x4]
	float LifeTime;//[Offset: 0x824, Size: 0x4]
	SettlementTempData SettleSyncData;//[Offset: 0x828, Size: 0xd8]
	int PlayerRank;//[Offset: 0x900, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x904, Size: 0x1]
	bool bMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x905, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x907, Size: 0x1]
	float MvpScore;//[Offset: 0x908, Size: 0x4]
	float KDA;//[Offset: 0x90c, Size: 0x4]
	int ResurrectionTimes;//[Offset: 0x910, Size: 0x4]
	int CharacterExp;//[Offset: 0x914, Size: 0x4]
	int[] CharacterExpReason;//[Offset: 0x918, Size: 0x10]
	int GainCombatScore;//[Offset: 0x928, Size: 0x4]
	int AccountExp;//[Offset: 0x92c, Size: 0x4]
	<int,int> WeaponExps;//[Offset: 0x930, Size: 0x50]
	int Zomborg;//[Offset: 0x980, Size: 0x4]
	int ZomborgExtra;//[Offset: 0x984, Size: 0x4]
	enum[] SettlePunishTypes;//[Offset: 0x988, Size: 0x10]
	<int,int> CollectionItemRewards;//[Offset: 0x998, Size: 0x50]
	int[] StrategyConditionIDs;//[Offset: 0x9e8, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x9f8, Size: 0x4]
	enum PlayerOutPath;//[Offset: 0x9ff, Size: 0x1]
	int[] UsedCharacterIDs;//[Offset: 0xa00, Size: 0x10]
	bool bPresettling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 0x1]
	bool bHasSettled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 0x1]
	bool bIsPlayerBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa12, Size: 0x1]
	int InteractValue;//[Offset: 0xa14, Size: 0x4]
	float LastInteractTime;//[Offset: 0xa18, Size: 0x4]
	float DamageFactor;//[Offset: 0xa1c, Size: 0x4]
	float VehicleProbability;//[Offset: 0xa20, Size: 0x4]
	bool bIsTimeoutPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24, Size: 0x1]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa25, Size: 0x1]
	ExposeLocationMap ExposeLocationMap;//[Offset: 0xa48, Size: 0x58]
	SolarPlayerState*[] ExposeLocationArray;//[Offset: 0xaa0, Size: 0x10]
	Vector PlayerLocation;//[Offset: 0xab0, Size: 0xc]
	SolarPlayerState* ExposeTo;//[Offset: 0xac0, Size: 0x8]
	int SkydivingLeaderPosInTeam;//[Offset: 0xad0, Size: 0x4]
	byte SkydivingFollowFormationPos;//[Offset: 0xad4, Size: 0x1]
	enum SkydivingState;//[Offset: 0xadc, Size: 0x1]
	SolarAchievementComponent* AchievementComponent;//[Offset: 0xae0, Size: 0x8]
	int[] PreCompletedAchievementIDs;//[Offset: 0xaf0, Size: 0x10]
	int PlayerLevel;//[Offset: 0xb18, Size: 0x4]
	int PlayerExperience;//[Offset: 0xb1c, Size: 0x4]
	int HistoryShieldUpgradeItemNum;//[Offset: 0xb20, Size: 0x4]
	SpatializeInfoTrack* TrackInfo;//[Offset: 0xb40, Size: 0x8]
	float TrackMaxRevealDistance;//[Offset: 0xb48, Size: 0x4]
	enum AppLifetimeState;//[Offset: 0xb4c, Size: 0x1]
	int TailFlameId;//[Offset: 0xb50, Size: 0x4]
	SolarTeamInfo* Team;//[Offset: 0xb58, Size: 0x8]
	SolarBattleWeaponData[] BattleWeaponDataArray;//[Offset: 0xb88, Size: 0x10]
	HeroPickInfo* HeroPickInfo;//[Offset: 0xb98, Size: 0x8]
	bool WillFollowMovementOfSkydivingLeader();// 0x1efd078ea041
	void UpgradePlayerLevel(int LevelAdded);// 0x1efc078ea041
	void UpdateCurUseCharacterData(int InCharacterId);// 0x1efb078ea041
	void UpdateCurUseCharacterAndSkinData(int InCharacterId, int InSkinID);// 0x1efa078ea041
	void UpdateAICharacterDataList(out const BattleCharacterData InCharacterData);// 0x1ef7078ea041
	bool TryGetVehicleDamageInfo(out int[] OutVehicleDamageInfo);// 0x1ef6078ea041
	bool TryGetSafeAreaInfo(out int[] OutSafeZoneInfo);// 0x1ef5078ea041
	bool TryGetPlayerBackpackItems(out int[] OutWeaponIds);// 0x1ef4078ea041
	void SyncMarkedWorldData(const WorldMarkData InMarkData);// 0x1ef3078ea041
	void SynchronizePlayerStateInGame(enum InEPlayerStateInGame, bool InIfOrNot);// 0x1ef2078ea041
	void SynchronizeCharacterStateInGame(enum InECharacterStateInGame, bool InIfOrNot);// 0x1ef1078ea041
	void StatWeaponLevelAndTime();// 0x1ef0078ea041
	void StatWeaponBattleDetailInfo();// 0x1eef078ea041
	void StatVehicleDriveTypeLuaCall(int DriveType);// 0x1eee078ea041
	void StatVehicleDriveType(int DriveType);// 0x1eed078ea041
	void ShowTeammatesHUD(out const SolarPlayerState*[] TeammateStates, SolarPlayerState* InSpectateTargetPlayerState);// 0x1eec078ea041
	void SetRoleUltimateSkillCDState(const int NewState);// 0x1eeb078ea041
	void SetRoleID(const int InRoleID);// 0x1eea078ea041
	void SetPlayerNetStateInGame(enum InPlayerNetStateInGame);// 0x1ee9078ea041
	void SetIsTimeoutPlayer(const bool InValue);// 0x1ee8078ea041
	void SetIsPlayerBattleEnd(bool bPlayerBattleEnd);// 0x1ee7078ea041
	void SetDeserter(bool InIsDeserter);// 0x1ee6078ea041
	void SetDeathboxSkinId(out const int[] InOwnedDeathboxSkinIds);// 0x1ee5078ea041
	void ServerUpdateInputType(enum NowInputType);// 0x1ee4078ea041
	void ServerUnexposeLocationToOtherOnce(SolarPlayerState* OtherPS);// 0x1ee3078ea041
	void ServerUnexposeLocationToOther(SolarPlayerState* OtherPS);// 0x1ee2078ea041
	void ServerReportWaitTime();// 0x1ee1078ea041
	void ServerPlayerSelectSkin(int InCharacterId, int InSkinID);// 0x1ee0078ea041
	void ServerHeroRequest(int InCharacterId);// 0x1edf078ea041
	void ServerExposeLocationToOther(SolarPlayerState* OtherPS);// 0x1ede078ea041
	void ServerChangeRoleID(const int InRoleID);// 0x1edd078ea041
	void ReviseWeaponExp(int weaponid, int WeaponExp, int CurLevel, int CurExp);// 0x1edc078ea041
	void RequestServerUpdateInputType(enum NowInputType);// 0x1edb078ea041
	void ReportWaitTime();// 0x1eda078ea041
	void RemoveMarkedWorldDataFromLua(out const WorldMarkData InMarkData);// 0x1ed9078ea041
	void RemoveMarkedWorldData(const WorldMarkData InMarkData);// 0x1ed5078ea041
	void ReceiveTeamIdReplicated(bool bRelatedToSelf);// 0x1ed4078ea041
	void ReceiveTalentStateSet(enum InState);// 0x1ed2078ea041
	void ReceiveTalentIDReplication(enum RepType, PlayerState* ClientOwnerPS);// 0x1ed1078ea041
	void ReceiveSideReplicatedAfter();// 0x1ed0078ea041
	void ReceivePostInitializeComponents();// 0x1ecf078ea041
	bool ReceiveGold(const int InReceivedGold, const bool NeedSyncToServer, const bool NeedSyncToDS);// 0x1ece078ea041
	void ReceiveClientInitialize(Controller* C);// 0x1ecd078ea041
	void PlayerSelectSkin(int InCharacterId, int InSkinID);// 0x1ecc078ea041
	void PlayerSelectHero(int InCharacterId, int InSkinID, bool bConfirm);// 0x1ecb078ea041
	bool PlayerIsResurrecting();// 0x1eca078ea041
	bool PlayerHasLogin();// 0x1ec9078ea041
	bool PlayerCanRebirthByReviveItem(bool bCheckItemNum, bool bIncludingReviving);// 0x1ec8078ea041
	bool PlayerCanRebirthByBuyResurrection();// 0x1ec7078ea041
	bool PlayerCanRebirthByAllMeans();// 0x1ec6078ea041
	bool PlayerCanRebirthBlueprint();// 0x1ec5078ea041
	bool PlayerCanRebirth();// 0x1ec4078ea041
	bool PlayerCanBuyRescue();// 0x1ec3078ea041
	void OnUpdatedPlayerStateLoginData();// 0x1ec2078ea041
	void OnTeammatePlayerStateRepDelegate__DelegateSignature();// 0x1ec1078ea041
	void OnTeammatePlayerStateRemovedDelegate__DelegateSignature(out const byte InPosInTeam, bool InIsLastOne);// 0x1ec0078ea041
	void OnTeamInfoChanged__DelegateSignature(SolarTeamInfo* PreviousTeam, SolarTeamInfo* NowTeam);// 0x1ebf078ea041
	void OnStopReceiveExposedLocation(SolarPlayerState* OtherPS);// 0x1ebe078ea041
	void OnStartResurrectProgress(const int InTextId, const float InDuration, const float InRemaining, const bool bShowCancel);// 0x1ebd078ea041
	void OnSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x1ebc078ea041
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1ebb078ea041
	void OnRequestStartResurrect(DeathTreasureBox* InDeatbox);// 0x1eba078ea041
	void OnRequestCancelResurrect(DeathTreasureBox* InDeatbox);// 0x1eb9078ea041
	void OnReplayRecordingStarted();// 0x1eb8078ea041
	void OnRep_UserId();// 0x1eb7078ea041
	void OnRep_TotalReceivedDamage();// 0x1eb6078ea041
	void OnRep_TeammatesState();// 0x1eb5078ea041
	void OnRep_TeamLastVehicleLocation();// 0x1eb4078ea041
	void OnRep_TeamChanged(SolarTeamInfo* PreviousTeam);// 0x1eb3078ea041
	void OnRep_TalentID();// 0x1eb2078ea041
	void OnRep_TailFlameId();// 0x1eb1078ea041
	void OnRep_SpectateInfo();// 0x1eb0078ea041
	void OnRep_SkydivingState();// 0x1eaf078ea041
	void OnRep_SkydivingLeaderPosInTeam(int OldValue);// 0x1eae078ea041
	void OnRep_SkinId();// 0x1ead078ea041
	void OnRep_Side(FString OldSide);// 0x1eac078ea041
	void OnRep_SelfLastVehicleLocation();// 0x1eab078ea041
	void OnRep_RTCType();// 0x1eaa078ea041
	void OnRep_RoleID();// 0x1ea9078ea041
	void OnRep_ReviveItemNum();// 0x1ea8078ea041
	void OnRep_ReviveCountByItem();// 0x1ea7078ea041
	void OnRep_RepliableMsg();// 0x1ea6078ea041
	void OnRep_PosInTeam(out const byte InLastPosInTeam);// 0x1ea5078ea041
	void OnRep_PlayerLocation();// 0x1ea4078ea041
	void OnRep_PlayerLevel();// 0x1ea3078ea041
	void OnRep_PlayerExp();// 0x1ea2078ea041
	void OnRep_NickName(FString OldNickName);// 0x1ea1078ea041
	void OnRep_NetStateInGame();// 0x1ea0078ea041
	void OnRep_MaxHealth();// 0x1e9f078ea041
	void OnRep_MarkedPointInNavMap();// 0x1e9e078ea041
	void OnRep_KillNum();// 0x1e9d078ea041
	void OnRep_Job();// 0x1e9c078ea041
	void OnRep_IsOBPlayer();// 0x1e9b078ea041
	void OnRep_InputType();// 0x1e9a078ea041
	void OnRep_HeroPickInfo();// 0x1e99078ea041
	void OnRep_HasSettled();// 0x1e98078ea041
	void OnRep_Gold();// 0x1e97078ea041
	void OnRep_ExposeLocationArray();// 0x1e96078ea041
	void OnRep_EquippedEmotes();// 0x1e95078ea041
	void OnRep_CurShieldInfo(out const ShieldInfo InLastShieldInfo);// 0x1e93078ea041
	void OnRep_CurrentPlayerStateInGame(out const byte InLastPlayerStateInGame);// 0x1e92078ea041
	void OnRep_CurrentHealth();// 0x1e91078ea041
	void OnRep_CurrentCharacterStateInGame(out const byte InLastCharacterStateInGame);// 0x1e90078ea041
	void OnRep_ClanId();// 0x1e8f078ea041
	void OnRep_ClanFlag();// 0x1e8e078ea041
	void OnRep_CharacterId(int OldCharacterId);// 0x1e8d078ea041
	void OnRep_BattleVoiceId();// 0x1e8c078ea041
	void OnRep_BagId();// 0x1e8b078ea041
	void OnRep_AssistNum();// 0x1e8a078ea041
	void OnRep_AccountFlag();// 0x1e89078ea041
	void OnRefreshReviveInfo();// 0x1e88078ea041
	void OnReceiveExposedLocation(SolarPlayerState* OtherPS, out const Vector Location);// 0x1e87078ea041
	FString OnPlayerUpgrade(int NewLevel, bool bFromServer);// 0x1e86078ea041
	void OnPlayerUpdateStatData(enum InType);// 0x1e85078ea041
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x1e84078ea041
	void OnPlayerChangedGolds(enum ChangedGoldType, int CostGoldNum, enum CostResult);// 0x1e83078ea041
	void OnOtherPlayerStopSpectateMyTeam(SolarSpectateInfo* InSpectateInfo);// 0x1e82078ea041
	void OnOtherPlayerStopSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x1e81078ea041
	void OnOtherPlayerBeginSpectateMe(SolarPlayerState* InSpectatorPlayerState, SolarSpectateInfo* InSpectateInfo);// 0x1e80078ea041
	void OnOBPlayerRepDelegate__DelegateSignature(bool bIsOBPlayer);// 0x1e7f078ea041
	void OnLeaveLocalPlayerTeam(SolarTeamInfo* TeamInfo, SolarPlayerState* PlayerState);// 0x1e7e078ea041
	void OnJoinLocalPlayerTeam(SolarTeamInfo* TeamInfo, SolarPlayerState* PlayerState);// 0x1e7d078ea041
	void OnInputTypeChanged(enum NowInputType);// 0x1e7c078ea041
	void OnEnterHeroPick();// 0x1e7b078ea041
	void OnDamageChanged__DelegateSignature(float Damage);// 0x1e7a078ea041
	void OnClientSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x1e79078ea041
	void OnCancelResurrectProgress(const int InTextId);// 0x1e78078ea041
	void NotifyUpdateTeamMateLevelUI();// 0x1e77078ea041
	void NotifyAddExperience(int ExpAdded);// 0x1e76078ea041
	bool NeedPerformSpectateInfoOnSimulate();// 0x1e75078ea041
	int LuaGetExpFromWeaponImplementation(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x1e74078ea041
	void LeaveTeam();// 0x1e73078ea041
	void JoinTeamByPolicy(enum TeamType, bool AutoBalance);// 0x1e72078ea041
	void JoinTeamByPolicies(enum[] JoinPolicies, bool AutoBalance);// 0x1e70078ea041
	void JoinTeamByName(FString InTeamName);// 0x1e6f078ea041
	void JoinTeamByID(const byte InTeamId);// 0x1e6e078ea041
	void JoinTeam(SolarTeamInfo* InTeam);// 0x1e6d078ea041
	bool IsWaitingLogin();// 0x1e6c078ea041
	bool IsUsingClanForFlag();// 0x1e6b078ea041
	bool IsUnfollowShortcutEnabled();// 0x1e6a078ea041
	bool IsTimeOutPlayer();// 0x1e69078ea041
	bool IsTeammateWithLocalOrSpecTargetPlayer();// 0x1e68078ea041
	bool IsTeammateWith(const SolarPlayerState* Other);// 0x1e67078ea041
	bool IsSpectatingOtherPlayer();// 0x1e66078ea041
	bool IsSkydivingLeader();// 0x1e65078ea041
	bool IsSkydivingCompleted();// 0x1e64078ea041
	bool IsSkydiving();// 0x1e63078ea041
	bool IsSameTeamWithLocalPlayer();// 0x1e62078ea041
	bool IsReconnecting();// 0x1e61078ea041
	bool IsPreStartSkydiving();// 0x1e60078ea041
	bool IsPlayerWaitingForTeammatesHelp();// 0x1e5f078ea041
	bool IsPlayerTeam();// 0x1e5e078ea041
	bool IsPlayerSameTeam(FString TargetPlayerID);// 0x1e5d078ea041
	bool IsPlayerOnline();// 0x1e5c078ea041
	bool IsPlayerOffline();// 0x1e5b078ea041
	bool IsPlayer();// 0x1e5a078ea041
	bool IsOutBySelf();// 0x1e59078ea041
	bool IsOfflinePlayer();// 0x1e58078ea041
	bool IsOBPlayer();// 0x1e57078ea041
	bool IsMySkydivingLeader(int LeaderPosInTeam);// 0x1e56078ea041
	bool IsMVP();// 0x1e55078ea041
	bool IsMaxLevelInGame();// 0x1e54078ea041
	bool IsLocalPlayerCameraFocusingMe();// 0x1e53078ea041
	bool IsKickOutByServer();// 0x1e52078ea041
	bool IsDeserter();// 0x1e51078ea041
	bool IsBuyingResurrection();// 0x1e50078ea041
	bool IsBeingSpectated();// 0x1e4f078ea041
	bool IsAllyWithLocalPlayer();// 0x1e4e078ea041
	bool IsAllyWithLocalOrSpecTargetPlayer();// 0x1e4d078ea041
	bool IsAllyWith(const SolarPlayerState* Other);// 0x1e4c078ea041
	bool IsAIPlayer();// 0x1e4b078ea041
	bool IsACheater();// 0x1e4a078ea041
	void InitInputType();// 0x1e49078ea041
	void IncreaseReviveCount();// 0x1e48078ea041
	void HideTeammatesHUD(out const SolarPlayerState*[] TeammateStates);// 0x1e47078ea041
	bool HasSkydivingLeader();// 0x1e46078ea041
	bool HasSettled();// 0x1e45078ea041
	bool HasCheatSelf();// 0x1e44078ea041
	int GetWeaponSettlmentExp(int weaponid);// 0x1e43078ea041
	int GetVehicleSkinID(int VehicleID);// 0x1e42078ea041
	FString GetUserID();// 0x1e41078ea041
	int[] GetUsableTailFlameIds();// 0x1e40078ea041
	void GetUsableSkinsForCharacter(const int InCharacterId, out int[] Result, out bool bCharacterUsable);// 0x1e3f078ea041
	int[] GetUsableJetpackIds();// 0x1e3e078ea041
	float GetTotalReceivedDamage();// 0x1e3d078ea041
	float GetTotalCausedDamage();// 0x1e3c078ea041
	byte GetTeamRank();// 0x1e3b078ea041
	FString GetTeamName();// 0x1e3a078ea041
	void GetTeammatePlayers(bool bIncludingSelf, out SolarPlayerState*[] OutTeammates);// 0x1e39078ea041
	SolarPlayerState* GetTeammatePlayerByPosInTeam(int InPosInTeam);// 0x1e38078ea041
	int GetTeammateNum(bool bIncludeSelf);// 0x1e37078ea041
	byte GetTeamID();// 0x1e36078ea041
	SolarGameModeStatisticsComponent* GetStatComponent();// 0x1e35078ea041
	SolarSpectateInfo* GetSpectateTargetSpectateInfo();// 0x1e34078ea041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x1e33078ea041
	SolarCharacter* GetSpectateTargetCharacter();// 0x1e32078ea041
	SolarSpectateInfo* GetSpectateInfo();// 0x1e31078ea041
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x1e30078ea041
	SolarPlayerController* GetSolarPlayerController();// 0x1e2f078ea041
	SolarCharacter* GetSolarCharacter();// 0x1e2e078ea041
	SolarBotAIController* GetSolarBotAIController();// 0x1e2d078ea041
	void GetSkinInfo(int InSkinID, out CharacterSkin ResultInfo);// 0x1e2b078ea041
	int GetRankScore();// 0x1e2a078ea041
	int GetRankLevelID();// 0x1e29078ea041
	SolarCharacter* GetPossessedCharacter();// 0x1e28078ea041
	PlayerStatisticsData* GetPlayerStatData();// 0x1e27078ea041
	enum GetPlayerNetState();// 0x1e25078ea041
	FString GetPlayerNameWithoutUID();// 0x1e24078ea041
	MedalInfo[] GetMedalInfo();// 0x1e22078ea041
	int GetMaxShieldMatCountToDeathbox();// 0x1e21078ea041
	SolarPlayerState* GetLocalPlayerState();// 0x1e20078ea041
	SolarPlayerState* GetLocalOrSpecTargetPlayerState();// 0x1e1f078ea041
	SolarCharacter* GetLocalOrSpecTargetCharacter();// 0x1e1e078ea041
	SolarCharacter* GetLocalCharacter();// 0x1e1d078ea041
	int GetLegendRank();// 0x1e1c078ea041
	SolarPlayerState* GetKillerPlayerState();// 0x1e1b078ea041
	bool GetIsPlayerBattleEnd();// 0x1e1a078ea041
	float GetExpSettleModePunishRatio();// 0x1e19078ea041
	int GetExpItemCount(const int InLevelGap);// 0x1e18078ea041
	int GetExpByBehavior(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x1e17078ea041
	int GetExpAddValueFromItem(int ItemID);// 0x1e16078ea041
	int GetDriveVehicleID();// 0x1e15078ea041
	Vector GetDeathBoxLocation();// 0x1e14078ea041
	float GetCurrentTalentCDDuration();// 0x1e13078ea041
	float GetCurrentTalentActiveDuration();// 0x1e12078ea041
	void GetCurrentSkinForCharacter(const int InCharacterId, out bool bCharacterUsable, out int OutSkinId);// 0x1e11078ea041
	FString GetClanShortName();// 0x1e10078ea041
	int GetCharacterRandomEquippedVoiceByType(enum VoiceType);// 0x1e0e078ea041
	Vector GetCharacterLocation();// 0x1e0d078ea041
	FString[] GetBuyResurrectionSavedTeammateIDArr();// 0x1e0c078ea041
	int[] GetBuyResurrectionSavedTeammateBonusArr();// 0x1e0b078ea041
	void GetAlliesPlayers(bool bIncludingSelf, out SolarPlayerState*[] OutAllies);// 0x1e0a078ea041
	bool CostGold(const int InCostedGold, const bool NeedSyncToServer);// 0x1e09078ea041
	void ClientNotifyKillNumChanged(const int KillNumber, const int SpreesNum);// 0x1e08078ea041
	void ClientImmediatelyTeammatesSkinID(const SolarPlayerState*[] InTeammates, const int[] InSkinID);// 0x1e07078ea041
	void ClearTeammatesMark();// 0x1e06078ea041
	bool CheckIfTeamLastVehicleLocationValid();// 0x1e05078ea041
	bool CheckIfTeamIdValid();// 0x1e04078ea041
	bool CheckIfSelfLastVehicleLocationValid();// 0x1e03078ea041
	bool CheckIfPosInTeamValid();// 0x1e02078ea041
	bool CheckIfMarkedPointInNavMapValid();// 0x1e01078ea041
	bool CheckIfInactive();// 0x1e00078ea041
	bool CheckIfDataValid();// 0x1dff078ea041
	bool CheckIfBeInSpecifiedPlayerState(enum InEPlayerStateInGame);// 0x1dfd078ea041
	bool CheckIfBeInSpecifiedCharacterState(enum InECharacterStateInGame);// 0x1dfb078ea041
	bool CheckIfBattleVoiceIdValid();// 0x1dfa078ea041
	bool CheckGoldIsEnough(const int InCostedGold);// 0x1df9078ea041
	void ChangeTailFlameId(int InTailFlameId);// 0x1df8078ea041
	void ChangeBagById(int InBagId);// 0x1df7078ea041
	bool CanReviveItemPutInDeathBox();// 0x1df6078ea041
	bool CanAcceptSkydivingLeaderTransferRequest(const SolarPlayerState* RequesterPlayerState);// 0x1df5078ea041
	bool CanAcceptSkydivingFollowRequest(const SolarPlayerState* RequesterPlayerState);// 0x1df4078ea041
	bool CanAcceptSkydivingFollowInvitation(const SolarPlayerState* InviterPlayerState);// 0x1df3078ea041
	int CalculateZomborg();// 0x1df2078ea041
	float CalculateCharacterExp();// 0x1df1078ea041
	float CalculateAccountExp();// 0x1df0078ea041
	void AddExperience(int InExp, enum InType);// 0x1dee078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MedalInfo
	int MedalID;//[Offset: 0x0, Size: 0x4]
	int MedalType;//[Offset: 0x4, Size: 0x4]
	int MedalPos;//[Offset: 0x8, Size: 0x4]
	int MedalLv;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleCharacterData
	int CharacterId;//[Offset: 0x0, Size: 0x4]
	int SkinId;//[Offset: 0x4, Size: 0x4]
	int CharacterLevel;//[Offset: 0x8, Size: 0x4]
	int TalentID;//[Offset: 0xc, Size: 0x4]
	int UseTimes;//[Offset: 0x10, Size: 0x4]
	int CardPose;//[Offset: 0x14, Size: 0x4]
	int Cardbackground;//[Offset: 0x18, Size: 0x4]
	int CharacterExp;//[Offset: 0x1c, Size: 0x4]
	int Title;//[Offset: 0x20, Size: 0x4]
	int64 Expired;//[Offset: 0x28, Size: 0x8]
	int CombatScore;//[Offset: 0x30, Size: 0x4]
	int BagId;//[Offset: 0x34, Size: 0x4]
	int TailFlameId;//[Offset: 0x38, Size: 0x4]
	int CapsuleActorId;//[Offset: 0x3c, Size: 0x4]
	int DeathBoxId;//[Offset: 0x40, Size: 0x4]
	int CharacterOwnerType;//[Offset: 0x44, Size: 0x4]
	EquipVoiceData[] Voice;//[Offset: 0x48, Size: 0x10]
	int KillReport;//[Offset: 0x58, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EquipVoiceData
	int Type;//[Offset: 0x0, Size: 0x4]
	int[] Ids;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterSkin
	int SkinId;//[Offset: 0x0, Size: 0x4]
	int SkinOwnerType;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMarkData.FastArraySerializerItem
	int WorldMarkGUID;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize WorldPos;//[Offset: 0x10, Size: 0xc]
	byte PosInTeam;//[Offset: 0x1c, Size: 0x1]
	Vector2D ScreenCoordinate;//[Offset: 0x20, Size: 0x8]
	enum Type;//[Offset: 0x28, Size: 0x1]
	int ItemID;//[Offset: 0x2c, Size: 0x4]
	int64 ItemInstanceId;//[Offset: 0x30, Size: 0x8]
	int NameLocID;//[Offset: 0x38, Size: 0x4]
	FString IconImg;//[Offset: 0x40, Size: 0x10]
	int WeaponLevel;//[Offset: 0x50, Size: 0x4]
	enum InteractableType;//[Offset: 0x54, Size: 0x1]
	int MarkVoiceEventName;//[Offset: 0x58, Size: 0x4]
	int OuterBoxThisID;//[Offset: 0x5c, Size: 0x4]
	float MarkTimeStamp;//[Offset: 0x60, Size: 0x4]
	float LifeTime;//[Offset: 0x64, Size: 0x4]
	float ExtraLiveTime;//[Offset: 0x68, Size: 0x4]
	Actor* AttachedActor;//[Offset: 0x6c, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 0x4]
	int ReplicationKey;//[Offset: 0x4, Size: 0x4]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExpRankMedalData
	FString Area;//[Offset: 0x0, Size: 0x10]
	FString Country;//[Offset: 0x10, Size: 0x10]
	int Rank;//[Offset: 0x20, Size: 0x4]
	int CharacterId;//[Offset: 0x24, Size: 0x4]
	int CharacterType;//[Offset: 0x28, Size: 0x4]
	int RankScore;//[Offset: 0x2c, Size: 0x4]
	int RankType;//[Offset: 0x30, Size: 0x4]
	int AutoID;//[Offset: 0x34, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LastBattleInfo
	float MvpScore;//[Offset: 0x0, Size: 0x4]
	int KillNum;//[Offset: 0x4, Size: 0x4]
	int HitDown;//[Offset: 0x8, Size: 0x4]
	int AssistNum;//[Offset: 0xc, Size: 0x4]
	int RescueNum;//[Offset: 0x10, Size: 0x4]
	int AliveTime;//[Offset: 0x14, Size: 0x4]
	int CauseDamage;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_ExtraRewardInfo
	int TextID;//[Offset: 0x0, Size: 0x4]
	FString LocVariable;//[Offset: 0x8, Size: 0x10]
	FString Content;//[Offset: 0x18, Size: 0x10]
	FString ItemList;//[Offset: 0x28, Size: 0x10]
	int Order;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementReward
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int Amount;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementCrateReward
	int64 crateID;//[Offset: 0x0, Size: 0x8]
	SettlementReward[] Items;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ShieldInfo
	int ShieldID;//[Offset: 0x0, Size: 0x4]
	float CurValue;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EquippedEmotesData
	int[] EmoteData;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KillEnemySnapshot
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSpectateInfo.Actor.Object
	delegate OnBeginUpdateSpectateInfo;//[Offset: 0x228, Size: 0x10]
	delegate OnStopUpdateSpectateInfo;//[Offset: 0x238, Size: 0x10]
	delegate OnOtherPlayerBeginSpectateMe;//[Offset: 0x248, Size: 0x10]
	delegate OnOtherPlayerStopSpectateMe;//[Offset: 0x258, Size: 0x10]
	delegate OnBeforeSpectateTargetChange;//[Offset: 0x268, Size: 0x10]
	delegate OnSpectateTargetChanged;//[Offset: 0x278, Size: 0x10]
	delegate OnSpectatePhaseChanged;//[Offset: 0x288, Size: 0x10]
	delegate OnSwitchSpectateTargetFailed;//[Offset: 0x298, Size: 0x10]
	delegate OnSpectatorOfMyTargetChanged;//[Offset: 0x2a8, Size: 0x10]
	delegate OnSpectateCharacterOfMyTargetReadied;//[Offset: 0x2b8, Size: 0x10]
	enum SpectatePhase;//[Offset: 0x2c8, Size: 0x1]
	SolarPlayerState* SpectateTargetPlayerState;//[Offset: 0x2d0, Size: 0x8]
	SolarPlayerState*[] PlayersSpectatingMyTarget;//[Offset: 0x2e8, Size: 0x10]
	SolarPlayerState*[] PlayersSpectatingMe;//[Offset: 0x2f8, Size: 0x10]
	bool bIsServerRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	SolarReplayManager* ReplayManager;//[Offset: 0x320, Size: 0x8]
	SpectateConditions SpectateConditions;//[Offset: 0x328, Size: 0x20]
	GiftSenderInfo[] SendGiftPlayerInfo;//[Offset: 0x3c8, Size: 0x10]
	InteractiveTaskStatus TaskStatus;//[Offset: 0x3d8, Size: 0x78]
	DataTable* InteractiveTaskTable;//[Offset: 0x450, Size: 0x8]
	FString TaskTablePath;//[Offset: 0x458, Size: 0x10]
	SolarPlayerState* LatestAttacker;//[Offset: 0x468, Size: 0x8]
	SolarPlayerState* LatestVictim;//[Offset: 0x470, Size: 0x8]
	float TotalCausedDamage;//[Offset: 0x488, Size: 0x4]
	Rotator PlayerCameraRotation;//[Offset: 0x48c, Size: 0xc]
	ReplicateItemData[] CharacterBackpackItems;//[Offset: 0x498, Size: 0x10]
	ReplicateMaxPileData[] CharacterBackpackItemMaxPiles;//[Offset: 0x4a8, Size: 0x10]
	float CharacterVJetChargeTime;//[Offset: 0x4b8, Size: 0x4]
	int CharacterVJetTotalTimes;//[Offset: 0x4bc, Size: 0x4]
	int CharacterVJetRestTimes;//[Offset: 0x4c0, Size: 0x4]
	int CharacterVJetModuleLevel;//[Offset: 0x4c4, Size: 0x4]
	float CharacterVJetStartChargeTime;//[Offset: 0x4c8, Size: 0x4]
	float CharacterHJetChargeTime;//[Offset: 0x4cc, Size: 0x4]
	int CharacterHJetTotalTimes;//[Offset: 0x4d0, Size: 0x4]
	int CharacterHJetRestTimes;//[Offset: 0x4d4, Size: 0x4]
	int CharacterHJetModuleLevel;//[Offset: 0x4d8, Size: 0x4]
	float CharacterHJetStartChargeTime;//[Offset: 0x4dc, Size: 0x4]
	CharacterRoleAbilityInfo[] CharacterRoleAbilitiesInfo;//[Offset: 0x4e0, Size: 0x10]
	float MassInvisibilityEffectRemainingTime;//[Offset: 0x4f0, Size: 0x4]
	RepCountdownData SpectateCountdownData;//[Offset: 0x4f4, Size: 0x2c]
	BattleUpgradeEffectParamData[] BattleUpgradeEffectData;//[Offset: 0x520, Size: 0x10]
	int ExtraARMag;//[Offset: 0x530, Size: 0x4]
	int ExtraSGMag;//[Offset: 0x534, Size: 0x4]
	bool bExposedByRadar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	VehicleSpectateInfo VehicleSpectateInfo;//[Offset: 0x540, Size: 0x30]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x570, Size: 0x1]
	void SetSpectateTargetForPlayingReplay(SolarPlayerState* TargetPlayerState);// 0x1dd4078ea041
	void ServerStopSpectateOtherPlayer_Internal();// 0x1dd3078ea041
	void ServerStopSpectateOtherPlayer();// 0x1dd2078ea041
	void ServerSpectatePreviousPlayer();// 0x1dd1078ea041
	void ServerSpectateNextPlayer();// 0x1dd0078ea041
	void ServerSetSpectateConditions_Internal(const SpectateConditions InSpectateConditions);// 0x1dcf078ea041
	void ServerSetSpectateConditions(out const SpectateConditions InSpectateConditions);// 0x1dce078ea041
	void ServerSetClientRecording(bool bInIsClientRecording);// 0x1dcd078ea041
	void ServerSendGiftAction(const int GiftID, const int Num);// 0x1dcc078ea041
	void ServerRequestSendTask(int InTaskID);// 0x1dcb078ea041
	void ServerRequestIncreaseTargetTaskLevel();// 0x1dca078ea041
	void ServerRequestAvailableTask();// 0x1dc9078ea041
	void ServerChangeLikeValue(const int Value, const int AddInteractValue, enum ActionType);// 0x1dc8078ea041
	void ServerBeginSpectateOtherPlayer_Internal();// 0x1dc7078ea041
	void ServerBeginSpectateOtherPlayer();// 0x1dc6078ea041
	bool SendTask(int InTaskID);// 0x1dc5078ea041
	void SendGift(const int GiftID, const int Num);// 0x1dc4078ea041
	void RequestSendTask(int InTaskID);// 0x1dc3078ea041
	void RequestIncreaseTargetTaskLevel();// 0x1dc2078ea041
	void RequestAvailableTask();// 0x1dc1078ea041
	void OnTargetSpecInfoSetToItsPlayerState(SolarSpectateInfo* TargetSpecInfo);// 0x1dc0078ea041
	void OnSwitchSpectateTargetFailed__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1dbf078ea041
	void OnStopUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1dbe078ea041
	void OnStopRecordingReplay();// 0x1dbd078ea041
	void OnStartRecordingReplay();// 0x1dbc078ea041
	void OnSpectatorOfMyTargetChanged__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1dbb078ea041
	void OnSpectateTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x1dba078ea041
	void OnSpectatePhaseChanged__DelegateSignature(enum CurrentPhase);// 0x1db8078ea041
	void OnSpectateCharacterOfMyTargetReadied__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1db7078ea041
	void OnRep_VehicleSpectateInfo(out const VehicleSpectateInfo PreviousVehicleSpectateInfo);// 0x1db6078ea041
	void OnRep_TotalCausedDamage();// 0x1db5078ea041
	void OnRep_TaskStatus();// 0x1db4078ea041
	void OnRep_SpectateTargetPlayerState(SolarPlayerState* LastTarget);// 0x1db3078ea041
	void OnRep_SpectatePhase();// 0x1db2078ea041
	void OnRep_SpectateCountdownData();// 0x1db1078ea041
	void OnRep_PlayersSpectatingMyTarget();// 0x1db0078ea041
	void OnRep_PlayersSpectatingMe();// 0x1daf078ea041
	void OnRep_ExposedByRadar();// 0x1dae078ea041
	void OnRep_CharacterVJetTotalTimes();// 0x1dad078ea041
	void OnRep_CharacterVJetRestTimes();// 0x1dac078ea041
	void OnRep_CharacterVJetModuleLevel();// 0x1dab078ea041
	void OnRep_CharacterRoleAbilitiesInfo();// 0x1daa078ea041
	void OnRep_CharacterHJetTotalTimes();// 0x1da9078ea041
	void OnRep_CharacterHJetRestTimes();// 0x1da8078ea041
	void OnRep_CharacterHJetModuleLevel();// 0x1da7078ea041
	void OnRep_CharacterBackpackItems();// 0x1da6078ea041
	void OnRep_bIsServerRecording();// 0x1da5078ea041
	void OnRep_BattleUpgradeEffectData();// 0x1da4078ea041
	void OnOtherPlayerStopSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x1da3078ea041
	void OnOtherPlayerBeginSpectateMe__DelegateSignature(SolarPlayerState* SpectatorPlayerState, SolarSpectateInfo* SpectateInfo);// 0x1da2078ea041
	void OnOpenAirBoxNum(enum InStatType);// 0x1da1078ea041
	void OnLikeActionCalled(const int Value, const int AddInteractValue, enum ActionType);// 0x1da0078ea041
	void OnIncreaseKillNumWithWeaponType(enum InStatType, int InWeaponID);// 0x1d9f078ea041
	void OnIncreaseKillNumWithPunch(enum InStatType);// 0x1d9e078ea041
	void OnIncreaseKillNumWithAnyVehicle(enum InStatType);// 0x1d9d078ea041
	void OnGiftActionCalled(const int GiftID, const int Num);// 0x1d9c078ea041
	void OnDamageChanged__DelegateSignature(float Damage);// 0x1d9b078ea041
	void OnCurrentPlayerCountChanged();// 0x1d9a078ea041
	void OnBeginUpdateSpectateInfo__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x1d99078ea041
	void OnBeforeSpectateTargetChange__DelegateSignature(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x1d98078ea041
	void OnAvailableAirDropsNumChanged();// 0x1d97078ea041
	bool NeedUpdateSpectateInfo();// 0x1d96078ea041
	bool IsSpectatingOtherPlayer();// 0x1d95078ea041
	bool IsRecordingReplay();// 0x1d94078ea041
	bool IsClientRecording();// 0x1d93078ea041
	bool IncreaseTaskLevel(SolarPlayerState* SendPlayer);// 0x1d92078ea041
	SolarPlayerState*[] GetSpectatorsOfMyTarget();// 0x1d91078ea041
	SolarPlayerState*[] GetSpectatingMePlayerStates();// 0x1d90078ea041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x1d8f078ea041
	SolarCharacter* GetSpectateTargetCharacter();// 0x1d8e078ea041
	void GetSpectateReportInfo(out SpectateReportInfo SpectateReportInfo, bool HasNextTarget);// 0x1d8c078ea041
	SolarSpectateInfo* GetSpectateInfoOfMyTarget();// 0x1d8b078ea041
	SpectateConditions GetSpectateConditions();// 0x1d88078ea041
	SolarPlayerState* GetSolarPlayerState();// 0x1d87078ea041
	bool GetInteractiveTaskConfigByID(int InTaskID, out InteractiveTaskConfig OutConfig);// 0x1d86078ea041
	int[] GetAvailableTaskByRandom();// 0x1d85078ea041
	void GetAllInteractiveTaskConfigFromTable(out InteractiveTaskConfig[] OutAllConfig);// 0x1d80078ea041
	SolarPlayerState*[] GetAllAlivePlayers();// 0x1d7f078ea041
	bool CostCurrencyByTaskAction(int InTaskID, int CurTasklevel);// 0x1d7e078ea041
	void ClientSetVehicleSpectateInfo(const VehicleSpectateInfo InSpectateInfo);// 0x1d7b078ea041
	void ClientNotifyTaskActionResult(enum ActionType, int InTaskID, int CurTasklevel, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, int NowLikeValue);// 0x1d7a078ea041
	void ClientNotifySelfTaskActionResult(enum ActionType, int InTaskID, int CurTasklevel, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, int NowLikeValue);// 0x1d79078ea041
	void ClientNotifySelfLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x1d78078ea041
	void ClientNotifyLikeValueChanged(enum ActionType, const int DeltaValue, const int NowValue, SolarPlayerState* SendPlayer, SolarPlayerState* ReceivePlayer, const int GiftID);// 0x1d76078ea041
	void ClientNotifyAvailableTaskResult(const int[] AvailableTask);// 0x1d75078ea041
	bool CheckIsCanSpectateOthers();// 0x1d74078ea041
	bool CanISpectate(const SolarPlayerState* Target);// 0x1d73078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarReplayManager.Object
	SoftObjectPath WaitingOBMap;//[Offset: 0x40, Size: 0x18]
	SoftClassPath WaitingReplayStartUIClass;//[Offset: 0x58, Size: 0x18]
	SoftClassPath OBModeSpectatorPawnClass;//[Offset: 0x70, Size: 0x18]
	SoftClassPath OBModeHUDClass;//[Offset: 0x88, Size: 0x18]
	SoftClassPath OBHeadInfoWidgetClass;//[Offset: 0xa0, Size: 0x18]
	GameplayCueTag PerspectiveCueTag;//[Offset: 0xb8, Size: 0x8]
	GameplayCueTag PerspectiveInSmokeCueTag;//[Offset: 0xc0, Size: 0x8]
	SoftObjectPath PerspectiveMaterial;//[Offset: 0xc8, Size: 0x18]
	AddMultiplePassMaterialChangeParams PerspectiveMaterialParams;//[Offset: 0xe0, Size: 0x40]
	SoftClassPath DirectorModeSpectatorPawnClass;//[Offset: 0x120, Size: 0x18]
	FName DirectorModeInputModeName;//[Offset: 0x138, Size: 0x8]
	float UpdateDistanceInterval;//[Offset: 0x140, Size: 0x4]
	float OBTeamListNearbyDistance;//[Offset: 0x144, Size: 0x4]
	float OBHeadInfoNearDistance;//[Offset: 0x148, Size: 0x4]
	float OBHeadInfoFarDistance;//[Offset: 0x14c, Size: 0x4]
	float OBDamageTextHideDistance;//[Offset: 0x150, Size: 0x4]
	float OBDelayTimeForTournament;//[Offset: 0x154, Size: 0x4]
	float OBLivePreDownloadTime;//[Offset: 0x158, Size: 0x4]
	float OBSkipBeginningTime;//[Offset: 0x15c, Size: 0x4]
	float[] OBPlaybackSpeedList;//[Offset: 0x160, Size: 0x10]
	byte OBPlaybackSpeedDefaultIndex;//[Offset: 0x170, Size: 0x1]
	byte OBLiveDelayChunkCount;//[Offset: 0x171, Size: 0x1]
	FName OBLockCameraBindBoneName;//[Offset: 0x174, Size: 0x8]
	Vector OBLockCameraBindBoneOffset;//[Offset: 0x17c, Size: 0xc]
	float OBInitLockDistance;//[Offset: 0x188, Size: 0x4]
	float OBMinLockDistance;//[Offset: 0x18c, Size: 0x4]
	float OBMaxLockDistance;//[Offset: 0x190, Size: 0x4]
	float OBMinLockPitch;//[Offset: 0x194, Size: 0x4]
	float OBMaxLockPitch;//[Offset: 0x198, Size: 0x4]
	float OBPitchAdjustTriggerFloor;//[Offset: 0x19c, Size: 0x4]
	float OBPitchAdjustValue;//[Offset: 0x1a0, Size: 0x4]
	int ReplayCacheFileRetentionTimeInSeconds;//[Offset: 0x1a4, Size: 0x4]
	int HighlightFileRetentionTimeInSeconds;//[Offset: 0x1a8, Size: 0x4]
	int HighlightFileMaxCount;//[Offset: 0x1ac, Size: 0x4]
	int HighlightMinimalDiskSpaceInMB;//[Offset: 0x1b0, Size: 0x4]
	int[] EnableHighlightModeGroups;//[Offset: 0x1b8, Size: 0x10]
	SoftClassPath AutoDirectorComponentClass;//[Offset: 0x1c8, Size: 0x18]
	delegate OnPlayingStartedDelegate;//[Offset: 0x1e8, Size: 0x10]
	delegate OnPlayingLoadLevelsStartedDelegate;//[Offset: 0x1f8, Size: 0x10]
	delegate OnPlayingLevelLoadedDelegate;//[Offset: 0x208, Size: 0x10]
	delegate OnPlayingStreamReadiedDelegate;//[Offset: 0x218, Size: 0x10]
	delegate OnPlayingAtEndDelegate;//[Offset: 0x228, Size: 0x10]
	delegate OnPlayingFinishedDelegate;//[Offset: 0x238, Size: 0x10]
	delegate OnRecordingStartedDelegate;//[Offset: 0x248, Size: 0x10]
	delegate OnRecordingStartFailedDelegate;//[Offset: 0x258, Size: 0x10]
	delegate OnRecordingFinishedDelegate;//[Offset: 0x268, Size: 0x10]
	delegate OnPlayingScrubStartDelegate;//[Offset: 0x278, Size: 0x10]
	delegate OnPlayingPreScrubDelegate;//[Offset: 0x288, Size: 0x10]
	delegate OnPlayingFirstScrubFinishedDelegate;//[Offset: 0x298, Size: 0x10]
	delegate OnPlayingScrubFailedDelegate;//[Offset: 0x2a8, Size: 0x10]
	delegate OnPlayingScrubCharactersCreatedDelegate;//[Offset: 0x2b8, Size: 0x10]
	delegate OnPlayingPauseDelegate;//[Offset: 0x2c8, Size: 0x10]
	delegate OnPlayingContinueDelegate;//[Offset: 0x2d8, Size: 0x10]
	delegate OnPlaybackSpeedChangedDelegate;//[Offset: 0x2e8, Size: 0x10]
	delegate OnCheatersPlayerIDChanged;//[Offset: 0x2f8, Size: 0x10]
	delegate OnAutoPlaybackSpeedUpStart;//[Offset: 0x308, Size: 0x10]
	delegate OnAutoPlaybackSpeedUpStop;//[Offset: 0x318, Size: 0x10]
	delegate OnHighlightListChanged;//[Offset: 0x368, Size: 0x10]
	UserWidget* WaitingReplayStartUI;//[Offset: 0x3f0, Size: 0x8]
	void WriteHeaderData(out FString[] OutHeaderData);// 0x1c96078ea041
	void StopRecording();// 0x1c95078ea041
	void StopPlayReplay();// 0x1c94078ea041
	void StartRecording(FString SessionName, FString UploadUrl, enum ForceRecordingType);// 0x1c93078ea041
	void StartRecordHighlightOfCurrentBattle(FString SessionNameOverride);// 0x1c92078ea041
	void SpeedUpTimeDilation();// 0x1c91078ea041
	void SlowDownTimeDilation();// 0x1c90078ea041
	bool ShouldShowProgressBar();// 0x1c8f078ea041
	void SetTimeDilation(float Dilation);// 0x1c8e078ea041
	void SetStartSpectateTournamentTime();// 0x1c8d078ea041
	void SetRequestTryStrategy(float Interval, int Times);// 0x1c8c078ea041
	void SetRecordingType(enum InRecordingType);// 0x1c8b078ea041
	void SetReadyToRecord(bool bIsReady, out const FString[] OBPlayerIDs);// 0x1c8a078ea041
	void SetLiveWatchingPlayerForPlaying(FString BeWatchingPlayerID);// 0x1c89078ea041
	void SetEnableCompressForHttpReplay(bool bEnable);// 0x1c88078ea041
	void RetryPlayReplayFromServer();// 0x1c87078ea041
	void ResetTimeDilation();// 0x1c86078ea041
	void RequestWatchingLiveOfPlayer(FString SolarPlayerID);// 0x1c85078ea041
	void RequestPlayReplayOfCurrentBattle();// 0x1c84078ea041
	void RequestPlayReplay(FString InBattleID, bool IsLive);// 0x1c83078ea041
	void RequestCheckpointForLiveWatch();// 0x1c82078ea041
	void RequestBattleList(int PageIndex, int PageSize);// 0x1c81078ea041
	void ReplayManagerNoParamDelegate__DelegateSignature();// 0x1c80078ea041
	void RecordReplayInfosOnRecordingStarted();// 0x1c7f078ea041
	void ReceivePlayingStartFailed();// 0x1c7e078ea041
	bool ReceivePlayingFinished(enum reason, byte StreamerErrorCode, FString StreamerErrorMsg);// 0x1c7c078ea041
	void ProcessHeaderData(out const FString[] HeaderData, out FString Error);// 0x1c7b078ea041
	void PlayReplayFromServer(FString SessionName, FString DownloadUrl);// 0x1c7a078ea041
	void PlayReplayFromLocal(FString ReplayFileName);// 0x1c79078ea041
	void PlayingFinishedInternal();// 0x1c78078ea041
	void PlayHighlight(FString InBattleID);// 0x1c77078ea041
	void PausePlayReplay();// 0x1c76078ea041
	void OnPlayingFinished(World* World);// 0x1c75078ea041
	void OnPlayingAtEnd(World* World);// 0x1c74078ea041
	void OnPlayerStopWatchingLive(FString StopWatchingPlayerID);// 0x1c73078ea041
	void OnPlayerStartWatchingLive(FString RequestWatchingPlayerID, FString BeWatchingPlayerID);// 0x1c72078ea041
	void OnLocalStreamerFinishedWriting(FString StreamName, FString FullReplayFile);// 0x1c71078ea041
	void OnLiveWatchTargetLost();// 0x1c70078ea041
	void NotifyTournamentSpectate(bool bIsInLiveReplay);// 0x1c6f078ea041
	bool NotifyBackendPlayReplayFinished();// 0x1c6e078ea041
	void LuaOnPostLoadMapWithWorld(FString LevelName);// 0x1c6d078ea041
	void LuaBindDelegates();// 0x1c6c078ea041
	bool IsTournament();// 0x1c6b078ea041
	bool IsScrubing();// 0x1c6a078ea041
	bool IsRequestingReplayDownloadInfo();// 0x1c69078ea041
	bool IsReplayLive();// 0x1c68078ea041
	bool IsRecordingHighlight();// 0x1c67078ea041
	bool IsRecording();// 0x1c66078ea041
	bool IsReady();// 0x1c65078ea041
	bool IsPlayingHighlight();// 0x1c64078ea041
	bool IsPlaying();// 0x1c63078ea041
	bool IsPlayerBeWatching(FString SolarPlayerID);// 0x1c62078ea041
	bool IsPausing();// 0x1c61078ea041
	bool IsLocal();// 0x1c60078ea041
	bool IsLiveWatchOnly();// 0x1c5f078ea041
	bool IsInState(enum CheckState);// 0x1c5d078ea041
	bool IsAutoDirecting();// 0x1c5c078ea041
	bool IsAutoDirectable();// 0x1c5b078ea041
	bool IsACheater(FString PlayerId);// 0x1c5a078ea041
	void IgnoreTournamentDelayTimeForNextPlay();// 0x1c59078ea041
	bool HasHighlight(FString InBattleID);// 0x1c58078ea041
	void GotoTimeInSecond(float Second);// 0x1c57078ea041
	float GetTotalSessionTimeInSecond();// 0x1c56078ea041
	float GetTimeDilation();// 0x1c55078ea041
	void GetStartRecordingParams(out StartRecordingParams OutParams);// 0x1c53078ea041
	enum GetRecordingType();// 0x1c51078ea041
	float GetCurrentSessionTimeInSecond();// 0x1c50078ea041
	FString GetCurrentSessionName();// 0x1c4f078ea041
	FString GetBeWatchingPlayerID();// 0x1c4e078ea041
	FString GetBattleIDByIndex(int Index);// 0x1c4d078ea041
	void EnterSettlementStage();// 0x1c4c078ea041
	void DestroyWaitingOBStartUI();// 0x1c4b078ea041
	void DebugAllPlayerIsBeWatching(bool bAllPlayerIsBeWatching);// 0x1c4a078ea041
	void CreateWaitingOBStartUI();// 0x1c49078ea041
	void ContinuePlayReplay();// 0x1c48078ea041
	bool CheckMemoryCanPlayReplay();// 0x1c47078ea041
	void AppendCheatersPlayerID(out const FString[] InCheatersPlayerID);// 0x1c46078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayCueTag
	GameplayTag GameplayCueTag;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AddMultiplePassMaterialChangeParams
	GameplayTag PriorityTag;//[Offset: 0x0, Size: 0x8]
	enum ResolveStrategy;//[Offset: 0x8, Size: 0x1]
	enum CompatibilityMode;//[Offset: 0x9, Size: 0x1]
	GameplayTagContainer SpecifiedPriorityTags;//[Offset: 0x10, Size: 0x20]
	bool bNeedMultiplePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bForceFrontFaceCull;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bIgnoreTranslucentSection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bIgnoreMaskedSection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool bIgnoreOcclusionCull;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool bRenderMainPassStencil;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	bool bSetTranslucencySortPriorityOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	int MainPassDepthStencilValue;//[Offset: 0x34, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x38, Size: 0x4]
	int CustomDepthStencilValue;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StartRecordingParams
	bool bWithLevelStreamingFixes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bEnableCheckpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	uint32 RecordHz;//[Offset: 0x4, Size: 0x4]
	float CheckpointInterval;//[Offset: 0x8, Size: 0x4]
	float ChunkInterval;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpectateConditions
	bool bCanBeSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bCanBeSpectateByHostilePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanBeSpectateByFriendlyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bCanISpectateBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bCanISpectateHostilePlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float LookAtSelfDeathBoxCountDown;//[Offset: 0x8, Size: 0x4]
	enum[] FindSpectateTargetPolicy;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GiftSenderInfo
	int Gold;//[Offset: 0x0, Size: 0x4]
	int Diamond;//[Offset: 0x4, Size: 0x4]
	FString playerName;//[Offset: 0x8, Size: 0x10]
	FString PlayerId;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InteractiveTaskStatus
	int TaskID;//[Offset: 0x0, Size: 0x4]
	int CurLevel;//[Offset: 0x4, Size: 0x4]
	int ProgressValue;//[Offset: 0x8, Size: 0x4]
	int TargetValue;//[Offset: 0xc, Size: 0x4]
	int Param;//[Offset: 0x10, Size: 0x4]
	bool bAvailableToNxtLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	GiftSenderInfo[] TaskGiftPlayerInfo;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleSpectateInfo
	SolarVehiclePawn* SpectateVehicle;//[Offset: 0x0, Size: 0x8]
	SolarVehicleWeapon* SpectateVehicleWeapon;//[Offset: 0x8, Size: 0x8]
	enum VehicleWeaponScopeType;//[Offset: 0x10, Size: 0x1]
	SolarPlayerWeapon* SpectatePlayerWeapon;//[Offset: 0x14, Size: 0x8]
	int ScopeId;//[Offset: 0x1c, Size: 0x4]
	int[] WeaponIDs;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehiclePawn.Pawn.Actor.Object
	PrimitiveComponent* VehicleRoot;//[Offset: 0x2d0, Size: 0x8]
	SkeletalMeshComponentBudgeted* VehicleMesh;//[Offset: 0x2d8, Size: 0x8]
	uint32 VehicleID;//[Offset: 0x2e0, Size: 0x4]
	bool bVehicleMeshAggregationTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	class SkeletalMeshComponentBudgeted* VehicleStencilClass;//[Offset: 0x2e8, Size: 0x28]
	SkeletalMeshComponentBudgeted* VehicleStencilNew;//[Offset: 0x310, Size: 0x8]
	SolarNetMovementComponent* NetMovementComponent;//[Offset: 0x318, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x320, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x328, Size: 0x8]
	SolarVehicleAbilitySystemComponent* VehicleAbilitySystem;//[Offset: 0x330, Size: 0x8]
	SolarVehicleSpringArmComponent* SpringArmComponent;//[Offset: 0x338, Size: 0x8]
	SolarVehicleCameraComponent* CameraComponent;//[Offset: 0x340, Size: 0x8]
	SolarVehicleAttributeSet* VehicleAttributeSet;//[Offset: 0x348, Size: 0x8]
	BasedMovement BasedMovement;//[Offset: 0x350, Size: 0x28]
	VehicleSeatSlot[] SeatSlots;//[Offset: 0x378, Size: 0x10]
	int HealthUIID;//[Offset: 0x388, Size: 0x4]
	Texture2D* VehicleBrandIcon;//[Offset: 0x390, Size: 0x28]
	float OverlapWaterRadius;//[Offset: 0x3b8, Size: 0x4]
	Vector OutVehicleOffset;//[Offset: 0x3bc, Size: 0xc]
	float WaterDraftDepth;//[Offset: 0x3c8, Size: 0x4]
	float CarpadProtectTime;//[Offset: 0x3cc, Size: 0x4]
	float CarPadAccelerationMultiplier;//[Offset: 0x3d0, Size: 0x4]
	class SolarVehicleGA_Carpad* CarPadAbility;//[Offset: 0x3d8, Size: 0x8]
	Vector[] DropPassengerLocations;//[Offset: 0x3e0, Size: 0x10]
	Vector DropPassengerAtTop;//[Offset: 0x3f0, Size: 0xc]
	Vector DamageBoxLocation;//[Offset: 0x3fc, Size: 0xc]
	Vector DamageBoxExtent;//[Offset: 0x408, Size: 0xc]
	FName[] PenetrationDamageBones;//[Offset: 0x418, Size: 0x10]
	float VehicleMaxSpeedOnUI;//[Offset: 0x428, Size: 0x4]
	enum VehicleControlUIType;//[Offset: 0x42c, Size: 0x1]
	enum VehicleAnimationType;//[Offset: 0x42d, Size: 0x1]
	FName VehicleDirectionBoneForPassenger;//[Offset: 0x430, Size: 0x8]
	VehicleVFX GCCameraVFX;//[Offset: 0x440, Size: 0x90]
	float GCCameraEffectAngle;//[Offset: 0x4d0, Size: 0x4]
	VehicleVFX[] NosVFXes;//[Offset: 0x4d8, Size: 0x10]
	<byte,ParticleSystem*> RaiseDustEffects;//[Offset: 0x4e8, Size: 0x50]
	float SpeedThresholdForCollidingDamage;//[Offset: 0x538, Size: 0x4]
	float SpeedThresholdForStandingOn;//[Offset: 0x53c, Size: 0x4]
	float SpeedThresholdForGetOnVehicle;//[Offset: 0x540, Size: 0x4]
	ParticleSystem* EnterWaterVFX;//[Offset: 0x548, Size: 0x28]
	float SprayVelocity;//[Offset: 0x5e8, Size: 0x4]
	float HeavyInSpeed;//[Offset: 0x5ec, Size: 0x4]
	float CriticalAngle;//[Offset: 0x5f0, Size: 0x4]
	Vector OffsetBasedVechileLoction;//[Offset: 0x5f4, Size: 0xc]
	float CollisionSparkThreshold;//[Offset: 0x600, Size: 0x4]
	ParticleSystem* CollisionSparkParticle;//[Offset: 0x608, Size: 0x28]
	FName CollisionSparkParamNowel;//[Offset: 0x630, Size: 0x8]
	FName CollisionSparkParamQuantity;//[Offset: 0x638, Size: 0x8]
	float VehicleSpeedThresholdToPlayVFX;//[Offset: 0x640, Size: 0x4]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToNowel;//[Offset: 0x648, Size: 0x88]
	RuntimeFloatCurve CollisionSparkCurveFromImpulseToQuantity;//[Offset: 0x6d0, Size: 0x88]
	VehicleVFX SpeedParticle;//[Offset: 0x760, Size: 0x90]
	VehicleVFXMesh[] DriverOnVFXMeshes;//[Offset: 0x7f0, Size: 0x10]
	VehicleVFX[] DriverOnVFXs;//[Offset: 0x800, Size: 0x10]
	Vector SpawnOffset;//[Offset: 0x810, Size: 0xc]
	VehicleCameraDataAsset* CameraDataAsset;//[Offset: 0x820, Size: 0x8]
	FString SpeedVibrationHeString;//[Offset: 0x828, Size: 0x10]
	RuntimeFloatCurve SpeedVibrationCurve;//[Offset: 0x838, Size: 0x88]
	float MinSpeedDifferenceForCollisionVibration;//[Offset: 0x8c0, Size: 0x4]
	FString CollisionVibrationHeString;//[Offset: 0x8c8, Size: 0x10]
	FString LandingVibrationHeString;//[Offset: 0x8d8, Size: 0x10]
	RuntimeFloatCurve LandingVibrationCurve;//[Offset: 0x8e8, Size: 0x88]
	float MaxSpeedDecelerationRate;//[Offset: 0x970, Size: 0x4]
	SolarVehicleMaterialData BackLampData;//[Offset: 0x978, Size: 0x28]
	SolarVehicleMaterialData[] VehicleMaterialDataArray;//[Offset: 0x9a0, Size: 0x10]
	SolarVehicleSoundDataAsset* VehicleSoundDataAsset;//[Offset: 0x9b0, Size: 0x8]
	class GameplayEffect* DefaultAttributes;//[Offset: 0x9b8, Size: 0x8]
	class GameplayEffect* CanDriveEffect;//[Offset: 0x9c0, Size: 0x8]
	class GameplayEffect* CanGetOnEffect;//[Offset: 0x9c8, Size: 0x8]
	class GameplayEffect* UnderWaterEffect;//[Offset: 0x9d0, Size: 0x8]
	class SolarAbility* ExplosionAbilityClass;//[Offset: 0x9d8, Size: 0x8]
	SolarDamageInfo ExplosionDamageInfo;//[Offset: 0x9e0, Size: 0x40]
	VehicleVFX ExplosionVFX;//[Offset: 0xa20, Size: 0x90]
	VehicleVFXMesh VehicleBrokenMesh;//[Offset: 0xab0, Size: 0x80]
	VehicleVFX VehicleDamagedVFXs;//[Offset: 0xb30, Size: 0x90]
	DamageStatusVehicleVFXs VehicleDamageStatusVFXs;//[Offset: 0xe00, Size: 0x10]
	class GameplayEffect* VehicleDamageStatusEffects;//[Offset: 0xe50, Size: 0x8]
	int MaxLodLevelForUpdateVisual;//[Offset: 0xe78, Size: 0x4]
	VehicleWeakPointSpec[] VehicleWeakPointContainer;//[Offset: 0xe80, Size: 0x10]
	RuntimeFloatCurve[] WeakPointBrokenSpeedCurves;//[Offset: 0xe90, Size: 0x10]
	class GameplayEffect* WeakPointBrokenEffect;//[Offset: 0xea0, Size: 0x8]
	PrimitiveComponent* PlatformComponent;//[Offset: 0xea8, Size: 0x8]
	bool bCanStandOnPlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 0x1]
	float DistanceThresholdForAttachPlatform;//[Offset: 0xeb4, Size: 0x4]
	float DegreeThresholdForAttachPlatform;//[Offset: 0xeb8, Size: 0x4]
	float SpeedThresholdForAttachPlatform;//[Offset: 0xebc, Size: 0x4]
	float TimerForPenetration;//[Offset: 0xec0, Size: 0x4]
	float PenetrationThreshold;//[Offset: 0xec4, Size: 0x4]
	float CollideDamage;//[Offset: 0xec8, Size: 0x4]
	float CrashDamageWeight;//[Offset: 0xecc, Size: 0x4]
	float SelfCrashDamageRate;//[Offset: 0xed0, Size: 0x4]
	float PassengerDamageRatio;//[Offset: 0xed4, Size: 0x4]
	float MinPlayerDamageVelocity;//[Offset: 0xed8, Size: 0x4]
	float CollidedCharacterDmgRatio;//[Offset: 0xedc, Size: 0x4]
	float CollideUpBoundingRatio;//[Offset: 0xee0, Size: 0x4]
	CurveFloat* CollidePushSpeedCurve;//[Offset: 0xee8, Size: 0x8]
	float CollidePushUpAngle;//[Offset: 0xef0, Size: 0x4]
	float CharacterProtectTime;//[Offset: 0xef4, Size: 0x4]
	float CollisionLinearVelocityDampingForSimulatedProxy;//[Offset: 0xef8, Size: 0x4]
	float CollisionLinearVelocityDampingSetDelay;//[Offset: 0xefc, Size: 0x4]
	float CollisionCompensationImpulseForSimulatedProxy;//[Offset: 0xf00, Size: 0x4]
	int[] StealthHideMats;//[Offset: 0xf08, Size: 0x10]
	enum ReplicatedAnimState;//[Offset: 0xf20, Size: 0x1]
	bool bRemoveStencil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf21, Size: 0x1]
	delegate OnPlayerGetOnVehicle;//[Offset: 0xf38, Size: 0x1]
	delegate OnPlayerGetOffVehicle;//[Offset: 0xf39, Size: 0x1]
	int[] OccupiedSeats;//[Offset: 0x1008, Size: 0x10]
	SolarInputActionContext* InputActionContext;//[Offset: 0x1018, Size: 0x8]
	Vector_NetQuantizeNormal ReplicatedPlayerInputVector;//[Offset: 0x1024, Size: 0xc]
	Vector_NetQuantize RepLocation;//[Offset: 0x103c, Size: 0xc]
	Actor*[] ActorsOnPlatform;//[Offset: 0x1088, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x10c4, Size: 0x4]
	byte CurPlayerInputMask;//[Offset: 0x10c8, Size: 0x1]
	byte ReplicatedPlayerInputMask;//[Offset: 0x10c9, Size: 0x1]
	SolarNavModifierComponent* SolarNavModifierComp;//[Offset: 0x1150, Size: 0x8]
	bool bDynamicAffectNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1158, Size: 0x1]
	bool bUseCustomCollisionCylinder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1159, Size: 0x1]
	float CustomRadius;//[Offset: 0x115c, Size: 0x4]
	float CustomHalfHeight;//[Offset: 0x1160, Size: 0x4]
	int SkinId;//[Offset: 0x11b8, Size: 0x4]
	bool bVehicleBurningStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d1, Size: 0x1]
	float EnterWaterDuration;//[Offset: 0x12a8, Size: 0x4]
	float WaterLineHeight;//[Offset: 0x12b0, Size: 0x4]
	SolarWaterActorNew* WaterActor;//[Offset: 0x12b8, Size: 0x8]
	CurveFloat* SpeedCameraShakeCurve;//[Offset: 0x12e0, Size: 0x8]
	CurveFloat* SpeedScreenEffectOpacityCurve;//[Offset: 0x12e8, Size: 0x8]
	CurveFloat* SpeedScreenEffectPlayRateCurve;//[Offset: 0x12f0, Size: 0x8]
	float MinCameraShakeSpeed;//[Offset: 0x12f8, Size: 0x4]
	float MinScreenEffectSpeed;//[Offset: 0x12fc, Size: 0x4]
	class CameraShake* VehicleSpeedCameraShake;//[Offset: 0x1300, Size: 0x8]
	FName VehicleSpeedScreenEffectRowId;//[Offset: 0x1308, Size: 0x8]
	bool bEnableHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1330, Size: 0x1]
	HitSoundReplicationData HitSoundData;//[Offset: 0x1338, Size: 0x80]
	float AgentRadiusAdjustment;//[Offset: 0x13b8, Size: 0x4]
	void StatVehicleAutoMove(int MoveTime);// 0x4e33078ea041
	void SetWeakPointHealth(byte WeakPointID, float InHealth);// 0x4e32078ea041
	void SetTakeMoveInput(bool bInTakeDirection, bool bInTakeRotation);// 0x4e31078ea041
	void SetPlayerInputVector(out const Vector2D InputVector, float CameraYaw);// 0x4e30078ea041
	void SetCurrentHealth(float InHealth);// 0x4e2f078ea041
	void SetCrossCarpad(SolarCarPad* InCarpad);// 0x4e2e078ea041
	void ServerSetPlayerInput(const Vector_NetQuantizeNormal InputVector, const byte InputMask);// 0x4e2d078ea041
	void ServerSetCrossCarpad(SolarCarPad* InCarpad);// 0x4e2c078ea041
	void ServerSendsTransformToEveryoneWithMovementBase(const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x4e2b078ea041
	void ServerSendsTransformToEveryone(const byte[] Value);// 0x4e2a078ea041
	void ServerSendsTeleportStateToEveryone(const Vector_NetQuantize InLocation, const Vector_NetQuantizeNormal InNormalizeEuler, float InServerTimeStamp);// 0x4e29078ea041
	void ServerSendCorrectionToClient(float ServerTimeStamp, Vector_NetQuantize WorldLocation, Vector_NetQuantizeNormal WorldRotationCompressed);// 0x4e28078ea041
	void ServerHandleVehicleCollision(const VehicleCollisionInfo InVehicleCollisionInfo);// 0x4e27078ea041
	void ServerDrawActorLocationAndRotationOnClient(const Vector InLocation, const Rotator InRotator);// 0x4e26078ea041
	void ServerApplyDamageToVehilceAndPassenger(SolarVehiclePawn* OtherVehicle, float DamageToSelf, float DamageToOther, const Vector_NetQuantize HitLocation);// 0x4e25078ea041
	void ServerApplyAbilityDamageToTargets(const Pawn*[] Targets, GameplayAbilitySpecHandle AbilityHandle);// 0x4e24078ea041
	void RemoveSeatSlot(byte SeatIndex);// 0x4e23078ea041
	void ReleaseDamagedStatusVFX(byte InDamagedStatus);// 0x4e22078ea041
	void PlayVehicleEjectSound(SolarCharacter* ejectedCharacter);// 0x4e21078ea041
	void PlaySpeedboardSound();// 0x4e20078ea041
	void PlayDamagedStatusVFX(byte InDamagedStatus);// 0x4e1f078ea041
	void OverlapTraceOnServer();// 0x4e1e078ea041
	void OnStencilLoaded();// 0x4e1d078ea041
	void OnSkinDataAssetLoadedNext(SoftObjectPath SkinVehiclePath);// 0x4e1c078ea041
	void OnSkinDataAssetLoaded(SoftObjectPath SkinVehiclePath);// 0x4e1b078ea041
	void OnRep_WeakPointHealthOrStateChanged(VehicleWeakPointSpec[] OldVehicleWeakPointDatas);// 0x4e1a078ea041
	void OnRep_VehicleBurning();// 0x4e19078ea041
	void OnRep_SkinId();// 0x4e18078ea041
	void OnRep_ReplicatedPlayerInputMask(byte OldReplicatedPlayerInputMask);// 0x4e17078ea041
	void OnRep_ReplicatedAnimState(enum PreviousState);// 0x4e16078ea041
	void OnRep_RemoveStencil();// 0x4e15078ea041
	void OnRep_HitSoundData(out const HitSoundReplicationData LastData);// 0x4e14078ea041
	void OnRep_CachedActorHandle();// 0x4e13078ea041
	bool IsVehicleFullHealth();// 0x4e12078ea041
	bool IsVehicleDangerous();// 0x4e11078ea041
	bool IsVehicleCanGetOff();// 0x4e10078ea041
	bool IsVehicleBroken();// 0x4e0f078ea041
	bool IsTeammateWith(const Pawn* Pawn);// 0x4e0e078ea041
	bool IsManuallyCancelAbilityActive(byte SeatIndex);// 0x4e0d078ea041
	bool IsExistEnemy(const SolarCharacter* Character);// 0x4e0c078ea041
	bool IsAbilityActive(byte SeatIndex, byte AbilityIndex);// 0x4e0b078ea041
	bool InSameTeam();// 0x4e0a078ea041
	VehicleWeakPointSpec[] GetVehicleWeakPoints();// 0x4e09078ea041
	int GetVehicleTypeID();// 0x4e08078ea041
	byte GetVehicleTeamId();// 0x4e07078ea041
	PhysicalMaterial* GetVehicleRootPhysMaterial();// 0x4e06078ea041
	int GetVehicleGroupID();// 0x4e05078ea041
	float GetSpeedInKmh();// 0x4e04078ea041
	float GetSpeed();// 0x4e03078ea041
	Vector GetSpawnOffset();// 0x4e02078ea041
	Vector2D GetPlayerInputVector();// 0x4e01078ea041
	int GetPassengerCount();// 0x4e00078ea041
	int GetNextVacantSeat(int InCurrentSeatIndex);// 0x4dff078ea041
	float GetMaxHealth();// 0x4dfe078ea041
	int GetManuallyCancelAbilityIndex(byte SeatIndex);// 0x4dfd078ea041
	int GetHealthPercentInt();// 0x4dfc078ea041
	SolarCharacter* GetDriverCharacter();// 0x4dfb078ea041
	float GetDangerHealthPrecent();// 0x4dfa078ea041
	float GetCurrentHealth();// 0x4df9078ea041
	void DeleteStencilMesh();// 0x4df8078ea041
	void ClientVehicleExplosion();// 0x4df7078ea041
	void ClientVehicleBroken();// 0x4df6078ea041
	void ClientSendsTransformToServerWithMovementBaseAfterCorrection(float DriverLocalTime, float ServerTimeStamp, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x4df5078ea041
	void ClientSendsTransformToServerWithMovementBase(float DriverLocalTime, const byte[] Value, SolarVehiclePawn* InMovementBase);// 0x4df4078ea041
	void ClientSendsTransformToServerAfterCorrection(float DriverLocalTime, float ServerTimeStamp, const byte[] Value);// 0x4df3078ea041
	void ClientSendsTransformToServer(float DriverLocalTime, const byte[] Value);// 0x4df2078ea041
	bool CheckUpdateVisual();// 0x4df1078ea041
	bool CheckOpenParticleOptimization(int Bias);// 0x4df0078ea041
	bool CanActivateAbility(byte SeatIndex, byte AbilityIndex);// 0x4def078ea041
	byte AddSeatSlot(out const VehicleSeatSlot SeatSlot);// 0x4dee078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCarPad.SolarInteractableActor.Actor.Object
	float Duration;//[Offset: 0x238, Size: 0x4]
	float SpeedMultiplier;//[Offset: 0x23c, Size: 0x4]
	<uint32,float> SpeedMultipliers;//[Offset: 0x240, Size: 0x50]
	<uint32,float> PitchOffsets;//[Offset: 0x290, Size: 0x50]
	float DistanceThresholdForValidation;//[Offset: 0x2e0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInteractableActor.Actor.Object
	enum InteractType;//[Offset: 0x228, Size: 0x1]
	byte bUseSceneActorOptimization;//[Offset: 0x234, Size: 0x1]
	void SetUserActor(Actor* InUser);// 0x4faf078ea041
	void InteractWithActor(Actor* InActor);// 0x4fae078ea041
	Actor* GetUserActor();// 0x4fad078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleCollisionInfo
	PrimitiveComponent* CollidedPrimitive;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize SelfPreVelocity;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize SelfCurrentVelocity;//[Offset: 0x14, Size: 0xc]
	Vector_NetQuantize OtherVehicleLinearVelocity;//[Offset: 0x20, Size: 0xc]
	Vector_NetQuantize OtherVehicleAngularVelocity;//[Offset: 0x2c, Size: 0xc]
	Vector_NetQuantize OtherVehicleLocation;//[Offset: 0x38, Size: 0xc]
	Vector_NetQuantizeNormal OtherVehicleRotation;//[Offset: 0x44, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilitySpecHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	delegate OnCharacterAllReadyDelegate;//[Offset: 0x640, Size: 0x10]
	delegate PendingBeginPlay;//[Offset: 0x678, Size: 0x10]
	delegate OnPlayerStatePossessDelegate;//[Offset: 0x6a0, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x6b0, Size: 0x10]
	enum SolarCharacterType;//[Offset: 0x6c0, Size: 0x1]
	Vector2D CharacterCapsuleSizeOverride;//[Offset: 0x6c4, Size: 0x8]
	bool bInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cd, Size: 0x1]
	ReconnectionParams ReconnectionParams;//[Offset: 0x6fb, Size: 0x1]
	SolarAnimInstance* SolarAnimInstance;//[Offset: 0x720, Size: 0x8]
	<enum,AnimInstance*> SolarAnimInstances;//[Offset: 0x728, Size: 0x50]
	HitSoundReplicationData HitSoundData;//[Offset: 0x790, Size: 0x80]
	SolarPile*[] ChargingPileQueue;//[Offset: 0x810, Size: 0x10]
	delegate OnCharacterIDSet;//[Offset: 0x848, Size: 0x10]
	delegate OnSkinIDSet;//[Offset: 0x858, Size: 0x10]
	delegate OnCharacterSkinReset;//[Offset: 0x868, Size: 0x10]
	enum BodyScaleType;//[Offset: 0x878, Size: 0x1]
	int AssignedCharacterID;//[Offset: 0x87c, Size: 0x4]
	int AssignedSkinID;//[Offset: 0x880, Size: 0x4]
	<GameplayTag,SkeletalMeshComponent*> SkeletalOrnaments;//[Offset: 0x890, Size: 0x50]
	<GameplayTag,StaticMeshComponent*> StaticOrnaments;//[Offset: 0x8e0, Size: 0x50]
	<GameplayTag,ChildActorComponent*> ChildActorOrnaments;//[Offset: 0x930, Size: 0x50]
	<GameplayTag,CharacterTagListenerForOrnamentComp> OrnamentCompVisibleTagDependencies;//[Offset: 0x980, Size: 0x50]
	OrnamentMontageInfo OrnamentMontageInfo;//[Offset: 0x9d0, Size: 0x18]
	SolarAttributeSubComponent* AttributeSubComp;//[Offset: 0xb28, Size: 0x8]
	SolarBackpackActor* SolarBackpackActor;//[Offset: 0xb90, Size: 0x8]
	SolarBackpackComponent* SolarBackpackComponent;//[Offset: 0xb98, Size: 0x8]
	delegate OnBackpackItemUpdate;//[Offset: 0xbc0, Size: 0x10]
	delegate OnBackpackEnergyUpdate;//[Offset: 0xbd0, Size: 0x10]
	delegate OnBackpackEquipUpdate;//[Offset: 0xbe0, Size: 0x10]
	delegate OnBatteryIdUpdate;//[Offset: 0xbf0, Size: 0x10]
	delegate OnEnergyStateUpdate;//[Offset: 0xc00, Size: 0x10]
	delegate OnChargeInfoUpdate;//[Offset: 0xc10, Size: 0x10]
	delegate OnConsumableNumUpdated;//[Offset: 0xc20, Size: 0x10]
	delegate OnMaxEnergyUpdate;//[Offset: 0xc30, Size: 0x10]
	delegate OnCurEnergyUpdate;//[Offset: 0xc40, Size: 0x10]
	delegate OnBackpackWeaponPartUpdate;//[Offset: 0xc50, Size: 0x10]
	<int,int> ShieldUpMatCostMap;//[Offset: 0xc60, Size: 0x50]
	<int,int> MaxPileMap;//[Offset: 0xcb0, Size: 0x50]
	ReplicateMaxPileData[] MaxPileArray;//[Offset: 0xd00, Size: 0x10]
	<int,SolarItemData> IdKeyItemMap;//[Offset: 0xd10, Size: 0x50]
	ReplicateItemData[] IdKeyItemArray;//[Offset: 0xd60, Size: 0x10]
	<enum,SolarItemData> TypeKeyItemMap;//[Offset: 0xd70, Size: 0x50]
	ReplicateItemData[] TypeKeyItemArray;//[Offset: 0xdc0, Size: 0x10]
	ReplicateItemData[] WeaponDataArray;//[Offset: 0xdd0, Size: 0x10]
	<int,SolarItemData> WeaponDataMap;//[Offset: 0xde0, Size: 0x50]
	int[] WeaponPartsArray;//[Offset: 0xe80, Size: 0x10]
	WeaponIgnoreScopeLists IgnoreScopeLists;//[Offset: 0xe90, Size: 0x20]
	byte EnergyState;//[Offset: 0xeb0, Size: 0x1]
	float MaxEnergyValue;//[Offset: 0xeb4, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0xeb8, Size: 0x4]
	float MaxExtraEnergyValue;//[Offset: 0xebc, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0xec0, Size: 0x4]
	int EnergyModuleID;//[Offset: 0xec4, Size: 0x4]
	float AddedEnergyMax;//[Offset: 0xec8, Size: 0x4]
	int ExtraEnergyModuleID;//[Offset: 0xecc, Size: 0x4]
	float AddedExtraEnergyMax;//[Offset: 0xed0, Size: 0x4]
	int VJetPackModuleID;//[Offset: 0xed4, Size: 0x4]
	int HJetPackModuleID;//[Offset: 0xed8, Size: 0x4]
	bool bSettingEnergyCostEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedd, Size: 0x1]
	int DayLightID;//[Offset: 0xee0, Size: 0x4]
	float SolarChargeRatio;//[Offset: 0xee4, Size: 0x4]
	bool bReviveItemCleared;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee8, Size: 0x1]
	BackpackJetPrepelInfo JetPropellingInfo;//[Offset: 0xeec, Size: 0xc]
	enum BackpackPropellingMode;//[Offset: 0xef8, Size: 0x1]
	Vector2D InputVector;//[Offset: 0xefc, Size: 0x8]
	SolarInputActionContext* InputActionContext;//[Offset: 0xf10, Size: 0x8]
	byte IdleTurnType;//[Offset: 0xf18, Size: 0x1]
	Rotator CharacterLookAt;//[Offset: 0xf20, Size: 0xc]
	CharacterOperationEvent CharacterOperationEvt;//[Offset: 0xf50, Size: 0x10]
	delegate OnHealthUpdateDelegate;//[Offset: 0xf78, Size: 0x10]
	float PendingRegeneration;//[Offset: 0xf88, Size: 0x4]
	float DiedTime;//[Offset: 0xf8c, Size: 0x4]
	bool bIsDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf94, Size: 0x1]
	SolarHitTraceComponent* SolarHitTraceComponent;//[Offset: 0xfa8, Size: 0x8]
	SolarTeamRescueComponent* SolarTeamRescueComponent;//[Offset: 0xfb0, Size: 0x8]
	SolarCharacter* RescuingCharater;//[Offset: 0xfb8, Size: 0x8]
	SolarUAVRescue* RescuingUAV;//[Offset: 0xfc0, Size: 0x8]
	byte CurrentRescueState;//[Offset: 0xfc8, Size: 0x1]
	byte LastRescueState;//[Offset: 0xfc9, Size: 0x1]
	SolarCharacter* RescuedCharater;//[Offset: 0xff8, Size: 0x8]
	float RescuedStartTime;//[Offset: 0x1000, Size: 0x4]
	StaticMeshComponent* RescueInjector;//[Offset: 0x1008, Size: 0x8]
	float RescueTime;//[Offset: 0x1034, Size: 0x4]
	SolarPlayerWeapon*[] DeathBoxWeaponArray;//[Offset: 0x1040, Size: 0x10]
	SolarItemData[] DeathBoxArray;//[Offset: 0x1050, Size: 0x10]
	float DeathBoxEnergy;//[Offset: 0x1060, Size: 0x4]
	ParticleSystemComponent* SwimmingWaterEffect;//[Offset: 0x1068, Size: 0x8]
	ParticleSystemComponent* HeavyJumpWaterEffect;//[Offset: 0x1070, Size: 0x8]
	ParticleSystemComponent*[] HorizontalFlyWaterEffects;//[Offset: 0x1078, Size: 0x10]
	SolarItemComponent* SolarItemComponent;//[Offset: 0x1098, Size: 0x8]
	SolarPickupComponent* SolarPickupComponent;//[Offset: 0x10a0, Size: 0x8]
	bool bIsElectricStoreOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a8, Size: 0x1]
	SolarTreatmentComponent* SolarTreatmentComponent;//[Offset: 0x10b0, Size: 0x8]
	enum CurrentTreatState;//[Offset: 0x10c8, Size: 0x1]
	int TreatmentCount;//[Offset: 0x10cc, Size: 0x4]
	delegate OnShieldRecharge;//[Offset: 0x10d8, Size: 0x10]
	delegate OnShieldBreak;//[Offset: 0x10e8, Size: 0x10]
	delegate OnShowShieldHUD;//[Offset: 0x10f8, Size: 0x10]
	delegate OnShowShieldHUDItem;//[Offset: 0x1108, Size: 0x10]
	delegate OnShieldUpFX;//[Offset: 0x1118, Size: 0x10]
	delegate OnCurShieldValueChanged;//[Offset: 0x1128, Size: 0x10]
	delegate OnShieldIDChanged;//[Offset: 0x1138, Size: 0x10]
	delegate OnShieldValueLow;//[Offset: 0x1148, Size: 0x10]
	delegate OnShieldValueChanged;//[Offset: 0x1158, Size: 0x10]
	int CurrShieldId;//[Offset: 0x116c, Size: 0x4]
	int CurUniqueShieldId;//[Offset: 0x1170, Size: 0x4]
	float MaxShieldValue;//[Offset: 0x1174, Size: 0x4]
	int NextUpgradeShieldID;//[Offset: 0x1178, Size: 0x4]
	int NextUpgradeShieldEnergy;//[Offset: 0x117c, Size: 0x4]
	float CurrShieldValue;//[Offset: 0x1180, Size: 0x4]
	enum CurrShieldState;//[Offset: 0x1184, Size: 0x1]
	int CurrShieldLevel;//[Offset: 0x1188, Size: 0x4]
	bool bHasPreAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1190, Size: 0x1]
	StaticMeshComponent* ShieldRepairOperator;//[Offset: 0x1238, Size: 0x8]
	StaticMesh* ShieldOperatorSM;//[Offset: 0x1240, Size: 0x8]
	StaticMesh* ShieldOperatorBigSM;//[Offset: 0x1248, Size: 0x8]
	ParticleSystemComponent* ShieldRepairFX;//[Offset: 0x1250, Size: 0x8]
	ParticleSystemComponent* ShieldMultiRecoverFX;//[Offset: 0x1258, Size: 0x8]
	ParticleSystemComponent* ShieldUpgradeBodyFX;//[Offset: 0x1260, Size: 0x8]
	StaticMeshComponent* ShieldUpgradeOperator;//[Offset: 0x1268, Size: 0x8]
	StaticMesh* ShieldUpgradeOperatorSM;//[Offset: 0x1270, Size: 0x8]
	Timeline ShieldOperatorExpandTimeline;//[Offset: 0x1278, Size: 0x98]
	Timeline ShieldOperatorNarrowTimeline;//[Offset: 0x1310, Size: 0x98]
	<enum,ShieldSoundData> ShieldSounds;//[Offset: 0x13a8, Size: 0x50]
	StaticMeshComponent* TreasureBoxOperator;//[Offset: 0x1408, Size: 0x8]
	DeathTreasureBox* CurChargingDeathBox;//[Offset: 0x1420, Size: 0x8]
	DeathTreasureBox*[] DeathBoxes;//[Offset: 0x1428, Size: 0x10]
	delegate OnLocalPlayerSpectateMeStatusChanged;//[Offset: 0x1440, Size: 0x10]
	delegate OnHUDNickNameSet;//[Offset: 0x1480, Size: 0x10]
	delegate OnHUDTeamPosSet;//[Offset: 0x1490, Size: 0x10]
	delegate OnHUDDistanceSet;//[Offset: 0x14a0, Size: 0x10]
	delegate OnHUDDistanceDisplaySet;//[Offset: 0x14b0, Size: 0x10]
	delegate OnHUDRescueBtnActivitySet;//[Offset: 0x14c0, Size: 0x10]
	SolarTeammateHUDWidgetComponent* TeammateHUDComp;//[Offset: 0x14d0, Size: 0x8]
	float HUDZNomral;//[Offset: 0x14e0, Size: 0x4]
	float HUDChangeTime;//[Offset: 0x14e4, Size: 0x4]
	SolarRadarComponent* SolarRadarComponent;//[Offset: 0x1500, Size: 0x8]
	RadarDataSpecContainer ActivatedRadars;//[Offset: 0x1508, Size: 0x120]
	SolarRadarStation* TargetRadarStation;//[Offset: 0x1628, Size: 0x8]
	SolarElectricShop* TargetElectricShop;//[Offset: 0x1630, Size: 0x8]
	TimerHandle StatisticsTimerHandle;//[Offset: 0x1648, Size: 0x8]
	SolarCharacter* CachedInstigatorCharacter;//[Offset: 0x16c8, Size: 0x8]
	float ArmorReduceValue;//[Offset: 0x179c, Size: 0x4]
	float HeadHitValue;//[Offset: 0x17a0, Size: 0x4]
	delegate OnTakeDamageDelegate;//[Offset: 0x17a8, Size: 0x10]
	int InstigatorCharacterWeaponItemID;//[Offset: 0x17cc, Size: 0x4]
	CriticalHitInfo[] CriticalHits;//[Offset: 0x17d0, Size: 0x10]
	WorldMarkComponent* WorldMarkComponent;//[Offset: 0x1850, Size: 0x8]
	IMChatObject* IMChatObj;//[Offset: 0x1858, Size: 0x8]
	int AIActorCapacity;//[Offset: 0x1860, Size: 0x4]
	float StandJogSpeed;//[Offset: 0x1910, Size: 0x4]
	float StandRunSpeed;//[Offset: 0x1914, Size: 0x4]
	float StandSprintSpeed;//[Offset: 0x1918, Size: 0x4]
	float CrouchJogSpeed;//[Offset: 0x191c, Size: 0x4]
	float CrouchRunSpeed;//[Offset: 0x1920, Size: 0x4]
	float CrouchSprintSpeed;//[Offset: 0x1924, Size: 0x4]
	delegate OnJogSetClient;//[Offset: 0x1930, Size: 0x10]
	bool bIsSprintingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1940, Size: 0x1]
	SolarCharacterMovementComponent* CachedSolarCharacterMovement;//[Offset: 0x1998, Size: 0x8]
	byte CurrentSteppedSurfaceType;//[Offset: 0x19a0, Size: 0x1]
	bool bIsJog;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19a1, Size: 0x1]
	float MoveSpeedReduceBonusInHipFire;//[Offset: 0x19a4, Size: 0x4]
	float MoveSpeedReduceBonusInAdsHipFire;//[Offset: 0x19a8, Size: 0x4]
	enum CurrentCustomJumpType;//[Offset: 0x19bc, Size: 0x1]
	delegate OnJetFlyStart;//[Offset: 0x19c0, Size: 0x10]
	enum CurrentJetFlyType;//[Offset: 0x19d0, Size: 0x1]
	bool bNewJetFlyCheckFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19d1, Size: 0x1]
	AnimSequence* CruiseStartAnim;//[Offset: 0x1a18, Size: 0x8]
	AnimSequence* CruiseLoopAnim;//[Offset: 0x1a20, Size: 0x8]
	AnimSequence* CruiseEndAnim;//[Offset: 0x1a28, Size: 0x8]
	float PrepareToParachuteStartTime;//[Offset: 0x1a30, Size: 0x4]
	float PrepareToParachuteDuration;//[Offset: 0x1a34, Size: 0x4]
	Vector PrepareToParachuteLocation;//[Offset: 0x1a38, Size: 0xc]
	Vector AgreedParachuteLocation;//[Offset: 0x1a44, Size: 0xc]
	int CapsuleID;//[Offset: 0x1a68, Size: 0x4]
	bool bEnableCruising;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a88, Size: 0x1]
	SolarCapsuleRoot* BoardedRoot;//[Offset: 0x1a90, Size: 0x8]
	enum CruiseState;//[Offset: 0x1a98, Size: 0x1]
	int ForceParachuteCountDown;//[Offset: 0x1a9c, Size: 0x4]
	CharacterCruiseComponent* CruiseComponentPrivate;//[Offset: 0x1aa0, Size: 0x8]
	SingleCruiseBaseParam CurrentSingleCruiseParam;//[Offset: 0x1ac8, Size: 0x20]
	enum SingleCruiseState;//[Offset: 0x1aec, Size: 0x1]
	SolarCapsuleActor* SingleCruiseCapsuleActor;//[Offset: 0x1af0, Size: 0x8]
	SingleCapsuleRootActor* SingleCruiseRootActor;//[Offset: 0x1af8, Size: 0x8]
	delegate OnSkydiveTraced;//[Offset: 0x1b00, Size: 0x10]
	ExponentialHeightFog* HeightFogActor;//[Offset: 0x1b10, Size: 0x8]
	ParticleSystemComponent*[] SkydiveFlyingEffects;//[Offset: 0x1b18, Size: 0x10]
	ParticleSystemComponent*[] SkydiveLandingEffects;//[Offset: 0x1b28, Size: 0x10]
	ParticleSystemComponent*[] SkydiveWholeLifetimeEffects;//[Offset: 0x1b38, Size: 0x10]
	enum BGMInBattle;//[Offset: 0x1b48, Size: 0x1]
	FName SpecialSkydiveTypeName;//[Offset: 0x1b4c, Size: 0x8]
	enum CurrentSkydiveStage;//[Offset: 0x1b54, Size: 0x1]
	delegate OnSkydivingStageChangedDelegate;//[Offset: 0x1b58, Size: 0x10]
	ActorComponent* FollowedLeaderMovementComponent;//[Offset: 0x1b88, Size: 0x8]
	WeaponSystemPlayerBase* WeaponSystemComponent;//[Offset: 0x1bc8, Size: 0x8]
	delegate OnCharacterFired;//[Offset: 0x1bd8, Size: 0x10]
	SkeletalMeshComponent* FirstPersonMesh;//[Offset: 0x1c00, Size: 0x8]
	SolarPlayerWeapon* TempSwitchWeapon;//[Offset: 0x1c18, Size: 0x8]
	SolarPlayerWeapon* CachedCurrentWeapon;//[Offset: 0x1c20, Size: 0x8]
	WeaponSystemVehicleComponent* WeaponSystemVehicle;//[Offset: 0x1cf0, Size: 0x8]
	BoardedVehicleInfo BoardedVehicleInfo;//[Offset: 0x1d10, Size: 0x10]
	bool bOutVehicleShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d20, Size: 0x1]
	StaticMeshComponent* VehicleRepairToolMesh;//[Offset: 0x1de8, Size: 0x8]
	delegate OnCharacterActivateEMP;//[Offset: 0x1e08, Size: 0x10]
	delegate OnCharacterSwitchEMPEffect;//[Offset: 0x1e18, Size: 0x10]
	bool bActiveEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e28, Size: 0x1]
	bool bActiveInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e29, Size: 0x1]
	bool bNoticedCantCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2a, Size: 0x1]
	enum CurrentSkillAnimType;//[Offset: 0x1e40, Size: 0x1]
	enum CurrentSkillAnimRightHandType;//[Offset: 0x1e41, Size: 0x1]
	float SkillAnimDistanceBlendRatio;//[Offset: 0x1e44, Size: 0x4]
	ScoutEnemyObject* ScoutEnemyObj;//[Offset: 0x1e60, Size: 0x8]
	SolarCharacterBillboardIconComponent* BillboardIconComponent;//[Offset: 0x1e68, Size: 0x8]
	int DuckRollingJumpPoseIndex;//[Offset: 0x1e70, Size: 0x4]
	bool bCanSkilledJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e74, Size: 0x1]
	DuckRollingMeshComponent* CachedDuckRollingMeshComponent;//[Offset: 0x1e78, Size: 0x8]
	byte WallRunSurfaceAngle;//[Offset: 0x1ef8, Size: 0x1]
	enum WallRunState;//[Offset: 0x1ef9, Size: 0x1]
	int LeadDanceID;//[Offset: 0x1efc, Size: 0x4]
	FString DebugStringBotAIInfo;//[Offset: 0x1fa0, Size: 0x10]
	FString DebugStringToDrawGASServer;//[Offset: 0x1fb0, Size: 0x10]
	FString DebugStringDSTransferLog;//[Offset: 0x1fc0, Size: 0x10]
	int RoleAbilityCharacterID;//[Offset: 0x1fd0, Size: 0x4]
	int[] RoleAbilityBoundPlayerLevels;//[Offset: 0x1fd8, Size: 0x10]
	GameplayAbilitySpecHandle[] RoleAbilitySpecHandles;//[Offset: 0x1fe8, Size: 0x10]
	float[] RoleAbilityStartCDServerTime;//[Offset: 0x1ff8, Size: 0x10]
	int BattleUpgradeEffectCurrentLevel;//[Offset: 0x2068, Size: 0x4]
	BattleUpgradeEffectContainer BattleUpgradeEffects;//[Offset: 0x2070, Size: 0x120]
	SolarUAVRescue* PermanentRescueUAV;//[Offset: 0x2210, Size: 0x8]
	<SkywardDiveLauncher*,bool> AvailableSkywardDiveLaunchers;//[Offset: 0x2238, Size: 0x50]
	bool WorldToScreen(out const Vector Location, out Vector2D Screen);// 0x2234078ea041
	void UseDanceEmoteByID(int ID);// 0x2233078ea041
	void UpgradeShieldResponse(const bool bSuccess);// 0x2232078ea041
	void UpgradeGenericSkill(int LevelUp);// 0x2231078ea041
	void UpgradeClassTypeSkill(int LevelUp);// 0x2230078ea041
	void UpdateWeaponCrosshair(float InDeltaTime);// 0x222f078ea041
	void UpdateVehicleStealthProgress(float StealthMaterialPercent);// 0x222e078ea041
	void UpdateTeammateHUDData(byte InNewPosInTeam);// 0x222d078ea041
	void UpdateShieldUpgradeMatMaxPile();// 0x222c078ea041
	void UpdateShieldPropertyByAblility();// 0x222b078ea041
	void UpdateRoleAbilityState(byte RoleAbilityIndex, enum Ope);// 0x222a078ea041
	void UpdateJetFlyDataToSpectating();// 0x2229078ea041
	void UpdateExtraMagToSpectateInfo(SolarSpectateInfo* SpectateInfo);// 0x2228078ea041
	void UpdateDyingAttr(float DeltaTime);// 0x2227078ea041
	float UpdateCurrentHealth(const float UpdateValue, const byte ChangeType, SolarCharacter* InInstigatorCharacter, Actor* InDamageCauserActor, out SolarPointDamageEvent DamageEvent);// 0x2226078ea041
	void UpdateBattleUpgradeEffectToSpectateInfo(SolarSpectateInfo* SpectateInfo);// 0x2225078ea041
	void UnbindActorToSelfTeam(Actor* Actor);// 0x2224078ea041
	void TurnCharacterWithAngle(float Degree, bool bIsYawOrPitch);// 0x2223078ea041
	void TurnCharacterToDirection(out const Vector Dir);// 0x2222078ea041
	void TryStopSpectateCountdown();// 0x2221078ea041
	void TryStopShieldRecharge();// 0x2220078ea041
	void TryStatisticsRechargedTimes();// 0x221f078ea041
	void TryStartSpectateCountdown();// 0x221e078ea041
	void TryStartShieldRecharge(bool bUseBigRecharger);// 0x221d078ea041
	void TrySetTeammateHUDShow();// 0x221c078ea041
	void TrySetTeammateHUDHide();// 0x221b078ea041
	void TryRefreshTeamateHUDVisiblity();// 0x221a078ea041
	void TryRefreshAllyBillboardIcon();// 0x2219078ea041
	void TryRechargeShield(bool bUseBigRecharger);// 0x2218078ea041
	void TryHideShieldOperator();// 0x2217078ea041
	void TryDiscardShieldUpgradeMatItems(const int InItemNum);// 0x2216078ea041
	void TryCreatingOwnTeammate();// 0x2215078ea041
	void TryBreakShieldRecharge();// 0x2214078ea041
	void TryBreakScopeStatus();// 0x2213078ea041
	void TryBindPowerBarDelegates();// 0x2212078ea041
	void TryBindPickupDelegates();// 0x2211078ea041
	void TryBindItemPanelDelegates();// 0x2210078ea041
	void TryBindHPPanelDelegates();// 0x220f078ea041
	void TryAutoMarkItemForTeammateServer(const SolarItemData[] ItemData);// 0x220e078ea041
	void ToggleDebugInfo();// 0x220d078ea041
	void ToggleDebugGASInfo();// 0x220c078ea041
	void TickShieldOperatorTimeline(float InDeltaTime);// 0x220b078ea041
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x220a078ea041
	void Suicide();// 0x2209078ea041
	void StopTreatmentProgressBar();// 0x2208078ea041
	void StopTreatment();// 0x2207078ea041
	void StopShieldRechargeProgressBar();// 0x2206078ea041
	void StopShieldRechargeProgress();// 0x2205078ea041
	void StopRescueProgressBar(const int TextID);// 0x2204078ea041
	void StopRepairWeakPointProgressBar();// 0x2203078ea041
	void StopClimbSound();// 0x2202078ea041
	void StatisticElectricShopOnActivated(out const Vector InLocation);// 0x2201078ea041
	void StartTreatmentProgressBar(const float Duration);// 0x2200078ea041
	void StartTreatment();// 0x21ff078ea041
	void StartShieldRechargeProgressBar(const float InRechargeDuration, int InContributorCharacterId);// 0x21fe078ea041
	void StartShieldRechargeProgress();// 0x21fd078ea041
	void StartRescueProgressBar(const float Duration, const float RemainingTime, const int TextID, const bool bShowBtn, bool bIsUAV);// 0x21fc078ea041
	void StartRepairWeakPointProgressBar(const float Duration);// 0x21fb078ea041
	void SpecAnimInstStopMontage(enum SpecAnimType, AnimMontage* AnimMontage);// 0x21fa078ea041
	float SpecAnimInstPlayMontage(enum SpecAnimType, AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x21f9078ea041
	AnimMontage* SpecAnimInstGetCurrentMontage(enum SpecAnimType);// 0x21f8078ea041
	void SpawnDeathBoxActor(SolarPlayerState* InKillerPS);// 0x21f7078ea041
	void SolarLaunchCharacter(out const Vector LaunchVelocity, bool bXYOverride, bool bZOverride, Actor* JumpPad);// 0x21f6078ea041
	void ShowShieldUIFX(const int ShiledID);// 0x21f5078ea041
	void ShowShieldUI(const bool IsShow);// 0x21f4078ea041
	void ShowRevivePickupEffect();// 0x21f3078ea041
	void ShowReviveClearEffect();// 0x21f2078ea041
	void ShowRescueInjector();// 0x21f1078ea041
	void ShowNoticeCantCharge();// 0x21f0078ea041
	bool ShouldForceOverrideDamageTaken(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser, out float OverrideDamageTaken);// 0x21ef078ea041
	void ShieldUpgradeToNextLevel();// 0x21ee078ea041
	void ShieldOperatorInterpFunc(float InValue);// 0x21ed078ea041
	void SetSpectateTargetCharacter(SolarCharacter* InSpectateTargetCharacter);// 0x21ec078ea041
	void SetSelfEnergyCostEnable(bool bEnable);// 0x21eb078ea041
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0x21ea078ea041
	void SetNewCharacterSkin(SkeletalMesh* NewMesh, MaterialInterface* NewMaterial, class Object NewAnimClass);// 0x21e9078ea041
	void SetMaxWalkSpeed(float NewWalkSpeed);// 0x21e8078ea041
	void SetInfiniteAmmoState(const bool Enable);// 0x21e7078ea041
	void SetCurrShieldValue(const float InValue, bool bFromDamage);// 0x21e6078ea041
	void SetCurrExtraEnergy(float Amount);// 0x21e5078ea041
	void SetBackpackConfig(const int InCharacterId);// 0x21e4078ea041
	void ServerUseItemRequest(int ItemID, int Num);// 0x21e3078ea041
	bool ServerUpgradeShield();// 0x21e2078ea041
	void ServerUpdateWallRunState(enum NewState);// 0x21e0078ea041
	void ServerUpdateWallRunAngle(byte ClientAngle);// 0x21df078ea041
	void ServerUpdateDuckRollingJumpPoseIndex(int Index);// 0x21de078ea041
	void ServerTryRechargeShield(const float InRecoverySpeed);// 0x21dd078ea041
	void ServerTriggerRoleAbilityAgain(byte RoleAbilityIndex);// 0x21dc078ea041
	void ServerTriggerRadarStation(SolarRadarStation* InRadarStation);// 0x21db078ea041
	void ServerSwitchVehicleSeat(float LocalTime, SolarVehiclePawn* InVehicle, int TargetSeatIndex, const Vector_NetQuantize VehicleLocation, const Vector_NetQuantizeNormal VehicleEuler);// 0x21da078ea041
	void ServerSwitchShield(const SolarItemData NewShieldData);// 0x21d9078ea041
	void ServerStatisticsRechargedTimes(const int RechargedTimes, const int BigRechargedTimes);// 0x21d8078ea041
	void ServerStatisticElectricShopOnActivated(const Vector InLocation);// 0x21d7078ea041
	void ServerStartRescue(SolarCharacter* TargetCharacter);// 0x21d6078ea041
	void ServerSetTreasureBoxState(SolarTreasureBoxActor* TreasureBox, const enum NewState, SolarCharacter* RequestCharacter);// 0x21d4078ea041
	void ServerSetJetPackModule(const int NewJetPackModuleID, const bool bForVertical);// 0x21d3078ea041
	void ServerSetInputVector(uint16 AxisX, uint16 AxisY);// 0x21d2078ea041
	void ServerSetIdleTurnType(byte TurnType);// 0x21d0078ea041
	void ServerSetEnergyState(enum State);// 0x21cf078ea041
	void ServerSetDebugCharacterGASValue(int Value);// 0x21ce078ea041
	void ServerSetCurChargingDeathBox(DeathTreasureBox* DeathBox);// 0x21cd078ea041
	void ServerSetChargingPile(const bool bEnter, SolarPile* InChargingPile);// 0x21cc078ea041
	void ServerSetCharacterOperation(enum InType, Object* Target);// 0x21cb078ea041
	void ServerSetCanBeDamaged(bool bInCanBeDamaged);// 0x21ca078ea041
	void ServerSendGameplayEvent(const GameplayTag EventTag, const GameplayEventData Payload);// 0x21c9078ea041
	void ServerSelectLevelSkill(int Level, int SelectedIndex);// 0x21c8078ea041
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x21c7078ea041
	void ServerRPCUpgradeShield();// 0x21c6078ea041
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x21c5078ea041
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x21c4078ea041
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x21c3078ea041
	void ServerRPCSetSelfEnergyCostEnable(bool bEnable);// 0x21c2078ea041
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x21c1078ea041
	void ServerRPCDisplayAllElectricShops();// 0x21c0078ea041
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x21bf078ea041
	void ServerRPCDiscardWeapon(const int InSlot);// 0x21be078ea041
	void ServerRPCDiscardItem(const int InItemID, const int InItemNum);// 0x21bd078ea041
	void ServerRequestStartResurrect(DeathTreasureBox* TargetDeathBox);// 0x21bc078ea041
	void ServerRequestCancelResurrect();// 0x21bb078ea041
	void ServerPostAutoFireStatusChanged(bool bInOn);// 0x21ba078ea041
	void ServerPlayTreatmentCancelSound();// 0x21b9078ea041
	void ServerPickUpWeapon(Actor* Actor, bool bIsAutoPickup, const int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x21b8078ea041
	void ServerPickUpTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x21b7078ea041
	void ServerPickUpItem(SolarItemActor* ItemActor, bool bIsAutoPickup, int TargetIndex, Vector ClientCharPos, Vector ClientItemPos);// 0x21b6078ea041
	void ServerOpenAirDropTreasureBox(AirDropTreasureBox* InAirDropTreasureBox);// 0x21b5078ea041
	void ServerOnDestructActor(SolarDestructibleActor* DestructibleActor, SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x21b4078ea041
	void ServerMoveNoBaseEx(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode, uint32 ClientCustomMoveData);// 0x21b3078ea041
	void ServerMoveDualNoBaseEx(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode, uint32 ClientCustomMoveData);// 0x21b2078ea041
	void ServerKillMe(enum DamageType);// 0x21b1078ea041
	void ServerInitSheildComp(const int InShiledID);// 0x21b0078ea041
	void ServerHideShieldOperator();// 0x21af078ea041
	void ServerGMVehicleSubHealth(int SubHealth);// 0x21ae078ea041
	void ServerGetOnVehicle(float LocalTime, SolarVehiclePawn* InVehicle, int SeatIndex);// 0x21ad078ea041
	void ServerGetOffVehicleEjectedByDefaultParams(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection);// 0x21ac078ea041
	void ServerGetOffVehicleEjected(bool bNeedNotify, const Vector_NetQuantizeNormal EjectDirection, const VehicleEjectParams Params);// 0x21aa078ea041
	void ServerGetOffVehicle(bool bNeedNotify);// 0x21a9078ea041
	void ServerEnableServerGASDebugByDisplayDebug(bool bEnabled);// 0x21a8078ea041
	void ServerDetectBlock();// 0x21a7078ea041
	void ServerConsumeExtraEnergy(const float InAmount, const enum InUsage);// 0x21a6078ea041
	void ServerConsumeEnergy(const float InAmount, const enum InUsage);// 0x21a5078ea041
	void ServerClearJetModule();// 0x21a4078ea041
	void ServerClearEnergyState(enum State);// 0x21a3078ea041
	void ServerChangeRechargeState(const bool bRecharge, const bool bUseBigRecharger);// 0x21a2078ea041
	void ServerCancelVehicleAbility(byte AbilityIndex);// 0x21a1078ea041
	void ServerCancelVault(float InAnimPosition, Vector InLandLocation);// 0x21a0078ea041
	void ServerCancelRescue();// 0x219f078ea041
	void ServerCancelOpenAirDropTreasureBox(AirDropTreasureBox* InAirDropTreasureBox);// 0x219e078ea041
	void ServerCancelMeleeWarp();// 0x219d078ea041
	void ServerBackpackGM(const enum InGmType, const int InItemID, const int InItemNum, const int InSlot);// 0x219c078ea041
	void ServerAskForActiveAbilityInfosToRestoreOnReconnected();// 0x219b078ea041
	void ServerApplyVehicleAbility(byte AbilityIndex);// 0x219a078ea041
	void ServerAddVehicleTime(float InAddTime);// 0x2199078ea041
	void RoleAbilityForbiddenAbilityTagCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x2198078ea041
	void RoleAbilityEndedCallBack(GameplayAbility* InAbility);// 0x2197078ea041
	void RoleAbilityCoolDownTagCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x2196078ea041
	void RoleAbilityCoolDownResetCallback(const GameplayTag Tag, int NewCount, byte AbilityIndex);// 0x2195078ea041
	void RoleAbilityCommittedCallBack(GameplayAbility* InAbility);// 0x2194078ea041
	void RoleAbilityActiveCallBack(GameplayAbility* InAbility);// 0x2193078ea041
	void ReturnMostValuableItemIDServer(const byte TeammatePosInTeam, const int64 ItemThisID);// 0x2192078ea041
	void ResponseChosenMark();// 0x2191078ea041
	void RequestUseBackpackItemServer(const int InItemID, const int InItemNum);// 0x2190078ea041
	void RequestToStopVehicleRepairing();// 0x218f078ea041
	void RequestToStartVehicleRepairing(SolarVehiclePawn* InVehicle);// 0x218e078ea041
	void RequestSingleCruise(out const SingleCruiseBaseParam StartParam);// 0x218c078ea041
	void RequestPlayShieldSound(out ShieldSoundData ShieldSound, bool bIsOnly1P);// 0x2189078ea041
	void RequestDisplayAllElectricShops();// 0x2188078ea041
	void RequestCancelRescue();// 0x2187078ea041
	void RemoveWorldMarkByRep(out WorldMarkData WorldMarkData);// 0x2186078ea041
	void RemoveTreasureBoxOperator();// 0x2185078ea041
	void RemoveTempComponent(PrimitiveComponent* TargetComp);// 0x2184078ea041
	void RemoveTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag);// 0x2183078ea041
	void RemoveShieldUpgradeOperator();// 0x2182078ea041
	void RemoveShieldRepairEffectItem();// 0x2181078ea041
	void RemoveShieldOperator();// 0x2180078ea041
	void RefreshWeaponDataMapAndArray();// 0x217f078ea041
	void RefreshTypeItemMapAndArray();// 0x217e078ea041
	void RefreshTeammateHUDUI(SolarPlayerState* SelfData);// 0x217d078ea041
	void RefreshRenderConsoleVarForSkydive();// 0x217c078ea041
	void RefreshMaxPileMapAndArray();// 0x217b078ea041
	void RefreshIdItemMapAndArray();// 0x217a078ea041
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x2179078ea041
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0x2178078ea041
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x2177078ea041
	void ReceivedOnShieldIdChanged(int LastShieldId);// 0x2176078ea041
	void ReceiveAfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x2175078ea041
	void QuitVehicleWholeShield();// 0x2174078ea041
	void QuitVehicleStealth();// 0x2173078ea041
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x2172078ea041
	void PostNotEnoughEnergyNotice();// 0x2171078ea041
	void PlaySquatSound();// 0x2170078ea041
	void PlaySpeedUpEffect(bool bIsUp);// 0x216f078ea041
	void PlayShieldSoundByType(enum ShieldSoundType);// 0x216d078ea041
	void PlayParachuteStartSound();// 0x216c078ea041
	void PlayMontageOnOrnament(GameplayTag OrnamentTag, AnimMontage* MontageToPlay);// 0x216b078ea041
	void PlayerStateReplicatedForHUD();// 0x216a078ea041
	void OnVaultInput();// 0x2169078ea041
	void OnUsingSkillStatusChanged(const GameplayTag Tag, int NewCount);// 0x2168078ea041
	void OnUpdateShieldId();// 0x2167078ea041
	void OnUAVSpawnRelatedTagChange(const GameplayTag Tag, int NewCount);// 0x2166078ea041
	void OnTreatmentStop__DelegateSignature(bool bWasCancelled);// 0x2165078ea041
	void OnTeamIDChange();// 0x2164078ea041
	void OnTakeDamage__DelegateSignature(const SolarCharacter* Character, const SolarCharacter* DamageInstigatorCharacter, out const SolarPointDamageEvent DamageEvent, float HPDamage);// 0x2163078ea041
	void OnStartResurrectProgress(const int InTextId, const float InDuration, const float InRemaining, const bool bShowCancel);// 0x2162078ea041
	void OnStartRemindTeammateRescue();// 0x2161078ea041
	void OnSpawnExpItem();// 0x2160078ea041
	void OnSkydiveTraced__DelegateSignature(out const HitResult HitResult);// 0x215f078ea041
	void OnSkydiveStageChanged(enum LastStage, enum CurrentStage);// 0x215e078ea041
	void OnShowShieldHUD__DelegateSignature(bool bIsShowShieldHUD);// 0x215d078ea041
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x215c078ea041
	void OnShieldValueLowDelegate__DelegateSignature(bool bIsShieldValueLow);// 0x215b078ea041
	void OnShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, const enum ShieldRechargeState, bool bFixPreAdd);// 0x215a078ea041
	void OnShieldRechargeStart();// 0x2159078ea041
	void OnShieldRechargeProgressBarComplete();// 0x2158078ea041
	void OnShieldRechargeProgressBarCancel();// 0x2157078ea041
	void OnShieldRechargeEnd();// 0x2156078ea041
	void OnShieldIDChangedDelegate__DelegateSignature(bool bShiledAvailable, float CurValue, float MaxValue, int QualityColor, bool bIsAdvancedShield);// 0x2155078ea041
	void OnSheildUpFXDelegate__DelegateSignature();// 0x2154078ea041
	void OnSheildRechargeDelegate__DelegateSignature();// 0x2153078ea041
	void OnSheildBreakDelegate__DelegateSignature();// 0x2152078ea041
	void OnSeverRemindTeammateRescueNotify(int RemindRescueSoundID);// 0x2151078ea041
	void OnRoleGameplayEffectRemoved(out const ActiveGameplayEffect ActiveGameplayEffect);// 0x2150078ea041
	void OnRoleGameplayEffectApplied(AbilitySystemComponent* ASC, out const GameplayEffectSpec InGameplayEffectSpec, ActiveGameplayEffectHandle InGameplayEffectHandle);// 0x214f078ea041
	void OnReplayCameraModeChanged(enum OldMode, enum CurMode);// 0x214e078ea041
	void OnRepItemWeaponParts();// 0x214d078ea041
	void OnRepIgnoreScopeSlots();// 0x214c078ea041
	void OnRep_WeaponSystemVehicle();// 0x214b078ea041
	void OnRep_WeaponSystemComponentChanged();// 0x214a078ea041
	void OnRep_WeaponDataMap();// 0x2149078ea041
	void OnRep_VJetPackModuleID();// 0x2148078ea041
	void OnRep_TypeKeyItemArrayChange();// 0x2147078ea041
	void OnRep_TreatmentState(enum LastState);// 0x2145078ea041
	void OnRep_TreatmentCount(int LastCount);// 0x2144078ea041
	void OnRep_SkillAnimDistanceBlendRatio();// 0x2143078ea041
	void OnRep_SingleCruiseState(enum LastSingleCruiseState);// 0x2141078ea041
	void OnRep_SettingEnergyCostChanged();// 0x2140078ea041
	void OnRep_RoleAbilityStartCDServerTime();// 0x213f078ea041
	void OnRep_RoleAbilitySpecHandles();// 0x213e078ea041
	void OnRep_ReviveItemCleared();// 0x213d078ea041
	void OnRep_RescueState();// 0x213c078ea041
	void OnRep_RescuedStartTime(float LastRescuedStartTime);// 0x213b078ea041
	void OnRep_PendingRegeneration();// 0x213a078ea041
	void OnRep_OutVehicleShotState();// 0x2139078ea041
	void OnRep_OrnamentMontageInfo(OrnamentMontageInfo LastInfo);// 0x2137078ea041
	void OnRep_MaxPileArrayChange();// 0x2136078ea041
	void OnRep_MaxExtraEnergyChanged();// 0x2135078ea041
	void OnRep_JetPropellingInfo();// 0x2134078ea041
	void OnRep_IsDeathVerge();// 0x2133078ea041
	void OnRep_IdKeyItemArrayChange();// 0x2132078ea041
	void OnRep_HJetPackModuleID();// 0x2131078ea041
	void OnRep_HitSoundData(out const HitSoundReplicationData LastData);// 0x212c078ea041
	void OnRep_ForceParachuteCountDown();// 0x212b078ea041
	void OnRep_ExtraEnergyModuleIDChanged();// 0x212a078ea041
	void OnRep_EnergyStateChanged();// 0x2129078ea041
	void OnRep_EnableCruising();// 0x2128078ea041
	void OnRep_DuckRollingJumpPoseIndex();// 0x2127078ea041
	void OnRep_DiedTime();// 0x2126078ea041
	void OnRep_CurUniqueShieldId();// 0x2125078ea041
	void OnRep_CurrShieldValue(float PreviousValue);// 0x2124078ea041
	void OnRep_CurrShieldState(enum LastState);// 0x2122078ea041
	void OnRep_CurrShieldId(int InLastShieldId);// 0x2121078ea041
	void OnRep_CurrentSkydiveStage(enum LastStage);// 0x2120078ea041
	void OnRep_CurrentSkillAnimType();// 0x211f078ea041
	void OnRep_CurrentEnergyChanged(float LastEnergyValue);// 0x211e078ea041
	void OnRep_CurChargingDeathBoxChanged(DeathTreasureBox* PreBox);// 0x211d078ea041
	void OnRep_CruiseState();// 0x211c078ea041
	void OnRep_CharacterIsInRoom();// 0x211b078ea041
	void OnRep_CharacterCapsuleSizeOverride();// 0x211a078ea041
	void OnRep_CapsuleID();// 0x2119078ea041
	void OnRep_CanSkilledJump();// 0x2118078ea041
	void OnRep_BGMInBattle();// 0x2117078ea041
	void OnRep_BackpackPropellingMode();// 0x2116078ea041
	void OnRep_AssignedSkinID(int OldSkinID);// 0x2115078ea041
	void OnRep_AssignedCharacterID();// 0x2114078ea041
	void OnRep_ActiveInfiniteAmmo();// 0x2113078ea041
	void OnRep_ActiveEMP();// 0x2112078ea041
	void OnPlayingScrubCharactersCreated();// 0x2111078ea041
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x2110078ea041
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x210f078ea041
	void OnPlayerDataRepAsPlayer(byte TeamID);// 0x210e078ea041
	void OnPlayerBackpackEnergyUpdate();// 0x210d078ea041
	void OnPickupSettingChanged();// 0x210c078ea041
	void OnOwnTeammateHUDCreated(SolarPlayerState* SelfData);// 0x210b078ea041
	void OnOutVehicleStateChanged();// 0x210a078ea041
	void OnMultiRemindTeammateRescueNotify();// 0x2109078ea041
	void OnMaxEnergyUpdateEvent__DelegateSignature(float InMaxValue);// 0x2108078ea041
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* LocalPlayerSpectateInfo);// 0x2107078ea041
	void OnLocalPlayerSpectateMeStatusChanged__DelegateSignature(SolarCharacter* Character, bool bIsSpectating);// 0x2106078ea041
	void OnLevelSequence_PlayAirborneJumpSound();// 0x2105078ea041
	void OnJogSetClient__DelegateSignature(bool bSet);// 0x2104078ea041
	void OnJetFlyStart__DelegateSignature(out const enum Type);// 0x2102078ea041
	void OnHUDTeamPosSet__DelegateSignature(byte PosInTeam);// 0x2101078ea041
	void OnHUDRescueBtnActivitySet__DelegateSignature(bool bIsActive);// 0x2100078ea041
	void OnHUDNickNameSet__DelegateSignature(FString NickName);// 0x20ff078ea041
	void OnHUDDistanceSet__DelegateSignature(float Distance);// 0x20fe078ea041
	void OnHUDDistanceDisplaySet__DelegateSignature(bool bShown);// 0x20fd078ea041
	void OnHealthUpdated__DelegateSignature(const SolarCharacter* Character);// 0x20fc078ea041
	bool OnExitOpenTreasureBox();// 0x20fb078ea041
	bool OnEnterOpenTreasureBox();// 0x20fa078ea041
	void OnEnterCombat(enum battleType);// 0x20f8078ea041
	void OnEnergyStateUpdateEvent__DelegateSignature(byte InEnergyState);// 0x20f7078ea041
	void OnDrivingStateChanged(SolarVehiclePawn* SolarVehicle, enum NewDriveState, enum OldDriveState, int NewSeatIndex, int OldSeatIndex);// 0x20f6078ea041
	void OnDetectRadarStation(bool bEnter, SolarRadarStation* InRadarStation);// 0x20f5078ea041
	void OnDetectElectricShop(bool bEnter, SolarElectricShop* InElectricShop);// 0x20f4078ea041
	void OnCurShieldValueChangedDelegate__DelegateSignature(enum WidgetState, float InCurValue, float InChangeValue, FString InSolarPlayerID);// 0x20f2078ea041
	void OnCurEnergyUpdateEvent__DelegateSignature(float InCurValue, float InChangeValue);// 0x20f1078ea041
	void OnConsumableNumChangedEvent__DelegateSignature();// 0x20f0078ea041
	void OnClientMovementComponentEnabled();// 0x20ef078ea041
	void OnChargeInfoUpdateEvent__DelegateSignature(SolarCharacter* OwnerCharacter, const float ChargeFrequency, const float ChargeQuantity);// 0x20ee078ea041
	void OnCharacterSpawnDeathBox(const bool bCheat, SolarPlayerState* InKiller);// 0x20ed078ea041
	void OnCharacterSkinReset__DelegateSignature();// 0x20ec078ea041
	void OnCharacterInhibitBattlePromptTagChanged(const GameplayTag Tag, int NewCount);// 0x20eb078ea041
	void OnCharacterDeathEnd();// 0x20ea078ea041
	void OnCharacterDaraSet__DelegateSignature(int DataID);// 0x20e9078ea041
	void OnCancelResurrectProgress(const int InTextId);// 0x20e8078ea041
	void OnBatteryIdUpdateEvent__DelegateSignature(int InBatteryId);// 0x20e7078ea041
	void OnBackpackWeaponPartUpdateEvent__DelegateSignature();// 0x20e6078ea041
	void OnBackpackItemUpdateEvent__DelegateSignature();// 0x20e5078ea041
	void OnBackpackEquipUpdateEvent__DelegateSignature();// 0x20e4078ea041
	void OnBackpackEnergyUpdateEvent__DelegateSignature();// 0x20e3078ea041
	void OnApplyDyingDamage(float DeltaTime);// 0x20e2078ea041
	void NotifyLeaveSafeArea();// 0x20e1078ea041
	void NotifyEnterSafeArea();// 0x20e0078ea041
	void NetTriggerRadarStation();// 0x20df078ea041
	bool NetGetOnVehicle(SolarVehiclePawn* InVehicle, int SeatIndex);// 0x20de078ea041
	bool NetGetOffVehicle(bool bShouldEject, bool bNeedNotify);// 0x20dd078ea041
	void MultiSetGetOffVehicleLocationAndRotation(const Vector DropLocation, float TeleportRotYaw);// 0x20dc078ea041
	void MultiResetCharacter(const Vector Location, const Rotator Rotation, bool bClearWeapons);// 0x20db078ea041
	void MultiOnRebirth();// 0x20da078ea041
	void MulticastPlayDuckRollingHitCharacterEffect(SolarCharacter* TargetCharacter, const Vector HitLocation, bool bNoDamage);// 0x20d9078ea041
	void MulticastAddHitTrace(const HitTraceInfo[] Infos);// 0x20d6078ea041
	void MarkWorldByRep(out WorldMarkData NewWorldMarkData);// 0x20d5078ea041
	void MarkWarningOnWorld();// 0x20d4078ea041
	void MarkQuickChatOnWorld(int QuickChatID);// 0x20d3078ea041
	void MarkPointOnWorld();// 0x20d2078ea041
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x20d1078ea041
	void KillMe();// 0x20d0078ea041
	void K2_TryRemoveBillboardIcon(GameplayTag IconTag);// 0x20cf078ea041
	void K2_SetCanShowBattlePrompt(bool NewValue);// 0x20ce078ea041
	void K2_RemoveGameplayTag(GameplayTag Tag, bool bReplicated);// 0x20cd078ea041
	void K2_PlaySoundGroup(FName SoundGroupName, SoundGroupPlayContextByCharacter Context);// 0x20ca078ea041
	bool K2_IsSwimming();// 0x20c9078ea041
	bool K2_IsInAir();// 0x20c8078ea041
	bool K2_HasMatchingGameplayTag(GameplayTag Tag);// 0x20c7078ea041
	WidgetComponent* K2_GetTeamHUDComp();// 0x20c6078ea041
	HUD* K2_GetControlledHUD();// 0x20c5078ea041
	void K2_AddGameplayTag(GameplayTag Tag, bool bReplicated);// 0x20c4078ea041
	void K2_AddBillboardIcon(GameplayTag IconTag);// 0x20c3078ea041
	bool IsWeaponsAvailable();// 0x20c2078ea041
	bool IsWeaponCauseTeamDamage();// 0x20c1078ea041
	bool IsViewportFocused();// 0x20c0078ea041
	bool IsVerticalJetFlying();// 0x20bf078ea041
	bool IsVehicleFire();// 0x20be078ea041
	bool IsTeammateWithLocalOrSpecTargetPlayer(bool bIncludingSelf);// 0x20bd078ea041
	bool IsTeammateWith(const SolarCharacter* Other);// 0x20bc078ea041
	bool IsTeamHUDValid();// 0x20bb078ea041
	bool IsSprinting();// 0x20ba078ea041
	bool IsSpectatingOtherPlayer();// 0x20b9078ea041
	bool IsSkyCharging();// 0x20b8078ea041
	bool IsShieldValueLow();// 0x20b7078ea041
	bool IsShieldMaxLevel();// 0x20b6078ea041
	bool IsShieldFullyCharged();// 0x20b5078ea041
	bool IsScopeWantedByWeapon(int Slot, enum ScopeType);// 0x20b4078ea041
	bool IsScopeOpening();// 0x20b3078ea041
	bool IsRescuing();// 0x20b2078ea041
	bool IsReplayPlaying();// 0x20b1078ea041
	bool IsReloading();// 0x20b0078ea041
	bool IsRechargerEnough();// 0x20af078ea041
	bool IsPlayerLocallyControlledOrSpectated();// 0x20ae078ea041
	bool IsPileCharging();// 0x20ad078ea041
	bool IsOwnerOffline();// 0x20ac078ea041
	bool IsOpeningTreasureBox();// 0x20ab078ea041
	bool IsNoCharging();// 0x20aa078ea041
	bool IsMovingOnGround(enum VelocityStatus);// 0x20a8078ea041
	bool IsMeleeAttacking();// 0x20a7078ea041
	bool IsMaxLevelInGame();// 0x20a6078ea041
	bool IsLocalPlayerSpectateAsThirdPerson();// 0x20a5078ea041
	bool IsLaunching();// 0x20a4078ea041
	bool IsJumping();// 0x20a3078ea041
	bool IsJetFlying();// 0x20a2078ea041
	bool IsInZoneInvisibility();// 0x20a1078ea041
	bool IsInVehicle();// 0x20a0078ea041
	bool IsInSkywardDive();// 0x209f078ea041
	bool IsInsideVehicle();// 0x209e078ea041
	bool IsInShoulderOrScopeView();// 0x209d078ea041
	bool IsInScopeView();// 0x209c078ea041
	bool IsInRescueState();// 0x209b078ea041
	bool IsInMassInvisibilityPrepare();// 0x209a078ea041
	bool IsInMassInvisibility();// 0x2099078ea041
	bool IsInInvisibleStatus();// 0x2098078ea041
	bool IsInDeathVerge();// 0x2097078ea041
	bool IsHumanCharacter();// 0x2096078ea041
	bool IsHorizontalJetFlying();// 0x2095078ea041
	bool IsHoldingWeapon();// 0x2094078ea041
	bool IsFullHealth();// 0x2093078ea041
	bool IsFullBodyMeleeAttacking();// 0x2092078ea041
	bool IsFiring();// 0x2091078ea041
	bool IsExistWeaponSeatedVehicleSeat();// 0x2090078ea041
	bool IsEnergyCostAndChargeDisabled();// 0x208f078ea041
	bool IsE2M();// 0x208e078ea041
	bool IsDying();// 0x208d078ea041
	bool IsDoingAnyAttack();// 0x208c078ea041
	bool IsCruising();// 0x208b078ea041
	bool IsClimbing(bool bIncludeWallRun);// 0x208a078ea041
	bool IsCharacterDebugBlockDetectionEnabled();// 0x2089078ea041
	bool IsCanShowTeammateHUD();// 0x2088078ea041
	bool IsBoxCharging();// 0x2087078ea041
	bool IsBolting();// 0x2086078ea041
	bool IsBigRechargerEnough();// 0x2085078ea041
	bool IsBeingSpectated();// 0x2084078ea041
	bool IsBeingRescue();// 0x2083078ea041
	bool IsAllyWithPlayerState(const SolarPlayerState* Other);// 0x2082078ea041
	bool IsAllyWithLocalPlayer();// 0x2081078ea041
	bool IsAllyWithLocalOrSpecTargetPlayer(bool bIncludingSelf);// 0x2080078ea041
	bool IsAllyWith(const SolarCharacter* Other);// 0x207f078ea041
	bool IsAllEnergyFull();// 0x207e078ea041
	bool IsAiming();// 0x207d078ea041
	bool IsAbleToContinueRecharge();// 0x207c078ea041
	void InputRoleAbilityTacticalReleased();// 0x207b078ea041
	void InputRoleAbilityTacticalPressed();// 0x207a078ea041
	void InputRoleAbilitySuperReleased();// 0x2079078ea041
	void InputRoleAbilitySuperPressed();// 0x2078078ea041
	void InputCancelRoleAbility();// 0x2077078ea041
	void InitShieldUpgradeMatMaxPile();// 0x2076078ea041
	void InitShieldPropertyByConfig();// 0x2075078ea041
	void InitShieldOperatorTimeline();// 0x2074078ea041
	void InitializeCharacterData(const int InCharacterId, const int InSkinID);// 0x2073078ea041
	void InitGameStatisticEquipment();// 0x2072078ea041
	void InitCharacterDefaultShield(out const SolarItemData InShiledID);// 0x2071078ea041
	void IncreaseRechargedTimes();// 0x2070078ea041
	void HideShieldUpgradeOperator();// 0x206f078ea041
	void HideShieldRepairEffectItem();// 0x206e078ea041
	void HideShieldOperator();// 0x206d078ea041
	void HideRescueInjector();// 0x206c078ea041
	bool HasBlockBetweenUs(const Actor* A, const Actor* B, const bool bIsVehicle, const bool bShowLog);// 0x206b078ea041
	bool HasAnyShieldEquiped();// 0x206a078ea041
	bool HasAnyRecharger();// 0x2069078ea041
	bool HandleDying(byte ChangeType, Controller* InstigatorController);// 0x2068078ea041
	<enum,int> GetWeaponPartsMap();// 0x2066078ea041
	int[] GetWeaponPartsArray();// 0x2065078ea041
	bool GetWeaponItemDataBySlot(const int InSlot, out SolarItemData ItemData);// 0x2064078ea041
	<int,SolarItemData> GetWeaponDataMap();// 0x2063078ea041
	int GetVerticalJetFlyTotalTimes();// 0x2062078ea041
	int GetVerticalJetFlyRestTimes();// 0x2061078ea041
	void GetVerticalJetFlyCharging(out float OutValue, out float OutPercent);// 0x2060078ea041
	void GetVerticalJetFlyCD(out float OutValue, out float OutPercent);// 0x205f078ea041
	SolarVehicleWeapon* GetVehicleWeapon();// 0x205e078ea041
	byte GetVehicleAbilityCounter();// 0x205d078ea041
	<enum,SolarItemData> GetTypeKeyItemMap();// 0x205c078ea041
	float GetTreatmentRemaining();// 0x205b078ea041
	float GetTreatmentDuration();// 0x205a078ea041
	void GetTeamHUDTranslucentData(out float CheckDistance, out float TranslucentValue);// 0x2059078ea041
	UserWidget* GetTeamHUD();// 0x2058078ea041
	byte GetSteppedSurfaceType();// 0x2056078ea041
	SolarSpectateInfo* GetSpectateInfo();// 0x2055078ea041
	AnimInstance* GetSpecAnimInstance(enum SpecAnimType);// 0x2053078ea041
	SolarReplayPlayerController* GetSolarReplayPlayerController();// 0x2052078ea041
	SolarPlayerState* GetSolarPlayerStateFromSameTeam();// 0x2051078ea041
	SolarPlayerState* GetSolarPlayerStateFromSameAlly();// 0x2050078ea041
	SolarPlayerState* GetSolarPlayerState();// 0x204f078ea041
	FString GetSolarPlayerID();// 0x204e078ea041
	SolarPlayerController* GetSolarPlayerController(bool bSkipPossessCheck);// 0x204d078ea041
	SolarCharacterMovementComponent* GetSolarCharacterMovementComponent();// 0x204c078ea041
	SolarBotAIController* GetSolarAIController();// 0x204b078ea041
	SolarAbilitySystemComponent* GetSolarAbilitySystemComponentSimple();// 0x204a078ea041
	Vector GetSocketLocationAtPrimaryMesh(out const FName InSocketName);// 0x2049078ea041
	float GetSkydiveLandingHeight();// 0x2048078ea041
	CharacterSkinConfig* GetSkinConfig(const int InSkinID);// 0x2047078ea041
	int GetShieldWorthByID(const int InShieldID);// 0x2046078ea041
	int GetShieldUpgradeNeedMatNum();// 0x2045078ea041
	int GetShieldUpgradeMatNum();// 0x2044078ea041
	int GetShieldUpgradeMatMaxPile();// 0x2043078ea041
	float GetShieldRecoveryAmount();// 0x2042078ea041
	float GetShieldRechargeRemainningTime();// 0x2041078ea041
	float GetShieldRechargeDuration();// 0x2040078ea041
	int GetShieldMaxLevel();// 0x203f078ea041
	SolarCharacterMovementComponent* GetSafeSolarCharacterMovement();// 0x203e078ea041
	enum GetRoleAbilityState(byte RoleAbilityIndex);// 0x203c078ea041
	SolarUAVRescue* GetRescuingUAV();// 0x203b078ea041
	SolarCharacter* GetRescuingCharacter();// 0x203a078ea041
	float GetRescueTime();// 0x2039078ea041
	float GetRecoveryDuartionModify();// 0x2038078ea041
	float GetRecoveryAmountModify();// 0x2037078ea041
	SolarUAVRescue* GetPermanentRescueUAV();// 0x2036078ea041
	Rotator GetNormalizeCameraRotation();// 0x2035078ea041
	bool GetNewItemData(int InItemID, int InItemNum, out SolarItemData OutItemData);// 0x2034078ea041
	byte GetMyTeamID();// 0x2033078ea041
	float GetMaxShieldValue();// 0x2032078ea041
	float GetMaxExtraEnergy();// 0x2031078ea041
	float GetMaxEnergy();// 0x2030078ea041
	SolarPlayerState* GetLastDownBy();// 0x202f078ea041
	int GetJetPackModuleLevel(const bool bVertical);// 0x202e078ea041
	int GetItemNumById(const int InItemID);// 0x202d078ea041
	int GetItemMaxPile(int InItemID);// 0x202c078ea041
	bool GetItemDataByType(const enum ItemType, out SolarItemData ItemData);// 0x202b078ea041
	bool GetItemDataById(const int InItemID, out SolarItemData ItemData);// 0x202a078ea041
	bool GetIsActiveEMP();// 0x2029078ea041
	Vector GetInputVector();// 0x2028078ea041
	<int,SolarItemData> GetIdKeyItemMap();// 0x2027078ea041
	int GetHorizontalJetFlyTotalTimes();// 0x2026078ea041
	int GetHorizontalJetFlyRestTimes();// 0x2025078ea041
	void GetHorizontalJetFlyCharging(out float OutValue, out float OutPercent);// 0x2024078ea041
	void GetHorizontalJetFlyCD(out float OutValue, out float OutPercent);// 0x2023078ea041
	int GetGenericSkillLevel();// 0x2022078ea041
	SolarCharacter* GetFirstPlayerControllerCharacter(World* World);// 0x2021078ea041
	float GetFactorialAttributeModifies(int AttributeID);// 0x2020078ea041
	int GetExtraEnergyModuleID();// 0x201f078ea041
	float GetEnergyConsumptionModify();// 0x201e078ea041
	enum GetDriveState();// 0x201c078ea041
	Actor* GetDamagerCauserActor();// 0x201b078ea041
	float GetCurrShieldValue();// 0x201a078ea041
	int GetCurrShieldID();// 0x2019078ea041
	float GetCurrExtraEnergy();// 0x2018078ea041
	SolarPlayerWeapon* GetCurrentWeapon();// 0x2017078ea041
	enum GetCurrentWalkMode();// 0x2016078ea041
	float GetCurrentVehicleAbilityCooldownRemaining(byte AbilityIndex);// 0x2015078ea041
	float GetCurrentVehicleAbilityCooldownDuration(byte AbilityIndex);// 0x2014078ea041
	int GetCurrentShieldLevel();// 0x2013078ea041
	enum GetCurrentCustomJumpType();// 0x2011078ea041
	float GetCurrEnergy();// 0x2010078ea041
	float GetCumulativeAttributeModifies(int AttributeID);// 0x200f078ea041
	PlayerController* GetControllingOrReplayController();// 0x200e078ea041
	StaticMesh* GetClipMeshOfHoldingWeapon();// 0x200d078ea041
	int GetClassTypeSkillLevel();// 0x200c078ea041
	void GetChargingStateForUI(out bool IsSky, out bool IsPile, out bool IsBox, out bool IsE2M);// 0x200b078ea041
	Rotator GetCharacterLookAt();// 0x200a078ea041
	int GetCharacterCameraConfigFOVSection();// 0x2009078ea041
	float GetCharacterCameraConfigFOV();// 0x2008078ea041
	SolarCharacterCameraComponent* GetCharacterCamera();// 0x2007078ea041
	bool GetCanShowBattlePrompt();// 0x2006078ea041
	Rotator GetCameraRotation();// 0x2005078ea041
	Vector GetCameraLocation();// 0x2004078ea041
	void GetAllSkydiveLandingEffects(out ParticleSystemComponent*[] OutEffects);// 0x2003078ea041
	void GetAllSkydiveFlyingEffects(out ParticleSystemComponent*[] OutEffects);// 0x2002078ea041
	void GatheringDeathBoxItem(const bool bCheat, SolarPlayerState* InKiller);// 0x2001078ea041
	void GameStatisticsWeaponHit(SolarCharacterBase* DamageCauserCharacter, out const SolarPointDamageEvent DamageInfo, const float ActualDamage);// 0x2000078ea041
	void GameStatisticsVehicleLanded(out const HitResult Hit);// 0x1fff078ea041
	void GameStatisticsVehicleInAir();// 0x1ffe078ea041
	void GameStatisticsVehicleHit(Actor* DamageCauser, float HitDamage);// 0x1ffd078ea041
	void GameStatisticsItemChange(const int ItemID, const enum PickType, const int OldNum, const int NewNum, const int TriggerType);// 0x1ffb078ea041
	void GameStatisticsGodWeapon();// 0x1ffa078ea041
	void GameStatisticsGetOnVehicleReason(int Type, FString Type_Parameter);// 0x1ff9078ea041
	void GameStatisticsGetOffVehicleReason(const SolarWeapon* CurrentWeapon, FString Param);// 0x1ff8078ea041
	void GameStatisticsEquipment();// 0x1ff7078ea041
	void GameStatisticsElectricShopActivated(out const Vector InLocation);// 0x1ff6078ea041
	void GameStatisticsDamageReason(out const SolarPointDamageEvent InDamageEvent, const float ActualDamage);// 0x1ff5078ea041
	void GameStatisticsCharacterSkill(bool bIsSuperSkill);// 0x1ff4078ea041
	void GameStatisticsBackpackFly(out const BackpackStatisticsInfo InBackpackStatisticsInfo);// 0x1ff2078ea041
	void ForceBreakSprintState();// 0x1ff1078ea041
	void FindMostValuableItemClient(const SolarItemData[] ItemData, const byte FromWhichTeammate);// 0x1ff0078ea041
	void ExitDyingMovement();// 0x1fef078ea041
	void ExitDeathVerge(bool bClientSimulation);// 0x1fee078ea041
	void ExecuteGM(FString GMType, FString Param1, FString Param2);// 0x1fed078ea041
	void EnterVehicleWholeShield(MaterialInterface* ShieldMaterialSource);// 0x1fec078ea041
	void EnterVehicleStealth();// 0x1feb078ea041
	void EnterDyingMovement();// 0x1fea078ea041
	void EnterDeathVerge(bool bClientSimulation);// 0x1fe9078ea041
	void EnableCharacterDebugInfo_BlockDetection(bool bEnabled);// 0x1fe8078ea041
	void DoReceivingPoisonDamage();// 0x1fe7078ea041
	void DoOperation(enum OperationType, Object* Target);// 0x1fe5078ea041
	void DisCardShield();// 0x1fe4078ea041
	void CreateTreasureBoxOperator();// 0x1fe3078ea041
	void CreateShieldUpgradeOperator();// 0x1fe2078ea041
	void CreateShieldRepairEffectItem();// 0x1fe1078ea041
	void CreateShieldOperator();// 0x1fe0078ea041
	WidgetComponent* CreateOwnTeammateHUDInternal(SolarPlayerState* SelfData);// 0x1fdf078ea041
	WidgetComponent* CreateOwnTeammateHUD();// 0x1fde078ea041
	void CompleteRescuingImmediate();// 0x1fdd078ea041
	void ClientUpdateTracking(int Mode, int Index, const Vector Location);// 0x1fdc078ea041
	void ClientSuperRadarOnceScanned(int ScannedNum);// 0x1fdb078ea041
	void ClientStartRecharge(const float InCurrentValue, const float InRecoveryDuration, const float InRecoveryAmount, const enum ShieldRechargeType, const int InShieldContributorCharacterId, bool bFixPreAdd);// 0x1fd9078ea041
	void ClientSetServerBlockDetectionResult(FString Info);// 0x1fd8078ea041
	void ClientRPCDisplayAllElectricShops(const Vector[] AllPositions);// 0x1fd7078ea041
	void ClientRestoreActiveAbilitiesOnReconnected(const RestoreAbilityInfo[] SpecHandles);// 0x1fd5078ea041
	void ClientRefreshAllShieldShops();// 0x1fd4078ea041
	void ClientReceiveVehicleWeaponMessageArray(const PlayerWeaponMsg[] InPlayerWeaponMessageArray);// 0x1fd3078ea041
	void ClientReceiveVehicleWeaponMessage(const PlayerWeaponMsg InPlayerWeaponMessage);// 0x1fd2078ea041
	void ClientReceiveScanResult(const ScannedInfo_NetQuantize[] ScannedDatas, const float SpanTimer);// 0x1fd0078ea041
	void ClientReceiveCharacterWeaponMessageArray(const PlayerWeaponMsg[] InPlayerWeaponMessageArray);// 0x1fcf078ea041
	void ClientReceiveCharacterWeaponMessage(const PlayerWeaponMsg InPlayerWeaponMessage);// 0x1fcc078ea041
	void ClientRadarOnceScanned(int ScannedNum);// 0x1fcb078ea041
	void ClientPlaySoundGroup(const FName SoundGroupName);// 0x1fca078ea041
	void ClientPlayHitEffect(const HitResult InHitResult, enum InHitType, const Vector InRelativeHitLocation, SolarCharacter* InCauserOwner, SolarWeapon* InCauser, int InWeaponID, int InWeaponSkinID);// 0x1fc9078ea041
	void ClientPlayDeathShow(enum InHitType, SolarCharacter* InInstigator, Actor* InCauser, int InWeaponID, int InWeaponSkinID, bool bInVictoryDeath);// 0x1fc7078ea041
	void ClientOpenAirdropResponse(const bool bIsOpening);// 0x1fc6078ea041
	void ClientOnTriggerCharacterDown();// 0x1fc5078ea041
	void ClientOnShieldUpgrade(int CurrentShieldLevel);// 0x1fc4078ea041
	void ClientOnShieldReduceEffect(bool bBroken);// 0x1fc3078ea041
	void ClientOnReconnecting(const ReconnectionParams Params);// 0x1fc1078ea041
	void ClientOnContinuousTreatmentStarted();// 0x1fc0078ea041
	void ClientNotifyMarkedBySuperRadar(float InRadarLifeTime, const GameplayTag InTag);// 0x1fbf078ea041
	void ClientNotifyMarkedByOnceScan(float InRadarLifeTime, const GameplayTag InTag);// 0x1fbe078ea041
	void ClientNotifyGameProgressCondition(out const GameplayTag InProgressTag);// 0x1fbd078ea041
	void ClientNotifyCharacterExposed(float InRadarLifeTime, const GameplayTag InTag);// 0x1fbc078ea041
	void ClientNoticePickup(const int ItemID, const int ItemQuality);// 0x1fbb078ea041
	void ClientLeaveFromSkywardDiveLauncher(SkywardDiveLauncher* InLauncher);// 0x1fba078ea041
	void ClientKilledCharacter();// 0x1fb9078ea041
	void ClientHideShieldOperator();// 0x1fb8078ea041
	void ClientEnterAndRefreshSkywardDiveLauncher(SkywardDiveLauncher* InLauncher, bool bInHasAvailableDevice);// 0x1fb7078ea041
	void ClientCreateTreatEffect();// 0x1fb6078ea041
	void ClientCompleteRecharge(const float InCurrentValue, const float InChangeValue);// 0x1fb5078ea041
	void ClientCancelRecharge(const bool BreakAnimOnly, const float InCurrentValue, const float InChangeValue, const float MaxShieldVal, const enum CancelReason);// 0x1fb3078ea041
	void ClientBroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, byte RoleAbilityIndex);// 0x1fb2078ea041
	void ClientAckValidShieldUpgradeInteract(SolarShieldUpgradeItemShop* InShop, enum AckReason);// 0x1fb0078ea041
	void ClearGameStatisticEquipment();// 0x1faf078ea041
	void ClearDeathBoxData();// 0x1fae078ea041
	float CheckSelfAltitudeInstantlyByTrace(out HitResult HitGeography, bool bCheckEveryFrame, float traceDistOverride, bool bSimpleCheck);// 0x1fad078ea041
	void ChangeSeatByIndex(int TargetSeatIndex);// 0x1fac078ea041
	void ChangeSeatByDefault();// 0x1fab078ea041
	void CGM_SpawnDeathBox();// 0x1faa078ea041
	void CGM_EnterDeath();// 0x1fa9078ea041
	bool CanStickOutOfVehicle(bool bIgnoreSelfWeaponCheck);// 0x1fa8078ea041
	bool CanRebirth();// 0x1fa7078ea041
	bool CanOperateBackpack();// 0x1fa6078ea041
	bool CanMarkPointOnWorld();// 0x1fa5078ea041
	void CancelVehicleAbility();// 0x1fa4078ea041
	void CancelTreatment();// 0x1fa3078ea041
	void CalculateBubbleKillNum(out SolarCharacter*[] InstigatorCharacters, Actor* AttackWeapon);// 0x1fa2078ea041
	void BroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, byte RoleAbilityIndex);// 0x1fa1078ea041
	void BreakRechargeShield();// 0x1fa0078ea041
	void BindUpdateHUDToOnHealthUpdateDelegateProc(const SolarCharacter* Character);// 0x1f9f078ea041
	void BindLocalPlayerSpectateDelegates(SolarSpectateInfo* LocalSpecInfo);// 0x1f9e078ea041
	void BindActorToSelfTeam(Actor* Actor);// 0x1f9d078ea041
	void BeginplayPending__DelegateSignature();// 0x1f9c078ea041
	void BeginPlayBlueprint();// 0x1f9b078ea041
	void AutoMarkItemForTeammateClient(const int64 ItemThisID);// 0x1f9a078ea041
	void ApplyVehicleAbility(byte AbilityIndex);// 0x1f99078ea041
	void AfterTakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1f98078ea041
	void AfterDealDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x1f90078ea041
	void AddTrackingTarget(SolarCharacterBase* Tracked);// 0x1f8f078ea041
	void AddTempAttributeModifies(int AttributeID, bool bCumulOrFact, FName Tag, float Value);// 0x1f8e078ea041
	void AddDebugString(FString DebugString);// 0x1f8d078ea041
	void AddCurrExtraEnergyValue(float DeltaEnergy);// 0x1f8c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterBase.Character.Pawn.Actor.Object
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x4f8, Size: 0x4]
	SolarAbilityComponent* SolarAbilityComponent;//[Offset: 0x500, Size: 0x8]
	InWaterActorInfo InWaterActorInfo;//[Offset: 0x508, Size: 0x8]
	SolarCharacterBase* InstigatorCharacter;//[Offset: 0x510, Size: 0x8]
	ParticleSystem* DeathEffectSoft;//[Offset: 0x518, Size: 0x28]
	float VehicleCollisionProtectionTimeOnJumpingOff;//[Offset: 0x574, Size: 0x4]
	float PushYScale;//[Offset: 0x578, Size: 0x4]
	float PushXScaleOnSwimming;//[Offset: 0x57c, Size: 0x4]
	float PushYScaleOnSwimming;//[Offset: 0x580, Size: 0x4]
	float PushZScaleOnSwimming;//[Offset: 0x584, Size: 0x4]
	SolarAbilitySystemComponent* SolarAbilitySystemComponent;//[Offset: 0x588, Size: 0x8]
	bool bHoldSignificanceWhenDyingForAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0x5b8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x5c0, Size: 0x8]
	CharacterSoundConfig* CharacterSoundConfig;//[Offset: 0x5c8, Size: 0x8]
	void SetAttributeWithGAS(const GameplayAttribute InAttribute, byte ModifyType, float InValue);// 0x1f8a078ea041
	void ResetAudioComponentTransform();// 0x1f89078ea041
	void PostAkEventByName(FString EventName1, FString EventName2);// 0x1f88078ea041
	void OnRep_InWaterActorInfo(out const InWaterActorInfo OldInfo);// 0x1f86078ea041
	bool K2_IsInWater();// 0x1f85078ea041
	bool K2_IsAlive();// 0x1f84078ea041
	bool IsPlayerLocallyControlled();// 0x1f83078ea041
	bool IsInWater();// 0x1f82078ea041
	bool IsInSight(out const Vector InTargetPos, const float InMaxAngle, const bool bHorizontalOnly);// 0x1f81078ea041
	bool IsInRoom();// 0x1f80078ea041
	bool IsBlocked(const Actor* InOtherActor);// 0x1f7f078ea041
	bool InSameTeamWithFirstPlayerController();// 0x1f7e078ea041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x1f7d078ea041
	FString GetSoundEventString(enum SoundOpt);// 0x1f7b078ea041
	SolarAkGameObject* GetSolarAkGameObject();// 0x1f7a078ea041
	SolarAbilitySystemComponent* GetSafeASC();// 0x1f79078ea041
	float GetMaxHealth();// 0x1f78078ea041
	float GetLockHealth();// 0x1f77078ea041
	float GetCurrentHealth();// 0x1f76078ea041
	enum GetCharacterType();// 0x1f74078ea041
	Vector GetCharacterLocation(bool bMiddle);// 0x1f73078ea041
	Vector GetCharacterDirection();// 0x1f72078ea041
	SolarBackpackComponent* GetBackpack();// 0x1f71078ea041
	void ClientOnPushedByVehicle();// 0x1f70078ea041
	bool CheckOpenParticleOptimization(int Bias);// 0x1f6f078ea041
	void ChangeCurrentHealthWithGAS(byte ModifyType, float InValue);// 0x1f6e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAttribute
	FString AttributeName;//[Offset: 0x0, Size: 0x10]
	FieldPathProperty Attribute;//[Size: 0x20]
	Struct* AttributeOwner;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InWaterActorInfo
	bool bIsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float WaterLineHeight;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpawnedActorHandle
	uint32 Handle;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReconnectionParams
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbilityComponent.ActorComponent.Object
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectMap;//[Offset: 0xb8, Size: 0x50]
	<class SolarAbilityEffect,SolarAbilityEffect*> AppliedEffectsThisTick;//[Offset: 0x108, Size: 0x50]
	ReplicateEffectData[] ReplicateEffectDatas;//[Offset: 0x158, Size: 0x10]
	bool CharacterWeaponDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	bool CharacterMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	float MoveSpeedCoeffient;//[Offset: 0x174, Size: 0x4]
	MaterialInterface* OriginalMaterial;//[Offset: 0x178, Size: 0x8]
	float ShieldRechargeCostCoefficient;//[Offset: 0x180, Size: 0x4]
	void OnRep_SpeedCoeffient();// 0x4d69078ea041
	void OnRep_ReplicateEffectData();// 0x4d68078ea041
	int GetCharacterLevel();// 0x4d67078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbilityEffect.Object
	SoftObjectPath EffectIconPath;//[Offset: 0x28, Size: 0x18]
	SolarAttributeModifier[] AttributeModifiers;//[Offset: 0x40, Size: 0x10]
	bool bAllowMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	SolarCharacterBase* AbilityEffectAffectingCharacter;//[Offset: 0x110, Size: 0x8]
	SolarAbilityComponent* AbilityEffectAffectingAbilityComponent;//[Offset: 0x118, Size: 0x8]
	SolarAbility* AffectingAbility;//[Offset: 0x120, Size: 0x8]
	FString ExtraInfo;//[Offset: 0x128, Size: 0x10]
	<FString,float> AttributeParamMap;//[Offset: 0x138, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeModifier
	byte SolarAttributeType;//[Offset: 0x0, Size: 0x1]
	enum AttributeDurationType;//[Offset: 0x1, Size: 0x1]
	enum AttributeDurationSourceType;//[Offset: 0x2, Size: 0x1]
	float AttributeModifyDuration;//[Offset: 0x4, Size: 0x4]
	FString AttributeModifyDurationSourceKey;//[Offset: 0x8, Size: 0x10]
	float AttributeModifyMinDistance;//[Offset: 0x18, Size: 0x4]
	float AttributeModifyMaxDistance;//[Offset: 0x1c, Size: 0x4]
	CurveFloat* AttributeDistanceScaleCurve;//[Offset: 0x20, Size: 0x8]
	bool AttributeUseTargetValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float AttributeTargetValue;//[Offset: 0x2c, Size: 0x4]
	enum AttributeChangeValueSourceType;//[Offset: 0x30, Size: 0x1]
	float AttributeChangeValue;//[Offset: 0x34, Size: 0x4]
	float AttributeChangeValueForVehicle;//[Offset: 0x38, Size: 0x4]
	FString AttributeChangeValueSourceKey;//[Offset: 0x40, Size: 0x10]
	bool AttributeChangeValueIsMultiplier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	enum AttributeChangeSpeedSourceType;//[Offset: 0x58, Size: 0x1]
	FString AttributeChangeSpeedSourceKey;//[Offset: 0x60, Size: 0x10]
	float AttributeChangeSpeed;//[Offset: 0x70, Size: 0x4]
	bool AttributeApplyChargingScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	int[] AttributeExtraIntParam;//[Offset: 0x78, Size: 0x10]
	float[] AttributeExtraFloatParam;//[Offset: 0x88, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbility.Actor.Object
	class SolarAbility* MyAbilityClass;//[Offset: 0x228, Size: 0x8]
	class SolarAbilityEffect[] AbilityEffectClasses;//[Offset: 0x230, Size: 0x10]
	SolarCharacter* AbilitySourceCharacter;//[Offset: 0x240, Size: 0x8]
	Transform SpawnTransform;//[Offset: 0x250, Size: 0x30]
	bool InstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool DoNotAutoApply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	bool ApplyToSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 0x1]
	bool RadialAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 0x1]
	float RadialAbilityRadius;//[Offset: 0x284, Size: 0x4]
	bool bRadialIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bRadialIgnoreVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	bool CheckSourceToTargetCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 0x1]
	bool EnableAbilityDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 0x1]
	bool bActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	FString ExtraInfo;//[Offset: 0x290, Size: 0x10]
	Actor* InitiatorActor;//[Offset: 0x2a0, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x2a8, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x2b0, Size: 0x8]
	<FString,float> EffectParams;//[Offset: 0x2b8, Size: 0x50]
	void WeaponApplyAbility(const Object* WorldContextObject, class SolarAbility SolarAbilityClass, Actor* SourceActor, Actor* TargetActor, out const Vector HitLocation, out const FName HitBoneName, float Scale, out const Rotator ProjRotator, FString InExtarInfo, PrimitiveComponent* HitComponent);// 0x4d66078ea041
	void StopSound();// 0x4d65078ea041
	void StaticRemoveSolarAbilityFrom(class SolarAbility AbilityClass, Actor* AffectingActor);// 0x4d64078ea041
	void StaticApplySolarAbilityToWithHitResult(class SolarAbility AbilityClass, Actor* AffectingActor, out const HitResult HitResult, const float Scale, FString InExtarInfo, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation);// 0x4d63078ea041
	void StaticApplySolarAbilityTo(class SolarAbility AbilityClass, Actor* AffectingActor, Actor* SourceAcotr, Actor* Initiator, bool ValidSourceLocation, out const Vector SourceLocation, out const Vector HitLocation, out const FName HitBoneName, float Scale, FString InExtraInfo, PrimitiveComponent* HitComponent);// 0x4d62078ea041
	void ServerSetActivated();// 0x4d61078ea041
	void RestoreSound();// 0x4d60078ea041
	void RemoveSolarAbilityFrom(Actor* ApplyToActor);// 0x4d5f078ea041
	void PlaySound();// 0x4d5e078ea041
	void PauseSound();// 0x4d5d078ea041
	bool IsLocalControl();// 0x4d5c078ea041
	bool InSameTeam();// 0x4d5b078ea041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4d5a078ea041
	bool CheckActor(Actor* SourceActor, Actor* TargetActor);// 0x4d59078ea041
	void ApplySolarAbilityTo(Actor* ApplyToActor, Actor* SourceActor);// 0x4d58078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 0x1]
	byte OcclusionCollisionChannel;//[Offset: 0x338, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 0x1]
	float OuterRadius;//[Offset: 0x33c, Size: 0x4]
	float InnerRadius;//[Offset: 0x340, Size: 0x4]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x348, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x350, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x360, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x364, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x368, Size: 0x4]
	float roomReverbAuxBusGain;//[Offset: 0x36c, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x370, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x374, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x378, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37c, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37c, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x37c, Size: 0x1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x37c, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x380, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x384, Size: 0x4]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	bool bIsInDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	bool AutoUpdatePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f9, Size: 0x1]
	bool EnableOccObsRTPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fa, Size: 0x1]
	bool AutoPostEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fb, Size: 0x1]
	float DistanceToListener;//[Offset: 0x4fc, Size: 0x4]
	bool IsListeningToSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x4095078ea041
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x4094078ea041
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0x4093078ea041
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x4092078ea041
	void SetOutputBusVolume(float BusVolume);// 0x4091078ea041
	void SetListeners(out const AkComponent*[] Listeners);// 0x4090078ea041
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);// 0x408f078ea041
	void SetEarlyReflectionsVolume(float SendVolume);// 0x408e078ea041
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0x408d078ea041
	void SetAttenuationScalingFactor(float Value);// 0x408c078ea041
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0x408b078ea041
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x408a078ea041
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x4089078ea041
	int PostAkEventByName(FString in_EventName);// 0x4088078ea041
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x4087078ea041
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x4086078ea041
	AkRoomComponent* GetCurrentRoom();// 0x4085078ea041
	float GetAttenuationRadius();// 0x4084078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x318, Size: 0x8]
	FString EventName;//[Offset: 0x320, Size: 0x10]
	void Stop();// 0x4083078ea041
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0x4082078ea041
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0x4081078ea041
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0x4080078ea041
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0x407f078ea041
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0x407e078ea041
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0x407d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x50, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 0x4]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	<AkAudioEvent*> LinkedAkEvents;//[Offset: 0xa0, Size: 0x50]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xf0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAssetData.Object
	uint32 CachedHash;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x50, Size: 0x50]
	AkAudioBank* RequiredBank;//[Offset: 0xa0, Size: 0x8]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb0, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0xb8, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	float MinimumDuration;//[Offset: 0xc0, Size: 0x4]
	float MaximumDuration;//[Offset: 0xc4, Size: 0x4]
	float GetMinimumDuration();// 0x407c078ea041
	float GetMaximumDuration();// 0x407b078ea041
	float GetMaxAttenuationRadius();// 0x407a078ea041
	bool GetIsInfinite();// 0x4079078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkRtpc.AkAudioType.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkSwitchValue.AkGroupValue.AkAudioType.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkGroupValue.AkAudioType.Object
	AkMediaAsset*[] MediaDependencies;//[Offset: 0x40, Size: 0x10]
	uint32 GroupShortID;//[Offset: 0x50, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 0x4]
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	Object*[] UserData;//[Offset: 0x30, Size: 0x10]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkTrigger.AkAudioType.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 0x10]
	enum CodecID;//[Offset: 0x10, Size: 0x1]
	FString Filename;//[Offset: 0x18, Size: 0x10]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 0x8]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkExternalMediaAsset.AkMediaAsset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkRoomComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x332, Size: 0x1]
	bool bDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x333, Size: 0x1]
	float Priority;//[Offset: 0x334, Size: 0x4]
	float WallOcclusion;//[Offset: 0x338, Size: 0x4]
	float AuxSendLevel;//[Offset: 0x33c, Size: 0x4]
	bool AutoPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	AkAcousticTextureSetComponent* GeometryComponent;//[Offset: 0x350, Size: 0x8]
	PrimitiveComponent* GetPrimitiveParent();// 0x411b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkAcousticTextureSetComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAkGameObject.Object
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	void Wakeup();// 0x4e5d078ea041
	void UnloadBank(FString InBankName);// 0x4e5c078ea041
	void UnLoadAllBanks();// 0x4e5b078ea041
	void Suspend(bool in_bRenderAnyway);// 0x4e5a078ea041
	int StopSoundByEvent(FString in_EventName);// 0x4e59078ea041
	int StaticStopSoundByEvent(FString in_EventName);// 0x4e58078ea041
	void StaticSetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x4e57078ea041
	int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString in_EventName, LatentActionInfo LatentInfo);// 0x4e56078ea041
	int StaticPostAkEventByName(FString in_EventName);// 0x4e55078ea041
	int StaticPlaySoundByEvent(FString in_EventName);// 0x4e54078ea041
	int StaticPlaySoundAtLocationByName(FString AkName, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x4e53078ea041
	int StaticPlaySoundAtLocation(AkAudioEvent* AkEvent, Vector Location, Rotator Orientation, Object* WorldContextObject);// 0x4e52078ea041
	int StaticComponentPostAkEventByName(AkComponent* AkComponent, FString in_EventName);// 0x4e51078ea041
	void SolarLoadAllBanks();// 0x4e50078ea041
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x4e4f078ea041
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs, float UpdateThreshold);// 0x4e4e078ea041
	void SetMasterRTPCValue(float Value, int InterpolationTimeMs);// 0x4e4d078ea041
	void SetMasterRTPCMute(bool Mute);// 0x4e4c078ea041
	void SetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs, float UpdateThreshold);// 0x4e4b078ea041
	void ReceiveTick(float DeltaTime);// 0x4e4a078ea041
	void ReceiveEndPlay(const byte EndPlayReason);// 0x4e49078ea041
	void ReceiveBeginPlay();// 0x4e48078ea041
	int PostAkEventByNameAndWaitForEnd(FString in_EventName, LatentActionInfo LatentInfo);// 0x4e47078ea041
	int PostAkEventByName(FString InEventName1, FString InEventName2);// 0x4e46078ea041
	int PlaySoundByEvent(FString in_EventName);// 0x4e45078ea041
	void LoadBank(FString InBankName);// 0x4e44078ea041
	void LoadAllBanks();// 0x4e43078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicateEffectData
	SoftObjectPath IconPath;//[Offset: 0x0, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	SolarGameplayAbilitySet* DefaultAbilitySet;//[Offset: 0x1300, Size: 0x8]
	SkeletalMeshComponent* OptionMeshForRepMontage;//[Offset: 0x13b8, Size: 0x8]
	bool bPendingMontageRepForMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c0, Size: 0x1]
	GameplayAbilityLocalAnimMontageForMesh[] LocalAnimMontageInfoForMeshes;//[Offset: 0x13c8, Size: 0x10]
	GameplayAbilityRepAnimMontageForMesh[] RepAnimMontageInfoForMeshes;//[Offset: 0x13d8, Size: 0x10]
	GameplayAbilitySpecHandle UpgradeAbilityLevelBySpec(GameplayAbilitySpecHandle AbilitySpecHandle, bool bForNextActivate, int LevelUp);// 0x4d88078ea041
	void UpgradeAbilityLevelByClass(const class GameplayAbility AbilityClass, bool bForNextActivate, int LevelUp);// 0x4d87078ea041
	void UpgradeAbilityLevel(GameplayTagContainer AbilityTags, bool bForNextActivate, int LevelUp);// 0x4d86078ea041
	void ServerCurrentMontageSetPlayRateForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float InPlayRate);// 0x4d85078ea041
	void ServerCurrentMontageSetNextSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x4d84078ea041
	void ServerCurrentMontageJumpToSectionNameForMesh(SkeletalMeshComponent* InMesh, AnimMontage* ClientAnimMontage, FName SectionName);// 0x4d83078ea041
	void PostDefaultAbilitiesGranted();// 0x4d82078ea041
	void OnSharedCueInstigatorEndPlay(Actor* Actor, byte EndPlayReason);// 0x4d81078ea041
	void OnRep_ReplicatedAnimMontageForMesh();// 0x4d80078ea041
	void OnNotifiedTagChanged(out const GameplayTag Tag, bool bAdded);// 0x4d7f078ea041
	void OnInternalMetaAttributeUpdate(SolarMetaAttributeSet* MetaAttributeSet, out GameplayModifierEvaluatedData EvaluatedData, out const GameplayEffectSpec EffectSpec, out MetaAttributeUpdateEvent UpdateEvent);// 0x4d7e078ea041
	void NotifySourceMetaAttributeExecution(out const MetaAttributeUpdateEvent UpdateEvent);// 0x4d7d078ea041
	void K2_RemoveGameplayCueLocalShared(Actor* Instigator, const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x4d7c078ea041
	void K2_RemoveGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x4d7b078ea041
	int K2_RemoveActiveEffectsWithTag(GameplayTag GameplayTag);// 0x4d7a078ea041
	void K2_RefreshAbilityActorInfo();// 0x4d79078ea041
	GameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(const class GameplayAbility AbilityClass, int Level);// 0x4d78078ea041
	GameplayAbilitySpecHandle K2_GiveAbility(const class GameplayAbility AbilityClass, int Level);// 0x4d77078ea041
	void K2_GetEffectMaxTimeRemainingAndDuration(GameplayTag EffectTag, out float TimeRemaining, out float Duration);// 0x4d76078ea041
	ActiveGameplayEffectHandle K2_GetActiveGameplayEffectHandle(GameplayTag EffectAssetTag);// 0x4d75078ea041
	GameplayEffectContextHandle K2_GetActiveGameplayEffectContext(GameplayTag EffectAssetTag);// 0x4d74078ea041
	AttributeSet* K2_FindOwnedAttributeSetByClass(class AttributeSet Class);// 0x4d73078ea041
	void K2_ExecuteGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x4d72078ea041
	void K2_ClearAbility(out const GameplayAbilitySpecHandle Handle);// 0x4d71078ea041
	void K2_CancelAbilityByTag(GameplayTag AbilityTag);// 0x4d70078ea041
	void K2_AddGameplayCueLocalShared(Actor* Instigator, const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x4d6f078ea041
	void K2_AddGameplayCueLocal(const GameplayTag GameplayCueTag, GameplayCueParameters GameplayCueParameters);// 0x4d6e078ea041
	bool IsNotifiedTagAvailable(out const GameplayTag Tag);// 0x4d6d078ea041
	GameplayAbilitySpecHandle GiveDefaultAbility(const class GameplayAbility AbilityClass);// 0x4d6c078ea041
	ActiveGameplayEffectHandle ChangeActiveEffectRemainTime(ActiveGameplayEffectHandle InEffect, float InValue, byte InOption);// 0x4d6b078ea041
	ActiveGameplayEffectHandle ChangeActiveEffectDuration(ActiveGameplayEffectHandle InEffect, float InDuration, enum InChangeProxy);// 0x4d6a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	AttributeDefaults[] DefaultStartingData;//[Offset: 0x130, Size: 0x10]
	AttributeSet*[] SpawnedAttributes;//[Offset: 0x140, Size: 0x10]
	FName AffectedAnimInstanceTag;//[Offset: 0x150, Size: 0x8]
	float OutgoingDuration;//[Offset: 0x2f8, Size: 0x4]
	float IncomingDuration;//[Offset: 0x2fc, Size: 0x4]
	FString[] ClientDebugStrings;//[Offset: 0x320, Size: 0x10]
	FString[] ServerDebugStrings;//[Offset: 0x330, Size: 0x10]
	bool UserAbilityActivationInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 0x1]
	bool ReplicationProxyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 0x1]
	bool bSuppressGrantAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 0x1]
	bool bSuppressGameplayCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 0x1]
	GameplayAbilityTargetActor*[] SpawnedTargetActors;//[Offset: 0x3a8, Size: 0x10]
	Actor* OwnerActor;//[Offset: 0x3e0, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x3e8, Size: 0x8]
	GameplayAbilitySpecContainer ActivatableAbilities;//[Offset: 0x400, Size: 0x120]
	GameplayAbility*[] AllReplicatedInstancedAbilities;//[Offset: 0x550, Size: 0x10]
	GameplayAbilityRepAnimMontage RepAnimMontageInfo;//[Offset: 0x730, Size: 0x38]
	bool bCachedIsNetSimulated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]
	bool bPendingMontageRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 0x1]
	GameplayAbilityLocalAnimMontage LocalAnimMontageInfo;//[Offset: 0x770, Size: 0x30]
	ActiveGameplayEffectsContainer ActiveGameplayEffects;//[Offset: 0x840, Size: 0x480]
	ActiveGameplayCueContainer ActiveGameplayCues;//[Offset: 0xcc0, Size: 0x128]
	ActiveGameplayCueContainer MinimalReplicationGameplayCues;//[Offset: 0xde8, Size: 0x128]
	byte[] BlockedAbilityBindings;//[Offset: 0x1038, Size: 0x10]
	MinimalReplicationTagCountMap MinimalReplicationTags;//[Offset: 0x1170, Size: 0x60]
	ReplicatedPredictionKeyMap ReplicatedPredictionKeyMap;//[Offset: 0x11e0, Size: 0x118]
	bool TryActivateAbilityByClass(class GameplayAbility InAbilityToActivate, bool bAllowRemoteActivation);// 0x13c8078ea041
	bool TryActivateAbilitiesByTag(out const GameplayTagContainer GameplayTagContainer, bool bAllowRemoteActivation);// 0x13c7078ea041
	void TargetConfirm();// 0x13c6078ea041
	void TargetCancel();// 0x13c5078ea041
	void SetUserAbilityActivationInhibited(bool NewInhibit);// 0x13c4078ea041
	void SetActiveGameplayEffectLevelUsingQuery(GameplayEffectQuery Query, int NewLevel);// 0x13c3078ea041
	void SetActiveGameplayEffectLevel(ActiveGameplayEffectHandle ActiveHandle, int NewLevel);// 0x13c2078ea041
	void ServerTryActivateAbilityWithEventData(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x13c1078ea041
	void ServerTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate, bool InputPressed, PredictionKey PredictionKey);// 0x13c0078ea041
	void ServerSetReplicatedTargetDataCancelled(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x13bf078ea041
	void ServerSetReplicatedTargetData(GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, const GameplayAbilityTargetDataHandle ReplicatedTargetDataHandle, GameplayTag ApplicationTag, PredictionKey CurrentPredictionKey);// 0x13be078ea041
	void ServerSetReplicatedEventWithPayload(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey, Vector_NetQuantize100 VectorPayload);// 0x13bc078ea041
	void ServerSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey, PredictionKey CurrentPredictionKey);// 0x13bb078ea041
	void ServerSetInputReleased(GameplayAbilitySpecHandle AbilityHandle);// 0x13ba078ea041
	void ServerSetInputPressed(GameplayAbilitySpecHandle AbilityHandle);// 0x13b9078ea041
	void ServerPrintDebug_RequestWithStrings(const FString[] Strings);// 0x13b8078ea041
	void ServerPrintDebug_Request();// 0x13b7078ea041
	void ServerEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo, PredictionKey PredictionKey);// 0x13b6078ea041
	void ServerCurrentMontageSetPlayRate(AnimMontage* ClientAnimMontage, float InPlayRate);// 0x13b5078ea041
	void ServerCurrentMontageSetNextSectionName(AnimMontage* ClientAnimMontage, float ClientPosition, FName SectionName, FName NextSectionName);// 0x13b4078ea041
	void ServerCurrentMontageJumpToSectionName(AnimMontage* ClientAnimMontage, FName SectionName);// 0x13b3078ea041
	void ServerCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x13b2078ea041
	void ServerAbilityRPCBatch(ServerAbilityRPCBatch BatchInfo);// 0x13b0078ea041
	void RemoveActiveGameplayEffectBySourceEffect(class GameplayEffect GameplayEffect, AbilitySystemComponent* InstigatorAbilitySystemComponent, int StacksToRemove);// 0x13af078ea041
	bool RemoveActiveGameplayEffect(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x13ae078ea041
	int RemoveActiveEffectsWithTags(GameplayTagContainer Tags);// 0x13ad078ea041
	int RemoveActiveEffectsWithSourceTags(GameplayTagContainer Tags);// 0x13ac078ea041
	int RemoveActiveEffectsWithGrantedTags(GameplayTagContainer Tags);// 0x13ab078ea041
	int RemoveActiveEffectsWithAppliedTags(GameplayTagContainer Tags);// 0x13aa078ea041
	void OnRep_ServerDebugString();// 0x13a9078ea041
	void OnRep_ReplicatedAnimMontage();// 0x13a8078ea041
	void OnRep_OwningActor();// 0x13a7078ea041
	void OnRep_ClientDebugString();// 0x13a6078ea041
	void OnRep_ActivateAbilities();// 0x13a5078ea041
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x13a4078ea041
	void NetMulticast_InvokeGameplayCuesExecuted(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x13a3078ea041
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const GameplayTagContainer GameplayCueTags, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x13a2078ea041
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x13a1078ea041
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x13a0078ea041
	void NetMulticast_InvokeGameplayCueExecuted(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x139f078ea041
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters GameplayCueParameters);// 0x139e078ea041
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const GameplayEffectSpecForRPC Spec, PredictionKey PredictionKey);// 0x139c078ea041
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayCueParameters Parameters);// 0x1399078ea041
	void NetMulticast_InvokeGameplayCueAdded(const GameplayTag GameplayCueTag, PredictionKey PredictionKey, GameplayEffectContextHandle EffectContext);// 0x1398078ea041
	GameplayEffectSpecHandle MakeOutgoingSpec(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle Context);// 0x1397078ea041
	GameplayEffectContextHandle MakeEffectContext();// 0x1396078ea041
	void K2_InitStats(class AttributeSet Attributes, const DataTable* DataTable);// 0x1395078ea041
	bool IsGameplayCueActive(const GameplayTag GameplayCueTag);// 0x1394078ea041
	bool GetUserAbilityActivationInhibited();// 0x1393078ea041
	float GetGameplayEffectMagnitude(ActiveGameplayEffectHandle Handle, GameplayAttribute Attribute);// 0x1392078ea041
	int GetGameplayEffectCount(class GameplayEffect SourceGameplayEffect, AbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck);// 0x1391078ea041
	ActiveGameplayEffectHandle[] GetActiveEffectsWithAllTags(GameplayTagContainer Tags);// 0x1390078ea041
	ActiveGameplayEffectHandle[] GetActiveEffects(out const GameplayEffectQuery Query);// 0x138d078ea041
	void ClientTryActivateAbility(GameplayAbilitySpecHandle AbilityToActivate);// 0x138c078ea041
	void ClientSetReplicatedEvent(byte EventType, GameplayAbilitySpecHandle AbilityHandle, PredictionKey AbilityOriginalPredictionKey);// 0x138a078ea041
	void ClientPrintDebug_Response(const FString[] Strings, int GameFlags);// 0x1389078ea041
	void ClientEndAbility(GameplayAbilitySpecHandle AbilityToEnd, GameplayAbilityActivationInfo ActivationInfo);// 0x1388078ea041
	void ClientCancelAbility(GameplayAbilitySpecHandle AbilityToCancel, GameplayAbilityActivationInfo ActivationInfo);// 0x1385078ea041
	void ClientActivateAbilitySucceedWithEventData(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey, GameplayEventData TriggerEventData);// 0x1384078ea041
	void ClientActivateAbilitySucceed(GameplayAbilitySpecHandle AbilityToActivate, PredictionKey PredictionKey);// 0x1383078ea041
	void ClientActivateAbilityFailed(GameplayAbilitySpecHandle AbilityToActivate, int16 PredictionKey);// 0x1382078ea041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(class GameplayEffect GameplayEffectClass, AbilitySystemComponent* Target, float Level, GameplayEffectContextHandle Context);// 0x1381078ea041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(class GameplayEffect GameplayEffectClass, float Level, GameplayEffectContextHandle EffectContext);// 0x1380078ea041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(out const GameplayEffectSpecHandle SpecHandle, AbilitySystemComponent* Target);// 0x137f078ea041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(out const GameplayEffectSpecHandle SpecHandle);// 0x137e078ea041
	void AbilityConfirmOrCancel__DelegateSignature();// 0x137d078ea041
	void AbilityAbilityKey__DelegateSignature(int InputID);// 0x137c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x137b078ea041
	enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x1379078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AttributeDefaults
	class AttributeSet* Attributes;//[Offset: 0x0, Size: 0x8]
	DataTable* DefaultStartingTable;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AttributeSet.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScriptStruct.Struct.Field.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameplayAbilitySet.DataAsset.Object
	class GameplayAbility[] Abilities;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbility.Object
	GameplayTagContainer AbilityTags;//[Offset: 0xa8, Size: 0x20]
	bool bReplicateInputDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool RemoteInstanceEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	byte ReplicationPolicy;//[Offset: 0xce, Size: 0x1]
	byte InstancingPolicy;//[Offset: 0xcf, Size: 0x1]
	bool bServerRespectsRemoteAbilityCancellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bRetriggerInstancedAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	GameplayAbilityActivationInfo CurrentActivationInfo;//[Offset: 0xd8, Size: 0x20]
	GameplayEventData CurrentEventData;//[Offset: 0xf8, Size: 0xb0]
	byte NetExecutionPolicy;//[Offset: 0x1a8, Size: 0x1]
	byte NetSecurityPolicy;//[Offset: 0x1a9, Size: 0x1]
	class GameplayEffect* CostGameplayEffectClass;//[Offset: 0x1b0, Size: 0x8]
	AbilityTriggerData[] AbilityTriggers;//[Offset: 0x1b8, Size: 0x10]
	class GameplayEffect* CooldownGameplayEffectClass;//[Offset: 0x1c8, Size: 0x8]
	GameplayTagQuery CancelAbilitiesMatchingTagQuery;//[Offset: 0x1d0, Size: 0x48]
	GameplayTagContainer CancelAbilitiesWithTag;//[Offset: 0x218, Size: 0x20]
	GameplayTagContainer BlockAbilitiesWithTag;//[Offset: 0x238, Size: 0x20]
	GameplayTagContainer ActivationOwnedTags;//[Offset: 0x258, Size: 0x20]
	GameplayTagContainer ActivationRequiredTags;//[Offset: 0x278, Size: 0x20]
	GameplayTagContainer ActivationBlockedTags;//[Offset: 0x298, Size: 0x20]
	GameplayTagContainer SourceRequiredTags;//[Offset: 0x2b8, Size: 0x20]
	GameplayTagContainer SourceBlockedTags;//[Offset: 0x2d8, Size: 0x20]
	GameplayTagContainer TargetRequiredTags;//[Offset: 0x2f8, Size: 0x20]
	GameplayTagContainer TargetBlockedTags;//[Offset: 0x318, Size: 0x20]
	GameplayTask*[] ActiveTasks;//[Offset: 0x358, Size: 0x10]
	AnimMontage* CurrentMontage;//[Offset: 0x378, Size: 0x8]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 0x1]
	bool bIsBlockingOtherAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 0x1]
	bool bMarkPendingKillOnAbilityEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);// 0x3cd8078ea041
	void SetCanBeCanceled(bool bCanBeCanceled);// 0x3cd7078ea041
	void SendGameplayEvent(GameplayTag EventTag, GameplayEventData Payload);// 0x3cd6078ea041
	void RemoveGrantedByEffect();// 0x3cd5078ea041
	void MontageStop(float OverrideBlendOutTime);// 0x3cd4078ea041
	void MontageSetNextSectionName(FName FromSectionName, FName ToSectionName);// 0x3cd3078ea041
	void MontageJumpToSection(FName SectionName);// 0x3cd2078ea041
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);// 0x3cd1078ea041
	GameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();// 0x3cd0078ea041
	GameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(class GameplayEffect GameplayEffectClass, float Level);// 0x3ccf078ea041
	bool K2_ShouldAbilityRespondToEvent(GameplayAbilityActorInfo ActorInfo, GameplayEventData Payload);// 0x3cce078ea041
	void K2_RemoveGameplayCue(GameplayTag GameplayCueTag);// 0x3ccd078ea041
	void K2_OnEndAbility(bool bWasCancelled);// 0x3ccc078ea041
	void K2_ExecuteGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameters);// 0x3ccb078ea041
	void K2_ExecuteGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context);// 0x3cca078ea041
	void K2_EndAbility();// 0x3cc9078ea041
	void K2_CommitExecute();// 0x3cc8078ea041
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);// 0x3cc7078ea041
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);// 0x3cc6078ea041
	bool K2_CommitAbility();// 0x3cc5078ea041
	bool K2_CheckAbilityCost();// 0x3cc4078ea041
	bool K2_CheckAbilityCooldown();// 0x3cc3078ea041
	void K2_CancelAbility();// 0x3cc2078ea041
	bool K2_CanActivateAbility(GameplayAbilityActorInfo ActorInfo, out GameplayTagContainer RelevantTags);// 0x3cc1078ea041
	ActiveGameplayEffectHandle[] K2_ApplyGameplayEffectSpecToTarget(const GameplayEffectSpecHandle EffectSpecHandle, GameplayAbilityTargetDataHandle TargetData);// 0x3cc0078ea041
	ActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const GameplayEffectSpecHandle EffectSpecHandle);// 0x3cbf078ea041
	void K2_AddGameplayCueWithParams(GameplayTag GameplayCueTag, out const GameplayCueParameters GameplayCueParameter, bool bRemoveOnAbilityEnd);// 0x3cbe078ea041
	void K2_AddGameplayCue(GameplayTag GameplayCueTag, GameplayEffectContextHandle Context, bool bRemoveOnAbilityEnd);// 0x3cbd078ea041
	void K2_ActivateAbilityFromEvent(out const GameplayEventData EventData);// 0x3cbc078ea041
	void K2_ActivateAbility();// 0x3cbb078ea041
	void InvalidateClientPredictionKey();// 0x3cba078ea041
	SkeletalMeshComponent* GetOwningComponentFromActorInfo();// 0x3cb9078ea041
	Actor* GetOwningActorFromActorInfo();// 0x3cb8078ea041
	GameplayEffectContextHandle GetGrantedByEffectContext();// 0x3cb7078ea041
	Object* GetCurrentSourceObject();// 0x3cb6078ea041
	AnimMontage* GetCurrentMontage();// 0x3cb5078ea041
	float GetCooldownTimeRemaining();// 0x3cb4078ea041
	GameplayEffectContextHandle GetContextFromOwner(GameplayAbilityTargetDataHandle OptionalTargetData);// 0x3cb3078ea041
	Actor* GetAvatarActorFromActorInfo();// 0x3cb2078ea041
	GameplayAbilityActorInfo GetActorInfo();// 0x3cb1078ea041
	AbilitySystemComponent* GetAbilitySystemComponentFromActorInfo();// 0x3cb0078ea041
	int GetAbilityLevel();// 0x3caf078ea041
	void EndTaskByInstanceName(FName InstanceName);// 0x3cae078ea041
	void EndAbilityState(FName OptionalStateNameToEnd);// 0x3cad078ea041
	void ConfirmTaskByInstanceName(FName InstanceName, bool bEndTask);// 0x3cac078ea041
	void CancelTaskByInstanceName(FName InstanceName);// 0x3cab078ea041
	void BP_RemoveGameplayEffectFromOwnerWithHandle(ActiveGameplayEffectHandle Handle, int StacksToRemove);// 0x3caa078ea041
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(GameplayTagContainer WithGrantedTags, int StacksToRemove);// 0x3ca9078ea041
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(GameplayTagContainer WithAssetTags, int StacksToRemove);// 0x3ca8078ea041
	ActiveGameplayEffectHandle[] BP_ApplyGameplayEffectToTarget(GameplayAbilityTargetDataHandle TargetData, class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x3ca7078ea041
	ActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(class GameplayEffect GameplayEffectClass, int GameplayEffectLevel, int Stacks);// 0x3ca6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEventData
	GameplayTag EventTag;//[Offset: 0x0, Size: 0x8]
	Actor* Instigator;//[Offset: 0x8, Size: 0x8]
	Actor* Target;//[Offset: 0x10, Size: 0x8]
	Object* OptionalObject;//[Offset: 0x18, Size: 0x8]
	Object* OptionalObject2;//[Offset: 0x20, Size: 0x8]
	GameplayEffectContextHandle ContextHandle;//[Offset: 0x28, Size: 0x18]
	GameplayTagContainer InstigatorTags;//[Offset: 0x40, Size: 0x20]
	GameplayTagContainer TargetTags;//[Offset: 0x60, Size: 0x20]
	float EventMagnitude;//[Offset: 0x80, Size: 0x4]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x88, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectContextHandle
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityTargetDataHandle
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityActivationInfo
	byte ActivationMode;//[Offset: 0x0, Size: 0x1]
	bool bCanBeEndedByOtherInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	PredictionKey PredictionKeyWhenActivated;//[Offset: 0x8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PredictionKey
	int16 Current;//[Offset: 0x0, Size: 0x2]
	int16 Base;//[Offset: 0x2, Size: 0x2]
	PackageMap* PredictiveConnection;//[Offset: 0x8, Size: 0x8]
	bool bIsStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bIsServerInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityTargetingLocationInfo
	byte LocationType;//[Offset: 0x8, Size: 0x1]
	Transform LiteralTransform;//[Offset: 0x10, Size: 0x30]
	Actor* SourceActor;//[Offset: 0x40, Size: 0x8]
	MeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8]
	GameplayAbility* SourceAbility;//[Offset: 0x50, Size: 0x8]
	FName SourceSocketName;//[Offset: 0x58, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffect.Object
	enum DurationPolicy;//[Offset: 0x30, Size: 0x1]
	GameplayEffectModifierMagnitude DurationMagnitude;//[Offset: 0x38, Size: 0x1a8]
	ScalableFloat Period;//[Offset: 0x1e0, Size: 0x20]
	bool bExecutePeriodicEffectOnApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	enum PeriodicInhibitionPolicy;//[Offset: 0x201, Size: 0x1]
	GameplayModifierInfo[] Modifiers;//[Offset: 0x208, Size: 0x10]
	GameplayEffectExecutionDefinition[] Executions;//[Offset: 0x218, Size: 0x10]
	ScalableFloat ChanceToApplyToTarget;//[Offset: 0x228, Size: 0x20]
	class GameplayEffectCustomApplicationRequirement[] ApplicationRequirements;//[Offset: 0x248, Size: 0x10]
	class GameplayEffect[] TargetEffectClasses;//[Offset: 0x258, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x268, Size: 0x10]
	class GameplayEffect[] OverflowEffects;//[Offset: 0x278, Size: 0x10]
	bool bDenyOverflowApplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bClearStackOnOverflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	class GameplayEffect[] PrematureExpirationEffectClasses;//[Offset: 0x290, Size: 0x10]
	class GameplayEffect[] RoutineExpirationEffectClasses;//[Offset: 0x2a0, Size: 0x10]
	bool bRequireModifierSuccessToTriggerCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bSuppressStackingCues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	GameplayEffectCue[] GameplayCues;//[Offset: 0x2b8, Size: 0x10]
	GameplayEffectUIData* UIData;//[Offset: 0x2c8, Size: 0x8]
	InheritedTagContainer InheritableGameplayEffectTags;//[Offset: 0x2d0, Size: 0x60]
	InheritedTagContainer InheritableOwnedTagsContainer;//[Offset: 0x330, Size: 0x60]
	GameplayTagRequirements OngoingTagRequirements;//[Offset: 0x390, Size: 0x50]
	GameplayTagRequirements ApplicationTagRequirements;//[Offset: 0x3e0, Size: 0x50]
	GameplayTagRequirements RemovalTagRequirements;//[Offset: 0x430, Size: 0x50]
	GameplayTagRequirements RemovalSourceTagRequirements;//[Offset: 0x480, Size: 0x50]
	InheritedTagContainer RemoveGameplayEffectsWithTags;//[Offset: 0x4d0, Size: 0x60]
	GameplayTagRequirements GrantedApplicationImmunityTags;//[Offset: 0x530, Size: 0x50]
	GameplayEffectQuery GrantedApplicationImmunityQuery;//[Offset: 0x580, Size: 0x150]
	GameplayEffectQuery RemoveGameplayEffectQuery;//[Offset: 0x6d8, Size: 0x150]
	enum StackingType;//[Offset: 0x829, Size: 0x1]
	int StackLimitCount;//[Offset: 0x82c, Size: 0x4]
	enum StackDurationRefreshPolicy;//[Offset: 0x830, Size: 0x1]
	enum StackPeriodResetPolicy;//[Offset: 0x831, Size: 0x1]
	enum StackExpirationPolicy;//[Offset: 0x832, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilities;//[Offset: 0x838, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectModifierMagnitude
	enum MagnitudeCalculationType;//[Offset: 0x0, Size: 0x1]
	ScalableFloat ScalableFloatMagnitude;//[Offset: 0x8, Size: 0x20]
	AttributeBasedFloat AttributeBasedMagnitude;//[Offset: 0x28, Size: 0xf8]
	CustomCalculationBasedFloat CustomMagnitude;//[Offset: 0x120, Size: 0x78]
	SetByCallerFloat SetByCallerMagnitude;//[Offset: 0x198, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScalableFloat
	float Value;//[Offset: 0x0, Size: 0x4]
	CurveTableRowHandle Curve;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CurveTableRowHandle
	CurveTable* CurveTable;//[Offset: 0x0, Size: 0x8]
	FName RowName;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AttributeBasedFloat
	ScalableFloat Coefficient;//[Offset: 0x0, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x20, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x40, Size: 0x20]
	GameplayEffectAttributeCaptureDefinition BackingAttribute;//[Offset: 0x60, Size: 0x40]
	CurveTableRowHandle AttributeCurve;//[Offset: 0xa0, Size: 0x10]
	enum AttributeCalculationType;//[Offset: 0xb0, Size: 0x1]
	enum FinalChannel;//[Offset: 0xb1, Size: 0x1]
	GameplayTagContainer SourceTagFilter;//[Offset: 0xb8, Size: 0x20]
	GameplayTagContainer TargetTagFilter;//[Offset: 0xd8, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectAttributeCaptureDefinition
	GameplayAttribute AttributeToCapture;//[Offset: 0x0, Size: 0x38]
	enum AttributeSource;//[Offset: 0x38, Size: 0x1]
	bool bSnapshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomCalculationBasedFloat
	class GameplayModMagnitudeCalculation* CalculationClassMagnitude;//[Offset: 0x0, Size: 0x8]
	ScalableFloat Coefficient;//[Offset: 0x8, Size: 0x20]
	ScalableFloat PreMultiplyAdditiveValue;//[Offset: 0x28, Size: 0x20]
	ScalableFloat PostMultiplyAdditiveValue;//[Offset: 0x48, Size: 0x20]
	CurveTableRowHandle FinalLookupCurve;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayModMagnitudeCalculation.GameplayEffectCalculation.Object
	bool bAllowNonNetAuthorityDependencyRegistration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float CalculateBaseMagnitude(out const GameplayEffectSpec Spec);// 0x3cf1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectCalculation.Object
	GameplayEffectAttributeCaptureDefinition[] RelevantAttributesToCapture;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectSpec
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;//[Offset: 0x18, Size: 0x28]
	float Duration;//[Offset: 0x50, Size: 0x4]
	float Period;//[Offset: 0x54, Size: 0x4]
	float ChanceToApplyToTarget;//[Offset: 0x58, Size: 0x4]
	TagContainerAggregator CapturedSourceTags;//[Offset: 0x60, Size: 0x88]
	TagContainerAggregator CapturedTargetTags;//[Offset: 0xe8, Size: 0x88]
	GameplayTagContainer DynamicGrantedTags;//[Offset: 0x170, Size: 0x20]
	GameplayTagContainer DynamicAssetTags;//[Offset: 0x190, Size: 0x20]
	ModifierSpec[] Modifiers;//[Offset: 0x1b0, Size: 0x10]
	int StackCount;//[Offset: 0x1c0, Size: 0x4]
	bool bCompletedSourceAttributeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 0x1]
	bool bCompletedTargetAttributeCapture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4, Size: 0x1]
	bool bDurationLocked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4, Size: 0x1]
	GameplayAbilitySpecDef[] GrantedAbilitySpecs;//[Offset: 0x1c8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x278, Size: 0x18]
	float Level;//[Offset: 0x290, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectModifiedAttribute
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	float TotalMagnitude;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectAttributeCaptureSpecContainer
	GameplayEffectAttributeCaptureSpec[] SourceAttributes;//[Offset: 0x0, Size: 0x10]
	GameplayEffectAttributeCaptureSpec[] TargetAttributes;//[Offset: 0x10, Size: 0x10]
	bool bHasNonSnapshottedAttributes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectAttributeCaptureSpec
	GameplayEffectAttributeCaptureDefinition BackingDefinition;//[Offset: 0x0, Size: 0x40]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TagContainerAggregator
	GameplayTagContainer CapturedActorTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer CapturedSpecTags;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer ScopedTags;//[Offset: 0x40, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ModifierSpec
	float EvaluatedMagnitude;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilitySpecDef
	class GameplayAbility* Ability;//[Offset: 0x0, Size: 0x8]
	ScalableFloat LevelScalableFloat;//[Offset: 0x8, Size: 0x20]
	int InputID;//[Offset: 0x28, Size: 0x4]
	enum RemovalPolicy;//[Offset: 0x2c, Size: 0x1]
	Object* SourceObject;//[Offset: 0x30, Size: 0x8]
	GameplayAbilitySpecHandle AssignedHandle;//[Offset: 0x88, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SetByCallerFloat
	FName DataName;//[Offset: 0x0, Size: 0x8]
	GameplayTag DataTag;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayModifierInfo
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	ScalableFloat Magnitude;//[Offset: 0x40, Size: 0x20]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x60, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x208, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x210, Size: 0x50]
	GameplayTagRequirements TargetTags;//[Offset: 0x260, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayModEvaluationChannelSettings
	enum Channel;//[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTagRequirements
	enum RequireTagCheckRule;//[Offset: 0x0, Size: 0x1]
	GameplayTagContainer RequireTags;//[Offset: 0x8, Size: 0x20]
	enum IgnoreTagCheckRule;//[Offset: 0x28, Size: 0x1]
	GameplayTagContainer IgnoreTags;//[Offset: 0x30, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectExecutionDefinition
	class GameplayEffectExecutionCalculation* CalculationClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer PassedInTags;//[Offset: 0x8, Size: 0x20]
	GameplayEffectExecutionScopedModifierInfo[] CalculationModifiers;//[Offset: 0x28, Size: 0x10]
	class GameplayEffect[] ConditionalGameplayEffectClasses;//[Offset: 0x38, Size: 0x10]
	ConditionalGameplayEffect[] ConditionalGameplayEffects;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectExecutionCalculation.GameplayEffectCalculation.Object
	bool bRequiresPassedInTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void Execute(out const GameplayEffectCustomExecutionParameters ExecutionParams, out GameplayEffectCustomExecutionOutput OutExecutionOutput);// 0x3cf0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectCustomExecutionParameters
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectCustomExecutionOutput
	GameplayModifierEvaluatedData[] OutputModifiers;//[Offset: 0x0, Size: 0x10]
	bool bTriggerConditionalGameplayEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bHandledStackCountManually;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bHandledGameplayCuesManually;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayModifierEvaluatedData
	GameplayAttribute Attribute;//[Offset: 0x0, Size: 0x38]
	byte ModifierOp;//[Offset: 0x38, Size: 0x1]
	float Magnitude;//[Offset: 0x3c, Size: 0x4]
	ActiveGameplayEffectHandle Handle;//[Offset: 0x40, Size: 0x8]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveGameplayEffectHandle
	int Handle;//[Offset: 0x0, Size: 0x4]
	bool bPassedFiltersAndWasExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectExecutionScopedModifierInfo
	GameplayEffectAttributeCaptureDefinition CapturedAttribute;//[Offset: 0x0, Size: 0x40]
	GameplayTag TransientAggregatorIdentifier;//[Offset: 0x40, Size: 0x8]
	enum AggregatorType;//[Offset: 0x48, Size: 0x1]
	byte ModifierOp;//[Offset: 0x49, Size: 0x1]
	GameplayEffectModifierMagnitude ModifierMagnitude;//[Offset: 0x50, Size: 0x1a8]
	GameplayModEvaluationChannelSettings EvaluationChannelSettings;//[Offset: 0x1f8, Size: 0x1]
	GameplayTagRequirements SourceTags;//[Offset: 0x200, Size: 0x50]
	GameplayTagRequirements TargetTags;//[Offset: 0x250, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConditionalGameplayEffect
	class GameplayEffect* EffectClass;//[Offset: 0x0, Size: 0x8]
	GameplayTagContainer RequiredSourceTags;//[Offset: 0x8, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectCustomApplicationRequirement.Object
	bool CanApplyGameplayEffect(const GameplayEffect* GameplayEffect, out const GameplayEffectSpec Spec, AbilitySystemComponent* ASC);// 0x3cef078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectCue
	GameplayAttribute MagnitudeAttribute;//[Offset: 0x0, Size: 0x38]
	float MinLevel;//[Offset: 0x38, Size: 0x4]
	float MaxLevel;//[Offset: 0x3c, Size: 0x4]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x40, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectUIData.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InheritedTagContainer
	GameplayTagContainer CombinedTags;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer Added;//[Offset: 0x20, Size: 0x20]
	GameplayTagContainer Removed;//[Offset: 0x40, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectQuery
	delegate CustomMatchDelegate_BP;//[Offset: 0x10, Size: 0x10]
	GameplayTagQuery OwningTagQuery;//[Offset: 0x20, Size: 0x48]
	GameplayTagQuery EffectTagQuery;//[Offset: 0x68, Size: 0x48]
	GameplayTagQuery SourceTagQuery;//[Offset: 0xb0, Size: 0x48]
	GameplayAttribute ModifyingAttribute;//[Offset: 0xf8, Size: 0x38]
	Object* EffectSource;//[Offset: 0x130, Size: 0x8]
	class GameplayEffect* EffectDefinition;//[Offset: 0x138, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10]
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	FString AutoDescription;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AbilityTriggerData
	GameplayTag TriggerTag;//[Offset: 0x0, Size: 0x8]
	byte TriggerSource;//[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectSpecHandle
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityActorInfo
	Actor* OwnerActor;//[Offset: 0x8, Size: 0x8]
	Actor* AvatarActor;//[Offset: 0x10, Size: 0x8]
	PlayerController* PlayerController;//[Offset: 0x18, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x20, Size: 0x8]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x28, Size: 0x8]
	AnimInstance* AnimInstance;//[Offset: 0x30, Size: 0x8]
	MovementComponent* MovementComponent;//[Offset: 0x38, Size: 0x8]
	FName AffectedAnimInstanceTag;//[Offset: 0x40, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayCueParameters
	float NormalizedMagnitude;//[Offset: 0x0, Size: 0x4]
	float RawMagnitude;//[Offset: 0x4, Size: 0x4]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x8, Size: 0x18]
	GameplayTag MatchedTagName;//[Offset: 0x20, Size: 0x8]
	GameplayTag OriginalTag;//[Offset: 0x28, Size: 0x8]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	Vector_NetQuantize10 Location;//[Offset: 0x70, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x7c, Size: 0xc]
	Actor* Instigator;//[Offset: 0x88, Size: 0x8]
	Actor* EffectCauser;//[Offset: 0x90, Size: 0x8]
	Object* SourceObject;//[Offset: 0x98, Size: 0x8]
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0xa0, Size: 0x8]
	int GameplayEffectLevel;//[Offset: 0xa8, Size: 0x4]
	int AbilityLevel;//[Offset: 0xac, Size: 0x4]
	SceneComponent* TargetAttachComponent;//[Offset: 0xb0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x1371078ea041
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x1370078ea041
	void EndTask();// 0x136f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityLocalAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityLocalAnimMontage LocalMontageInfo;//[Offset: 0x8, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityLocalAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	bool PlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]
	GameplayAbility* AnimatingAbility;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityRepAnimMontageForMesh
	SkeletalMeshComponent* Mesh;//[Offset: 0x0, Size: 0x8]
	GameplayAbilityRepAnimMontage RepMontageInfo;//[Offset: 0x8, Size: 0x38]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityRepAnimMontage
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	float BlendTime;//[Offset: 0x10, Size: 0x4]
	byte NextSectionID;//[Offset: 0x14, Size: 0x1]
	bool bRepPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool IsStopped;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool ForcePlayBit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool SkipPositionCorrection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bSkipPlayRate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	byte SectionIdToPlay;//[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarMetaAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData Damage;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData ShieldDamage;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeSet.AttributeSet.Object
	void K2_SetAttributeValue(FName AttributeName, float NewVal);// 0x4501078ea041
	void K2_OnReplicationAttribute(out const GameplayAttributeData OldValue, out const GameplayAttributeData ReplicatedAttribute, FName AttributeName);// 0x4500078ea041
	void K2_InitAttributeValue(out GameplayAttributeData OriginAttribute, float NewVal);// 0x44ff078ea041
	float K2_GetAttributeValue(out const GameplayAttributeData OriginAttribute);// 0x44fe078ea041
	GameplayAttribute K2_GetAttribute(FName AttributeName);// 0x44fd078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAttributeData
	float BaseValue;//[Offset: 0x8, Size: 0x4]
	float CurrentValue;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MetaAttributeUpdateEvent
	int TypeID;//[Offset: 0x8, Size: 0x4]
	SolarAbilitySystemComponent* TargetASC;//[Offset: 0x10, Size: 0x8]
	SolarMetaAttributeSet* MetaAttributeSet;//[Offset: 0x18, Size: 0x8]
	GameplayAttribute MetaAttribute;//[Offset: 0x20, Size: 0x38]
	float MetaAttributeValue;//[Offset: 0x58, Size: 0x4]
	MetaAttributeProduceEffect[] Effects;//[Offset: 0x60, Size: 0x10]
	MetaAttributeUpdateEvent_Character CharacterEventData;//[Offset: 0x70, Size: 0x3]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MetaAttributeProduceEffect
	SolarAttributeSet* EffectAttributeSet;//[Offset: 0x0, Size: 0x8]
	GameplayAttribute EffectAttribute;//[Offset: 0x8, Size: 0x38]
	float EffectValue;//[Offset: 0x40, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MetaAttributeUpdateEvent_Character
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ServerAbilityRPCBatch
	GameplayAbilitySpecHandle AbilitySpecHandle;//[Offset: 0x0, Size: 0x4]
	PredictionKey PredictionKey;//[Offset: 0x8, Size: 0x18]
	GameplayAbilityTargetDataHandle TargetData;//[Offset: 0x20, Size: 0x28]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool Ended;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool Started;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayEffectSpecForRPC
	GameplayEffect* Def;//[Offset: 0x0, Size: 0x8]
	GameplayEffectModifiedAttribute[] ModifiedAttributes;//[Offset: 0x8, Size: 0x10]
	GameplayEffectContextHandle EffectContext;//[Offset: 0x18, Size: 0x18]
	GameplayTagContainer AggregatedSourceTags;//[Offset: 0x30, Size: 0x20]
	GameplayTagContainer AggregatedTargetTags;//[Offset: 0x50, Size: 0x20]
	float Level;//[Offset: 0x70, Size: 0x4]
	float AbilityLevel;//[Offset: 0x74, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityTargetActor.Actor.Object
	bool ShouldProduceTargetDataOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	GameplayAbilityTargetingLocationInfo StartLocation;//[Offset: 0x230, Size: 0x60]
	PlayerController* MasterPC;//[Offset: 0x2c0, Size: 0x8]
	GameplayAbility* OwningAbility;//[Offset: 0x2c8, Size: 0x8]
	bool bDestroyOnConfirmation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	Actor* SourceActor;//[Offset: 0x2d8, Size: 0x8]
	WorldReticleParameters ReticleParams;//[Offset: 0x2e0, Size: 0xc]
	class GameplayAbilityWorldReticle* ReticleClass;//[Offset: 0x2f0, Size: 0x8]
	GameplayTargetDataFilterHandle Filter;//[Offset: 0x2f8, Size: 0x10]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	AbilitySystemComponent* GenericDelegateBoundASC;//[Offset: 0x320, Size: 0x8]
	void ConfirmTargeting();// 0x3cda078ea041
	void CancelTargeting();// 0x3cd9078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldReticleParameters
	Vector AOEScale;//[Offset: 0x0, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilityWorldReticle.Actor.Object
	WorldReticleParameters Parameters;//[Offset: 0x228, Size: 0xc]
	bool bFaceOwnerFlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 0x1]
	bool bSnapToTargetedActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	bool bIsTargetValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236, Size: 0x1]
	bool bIsTargetAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x237, Size: 0x1]
	PlayerController* MasterPC;//[Offset: 0x238, Size: 0x8]
	Actor* TargetingActor;//[Offset: 0x240, Size: 0x8]
	void SetReticleMaterialParamVector(FName ParamName, Vector Value);// 0x3ce0078ea041
	void SetReticleMaterialParamFloat(FName ParamName, float Value);// 0x3cdf078ea041
	void OnValidTargetChanged(bool bNewValue);// 0x3cde078ea041
	void OnTargetingAnActor(bool bNewValue);// 0x3cdd078ea041
	void OnParametersInitialized();// 0x3cdc078ea041
	void FaceTowardSource(bool bFaceIn2D);// 0x3cdb078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTargetDataFilterHandle
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilitySpecContainer.FastArraySerializer
	GameplayAbilitySpec[] Items;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x118, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 0x4]
	enum DeltaFlags;//[Offset: 0x100, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayAbilitySpec.FastArraySerializerItem
	GameplayAbilitySpecHandle Handle;//[Offset: 0xc, Size: 0x4]
	GameplayAbility* Ability;//[Offset: 0x10, Size: 0x8]
	int Level;//[Offset: 0x18, Size: 0x4]
	int InputID;//[Offset: 0x1c, Size: 0x4]
	Object* SourceObject;//[Offset: 0x20, Size: 0x8]
	byte ActiveCount;//[Offset: 0x28, Size: 0x1]
	bool InputPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool RemoveAfterActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bActivateOnce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	GameplayAbilityActivationInfo ActivationInfo;//[Offset: 0x30, Size: 0x20]
	GameplayAbility*[] NonReplicatedInstances;//[Offset: 0x50, Size: 0x10]
	GameplayAbility*[] ReplicatedInstances;//[Offset: 0x60, Size: 0x10]
	ActiveGameplayEffectHandle GameplayEffectHandle;//[Offset: 0x70, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveGameplayEffectsContainer.FastArraySerializer
	ActiveGameplayEffect[] GameplayEffects_Internal;//[Offset: 0x138, Size: 0x10]
	GameplayEffect*[] ApplicationImmunityQueryEffects;//[Offset: 0x458, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveGameplayEffect.FastArraySerializerItem
	GameplayEffectSpec Spec;//[Offset: 0x18, Size: 0x298]
	PredictionKey PredictionKey;//[Offset: 0x2b0, Size: 0x18]
	float StartServerWorldTime;//[Offset: 0x2c8, Size: 0x4]
	float CachedStartServerWorldTime;//[Offset: 0x2cc, Size: 0x4]
	float StartWorldTime;//[Offset: 0x2d0, Size: 0x4]
	bool bIsInhibited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveGameplayCueContainer.FastArraySerializer
	ActiveGameplayCue[] GameplayCues;//[Offset: 0x108, Size: 0x10]
	AbilitySystemComponent* Owner;//[Offset: 0x120, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveGameplayCue.FastArraySerializerItem
	GameplayTag GameplayCueTag;//[Offset: 0xc, Size: 0x8]
	PredictionKey PredictionKey;//[Offset: 0x18, Size: 0x18]
	GameplayCueParameters Parameters;//[Offset: 0x30, Size: 0xc0]
	bool bPredictivelyRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MinimalReplicationTagCountMap
	AbilitySystemComponent* Owner;//[Offset: 0x50, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicatedPredictionKeyMap.FastArraySerializer
	ReplicatedPredictionKeyItem[] PredictionKeys;//[Offset: 0x108, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicatedPredictionKeyItem.FastArraySerializerItem
	PredictionKey PredictionKey;//[Offset: 0x10, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAnimInstance.AnimInstance.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x268, Size: 0x8]
	byte OwnerRole;//[Offset: 0x270, Size: 0x1]
	FName LeftHandIKSocketName;//[Offset: 0x27c, Size: 0x8]
	FName RightHandWeaponSocketName;//[Offset: 0x284, Size: 0x8]
	Transform LeftHandIKSocket2BoneTrans;//[Offset: 0x290, Size: 0x30]
	Vector LeftHandEffectorLocation;//[Offset: 0x2c0, Size: 0xc]
	Rotator LeftHandEffectorRotation;//[Offset: 0x2cc, Size: 0xc]
	Vector CurrentLeftHandJointLocation;//[Offset: 0x2fc, Size: 0xc]
	Vector RightHandEffectorLocation;//[Offset: 0x308, Size: 0xc]
	Vector RightHandJointLocation;//[Offset: 0x314, Size: 0xc]
	float LeftIKHandWeight;//[Offset: 0x320, Size: 0x4]
	float CurrentReloadTimeRate;//[Offset: 0x324, Size: 0x4]
	float CurrentSwitchWeaponTimeRate;//[Offset: 0x328, Size: 0x4]
	float CurrentBoltTimeRate;//[Offset: 0x32c, Size: 0x4]
	bool IsJog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	bool bInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 0x1]
	float ViewPitch;//[Offset: 0x334, Size: 0x4]
	float ViewYaw;//[Offset: 0x338, Size: 0x4]
	float SimulatedProxyViewSmoothSpeed;//[Offset: 0x33c, Size: 0x4]
	BlendSpace* FireTPPBlendSpace;//[Offset: 0x348, Size: 0x8]
	float FireTPPBlendSpaceX;//[Offset: 0x350, Size: 0x4]
	float FIreTPPBlendSpaceY;//[Offset: 0x354, Size: 0x4]
	float MinSwimSpeed;//[Offset: 0x358, Size: 0x4]
	float Direction;//[Offset: 0x35c, Size: 0x4]
	float Speed;//[Offset: 0x360, Size: 0x4]
	float InputDirection;//[Offset: 0x364, Size: 0x4]
	byte IdleTurnType;//[Offset: 0x368, Size: 0x1]
	float TurnExplicitTime;//[Offset: 0x36c, Size: 0x4]
	float DamageDirection;//[Offset: 0x370, Size: 0x4]
	float DamageReactionAlpha;//[Offset: 0x374, Size: 0x4]
	float DamageNomalizeTime;//[Offset: 0x378, Size: 0x4]
	LeftHandGripConfig CurrentGripData;//[Offset: 0x484, Size: 0x84]
	float Fire2PlayRateStand;//[Offset: 0x58c, Size: 0x4]
	float Fire2PlayRateCrouch;//[Offset: 0x590, Size: 0x4]
	bool bHoldingShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 0x1]
	bool ShieldRechargeIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 0x1]
	float FallingInputScale;//[Offset: 0x5e4, Size: 0x4]
	Vector IKOffsetLeftFootVector;//[Offset: 0x5e8, Size: 0xc]
	Vector IKOffsetRightFootVector;//[Offset: 0x5f4, Size: 0xc]
	Vector JointTargetLeftFootVector;//[Offset: 0x600, Size: 0xc]
	Vector JointTargetRightFootVector;//[Offset: 0x60c, Size: 0xc]
	Rotator LeftFootRotation;//[Offset: 0x618, Size: 0xc]
	Rotator RightFootRotation;//[Offset: 0x624, Size: 0xc]
	Vector HipOffsetVector;//[Offset: 0x630, Size: 0xc]
	float FootIKTraceDistanceRate;//[Offset: 0x63c, Size: 0x4]
	float CrouchFootIKTraceDistanceRate;//[Offset: 0x640, Size: 0x4]
	float FootIKInterpSpeed;//[Offset: 0x644, Size: 0x4]
	FName LeftFootSocket;//[Offset: 0x648, Size: 0x8]
	FName RightFootSocket;//[Offset: 0x650, Size: 0x8]
	bool AnimParam_LeftOrRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]
	float LandingBlendWeight;//[Offset: 0x65c, Size: 0x4]
	float DefaultLeftHandWeaponAttachingBlendTime;//[Offset: 0x660, Size: 0x4]
	float DefaultLeftHandWeaponDetachingBlendTime;//[Offset: 0x664, Size: 0x4]
	float CurrentLeftHandWeaponAttachingBlendTime;//[Offset: 0x668, Size: 0x4]
	float CurrentLeftHandWeaponDetachingBlendTime;//[Offset: 0x66c, Size: 0x4]
	float FootIKEnableDelayTime;//[Offset: 0x698, Size: 0x4]
	bool bActiveFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 0x1]
	float FlailRate;//[Offset: 0x6d0, Size: 0x4]
	float ConfigPitchToZeroTime;//[Offset: 0x6d4, Size: 0x4]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeX;//[Offset: 0x6d8, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeY;//[Offset: 0x6e0, Size: 0x8]
	JetPackPoseSpeedRange JetPack2PoseSpeedRangeZ;//[Offset: 0x6e8, Size: 0x8]
	float JetPack2PoseRestoreSmoothSpeed;//[Offset: 0x6f0, Size: 0x4]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeX;//[Offset: 0x6f4, Size: 0x8]
	JetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeY;//[Offset: 0x6fc, Size: 0x8]
	bool bNewJet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x712, Size: 0x1]
	bool bIsJetFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x713, Size: 0x1]
	bool bEnableDamageReact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x714, Size: 0x1]
	bool bEnableWeaponAdditiveA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x714, Size: 0x1]
	bool bEnableHandIK;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x714, Size: 0x1]
	bool bEnableFootIK;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x714, Size: 0x1]
	bool bEnableWeaponAdditiveB;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x714, Size: 0x1]
	bool bEnableWeaponJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x714, Size: 0x1]
	byte MaxLODDamageReact;//[Offset: 0x715, Size: 0x1]
	byte MaxLODWeaponAdditiveA;//[Offset: 0x716, Size: 0x1]
	byte MaxLODHandIK;//[Offset: 0x717, Size: 0x1]
	byte MaxLODFootIK;//[Offset: 0x718, Size: 0x1]
	byte MaxLODWeaponAdditiveB;//[Offset: 0x719, Size: 0x1]
	byte MaxLODWeaponJitter;//[Offset: 0x71a, Size: 0x1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71b, Size: 0x1]
	float DeathAnimStartPosition;//[Offset: 0x71c, Size: 0x4]
	<enum,class AnimInstance> SpecAnimBPs;//[Offset: 0x720, Size: 0x50]
	bool bIsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x770, Size: 0x1]
	bool bIsCrouching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x770, Size: 0x1]
	bool bIsFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x770, Size: 0x1]
	bool bIsFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x770, Size: 0x1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x770, Size: 0x1]
	bool bIsSprinting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x770, Size: 0x1]
	bool bIsInhibitSprinting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x770, Size: 0x1]
	bool bIsSixDirRunForward;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x770, Size: 0x1]
	bool bIsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x771, Size: 0x1]
	bool bShouldUpperBodyAdditiveBlend;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x771, Size: 0x1]
	enum CurrentWalkMode;//[Offset: 0x772, Size: 0x1]
	enum LastWalkMode;//[Offset: 0x773, Size: 0x1]
	enum CurrentAirMoveMode;//[Offset: 0x774, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x775, Size: 0x1]
	enum CurrentCruiseState;//[Offset: 0x776, Size: 0x1]
	AnimSequence* CruiseStartSequence;//[Offset: 0x778, Size: 0x8]
	AnimSequence* CruiseLoopSequence;//[Offset: 0x780, Size: 0x8]
	AnimSequence* CruiseEndSequence;//[Offset: 0x788, Size: 0x8]
	float MinSpeedForSkydiveFlyingInputBonus;//[Offset: 0x790, Size: 0x4]
	float MaxSpeedForSkydiveFlyingInputBonus;//[Offset: 0x794, Size: 0x4]
	float InputYThresholdToCalcInputYByCamera;//[Offset: 0x798, Size: 0x4]
	float MinDeltaYawFromCameraToGetMaxInputY;//[Offset: 0x79c, Size: 0x4]
	enum CurrentSkydiveStage;//[Offset: 0x7a0, Size: 0x1]
	float MinWallRunSurfaceAngle;//[Offset: 0x7a4, Size: 0x4]
	float MaxWallRunSurfaceAngle;//[Offset: 0x7a8, Size: 0x4]
	enum WeaponStatus;//[Offset: 0x7b0, Size: 0x1]
	bool bIsBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b1, Size: 0x1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7b1, Size: 0x1]
	bool bIsLeftHandDetaching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7b1, Size: 0x1]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7b1, Size: 0x1]
	enum CurrentSkillAnimType;//[Offset: 0x7b2, Size: 0x1]
	float SkillDistanceBlendRatio;//[Offset: 0x7b4, Size: 0x4]
	void OnMontagePlayEnded(AnimMontage* Montage, bool bInterrupted);// 0x4e7b078ea041
	bool NeedResolveWeaponJitter();// 0x4e7a078ea041
	bool JetPack2IsDashingCompletelyOver();// 0x4e79078ea041
	bool IsHoldingWeapon();// 0x4e78078ea041
	bool IsAiming();// 0x4e77078ea041
	float GetWallRunSurfaceAngle();// 0x4e76078ea041
	enum GetWallRunState();// 0x4e75078ea041
	Vector2D GetSkydiveFlyingInput();// 0x4e74078ea041
	int GetOwnerGroupID();// 0x4e73078ea041
	Vector GetJetPackDashAnimationBlend();// 0x4e72078ea041
	Vector GetInputVector();// 0x4e71078ea041
	Vector GetFallingInputVector();// 0x4e70078ea041
	float GenJumpDirection(float InInputDirection);// 0x4e6f078ea041
	float GenBackwardDirection(float InInputDirection);// 0x4e6e078ea041
	bool CheckNewJetAndReset();// 0x4e6d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LeftHandGripConfig
	Rotator HandL;//[Offset: 0x0, Size: 0xc]
	Rotator Thumbl01;//[Offset: 0xc, Size: 0xc]
	Rotator Thumbl02;//[Offset: 0x18, Size: 0xc]
	Rotator Index01;//[Offset: 0x24, Size: 0xc]
	Rotator Index02;//[Offset: 0x30, Size: 0xc]
	Rotator Middle01;//[Offset: 0x3c, Size: 0xc]
	Rotator Middle02;//[Offset: 0x48, Size: 0xc]
	Rotator Ring01;//[Offset: 0x54, Size: 0xc]
	Rotator Ring02;//[Offset: 0x60, Size: 0xc]
	Rotator Pinky01;//[Offset: 0x6c, Size: 0xc]
	Rotator Pinky02;//[Offset: 0x78, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: JetPackPoseSpeedRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HitSoundReplicationData
	uint16 HitCount;//[Offset: 0x0, Size: 0x2]
	byte DirtyDataMask;//[Offset: 0x2, Size: 0x1]
	HitSoundData HitData_Default;//[Offset: 0x4, Size: 0x1c]
	HitSoundData HitData_Weapon;//[Offset: 0x20, Size: 0x1c]
	HitSoundData HitData_Melee;//[Offset: 0x3c, Size: 0x1c]
	HitSoundData HitData_Skill;//[Offset: 0x58, Size: 0x1c]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HitSoundData
	Actor* Instigator;//[Offset: 0x0, Size: 0x8]
	enum SourceType;//[Offset: 0x8, Size: 0x1]
	enum TargetType;//[Offset: 0x9, Size: 0x1]
	FName SubTableKey;//[Offset: 0xc, Size: 0x8]
	FName SubTableKey2;//[Offset: 0x14, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterSoundConfig.DataAsset.Object
	<enum,FString> SoundEventTable;//[Offset: 0x30, Size: 0x50]
	<byte,FName> SurfaceTypeToHitByBulletSoundGroup;//[Offset: 0x80, Size: 0x50]
	Transform DefaultTransform;//[Offset: 0xd0, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPile.SolarMapElementBase.Actor.Object
	StaticMeshComponent* NormalMesh;//[Offset: 0x2b0, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x2b8, Size: 0x8]
	ActorComponent*[] ExtraChargingVFXComps;//[Offset: 0x2c0, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2d0, Size: 0x4]
	enum Channel;//[Offset: 0x2ec, Size: 0x1]
	enum PileType;//[Offset: 0x2ed, Size: 0x1]
	int Zone;//[Offset: 0x2f0, Size: 0x4]
	float MaxEnergy;//[Offset: 0x2f4, Size: 0x4]
	float PowerRecoveryCD;//[Offset: 0x2f8, Size: 0x4]
	float PowerRecoveryFrequency;//[Offset: 0x2fc, Size: 0x4]
	float PowerRecoveryQuantity;//[Offset: 0x300, Size: 0x4]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	bool bCanRecover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 0x1]
	bool bIsActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307, Size: 0x1]
	int Level;//[Offset: 0x308, Size: 0x4]
	bool bIsLosingEnergy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	int OwnerTeam;//[Offset: 0x310, Size: 0x4]
	SolarCharacter* OwnerCharacter;//[Offset: 0x314, Size: 0x8]
	ChargingInfo defaultChargingInfo;//[Offset: 0x320, Size: 0x30]
	ChargingInfo[] ChargingInfoList;//[Offset: 0x350, Size: 0x10]
	float CurrentEnergy;//[Offset: 0x360, Size: 0x4]
	float SphereRadius;//[Offset: 0x368, Size: 0x4]
	TimerHandle RecoveryHandle;//[Offset: 0x370, Size: 0x8]
	TimerHandle ServerChargingTimerHandle;//[Offset: 0x380, Size: 0x8]
	TimerHandle ClientChargingTimerHandle;//[Offset: 0x388, Size: 0x8]
	ParticleSystemComponent*[] ChargeParticleEffects;//[Offset: 0x390, Size: 0x10]
	AkComponent* AkAudioComponent;//[Offset: 0x3a0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x3a8, Size: 0x8]
	bool bEnableHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 0x1]
	float MaxHealth;//[Offset: 0x3b4, Size: 0x4]
	float ReducedHealth;//[Offset: 0x3b8, Size: 0x4]
	float CurrentHealth;//[Offset: 0x3bc, Size: 0x4]
	float TweenTimeSpeed;//[Offset: 0x3c0, Size: 0x4]
	float RestTweenTime;//[Offset: 0x3c4, Size: 0x4]
	float TargetOpacity;//[Offset: 0x3c8, Size: 0x4]
	float CurrentOpacity;//[Offset: 0x3cc, Size: 0x4]
	float OpacityTweenTime;//[Offset: 0x3d0, Size: 0x4]
	MaterialInstanceDynamic* DynamicMatChargingCircle;//[Offset: 0x3d8, Size: 0x8]
	ChargingPilePreset ChargingPilePreset;//[Offset: 0x3e0, Size: 0x150]
	StaticMeshComponent* RangeRingMeshComp;//[Offset: 0x530, Size: 0x8]
	StaticMeshComponent* ChargeCircleMeshComp;//[Offset: 0x538, Size: 0x8]
	bool bCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	void ToggleExtraChargingVFX(bool Toggle);// 0x4fed078ea041
	void SetIsActivated(bool bActivated);// 0x4fec078ea041
	void RemoveChargeParticle(SolarCharacter* InCharacter);// 0x4feb078ea041
	void RemoveAllEffects();// 0x4fea078ea041
	void ReceivePileExpired();// 0x4fe9078ea041
	void ReceiveEnergyChanged();// 0x4fe8078ea041
	void ReceiveChargingPileInitialize();// 0x4fe7078ea041
	void ReceiveCharacterShowEffect(const Actor* Other);// 0x4fe6078ea041
	void ReceiveCharacterHideEffect(const Actor* Other);// 0x4fe5078ea041
	void PlaySkillStartSound();// 0x4fe4078ea041
	void PlaySkillEndSound();// 0x4fe3078ea041
	void PlayRecoveryAnim(bool bStart);// 0x4fe2078ea041
	void PlayChargingAnimation(bool Reverse);// 0x4fe1078ea041
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4fe0078ea041
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4fdf078ea041
	void OnRep_IsLosingEnergyChanged();// 0x4fde078ea041
	void OnRep_Energy();// 0x4fdd078ea041
	void OnRep_Enable();// 0x4fdc078ea041
	void OnRep_CurrentHealth();// 0x4fdb078ea041
	void OnRep_ChargingInfoListChanged();// 0x4fda078ea041
	void OnRep_CanRecover();// 0x4fd9078ea041
	void OnRep_Broken();// 0x4fd8078ea041
	void OnRefreshRangeRing();// 0x4fd7078ea041
	void OnRefreshChargeCircle(const bool InCharging);// 0x4fd6078ea041
	void OnCharacterBatteryIdChanged(SolarCharacter* InCharacter, float Frequency, float Quantity);// 0x4fd5078ea041
	bool IsCharacterInRange(SolarCharacter* InCharacter);// 0x4fd4078ea041
	bool IsAnyCharacterInRange();// 0x4fd3078ea041
	ChargingInfo GetChargingInfoByCharacter(SolarCharacter* Character);// 0x4fd2078ea041
	void GameStatisticsChargingPile(out ChargingInfo ChargingInfo, int pileLevel, Vector Location, float energyUse);// 0x4fd1078ea041
	void CreateChargeParticle(SolarCharacter* InCharacter);// 0x4fd0078ea041
	void ChangeColor();// 0x4fcf078ea041
	bool CanWork();// 0x4fce078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarMapElementBase.Actor.Object
	FString Side;//[Offset: 0x238, Size: 0x10]
	FString Job;//[Offset: 0x248, Size: 0x10]
	FString ElementID;//[Offset: 0x258, Size: 0x10]
	enum Type;//[Offset: 0x268, Size: 0x1]
	enum State;//[Offset: 0x269, Size: 0x1]
	enum Visibility;//[Offset: 0x26a, Size: 0x1]
	class SolarGameMode_HandleElementRPC* BP_HandleActorRPC;//[Offset: 0x270, Size: 0x8]
	FName ElementTypeName;//[Offset: 0x278, Size: 0x8]
	FString GroupKey;//[Offset: 0x280, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0x290, Size: 0x1]
	void SetElementVisibility(const enum NewType);// 0x4942078ea041
	enum SetElementState(const enum NewState);// 0x4941078ea041
	void OnRep_ElementVisibility();// 0x4940078ea041
	void OnRep_ElementState();// 0x493f078ea041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x493e078ea041
	void OnElementStateChanged(const enum CurrentState);// 0x493d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameMode_HandleElementRPC.ActorComponent.Object
	FName ComponentTagName;//[Offset: 0xb0, Size: 0x8]
	void OnRep_ComponentName();// 0x517a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChargingInfo
	SolarCharacter* Ch;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
	float LastChargeTime;//[Offset: 0xc, Size: 0x4]
	bool bShowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float Quantity;//[Offset: 0x14, Size: 0x4]
	float Frequency;//[Offset: 0x18, Size: 0x4]
	enum PileHealingType;//[Offset: 0x1c, Size: 0x1]
	float TotalChargeEnergy;//[Offset: 0x20, Size: 0x4]
	SolarBackpackComponent* BackpackComponent;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBackpackComponent.ActorComponent.Object
	float DeathBoxEnergyRate;//[Offset: 0xb8, Size: 0x4]
	float RebirthEnergyRate;//[Offset: 0xbc, Size: 0x4]
	delegate OnWeaponCreateCompleteDelegate;//[Offset: 0x120, Size: 0x10]
	float InitialSolarCharge;//[Offset: 0x1a8, Size: 0x4]
	float SolarChargeInterval;//[Offset: 0x1ac, Size: 0x4]
	float InitialEnergyLimit;//[Offset: 0x1b0, Size: 0x4]
	float InitialExtraEnergyLimit;//[Offset: 0x1b4, Size: 0x4]
	float InitialExtraEnergyCharge;//[Offset: 0x1b8, Size: 0x4]
	float InitialChargeCD;//[Offset: 0x1bc, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0x1d0, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x1d4, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0x1d8, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0x1dc, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0x1e0, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0x1e4, Size: 0x4]
	float JetPackVerticalDashSpeedScale;//[Offset: 0x278, Size: 0x4]
	float JetPackHorizontalDashSpeedScale;//[Offset: 0x27c, Size: 0x4]
	<int,class GameplayAbility> ItemAbilities;//[Offset: 0x280, Size: 0x50]
	<int,GameplayAbilitySpecHandle> GivenAbilityHandles;//[Offset: 0x2d0, Size: 0x50]
	bool bWeaponPartPickable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 0x1]
	<int,int> defaultDeathBoxEnergyConfig;//[Offset: 0x378, Size: 0x50]
	<int,DateTime> DroppedItemIDMap;//[Offset: 0x3c8, Size: 0x50]
	float DiscardItemDelayNoticeTime;//[Offset: 0x418, Size: 0x4]
	float[] GradeRankProportion;//[Offset: 0x420, Size: 0x10]
	int[] InitialGridNum;//[Offset: 0x430, Size: 0x10]
	int[] CustomMode_Hunt_InitialGridNum;//[Offset: 0x440, Size: 0x10]
	void WeaponCreateCompleteDelegate__DelegateSignature(byte SlotType, SolarPlayerWeapon* WeaponPtr, SolarBackpackComponent* SolarBackpackComponent);// 0x1d72078ea041
	void UpdateCurrentExtraEnergy(float UpdateValue, enum Usage);// 0x1d71078ea041
	void UpdateCurrentEnergy(float UpdateValue, enum Usage);// 0x1d70078ea041
	void UpdateConsumeSlotUI();// 0x1d6f078ea041
	bool TryTriggerAbility(const int InItemID);// 0x1d6e078ea041
	void TrySendDropItemTips(const int InDroppedItemID);// 0x1d6d078ea041
	float TakeDeathBoxEnergy();// 0x1d6c078ea041
	void SmoothEnergy(const float Amount);// 0x1d6b078ea041
	void SetMaxPileMap(int ItemID, int MaxNum);// 0x1d6a078ea041
	void SetBoxCharging(bool bSet);// 0x1d69078ea041
	void SetBackPackGM(enum gmtypy, int ID, int Num, int Slot);// 0x1d68078ea041
	bool ServerUseItem(int ItemID, int Num);// 0x1d67078ea041
	void ServerSetJetPackModule(int NewJetPackModuleID, bool bForVertical);// 0x1d66078ea041
	void ServerSetEnergyState(enum State);// 0x1d65078ea041
	void ServerRPCUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x1d64078ea041
	void ServerRPCUpgradeShield();// 0x1d63078ea041
	void ServerRPCTakeWeaponPartToBag(const int Slot, const int WeaponPartType);// 0x1d62078ea041
	void ServerRPCTakeBagPartToWeapon(const int Slot, const int WeaponPartType);// 0x1d61078ea041
	void ServerRPCSwitchWeaponPart(const int Slot, const int WeaponPartType);// 0x1d60078ea041
	void ServerRPCPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x1d5f078ea041
	void ServerRPCDisCardWeaponUICall(int Slot);// 0x1d5e078ea041
	void ServerRPCDiscardWeaponPart(const int Slot, const int WeaponPartType);// 0x1d5d078ea041
	void ServerRPCDiscardWeapon(const int InSlot);// 0x1d5c078ea041
	void ServerRPCDisCardItemUICall(int ID, int Num);// 0x1d5b078ea041
	void ServerRPCDiscardItem(const int InItemID, const int InItemNum);// 0x1d5a078ea041
	bool ServerDiscardWeapon(const int Slot, const int InTriggerType);// 0x1d59078ea041
	bool ServerDiscardFromBackpackByType(const enum ItemType, const bool InDropItem, const int InTriggerType);// 0x1d58078ea041
	bool ServerDiscardFromBackpack(const int ItemID, const int Num, const bool InDropItem, const int InTriggerType);// 0x1d57078ea041
	void ServerConsumeExtraEnergy(const float Amount, const enum Usage);// 0x1d56078ea041
	void ServerConsumeEnergy(const float Amount, const enum Usage);// 0x1d55078ea041
	void ServerClearJetModule();// 0x1d54078ea041
	void ServerClearEnergyState(enum State);// 0x1d52078ea041
	void ServerClearAllItems();// 0x1d51078ea041
	void ServerBackpackGM(const enum InGmType, const int InItemID, const int InItemNum, const int InSlot);// 0x1d4f078ea041
	bool ServerAddWeaponToWeaponSysByDataCache(const byte SlotType, out const SolarItemData WeaponData, const bool bDestroyPrev, const bool IsAutoPickup, const int InTriggerType, SolarPlayerWeapon* WeaponActorExists);// 0x1d4e078ea041
	int ServerAddToItemMapByIdAndNumForced(const int ItemID, const int Num);// 0x1d4d078ea041
	int ServerAddToItemMap(SolarItemData ItemData);// 0x1d4c078ea041
	void ServerAddToEquipMap(out const SolarItemData ItemData, bool Bydefault, bool InDropItem);// 0x1d4b078ea041
	int ServerAddToBackpackByIdAndNum(const int ItemID, const int Num, const bool Bydefault, const float CurValue, const bool NeedReset, const int UserId, const int TriggerType, const int SourceType);// 0x1d4a078ea041
	int ServerAddToBackpack(out const SolarItemData ItemData, const bool Bydefault, const int TriggerType);// 0x1d49078ea041
	void ReqUseEnergy(float Amount, enum Usage);// 0x1d48078ea041
	void RequestUpgradeWeapon(SolarElectricShop* InTargetShop, SolarPlayerWeapon* InTargetWeapon);// 0x1d47078ea041
	void RequestUpgradeShield();// 0x1d46078ea041
	void ReqesutPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarElectricShop* InTargetShop);// 0x1d45078ea041
	void RefreshWeaponPartsInBackPackUI();// 0x1d44078ea041
	void RefreshWeaponInBackPackUIInternal();// 0x1d43078ea041
	void RefreshWeaponInBackPackUI();// 0x1d42078ea041
	void RefreshItemInBackPackUI();// 0x1d41078ea041
	void RefreshEquipInBackPackUI();// 0x1d40078ea041
	void RefreshBackPackUIState();// 0x1d3f078ea041
	void PurchaseEShopItemsResponse_Implementation(const int InProductID, const bool bSuccess, SolarElectricShop* InTargetShop);// 0x1d3e078ea041
	int PredictEnergy(const float Amount);// 0x1d3d078ea041
	void OnReceiveItemAbilityCoolDown(out const GameplayTag Tags, const bool bAdd);// 0x1d3c078ea041
	bool NetUseEnergy(float InCostEnergy, enum Usage);// 0x1d3b078ea041
	void NetTakeWeaponPartToBagLuaCall(const int Slot, const int WeaponPartType);// 0x1d3a078ea041
	void NetTakeBagPartToWeaponLuaCall(const int Slot, const int WeaponPartType);// 0x1d39078ea041
	void NetSwitchWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x1d38078ea041
	void NetDiscardWeaponPartLuaCall(const int Slot, const int WeaponPartType);// 0x1d37078ea041
	bool ModuleOverflow2(int ModuleMax);// 0x1d36078ea041
	bool ModuleOverflow(int ModuleMax);// 0x1d35078ea041
	void LogBackPackItem();// 0x1d34078ea041
	bool IsReviveItemRecommend();// 0x1d33078ea041
	bool IsReviveItemPickable();// 0x1d32078ea041
	bool IsReviveItem(const int InItemID);// 0x1d31078ea041
	bool IsExtraEnergyID(int ID);// 0x1d30078ea041
	bool IsEquippedWeapon(const int InThisID);// 0x1d2f078ea041
	bool IsEquippedOrHasBetterPart(const int PartType, const int Level);// 0x1d2e078ea041
	bool IsEnergyID(int ID);// 0x1d2d078ea041
	int IsBetterWeaponThanEquiped(out const SolarItemData InItemData, const int InWeaponLevel, const int InWeaponExp);// 0x1d2c078ea041
	bool IsBetterWeaponForBag(out const SolarItemData InItemData, int InWeaponLevel, int InWeaponExp);// 0x1d2b078ea041
	bool IsBetterScopeForBag(const int PartType, const int Level);// 0x1d2a078ea041
	bool IsBetterPartForBag(const int PartType, const int Level);// 0x1d29078ea041
	void InitDefaultItem(int ItemID, int Num);// 0x1d28078ea041
	void InitDeathBoxEnergyRate();// 0x1d27078ea041
	bool HasEmptyWeaponSlot();// 0x1d26078ea041
	bool GetWeaponSlotEmpty(int Slot);// 0x1d25078ea041
	bool GetWeaponPartInBagClient(int TargetPartType, out int OutPartLevel, out int OutItemID);// 0x1d24078ea041
	SolarItemData GetWeaponItemDataBySlot(int Slot);// 0x1d23078ea041
	bool GetWeaponDataBySolt(int Slot, out SolarItemData ItemData);// 0x1d22078ea041
	float GetTotalEnergy();// 0x1d21078ea041
	float GetQuantityFrom(enum Usage);// 0x1d20078ea041
	SolarItemData GetNewItemData(int ItemID, int Num);// 0x1d1f078ea041
	float GetMaxExtraEnergy();// 0x1d1e078ea041
	float GetMaxEnergy();// 0x1d1d078ea041
	float GetMaxDeathBoxEnergyFromConfig();// 0x1d1c078ea041
	int GetItemNumById(int ItemID);// 0x1d1b078ea041
	int GetItemMaxPile(int ItemID);// 0x1d1a078ea041
	bool GetItemDataByType(enum ItemType, out SolarItemData ItemData);// 0x1d19078ea041
	bool GetItemDataById(int ItemID, out SolarItemData ItemData);// 0x1d18078ea041
	float GetFrequencyFrom(enum Usage);// 0x1d17078ea041
	SolarItemData GetEquipItemDataByType(enum ItemType);// 0x1d16078ea041
	int GetEquipIdByType(enum ItemType);// 0x1d15078ea041
	float GetCurrExtraEnergy();// 0x1d14078ea041
	SolarItemData GetCurrentWeaponItemData();// 0x1d13078ea041
	bool GetCurrentWeaponIsOverloading();// 0x1d12078ea041
	void GetCurrentEquipItems(out int[] OutArray);// 0x1d11078ea041
	float GetCurrEnergy();// 0x1d10078ea041
	SolarCharacter* GetCharacterOwner();// 0x1d0f078ea041
	byte GetBestSuitSlotForCandidateWeapon(out const SolarItemData WeaponData, const bool IsAutoPickup, const byte PreferSlot);// 0x1d0d078ea041
	bool GetAnyScopeInBagClient(out int OutPartType, out int OutPartLevel, out int OutItemID);// 0x1d0c078ea041
	float GetAbilityRemainingCD(const int InItemID);// 0x1d0b078ea041
	float GetAbilityDuration(const int InItemID);// 0x1d0a078ea041
	void GameStatistics_ItemUseCount(out const SolarItemData InItemData);// 0x1d09078ea041
	void ExecuteGM(FString InStrGM);// 0x1d08078ea041
	void EquipModuleByID(int ModuleID);// 0x1d07078ea041
	int EquipModule(const int ID, const float ModuleMax);// 0x1d06078ea041
	void EquipBatteryByID(int BatteryID);// 0x1d05078ea041
	int EquipBattery(const int ID, const float BatteryMax, const float Charge, const float CD);// 0x1d04078ea041
	void DiscardItemAndResetCharacterData(out const SolarItemData DiscardItem, const bool DiscardDataOnly);// 0x1d03078ea041
	void DiscardItem(SolarItemData DiscardItem);// 0x1cff078ea041
	void DelayCheckClearAbility(const int InItemID);// 0x1cfe078ea041
	void CommitEnergy(const int ID);// 0x1cfd078ea041
	bool ClearBackpackItemByID(const int InItemID);// 0x1cfc078ea041
	void CheckToGiveAbility(const int InItemID);// 0x1cfb078ea041
	void CheckToClearAbility(const int InItemID);// 0x1cfa078ea041
	bool CheckIsRecWeaponParts(const int ItemID);// 0x1cf9078ea041
	bool CheckIsEquippedDifferentScope(const int PartID);// 0x1cf8078ea041
	bool CheckCanAutoPickupWeaponPart(const int ItemID);// 0x1cf7078ea041
	float ChargeMain(const float Amount, enum Usage);// 0x1cf6078ea041
	float ChargeExtra(const float Amount, enum Usage);// 0x1cf4078ea041
	void CancelEnergy(const int ID);// 0x1cf3078ea041
	bool BatteryOverflow(int BatteryMax);// 0x1cf2078ea041
	enum AddBackpackItemByID(const int InItemID, const int InItemNum, const bool InDropItem);// 0x1cf0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerWeapon.SolarWeapon.Actor.Object
	float SpawnOffset;//[Offset: 0x9a8, Size: 0x4]
	SolarItemData ItemData;//[Offset: 0x9d0, Size: 0xb8]
	byte[] MarkedTeamIdList;//[Offset: 0xa88, Size: 0x10]
	byte bUseSceneActorOptimization;//[Offset: 0xa98, Size: 0x1]
	SphereComponent* SphereComponent;//[Offset: 0xaa0, Size: 0x8]
	Vector_NetQuantize DroppedLocation;//[Offset: 0xaa8, Size: 0xc]
	SolarCharacter* WeaponOwner;//[Offset: 0xab8, Size: 0x8]
	WeaponAnimationComponent* WeaponAnimationComponent;//[Offset: 0xac0, Size: 0x8]
	byte WeaponCurrentDiscardState;//[Offset: 0xac8, Size: 0x1]
	byte WeaponCurrentState;//[Offset: 0xac9, Size: 0x1]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0xad0, Size: 0x10]
	SoftObjectPath HoldMeshMaterialPath;//[Offset: 0xae0, Size: 0x18]
	MaterialInterface* OutlineBaseMat;//[Offset: 0xaf8, Size: 0x8]
	enum AttachState;//[Offset: 0xb00, Size: 0x1]
	ParticleSystemComponent*[] SkinExtraPSCArray;//[Offset: 0xb08, Size: 0x10]
	MaterialInstanceDynamic* MeshSubpassMaterial;//[Offset: 0xb28, Size: 0x8]
	MaterialInstanceDynamic*[] MeshDiscardMaterialArray;//[Offset: 0xb30, Size: 0x10]
	WeaponSkinData* WeaponSkinData;//[Offset: 0xb40, Size: 0x8]
	int WeaponSkinID;//[Offset: 0xb48, Size: 0x4]
	int ScopePartID;//[Offset: 0xb4c, Size: 0x4]
	int GripPartID;//[Offset: 0xb50, Size: 0x4]
	int StockPartID;//[Offset: 0xb54, Size: 0x4]
	int MuzzlePartID;//[Offset: 0xb58, Size: 0x4]
	int ClipPartID;//[Offset: 0xb5c, Size: 0x4]
	int DefaultSkinID;//[Offset: 0xb60, Size: 0x4]
	bool bIsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70, Size: 0x1]
	float LifespanAfterAutoDrop;//[Offset: 0xb74, Size: 0x4]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb78, Size: 0x1]
	ParticleSystem* SkinDedicatedSpecialEffect;//[Offset: 0xb80, Size: 0x8]
	ParticleSystem* MeshEffectForFPP;//[Offset: 0xb88, Size: 0x8]
	ParticleSystem* MeshEffectForTPP;//[Offset: 0xb90, Size: 0x8]
	ParticleSystemComponent* MeshEffectEmitterForFPP;//[Offset: 0xb98, Size: 0x8]
	ParticleSystemComponent* MeshEffectEmitterForTPP;//[Offset: 0xba0, Size: 0x8]
	WeaponRecoilComponent* RecoilComponent;//[Offset: 0xd40, Size: 0x8]
	WeaponSpreadAndRecoil* SpreadAndRecoil;//[Offset: 0xd48, Size: 0x8]
	SolarLandscapeListenerConfig LandscapeListenerConfig;//[Offset: 0xd54, Size: 0x10]
	void UpdateCharacterState(enum CharacterState, bool bIsOnGround, bool bResetState);// 0x56c5078ea041
	void UpdateCharacterPosture(bool IsCrouch);// 0x56c4078ea041
	void SetOpenScopeOnVehicle(const bool InbOpenScope);// 0x56c3078ea041
	void SetDedicatedSkinEffect(const WeaponSkinData* InSkinData);// 0x56c2078ea041
	void RequestUnlimitedAmmo(const bool InEnable);// 0x56c1078ea041
	void PostUpdateAppearance();// 0x56c0078ea041
	void OnSetWeaponSkinMesh(SkeletalMesh* InMesh, class Object InAnimClass);// 0x56bf078ea041
	void OnRep_WeaponCurrentStateChanged();// 0x56be078ea041
	void OnRep_WeaponCurrentDiscardStateChanged();// 0x56bd078ea041
	void OnRep_AttachState();// 0x56bc078ea041
	void OnClientMeshLodChanged(int LOD);// 0x56bb078ea041
	void NotifyThisItemWasPickedUp();// 0x56ba078ea041
	void K2_SwitchDrawDistance(bool Hold);// 0x56b9078ea041
	void K2_PlaySoundGroup(FName SoundGroupName, SoundGroupPlayContextByCharacter Context);// 0x56b8078ea041
	void K2_OnHold(bool bLocal);// 0x56b7078ea041
	void K2_OnDrop();// 0x56b6078ea041
	bool IsOpenedScopeOnVehicle();// 0x56b5078ea041
	bool IsItemWeapon();// 0x56b4078ea041
	bool IsExistPart(out const enum PartType);// 0x56b3078ea041
	void Hold(bool bInHold);// 0x56b2078ea041
	bool HasScope();// 0x56b1078ea041
	float GetWeaponSilencerMagnitude();// 0x56b0078ea041
	PlayerWeaponRecoilComponent* GetRecoilComp();// 0x56af078ea041
	int GetQualityByLevel(int Level);// 0x56ae078ea041
	int GetQuality();// 0x56ad078ea041
	byte GetItemCurrentState();// 0x56ac078ea041
	bool GetIsHolded();// 0x56ab078ea041
	Vector GetFPPLocation();// 0x56aa078ea041
	float GetFire2AnimPlayRate();// 0x56a9078ea041
	float GetDistanceToEyeWhenScope();// 0x56a8078ea041
	Vector GetCurrentScopeAimCenterPoint();// 0x56a7078ea041
	WeaponPartClipComp* GetCurrentClip();// 0x56a6078ea041
	void ClearSkinExtraPSC();// 0x56a5078ea041
	void ClearDedicatedSkinEffect();// 0x56a4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeapon.Actor.Object
	delegate OnWeaponUnhold;//[Offset: 0x350, Size: 0x10]
	WeaponMechanicalState WeaponState;//[Offset: 0x360, Size: 0x50]
	enum PrimaryShootingOption;//[Offset: 0x3b1, Size: 0x1]
	ImpactDisplayInfo ImpactInfo;//[Offset: 0x3b4, Size: 0x10]
	enum DefaultDamageType;//[Offset: 0x3d0, Size: 0x1]
	SolarVirtualBulletCollector* VirtualBulletCollector;//[Offset: 0x3d8, Size: 0x8]
	enum OverloadState;//[Offset: 0x3f8, Size: 0x1]
	float OverloadAccum;//[Offset: 0x3fc, Size: 0x4]
	CurveFloat* OverloadCurve;//[Offset: 0x410, Size: 0x8]
	float GatlingRollSpeed;//[Offset: 0x41c, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x420, Size: 0x4]
	float GatlingRollSpeedInterp;//[Offset: 0x424, Size: 0x4]
	int GatlingRepState;//[Offset: 0x428, Size: 0x4]
	float FireChargingTime;//[Offset: 0x448, Size: 0x4]
	int FireChargingPhase;//[Offset: 0x44c, Size: 0x4]
	float FireChargingSumTime;//[Offset: 0x450, Size: 0x4]
	float ChargeAnimationRate;//[Offset: 0x45c, Size: 0x4]
	class GameplayEffect* ChargingEffect;//[Offset: 0x460, Size: 0x8]
	AbilitySystemComponent* OwnerGAS;//[Offset: 0x470, Size: 0x8]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x480, Size: 0x8]
	FireMode[] FireModes;//[Offset: 0x490, Size: 0x10]
	Actor* WeaponHolder;//[Offset: 0x4a0, Size: 0x8]
	SolarCharacterBase* ControlWeaponCharacter;//[Offset: 0x4a8, Size: 0x8]
	GameplayAbilitySpecHandle[] EquippedAbilityHandles;//[Offset: 0x4b0, Size: 0x10]
	SolarCharacterBase* OldControlWeaponCharacter;//[Offset: 0x4c8, Size: 0x8]
	Actor* AimTarget;//[Offset: 0x4d0, Size: 0x8]
	class SolarWeaponProjectileSpline* ProjSplineClass;//[Offset: 0x4d8, Size: 0x8]
	SolarWeaponProjectileSpline* ProjSpline;//[Offset: 0x4e0, Size: 0x8]
	enum[] ShootingOptArray;//[Offset: 0x4e8, Size: 0x10]
	bool bShowSpecialEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 0x1]
	SingleWeaponConfig* Config;//[Offset: 0x500, Size: 0x8]
	Texture2D* WeaponIcon;//[Offset: 0x508, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfig;//[Offset: 0x510, Size: 0x8]
	int weaponid;//[Offset: 0x518, Size: 0x4]
	bool bTeamDamageEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 0x1]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 0x1]
	bool bInfinitePackageAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 0x1]
	int ExtraAmmo;//[Offset: 0x528, Size: 0x4]
	<ParticleSystem*,ParticleLoopListener*> LoopParticlesMap;//[Offset: 0x530, Size: 0x50]
	int ClipRemainAmmoCount;//[Offset: 0x580, Size: 0x4]
	<enum,WeaponAnimationInfo> WeaponAnimationMap;//[Offset: 0x588, Size: 0x50]
	bool bResetMuzzleIndexWhenStopFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 0x1]
	bool bResetMuzzleIndexAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 0x1]
	CameraShakeData[] WeaponFireCameraShakes;//[Offset: 0x5e8, Size: 0x10]
	CameraShakeData[] WeaponScopeFireCameraShakes;//[Offset: 0x5f8, Size: 0x10]
	CameraShakeData[] UsingSkillCameraShakes;//[Offset: 0x608, Size: 0x10]
	CameraShakeData[] WeaponChargingCameraShakes;//[Offset: 0x618, Size: 0x10]
	bool bUseEmptyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x629, Size: 0x1]
	SoftObjectPath FightMeshPath;//[Offset: 0x630, Size: 0x18]
	SkeletalMeshComponent* Mesh;//[Offset: 0x648, Size: 0x8]
	SkeletalMesh* OriginalMesh;//[Offset: 0x650, Size: 0x8]
	class WeaponAnimInstance* OriginalAnimBP;//[Offset: 0x658, Size: 0x8]
	SolarAkGameObject* SolarAkGameObjectPrivate;//[Offset: 0x660, Size: 0x8]
	int SoundFireAutoCount;//[Offset: 0x668, Size: 0x4]
	bool bTriggerSoundFireAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1]
	int OldSoundFireAutoCount;//[Offset: 0x670, Size: 0x4]
	bool bTriggerSoundB9A04Skill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 0x1]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x675, Size: 0x1]
	int SkillFireCount;//[Offset: 0x678, Size: 0x4]
	int SingleFireCount;//[Offset: 0x67c, Size: 0x4]
	int FireOverloadCount;//[Offset: 0x680, Size: 0x4]
	int FireLastCount;//[Offset: 0x684, Size: 0x4]
	OverrideBulletStruct OverrideBullet;//[Offset: 0x6e8, Size: 0x18]
	bool bLoadInitAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]
	bool bLoadAllCfgAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x701, Size: 0x1]
	<FireUniqueID,float> FireHitVerifyMap;//[Offset: 0x708, Size: 0x50]
	bool bDetectedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 0x1]
	ParticleSystemComponent*[] GatlingOverHeatPSCs;//[Offset: 0x768, Size: 0x10]
	bool bTracingAimTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 0x1]
	MaterialInterface* SpecialFireChargeMaterial;//[Offset: 0x788, Size: 0x8]
	<int,Color> SpecialFireChargeColorMap;//[Offset: 0x790, Size: 0x50]
	bool bPerspectiveForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0, Size: 0x1]
	enum CurrentSpreadState;//[Offset: 0x800, Size: 0x1]
	int ContinuousAddSpreadByFireCount;//[Offset: 0x804, Size: 0x4]
	bool bLastAddSpreadByFireIsHipFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 0x1]
	int8 LastAddSpreadByFireFireMode;//[Offset: 0x809, Size: 0x1]
	float LastAddSpreadByFireTime;//[Offset: 0x80c, Size: 0x4]
	float SpreadPrepareTimer;//[Offset: 0x810, Size: 0x4]
	float PendingBaseSpread;//[Offset: 0x814, Size: 0x4]
	float TargetBaseSpread;//[Offset: 0x818, Size: 0x4]
	float PendingAddSpread;//[Offset: 0x81c, Size: 0x4]
	float TargetAddSpread;//[Offset: 0x820, Size: 0x4]
	HitResult AimHitResult;//[Offset: 0x850, Size: 0x88]
	void WeaponStateOnRepReload();// 0x56a3078ea041
	int WeaponPostAkEventByName(FString InEventName1);// 0x56a2078ea041
	bool VerifyLastClipAmmo(int InFireModeType, int InLastClipAmmo);// 0x56a1078ea041
	bool UseEnergy(int Mode);// 0x56a0078ea041
	bool TryHitOperation(out const FireUniqueID FireUniqueID, const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, const float DamageScale, out const BulletHitDetailData HitDetailData, const bool IsNotDelay);// 0x569f078ea041
	void StopVibrate();// 0x569e078ea041
	void StopSoundDelay(const float DelayTime);// 0x569d078ea041
	void StopSound(enum Opt, int idx);// 0x569c078ea041
	void StopGatlingSound();// 0x569b078ea041
	void StartSound(enum Opt, int idx);// 0x569a078ea041
	void StartAsyncLoading();// 0x5699078ea041
	SolarProjBullet* SpawnProjWithFireID(out const SpawnBulletParam Param, out const FireUniqueID FireID, const bool Local);// 0x5698078ea041
	void ShowSpecialEffect(bool bShow);// 0x5697078ea041
	void SetWeaponAnimState(enum InWeaponAnimState);// 0x5696078ea041
	void SetReservedAmmoForce(int InFireModeType, int InAmount);// 0x5695078ea041
	void SetPrimaryShootingOption(enum Opt);// 0x5694078ea041
	void SetLastFireTime(int InFireModeType, float InFireTime);// 0x5693078ea041
	void ServerWeaponSound(const enum Opt, const bool TriggerSound);// 0x5692078ea041
	void ServerVirtualBulletShotHit(const SolarVirtualBulletHitParameter[] AllHitParams, Pawn* SourcePawn);// 0x5691078ea041
	void ServerVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter, float InTimestamp);// 0x5690078ea041
	void ServerUpdateMechanicalState(enum NewMechanicalState, enum NewSubFlags);// 0x568f078ea041
	void ServerUpdateGatlingRepState(int InState);// 0x568e078ea041
	void ServerSpawnProjWithVelocity(const SpawnProjParam Param);// 0x568d078ea041
	void ServerSpawnProjWithFireID(const SpawnBulletParam Param, const FireUniqueID FireID);// 0x568c078ea041
	void ServerSetTracingAimTarget(bool InbTracingAimTarget);// 0x568b078ea041
	void ServerSetPrimaryOption(const enum Opt);// 0x568a078ea041
	void ServerSetHipFire(const bool InbHipFire);// 0x5689078ea041
	void ServerResetFireCount();// 0x5688078ea041
	void ServerRequestDropWeapon();// 0x5687078ea041
	void ServerPlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength);// 0x5686078ea041
	void ServerInstantLineShot(const byte ModeIndex, const Vector_NetQuantize Start, const Vector_NetQuantize End, const float DamageScale, const MutiBulletHitData HitData);// 0x5685078ea041
	void ServerFireChargeShoot(const AmmoConfig* InAmmo, const int8 InFireChargingPhase, int InFireChargingTime);// 0x5684078ea041
	void ServerFireChargePhaseChange(const int8 InFireChargingPhase);// 0x5683078ea041
	void ServerChangeOverloadState(const enum InState);// 0x5682078ea041
	void ServerCanisterShot(const Vector_NetQuantize Start, const Vector_NetQuantize End, const MutiBulletHitData HitData);// 0x5681078ea041
	void ServerAddExpWithReason(int InExp, int InReasonID);// 0x5680078ea041
	void RuntimeUpdateData(int Cmd, FString Params);// 0x567f078ea041
	void ReceivePlayImpactPositionEffect(ParticleSystemComponent* PSC, out const Vector Position, const float Scale);// 0x567e078ea041
	void ReceiveChargingState(const int Index, const enum State);// 0x567d078ea041
	void PrimaryCost();// 0x567c078ea041
	void PlayVibrate(enum InType);// 0x567b078ea041
	void PlayReloadRestoreVibrate();// 0x567a078ea041
	void PlayReloadGetOldVibrate();// 0x5679078ea041
	void PlayFireVibrate();// 0x5678078ea041
	void PlayChargeVibrate();// 0x5677078ea041
	void PlayBulletHitEffect(out const HitResult HitResult, SolarBullet* Bullet, bool bForce, Pawn* HitCauser, float HitEffectScale);// 0x5676078ea041
	void PlayBoltVibrate();// 0x5675078ea041
	void PlayAutoSingleSound();// 0x5674078ea041
	void PlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength, bool bNeedNetMulticast, int AnimCount);// 0x5673078ea041
	void OnRep_WeaponState();// 0x5672078ea041
	void OnRep_TracingAimTarget();// 0x5671078ea041
	void OnRep_SoundFireSkillCast();// 0x5670078ea041
	void OnRep_SoundFireSingle();// 0x566f078ea041
	void OnRep_SoundFireOverload();// 0x566e078ea041
	void OnRep_SoundFireLast();// 0x566d078ea041
	void OnRep_SoundFireBurst();// 0x566c078ea041
	void OnRep_SoundFireAutoCount();// 0x566b078ea041
	void OnRep_SoundB9A04Skill();// 0x566a078ea041
	void OnRep_OverloadStateChange(enum PreviousState);// 0x5669078ea041
	void OnRep_ImpactPosition();// 0x5668078ea041
	void OnRep_FireModes();// 0x5667078ea041
	void OnRep_FireChargingPhase(int InOldFireChargingPhase);// 0x5666078ea041
	void OnRep_ExtraAmmo();// 0x5665078ea041
	void OnRep_ControlWeaponCharacterChanged(SolarCharacterBase* OldCharacter);// 0x5664078ea041
	void OnRep_ClipRemainAmmoCount(int LastClipRemainAmmoCount);// 0x5663078ea041
	void OnPlayMuzzleEffect();// 0x5662078ea041
	void OnLoadInitAssetComplete();// 0x5661078ea041
	void OnLoadCfgAssetsComplete();// 0x5660078ea041
	void OnInternalUnControlled();// 0x565f078ea041
	void OnInternalControlled(SolarCharacterBase* OwnerChar);// 0x565e078ea041
	void OnInstantLineShotHit(out const HitResult InHit, const float DamageScale);// 0x565d078ea041
	void OnInitFlowComplete();// 0x565c078ea041
	void OnGatlingRollChange(bool bIncrease);// 0x565b078ea041
	void OnFireChargeBurstCountChange(int BurstSum);// 0x565a078ea041
	enum NextShootingPrimaryOption();// 0x5659078ea041
	void LuaStopSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x5658078ea041
	void LuaStartSoundWithParameters(enum Opt, int idx, out const PlaySoundParams Params);// 0x5657078ea041
	void LoadInitAsset();// 0x5656078ea041
	void LoadAllCfgAssets();// 0x5655078ea041
	AmmoConfig* K2_GetOverrideAmmoConfigBase(int ModeIndex);// 0x5654078ea041
	SingleWeaponConfig* K2_GetCurrentConfig();// 0x5653078ea041
	bool IsVisible();// 0x5652078ea041
	bool IsShowCoolDownWidget();// 0x5651078ea041
	bool IsShotAimEnemy();// 0x5650078ea041
	bool IsScopeOpen();// 0x564f078ea041
	bool IsOpenedScope();// 0x564e078ea041
	bool IsHipFire();// 0x564d078ea041
	bool IsEnergyID(const int BulletItemID);// 0x564c078ea041
	bool IsControlled();// 0x564b078ea041
	bool IsCanFire();// 0x564a078ea041
	ParticleSystemComponent* InternalPlayEffectAttached(ParticleSystem* PS, SceneComponent* AttachToComponent, FName AttachPointName, AttachedEffectParam Param);// 0x5649078ea041
	ParticleSystemComponent* InternalPlayEffectAtLocation(const Object* WorldContext, ParticleSystem* PS, out const Vector Location, LocationEffectParam Param, bool bUseDistScale);// 0x5648078ea041
	void InternalClientPlayFiringEffects();// 0x5647078ea041
	bool InSameTeam();// 0x5646078ea041
	void InitConfigs();// 0x5645078ea041
	bool ImmediatelyFire(int idx, const bool bEnable);// 0x5644078ea041
	bool HasLoadInitAsset();// 0x5643078ea041
	bool HasLoadAllCfgAssets();// 0x5642078ea041
	bool HasInitConfigs();// 0x5641078ea041
	enum GetWeaponType();// 0x5640078ea041
	FString GetWeaponTextType();// 0x563f078ea041
	uint32 GetWeaponNoticeID(out const FName InNoticeType);// 0x563e078ea041
	int GetWeaponLevel();// 0x563d078ea041
	int GetWeaponID();// 0x563c078ea041
	Texture2D* GetWeaponIcon();// 0x563b078ea041
	enum GetWeaponBrand();// 0x563a078ea041
	AnimMontage* GetWeaponAnimSequence(const enum InMontageType);// 0x5639078ea041
	WeaponAnimationInfo GetWeaponAnimationInfo(const enum InMontageType);// 0x5638078ea041
	SlateBrush GetTriggerIcon(const int InFireModeType);// 0x5637078ea041
	int GetSpareAmmo(int InFireModeType);// 0x5636078ea041
	float GetSoundRTPCValue();// 0x5635078ea041
	SolarAkGameObject* GetSolarAkGameObject();// 0x5634078ea041
	int GetSkinID();// 0x5633078ea041
	float GetShotGunSpreadSeed();// 0x5632078ea041
	Vector GetShotDir(bool NeedSpread);// 0x5631078ea041
	Vector GetShootingTraceStartLocation();// 0x5630078ea041
	FString GetShootingPrimaryShootingOptionName(const enum Opt);// 0x562f078ea041
	int GetReservedAmmo(int idx);// 0x562e078ea041
	float GetReloadProgress();// 0x562d078ea041
	int GetPrimaryShootingOptionIndex();// 0x562c078ea041
	float GetPostFireDuration(int idx);// 0x562b078ea041
	WeaponPartsComponent* GetPartsComponent();// 0x562a078ea041
	float GetOverloadPercent();// 0x5629078ea041
	float GetOverloadMaxValue();// 0x5628078ea041
	SolarWeaponProjectileSpline* GetOrCreateWeaponProjectileSpline();// 0x5627078ea041
	int GetMaxAmmo(int idx, bool bWithExtraAmmoByChaAbility);// 0x5626078ea041
	float GetLastFireTime(int InFireModeType);// 0x5625078ea041
	bool GetIsVehicleMounted();// 0x5624078ea041
	bool GetIsSupportSecondaryFire();// 0x5623078ea041
	bool GetIsSupportAutoFire();// 0x5622078ea041
	bool GetIsSupportAssistAim();// 0x5621078ea041
	bool GetIsQuickScope();// 0x5620078ea041
	bool GetIsCoolDown(int Mode);// 0x561f078ea041
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x561e078ea041
	int GetFireModeNameLocalizationID(int InFireModeType);// 0x561d078ea041
	float GetFireInterval(int idx);// 0x561c078ea041
	void GetFireChargeInfo(out int OutChargingPhase, out float OutChargingTime, out float OutRate, out FireChargeData OutChargeData);// 0x561b078ea041
	float GetFireCD(int idx);// 0x561a078ea041
	ParticleSystem* GetDedicatedKillEffect();// 0x5619078ea041
	SoftObjectPath GetDedicatedDissolvedDeathFXPath();// 0x5618078ea041
	class ActorEffect GetDedicatedDissolvedDeathActorEffectClass();// 0x5617078ea041
	WeaponDebugFlag GetDebugFlag();// 0x5616078ea041
	int GetCurScopeType();// 0x5615078ea041
	enum GetCurrentShootingPrimaryOption();// 0x5614078ea041
	enum GetCurrentScopeType();// 0x5613078ea041
	FireChargeData GetCurrentFireChargeData(const AmmoConfig* InAmmo);// 0x5612078ea041
	AmmoConfig* GetCurrentFireChargeAmmoData(const AmmoConfig* InAmmo);// 0x5611078ea041
	int GetCurrentClipAmmo(int InFireModeType);// 0x5610078ea041
	bool GetCurrentChargeModePercent(int InFireModeType, out int OutChargeMode, out float OutChargePercent);// 0x560f078ea041
	int GetCostPerAttack();// 0x560e078ea041
	SolarCharacterBase* GetControlWeaponCharacter();// 0x560d078ea041
	float GetChargingPercent(int idx);// 0x560c078ea041
	void GetBulletHitEffectRot(out const HitResult HitResult, const SolarBullet* Bullet, out Rotator TargetPos, const bool bIsHittedShield);// 0x560b078ea041
	void GetBulletHitEffectPos(out const HitResult HitResult, out Vector TargetRot, float Offset);// 0x560a078ea041
	SolarBullet* GetBulletDefaultObject(const int idx, const AmmoConfig* AmmoCfg);// 0x5609078ea041
	class SolarBullet GetBulletClass(const int idx, const AmmoConfig* AmmoCfg);// 0x5608078ea041
	float GetBotAIDamageFactor();// 0x5607078ea041
	enum GetAmmoTriggerType(const int fireModeType);// 0x5606078ea041
	int GetAmmoItemID(int idx);// 0x5605078ea041
	bool GetAllInitAssetPath(out SoftObjectPath[] PathArray);// 0x5604078ea041
	bool GetAllCfgAssetsPath(out SoftObjectPath[] PathArray);// 0x5603078ea041
	AkComponent* GetAkComponent();// 0x5602078ea041
	void GetAimStartEnd(const AmmoConfig* InAmmo, out Vector OutStart, out Vector OutEnd, out Actor* OutTargetActor, bool NeedSpread);// 0x5601078ea041
	bool FireVerify_Location(const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x5600078ea041
	bool FireVerify_EffectRange(const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x55ff078ea041
	bool FireVerify_Block(const int FireMode, out const Vector StartLocation, out const Vector WeaponLocation, const float ServerTime, out const BulletHitDetailData HitDetailData);// 0x55fe078ea041
	bool FireValidate(const int idx, const float InLastShootTime);// 0x55fd078ea041
	enum FindMontageKeyFromWeaponAnim(const AnimMontage* InAnimation);// 0x55fc078ea041
	void EnterOverloadState();// 0x55fb078ea041
	void DestroyWeaponProjectileSpline();// 0x55fa078ea041
	void ClientVirtualBulletShot(const SolarVirtualBulletSpawnParameter InParameter);// 0x55f9078ea041
	void ClientPlayFiringEffects();// 0x55f8078ea041
	void ClientPlayAnimWithNetMulticast(enum InMontageType, float ExpectAnimLength);// 0x55f7078ea041
	void ClientNotifyUpdateReservedAmmoForce(int InFireModeType, int InAmount);// 0x55f6078ea041
	void ClientInstantLineShot(const byte ModeIndex, const HitResult[] HitResults, const Vector_NetQuantize End, const float DamageScale);// 0x55f5078ea041
	void ClientFireChargeShoot(const AmmoConfig* InAmmo, const int8 InFireChargingPhase, int InFireChargingTime);// 0x55f4078ea041
	void ClientCanisterShot(const Vector_NetQuantize Start, const WeaponShotHitResult[] ValidHits, const Vector_NetQuantize Target);// 0x55f3078ea041
	void ClearFireHitVerify();// 0x55f2078ea041
	bool CheckOpenParticleOptimization(int Bias);// 0x55f1078ea041
	bool CanOverload();// 0x55f0078ea041
	bool CanCauseTeamDamage();// 0x55ef078ea041
	float CalcScale(out const FireMode Mode);// 0x55ee078ea041
	int CalcCost(out const FireMode Mode);// 0x55ed078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemData.FastArraySerializerItem
	int ItemID;//[Offset: 0xc, Size: 0x4]
	int64 ThisID;//[Offset: 0x10, Size: 0x8]
	FString Name;//[Offset: 0x18, Size: 0x10]
	FString Icon;//[Offset: 0x28, Size: 0x10]
	FString Info;//[Offset: 0x38, Size: 0x10]
	int count;//[Offset: 0x48, Size: 0x4]
	enum ItemType;//[Offset: 0x4c, Size: 0x4]
	int Quality;//[Offset: 0x50, Size: 0x4]
	int MaxPile;//[Offset: 0x54, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	FString AbilityBP;//[Offset: 0x60, Size: 0x10]
	FString ItemBP;//[Offset: 0x70, Size: 0x10]
	int DropTime;//[Offset: 0x80, Size: 0x4]
	int UnPickupTime;//[Offset: 0x84, Size: 0x4]
	bool IsRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	bool IsPickupLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1]
	int64 UserId;//[Offset: 0x90, Size: 0x8]
	int Level;//[Offset: 0x98, Size: 0x4]
	int Prize;//[Offset: 0x9c, Size: 0x4]
	float CurValue;//[Offset: 0xa0, Size: 0x4]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	enum AppearanceType;//[Offset: 0xa5, Size: 0x1]
	bool bUpdateOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 0x1]
	int SourceType;//[Offset: 0xa8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FireUniqueID
	uint32 Data;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BulletHitDetailData
	Pawn* SourcePawn;//[Offset: 0x0, Size: 0x8]
	Actor* HitActor;//[Offset: 0x8, Size: 0x8]
	PrimitiveComponent* HitComponent;//[Offset: 0x10, Size: 0x8]
	Vector HitActorLocation;//[Offset: 0x18, Size: 0xc]
	Vector HitLocation;//[Offset: 0x24, Size: 0xc]
	Vector HitNormal;//[Offset: 0x30, Size: 0xc]
	FName HitBone;//[Offset: 0x3c, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x44, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpawnBulletParam
	Vector Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float SpeedScale;//[Offset: 0x18, Size: 0x4]
	int Mode;//[Offset: 0x1c, Size: 0x4]
	bool TriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	float Scale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	bool bStartBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponMechanicalState
	enum UniqueState;//[Offset: 0x0, Size: 0x1]
	enum SideFlags;//[Offset: 0x4, Size: 0x4]
	SolarWeapon* Weapon;//[Offset: 0x10, Size: 0x8]
	SingleWeaponConfig* Config;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SingleWeaponConfig.DataAsset.Object
	WeaponDebugFlag DebugFlag;//[Offset: 0x30, Size: 0x4]
	enum WeaponBrand;//[Offset: 0x34, Size: 0x1]
	enum WeaponType;//[Offset: 0x35, Size: 0x1]
	bool bSupportSecondaryFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	<FString,float> CharacterStateWeightMap;//[Offset: 0x38, Size: 0x50]
	MoveSpeedReduceCurveConfig[] MoveSpeedReduceCurveConfigs;//[Offset: 0x88, Size: 0x10]
	float MoveSpeedReduceBonusInHipFire;//[Offset: 0x98, Size: 0x4]
	float MoveSpeedReduceBonusInAdsHipFire;//[Offset: 0x9c, Size: 0x4]
	SolarWeaponFireSocketData[] FireSockets;//[Offset: 0xa0, Size: 0x10]
	bool bIsSingleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bCanSuspendBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	bool bIsHeavyFireWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1]
	bool bIsFlamethrowerWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 0x1]
	bool bSupportSingleShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	bool bSupportAutoShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 0x1]
	bool bSupportBurstShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 0x1]
	float MaxSpread;//[Offset: 0xb8, Size: 0x4]
	float MinSpread;//[Offset: 0xbc, Size: 0x4]
	float HipFireBaseSpread;//[Offset: 0xc0, Size: 0x4]
	float ShoulderFireBaseSpread;//[Offset: 0xc4, Size: 0x4]
	float ADSBaseSpread;//[Offset: 0xc8, Size: 0x4]
	float VhADSBaseSpread;//[Offset: 0xcc, Size: 0x4]
	bool bCalcSpreadByStandardDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	float SpreadStandardDistance;//[Offset: 0xd4, Size: 0x4]
	float SpreadStandardOriginMaxRange;//[Offset: 0xd8, Size: 0x4]
	bool bCalcSpreadByDistributionCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	RuntimeFloatCurve SpreadDistributionCurve;//[Offset: 0xe0, Size: 0x88]
	<FString,float> SpreadCOPMap;//[Offset: 0x168, Size: 0x50]
	float SpreadStatuSpeed;//[Offset: 0x1b8, Size: 0x4]
	<FString,float> SpreadStatuIncreaseCoefficient;//[Offset: 0x1c0, Size: 0x50]
	<FString,float> SpreadStatuReduceCoefficient;//[Offset: 0x210, Size: 0x50]
	Vector2D[] CustomSpreadArray;//[Offset: 0x260, Size: 0x10]
	class SolarWeaponAT_CtrlFireBase* CtrlFireTaskClass;//[Offset: 0x270, Size: 0x8]
	class SolarWeaponAT_FireBase* FireTaskClass;//[Offset: 0x278, Size: 0x8]
	AmmoConfig* PrimaryAmmo;//[Offset: 0x280, Size: 0x8]
	int PrimaryAmmoIndex;//[Offset: 0x288, Size: 0x4]
	int PrimaryAmmoCap;//[Offset: 0x28c, Size: 0x4]
	AmmoConfig* SecondaryAmmo;//[Offset: 0x290, Size: 0x8]
	int SecondaryAmmoIndex;//[Offset: 0x298, Size: 0x4]
	int SecondaryAmmoCap;//[Offset: 0x29c, Size: 0x4]
	AmmoConfig* UpgradedSecAmmo;//[Offset: 0x2a0, Size: 0x8]
	LinearColor UpgradedSecAmmoColor;//[Offset: 0x2a8, Size: 0x10]
	bool bNeedOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	float OverloadMaxValue;//[Offset: 0x2bc, Size: 0x4]
	float NormalOverloadCoolingRate;//[Offset: 0x2c0, Size: 0x4]
	CurveFloat* NormalOverloadCoolingCurve;//[Offset: 0x2c8, Size: 0x8]
	float OverloadCoolingPeriod;//[Offset: 0x2d0, Size: 0x4]
	CurveFloat* OverloadReduceRateCurve;//[Offset: 0x2d8, Size: 0x8]
	float OverloadWarningRate;//[Offset: 0x2e0, Size: 0x4]
	bool bCanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	float AutoFireDelayMs;//[Offset: 0x2e8, Size: 0x4]
	float AutoFireEndDelayMs;//[Offset: 0x2ec, Size: 0x4]
	float AutoFireCompensationRate;//[Offset: 0x2f0, Size: 0x4]
	class GameplayEffect* AutoFireEffectClass;//[Offset: 0x2f8, Size: 0x8]
	bool bCanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	WeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAll;//[Offset: 0x308, Size: 0x60]
	WeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAllGamepad;//[Offset: 0x368, Size: 0x60]
	SolarWeaponFPPData DefaultFPPData;//[Offset: 0x3c8, Size: 0x68]
	SolarWeaponFPPConfig[] FPPConfigByAspectRatioArray;//[Offset: 0x430, Size: 0x10]
	bool bOneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	float ScopeOpenTime;//[Offset: 0x444, Size: 0x4]
	float ScopeOpenFOVTimeScale;//[Offset: 0x448, Size: 0x4]
	enum[] SupportChangeTypeArray;//[Offset: 0x450, Size: 0x10]
	int[] DefaultPartsArray;//[Offset: 0x460, Size: 0x10]
	bool bIsGatling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 0x1]
	float GatlingRotaryAcceleration;//[Offset: 0x474, Size: 0x4]
	float GatlingFireRotarySpeed;//[Offset: 0x478, Size: 0x4]
	float GatlingMaxRotarySpeed;//[Offset: 0x47c, Size: 0x4]
	float GatlingHoldTime;//[Offset: 0x480, Size: 0x4]
	float GatlingRotaryAttenuation;//[Offset: 0x484, Size: 0x4]
	float GatlingScatteringMagnification;//[Offset: 0x488, Size: 0x4]
	ParticleSystem* GatlingOverHeatSmokeEffect;//[Offset: 0x490, Size: 0x8]
	class GameplayAbility[] GasAbilities;//[Offset: 0x498, Size: 0x10]
	float HeadshotDamageFactor;//[Offset: 0x4a8, Size: 0x4]
	bool bShowCoolDownWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 0x1]
	SolarWeaponCrosshairData CrosshairWidgetData;//[Offset: 0x4b0, Size: 0x38]
	SoftObjectPath WeaponIcon;//[Offset: 0x4e8, Size: 0x18]
	SlateBrush PrimaryFireBrush;//[Offset: 0x500, Size: 0xe0]
	int PrimaryFireTxt;//[Offset: 0x5e0, Size: 0x4]
	SlateBrush SecondaryFireBrush;//[Offset: 0x5f0, Size: 0xe0]
	int SecondaryFireTxt;//[Offset: 0x6d0, Size: 0x4]
	FString WeaponTextType;//[Offset: 0x6d8, Size: 0x10]
	SoftObjectPath ItemIcon;//[Offset: 0x6e8, Size: 0x18]
	SoftObjectPath UpgradeParticleSystem;//[Offset: 0x700, Size: 0x18]
	void InitSupportChangeTypeArray(int[] Data);// 0x4d2e078ea041
	void InitStatuSpreadCoefficient(out const FString[] Increasekeys, out const float[] Increasevalues, out const FString[] Reducekeys, out const float[] Reducevalues);// 0x4d2d078ea041
	void InitSpreadData(float Max, float Min, float hipbase, float adsbase, float vhadsbase, float statuspeed);// 0x4d2c078ea041
	void InitSpreadCOPMap(out const FString[] Keys, out const float[] Values);// 0x4d2b078ea041
	void InitScopeData(bool onekey, float scopetime);// 0x4d2a078ea041
	void InitOverload(bool InAllow, float InMax, float InNormalCoolingRate, float InCoolingPeriod, float InOverloadWarningRate);// 0x4d29078ea041
	void InitBase(int WPType);// 0x4d28078ea041
	bool GetIsSupportPart(enum Type);// 0x4d27078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponDebugFlag
	bool bIgnoreActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bExtraInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bMechanicalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bShowShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MoveSpeedReduceCurveConfig
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	RuntimeFloatCurve MoveSpeedReduceCurveOnHoldingWeapon;//[Offset: 0x50, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponFireSocketData
	FName[] MultiBulletSocketNames;//[Offset: 0x0, Size: 0x10]
	FName[] MuzzleSocketNames;//[Offset: 0x10, Size: 0x10]
	FName[] AdsMuzzleSocketNames;//[Offset: 0x20, Size: 0x10]
	FName[] MuzzleBlockCheckSocketNames;//[Offset: 0x30, Size: 0x10]
	FName[] MultiCastShellSocketNames;//[Offset: 0x40, Size: 0x10]
	FName[] AdsMultiCastShellSocketNames;//[Offset: 0x50, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponAT_CtrlFireBase.SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	delegate OnDoFire;//[Offset: 0xa8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	delegate OnTaskEnd;//[Offset: 0x78, Size: 0x10]
	GameplayAbility* OwnerAbility;//[Offset: 0x88, Size: 0x8]
	SolarCharacter* TaskCharacter;//[Offset: 0x90, Size: 0x8]
	WeaponSystemBase* TaskWeaponSysBase;//[Offset: 0x98, Size: 0x8]
	SolarWeaponAT_TaskBase* CreateTaskDynamically(class SolarWeaponAT_TaskBase RealClass, GameplayAbility* OwningAbility, const FName TaskInstanceName, SolarCharacter* InCharacter);// 0x5f4a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbilityTask.AbilityTask.GameplayTask.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AbilityTask.GameplayTask.Object
	GameplayAbility* Ability;//[Offset: 0x60, Size: 0x8]
	AbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x68, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSystemBase.ActorComponent.Object
	WeaponSystemAutoFire* WeaponSystemAutoFire;//[Offset: 0xf8, Size: 0x8]
	SolarWeaponFireInputResolver* WeaponSystemFireInputResolver;//[Offset: 0x100, Size: 0x8]
	WeaponSystemAssistAim* WeaponSystemAssistAim;//[Offset: 0x108, Size: 0x8]
	WeaponSystemInteract WeaponSysIneract;//[Offset: 0x110, Size: 0x50]
	Actor* MyPossessPawn;//[Offset: 0x170, Size: 0x8]
	void WeaponAssistSystemTick(float InDeltaTime);// 0x6201078ea041
	void SwitchSingleWeaponPressMode();// 0x6200078ea041
	void SwitchScopeButtonRotatableMode();// 0x61ff078ea041
	void SwitchQuickScopeActivited();// 0x61fe078ea041
	void SwitchDoScopeMode();// 0x61fd078ea041
	void SwitchAutoScopeEnable();// 0x61fc078ea041
	void SwitchAutoFire(bool BOpened);// 0x61fb078ea041
	void SwitchAssistAim(bool bOn_Touch, bool bOn_Gamepad);// 0x61fa078ea041
	void SetCurrentActiveWeapon(SolarWeapon* Weapon);// 0x61f9078ea041
	void SetCrosshairVisible(bool InVisible);// 0x61f8078ea041
	void SetAutoScope(bool bOpen);// 0x61f7078ea041
	void ServerPlayNoAmmoSound();// 0x61f6078ea041
	void ReceiveMsgFromPlayer(bool bClient, out const PlayerWeaponMsg Msg);// 0x61f5078ea041
	void OnTouchScreen();// 0x61f4078ea041
	void OnToggleAutoFire();// 0x61f3078ea041
	void OnToggleAssistAim();// 0x61f2078ea041
	void OnOtherPlayerSpectateMyOwner();// 0x61f1078ea041
	void NetMulticastPlayNoAmmoSound();// 0x61f0078ea041
	bool IsUsingSpecialQuickAdsButton();// 0x61ef078ea041
	SolarWeaponFireInputResolver* GetFireInputResolver();// 0x61ee078ea041
	void GetFireButtonInputState(out enum OutLeftFireButton, out enum OutRightFireButton, out enum OutQuickAdsButton);// 0x61ed078ea041
	WeaponSysStateStruct GetCurrentState();// 0x61ec078ea041
	bool CheckAutoFire(out bool canfire);// 0x61eb078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerWeaponMsg
	byte MsgType;//[Offset: 0x0, Size: 0x1]
	FString MsgDetail;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponFireInputResolver.Object
	enum GetRightFireButtonState();// 0x5f93078ea041
	enum GetQuickAdsButtonState();// 0x5f92078ea041
	enum GetLeftFireButtonState();// 0x5f91078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSysStateStruct
	int State;//[Offset: 0x0, Size: 0x4]
	bool bPost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSystemAutoFire.Object
	void OnWeaponFire();// 0x61ea078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSystemAssistAim.Object
	WeaponAssistAimWeaponConfig* CurrentAssistAimWpnCfg;//[Offset: 0x48, Size: 0x8]
	void RefreshCurrentWeapon(SolarWeapon* Weapon);// 0x61e9078ea041
	bool Init(Actor* InWeaponHolder);// 0x61e8078ea041
	bool GetActive();// 0x61e7078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAssistAimWeaponConfig.DataAsset.Object
	float MaxTargetDetectionDistance;//[Offset: 0x30, Size: 0x4]
	BaseFollowSpeedByTag[] BaseFollowSpeedByTags;//[Offset: 0x38, Size: 0x10]
	GameplayTagRequirements TargetVelocityFollowTagRequirements;//[Offset: 0x48, Size: 0x50]
	float TargetVelocityFollowDeactivationDelay;//[Offset: 0x98, Size: 0x4]
	RuntimeFloatCurve TargetVelocityFollowHorizontalRatioCurve;//[Offset: 0xa0, Size: 0x88]
	RuntimeFloatCurve TargetVelocityFollowVerticalRatioCurve;//[Offset: 0x128, Size: 0x88]
	float TargetVelocityFollowHorizontalRatioCurveScale;//[Offset: 0x1b0, Size: 0x4]
	float TargetVelocityFollowVerticalRatioCurveScale;//[Offset: 0x1b4, Size: 0x4]
	float TargetVelocityFollowMaxHorizontalSpeed;//[Offset: 0x1b8, Size: 0x4]
	float TargetVelocityFollowMaxVerticalSpeed;//[Offset: 0x1bc, Size: 0x4]
	RuntimeFloatCurve TargetVelocityFollowRatioScaleByDistanceCurve;//[Offset: 0x1c0, Size: 0x88]
	RuntimeFloatCurve GlobalSensitivityScaleCurve;//[Offset: 0x248, Size: 0x88]
	float GlobalSensitivityScaleCurveScale;//[Offset: 0x2d0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BaseFollowSpeedByTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	float SameTargetTriggerCooldown;//[Offset: 0x50, Size: 0x4]
	float HorizontalSpeed;//[Offset: 0x54, Size: 0x4]
	float VerticalSpeed;//[Offset: 0x58, Size: 0x4]
	RuntimeFloatCurve SpeedScaleByDistanceCurve;//[Offset: 0x60, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSystemInteract
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponAT_FireBase.SolarWeaponAT_TaskBase.SolarAbilityTask.AbilityTask.GameplayTask.Object
	AmmoConfig* Ammo;//[Offset: 0xc0, Size: 0x8]
	void K2_RequireEndFireTask();// 0x5f4e078ea041
	void K2_RealFireTick(float DeltaTime);// 0x5f4d078ea041
	void K2_PrepareRealFire();// 0x5f4c078ea041
	void K2_ActivateRealFire();// 0x5f4b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmoConfig.DataAsset.Object
	enum HoldAction;//[Offset: 0x30, Size: 0x1]
	FireChargeData[] FireChargeDatas;//[Offset: 0x38, Size: 0x10]
	FString FireChargeStopSoundName;//[Offset: 0x48, Size: 0x10]
	float ChargingToleranceEndTime;//[Offset: 0x58, Size: 0x4]
	float ChargingWorkingEndTime;//[Offset: 0x5c, Size: 0x4]
	float ChargingHoldingEndTime;//[Offset: 0x60, Size: 0x4]
	float ChargingTrajectoryTime;//[Offset: 0x64, Size: 0x4]
	bool bScaleHitEffectByChargingTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x6c, Size: 0x4]
	bool bForceFullShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxChargingDamageScale;//[Offset: 0x74, Size: 0x4]
	float DeltaAngle;//[Offset: 0x78, Size: 0x4]
	FString Name;//[Offset: 0x80, Size: 0x10]
	FString Des;//[Offset: 0x90, Size: 0x10]
	int PropID;//[Offset: 0xa0, Size: 0x4]
	float LifeTime;//[Offset: 0xa4, Size: 0x4]
	enum FireMethodType;//[Offset: 0xa8, Size: 0x1]
	enum TrajectoryType;//[Offset: 0xa9, Size: 0x1]
	float CustomValue;//[Offset: 0xac, Size: 0x4]
	class SolarBullet* BulletClass;//[Offset: 0xb0, Size: 0x8]
	SoftClassPath BulletClassPath;//[Offset: 0xb8, Size: 0x18]
	enum TriggerType;//[Offset: 0xd0, Size: 0x1]
	float MaxRange;//[Offset: 0xd4, Size: 0x4]
	float EffRange;//[Offset: 0xd8, Size: 0x4]
	float Radius;//[Offset: 0xdc, Size: 0x4]
	float InitSpeed;//[Offset: 0xe0, Size: 0x4]
	enum FireCostType;//[Offset: 0xe4, Size: 0x1]
	int FireCostPerAttack;//[Offset: 0xe8, Size: 0x4]
	int FireSpeedChangeTime;//[Offset: 0xec, Size: 0x4]
	float FireSpeedChangeCOP;//[Offset: 0xf0, Size: 0x4]
	float FastestFireInterval;//[Offset: 0xf4, Size: 0x4]
	float SlowestFireInterval;//[Offset: 0xf8, Size: 0x4]
	float BaseFireInterval;//[Offset: 0xfc, Size: 0x4]
	float FireIntervalRevertPreTime;//[Offset: 0x100, Size: 0x4]
	float FireIntervalReavertSpeed;//[Offset: 0x104, Size: 0x4]
	float BoltActionTime;//[Offset: 0x108, Size: 0x4]
	float StartBoltDuration;//[Offset: 0x10c, Size: 0x4]
	float FirePrepareTime;//[Offset: 0x110, Size: 0x4]
	float FireStateBreakTime;//[Offset: 0x114, Size: 0x4]
	float FireStreakBreakTime;//[Offset: 0x118, Size: 0x4]
	float BaseReloadTime;//[Offset: 0x11c, Size: 0x4]
	float ReloadBoltTime;//[Offset: 0x120, Size: 0x4]
	float PostFireOverload;//[Offset: 0x124, Size: 0x4]
	bool bPlayHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bPlayExplodeSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	float FlySoundReceiveRadius;//[Offset: 0x12c, Size: 0x4]
	float FlySoundIgnoreDistance;//[Offset: 0x130, Size: 0x4]
	int SingleSoundCount;//[Offset: 0x134, Size: 0x4]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x138, Size: 0x10]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x148, Size: 0x10]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x158, Size: 0x10]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x168, Size: 0x10]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x178, Size: 0x10]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x188, Size: 0x10]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x198, Size: 0x10]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1a8, Size: 0x10]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1b8, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x1c8, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1d8, Size: 0x10]
	FString Play_Fire_Empty_1p;//[Offset: 0x1e8, Size: 0x10]
	FString Play_Fire_Empty_3p;//[Offset: 0x1f8, Size: 0x10]
	FString Play_Fire_Empty_3p_Enemy;//[Offset: 0x208, Size: 0x10]
	CurveFloat* PostFireSpreadCurveStruct;//[Offset: 0x218, Size: 0x8]
	float VhADSSpreadCOP;//[Offset: 0x220, Size: 0x4]
	float ADSSpreadCOP;//[Offset: 0x224, Size: 0x4]
	float SpreadFirePreTime;//[Offset: 0x228, Size: 0x4]
	float SpreadPostFireSpeed;//[Offset: 0x22c, Size: 0x4]
	float SpreadRestorePreTime;//[Offset: 0x230, Size: 0x4]
	float SpreadRestoreSpeed;//[Offset: 0x234, Size: 0x4]
	WeaponFireTPPAnimConfig TPPRecoilConfig;//[Offset: 0x238, Size: 0x28]
	WeaponFireFPPAnimConfig FPPRecoilConfigNoScope;//[Offset: 0x260, Size: 0x70]
	WeaponFireFPPAnimConfig FPPRecoilConfigWithScope;//[Offset: 0x2d0, Size: 0x70]
	AmmonVerticalRecoilStruct PitchRecoilStruct;//[Offset: 0x340, Size: 0x30]
	AmmonHorizontalRecoilStruct YawRecoilStruct;//[Offset: 0x370, Size: 0x30]
	AmmonRecoilRollStruct RollRecoilStruct;//[Offset: 0x3a0, Size: 0x40]
	AmmonRecoilScope ScopeRecoil;//[Offset: 0x3e0, Size: 0xb8]
	float ADSRecoilCOP;//[Offset: 0x498, Size: 0x4]
	<FString,float> RecoilCOPMap;//[Offset: 0x4a0, Size: 0x50]
	byte[] IgnoreEPhysicalSurface;//[Offset: 0x4f0, Size: 0x10]
	float ProjectileMaxGravity;//[Offset: 0x500, Size: 0x4]
	float ParticleStartDistance;//[Offset: 0x504, Size: 0x4]
	float TrajectoryStartDistance;//[Offset: 0x508, Size: 0x4]
	bool bPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 0x1]
	bool bTakeDamageAfterDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 0x1]
	CurveFloat* PenetrationDamageMultiplierCurve;//[Offset: 0x510, Size: 0x8]
	CurveFloat* CylinderDamageMultiplierCurve;//[Offset: 0x518, Size: 0x8]
	SlateBrush TriggerIcon;//[Offset: 0x520, Size: 0xe0]
	enum VirtualBulletType;//[Offset: 0x600, Size: 0x1]
	bool bStepOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 0x1]
	bool bUseSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x602, Size: 0x1]
	float MaxSimulationTimeStep;//[Offset: 0x604, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x608, Size: 0x4]
	AmmoConfig* TraceOverrideAmmo;//[Offset: 0x610, Size: 0x8]
	byte TraceTargetFlag;//[Offset: 0x618, Size: 0x1]
	TracerBulletData TracerData;//[Offset: 0x620, Size: 0x40]
	CurveFloat* BulletOffsetCurve;//[Offset: 0x660, Size: 0x8]
	Vector2D[] BulletOffsetAngles;//[Offset: 0x668, Size: 0x10]
	CurveFloat* BulletDamageCurve;//[Offset: 0x678, Size: 0x8]
	CurveFloat* BulletScaleCurve;//[Offset: 0x680, Size: 0x8]
	CurveFloat* BulletMovementCurve;//[Offset: 0x688, Size: 0x8]
	bool bThirdPesonViewXScaledByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	bool bForceApplyAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 0x1]
	class SolarAbility[] AmmoAbilityClasses;//[Offset: 0x698, Size: 0x10]
	class SolarAbility[] AmmoAbilityClassesOnDestroyed;//[Offset: 0x6a8, Size: 0x10]
	class SolarAbility* AmmoAbilityClassesOnSelf;//[Offset: 0x6b8, Size: 0x8]
	int NameLocalTextIDNumber;//[Offset: 0x6c0, Size: 0x4]
	int DescriptionLocalTextIDNumber;//[Offset: 0x6c4, Size: 0x4]
	int RangeLocalTextID;//[Offset: 0x6c8, Size: 0x4]
	int DifficultyLocalTextID;//[Offset: 0x6cc, Size: 0x4]
	SolarDamageInfo DamageInfo;//[Offset: 0x6d0, Size: 0x40]
	SolarDamageInfo DestroyDamageInfo;//[Offset: 0x710, Size: 0x40]
	void InitVerticalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x44d2078ea041
	void InitSpreadData(float adscop, float vhadscop, float firepre, float changespeed, float restorepre, float restorespeed);// 0x44d1078ea041
	void InitScopeRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x44d0078ea041
	void InitScopeAndCrossHairVibration(const float ScopeVMaxDistanceOffSet, const float ScopeVVibrationDuration, const float ScopeHMaxDistanceOffSet, const float ScopeHVibrationDuration, const float ScopeVContinuousFallingDuration, const float ScopeVContinuousFallingPointIndex, const float VMaxDistanceOffSetScale, const float VVibrationDurationScale, const float VSingleOffSetScale, const float VContinuousOffSetScale, const float HMaxDistanceOffSetScale, const float HVibrationDurationScale, const float HSingleOffSetScale, const float HContinuousOffSetScale, const float HOffSetProbabilityScale);// 0x44cf078ea041
	void InitRollRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax, float adscop);// 0x44ce078ea041
	void InitRecoilCOPMap(out const FString[] Keys, out const float[] Values);// 0x44cd078ea041
	void InitPostFireSpreadCurveStruct(FString Path);// 0x44cc078ea041
	void InitHorizontalRecoilStruct(float CostTime, int AIndex, float AMin, float AMax, int BIndex, float BMin, float BMax);// 0x44cb078ea041
	void InitBaseData(int Trigger);// 0x44ca078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FireChargeData
	bool IfContinuousCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ChargeTime;//[Offset: 0x4, Size: 0x4]
	CurveFloat* ChargeDamageRadiusCurve;//[Offset: 0x8, Size: 0x8]
	CurveFloat* ChargeDamageMagnificationCurve;//[Offset: 0x10, Size: 0x8]
	bool IfPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	AmmoConfig* OverrideAmmo;//[Offset: 0x20, Size: 0x8]
	int OverrideAmmoID;//[Offset: 0x28, Size: 0x4]
	FString ChargeSoundName;//[Offset: 0x30, Size: 0x10]
	FString ChargeSoundEnemyName;//[Offset: 0x40, Size: 0x10]
	FString FireSoundName;//[Offset: 0x50, Size: 0x10]
	FString FireSoundEnemyName;//[Offset: 0x60, Size: 0x10]
	bool IfBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	CurveFloat* BulletBurstCountCurve;//[Offset: 0x78, Size: 0x8]
	bool IfCostToChargeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int FireCostFullShot;//[Offset: 0x84, Size: 0x4]
	bool IfForceFullShotCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bNeedPlayCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	CurveFloat* AmmoSpeedScaleCurve;//[Offset: 0x90, Size: 0x8]
	CurveFloat* AmmoEffectXScaleCurve;//[Offset: 0x98, Size: 0x8]
	CurveFloat* AmmoEffectYZScaleCurve;//[Offset: 0xa0, Size: 0x8]
	CurveFloat* OverloadCurve;//[Offset: 0xa8, Size: 0x8]
	float ChargeAnimationRate;//[Offset: 0xb0, Size: 0x4]
	CurveFloat* DeflectionAngleCurve;//[Offset: 0xb8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBullet.Actor.Object
	float TotalEffectTime;//[Offset: 0x228, Size: 0x4]
	bool bAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]
	bool bShowHitCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 0x1]
	bool bForceShowHitOnPenetrable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e, Size: 0x1]
	bool bShowHitToTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22f, Size: 0x1]
	bool bShowHitWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	ParticleSystem* BulletEffect;//[Offset: 0x238, Size: 0x8]
	ParticleSystem* TrajectoryEffect;//[Offset: 0x240, Size: 0x8]
	ParticleSystem* TrajectoryEffectOther;//[Offset: 0x248, Size: 0x8]
	SoftObjectPath SimpleCanisterShotEffectPath;//[Offset: 0x250, Size: 0x18]
	ParticleSystem* TrajectoryBeamEffect;//[Offset: 0x268, Size: 0x8]
	ParticleSystem* TrajectoryBeamEffectOther;//[Offset: 0x270, Size: 0x8]
	ParticleSystem* HitEffect;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* MuzzleEffect;//[Offset: 0x280, Size: 0x8]
	bool bKeepOneActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	ParticleSystem* MuzzleEffectScope;//[Offset: 0x290, Size: 0x8]
	ParticleSystem* MuzzleEffectOther;//[Offset: 0x298, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffect;//[Offset: 0x2a0, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectScope;//[Offset: 0x2a8, Size: 0x8]
	ParticleSystem* FlameArresterMuzzleEffectOther;//[Offset: 0x2b0, Size: 0x8]
	ParticleSystem* SpecialEffect;//[Offset: 0x2b8, Size: 0x8]
	ParticleSystem* DecalEffect;//[Offset: 0x2c0, Size: 0x8]
	ParticleSystem* DecalEffect2;//[Offset: 0x2c8, Size: 0x8]
	SoftObjectPath ShieldEffect;//[Offset: 0x2d0, Size: 0x18]
	bool bOverrideCharacterHitFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	<byte,SoftObjectPath> PhysicsHitEffects;//[Offset: 0x2f0, Size: 0x50]
	float DecalLifeSpan;//[Offset: 0x340, Size: 0x4]
	ParticleSystem* ShellCaseEffect;//[Offset: 0x348, Size: 0x8]
	ParticleSystem* ShellCaseEffectOnScope;//[Offset: 0x350, Size: 0x8]
	bool CanExplodeWhenOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	FString HoldingPreViewSound_1P;//[Offset: 0x360, Size: 0x10]
	FString HoldingPreViewSound_3P;//[Offset: 0x370, Size: 0x10]
	byte BulletCollisionType;//[Offset: 0x380, Size: 0x1]
	void OnPlayImpactEffect(ParticleSystemComponent* PSC);// 0x4f6d078ea041
	SoftObjectPath GetHitPhysicEffectPath(out const byte HitSurface);// 0x4f6c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponFireTPPAnimConfig
	float SingleFirePulse;//[Offset: 0x0, Size: 0x4]
	float SingleStiffnessCoefficient;//[Offset: 0x4, Size: 0x4]
	float LoopFirePulse;//[Offset: 0x8, Size: 0x4]
	float LoopStiffnessCoefficient;//[Offset: 0xc, Size: 0x4]
	float RecoverSpeed;//[Offset: 0x10, Size: 0x4]
	float BlendSpaceScale;//[Offset: 0x14, Size: 0x4]
	BlendSpace* BlendSpace;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponFireFPPAnimConfig
	float SingleFireStraightPulse;//[Offset: 0x0, Size: 0x4]
	float SingleStiffnessCoefficient;//[Offset: 0x4, Size: 0x4]
	float SingleFireBackwardOffset;//[Offset: 0x8, Size: 0x4]
	float LoopFireStraightPulse;//[Offset: 0xc, Size: 0x4]
	float LoopStiffnessCoefficient;//[Offset: 0x10, Size: 0x4]
	float LoopFireBackwardOffset;//[Offset: 0x14, Size: 0x4]
	CurveFloat* StraightStiffnessCurve;//[Offset: 0x18, Size: 0x8]
	float StraightRecoverSpeed;//[Offset: 0x20, Size: 0x4]
	Vector ShakePivotOffset;//[Offset: 0x24, Size: 0xc]
	Vector2D[] ShakeOffsets;//[Offset: 0x30, Size: 0x10]
	Rotator[] ShakeRotations;//[Offset: 0x40, Size: 0x10]
	bool bNeedEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	CurveVector* EndShakeOffsetCurve;//[Offset: 0x58, Size: 0x8]
	CurveVector* EndShakeRotateCurve;//[Offset: 0x60, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonVerticalRecoilStruct.AmmonRecoilStruct
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonRecoilStruct
	float CostTime;//[Offset: 0x0, Size: 0x4]
	CurveFloat* RecoilRangeCurve;//[Offset: 0x8, Size: 0x8]
	int APointCurveKeyIndex;//[Offset: 0x10, Size: 0x4]
	float APointMin;//[Offset: 0x14, Size: 0x4]
	float APointMax;//[Offset: 0x18, Size: 0x4]
	int BPointCurveKeyIndex;//[Offset: 0x1c, Size: 0x4]
	float BPointMin;//[Offset: 0x20, Size: 0x4]
	float BPointMax;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonHorizontalRecoilStruct.AmmonRecoilStruct
	CurveVector* ContinuousFireInfoCurve;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonRecoilRollStruct.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	float ADSRollCOP;//[Offset: 0x30, Size: 0x4]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonRecoilScope
	bool EnableScopeVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool EnableCrossHairVibration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool EnableScopeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x4, Size: 0x4]
	float ScopeVVibrationDuration;//[Offset: 0x8, Size: 0x4]
	CurveFloat* ScopeVSingleOffSetCurve;//[Offset: 0x10, Size: 0x8]
	CurveFloat* ScopeVContinuousOffSetCurve;//[Offset: 0x18, Size: 0x8]
	float ScopeVContinuousFallingDuration;//[Offset: 0x20, Size: 0x4]
	CurveFloat* ScopeVContinuousFallingCurve;//[Offset: 0x28, Size: 0x8]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x30, Size: 0x4]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x34, Size: 0x4]
	float ScopeHVibrationDuration;//[Offset: 0x38, Size: 0x4]
	CurveFloat* ScopeHSingleOffSetCurve;//[Offset: 0x40, Size: 0x8]
	CurveFloat* ScopeHContinuousOffSetCurve;//[Offset: 0x48, Size: 0x8]
	CurveFloat* ScopeHOffSetProbabilityCurve;//[Offset: 0x50, Size: 0x8]
	AmmonRecoilCrossHair CrossHairScaleSettings;//[Offset: 0x58, Size: 0x24]
	AmmonRecoilScopeRoll ScopeRollSettings;//[Offset: 0x80, Size: 0x38]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonRecoilCrossHair
	float VMaxDistanceOffSetScale;//[Offset: 0x0, Size: 0x4]
	float VVibrationDurationScale;//[Offset: 0x4, Size: 0x4]
	float VSingleOffSetScale;//[Offset: 0x8, Size: 0x4]
	float VContinuousOffSetScale;//[Offset: 0xc, Size: 0x4]
	float HMaxDistanceOffSetScale;//[Offset: 0x10, Size: 0x4]
	float HVibrationDurationScale;//[Offset: 0x14, Size: 0x4]
	float HSingleOffSetScale;//[Offset: 0x18, Size: 0x4]
	float HContinuousOffSetScale;//[Offset: 0x1c, Size: 0x4]
	float HOffSetProbabilityScale;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AmmonRecoilScopeRoll.AmmonRecoilStruct
	CurveFloat* RollProbabilityCurve;//[Offset: 0x28, Size: 0x8]
	CurveFloat* ContinuousFireWeightCurve;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TracerBulletData
	float DeflectionAnglePerSec;//[Offset: 0x0, Size: 0x4]
	float MaximumDetectionAngle;//[Offset: 0x4, Size: 0x4]
	float HomingRange;//[Offset: 0x8, Size: 0x4]
	bool bTraceTargetOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	FString TracingTargetWarningSound;//[Offset: 0x10, Size: 0x10]
	FString TracingTargetWarningRTPC;//[Offset: 0x20, Size: 0x10]
	FString TracingAuthorPromptSound;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarDamageInfo
	Actor* TargetActor;//[Offset: 0x0, Size: 0x8]
	Actor* SourceActor;//[Offset: 0x8, Size: 0x8]
	Actor* DamageCauserActor;//[Offset: 0x10, Size: 0x8]
	float OriginalDamage;//[Offset: 0x18, Size: 0x4]
	float OriginalDamageForVehicle;//[Offset: 0x1c, Size: 0x4]
	enum DamageType;//[Offset: 0x24, Size: 0x1]
	float DamageRadial;//[Offset: 0x28, Size: 0x4]
	bool bRadialIgnoreCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	bool bRadialIgnoreVehicle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1]
	bool bEnableSelfDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 0x1]
	bool bCheckSourceToTargetCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 0x1]
	bool bApplyToSource;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 0x1]
	bool bJustForShield;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 0x1]
	float ExplosionMinDistance;//[Offset: 0x30, Size: 0x4]
	float ExplosionMaxDistance;//[Offset: 0x34, Size: 0x4]
	CurveFloat* ExplosionDistanceScaleCurve;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAssistAimWeaponConfigAll
	WeaponAssistAimWeaponConfig* DefaultConfig;//[Offset: 0x0, Size: 0x8]
	WeaponAssistAimWeaponConfig* DefaultScopeConfig;//[Offset: 0x8, Size: 0x8]
	<enum,WeaponAssistAimWeaponConfig*> ScopeConfigMap;//[Offset: 0x10, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponFPPData
	<enum,SolarWeaponScopeFPPConfig> ScopeFPPConfigByScopeTypeMap;//[Offset: 0x0, Size: 0x50]
	SolarWeaponScopeFPPData DefaultFPPDataForScopeType;//[Offset: 0x50, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponScopeFPPConfig
	<int,SolarWeaponScopeFPPData> ScopeFPPDataByWeaponSkinIDMap;//[Offset: 0x0, Size: 0x50]
	SolarWeaponScopeFPPData DefaultFPPDataForWeaponSkinID;//[Offset: 0x50, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponScopeFPPData
	Vector RelativeLocation;//[Offset: 0x0, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0xc, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponFPPConfig
	RangeFloat AspectRatioRange;//[Offset: 0x0, Size: 0x8]
	SolarWeaponFPPData FPPData;//[Offset: 0x8, Size: 0x68]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RangeFloat
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponCrosshairData
	byte HasReload;//[Offset: 0x0, Size: 0x1]
	byte HasForbid;//[Offset: 0x1, Size: 0x1]
	byte HasOverload;//[Offset: 0x2, Size: 0x1]
	byte HasChargeProgress;//[Offset: 0x3, Size: 0x1]
	byte HasFeedback;//[Offset: 0x4, Size: 0x1]
	enum WeaponType;//[Offset: 0x5, Size: 0x1]
	bool bIsEnergyType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	class UserWidget* CrossHairWidget;//[Offset: 0x8, Size: 0x8]
	class UserWidget* BulletContainerWidget;//[Offset: 0x10, Size: 0x8]
	class UserWidget* WeaponRechamberWidget;//[Offset: 0x18, Size: 0x8]
	SolarNoAmmoAlertWidgetLayout AmmoAlertWidgetLayout;//[Offset: 0x20, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarNoAmmoAlertWidgetLayout
	bool bOverrideLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4, Size: 0x8]
	float SpinAngle;//[Offset: 0xc, Size: 0x4]
	Vector2D Scale;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ImpactDisplayInfo
	Vector Pos;//[Offset: 0x0, Size: 0xc]
	float Scale;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarProjBullet.SolarBullet.Actor.Object
	ShapeComponent* CollisionComp;//[Offset: 0x3a0, Size: 0x8]
	ProjectileMovementComponent* MovementComp;//[Offset: 0x3a8, Size: 0x8]
	Vector SpawnedLocation;//[Offset: 0x450, Size: 0xc]
	AkComponent* AkAudioComponent;//[Offset: 0x4b8, Size: 0x8]
	ParticleSystemComponent* CurrentTrajectoryParticle;//[Offset: 0x4c0, Size: 0x8]
	bool bProjectileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 0x1]
	bool bAttachToActorOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	float DeferExplodeTime;//[Offset: 0x4dc, Size: 0x4]
	float FlySoundPlayDistance;//[Offset: 0x4e0, Size: 0x4]
	bool bForceExplodeOnLifeSpanExpired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 0x1]
	class Actor[] HitActorImmediateExplodeArray;//[Offset: 0x4e8, Size: 0x10]
	ParticleSystem* ExplosionParticle;//[Offset: 0x4f8, Size: 0x8]
	FString ExplosionSoundName;//[Offset: 0x500, Size: 0x10]
	float DeferReleaseTrajectoryParticleTime;//[Offset: 0x510, Size: 0x4]
	float ServerWaitClientTime;//[Offset: 0x514, Size: 0x4]
	class GameplayAbility* BulletGameplayAbilityClass;//[Offset: 0x518, Size: 0x8]
	void StopSound(enum Opt);// 0x56ed078ea041
	void StartSound(enum Opt);// 0x56ec078ea041
	void ReleaseTrajectoryParticle();// 0x56eb078ea041
	void OnTeamIgnoreCollisionActorChange(bool bAdd, Actor* InActor, byte TeamID);// 0x56ea078ea041
	void OnStop(out const HitResult HitResult);// 0x56e9078ea041
	void OnRep_ProjectileStopped();// 0x56e8078ea041
	void OnAttachedActorDestroyed(Actor* Other);// 0x56e7078ea041
	void K2_OnExplode();// 0x56e6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xec, Size: 0x4]
	float MaxSpeed;//[Offset: 0xf0, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf4, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf4, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf4, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf4, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf4, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf4, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf4, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf5, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf5, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf5, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf5, Size: 0x1]
	float PreviousHitTime;//[Offset: 0xf8, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0xfc, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x108, Size: 0x4]
	float Buoyancy;//[Offset: 0x10c, Size: 0x4]
	float Bounciness;//[Offset: 0x110, Size: 0x4]
	float Friction;//[Offset: 0x114, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x118, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x11c, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x120, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x130, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x140, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x144, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x14c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x150, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x154, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x158, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x15c, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x160, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x164, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x1214078ea041
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x1213078ea041
	void SetInterpolatedComponent(SceneComponent* Component);// 0x1212078ea041
	void ResetInterpolation();// 0x1211078ea041
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x1210078ea041
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x120f078ea041
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x120e078ea041
	Vector LimitVelocity(Vector NewVelocity);// 0x120d078ea041
	bool IsVelocityUnderSimulationThreshold();// 0x120c078ea041
	bool IsInterpolationComplete();// 0x120b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualBulletHitParameter
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	float FireTimeStamp;//[Offset: 0x4, Size: 0x4]
	float HitTimeStamp;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize PlayerViewDir;//[Offset: 0xc, Size: 0xc]
	int8 FireChargePhase;//[Offset: 0x18, Size: 0x1]
	float FireChargeTime;//[Offset: 0x1c, Size: 0x4]
	int HitStartIndex;//[Offset: 0x20, Size: 0x4]
	Vector_NetQuantize StartLoc;//[Offset: 0x24, Size: 0xc]
	Vector_NetQuantize TargetLoc;//[Offset: 0x30, Size: 0xc]
	AmmoConfig* Ammo;//[Offset: 0x40, Size: 0x8]
	SolarWeaponHitAntiData[] HitAntiDatas;//[Offset: 0x48, Size: 0x10]
	HitResult[] Hits;//[Offset: 0x58, Size: 0x10]
	Actor*[] IgnoreHitedActors;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponHitAntiData
	Vector_NetQuantize RelavantHitLocationWithCharacter;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize HitBoneScale;//[Offset: 0xc, Size: 0xc]
	Quat HitBoneRotation;//[Offset: 0x20, Size: 0x10]
	Vector_NetQuantize HitLoc;//[Offset: 0x30, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualBulletCollector.ActorComponent.Object
	SolarWeapon* CacheWeapon;//[Offset: 0xb0, Size: 0x8]
	SolarCharacterBase* CacheCharacter;//[Offset: 0xb8, Size: 0x8]
	World* CacheWorld;//[Offset: 0xc0, Size: 0x8]
	SolarVirtualBullet[] Bullets;//[Offset: 0xc8, Size: 0x10]
	SolarVirtualBullet[] PendingBulletsInSimulated;//[Offset: 0xd8, Size: 0x10]
	SolarVirtualBullet[] BulletsInSimulated;//[Offset: 0xe8, Size: 0x10]
	SolarVirtualBullet[] BulletsInDedicatedServer;//[Offset: 0xf8, Size: 0x10]
	SolarBullet* EffectBulletCDO;//[Offset: 0x138, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualBullet
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	enum BulletType;//[Offset: 0x4, Size: 0x1]
	ParticleSystemComponent* BulletEffect;//[Offset: 0x10, Size: 0x8]
	ParticleSystemComponent* TrajectoryEffect;//[Offset: 0x18, Size: 0x8]
	ParticleSystemComponent* TrajectoryBeamEffect;//[Offset: 0x20, Size: 0x8]
	SolarVirtualBulletAKComponent* AkComponent;//[Offset: 0x28, Size: 0x8]
	Vector_NetQuantize PlayerViewDir;//[Offset: 0x170, Size: 0xc]
	Vector_NetQuantize PlayerViewLoc;//[Offset: 0x17c, Size: 0xc]
	byte IsScopeOpen;//[Offset: 0x188, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualBulletAKComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSkinData.DataAsset.Object
	enum WeaponSkinType;//[Offset: 0x30, Size: 0x1]
	WeaponBodyData WeaponData;//[Offset: 0x38, Size: 0xb0]
	WeaponSkinPartData[] WeaponBarMap;//[Offset: 0xe8, Size: 0x10]
	bool WeaponBarLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	WeaponSkinPartData[] WeaponClipMap;//[Offset: 0x100, Size: 0x10]
	bool WeaponClipLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	WeaponSkinPartData[] WeaponGripMap;//[Offset: 0x118, Size: 0x10]
	bool WeaponGripLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	bool bUseGripIkSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 0x1]
	WeaponSkinPartData[] WeaponScopeMap;//[Offset: 0x130, Size: 0x10]
	bool WeaponScopeLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	WeaponSkinPartData[] WeaponStockMap;//[Offset: 0x148, Size: 0x10]
	bool WeaponStockLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	class SolarBullet* DedicatedBulletEffect;//[Offset: 0x160, Size: 0x8]
	class SolarBullet* DedicatedSkillEffect;//[Offset: 0x168, Size: 0x8]
	SoftClassPath DedicatedBulletEffectPath;//[Offset: 0x170, Size: 0x18]
	SoftClassPath DedicatedSkillEffectPath;//[Offset: 0x188, Size: 0x18]
	ParticleSystem* DedicatedKillEffect;//[Offset: 0x1a0, Size: 0x8]
	SoftObjectPath DedicatedKillEffectPath;//[Offset: 0x1a8, Size: 0x18]
	SoftObjectPath DedicatedSpecialEffectPath;//[Offset: 0x1c0, Size: 0x18]
	WeaponMeshEffectData WeaponMeshEffectDataForFPP;//[Offset: 0x1e0, Size: 0x60]
	WeaponMeshEffectData WeaponMeshEffectDataForTPP;//[Offset: 0x240, Size: 0x60]
	class ActorEffect* DedicatedDissolvedDeathActorEffect;//[Offset: 0x2a0, Size: 0x8]
	SoftObjectPath DedicatedDissolvedDeathFXPath;//[Offset: 0x2a8, Size: 0x18]
	SolarCharacterDeathShowConfig* DeathShowConfig;//[Offset: 0x2c0, Size: 0x8]
	FString PlayAudioEventName;//[Offset: 0x2c8, Size: 0x10]
	FString StopAudioEventName;//[Offset: 0x2d8, Size: 0x10]
	AnimSequence* OutsideAnimation;//[Offset: 0x2e8, Size: 0x8]
	void ModifyResPath();// 0x6197078ea041
	bool IsMeshReplace();// 0x6196078ea041
	bool GetPartLockedInfoByType(const enum PartType);// 0x6195078ea041
	bool GetPartDataArrayByType(const enum PartType, out WeaponSkinPartData[] PartDataMap);// 0x6194078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponBodyData
	int weaponid;//[Offset: 0x0, Size: 0x4]
	SoftObjectPath WeaponMesh;//[Offset: 0x8, Size: 0x18]
	class WeaponAnimInstance* WeaponAnimBP;//[Offset: 0x20, Size: 0x8]
	<enum,SoftObjectPath> OverrideWeaponAnimSequenceMap;//[Offset: 0x28, Size: 0x50]
	SoftObjectPath LodpMesh;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0x90, Size: 0x10]
	WeaponSkinExtraPS[] SkinPSArray;//[Offset: 0xa0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAnimInstance.AnimInstance.Object
	bool bInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	bool bOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	bool bBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1]
	AnimMsgData[] MsgArray;//[Offset: 0x270, Size: 0x10]
	AnimMsgData CurrentMsg;//[Offset: 0x280, Size: 0x8]
	bool bCurrentMsgUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	AnimSequence* IdleAnim;//[Offset: 0x290, Size: 0x8]
	AnimSequence* FireAnim;//[Offset: 0x298, Size: 0x8]
	AnimSequence* AltFireAnim;//[Offset: 0x2a0, Size: 0x8]
	AnimSequence* ReloadAnim;//[Offset: 0x2a8, Size: 0x8]
	AnimSequence* OverloadAnim;//[Offset: 0x2b0, Size: 0x8]
	AnimSequence* OpenScopeAnim;//[Offset: 0x2b8, Size: 0x8]
	AnimSequence* CloseScopeAnim;//[Offset: 0x2c0, Size: 0x8]
	AnimSequence* BoltAnim;//[Offset: 0x2c8, Size: 0x8]
	bool SwitchStateCheck(enum CheckState);// 0x6021078ea041
	void SetInterruptIsTrue();// 0x6020078ea041
	bool RouterNodeJudge();// 0x601f078ea041
	void OnQuitState(enum State);// 0x601e078ea041
	void OnEnterState(enum State);// 0x601d078ea041
	void Interrupt();// 0x601c078ea041
	bool HasMsg();// 0x601b078ea041
	bool ConsumMsg();// 0x601a078ea041
	bool AddMsg(enum State, float Speed);// 0x6019078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimMsgData
	enum State;//[Offset: 0x0, Size: 0x1]
	float Speed;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSkinExtraPS
	bool bStimulatedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName Socket;//[Offset: 0x4, Size: 0x8]
	ParticleSystem* PS;//[Offset: 0x10, Size: 0x8]
	SoftObjectPath PSPath;//[Offset: 0x18, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSkinPartData
	int WeaponPartId;//[Offset: 0x0, Size: 0x4]
	FString WeaponPartDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath PartDataAsset;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath[] WeaponMaterials;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponMeshEffectData
	SoftObjectPath EffectPath;//[Offset: 0x0, Size: 0x18]
	FName SocketName;//[Offset: 0x18, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x20, Size: 0x30]
	CurveVector* ScaleCurveForFOV;//[Offset: 0x50, Size: 0x8]
	CurveVector* LocationCurveForFOV;//[Offset: 0x58, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorEffect.Object
	class ActorEffectController* ControllerClass;//[Offset: 0x28, Size: 0x8]
	ActorEffectController* Controller;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorEffectController.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterDeathShowConfig.DataAsset.Object
	SolarCharacterDeathEffectData[] EffectArrayForKnockDown;//[Offset: 0x30, Size: 0x10]
	SolarCharacterDeathEffectData[] EffectArrayForDeath;//[Offset: 0x40, Size: 0x10]
	bool bPlayCommonComboKillSoundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterDeathEffectData
	SoftObjectPath Path;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath PathForOther;//[Offset: 0x18, Size: 0x18]
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x30]
	FName SocketName;//[Offset: 0x60, Size: 0x8]
	bool bAttachToSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAnimationComponent.ActorComponent.Object
	WeaponAnimInstance* WeaponAnimInstance;//[Offset: 0xb0, Size: 0x8]
	SolarWeapon* MyWeapon;//[Offset: 0xb8, Size: 0x8]
	<enum,AnimSequence*> AnimSequenceMap;//[Offset: 0xc0, Size: 0x50]
	void SRecieveProto_SwitchStateAction(FString paramters);// 0x6018078ea041
	void SetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x6017078ea041
	void PostWeaponAnimStateToSimulation(enum InWeaponAnimState, float InAnimPlaySpeed, bool bForceSetAnimState);// 0x6016078ea041
	void InternalSetWeaponAnimState(enum InWeaponAnimState, float InAnimPlaySpeed);// 0x6015078ea041
	void InitSkeletaMesh(SkeletalMeshComponent* Mesh);// 0x6014078ea041
	void GotoState(enum State, float Interval);// 0x6013078ea041
	void CRecieveProto_SwitchStateAction(bool bAutonomous, FString paramters);// 0x6012078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponRecoilComponent.ActorComponent.Object
	SolarGameInstanceBase* GameInstance;//[Offset: 0xb8, Size: 0x8]
	bool bHActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bVActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bRActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	SolarWeapon* MyWeaponActor;//[Offset: 0xc8, Size: 0x8]
	SingleWeaponConfig* WeaponConfig;//[Offset: 0xd0, Size: 0x8]
	CurveFloat* YawCurve;//[Offset: 0xd8, Size: 0x8]
	CurveFloat* PitchCurve;//[Offset: 0xe0, Size: 0x8]
	CurveFloat* RollCurve;//[Offset: 0xe8, Size: 0x8]
	CurveFloat* ScopeRollCurve;//[Offset: 0xf0, Size: 0x8]
	CurveFloat* ScopePitchCurve;//[Offset: 0xf8, Size: 0x8]
	RichCurveKey[] OriginalScopePitchKeys;//[Offset: 0x100, Size: 0x10]
	AmmoConfig* CurrentAmmoConfig;//[Offset: 0x110, Size: 0x8]
	CurveFloat*[] YawCurveArray;//[Offset: 0x1e0, Size: 0x10]
	CurveFloat*[] PitchCurveArray;//[Offset: 0x1f0, Size: 0x10]
	CurveFloat* PitchEndCurve;//[Offset: 0x200, Size: 0x8]
	CurveFloat*[] RollCurveArray;//[Offset: 0x208, Size: 0x10]
	CurveFloat*[] ScopeRollCurveArray;//[Offset: 0x218, Size: 0x10]
	void SetRecoilVActive(bool bActive);// 0x4bb2078ea041
	void SetRecoilRActive(bool bActive);// 0x4bb1078ea041
	void SetRecoilHActive(bool bActive);// 0x4bb0078ea041
	void SetRecoilActive(bool bActive);// 0x4baf078ea041
	bool JudgeHorizontalRecoilDir(out const Vector factorVector, bool bCurrentRight, int instantCout);// 0x4bae078ea041
	bool IsRunning();// 0x4bad078ea041
	CurveFloat* GetYawCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x4bac078ea041
	CurveFloat* GetRollCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x4bab078ea041
	CurveFloat* GetPitchCurve(const uint32 Mode, const AmmoConfig* AmmoConfig);// 0x4baa078ea041
	Rotator GetCurrentRecoil();// 0x4ba9078ea041
	Rotator GetAndClearCurrentRecoil();// 0x4ba8078ea041
	void Fire(bool hipfire, bool Primary);// 0x4ba7078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameInstanceBase.SolarArchitecture.GameInstance.Object
	SoftObjectPath LoginMap;//[Offset: 0x350, Size: 0x18]
	SoftObjectPath LobbyMap;//[Offset: 0x368, Size: 0x18]
	SoftObjectPath EntryMap;//[Offset: 0x380, Size: 0x18]
	SoftObjectPath GameMap;//[Offset: 0x398, Size: 0x18]
	SoftObjectPath SettlementMap;//[Offset: 0x3b0, Size: 0x18]
	SoftObjectPath ConfigServerMap;//[Offset: 0x3c8, Size: 0x18]
	FString ConfigBattleAddr;//[Offset: 0x3e0, Size: 0x10]
	int ConfigBattlePort;//[Offset: 0x3f0, Size: 0x4]
	FString ConfigBackendAddr;//[Offset: 0x3f8, Size: 0x10]
	int ConfigBackendPort;//[Offset: 0x408, Size: 0x4]
	int BuildNumber;//[Offset: 0x40c, Size: 0x4]
	class SolarSaveGame* SaveGameClass;//[Offset: 0x410, Size: 0x28]
	SoftClassPath DefaultOperationLayout;//[Offset: 0x438, Size: 0x18]
	SoftClassPath DefaultLockSettings;//[Offset: 0x450, Size: 0x18]
	SoftClassPath ReplayManagerClass;//[Offset: 0x468, Size: 0x18]
	SoftClassPath DefaultGameModeLockSettings;//[Offset: 0x480, Size: 0x18]
	bool bNeedRebootButNot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	int LastChoosedVoiceLangID;//[Offset: 0x49c, Size: 0x4]
	FString CachedNetworkErrorString;//[Offset: 0x4a0, Size: 0x10]
	SolarOperationUIElement* CachedDefaultOperationLayout;//[Offset: 0x4b0, Size: 0x8]
	bool bBaseManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	bool bGameManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 0x1]
	bool bLuaManagersInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 0x1]
	delegate OnBaseManagersInit;//[Offset: 0x4c0, Size: 0x10]
	delegate OnGameManagersInit;//[Offset: 0x4d0, Size: 0x10]
	delegate OnLuaManagersInit;//[Offset: 0x4e0, Size: 0x10]
	GameArgs* GameArgsManager;//[Offset: 0x668, Size: 0x8]
	UIManager* UIManager;//[Offset: 0x670, Size: 0x8]
	UINavigationManager* UINavigationManager;//[Offset: 0x678, Size: 0x8]
	SeparatedPkgManager* SolarSepPkgManager;//[Offset: 0x680, Size: 0x8]
	SolarInputMappingManager* SolarInputMappingManager;//[Offset: 0x688, Size: 0x8]
	SolarTimerManager* SolarTimerManager;//[Offset: 0x690, Size: 0x8]
	SolarMainPlayerModel* MainPlayerModel;//[Offset: 0x698, Size: 0x8]
	SolarGameConfigManager* GameConfigManager;//[Offset: 0x6a0, Size: 0x8]
	BattlePassConfigInfo* BattlePassConfigInfo;//[Offset: 0x6a8, Size: 0x8]
	SolarLuaHelper* SolarLuaHelper;//[Offset: 0x6b0, Size: 0x8]
	SolarAnoHelper* SolarAnoHelper;//[Offset: 0x6b8, Size: 0x8]
	SolarTableManager* SolarTableManager;//[Offset: 0x6c0, Size: 0x8]
	SolarTcpNetworkManager* SolarTcpNetworkManager;//[Offset: 0x6c8, Size: 0x8]
	SolarUDPManager* SolarUDPManager;//[Offset: 0x6d0, Size: 0x8]
	SolarAssetManager* SolarAssetManager;//[Offset: 0x6d8, Size: 0x8]
	SolarItemManager* SolarItemManager;//[Offset: 0x6e0, Size: 0x8]
	SolarInteractableManager* SolarInteractableManager;//[Offset: 0x6e8, Size: 0x8]
	SolarPlatformHelper* SolarPlatformHelper;//[Offset: 0x6f0, Size: 0x8]
	SolarMapManager* SolarMapManager;//[Offset: 0x6f8, Size: 0x8]
	WeaponGrowthManager* WeaponGrowthManager;//[Offset: 0x700, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x708, Size: 0x8]
	IMChatObject* SolarIMChatObject;//[Offset: 0x710, Size: 0x8]
	SolarLuaManager* SolarLuaManager;//[Offset: 0x718, Size: 0x8]
	SolarGameStatistics* SolarGameStatistics;//[Offset: 0x720, Size: 0x8]
	SolarWeaponMergeMeshManager* WeaponMergeMeshManager;//[Offset: 0x728, Size: 0x8]
	CrashReportManager* CrashReportManager;//[Offset: 0x730, Size: 0x8]
	SolarPopPanelManager* SolarPopPanelManager;//[Offset: 0x738, Size: 0x8]
	SolarApplicationLifetimeManager* SolarApplicationLifetimeManager;//[Offset: 0x740, Size: 0x8]
	SolarHomeActorManager* SolarHomeActorManager;//[Offset: 0x748, Size: 0x8]
	SolarGameplayLogger* SolarGameplayLoggger;//[Offset: 0x750, Size: 0x8]
	SolarAttributeSubSystem* SolarAttributeSubSystem;//[Offset: 0x758, Size: 0x8]
	SCustomizedGameModeManager* CustomizedGameManager;//[Offset: 0x760, Size: 0x8]
	SolarRedHintManager* SolarRedHintMgr;//[Offset: 0x768, Size: 0x8]
	SolarGameModeSelectionManager* SolarGameModeSelectionMgr;//[Offset: 0x770, Size: 0x8]
	SolarPingFpsManager* SolarPingFpsMgr;//[Offset: 0x778, Size: 0x8]
	SolarGameUserSettingsMgr* SolarGameUserSettingsMgr;//[Offset: 0x780, Size: 0x8]
	SolarLoginManager* SolarLoginManager;//[Offset: 0x788, Size: 0x8]
	SolarLockSettingsMgr* SolarLockSettingsMgr;//[Offset: 0x790, Size: 0x8]
	SolarGameProgressManager* SolarGameProgressMgr;//[Offset: 0x798, Size: 0x8]
	SolarABTestManager* SolarABTestManager;//[Offset: 0x7a0, Size: 0x8]
	SolarHttpManager* SolarHttpManager;//[Offset: 0x7a8, Size: 0x8]
	SolarActivityManager* SolarActivityManager;//[Offset: 0x7b0, Size: 0x8]
	SolarTutorialManager* SolarTutorialManager;//[Offset: 0x7b8, Size: 0x8]
	SolarReplayManager* SolarReplayManager;//[Offset: 0x7c0, Size: 0x8]
	SolarSaveGame* SolarSaveGame;//[Offset: 0x7c8, Size: 0x8]
	class SettlementStageManager* SettlementManagerClass;//[Offset: 0x7d0, Size: 0x28]
	SettlementStageManager* SettlementManager;//[Offset: 0x7f8, Size: 0x8]
	CGMCrossLevelDataMgr* CrossLevelDataMgr;//[Offset: 0x800, Size: 0x8]
	class SolarGraphicSettings* SolarGraphicSettingsClass;//[Offset: 0x820, Size: 0x28]
	SolarAccessLuaDataUtils* LuaDataAccessUtils;//[Offset: 0x848, Size: 0x8]
	SolarAkSoundManager* SolarAkSoundManager;//[Offset: 0x850, Size: 0x8]
	bool bIsDedicatedServerStressTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 0x1]
	KeyMappingManager* KeyMappingManager;//[Offset: 0x860, Size: 0x8]
	SolarEasyAntiCheatManager* SolarEasyAntiCheatManager;//[Offset: 0x868, Size: 0x8]
	SolarSpecialEffectsMgr* SolarSpecialEffectsManager;//[Offset: 0x870, Size: 0x8]
	SolarFontManager* SolarFontManager;//[Offset: 0x878, Size: 0x8]
	SolarDownloaderManager* SolarDownloaderManager;//[Offset: 0x880, Size: 0x8]
	SolarGraphicSettings* SolarGraphicSettings;//[Offset: 0x890, Size: 0x8]
	AndroidInputManager* AndroidInputManager;//[Offset: 0x898, Size: 0x8]
	ProtectBaseManager* ProtectBaseManager;//[Offset: 0x8a0, Size: 0x8]
	delegate OnPatchComplete;//[Offset: 0x8b8, Size: 0x10]
	delegate OnTouchInputDelegate;//[Offset: 0x8c8, Size: 0x10]
	RegistedActorContainer CachedRegistedActors;//[Offset: 0x8d8, Size: 0x50]
	bool IsHotPatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 0x1]
	bool bCheatedInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x944, Size: 0x1]
	bool bAbnormalInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x945, Size: 0x1]
	FText KickOutReason;//[Offset: 0x948, Size: 0x18]
	AntiCheatSetting[] AntiCheatSettings;//[Offset: 0x960, Size: 0x10]
	ScreenshotConfig ScreenshotConfig;//[Offset: 0x970, Size: 0x50]
	FString AntiCheatConfig;//[Offset: 0x9c0, Size: 0x10]
	bool bLaunchServerTravelSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 0x1]
	void UpdateScreenshotSetting();// 0x1b12078ea041
	void UpdateAntiCheatSetting();// 0x1b11078ea041
	void TestEnsureMsgInternal();// 0x1b10078ea041
	void TestCrashInternal();// 0x1b0f078ea041
	void SolarGm_UploadLogFile();// 0x1b0e078ea041
	void SolarGM_Tut(FString Cmd, out const FString[] Args);// 0x1b0d078ea041
	void SolarGM_TriggerSteamAntiCheat(const int ActionReason, FString ActionDetials);// 0x1b0c078ea041
	void SolarGM_TransmitGMLua(FString playerName, out const FString[] GmArray);// 0x1b0b078ea041
	void SolarGM_TransmitGM(FString playerName, out const FString[] transmitGm);// 0x1b0a078ea041
	void SolarGm_TestGamepadVibrateEffect(FString ClipName, int Duration, int Loop, int Priority, int Interval, int Amplitude);// 0x1b09078ea041
	void SolarGM_TestEnsureMsgWithBP();// 0x1b08078ea041
	void SolarGM_TestEnsureMsg();// 0x1b07078ea041
	void SolarGM_TestCrashWithBP();// 0x1b06078ea041
	void SolarGM_TestCrash();// 0x1b05078ea041
	void SolarGm_SwitchFastFont(bool bIsEnable);// 0x1b04078ea041
	void SolarGM_StopRecordingReplay();// 0x1b03078ea041
	void SolarGM_StopPlayingReplay();// 0x1b02078ea041
	void SolarGM_StartRecordingLocalReplay(FString Filename);// 0x1b01078ea041
	void SolarGM_StartRecordHighlight(FString SessionNameOverride);// 0x1b00078ea041
	void SolarGm_SetSkydivingIconUpdateRate(float InRate);// 0x1aff078ea041
	void SolarGM_SetQuality(int InQuality);// 0x1afe078ea041
	void SolarGM_RequestWatchingLiveOfPlayer(FString PlayerId);// 0x1afd078ea041
	void SolarGM_RequestReplayList(int PageIndex, int PageSize);// 0x1afc078ea041
	void SolarGM_RequestPlayReplayByIdx(uint32 Index);// 0x1afb078ea041
	void SolarGM_RequestPlayReplayByBattleID(FString InBattleID, bool IsLive);// 0x1afa078ea041
	void SolarGM_RequestPlayReplay(FString InBattleID, FString DownloadUrl);// 0x1af9078ea041
	void SolarGM_PlayLocalReplay(FString Filename);// 0x1af8078ea041
	void SolarGM_PlayHighlight(FString Filename);// 0x1af7078ea041
	void SolarGM_LobbyLua(FString CmdName, out const FString[] Params);// 0x1af6078ea041
	void SolarGM_Lobby(FString CmdName, out const FString[] Params);// 0x1af5078ea041
	void SolarGM_LoadLevelInstance(FString arg1);// 0x1af4078ea041
	void SolarGM_KickMeOut();// 0x1af3078ea041
	void SolarGM_GoHome();// 0x1af2078ea041
	void SolarGm_EnableLuaCallStackProfile(bool bIsEnable);// 0x1af1078ea041
	void SolarGM_AddWeaponExpLua(int weaponid, int count);// 0x1af0078ea041
	void SolarGM_AddWeaponExp(int weaponid, int count);// 0x1aef078ea041
	void SolarGM_AddItemLua(int ItemID, int count);// 0x1aee078ea041
	void SolarGM_AddItem(int ItemID, int count);// 0x1aed078ea041
	void ShutDownPCSDK();// 0x1aec078ea041
	void ShutDownLimSdk();// 0x1aeb078ea041
	void ShutdownAnoSDK();// 0x1aea078ea041
	void SetIsFirstLaunch(bool bIsFirst);// 0x1ae9078ea041
	void SetClientInitConfig(out const byte[] ConfigData);// 0x1ae8078ea041
	void SetCleanUpfile(bool bCleanCache);// 0x1ae7078ea041
	bool ServerTravel(FString Map, int ListenPort, bool bSpectator, bool bSkipGameNotify, FString options);// 0x1ae6078ea041
	void SaveGame();// 0x1ae5078ea041
	void RequestShutDown(FString reason);// 0x1ae4078ea041
	void ReportLoadingInfoToBI(out FString[] LoadingInfo, float LoadingTime, bool bIsFinished);// 0x1ae3078ea041
	void RegisterNetworkManager();// 0x1ae2078ea041
	void OnStartBattle(FString InBattleID);// 0x1ae1078ea041
	void OnManagersInitialized__DelegateSignature();// 0x1ae0078ea041
	void OnHotPatchComplete();// 0x1adf078ea041
	void OnDisconnect();// 0x1ade078ea041
	void LuaStartGameFrameWork();// 0x1add078ea041
	void LuaInitGameFrameWork();// 0x1adc078ea041
	bool IsStandalone();// 0x1adb078ea041
	bool IsSolarServer(const Object* WorldContextObject);// 0x1ada078ea041
	bool IsSkipLogin();// 0x1ad9078ea041
	bool IsServerOrStandalone();// 0x1ad8078ea041
	bool IsListenServer();// 0x1ad7078ea041
	bool IsGIsEditor();// 0x1ad6078ea041
	bool IsFirstLaunchAfterVersionUpdate();// 0x1ad5078ea041
	bool IsEditor();// 0x1ad4078ea041
	bool IsDedicatedServerStressTest();// 0x1ad3078ea041
	bool IsDedicatedServer();// 0x1ad2078ea041
	bool IsClientOrStandalone();// 0x1ad1078ea041
	bool IsClient();// 0x1ad0078ea041
	void InitLuaClasses();// 0x1acf078ea041
	void InitGameManagers();// 0x1ace078ea041
	bool HasCommandlineParam(FString Param);// 0x1acd078ea041
	void GoHomeLuaCall();// 0x1acc078ea041
	SolarWeaponMergeMeshManager* GetWeaponMergeMeshManager();// 0x1acb078ea041
	WeaponGrowthManager* GetWeaponGrowthManager();// 0x1aca078ea041
	int GetWarmGameType();// 0x1ac9078ea041
	UINavigationManager* GetUINavigationManager();// 0x1ac8078ea041
	SolarVibrateManager* GetSolarVibrateManager();// 0x1ac7078ea041
	SolarTutorialManager* GetSolarTutorialManager();// 0x1ac6078ea041
	SolarTimerManager* GetSolarTimerManager();// 0x1ac5078ea041
	SolarTcpNetworkManager* GetSolarTcpNetworkManager();// 0x1ac4078ea041
	SolarTableManager* GetSolarTableManager();// 0x1ac3078ea041
	SolarSaveGame* GetSolarSaveGame();// 0x1ac2078ea041
	SolarReplayManager* GetSolarReplayManager();// 0x1ac1078ea041
	SolarRedHintManager* GetSolarRedHintManager();// 0x1ac0078ea041
	SolarPopPanelManager* GetSolarPopPanelManager();// 0x1abf078ea041
	SolarPlatformHelper* GetSolarPlatformHelper();// 0x1abe078ea041
	SolarPingFpsManager* GetSolarPingFpsManager();// 0x1abd078ea041
	SolarMapManager* GetSolarMapManager();// 0x1abc078ea041
	SolarMainPlayerModel* GetSolarMainPlayerModel();// 0x1abb078ea041
	SolarLuaManager* GetSolarLuaManager();// 0x1aba078ea041
	SolarLuaHelper* GetSolarLuaHelper();// 0x1ab9078ea041
	SolarLoginManager* GetSolarLoginManager();// 0x1ab8078ea041
	SolarLockSettingsMgr* GetSolarLockSettingsManager();// 0x1ab7078ea041
	SolarItemManager* GetSolarItemManager();// 0x1ab6078ea041
	SolarInteractableManager* GetSolarInteractableManager();// 0x1ab5078ea041
	SolarInputMappingManager* GetSolarInputMappingManager();// 0x1ab4078ea041
	IMChatObject* GetSolarIMChatObject();// 0x1ab3078ea041
	SolarHttpManager* GetSolarHttpManager();// 0x1ab2078ea041
	SolarHomeActorManager* GetSolarHomeActorManager();// 0x1ab1078ea041
	SolarGameUserSettingsMgr* GetSolarGameUserSettingsManager();// 0x1ab0078ea041
	SolarGameplayLogger* GetSolarGameplayLogger();// 0x1aaf078ea041
	SolarGameModeSelectionManager* GetSolarGameModeSelectionManager();// 0x1aae078ea041
	SolarGameInstanceBase* GetSolarGameInstanceBase(Object* WorldContextObject);// 0x1aad078ea041
	SolarEasyAntiCheatManager* GetSolarEasyAntiCheatManager();// 0x1aac078ea041
	SolarDownloaderManager* GetSolarDownloaderManager();// 0x1aab078ea041
	SolarAnoHelper* GetSolarAnoHelperStatic(Object* WorldContextObject);// 0x1aaa078ea041
	SolarAnoHelper* GetSolarAnoHelper();// 0x1aa9078ea041
	SolarAkSoundManager* GetSolarAkSoundManager();// 0x1aa8078ea041
	SolarAkGameObject* GetSolarAkGameObject();// 0x1aa7078ea041
	SolarActivityManager* GetSolarActivityManager();// 0x1aa6078ea041
	SolarABTestManager* GetSolarABTestManager();// 0x1aa5078ea041
	SettlementStageManager* GetSettlementStageManager();// 0x1aa4078ea041
	SeparatedPkgManager* GetSeparatedPkgManager();// 0x1aa3078ea041
	int GetRuleID();// 0x1aa2078ea041
	int GetRTCType();// 0x1aa1078ea041
	int GetRankMatchID();// 0x1aa0078ea041
	ProtectBaseManager* GetProtectBaseManager();// 0x1a9f078ea041
	int GetPort();// 0x1a9e078ea041
	byte GetPlayStage();// 0x1a9c078ea041
	SolarCharacter* GetPlayerCharacter();// 0x1a9b078ea041
	FString GetPIEServerURL();// 0x1a9a078ea041
	int GetPIEInstance();// 0x1a99078ea041
	int GetNumMode();// 0x1a98078ea041
	FString GetNetModeString();// 0x1a97078ea041
	byte GetNetMode();// 0x1a95078ea041
	int GetMaxPlayer();// 0x1a94078ea041
	FString GetMatchMode();// 0x1a93078ea041
	KeyMappingManager* GetKeyMappingManager();// 0x1a92078ea041
	bool GetIsMutiPlayer();// 0x1a91078ea041
	SolarGameStatistics* GetGameStatistics();// 0x1a90078ea041
	int GetGameModeGroupID();// 0x1a8f078ea041
	SolarGameConfigManager* GetGameConfigManager();// 0x1a8e078ea041
	int GetEntryID();// 0x1a8d078ea041
	int GetEloStart();// 0x1a8c078ea041
	int GetEloEnd();// 0x1a8b078ea041
	SolarOperationUIElement* GetDefaultOperationLayout();// 0x1a8a078ea041
	SCustomizedGameModeManager* GetCustomizedGameManager();// 0x1a89078ea041
	CGMCrossLevelDataMgr* GetCrossLevelDataMgr();// 0x1a88078ea041
	CrashReportManager* GetCrashReportManager();// 0x1a87078ea041
	FString GetCommandlineParam(FString Param);// 0x1a86078ea041
	int GetClientNumber();// 0x1a85078ea041
	void GetCategorizedActorsOfType(const Object* WorldContextObject, enum InActorType, out Actor*[] OutActors);// 0x1a83078ea041
	void GetCategorizedActorsByBits(const Object* WorldContextObject, byte InActorBit, out Actor*[] OutActors);// 0x1a82078ea041
	BlueCircleManager* GetBlueCircleManager();// 0x1a81078ea041
	int GetBattleVoiceID();// 0x1a80078ea041
	BattlePassConfigInfo* GetBattlePassConfigInfo();// 0x1a7f078ea041
	FString GetBattleKey();// 0x1a7e078ea041
	FString GetBattleID();// 0x1a7d078ea041
	SolarAssetManager* GetAssetManager();// 0x1a7c078ea041
	int64 GetAppActiveTimestampInterval();// 0x1a7b078ea041
	void ExecuteCommandArray(out const FString[] cmdArray);// 0x1a7a078ea041
	void ExecuteCommand(FString Cmd);// 0x1a79078ea041
	void ExecuteChangeAudioModeLuaCall(bool bTurnOn);// 0x1a78078ea041
	void ExecuteBackKeyLuaCall();// 0x1a77078ea041
	void ExecGameArgs(FString Args, out FString FailReason, out byte Branches);// 0x1a75078ea041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, int FGuid_A, int FGuid_B, int FGuid_C, int FGuid_D);// 0x1a74078ea041
	void ClearGameManagers();// 0x1a73078ea041
	void CheckSavedDirFiles(out FString[] Files);// 0x1a72078ea041
	void Browse(FString URL, byte TravelType);// 0x1a70078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarArchitecture.GameInstance.Object
	delegate OnOnScopeChangeDelegate;//[Offset: 0x1a0, Size: 0x10]
	void OnScopeChanged(enum InLastScope, enum InCurScope);// 0x1a6f078ea041
	bool IsScopeSettlement();// 0x1a6e078ea041
	bool IsScopeLogin();// 0x1a6d078ea041
	bool IsScopeLobby();// 0x1a6c078ea041
	bool IsScopeBattle();// 0x1a6b078ea041
	bool IsInScope(enum InScopeMask);// 0x1a6a078ea041
	SolarAbstractModel* GetModel(out const class SolarAbstractModel ModelClass);// 0x1a69078ea041
	SolarAbstractManager* GetManager(out const class SolarAbstractManager ManagerClass);// 0x1a68078ea041
	enum GetCurScope();// 0x1a67078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSaveGame.SaveGame.Object
	bool HasShowNewPlayerGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int EditorGameModeId;//[Offset: 0x2c, Size: 0x4]
	NeverShowCheckWindow[] NeverShowCheckWindowList;//[Offset: 0x30, Size: 0x10]
	bool HasReadSurvey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool HasReadSurvey2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool HasPlayedHuntMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	byte MatchTimes;//[Offset: 0x43, Size: 0x1]
	bool HasCompleteTeamUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool IsMorrowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bClickSocialEntranceBtnDiscord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	bool bClickSocialEntranceBtnFacebook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 0x1]
	bool bClickSocialEntranceBtnYouTube;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bClickSocialEntranceBtnTikTok;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bClickSocialEntranceBtnInstagram;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bClickSocialTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bClickLiveBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int64 SocialLinkLastClickTime;//[Offset: 0x50, Size: 0x8]
	bool bHasReportedOnline15min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bHasReportedOnline30min;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bHasPlayedPackEnterAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool bHasClickClanPermission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool bHasClickVipCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	int64 PatFaceRefreshTimeStamp;//[Offset: 0x60, Size: 0x8]
	bool bAutoDownloadSepPkgsOnWifi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bHasLobbyDownloadSepPkgsRedDot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	int64 bShowLobbyDownloadSepPkgsRedDotTimeStamp;//[Offset: 0x70, Size: 0x8]
	int BattlePassID;//[Offset: 0x78, Size: 0x4]
	int[] MarkingPassTaskID;//[Offset: 0x80, Size: 0x10]
	int[] DisplayedProductIDs;//[Offset: 0x90, Size: 0x10]
	int[] ClickedPosterRecIDs;//[Offset: 0xa0, Size: 0x10]
	uint32[] ReadMailIds;//[Offset: 0xb8, Size: 0x10]
	bool ValidateNeverShowCheckWindow(int TargetConfirmID);// 0x5768078ea041
	void UpdateNeverShowCheckWindow(int TargetConfirmID, enum NewDuration);// 0x5767078ea041
	void UpdateMarkTask(int InBattlePassID, int TaskID, bool Add);// 0x5766078ea041
	void UpdateDisplayedIDs(out const int[] InIDs);// 0x5765078ea041
	void UpdateClickedPosterRecIDs(const int InID);// 0x5764078ea041
	void SetMarkingTask(int InBattlePassID, out int[] InTaskID);// 0x5763078ea041
	void PrintTwiceConfirmCheckWindowList();// 0x5762078ea041
	void GetMarkingTask(int InBattlePassID, out int[] OutTaskID);// 0x5761078ea041
	bool DeleteNeverShowCheckWindow(int TargetConfirmID);// 0x5760078ea041
	void ClearDisplayIDs();// 0x575f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SaveGame.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NeverShowCheckWindow
	int ConfirmID;//[Offset: 0x0, Size: 0x4]
	DateTime Timestamp;//[Offset: 0x8, Size: 0x8]
	enum Duration;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DateTime
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarOperationUIElement.Object
	OperationUIElement[] CharacterOperationUI;//[Offset: 0x28, Size: 0x10]
	OperationUIElement[] DirectionOperationUI;//[Offset: 0x38, Size: 0x10]
	OperationUIElement[] SteeringOperationUI;//[Offset: 0x48, Size: 0x10]
	OperationUIElement[] JoyStickOperationUI;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OperationUIElement
	FString PanelName;//[Offset: 0x0, Size: 0x10]
	FString PanelAliasName;//[Offset: 0x10, Size: 0x10]
	float CurScale;//[Offset: 0x20, Size: 0x4]
	float MinScale;//[Offset: 0x24, Size: 0x4]
	float MaxScale;//[Offset: 0x28, Size: 0x4]
	float CurOpacity;//[Offset: 0x2c, Size: 0x4]
	float MinOpacity;//[Offset: 0x30, Size: 0x4]
	float MaxOpacity;//[Offset: 0x34, Size: 0x4]
	bool bCanHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bLockAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float minOffsetY;//[Offset: 0x3c, Size: 0x4]
	float maxOffsetY;//[Offset: 0x40, Size: 0x4]
	bool bCannotChangeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bCannotChangeOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bVisibleInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	Vector2D Translation;//[Offset: 0x48, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameArgs.Object
	FString[] CommandLineArgs;//[Offset: 0x30, Size: 0x10]
	bool SkipTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool ExecGameArgs(FString Args, out FString FailReason);// 0x4781078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UIManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	delegate[] OnBigMapOpenDelegateGroup;//[Offset: 0x70, Size: 0x10]
	delegate[] OnBigMapVisibilityChangedDelegateGroup;//[Offset: 0x80, Size: 0x10]
	DataTable* BattleWidgetSettings;//[Offset: 0x90, Size: 0x8]
	SolarUIRoot* SolarUIRoot;//[Offset: 0x98, Size: 0x8]
	DestroyObjectStruct[] NeedToDestroyObjects;//[Offset: 0xa0, Size: 0x10]
	void WatchReference();// 0x6117078ea041
	void WatchAllReference();// 0x6116078ea041
	void UpdateButtonSprite(Button* TargetButton, FString AtlasType, FString NormalSpName, FString PressedSpName, FString HoveredSpName, FString DisableSpName);// 0x6115078ea041
	void TriggerDelegate();// 0x6114078ea041
	SolarUserWidget* ShowUIByName(FString InName, int RootID);// 0x6113078ea041
	void SetWidgetLayout(Widget* InWidget, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY);// 0x6112078ea041
	void SetWidgetChildrenLayout(UserWidget* InRootWidget, out const FName PanelAliasName, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY);// 0x6111078ea041
	SolarUserWidget* SetUIActive(SolarUserWidget* InWidget, const bool Inactive);// 0x6110078ea041
	void SetMaterialInstanceParams(Image* Image, FString ParamName, float Value);// 0x610f078ea041
	void SetMaterialInstanceColor(Image* Image, FString ParamName, out const LinearColor Value);// 0x610e078ea041
	void SetLoadingUIByLevelAndDisplay(int InModelID, int InLevel, int InMapIndex, bool InDisableCustomLoading);// 0x610d078ea041
	void SetImageTintColor(Image* Img, out const LinearColor InColor);// 0x610c078ea041
	void SetImageTexture(Image* Img, Texture2D* Texture);// 0x610b078ea041
	void SetImageFromTextureOrSprite(Image* DstImage, out const SoftObjectPath Path, bool bMatchSize);// 0x610a078ea041
	void SetImageColor(Image* Img, float R, float G, float B, float A);// 0x6109078ea041
	void SetFireInputStyle(FireInputWidget* FireInput, const SlateWidgetStyleAsset* Style);// 0x6108078ea041
	void SetCheckedState(CheckBox* Box, const enum State);// 0x6107078ea041
	void SetCheckboxStyle(CheckBox* CheckBox, const SlateWidgetStyleAsset* Style);// 0x6106078ea041
	void SetCheckBoxIsChecked(CheckBox* CheckBox, bool Checked);// 0x6105078ea041
	void SetButtonStyle(Button* Btn, const SlateWidgetStyleAsset* Style);// 0x6104078ea041
	void RemoveAllWidgets();// 0x6103078ea041
	void OpenUIGM(FString UIID, int RootID);// 0x6102078ea041
	void OpenConfirmUIInLua(int ConfirmID);// 0x6101078ea041
	void OnLuaHotReloadFileChanged(FString LuaSysPath, FString LuaPathName);// 0x6100078ea041
	void OnInitLuaHotReload();// 0x60ff078ea041
	void OnGameManagersInitialized();// 0x60fe078ea041
	void OnClientStartGame();// 0x60fd078ea041
	void LuaCloseUI(FString MapName);// 0x60fc078ea041
	Texture2D* LoadTexture2DBySoftPath(out const SoftObjectPath Path);// 0x60fb078ea041
	Texture2D* LoadTexture2DByPath(Object* InOuter, FString FullPath);// 0x60fa078ea041
	Texture2D* LoadTexture2D(Object* InOuter, FString TextureType, FString TexName);// 0x60f9078ea041
	Texture2D* LoadQualityBGPostfix(Object* InOuter, const int InQuality, FString Postfix);// 0x60f8078ea041
	Texture2D* LoadQualityBG(Object* InOuter, const int InQuality);// 0x60f7078ea041
	PaperSprite* LoadPaperSprite(Object* InOuter, FString AtlasPath, FString SpName);// 0x60f6078ea041
	MaterialInterface* LoadMaterialInstance(Object* InOuter, FString MaterialType, FString MaterialName);// 0x60f5078ea041
	bool IsWidgetVisibleForDisplay(const Widget* InWidget);// 0x60f4078ea041
	void InvalidateWidgetPrepass(Widget* InWidget);// 0x60f3078ea041
	void InitLvlTextWidget(TextBlock* InHeadTextWidget, TextBlock* InTrailTextWidget);// 0x60f2078ea041
	SolarCharacter* GetWidgetOwningCharacter(const Widget* InWidget);// 0x60f1078ea041
	FString GetWeaponTextureFullPath(out FString IconPath);// 0x60f0078ea041
	UserWidget* GetUIPanel(FString MapName);// 0x60ef078ea041
	FString GetTexture2DFullPath(out FString PrePath, out FString IconPath);// 0x60ee078ea041
	FString GetQualityBGFullPath(const int InQuality, const bool bWithSuffix);// 0x60ed078ea041
	Texture2D* GetPlayerAvatarByID(int PlayerAvatarID);// 0x60ec078ea041
	int GetLobbyID();// 0x60eb078ea041
	bool GetCheckBoxIsChecked(CheckBox* CheckBox);// 0x60ea078ea041
	CanvasPanelSlot* GetCanvasPanelSlotForWidget(Widget* Widget);// 0x60e9078ea041
	CustomWidget_TableRow GetBattleWidgetSetting(FString ConfigName);// 0x60e8078ea041
	UserWidget* GetBattleBackpackWidget();// 0x60e7078ea041
	void ExitSpectateMode();// 0x60e6078ea041
	void EnterSpectateMode();// 0x60e5078ea041
	void DestroyWidget(UserWidget* InWidget);// 0x60e4078ea041
	void CloseUIGM(FString UIID);// 0x60e3078ea041
	void CloseLoadingUI();// 0x60e2078ea041
	Margin ClampInScreenOffsets(Widget* WorldContextObject, out const Margin Offsets, out const Anchors Anchors, out const Vector2D Alignment);// 0x60e1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameManager.SolarAbstractManager.SolarContainer.Object
	SolarGameInstanceBase* OwnerGameInstance;//[Offset: 0x28, Size: 0x8]
	void ReceiveManagerIntialized();// 0x26af078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbstractManager.SolarContainer.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarContainer.Object
	void ReceiveInitialize();// 0x26ae078ea041
	void ReceiveDeinitialize();// 0x26ad078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x150, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x160, Size: 0x3e0]
	LinearColor ColorAndOpacity;//[Offset: 0x540, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x550, Size: 0x10]
	byte ClickMethod;//[Offset: 0x560, Size: 0x1]
	byte TouchMethod;//[Offset: 0x561, Size: 0x1]
	byte PressMethod;//[Offset: 0x562, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x563, Size: 0x1]
	delegate OnClicked;//[Offset: 0x568, Size: 0x10]
	delegate OnPressed;//[Offset: 0x578, Size: 0x10]
	delegate OnReleased;//[Offset: 0x588, Size: 0x10]
	delegate OnHovered;//[Offset: 0x598, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x5a8, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x3ef5078ea041
	void SetStyle(out const ButtonStyle InStyle);// 0x3ef4078ea041
	void SetPressMethod(byte InPressMethod);// 0x3ef3078ea041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3ef2078ea041
	void SetClickMethod(byte InClickMethod);// 0x3ef1078ea041
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x3ef0078ea041
	bool IsPressed();// 0x3eef078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x18a0078ea041
	PanelSlot* GetContentSlot();// 0x189f078ea041
	Widget* GetContent();// 0x189e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x10, Size: 0xe0]
	SlateBrush Hovered;//[Offset: 0xf0, Size: 0xe0]
	SlateBrush Pressed;//[Offset: 0x1d0, Size: 0xe0]
	SlateBrush Disabled;//[Offset: 0x2b0, Size: 0xe0]
	Margin NormalPadding;//[Offset: 0x390, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x3a0, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x3b0, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x3c8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateWidgetStyle
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateWidgetStyleContainerBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUserWidget.UserWidget.Widget.Visual.Object
	enum WidgetLayerLevel;//[Offset: 0x260, Size: 0x1]
	bool bIsPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	enum WidgetScope;//[Offset: 0x262, Size: 0x1]
	enum CaptureInput;//[Offset: 0x263, Size: 0x1]
	bool bHideCursorDuringCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	int MyRoot;//[Offset: 0x268, Size: 0x4]
	FString widgetkey;//[Offset: 0x270, Size: 0x10]
	bool bReceiveKeyMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	bool bReceiveShowMouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	enum ShowScope;//[Offset: 0x282, Size: 0x1]
	enum LayoutPreviewType;//[Offset: 0x283, Size: 0x1]
	bool bShowTransBlackAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	class WidgetInputManager* InputManagerClass;//[Offset: 0x288, Size: 0x8]
	WidgetInputManager* InputManager;//[Offset: 0x290, Size: 0x8]
	<FName,WidgetAnimation*> AnimationsMap;//[Offset: 0x298, Size: 0x50]
	WidgetAnimation* PlayingAnimation;//[Offset: 0x2e8, Size: 0x8]
	PlayAnimationParams[] PendingPlayAnimations;//[Offset: 0x308, Size: 0x10]
	bool WidgetTickEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	bool bInterestLocalLang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	SolarInputActionContext* InputActionContext;//[Offset: 0x328, Size: 0x8]
	SolarUserWidget*[] AllSolarUserWidgetChilds;//[Offset: 0x3e0, Size: 0x10]
	SolarAdapterWidget*[] AllSolarAdapterWidgetChilds;//[Offset: 0x3f0, Size: 0x10]
	void StopListeningForInputHandle(const int Handle);// 0x28de078ea041
	void StopListeningForInputActionEx(FName ActionName, byte EventType);// 0x28dd078ea041
	void ShowSelfPanelUI();// 0x28dc078ea041
	void ShowMouseCursor();// 0x28db078ea041
	void SetZOrder(int ZOrder);// 0x28da078ea041
	void SetWidgetVisible(Widget* Widget, bool bVisible, bool bHitTest);// 0x28d9078ea041
	void SetWidgetTickEnabled(bool bEnabled);// 0x28d8078ea041
	void SetWidgetScope(enum InWidgetScope);// 0x28d6078ea041
	void SetWidgetLayerLevel(enum InWidgetLayerLevel);// 0x28d4078ea041
	void SetWidgetKey(FString InWidgetKey);// 0x28d3078ea041
	void SetInputActionIsEnabled(FName ActionName, byte EventType, bool bInIsEnabled);// 0x28d2078ea041
	void SetBlockInputForOneTick();// 0x28d1078ea041
	void ReceiveTick(out const Geometry MyGeometry, float InDeltaTime);// 0x28d0078ea041
	void ReceiveShow();// 0x28cf078ea041
	void ReceiveHide();// 0x28ce078ea041
	bool PlayAnimationByName(out const FName AnimationName, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x28cd078ea041
	void PlayAnimationByExclusively(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x28cc078ea041
	void OnTouchManagerInitialized();// 0x28cb078ea041
	void OnSynchronizeProperties();// 0x28ca078ea041
	void OnSolarUIOpened();// 0x28c9078ea041
	void OnSolarUIClosed();// 0x28c8078ea041
	void OnShow();// 0x28c7078ea041
	void OnLocalLangChangedEx(FString InLang);// 0x28c6078ea041
	void OnHide();// 0x28c5078ea041
	void OnExclusivelyAnimationFinished();// 0x28c4078ea041
	void OnDeinitialize();// 0x28c3078ea041
	void OnBackKey(enum BackKeyType);// 0x28c1078ea041
	int ListenForInputActionEx(FName ActionName, byte EventType, bool bInIsEnabled, delegate Callback);// 0x28c0078ea041
	bool IsWidgetTickEnabled();// 0x28bf078ea041
	bool IsSolarUserWidgetAndBindLua(Widget* InWidget);// 0x28be078ea041
	bool IsPlatformSwitch();// 0x28bd078ea041
	bool IsPlatformDesktop();// 0x28bc078ea041
	void HideMouseCursor();// 0x28bb078ea041
	FString GetWidgetKeyByPanelName(enum PanelName);// 0x28b9078ea041
	FString GetWidgetKey();// 0x28b8078ea041
	Vector2D[] GetTouchedLocation();// 0x28b7078ea041
	enum GetShowScope();// 0x28b6078ea041
	Vector2D[] GetPointerLocation();// 0x28b5078ea041
	SolarPlayerState* GetOwningSolarPlayerState();// 0x28b4078ea041
	SolarCharacter* GetOwningSolarPlayerCharacter();// 0x28b3078ea041
	WidgetAnimation* GetAnimationByName(out const FName AnimationName);// 0x28b2078ea041
	SolarUserWidget*[] GetAllSolarUserWidgetChilds();// 0x28b1078ea041
	Widget* FindWidgetFromName(out const FName Name);// 0x28b0078ea041
	void ExecuteSolarUIShow();// 0x28af078ea041
	void ExecuteSolarUIOpened();// 0x28ae078ea041
	void ExecuteSolarUIHide();// 0x28ad078ea041
	void ExecuteSolarUIClosed();// 0x28ac078ea041
	void ExecuteSolarUIClean();// 0x28ab078ea041
	void ExecuteBindCustomControl();// 0x28aa078ea041
	void CloseSelfPanelUI();// 0x28a9078ea041
	SolarUserWidget*[] CacheAllSolarUserWidgetChilds();// 0x28a8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetInputManager.Object
	delegate OnTouchStartDetected;//[Offset: 0x28, Size: 0x10]
	delegate OnTouchUpdate;//[Offset: 0x38, Size: 0x10]
	delegate OnTouchEndDetected;//[Offset: 0x48, Size: 0x10]
	delegate OnPointerStartDetected;//[Offset: 0x58, Size: 0x10]
	delegate OnPointerUpdate;//[Offset: 0x68, Size: 0x10]
	delegate OnPointerEndDetected;//[Offset: 0x78, Size: 0x10]
	<int,Vector2D> TouchedList;//[Offset: 0x90, Size: 0x50]
	<int,Vector2D> PointerList;//[Offset: 0xe0, Size: 0x50]
	Widget* K2_GetManagedWidget();// 0x624f078ea041
	bool GetWidgetTouchedList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x624e078ea041
	bool GetWidgetPointerList(SolarUserWidget* InWidget, out <int,Vector2D> OutList);// 0x624d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayAnimationParams
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputActionContext.Object
	InputMappingContext* InputMappingContext;//[Offset: 0x48, Size: 0x8]
	<Key,InputAction*> KeyChordInputActionDict;//[Offset: 0x50, Size: 0x50]
	<FName,SolarInputActionEntry> ActionInputActionDict;//[Offset: 0xa0, Size: 0x50]
	<FName,SolarInputActionEntry> ChordActionInputActionDict;//[Offset: 0xf0, Size: 0x50]
	InputAction* NullInputAction;//[Offset: 0x140, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputMappingContext.DataAsset.Object
	EnhancedActionKeyMapping[] Mappings;//[Offset: 0x30, Size: 0x10]
	FText ContextDescription;//[Offset: 0x40, Size: 0x18]
	void UnmapKey(const InputAction* Action, Key Key);// 0x4045078ea041
	void UnmapAll();// 0x4044078ea041
	void UnmapAction(const InputAction* Action);// 0x4043078ea041
	EnhancedActionKeyMapping MapKey(const InputAction* Action, Key ToKey);// 0x4042078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnhancedActionKeyMapping
	InputAction* Action;//[Offset: 0x0, Size: 0x8]
	Key Key;//[Offset: 0x8, Size: 0x18]
	bool bShouldBeIgnored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	InputTrigger*[] Triggers;//[Offset: 0x28, Size: 0x10]
	InputModifier*[] Modifiers;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputAction.DataAsset.Object
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bTriggerWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bReserveAllMappings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	enum ValueType;//[Offset: 0x33, Size: 0x1]
	InputTrigger*[] Triggers;//[Offset: 0x38, Size: 0x10]
	InputModifier*[] Modifiers;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputTrigger.Object
	float ActuationThreshold;//[Offset: 0x28, Size: 0x4]
	InputActionValue LastValue;//[Offset: 0x2c, Size: 0x10]
	enum UpdateState(const EnhancedPlayerInput* PlayerInput, InputActionValue ModifiedValue, float DeltaTime);// 0x404b078ea041
	bool IsActuated(out const InputActionValue ForValue);// 0x404a078ea041
	enum GetTriggerType();// 0x4049078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputActionValue
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnhancedPlayerInput.PlayerInput.Object
	<InputMappingContext*,int> AppliedInputContexts;//[Offset: 0x3a8, Size: 0x50]
	EnhancedActionKeyMapping[] EnhancedActionMappings;//[Offset: 0x3f8, Size: 0x10]
	<InputAction*,InputActionInstance> ActionInstanceData;//[Offset: 0x458, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputActionInstance
	InputAction* SourceAction;//[Offset: 0x0, Size: 0x8]
	InputTrigger*[] Triggers;//[Offset: 0x10, Size: 0x10]
	InputModifier*[] Modifiers;//[Offset: 0x20, Size: 0x10]
	InputModifier*[] PerInputModifiers;//[Offset: 0x30, Size: 0x10]
	InputModifier*[] FinalValueModifiers;//[Offset: 0x40, Size: 0x10]
	float ElapsedProcessedTime;//[Offset: 0x60, Size: 0x4]
	float ElapsedTriggeredTime;//[Offset: 0x64, Size: 0x4]
	enum TriggerEvent;//[Offset: 0x68, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputModifier.Object
	InputActionValue ModifyRaw(const EnhancedPlayerInput* PlayerInput, InputActionValue CurrentValue, float DeltaTime);// 0x4048078ea041
	LinearColor GetVisualizationColor(InputActionValue SampleValue, InputActionValue FinalValue);// 0x4047078ea041
	enum GetExecutionPhase();// 0x4046078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputActionEntry
	InputAction* InputAction;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAdapterWidget.ContentWidget.PanelWidget.Widget.Visual.Object
	enum WidgetLoadType;//[Offset: 0x149, Size: 0x1]
	SoftClassPath MobileWidgetPath;//[Offset: 0x150, Size: 0x18]
	SoftClassPath DesktopWidgetPath;//[Offset: 0x168, Size: 0x18]
	WidgetOverrideParam[] OverrideParamList;//[Offset: 0x180, Size: 0x10]
	SoftClassPath CurWidgetPath;//[Offset: 0x190, Size: 0x18]
	UserWidget* AdapteeWidget;//[Offset: 0x1a8, Size: 0x8]
	bool bNeedExecuteWidgetOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	void SetNeedExecuteWidgetOpened(bool bInNeedExecuteWidgetOpened);// 0x4dbb078ea041
	void RefreshUIByOverrideParams(out const WidgetOverrideParam[] WidgetOverrideParams);// 0x4dba078ea041
	void LoadUserWidgetResource();// 0x4db9078ea041
	bool IsNeedExecuteWidgetOpened();// 0x4db8078ea041
	UserWidget* GetAdapteeWidget();// 0x4db7078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetOverrideParam
	enum Type;//[Offset: 0x0, Size: 0x1]
	FName ChildName;//[Offset: 0x4, Size: 0x8]
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	FText Text;//[Offset: 0x10, Size: 0x18]
	int LocTextID;//[Offset: 0x28, Size: 0x4]
	SlateBrush Brush;//[Offset: 0x30, Size: 0xe0]
	FString CustomParameter;//[Offset: 0x110, Size: 0x10]
	GameplayTag GameplayTag;//[Offset: 0x120, Size: 0x8]
	FString[] MetaData;//[Offset: 0x128, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x140, Size: 0xe0]
	delegate BrushDelegate;//[Offset: 0x220, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x230, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x240, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x254, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x3f2f078ea041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3f2e078ea041
	void SetBrushTintColor(SlateColor TintColor);// 0x3f2d078ea041
	void SetBrushSize(Vector2D DesiredSize);// 0x3f2c078ea041
	void SetBrushResourceObject(Object* ResourceObject);// 0x3f2b078ea041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x3f2a078ea041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x3f29078ea041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x3f28078ea041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x3f27078ea041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x3f26078ea041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x3f25078ea041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x3f24078ea041
	void SetBrush(out const SlateBrush InBrush);// 0x3f23078ea041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x3f22078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xc0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x30, Size: 0xe0]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUIRoot.SolarUserWidget.UserWidget.Widget.Visual.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DestroyObjectStruct
	UserWidget* RootWidget;//[Offset: 0x0, Size: 0x8]
	FString FullPath;//[Offset: 0x8, Size: 0x10]
	DestroyObjectEntry[] Objects;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DestroyObjectEntry
	Object* Object;//[Offset: 0x0, Size: 0x8]
	FString FullPath;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FireInputWidget.Widget.Visual.Object
	SlateBrush JoyStickThumb;//[Offset: 0x140, Size: 0xe0]
	SlateBrush JoyStickThumbPress;//[Offset: 0x220, Size: 0xe0]
	SlateBrush JoyStickIcon;//[Offset: 0x300, Size: 0xe0]
	Vector2D VisualSize;//[Offset: 0x3e0, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x3e8, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x3f0, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x3f8, Size: 0x8]
	float ActiveOpacity;//[Offset: 0x400, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x404, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x408, Size: 0x4]
	bool bPreventReCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 0x1]
	delegate OnJoystickPressed;//[Offset: 0x420, Size: 0x10]
	delegate OnJoystickRelease;//[Offset: 0x430, Size: 0x10]
	delegate OnInputYawAndPitch;//[Offset: 0x440, Size: 0x10]
	void SetJoyStickThumbBrush(out const ButtonStyle ButtonStyle);// 0x4780078ea041
	void SetJoyStickIcon(out const SlateBrush Icon);// 0x477f078ea041
	void SetInputScale(Vector2D Scale);// 0x477e078ea041
	void ResetControlInput();// 0x477d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x149, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x14c, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x160, Size: 0x8a0]
	SlateWidgetStyleAsset* Style;//[Offset: 0xa00, Size: 0x8]
	SlateBrushAsset* UncheckedImage;//[Offset: 0xa08, Size: 0x8]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0xa10, Size: 0x8]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0xa18, Size: 0x8]
	SlateBrushAsset* CheckedImage;//[Offset: 0xa20, Size: 0x8]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0xa28, Size: 0x8]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0xa30, Size: 0x8]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0xa38, Size: 0x8]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0xa40, Size: 0x8]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0xa48, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0xa50, Size: 0x1]
	Margin Padding;//[Offset: 0xa54, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0xa68, Size: 0x28]
	byte ClickMethod;//[Offset: 0xa90, Size: 0x1]
	byte TouchMethod;//[Offset: 0xa91, Size: 0x1]
	byte PressMethod;//[Offset: 0xa92, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa93, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0xa98, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x507b078ea041
	void SetPressMethod(byte InPressMethod);// 0x507a078ea041
	void SetIsChecked(bool InIsChecked);// 0x5079078ea041
	void SetClickMethod(byte InClickMethod);// 0x5078078ea041
	void SetCheckedState(enum InCheckedState);// 0x5077078ea041
	bool IsPressed();// 0x5076078ea041
	bool IsChecked();// 0x5075078ea041
	enum GetCheckedState();// 0x5074078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0xe0]
	SlateBrush UncheckedHoveredImage;//[Offset: 0xf0, Size: 0xe0]
	SlateBrush UncheckedPressedImage;//[Offset: 0x1d0, Size: 0xe0]
	SlateBrush CheckedImage;//[Offset: 0x2b0, Size: 0xe0]
	SlateBrush CheckedHoveredImage;//[Offset: 0x390, Size: 0xe0]
	SlateBrush CheckedPressedImage;//[Offset: 0x470, Size: 0xe0]
	SlateBrush UndeterminedImage;//[Offset: 0x550, Size: 0xe0]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x630, Size: 0xe0]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x710, Size: 0xe0]
	Margin Padding;//[Offset: 0x7f0, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x800, Size: 0x28]
	SlateColor BorderBackgroundColor;//[Offset: 0x828, Size: 0x28]
	SlateSound CheckedSlateSound;//[Offset: 0x850, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x868, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x880, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x8]
	Vector2D BakedSourceDimension;//[Offset: 0x50, Size: 0x8]
	Texture2D* BakedSourceTexture;//[Offset: 0x58, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x60, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x68, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x70, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x80, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x84, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0x90, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0x98, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x30]
	FName SocketName;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x160, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x178, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x188, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b0, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1c0, Size: 0x60]
	SlateBrush StrikeBrush;//[Offset: 0x220, Size: 0xe0]
	SlateBrush BackgroundBrush;//[Offset: 0x300, Size: 0xe0]
	Vector2D ShadowOffset;//[Offset: 0x3e0, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x3e8, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x3f8, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x408, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 0x1]
	enum TextTransformPolicy;//[Offset: 0x40e, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40f, Size: 0x1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x18c2078ea041
	void SetText(FText InText);// 0x18c1078ea041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x18c0078ea041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x18bf078ea041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x18be078ea041
	void SetOpacity(float InOpacity);// 0x18bd078ea041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x18bc078ea041
	void SetFont(SlateFontInfo InFontInfo);// 0x18bb078ea041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x18ba078ea041
	void SetBackgroundBrush(SlateBrush InBackgroundBrush);// 0x18b9078ea041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x18b8078ea041
	FText GetText();// 0x18b7078ea041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x18b6078ea041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x18b5078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x138, Size: 0x3]
	byte Justification;//[Offset: 0x13b, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x13c, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 0x1]
	float WrapTextAt;//[Offset: 0x140, Size: 0x4]
	Margin Margin;//[Offset: 0x144, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x154, Size: 0x4]
	bool AlwaysKeepJustification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 0x1]
	void SetJustification(byte InJustification);// 0x1852078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x28]
	FName TypefaceFontName;//[Offset: 0x48, Size: 0x8]
	int Size;//[Offset: 0x50, Size: 0x4]
	int LetterSpacing;//[Offset: 0x54, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	int OutlineBlur;//[Offset: 0x4, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x10, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x2c]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	int ZOrder;//[Offset: 0x68, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x63f5078ea041
	void SetSize(Vector2D InSize);// 0x63f4078ea041
	void SetPosition(Vector2D InPosition);// 0x63f3078ea041
	void SetOffsets(Margin InOffset);// 0x63f2078ea041
	void SetMinimum(Vector2D InMinimumAnchors);// 0x63f1078ea041
	void SetMaximum(Vector2D InMaximumAnchors);// 0x63f0078ea041
	void SetLayout(out const AnchorData InLayoutData);// 0x63ef078ea041
	void SetAutoSize(bool InbAutoSize);// 0x63ee078ea041
	void SetAnchors(Anchors InAnchors);// 0x63ed078ea041
	void SetAlignment(Vector2D InAlignment);// 0x63ec078ea041
	int GetZOrder();// 0x63eb078ea041
	Vector2D GetSize();// 0x63ea078ea041
	Vector2D GetPosition();// 0x63e9078ea041
	Margin GetOffsets();// 0x63e8078ea041
	AnchorData GetLayout();// 0x63e7078ea041
	bool GetAutoSize();// 0x63e6078ea041
	Anchors GetAnchors();// 0x63e5078ea041
	Vector2D GetAlignment();// 0x63e4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x10]
	bool bLockRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	Vector2D Alignment;//[Offset: 0x24, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomWidget_TableRow.TableRowBase
	SoftObjectPath TeammateState;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath BattleScore;//[Offset: 0x20, Size: 0x18]
	SoftObjectPath SpectatorListPath;//[Offset: 0x38, Size: 0x18]
	SoftObjectPath SafeAreaProgress;//[Offset: 0x50, Size: 0x18]
	SoftObjectPath JobEffectListPath;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath JobEffectSelectPanelPath;//[Offset: 0x80, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TableRowBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UINavigationManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	<FString,SolarUserWidget*> WidgetOpenedMap;//[Offset: 0x38, Size: 0x50]
	UserWidget*[] TmpRemovedWidgets;//[Offset: 0x88, Size: 0x10]
	SolarUserWidget*[] CachedCreatedWidgets;//[Offset: 0x98, Size: 0x10]
	SolarUIRoot* SolarUIRoot;//[Offset: 0xb8, Size: 0x8]
	void UnbindCustomControlDefine(SolarUserWidget* PanelWidget, SolarUserWidget* UserWidget);// 0x613f078ea041
	SolarUserWidget* ShowUIBySubClass(const class SolarUserWidget SubClass, enum RootID);// 0x613e078ea041
	bool ShowPanelUI(SolarUserWidget* createWidget, FString UniqueWidgetKey);// 0x613d078ea041
	void RemoveUserWidgetLuaRef(SolarUserWidget* UserWidget);// 0x613c078ea041
	void RemoveUIFromOpenedMap(FString UniqueWidgetKey);// 0x613b078ea041
	void RemoveAllSolarWidgets();// 0x613a078ea041
	void PrePooledWidgetReset(UserWidget* UserWidget);// 0x6139078ea041
	void OnShowPanelUI(SolarUserWidget* UserWidget);// 0x6138078ea041
	void OnPostLoadMapInitUIRoot(World* InWorld);// 0x6137078ea041
	void OnOpenPanelUI(SolarUserWidget* UserWidget);// 0x6136078ea041
	void OnHidePanelUI(SolarUserWidget* UserWidget);// 0x6135078ea041
	void OnDisplayMetricsChanged();// 0x6134078ea041
	void OnClosePanelUI(SolarUserWidget* UserWidget);// 0x6133078ea041
	bool IsUserWidgetInScope(out const class SolarUserWidget Class, out enum OutCurScope, out enum OutDstScope);// 0x6132078ea041
	SolarUserWidget* GetShowTopWidget();// 0x6131078ea041
	UserWidget* GetOpenedWidget(FString UniqueWidgetKey);// 0x6130078ea041
	void CloseUIBySubClass(const class SolarUserWidget SubClass);// 0x612f078ea041
	void ClosePanelUI(SolarUserWidget* closeWidget, FString UniqueWidgetKey);// 0x612e078ea041
	void ClearNonPersistentWidget();// 0x612d078ea041
	void ClearAllOpenedWidget();// 0x612c078ea041
	void BindWidgetVisibilityChangedEvent(out const delegate VisibilityChangedEvent);// 0x612b078ea041
	void BindCustomControlDefine(SolarUserWidget* PanelWidget, SolarUserWidget* UserWidget, FString FullPath);// 0x612a078ea041
	void BatchRemovedWidgets(bool bRemoveAll);// 0x6129078ea041
	void AddUIToOpenedMap(FString UniqueWidgetKey, SolarUserWidget* Widget);// 0x6128078ea041
	void AddBatchRemovedWidget(SolarUserWidget* UserWidget);// 0x6127078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SeparatedPkgManager.Object
	delegate OnSepPkgDataInitFinish;//[Offset: 0x30, Size: 0x10]
	<int,SeparatedPkgDownloader*> ActiveDownloaders;//[Offset: 0x70, Size: 0x50]
	bool RequireSeparatedPackageDownload(int InPkgID, out SeparatedPkgDownloader* OutDownloader, bool bIncludeMain, bool bIncludeOptional);// 0x4d03078ea041
	void OnPakFileMounted_Implement(FString PakFilename, const int ChunkID);// 0x4d02078ea041
	bool IsSepareatedPkgDownloading(out const int PkgID);// 0x4d01078ea041
	bool IsSeparatedPackageAvailable(int InPkgID);// 0x4d00078ea041
	void InvokeOnSepPkgDataInitFinish();// 0x4cff078ea041
	bool IfSeparatedPakDownloaded(int PakID, bool bIsOptional);// 0x4cfe078ea041
	FString GetSeparetedPkgSavedDirectory();// 0x4cfd078ea041
	SeparatedPkgManager* GetSeparatedPackageManager(Object* WorldContextObject);// 0x4cfc078ea041
	FString[] GetContentBasePakNames();// 0x4cfb078ea041
	SeparatedPkgDownloader* GetActiveDownloader(int InPkgID);// 0x4cfa078ea041
	void Deinitialize();// 0x4cf9078ea041
	void ClearSepPkgDownloader(int InPkgID);// 0x4cf8078ea041
	void ClearAllDownloaders();// 0x4cf7078ea041
	void BindOnPakFileMounted();// 0x4cf6078ea041
	void AllOptionalPaksDownloaded(bool bAllDownloaded);// 0x4cf5078ea041
	void AddAvailableChunk(int ChunkID);// 0x4cf4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SeparatedPkgDownloader.Object
	delegate OnDownloadInfoDetected;//[Offset: 0x30, Size: 0x10]
	delegate OnSepPkgDownloading;//[Offset: 0x40, Size: 0x10]
	delegate OnSepPkgReady;//[Offset: 0x50, Size: 0x10]
	delegate OnSepPkgDownloadFailed;//[Offset: 0x60, Size: 0x10]
	delegate OnHashCheckFailedPkgDownloader;//[Offset: 0x70, Size: 0x10]
	enum DownloadState;//[Offset: 0x80, Size: 0x1]
	int PkgID;//[Offset: 0x94, Size: 0x4]
	bool bIncludeMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bIncludeOptional;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int64 StartTimestamp;//[Offset: 0xa8, Size: 0x8]
	PakDownloadInfo[] PakInfosOnServer;//[Offset: 0xb0, Size: 0x10]
	int TotalDownloadSize;//[Offset: 0xc0, Size: 0x4]
	DownloadFileInfo[] NeedDownloadPaks;//[Offset: 0xc8, Size: 0x10]
	void StartMountPaks();// 0x4cf1078ea041
	void StartGettingSeparatedPackage();// 0x4cf0078ea041
	bool ResumeDownloadSeparatedPaks();// 0x4cef078ea041
	void ResumeDownloading();// 0x4cee078ea041
	void PromptSeparatedPackageDownloadInfo();// 0x4ced078ea041
	bool PauseDownloadSeparatedPaks();// 0x4cec078ea041
	void OnPaksMountFailed();// 0x4ceb078ea041
	void OnPaksMountCompleted(int InLastMountOrder);// 0x4cea078ea041
	void OnPaksFailed(enum InErrorType, int InErrorCode, out const FString[] Headers);// 0x4ce9078ea041
	void OnPackageListFailed(enum InErrorType, int InErrorCode, out const FString[] Headers);// 0x4ce8078ea041
	void OnHashCheckFailed();// 0x4ce7078ea041
	void OnEacPakCompleted(FString LocalFilePath, int64 CDNServerTimeStamp);// 0x4ce6078ea041
	void OnEachPakDownloading(FString Filename, int DownloadSize, int TotalSize, int CachedSize);// 0x4ce5078ea041
	void OnAllPaksCompleted(out const FString[] LocalFilePaths, int64 CDNServerTimeStamp);// 0x4ce4078ea041
	int64 GetLocalTime();// 0x4ce3078ea041
	void ClearEvents();// 0x4ce2078ea041
	void CheckServerInfo();// 0x4ce1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PakDownloadInfo
	FString Filename;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DownloadFileInfo
	FString URL;//[Offset: 0x0, Size: 0x10]
	FString Filename;//[Offset: 0x10, Size: 0x10]
	FString HashStr;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputMappingManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	delegate OnInputMappingUpdate;//[Offset: 0x38, Size: 0x10]
	delegate OnInputDeviceChanged;//[Offset: 0x48, Size: 0x10]
	<FString,InputKeyMappingEntry> KeyMappingEntryDict;//[Offset: 0x58, Size: 0x50]
	InputKeyMappingEntry[] CacheKeyMappingEntries;//[Offset: 0xa8, Size: 0x10]
	InputAction*[] PreCacheInputActions;//[Offset: 0xb8, Size: 0x10]
	void SplitInputChord(out const InputChord InInputChord, out FString KeyStr1, out FString KeyStr2);// 0x2702078ea041
	bool IsInputTypeGamepad();// 0x2701078ea041
	void InputDeviceChangedDelegate__DelegateSignature(InputDeviceProxy InputDeviceProxy);// 0x26ff078ea041
	InputKeyMappingEntry[] GetKeyMappingEntries();// 0x26fe078ea041
	enum GetCurrentInputType();// 0x26fd078ea041
	FName GetCurrentGamepadType();// 0x26fc078ea041
	InputKeyMappingEntry FindKeyMappingEntry(FString ActionID);// 0x26fb078ea041
	InputKeyMappingEntry CreateKeyMappingEntry(FString InActionID, FString InActionName, const enum InActionType, float InScale, FString InKeyStr1, FString InKeyStr2, FString InKeyStr3, const enum InInputTriggerType1, const enum InInputTriggerType2, const enum InInputTriggerType3);// 0x26f6078ea041
	bool CreateInputChord(FString KeyStr1, FString KeyStr2, out InputChord OutInputChord);// 0x26f5078ea041
	void ApplyKeyMappings();// 0x26f4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputKeyMappingEntry
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString ActionID;//[Offset: 0x8, Size: 0x10]
	FString ActionName;//[Offset: 0x18, Size: 0x10]
	enum ActionType;//[Offset: 0x28, Size: 0x1]
	float Scale;//[Offset: 0x2c, Size: 0x4]
	InputKeyMappingPair[] KeyMappingPairList;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputKeyMappingPair
	FString KeyStr1;//[Offset: 0x0, Size: 0x10]
	FString KeyStr2;//[Offset: 0x10, Size: 0x10]
	enum TriggerType;//[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputDeviceProxy
	enum InputType;//[Offset: 0x0, Size: 0x1]
	FName GamepadType;//[Offset: 0x4, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTimerManager.Object
	bool bFullCleanup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void UnPauseTimerInternal(TimerHandle Handle);// 0x5e29078ea041
	void TimerCallbackToLuaInternal(FString CallbackKey);// 0x5e28078ea041
	TimerHandle SetTimerForNextTickInternal(FString CallbackKey);// 0x5e27078ea041
	void PauseTimerInternal(TimerHandle Handle);// 0x5e26078ea041
	void OnLuaContextCleanup(const bool InBFullCleanup);// 0x5e25078ea041
	bool IsValidTimerInternal(TimerHandle Handle);// 0x5e24078ea041
	bool IsTimerActiveInternal(TimerHandle Handle);// 0x5e23078ea041
	void ClearTimerInternal(TimerHandle Handle);// 0x5e22078ea041
	TimerHandle AddTimerInternal(FString CallbackKey, const float Rate, const bool IsLoop, const float InitialStartDelay);// 0x5e21078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarMainPlayerModel.Object
	void SyncFromPlayerData(int InAccountFlag);// 0x54c1078ea041
	bool IsAccountFlagOn();// 0x54c0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAbstractModel.SolarContainer.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameConfigManager.Object
	DataTable* WeaponDTInstance;//[Offset: 0x30, Size: 0x8]
	DataTable* WeaponAppearanceDTInstance;//[Offset: 0x38, Size: 0x8]
	DataTable* ItemActorDTInstance;//[Offset: 0x40, Size: 0x8]
	DataTable* BackpackTrailAssembingDTInstance;//[Offset: 0x48, Size: 0x8]
	DataTable* CharacterDTInstance;//[Offset: 0x50, Size: 0x8]
	DataTable* ItemResourceDTInstance;//[Offset: 0x58, Size: 0x8]
	DataTable* BuffEffectDTInstance;//[Offset: 0x60, Size: 0x8]
	DataTable* ScreenEffectDTInstance;//[Offset: 0x68, Size: 0x8]
	GlobalWeaponConfig* WeaponsConfigAsset;//[Offset: 0x70, Size: 0x8]
	GlobalVehicleWeaponConfig* GlobalVehicleWeaponConfigAsset;//[Offset: 0x78, Size: 0x8]
	GlobalHandheldWeaponConfig* GlobalHandheldWeaponConfigAsset;//[Offset: 0x80, Size: 0x8]
	SolarRoleSkillDataConfig* RoleConfigAsset;//[Offset: 0x88, Size: 0x8]
	float HeadHitValue;//[Offset: 0x90, Size: 0x4]
	float ShieldReducePhy;//[Offset: 0x94, Size: 0x4]
	float ShieldReduceEn;//[Offset: 0x98, Size: 0x4]
	float ArmorReducePhy;//[Offset: 0x9c, Size: 0x4]
	float ArmorReduceEn;//[Offset: 0xa0, Size: 0x4]
	int BackpackEnergyID;//[Offset: 0xa4, Size: 0x4]
	int BackpackExtraEnergyID;//[Offset: 0xa8, Size: 0x4]
	int MedicineItemId;//[Offset: 0xac, Size: 0x4]
	int RadarItemId;//[Offset: 0xb0, Size: 0x4]
	int ShieldRechargerItemId;//[Offset: 0xb4, Size: 0x4]
	int ShieldBigRechargerItemId;//[Offset: 0xb8, Size: 0x4]
	float UnPickupItemTime;//[Offset: 0xbc, Size: 0x4]
	float UnAutoPickupItemTime;//[Offset: 0xc0, Size: 0x4]
	float AutoPickupTime;//[Offset: 0xc4, Size: 0x4]
	float AutoMarkCDTime;//[Offset: 0xc8, Size: 0x4]
	int[] AutoMarkItemTypeList;//[Offset: 0xd0, Size: 0x10]
	float AutoMarkTeammateDistance;//[Offset: 0xe0, Size: 0x4]
	float AutoMarkDamagingCharacterDistance;//[Offset: 0xe4, Size: 0x4]
	float PickupCapsuleRadius;//[Offset: 0xe8, Size: 0x4]
	float PickupCapsuleHalfHeight;//[Offset: 0xec, Size: 0x4]
	void OnInitialized();// 0x5179078ea041
	SolarRoleSkillDataConfig* GetSolarRoleSkillDataConfig();// 0x5178078ea041
	LinearColor GetLowQualityColorByQuality(int Quality);// 0x5177078ea041
	LinearColor GetHUDDecorateColorByQuality(int Quality);// 0x5176078ea041
	LinearColor GetHUDColorByQuality(int Quality);// 0x5175078ea041
	LinearColor GetHUDBGColorByQuality(int Quality);// 0x5174078ea041
	LinearColor GetHighQualityColorByQuality(int Quality);// 0x5173078ea041
	GlobalWeaponConfig* GetGlobalWeaponConfig();// 0x5172078ea041
	GlobalVehicleWeaponConfig* GetGlobalVehicleWeaponConfig();// 0x5171078ea041
	GlobalHandheldWeaponConfig* GetGlobalHandheldWeaponConfig();// 0x5170078ea041
	FString GetFGByQuality(int Quality);// 0x516f078ea041
	LinearColor GetColorByQuality(int Quality);// 0x516e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarRoleSkillDataConfig.DataAsset.Object
	PassiveSkillDataAsset* ClassCommonPassiveSkill;//[Offset: 0x30, Size: 0x28]
	<enum,HeroClassConfig> HeroClassConfigs;//[Offset: 0x58, Size: 0x50]
	DataTable* RoleSkillDataTable;//[Offset: 0xa8, Size: 0x8]
	DataTable* BattleUpgradeEffectTypeDataTable;//[Offset: 0xb0, Size: 0x8]
	int RoleSkillCannotActiveNoticeID;//[Offset: 0xb8, Size: 0x4]
	SoftClassPath UniqueSkillForbiddenGameplayEffect;//[Offset: 0xc0, Size: 0x18]
	SoftClassPath TacticalSkillForbiddenGameplayEffect;//[Offset: 0xd8, Size: 0x18]
	SoftClassPath InitCDValueGameplayEffect;//[Offset: 0xf0, Size: 0x18]
	SoftClassPath SuperSkillBlockGameplayEffect;//[Offset: 0x108, Size: 0x18]
	SoftClassPath TacticalSkillBlockGameplayEffect;//[Offset: 0x120, Size: 0x18]
	SoftClassPath SuperCanTriggerAgainGameplayEffect;//[Offset: 0x138, Size: 0x18]
	SoftClassPath TacticalCanTriggerAgainGameplayEffect;//[Offset: 0x150, Size: 0x18]
	class GameplayEffect* UsingContinuousSkillStatusEffect;//[Offset: 0x168, Size: 0x8]
	class GameplayEffect* HoldingSkillStatusEffect;//[Offset: 0x170, Size: 0x8]
	DataTable* WeaponUIStyleDataTable;//[Offset: 0x178, Size: 0x8]
	<int,FString> CharacterUpgradeEffects;//[Offset: 0x180, Size: 0x50]
	enum GetLevelUpRewardType(const int CharacterId, const int TargetLevel);// 0x575e078ea041
	SoftObjectPath GetLevelUpInnerIconPath(const int CharacterId, const int TargetLevel);// 0x575d078ea041
	FString GetLevelUpInnerDescription(const int CharacterId, const int TargetLevel);// 0x575c078ea041
	SoftObjectPath[] GetLevelUpAllInnerIconPath(const int CharacterId, const int TargetLevel);// 0x575b078ea041
	FString[] GetLevelUpAllInnerDescription(const int CharacterId, const int TargetLevel);// 0x575a078ea041
	FString GetEffectIdForCharacterUpgrade(const int TargetLevel);// 0x5759078ea041
	enum GetClassTypeForCharacter(const int CharacterId);// 0x5758078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PassiveSkillDataAsset.PrimaryDataAsset.DataAsset.Object
	SoftClassPath SkillClassPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SkillIconPath;//[Offset: 0x48, Size: 0x18]
	WrappedLocalTextID SkillName;//[Offset: 0x60, Size: 0x4]
	WrappedLocalTextID SkillDescription;//[Offset: 0x64, Size: 0x4]
	PassiveSkillLevelDescription[] LevelUpConfigs;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PrimaryDataAsset.DataAsset.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WrappedLocalTextID
	int LocalTextId;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PassiveSkillLevelDescription
	WrappedLocalTextID InnerDescriptionLocalTextID;//[Offset: 0x0, Size: 0x4]
	WrappedLocalTextID ShortDescriptionLocalTextID;//[Offset: 0x4, Size: 0x4]
	SoftObjectPath InnerIconPath;//[Offset: 0x8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroClassConfig
	PassiveSkillDataAsset* SpecificPassiveSkill;//[Offset: 0x0, Size: 0x28]
	float HPGridUnit;//[Offset: 0x28, Size: 0x4]
	bool bEnableCombatRegeneration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	int RegenGrids;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GlobalWeaponConfig.SolarDataAsset.DataAsset.Object
	Vector2D StandardViewportSize;//[Offset: 0x38, Size: 0x8]
	float StandardDPIScale;//[Offset: 0x40, Size: 0x4]
	bool bWeaponReceiveShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	<class Actor,WeaponHitResponse> WeaponHitResponseClassMap;//[Offset: 0x48, Size: 0x50]
	<FName,WeaponHitResponse> WeaponHitResponseTagMap;//[Offset: 0x98, Size: 0x50]
	<class Actor,WeaponHitResponse> WeaponHitResponseSameTeamClassMap;//[Offset: 0xe8, Size: 0x50]
	<FName,WeaponHitResponse> WeaponHitResponseSameTeamTagMap;//[Offset: 0x138, Size: 0x50]
	RuntimeFloatCurve HitEffectScaleRuntimeCurve;//[Offset: 0x188, Size: 0x88]
	bool bCanOperateWhenOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	RuntimeFloatCurve WeaponCrosshairSpreadSpeedRuntimeCurve;//[Offset: 0x218, Size: 0x88]
	RuntimeFloatCurve WeaponCrosshairBackSpeedRuntimeCurve;//[Offset: 0x2a0, Size: 0x88]
	float PriamayFireIgnoreInterval;//[Offset: 0x328, Size: 0x4]
	Vector AssistAimAutoFireBoxExtent;//[Offset: 0x32c, Size: 0xc]
	byte[] AssistAimAutoFireBlockTypes;//[Offset: 0x338, Size: 0x10]
	WeaponAssistAimConfig* AssistAimConfig;//[Offset: 0x348, Size: 0x8]
	<enum,FString> HitFeedbackMapForUI;//[Offset: 0x350, Size: 0x50]
	float EnableHeadShotDamageMinScale;//[Offset: 0x3a0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarDataAsset.DataAsset.Object
	void InitFromAsset();// 0x47ef078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponHitResponse
	bool bForceBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bForcePenetrate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bForceAimIgnore;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectHalo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bTakeDamage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bShowExplode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bShowDecal;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bPlaySound;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAssistAimConfig.DataAsset.Object
	byte AssistAimTargetFlag;//[Offset: 0x30, Size: 0x1]
	byte[] TargetDetectionBlockTypes;//[Offset: 0x38, Size: 0x10]
	byte[] LockAimingBlockTypes;//[Offset: 0x48, Size: 0x10]
	int MaxAllowedTargetCandidateCount;//[Offset: 0x58, Size: 0x4]
	float DistanceToAimCenterWeight;//[Offset: 0x5c, Size: 0x4]
	float DistanceToLocalCharacterWeight;//[Offset: 0x60, Size: 0x4]
	bool bEnableAssistFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bEnableGlobalSensitivityScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	WeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAll;//[Offset: 0x68, Size: 0x60]
	WeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAllGamepad;//[Offset: 0xc8, Size: 0x60]
	bool bEnableAssistAimInSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	WeaponAssistAimWeaponConfigAll AssistAimWeaponConfigSwitch;//[Offset: 0x130, Size: 0x60]
	WeaponAssistAimByCharacterTag[] AssistAimWeaponConfigsByCharacterTag;//[Offset: 0x190, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAssistAimByCharacterTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	WeaponAssistAimWeaponConfig* AssistAimConfig;//[Offset: 0x50, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GlobalVehicleWeaponConfig.SolarDataAsset.DataAsset.Object
	AssitLockBoneWeight[] AssistLockBoneWeight;//[Offset: 0x38, Size: 0x10]
	AssitLockBoneWeight[] SortAssistLockBoneWeight;//[Offset: 0x48, Size: 0x10]
	float CoefficientHUD;//[Offset: 0x58, Size: 0x4]
	float CoefficientWorld;//[Offset: 0x5c, Size: 0x4]
	float CoefficientHUDUnlock;//[Offset: 0x60, Size: 0x4]
	float CoefficientWorldUnlock;//[Offset: 0x64, Size: 0x4]
	float HudDistFromAssistLockPawnToSecondReticle;//[Offset: 0x68, Size: 0x4]
	RuntimeFloatCurve AssistLockUIScaleCurve;//[Offset: 0x70, Size: 0x88]
	float CrosshairAimEnemyEndTime;//[Offset: 0xf8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AssitLockBoneWeight
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	float BoneWeight;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GlobalHandheldWeaponConfig.SolarDataAsset.DataAsset.Object
	DataTable* WeaponLODTable;//[Offset: 0x38, Size: 0x8]
	GameplayTagContainer BlockCharacterSprintTags;//[Offset: 0x40, Size: 0x20]
	DataTable* WeaponPartEffectDescTable;//[Offset: 0x60, Size: 0x8]
	int WeaponPartEffectTipMaxinum;//[Offset: 0x68, Size: 0x4]
	float DoScopeInterval;//[Offset: 0x6c, Size: 0x4]
	float DoScopeMixedTimeThreshold;//[Offset: 0x70, Size: 0x4]
	float SprintingFireDelay;//[Offset: 0x74, Size: 0x4]
	DataTable* WeaponScopeSensitivityTable;//[Offset: 0x78, Size: 0x8]
	float CrosshairAimEnemyEndTime;//[Offset: 0x80, Size: 0x4]
	<enum,FString> CharaterPostureMap;//[Offset: 0x88, Size: 0x50]
	<int,enum> AudioPromptForNoAmmoTable;//[Offset: 0xd8, Size: 0x50]
	DataTable*[] SoundGroupMappings;//[Offset: 0x128, Size: 0x10]
	float ForceStopLoopSoundTime;//[Offset: 0x138, Size: 0x4]
	int WeaponSummonBlockNoticeID;//[Offset: 0x13c, Size: 0x4]
	int WeaponSummonOverRangeNoticeID;//[Offset: 0x140, Size: 0x4]
	DataTable* WeaponSkinTable;//[Offset: 0x148, Size: 0x8]
	<enum,FName> PartSocketNameTable;//[Offset: 0x150, Size: 0x50]
	DataTable* WeaponAttachTransformTable;//[Offset: 0x1a0, Size: 0x8]
	float WeaponOnBackpackCrouchLerpTime;//[Offset: 0x1a8, Size: 0x4]
	float ReconnectReadyTime;//[Offset: 0x1ac, Size: 0x4]
	bool bEnableNewShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	bool bEnableGunEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 0x1]
	bool bEnableRecoilRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b2, Size: 0x1]
	bool bRecoilRecoveryBlockGunEndShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b3, Size: 0x1]
	float RecoilRecoveryScale;//[Offset: 0x1b4, Size: 0x4]
	enum AimOffsetAdjustType;//[Offset: 0x1b8, Size: 0x1]
	WeaponAttributeGameplayTags WeaponAttributeTags;//[Offset: 0x1bc, Size: 0x18]
	enum AimTraceOriginType;//[Offset: 0x1d4, Size: 0x1]
	float MuzzleInWallCheckDistance;//[Offset: 0x1d8, Size: 0x4]
	float SpreadSmoothSpeed;//[Offset: 0x1dc, Size: 0x4]
	FString GetStateByPosture(enum posture);// 0x47f2078ea041
	FString GetStateByAnimState(enum CharacterState);// 0x47f1078ea041
	bool GetIsGroundByAnimState(enum CharacterState);// 0x47f0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAttributeGameplayTags
	GameplayTag Spread;//[Offset: 0x0, Size: 0x8]
	GameplayTag HorizontalRecoil;//[Offset: 0x8, Size: 0x8]
	GameplayTag VerticalRecoil;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattlePassConfigInfo.Object
	BattlePassLevelInfo[] BattlePassLevel;//[Offset: 0x28, Size: 0x10]
	bool IsMaxLevelWithExp(int BattlePassID, int TotalExp);// 0x4558078ea041
	void Initialize();// 0x4557078ea041
	int GetLevelByTestExp(int BattlePassID, int InTestExp);// 0x4556078ea041
	int GetExpNeedForLv(int BattlePassID, int Level);// 0x4555078ea041
	int GetBattllePassMaxLevel(int BattlePassID);// 0x4554078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattlePassLevelInfo
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLuaHelper.Object
	DataTable* KeyMappingInfoDataTable;//[Offset: 0x30, Size: 0x8]
	DataTable* KeyMappingDisplayInfoDataTable;//[Offset: 0x38, Size: 0x8]
	SolarPlayerReport[] SettleTeamReports;//[Offset: 0x40, Size: 0x10]
	bool WriteFile(FString FilePath, FString Content);// 0x54ba078ea041
	void UnloadCharacterOwnedBanks(Object* WorldContextObject, int CharacterId, byte Mode);// 0x54b9078ea041
	void UnloadAllCharacterOwnedBanks(Object* WorldContextObject, byte Mode);// 0x54b8078ea041
	void UELogWarning(FString str);// 0x54b7078ea041
	void UELogNetwork(FString str);// 0x54b6078ea041
	void UELogError(FString str);// 0x54b5078ea041
	void UELog(FString str);// 0x54b4078ea041
	Object* TryLoadBySoftObjectPath(out const SoftObjectPath ObjectPath);// 0x54b3078ea041
	bool TryConvertFilenameToLongPackageName(FString InFilename, out FString OutPackageName);// 0x54b2078ea041
	void TryCancelJoinCustomServerRoom();// 0x54b1078ea041
	void StaticSetGlobalRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x54b0078ea041
	void StaticSetAkState(FName StateGroup, FName State);// 0x54af078ea041
	void StaticSetAkBusConfig(FString BusName, enum ChannelConfiguration);// 0x54ae078ea041
	void StaticPostAkEventByNameGlobal(FString InEventName);// 0x54ad078ea041
	int StaticPostAkEventByNameAndWaitForEnd(Object* WorldContextObject, FString InEventName, LatentActionInfo LatentInfo);// 0x54ac078ea041
	int StaticPostAkEventByName(FString InEventName);// 0x54ab078ea041
	void SolarSetVSyncEnabled(bool bEnable);// 0x54aa078ea041
	void SolarSetSSRQuality(byte InQuality);// 0x54a9078ea041
	void SolarSetSSGIQuality(byte InQuality);// 0x54a8078ea041
	void SolarSetSSGIEnabled(bool bEnable);// 0x54a7078ea041
	void SolarSetSSAOIntensity(float InIntensity);// 0x54a6078ea041
	void SolarSetShadowQuality(int InQuality);// 0x54a5078ea041
	void SolarSetShadowFilterMethod(byte InMethod);// 0x54a4078ea041
	void SolarSetShadowDistanceScale(float InScale);// 0x54a3078ea041
	void SolarSetScreenPercentage(byte InPercentage);// 0x54a2078ea041
	void SolarSetResolution(int InWidth, int InHeight);// 0x54a1078ea041
	void SolarSetMSAAEnabled(bool bEnable);// 0x54a0078ea041
	void SolarSetMotionBlurQuality(byte InQuality);// 0x549f078ea041
	void SolarSetMobileAmbientOcclusionQuality(byte InLevel);// 0x549e078ea041
	void SolarSetMaxCSMResolution(int InResolution);// 0x549d078ea041
	void SolarSetLightShaftEnabled(bool bEnable);// 0x549c078ea041
	void SolarSetGraphicsQuality(enum InLevel);// 0x549b078ea041
	void SolarSetFrameRate(enum FrameRateLevel);// 0x549a078ea041
	void SolarSetFeatureLevel(byte FeatureLevel);// 0x5499078ea041
	void SolarSetColorGrading(enum InTheme);// 0x5498078ea041
	void SolarSetColorGain(float InGainScale);// 0x5497078ea041
	void SolarSetAntiAliasingMethodPC(byte InMethod);// 0x5496078ea041
	void SolarSetAnisotropy(byte InAnisotropy);// 0x5495078ea041
	void SolarSetAmbientOcclusionRadiusScale(float InScale);// 0x5494078ea041
	void SolarSetAmbientOcclusionLevels(byte InLevel);// 0x5493078ea041
	void SolarSelectMonitor(byte MonitorIndex);// 0x5492078ea041
	void SolarRefreshContentScaleFactorLevel();// 0x5491078ea041
	bool SolarGetTextureStreamingEnable();// 0x5490078ea041
	byte SolarGetMonitorNum();// 0x548f078ea041
	void SolarEnableTextureStreaming(bool bEnable);// 0x548e078ea041
	void SolarEnableDynamicShadow(bool bEnable);// 0x548d078ea041
	int ShouldEnterLobby();// 0x548c078ea041
	void SetSwitch(SolarAkGameObject* SolarAkGameObject, FString SwitchGroup, FString SwitchState);// 0x548b078ea041
	void SetSkeletalMeshMatFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMatResPath, int ElementIndex);// 0x548a078ea041
	void SetSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMatResPath, int ElementIndex);// 0x5489078ea041
	void SetSkeletalMeshFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewMeshResPath);// 0x5488078ea041
	void SetSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, FString NewMeshResPath);// 0x5487078ea041
	void SetSkeletalAnimBPFromConfig(SkeletalMeshComponent* SkeletalMeshComponent, out const SoftObjectPath NewAnimBPResPath);// 0x5486078ea041
	void SetSkeletalAnimBP(SkeletalMeshComponent* SkeletalMeshComponent, FString NewAnimBPResPath);// 0x5485078ea041
	void SetRenderBatch(int Mode);// 0x5484078ea041
	void SetPostProcessSettingsPC();// 0x5483078ea041
	void SetPlayerSettlementReport(out const SolarGameModeInfo GameInfo);// 0x5482078ea041
	void SetPlayerNameColorByVIPState(TextBlock* TextWidget, byte VipType);// 0x5481078ea041
	void SetPatchBuildVersion(FString Version);// 0x5480078ea041
	void SetEnableSoftwareCursorWidgets(const bool bIsEnabled);// 0x547f078ea041
	void SetCurThirdPartyInfo(FString InCurThirdPartyInfo);// 0x547e078ea041
	void SetChangeListNumber(FString ChangeListNum);// 0x547d078ea041
	void SetCanChangeInputType(PlayerController* InPlayerController, const bool bCanChange);// 0x547c078ea041
	void SetActorYawByDeltaRotatedImpl(Actor* InActor, float InDeltaYaw, bool bCheckCharaCanBeRotated);// 0x547b078ea041
	void SetActorYawByDelta(Actor* InActor, float InDeltaYaw);// 0x547a078ea041
	void ResumeBatching();// 0x5479078ea041
	Object* ResolveSoftObjectPath(out const SoftObjectPath ObjectPath);// 0x5478078ea041
	void ResetIOSgestureRecognizers();// 0x5477078ea041
	void ReloadVoiceBanks();// 0x5476078ea041
	FString ReadFileContent(FString FilePath);// 0x5475078ea041
	int PostAkEventByName(SolarAkGameObject* SolarAkGameObject, FString InEventName);// 0x5474078ea041
	void PlayVoiceLocaly(int CharacterId, int SkinId, enum Type);// 0x5473078ea041
	void PlayMusicByName(const Object* WorldContextObject, FString InEventName);// 0x5472078ea041
	void OnBroadcastModeChanged(const bool bOpen);// 0x5471078ea041
	bool MoveFile(FString DestFilePath, FString SrcFilePath);// 0x5470078ea041
	Object* LoadObject_WithOuter(Object* Outer, FString ObjectName);// 0x546f078ea041
	byte[] LoadFileToArray(FString FilePath);// 0x546e078ea041
	void LoadCharacterOwnedBanks(Object* WorldContextObject, int CharacterId, byte Mode);// 0x546d078ea041
	void LoadAllCharacterOwnedBanks(Object* WorldContextObject, byte Mode);// 0x546c078ea041
	bool IsWorldTearingDown();// 0x546b078ea041
	bool IsLocalBuild();// 0x546a078ea041
	bool IsInputTypeGamepad(PlayerController* InPlayerController);// 0x5469078ea041
	bool IsBattlePassInfoUpdated(SolarPlayerState* InPlayerState);// 0x5468078ea041
	bool HasReviveItemManager(Object* InWorldContext);// 0x5467078ea041
	FString HashMd5(FString InputText);// 0x5466078ea041
	int64 GetUtcNowTimestamp();// 0x5465078ea041
	FString GetTaskDesc(int TaskID);// 0x5464078ea041
	FString GetSourceCommitHash();// 0x5463078ea041
	FString GetSourceBuildVersion();// 0x5462078ea041
	SolarGameState* GetSolarGameState();// 0x5461078ea041
	FString GetShortName(FString LongName);// 0x5460078ea041
	FString[] GetServersUrlList();// 0x545f078ea041
	FString GetServerEnvTag();// 0x545e078ea041
	Vector2D GetScreenSizeXY();// 0x545d078ea041
	FString GetPatchBuildVersion();// 0x545c078ea041
	int GetMonsterDropItemOutcomeID(int MonsterAICharID, int StrengthGrade);// 0x545b078ea041
	int GetMonsterDeathBoxID(int MonsterAICharID);// 0x545a078ea041
	FString GetMainBuildVersion();// 0x5459078ea041
	SolarReplayPlayerController* GetLocalSolarReplayPlayerController();// 0x5458078ea041
	SolarPlayerState* GetLocalSolarPlayerState();// 0x5457078ea041
	SolarPlayerController* GetLocalSolarPlayerController();// 0x5456078ea041
	PlayerController* GetLocalPlayerController();// 0x5455078ea041
	Key GetLeftMouseKeyDown();// 0x5454078ea041
	void GetKeyMappingInfoByRowName(FString RowName, out KeyMappingRowInfo OutClassInfo);// 0x5453078ea041
	FString GetHostByDomainName(FString DomainName, bool bAppendPort);// 0x5452078ea041
	FString GetGameModeParam(int GameModeId, FString Key);// 0x5451078ea041
	int GetFileSize(FString FilePath);// 0x5450078ea041
	FString GetExtBackdoorUrl();// 0x544f078ea041
	EmojiBubbleSubsystem* GetEmojiBubbleSubsystem(SolarGameInstanceBase* GI);// 0x544e078ea041
	bool GetCurrentInputType(PlayerController* InPlayerController, out enum OutInputType);// 0x544d078ea041
	CommonInputSubsystem* GetCommonInputSubsystem(PlayerController* PlayerController);// 0x544c078ea041
	FString GetClipboardPasteText();// 0x544b078ea041
	FString GetChangeListNumber();// 0x544a078ea041
	FString GetBuildVariation();// 0x5449078ea041
	FString GetBuildMode();// 0x5448078ea041
	bool GetBroadcastState();// 0x5447078ea041
	FString GetBroadcastPlayerName(FString SolarPlayerID);// 0x5446078ea041
	int GetBroadcastPlayerId(int PlayerId);// 0x5445078ea041
	FString GetBroadcastHeroName(FString SolarPlayerID);// 0x5444078ea041
	Vector GetBoneLocationByName(SkeletalMeshComponent* SkeletalMeshComponent, FName BoneName, byte Space);// 0x5443078ea041
	FString GetBackdoorUrl();// 0x5442078ea041
	FString GetAndroidPkgName();// 0x5441078ea041
	FString[] GetAllLoadedPackagesPath();// 0x5440078ea041
	void GetAllKeyMappingInfoFromTable(out KeyMappingRowInfo[] OutKeyMappingInfo);// 0x543f078ea041
	FString GetActualBuildVersion();// 0x543e078ea041
	FString GetAbsolutePathForWrite(FString FilePath);// 0x543d078ea041
	FString GetAbsolutePathForRead(FString FilePath);// 0x543c078ea041
	Color FromHex(FString HexString);// 0x543b078ea041
	FString[] FindFilesRecursive(FString Directory, FString Filename);// 0x543a078ea041
	FString[] FindFiles(FString Directory, FString FileExtension);// 0x5439078ea041
	void EndOfPlayInEditor(Object* InWorldContext, FString EndReason, bool bPopMsgBox);// 0x5438078ea041
	void DoLuaDebug(out const FString[] cmdArray);// 0x5437078ea041
	bool DirectoryExist(FString TargetDirectory);// 0x5436078ea041
	bool DeleteFile(FString FilePath);// 0x5435078ea041
	bool DeleteDirectoryRecursively(FString Path);// 0x5434078ea041
	bool DeleteDirectory(FString Path);// 0x5433078ea041
	FString DecodeFileRawData(out const byte[] InDonwloadRawData, const bool bNeedDecode);// 0x5432078ea041
	FString DecodeFile(FString InFilePath);// 0x5431078ea041
	LevelStreamingDynamic* CreateStreamInstance(World* World, FString PackageName);// 0x5430078ea041
	Actor* CreateEmptySkeletalMeshActor();// 0x542f078ea041
	MaterialInstanceDynamic* CreateDynamicMaterial(CameraActor* CameraActor, FString TemplateMatResPath, const int RTSizeX, const int RTSizeY, byte RenderTargetFormat);// 0x542e078ea041
	bool CreateDirectoryTree(FString Path);// 0x542d078ea041
	bool CreateDirectory(FString Path);// 0x542c078ea041
	bool CopyFile(FString DestFilePath, FString SrcFilePath);// 0x542b078ea041
	void ConvertKeyMappingName(out const Key Key, out FString OutDisplayName);// 0x542a078ea041
	void CloseVirtualKeyboard();// 0x5429078ea041
	void ClipboardCopyText(FString Content);// 0x5428078ea041
	void ClearSkeletalMeshMat(SkeletalMeshComponent* SkeletalMeshComponent);// 0x5427078ea041
	bool CheckIsNeedDownLoad(int ChunkID);// 0x5426078ea041
	void ApplyVehicleSkinPreview(Object* PreviewVehicleObj, int SkinId, int PageType, Vector DefaultLoc);// 0x5425078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerReport
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	uint64 UserId;//[Offset: 0x10, Size: 0x8]
	FString NickName;//[Offset: 0x18, Size: 0x10]
	int CharacterId;//[Offset: 0x28, Size: 0x4]
	int SkinId;//[Offset: 0x2c, Size: 0x4]
	int PlayerRank;//[Offset: 0x30, Size: 0x4]
	int Gender;//[Offset: 0x34, Size: 0x4]
	int AvatarID;//[Offset: 0x38, Size: 0x4]
	FString AvatarUrl;//[Offset: 0x40, Size: 0x10]
	int AccountFlag;//[Offset: 0x50, Size: 0x4]
	int TeamRank;//[Offset: 0x54, Size: 0x4]
	int TeamID;//[Offset: 0x58, Size: 0x4]
	int PosInTeam;//[Offset: 0x5c, Size: 0x4]
	bool bHasHangUpBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int KillNum;//[Offset: 0x64, Size: 0x4]
	int KillNumToRealPlayer;//[Offset: 0x68, Size: 0x4]
	int[] VehicleKillNum_ID;//[Offset: 0x70, Size: 0x10]
	int[] VehicleKillNum_Value;//[Offset: 0x80, Size: 0x10]
	int KillTeammate;//[Offset: 0x90, Size: 0x4]
	int KillInAirNum;//[Offset: 0x94, Size: 0x4]
	int KillDownInAirNum;//[Offset: 0x98, Size: 0x4]
	int WeaponSkillKillNum;//[Offset: 0x9c, Size: 0x4]
	int P_KillStreak;//[Offset: 0xa0, Size: 0x4]
	int[] KillStreakHistory;//[Offset: 0xa8, Size: 0x10]
	int RevengeNum;//[Offset: 0xb8, Size: 0x4]
	int DeathNum;//[Offset: 0xbc, Size: 0x4]
	int KillDownNum;//[Offset: 0xc0, Size: 0x4]
	int KillDownTeammate;//[Offset: 0xc4, Size: 0x4]
	float AccurateDamage;//[Offset: 0xc8, Size: 0x4]
	int AccurateDameageTimes;//[Offset: 0xcc, Size: 0x4]
	int AccurateKillTimes;//[Offset: 0xd0, Size: 0x4]
	int AccurateKillDownTimes;//[Offset: 0xd4, Size: 0x4]
	float CauseDamage;//[Offset: 0xd8, Size: 0x4]
	float CauseDamageToRealPlayer;//[Offset: 0xdc, Size: 0x4]
	float ReceivedDamage;//[Offset: 0xe0, Size: 0x4]
	int AssistNum;//[Offset: 0xe4, Size: 0x4]
	float CollectEnergy;//[Offset: 0xe8, Size: 0x4]
	int BuyESElectricNum;//[Offset: 0xec, Size: 0x4]
	int ResurrectionCapsule;//[Offset: 0xf0, Size: 0x4]
	int TeamFriendRevive;//[Offset: 0xf4, Size: 0x4]
	float ReceivedHeal;//[Offset: 0xf8, Size: 0x4]
	float HealSelf;//[Offset: 0xfc, Size: 0x4]
	float TeammateHeal;//[Offset: 0x100, Size: 0x4]
	int OpenAirBoxNum;//[Offset: 0x104, Size: 0x4]
	float LifeTime;//[Offset: 0x108, Size: 0x4]
	int SaveCount;//[Offset: 0x10c, Size: 0x4]
	int FlyCount;//[Offset: 0x110, Size: 0x4]
	int VehicleTime;//[Offset: 0x114, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0x118, Size: 0x4]
	int TotalCharacterExp;//[Offset: 0x11c, Size: 0x4]
	bool bCharExpFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	int[] CharacterExpReason;//[Offset: 0x128, Size: 0x10]
	int CharacterExp;//[Offset: 0x138, Size: 0x4]
	int AccountExp;//[Offset: 0x13c, Size: 0x4]
	int TotalAccountExp;//[Offset: 0x140, Size: 0x4]
	int AccountLevel;//[Offset: 0x144, Size: 0x4]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	int RankID;//[Offset: 0x14c, Size: 0x4]
	int RankBeforeScore;//[Offset: 0x150, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x154, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x158, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x15c, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x160, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x164, Size: 0x4]
	int RankAfterScore;//[Offset: 0x168, Size: 0x4]
	int RankLegend;//[Offset: 0x16c, Size: 0x4]
	byte RankProtectType;//[Offset: 0x170, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 0x1]
	int WinninScoreID;//[Offset: 0x174, Size: 0x4]
	int Zomborg;//[Offset: 0x178, Size: 0x4]
	float MvpScore;//[Offset: 0x17c, Size: 0x4]
	float KDA;//[Offset: 0x180, Size: 0x4]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185, Size: 0x1]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x186, Size: 0x1]
	int[] SettlementItems;//[Offset: 0x188, Size: 0x10]
	FString[] StringExtraRewards;//[Offset: 0x198, Size: 0x10]
	int[] SendGiftGold;//[Offset: 0x1a8, Size: 0x10]
	int[] SendGiftDiamond;//[Offset: 0x1b8, Size: 0x10]
	FString[] SendGiftPlayerName;//[Offset: 0x1c8, Size: 0x10]
	FString[] SendGiftPlayerID;//[Offset: 0x1d8, Size: 0x10]
	int[] WeaponExpIds;//[Offset: 0x1e8, Size: 0x10]
	int[] WeaponLevel;//[Offset: 0x1f8, Size: 0x10]
	int[] CurWeaponExp;//[Offset: 0x208, Size: 0x10]
	int[] WeaponExps;//[Offset: 0x218, Size: 0x10]
	int[] WeaponKillNum_ID;//[Offset: 0x228, Size: 0x10]
	float[] WeaponKillNum_Value;//[Offset: 0x238, Size: 0x10]
	int[] WeaponDamage_ID;//[Offset: 0x248, Size: 0x10]
	float[] WeaponDamage_Value;//[Offset: 0x258, Size: 0x10]
	int[] VehicleDamage_ID;//[Offset: 0x268, Size: 0x10]
	float[] VehicleDamage_Value;//[Offset: 0x278, Size: 0x10]
	int[] VehicleDistance_ID;//[Offset: 0x288, Size: 0x10]
	int[] VehicleDistance_Value;//[Offset: 0x298, Size: 0x10]
	int GainCombatScore;//[Offset: 0x2a8, Size: 0x4]
	int GameModeSubID;//[Offset: 0x2ac, Size: 0x4]
	FString KillerPlayerId;//[Offset: 0x2b0, Size: 0x10]
	uint64 KillerUserId;//[Offset: 0x2c0, Size: 0x8]
	FString KillerNickName;//[Offset: 0x2c8, Size: 0x10]
	FString KillerOS;//[Offset: 0x2d8, Size: 0x10]
	FString OS;//[Offset: 0x2e8, Size: 0x10]
	int[] CharacterKillNumIDs;//[Offset: 0x2f8, Size: 0x10]
	int[] CharacterKillNumValues;//[Offset: 0x308, Size: 0x10]
	int WarmType;//[Offset: 0x318, Size: 0x4]
	int[] AchievementIDs;//[Offset: 0x320, Size: 0x10]
	int[] AchievementValues;//[Offset: 0x330, Size: 0x10]
	int LikeValue;//[Offset: 0x340, Size: 0x4]
	int[] StrategyConditionIDs;//[Offset: 0x348, Size: 0x10]
	int SettlementDisplayStrategyID;//[Offset: 0x358, Size: 0x4]
	int LastUseVehicleID;//[Offset: 0x35c, Size: 0x4]
	FString[] SavedTeammateIDArr;//[Offset: 0x360, Size: 0x10]
	int[] SavedTeammateBonusArr;//[Offset: 0x370, Size: 0x10]
	byte[] SettlementRewards;//[Offset: 0x380, Size: 0x10]
	byte[] CrateRewardData;//[Offset: 0x390, Size: 0x10]
	byte[] CollectionItems;//[Offset: 0x3a0, Size: 0x10]
	FString ClanId;//[Offset: 0x3b0, Size: 0x10]
	int KnockoutPoints;//[Offset: 0x3c0, Size: 0x4]
	bool bIsKnockoutPointsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 0x1]
	int BattlePassAddExp;//[Offset: 0x3c8, Size: 0x4]
	int BattlePassExp;//[Offset: 0x3cc, Size: 0x4]
	int BattlePassID;//[Offset: 0x3d0, Size: 0x4]
	int[] BattlePassTaskWeek;//[Offset: 0x3d8, Size: 0x10]
	int[] BattlePassTaskID;//[Offset: 0x3e8, Size: 0x10]
	int[] BattlePassTaskAdd;//[Offset: 0x3f8, Size: 0x10]
	int[] BattlePassTaskVal;//[Offset: 0x408, Size: 0x10]
	int[] UsedCharacterIDs;//[Offset: 0x418, Size: 0x10]
	int CardPose;//[Offset: 0x428, Size: 0x4]
	int Cardbackground;//[Offset: 0x42c, Size: 0x4]
	int SameClanCnt;//[Offset: 0x430, Size: 0x4]
	int CombatScore;//[Offset: 0x434, Size: 0x4]
	bool IsCheater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	byte[] SettlePunishTypes;//[Offset: 0x440, Size: 0x10]
	int MedicineUseCount;//[Offset: 0x450, Size: 0x4]
	int DriveHoverCarInWaterDistance;//[Offset: 0x454, Size: 0x4]
	int SwimDistance;//[Offset: 0x458, Size: 0x4]
	int DanceCount;//[Offset: 0x45c, Size: 0x4]
	int PosionWalkDistance;//[Offset: 0x460, Size: 0x4]
	int ShieldExpGainCount;//[Offset: 0x464, Size: 0x4]
	int UpgradeShieldCount;//[Offset: 0x468, Size: 0x4]
	int UpgradeRedShieldCount;//[Offset: 0x46c, Size: 0x4]
	int JumpBoardUseCount;//[Offset: 0x470, Size: 0x4]
	int TerminaterCount;//[Offset: 0x474, Size: 0x4]
	int CarSkillCount;//[Offset: 0x478, Size: 0x4]
	int UltimateSkillUseCount;//[Offset: 0x47c, Size: 0x4]
	int TacticalSkillUseCount;//[Offset: 0x480, Size: 0x4]
	FString[] ReCombatLimitPlayer;//[Offset: 0x488, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameModeInfo
	int GameModeId;//[Offset: 0x0, Size: 0x4]
	FString MapName;//[Offset: 0x8, Size: 0x10]
	int NumMode;//[Offset: 0x18, Size: 0x4]
	int PlayerCount;//[Offset: 0x1c, Size: 0x4]
	int TeamCount;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameState.GameState.GameStateBase.Info.Actor.Object
	SolarCharacter* LatestKillerCharacter;//[Offset: 0x2d0, Size: 0x8]
	SolarCharacter* LatestDeathCharacter;//[Offset: 0x2d8, Size: 0x8]
	SolarPlayerState*[] SolarPlayerStateArray;//[Offset: 0x300, Size: 0x10]
	SolarPlayerState*[] RealPlayerStateArray;//[Offset: 0x310, Size: 0x10]
	bool bShowBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	int[] MapVehicleSpawnTypes;//[Offset: 0x328, Size: 0x10]
	PrePooledBundle[] PrePooledBundles;//[Offset: 0x348, Size: 0x10]
	int RemainingPlayersCount;//[Offset: 0x358, Size: 0x4]
	int AlivePlayersCount;//[Offset: 0x35c, Size: 0x4]
	int RemainingTeamCount;//[Offset: 0x360, Size: 0x4]
	int PlayersCount;//[Offset: 0x364, Size: 0x4]
	byte TeamCount;//[Offset: 0x368, Size: 0x1]
	int TotalBoardingNum;//[Offset: 0x36c, Size: 0x4]
	int CapsulePlayerNum;//[Offset: 0x370, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x374, Size: 0x4]
	<class Object> LimitMaxReplicatedNumClasses;//[Offset: 0x378, Size: 0x50]
	float StartTime;//[Offset: 0x3c8, Size: 0x4]
	int NumPlayers;//[Offset: 0x3cc, Size: 0x4]
	SolarPlayerState*[] OBPlayerList;//[Offset: 0x3d0, Size: 0x10]
	int GameWarmID;//[Offset: 0x3e0, Size: 0x4]
	int TeammateNumMode;//[Offset: 0x3e4, Size: 0x4]
	GameStartConditionList GameStartConditions;//[Offset: 0x3e8, Size: 0x58]
	SolarGameplayConfigComponent* GameplayConfigComponent;//[Offset: 0x440, Size: 0x8]
	SolarTeamInfo*[] Teams;//[Offset: 0x448, Size: 0x10]
	byte NumReplicatedTeams;//[Offset: 0x458, Size: 0x1]
	SolarPlayerActivityHeatComponent* SolarPlayerActivityHeatComponent;//[Offset: 0x4a8, Size: 0x8]
	byte Countdown;//[Offset: 0x4b0, Size: 0x1]
	int EndMatchCountdown;//[Offset: 0x4b4, Size: 0x4]
	void SetTeamLastVehicleLocation(byte InTeamId, out const Vector InVehiclePosition);// 0x1bfb078ea041
	void SetSettlementStageConfigID(const int InConfigID);// 0x1bfa078ea041
	void SetCustomConfigValue(enum InType, float InValue);// 0x1bf8078ea041
	void ServerUpdateMapVehicleSpawnTypes(out const int[] InSpawnTargetVehicleTypes);// 0x1bf7078ea041
	void PlayTeamVictoryVoice();// 0x1bf6078ea041
	void OnSafeAreaIndexChanged(int NewIndex);// 0x1bf5078ea041
	void OnRep_SettlementStageConfigID();// 0x1bf4078ea041
	void OnRep_RemainingTeamCountChange();// 0x1bf3078ea041
	void OnRep_PlayersCountChange();// 0x1bf2078ea041
	void OnRep_OnPlayersCountChange();// 0x1bf1078ea041
	void OnRep_OnAlivePlayersCountChange();// 0x1bf0078ea041
	void OnRep_OBPlayerList();// 0x1bef078ea041
	void OnRep_NumReplicatedTeams();// 0x1bee078ea041
	void OnRep_NumPlayers(int PreviousNumPlayers);// 0x1bed078ea041
	void OnRep_EndMatchCountdown();// 0x1bec078ea041
	void OnRep_Countdown();// 0x1beb078ea041
	void OnRep_CapsulePlayerNum();// 0x1bea078ea041
	void OnRecordingConnectionChanged();// 0x1be9078ea041
	void OnPlayerStateEndPlay(Actor* Actor, byte EndPlayReason);// 0x1be8078ea041
	void OnOBPlayerListChange();// 0x1be7078ea041
	void OnLocalSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x1be6078ea041
	void NotifyCheatedPlayer(SolarPlayerState* CheatedPlayerState, out const FText OutReason);// 0x1be5078ea041
	void NotifyBombingEnd(int BombId);// 0x1be4078ea041
	void NotifyBombingBegin(int BombId, const Vector Location, float Radius);// 0x1be3078ea041
	void NotifyAbnormalPlayer(SolarPlayerState* AbnormalPlayerState, out const FText OutReason);// 0x1be2078ea041
	void NetMulticastVictoryAction(FString WinTeamName, SolarCharacter* LastKiller, SolarCharacter* LastDeath);// 0x1be1078ea041
	void NetMulticastNotifyDebugMessage(const int DebugIndex, const Vector SpawnerLocation, FString DebugString);// 0x1be0078ea041
	void NetMulticastNotifyCheatedPlayer(SolarPlayerState* CheatedPlayerState, const FText BanReason);// 0x1bdf078ea041
	void K2_SetCanShowBattlePrompt(bool NewValue);// 0x1bde078ea041
	bool IsSupportWeaponUpgrade();// 0x1bdd078ea041
	bool IsSupportCharacterTacticalAbility();// 0x1bdc078ea041
	bool IsSupportCharacterSuperAbility();// 0x1bdb078ea041
	bool IsSupportCharacterRole();// 0x1bda078ea041
	bool IsSupportCharacterInGameLeveling();// 0x1bd9078ea041
	float GetWorldStartTimeSeconds();// 0x1bd8078ea041
	int GetWatchingPlayerCount(bool IgnoreOffline);// 0x1bd7078ea041
	void GetTeams(out SolarTeamInfo*[] OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled);// 0x1bd6078ea041
	SolarPlayerState* GetTeamPlayerState(const byte InTeamId, const byte InPosInTeam);// 0x1bd5078ea041
	int GetTeamNumCount();// 0x1bd4078ea041
	byte GetTeammateNum(const byte InTeamId);// 0x1bd3078ea041
	SolarTeamInfo* GetTeamByName(FString InTeamName);// 0x1bd2078ea041
	SolarTeamInfo* GetTeam(byte InTeamId);// 0x1bd1078ea041
	enum GetTacticalSkillStateOperationOnInit();// 0x1bd0078ea041
	enum GetSuperSkillStateOperationOnInit();// 0x1bce078ea041
	SolarPlayerState* GetSpecTargetOrLocalPlayerState();// 0x1bcd078ea041
	SolarSafeArea* GetSolarSafeArea();// 0x1bcc078ea041
	int GetSettlementStageConfigID();// 0x1bcb078ea041
	int GetRemainingTeamCount();// 0x1bca078ea041
	int GetRemainingPlayersCount();// 0x1bc9078ea041
	void GetPlayerTeams(out SolarTeamInfo*[] OutTeams, bool FilterAlreadySettled);// 0x1bc8078ea041
	SolarPlayerState* GetPlayerStateByPlayerId(FString InPlayerID);// 0x1bc7078ea041
	SolarPlayerState* GetPlayerStateByNickName(FString InNickName);// 0x1bc6078ea041
	int GetPlayersCount();// 0x1bc5078ea041
	SolarCharacter* GetPlayerByPlayerId(FString InPlayerID);// 0x1bc4078ea041
	void GetOnlyPlayerTeams(out SolarTeamInfo*[] OutTeams, bool FilterAlreadySettled);// 0x1bc3078ea041
	void GetOnlyBotTeams(out SolarTeamInfo*[] OutTeams, bool FilterAlreadySettled);// 0x1bc2078ea041
	SolarPlayerState* GetOfflinePlayerState(FString OfflinePlayerId);// 0x1bc1078ea041
	bool GetOBPlayerList(out SolarPlayerState*[] OutPlayerList);// 0x1bc0078ea041
	SolarPlayerState* GetLocalSolarPlayerState();// 0x1bbf078ea041
	int GetEndMatchCountdown();// 0x1bbe078ea041
	bool GetCanShowBattlePrompt();// 0x1bbd078ea041
	float GetBattleStartTimeSeconds();// 0x1bbc078ea041
	void GetAllCharactersExceptTeammate(out SolarCharacter*[] CharacterArray);// 0x1bbb078ea041
	int GetAliveSolarPlayersCount(bool IgnoreOffline);// 0x1bba078ea041
	int GetAlivePlayersCount();// 0x1bb9078ea041
	byte GetAlivePlayerNumInTeamExceptDying(const byte InTeamId, bool bExceptCheater);// 0x1bb8078ea041
	void DoVictoryActionOnServer(FString InWinTeamName);// 0x1bb7078ea041
	void DoSlomoOnLocalFromConfig();// 0x1bb6078ea041
	void DoSlomoOnLocal(float TimeDilation, float TimeDuration, float DelayTime);// 0x1bb5078ea041
	void DelayPlayVictoryMusic();// 0x1bb4078ea041
	void CelebrateBattleEnd(Vector Location);// 0x1bb3078ea041
	byte CalculateTeamNum();// 0x1bb2078ea041
	void CacheSafeArea(SolarSafeArea* SafeArea);// 0x1bb1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x294, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x29c, Size: 0x8]
	int ElapsedTime;//[Offset: 0x2a4, Size: 0x4]
	void OnRep_MatchState();// 0x1bb0078ea041
	void OnRep_ElapsedTime();// 0x1baf078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PrePooledBundle
	FName ClassPath;//[Offset: 0x0, Size: 0x8]
	int Number;//[Offset: 0x8, Size: 0x4]
	bool bNeedOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bNeedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameStartConditionList
	GameplayTagContainer ServerStartConditionList;//[Offset: 0x8, Size: 0x20]
	GameplayTagContainer ClientStartConditionList;//[Offset: 0x28, Size: 0x20]
	GameStateBase* Owner;//[Offset: 0x48, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameplayConfigComponent.ActorComponent.Object
	bool EnableTestGameplayConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	class GameplayConfigBase* CGMConfig;//[Offset: 0xb8, Size: 0x8]
	class GameplayConfigBase* TestCGMConfig;//[Offset: 0xc0, Size: 0x8]
	GameplayConfigBase* InstGameplayConfig;//[Offset: 0xc8, Size: 0x8]
	GameplayConfigBase* InstTestGameplayConfig;//[Offset: 0xd0, Size: 0x8]
	GameplayConfigBase* GetConfigs();// 0x45d9078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayConfigBase.DataAsset.Object
	GameModeGlobalSetting* GameModeSettingTemplate;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameModeGlobalSetting.Object
	delegate OnGlobalSettingChanged;//[Offset: 0x28, Size: 0x10]
	bool bCanVJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bCanHJetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bOverrideVJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	float OverridenVJetCD;//[Offset: 0x3c, Size: 0x4]
	bool bOverrideHJetCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float OverridenHJetCD;//[Offset: 0x44, Size: 0x4]
	bool bEnableJetCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	enum JetAltitudeLimitationMode;//[Offset: 0x49, Size: 0x1]
	bool bEnableEnergyCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bEnableTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bEnableMinHPLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	float MinHPToLock;//[Offset: 0x50, Size: 0x4]
	bool bEnableSkydiveFollowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bEnableBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bShowVehicleOnMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	int KillStreakEndNoticeNumber;//[Offset: 0x58, Size: 0x4]
	int KillLeaderMinKillNumber;//[Offset: 0x5c, Size: 0x4]
	bool bShowRevengeNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bShowKillStreakEndNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	bool bShowTotalKillNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	bool bShowKillDownNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]
	bool bShowKillLeaderNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bShowKillLeaderShutDownNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool bShowClearTeamNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	enum WeaponInfiniteAmmoMode;//[Offset: 0x67, Size: 0x1]
	bool bEnableWeaponPartEffectTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float[] WeaponLevelDamageFactorArray;//[Offset: 0x70, Size: 0x10]
	bool bDestroyItemOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	bool bDestroyWeaponOnDiscard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool bCanRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	bool bCanLoginBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 0x1]
	bool bEnableBattlePrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bEnableBattlePrompt_BeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bEnableOpponentPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	bool bKillPlayerWhenOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1]
	int ConfigGameModeId;//[Offset: 0x88, Size: 0x4]
	bool bEnableEnemyNameMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	float EnableEnemyNameMarkDistance;//[Offset: 0x90, Size: 0x4]
	float EnemyNameMarkDuration;//[Offset: 0x94, Size: 0x4]
	int SummonedAirDropMaxSum;//[Offset: 0x98, Size: 0x4]
	float SummonedAirDropLifeTime;//[Offset: 0x9c, Size: 0x4]
	float SummonedAirDropDestroyEffectTime;//[Offset: 0xa0, Size: 0x4]
	enum[] EnableOpponentPerspectiveInGameStates;//[Offset: 0xa8, Size: 0x10]
	void SetWeaponInfiniteAmmoMode(enum NewValue);// 0x47d4078ea041
	void SetTeamDamageEnabled(bool bNewValue);// 0x47d3078ea041
	void SetSkydiveFollowMovementEnabled(bool bNewValue);// 0x47d2078ea041
	void SetShowVehicleOnMap(bool bNewValue);// 0x47d1078ea041
	void SetShowTotalKillNotice(bool InShowTotalKillNotice);// 0x47d0078ea041
	void SetShowShowClearTeamNotice(bool InShowClearTeamNotice);// 0x47cf078ea041
	void SetShowRevengeNotice(bool InShowRevengeNotice);// 0x47ce078ea041
	void SetShowKillStreakEndNotice(bool InShowKillStreakEndNotice);// 0x47cd078ea041
	void SetShowKillLeaderShutDownNotice(bool InShowKillLeaderShutDownNotice);// 0x47cc078ea041
	void SetShowKillLeaderNotice(bool InShowKillLeaderNotice);// 0x47cb078ea041
	void SetShowKillDownNotice(bool InShowKillDownNotice);// 0x47ca078ea041
	void SetMinHPToLock(float NewValue);// 0x47c9078ea041
	void SetMinHPLockEnabled(bool bNewValue);// 0x47c8078ea041
	void SetKillStreakEndNoticeNumber(int InKillStreakEndNoticeNumber);// 0x47c7078ea041
	void SetKillPlayerWhenOut(bool bNewValue);// 0x47c6078ea041
	void SetKillLeaderMinKillNumber(int InKillLeaderMinKillNumber);// 0x47c5078ea041
	void SetJetCostEnabled(bool bNewValue);// 0x47c4078ea041
	void SetJetAltitudeLimitationMode(enum NewValue);// 0x47c3078ea041
	void SetGameCanRebirth(bool bNewValue);// 0x47c2078ea041
	void SetEnergyCostEnabled(bool bNewValue);// 0x47c1078ea041
	void SetDamageEnabled(bool bNewValue);// 0x47c0078ea041
	void SetCanVJetInWater(bool bNewValue);// 0x47bf078ea041
	void SetCanLoginBattle(bool bNewValue);// 0x47be078ea041
	void SetCanHJetInWater(bool bNewValue);// 0x47bd078ea041
	void SetBigMapEnabled(bool bNewValue);// 0x47bc078ea041
	void ReceiveSettingChanged();// 0x47bb078ea041
	bool IsVJetCDOverriden();// 0x47ba078ea041
	bool IsTeamDamageEnabled();// 0x47b9078ea041
	bool IsSkydiveFollowMovementEnabled();// 0x47b8078ea041
	bool IsShowVehicleOnMap();// 0x47b7078ea041
	bool IsShowTotalKillNotice();// 0x47b6078ea041
	bool IsShowRevengeNotice();// 0x47b5078ea041
	bool IsShowKillStreakEndNotice();// 0x47b4078ea041
	bool IsShowKillLeaderShutDownNotice();// 0x47b3078ea041
	bool IsShowKillLeaderNotice();// 0x47b2078ea041
	bool IsShowKillDownNotice();// 0x47b1078ea041
	bool IsShowClearTeamNotice();// 0x47b0078ea041
	bool IsOpponentPerspectiveEnabled();// 0x47af078ea041
	bool IsMinHPLockEnabled();// 0x47ae078ea041
	bool IsKillPlayerWhenOut();// 0x47ad078ea041
	bool IsJetCostEnabledEnabled();// 0x47ac078ea041
	bool IsHJetCDOverriden();// 0x47ab078ea041
	bool IsGameCanRebirth();// 0x47aa078ea041
	bool IsGameCanLoginBattle();// 0x47a9078ea041
	bool IsEnergyCostEnabled();// 0x47a8078ea041
	bool IsEnableWeaponPartEffectTip();// 0x47a7078ea041
	bool IsDestroyWeaponOnDiscard();// 0x47a6078ea041
	bool IsDestroyItemOnDiscard();// 0x47a5078ea041
	bool IsDamageEnabled();// 0x47a4078ea041
	bool IsBigMapEnabled();// 0x47a3078ea041
	enum GetWeaponInfiniteAmmoMode();// 0x47a2078ea041
	float GetOverridenVJetCD();// 0x47a1078ea041
	float GetOverridenHJetCD();// 0x47a0078ea041
	float GetMinHPToLock();// 0x479f078ea041
	int GetKillStreakEndNoticeNumber();// 0x479e078ea041
	int GetKillLeaderMinKillNumber();// 0x479d078ea041
	enum GetJetAltitudeLimitationMode();// 0x479c078ea041
	float GetDamageFactorByWeaponLevel(int InWeaponLevel);// 0x479b078ea041
	int GetConfigGameModeId();// 0x479a078ea041
	bool CanVJetInWater();// 0x4799078ea041
	bool CanHJetInWater();// 0x4798078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerActivityHeatComponent.ActorComponent.Object
	float WeaponScore;//[Offset: 0xc0, Size: 0x4]
	float VehicleScore;//[Offset: 0xc4, Size: 0x4]
	float AbilityScore;//[Offset: 0xc8, Size: 0x4]
	CurveFloat* DistScoreCurve;//[Offset: 0xd0, Size: 0x8]
	float DefenderOrReaperScore;//[Offset: 0xd8, Size: 0x4]
	float FirstKillTimeBefore;//[Offset: 0xdc, Size: 0x4]
	float LastKillTimeLater;//[Offset: 0xe0, Size: 0x4]
	void ReceiveKillInfoNotify(SolarPlayerState* InKiller, SolarPlayerState* InVictim, out const SolarPointDamageEvent DamageEvent);// 0x55ca078ea041
	void ReceiveActivityHeatFragmentsFromReplay(FString PlayerId, out const ReplayActivityHeatFragment NewFragment);// 0x55c9078ea041
	void OnPlayerWin(FString SolarPlayerID);// 0x55c8078ea041
	void OnPlayerResurrectionParachute(FString SolarPlayerID);// 0x55c7078ea041
	void OnPlayerDeath(FString SolarPlayerID);// 0x55c6078ea041
	void OnPlayerCruiseEnded(FString SolarPlayerID);// 0x55c5078ea041
	ReplayActivityHeatFragment[] GetPlayerActivityHeatFragmentsById(FString SolarPlayerID);// 0x55c4078ea041
	void FillInPlayerActivityHeatKillDetail(SolarPlayerState* InKiller, SolarPlayerState* InVictim, out const SolarPointDamageEvent DamageEvent, out PlayerActivityHeatKillDetail OutKillDetail);// 0x55c3078ea041
	int AddPlayerActivityHeatRawData(FString SolarPlayerID, enum ActivityHeatType);// 0x55c2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPointDamageEvent.PointDamageEvent.DamageEvent
	bool bBreakShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	bool bIgnoreShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 0x1]
	float ActualShieldDamage;//[Offset: 0xac, Size: 0x4]
	bool bBreakArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bIgnoreArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	float ActualArmorDamage;//[Offset: 0xb4, Size: 0x4]
	byte SolarAttributeType;//[Offset: 0xb8, Size: 0x1]
	bool bPreFakeInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	byte HealthChangeType;//[Offset: 0xba, Size: 0x1]
	SolarAbility* DamageAbility;//[Offset: 0xc0, Size: 0x8]
	SolarAbilityEffect* DamageAbilityEffect;//[Offset: 0xc8, Size: 0x8]
	enum ResultType;//[Offset: 0xd0, Size: 0x1]
	bool bJustForShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bCanDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	int UseWeaponID;//[Offset: 0xd4, Size: 0x4]
	enum DamageType;//[Offset: 0xd8, Size: 0x1]
	Actor* DamageCauser;//[Offset: 0xdc, Size: 0x8]
	FString HitBoneName;//[Offset: 0xf0, Size: 0x10]
	bool bHitVehicleWeakPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bHitHumanoidTargetHead;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 0xc]
	HitResult HitInfo;//[Offset: 0x20, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplayActivityHeatFragment
	int FragmentId;//[Offset: 0x0, Size: 0x4]
	enum ActivityHeatType;//[Offset: 0x4, Size: 0x1]
	float TotalScore;//[Offset: 0x8, Size: 0x4]
	float BeginTime;//[Offset: 0xc, Size: 0x4]
	float EndTime;//[Offset: 0x10, Size: 0x4]
	ReplayActivityKillDetail[] ActivityKillDetails;//[Offset: 0x18, Size: 0x10]
	int KillNum;//[Offset: 0x28, Size: 0x4]
	float ActivityHotTime;//[Offset: 0x2c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplayActivityKillDetail
	float KillTime;//[Offset: 0x0, Size: 0x4]
	enum KillUseType;//[Offset: 0x4, Size: 0x1]
	int KillToolID;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerActivityHeatKillDetail
	float KillTime;//[Offset: 0x0, Size: 0x4]
	Vector VictimPosition;//[Offset: 0x4, Size: 0xc]
	FString KillerID;//[Offset: 0x10, Size: 0x10]
	FString VictimID;//[Offset: 0x20, Size: 0x10]
	bool IsAbilityKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool IsScopedKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool IsVehicleKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	bool IsAbilityActivated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int weaponid;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSafeArea.SCMMapElementBase.Actor.Object
	int CurrentIndex;//[Offset: 0x280, Size: 0x4]
	float TargetTime;//[Offset: 0x284, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x288, Size: 0x4]
	float DamageValue;//[Offset: 0x28c, Size: 0x4]
	Vector BeginLocation;//[Offset: 0x290, Size: 0xc]
	float BeginScale;//[Offset: 0x29c, Size: 0x4]
	enum AreaStatus;//[Offset: 0x2a0, Size: 0x1]
	bool IsLocalPlayerCameraInSafeArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	bool IsLocalViewFocusedCharacterInSafeArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1]
	bool bCanCausingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	float FirstDamageDelay;//[Offset: 0x30c, Size: 0x4]
	float DamageInterval;//[Offset: 0x310, Size: 0x4]
	FString LeaveSafeAreaSoundName;//[Offset: 0x318, Size: 0x10]
	FString EnterSafeAreaSoundName;//[Offset: 0x328, Size: 0x10]
	FString InPoisonPerSecSoundName;//[Offset: 0x338, Size: 0x10]
	float InPoisonSoundSecond;//[Offset: 0x348, Size: 0x4]
	int WarningNotificationIndex;//[Offset: 0x34c, Size: 0x4]
	<int,int> NoticeDataMap;//[Offset: 0x350, Size: 0x50]
	<int,FString> SoundEventNameDataMap;//[Offset: 0x3a0, Size: 0x50]
	<int,int> QuickVoiceDataMap;//[Offset: 0x3f0, Size: 0x50]
	int ShrinkEndNotificationIndex;//[Offset: 0x440, Size: 0x4]
	int ShrinkEndNoticeId;//[Offset: 0x444, Size: 0x4]
	FString ShrinkEndSoundEventName;//[Offset: 0x448, Size: 0x10]
	SolarPlayerController* LocalController;//[Offset: 0x458, Size: 0x8]
	void StartShrink();// 0x50a4078ea041
	void ShowPoisonPerSecond();// 0x50a3078ea041
	void ShowPoisonEffect(bool bShow);// 0x50a2078ea041
	void ShowEffectInside(bool bInside);// 0x50a1078ea041
	void Resume();// 0x50a0078ea041
	void ReceiveShrinkEnd();// 0x509f078ea041
	void ReceiveActorLeaveSafeAreaCircle(Actor* Actor);// 0x509e078ea041
	void ReceiveActorEnterSafeAreaCircle(Actor* Actor);// 0x509d078ea041
	void Pause();// 0x509c078ea041
	void OnRep_CurrentIndexChange();// 0x509b078ea041
	bool IsPause();// 0x509a078ea041
	bool IsLocationInTargetSafeArea(out const Vector InLocation);// 0x5099078ea041
	bool IsLocationInSafeAreaDetailed(out const Vector InLocation, out bool OutInTargetSafeArea);// 0x5098078ea041
	bool IsLocationInSafeArea(out const Vector InLocation);// 0x5097078ea041
	bool IsLocationInPoisonArea(out const Vector InLocation);// 0x5096078ea041
	bool IsLocationInCurrentSafeArea(out const Vector InLocation);// 0x5095078ea041
	bool IsActorInSafeArea(const Actor* InActor);// 0x5094078ea041
	void GMStartShrinkArea();// 0x5093078ea041
	float GetShrinkTargetTime();// 0x5092078ea041
	enum GetSafeAreaStatus();// 0x5091078ea041
	Vector GetNextAreaLocation();// 0x5090078ea041
	int GetCurrentIndex();// 0x508f078ea041
	float GetCurrentDamage();// 0x508e078ea041
	Vector GetCurrentAreaBeginLocation();// 0x508d078ea041
	float GetBeginShrinkTime();// 0x508c078ea041
	enum GetActorInSafeAreaStatus(Actor* InActor);// 0x508b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMMapElementBase.Actor.Object
	bool bPersistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	FString Side;//[Offset: 0x230, Size: 0x10]
	FString Job;//[Offset: 0x240, Size: 0x10]
	FString ElementID;//[Offset: 0x250, Size: 0x10]
	enum Type;//[Offset: 0x260, Size: 0x1]
	enum State;//[Offset: 0x261, Size: 0x1]
	enum Visibility;//[Offset: 0x262, Size: 0x1]
	class SCMMapElementRPCComponent* MapElementRPCComponentClass;//[Offset: 0x268, Size: 0x8]
	FName ElementName;//[Offset: 0x270, Size: 0x8]
	byte bUseSceneActorOptimization;//[Offset: 0x278, Size: 0x1]
	enum SetElementVisibility(const enum NewType);// 0x4c1b078ea041
	enum SetElementState(const enum NewState);// 0x4c1a078ea041
	void OnRep_ElementVisibility();// 0x4c19078ea041
	void OnRep_ElementState();// 0x4c18078ea041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x4c17078ea041
	void OnElementStateChanged(const enum CurrentState);// 0x4c16078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	delegate OnPawnReplicated;//[Offset: 0x5e8, Size: 0x10]
	delegate OnPlayerStateRepDelegate;//[Offset: 0x5f8, Size: 0x10]
	delegate OnCatchInputActionDelegate;//[Offset: 0x608, Size: 0x10]
	delegate OnEnterLandingDelegate;//[Offset: 0x618, Size: 0x10]
	SolarInputManager* InputManager;//[Offset: 0x628, Size: 0x8]
	AiPalComponent* AiPalComponent;//[Offset: 0x638, Size: 0x8]
	SolarEasyAntiCheatComponent* AntiCheatComponent;//[Offset: 0x640, Size: 0x8]
	delegate OnHUDSpawnedDelegate;//[Offset: 0x648, Size: 0x10]
	SolarInputModePolicyComponent* SolarInputModePolicyComponent;//[Offset: 0x748, Size: 0x8]
	SolarInputActionContext*[] InputActionContextArray;//[Offset: 0x750, Size: 0x10]
	Vector2D InputMovementVector;//[Offset: 0x768, Size: 0x8]
	float InputRotatePitch;//[Offset: 0x770, Size: 0x4]
	float ActionWheelHoldDownTime;//[Offset: 0x780, Size: 0x4]
	float WorldMarkMessageDelayTime;//[Offset: 0x794, Size: 0x4]
	float WarningMarkRadius;//[Offset: 0x798, Size: 0x4]
	float PingHoldDownTime;//[Offset: 0x79c, Size: 0x4]
	float VoiceWheelMouseMoveRatio;//[Offset: 0x7a0, Size: 0x4]
	float WheelRadius;//[Offset: 0x7a4, Size: 0x4]
	float CancelRadius;//[Offset: 0x7a8, Size: 0x4]
	float OpenMarkWheelRadius;//[Offset: 0x7ac, Size: 0x4]
	float OpenMarkWheelMovement_G;//[Offset: 0x7b0, Size: 0x4]
	ActorMarkBase*[] DeathBoxWorldMarks;//[Offset: 0x828, Size: 0x10]
	float DeathBoxMarksRefreshInterval;//[Offset: 0x83c, Size: 0x4]
	int MaxDeathBoxWorldMarkNumber;//[Offset: 0x844, Size: 0x4]
	class ActorMarkBase* DeathBoxMarkClass;//[Offset: 0x848, Size: 0x8]
	class SolarCharacterSpringArmComponent* FollowArmClass;//[Offset: 0x878, Size: 0x8]
	class SolarCharacterCameraComponent* FollowCameraClass;//[Offset: 0x880, Size: 0x8]
	float FreeLookSmoothSpeed;//[Offset: 0x888, Size: 0x4]
	SolarCharacterSpringArmComponent* FollowArm;//[Offset: 0x8b0, Size: 0x8]
	SolarCharacterCameraComponent* FollowCamera;//[Offset: 0x8b8, Size: 0x8]
	FString PlayerId;//[Offset: 0x968, Size: 0x10]
	float VehicleInteractionDistance;//[Offset: 0x990, Size: 0x4]
	SolarVehiclePawn*[] InteractingVehicles;//[Offset: 0x998, Size: 0x10]
	SolarVehiclePawn* BestInteractingVehicle;//[Offset: 0x9a8, Size: 0x8]
	AbilityCooldownTimer[] ActivedAbilityCooldownArray;//[Offset: 0x9b0, Size: 0x10]
	delegate OnTeammateHUDDodgeSet;//[Offset: 0xa78, Size: 0x10]
	<SolarCharacter*,int> TeammateCandidates;//[Offset: 0xa88, Size: 0x50]
	bool bIsAlreadyParachuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 0x1]
	GameplayHitInfo[] WeaponMessageArray;//[Offset: 0xae0, Size: 0x10]
	Actor*[] UniqueActorArray;//[Offset: 0xb08, Size: 0x10]
	float HangUpTime;//[Offset: 0xb18, Size: 0x4]
	UserWidget* DamageTextWidget;//[Offset: 0xb38, Size: 0x8]
	SolarDamageText[] SameFrameDamageTextDataCache;//[Offset: 0xb40, Size: 0x10]
	TimerHandle SameFrameDamageTextDataHandle;//[Offset: 0xb50, Size: 0x8]
	delegate OnSpectateInfoRep;//[Offset: 0xc00, Size: 0x10]
	SoftClassPath SwitchTargetCameraControlCompClass;//[Offset: 0xc70, Size: 0x18]
	bool bShowCursorWhenSpectateOthers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc88, Size: 0x1]
	float SpectateNetCamUpdatePositionLimit;//[Offset: 0xc8c, Size: 0x4]
	PlayerController* ScoutPlayerController;//[Offset: 0xc98, Size: 0x8]
	Actor* ScoutViewTarget;//[Offset: 0xca0, Size: 0x8]
	SolarSwitchTargetCameraControlComp* SolarSwitchTargetCameraControlComp;//[Offset: 0xca8, Size: 0x8]
	int[] UsableJetpacks;//[Offset: 0xcb8, Size: 0x10]
	int[] UsableTailFlames;//[Offset: 0xcc8, Size: 0x10]
	FName PickUpExpItemSound;//[Offset: 0xcd8, Size: 0x8]
	FString CachedRechamberSound;//[Offset: 0xce0, Size: 0x10]
	FName EMPScreenEffectName;//[Offset: 0xd2c, Size: 0x8]
	float AntiCheatUploadInterval;//[Offset: 0xd34, Size: 0x4]
	FixedAntiCheatData FixedAntiCheatData;//[Offset: 0xd38, Size: 0x1c]
	FString[] CustomAntiCheatNames;//[Offset: 0xdd8, Size: 0x10]
	FString[] CustomAntiCheatContents;//[Offset: 0xde8, Size: 0x10]
	SolarMeerkatManager* GamePlayMeerkatManager;//[Offset: 0xec0, Size: 0x8]
	void WorldMarkWheelYAxis_G(float Movement);// 0x259b078ea041
	void WorldMarkWheelYAxis(float Movement);// 0x259a078ea041
	void WorldMarkWheelXAxis_G(float Movement);// 0x2599078ea041
	void WorldMarkWheelXAxis(float Movement);// 0x2598078ea041
	void WorldMarkDelayExecFunction();// 0x2597078ea041
	void UseMedicine();// 0x2596078ea041
	void UpdateEnableAiPalRate(int Rate);// 0x2595078ea041
	void UnMarkWorldInLevel(int64 instanceID);// 0x2594078ea041
	void Turn(float Value);// 0x2593078ea041
	void TryRecordBattlePlayerData();// 0x2592078ea041
	void TryRechargeShield(bool bUseBigRecharger);// 0x2591078ea041
	void TriggerVoiceByType(enum VoiceType);// 0x2590078ea041
	void TriggerVoiceByNumber(int VoiceIndex);// 0x258f078ea041
	void ToggleEMPScreenEffect(bool bInVisible);// 0x258e078ea041
	void ToggleCursor();// 0x258d078ea041
	void TakeOverNextClientSetViewTargetBySwitchTargetComp(bool bRestartBlendEvenIfSameTarget);// 0x258c078ea041
	void SwtichVehicleSeatNotification();// 0x258b078ea041
	void SwitchWeaponByReverseOrder();// 0x258a078ea041
	void SwitchWeaponByOrder();// 0x2589078ea041
	void SwitchSpectatedCharacterInTeam(int PosInTeam);// 0x2588078ea041
	void SwitchInputBinding(out const FName InputName, enum SwitchTpye);// 0x2586078ea041
	void StopSpectateCountdown();// 0x2585078ea041
	void StopRecordingAtDS();// 0x2584078ea041
	void StartSpectateCountdown(RepCountdownData InCountdownData);// 0x2583078ea041
	void StartRecordingAtDS(FString Filename, FString UploadUrl, enum ForceRecordingType);// 0x2582078ea041
	void SolarSlot(int ID);// 0x2581078ea041
	void SolarShowPanelUI(int Type);// 0x2580078ea041
	void SolarServerNetProfileStop();// 0x257f078ea041
	void SolarServerNetProfileStart();// 0x257e078ea041
	void SolarOpenUI(FString UIID, int RootID);// 0x257d078ea041
	void SolarModule(int ID);// 0x257c078ea041
	void SolarISPC(FString _str);// 0x257b078ea041
	void SolarGM_Weapon(FString Type, FString paramOne, FString paramTwo);// 0x257a078ea041
	void SolarGM_UpdateTaskInfo();// 0x2579078ea041
	void SolarGM_TeleportToBotAIServer(uint32 CtrlIndex);// 0x2578078ea041
	void SolarGM_StopRecordingAtDS();// 0x2577078ea041
	void SolarGM_StopBotAIBehaviorTreeServer(bool bStop);// 0x2576078ea041
	void SolarGM_StartShrinkSafeArea();// 0x2575078ea041
	void SolarGM_StartRecordingAtDS(FString Filename, FString UploadUrl, enum ForceRecordingType);// 0x2574078ea041
	void SolarGM_SpawnBotAIAtCrosshairByNumServer(int Num, int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x2573078ea041
	void SolarGM_SpawnBotAIAtCrosshair(int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x2572078ea041
	void SolarGM_SpawnAIAtCrosshairServer(int CharacterId, bool bAsTeammate, int DifficultyLevel);// 0x2571078ea041
	void SolarGM_ShowRedZoneDamage(bool IsShow);// 0x2570078ea041
	void SolarGM_ShowNotice(int NoticeId);// 0x256f078ea041
	void SolarGM_SetTeamID(int InTeamId);// 0x256e078ea041
	void SolarGM_SetStatDataForDebug();// 0x256d078ea041
	void SolarGM_SetSolarPlayerID(FString InSolarPlayer);// 0x256c078ea041
	void SolarGM_SetReconnection(bool IsReconnection);// 0x256b078ea041
	void SolarGM_SetPlayerData(FString InPlayerID);// 0x256a078ea041
	void SolarGM_SetHitTraceComponentEnable(bool InEnable);// 0x2569078ea041
	void SolarGM_SetGyroscopeTiltZThresholdSwitch(FString bSwitch);// 0x2568078ea041
	void SolarGM_SetGyroscopeTiltZThreshold(float Value);// 0x2567078ea041
	void SolarGM_SetGyroscopeTiltYThreshold(float Value);// 0x2566078ea041
	void SolarGM_SetGyroscopeTiltFrameCount(float Value);// 0x2565078ea041
	void SolarGM_SetGyroscopeRotationRateYThreshold(float Value);// 0x2564078ea041
	void SolarGM_SetGyroscopeRotationRateXThreshold(float Value);// 0x2563078ea041
	void SolarGM_ServerStartShrinkSafeArea();// 0x2562078ea041
	void SolarGM_ServerShowRedZoneDamage(bool IsShow);// 0x2561078ea041
	void SolarGM_ServerSetTeamID(int InTeamId);// 0x2560078ea041
	void SolarGM_ServerSetStatDataForDebug();// 0x255f078ea041
	void SolarGM_ServerSetSolarPlayerID(FString InSolarPlayer);// 0x255e078ea041
	void SolarGM_ServerSetReconnection(bool IsReconnection);// 0x255d078ea041
	void SolarGM_ServerSetPlayerData(FString InPlayerID);// 0x255c078ea041
	void SolarGM_ServerPlayerAbnormal();// 0x255b078ea041
	void SolarGM_ServerMarkVehicleSpawnerInMap(int InputIndex);// 0x255a078ea041
	void SolarGM_ServerDumpAllPlayer();// 0x2559078ea041
	void SolarGM_ServerDebugOffline();// 0x2558078ea041
	void SolarGM_ServerConsoleCommand(FString InConsoleCommand);// 0x2557078ea041
	void SolarGM_ServerClosePoisonDamage(bool isClose);// 0x2556078ea041
	void SolarGM_ServerChangeDayLight(int ID);// 0x2555078ea041
	void SolarGM_ResetZoneBombsFire();// 0x2554078ea041
	void SolarGM_RedZoneServer(const int ZoneId);// 0x2553078ea041
	void SolarGM_RedZone(const int ZoneId);// 0x2552078ea041
	void SolarGM_PoisonServer(FString GMType);// 0x2551078ea041
	void SolarGM_Poison(FString GMType);// 0x2550078ea041
	void SolarGM_PlayerUndetectableByAIServer(int debugValue);// 0x254f078ea041
	void SolarGM_PlayerUndetectableByAI(int debugValue);// 0x254e078ea041
	void SolarGM_PlayerAbnormal();// 0x254d078ea041
	void SolarGM_NoviceGuidance(int ActionID, bool bOn);// 0x254c078ea041
	void SolarGM_NotifyPlayerHasCheatByNickName(FString NickName);// 0x254b078ea041
	void SolarGM_NotifyPlayerHasCheat(FString SolarPlayerID);// 0x254a078ea041
	void SolarGM_KillAllAIServer(bool KillBot);// 0x2549078ea041
	void SolarGM_KickMeOut();// 0x2548078ea041
	void SolarGM_InitTaskInfo();// 0x2547078ea041
	void SolarGM_GoPreviousHomeCameraMode();// 0x2546078ea041
	void SolarGM_GoNextHomeCameraMode();// 0x2545078ea041
	void SolarGM_GoHomeCameraModeByIndex(int Index);// 0x2544078ea041
	void SolarGM_GMGoSpectatePreviousPlayer();// 0x2543078ea041
	void SolarGM_GMGoSpectatePlayerByIndex(uint32 Index);// 0x2542078ea041
	void SolarGM_GMGoSpectateNextPlayer();// 0x2541078ea041
	void SolarGM_Freelook(bool Open);// 0x2540078ea041
	void SolarGM_DumpAllPlayer(bool bSendToServer);// 0x253f078ea041
	void SolarGM_DebugOffline();// 0x253e078ea041
	void SolarGM_DebugAllAIServer(int debugValue);// 0x253d078ea041
	void SolarGM_DebugAllAI(int debugValue);// 0x253c078ea041
	void SolarGM_ClosePoisonDamage(bool isClose);// 0x253b078ea041
	void SolarGM_ClientShowRedZoneDamage(Vector bombLocation, Vector characterlocation, float Distance, float Damage);// 0x253a078ea041
	void SolarGM_ClientSetPlayerData(FString InPlayerID);// 0x2539078ea041
	void SolarGM_ClientMarkVehicleSpawnerInMap(const Vector[] VehicleSpawnerLocations, const int[] VehicleSpawnerSpawnIds, int InputIndex);// 0x2538078ea041
	void SolarGM_ClientGotoLogin();// 0x2537078ea041
	void SolarGM_ClientDumpAllPlayer(FString DumpString);// 0x2536078ea041
	void SolarGM_Character(FString GMType, FString Param1, FString Param2);// 0x2535078ea041
	void SolarGM_ChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x2534078ea041
	void SolarGM_ChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x2533078ea041
	void SolarGM_ChangeVehicleIntProperty(FString InPropertyName, int inInt);// 0x2532078ea041
	void SolarGM_ChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x2531078ea041
	void SolarGM_ChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x2530078ea041
	void SolarGM_ChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x252f078ea041
	void SolarGM_ChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x252e078ea041
	void SolarGM_ChangeDayLight(int ID);// 0x252d078ea041
	void SolarGM_BeginHeroPickMySelf();// 0x252c078ea041
	void SolarGM_BattleLua(FString CmdName, out const FString[] Params);// 0x252b078ea041
	void SolarGM_Battle(FString CmdName, out const FString[] Params);// 0x252a078ea041
	void SolarGM(FString _str);// 0x2529078ea041
	void SolarEnergy(int InMode, int ID);// 0x2528078ea041
	void SolarCloseUI(FString UIID);// 0x2527078ea041
	void SolarClosePanelUI(int Type);// 0x2526078ea041
	void SolarClientNetProfileStop();// 0x2525078ea041
	void SolarClientNetProfileStart();// 0x2524078ea041
	void ShowBackpackUI();// 0x2523078ea041
	void SetNativeRequestFreeLook(bool bInFreeLook);// 0x2522078ea041
	void SetInputActionSwitch(int ActionID, bool bOn);// 0x2521078ea041
	void SetAllTeammateHUDDodge(bool bDodge);// 0x2520078ea041
	void ServerUpdateTaskInfo();// 0x251f078ea041
	void ServerUnforbidRoleAbilitySkillDebugOnly();// 0x251e078ea041
	void ServerTriggleScreenshotTask(FString TargetPlayerID);// 0x251d078ea041
	void ServerTeleportTo(const Vector DestLocation);// 0x251c078ea041
	void ServerSyncPlayerSelfReport();// 0x251b078ea041
	void ServerSwitchSpectatedCharacterInTeam(int PosInTeam);// 0x251a078ea041
	void ServerSpawnVehicleWithVehicleID(const int VehicleID);// 0x2519078ea041
	void ServerSpawnVehicleWithSkinID(const int SkinId, const Vector InLocation);// 0x2518078ea041
	void ServerSpawnVehicle(const int SpawnID);// 0x2517078ea041
	void ServerSpawnTreasureBox(const int TreasureBoxID);// 0x2516078ea041
	void ServerSpawnSolarRadar(FString BpPath);// 0x2515078ea041
	void ServerSpawnPSO_BP_ObjectByPath(FString BpPath, const Vector Location);// 0x2514078ea041
	void ServerSpawnOutcomeContent(const int OutcomeID);// 0x2513078ea041
	void ServerSpawnChargingPile(FString BpPath);// 0x2512078ea041
	void ServerSpawnAirship(float Loc_X, float Loc_Y);// 0x2511078ea041
	void ServerSpawnAirdrop(const int AirdropID);// 0x2510078ea041
	void ServerSolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed);// 0x250f078ea041
	void ServerSolarWeaponReload(int PrimaryAmmoCap, int SecondaryAmmoCap);// 0x250e078ea041
	void ServerSolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod);// 0x250d078ea041
	void ServerSolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead);// 0x250c078ea041
	void ServerSolarSetPlayerValue(FString InType, FString InValue);// 0x250b078ea041
	void ServerSolarAmmoSpreadPerBullet(int AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed);// 0x250a078ea041
	void ServerSolarAmmoRangeSpeedDamage(int AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload);// 0x2509078ea041
	void ServerSolarAmmoFiring(int AmmoIndex, int FireCostType, int FireCostPerAttack, int FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval);// 0x2508078ea041
	void ServerSolarAmmoBoltAndMag(int AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag);// 0x2507078ea041
	void ServerSolarAmmoBasicMovement(int AmmoIndex, int TimedExplode, int BounceTimes, float LifeTime, float BaseReloadTime, int TrajectoryType, float CustomValue);// 0x2506078ea041
	void ServerSetSummonItemIgnoreBombDamage(bool bIgnore);// 0x2505078ea041
	void ServerSetRoleAbilitySkillCDDurationDebugOnly(float InCD);// 0x2504078ea041
	void ServerSetPlayerLevel(int InLevel);// 0x2503078ea041
	void ServerSetHangUpBehavior();// 0x2502078ea041
	void ServerSetFreeLook(bool bInFreeLook);// 0x2501078ea041
	void ServerSetAppLifetimeState(enum NewLifeState);// 0x2500078ea041
	void ServerSetActorOwner(Actor* TargetActor);// 0x24ff078ea041
	void ServerScreenshotProcessing(const SShotImageInfo ImageInfo);// 0x24fd078ea041
	void ServerRPCResetZoneBombsFire();// 0x24fc078ea041
	void ServerResetUniqueSkillCDDebugOnly();// 0x24fb078ea041
	void ServerRequestTransferSkydivingLeaderTo(byte PosInTeam);// 0x24fa078ea041
	void ServerRequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x24f9078ea041
	void ServerReqStartReviveItemRecycleCountDownData();// 0x24f8078ea041
	void ServerPlayerUpgrade(int InLevel);// 0x24f7078ea041
	void ServerPlayerResumeSettlement();// 0x24f6078ea041
	void ServerPlayerRequestLogout();// 0x24f5078ea041
	void ServerPlayerOutBySelf(enum InPath);// 0x24f4078ea041
	void ServerPlayerGoToSettlement();// 0x24f3078ea041
	void ServerNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance);// 0x24f2078ea041
	void ServerNotifyPlayerHasCheatByNickName(FString NickName);// 0x24f1078ea041
	void ServerNotifyPlayerHasCheat(FString SolarPlayerID);// 0x24f0078ea041
	void ServerNetProfile(bool startOrStop);// 0x24ef078ea041
	void ServerInitTaskInfo();// 0x24ee078ea041
	void ServerHandleTimerMessage(const byte[] TimerMessage);// 0x24ed078ea041
	void ServerGoSpectatePreviousPlayer();// 0x24ec078ea041
	void ServerGoSpectatePlayerByPlayerIdInternal(FString SolarPlayerID);// 0x24eb078ea041
	void ServerGoSpectatePlayerByPlayerId(FString SolarPlayerID);// 0x24ea078ea041
	void ServerGoSpectatePlayerByIndex_Internal(int Index);// 0x24e9078ea041
	void ServerGoSpectatePlayerByIndex(int Index);// 0x24e8078ea041
	void ServerGoSpectateNextPlayer();// 0x24e7078ea041
	void ServerGainExperience(int InExp);// 0x24e6078ea041
	void ServerEnableCheats();// 0x24e5078ea041
	void ServerCmd(FString Cmd);// 0x24e4078ea041
	void ServerClearUniqueSkillCDDebugOnly();// 0x24e3078ea041
	void ServerClearTeamSummonItemMark();// 0x24e2078ea041
	void ServerChangeVehicleVectorProperty(FString InPropertyName, float InX, float InY, float InZ);// 0x24e1078ea041
	void ServerChangeVehicleRotatorProperty(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x24e0078ea041
	void ServerChangeVehicleIntProperty(FString InPropertyName, int InFloat);// 0x24df078ea041
	void ServerChangeVehicleGASAttribute(FString InPropertyName, float InValue);// 0x24de078ea041
	void ServerChangeVehicleFloatProperty(FString InPropertyName, float InFloat);// 0x24dd078ea041
	void ServerChangeVehicleCurveProperty(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x24dc078ea041
	void ServerChangeVehicleBoolProperty(FString InPropertyName, bool InBool);// 0x24db078ea041
	void ServerCancelSkydivingFollow();// 0x24da078ea041
	void ServerBeginHeroPickMySelf();// 0x24d9078ea041
	void SendRepliableMessageServer(const int Message);// 0x24d8078ea041
	void SendRepliableMessageInMsgBucket(out const int[] MessageIDs);// 0x24d7078ea041
	void SendRepliableMessageByMessageID(out const int ID);// 0x24d6078ea041
	void SendQuickMessageServer(FString Message, bool bSound);// 0x24d5078ea041
	void SendQuickMessageNewServer(const int VoiceType);// 0x24d4078ea041
	void SendQuickMessageNewClient(FString NickName, const int VoiceType, const int CharID, const int SkinId, bool bGender, const int PosInTeam, bool bLocalPlayer, bool bShowLocMessage);// 0x24d3078ea041
	void SendQuickMessageClient(FString NickName, FString Message, bool IsLocalPlayer, bool bSound, int PosInTeam);// 0x24d2078ea041
	void SendLocalizationTeamMessageServer(int TextID, const LocTextParam[] TextParams, FString SoundEvent);// 0x24d1078ea041
	void SendLocalizationTeamMessageNewServer(const LocTextParam[] TextParams, const int SoundID1, const int SoundDI2);// 0x24d0078ea041
	void SendLocalizationTeamMessageNewClient(const int CharacterId, const int SkinId, bool bGender, const int SoundID1, FString NickName, const LocTextParam[] TextParams, int PosInTeam, const int SoundID2);// 0x24cf078ea041
	void SendLocalizationTeamMessageClient(const SolarPlayerState* SenderPS, int TextID, const LocTextParam[] TextParams, FString SoundEvent, int PosInTeam);// 0x24cd078ea041
	void SendLocalizationTeamMessage(int TextID, out const <FString,int> TextParamsId, FString SoundEvent1, FString SoundEvent2);// 0x24cc078ea041
	void SendDamageTextDataNextTick(out const SolarDamageText InSolarDamageText);// 0x24cb078ea041
	void ResetJoyStickControlInput();// 0x24ca078ea041
	void ResetAllInput();// 0x24c9078ea041
	void RequestTransferSkydivingLeaderTo(byte PosInTeam);// 0x24c8078ea041
	void RequestSkydivingFollow(SolarPlayerState* LeaderPlayerState);// 0x24c7078ea041
	void RequestNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance);// 0x24c6078ea041
	void RecordSpectateInfoToBI(out SpectateReportInfo SpectateReportInfo);// 0x24c5078ea041
	void QuickMessageLuaCall(FString Message, bool bSound);// 0x24c4078ea041
	int QueryStage();// 0x24c3078ea041
	void PushInputModeUIOnly(FName Name, bool bShowCursor, Widget* InWidgetToFocus, bool bLockMouseToViewport);// 0x24c2078ea041
	void PushInputModeGameOnly(FName Name, bool bShowCursor);// 0x24c1078ea041
	void PushInputModeGameAndUI(FName Name, bool bShowCursor, Widget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);// 0x24c0078ea041
	void PostInputAction(FName ActionName, byte KeyEvent);// 0x24bf078ea041
	void PostAkEventByName(FString EventName1, FString EventName2);// 0x24be078ea041
	void PopInputMode(FName Name);// 0x24bd078ea041
	void PlayVehicleWeakPointBrokenSound(const SolarVehicleSoundDataAsset* VehicleSoundDataAsset);// 0x24bc078ea041
	void PlayerGoToSettleMent();// 0x24bb078ea041
	void PlayerGotoLobbyWithLogout();// 0x24ba078ea041
	void PlayCustomVoiceByID(int VoiceID, bool NeedSendTeamMessage);// 0x24b9078ea041
	void PassiveTriggeredVoice(enum VoiceType);// 0x24b8078ea041
	void OnVehiclePitchRotateInputDelegate__DelegateSignature(float InputValue);// 0x24b7078ea041
	void OnTeamNumChangeFun(enum ChangeType, int OldValue, int NewValue);// 0x24b6078ea041
	void OnTeammateHUDDodgeSet__DelegateSignature(bool bDodge);// 0x24b5078ea041
	void OnSuperScaningStart(out const FString[] InScanPlayers);// 0x24b4078ea041
	void OnSuperScaningRemovePlayer(FString InRemovePlayer);// 0x24b3078ea041
	void OnSuperScaningEnd();// 0x24b2078ea041
	void OnStopUpdateSpectateInfo(SolarSpectateInfo* SpecInfo);// 0x24b1078ea041
	void OnSpectateTargetItemsChanged(SolarSpectateInfo* SpecInfo);// 0x24b0078ea041
	void OnSpectateTargetChangedHandler(SolarPlayerState* OldTarget, SolarSpectateInfo* MySpecInfo);// 0x24af078ea041
	void OnSpectateInfoRep__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x24ae078ea041
	void OnSkydivingStatusUpdated(SolarPlayerState* SelfPlayerState, bool bInIsSkydiving);// 0x24ad078ea041
	void OnShowGameNotice(const int InNoticeID, out const <FString,FString> InNoticeParams);// 0x24ac078ea041
	RotationBarMarkWidget*[] OnShowActorMarkDelegate__DelegateSignature(Actor*[] MarkActors);// 0x24ab078ea041
	void OnSeamlessTravelEnd();// 0x24aa078ea041
	void OnScopeAxisInput(float InAxisValue);// 0x24a9078ea041
	void OnReviveSelfTriggered(bool bAppear);// 0x24a8078ea041
	void OnReceiveBattleEnd();// 0x24a7078ea041
	void OnPutAwayWeaponPressed();// 0x24a6078ea041
	void OnPlayerStateSpectateInfoRepHandler(SolarSpectateInfo* SpecInfo);// 0x24a5078ea041
	void OnPlayerStateRepHandlerForSpectate(enum RepType, PlayerState* InPlayerState);// 0x24a4078ea041
	void OnPawnReplicated__DelegateSignature();// 0x24a3078ea041
	void OnEnterVoyageDelegate__DelegateSignature();// 0x24a2078ea041
	void OnEnterLanding();// 0x24a1078ea041
	void OnCustomizeLevelLoaded();// 0x24a0078ea041
	void OnCleanActorMarkWithWidgetsDelegate__DelegateSignature(RotationBarMarkWidget*[] MarkWidgets);// 0x249f078ea041
	void OnCleanActorMarkWithActorsDelegate__DelegateSignature(Actor*[] MarkActors);// 0x249e078ea041
	void OnCharacterRebirthLua();// 0x249d078ea041
	void OnCharacterDeathLua();// 0x249c078ea041
	void OnCatchInputActionDelegate__DelegateSignature(FName ActionName, byte InputEventType);// 0x249b078ea041
	void OnBeginUpdateSpectateInfo(SolarSpectateInfo* SpecInfo);// 0x249a078ea041
	void OnBeforeSpectateTargetChange(SolarPlayerState* NewTarget, SolarSpectateInfo* SpectateInfo);// 0x2499078ea041
	void OnAppHasReactivated();// 0x2498078ea041
	void OnAppHasDeactiveated();// 0x2497078ea041
	void OnActionWheelClosed();// 0x2496078ea041
	void NotifyMonsterSpawn();// 0x2495078ea041
	void NotifyCrouchIsLocked();// 0x2494078ea041
	void NotifyAppReactivate();// 0x2493078ea041
	void NotifyAppHasDeactivate();// 0x2492078ea041
	void NofityCustomizeLevelLoaded();// 0x2491078ea041
	void MarkWorldInLevelLuaCall(out const WorldMarkData InWorldMarkedData);// 0x2490078ea041
	void MarkWorldInLevel(const WorldMarkData InWorldMarkedData);// 0x248f078ea041
	void MarkPointInNavMapLuaCall(out const Vector2D InMarkedPoint);// 0x248e078ea041
	void MarkPointInNavMap(const Vector2D InMarkedPoint, bool bFromWorldMark);// 0x248d078ea041
	void MarkOnWorldByMinimapPosition(int PosInTeam, const Vector2D MinimapPos);// 0x248c078ea041
	void MarkedAsAppHasReactivated();// 0x248b078ea041
	void MarkedAsAppHasDeactivated();// 0x248a078ea041
	void LuaShowUI(FString WidgetPath, FString UIName);// 0x2489078ea041
	void LuaCallInputTouch(uint32 Handle, byte Type, out const Vector2D TouchLocation);// 0x2487078ea041
	void LookUp(float Value);// 0x2486078ea041
	void LogMarkAndQuickVoice(int Type, int SubType);// 0x2485078ea041
	void KickMeOutAtDS(FString InPlayerID);// 0x2484078ea041
	void K2_ShowDamageText(float InDamage, out const HitResult InHitResult, Actor* InDamageSource, Controller* InAutonomousController, out const SolarPointDamageEvent InPointDamageEvent);// 0x2483078ea041
	bool IsThirdPersonSpectateCameraMode();// 0x2482078ea041
	bool IsSpectatingOtherPlayer();// 0x2481078ea041
	bool IsMatching();// 0x2480078ea041
	bool IsHasSkydiveAndEnd();// 0x247f078ea041
	bool IsHasCharacterAndSkin(int CharacterId, int SkinId);// 0x247e078ea041
	void InputWorldMarkReleased();// 0x247d078ea041
	void InputWorldMarkPressed();// 0x247c078ea041
	void InputVerticalJetReleased();// 0x247b078ea041
	void InputVerticalJetPressed();// 0x247a078ea041
	void InputVehicleInteractionReleased();// 0x2479078ea041
	void InputVehicleInteractionPressed();// 0x2478078ea041
	void InputUseRecommendBtnPCReleased();// 0x2477078ea041
	void InputUseRecommendBtnPCPressed();// 0x2476078ea041
	void InputUseMedicineReleased();// 0x2475078ea041
	void InputUseMedicinePressed();// 0x2474078ea041
	void InputUseMedicineOrItemWheelReleased();// 0x2473078ea041
	void InputUseMedicineOrItemWheelPressed();// 0x2472078ea041
	void InputToggleTertiaryWeapon_Checkbox();// 0x2471078ea041
	void InputToggleSkydivingFollowRouletteTriggered();// 0x2470078ea041
	void InputToggleSecondaryWeaponReleased();// 0x246f078ea041
	void InputToggleSecondaryWeaponPressed();// 0x246e078ea041
	void InputToggleSecondaryWeapon_Checkbox();// 0x246d078ea041
	void InputTogglePrimaryWeaponReleased();// 0x246c078ea041
	void InputTogglePrimaryWeaponPressed();// 0x246b078ea041
	void InputTogglePrimaryWeapon_Checkbox();// 0x246a078ea041
	void InputTogglePickupReleased();// 0x2469078ea041
	void InputTogglePickupPressed();// 0x2468078ea041
	bool InputTestPriority3Pressed();// 0x2467078ea041
	bool InputTestPriority2Pressed();// 0x2466078ea041
	bool InputTestPriority1Released();// 0x2465078ea041
	bool InputTestPriority1Pressed();// 0x2464078ea041
	void InputSwitchToSeatTwoPressed();// 0x2463078ea041
	void InputSwitchToSeatThreePressed();// 0x2462078ea041
	void InputSwitchToSeatOnePressed();// 0x2461078ea041
	void InputSwitchToSeatFourPressed();// 0x2460078ea041
	void InputSwitchFireModeReleased();// 0x245f078ea041
	void InputSwitchFireModePressed();// 0x245e078ea041
	void InputStartRepairVehicleReleased();// 0x245d078ea041
	void InputSprintLockStart();// 0x245c078ea041
	void InputSprintFreeTerminate();// 0x245b078ea041
	void InputSprintFreeStart();// 0x245a078ea041
	void InputSprintFreeReleasedOnPC();// 0x2459078ea041
	void InputSprintFreePressedOnPC();// 0x2458078ea041
	void InputSkydivingFollowRouletteSelect4();// 0x2457078ea041
	void InputSkydivingFollowRouletteSelect3();// 0x2456078ea041
	void InputSkydivingFollowRouletteSelect2();// 0x2455078ea041
	void InputSkydivingFollowRouletteSelect1();// 0x2454078ea041
	void InputSkydivingFollowRouletteSelect(int PosInTeam);// 0x2453078ea041
	void InputShieldUpgradeReleased();// 0x2452078ea041
	void InputShieldUpgradePressed();// 0x2451078ea041
	void InputShieldUpgradeCancelReleased();// 0x2450078ea041
	void InputShieldUpgradeCancelPressed();// 0x244f078ea041
	void InputRightMouseButtonReleased();// 0x244e078ea041
	void InputRightMouseButtonPressed();// 0x244d078ea041
	void InputReviveSelfReleased();// 0x244c078ea041
	void InputReloadReleased();// 0x244b078ea041
	void InputReloadPressed();// 0x244a078ea041
	void InputRechargeShieldReleased();// 0x2449078ea041
	void InputRechargeShieldPressed();// 0x2448078ea041
	void InputQuickAdsReleased();// 0x2447078ea041
	void InputQuickAdsPressed();// 0x2446078ea041
	void InputPSTouchpadButton(float InValueX);// 0x2445078ea041
	void InputPickupReleased();// 0x2444078ea041
	void InputPickupPressed();// 0x2443078ea041
	void InputMoveRight(float InValueY);// 0x2442078ea041
	void InputMovementYReceived(float InValueY);// 0x2441078ea041
	void InputMovementXReceived(float InValueX);// 0x2440078ea041
	void InputMoveForward(float InValueX);// 0x243f078ea041
	void InputMapPressed();// 0x243e078ea041
	void InputLeftFireReleased();// 0x243d078ea041
	void InputLeftFirePressed();// 0x243c078ea041
	void InputKeepSprintPressed();// 0x243b078ea041
	void InputJumpReleased();// 0x243a078ea041
	void InputJumpPressed();// 0x2439078ea041
	void InputItemActionWheelReleased();// 0x2438078ea041
	void InputItemActionWheelPressed();// 0x2437078ea041
	void InputInteractPressed();// 0x2436078ea041
	void InputInteractAndReloadReleased();// 0x2435078ea041
	void InputInteractAndReloadPressed();// 0x2434078ea041
	void InputHorizontalJetReleased();// 0x2433078ea041
	void InputHorizontalJetPressed();// 0x2432078ea041
	void InputGunsightReleased();// 0x2431078ea041
	void InputGunsightPressed();// 0x2430078ea041
	void InputGetOnVehicleReleased();// 0x242f078ea041
	void InputGetOffVehicleReleased();// 0x242e078ea041
	void InputFreeLookReleased();// 0x242d078ea041
	void InputFreeLookPressed();// 0x242c078ea041
	void InputFireReleased();// 0x242b078ea041
	void InputFirePressed();// 0x242a078ea041
	void InputEquip2Released();// 0x2429078ea041
	void InputEquip2Pressed();// 0x2428078ea041
	void InputEquip1Released();// 0x2427078ea041
	void InputEquip1Pressed();// 0x2426078ea041
	void InputEmoteActionWheelReleased();// 0x2425078ea041
	void InputEmoteActionWheelPressed();// 0x2424078ea041
	void InputEjectReleased();// 0x2423078ea041
	void InputEjectPressed();// 0x2422078ea041
	void InputDriveVehicleReleased();// 0x2421078ea041
	void InputCrouchReleased();// 0x2420078ea041
	void InputCrouchPressed();// 0x241f078ea041
	void InputCancelSkydivingFollowingTriggered();// 0x241e078ea041
	void InputCancelActionReleased();// 0x241d078ea041
	void InputCancelActionPressed();// 0x241c078ea041
	void InputBuilding();// 0x241b078ea041
	void InputBigRechargeShieldReleased();// 0x241a078ea041
	void InputBigRechargeShieldPressed();// 0x2419078ea041
	void InputBackpackReleased();// 0x2418078ea041
	void InputBackpackPressed();// 0x2417078ea041
	void InputAltFireReleased();// 0x2416078ea041
	void InputAltFirePressed();// 0x2415078ea041
	void InputActionWheelPreviousPage();// 0x2414078ea041
	void InputActionWheelNextPage();// 0x2413078ea041
	void InputActionWheelExec();// 0x2412078ea041
	void InputActionWheelCancel();// 0x2411078ea041
	bool IfSolarCharacterIsDriver();// 0x2410078ea041
	bool HasSkin(int InSkinID);// 0x240f078ea041
	void HandleBeginSpectateRequest();// 0x240e078ea041
	void GyroscopeTilt(Vector Tilt);// 0x240d078ea041
	void GyroscopeRotationRate(Vector RotationRate);// 0x240c078ea041
	SolarCharacter* GetViewportFocusedCharacter(bool bReturnPossessedCharacterIfSpectateNull);// 0x240b078ea041
	Vector2D GetViewportCenter();// 0x240a078ea041
	Rotator GetSpectateTargetRotation();// 0x2409078ea041
	SolarPlayerState* GetSpectateTargetPlayerState();// 0x2408078ea041
	SolarSpectateInfo* GetSpectateInfo();// 0x2407078ea041
	SolarCharacter* GetSpectatedCharacter();// 0x2406078ea041
	SolarPlayerState* GetSolarViewPlayerState();// 0x2405078ea041
	SolarPlayerState* GetSolarPlayerState();// 0x2404078ea041
	SolarCharacter* GetSolarCharacter();// 0x2403078ea041
	enum GetPlayNetStateInGame();// 0x2402078ea041
	Rotator GetPlayerViewRotation(bool bWithoutCameraModifiers, bool bWithRotationInput);// 0x2401078ea041
	Vector GetPlayerViewLocation(bool bWithoutCameraModifiers, bool bWithRotationInput);// 0x2400078ea041
	PlayerStatisticsData* GetPlayerStatData();// 0x23ff078ea041
	FString GetPlayerID();// 0x23fe078ea041
	FString GetNoticeLocalText(int InNoticeID, out const <FString,FString> InNoticeParams);// 0x23fd078ea041
	byte GetMyTeamID();// 0x23fc078ea041
	byte GetMyPosInTeam();// 0x23fb078ea041
	Vector2D GetMyMarkedPointInNavMap();// 0x23fa078ea041
	int GetMultiKillNum();// 0x23f9078ea041
	int GetKillNum();// 0x23f8078ea041
	int GetKillingSpreesNum();// 0x23f7078ea041
	bool GetIsDropAndPickUpItemOrWeaponSwitchOnValue();// 0x23f6078ea041
	SolarInputModePolicyComponent* GetInputModePolicyComp();// 0x23f5078ea041
	SolarInputModeDataBase GetInputMode(FName Name, out enum OutInputMode, out bool bFound);// 0x23f2078ea041
	SolarCameraComponent* GetCurrentCameraComponent();// 0x23f1078ea041
	void GetControlledVehiclePropertyContainer(out Object*[] OutObjects);// 0x23f0078ea041
	Rotator GetCharacterViewRotation();// 0x23ef078ea041
	Rotator GetCameraRotation();// 0x23ee078ea041
	Vector GetCameraLocation();// 0x23ed078ea041
	SolarCharacter* GetCameraFocusedCharacter();// 0x23ec078ea041
	float GetCameraDefaultFOVAngle();// 0x23eb078ea041
	float GetCameraCurrentFOVAngle();// 0x23ea078ea041
	SolarCameraComponent* GetActiveCamera();// 0x23e9078ea041
	void ForceCompleteClientBlendToSpectateTarget();// 0x23e8078ea041
	void ExcludeDifferentTeam(int TeamID);// 0x23e7078ea041
	void EndOBCurrentBattle();// 0x23e6078ea041
	void DropPassengerNotification();// 0x23e5078ea041
	void DestroyCharacterCorpse();// 0x23e4078ea041
	void DebugUpdateTask();// 0x23e3078ea041
	void DebugSetPlayerData();// 0x23e2078ea041
	void DebugInitTask();// 0x23e1078ea041
	void CustomModeShowNotice(const int InType, const int InNoticeID, class Object InClass, const float InTime, FString InText, Object* InIcon, const int InNoticeColor);// 0x23e0078ea041
	void CustomAntiCheatDataExport(out const FString[] DataName, out const FString[] DataContent);// 0x23df078ea041
	void ControlsSwitchWeaponByOrder();// 0x23de078ea041
	void ClientSyncPlayerSelfReport(const SolarPlayerReport SelfReport, const SolarGameModeInfo GameInfo);// 0x23dd078ea041
	void ClientStartReviveItemRecycleCountDown(const int CurrentTime, const int DurationTime);// 0x23dc078ea041
	void ClientShowUI(FString WidgetPath, FString UIName);// 0x23db078ea041
	void ClientShowDiePage();// 0x23da078ea041
	void ClientScreenshotTask(const ScreenshotSetting Setting);// 0x23d7078ea041
	void ClientReviveWillBeDisabledHint(const int Duration);// 0x23d6078ea041
	void ClientReviveBeDisabledHint();// 0x23d5078ea041
	void ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving(SolarPlayerState* NewLeaderPlayerState, SolarPlayerState* OldLeaderPlayerState);// 0x23d4078ea041
	void ClientReceviceDamageText(const SolarDamageText[] InSolarDamageTextDatas);// 0x23d2078ea041
	void ClientRaiseScreenshotJob(enum ShotMoment);// 0x23d0078ea041
	void ClientPlayerGoToSettlement(const SolarPlayerReport[] Reports, const SolarGameModeInfo GameInfo, const int[] InSettlementPageIndexs, bool IsCustomRoom);// 0x23cd078ea041
	void ClientPlayerActivityHeatUpdate(const ReplayActivityHeatFragment ActivityHeatFragment);// 0x23c8078ea041
	void ClientNotifyShowEmoji(int EmojiID, SolarCharacter* UseEmojiCharacter);// 0x23c7078ea041
	void ClientNotifyCheatedPlayer(const FText OutReason);// 0x23c6078ea041
	void ClientNotifyAbnormalPlayer(const FText OutReason);// 0x23c5078ea041
	void ClientHandleTimerMessage(const byte[] TimerMessage);// 0x23c4078ea041
	void ClientEnableAiPalComponent(int Rate);// 0x23c3078ea041
	void ClientDoCharacterOperation(const CharacterOperationEvent ChOperationEvt);// 0x23c2078ea041
	void ClientCloseUI(FString UIName);// 0x23c1078ea041
	void ClientClearTeamSummonItemMark();// 0x23c0078ea041
	void ClientClearAudioListenerOverride();// 0x23bf078ea041
	void ClientCharacterIsDead();// 0x23be078ea041
	void ClientBeginOBCurrentBattleInternal();// 0x23bd078ea041
	void ClearWorldMarkCachedData();// 0x23bc078ea041
	void ClearMarkedPointInNavMapLuaCall();// 0x23bb078ea041
	void ClearMarkedPointInNavMap();// 0x23ba078ea041
	void ChangeVehicleVectorPropertyInternal(FString InPropertyName, float InX, float InY, float InZ);// 0x23b9078ea041
	void ChangeVehicleRotatorPropertyInternal(FString InPropertyName, float InPitch, float InYaw, float InRoll);// 0x23b8078ea041
	void ChangeVehicleIntPropertyInternal(FString InPropertyName, int InFloat);// 0x23b7078ea041
	void ChangeVehicleFreeLookState(bool bInFreeLook);// 0x23b6078ea041
	void ChangeVehicleFloatPropertyInternal(FString InPropertyName, float InFloat);// 0x23b5078ea041
	void ChangeVehicleCurvePropertyInternal(FString InPropertyName, byte InChangeType, float InKey, float InValue);// 0x23b4078ea041
	void ChangeVehicleBoolPropertyInternal(FString InPropertyName, bool InBool);// 0x23b3078ea041
	bool CanWorldMark();// 0x23b2078ea041
	bool CanSolarCharacterLaunchJetPack();// 0x23b1078ea041
	bool CanSolarCharacterInput();// 0x23b0078ea041
	bool CanSolarCharacterCrouch();// 0x23af078ea041
	void CancelSkydivingFollow();// 0x23ae078ea041
	void BuildSkydivingFollowOnLeavingTeam(bool bIgnoreNotification);// 0x23ad078ea041
	void BuildSkydivingFollowOnEnteringTeam();// 0x23ac078ea041
	void BindDelegatesDependGameState();// 0x23ab078ea041
	void BeginOBCurrentBattle();// 0x23aa078ea041
	void BackToLobby();// 0x23a9078ea041
	void AssembleCustomAntiCheatData(SolarWeapon* ActiveWeapon, SolarVehiclePawn* BoardedVehicle);// 0x23a8078ea041
	void AntiCheatDataSchedulerUpload(const FString[] DataName, const FString[] DataContent, const FixedAntiCheatData FixedData);// 0x23a5078ea041
	void AddTeammateCandidate(SolarCharacter* Candidate, int TeamID);// 0x23a4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	void SolarChangeStandardScreenSize(int SizeX, int SizeY);// 0x23a3078ea041
	IntPoint GetMobileStandardScreenSize();// 0x23a2078ea041
	IntPoint GetCustomStandardScreenSize();// 0x23a1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RepCountdownData
	int RepTimes;//[Offset: 0x0, Size: 0x4]
	int RepTextID;//[Offset: 0x4, Size: 0x4]
	int RepPassiveTextID;//[Offset: 0x8, Size: 0x4]
	int RepPassiveCharacterID;//[Offset: 0xc, Size: 0x4]
	float RepDuration;//[Offset: 0x10, Size: 0x4]
	float RepRemaining;//[Offset: 0x14, Size: 0x4]
	float RepAmount;//[Offset: 0x18, Size: 0x4]
	float RepStartTime;//[Offset: 0x1c, Size: 0x4]
	float RepEndTime;//[Offset: 0x20, Size: 0x4]
	int RepCancel;//[Offset: 0x24, Size: 0x4]
	float RemainingTime;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputManager.ActorComponent.Object
	SolarPlayerSensitivitys* SenSetting;//[Offset: 0xc8, Size: 0x8]
	TouchHandler TouchHandler;//[Offset: 0x108, Size: 0x180]
	void SetTouchScaler(float InVal);// 0x534a078ea041
	void SetNoiseThresholdFactor(float InVal);// 0x5349078ea041
	void SetMouseScaler(Vector2D InVal);// 0x5348078ea041
	void SetMinNoiseMultiplier(float InVal);// 0x5347078ea041
	void SetCurveVerticalFix(Vector2D InVec);// 0x5346078ea041
	void SetCurveVerticalFactor(Vector2D InVec);// 0x5345078ea041
	void SetCurveHorizonFix(Vector2D InVec);// 0x5344078ea041
	void SetCurveHorizonFactor(Vector2D InVec);// 0x5343078ea041
	void OnCacheNeedUpdate();// 0x5342078ea041
	float GetTouchScaler();// 0x5341078ea041
	Vector2D GetTouchOutputScale();// 0x5340078ea041
	float GetNoiseThresholdFactor();// 0x533f078ea041
	Vector2D GetMouseScaler();// 0x533e078ea041
	float GetMinNoiseMultiplier();// 0x533d078ea041
	Vector2D GetFixedOutput();// 0x533c078ea041
	Vector2D GetDeltaMove();// 0x533b078ea041
	Vector2D GetCurveVerticalFix();// 0x533a078ea041
	Vector2D GetCurveVerticalFactor();// 0x5339078ea041
	Vector2D GetCurveHorizonFix();// 0x5338078ea041
	Vector2D GetCurveHorizonFactor();// 0x5337078ea041
	Vector2D GetAverageDeltaMove();// 0x5336078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerSensitivitys.Object
	void InitPlayerSensitivity();// 0x56cb078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TouchHandler.InputHandler
	CurveFloat* HorizCurve;//[Offset: 0x98, Size: 0x8]
	CurveFloat* VertCurve;//[Offset: 0xa0, Size: 0x8]
	CurveFloat* DistHorizCurve;//[Offset: 0xd0, Size: 0x8]
	CurveFloat* DistVertCurve;//[Offset: 0xd8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputHandler
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AiPalComponent.ActorComponent.Object
	void SetUserID(FString UserId);// 0x4052078ea041
	void SetThreshold(float ThresholdPer);// 0x4051078ea041
	void SetMaxDetectTimes(int DetectGap_ms);// 0x4050078ea041
	void SetDetectGap_ms(int DetectGap_ms);// 0x404f078ea041
	void EndDetect();// 0x404e078ea041
	void Capture();// 0x404d078ea041
	void BeginDetect();// 0x404c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarEasyAntiCheatComponent.ActorComponent.Object
	SolarEasyAntiCheatManager* AntiCheatManager;//[Offset: 0xb8, Size: 0x8]
	Actor* Owner;//[Offset: 0xc0, Size: 0x8]
	void ServerOnUnRegisterClient();// 0x5112078ea041
	void ServerOnRegisterClient(FString ProductID);// 0x5111078ea041
	void ServerOnReceiveClientNotifyMessage(uint32 DataLenBytes, FString Data);// 0x5110078ea041
	void ClientOnReceiveServerNotifyMessage(uint32 DataLenBytes, FString Data);// 0x510f078ea041
	void ClientOnActionRequired(const int ClientAction, const int ActionReason, FString Details);// 0x510e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarEasyAntiCheatManager.Object
	bool EnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bEnableAntiCheatLauncherCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	void TestSendDSAction(const int ActionReason, FString ActionDetials);// 0x511c078ea041
	void SwitchAntiCheatState();// 0x511b078ea041
	void SetEOSOpenIDToken(FString OpenIDToken);// 0x511a078ea041
	void SendSteamAntiCheatRequest(const int ErrorCode);// 0x5119078ea041
	void ReportAntiCheatBI(const int ErrorCode);// 0x5118078ea041
	bool IsLaunchbyEOSBootstrapper();// 0x5117078ea041
	bool IsEOSSettingChanged();// 0x5116078ea041
	void EasyAntiCheatLogin(FString AppToken);// 0x5115078ea041
	void AntiCheatLauncherCheck();// 0x5114078ea041
	bool AntiCheatEosSettingCheck();// 0x5113078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputModePolicyComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	bool bEnableWeltDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 0x1]
	float LerpAlpha;//[Offset: 0x41c, Size: 0x4]
	float AngleForArrow;//[Offset: 0x420, Size: 0x4]
	Vector2D RectangleOffset;//[Offset: 0x434, Size: 0x8]
	float Radius;//[Offset: 0x43c, Size: 0x4]
	Actor* CurrentFollowActor;//[Offset: 0x440, Size: 0x8]
	PlayerController* CurrentPlayerController;//[Offset: 0x448, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x450, Size: 0x8]
	Vector2D MarkPanelSize;//[Offset: 0x458, Size: 0x8]
	float MaxVisibleDis;//[Offset: 0x478, Size: 0x4]
	void SetUpdateState(bool InShouldUpdateLocation);// 0x444e078ea041
	void InitActorMarkBaseByFixedPos(Vector Pos, PlayerController* Controller);// 0x444d078ea041
	void InitActorMarkBase(Actor* InActor, PlayerController* Controller);// 0x444c078ea041
	Vector GetFollowActorLocation();// 0x444b078ea041
	float GetDistance(bool bIncludeZ);// 0x444a078ea041
	Actor* GetCurrentFollowActor();// 0x4449078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarCharacterCameraComponent* Camera;//[Offset: 0x3f8, Size: 0x8]
	SolarCharacter* OwnerCharacter;//[Offset: 0x400, Size: 0x8]
	void UnregisterOverlappingObstacle(const Actor* InObstacle);// 0x4fc3078ea041
	void RegisterOverlappingObstacle(const Actor* InObstacle);// 0x4fc2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float CameraLocationLagTime;//[Offset: 0x3b0, Size: 0x4]
	bool HandleTargetOffsetAsRelativeValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	SolarSpringArmComponent* GetSpringArmComponentFromActor(const Actor* InActor);// 0x4fc1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x314, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x318, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x324, Size: 0xc]
	float ProbeSize;//[Offset: 0x330, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x334, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x335, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x335, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x335, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x335, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x335, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x335, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x335, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x335, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x336, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x338, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x33c, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x340, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x344, Size: 0x4]
	bool IsCollisionFixApplied();// 0x4fc0078ea041
	Vector GetUnfixedCameraPosition();// 0x4fbf078ea041
	Rotator GetTargetRotation();// 0x4fbe078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* Character;//[Offset: 0xa28, Size: 0x8]
	SolarCharacterCameraDataAsset* CharacterCameraConfig;//[Offset: 0xa38, Size: 0x8]
	float GetUnscaledFOV();// 0x4fb6078ea041
	float GetStandardFOVScale();// 0x4fb5078ea041
	float GetStandardFOV();// 0x4fb4078ea041
	float GetCustomizedFOV();// 0x4fb3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarSpringArmComponent* SpringArm;//[Offset: 0x950, Size: 0x8]
	float ConfigDistanceToTarget;//[Offset: 0x9f0, Size: 0x4]
	Vector ConfigCameraOffset;//[Offset: 0x9f4, Size: 0xc]
	Vector ConfigTargetOffset;//[Offset: 0xa00, Size: 0xc]
	float ConfigFOV;//[Offset: 0xa0c, Size: 0x4]
	float ViewPitchMax;//[Offset: 0xa10, Size: 0x4]
	float ViewPitchMin;//[Offset: 0xa14, Size: 0x4]
	float ViewYawMax;//[Offset: 0xa18, Size: 0x4]
	float ViewYawMin;//[Offset: 0xa1c, Size: 0x4]
	float CameraOccupiedRoom;//[Offset: 0xa20, Size: 0x4]
	bool EnableDistanceSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24, Size: 0x1]
	bool EnableFOVSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa25, Size: 0x1]
	bool bEnableCameraOffsetSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa26, Size: 0x1]
	bool bEnableTargetOffsetSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa27, Size: 0x1]
	SolarCameraComponent* GetCameraComponentFromActor(const Actor* InActor);// 0x4f94078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterCameraDataAsset.DataAsset.Object
	float ThirdPersonVerticalOffset;//[Offset: 0x30, Size: 0x4]
	float ThirdPersonVerticalOffsetWhenCrouched;//[Offset: 0x34, Size: 0x4]
	float ThirdPersonVerticalOffsetWhenCrouchMoving;//[Offset: 0x38, Size: 0x4]
	float ThirdPersonHorizontalOffset;//[Offset: 0x3c, Size: 0x4]
	CurveFloat* FollowForwardOffsetCurve;//[Offset: 0x40, Size: 0x8]
	float FollowForwardOffsetMultiplier;//[Offset: 0x48, Size: 0x4]
	float CrouchCameraLagTime;//[Offset: 0x4c, Size: 0x4]
	float UnCrouchCameraLagTime;//[Offset: 0x50, Size: 0x4]
	float ShoulderShotVerticalOffset;//[Offset: 0x54, Size: 0x4]
	float ShoulderShotVerticalOffsetWhenCrouched;//[Offset: 0x58, Size: 0x4]
	float ShoulderShotHorizontalOffset;//[Offset: 0x5c, Size: 0x4]
	float ShoulderShotDistanceToTarget;//[Offset: 0x60, Size: 0x4]
	CurveFloat* ShoulderShotFollowDistanceCurve;//[Offset: 0x68, Size: 0x8]
	float ShoulderShotCameraFOV;//[Offset: 0x70, Size: 0x4]
	float ShoulderShotCameraZoomInOutTime;//[Offset: 0x74, Size: 0x4]
	float ScopeShotVerticalOffsetWithStanding;//[Offset: 0x78, Size: 0x4]
	float ScopeShotVerticalOffsetWhenCrouch;//[Offset: 0x7c, Size: 0x4]
	float DistanceToScopePivot;//[Offset: 0x80, Size: 0x4]
	float ArmDistanceToCamera;//[Offset: 0x84, Size: 0x4]
	float ScopeHorizontalOffset;//[Offset: 0x88, Size: 0x4]
	float SwimDistanceToTarget;//[Offset: 0x8c, Size: 0x4]
	float SwimDistSwitchSpeed;//[Offset: 0x90, Size: 0x4]
	float TakeOffCamPitchMin;//[Offset: 0x94, Size: 0x4]
	float TakeOffCamPitchMax;//[Offset: 0x98, Size: 0x4]
	float LandingSpeedThreshold;//[Offset: 0x9c, Size: 0x4]
	CamEffectSettings ParkourCamSettings;//[Offset: 0xa0, Size: 0x38]
	Vector CruiseCameraOffset;//[Offset: 0xd8, Size: 0xc]
	Vector CruiseTargetOffset;//[Offset: 0xe4, Size: 0xc]
	float CruiseDistanceToTarget;//[Offset: 0xf0, Size: 0x4]
	Vector SkydiveCameraOffset;//[Offset: 0xf4, Size: 0xc]
	Vector SkydiveTargetOffset;//[Offset: 0x100, Size: 0xc]
	float SkydiveDistanceToTarget;//[Offset: 0x10c, Size: 0x4]
	float SkydiveDistanceToTargetOnBoosting;//[Offset: 0x110, Size: 0x4]
	float SkydiveViewPitchMax;//[Offset: 0x114, Size: 0x4]
	float SkydiveViewPitchMin;//[Offset: 0x118, Size: 0x4]
	CameraSettings JetFlySettingsVertical;//[Offset: 0x11c, Size: 0x20]
	CameraSettings JetFlySettingsFront;//[Offset: 0x13c, Size: 0x20]
	CameraSettings JetFlySettingsBack;//[Offset: 0x15c, Size: 0x20]
	CameraSettings JetFlySettingsLeft;//[Offset: 0x17c, Size: 0x20]
	CameraSettings JetFlySettingsRight;//[Offset: 0x19c, Size: 0x20]
	RuntimeFloatCurve JetFlyFadeInCurve;//[Offset: 0x1c0, Size: 0x88]
	RuntimeFloatCurve JetFlyFadeOutCurve;//[Offset: 0x248, Size: 0x88]
	class CameraShake* CameraShakeSkydiveFlying;//[Offset: 0x2d0, Size: 0x8]
	float CameraShakeSkydiveFlyingSpeedMin;//[Offset: 0x2d8, Size: 0x4]
	float CameraShakeSkydiveFlyingSpeedMax;//[Offset: 0x2dc, Size: 0x4]
	class CameraShake* CameraShakeJetPackLaunch;//[Offset: 0x2e0, Size: 0x8]
	class CameraShake* CameraShakeLand;//[Offset: 0x2e8, Size: 0x8]
	class CameraShake* CameraShakeVehicleEjectLaunch;//[Offset: 0x2f0, Size: 0x8]
	float CameraShakeLandDistanceMin;//[Offset: 0x2f8, Size: 0x4]
	float CameraShakeLandDistanceMax;//[Offset: 0x2fc, Size: 0x4]
	<enum,class CameraShake> CamShakeConfig;//[Offset: 0x300, Size: 0x50]
	float TargetOffsetLerpSpeed;//[Offset: 0x350, Size: 0x4]
	float CustomizedCameraOffsetSmoothFactor;//[Offset: 0x354, Size: 0x4]
	float CustomizedTargetOffsetSmoothFactor;//[Offset: 0x358, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CamEffectSettings
	float FadeIn;//[Offset: 0x0, Size: 0x4]
	float FadeOut;//[Offset: 0x4, Size: 0x4]
	float Duration;//[Offset: 0x8, Size: 0x4]
	bool bEnableOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	CurveVector* OffsetCurve;//[Offset: 0x10, Size: 0x8]
	bool bEnableRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	CurveVector* RotationCurve;//[Offset: 0x20, Size: 0x8]
	bool bEnableFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	CurveFloat* FOVCurve;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraSettings
	float DistanceToTarget;//[Offset: 0x0, Size: 0x4]
	float CameraFOV;//[Offset: 0x4, Size: 0x4]
	Vector TargetOffset;//[Offset: 0x8, Size: 0xc]
	Vector CameraOffset;//[Offset: 0x14, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AbilityCooldownTimer
	GameplayTag AbilityCooldownTag;//[Offset: 0x0, Size: 0x8]
	float AbilityAppliedTime;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayHitInfo
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarDamageText
	bool bHitHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bHitShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bBrokenShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int Damage;//[Offset: 0x4, Size: 0x4]
	Actor* Target;//[Offset: 0x8, Size: 0x8]
	Actor* Source;//[Offset: 0x10, Size: 0x8]
	Vector HitLocation;//[Offset: 0x18, Size: 0xc]
	uint32 TargetUniqueID;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSwitchTargetCameraControlComp.ActorComponent.Object
	Actor* IntermediateEndTarget;//[Offset: 0xe4, Size: 0x8]
	void OnScoutPlayerWorkComplete();// 0x581a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FixedAntiCheatData
	int FOV;//[Offset: 0x0, Size: 0x4]
	byte AxisConstraint;//[Offset: 0x4, Size: 0x1]
	bool bAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Vector HeadBoneScale;//[Offset: 0x8, Size: 0xc]
	bool CurrWeaponRecoil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float LatestTimeDiscrepancyError;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarMeerkatManager.ActorComponent.Object
	MeerkatSubScheduleMB* MBCheckInstance;//[Offset: 0xb0, Size: 0x8]
	MeerkatSubScheduleHp* HpCheckInstance;//[Offset: 0xb8, Size: 0x8]
	MeerkatSubScheduleAE* AECheckInstance;//[Offset: 0xc0, Size: 0x8]
	MeerkatSubScheduleAR* ARCheckInstance;//[Offset: 0xc8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeerkatSubScheduleMB.SolarMeerkatScheduleComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarMeerkatScheduleComponent.ActorComponent.Object
	MeerkatConfig MeerkatData;//[Offset: 0xbc, Size: 0x14]
	void ServerReportRPC(FString Key, FString Value);// 0x44e0078ea041
	void ClientUpdateScheduleConfig(const MeerkatConfig AntiCheatConfig);// 0x44df078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeerkatConfig
	int ID;//[Offset: 0x0, Size: 0x4]
	float Min;//[Offset: 0x4, Size: 0x4]
	float Max;//[Offset: 0x8, Size: 0x4]
	int Tolerance;//[Offset: 0xc, Size: 0x4]
	int ProbeInterval;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeerkatSubScheduleHp.SolarMeerkatScheduleComponent.ActorComponent.Object
	void ClientNotifySeverHpExceptionOccur();// 0x44e1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeerkatSubScheduleAE.SolarMeerkatScheduleComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeerkatSubScheduleAR.SolarMeerkatScheduleComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SShotImageInfo
	FString UserId;//[Offset: 0x0, Size: 0x10]
	FString PlayerId;//[Offset: 0x10, Size: 0x10]
	FString BattleID;//[Offset: 0x20, Size: 0x10]
	int64 ScreenshotTime;//[Offset: 0x30, Size: 0x8]
	int ImageSize;//[Offset: 0x38, Size: 0x4]
	int ImageWidth;//[Offset: 0x3c, Size: 0x4]
	int ImageHeight;//[Offset: 0x40, Size: 0x4]
	FString ImageType;//[Offset: 0x48, Size: 0x10]
	FString ImageBuffer;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LocTextParam
	FString ParamName;//[Offset: 0x0, Size: 0x10]
	int LocTextID;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpectateReportInfo
	uint32 RankLevelID;//[Offset: 0x0, Size: 0x4]
	FString TargetUserID;//[Offset: 0x8, Size: 0x10]
	byte TargetType;//[Offset: 0x18, Size: 0x1]
	uint32 SpectateElapsedTime;//[Offset: 0x1c, Size: 0x4]
	byte Type;//[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSoundDataAsset.DataAsset.Object
	FString Engine_3P;//[Offset: 0x30, Size: 0x10]
	FString Engine_3P_Enemy;//[Offset: 0x40, Size: 0x10]
	FString Engine_Down_3P;//[Offset: 0x50, Size: 0x10]
	FString Engine_Down_3P_Enemy;//[Offset: 0x60, Size: 0x10]
	FString Engine_RTPC;//[Offset: 0x70, Size: 0x10]
	FString Engine_Stop_3P;//[Offset: 0x80, Size: 0x10]
	FString Engine_Stop_3P_Enemy;//[Offset: 0x90, Size: 0x10]
	FString Engine_Input_RTPC;//[Offset: 0xa0, Size: 0x10]
	float MaxMoveSpeed;//[Offset: 0xb0, Size: 0x4]
	FString MoveSpeed_Acc_RTPC;//[Offset: 0xb8, Size: 0x10]
	FString Tire_3P;//[Offset: 0xc8, Size: 0x10]
	FString Tire_3P_Enemy;//[Offset: 0xd8, Size: 0x10]
	FString Tire_End_3P;//[Offset: 0xe8, Size: 0x10]
	FString Tire_End_3P_Enemy;//[Offset: 0xf8, Size: 0x10]
	FString Tire_RTPC;//[Offset: 0x108, Size: 0x10]
	FString Tire_Group;//[Offset: 0x118, Size: 0x10]
	<byte,FString> Tire_States;//[Offset: 0x128, Size: 0x50]
	bool bUseEngineRpm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	FString Vehicle_Collision_3P;//[Offset: 0x180, Size: 0x10]
	FString Vehicle_Collision_3P_Enemy;//[Offset: 0x190, Size: 0x10]
	FString Vehicle_Collision_RTPC;//[Offset: 0x1a0, Size: 0x10]
	FString Play_Booster_3P;//[Offset: 0x1b0, Size: 0x10]
	FString Play_Booster_3P_Enemy;//[Offset: 0x1c0, Size: 0x10]
	FString Stop_Booster_3P;//[Offset: 0x1d0, Size: 0x10]
	FString Stop_Booster_3P_Enemy;//[Offset: 0x1e0, Size: 0x10]
	FString Vehicle_Speedboard_1P;//[Offset: 0x1f0, Size: 0x10]
	FString Vehicle_Speedboard_3P;//[Offset: 0x200, Size: 0x10]
	FString Vehicle_Speedboard_3P_Enemy;//[Offset: 0x210, Size: 0x10]
	FString Vehicle_Eject_1P;//[Offset: 0x220, Size: 0x10]
	FString Vehicle_Eject_3P;//[Offset: 0x230, Size: 0x10]
	FString Vehicle_Eject_3P_Enemy;//[Offset: 0x240, Size: 0x10]
	FString Play_Vehicle_Destroyed;//[Offset: 0x250, Size: 0x10]
	FString Weakpoint_Broken_3P;//[Offset: 0x260, Size: 0x10]
	FString Weakpoint_Broken_3P_Enemy;//[Offset: 0x270, Size: 0x10]
	FString Weakpoint_Fixed_3P;//[Offset: 0x280, Size: 0x10]
	FString Weakpoint_Fixed_3P_Enemy;//[Offset: 0x290, Size: 0x10]
	FString WeakPoint_Broken_1P_UI;//[Offset: 0x2a0, Size: 0x10]
	<enum,FName> WeakPointHitSoundGroupNames;//[Offset: 0x2b0, Size: 0x50]
	FString Engine_Start_3P;//[Offset: 0x300, Size: 0x10]
	FString Engine_Start_3P_Enemy;//[Offset: 0x310, Size: 0x10]
	FString Braking_Loop_RTPC;//[Offset: 0x320, Size: 0x10]
	FString Play_Braking_Loop_3P;//[Offset: 0x330, Size: 0x10]
	FString Play_Braking_Loop_3P_Enemy;//[Offset: 0x340, Size: 0x10]
	FString Stop_Braking_Loop_3P;//[Offset: 0x350, Size: 0x10]
	FString Stop_Braking_Loop_3P_Enemy;//[Offset: 0x360, Size: 0x10]
	float BrakingLoopSoundDegree;//[Offset: 0x370, Size: 0x4]
	float BrakingLoopSoundSpeed;//[Offset: 0x374, Size: 0x4]
	FString Play_Reverse_Loop;//[Offset: 0x378, Size: 0x10]
	FString Stop_Reverse_Loop;//[Offset: 0x388, Size: 0x10]
	FString Drift_RTPC;//[Offset: 0x398, Size: 0x10]
	FString Drift_Start;//[Offset: 0x3a8, Size: 0x10]
	FString Drift_Stop;//[Offset: 0x3b8, Size: 0x10]
	FString RPMRedLine_Start;//[Offset: 0x3c8, Size: 0x10]
	FString RPMRedLine_Stop;//[Offset: 0x3d8, Size: 0x10]
	byte SpeedDifferenceInKmThresholdForHitSound;//[Offset: 0x3e8, Size: 0x1]
	FString Play_SelfHealing_3P;//[Offset: 0x3f0, Size: 0x10]
	FString Stop_SelfHealing_3P;//[Offset: 0x400, Size: 0x10]
	FString Play_vehicle_crash_ground_3P;//[Offset: 0x410, Size: 0x10]
	FString Play_vehicle_crash_ground_3P_enemy;//[Offset: 0x420, Size: 0x10]
	FString Vehicle_Crash_Ground_RTPC;//[Offset: 0x430, Size: 0x10]
	float VehicleCrashGroundRtpcMultiplier;//[Offset: 0x440, Size: 0x4]
	FString Play_vehicle_crash_water_3P;//[Offset: 0x448, Size: 0x10]
	FString Play_vehicle_crash_water_3P_enemy;//[Offset: 0x458, Size: 0x10]
	FString Play_vehicle_fixing_weakpoint_3P;//[Offset: 0x468, Size: 0x10]
	FString Stop_vehicle_fixing_weakpoint_3P;//[Offset: 0x478, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Start_1P;//[Offset: 0x488, Size: 0x10]
	FString Play_VehicleWholdShieldBegin_Loop_1P;//[Offset: 0x498, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Start_3P;//[Offset: 0x4a8, Size: 0x10]
	FString Stop_VehicleWholdShieldBegin_Loop_3P;//[Offset: 0x4b8, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Start_1P;//[Offset: 0x4c8, Size: 0x10]
	FString Play_VehicleWholdShieldEnd_Loop_1P;//[Offset: 0x4d8, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Start_3P;//[Offset: 0x4e8, Size: 0x10]
	FString Stop_VehicleWholdShieldEnd_Loop_3P;//[Offset: 0x4f8, Size: 0x10]
	FString Play_HitVehicleWholdShield_1P;//[Offset: 0x508, Size: 0x10]
	FString Play_HitVehicleWholdShield_3P;//[Offset: 0x518, Size: 0x10]
	FString HoverJumpOnActive1P;//[Offset: 0x528, Size: 0x10]
	FString HoverJumpOnActive3P;//[Offset: 0x538, Size: 0x10]
	FString HoverJumpWhileActive1P;//[Offset: 0x548, Size: 0x10]
	FString HoverJumpWhileActive3P;//[Offset: 0x558, Size: 0x10]
	FString HoverJumpOnRemove1P;//[Offset: 0x568, Size: 0x10]
	FString HoverJumpOnRemove3P;//[Offset: 0x578, Size: 0x10]
	FString Play_VehicleTrumpet_1P;//[Offset: 0x588, Size: 0x10]
	FString Play_VehicleTrumpet_3P;//[Offset: 0x598, Size: 0x10]
	FString Stop_VehicleTrumpet_1P;//[Offset: 0x5a8, Size: 0x10]
	FString Stop_VehicleTrumpet_3P;//[Offset: 0x5b8, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P;//[Offset: 0x5c8, Size: 0x10]
	FString Play_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x5d8, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P;//[Offset: 0x5e8, Size: 0x10]
	FString Stop_vehicle_common_braking_loop_3P_enemy;//[Offset: 0x5f8, Size: 0x10]
	FString Play_Vehicle_UpShift_3P;//[Offset: 0x608, Size: 0x10]
	FString Play_Vehicle_UpShift_3P_Enemy;//[Offset: 0x618, Size: 0x10]
	FString Play_Vehicle_DownShift_3P;//[Offset: 0x628, Size: 0x10]
	FString Play_Vehicle_DownShift_3P_Enemy;//[Offset: 0x638, Size: 0x10]
	FString Play_IronMan_Laser_Hit;//[Offset: 0x648, Size: 0x10]
	FString FootPlant;//[Offset: 0x658, Size: 0x10]
	FString Landing_3P;//[Offset: 0x668, Size: 0x10]
	FString Landing_3P_Enemy;//[Offset: 0x678, Size: 0x10]
	bool bUseDoppler;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	float AddDopplerIntensity;//[Offset: 0x68c, Size: 0x4]
	float MinusDopplerIntensity;//[Offset: 0x690, Size: 0x4]
	float UpdateDopplerTime;//[Offset: 0x694, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RotationBarMarkWidget.UserWidget.Widget.Visual.Object
	FName FlagName;//[Offset: 0x288, Size: 0x8]
	FName TextName;//[Offset: 0x290, Size: 0x8]
	Image* FlagImage;//[Offset: 0x298, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2a0, Size: 0x8]
	Actor* TargetActor;//[Offset: 0x2a8, Size: 0x8]
	void SetupOrder(int InOrderID);// 0x4bf8078ea041
	void SetUpdateState(bool ShouldUpdateLocation);// 0x4bf7078ea041
	void SetPosition(Vector2D InPosition);// 0x4bf6078ea041
	void SetFlagIcon(PaperSprite* InSprite);// 0x4bf5078ea041
	void InitializeMark(Actor* InTargetActor, bool InMoveable);// 0x4bf4078ea041
	float GetAngle();// 0x4bf3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerStatisticsData.Object
	delegate OnPlayerStatDataUpdate;//[Offset: 0x28, Size: 0x10]
	delegate OnIncreaseWeaponKillNum;//[Offset: 0x38, Size: 0x10]
	Vector GetValue_Vector(enum InType);// 0x51d0078ea041
	void GetValue_MapKeyWithValueInt(enum InType, out int[] OutValue);// 0x51cf078ea041
	void GetValue_MapKeyWithValueFloat(enum InType, out int[] OutValue);// 0x51ce078ea041
	int GetValue_IntFromMap(enum InType, int IntKey);// 0x51cd078ea041
	void GetValue_IntArray(enum InType, out int[] OutResult);// 0x51cc078ea041
	int GetValue_Int(enum InType);// 0x51cb078ea041
	float GetValue_FloatFromMap(enum InType, int IntKey, bool Floor);// 0x51ca078ea041
	void GetValue_FloatArray(enum InType, out float[] OutResult);// 0x51c9078ea041
	float GetValue_Float(enum InType, bool Floor);// 0x51c8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputModeDataBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScreenshotSetting
	bool EnableOnCurrentReportGameCheating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int MaxCountInRound;//[Offset: 0x4, Size: 0x4]
	bool[] ScreenshotMoment;//[Offset: 0x8, Size: 0x10]
	int ScreenshotInterval;//[Offset: 0x18, Size: 0x4]
	int ScreenshotWidth;//[Offset: 0x1c, Size: 0x4]
	int ScreenshotQuality;//[Offset: 0x20, Size: 0x4]
	FString ImageSaveType;//[Offset: 0x28, Size: 0x10]
	enum ScreenshotMode;//[Offset: 0x38, Size: 0x1]
	int ImageMaxSize;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterOperationEvent
	enum Name;//[Offset: 0x0, Size: 0x1]
	Object* Target;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMMapElementRPCComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarReplayPlayerController.SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	float WaitFirstTeamNumberInputTime;//[Offset: 0xecc, Size: 0x4]
	float WaitTeamNumberInputTime;//[Offset: 0xed0, Size: 0x4]
	SolarReplayCameraControlComp* SolarReplayCameraControlComp;//[Offset: 0xed8, Size: 0x8]
	SolarReplayHighlightComponent* SolarReplayHighlightComponent;//[Offset: 0xee0, Size: 0x8]
	SolarReplayAutoDirectorComponent* SolarReplayAutoDirectorComponent;//[Offset: 0xee8, Size: 0x8]
	delegate OnEmitBulletDelegate;//[Offset: 0xef0, Size: 0x10]
	<FString,float> HorizontalDistanceBetweenPlayerAndOBCamera;//[Offset: 0xf00, Size: 0x50]
	SolarReplayManager* ReplayManager;//[Offset: 0xf50, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xf58, Size: 0x8]
	<byte,MaterialInstanceDynamic*> TeamNumToPerspectiveMaterialMap;//[Offset: 0xf80, Size: 0x50]
	void UpdateDistanceBetweenOBCamAndPlayer();// 0x28a2078ea041
	void StopSpectatePlayer();// 0x28a1078ea041
	void StopPlayReplay();// 0x28a0078ea041
	void SpectateVictim();// 0x289f078ea041
	void SpectatePlayerByPlayerID(FString SolarPlayerID);// 0x289e078ea041
	void SpectateAttacker();// 0x289d078ea041
	void SolarGM_ToggleProgressControlButton();// 0x289c078ea041
	void SolarGM_SetWatchingLiveTarget(FString InPlayerID);// 0x289b078ea041
	void SolarGM_ReplayDebugLog(bool bOpenDebugLog);// 0x289a078ea041
	void ShowDamageText(out SolarDamageText[] InDamageTexts);// 0x2899078ea041
	void SetUISettingHeadInfoStyle(out const enum InType);// 0x2898078ea041
	void SetDamageTextVisible(bool bIsVisible);// 0x2897078ea041
	void SetBattleOBHUDType(out const enum Type);// 0x2896078ea041
	void PauseReplay();// 0x2895078ea041
	void OnReplayPlayingLevelLoaded();// 0x2894078ea041
	void OnReplayPlayingFirstScrubFinished();// 0x2893078ea041
	void OnReplayCameraLostTarget();// 0x2892078ea041
	void OnPlayingFinished();// 0x2891078ea041
	void OnEmitBulletDelegate__DelegateSignature(Vector StartLoc, Vector AimLoc, FString SolarPlayerID);// 0x2890078ea041
	void OnBattleOBHUDTypeChanged(out const enum CurrentType);// 0x288f078ea041
	bool IsSpectatingPlayer();// 0x288e078ea041
	SolarPlayerState* GetWatchingLiveTarget();// 0x288d078ea041
	<FString,float> GetHorizontalDistanceBetweenPlayerAndOBCamera();// 0x288c078ea041
	FString GetCurrentSpectatePlayerID();// 0x288b078ea041
	enum GetBattleOBHUDType();// 0x288a078ea041
	void ExitDirectorMode();// 0x2889078ea041
	void EnterDirectorMode();// 0x2888078ea041
	void ContinueReplay();// 0x2887078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarReplayCameraControlComp.ActorComponent.Object
	delegate OnReplayCameraModeChanged;//[Offset: 0xb0, Size: 0x10]
	SolarSpectateInfo* ReplayPCSpectateInfo;//[Offset: 0xf0, Size: 0x8]
	float DefaultSpeed;//[Offset: 0xf8, Size: 0x4]
	float MoveSpeedChangeStep;//[Offset: 0xfc, Size: 0x4]
	float MoveSpeedMin;//[Offset: 0x100, Size: 0x4]
	float MoveSpeedMax;//[Offset: 0x104, Size: 0x4]
	float SpeedUpScale;//[Offset: 0x108, Size: 0x4]
	float DefaultTurnRate;//[Offset: 0x10c, Size: 0x4]
	float TurnRateChangeStep;//[Offset: 0x110, Size: 0x4]
	float TurnSpeedMin;//[Offset: 0x114, Size: 0x4]
	float TurnSpeedMax;//[Offset: 0x118, Size: 0x4]
	float DistanceChangeStep;//[Offset: 0x11c, Size: 0x4]
	SolarReplayCameraBase* ReplayCamera;//[Offset: 0x120, Size: 0x8]
	SolarPlayerState* LastTarget;//[Offset: 0x130, Size: 0x8]
	<enum,SolarReplayCameraBase*> CacheCameras;//[Offset: 0x148, Size: 0x50]
	void OnStreamingReadied();// 0x1f14078ea041
	void OnSpectateInfoRep(SolarSpectateInfo* InSpecInfo);// 0x1f13078ea041
	void OnReplayCameraModeChanged__DelegateSignature(enum OldMode, enum CurMode);// 0x1f12078ea041
	void OnPlayingScrubStart();// 0x1f11078ea041
	void OnPlayingScrubCharactersCreated();// 0x1f10078ea041
	void OnPlayingFirstScrubFinished();// 0x1f0f078ea041
	enum GetReplayCameraMode();// 0x1f0d078ea041
	void ChangeLockSpectatorModeDistance(float val);// 0x1f0c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarReplayCameraBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarReplayHighlightComponent.ActorComponent.Object
	float RecordAfterSettled;//[Offset: 0xe0, Size: 0x4]
	float SlowMoStartTime;//[Offset: 0xe4, Size: 0x4]
	float SlowMoEndTime;//[Offset: 0xe8, Size: 0x4]
	float SlowMoMultiplier;//[Offset: 0xec, Size: 0x4]
	float KillEffectTime;//[Offset: 0xf0, Size: 0x4]
	OBHighlightOverviewWidget* HighlightOverviewWidget;//[Offset: 0xf8, Size: 0x8]
	void ReceiveHighlightOverviewData(out const PlayerHighlightOverview OverviewData);// 0x573b078ea041
	void ReceiveHighlightData(FString PlayerId, out const ReplayActivityHeatFragment NewFragment);// 0x573a078ea041
	void OnReplayWidgetTranslatePlayEndOver();// 0x5739078ea041
	void OnReplayWidgetTranslatePlayBeginOver();// 0x5738078ea041
	void OnReplayWidgetOverviewPlayEnd();// 0x5737078ea041
	void OnReplayWidgetHighlightPlayEnd();// 0x5736078ea041
	void OnReplayScrubStarted();// 0x5735078ea041
	void OnReplayPaused();// 0x5734078ea041
	void OnReplayContinued();// 0x5733078ea041
	UISubsystem* GetUISubSystem();// 0x5732078ea041
	SolarReplayManager* GetReplayManager();// 0x5731078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerHighlightOverview
	int KillNum;//[Offset: 0x0, Size: 0x4]
	int AssistNum;//[Offset: 0x4, Size: 0x4]
	int Damage;//[Offset: 0x8, Size: 0x4]
	FString PlayerId;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UISubsystem.GameInstanceSubsystem.Subsystem.Object
	UIGlobalConfig* GlobalConfig;//[Offset: 0x30, Size: 0x8]
	UIPanelConfig* UIPanelConfig;//[Offset: 0x38, Size: 0x8]
	<FString,SolarUserWidget*> CacheWidgets;//[Offset: 0x40, Size: 0x50]
	void PostInitializeAfterPatch();// 0x614a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameInstanceSubsystem.Subsystem.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Subsystem.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UIGlobalConfig.DataAsset.Object
	<byte,TeamMemberColor> TeamMemberColors;//[Offset: 0x30, Size: 0x50]
	<byte,ItemQualityData> ItemQualityData;//[Offset: 0x80, Size: 0x50]
	<byte,OBTeamColor> OBTeamColors;//[Offset: 0xd0, Size: 0x50]
	OBTeamColor GetOBTeamColor(const int TeamNum);// 0x60df078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OBTeamColor
	FString Desc;//[Offset: 0x0, Size: 0x10]
	LinearColor Main;//[Offset: 0x10, Size: 0x10]
	LinearColor Vice;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TeamMemberColor
	LinearColor Main;//[Offset: 0x0, Size: 0x10]
	LinearColor Vice;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ItemQualityData
	LinearColor BaseColor;//[Offset: 0x0, Size: 0x10]
	LinearColor HUDColor;//[Offset: 0x10, Size: 0x10]
	LinearColor HighQualityColor;//[Offset: 0x20, Size: 0x10]
	LinearColor LowQualityColor;//[Offset: 0x30, Size: 0x10]
	LinearColor HUDBGColor;//[Offset: 0x40, Size: 0x10]
	LinearColor HUDDecorateColor;//[Offset: 0x50, Size: 0x10]
	SoftObjectPath QualityIcon;//[Offset: 0x60, Size: 0x18]
	FString QualityChar;//[Offset: 0x78, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UIPanelConfig.Object
	<enum,UIPanelConfigEntry> PanelConfigs;//[Offset: 0x28, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UIPanelConfigEntry
	SoftClassPath MobileUIPath;//[Offset: 0x0, Size: 0x18]
	SoftClassPath DesktopUIPath;//[Offset: 0x18, Size: 0x18]
	enum UILayerRoot;//[Offset: 0x30, Size: 0x1]
	bool bPrecache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OBHighlightOverviewWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	delegate OverviewPlayEnd;//[Offset: 0x400, Size: 0x10]
	delegate TranslatePlayBeginOver;//[Offset: 0x410, Size: 0x10]
	delegate TranslatePlayEndOver;//[Offset: 0x420, Size: 0x10]
	delegate HighlightPlayEnd;//[Offset: 0x430, Size: 0x10]
	void SwitchKillToolData(out const enum ToolType, out const int KillToolID);// 0x4a7d078ea041
	void ShowHighlightTranslateNum(out const int TranslateNum);// 0x4a7c078ea041
	void ShowHighlightOverviewData(out const PlayerHighlightOverview OverviewData);// 0x4a7b078ea041
	void ShowHighlightMarkResult(out const float TotalScore, FString MarkName);// 0x4a7a078ea041
	void ShowHighlightKillToolEffect(FString ToolName, out const Texture2D* ToolIcon);// 0x4a79078ea041
	void ShowHighlightKillNum(out const int KillNum, out const float KillEffectTime);// 0x4a78078ea041
	void OnTranslatePlayEndOver();// 0x4a77078ea041
	void OnTranslatePlayBeginOver();// 0x4a76078ea041
	void OnOverviewPlayEnd();// 0x4a75078ea041
	void OnHighlightPlayEnd();// 0x4a74078ea041
	void HighlightOver();// 0x4a73078ea041
	void HighlightFragmentOver();// 0x4a72078ea041
	void ContinueHighlightTranslate();// 0x4a71078ea041
	void CollectReplayPlayerOverviewData(FString PlayerId, out ReplayPlayerOverviewData PlayerOverviewData);// 0x4a70078ea041
	void CalcHighlightMarkResult(float Score, out const ReplayActivityKillDetail[] KillDetails);// 0x4a6f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplayPlayerOverviewData
	FString playerName;//[Offset: 0x0, Size: 0x10]
	FString HeroName;//[Offset: 0x10, Size: 0x10]
	Texture2D* SkinResourcePtr;//[Offset: 0x20, Size: 0x28]
	int PlayerNum;//[Offset: 0x48, Size: 0x4]
	FString GameModeName;//[Offset: 0x50, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarReplayAutoDirectorComponent.ActorComponent.Object
	<enum,float> AutoDirectorActivityEventScoreSetting;//[Offset: 0xf0, Size: 0x50]
	<SolarPlayerState*> CurrentAllPlayerInAreaRadius;//[Offset: 0x238, Size: 0x50]
	<FString> NarrateInfoEventIDSet;//[Offset: 0x3b0, Size: 0x50]
	NarrateEventInfoResult[] NarrateResultArray;//[Offset: 0x410, Size: 0x10]
	int NextPlayNarrateIndex;//[Offset: 0x420, Size: 0x4]
	TimerHandle NarratePlayingTimerHandle;//[Offset: 0x428, Size: 0x8]
	FString CurrentBattleFilePath;//[Offset: 0x438, Size: 0x10]
	MediaSoundComponent* MediaSoundComponent;//[Offset: 0x448, Size: 0x8]
	void UpdatePlayingNarrateActivityEvent();// 0x5730078ea041
	void UpdateCamera();// 0x572f078ea041
	void TryPlayNextNode();// 0x572e078ea041
	void SetCommentActive(bool bNewActive);// 0x572d078ea041
	void OnScrubStart();// 0x572c078ea041
	void OnScrubFinished();// 0x572b078ea041
	void OnScoutPlayerWorkComplete();// 0x572a078ea041
	void OnReplayCameraBlocked();// 0x5729078ea041
	void OnReceiveKillInfoNotify(SolarPlayerState* SourcePlayerState, SolarPlayerState* TargetPlayerState, out const SolarPointDamageEvent PointDamageEvent);// 0x5728078ea041
	void OnPreFreeCameraFinished();// 0x5727078ea041
	void OnPlayingPause();// 0x5726078ea041
	void OnPlayingContinue();// 0x5725078ea041
	void OnPlayerTakeDamage(SolarPlayerState* SourcePlayerState, SolarPlayerState* TargetPlayerState, out const SolarPointDamageEvent DamageEvent);// 0x5724078ea041
	void OnPlayerStartSkydive(SolarCharacter* Character, enum LastStage, enum CurrentStage);// 0x5723078ea041
	void OnPlayerResurrectTeammate(SolarCharacter* ImplementResurrectionCharacter);// 0x5722078ea041
	void OnPlayerRescueTeammate(SolarCharacter* ImplementRescueCharacter, SolarCharacter* BeingRescuedCharacter);// 0x5721078ea041
	void OnPlayerPickupItem(SolarCharacter* Character, Actor* PickupItem);// 0x5720078ea041
	void OnPlayerActiveRoleAbility(SolarCharacter* Character, byte AbilityIndex);// 0x571f078ea041
	void OnGameVictoryChanged();// 0x571e078ea041
	void OnCheckPlayerOut(SCMPlayerState* PlayerState, enum OutType);// 0x571d078ea041
	void OnCharacterGetOnVehicle(SolarCharacter* Character, Pawn* Vehicle);// 0x571c078ea041
	void EnumerateAutoDirectorNodeInfo();// 0x571b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NarrateEventInfoResult
	float EventTime;//[Offset: 0x0, Size: 0x4]
	FString NarrateText;//[Offset: 0x8, Size: 0x10]
	FString AudioAssetPath;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object
	enum Channels;//[Offset: 0x7f0, Size: 0x4]
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f4, Size: 0x1]
	float RateAdjustmentFactor;//[Offset: 0x7f8, Size: 0x4]
	FloatRange RateAdjustmentRange;//[Offset: 0x7fc, Size: 0x10]
	MediaPlayer* MediaPlayer;//[Offset: 0x810, Size: 0x8]
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0x65e2078ea041
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x65e1078ea041
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0x65e0078ea041
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0x65df078ea041
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0x65de078ea041
	MediaSoundComponentSpectralData[] GetSpectralData();// 0x65dd078ea041
	MediaPlayer* GetMediaPlayer();// 0x65dc078ea041
	float GetEnvelopeValue();// 0x65db078ea041
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x65da078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 0x1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 0x1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x318, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x320, Size: 0x3a0]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x6c0, Size: 0x8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x6c8, Size: 0x50]
	SoundClass* SoundClass;//[Offset: 0x718, Size: 0x8]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x720, Size: 0x8]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x728, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x730, Size: 0x10]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x740, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0x750, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x760, Size: 0x10]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x770, Size: 0x1]
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x770, Size: 0x1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x774, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x778, Size: 0x4]
	delegate OnAudioEnvelopeValue;//[Offset: 0x780, Size: 0x10]
	SynthSound* Synth;//[Offset: 0x7b0, Size: 0x8]
	AudioComponent* AudioComponent;//[Offset: 0x7b8, Size: 0x8]
	void Stop();// 0x4326078ea041
	void Start();// 0x4325078ea041
	void SetVolumeMultiplier(float VolumeMultiplier);// 0x4324078ea041
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x4323078ea041
	bool IsPlaying();// 0x4322078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaPlayer.Object
	delegate OnEndReached;//[Offset: 0x28, Size: 0x10]
	delegate OnMediaClosed;//[Offset: 0x38, Size: 0x10]
	delegate OnMediaOpened;//[Offset: 0x48, Size: 0x10]
	delegate OnMediaOpenFailed;//[Offset: 0x58, Size: 0x10]
	delegate OnPlaybackResumed;//[Offset: 0x68, Size: 0x10]
	delegate OnPlaybackSuspended;//[Offset: 0x78, Size: 0x10]
	delegate OnSeekCompleted;//[Offset: 0x88, Size: 0x10]
	delegate OnTracksChanged;//[Offset: 0x98, Size: 0x10]
	Timespan CacheAhead;//[Offset: 0xa8, Size: 0x8]
	Timespan CacheBehind;//[Offset: 0xb0, Size: 0x8]
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 0x8]
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1]
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1]
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 0x8]
	int PlaylistIndex;//[Offset: 0xd0, Size: 0x4]
	Timespan TimeDelay;//[Offset: 0xd8, Size: 0x8]
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 0x4]
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 0x4]
	Rotator ViewRotation;//[Offset: 0xe8, Size: 0xc]
	Guid PlayerGuid;//[Offset: 0x120, Size: 0x10]
	bool SupportsSeeking();// 0x65cd078ea041
	bool SupportsScrubbing();// 0x65cc078ea041
	bool SupportsRate(float Rate, bool Unthinned);// 0x65cb078ea041
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0x65ca078ea041
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0x65c9078ea041
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0x65c8078ea041
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0x65c7078ea041
	void SetTimeDelay(Timespan TimeDelay);// 0x65c6078ea041
	bool SetRate(float Rate);// 0x65c5078ea041
	bool SetNativeVolume(float Volume);// 0x65c4078ea041
	void SetMediaOptions(const MediaSource* options);// 0x65c3078ea041
	bool SetLooping(bool Looping);// 0x65c2078ea041
	void SetDesiredPlayerName(FName playerName);// 0x65c1078ea041
	void SetBlockOnTime(out const Timespan Time);// 0x65c0078ea041
	bool SelectTrack(enum TrackType, int TrackIndex);// 0x65bf078ea041
	bool Seek(out const Timespan Time);// 0x65be078ea041
	bool Rewind();// 0x65bd078ea041
	bool Reopen();// 0x65bc078ea041
	bool Previous();// 0x65bb078ea041
	void PlayAndSeek();// 0x65ba078ea041
	bool Play();// 0x65b9078ea041
	bool Pause();// 0x65b8078ea041
	bool OpenUrl(FString URL);// 0x65b7078ea041
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions options);// 0x65b6078ea041
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions options, out bool bSuccess);// 0x65b5078ea041
	bool OpenSource(MediaSource* MediaSource);// 0x65b4078ea041
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0x65b3078ea041
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0x65b2078ea041
	bool OpenFile(FString FilePath);// 0x65b1078ea041
	bool Next();// 0x65b0078ea041
	bool IsReady();// 0x65af078ea041
	bool IsPreparing();// 0x65ae078ea041
	bool IsPlaying();// 0x65ad078ea041
	bool IsPaused();// 0x65ac078ea041
	bool IsLooping();// 0x65ab078ea041
	bool IsConnecting();// 0x65aa078ea041
	bool IsClosed();// 0x65a9078ea041
	bool IsBuffering();// 0x65a8078ea041
	bool HasError();// 0x65a7078ea041
	Rotator GetViewRotation();// 0x65a6078ea041
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0x65a5078ea041
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0x65a4078ea041
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0x65a3078ea041
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0x65a2078ea041
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0x65a1078ea041
	float GetVerticalFieldOfView();// 0x65a0078ea041
	FString GetUrl();// 0x659f078ea041
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0x659e078ea041
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0x659d078ea041
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0x659c078ea041
	Timespan GetTimeDelay();// 0x659b078ea041
	Timespan GetTime();// 0x659a078ea041
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0x6599078ea041
	int GetSelectedTrack(enum TrackType);// 0x6598078ea041
	float GetRate();// 0x6597078ea041
	int GetPlaylistIndex();// 0x6596078ea041
	MediaPlaylist* GetPlaylist();// 0x6595078ea041
	FName GetPlayerName();// 0x6594078ea041
	int GetNumTracks(enum TrackType);// 0x6593078ea041
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0x6592078ea041
	FText GetMediaName();// 0x6591078ea041
	Timespan GetLastVideoSampleProcessedTime();// 0x6590078ea041
	Timespan GetLastAudioSampleProcessedTime();// 0x658f078ea041
	float GetHorizontalFieldOfView();// 0x658e078ea041
	Timespan GetDuration();// 0x658d078ea041
	FName GetDesiredPlayerName();// 0x658c078ea041
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0x658b078ea041
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0x658a078ea041
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0x6589078ea041
	void Close();// 0x6588078ea041
	bool CanPlayUrl(FString URL);// 0x6587078ea041
	bool CanPlaySource(MediaSource* MediaSource);// 0x6586078ea041
	bool CanPause();// 0x6585078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Timespan
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaPlaylist.Object
	MediaSource*[] Items;//[Offset: 0x28, Size: 0x10]
	bool Replace(int Index, MediaSource* Replacement);// 0x65d9078ea041
	bool RemoveAt(int Index);// 0x65d8078ea041
	bool Remove(MediaSource* MediaSource);// 0x65d7078ea041
	int Num();// 0x65d6078ea041
	void Insert(MediaSource* MediaSource, int Index);// 0x65d5078ea041
	MediaSource* GetRandom(out int OutIndex);// 0x65d4078ea041
	MediaSource* GetPrevious(out int InOutIndex);// 0x65d3078ea041
	MediaSource* GetNext(out int InOutIndex);// 0x65d2078ea041
	MediaSource* Get(int Index);// 0x65d1078ea041
	bool AddUrl(FString URL);// 0x65d0078ea041
	bool AddFile(FString FilePath);// 0x65cf078ea041
	bool Add(MediaSource* MediaSource);// 0x65ce078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaSource.Object
	bool Validate();// 0x42b5078ea041
	void SetMediaOptionString(out const FName Key, FString Value);// 0x42b4078ea041
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x42b3078ea041
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x42b2078ea041
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x42b1078ea041
	FString GetUrl();// 0x42b0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 0x1c]
	Timespan SeekTime;//[Offset: 0x20, Size: 0x8]
	enum PlayOnOpen;//[Offset: 0x28, Size: 0x1]
	enum Loop;//[Offset: 0x29, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 0x4]
	int Caption;//[Offset: 0x4, Size: 0x4]
	int MetaData;//[Offset: 0x8, Size: 0x4]
	int Script;//[Offset: 0xc, Size: 0x4]
	int Subtitle;//[Offset: 0x10, Size: 0x4]
	int Text;//[Offset: 0x14, Size: 0x4]
	int Video;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MediaSoundComponentSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4]
	float Magnitude;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object
	SynthComponent* OwningSynthComponent;//[Offset: 0x360, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveProcedural.SoundWave.SoundBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x318, Size: 0x8]
	AudioComponentParam[] InstanceParameters;//[Offset: 0x320, Size: 0x10]
	SoundClass* SoundClassOverride;//[Offset: 0x330, Size: 0x8]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x338, Size: 0x1]
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x338, Size: 0x1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x338, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x338, Size: 0x1]
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x338, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x338, Size: 0x1]
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x338, Size: 0x1]
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x339, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x33a, Size: 0x1]
	FName AudioComponentUserID;//[Offset: 0x340, Size: 0x8]
	float PitchModulationMin;//[Offset: 0x348, Size: 0x4]
	float PitchModulationMax;//[Offset: 0x34c, Size: 0x4]
	float VolumeModulationMin;//[Offset: 0x350, Size: 0x4]
	float VolumeModulationMax;//[Offset: 0x354, Size: 0x4]
	float VolumeMultiplier;//[Offset: 0x358, Size: 0x4]
	int EnvelopeFollowerAttackTime;//[Offset: 0x35c, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x360, Size: 0x4]
	float Priority;//[Offset: 0x364, Size: 0x4]
	float SubtitlePriority;//[Offset: 0x368, Size: 0x4]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x370, Size: 0x8]
	float PitchMultiplier;//[Offset: 0x378, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x37c, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x388, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x390, Size: 0x3a0]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x730, Size: 0x8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x738, Size: 0x50]
	enum AutoAttachLocationRule;//[Offset: 0x794, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x795, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x796, Size: 0x1]
	delegate OnAudioFinished;//[Offset: 0x798, Size: 0x10]
	delegate OnAudioPlaybackPercent;//[Offset: 0x7c0, Size: 0x10]
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x7e8, Size: 0x10]
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0x810, Size: 0x10]
	SoundModulation Modulation;//[Offset: 0x838, Size: 0x10]
	delegate OnQueueSubtitles;//[Offset: 0x848, Size: 0x10]
	SceneComponent* AutoAttachParent;//[Offset: 0x858, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x860, Size: 0x8]
	void StopDelayed(float DelayTime);// 0x4296078ea041
	void Stop();// 0x4295078ea041
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x4294078ea041
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x4293078ea041
	void SetUISound(bool bInUISound);// 0x4292078ea041
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x4291078ea041
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x4290078ea041
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x428f078ea041
	void SetSound(SoundBase* NewSound);// 0x428e078ea041
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x428d078ea041
	void SetPaused(bool bPause);// 0x428c078ea041
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x428b078ea041
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x428a078ea041
	void SetIntParameter(FName InName, int inInt);// 0x4289078ea041
	void SetFloatParameter(FName InName, float InFloat);// 0x4288078ea041
	void SetBoolParameter(FName InName, bool InBool);// 0x4287078ea041
	void Play(float StartTime);// 0x4286078ea041
	bool IsPlaying();// 0x4285078ea041
	bool HasCookedFFTData();// 0x4284078ea041
	bool HasCookedAmplitudeEnvelopeData();// 0x4283078ea041
	enum GetPlayState();// 0x4282078ea041
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x4281078ea041
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x4280078ea041
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x427f078ea041
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x427e078ea041
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x427d078ea041
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x427c078ea041
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x427b078ea041
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x427a078ea041
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x4279078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AudioComponentParam
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	float FloatParam;//[Offset: 0x8, Size: 0x4]
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int IntParam;//[Offset: 0x10, Size: 0x4]
	SoundWave* SoundWaveParam;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 0x10]
	float PlaybackTime;//[Offset: 0x10, Size: 0x4]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4]
	float Magnitude;//[Offset: 0x4, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 0x4]
	float PlaybackTime;//[Offset: 0x4, Size: 0x4]
	SoundWave* SoundWave;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	enum BattleState;//[Offset: 0xbb8, Size: 0x1]
	enum PlayerOutType;//[Offset: 0xbb9, Size: 0x1]
	enum PlayerType;//[Offset: 0xbba, Size: 0x1]
	enum PlayerGameRole;//[Offset: 0xbbb, Size: 0x1]
	SCMReplicateHostData[] ReplicateData;//[Offset: 0xbd0, Size: 0x10]
	float ReviveStartTime;//[Offset: 0xbf0, Size: 0x4]
	SolarPlayerState* RevivingTeammatePS;//[Offset: 0xbf8, Size: 0x8]
	SolarTaskComponent* TaskSystem;//[Offset: 0xc10, Size: 0x8]
	class ActorComponent[] GMComponentClasses;//[Offset: 0xc18, Size: 0x10]
	ActorComponent*[] SpawnedGMComps;//[Offset: 0xc28, Size: 0x10]
	void UpdateTaskInfo(out const TaskUpdateInfo InTaskInfo);// 0x261d078ea041
	void UpDateDataManager(const SCMReplicateHostData[] InReplicateData, bool bInit);// 0x261c078ea041
	void ServerChangePlayerCharacter(int NewCharacterID, int NewSkinID);// 0x261b078ea041
	void ServerBeginSpectate(SCMPlayerState* TargetPlayer);// 0x261a078ea041
	void ReviveSelfAsWinner(bool bOverrideLocation, out const Vector ReviveLocation);// 0x2619078ea041
	void RequestStartGame();// 0x2618078ea041
	void RequestSetWeaponTypeAvailableLuaCall(enum WeaponUIType, bool bIsAvailable);// 0x2617078ea041
	void RequestSetWeaponTypeAvailable(enum WeaponUIType, bool bIsAvailable);// 0x2616078ea041
	void RequestSetWeaponAvailableLuaCall(int weaponid, bool bIsAvailable);// 0x2615078ea041
	void RequestSetWeaponAvailable(int weaponid, bool bIsAvailable);// 0x2614078ea041
	void RequestSetVehicleTypeAvailableLuaCall(int VehicleTypeID, bool bIsAvailable);// 0x2613078ea041
	void RequestSetVehicleTypeAvailable(int VehicleTypeID, bool bIsAvailable);// 0x2612078ea041
	void RequestSetVehicleClassAvailableLuaCall(enum VehicleClass, bool bIsAvailable);// 0x2611078ea041
	void RequestSetVehicleClassAvailable(enum VehicleClass, bool bIsAvailable);// 0x2610078ea041
	void RequestSetUserSettingLuaCall(out const int Category, out const int Name, enum ParamType, out const int Value);// 0x260f078ea041
	void RequestSetUserSetting(const int Category, const int Name, enum ParamType, const int Value);// 0x260e078ea041
	void RequestSetRoomPoolPrizeTypeLuaCall(int TypeID);// 0x260d078ea041
	void RequestSetRoomPoolPrizeType(int TypeID);// 0x260c078ea041
	void RequestSetRoomPasswdLuaCall(FString Passwd);// 0x260b078ea041
	void RequestSetRoomPasswd(FString Passwd);// 0x260a078ea041
	void RequestSetRoomNameLuaCall(FString Name);// 0x2609078ea041
	void RequestSetRoomName(FString Name);// 0x2608078ea041
	void RequestSetRoomLevelLimitLuaCall(int Level);// 0x2607078ea041
	void RequestSetRoomLevelLimit(int Level);// 0x2606078ea041
	void RequestSetInviteEnableLuaCall(bool bEnable);// 0x2605078ea041
	void RequestSetInviteEnable(bool bEnable);// 0x2604078ea041
	void RequestSetExchangeEnableLuaCall(bool bEnable);// 0x2603078ea041
	void RequestSetExchangeEnable(bool bEnable);// 0x2602078ea041
	void RequestPlayersRandomToTeamLuaCall();// 0x2601078ea041
	void RequestPlayersRandomToTeam();// 0x2600078ea041
	void RequestPlayersFillTeamLuaCall();// 0x25ff078ea041
	void RequestPlayersFillTeam();// 0x25fe078ea041
	void RequestKickPlayerOutLuaCall(SCMPlayerState* Player);// 0x25fd078ea041
	void RequestKickPlayerOut(SCMPlayerState* Player);// 0x25fc078ea041
	void RequestExchangeTeamsAndPos(SCMPlayerState* PlayerA, SCMPlayerState* PlayerB);// 0x25fb078ea041
	void RequestChangeTeam(SCMPlayerState* Player, FString TeamName, const int NewPosInTeam);// 0x25fa078ea041
	void RequesJoinOB(SCMPlayerState* Player);// 0x25f9078ea041
	void OnUpdateLifeTime();// 0x25f8078ea041
	void OnRep_RevivingTeammatePS(SolarPlayerState* LastRevivingTeammatePS);// 0x25f7078ea041
	void OnRep_BattleState();// 0x25f6078ea041
	void OnPlayerKilled(SCMPlayerState* KillerPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x25f5078ea041
	void OnPlayerKill(SCMPlayerState* KilledPlayer, out SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x25f4078ea041
	void NotifyUpdateCGMData(FString InDataName);// 0x25f3078ea041
	void NotifyClientUpdateDataManager(bool bInit);// 0x25f2078ea041
	bool NeedConsiderRepData();// 0x25f1078ea041
	bool IsPreJoinPlayer();// 0x25f0078ea041
	void InitTaskInfo(out const BattlePassInfo InTaskInfo);// 0x25ec078ea041
	SCMReplicateHostData[] GetReplicateDataArray();// 0x25e6078ea041
	SCMPlayerState*[] GetMyTeamPlayerList();// 0x25e5078ea041
	void CanPlayerBattle();// 0x25e4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMReplicateHostData
	enum HostType;//[Offset: 0x0, Size: 0x1]
	FString HostID;//[Offset: 0x8, Size: 0x10]
	SCMRepData[] RepDataArray;//[Offset: 0x18, Size: 0x10]
	SCMRepDataArray[] RepArrDataArray;//[Offset: 0x28, Size: 0x10]
	SCMRepDataMap[] RepMapDataArray;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMRepData
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum DataChangeType;//[Offset: 0x11, Size: 0x1]
	int VInt;//[Offset: 0x14, Size: 0x4]
	float VFloat;//[Offset: 0x18, Size: 0x4]
	Vector_NetQuantize100 VVector;//[Offset: 0x1c, Size: 0xc]
	FString VString;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMRepDataArray
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	uint32[] ChangeIndexArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMRepDataMap
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum[] ChangeTypeArray;//[Offset: 0x18, Size: 0x10]
	FString[] KeyArray;//[Offset: 0x28, Size: 0x10]
	int[] VInt;//[Offset: 0x38, Size: 0x10]
	float[] VFloat;//[Offset: 0x48, Size: 0x10]
	Vector_NetQuantize100[] VVector;//[Offset: 0x58, Size: 0x10]
	FString[] VString;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TaskUpdateInfo
	bool delAllTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int64[] delIDs;//[Offset: 0x8, Size: 0x10]
	BattlePassInfo Task;//[Offset: 0x18, Size: 0x28]
	FString PlayerId;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattlePassInfo
	TaskBriefData[] tasks;//[Offset: 0x0, Size: 0x10]
	int64 BattlePassID;//[Offset: 0x10, Size: 0x8]
	int64 currWeek;//[Offset: 0x18, Size: 0x8]
	int64 maxWeek;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TaskBriefData
	int64 TaskID;//[Offset: 0x0, Size: 0x8]
	int64 BaseValue;//[Offset: 0x8, Size: 0x8]
	int64 CurValue;//[Offset: 0x10, Size: 0x8]
	int64 status;//[Offset: 0x20, Size: 0x8]
	enum page;//[Offset: 0x28, Size: 0x1]
	int64 week;//[Offset: 0x30, Size: 0x8]
	bool IsMarked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTaskComponent.ActorComponent.Object
	delegate TaskUpdateDelegate;//[Offset: 0xb8, Size: 0x10]
	delegate TaskCompoleteDelegate;//[Offset: 0xc8, Size: 0x10]
	delegate MarkingTaskChangedDelegate;//[Offset: 0xd8, Size: 0x10]
	delegate ClientTaskUpdatedDelegate;//[Offset: 0xe8, Size: 0x10]
	delegate ClientBattlePassTimeInfoDelegate;//[Offset: 0xf8, Size: 0x10]
	DataTable* TaskTypeHandleConfig;//[Offset: 0x108, Size: 0x8]
	class TaskFormula* TaskFormula;//[Offset: 0x110, Size: 0x8]
	TaskFormula* FormulaInst;//[Offset: 0x118, Size: 0x8]
	int64[] MarkingTask;//[Offset: 0x120, Size: 0x10]
	BattlePassTimeInfo BattlePassTimeInfo;//[Offset: 0x130, Size: 0x18]
	TaskBriefData[] tasks;//[Offset: 0x148, Size: 0x10]
	void ServerEnableMarkTask(int64 InTaskID, bool bMarking);// 0x5d7c078ea041
	void OnRep_Tasks();// 0x5d7b078ea041
	void OnRep_MarkingTask();// 0x5d7a078ea041
	void OnRep_BattlePassTimeInfo();// 0x5d79078ea041
	bool IsMaxLevel();// 0x5d78078ea041
	bool IsEnable();// 0x5d77078ea041
	BattlePassTimeInfo GetBattlePassTimeInfo();// 0x5d76078ea041
	TaskBriefData[] GetAllTaskBriefData();// 0x5d75078ea041
	int64[] GetAllMarkTask();// 0x5d74078ea041
	void EnableMarkTask(int64 InTaskID, bool bMarking);// 0x5d73078ea041
	void ClientNotifyTaskComplete(const TaskBriefData InTaskInfo);// 0x5d72078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattlePassTimeInfo
	int64 BattlePassID;//[Offset: 0x0, Size: 0x8]
	int64 currWeek;//[Offset: 0x8, Size: 0x8]
	int64 maxWeek;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TaskFormula.Info.Actor.Object
	SolarTaskComponent* TaskSystem;//[Offset: 0x228, Size: 0x8]
	void SetTaskProgress(int64 InTaskID, int64 ProgressValue, bool bOverrideLastMatch);// 0x5d71078ea041
	void IncreaseTaskProgress(int64 InTaskID, int64 ProgressValue);// 0x5d70078ea041
	int GetTaskConditionValue(int64 InTaskID, int64 Index);// 0x5d6f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KeyMappingRowInfo.TableRowBase
	FString Label;//[Offset: 0x8, Size: 0x10]
	FString ActionDisplayName;//[Offset: 0x18, Size: 0x10]
	FString ActionName;//[Offset: 0x28, Size: 0x10]
	bool Continuity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float Scale;//[Offset: 0x3c, Size: 0x4]
	FString RealAction;//[Offset: 0x40, Size: 0x10]
	FString[] FirstDefaultKeys;//[Offset: 0x50, Size: 0x10]
	FString[] SecondDefaultKeys;//[Offset: 0x60, Size: 0x10]
	FString Description;//[Offset: 0x70, Size: 0x10]
	FString[] RelatedActions;//[Offset: 0x80, Size: 0x10]
	bool Stationary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EmojiBubbleSubsystem.GameInstanceSubsystem.Subsystem.Object
	DataTable* EmojiTable;//[Offset: 0x30, Size: 0x8]
	void ShowEmojiBubbleToContainerInLobby(int EmojiID, SolarLobbyCharacter* InLobbyCharacter, FString PlayerId);// 0x4772078ea041
	void ShowEmojiBubbleToContainer(int EmojiID, SolarCharacter* InCharacter);// 0x4771078ea041
	void ResetAllEmojiBubble();// 0x4770078ea041
	bool GetEmojiConfigByID(int EmojiID, out EmojiBubbleConfig OutConfig);// 0x476f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLobbyCharacter.Pawn.Actor.Object
	CurveVector* DissolveCurvePath;//[Offset: 0x290, Size: 0x28]
	MaterialInterface* DissolveMatPath;//[Offset: 0x2b8, Size: 0x28]
	CurveVector* FresnelCurvePath;//[Offset: 0x2e0, Size: 0x28]
	MaterialInterface* FresnelMatPath;//[Offset: 0x308, Size: 0x28]
	ParticleSystem* SwitchParticleEffectPath;//[Offset: 0x330, Size: 0x28]
	float SwitchEffectInterval;//[Offset: 0x360, Size: 0x4]
	float SelfDelayShowSeconds;//[Offset: 0x364, Size: 0x4]
	AkComponent* AkAudioComponent;//[Offset: 0x370, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x378, Size: 0x8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x380, Size: 0x8]
	SkeletalMeshComponent* MirrorSkeletalMesh;//[Offset: 0x388, Size: 0x8]
	Actor* LobbyAccessory;//[Offset: 0x390, Size: 0x8]
	Actor* MirrorLobbyAccessory;//[Offset: 0x398, Size: 0x8]
	SkeletalMeshComponent* DissovleSkeletalMesh;//[Offset: 0x3a0, Size: 0x8]
	SkeletalMeshComponent* FresnelSkeletalMesh;//[Offset: 0x3a8, Size: 0x8]
	SkeletalMeshComponent* MirrorDissovleSkeletalMesh;//[Offset: 0x3b0, Size: 0x8]
	SkeletalMeshComponent* MirrorFresnelSkeletalMesh;//[Offset: 0x3b8, Size: 0x8]
	MaterialInterface* DissovleMat;//[Offset: 0x3c0, Size: 0x8]
	MaterialInterface* FresnelMat;//[Offset: 0x3c8, Size: 0x8]
	CurveVector* DissovleCurve;//[Offset: 0x3d0, Size: 0x8]
	CurveVector* FresnelCurve;//[Offset: 0x3d8, Size: 0x8]
	MaterialInstanceDynamic*[] DynamicDissovleMats;//[Offset: 0x3e8, Size: 0x10]
	MaterialInstanceDynamic*[] DynamicFresnelMats;//[Offset: 0x3f8, Size: 0x10]
	bool bCanPlayVoiceInIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	bool bOpenMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 0x1]
	bool CharacterIsVisiblity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e, Size: 0x1]
	int CurSkinId;//[Offset: 0x420, Size: 0x4]
	int CurChunkId;//[Offset: 0x424, Size: 0x4]
	bool bIsPlayIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	class Object* AnimBPClass;//[Offset: 0x430, Size: 0x8]
	void UpdateLobbyAccessory(FString InAccessoryPath);// 0x541c078ea041
	void StopPlayIdleShow();// 0x541b078ea041
	void StartPlaySwitchEffect();// 0x541a078ea041
	void StartPlayFresnelSwitchEffect();// 0x5419078ea041
	void StartPlayDissovleSwitchEffect();// 0x5418078ea041
	void SetSwitchEffetComp(SkeletalMeshComponent* EffectComp, SkeletalMeshComponent* DefaultComp, MaterialInterface* EffectMat, out MaterialInstanceDynamic*[] DyniamEffectMats);// 0x5417078ea041
	void SetPropVisiable(bool isVisiable);// 0x5416078ea041
	void SetMeshVisibility(bool IsVisible);// 0x5415078ea041
	void SetIsPlayIdleShow(bool InIsPlayIdleShow);// 0x5414078ea041
	void SetCharacterRotationByDelta(float InDeltaYaw);// 0x5413078ea041
	void SetCharacterMeshAndMat(int InSkinID, bool IsForce);// 0x5412078ea041
	void SetCharacterByLoadedData(SolarLobbyCharacterData* InData);// 0x5411078ea041
	void PlayIdleShow();// 0x5410078ea041
	void OpenLookAtAndSetPostProcessABPCameraLocation(const bool bOpen, FString ModuleCameraName);// 0x540f078ea041
	bool IsCanOpenMirror();// 0x540e078ea041
	bool IsCanOpenChangeAnim();// 0x540d078ea041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x540c078ea041
	void InitCharacterByLua();// 0x540b078ea041
	SolarAkGameObject* GetSolarAkGameObject();// 0x540a078ea041
	SolarLobbyCharacterData* GetLobbySkinResourceBySkinId(int InSkinID, bool IsLowRes);// 0x5409078ea041
	bool GetIsPlayIdleShow();// 0x5408078ea041
	SolarLobbyAnimInstance* GetCharAnimInstance();// 0x5407078ea041
	void DetachCharacterSocketPS();// 0x5406078ea041
	void DelayShowSelf(SolarLobbyCharacterData* InData);// 0x5405078ea041
	void ClearSwitchEffect();// 0x5404078ea041
	void ClearCharacterByLua();// 0x5403078ea041
	void AttachCharacterSocketPS(out PSAttachElem[] PSAttachArray);// 0x5402078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLobbyCharacterData.DataAsset.Object
	SoftObjectPath SkinShareImage;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath SkinBackgroundShare;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath Mesh;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath Material;//[Offset: 0x78, Size: 0x18]
	<uint16,CharacterTransformData> CharacterTransformData;//[Offset: 0x90, Size: 0x50]
	SoftObjectPath[] MaterialArray;//[Offset: 0xe0, Size: 0x10]
	<FString,MaterialInterface*> CharacterChangeMat;//[Offset: 0xf0, Size: 0x50]
	SoftObjectPath AnimBlueprint;//[Offset: 0x140, Size: 0x18]
	SoftObjectPath WinAnimation;//[Offset: 0x158, Size: 0x18]
	SoftObjectPath[] IdleShowList;//[Offset: 0x170, Size: 0x10]
	SoftObjectPath LobbyIdleAnimation;//[Offset: 0x180, Size: 0x18]
	SoftObjectPath AccessoryBlueprint;//[Offset: 0x198, Size: 0x18]
	SoftObjectPath EnterAnim;//[Offset: 0x1b0, Size: 0x18]
	SoftObjectPath ExitAnim;//[Offset: 0x1c8, Size: 0x18]
	SoftObjectPath RefuseAnim;//[Offset: 0x1e0, Size: 0x18]
	SoftObjectPath EncounterIdleAnim;//[Offset: 0x1f8, Size: 0x18]
	SoftObjectPath[] EncounterIdleShowList;//[Offset: 0x210, Size: 0x10]
	SoftObjectPath RecommendAnimBlueprint;//[Offset: 0x220, Size: 0x18]
	bool bParameterChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	PSAttachElem[] PSAttachArray;//[Offset: 0x240, Size: 0x10]
	SoftObjectPath IdleShowSequence;//[Offset: 0x250, Size: 0x18]
	SoftObjectPath LeftHandProp;//[Offset: 0x268, Size: 0x18]
	SoftObjectPath RightHandProp;//[Offset: 0x280, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterTransformData
	Vector CharacterOffset;//[Offset: 0x0, Size: 0xc]
	Rotator CharacterRot;//[Offset: 0xc, Size: 0xc]
	Vector CharacterScale;//[Offset: 0x18, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PSAttachElem
	SoftObjectPath ParticleSystemPath;//[Offset: 0x0, Size: 0x18]
	FName SocketName;//[Offset: 0x18, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x20, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x2c, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLobbyAnimInstance.AnimInstance.Object
	bool bPlayIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
	bool bInIdleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 0x1]
	bool bResetToIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 0x1]
	bool EnableAnimSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1]
	void ShowRecommendUI(bool bVisible);// 0x5401078ea041
	void SetEnableAnimSound(bool InEnableAnimSound);// 0x5400078ea041
	void SetCharacterInIdleShow(bool IsPlayingIdleShow);// 0x53ff078ea041
	void SetCharacterCanBeLooked(bool IsVisible);// 0x53fe078ea041
	void ResetToIdle();// 0x53fd078ea041
	void RefreshTick();// 0x53fc078ea041
	void RandIdleShow();// 0x53fb078ea041
	void LookAtFunctionSwitcher(const bool bOpen);// 0x53fa078ea041
	void KawaiiPhysicsSwitcher(const bool bOpen);// 0x53f9078ea041
	void GetCameraLocation(FString ModuleCameraName);// 0x53f8078ea041
	void ExitAnimFinish();// 0x53f7078ea041
	void AnimPlayIdleShow(bool Enable);// 0x53f6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EmojiBubbleConfig.TableRowBase
	class SolarUserWidget* EmojiClassType;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CommonInputSubsystem.LocalPlayerSubsystem.Subsystem.Object
	delegate OnInputMethodChanged;//[Offset: 0x50, Size: 0x10]
	int NumberOfInputMethodChangesRecently;//[Offset: 0x60, Size: 0x4]
	double LastInputMethodChangeTime;//[Offset: 0x68, Size: 0x8]
	double LastTimeInputMethodThrashingBegan;//[Offset: 0x70, Size: 0x8]
	enum LastInputType;//[Offset: 0x78, Size: 0x1]
	enum CurrentInputType;//[Offset: 0x79, Size: 0x1]
	FName GamepadInputType;//[Offset: 0x7c, Size: 0x8]
	<FName,enum> CurrentInputLocks;//[Offset: 0x88, Size: 0x50]
	bool bIsGamepadSimulatedClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	bool ShouldShowInputKeys();// 0x3fbd078ea041
	void SetGamepadInputType(const FName InGamepadInputType);// 0x3fbc078ea041
	bool SetCurrentInputType(enum NewInputType);// 0x3fbb078ea041
	void SetCanChangeInputMethod(const bool bCanChange);// 0x3fba078ea041
	bool IsUsingPointerInput();// 0x3fb9078ea041
	bool IsInputMethodActive(enum InputMethod);// 0x3fb8078ea041
	enum GetDefaultInputType();// 0x3fb7078ea041
	enum GetCurrentInputType();// 0x3fb6078ea041
	FName GetCurrentGamepadName();// 0x3fb5078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LocalPlayerSubsystem.Subsystem.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x151, Size: 0x1]
	LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x6bdb078ea041
	LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess);// 0x6bda078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAnoHelper.Object
	bool bOpenAnoSDK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void SendAntiDataToSsmOnDs(FString AntiDataLog, const SolarPlayerController* PC);// 0x4e87078ea041
	void SendAntiDataToSsmOnClientNative(FString ExtraParam, byte AntiType);// 0x4e86078ea041
	void SendAntiDataToSsmOnClient(FString Param, const byte AntiType);// 0x4e85078ea041
	void InitializeBind();// 0x4e84078ea041
	FString GetAntiLogOnClient(const byte Type);// 0x4e83078ea041
	void AnoUnRegisterCallBack();// 0x4e82078ea041
	void AnoSentDataToSvr(AnoSDKAntiData Data);// 0x4e81078ea041
	void AnoSentCoreTimeData(AnoSDKAntiData AntiData);// 0x4e80078ea041
	void AnoSDKSendData(AnoSDKAntiData AntiData);// 0x4e7f078ea041
	void AnoSDKResume();// 0x4e7e078ea041
	void AnoSDKPause();// 0x4e7d078ea041
	void AnoChangeAntiDataFlow(AnoSDKAntiData Data);// 0x4e7c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnoSDKAntiData
	int Length;//[Offset: 0x0, Size: 0x4]
	FString AntiData;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTableManager.Object
	enum SystemLang;//[Offset: 0x30, Size: 0x1]
	void SetIMInitFlag(bool Flag);// 0x5889078ea041
	void SetCurrentLangEnum(enum InLang);// 0x5888078ea041
	void SetCurrentLang(FString InLang);// 0x5887078ea041
	void ReceiveInit();// 0x5886078ea041
	void OnSetCurrentLang(FString InLang);// 0x5885078ea041
	void MakeUpperLocalTextWithLang(out FString OutLocalText, enum InLang);// 0x5884078ea041
	void MakeUpperLocalText(out FString OutLocalText);// 0x5883078ea041
	void MakeLowerLocalTextWithLang(out FString OutLocalText, enum InLang);// 0x5882078ea041
	void MakeLowerLocalText(out FString OutLocalText);// 0x5881078ea041
	bool IsLocalTextIDValid(int ID);// 0x5880078ea041
	FString GetLocalTextWithLang(int ID, enum InLang, bool bMakeUpperText);// 0x587f078ea041
	FString GetLocalText(int ID, bool bMakeUpperText);// 0x587e078ea041
	bool GetIMInitFlag();// 0x587d078ea041
	enum GetCurrentLangEnum();// 0x587c078ea041
	FString GetCurrentLang();// 0x587b078ea041
	enum ConvertLangNameToEnum(FString LangName);// 0x587a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTcpNetworkManager.Object
	bool bIsSsmMatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	SolarTCPSocketClient* SocketClient;//[Offset: 0x50, Size: 0x8]
	SCMMatchChannelAction* MatchChannelAction;//[Offset: 0x58, Size: 0x8]
	bool IsSsm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FString EncryptKeyClientTCPDynamic;//[Offset: 0x68, Size: 0x10]
	bool bEncrypt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	delegate DisconnectedDelegate;//[Offset: 0x7c, Size: 0x10]
	delegate ConnectedDelegate;//[Offset: 0x8c, Size: 0x10]
	delegate MessageReceivedDelegate;//[Offset: 0x9c, Size: 0x10]
	SolarPlayerReport MyReport;//[Offset: 0xb0, Size: 0x498]
	void UpdateTeamRank(byte TeamID, int Rank);// 0x5dd2078ea041
	void UpdateTeamMVPPlayer(const byte TeamID, FString InPlayerID);// 0x5dd1078ea041
	void UpdatePlayerData(FString PlayerId, SolarPlayerState* PlayerState);// 0x5dd0078ea041
	void UpdatePlayerBattleInfo(SolarPlayerState* PS);// 0x5dcf078ea041
	bool UpdateBotAIData(SolarPlayerState* PlayerState);// 0x5dce078ea041
	void TryEndBattle();// 0x5dcd078ea041
	void SyncSsmDataToGameState();// 0x5dcc078ea041
	void SsmDSSendGiftRequest(const int GiftID, const int Num, FString SendPlayerId, FString RecivePlayerId, SolarPlayerState* SendPlayer);// 0x5dcb078ea041
	void SsmDSChangeRoleIDRequest(FString InPlayerID, int InRoleID);// 0x5dca078ea041
	void SetKnockoutPoints(FString InClanId, const int InKnockoutPoints);// 0x5dc9078ea041
	void SendSceenshot2Server(FString UserId, FString PlayerId, FString BattleID, int64 ScreenshotTime, int ImageSize, int ImageWidth, int ImageHeight, FString ImageType, FString ImageBuffer);// 0x5dc8078ea041
	void SendInputDeviceChangedWrapper(enum NowInputType);// 0x5dc7078ea041
	void RequestOpenMatchChannel(const int InMatchType, out const int[] InPlayerStructure, const int InMaxMatchTime);// 0x5dc6078ea041
	void ReportTournamentSpectate(out <FString,FString> TournamentSpectateData);// 0x5dc5078ea041
	void ReportPlayerBattleInfo(SolarPlayerState* PS);// 0x5dc4078ea041
	void RemovePlayerData(FString PlayerId);// 0x5dc3078ea041
	void RecordLastUsedVehicle();// 0x5dc2078ea041
	void PlayerRequireToChangeGold(const int InChangedGoldType, const int InGoldNum, FString InPlayerID, SolarPlayerState* InPlayer);// 0x5dc1078ea041
	void PlayerCancelJoinRequest(FString PlayerId);// 0x5dc0078ea041
	void PlayerCancelJoin(FString PlayerId);// 0x5dbf078ea041
	void OpenSupplement(int MaxSecond);// 0x5dbe078ea041
	void OnStartBattleResponse();// 0x5dbd078ea041
	void OnRecvData(out const byte[] Data);// 0x5dbc078ea041
	void OnRecordBattleStartTime(const float InStartTime);// 0x5dbb078ea041
	bool OnReceivedTeamPreJoinRequest(out const FString[] PlayerIds, int TeamID);// 0x5dba078ea041
	void OnReceivedPlayerJoinData(FString PlayerId);// 0x5db9078ea041
	void OnReceivedPlayerCancelJoin(FString PlayerId);// 0x5db8078ea041
	void OnPostLoadMapWithWorld(World* World);// 0x5db7078ea041
	void OnPlayerLogin(FString PlayerId);// 0x5db6078ea041
	void OnMessageReceived(int ConnId, out const byte[] Message);// 0x5db5078ea041
	void OnDisconnected(int ConnId);// 0x5db4078ea041
	void OnConnected(int ConnId);// 0x5db3078ea041
	void NotifyTournamentSpectateState(bool bIsEnterReplay, out FString BattleID);// 0x5db2078ea041
	void NotifyRoomDataChanged(out const CustomRoomData CustomRoomData);// 0x5db1078ea041
	void NotifyPlayerReward_CustomMode(out const SCustomMode_PlayerReport Report);// 0x5db0078ea041
	void NotifyPlayerReward();// 0x5daf078ea041
	void NotifyPlayerOffline(SolarPlayerController* PC);// 0x5dae078ea041
	void NotifyPlayerEnterBattle(SolarPlayerController* PC);// 0x5dad078ea041
	void NotifyOBPlayersChanged(out FString[] PlayerIds);// 0x5dac078ea041
	void NotifyEquipCharacterSkinRequest(FString PlayerId, int CharacterId, int SkinId);// 0x5dab078ea041
	void NotifyClientBattleStateFish();// 0x5daa078ea041
	void NotifyBattleGroupResultRequest(byte TeamID, int Rank);// 0x5da9078ea041
	bool IsEnableAITeamManager();// 0x5da8078ea041
	bool IsAllowReconnectGame();// 0x5da7078ea041
	void HandlePlayerLogoutInPreparatoryPhase(Controller* PC);// 0x5da6078ea041
	void HandlePlayerLogoutInBattlePhase(Controller* PC);// 0x5da5078ea041
	void GetWeaponUpgradeSlotByWeaponID(out UpgradeSlotStruct[] OutData, FString PlayerId, const int weaponid);// 0x5da4078ea041
	int GetWeaponSkinIDByWeaponID(FString PlayerId, const int weaponid);// 0x5da3078ea041
	int GetTournamentID();// 0x5da2078ea041
	SolarGameModeInfo GetSolarGameModeInfo();// 0x5da1078ea041
	int GetRuleID();// 0x5da0078ea041
	void GetReportWeaponExpIds(out int[] OutWeaponExpIds);// 0x5d9f078ea041
	int GetPort();// 0x5d9e078ea041
	int[] GetPlayerUsableTailFlameIds(FString PlayerId);// 0x5d9d078ea041
	int[] GetPlayerUsableJetpackIds(FString PlayerId);// 0x5d9c078ea041
	byte[] GetPlayerTeamIDs();// 0x5d9b078ea041
	FString[] GetPlayerRoleAndOpenIDs();// 0x5d9a078ea041
	int GetPlayerCount();// 0x5d99078ea041
	FString GetPlayerClanID(FString PlayerId);// 0x5d98078ea041
	void GetPlayerBattleRequestInfo(FString InSolarPlayerID, out PlayerBattleRequestInfo OutResult);// 0x5d97078ea041
	int[] GetMLRelatedAIDataMLRatio();// 0x5d96078ea041
	int[] GetMLRelatedAIDataMLFeature();// 0x5d95078ea041
	bool GetMLRelatedAIDataMLClosed();// 0x5d94078ea041
	FString GetLocalPlayerID();// 0x5d93078ea041
	FString GetLocalIPAddress();// 0x5d92078ea041
	KnockoutParams GetKnockoutPointParams();// 0x5d91078ea041
	bool GetIsCloseMatch();// 0x5d90078ea041
	bool GetHasMonster();// 0x5d8f078ea041
	bool GetHasMachineLearning();// 0x5d8e078ea041
	int GetCurrentMatchBotTeamPresetID();// 0x5d8d078ea041
	int GetClientRuleID();// 0x5d8c078ea041
	int[] GetClientMatchingMapIds();// 0x5d8b078ea041
	int GetClientGameModeGroupId();// 0x5d8a078ea041
	int GetClientEntryID();// 0x5d89078ea041
	FString GetClientBattleID();// 0x5d88078ea041
	<int,int> GetAILevelConfig();// 0x5d87078ea041
	int GetAIAccompanyTimelineID();// 0x5d86078ea041
	int GetAboutToEnterPlayerCount();// 0x5d85078ea041
	void FreeBotAIData(SolarPlayerState* PlayerState);// 0x5d84078ea041
	void FakePlayerJoin(FString PlayerId, int TeamID);// 0x5d83078ea041
	void DebugData_SetPlayerDataOnLogin(SolarPlayerState* PlayerState);// 0x5d82078ea041
	void CloseSupplement();// 0x5d81078ea041
	bool CheckPlayerLeave(FString PlayerId);// 0x5d80078ea041
	bool CheckJoinToken(FString Token, FString PlayerId);// 0x5d7f078ea041
	bool CheckIfPlayerHasJoined(FString PlayerId);// 0x5d7e078ea041
	void CheckBattleOver();// 0x5d7d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTCPSocketClient.Actor.Object
	int SendBufferSize;//[Offset: 0x228, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x22c, Size: 0x4]
	float TimeBetweenTicks;//[Offset: 0x230, Size: 0x4]
	bool SendData(int ConnectionId, byte[] Data);// 0x4212078ea041
	void Disconnect(int ConnectionId);// 0x4211078ea041
	void Connect(FString IP, int Port, out const delegate OnConnected, out const delegate OnDisconnected, out const delegate OnMessageReceived, out int ConnectionId);// 0x4210078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomRoomData
	FString Name;//[Offset: 0x0, Size: 0x10]
	int64 MinPlayerLimit;//[Offset: 0x10, Size: 0x8]
	int64 MaxPlayerLimit;//[Offset: 0x18, Size: 0x8]
	FString OwnerID;//[Offset: 0x20, Size: 0x10]
	FString Passwd;//[Offset: 0x30, Size: 0x10]
	int LevelLimit;//[Offset: 0x40, Size: 0x4]
	int64 ShowID;//[Offset: 0x48, Size: 0x8]
	int64 MaxOBPlayerLimit;//[Offset: 0x50, Size: 0x8]
	bool bIsEnabledSwapPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bIsEnabledInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bIsEnableTeamJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	enum RoomType;//[Offset: 0x5b, Size: 0x1]
	TournamentData TournamentData;//[Offset: 0x5c, Size: 0x10]
	int RewardPoolID;//[Offset: 0x6c, Size: 0x4]
	int RewardPoolPrizeType;//[Offset: 0x70, Size: 0x4]
	CustomServerData CustomServerData;//[Offset: 0x78, Size: 0x58]
	int KeepMatchTime;//[Offset: 0xd0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TournamentData
	int StartTime;//[Offset: 0x0, Size: 0x4]
	int DelayTime;//[Offset: 0x4, Size: 0x4]
	int Turn;//[Offset: 0x8, Size: 0x4]
	enum TournamentType;//[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomServerData
	FString ID;//[Offset: 0x0, Size: 0x10]
	int ConfigID;//[Offset: 0x10, Size: 0x4]
	int[] WeaponBlacklist;//[Offset: 0x18, Size: 0x10]
	int[] WeaponTypeBlacklist;//[Offset: 0x28, Size: 0x10]
	int[] VehicleTypeBlacklist;//[Offset: 0x38, Size: 0x10]
	int[] VehicleClassBlacklist;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCustomMode_PlayerReport.SolarPlayerReport
	<int,int> RewardItems;//[Offset: 0x498, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UpgradeSlotStruct
	int SlotID;//[Offset: 0x0, Size: 0x4]
	bool Unlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum AccessoryType;//[Offset: 0x5, Size: 0x1]
	int AccessoryID;//[Offset: 0x8, Size: 0x4]
	SlateBrush IconOverride;//[Offset: 0x10, Size: 0xe0]
	LinearColor IconColorOverride;//[Offset: 0xf0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerBattleRequestInfo
	FString NickName;//[Offset: 0x0, Size: 0x10]
	int AccountLevel;//[Offset: 0x10, Size: 0x4]
	PlatformParams PlatformParams;//[Offset: 0x18, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlatformParams
	int64 UserId;//[Offset: 0x0, Size: 0x8]
	FString OpenId;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KnockoutParams
	float KnockoutKillPoint;//[Offset: 0x0, Size: 0x4]
	float[] KnockoutRankPoints;//[Offset: 0x8, Size: 0x10]
	float KnockoutDamagePoint;//[Offset: 0x18, Size: 0x4]
	float KnockoutDamageTakenPoint;//[Offset: 0x1c, Size: 0x4]
	float ScalarParam;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMMatchChannelAction.BlueprintAsyncActionBase.Object
	Object* WorldContextObject;//[Offset: 0x48, Size: 0x8]
	delegate OnMatchChannelChange;//[Offset: 0x50, Size: 0x10]
	SCMMatchChannelAction* OpenMatchChannel(Object* WorldContextObject, const enum MatchType, out const int[] PlayerStructure, const int MaxMatchTime);// 0x4c1d078ea041
	void HandleMatchChannelChange(bool InMatchResult, int RPCID);// 0x4c1c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x4167078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUDPManager.Object
	int SendBufferSize;//[Offset: 0x30, Size: 0x4]
	int ReceiveBufferSize;//[Offset: 0x34, Size: 0x4]
	void OnMessageReceived(out const byte[] Data);// 0x5ed5078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAssetManager.AssetManager.Object
	delegate OnAssetManagerPreloadCompleted;//[Offset: 0x450, Size: 0x10]
	SolarChunkAssignData* ChunkAssignDataCache;//[Offset: 0x460, Size: 0x8]
	<FString,Object*> CachedObjMap;//[Offset: 0x468, Size: 0x50]
	void UnLoadPrimaryAssetByLabelPathForLua(FString PrimaryAssetPath);// 0x4e90078ea041
	void PreloadGameNormalAssets(SolarGameInstanceBase* GameInstancePtr);// 0x4e8f078ea041
	void OnBindingActorDestory(Actor* Actor);// 0x4e8e078ea041
	float GetPreloadAssetsProgress();// 0x4e8d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x2c0, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 0x1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 0x1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x2dc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarChunkAssignData.DataAsset.Object
	DirectoryPath[] DirectoriesToNeverClean;//[Offset: 0x30, Size: 0x10]
	<FString,ChunkAssignRule> Rules;//[Offset: 0x40, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChunkAssignRule
	FString FullPath;//[Offset: 0x0, Size: 0x10]
	int ChunkID;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemManager.Object
	SolarItemRootActor* RootActor;//[Offset: 0x30, Size: 0x8]
	<int,Actor*> SpawnedActors;//[Offset: 0x38, Size: 0x50]
	SolarItemSpawner*[] ItemSpawners;//[Offset: 0xd8, Size: 0x10]
	SolarItemSpawner*[] NSItemSpanwers;//[Offset: 0xe8, Size: 0x10]
	SolarVehicleSpawnerSets* SolarVehicleSpawnerSets;//[Offset: 0xf8, Size: 0x8]
	<int,SolarItemSpawner*> ItemSpawnersMap;//[Offset: 0x150, Size: 0x50]
	<int,SolarAirDropSpawner*> AirDropSpawnersMap;//[Offset: 0x1a0, Size: 0x50]
	<int,SolarItemSpawnerArray> NSItemSpawnerMap;//[Offset: 0x1f0, Size: 0x50]
	<int,OutcomeData> ItemOutcomeDatas;//[Offset: 0x240, Size: 0x50]
	<int,OutcomeDataCollection> OutcomeCollection;//[Offset: 0x290, Size: 0x50]
	<int,SimpleDropItemDataCollection> OriginDropItemDatas;//[Offset: 0x2e0, Size: 0x50]
	<int,FinalDropDataCollection> AirDropItemDatas;//[Offset: 0x330, Size: 0x50]
	<int,int> AirDropChestIndexMap;//[Offset: 0x380, Size: 0x50]
	<int,int> UsedAirDropChestIndexMap;//[Offset: 0x3d0, Size: 0x50]
	<int,int> MaxPileMap;//[Offset: 0x420, Size: 0x50]
	RandomStream ItemStream;//[Offset: 0x470, Size: 0x8]
	float DelaySpawnTime;//[Offset: 0x478, Size: 0x4]
	FString[] SubLevelNames;//[Offset: 0x480, Size: 0x10]
	bool BInitSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	bool BSpawnerDestoryed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 0x1]
	TimerHandle ItemInitSpawnerHandle;//[Offset: 0x498, Size: 0x8]
	float DelayInitSpawnerTime;//[Offset: 0x4a0, Size: 0x4]
	TimerHandle ItemLoopSpawnHandle;//[Offset: 0x4a8, Size: 0x8]
	float SpawnLoopInterval;//[Offset: 0x4b0, Size: 0x4]
	float SpawnMinDisSquared;//[Offset: 0x4b4, Size: 0x4]
	float SpawnMaxHeightOffset;//[Offset: 0x4b8, Size: 0x4]
	float ChestSpawnMinDisSquared;//[Offset: 0x4bc, Size: 0x4]
	float VehicleSpawnMinDisSquared;//[Offset: 0x4c0, Size: 0x4]
	DataTable* ItemResReferenceTable;//[Offset: 0x4c8, Size: 0x8]
	FString ItemResReferenceTablePath;//[Offset: 0x4d0, Size: 0x10]
	bool BOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 0x1]
	int FirstSpawnerIndex;//[Offset: 0x51c, Size: 0x4]
	int FirstTBoxIndex;//[Offset: 0x520, Size: 0x4]
	int FirstAirDropIndex;//[Offset: 0x524, Size: 0x4]
	int FirstVehicleIndex;//[Offset: 0x528, Size: 0x4]
	int ChestKeyCode;//[Offset: 0x52c, Size: 0x4]
	int Level1OutcomeID;//[Offset: 0x530, Size: 0x4]
	int Level2OutcomeID;//[Offset: 0x534, Size: 0x4]
	int Level3OutcomeID;//[Offset: 0x538, Size: 0x4]
	<int,enum> ItemID2Types;//[Offset: 0x610, Size: 0x50]
	int64 ThisIdRefCount;//[Offset: 0x670, Size: 0x8]
	int64 ServerNowSeconds;//[Offset: 0x678, Size: 0x8]
	FString RootActorBpPath;//[Offset: 0x680, Size: 0x10]
	float CheckDropRadius;//[Offset: 0x690, Size: 0x4]
	float CheckDropHeight;//[Offset: 0x694, Size: 0x4]
	float DropLineTraceLength;//[Offset: 0x698, Size: 0x4]
	float DropUnitOffset;//[Offset: 0x69c, Size: 0x4]
	SolarMapManager* MapManager;//[Offset: 0x6a0, Size: 0x8]
	SolarAirDropSpawner*[] ActiveAirDropBox;//[Offset: 0x6a8, Size: 0x10]
	AirDropTreasureBox*[] AirDropsList;//[Offset: 0x6e8, Size: 0x10]
	DeathTreasureBox*[] DeathTreasureBoxList;//[Offset: 0x6f8, Size: 0x10]
	void UpdateItemParams();// 0x53ec078ea041
	bool TryDropAtLocation(SolarCharacterBase* Owner, out Vector CheckPos, const bool bIsDeathBox);// 0x53eb078ea041
	void SplitBurstItems(const SolarItemData Source, out SolarItemData[] SplitedPile);// 0x53ea078ea041
	void SpawnTreasureBoxByID(const int TreasureId, Transform trans, SolarItemData[] ItemsToSpawn, SolarCharacter* SummonCharacter, const float InSpawnDelay, const float InStartHeight);// 0x53e9078ea041
	void SpawnMutipleItems(SolarCharacter* InCharacter, const int InItemID, const int InPerCount, const int InTotalCount);// 0x53e8078ea041
	void SpawnItemsByOutcomeID(const int OutcomeID, out Transform trans);// 0x53e7078ea041
	void SpawnItems(const int ItemID, const int ItemNum, Transform trans);// 0x53e6078ea041
	SolarItemData SpawnItemData(int ItemID);// 0x53e5078ea041
	void SpawnDeathBox(SolarCharacterBase* Owner, out const Rotator Rotator, out SolarItemData[] DataTarray, out const int DeathBoxId, out const SolarPlayerWeapon*[] DeathBoxWeaponArray, out const float CurrEnergyValue, out const float CurrExtraEnergyValue, out const int MonsterID);// 0x53e4078ea041
	void SpawnAirDropByID(const int ChestID, Vector Location, SolarItemData[] ItemsToSpawn);// 0x53e3078ea041
	void ServerAddExtraGlobalOutcome(out const int[] InExtraIDs);// 0x53e2078ea041
	void ResetThisID();// 0x53e1078ea041
	bool RefreshOutcomePoolContent(out OutcomeData InOutcomeData);// 0x53e0078ea041
	void OnUpdateServerNowSeconds(const int InNowSeconds);// 0x53df078ea041
	void OnCustomGameStateChanged(const enum InNewState);// 0x53de078ea041
	void OnAsyncLoadTreasureBoxComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Transform trans, SolarCharacter* InCharacter, const float InSpawnDelay, const float InStartHeight);// 0x53dd078ea041
	void OnAsyncLoadItemComplete(SoftClassPath SClassPath, SolarItemData ItemData, Transform trans);// 0x53dc078ea041
	void OnAsyncLoadDiscardItemComplete(SoftClassPath SClassPath, SolarCharacter* Owner, SolarItemData ItemData);// 0x53db078ea041
	void OnAsyncLoadDeathBoxComplete(class Object DeathBoxClass, SolarCharacterBase* Owner, Rotator Rotator, SolarItemData[] DataTarray, SolarItemData DeathBoxData, SolarPlayerWeapon*[] DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, const int MonsterID);// 0x53da078ea041
	void OnAsyncLoadAirdropComplete(SoftClassPath SClassPath, SolarItemData BoxItemData, SolarItemData[] ItemDataList, Vector Location);// 0x53d9078ea041
	void NotifySpawnerDestroy();// 0x53d8078ea041
	void NotifyAvailableAirDropsNumChanged();// 0x53d7078ea041
	void NotifyAirDropOpened();// 0x53d6078ea041
	void NetStartAirDrops(const int SpawnerID, const int ChestID);// 0x53d5078ea041
	bool NetRunSpecOutcomesAndItems(out const <int,int> InOutcomeMap, out const <int,int> InItemMap, out SolarItemData[] OutItemArray);// 0x53d4078ea041
	bool NetRunSpecOutcome(const int InData, out SolarItemData[] OutItemArray);// 0x53d3078ea041
	void NetRunGlobalDrop();// 0x53d2078ea041
	void NetRunDrop(const enum InSpecifiedStage);// 0x53d1078ea041
	bool NetDropOutcomeContent(const int TargetContentID, out OutcomeData OutcomeData, out <int,SimpleDropItemDataCollection> InDropItemDatas, bool fromSpawner, out const Transform trans);// 0x53d0078ea041
	bool NetDropOutcome(out OutcomeData OutcomeData, out int OutTargetContentID);// 0x53cf078ea041
	void NetDropGlobalOutcome(out GlobalOutcomeData GlobalOutcomeData);// 0x53ce078ea041
	void LoadSpawnerLevelComplete();// 0x53cd078ea041
	void LoadItemSpawnerLevels();// 0x53cc078ea041
	bool IsPosBlocked(out const Vector CheckPos);// 0x53cb078ea041
	bool IsInSafeArea(out const Vector Location);// 0x53ca078ea041
	void InitWeaponPartLevel(out SolarItemData InItemData);// 0x53c9078ea041
	void InitWeaponLevel(out SolarItemData InItemData);// 0x53c8078ea041
	void InitItemDataShieldValue(out SolarItemData InItemData);// 0x53c7078ea041
	int64 IncreaseThisID();// 0x53c6078ea041
	int GetVehicleGroupIDByVehicleID(int InVehicleID);// 0x53c5078ea041
	SolarVehicleData GetVehicleConfigData(const int InVehicleID);// 0x53c4078ea041
	int GetServerNowSeconds();// 0x53c3078ea041
	int GetRankSeasonID();// 0x53c2078ea041
	int GetRandomIDInMap(const int TotalWeight, out <int,int> WeightIDMap);// 0x53c1078ea041
	int GetRandomAirDropIDInMap();// 0x53c0078ea041
	int GetOutcomeIdByTreasureBoxId(const int TreasureBoxID);// 0x53bf078ea041
	OutcomeData GetOutcomeDataByID(const int OutcomeID);// 0x53be078ea041
	OutcomeContentData GetOutcomeContentDataByID(const int ContentID);// 0x53bd078ea041
	bool GetItemResReference(int InItemID, out ItemResReference OutData);// 0x53bc078ea041
	int GetItemPrize(const int InItemID);// 0x53bb078ea041
	int GetItemMaxPileByID(const int InItemID);// 0x53ba078ea041
	bool GetGlobalOutcomeData(const int GamePlayMode, out GlobalOutcomeData[] GlobalOutcomeDatas);// 0x53b9078ea041
	int GetEntryID();// 0x53b8078ea041
	bool GetCurrItemSubLevels(FString InMapName, out FString[] OutSubLevelNames);// 0x53b7078ea041
	OutcomeData GetCookedOutcomeDataByID(const int OutcomeID);// 0x53b6078ea041
	bool GetChestsFromChestSpawn(const int ChestSpawnID, out int[] ChestIDs);// 0x53b5078ea041
	int GetAvailableAirDropsNum();// 0x53b4078ea041
	bool GetAirDropChestIDsByGamePlayMode(const int GamePlayMode, out int[] ChestIDs);// 0x53b3078ea041
	SolarAirDropSpawner*[] GetActiveAirDropBox();// 0x53b2078ea041
	void FindTransformForBoxItem(SolarTreasureBoxActor* TargetActor, out Transform InTrans, bool bUseNewLocation);// 0x53b1078ea041
	Rotator FindRotationForDropItem(Actor* TargetActor, out Vector FindTargetPos);// 0x53b0078ea041
	bool FindPosForDropItem(SolarCharacterBase* Owner, out Vector FindTargetPos, const bool bPreferCenter, const bool bIsDeathBox);// 0x53af078ea041
	SolarItemData CreateItemDataByKey(const int InItemID);// 0x53ae078ea041
	void ConvertToItemdataAndSetToSpawners();// 0x53ad078ea041
	void ClearSpawnLoopTimer();// 0x53ac078ea041
	void CheckSpawnItemByDis();// 0x53ab078ea041
	bool CheckPointInCircle(Vector2D Center, float Radius, Vector2D PlayerPoint);// 0x53aa078ea041
	void AddOneDropDataToTempDatas(const int SpawnerID, const int InItemID, const int InItemNum, out <int,SimpleDropItemDataCollection> InDropItemDatas);// 0x53a9078ea041
	bool AddExtraGlobalOutcomeData(const int[] InExtraGlobalOutcomeIDs, out GlobalOutcomeData[] GlobalOutcomeDatas);// 0x53a8078ea041
	void AddAirDropToList(AirDropTreasureBox* AirDrop);// 0x53a7078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemRootActor.Actor.Object
	int MAX_LOAD_NUM;//[Offset: 0x228, Size: 0x4]
	int MAX_SPAWN_NUM;//[Offset: 0x22c, Size: 0x4]
	int CurrLoadNum;//[Offset: 0x230, Size: 0x4]
	int CurrSpawnNum;//[Offset: 0x234, Size: 0x4]
	int TempFrame;//[Offset: 0x238, Size: 0x4]
	int FrameInterval;//[Offset: 0x23c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int[] Contents;//[Offset: 0x8, Size: 0x10]
	enum SpawnStage;//[Offset: 0x18, Size: 0x1]
	enum OutcomeType;//[Offset: 0x19, Size: 0x1]
	<int,int> OutcomePools;//[Offset: 0x20, Size: 0x50]
	<int,int> OutcomeDynamicWeights;//[Offset: 0x70, Size: 0x50]
	<int,int> OutcomeSubWeights;//[Offset: 0xc0, Size: 0x50]
	int PoolTotalWeight;//[Offset: 0x110, Size: 0x4]
	int PoolOutcomeID;//[Offset: 0x114, Size: 0x4]
	int MaxTimes;//[Offset: 0x118, Size: 0x4]
	int MinTimes;//[Offset: 0x11c, Size: 0x4]
	int SpawnerID;//[Offset: 0x120, Size: 0x4]
	int NetSetTimes;//[Offset: 0x124, Size: 0x4]
	int DropedTimes;//[Offset: 0x128, Size: 0x4]
	<int,OutcomeContentData> ContentDatas;//[Offset: 0x130, Size: 0x50]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	int GlobalDropTimes;//[Offset: 0x184, Size: 0x4]
	OutcomeTypeLimitData[] LimitTypeDatas;//[Offset: 0x188, Size: 0x10]
	OutcomeIDLimitData[] LimitIDDatas;//[Offset: 0x198, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OutcomeContentData
	int ID;//[Offset: 0x0, Size: 0x4]
	int ItemID;//[Offset: 0x4, Size: 0x4]
	int Weight;//[Offset: 0x8, Size: 0x4]
	int[] RandomNums;//[Offset: 0x10, Size: 0x10]
	int MaxTimes;//[Offset: 0x20, Size: 0x4]
	int MinTimes;//[Offset: 0x24, Size: 0x4]
	int RelatedContentID;//[Offset: 0x28, Size: 0x4]
	enum ItemType;//[Offset: 0x2c, Size: 0x4]
	int DropedTimes;//[Offset: 0x30, Size: 0x4]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool IsDeleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OutcomeTypeLimitData
	enum LimitType;//[Offset: 0x0, Size: 0x4]
	int MinTimes;//[Offset: 0x4, Size: 0x4]
	int MaxTimes;//[Offset: 0x8, Size: 0x4]
	int CurrDropTimes;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OutcomeIDLimitData
	int[] LimitIDs;//[Offset: 0x0, Size: 0x10]
	int MinTimes;//[Offset: 0x10, Size: 0x4]
	int MaxTimes;//[Offset: 0x14, Size: 0x4]
	int CurrDropTimes;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SimpleDropItemDataCollection
	<int,int> Datas;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GlobalOutcomeData
	int ID;//[Offset: 0x0, Size: 0x4]
	int SingleMaxTimes;//[Offset: 0x4, Size: 0x4]
	int TotalMaxTimes;//[Offset: 0x8, Size: 0x4]
	int TotalMinTimes;//[Offset: 0xc, Size: 0x4]
	int NetSetTimes;//[Offset: 0x10, Size: 0x4]
	int DropedTimes;//[Offset: 0x14, Size: 0x4]
	<int,int> ItemIDNumMap;//[Offset: 0x18, Size: 0x50]
	int[] AffectedOutcomes;//[Offset: 0x68, Size: 0x10]
	bool IsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleData
	int VehicleID;//[Offset: 0x0, Size: 0x4]
	FString VehicleBP;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ItemResReference.TableRowBase
	FString Description;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath Icon;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath AbilityBP;//[Offset: 0x30, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAirDropSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	float SpawnDelay;//[Offset: 0x394, Size: 0x4]
	float AudioActorHeightOffset;//[Offset: 0x398, Size: 0x4]
	float AudioActorFallSpeed;//[Offset: 0x39c, Size: 0x4]
	SoftClassPath PillarMeshBPClassPathName;//[Offset: 0x3a0, Size: 0x18]
	int ChestID;//[Offset: 0x3c0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnerID;//[Offset: 0x294, Size: 0x4]
	enum SpawnStage;//[Offset: 0x2c8, Size: 0x1]
	enum SpawnerType;//[Offset: 0x2c9, Size: 0x1]
	enum SpawnerLevel;//[Offset: 0x2ca, Size: 0x1]
	int OutcomeID;//[Offset: 0x2cc, Size: 0x4]
	Vector OriginPos;//[Offset: 0x2d0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0x2dc, Size: 0xc]
	Box SpawnerBox;//[Offset: 0x2e8, Size: 0x1c]
	float RotateAngleRange;//[Offset: 0x304, Size: 0x4]
	bool HasSpawnedItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bActiveSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	FString SyncItemId;//[Offset: 0x310, Size: 0x10]
	bool BOpenLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	bool bRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 0x1]
	float RefreshTime;//[Offset: 0x324, Size: 0x4]
	bool bUseSpawnerTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	bool bToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 0x1]
	int NumberOfPoints;//[Offset: 0x32c, Size: 0x4]
	float fScalarParams;//[Offset: 0x330, Size: 0x4]
	enum AppearanceType;//[Offset: 0x334, Size: 0x1]
	bool bUpdateOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x335, Size: 0x1]
	TimerHandle ItemLoadHandle;//[Offset: 0x358, Size: 0x8]
	TimerHandle ItemSpawnHandle;//[Offset: 0x360, Size: 0x8]
	TimerHandle ItemRefreshHandle;//[Offset: 0x368, Size: 0x8]
	void SpawnSingleItem();// 0x4ded078ea041
	void SpawnInNextTick();// 0x4dec078ea041
	void SaveSpawnerRange();// 0x4deb078ea041
	void RandomRotatorForItem(enum ItemType, out Quat TargetRotator);// 0x4dea078ea041
	void RandomPosInBoundingBox(out Vector TargetPos);// 0x4de9078ea041
	void PlaceItemToTheGround(out Vector InOutLocation);// 0x4de8078ea041
	void OnItemSpawned(Actor* Item);// 0x4de7078ea041
	void OnAsyncLoadComplete(SoftClassPath SClassPath, SolarItemData ItemData);// 0x4de6078ea041
	void NetStartSpawnItems(SolarItemRootActor* OwnerActor);// 0x4de5078ea041
	void LoadSingleWeaponAsset(out const SolarItemData ItemData);// 0x4de4078ea041
	void LoadSingleItemAsset();// 0x4de3078ea041
	void LoadInNextTick();// 0x4de2078ea041
	void InitSpawnerBound();// 0x4de1078ea041
	void GetSuitableDropPos(out Vector TargetPos);// 0x4de0078ea041
	void GenerateDropPosition();// 0x4ddf078ea041
	void ClearUnpickedItems();// 0x4dde078ea041
	void ClearLoopTimer();// 0x4ddd078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	enum CurrentState;//[Offset: 0x404, Size: 0x1]
	SolarItemDataArray ItemDataList;//[Offset: 0x408, Size: 0x118]
	SolarItemData[] SortedGameItemDatas;//[Offset: 0x520, Size: 0x10]
	int DataLeng;//[Offset: 0x550, Size: 0x4]
	enum CostType;//[Offset: 0x554, Size: 0x1]
	int CostNum;//[Offset: 0x558, Size: 0x4]
	int HighestItemQuality;//[Offset: 0x5b0, Size: 0x4]
	float BurstRadius;//[Offset: 0x5b4, Size: 0x4]
	float BurstRadiusRandScale;//[Offset: 0x5b8, Size: 0x4]
	float BurstLocalHeight;//[Offset: 0x5bc, Size: 0x4]
	float BurstEulerAngle;//[Offset: 0x5c0, Size: 0x4]
	bool bBurstSplitItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 0x1]
	enum BurstMethod;//[Offset: 0x5c5, Size: 0x1]
	float RadSafeSlopeToBurstOn;//[Offset: 0x5c8, Size: 0x4]
	float GoldenSpiralMinRadiusSquared;//[Offset: 0x5cc, Size: 0x4]
	SolarBurstItemActor*[] BurstItemActors;//[Offset: 0x5d0, Size: 0x10]
	Vector MeshBoxExtent;//[Offset: 0x5e0, Size: 0xc]
	AkComponent* AkAudioComponent;//[Offset: 0x5f0, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x5f8, Size: 0x8]
	void UpdateTreasureBoxInternal();// 0x449b078ea041
	void UpdateOpenBoxUIByState(const enum NewState);// 0x449a078ea041
	void UpdateItemDataListInternal();// 0x4499078ea041
	void ServerSetState(const enum NewState, SolarCharacter* RequestCharacter);// 0x4498078ea041
	void ServerNotifyPlayerOpen(SolarCharacter* RequestCharacter, enum InItemType);// 0x4497078ea041
	void PlayOpenAnimation();// 0x4496078ea041
	void OnRep_ItemDataList();// 0x4495078ea041
	void OnRep_CurrentState();// 0x4494078ea041
	void OnClientItemHighestQualityChanged(int NewQuality, int PrevQuality);// 0x4493078ea041
	bool IsEmpty();// 0x4492078ea041
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4491078ea041
	int GetNumCost();// 0x4490078ea041
	SolarItemData[] GetItemList();// 0x448f078ea041
	enum GetCostType();// 0x448e078ea041
	void ConstructTreasureBoxTest(out int[] itemIdList);// 0x448d078ea041
	void ConstructTreasureBox(int dropId);// 0x448c078ea041
	bool BOpened();// 0x448b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x270, Size: 0xb8]
	Vector_NetQuantize DroppedLocation;//[Offset: 0x328, Size: 0xc]
	float SpawnOffset;//[Offset: 0x334, Size: 0x4]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x338, Size: 0x10]
	SoftObjectPath OutlineMatPath;//[Offset: 0x348, Size: 0x18]
	SoftObjectPath FXPath;//[Offset: 0x360, Size: 0x18]
	float NoneMeshFxOffset;//[Offset: 0x378, Size: 0x4]
	float PositionTolerance;//[Offset: 0x37c, Size: 0x4]
	FString FXBPPath;//[Offset: 0x380, Size: 0x10]
	SphereComponent* SphereComponent;//[Offset: 0x390, Size: 0x8]
	Actor* FXActor;//[Offset: 0x39c, Size: 0x8]
	byte ItemCurrentState;//[Offset: 0x3a4, Size: 0x1]
	byte[] MarkedTeamIdList;//[Offset: 0x3b0, Size: 0x10]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x3c8, Size: 0x8]
	MaterialInstanceDynamic*[] NormalMats;//[Offset: 0x3d0, Size: 0x10]
	MaterialInstanceDynamic*[] OutlineMats;//[Offset: 0x3e0, Size: 0x10]
	bool bAdjustDroppedLocationByLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 0x1]
	SolarLandscapeListenerConfig LandscapeListenerConfig;//[Offset: 0x3f4, Size: 0x10]
	void UnMarkThisItem(byte TeamID);// 0x448a078ea041
	void SwitchDiscardMaterials();// 0x4489078ea041
	void SetOutlineMeshVisible(bool Visible);// 0x4488078ea041
	void SetItemData(out const SolarItemData _ItemData);// 0x4487078ea041
	void OnServerPawned();// 0x4486078ea041
	void OnRep_ItemDataChange();// 0x4485078ea041
	void OnRep_ItemCurrentStateChanged();// 0x4484078ea041
	void OnRep_DroppedLocation();// 0x4483078ea041
	void NotifyThisItemWasPickedUp();// 0x4482078ea041
	void MarkThisItem(byte TeamID);// 0x4481078ea041
	StaticMeshComponent* GetStaticMeshComp();// 0x4480078ea041
	int GetQuality();// 0x447f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarDormantActor.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemDataArray.FastArraySerializer
	SolarItemData[] ItemDatas;//[Offset: 0x108, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBurstItemActor.SolarItemActor.SolarDormantActor.Actor.Object
	SolarTreasureBoxActor* OwnerBox;//[Offset: 0x410, Size: 0x8]
	SolarItemBurstShowComponent* BurstShowComponent;//[Offset: 0x418, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemBurstShowComponent.SceneComponent.ActorComponent.Object
	bool bLandedOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	float BurstTimeTotal;//[Offset: 0x344, Size: 0x4]
	SyncBurstItemParam BurstItemParam;//[Offset: 0x348, Size: 0x28]
	void OnRep_BurstItemParam();// 0x5395078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SyncBurstItemParam
	Vector_NetQuantize StartLoc;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantize MediumLoc;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize EndLoc;//[Offset: 0x18, Size: 0xc]
	float BurstLocalHeight;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLandscapeListenerConfig
	bool bListenLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum LSModifiedStrategy;//[Offset: 0x1, Size: 0x1]
	bool bAdjustRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	enum LSDestroyStrategy;//[Offset: 0x3, Size: 0x1]
	Vector FreeFallBoxExtent;//[Offset: 0x4, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSpawnerSets.Actor.Object
	VehicleSpawner[] VehicleSpawnerSets;//[Offset: 0x228, Size: 0x10]
	enum SpawnStage;//[Offset: 0x238, Size: 0x1]
	void OnSpawnVehicleDriverGetOn(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x5f37078ea041
	void OnSpawnVehicleDestroyed(Actor* DestroyedActor);// 0x5f36078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleSpawner
	SolarVehicleSpawnerSets* SolarVehicleSpawnerSets;//[Offset: 0x0, Size: 0x8]
	Transform VehicleSpawnerTransform;//[Offset: 0x10, Size: 0x30]
	enum VehicleSpawnType;//[Offset: 0x40, Size: 0x1]
	int SpawnerID;//[Offset: 0x44, Size: 0x4]
	bool bVehicleRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	VehicleSpawnRefreshInfo VehicleSpawnRefreshInfo;//[Offset: 0x50, Size: 0x48]
	SolarVehicleSpawnEffect* VehicleSpawnEffect;//[Offset: 0xa0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleSpawnRefreshInfo
	int VehicleRefreshSecond;//[Offset: 0x0, Size: 0x4]
	bool bVehicleRefreshRand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bVehicleRefreshWaitPreBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	int64 VehicleRefreshCheckRoleDisSquared;//[Offset: 0x8, Size: 0x8]
	Vector VehicleCheckBoxSize;//[Offset: 0x10, Size: 0xc]
	class SolarVehicleSpawnEffect* VehicleSpawnEffectClass;//[Offset: 0x20, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSpawnEffect.Actor.Object
	BoxComponent* BoxCollision;//[Offset: 0x228, Size: 0x8]
	FName EffectMaterialParameterName;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent*[] EffectMeshComponentArray;//[Offset: 0x238, Size: 0x10]
	int VehicleID;//[Offset: 0x248, Size: 0x4]
	Vector BoxExtent;//[Offset: 0x24c, Size: 0xc]
	float EffectTime;//[Offset: 0x258, Size: 0x4]
	StaticMesh* GetVehicleMesh(int InVehicleID);// 0x5f35078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x558, Size: 0xc]
	float LineThickness;//[Offset: 0x564, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x66bc078ea041
	Vector GetUnscaledBoxExtent();// 0x66bb078ea041
	Vector GetScaledBoxExtent();// 0x66ba078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemSpawnerArray
	SolarItemSpawner*[] ItemSpawnerArray;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OutcomeDataCollection
	OutcomeData[] Datas;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FinalDropDataCollection
	SolarItemData[] Datas;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarMapManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	MapData MapData;//[Offset: 0x38, Size: 0x3c]
	VehicleData VehicleData;//[Offset: 0x74, Size: 0x10]
	MiniMapAirlineData CurAirlineData;//[Offset: 0x84, Size: 0x30]
	Vector AirlineActorLoc;//[Offset: 0xb4, Size: 0xc]
	int CurrentMapID;//[Offset: 0xc0, Size: 0x4]
	FString CurrentMapName;//[Offset: 0xc8, Size: 0x10]
	VisualSoundConfig* BattlePromptConfig;//[Offset: 0x148, Size: 0x8]
	GameModeGlobalSetting* GameModeGlobalSetting;//[Offset: 0x150, Size: 0x8]
	BattlePromptData BattlePromptData;//[Offset: 0x158, Size: 0x18]
	Vector2D WorldLocationToMiniMap(Vector WorldLocation);// 0x54da078ea041
	float WorldLengthToMiniMap(float WorldLength);// 0x54d9078ea041
	void UnInitMapData();// 0x54d8078ea041
	void ReceiveInitMapData(int MapId);// 0x54d7078ea041
	void OnLeaveParachuting();// 0x54d6078ea041
	void OnEnterParachuting();// 0x54d5078ea041
	Vector2D Normal2D(Vector2D VectorToTransForm);// 0x54d4078ea041
	Vector MiniMapToWorldLocation(Vector2D PositionXY, float Z);// 0x54d3078ea041
	bool IsOutOfBound(Vector2D PlayerNavPos);// 0x54d2078ea041
	bool IsMiniMapAirlineDataValid(out const MiniMapAirlineData InData);// 0x54d1078ea041
	void InitMapData(int MapId);// 0x54d0078ea041
	SolarCharacter* GetViewportFocusedCharacter();// 0x54cf078ea041
	bool GetSafeAreaInfo(out SafeAreaMapInfo OutAreaInfo);// 0x54ce078ea041
	Vector GetRandomVectorFromMapDarkData(Object* WorldContextObject, enum InType, bool GetWhiteArea);// 0x54cd078ea041
	CurveFloat* GetMiniMapFOVCurve(float InRadius);// 0x54cc078ea041
	int GetLenegthFromPlayerToMarkPoint(Vector MarkPosRealWorld, Vector CurrentPlayerLocation);// 0x54cb078ea041
	bool GetIntersectionOnMapFrame(Vector2D TeamMatePos, Vector2D MapAPos, float MapFrameHeight, float MapFrameWidth, out Vector2D InterSecionList, out enum CrossDirection);// 0x54ca078ea041
	float GetDistanceToSafeArea(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x54c9078ea041
	int GetCurrentMapID();// 0x54c8078ea041
	MiniMapAirlineData GetCurAirlineData();// 0x54c7078ea041
	VisualSoundConfig* GetBattlePromptConfig();// 0x54c6078ea041
	Vector2D FixNavPos(Vector2D PlayerNavPos);// 0x54c5078ea041
	bool CheckMapDarkDataWithVector(Vector InVector, enum InType, bool GetWhiteArea);// 0x54c4078ea041
	bool CheckIfMarkedPointValid(out const Vector2D InMarkedPoint);// 0x54c3078ea041
	float CalculatePoisonDistance(out const SafeAreaMapInfo AreaInfo, out const Vector FromLocation);// 0x54c2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MiniMapAirlineData
	enum AirlineType;//[Offset: 0x0, Size: 0x1]
	Vector2D StartPoint;//[Offset: 0x4, Size: 0x8]
	Vector2D EndPoint;//[Offset: 0xc, Size: 0x8]
	Vector2D RealStartPoint;//[Offset: 0x14, Size: 0x8]
	Vector2D RealEndPoint;//[Offset: 0x1c, Size: 0x8]
	Vector2D AirlineDir;//[Offset: 0x24, Size: 0x8]
	float AirlineLength;//[Offset: 0x2c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MapData
	Vector2D MapTopLeftCoord;//[Offset: 0x0, Size: 0x8]
	Vector2D MapRightBottomCoord;//[Offset: 0x8, Size: 0x8]
	Vector2D MapImageSize;//[Offset: 0x10, Size: 0x8]
	int MapImage;//[Offset: 0x18, Size: 0x4]
	float AirlineZ;//[Offset: 0x1c, Size: 0x4]
	float HorizonLineZ;//[Offset: 0x20, Size: 0x4]
	float TopZ;//[Offset: 0x24, Size: 0x4]
	float BottomZ;//[Offset: 0x28, Size: 0x4]
	float AverageZ;//[Offset: 0x2c, Size: 0x4]
	float InitFogZ;//[Offset: 0x30, Size: 0x4]
	float TargetFogZ;//[Offset: 0x34, Size: 0x4]
	float MapFOV;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleData
	float Speed1;//[Offset: 0x0, Size: 0x4]
	float Fov1;//[Offset: 0x4, Size: 0x4]
	float Speed2;//[Offset: 0x8, Size: 0x4]
	float Fov2;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VisualSoundConfig.DataAsset.Object
	byte ElemMaxCount;//[Offset: 0x30, Size: 0x1]
	float VehicleMoveDecidingSpeed;//[Offset: 0x34, Size: 0x4]
	float IgnoredCheckRate;//[Offset: 0x38, Size: 0x4]
	float IgnoredCheckAngle;//[Offset: 0x3c, Size: 0x4]
	float IgnoredCheckDis_PlayerDefault;//[Offset: 0x40, Size: 0x4]
	float IgnoredCheckDis_VehicleDefault;//[Offset: 0x44, Size: 0x4]
	<int,float> IgnoredCheckDis_VehicleMap;//[Offset: 0x48, Size: 0x50]
	VisualSoundTagData SelfParentTagsData;//[Offset: 0x98, Size: 0x40]
	<enum,VisualSoundTagData> SelfTagsMap;//[Offset: 0xd8, Size: 0x50]
	VisualSoundTagData EnemyParentTagsData;//[Offset: 0x128, Size: 0x40]
	<enum,VisualSoundData> EnemyDataMap;//[Offset: 0x168, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VisualSoundTagData
	GameplayTagContainer RequiredTagsAny;//[Offset: 0x0, Size: 0x20]
	GameplayTagContainer BlockedTagsAny;//[Offset: 0x20, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VisualSoundData
	VisualSoundTagData TagsCondition;//[Offset: 0x0, Size: 0x40]
	enum DetectionRule;//[Offset: 0x40, Size: 0x1]
	float DetectionDis;//[Offset: 0x44, Size: 0x4]
	float DetectionZ;//[Offset: 0x48, Size: 0x4]
	float AliveTime;//[Offset: 0x4c, Size: 0x4]
	float CanBreakTime;//[Offset: 0x50, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattlePromptData
	byte MaxLength;//[Offset: 0x0, Size: 0x1]
	BattlePromptElem[] BattlePromptElemArr;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattlePromptElem
	enum RealType;//[Offset: 0x8, Size: 0x1]
	Vector CacheLoc;//[Offset: 0xc, Size: 0xc]
	float Distance;//[Offset: 0x18, Size: 0x4]
	float StartTime;//[Offset: 0x1c, Size: 0x4]
	float DestroyTime;//[Offset: 0x20, Size: 0x4]
	float ReplaceTime;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SafeAreaMapInfo
	Vector CurrentLocation;//[Offset: 0x0, Size: 0xc]
	float CurrentRadius;//[Offset: 0xc, Size: 0x4]
	Vector NextLocation;//[Offset: 0x10, Size: 0xc]
	float NextRadius;//[Offset: 0x1c, Size: 0x4]
	float BeginShrinkTime;//[Offset: 0x20, Size: 0x4]
	float TargetShrinkTime;//[Offset: 0x24, Size: 0x4]
	float CurrentConfigRadius;//[Offset: 0x28, Size: 0x4]
	Vector CurrentAreaBeginLocation;//[Offset: 0x2c, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AirDropTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	bool bPendingDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	float openProgress;//[Offset: 0x604, Size: 0x4]
	SolarCharacter* OpeningCharacter;//[Offset: 0x608, Size: 0x8]
	float OpenTime;//[Offset: 0x610, Size: 0x4]
	float ProtectionTime;//[Offset: 0x614, Size: 0x4]
	float StartDropHeight;//[Offset: 0x628, Size: 0x4]
	Vector TargetLocation;//[Offset: 0x62c, Size: 0xc]
	Rotator TargetRotation;//[Offset: 0x638, Size: 0xc]
	Vector SummonCharLocation;//[Offset: 0x644, Size: 0xc]
	float RecordDropTime;//[Offset: 0x650, Size: 0x4]
	enum MovementState;//[Offset: 0x658, Size: 0x1]
	float InitialHeight;//[Offset: 0x65c, Size: 0x4]
	float DropGravity;//[Offset: 0x660, Size: 0x4]
	float MaxDropSpeed;//[Offset: 0x664, Size: 0x4]
	float DecelerateHeight;//[Offset: 0x668, Size: 0x4]
	float ApplyDamageHeight;//[Offset: 0x66c, Size: 0x4]
	float DecelerateTime;//[Offset: 0x670, Size: 0x4]
	CurveFloat* DecelerateCurve;//[Offset: 0x678, Size: 0x8]
	float SqueezePawnRadius;//[Offset: 0x680, Size: 0x4]
	float ThrustPawnStrength;//[Offset: 0x684, Size: 0x4]
	float CollideUpBoundingRatio;//[Offset: 0x688, Size: 0x4]
	float CollidePushUpAngle;//[Offset: 0x68c, Size: 0x4]
	CurveFloat* CollidePushSpeedCurve;//[Offset: 0x690, Size: 0x8]
	float ApplyDamageRate;//[Offset: 0x6d0, Size: 0x4]
	SolarDamageInfo DamageInfo;//[Offset: 0x6d8, Size: 0x40]
	enum OpenState;//[Offset: 0x720, Size: 0x1]
	FString SummonPlayerID;//[Offset: 0x728, Size: 0x10]
	ParticleSystem* OpenAirdropEffect;//[Offset: 0x738, Size: 0x28]
	ParticleSystem* LandHitEffect;//[Offset: 0x760, Size: 0x28]
	ParticleSystem* LandSmokeEffect;//[Offset: 0x788, Size: 0x28]
	ParticleSystem* PendingDestroyEffect;//[Offset: 0x7b0, Size: 0x28]
	ParticleSystem* DestroyEffect;//[Offset: 0x7d8, Size: 0x28]
	ParticleSystem* FallingEffect;//[Offset: 0x800, Size: 0x28]
	ParticleSystem* FallingImpulseEffect;//[Offset: 0x828, Size: 0x28]
	ParticleSystem* LightBeamEffect;//[Offset: 0x850, Size: 0x28]
	Transform FallingEffectOffset;//[Offset: 0x880, Size: 0x30]
	Transform FallingImpulseEffectOffset;//[Offset: 0x8b0, Size: 0x30]
	Transform LightBeamEffectOffset;//[Offset: 0x8e0, Size: 0x30]
	Transform PendingDestroyEffectOffset;//[Offset: 0x910, Size: 0x30]
	AnimationAsset* LandAnimation;//[Offset: 0x940, Size: 0x8]
	AnimationAsset* OpenAnimation;//[Offset: 0x948, Size: 0x8]
	float ShowLandSmokeHeight;//[Offset: 0x950, Size: 0x4]
	float AirDropSpawnDelay;//[Offset: 0x954, Size: 0x4]
	float FallingEffectDelay;//[Offset: 0x958, Size: 0x4]
	bool bSummonBySkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 0x1]
	float YawOffset;//[Offset: 0x960, Size: 0x4]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x968, Size: 0x8]
	ParticleSystemComponent* LandSmokePSC;//[Offset: 0x978, Size: 0x8]
	ParticleSystemComponent* PendingDestroyPSC;//[Offset: 0x980, Size: 0x8]
	ParticleSystemComponent* FallingPSC;//[Offset: 0x988, Size: 0x8]
	ParticleSystemComponent* FallingImpulsePSC;//[Offset: 0x990, Size: 0x8]
	ParticleSystemComponent* LightBeamPSC;//[Offset: 0x998, Size: 0x8]
	SoftClassPath AirDropGuideMeshBPClassPath;//[Offset: 0x9a8, Size: 0x18]
	float GuideArrowDisappearHeight;//[Offset: 0x9c0, Size: 0x4]
	FString SNameAirDropOpen;//[Offset: 0x9c8, Size: 0x10]
	FString SNameLandHit;//[Offset: 0x9d8, Size: 0x10]
	FString SNameAirDropSpawn;//[Offset: 0x9e8, Size: 0x10]
	FString SNameStartDrop;//[Offset: 0x9f8, Size: 0x10]
	FString SNameStopDrop;//[Offset: 0xa08, Size: 0x10]
	FString SNameDecelerateAudio;//[Offset: 0xa18, Size: 0x10]
	FString SNamePlayLandedLoopAudio;//[Offset: 0xa28, Size: 0x10]
	FString SNameStopLandedLoopAudio;//[Offset: 0xa38, Size: 0x10]
	FString SNamePlayOnGroundBroadcastLoopAudio;//[Offset: 0xa48, Size: 0x10]
	FString SNameStopOnGroundBroadcastLoopAudio;//[Offset: 0xa58, Size: 0x10]
	FString SNamePlayStartHackAudio;//[Offset: 0xa68, Size: 0x10]
	FString SNameStopStartHackAudio;//[Offset: 0xa78, Size: 0x10]
	FString SNamePlayHackingLoopAudio;//[Offset: 0xa88, Size: 0x10]
	FString SNameStopHackingLoopAudio;//[Offset: 0xa98, Size: 0x10]
	FString SNameStopHackingLoopAudioAux;//[Offset: 0xaa8, Size: 0x10]
	FString PendingDestroyLoopStart;//[Offset: 0xab8, Size: 0x10]
	FString PendingDestroyLoopEnd;//[Offset: 0xac8, Size: 0x10]
	FString SNameDestroySound;//[Offset: 0xad8, Size: 0x10]
	FName ColorKeyTag1;//[Offset: 0xb50, Size: 0x8]
	FName ColorKeyTag2;//[Offset: 0xb58, Size: 0x8]
	FName ColorKeyGlow;//[Offset: 0xb60, Size: 0x8]
	FName ColorKeyMesh;//[Offset: 0xb68, Size: 0x8]
	FName AlphaKey;//[Offset: 0xb70, Size: 0x8]
	FName LightBeamAlphaKey;//[Offset: 0xb78, Size: 0x8]
	FName ColorKeyTagFlow1;//[Offset: 0xb80, Size: 0x8]
	FName ColorKeyTagFlow2;//[Offset: 0xb88, Size: 0x8]
	FName ColorKeyLightEffect;//[Offset: 0xb90, Size: 0x8]
	float FadeTweenDuration;//[Offset: 0xb98, Size: 0x4]
	float RedTweenDuration;//[Offset: 0xb9c, Size: 0x4]
	LinearColor BlueColorTag1;//[Offset: 0xba0, Size: 0x10]
	LinearColor RedColorTag1;//[Offset: 0xbb0, Size: 0x10]
	LinearColor BlueColorTag2;//[Offset: 0xbc0, Size: 0x10]
	LinearColor RedColorTag2;//[Offset: 0xbd0, Size: 0x10]
	LinearColor BlueColorGlow;//[Offset: 0xbe0, Size: 0x10]
	LinearColor RedColorGlow;//[Offset: 0xbf0, Size: 0x10]
	LinearColor BlueColorMesh;//[Offset: 0xc00, Size: 0x10]
	LinearColor RedColorMesh;//[Offset: 0xc10, Size: 0x10]
	LinearColor RedColorTagFlow1;//[Offset: 0xc20, Size: 0x10]
	LinearColor RedColorTagFlow2;//[Offset: 0xc30, Size: 0x10]
	LinearColor BlueColorTagFlow1;//[Offset: 0xc40, Size: 0x10]
	LinearColor BlueColorTagFlow2;//[Offset: 0xc50, Size: 0x10]
	LinearColor RedColorLightEffect;//[Offset: 0xc60, Size: 0x10]
	LinearColor BlueColorLightEffect;//[Offset: 0xc70, Size: 0x10]
	void ReceiveOnOpenStateChanged(enum InPrevOpenState, enum InCurrOpenState);// 0x44af078ea041
	void PlayLandingAnimation();// 0x44ae078ea041
	bool OpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x44ad078ea041
	void OnStateChanged();// 0x44ac078ea041
	void OnRep_TargetLocation(Vector PreTargetLocation);// 0x44ab078ea041
	void OnRep_SummonPlayerID();// 0x44aa078ea041
	void OnRep_SummonCharLocation();// 0x44a9078ea041
	void OnRep_StartDropHeight();// 0x44a8078ea041
	void OnRep_RecordDropTime(float PreDropTime);// 0x44a7078ea041
	void OnRep_PendingDestroy();// 0x44a6078ea041
	void OnRep_OpenState(enum PreOpenState);// 0x44a5078ea041
	void OnRep_OpenProgressChange();// 0x44a4078ea041
	void OnRep_OpenCharacterChange();// 0x44a3078ea041
	void OnRep_MovementState(enum PreMovementState);// 0x44a2078ea041
	void OnMovementStateChanged(enum InPrevMovementState, enum InCurrMovementState);// 0x44a1078ea041
	void OnFadeOutFallingEffect();// 0x44a0078ea041
	bool IsSummonedByCharacter();// 0x449f078ea041
	bool IsOpenningCharacterOffline();// 0x449e078ea041
	bool IsCharacterInRange(SolarCharacter* InCheckCharacter);// 0x449d078ea041
	bool CancelOpenAirDropTreasureBox(SolarCharacter* _OpeningCharacter);// 0x449c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	float CharacterPickupRange;//[Offset: 0x600, Size: 0x4]
	float CurrEnergyValue;//[Offset: 0x604, Size: 0x4]
	float CurrExtraEnergyValue;//[Offset: 0x608, Size: 0x4]
	FString PlayerId;//[Offset: 0x610, Size: 0x10]
	FString NickName;//[Offset: 0x620, Size: 0x10]
	bool IsPickuped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 0x1]
	SolarPlayerWeapon*[] WeaponList;//[Offset: 0x638, Size: 0x10]
	BoxChargingInfo[] ChargingChars;//[Offset: 0x648, Size: 0x10]
	float PickupRadius;//[Offset: 0x658, Size: 0x4]
	float ResurrectDistance;//[Offset: 0x65c, Size: 0x4]
	byte CurrResurrectionState;//[Offset: 0x660, Size: 0x1]
	float ReviveTotalTime;//[Offset: 0x664, Size: 0x4]
	float ReviveStartTime;//[Offset: 0x668, Size: 0x4]
	SkeletalMeshComponent* PreViewMesh;//[Offset: 0x670, Size: 0x8]
	FName ReviveStartSound;//[Offset: 0x678, Size: 0x8]
	FName ReviveBeforeCompleteSound;//[Offset: 0x680, Size: 0x8]
	FName ReviveCompleteSound;//[Offset: 0x688, Size: 0x8]
	FName ReviveFailedSound;//[Offset: 0x690, Size: 0x8]
	float ResurrectionBeforeSoundTime;//[Offset: 0x698, Size: 0x4]
	ParticleSystem* ReviveCompletePS;//[Offset: 0x6a0, Size: 0x8]
	FName ReviveCompletePSAttachedSocket;//[Offset: 0x6a8, Size: 0x8]
	float PreviewMeshZOffset;//[Offset: 0x6b0, Size: 0x4]
	float PreviewMeshZRotation;//[Offset: 0x6b4, Size: 0x4]
	SceneComponent* FXPosComponent;//[Offset: 0x6c8, Size: 0x8]
	ParticleSystem*[] QualityPS;//[Offset: 0x6d0, Size: 0x10]
	class ActorEffect* RevivePreviewEffectClass;//[Offset: 0x6f0, Size: 0x8]
	<enum,SoftObjectPath> PreviewAnim;//[Offset: 0x700, Size: 0x50]
	float SphereRadius;//[Offset: 0x750, Size: 0x4]
	float UnpickableSphereRadius;//[Offset: 0x754, Size: 0x4]
	void ReceiveSetUIEnable(bool IsShow);// 0x4741078ea041
	void ReceiveRemoveEffect(const SolarCharacter* SolarChar);// 0x4740078ea041
	void ReceiveRefreshExtraEnergy(FString Message);// 0x473f078ea041
	void ReceiveAddEffect(const SolarCharacter* SolarChar);// 0x473e078ea041
	void OnUntrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x473d078ea041
	void OnTrigger(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x473c078ea041
	void OnRep_ReviveStartTime();// 0x473b078ea041
	void OnRep_PickupedChanged();// 0x473a078ea041
	void OnRep_CurrExtraEnergyValueChanged();// 0x4739078ea041
	void OnRep_BResurrectionStateChanged();// 0x4738078ea041
	void OnRefreshPickupStatusEffect(bool IsShow);// 0x4737078ea041
	bool IsInResurrectRange(SolarCharacter* InReqCharacter, out float RealDistance);// 0x4736078ea041
	bool CanBuyResurrect(const SolarCharacter* InReqCharacter);// 0x4735078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoxChargingInfo
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInteractableManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	int ZoneNum;//[Offset: 0x40, Size: 0x4]
	int TotalNum;//[Offset: 0x44, Size: 0x4]
	RadarStationCollection[] CurrRadarStations;//[Offset: 0x48, Size: 0x10]
	SolarElectricShop*[] CurrElectricShops;//[Offset: 0x58, Size: 0x10]
	SolarShieldUpgradeItemShop*[] ActiveShieldUpgradeItemShopList;//[Offset: 0x68, Size: 0x10]
	FString SceneObjectLevelName;//[Offset: 0x78, Size: 0x10]
	SolarGlobalRepInfo* GlobalMapRepInfo;//[Offset: 0x88, Size: 0x8]
	void OnSceneObjectsLoadComplete(FString LevelName);// 0x5355078ea041
	void OnClientShowShieldUpgradeItemShops();// 0x5354078ea041
	int GetShieldUpgradeItemShopGroupID();// 0x5353078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RadarStationCollection
	int Zone;//[Offset: 0x0, Size: 0x4]
	SolarRadarStation*[] AllRadarStations;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarRadarStation.SolarInteractableActor.Actor.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235, Size: 0x1]
	int Zone;//[Offset: 0x238, Size: 0x4]
	float MaxTirggerDistance;//[Offset: 0x23c, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x240, Size: 0x4]
	GameplayTag CDTag;//[Offset: 0x244, Size: 0x8]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 0x1]
	bool bInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 0x1]
	float CoolDownTime;//[Offset: 0x250, Size: 0x4]
	float CostEnergy;//[Offset: 0x254, Size: 0x4]
	float RemainCDTime;//[Offset: 0x258, Size: 0x4]
	SphereComponent* CollisionComp;//[Offset: 0x260, Size: 0x8]
	StaticMeshComponent* NormalMesh;//[Offset: 0x268, Size: 0x8]
	SolarObjAbilitySystemComponent* ObjAbilitySystemComp;//[Offset: 0x270, Size: 0x8]
	class SolarObjGameplayAbility* ObjAbilityClass;//[Offset: 0x278, Size: 0x8]
	GameplayAbilitySpecHandle ObjAbilityHandle;//[Offset: 0x280, Size: 0x4]
	bool TryTriggerRadarStation(SolarCharacter* InUser);// 0x5719078ea041
	void ServerInitailizeAbility();// 0x5718078ea041
	void OnResetCD();// 0x5717078ea041
	void OnRep_Broken();// 0x5716078ea041
	void OnRep_BInCD();// 0x5715078ea041
	void OnRadarStationCDChanged();// 0x5714078ea041
	void OnPlayStartScanEffect();// 0x5713078ea041
	void OnGameplayTagChanged(GameplayTag Tag, bool bAdd);// 0x5712078ea041
	void OnClientStartScan();// 0x5711078ea041
	void OnBrokenChanged(bool InBroken);// 0x5710078ea041
	void InitailizeAbilityParams();// 0x570f078ea041
	float GetAbilityReaminingCD();// 0x570e078ea041
	float GetAbilityCostEnergy();// 0x570d078ea041
	float GetAbilityCooldown();// 0x570c078ea041
	bool CanActivateNow();// 0x570b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarObjAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
	GameplayTagContainer NotifyTags;//[Offset: 0x1308, Size: 0x20]
	GameplayTagContainer RepNotifiedTags;//[Offset: 0x1328, Size: 0x20]
	void OnRep_RepNotifiedTags(out const GameplayTagContainer Previous);// 0x5519078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarObjGameplayAbility.GameplayAbility.Object
	class GameplayEffect* ActivateEffect;//[Offset: 0x400, Size: 0x8]
	float CostEnergy;//[Offset: 0x408, Size: 0x4]
	SolarInteractableActor* GetAbilityInstigator();// 0x5517078ea041
	Actor* GetAbilityEffectUser();// 0x5516078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarElectricShop.SolarInteractableActor.Actor.Object
	int MaxWeaponLevel;//[Offset: 0x238, Size: 0x4]
	int MaxShieldLevel;//[Offset: 0x23c, Size: 0x4]
	float[] UpgradeEnergyCosts;//[Offset: 0x240, Size: 0x10]
	StaticMeshComponent* ShopMesh;//[Offset: 0x250, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x258, Size: 0x8]
	int SpawnID;//[Offset: 0x260, Size: 0x4]
	bool bSpecificShopID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 0x1]
	DataTable* ShopMeshPathTable;//[Offset: 0x268, Size: 0x28]
	bool bIfShowInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	class MapMarkBase* MapIcon;//[Offset: 0x298, Size: 0x28]
	int MapIconID;//[Offset: 0x2c0, Size: 0x4]
	float MaxTirggerAngle;//[Offset: 0x2c4, Size: 0x4]
	int ShopID;//[Offset: 0x2c8, Size: 0x4]
	bool bIsBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	float TirggerDistance;//[Offset: 0x2d0, Size: 0x4]
	enum CurrentModeAnimType;//[Offset: 0x2d4, Size: 0x1]
	enum WantedModeAnimType;//[Offset: 0x2d5, Size: 0x1]
	SolarCharacter*[] InstigateCharacters;//[Offset: 0x2d8, Size: 0x10]
	DataTable* ShopMeshDataTable;//[Offset: 0x2e8, Size: 0x8]
	ElectricShopSection[] ItemSections;//[Offset: 0x2f0, Size: 0x10]
	ElectricShopCDRecord[] ItemCDRecords;//[Offset: 0x300, Size: 0x10]
	float[] PoolRefreshTimeList;//[Offset: 0x310, Size: 0x10]
	PoolRefreshInfo[] PoolRefreshInfoList;//[Offset: 0x320, Size: 0x10]
	int CurPoolGroupID;//[Offset: 0x330, Size: 0x4]
	MapMarkBase*[] MapMarkArray;//[Offset: 0x348, Size: 0x10]
	TimerHandle[] CachedHandles;//[Offset: 0x358, Size: 0x10]
	float DemoRotationSpeed;//[Offset: 0x368, Size: 0x4]
	float DemoSwtichTime;//[Offset: 0x36c, Size: 0x4]
	float DemoOffsetFromZ;//[Offset: 0x370, Size: 0x4]
	DataTable* ItemDemoBPTable;//[Offset: 0x378, Size: 0x28]
	DataTable* ItemDemoBPDataTable;//[Offset: 0x3a0, Size: 0x8]
	<SoftObjectPath,ElectricShopItemDemo*> DemoActorMap;//[Offset: 0x3a8, Size: 0x50]
	ElectricShopItemDemo* CurDemo;//[Offset: 0x3f8, Size: 0x8]
	TimerHandle DemoLoopPlaybackHandle;//[Offset: 0x400, Size: 0x8]
	ElectricShopItemDemo*[] SpawnedDemoActorList;//[Offset: 0x408, Size: 0x10]
	Object*[] CachedDemoItemsClass;//[Offset: 0x440, Size: 0x10]
	void UpgradeWeaponResponse(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x514a078ea041
	void UpgradeShieldResponse(SolarCharacter* InCharacter);// 0x5149078ea041
	bool ServerUpgradeWeapon(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x5148078ea041
	bool ServerUpgradeShield(SolarCharacter* InCharacter);// 0x5147078ea041
	void ServerStatisticElectricShop(const SolarCharacter* ActivateCharacter, enum StatisticType, const int InValueA, const int InValueB);// 0x5146078ea041
	bool ServerPurchaseEShopItems(const int InProductID, const bool bIsRecommend, SolarCharacter* InCharacter);// 0x5145078ea041
	bool RemoveInstigator(SolarCharacter* InCharacter);// 0x5144078ea041
	bool RefreshSellingItem(const int InProductID);// 0x5143078ea041
	void RefreshItemCDRecords(out const ElectricShopItem InItem, FString InPlayerID);// 0x5142078ea041
	void PurchaseEShopItemsResponse(const int InProductID, const bool bSuccess, SolarCharacter* InCharacter);// 0x5141078ea041
	void OnShopIDReplicatedBP();// 0x5140078ea041
	void OnRep_ShopID();// 0x513f078ea041
	void OnRep_ItemSections();// 0x513e078ea041
	void OnRep_ItemCDRecords();// 0x513d078ea041
	void OnRep_CurPoolGroupID(int PrePoolGroupID);// 0x513c078ea041
	void OnPlayWeaponUpgradeAnim();// 0x513b078ea041
	void OnPlayPurchaseAnim();// 0x513a078ea041
	void OnPlayIdleAnim();// 0x5139078ea041
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x5138078ea041
	void OnCurrentAnimFinish();// 0x5137078ea041
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5136078ea041
	bool IsProductRecommendEquipType(const enum ProductType);// 0x5135078ea041
	bool IsInteractable(SolarCharacter* InCharacter);// 0x5134078ea041
	void InitWeaponUpgradeEnergyCost();// 0x5133078ea041
	void InitializeElectricShop();// 0x5132078ea041
	float GetServerWorldTime();// 0x5131078ea041
	float GetRemainingCD(const int ProductID);// 0x5130078ea041
	float GetDiscountedPrice(SolarCharacter* BuyerCharacter, float Price);// 0x512f078ea041
	void GetDiscountedItem(SolarCharacter* BuyerCharacter, out ElectricShopItem OutItem);// 0x512e078ea041
	bool GetCurrentItem(const int InProductID, out ElectricShopItem OutItem);// 0x512d078ea041
	FString GetBuyerID(const int ProductID);// 0x512c078ea041
	ElectricShopItem GenerateNewItem(const int InProductID);// 0x512b078ea041
	void ClientUpgradeWeaponSuccess();// 0x512a078ea041
	void ClientUpgradeShieldSuccess();// 0x5129078ea041
	void ClientUpdateModelAnim();// 0x5128078ea041
	void ClientPurchaseSuccess();// 0x5127078ea041
	void ClientHUDUpgradeWeaponSuccess(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x5126078ea041
	void ClientHUDUpgradeShieldSuccess(SolarCharacter* InCharacter);// 0x5125078ea041
	void ClientHUDPurchaseSuccess(const int InProductID, SolarCharacter* InCharacter);// 0x5124078ea041
	void ClientHUDPoolRefresh(SolarCharacter* InCharacter);// 0x5123078ea041
	void ClientHUDItemRefresh(SolarCharacter* InCharacter);// 0x5122078ea041
	void ClientHUDCDRefresh(SolarCharacter* InCharacter);// 0x5121078ea041
	void AddInstigator(SolarCharacter* InCharacter);// 0x5120078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	MiniMapBase* MapOwner;//[Offset: 0x400, Size: 0x8]
	Vector2D MarkIconRealLoc;//[Offset: 0x408, Size: 0x8]
	Vector2D MarkIconAlignment;//[Offset: 0x410, Size: 0x8]
	bool IsOnBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 0x1]
	enum MarkerType;//[Offset: 0x419, Size: 0x1]
	bool IsMapObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41a, Size: 0x1]
	bool MoveAble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41b, Size: 0x1]
	bool SupportEdge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	bool SupportEdgeWithBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d, Size: 0x1]
	Actor* TargetActorRef;//[Offset: 0x420, Size: 0x8]
	void UpdateIconWithActor(Actor* InTargetActor);// 0x49ce078ea041
	void SetUpdateState(bool ShouldUpdateLocation);// 0x49cd078ea041
	void SetMarkPos(out const Vector Loc);// 0x49cc078ea041
	void SetEdgeSupport(bool IsSupportEdge, bool WithBigMap);// 0x49cb078ea041
	void SetColorOpacityIndex(byte InColorOpacityIndex);// 0x49ca078ea041
	void OnReceivedMarkInit();// 0x49c9078ea041
	void OnBigMapOpen();// 0x49c8078ea041
	void InitVehicleMarkIcon(int VehicleID, int InputIndex, int SpawnerIndex);// 0x49c7078ea041
	void InitStaticIcon(int MarkID);// 0x49c6078ea041
	void InitMarkIcon(int MarkID, Actor* InTargetActor, bool InMoveable);// 0x49c5078ea041
	void EdgeFix(Vector2D Pos);// 0x49c4078ea041
	void CleanData();// 0x49c3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MiniMapBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MaxPool;//[Offset: 0x400, Size: 0x4]
	<FString,MapMarkElemArray> MapMarkPool;//[Offset: 0x408, Size: 0x50]
	void RemoveMarkIcon(MapMarkBase* InMapMark);// 0x49eb078ea041
	void RemoveDotLineOnMap(int DotLineID);// 0x49ea078ea041
	void RemoveAllMapMarks();// 0x49e9078ea041
	bool RecycleMapMark(FString MapMarkName, MapMarkBase* MapMarkToRecycle);// 0x49e8078ea041
	void MapScaleFormat(MapMarkBase* MapMark);// 0x49e7078ea041
	MapMarkBase* InitMarkIconOnMapFrame(class MapMarkBase InMapMarkClass, out const Vector2D Pivot, int ZOrder);// 0x49e6078ea041
	MapMarkBase* InitMarkIcon(class MapMarkBase InMapMarkClass, out const Vector2D InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int ZOrder);// 0x49e5078ea041
	void InitMapMarkPool();// 0x49e4078ea041
	MapMarkBase* GetFreeMapMark(FString MapMarkName);// 0x49e3078ea041
	MapMarkBase* CreateMapMark(FString MapMarkName);// 0x49e2078ea041
	int AddDotLineOnMap(Actor* StartPointActor, Actor* EndPointActor, LinearColor DotLineColor);// 0x49e1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MapMarkElemArray
	MapMarkElem[] MapMarkElems;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MapMarkElem
	MapMarkBase* MapMark;//[Offset: 0x0, Size: 0x8]
	bool bUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ElectricShopSection
	ElectricShopItem[] Items;//[Offset: 0x0, Size: 0x10]
	float CoolDownDuration;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ElectricShopItem
	int ItemID;//[Offset: 0x0, Size: 0x4]
	float Prize;//[Offset: 0x4, Size: 0x4]
	int Num;//[Offset: 0x8, Size: 0x4]
	int ProductID;//[Offset: 0xc, Size: 0x4]
	float CoolDown;//[Offset: 0x10, Size: 0x4]
	int Generation;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ElectricShopCDRecord
	int ProductID;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	float EndWorldTime;//[Offset: 0x8, Size: 0x4]
	FString BuyerID;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PoolRefreshInfo
	int PoolGroupID;//[Offset: 0x0, Size: 0x4]
	float PoolRefreshTime;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ElectricShopItemDemo.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarShieldUpgradeItemShop.SolarInteractableActor.Actor.Object
	int groupid;//[Offset: 0x238, Size: 0x4]
	int ServerActiveGroupID;//[Offset: 0x23c, Size: 0x4]
	int UpgradeAnimStartFrame;//[Offset: 0x248, Size: 0x4]
	int UpgradeAnimEndFrame;//[Offset: 0x24c, Size: 0x4]
	float UpgradeAnimDuration;//[Offset: 0x250, Size: 0x4]
	int MatPrimitiveDataIndex;//[Offset: 0x254, Size: 0x4]
	StaticMeshComponent* BodyMesh;//[Offset: 0x258, Size: 0x8]
	SphereComponent* CollisionComp;//[Offset: 0x260, Size: 0x8]
	StaticMeshComponent* HeadUpIconMesh;//[Offset: 0x268, Size: 0x8]
	StaticMeshComponent* BodyScreenMesh;//[Offset: 0x270, Size: 0x8]
	int UpgradeItemNum;//[Offset: 0x290, Size: 0x4]
	ParticleSystem* InteractionTriggeredEffect;//[Offset: 0x298, Size: 0x28]
	SolarIntArray InteractedPlayerIDList;//[Offset: 0x2c0, Size: 0x130]
	int Uid;//[Offset: 0x3f0, Size: 0x4]
	SphereComponent* AudioTriggerComp;//[Offset: 0x410, Size: 0x8]
	FString SNameHint;//[Offset: 0x418, Size: 0x10]
	FString SNameStopHint;//[Offset: 0x428, Size: 0x10]
	void OnRep_UID();// 0x5787078ea041
	void OnRep_InteractedPlayerIDList();// 0x5786078ea041
	void OnRep_ActiveGroupID();// 0x5785078ea041
	void OnOtherPlayerInteracted();// 0x5784078ea041
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* InSpectateInfo);// 0x5783078ea041
	void OnBindLocalPlayerSpectateTargetChanged(SolarSpectateInfo* SpecInfo);// 0x5782078ea041
	void OnActorEndOverlapAudioSphere(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x5781078ea041
	void OnActorEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x5780078ea041
	void OnActorBeginOverlapAudioSphere(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x577f078ea041
	void OnActorBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x577e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarIntArray.FastArraySerializer
	SolarIntEntry[] Elements;//[Offset: 0x108, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarIntEntry.FastArraySerializerItem
	int IntProperty;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGlobalRepInfo.Info.Actor.Object
	SolarShieldItemShopDataArray ShieldItemShopInteractInfo;//[Offset: 0x228, Size: 0x130]
	int ShieldUpgradeItemShopGroupID;//[Offset: 0x358, Size: 0x4]
	void OnRep_ShieldUpgradeItemShopGroupID();// 0x5255078ea041
	void OnRep_ShieldItemShopInteractInfo();// 0x5254078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarShieldItemShopDataArray.FastArraySerializer
	SolarShieldItemShopDataEntry[] Elements;//[Offset: 0x108, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarShieldItemShopDataEntry.FastArraySerializerItem
	Vector_NetQuantize Pos;//[Offset: 0xc, Size: 0xc]
	int Uid;//[Offset: 0x18, Size: 0x4]
	byte InteractState;//[Offset: 0x1c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlatformHelper.Object
	SolarPlatformStats* SolarPlatformStats;//[Offset: 0x30, Size: 0x8]
	SolarGameInstanceBase* SolarGameInstanceBase;//[Offset: 0x38, Size: 0x8]
	bool UseRenderThread();// 0x55b7078ea041
	bool SupportsMultithreading();// 0x55b6078ea041
	double Seconds();// 0x55b5078ea041
	void ReceiveShutdown();// 0x55b4078ea041
	void ReceiveInit();// 0x55b3078ea041
	bool IsThisApplicationForeground();// 0x55b2078ea041
	bool IsRunningOnBattery();// 0x55b1078ea041
	bool Is64bitOperatingSystem();// 0x55b0078ea041
	int64 GetVideoMemory();// 0x55af078ea041
	FString GetUniqueDeviceId();// 0x55ae078ea041
	FString GetTimeZoneId();// 0x55ad078ea041
	FString GetSuitableStringWithUnitOfBytes(uint64 NumberOfBytes, FString ExtraUnit);// 0x55ac078ea041
	SolarPlatformStats* GetSolarPlatformStats();// 0x55ab078ea041
	int GetSimultaneousInstanceId();// 0x55aa078ea041
	FString GetPrimaryGPUBrand();// 0x55a9078ea041
	FString GetPathVarDelimiter();// 0x55a8078ea041
	void GetOSVersions(out FString out_OSVersionLabel, out FString out_OSSubVersionLabel);// 0x55a7078ea041
	FString GetOSVersion();// 0x55a6078ea041
	uint32 GetMoniterWidth();// 0x55a5078ea041
	int GetMoniterRefreshRate();// 0x55a4078ea041
	uint32 GetMoniterHeight();// 0x55a3078ea041
	int GetMaxPathLength();// 0x55a2078ea041
	GameUserSettings* GetGameUserSettings();// 0x55a1078ea041
	FString GetEnvironmentVariable(FString VariableName);// 0x55a0078ea041
	Engine* GetEngine();// 0x559f078ea041
	bool GetDiskTotalAndFreeSpace(FString InPath, out uint64 TotalNumberOfBytes, out uint64 NumberOfFreeBytes);// 0x559e078ea041
	float GetDeviceTemperatureLevel();// 0x559d078ea041
	FString GetDeviceMakeAndModel();// 0x559c078ea041
	FString GetDefaultDeviceProfileName();// 0x559b078ea041
	FString GetCPUVendor();// 0x559a078ea041
	uint32 GetCPUInfo();// 0x5599078ea041
	FString GetCPUChipset();// 0x5598078ea041
	FString GetCPUBrand();// 0x5597078ea041
	int GetBatteryLevel();// 0x5596078ea041
	FString ClipboardPaste();// 0x5595078ea041
	void ClipboardCopy(FString str);// 0x5594078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlatformStats.Object
	uint64 MaxUsedPhysical;//[Offset: 0x30, Size: 0x8]
	void ReceiveWorldCleanup(World* World, bool bSessionEnded, bool bCleanupResources);// 0x55c1078ea041
	void ReceiveShutdown();// 0x55c0078ea041
	void ReceivePostWorldInitialization(World* World);// 0x55bf078ea041
	void ReceiveInit();// 0x55be078ea041
	uint64 GetRHIUsedMemory();// 0x55bd078ea041
	float GetRenderThreadTime();// 0x55bc078ea041
	int GetNumDrawCalls();// 0x55bb078ea041
	int GetMinFPS();// 0x55ba078ea041
	float GetGameThreadTime();// 0x55b9078ea041
	int GetAverageFPS();// 0x55b8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 0x4]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 0x4]
	int WindowPosX;//[Offset: 0x90, Size: 0x4]
	int WindowPosY;//[Offset: 0x94, Size: 0x4]
	int FullscreenMode;//[Offset: 0x98, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 0x4]
	uint32 Version;//[Offset: 0xa4, Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xb0, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x110, Size: 0x10]
	void ValidateSettings();// 0x6821078ea041
	bool SupportsHDRDisplayOutput();// 0x6820078ea041
	void SetVSyncEnabled(bool bEnable);// 0x681f078ea041
	void SetVisualEffectQuality(int Value);// 0x681e078ea041
	void SetViewDistanceQuality(int Value);// 0x681d078ea041
	void SetToDefaults();// 0x681c078ea041
	void SetTextureQuality(int Value);// 0x681b078ea041
	void SetShadowQuality(int Value);// 0x681a078ea041
	void SetShadingQuality(int Value);// 0x6819078ea041
	void SetScreenResolution(IntPoint Resolution);// 0x6818078ea041
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x6817078ea041
	void SetResolutionScaleValue(int NewScaleValue);// 0x6816078ea041
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x6815078ea041
	void SetPostProcessingQuality(int Value);// 0x6814078ea041
	void SetOverallScalabilityLevel(int Value);// 0x6813078ea041
	void SetFullscreenMode(byte InFullscreenMode);// 0x6812078ea041
	void SetFrameRateLimit(float NewLimit);// 0x6811078ea041
	void SetFoliageQuality(int Value);// 0x6810078ea041
	void SetDynamicResolutionEnabled(bool bEnable);// 0x680f078ea041
	void SetBenchmarkFallbackValues();// 0x680e078ea041
	void SetAudioQualityLevel(int QualityLevel);// 0x680d078ea041
	void SetAntiAliasingQuality(int Value);// 0x680c078ea041
	void SaveSettings();// 0x680b078ea041
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x680a078ea041
	void RevertVideoMode();// 0x6809078ea041
	void ResetToCurrentSettings();// 0x6808078ea041
	void LoadSettings(bool bForceReload);// 0x6807078ea041
	bool IsVSyncEnabled();// 0x6806078ea041
	bool IsVSyncDirty();// 0x6805078ea041
	bool IsScreenResolutionDirty();// 0x6804078ea041
	bool IsHDREnabled();// 0x6803078ea041
	bool IsFullscreenModeDirty();// 0x6802078ea041
	bool IsDynamicResolutionEnabled();// 0x6801078ea041
	bool IsDynamicResolutionDirty();// 0x6800078ea041
	bool IsDirty();// 0x67ff078ea041
	int GetVisualEffectQuality();// 0x67fe078ea041
	int GetViewDistanceQuality();// 0x67fd078ea041
	int GetTextureQuality();// 0x67fc078ea041
	int GetSyncInterval();// 0x67fb078ea041
	int GetShadowQuality();// 0x67fa078ea041
	int GetShadingQuality();// 0x67f9078ea041
	IntPoint GetScreenResolution();// 0x67f8078ea041
	float GetResolutionScaleNormalized();// 0x67f7078ea041
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x67f6078ea041
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x67f5078ea041
	float GetRecommendedResolutionScale();// 0x67f4078ea041
	byte GetPreferredFullscreenMode();// 0x67f3078ea041
	int GetPostProcessingQuality();// 0x67f2078ea041
	int GetOverallScalabilityLevel();// 0x67f1078ea041
	IntPoint GetLastConfirmedScreenResolution();// 0x67f0078ea041
	byte GetLastConfirmedFullscreenMode();// 0x67ef078ea041
	GameUserSettings* GetGameUserSettings();// 0x67ee078ea041
	byte GetFullscreenMode();// 0x67ed078ea041
	float GetFrameRateLimit();// 0x67ec078ea041
	int GetFramePace();// 0x67eb078ea041
	int GetFoliageQuality();// 0x67ea078ea041
	IntPoint GetDesktopResolution();// 0x67e9078ea041
	IntPoint GetDefaultWindowPosition();// 0x67e8078ea041
	byte GetDefaultWindowMode();// 0x67e7078ea041
	float GetDefaultResolutionScale();// 0x67e6078ea041
	IntPoint GetDefaultResolution();// 0x67e5078ea041
	int GetCurrentHDRDisplayNits();// 0x67e4078ea041
	int GetAudioQualityLevel();// 0x67e3078ea041
	int GetAntiAliasingQuality();// 0x67e2078ea041
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x67e1078ea041
	void ConfirmVideoMode();// 0x67e0078ea041
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x67df078ea041
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x67de078ea041
	void ApplyNonResolutionSettings();// 0x67dd078ea041
	void ApplyHardwareBenchmarkResults();// 0x67dc078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18]
	Font* SmallFont;//[Offset: 0x50, Size: 0x8]
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18]
	Font* MediumFont;//[Offset: 0x70, Size: 0x8]
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18]
	Font* LargeFont;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10]
	FString[] AdditionalFontNames;//[Offset: 0xe8, Size: 0x10]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 0x8]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 0x8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 0x18]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 0x8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 0x8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 0x18]
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x190, Size: 0x8]
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x198, Size: 0x18]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1b0, Size: 0x8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 0x8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 0x8]
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 0x18]
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 0x8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 0x8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x288, Size: 0x8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 0x8]
	SoftClassPath RuntimeAssetsCollectionClassName;//[Offset: 0x2b0, Size: 0x18]
	RuntimeAssetsCollectionBase* RuntimeAssetsCollection;//[Offset: 0x2c8, Size: 0x8]
	Texture2D* DefaultTexture;//[Offset: 0x2d0, Size: 0x8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2d8, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2f0, Size: 0x8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2f8, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x310, Size: 0x8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x318, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x330, Size: 0x8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x338, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x350, Size: 0x8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x358, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x370, Size: 0x8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x378, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x390, Size: 0x8]
	FString WireframeMaterialName;//[Offset: 0x398, Size: 0x10]
	Material* DebugMeshMaterial;//[Offset: 0x3a8, Size: 0x8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x3b0, Size: 0x18]
	Material* EmissiveMeshMaterial;//[Offset: 0x3c8, Size: 0x8]
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3d0, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x3e8, Size: 0x8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3f0, Size: 0x10]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x400, Size: 0x8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x408, Size: 0x10]
	Material* LightingTexelDensityMaterial;//[Offset: 0x418, Size: 0x8]
	FString LightingTexelDensityName;//[Offset: 0x420, Size: 0x10]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x430, Size: 0x8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x438, Size: 0x10]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x448, Size: 0x8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x450, Size: 0x10]
	Material* RemoveSurfaceMaterial;//[Offset: 0x460, Size: 0x8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x468, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x480, Size: 0x8]
	FString VertexColorMaterialName;//[Offset: 0x488, Size: 0x10]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x498, Size: 0x8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x4a0, Size: 0x10]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x4b0, Size: 0x8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x4b8, Size: 0x10]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4c8, Size: 0x8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4d0, Size: 0x10]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4e0, Size: 0x8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4e8, Size: 0x10]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4f8, Size: 0x8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x500, Size: 0x10]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x510, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x528, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x530, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x538, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x540, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x548, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x550, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x558, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x560, Size: 0x8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x568, Size: 0x8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x570, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x588, Size: 0x8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x590, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x5a8, Size: 0x8]
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x5b0, Size: 0x8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x5b8, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x5d0, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5e0, Size: 0x10]
	LinearColor[] QuadComplexityColors;//[Offset: 0x5f0, Size: 0x10]
	LinearColor[] LightComplexityColors;//[Offset: 0x600, Size: 0x10]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x610, Size: 0x10]
	LinearColor[] LODColorationColors;//[Offset: 0x620, Size: 0x10]
	LinearColor[] HLODColorationColors;//[Offset: 0x630, Size: 0x10]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x640, Size: 0x10]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x650, Size: 0x4]
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x654, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x658, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x65c, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x660, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x664, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x668, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x66c, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x670, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x680, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x690, Size: 0x10]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x6a0, Size: 0x8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6a8, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6c0, Size: 0x10]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6d0, Size: 0x10]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6e0, Size: 0x10]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x6f0, Size: 0x10]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x700, Size: 0x8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x708, Size: 0x18]
	Texture2D* BlueNoiseTexture;//[Offset: 0x720, Size: 0x8]
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x728, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x740, Size: 0x8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x748, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x760, Size: 0x8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x768, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x780, Size: 0x8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x788, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x7a8, Size: 0x8]
	FString[] DeferredCommands;//[Offset: 0x7b0, Size: 0x10]
	int TickCycles;//[Offset: 0x7c0, Size: 0x4]
	int GameCycles;//[Offset: 0x7c4, Size: 0x4]
	int ClientCycles;//[Offset: 0x7c8, Size: 0x4]
	float NearClipPlane;//[Offset: 0x7cc, Size: 0x4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x7d4, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d8, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d8, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d8, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d8, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d8, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d8, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x7dc, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7e0, Size: 0x10]
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x7f0, Size: 0x8]
	FString SkipLODStripStaticMeshNames;//[Offset: 0x818, Size: 0x10]
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x828, Size: 0x18]
	TimecodeProvider* TimecodeProvider;//[Offset: 0x840, Size: 0x8]
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x868, Size: 0x18]
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x884, Size: 0x8]
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x88c, Size: 0x4]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x894, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x89c, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x8a0, Size: 0x4]
	Color C_AddWire;//[Offset: 0x8a4, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x8a8, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x8ac, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x8b0, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x8b4, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x8b8, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x8bc, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x8c0, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x8c4, Size: 0x4]
	Color C_Volume;//[Offset: 0x8c8, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x8cc, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x8d0, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x8d8, Size: 0x10]
	enum TransitionType;//[Offset: 0x8e8, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x8f0, Size: 0x10]
	FString TransitionGameMode;//[Offset: 0x900, Size: 0x10]
	float MeshLODRange;//[Offset: 0x910, Size: 0x4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x914, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x918, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x91c, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x920, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x924, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x92c, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x930, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x938, Size: 0x10]
	float NetClientTicksPerSecond;//[Offset: 0x948, Size: 0x4]
	float DisplayGamma;//[Offset: 0x94c, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x950, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x954, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x964, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x974, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x984, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x994, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a4, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a5, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a5, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a5, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9a5, Size: 0x1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x9a8, Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x9b0, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b4, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0x9b8, Size: 0x10]
	float SelectionHighlightIntensity;//[Offset: 0x9c8, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x9cc, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9d0, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc20, Size: 0x10]
	FString[] ServerActors;//[Offset: 0xc30, Size: 0x10]
	FString[] RuntimeServerActors;//[Offset: 0xc40, Size: 0x10]
	float NetErrorLogInterval;//[Offset: 0xc50, Size: 0x4]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc54, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0xc68, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RuntimeAssetsCollectionBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10]
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10]
	FString NewPluginName;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EngineCustomTimeStep.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4]
	Timecode GetTimecode();// 0x6cee078ea041
	enum GetSynchronizationState();// 0x6ced078ea041
	QualifiedFrameTime GetQualifiedFrameTime();// 0x6cec078ea041
	FrameRate GetFrameRate();// 0x6ceb078ea041
	Timecode GetDelayedTimecode();// 0x6cea078ea041
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x6ce9078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4]
	int Minutes;//[Offset: 0x4, Size: 0x4]
	int Seconds;//[Offset: 0x8, Size: 0x4]
	int Frames;//[Offset: 0xc, Size: 0x4]
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	FString Comment;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponGrowthManager.Object
	FString GetWeaponBpPath(int ID);// 0x618d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: IMChatObject.Object
	bool GMEIsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool NertcIsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	void UnInitEvents();// 0x4953078ea041
	void SendPlayerPosToIMServerEveryFrame(out const Vector PlayerPosition, out const Rotator PlayerRotator, float DeltaTime);// 0x4952078ea041
	void NotifyBattlePlayerChanged(int NumPlayers, int PreviousNumPlayers);// 0x4951078ea041
	void InitEnvents();// 0x4950078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLuaManager.Object
	delegate OnHandleLuaException;//[Offset: 0x30, Size: 0x10]
	SoftObjectPath LuaErrorWidgetPath;//[Offset: 0x50, Size: 0x18]
	LuaErrorWidgetBase* LuaErrorWidget;//[Offset: 0x70, Size: 0x8]
	void SetLuaErrorPopWidget(LuaErrorWidgetBase* Widget);// 0x54bf078ea041
	void OnLuaContextCleanup(bool bFullCleanup);// 0x54be078ea041
	enum GetBuildConfiguration();// 0x54bd078ea041
	void AddToDoNotShowAgainList(FString Msg);// 0x54bc078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LuaErrorWidgetBase.UserWidget.Widget.Visual.Object
	void ShowLuaError(out const FString[] LuaErrorMsgs);// 0x54bb078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameStatistics.Object
	FString PlayerIdName;//[Offset: 0x30, Size: 0x10]
	FString LogTypeName;//[Offset: 0x40, Size: 0x10]
	SolarGameInstanceBase* Owner;//[Offset: 0x58, Size: 0x8]
	SolarGameStatisticsLogHeadInfo LogHeadInfo;//[Offset: 0x60, Size: 0x28]
	SolarGameStatisticsLogHeadInfo StaticGetLogHeadInfo();// 0x51fe078ea041
	void SetSwapLogFileSize(int InSize);// 0x51fd078ea041
	void SetSwapLogFileInterval(int InInterval);// 0x51fc078ea041
	void SetLogValueSeparater(FString InValueSeparater);// 0x51fb078ea041
	void SetLogTerminator(FString InTerminator);// 0x51fa078ea041
	void SetLogFileNameSuffix(FString InLogFileNameSuffix);// 0x51f9078ea041
	void SetLogFileNamePrefix(FString InLogFileNamePrefix);// 0x51f8078ea041
	void SetLogFileExtension(FString InLogFileExtension);// 0x51f7078ea041
	void SetLogFileDir(FString InLogFileDir);// 0x51f6078ea041
	void SetLogElementSeparater(FString InElementSeparater);// 0x51f5078ea041
	void SetLogCheckIntervalMS(int InLogCheckIntervalMS);// 0x51f4078ea041
	void ReceiveShutdown();// 0x51f3078ea041
	void ReceiveInit();// 0x51f2078ea041
	void NotifyBattleStart(FString InBattleID);// 0x51f1078ea041
	void NotifyBattleEnd();// 0x51f0078ea041
	void LogInternal(FString InLog);// 0x51ef078ea041
	void LogGameStats_KeyValues(FString InKey, out const FString[] InValues);// 0x51ee078ea041
	void LogGameStats_KeyValue(FString InKey, FString InValue);// 0x51ed078ea041
	void LogGameStats_Key(FString InKey);// 0x51ec078ea041
	bool IsUseEmptyHeadData(FString InPlayerID);// 0x51eb078ea041
	int GetSwapLogFileSize();// 0x51ea078ea041
	int GetSwapLogFileInterval();// 0x51e9078ea041
	FString GetSCMLogDataString(const bool bIncludeStatistics, SolarPlayerState* InPS);// 0x51e8078ea041
	FString GetProperLogElement(FString InElement);// 0x51e7078ea041
	FString GetLogValueSeparater();// 0x51e6078ea041
	FString GetLogTerminator();// 0x51e5078ea041
	SolarGameStatisticsLogHeadInfo GetLogHeadInfo();// 0x51e4078ea041
	FString GetLogFileNameSuffix();// 0x51e3078ea041
	FString GetLogFileNamePrefix();// 0x51e2078ea041
	FString GetLogFileExtension();// 0x51e1078ea041
	FString GetLogFileDir();// 0x51e0078ea041
	FString GetLogElementSeparater();// 0x51df078ea041
	FString GetLogDataString(const bool bIncludeStatistics, FString InPlayerID);// 0x51de078ea041
	int GetLogCheckIntervalMS();// 0x51dd078ea041
	FString GetHeadDataString(FString InPlayerID);// 0x51dc078ea041
	FString GetEmptyHeadDataString();// 0x51db078ea041
	bool CanReportBIWrapper(FString InLogType);// 0x51da078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameStatisticsLogHeadInfo
	int BattleInstanceId;//[Offset: 0x0, Size: 0x4]
	int PIEInstance;//[Offset: 0x4, Size: 0x4]
	FString BattleID;//[Offset: 0x8, Size: 0x10]
	FString WorldName;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponMergeMeshManager.Object
	WeaponMergeMeshStruct[] MergeMeshArray;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponMergeMeshStruct
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	int weaponid;//[Offset: 0x10, Size: 0x4]
	int SkinId;//[Offset: 0x14, Size: 0x4]
	int[] Parts;//[Offset: 0x18, Size: 0x10]
	SkeletalMesh* MergeMesh;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CrashReportManager.Object
	void SetUserID(FString InUserId);// 0x4711078ea041
	void SetDeviceUUID(FString InDeviceUUID);// 0x4710078ea041
	void ReportLuaException(FString ErrorMsg, FString Traceback, bool bHandled);// 0x470f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPopPanelManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarApplicationLifetimeManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	int64 AppWillDeactivateTimestamp;//[Offset: 0x38, Size: 0x8]
	int64 AppHasReactivatedTimestamp;//[Offset: 0x40, Size: 0x8]
	void ReceiveOnWindowMinimized(const bool bIsMinimized);// 0x4e8c078ea041
	void ReceiveOnStandardScreenSizeChange(int SizeX, int SizeY);// 0x4e8b078ea041
	void ReceiveOnAppWillDeactivate(int64 InTimestamp);// 0x4e8a078ea041
	void ReceiveOnAppHasReactivated(int64 InTimestamp);// 0x4e89078ea041
	void ReceiveOnAppActivationStateChanged(bool AppActivated);// 0x4e88078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeActorManager.Object
	<FString,SolarHomeActor*> SpawnedHomeActors;//[Offset: 0x40, Size: 0x50]
	<IntVector,SolarHomeActor*> SpawnedConstructsLocKey;//[Offset: 0x90, Size: 0x50]
	<IntVector,SolarHomeActor*> PreviewConstructsLocKey;//[Offset: 0xe0, Size: 0x50]
	<SolarHomeConnectedGraph*> ConnectedGraphSet;//[Offset: 0x130, Size: 0x50]
	<FString,SolarHomeActor*> ClippingHomeActors;//[Offset: 0x180, Size: 0x50]
	<FString,SolarHomeActor*> InValidHomeActors;//[Offset: 0x1d0, Size: 0x50]
	<FString,SubPoolOfHomeActor*> HomeActorPools;//[Offset: 0x220, Size: 0x50]
	<int,HomeActorStaticData> StaticDataMap;//[Offset: 0x270, Size: 0x50]
	<FString,class Object> HomeActorClassPool;//[Offset: 0x2c0, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> SpawnedSpacesLocKey;//[Offset: 0x378, Size: 0x50]
	<IntVector,SolarHomeBaseSpace*> ShowsSpacesLocKey;//[Offset: 0x3c8, Size: 0x50]
	DataTable* HomeObjectTable;//[Offset: 0x470, Size: 0x8]
	SolarHomeShaderConfig* ShaderConfig;//[Offset: 0x478, Size: 0x8]
	DataTable* TextureDataTable;//[Offset: 0x480, Size: 0x8]
	DataTable* IconDataTable;//[Offset: 0x488, Size: 0x8]
	DataTable* PicDataTable;//[Offset: 0x490, Size: 0x8]
	int BuildCountPerFrame;//[Offset: 0x498, Size: 0x4]
	SolarHomeSpaceSpawner* HomeSpaceSpawner;//[Offset: 0x4b0, Size: 0x8]
	SolarHomePlayerController* HomePlayerCtrl;//[Offset: 0x4b8, Size: 0x8]
	SolarWaterActorNew* WaterActor;//[Offset: 0x4e0, Size: 0x8]
	<HomeShaderData,MaterialInstanceDynamic*> HomeObjShadersPool;//[Offset: 0x4e8, Size: 0x50]
	bool bIsConstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 0x1]
	bool IsLoadingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 0x1]
	<SolarHomeDragUI*> CacheDragUIs;//[Offset: 0x5a8, Size: 0x50]
	<SolarHomeDragUI*> UsedDragUIs;//[Offset: 0x5f8, Size: 0x50]
	void UpdateCanSendSaveMsg();// 0x52c5078ea041
	void UpdateCameraLayer(int NewLayer);// 0x52c4078ea041
	bool TrySelectHomeActor(out const FString SelectedThisID, bool bSelect);// 0x52c3078ea041
	bool TrySaveAllHomeActors();// 0x52c2078ea041
	void TryResetAllHomeActors();// 0x52c1078ea041
	void TryRemoveHomeActors(out const FString[] RemoveThisID);// 0x52c0078ea041
	void TryRemoveHomeActor(out const FString RemoveThisID);// 0x52bf078ea041
	void TryRemoveAllInvalidHomeActors();// 0x52be078ea041
	void TryRemoveAllHomeActors();// 0x52bd078ea041
	void TryDyeHomeActor(out const FString DyeThisID, out const FString SlotName, out const FString TexturesID);// 0x52bc078ea041
	void TryCreateHomeActorsNoLimit(out const HomeBuildReqData[] ReqDataArr);// 0x52bb078ea041
	void TryCreateHomeActors(out const HomeBuildReqData[] ReqData);// 0x52ba078ea041
	void TryCreateHomeActor(out const HomeBuildReqData ReqData);// 0x52b9078ea041
	void TryConfirmHomeActor(out const FString SelectedThisID, bool bCancel);// 0x52b8078ea041
	void TryCancelHomeActor(out const FString SelectedThisID);// 0x52b7078ea041
	void SetLastSelectingThisID(out const FString InThisID);// 0x52b6078ea041
	void SetLastCreateThisID(out const FString InThisID);// 0x52b5078ea041
	void SetIsConstruct(bool bNewConstruct);// 0x52b4078ea041
	void SetHomeActorValid(SolarHomeActor* TargetActor, bool bNewValid);// 0x52b3078ea041
	void SetHoldingType(enum NewType);// 0x52b2078ea041
	void SetDragUILoc(SolarHomeDragUI* TargetUI, out const Vector NewLoc);// 0x52b1078ea041
	void SetCurSelectingThisID(out const FString InThisID, bool bSelected);// 0x52b0078ea041
	void SetCurBuildingID(int NewItemID);// 0x52af078ea041
	void SelectHomeActor_Request(out const FString SelectedThisID, bool bSelect);// 0x52ae078ea041
	void SelectHomeActor_Other(FString ThisID);// 0x52ad078ea041
	void SaveBuilding_Request(bool bSave);// 0x52ac078ea041
	void RotateHomeActor(SolarHomeActor* TargetHomeActor, int DeltaAngle);// 0x52ab078ea041
	void RemoveHomeActors_Request(out const FString[] WillRemoveThisIDs);// 0x52aa078ea041
	void RemoveHomeActor_Request(out const FString WillRemoveThisID);// 0x52a9078ea041
	void RemoveAllHomeActors_Request();// 0x52a8078ea041
	void OnSelectingThisIDChanged(bool bSelect, out const FString NewThisID);// 0x52a7078ea041
	void OnSelectingActorCanSaveChanged(bool bNewCanSave);// 0x52a6078ea041
	bool OnIsDragChanged(bool bIsDrag);// 0x52a5078ea041
	void OnInvalidActorsCountChanged(int NewCount);// 0x52a4078ea041
	void OnHoldingTypeChanged(enum OldType, enum NewType);// 0x52a3078ea041
	void NotifyWhenWallDevicePutOnOtherPlace();// 0x52a2078ea041
	void NotifyWhenFloorDevicePutOnOtherPlace();// 0x52a1078ea041
	void NotifyWhenClickActorOnOtherFloor();// 0x52a0078ea041
	void NotifyWhenCeilingDevicePutOnOtherPlace();// 0x529f078ea041
	void NotifyLoadingUIChanged(bool bShow);// 0x529e078ea041
	void MoveDevice(SolarHomeActor* TargetHomeActor, const SolarHomeActor* ParHomeActor, enum HitDir, out const Vector NewLoc);// 0x529d078ea041
	void MoveConstruct(SolarHomeActor* TargetHomeActor, SolarHomeBaseSpace* NewSpace);// 0x529c078ea041
	bool HasFoundation();// 0x529b078ea041
	DataTable* GetTextureDataTable();// 0x529a078ea041
	HomeActorStaticData GetStaticDataByItemID(int ItemID);// 0x5299078ea041
	SolarHomeShaderConfig* GetShaderConfig();// 0x5298078ea041
	void GetMeshDefaultMat(int64 InItemID, out BuildMeshSlotData[] OutData);// 0x5297078ea041
	FString GetLastCreateThisID();// 0x5296078ea041
	int GetInvalidActorsCount();// 0x5295078ea041
	SolarHomeSpaceSpawner* GetHomeSpaceSpawner();// 0x5294078ea041
	SolarHomePlayerController* GetHomePlayerCtrl();// 0x5293078ea041
	bool GetHomePicConfig(FString Name, out HomePic OutConfig);// 0x5292078ea041
	bool GetHomeObjectConfig(int InItemID, out HomeObject OutConfig);// 0x5291078ea041
	bool GetHomeIconConfig(FString Name, out HomeIcon OutConfig);// 0x5290078ea041
	enum GetHomeActorSecondType(int ItemID);// 0x528f078ea041
	enum GetHomeActorFirstType(int ItemID);// 0x528e078ea041
	SolarHomeActor* GetHomeActorByThisID(out const FString InThisID);// 0x528d078ea041
	SolarHomeActor* GetHomeActorByLoc(out const Vector InLoc);// 0x528c078ea041
	FString GetCurSelectingThisID();// 0x528b078ea041
	enum GetCurHoldingItemType();// 0x528a078ea041
	int GetCurBuildingID();// 0x5289078ea041
	bool GetActorCanSave(SolarHomeActor* InActor);// 0x5288078ea041
	void ExportHomeActorDataToPath(FString FilePath);// 0x5287078ea041
	void DyeingHomeActor_Request(out const FString WillDyeingThisID, out const FString SlotName, out const FString TexturesID);// 0x5286078ea041
	void DeSelectAllHomeActors_Request();// 0x5285078ea041
	void CreateHomeActors_Request(out const HomeBuildReqData[] WillCreateDatas);// 0x5284078ea041
	void CreateHomeActor_Request(out const HomeBuildReqData WillCreateData);// 0x5283078ea041
	void ClientUpdateHomeActor_UseQueue(out const HomeActorServerData UpdateData);// 0x5282078ea041
	void ClientUpdateHomeActor(out const HomeActorServerData UpdateData);// 0x5281078ea041
	void ClientRemoveHomeActor_UseQueue(out const HomeActorServerData RemoveData);// 0x5280078ea041
	void ClientRemoveHomeActor(out const HomeActorServerData RemoveData);// 0x527f078ea041
	void ClientCreateHomeActor_UseQueue(out const HomeActorServerData WillCreateData, enum InLoadingType);// 0x527e078ea041
	bool ClientCreateHomeActor(out const HomeActorServerData WillCreateData, bool InIsConstruct);// 0x527d078ea041
	void Clear();// 0x527c078ea041
	void ChangeCameraLayer(int DeltaLayer);// 0x527b078ea041
	bool CanPreviewWithBuilding(int TypeID);// 0x527a078ea041
	bool CanDevicePlace(enum DeviceType, out const SolarHomeActor* HitConstruct, out const enum HitDir);// 0x5279078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeBuildReqData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x4, Size: 0xc]
	Rotator Rotation;//[Offset: 0x10, Size: 0xc]
	BuildMeshSlotData[] MatDataArr;//[Offset: 0x20, Size: 0x10]
	FString ParentThisID;//[Offset: 0x30, Size: 0x10]
	bool IsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BuildMeshSlotData
	FString SlotName;//[Offset: 0x0, Size: 0x10]
	FString TexturesID;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeActor.Actor.Object
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x228, Size: 0x8]
	HomeActorStaticData HomeActorStaticData;//[Offset: 0x230, Size: 0x38]
	HomeActorServerData HomeActorServerData;//[Offset: 0x268, Size: 0x68]
	<FName,HomeOriginalShader> OriginalShaders;//[Offset: 0x2d0, Size: 0x50]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x330, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x338, Size: 0x10]
	<SolarHomeActor*,int> HitHomeActors;//[Offset: 0x348, Size: 0x50]
	SolarHomeConnectedGraph* CurrentConnectedGraph;//[Offset: 0x398, Size: 0x8]
	SolarHomeActor*[] NeighborFloors;//[Offset: 0x3a0, Size: 0x10]
	SolarHomeActor*[] NeighborWalls;//[Offset: 0x3b0, Size: 0x10]
	void UpdateHomeActor(out const HomeActorServerData NewServerData);// 0x5278078ea041
	void UpdateHitHomeActors(SolarHomeActor* NewActor, bool isAdd);// 0x5277078ea041
	void SetStaticData(out const HomeActorStaticData NewData);// 0x5276078ea041
	void SetServerData(out const HomeActorServerData NewData);// 0x5275078ea041
	void SetMaterial(out const HomeActorServerData InServerData, bool bPlaceable);// 0x5274078ea041
	void OnOverlayEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x5273078ea041
	void OnOverlayBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5272078ea041
	void OnOverLap(Actor* OtherActor, bool isHitBegin);// 0x5271078ea041
	void OnCreatedByServer(out const HomeActorStaticData NewStaticData, out const HomeActorServerData NewServerData);// 0x5270078ea041
	void OnCanSaveChanged(bool bNewCanSave);// 0x526f078ea041
	DataTable* GetTextureDataTable();// 0x526e078ea041
	StaticMeshComponent* GetStaticMeshComp();// 0x526d078ea041
	HomeActorStaticData GetStaticData();// 0x526c078ea041
	SolarHomeShaderConfig* GetShaderConfig();// 0x526b078ea041
	HomeActorServerData GetServerData();// 0x526a078ea041
	bool GetNextLegalRotator(float RotAngle, out Rotator OutNextRot);// 0x5269078ea041
	enum GetHitSurface(out const Vector HitNormal);// 0x5268078ea041
	bool GetCanSave();// 0x5267078ea041
	bool CanSelected();// 0x5266078ea041
	bool CanRemove();// 0x5265078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeActorServerData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	FString ThisID;//[Offset: 0x8, Size: 0x10]
	enum Owner;//[Offset: 0x18, Size: 0x4]
	bool isPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool isDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	Vector CurLocation;//[Offset: 0x20, Size: 0xc]
	Rotator CurRotation;//[Offset: 0x2c, Size: 0xc]
	BuildMeshSlotData[] FacesMatData;//[Offset: 0x38, Size: 0x10]
	FString ParentObject;//[Offset: 0x48, Size: 0x10]
	FString[] ChildObjects;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeActorStaticData
	int64 ItemID;//[Offset: 0x0, Size: 0x8]
	enum FirstType;//[Offset: 0x8, Size: 0x4]
	enum SecondType;//[Offset: 0xc, Size: 0x4]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	FString BpPath;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeOriginalShader
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeConnectedGraph.Object
	<SolarHomeActor*> ConnectedFloors;//[Offset: 0x28, Size: 0x50]
	<SolarHomeActor*> BaseWalls;//[Offset: 0x78, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeShaderConfig.DataAsset.Object
	SoftObjectPath EmissiveMatPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath MaskedMatPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath TranslucentMatPath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath DeleteEmissiveMatPath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath DeleteMaskedMatPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath DeleteTranslucentMatPath;//[Offset: 0xa8, Size: 0x18]
	LinearColor PrdinaryColor;//[Offset: 0xc0, Size: 0x10]
	LinearColor PlaceableColor;//[Offset: 0xd0, Size: 0x10]
	LinearColor UnPlaceableColor;//[Offset: 0xe0, Size: 0x10]
	LinearColor PlaceableColorOther;//[Offset: 0xf0, Size: 0x10]
	float BreathLightTimeScale;//[Offset: 0x100, Size: 0x4]
	float PlaceableEmissveA;//[Offset: 0x104, Size: 0x4]
	float UnPlaceableEmissveA;//[Offset: 0x108, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeDragUI.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeBaseSpace.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x228, Size: 0x8]
	BoxComponent*[] BoxComps;//[Offset: 0x230, Size: 0x10]
	BaseSpaceData BaseSpaceData;//[Offset: 0x240, Size: 0xc]
	void UpdateHomeSpaceByData(out const BaseSpaceData NewData);// 0x52cc078ea041
	void ShowBaseSpace();// 0x52cb078ea041
	void OnBaseSpaceUnOccupied();// 0x52ca078ea041
	void OnBaseSpaceOccupied();// 0x52c9078ea041
	void OnBaseSpaceCreated(int Layer, enum BaseSpaceType);// 0x52c8078ea041
	void HideBaseSpace();// 0x52c7078ea041
	BaseSpaceData GetData();// 0x52c6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BaseSpaceData
	int Layer;//[Offset: 0x0, Size: 0x4]
	enum BaseSpaceType;//[Offset: 0x4, Size: 0x4]
	bool IsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool IsShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SubPoolOfHomeActor.Object
	SolarHomeActor*[] UseActors;//[Offset: 0x30, Size: 0x10]
	SolarHomeActor*[] UnUseActors;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeSpaceSpawner.SolarMapElementBase.Actor.Object
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x298, Size: 0x8]
	<enum,class Object> TypeClassMap;//[Offset: 0x2a0, Size: 0x50]
	<float,int> LayerMap;//[Offset: 0x2f0, Size: 0x50]
	float FloorUnit;//[Offset: 0x360, Size: 0x4]
	float WallUnit;//[Offset: 0x364, Size: 0x4]
	float BaseUnit;//[Offset: 0x368, Size: 0x4]
	float RoundOnBase;//[Offset: 0x36c, Size: 0x4]
	float RoundOnFloor;//[Offset: 0x370, Size: 0x4]
	float ArrowOnBase;//[Offset: 0x374, Size: 0x4]
	float ArrowOnFloor;//[Offset: 0x378, Size: 0x4]
	float ArrowToWall;//[Offset: 0x37c, Size: 0x4]
	Transform[] BasisFloorsTransArr;//[Offset: 0x388, Size: 0x10]
	bool IsAirWallOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 0x1]
	void OpenAirWall();// 0x5301078ea041
	void Init(int InBuildWidth, int InBuildHeight);// 0x5300078ea041
	bool GetIsAirWallOpen();// 0x52ff078ea041
	void CloseAirWall();// 0x52fe078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomePlayerController.SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	InputComponent* ConstructionInputComponent;//[Offset: 0xed0, Size: 0x8]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0xed8, Size: 0x8]
	SolarHomeActor* DragActor;//[Offset: 0xee0, Size: 0x8]
	float MinCheckDistance;//[Offset: 0xee8, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xeec, Size: 0x4]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0xef0, Size: 0x8]
	bool bIsViewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 0x1]
	bool bIsConstruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef9, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0xf00, Size: 0x8]
	float MoveCheckDis;//[Offset: 0xf08, Size: 0x4]
	float CheckDis;//[Offset: 0x10a0, Size: 0x4]
	SolarHomeCameraManager* CameraManager;//[Offset: 0x1130, Size: 0x8]
	Vector LookAtLocation;//[Offset: 0x1138, Size: 0xc]
	Vector OriginalLookAtLocation;//[Offset: 0x1144, Size: 0xc]
	Actor* CurrentViewTarget;//[Offset: 0x1150, Size: 0x8]
	Actor* OriginalViewTarget;//[Offset: 0x1158, Size: 0x8]
	void StopBuilding();// 0x52fd078ea041
	void StartFadeOutEffect();// 0x52fc078ea041
	void StartBuilding();// 0x52fb078ea041
	void SolarGM_Home_ResetLayer(int InLayer);// 0x52fa078ea041
	void SolarGM_FillUpHome();// 0x52f9078ea041
	void SolarGM_ExportHomeActorToPath(FString FilePath);// 0x52f8078ea041
	void ShowBuildMainUI(bool bShow);// 0x52f7078ea041
	void SetNormalCameraTarget();// 0x52f6078ea041
	void SetConstructionCameraTarget();// 0x52f5078ea041
	void SendMoveToBackend(out const ServerMoveData MoveData);// 0x52f4078ea041
	void ResetConstructionCamera();// 0x52f3078ea041
	void ResetCameraRotation();// 0x52f2078ea041
	void OnTouchMove(int Index, out const Vector Location);// 0x52f1078ea041
	void OnTouchEnd(int Index, out const Vector Location);// 0x52f0078ea041
	void OnTouchBegin(int Index, out const Vector Location);// 0x52ef078ea041
	void OnDragBegin(out const Vector Location);// 0x52ee078ea041
	void OnCameraRight(const float Value);// 0x52ed078ea041
	void OnCameraForward(const float Value);// 0x52ec078ea041
	bool GetIsConstruction();// 0x52eb078ea041
	int GetCameraCurrentLayer();// 0x52ea078ea041
	void BindConstructionInput();// 0x52e9078ea041
	void BindBattleInput();// 0x52e8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ServerMoveData
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	int64 ServerTimeStamp;//[Offset: 0x8, Size: 0x8]
	Vector Acceleration;//[Offset: 0x10, Size: 0xc]
	Vector Velocity;//[Offset: 0x1c, Size: 0xc]
	Vector Loction;//[Offset: 0x28, Size: 0xc]
	byte CompressedMoveFlags;//[Offset: 0x34, Size: 0x1]
	byte RollByte;//[Offset: 0x35, Size: 0x1]
	uint32 YawPitchInt;//[Offset: 0x38, Size: 0x4]
	byte MovementMode;//[Offset: 0x3c, Size: 0x1]
	uint32 FullBodyAnimationState;//[Offset: 0x40, Size: 0x4]
	uint32 MontageAnimState;//[Offset: 0x44, Size: 0x4]
	byte JetPackFlag;//[Offset: 0x48, Size: 0x1]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHomeCameraManager.ActorComponent.Object
	CameraMovementParameters CameraMovementSetting;//[Offset: 0xb8, Size: 0x68]
	Vector LookAtLocation;//[Offset: 0x134, Size: 0xc]
	SolarHomeActorManager* HomeActorMgr;//[Offset: 0x140, Size: 0x8]
	SolarHomeSpaceSpawner* CacheHomeSpaceSpawner;//[Offset: 0x150, Size: 0x8]
	CameraActor* BuildCamera;//[Offset: 0x158, Size: 0x8]
	Actor* BattleCamera;//[Offset: 0x160, Size: 0x8]
	CameraComponent* BuildCameraComp;//[Offset: 0x168, Size: 0x8]
	void UpdateSliderScaleUI(float InScale);// 0x52e4078ea041
	void UpdateCameraDistanceUI(float InPercent, float InScale);// 0x52e3078ea041
	void SetNormalCameraTarget();// 0x52e2078ea041
	void SetConstructionCameraTarget();// 0x52e1078ea041
	void RotateCameraSpin(const float Value);// 0x52e0078ea041
	void RotateCameraPitch(const float Value);// 0x52df078ea041
	void MoveCameraRight(const float Value);// 0x52de078ea041
	void MoveCameraForward(const float Value);// 0x52dd078ea041
	void MoveCamera(int Index, out const Vector Location, const <int,Vector> FingerLocations);// 0x52dc078ea041
	bool ChangeCameraMode(enum InMode);// 0x52db078ea041
	void ChangeCameraDistancePercent(bool IsDoubleFinger, float InPercent);// 0x52da078ea041
	void ChangeCameraDistanceDiff(bool IsDoubleFinger, float InValue);// 0x52d9078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraMovementParameters
	float OneFingerMoveScale;//[Offset: 0x0, Size: 0x4]
	float MouseMoveScale;//[Offset: 0x4, Size: 0x4]
	float OneFingerZoomScale;//[Offset: 0x8, Size: 0x4]
	float MouseZoomScale;//[Offset: 0xc, Size: 0x4]
	float DoubleFingerSpinScale;//[Offset: 0x10, Size: 0x4]
	float DoubleFingerPitchScale;//[Offset: 0x14, Size: 0x4]
	float MouseRotateScale;//[Offset: 0x18, Size: 0x4]
	float LookAtLocationHeigh;//[Offset: 0x1c, Size: 0x4]
	float MinPitch;//[Offset: 0x20, Size: 0x4]
	float MaxPitch;//[Offset: 0x24, Size: 0x4]
	float PanoramicDefaultPitch;//[Offset: 0x28, Size: 0x4]
	float homeCameraBoundary;//[Offset: 0x2c, Size: 0x4]
	CurveFloat* DistanceCurve;//[Offset: 0x30, Size: 0x8]
	float DefultTime;//[Offset: 0x38, Size: 0x4]
	CurveFloat* DistanceCurve_Orthographic;//[Offset: 0x40, Size: 0x8]
	float DefaultTime_Orthographic;//[Offset: 0x48, Size: 0x4]
	CurveFloat* LayerTransitionCurve;//[Offset: 0x50, Size: 0x8]
	CurveFloat* CeilingTransitionCurve;//[Offset: 0x58, Size: 0x8]
	CurveFloat* PanoramicTransitionCurve;//[Offset: 0x60, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomePic.TableRowBase
	SoftObjectPath PicPath;//[Offset: 0x8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeObject.TableRowBase
	FString HomeObjectDesc;//[Offset: 0x8, Size: 0x10]
	SoftObjectPath BpPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath PreviewBpPath;//[Offset: 0x30, Size: 0x18]
	BuildMeshSlotData[] DefaultMat;//[Offset: 0x48, Size: 0x10]
	bool IsFocusCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool IsDrawable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool IsRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	bool IsBrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 0x1]
	bool IsRotateHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	int RotateAngleSingle;//[Offset: 0x60, Size: 0x4]
	SoftObjectPath Build_SFPath;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath Remove_SFXPath;//[Offset: 0x80, Size: 0x18]
	float FRemove_SFXTime;//[Offset: 0x98, Size: 0x4]
	FString FSBuild_Audio;//[Offset: 0xa0, Size: 0x10]
	FString FSRemove_Audio;//[Offset: 0xb0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeIcon.TableRowBase
	SoftObjectPath NormalIconPath;//[Offset: 0x8, Size: 0x18]
	SoftObjectPath SelectedIconPath;//[Offset: 0x20, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWaterActorNew.Actor.Object
	StaticMesh* VolumeMeshAsset;//[Offset: 0x228, Size: 0x28]
	StaticMesh* SurfaceMeshAsset;//[Offset: 0x250, Size: 0x28]
	MaterialInterface* WaterExtremeMaterial;//[Offset: 0x278, Size: 0x28]
	MaterialInterface* WaterUltraMaterial;//[Offset: 0x2a0, Size: 0x28]
	MaterialInterface* WaterHDRMaterial;//[Offset: 0x2c8, Size: 0x28]
	MaterialInterface* WaterHDMaterial;//[Offset: 0x2f0, Size: 0x28]
	MaterialInterface* WaterBalancedMaterial;//[Offset: 0x318, Size: 0x28]
	MaterialInterface* WaterSmoothMaterial;//[Offset: 0x340, Size: 0x28]
	MaterialInterface* WaterPerformanceMaterial;//[Offset: 0x368, Size: 0x28]
	bool bUnderwater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	MaterialInterface* WaterScreenMaterial;//[Offset: 0x398, Size: 0x28]
	MaterialInterface* WaterVolumeMaterial;//[Offset: 0x3c0, Size: 0x28]
	MaterialParameterCollection* WaterMPC;//[Offset: 0x3e8, Size: 0x8]
	SolarPostProcessSettingItem* SolarPostAsset;//[Offset: 0x3f0, Size: 0x8]
	bool bCutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 0x1]
	LinearColor CutlineColor;//[Offset: 0x3fc, Size: 0x10]
	float CutlineOffset;//[Offset: 0x40c, Size: 0x4]
	float CutlineFadeness;//[Offset: 0x410, Size: 0x4]
	float CutlineThickness;//[Offset: 0x414, Size: 0x4]
	Texture2D* NormalTexture;//[Offset: 0x418, Size: 0x28]
	float Flatten;//[Offset: 0x440, Size: 0x4]
	float Speed;//[Offset: 0x444, Size: 0x4]
	float Tiling;//[Offset: 0x448, Size: 0x4]
	float FarSpeed;//[Offset: 0x44c, Size: 0x4]
	float FarTiling;//[Offset: 0x450, Size: 0x4]
	bool bAddtationNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 0x1]
	Texture2D* AddtationAreaTexture;//[Offset: 0x458, Size: 0x28]
	float AddtationSpeed;//[Offset: 0x480, Size: 0x4]
	float AddtationTiling;//[Offset: 0x484, Size: 0x4]
	float AddtationAreaDistribution;//[Offset: 0x488, Size: 0x4]
	float SpecularIntensity;//[Offset: 0x48c, Size: 0x4]
	float ReflectionDistortion;//[Offset: 0x490, Size: 0x4]
	TextureCube* ReflectionCubemap;//[Offset: 0x498, Size: 0x28]
	bool bSSR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	float SSRFadeness;//[Offset: 0x4c4, Size: 0x4]
	float SSRRaylength;//[Offset: 0x4c8, Size: 0x4]
	bool bIridescence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 0x1]
	float IridescenceIOR;//[Offset: 0x4d0, Size: 0x4]
	Texture2D* IridescenceAreaTexture;//[Offset: 0x4d8, Size: 0x28]
	bool bRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	float RefractionIOR;//[Offset: 0x504, Size: 0x4]
	LinearColor ScatteringColor;//[Offset: 0x508, Size: 0x10]
	float ScatteringScale;//[Offset: 0x518, Size: 0x4]
	float ScatteringDensity;//[Offset: 0x51c, Size: 0x4]
	float ScatteringAnisotropy;//[Offset: 0x520, Size: 0x4]
	LinearColor AbsorptionColor;//[Offset: 0x524, Size: 0x10]
	float AbsorptionDistance;//[Offset: 0x534, Size: 0x4]
	bool bAbsorptionFromTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	Texture2D* AbsorptionTexture;//[Offset: 0x540, Size: 0x28]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x568, Size: 0x4]
	SolarWaterMesh* VolumeMeshComponent;//[Offset: 0x570, Size: 0x8]
	SolarWaterMesh* SurfaceMeshComponent;//[Offset: 0x578, Size: 0x8]
	void OnExitWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x5f46078ea041
	void OnEnterWaterSurface(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5f45078ea041
	float GetWaterLineHeight();// 0x5f44078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWaterMesh.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HomeShaderData
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameplayLogger.Object
	enum[] DefaultChannels;//[Offset: 0x28, Size: 0x10]
	void SolarDebugLog(enum Channel, FString Message);// 0x51d6078ea041
	void EnableDebugLogChannel(enum Channel);// 0x51d5078ea041
	void DisableDebugLogChannel(enum Channel);// 0x51d4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeSubSystem.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	<int,SolarAttributeConfig> AttributeDefaultData;//[Offset: 0x38, Size: 0x50]
	<int,SolarAttributeSubModifierGroup*> GlobalModifiers;//[Offset: 0x88, Size: 0x50]
	float CharacterTakeDamage(SolarAttributeSubComponent* AttributeSubComp, const float Damage);// 0x4e9d078ea041
	float CalcWeaponFireDamage(SolarAttributeSubComponent* AttributeSet, out const int ModeIdx);// 0x4e9c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeConfig
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]
	float BaseValue;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeSubModifierGroup.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeSubComponent.ActorComponent.Object
	<int,SolarAttributeSubData*> AttributeSubs;//[Offset: 0xb0, Size: 0x50]
	SolarAttributeSubReplicateData[] AttributeSubRepData;//[Offset: 0x100, Size: 0x10]
	<int,float> ClientAttributeSubValues;//[Offset: 0x110, Size: 0x50]
	void RemoveModifier(int AttributeSubID, out const FName Name);// 0x4e9a078ea041
	void OnRep_AttributeSubRepDatas();// 0x4e99078ea041
	void OnAttributeSubChanged();// 0x4e98078ea041
	float GetValue(int AttributeSubID);// 0x4e97078ea041
	SolarAttributeSubSystem* GetAttributeSubSystem();// 0x4e96078ea041
	SolarAttributeSubComponent* GetAttributeSubComponentFromActor(Actor* InActor);// 0x4e95078ea041
	int AddModifier(int AttributeSubID, byte InOpType, float Magnitude, out const FName Name);// 0x4e94078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeSubData.Object
	SolarAttributeSubModifierGroup* LocalModifier;//[Offset: 0x28, Size: 0x8]
	SolarAttributeSubModifierGroup* GlobalModifier;//[Offset: 0x30, Size: 0x8]
	int AttributeID;//[Offset: 0x50, Size: 0x4]
	float CurrentValue;//[Offset: 0x54, Size: 0x4]
	float MaxValue;//[Offset: 0x58, Size: 0x4]
	float MinValue;//[Offset: 0x5c, Size: 0x4]
	float BaseValue;//[Offset: 0x60, Size: 0x4]
	void OnModifierChanged();// 0x4e9b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAttributeSubReplicateData
	int AttributeID;//[Offset: 0x0, Size: 0x4]
	float AttributeValue;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCustomizedGameModeManager.Object
	SolarGameMode_ElementManager* ElementManager;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameMode_ElementManager.Object
	SolarMapElementBase*[] ElementsList;//[Offset: 0x30, Size: 0x10]
	SolarPlayerStart*[] PlayerStartList;//[Offset: 0x40, Size: 0x10]
	<FName,class SolarGameMode_HandleElementRPC> HandleActorRPCBPs;//[Offset: 0x50, Size: 0x50]
	<FString,SolarMapElementBase*> ElementMap;//[Offset: 0xa0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x260, Size: 0x4]
	FString Side;//[Offset: 0x268, Size: 0x10]
	FString Job;//[Offset: 0x278, Size: 0x10]
	FString ElementID;//[Offset: 0x288, Size: 0x10]
	enum Type;//[Offset: 0x298, Size: 0x1]
	enum State;//[Offset: 0x299, Size: 0x1]
	enum Visibility;//[Offset: 0x29a, Size: 0x1]
	FName ElementTypeName;//[Offset: 0x29c, Size: 0x8]
	FString GroupKey;//[Offset: 0x2a8, Size: 0x10]
	Vector[] PlayerLocations;//[Offset: 0x2b8, Size: 0x10]
	void SetElementVisibility(const enum NewType);// 0x56d1078ea041
	enum SetElementState(const enum NewState);// 0x56d0078ea041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x56cf078ea041
	void OnElementStateChanged(const enum CurrentState);// 0x56ce078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x24c, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarRedHintManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameModeSelectionManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	SolarGameModeLockSettings* CurGameModeLockSettings;//[Offset: 0x38, Size: 0x8]
	SolarGameModeLockSettings* DefaultGameModeLockSettings;//[Offset: 0x58, Size: 0x8]
	void SaveGameModeLockSettings();// 0x51c7078ea041
	void LoadGameModeLockSettings();// 0x51c6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameModeLockSettings.SaveGame.Object
	<int,bool> GameModeLockStatus;//[Offset: 0x28, Size: 0x50]
	int[] LobbyGameModeRecIDs;//[Offset: 0x78, Size: 0x10]
	int[] GameModeGuideIDs;//[Offset: 0x88, Size: 0x10]
	void CopyFrom(SolarGameModeLockSettings* InLockSettings);// 0x51c5078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPingFpsManager.Object
	byte GetPingDS;//[Offset: 0x30, Size: 0x1]
	float GetPingBackend;//[Offset: 0x34, Size: 0x4]
	float Fps;//[Offset: 0x38, Size: 0x4]
	byte GetPingBattleServer();// 0x5590078ea041
	float GetPacketsLossRate();// 0x558f078ea041
	float GetAverageFPS();// 0x558e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameUserSettingsMgr.Object
	SolarGameUserSettings* MobileGameUserSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameUserSettingsPC* DesktopGameUserSettings;//[Offset: 0x30, Size: 0x8]
	SolarGameUserSettings* CurGameUserSettings;//[Offset: 0x38, Size: 0x8]
	SolarGameSettingsRange* MobileGameSettingsRange;//[Offset: 0x40, Size: 0x8]
	SolarGameSettingsRange* DesktopGameSettingsRange;//[Offset: 0x48, Size: 0x8]
	SolarGameSettingsRange* DefaultGameSettingsRange;//[Offset: 0x50, Size: 0x8]
	bool bIsDefalutSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x60, Size: 0x8]
	void SynchronizeInputSettings();// 0x5229078ea041
	void SaveGameSettingsByPlatform(SolarGameUserSettings* InGameUserSettings);// 0x5228078ea041
	void SaveGameSettings();// 0x5227078ea041
	void ResetToDefaultByPlatform(SolarGameUserSettings* InGameUserSettings, enum SettingPart);// 0x5226078ea041
	void ResetToDefault(enum SettingPart);// 0x5225078ea041
	void RefreshValid(SolarGameInstanceBase* GameInstance, bool SaveIfDirty);// 0x5224078ea041
	void RefreshDynamicShadow();// 0x5223078ea041
	void RefreshAnalogCursorSpeed();// 0x5222078ea041
	void OnSettingConfigSaved();// 0x5221078ea041
	void OnScreenDamageEffectSettingChanged();// 0x5220078ea041
	void OnPickupSettingChanged();// 0x521f078ea041
	void OnOffScreenSettingChanged();// 0x521e078ea041
	bool IsLowLevelDevice();// 0x521d078ea041
	bool IsHighlightMomentOpen();// 0x521c078ea041
	bool IsEnableGamepadInput();// 0x521b078ea041
	bool IsDefaultEnableDynamicShadow();// 0x521a078ea041
	void InitializeSettings(SolarGameInstanceBase* GameInstance);// 0x5219078ea041
	void Init(SolarGameInstanceBase* GameInstance);// 0x5218078ea041
	SolarGameUserSettings* GetMobileGameUserSettings();// 0x5217078ea041
	SolarGameSettingsRange* GetMobileGameSettingsRange();// 0x5216078ea041
	SolarGameUserSettingsPC* GetDesktopGameUserSettings();// 0x5215078ea041
	SolarGameSettingsRange* GetDesktopGameSettingsRange();// 0x5214078ea041
	int GetCurNativeRefreshRate();// 0x5213078ea041
	bool FixConfigVersionByPlatform(SolarGameUserSettings* InGameUserSettings);// 0x5212078ea041
	bool FixConfigVersion();// 0x5211078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameUserSettings.DeveloperSettings.Object
	PickupUserSettings PickupSettings;//[Offset: 0x38, Size: 0x18]
	GraphicsUserSettings GraphicsSettings;//[Offset: 0x50, Size: 0x60]
	WeaponUserSettings WeaponSettings;//[Offset: 0xb0, Size: 0x20]
	LanguageUserSettings LanguageSettings;//[Offset: 0xd0, Size: 0x3]
	CharacterVoiceUserSettings CharacterVoiceSettings;//[Offset: 0xd3, Size: 0x1]
	SoundUserSettings SoundSettings;//[Offset: 0xd8, Size: 0x60]
	BasicUserSettings BasicSettings;//[Offset: 0x138, Size: 0x11]
	PersonalityUserSettings PersonalitySettings;//[Offset: 0x150, Size: 0x88]
	SensitivityUserSettings SensitivitySettings;//[Offset: 0x1d8, Size: 0x94]
	ShakeUserSettings ShakeSettings;//[Offset: 0x26c, Size: 0x1]
	VehicleControlUserSettings DriverSettings;//[Offset: 0x26d, Size: 0x5]
	ChatOperatorUserSettings ChatOperatorSettings;//[Offset: 0x272, Size: 0x2]
	SoftClassPath DefaultSettingsRangePath;//[Offset: 0x278, Size: 0x18]
	bool bIsSynchronized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	enum ConfigVersion;//[Offset: 0x291, Size: 0x1]
	bool bFirstTimeLanunchGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 0x1]
	FString ToJsonObjectString();// 0x5210078ea041
	bool IsEnableGamepadInput();// 0x520f078ea041
	WeaponUserSettings GetWeaponSettings();// 0x520e078ea041
	SoundUserSettings GetSoundSettings();// 0x520d078ea041
	ShakeUserSettings GetShakeSettings();// 0x520c078ea041
	SensitivityUserSettings GetSensitivitySettings();// 0x520b078ea041
	PickupUserSettings GetPickupSettings();// 0x520a078ea041
	PersonalityUserSettings GetPersonalitySettings();// 0x5209078ea041
	LanguageUserSettings GetLanguageSettings();// 0x5208078ea041
	GraphicsUserSettings GetGraphicsSettings();// 0x5207078ea041
	bool GetEnableOpponentPerspectiveByDefault();// 0x5206078ea041
	VehicleControlUserSettings GetDriverSettings();// 0x5205078ea041
	float GetDefaultCustomizedCharacterCameraFOV();// 0x5204078ea041
	ChatOperatorUserSettings GetChatOperatorSettings();// 0x5203078ea041
	CharacterVoiceUserSettings GetCharacterVoiceSettings();// 0x5202078ea041
	BasicUserSettings GetBasicSettings();// 0x5201078ea041
	void FromJsonObjectString(FString JsonStr);// 0x5200078ea041
	bool CheckJsonObjectString(FString JsonStr);// 0x51ff078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DeveloperSettings.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponUserSettings
	bool bAimAssist_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bVehicleWeaponAutoFire_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bEnableRecoilRecovery_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bAutoScope_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bAutoScope_SpecialButtonGlobal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bAutoScopeRifle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bAutoScopeSubmachinegun_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bAutoScopeShotgunSingle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bAutoScopeShotgunAuto_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bAutoScopeSniperSingle_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bAutoScopeSniperAuto_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bAutoScopeSpecial_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bSniperSingleShootOnPressed_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bShotgunSingleShootOnPressed_Global;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	CurveFloat* HitEffectDistanceToScaleCurve;//[Offset: 0x10, Size: 0x8]
	enum DoScopeMode_Global;//[Offset: 0x18, Size: 0x1]
	bool bOpenVehicleWeaponCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bVehicleAutoScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
	bool bVehicleAutoScope_SpecialButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool bCanScopeButtonRotateView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bShowQuickChangeScopeButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundUserSettings
	ConditionValue Sound_Global;//[Offset: 0x0, Size: 0x8]
	ConditionValue Sound_Action;//[Offset: 0x8, Size: 0x8]
	ConditionValue Sound_BackGround;//[Offset: 0x10, Size: 0x8]
	ConditionValue Sound_Character;//[Offset: 0x18, Size: 0x8]
	int MicroPhoneVolume;//[Offset: 0x20, Size: 0x4]
	int LoudSpeakerVolume;//[Offset: 0x24, Size: 0x4]
	enum Sound_Quality;//[Offset: 0x28, Size: 0x1]
	enum AudioMode;//[Offset: 0x29, Size: 0x1]
	int MicLevel;//[Offset: 0x2c, Size: 0x4]
	int SpeakerLevel;//[Offset: 0x30, Size: 0x4]
	int ChooseMicIndex;//[Offset: 0x34, Size: 0x4]
	int ChooseSpeakerIndex;//[Offset: 0x38, Size: 0x4]
	FString MicDeviceID;//[Offset: 0x40, Size: 0x10]
	FString SpeakerDeviceID;//[Offset: 0x50, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ConditionValue
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int CurValue;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PickupUserSettings
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bStopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseTileView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	PickupItemData[] PickupItemList;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PickupItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int ItemNum;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GraphicsUserSettings
	enum FpsLevel;//[Offset: 0x0, Size: 0x1]
	enum ContentScaleFactorLevel;//[Offset: 0x1, Size: 0x1]
	enum ColorThemeType;//[Offset: 0x2, Size: 0x1]
	bool MSAAIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool VSyncIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FloatValue AdaptationUIValue;//[Offset: 0x8, Size: 0x4]
	bool EnableDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	enum SelectQualityLevel;//[Offset: 0xd, Size: 0x1]
	FloatValue CustomizedCharacterCameraFOV;//[Offset: 0x10, Size: 0x4]
	int SavedVersion;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FloatValue
	float Value;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LanguageUserSettings
	enum CurLanguage;//[Offset: 0x0, Size: 0x1]
	enum CurCharacterVoiceLanguage;//[Offset: 0x1, Size: 0x1]
	bool HasLoadedChinese;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterVoiceUserSettings
	enum CurVoiceLanguage;//[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BasicUserSettings
	bool bOpenUniversalMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum OpenOffScreen;//[Offset: 0x1, Size: 0x1]
	bool bOpenQuickChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bAutoOverturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bPowerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bOpenRecruitRecommend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	enum curGyroscpeChooseLevel;//[Offset: 0x6, Size: 0x1]
	bool bHorizontalGyroscopeInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bVerticalGyroscopeInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum CurrentDamageTextDisplayMode;//[Offset: 0x9, Size: 0x1]
	enum OpenHighlightMoment;//[Offset: 0xa, Size: 0x1]
	enum OpenOutline;//[Offset: 0xb, Size: 0x1]
	bool bShowInputKeyTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bEnableGamepadInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	enum OpenScreenDamageEffect;//[Offset: 0xe, Size: 0x1]
	bool bOpenMiniMapRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	bool bOpenDirectionBlood3D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PersonalityUserSettings
	ColorPreset[] TeammatePerspectiveColors;//[Offset: 0x0, Size: 0x10]
	ColorPreset[] OpponentPerspectiveColors;//[Offset: 0x10, Size: 0x10]
	ParticlePreset[] BloodMistColors;//[Offset: 0x20, Size: 0x10]
	ColorValue TeammatePerspectiveColor;//[Offset: 0x30, Size: 0x10]
	ColorValue OpponentPerspectiveColor;//[Offset: 0x40, Size: 0x10]
	ParticleSystem* BloodMistParticle;//[Offset: 0x50, Size: 0x28]
	int TeammateColor;//[Offset: 0x78, Size: 0x4]
	int OpponentColor;//[Offset: 0x7c, Size: 0x4]
	int BloodMistColor;//[Offset: 0x80, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ColorPreset
	int ColorID;//[Offset: 0x0, Size: 0x4]
	ColorValue ModelColor;//[Offset: 0x4, Size: 0x10]
	ColorValue UIColor;//[Offset: 0x14, Size: 0x10]
	int ColorNameLocalText;//[Offset: 0x24, Size: 0x4]
	bool bNotShowDomestic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bDefaultDomestic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ColorValue
	LinearColor Value;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticlePreset
	int ColorID;//[Offset: 0x0, Size: 0x4]
	ParticleSystem* Particle;//[Offset: 0x8, Size: 0x28]
	ColorValue UIColor;//[Offset: 0x30, Size: 0x10]
	int ColorNameLocalText;//[Offset: 0x40, Size: 0x4]
	bool bNotShowDomestic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bDefaultDomestic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SensitivityUserSettings
	enum Sensitivity_AccMode;//[Offset: 0x0, Size: 0x1]
	FloatValue Sensitivity_CurveScale;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_Free;//[Offset: 0x8, Size: 0x4]
	FloatValue Sensitivity_SecondarySkills;//[Offset: 0xc, Size: 0x4]
	FloatValue Sensitivity_SuperSkills;//[Offset: 0x10, Size: 0x4]
	CameraSensitivityData Sensitivity_NoShoot;//[Offset: 0x14, Size: 0x20]
	CameraSensitivityData Sensitivity_Shoot;//[Offset: 0x34, Size: 0x20]
	GyroscopeSensitivityData GyroscopeData;//[Offset: 0x54, Size: 0x20]
	FloatValue Sensitivity_VehicleDriver;//[Offset: 0x74, Size: 0x4]
	FloatValue Sensitivity_VehicleFire;//[Offset: 0x78, Size: 0x4]
	VehicleCameraSensitivityData Sensitivity_Vehicle_NoShoot;//[Offset: 0x7c, Size: 0xc]
	VehicleCameraSensitivityData Sensitivity_Vehicle_Shoot;//[Offset: 0x88, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraSensitivityData
	FloatValue Sensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue Sensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue Sensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue Sensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GyroscopeSensitivityData
	FloatValue GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x4]
	FloatValue GyroscopeSensitivity_Shoulder;//[Offset: 0x4, Size: 0x4]
	FloatValue GyroscopeSensitivity_RedPoint;//[Offset: 0x8, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Two;//[Offset: 0xc, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Three;//[Offset: 0x10, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Four;//[Offset: 0x14, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Six;//[Offset: 0x18, Size: 0x4]
	FloatValue GyroscopeSensitivity_Lens_Eight;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleCameraSensitivityData
	FloatValue Sensitivity_Lens_Two;//[Offset: 0x0, Size: 0x4]
	FloatValue Sensitivity_Lens_Four;//[Offset: 0x4, Size: 0x4]
	FloatValue Sensitivity_Lens_Eight;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ShakeUserSettings
	enum ShakeMainStatus;//[Offset: 0x0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleControlUserSettings
	enum WheeledVehicleDriveType;//[Offset: 0x0, Size: 0x1]
	bool bCanAdjustInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bCanAutoSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	enum LastWheeledVehicleDriveType;//[Offset: 0x3, Size: 0x1]
	bool bCanVehicleCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChatOperatorUserSettings
	enum Speaker;//[Offset: 0x0, Size: 0x1]
	enum Mic;//[Offset: 0x1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameUserSettingsPC.SolarGameUserSettings.DeveloperSettings.Object
	SensitivityUserSettings SensitivitySettingsKeyboard;//[Offset: 0x294, Size: 0x94]
	SensitivityUserSettings SensitivitySettingsGamepad;//[Offset: 0x328, Size: 0x94]
	MouseAndKeyboardSettings KeyboardControlSettings;//[Offset: 0x3bc, Size: 0xc]
	GamepadSettings GamepadSettings;//[Offset: 0x3c8, Size: 0xe0]
	GamepadAdvancedSettings GamepadAdvancedSettings;//[Offset: 0x4a8, Size: 0x3c]
	GraphicsUserSettingsPC GraphicsSettingsPC;//[Offset: 0x4e8, Size: 0x58]
	bool bEnableCursorNoticePanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MouseAndKeyboardSettings
	FloatValue MainSensitivity;//[Offset: 0x0, Size: 0x4]
	bool bMouseInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	enum AimMode;//[Offset: 0x5, Size: 0x1]
	enum SprintMode;//[Offset: 0x6, Size: 0x1]
	enum MedicWheelMode;//[Offset: 0x7, Size: 0x1]
	enum EmojiWheelMode;//[Offset: 0x8, Size: 0x1]
	enum CurrentItemHUDStyle;//[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GamepadSettings
	SolarAimModeWithLocalText[] AimModeMap;//[Offset: 0x0, Size: 0x10]
	SolarSprintModeWithLocalText[] SprintModeMap;//[Offset: 0x10, Size: 0x10]
	FloatWithLocalText[] ViewSensitivityMap;//[Offset: 0x20, Size: 0x10]
	ObjectWithLocalText[] ResponseCurveMap;//[Offset: 0x30, Size: 0x10]
	FloatWithLocalText[] LeftStickDeadzoneMap;//[Offset: 0x40, Size: 0x10]
	FloatWithLocalText[] RightStickDeadzoneMap;//[Offset: 0x50, Size: 0x10]
	FloatWithLocalText[] TriggerDeadzoneMap;//[Offset: 0x60, Size: 0x10]
	FloatWithLocalText[] VibrationLevelMap;//[Offset: 0x70, Size: 0x10]
	RangeData CursorSpeedRange;//[Offset: 0x80, Size: 0x8]
	SolarWheelModeTypeWithLocalText[] WheelModeTypeMap;//[Offset: 0x88, Size: 0x10]
	int AimModeID;//[Offset: 0x98, Size: 0x4]
	int SprintModeID;//[Offset: 0x9c, Size: 0x4]
	ConditionValue MainHorizontalSensitivity;//[Offset: 0xa0, Size: 0x8]
	ConditionValue MainVerticalSensitivity;//[Offset: 0xa8, Size: 0x8]
	int RightStickSensitivityID;//[Offset: 0xb0, Size: 0x4]
	int RightStickResponseCurveID;//[Offset: 0xb4, Size: 0x4]
	bool bInvertedLook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	int LeftStickDeadzoneID;//[Offset: 0xbc, Size: 0x4]
	int RightStickDeadzoneID;//[Offset: 0xc0, Size: 0x4]
	int TriggerDeadzoneID;//[Offset: 0xc4, Size: 0x4]
	FloatValue CursorSpeed;//[Offset: 0xc8, Size: 0x4]
	int VibrationLevelID;//[Offset: 0xcc, Size: 0x4]
	bool bEnableAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bEnableClassicWheeledVehicleControlMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	int MedicWheelModeID;//[Offset: 0xd4, Size: 0x4]
	int EmojiWheelModeID;//[Offset: 0xd8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAimModeWithLocalText
	int LocalText;//[Offset: 0x0, Size: 0x4]
	enum AimMode;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSprintModeWithLocalText
	int LocalText;//[Offset: 0x0, Size: 0x4]
	enum SprintMode;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FloatWithLocalText
	int LocalText;//[Offset: 0x0, Size: 0x4]
	float Value;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ObjectWithLocalText
	int LocalText;//[Offset: 0x0, Size: 0x4]
	SoftObjectPath ObjectPath;//[Offset: 0x8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RangeData
	float MinValue;//[Offset: 0x0, Size: 0x4]
	float MaxValue;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWheelModeTypeWithLocalText
	int LocalText;//[Offset: 0x0, Size: 0x4]
	enum WheelPadMode;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GamepadAdvancedSettings
	RangeData ScalerRange;//[Offset: 0x0, Size: 0x8]
	RangeData SpeedUpScalerRange;//[Offset: 0x8, Size: 0x8]
	RangeData SpeedUpDelayRange;//[Offset: 0x10, Size: 0x8]
	RangeData SpeedUpStartRange;//[Offset: 0x18, Size: 0x8]
	FloatValue ScalerX;//[Offset: 0x20, Size: 0x4]
	FloatValue ScalerY;//[Offset: 0x24, Size: 0x4]
	FloatValue SpeedUpScalerX;//[Offset: 0x28, Size: 0x4]
	FloatValue SpeedUpScalerY;//[Offset: 0x2c, Size: 0x4]
	FloatValue SpeedUpDelayTime;//[Offset: 0x30, Size: 0x4]
	FloatValue SpeedUpStartTime;//[Offset: 0x34, Size: 0x4]
	bool bEnableAdsSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GraphicsUserSettingsPC
	enum Resolution;//[Offset: 0x0, Size: 0x1]
	DataTable* ResolutionDataTable;//[Offset: 0x8, Size: 0x8]
	enum Monitor;//[Offset: 0x10, Size: 0x1]
	enum Fps;//[Offset: 0x11, Size: 0x1]
	enum GraphicsMode;//[Offset: 0x12, Size: 0x1]
	FloatValue Brightness;//[Offset: 0x14, Size: 0x4]
	enum ROV;//[Offset: 0x18, Size: 0x1]
	enum NvdiaReflex;//[Offset: 0x19, Size: 0x1]
	enum RayTracing;//[Offset: 0x1a, Size: 0x1]
	enum VSync;//[Offset: 0x1b, Size: 0x1]
	enum MotionBlur;//[Offset: 0x1c, Size: 0x1]
	enum AntiAliasing;//[Offset: 0x1d, Size: 0x1]
	enum AnisotropicFiltering;//[Offset: 0x1e, Size: 0x1]
	enum TextureQuality;//[Offset: 0x1f, Size: 0x1]
	enum TextureModel;//[Offset: 0x20, Size: 0x1]
	enum DetailQuality;//[Offset: 0x21, Size: 0x1]
	enum VisualEffects;//[Offset: 0x22, Size: 0x1]
	FloatValue SunlightShadowRange;//[Offset: 0x24, Size: 0x4]
	enum SunlightShadowDetails;//[Offset: 0x28, Size: 0x1]
	DataTable* ShadowDetailLevelDataTable;//[Offset: 0x30, Size: 0x8]
	enum MaxCSMResolutionLevel;//[Offset: 0x38, Size: 0x1]
	enum PointLightShadowDetails;//[Offset: 0x39, Size: 0x1]
	enum AmbientOcclusionQuality;//[Offset: 0x3a, Size: 0x1]
	enum SSGIQuality;//[Offset: 0x3b, Size: 0x1]
	enum Reflection;//[Offset: 0x3c, Size: 0x1]
	bool VolumetricLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool DynamicVolumetricShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	enum PostProcessingEffects;//[Offset: 0x3f, Size: 0x1]
	enum RenderingResolutionScale;//[Offset: 0x40, Size: 0x1]
	enum GrassDensity;//[Offset: 0x41, Size: 0x1]
	enum ColorBlindMode;//[Offset: 0x42, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameSettingsRange.Object
	SoundSettingsRange SoundSettings;//[Offset: 0x28, Size: 0x20]
	SensitivitySettingsRange SensitivitySettings;//[Offset: 0x48, Size: 0x120]
	GraphicsSettingsRange GraphicsSettings;//[Offset: 0x168, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundSettingsRange
	RangeData Sound_Global;//[Offset: 0x0, Size: 0x8]
	RangeData Sound_Action;//[Offset: 0x8, Size: 0x8]
	RangeData Sound_BackGround;//[Offset: 0x10, Size: 0x8]
	RangeData Sound_Character;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SensitivitySettingsRange
	RangeData Sensitivity_CurveScale;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Free;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_SecondarySkills;//[Offset: 0x10, Size: 0x8]
	RangeData Sensitivity_SuperSkills;//[Offset: 0x18, Size: 0x8]
	CameraSensitivityRangeData Sensitivity_NoShoot;//[Offset: 0x20, Size: 0x40]
	CameraSensitivityRangeData Sensitivity_Shoot;//[Offset: 0x60, Size: 0x40]
	VehicleCameraSensitivityRangeData Sensitivity_Vehicle_NoShoot;//[Offset: 0xa0, Size: 0x18]
	VehicleCameraSensitivityRangeData Sensitivity_Vehicle_Shoot;//[Offset: 0xb8, Size: 0x18]
	RangeData Sensitivity_VehicleDriver;//[Offset: 0xd0, Size: 0x8]
	RangeData Sensitivity_VehicleFire;//[Offset: 0xd8, Size: 0x8]
	GyroscopeSensitivityRangeData Sensitivity_GyroscopeData;//[Offset: 0xe0, Size: 0x40]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraSensitivityRangeData
	RangeData Sensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData Sensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData Sensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData Sensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleCameraSensitivityRangeData
	RangeData Sensitivity_Lens_Two;//[Offset: 0x0, Size: 0x8]
	RangeData Sensitivity_Lens_Four;//[Offset: 0x8, Size: 0x8]
	RangeData Sensitivity_Lens_Eight;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GyroscopeSensitivityRangeData
	RangeData GyroscopeSensitivity_Basic;//[Offset: 0x0, Size: 0x8]
	RangeData GyroscopeSensitivity_Shoulder;//[Offset: 0x8, Size: 0x8]
	RangeData GyroscopeSensitivity_RedPoint;//[Offset: 0x10, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Two;//[Offset: 0x18, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Three;//[Offset: 0x20, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Four;//[Offset: 0x28, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Six;//[Offset: 0x30, Size: 0x8]
	RangeData GyroscopeSensitivity_Lens_Eight;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GraphicsSettingsRange
	RangeData AdaptationUIValue;//[Offset: 0x0, Size: 0x8]
	RangeData FOVRange;//[Offset: 0x8, Size: 0x8]
	RangeData BrightnessRange;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLoginManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	void InitFromLogin();// 0x5424078ea041
	void Init(SolarGameInstanceBase* GameInstance);// 0x5423078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLockSettingsMgr.Object
	SolarLockSettings* CurLockSettings;//[Offset: 0x28, Size: 0x8]
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	SolarLockSettings* DefaultLockSettings;//[Offset: 0x48, Size: 0x8]
	void SaveLockSettings();// 0x5422078ea041
	void LoadLockSettings();// 0x5421078ea041
	void Init(SolarGameInstanceBase* GameInstance);// 0x5420078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarLockSettings.SaveGame.Object
	<int,bool> FeaturesLockStatus;//[Offset: 0x28, Size: 0x50]
	void CopyFrom(SolarLockSettings* InLockSettings);// 0x541f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameProgressManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	delegate OnGameStart;//[Offset: 0x38, Size: 0x10]
	void OnWorldConditionsCompleted();// 0x26bd078ea041
	void OnStreamingLevelComplete();// 0x26bc078ea041
	void OnShadersCompileComplete();// 0x26bb078ea041
	void OnGameStart__DelegateSignature();// 0x26ba078ea041
	void K2_ReceiveGlobalConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x26b9078ea041
	void K2_ReceiveConditionCompleted(const Object* WorldContextObject, GameplayTag CompletedCondition);// 0x26b8078ea041
	void K2_OnGlobalConditionCompleted(GameplayTag CompletedCondition);// 0x26b7078ea041
	void K2_OnConditionCompleted(World* CurrentWorld, GameplayTag CompletedCondition);// 0x26b6078ea041
	bool IsGameStartNeedCondition(const Object* WorldContextObject, out const GameplayTag InCondition);// 0x26b5078ea041
	bool IsConditionInList(out const GameplayTag InCondition, World* WorldCheck);// 0x26b4078ea041
	bool IsAllStartGameConditionCompleted(World* WorldCheck);// 0x26b3078ea041
	bool InitGameStartCondition(World* CurrentWorld, GameplayTagContainer ConditionList);// 0x26b2078ea041
	bool HasGameStarted(const Object* WorldContextObject);// 0x26b1078ea041
	SolarGameProgressManager* Get(const Object* WorldContextObject);// 0x26b0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarABTestManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHttpManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	<FString,int> ReportStr2ReprotTimes;//[Offset: 0x48, Size: 0x50]
	int ReportRetryTimes;//[Offset: 0x98, Size: 0x4]
	delegate OnImgUploaded;//[Offset: 0xa0, Size: 0x10]
	int Jank;//[Offset: 0xcc, Size: 0x4]
	int BigJank;//[Offset: 0xd0, Size: 0x4]
	float FPS25;//[Offset: 0xd4, Size: 0x4]
	int PeakPlayerNum;//[Offset: 0x100, Size: 0x4]
	int PeakAINum;//[Offset: 0x104, Size: 0x4]
	int PeakVehicleNum;//[Offset: 0x108, Size: 0x4]
	void UploadToHTTP(FString URL, FString str);// 0x26f1078ea041
	void UploadImg(out const int AppId, out const int AppUid, FString AppToken, out const int GameID, out const int Uid, FString SourceImgPath);// 0x26f0078ea041
	FString StringToBase64(FString str);// 0x26ef078ea041
	void StopRecordJank();// 0x26ee078ea041
	void StartRecordJank();// 0x26ed078ea041
	void ResetPerfData(bool bKeepCurrentData);// 0x26ec078ea041
	void ReportAbnormalPlayerWeaponToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InAttackLocation, FString InHitLocation, FString InHitBoneScale, FString InWeaponBlueprintName);// 0x26eb078ea041
	void ReportAbnormalPlayerVehicleToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InVehiclePreviousLocation, FString InVehiclePresentLocation, FString InVehicleBlueprintName);// 0x26ea078ea041
	void ReportAbnormalPlayerToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue);// 0x26e9078ea041
	void ReportAbnormalPlayerBaittingToBackend(FString InPlayerID, FString InVariableName, FString InVariableValue, FString InDamageType, FString InBotLocation, FString InPlayerLocation);// 0x26e8078ea041
	void ReCordOnlineError(FString InStr);// 0x26e7078ea041
	void OnImgUploaded__DelegateSignature(int RespCode, FString RespMsg, FString ImgUrl);// 0x26e6078ea041
	bool IsFileSizeExceedLimit(FString SourceImgPath, out const int64 SizeLimit);// 0x26e5078ea041
	void InitializeDelegates();// 0x26e4078ea041
	bool GetIsUploading();// 0x26e3078ea041
	FString GetHttpReportUrl();// 0x26e2078ea041
	float GetAvgNum(int PerfType);// 0x26e1078ea041
	void ClearDelegates();// 0x26e0078ea041
	void CleanPerfDirtyData();// 0x26df078ea041
	FString Base64ToMD5(FString str);// 0x26de078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarActivityManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	bool IsCollectionRedeemOpen(int ActivityID);// 0x4dad078ea041
	int[] GetActivityItemIDList(int OutcomeID);// 0x4dac078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTutorialManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	enum CurrentTutorialStage;//[Offset: 0x50, Size: 0x1]
	delegate OnRegisterEvent;//[Offset: 0x58, Size: 0x10]
	delegate OnStepActionBegan;//[Offset: 0x68, Size: 0x10]
	delegate OnStepActionEnded;//[Offset: 0x78, Size: 0x10]
	delegate OnStepActionReset;//[Offset: 0x88, Size: 0x10]
	delegate OnStepActionDisposed;//[Offset: 0x98, Size: 0x10]
	TutorialGlobalConfig* TutorialGlobalConfig;//[Offset: 0x118, Size: 0x8]
	<int,TutorialTableRow> TutorialTableMapRows;//[Offset: 0x120, Size: 0x50]
	TutorialActionTableRow[] ActionTableRows;//[Offset: 0x170, Size: 0x10]
	<int,TutorialConditionTableRow> ConditionTableMapRows;//[Offset: 0x180, Size: 0x50]
	<int,Tutorial*> Tutorials;//[Offset: 0x1d0, Size: 0x50]
	bool bIsConditionCheckCodeParsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 0x1]
	FString TutorialDataTablePath;//[Offset: 0x338, Size: 0x10]
	FString ActionDataTablePath;//[Offset: 0x348, Size: 0x10]
	FString ConditionDataTablePath;//[Offset: 0x358, Size: 0x10]
	FString TutorialGlobalConfigPath;//[Offset: 0x368, Size: 0x10]
	<uint16,FName> OriginCheckFuncNames;//[Offset: 0x378, Size: 0x50]
	<uint16,Function*> CheckFuncs;//[Offset: 0x3c8, Size: 0x50]
	<FString,CacheConditionInfo> CacheRanConditions;//[Offset: 0x428, Size: 0x50]
	TutorialLevelSaveGame* CurrentTutorialLevelSaveGame;//[Offset: 0x488, Size: 0x8]
	FString[] TriggerWidgetClicked(out const FString[] Params);// 0x5ec3078ea041
	FString[] TriggerWeaponSlotHasSpecifiedItem(out const FString[] Params);// 0x5ec2078ea041
	FString[] TriggerUseSpecifiedWeaponAbility(out const FString[] Params);// 0x5ec1078ea041
	FString[] TriggerUseSpecifiedVehicleWeapon(out const FString[] Params);// 0x5ec0078ea041
	FString[] TriggerUseSpecifiedVehicleAbility(out const FString[] Params);// 0x5ebf078ea041
	FString[] TriggerTutorialLevelDone(out const FString[] Params);// 0x5ebe078ea041
	void TriggerTutorialInternal(enum TriggerID);// 0x5ebd078ea041
	void TriggerTutorialEvents(out enum[] TriggerTypeArrays, bool bPostTrigger);// 0x5ebc078ea041
	void TriggerTutorialEvent(enum TriggerType, bool bPostTrigger);// 0x5ebb078ea041
	FString[] TriggerSprintingContinuously(out const FString[] Params);// 0x5eba078ea041
	FString[] TriggerSpecifiedPlayerProficiency(out const FString[] Params);// 0x5eb9078ea041
	FString[] TriggerShieldNotFull(out const FString[] Params);// 0x5eb8078ea041
	FString[] TriggerRunningStep(out const FString[] Params);// 0x5eb7078ea041
	FString[] TriggerPlayerUpgradeBattleLevel(out const FString[] Params);// 0x5eb6078ea041
	FString[] TriggerPlayerInTargetStage(out const FString[] Params);// 0x5eb5078ea041
	FString[] TriggerPlayerAcountLevel(out const FString[] Params);// 0x5eb4078ea041
	FString[] TriggerOpenTreasureBox(out const FString[] Params);// 0x5eb3078ea041
	FString[] TriggerOpenBigMapUMG(out const FString[] Params);// 0x5eb2078ea041
	FString[] TriggerNearAirDropBox(out const FString[] Params);// 0x5eb1078ea041
	FString[] TriggerJumpBegin(out const FString[] Params);// 0x5eb0078ea041
	FString[] TriggerHasUIPanelOpened(out const FString[] Params);// 0x5eaf078ea041
	FString[] TriggerHasTakenDamage(out const FString[] Params);// 0x5eae078ea041
	FString[] TriggerHasSpecifiedItem(out const FString[] Params);// 0x5ead078ea041
	FString[] TriggerHasSpecifiedEquipmentByType(out const FString[] Params);// 0x5eac078ea041
	FString[] TriggerFeatureUnlock(out const FString[] Params);// 0x5eab078ea041
	FString[] TriggerEquipSpecifiedWeapon(out const FString[] Params);// 0x5eaa078ea041
	FString[] TriggerBotAIDying(out const FString[] Params);// 0x5ea9078ea041
	FString[] TriggerApproachTreasureBox(out const FString[] Params);// 0x5ea8078ea041
	FString[] TriggerAlreadyTriggeredMaxCount(out const FString[] Params);// 0x5ea7078ea041
	FString[] TriggerAirDropBoxLanded(out const FString[] Params);// 0x5ea6078ea041
	void TickActivatedTutorials();// 0x5ea5078ea041
	void SetWidgetInteractionFlag(FString InWidgetName, enum InWidgetInteractionFlag);// 0x5ea4078ea041
	void SetTipsUIInteractionFlag(int TutorialID, bool boolChange);// 0x5ea3078ea041
	void SetSignNameBool(FString SignName, bool InValue);// 0x5ea2078ea041
	void SetFlagNameCount(FString FlagName, int Num);// 0x5ea1078ea041
	void SetAirDropBoxLandedAddOneNum(int Value);// 0x5ea0078ea041
	void SaveTutorialLevelSaveGame();// 0x5e9f078ea041
	void SaveLevelTutorialID(FString InLevelName, int InTutorialID);// 0x5e9e078ea041
	void SaveLevelTutorialHasFinished(FString InLevelName, bool InFinished);// 0x5e9d078ea041
	void SaveLevelPlayerStartTag(FString InLevelName, FString InPlayerStartTag);// 0x5e9c078ea041
	void RequestAddTutorialProgress(int TutorialID, int Progress);// 0x5e9b078ea041
	void ReceiveOnSingleTutorialStart(int TutorialID);// 0x5e9a078ea041
	void ReceiveOnSingleTutorialFinished(int TutorialID);// 0x5e99078ea041
	void ReceiveLoadTutorialLevelData();// 0x5e98078ea041
	void ReceiveLoadData();// 0x5e97078ea041
	void ReceiveClearData();// 0x5e96078ea041
	void OnPostLoadMap(FString LevelName);// 0x5e95078ea041
	bool IsInTutorialLevel();// 0x5e94078ea041
	void InitGuideActorByActionID(int[] ActionIDs, TutorialLevelInteractableActor* TutorialGuideActor);// 0x5e93078ea041
	bool HasAnyTutorialPlaying();// 0x5e92078ea041
	bool HasAnyMandatoryTutorialPlaying();// 0x5e91078ea041
	void GM_OpenUI(int ID);// 0x5e90078ea041
	void GM_CloseUI(int ID);// 0x5e8f078ea041
	enum GetWidgetInteractionFlag(FString InWidgetName);// 0x5e8e078ea041
	int GetTutorialSingleRoundTriggerMax(int TutorialID);// 0x5e8d078ea041
	TutorialLevelSaveGame* GetTutorialLevelSaveGame();// 0x5e8c078ea041
	bool GetTipsUIInteractionFlag(int TutorialID);// 0x5e8b078ea041
	bool GetSignNameBool(FString SignName);// 0x5e8a078ea041
	UserWidget* GetPanelUI(FString PanelName);// 0x5e89078ea041
	int GetLevelTutorialID(FString InLevelName, int DefaultValue);// 0x5e88078ea041
	bool GetLevelTutorialHasFinished(FString InLevelName, bool DefaultValue);// 0x5e87078ea041
	int GetFlagNameCount(FString FlagName);// 0x5e86078ea041
	byte GetCurrentPlayerLevel();// 0x5e85078ea041
	TutorialActionTableRow GetActionDataByID(int ActionDataID);// 0x5e84078ea041
	Widget* FindWidget(out const FName[] InWidgetLink);// 0x5e83078ea041
	void EnterTutorialLevel(FString LevelName, int Proficiency);// 0x5e82078ea041
	bool CheckTutorialTipUIOnClick(out const FString[] InParams);// 0x5e81078ea041
	bool CheckIfWidgetReleased(out const FString[] InParams);// 0x5e80078ea041
	bool CheckIfWidgetPressed(out const FString[] InParams);// 0x5e7f078ea041
	bool CheckIfWidgetPlayAnimationFinish(out const FString[] InParams);// 0x5e7e078ea041
	bool CheckIfWidgetClicked(out const FString[] InParams);// 0x5e7d078ea041
	bool CheckIfWeaponSlotHasSpecifiedItem(out const FString[] InParams);// 0x5e7c078ea041
	bool CheckIfUIPanelOpened(out const FString[] InParams);// 0x5e7b078ea041
	bool CheckIfTutorialLevelDone(out const FString[] InParams);// 0x5e7a078ea041
	bool CheckIfTakeDamage(out const FString[] InParams);// 0x5e79078ea041
	bool CheckIfSprintingContinuously(out const FString[] InParams);// 0x5e78078ea041
	bool CheckIfSpecifiedPlayerProficiency(out const FString[] InParams);// 0x5e77078ea041
	bool CheckIfShieldNotFull();// 0x5e76078ea041
	bool CheckIfRunningStep(out const FString[] InParams);// 0x5e75078ea041
	bool CheckIfReloading();// 0x5e74078ea041
	bool CheckIfRechargingShield();// 0x5e73078ea041
	bool CheckIfPlayerLevel(out const FString[] InParams);// 0x5e72078ea041
	bool CheckIfPlayerInTargetScene(out const FString[] InParams);// 0x5e71078ea041
	bool CheckIfPlayerInBattling();// 0x5e70078ea041
	bool CheckIfPlayerBattleLevel(out const FString[] InParams);// 0x5e6f078ea041
	bool CheckIfOpenBigMapUMG();// 0x5e6e078ea041
	bool CheckIfNearAirDropBox();// 0x5e6d078ea041
	bool CheckIfJumpBegin();// 0x5e6c078ea041
	bool CheckIfJetFlyingVertically();// 0x5e6b078ea041
	bool CheckIfJetFlyingHorizontally();// 0x5e6a078ea041
	bool CheckIfInWater();// 0x5e69078ea041
	bool CheckIfInVehicle();// 0x5e68078ea041
	bool CheckIfInAir();// 0x5e67078ea041
	bool CheckIfHasSpecifiedItem(out const FString[] InParams);// 0x5e66078ea041
	bool CheckIfHasSpecifiedEquipmentByType(out const FString[] InParams);// 0x5e65078ea041
	bool CheckIfHasSpecifiedEquipmentById(out const FString[] InParams);// 0x5e64078ea041
	bool CheckIfHasShield();// 0x5e63078ea041
	bool CheckIfHasMatched();// 0x5e62078ea041
	bool CheckIfGrowTaskInLevelReceivedAnimationFinish(out const FString[] InParams);// 0x5e61078ea041
	bool CheckIfGrowLevelRewardIsInStatus(out const FString[] InParams);// 0x5e60078ea041
	bool CheckIfFeatureUnlock(out const FString[] InParams);// 0x5e5f078ea041
	bool CheckIfFeatureOpen(out const FString[] InParams);// 0x5e5e078ea041
	bool CheckIfEquipSpecifiedWeapon(out const FString[] InParams);// 0x5e5d078ea041
	bool CheckIfDying();// 0x5e5c078ea041
	bool CheckIfDead();// 0x5e5b078ea041
	bool CheckIfCurrentWeaponAmmoFull();// 0x5e5a078ea041
	bool CheckIfConsumingMedicine();// 0x5e59078ea041
	bool CheckIfClaimBattlePassLevelReward(out const FString[] InParams);// 0x5e58078ea041
	bool CheckIfCanUseSpecifiedWeaponAbility(out const FString[] InParams);// 0x5e57078ea041
	bool CheckIfCanUseSpecifiedVehicleWeapon(out const FString[] InParams);// 0x5e56078ea041
	bool CheckIfCanUseSpecifiedVehicleAbility(out const FString[] InParams);// 0x5e55078ea041
	bool CheckIfCanOpenTreasureBox();// 0x5e54078ea041
	bool CheckIfCanJetFlyVertically();// 0x5e53078ea041
	bool CheckIfCanJetFlyHorizontally();// 0x5e52078ea041
	bool CheckIfBoughtBattlePass();// 0x5e51078ea041
	bool CheckIfBotAIDying(out const FString[] InParams);// 0x5e50078ea041
	bool CheckIfBattlePassLevelGreaterThan(out const FString[] InParams);// 0x5e4f078ea041
	bool CheckIfApproachElectronicTreasureBox();// 0x5e4e078ea041
	bool CheckIfAlreadyTriggeredMaxCount(out const FString[] InParams);// 0x5e4d078ea041
	bool CheckIfAirDropBoxLanded();// 0x5e4c078ea041
	bool CheckConsumeItemButtonType(out const FString[] InParams);// 0x5e4b078ea041
	void AddTutorialProgress(int TutorialID, int Progress);// 0x5e4a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialGlobalConfig.DataAsset.Object
	bool bSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	<FString,enum> MapName2TutorialStage;//[Offset: 0x38, Size: 0x50]
	float SubtitleDisappearTime;//[Offset: 0x88, Size: 0x4]
	float AsyncLoadUIDelayTime;//[Offset: 0x8c, Size: 0x4]
	float SameConditionCheckInterval;//[Offset: 0x90, Size: 0x4]
	TutorialLevelConfig TutorialLevelConfig;//[Offset: 0x98, Size: 0x38]
	enum GetTutorialStageByLevelName(FString LevelName);// 0x5e49078ea041
	FString GetTutorialLevelMainMapPath();// 0x5e48078ea041
	FString GetTutorialLevelMainMapName();// 0x5e47078ea041
	TutorialLevelConfigData GetTutorialLevelConfigDataByName(FString LevelName);// 0x5e46078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialLevelConfig
	TutorialLevelConfigData[] LevelConfigDatas;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath MainMapPath;//[Offset: 0x10, Size: 0x18]
	int VeteranTutorialID;//[Offset: 0x28, Size: 0x4]
	float RepeatOperationTime;//[Offset: 0x2c, Size: 0x4]
	float WaitToEndTime;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialLevelConfigData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	int[] TutorialIds;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	enum Type;//[Offset: 0x20, Size: 0x1]
	enum TriggerStage;//[Offset: 0x21, Size: 0x1]
	TutorialSoftCondition TriggerCondition;//[Offset: 0x28, Size: 0x28]
	int EndNum;//[Offset: 0x50, Size: 0x4]
	TutorialSoftCondition ForeverClosedCondition;//[Offset: 0x58, Size: 0x28]
	int[] ActionIDs;//[Offset: 0x80, Size: 0x10]
	bool bUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bMandatory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	bool bStartUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 0x1]
	bool bWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x93, Size: 0x1]
	bool biOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAndroid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialTableRowBase.TableRowBase
	int ID;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialSoftCondition
	FString ConditionStr;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ConditionBP;//[Offset: 0x10, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialActionTableRow.TutorialTableRowBase.TableRowBase
	FString Desc;//[Offset: 0x10, Size: 0x10]
	enum UIType;//[Offset: 0x20, Size: 0x1]
	TutorialTipAndEffectUI TutorialTipAndEffectUI;//[Offset: 0x28, Size: 0x70]
	TutorialSpecialUI TutorialSpecialUI;//[Offset: 0x98, Size: 0x18]
	int NoticeLocTextId;//[Offset: 0xb0, Size: 0x4]
	TutorialSubtitle TutorialSubtitle;//[Offset: 0xb8, Size: 0x18]
	bool bRepeatTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	TutorialRepeatTip RepeatTip;//[Offset: 0xd8, Size: 0x18]
	TutorialBackgroundMusicTableRow TutorialBackgroundMusic;//[Offset: 0xf0, Size: 0x20]
	TutorialSoftCondition EndCondition;//[Offset: 0x110, Size: 0x28]
	TutorialSoftCondition InterruptCondition;//[Offset: 0x138, Size: 0x28]
	float WaitTime;//[Offset: 0x160, Size: 0x4]
	float MinExecuteTime;//[Offset: 0x164, Size: 0x4]
	int[] OpenBehaviors;//[Offset: 0x168, Size: 0x10]
	int[] CloseBehaviors;//[Offset: 0x178, Size: 0x10]
	int FixedTriggerAreaID;//[Offset: 0x188, Size: 0x4]
	int[] BotAISpawnIDs;//[Offset: 0x190, Size: 0x10]
	int[] BotAIDeathIDs;//[Offset: 0x1a0, Size: 0x10]
	int[] BotAIOnVehicleSpawnIDs;//[Offset: 0x1b0, Size: 0x10]
	int[] BotAIOnVehicleDeathIDs;//[Offset: 0x1c0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialTipAndEffectUI
	FString LinkedComponent;//[Offset: 0x0, Size: 0x10]
	FString LimitedListView;//[Offset: 0x10, Size: 0x10]
	SoftObjectPath TutorialExpressionBPPath;//[Offset: 0x20, Size: 0x18]
	SoftObjectPath TutorialEffectBPPath;//[Offset: 0x38, Size: 0x18]
	Vector2D TutorialBPLocation;//[Offset: 0x50, Size: 0x8]
	bool HorizontalDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int LocTextID;//[Offset: 0x5c, Size: 0x4]
	float LocTextDuration;//[Offset: 0x60, Size: 0x4]
	float DelayShowUITime;//[Offset: 0x64, Size: 0x4]
	float WaitUIShowTime;//[Offset: 0x68, Size: 0x4]
	enum UIParent;//[Offset: 0x6c, Size: 0x1]
	bool OpenEffectSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	bool NeedMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialSpecialUI
	SoftObjectPath TutorialSpecialUIBPPath;//[Offset: 0x0, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialSubtitle
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x0, Size: 0x10]
	float DelayTime;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialSingleSubtitle
	FString LocalTextId;//[Offset: 0x0, Size: 0x10]
	FString Voice;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialRepeatTip
	float StartTime;//[Offset: 0x0, Size: 0x4]
	TutorialSingleSubtitle[] Subtitles;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialBackgroundMusicTableRow
	FString TutorialPlayMusicName;//[Offset: 0x0, Size: 0x10]
	FString TutorialStopMusicName;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialConditionTableRow.TutorialTableRowBase.TableRowBase
	byte TriggerType;//[Offset: 0xc, Size: 0x1]
	FString[] Parameters;//[Offset: 0x10, Size: 0x10]
	FString Description;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Tutorial.Object
	TutorialTableRow Data;//[Offset: 0x60, Size: 0x98]
	TutorialTriggerCondition* TriggerConditionBP;//[Offset: 0xf8, Size: 0x8]
	TutorialTaskSequenceAction* TutorialTask;//[Offset: 0x100, Size: 0x8]
	void Stop();// 0x6047078ea041
	void OnSingleTaskFinish();// 0x6046078ea041
	TutorialTableRow GetTableRowData();// 0x6045078ea041
	int GetCurrentFinishNum();// 0x6044078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialTriggerCondition.TutorialCondition.Object
	SolarTutorialManager* GetSolarTutorialManager();// 0x606d078ea041
	bool CheckSatisfy(out const TutorialTableRow InData);// 0x606c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialCondition.Object
	FString GetWorldName();// 0x6049078ea041
	SolarCharacter* GetPlayer();// 0x6048078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialTaskSequenceAction.SequenceNode.ActionNode.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SequenceNode.ActionNode.Object
	ActionNode*[] Nodes;//[Offset: 0x70, Size: 0x10]
	ActionNode*[] ExecutingNodes;//[Offset: 0x80, Size: 0x10]
	int TotalCount();// 0x4d06078ea041
	ActionNode* GetCurrentExecutingNode();// 0x4d05078ea041
	SequenceNode* Append(ActionNode* Node);// 0x4d04078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActionNode.Object
	delegate OnBeganCallback;//[Offset: 0x28, Size: 0x10]
	delegate OnEndedCallback;//[Offset: 0x38, Size: 0x10]
	delegate OnResetCallback;//[Offset: 0x48, Size: 0x10]
	delegate OnDisposedCallback;//[Offset: 0x58, Size: 0x10]
	void Reset();// 0x4428078ea041
	bool Finished();// 0x4427078ea041
	void Finish();// 0x4426078ea041
	bool Execute(float DeltaTime);// 0x4425078ea041
	bool Disposed();// 0x4424078ea041
	void Dispose();// 0x4423078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialLevelInteractableActor.Actor.Object
	void UnregisterEvent();// 0x6055078ea041
	void RegisterEvent();// 0x6054078ea041
	SolarTutorialManager* GetSolarTutorialManager();// 0x6053078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialLevelSaveGame.SaveGame.Object
	<FString,TutorialLevelSaveData> TutorialLevelSaveDatas;//[Offset: 0x28, Size: 0x50]
	enum PlayerProficiency;//[Offset: 0x78, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TutorialLevelSaveData
	FString LevelName;//[Offset: 0x0, Size: 0x10]
	FString PlayerStartTag;//[Offset: 0x10, Size: 0x10]
	bool bTutorialHasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int TutorialID;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CacheConditionInfo
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementStageManager.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	int CurStageIndex;//[Offset: 0x38, Size: 0x4]
	int SettlementStageConfigID;//[Offset: 0x3c, Size: 0x4]
	DataTable* SettlementConfig;//[Offset: 0x40, Size: 0x8]
	SettlementFormula* Formula;//[Offset: 0x48, Size: 0x8]
	void UpdateModeConfig(const int InConfigID);// 0x4d20078ea041
	void SkipToTarget();// 0x4d1f078ea041
	void ShowNextStage();// 0x4d1e078ea041
	void ShowDiePage();// 0x4d1d078ea041
	void Init();// 0x4d1c078ea041
	class SolarUWSettlementBase GetSettlementUIClass();// 0x4d1b078ea041
	int GetSettlementStageID();// 0x4d1a078ea041
	SettlementConfig GetSettlementConfigRow();// 0x4d19078ea041
	SettlementFormula* GetFormula();// 0x4d18078ea041
	FString GetClassRelativePathName(const class Object InClass);// 0x4d17078ea041
	void CloseDiePage();// 0x4d16078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUWSettlementBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	int MvpCharacterID;//[Offset: 0x400, Size: 0x4]
	int MvpSkinID;//[Offset: 0x404, Size: 0x4]
	SettlementStageManager* SettlementStageManager;//[Offset: 0x408, Size: 0x8]
	void SetStageManager(SettlementStageManager* InStageManager);// 0x5ee5078ea041
	void PlayMvpCharacterVoice();// 0x5ee4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementConfig.TableRowBase
	int SettlementID;//[Offset: 0x8, Size: 0x4]
	SettlementStageConfig StageConfig;//[Offset: 0x10, Size: 0x40]
	class SettlementFormula* Formula;//[Offset: 0x50, Size: 0x28]
	bool IsValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementStageConfig
	class SolarUWSettlementBase* Page_Die;//[Offset: 0x0, Size: 0x28]
	int Page_SkipIndex;//[Offset: 0x28, Size: 0x4]
	class SolarUWSettlementBase[] SettlementStage;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementFormula.Actor.Object
	FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x4d14078ea041
	int GetZomborg(out const SettlementParam_Zomborg InParam);// 0x4d13078ea041
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x4d12078ea041
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam);// 0x4d11078ea041
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x4d10078ea041
	int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam);// 0x4d0f078ea041
	FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam);// 0x4d0e078ea041
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerID, out FString PBName);// 0x4d0d078ea041
	float GetKDA(out const SettlementParam_KDA InParam);// 0x4d0c078ea041
	FString[] GetGroupResultPlayerExData(FString SolarPlayerID, out FString PBName);// 0x4d0b078ea041
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam);// 0x4d0a078ea041
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x4d09078ea041
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo);// 0x4d08078ea041
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param);// 0x4d07078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_Zomborg
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float LifeTime;//[Offset: 0x8, Size: 0x4]
	int PlayerRank;//[Offset: 0xc, Size: 0x4]
	float GoldPunishRate;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_WeaponExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	float UseTime;//[Offset: 0x8, Size: 0x4]
	int WeaponKillNum;//[Offset: 0xc, Size: 0x4]
	int WeaponAssitNum;//[Offset: 0x10, Size: 0x4]
	float ExpRatio;//[Offset: 0x14, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_PageParam
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int WeaponExpSettlmentNum;//[Offset: 0x4, Size: 0x4]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_CommonExp
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float LifeTime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]
	float EXPPunishRatio;//[Offset: 0x24, Size: 0x4]
	float CoinPunishRatio;//[Offset: 0x28, Size: 0x4]
	int RankCorePunish;//[Offset: 0x2c, Size: 0x4]
	int BaseExp;//[Offset: 0x30, Size: 0x4]
	float ExpRatio;//[Offset: 0x34, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_KDA
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DeathNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementParam_MVP
	SolarPlayerState* PS;//[Offset: 0x0, Size: 0x8]
	int KillNum;//[Offset: 0x8, Size: 0x4]
	int DownNum;//[Offset: 0xc, Size: 0x4]
	int AssitNum;//[Offset: 0x10, Size: 0x4]
	int SaveNum;//[Offset: 0x14, Size: 0x4]
	float LifeTime;//[Offset: 0x18, Size: 0x4]
	float DamageValue;//[Offset: 0x1c, Size: 0x4]
	int Rank;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGMCrossLevelDataMgr.Object
	<FString,Object*> CrossLevelData;//[Offset: 0x28, Size: 0x50]
	void RegistryCrossLevelData(FString InSoltName, Object* InDataObj);// 0x45a2078ea041
	Object* GetCrossLevelData(FString InSoltName);// 0x45a1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGraphicSettings.Object
	uint32 CurrentActiveColorThemeIndex;//[Offset: 0x28, Size: 0x4]
	FrameRateLevelItem FrameRateLevelItem;//[Offset: 0x2c, Size: 0x10]
	<enum,enum> DefaultQualityToDefaultFrameRateLevel;//[Offset: 0x80, Size: 0x50]
	<enum,MaxQualityConfig> DefaultAndCurQualityToMaxFrameRateLevel;//[Offset: 0xd0, Size: 0x50]
	int MobileMaxFrameRate;//[Offset: 0x120, Size: 0x4]
	int HighRefreshRateThreshold;//[Offset: 0x124, Size: 0x4]
	int DefaultMSAALevel;//[Offset: 0x128, Size: 0x4]
	ContentScaleFactorLevelItem ContentScaleFactorLevelItems;//[Offset: 0x130, Size: 0x58]
	<enum,enum> DefaultContentScaleFactorLevel;//[Offset: 0x290, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FrameRateLevelItem
	enum FrameRateLevel;//[Offset: 0x0, Size: 0x1]
	float FrameRateLobby;//[Offset: 0x4, Size: 0x4]
	float FrameRateInGame;//[Offset: 0x8, Size: 0x4]
	float FrameRatePC;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaxQualityConfig
	<enum,enum> CurQualityToMaxFrameRateLevel;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ContentScaleFactorLevelItem
	enum ContentScaleFactorLevel;//[Offset: 0x0, Size: 0x1]
	<enum,float> DeviceLevelContentScaleFactorMap;//[Offset: 0x8, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAccessLuaDataUtils.Object
	SolarGameInstanceBase* solarGameInstance;//[Offset: 0x30, Size: 0x8]
	void GetMatchResult(out MatchResult MatchResult);// 0x4da3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MatchResult
	FString BattleID;//[Offset: 0x0, Size: 0x10]
	FString BattleAddr;//[Offset: 0x10, Size: 0x10]
	FString Token;//[Offset: 0x20, Size: 0x10]
	int ModeID;//[Offset: 0x30, Size: 0x4]
	int RuleID;//[Offset: 0x34, Size: 0x4]
	FString SelfPlayerID;//[Offset: 0x38, Size: 0x10]
	MatchResult_Group[] Groups;//[Offset: 0x48, Size: 0x10]
	FString MapName;//[Offset: 0x58, Size: 0x10]
	SoftObjectPath MapPath;//[Offset: 0x68, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MatchResult_Group
	int groupid;//[Offset: 0x0, Size: 0x4]
	MatchResult_Player[] Players;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MatchResult_Player
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	FString playerName;//[Offset: 0x10, Size: 0x10]
	int AvatarID;//[Offset: 0x20, Size: 0x4]
	int fightCharacterID;//[Offset: 0x24, Size: 0x4]
	int fightCharacterSkinID;//[Offset: 0x28, Size: 0x4]
	SoftObjectPath SkinConfigPath;//[Offset: 0x30, Size: 0x18]
	FString CharacterName;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAkSoundManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	void UnloadCharacterOwnedBanks(int CharacterId, byte Mode);// 0x4e6c078ea041
	void UnloadBankIgnoreStrategy(out const FName BankName);// 0x4e6b078ea041
	void UnloadAllCharacterOwnedBanksWithResList(byte Mode, out const <byte> ResCategoryList);// 0x4e6a078ea041
	void UnloadAllCharacterOwnedBanks(byte Mode);// 0x4e69078ea041
	void StopMusicByName(FString MusicEventName);// 0x4e68078ea041
	void SetVoiceLanguage();// 0x4e67078ea041
	void ReloadVoiceBanks();// 0x4e66078ea041
	void PlayMusicByName(FString MusicEventName);// 0x4e65078ea041
	void OnBankLoadedForEventAtLocationCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x4e64078ea041
	void OnAkBankUnloadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x4e63078ea041
	void OnAkBankLoadedCallbackFunc(enum in_loadResult, uint32 in_bankID);// 0x4e62078ea041
	void LoadCharacterOwnedBanks(int CharacterId, byte Mode);// 0x4e61078ea041
	void LoadBankIgnoreStrategy(out const FName BankName);// 0x4e60078ea041
	void LoadAllCharacterOwnedBanksWithResList(byte Mode, out const <byte> ResCategoryList);// 0x4e5f078ea041
	void LoadAllCharacterOwnedBanks(byte Mode);// 0x4e5e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KeyMappingManager.Object
	delegate OnKeyMappingUpdate;//[Offset: 0x120, Size: 0x10]
	delegate OnKeyMappingConfirm;//[Offset: 0x130, Size: 0x10]
	delegate OnKeyboardUpdate;//[Offset: 0x140, Size: 0x10]
	<FString,FString> OccupiedKeyMap;//[Offset: 0x160, Size: 0x50]
	KeyMappingFileMgr* KeyMappingFileMgr;//[Offset: 0x260, Size: 0x8]
	void SwitchKeyMappingPlanIndex(int PlanIndex);// 0x49af078ea041
	void SwitchKeyMapping(FString ActionName, int SettingIndex, bool Enable, bool Force);// 0x49ae078ea041
	void ResetKeyMapping();// 0x49ad078ea041
	bool IsComboKey(FString KeyName);// 0x49ac078ea041
	void ImportKeyMappingSetting();// 0x49ab078ea041
	bool HasKeyModified();// 0x49aa078ea041
	FString[] GetAllActionNames(int PlanIndex);// 0x49a9078ea041
	FString[] GetActionKeyMapping(FString ActionName, int PlanIndex, int SettingIndex);// 0x49a8078ea041
	void ApplyResult();// 0x49a7078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KeyMappingFileMgr.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSpecialEffectsMgr.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarFontManager.Object
	Font* ChineseFont;//[Offset: 0x30, Size: 0x8]
	void SaveChineseFontSetting(bool bHasLoad);// 0x516a078ea041
	bool MergeCompositeFont(FString NewFontAssetPath);// 0x5169078ea041
	Font* LoadNewFont(FString NewFontAssetPath);// 0x5168078ea041
	bool IsNeedMergeChineseFont(bool bAutoLoad);// 0x5167078ea041
	void Init();// 0x5166078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarDownloaderManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	delegate OnDownloaderProgress;//[Offset: 0x38, Size: 0x10]
	delegate OnDownloaderSuccess;//[Offset: 0x48, Size: 0x10]
	delegate OnDownloaderFailed;//[Offset: 0x58, Size: 0x10]
	bool bIsDownloaderEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bSupportFileCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]
	int CacheExpiredSeconds;//[Offset: 0x6c, Size: 0x4]
	<FString,DownloaderHttpTask*> TaskMap;//[Offset: 0x70, Size: 0x50]
	void OnDownloaderSuccessBroadcastNextTick(FString InUrl, out const DownloaderResponse InResponse);// 0x50e3078ea041
	void OnDownloaderProgressBroadcastNextTick(FString InUrl, out const int BytesSent, out const int BytesReceived);// 0x50e2078ea041
	void OnDownloaderFailedBroadcastNextTick(FString InUrl, out const enum InFailedType, out const int InErrorCode);// 0x50e1078ea041
	void LaunchTask(FString InUrl);// 0x50e0078ea041
	bool IsTaskExist(FString InUrl);// 0x50df078ea041
	bool IsManagerEnable();// 0x50de078ea041
	DownloaderTaskInfo GetTaskInfo(FString InUrl);// 0x50dd078ea041
	FString GetTaskCachePath(FString InUrl);// 0x50dc078ea041
	SolarDownloaderManager* Get();// 0x50db078ea041
	void DownloadCallbackToLuaInternal();// 0x50da078ea041
	void CreateDownloaderTask(out const DownloaderTaskInfo InTaskInfo, out const delegate SuccessHandle, out const delegate FailedHandle, out const delegate ProgressHandle);// 0x50d9078ea041
	bool CanTaskLoadFromCache(FString InUrl);// 0x50d8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DownloaderResponse
	FString URL;//[Offset: 0x0, Size: 0x10]
	int ErrorCode;//[Offset: 0x10, Size: 0x4]
	byte[] Data;//[Offset: 0x18, Size: 0x10]
	bool bWasSuccessful;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int ContentLength;//[Offset: 0x2c, Size: 0x4]
	int DataLength;//[Offset: 0x30, Size: 0x4]
	int64 Timestamp;//[Offset: 0x38, Size: 0x8]
	enum RawDataAction;//[Offset: 0x40, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DownloaderTaskInfo
	FString URL;//[Offset: 0x0, Size: 0x10]
	FString JsonRequestStr;//[Offset: 0x10, Size: 0x10]
	bool bCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int64 CompleteTimeStamp;//[Offset: 0x28, Size: 0x8]
	bool bUsingResumeTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bForceRedownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bSaveToCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	FString FileDirectory;//[Offset: 0x38, Size: 0x10]
	FString Filename;//[Offset: 0x48, Size: 0x10]
	FString FileExtension;//[Offset: 0x58, Size: 0x10]
	enum RawDataAction;//[Offset: 0x68, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DownloaderHttpTask.Object
	delegate OnTaskProgress;//[Offset: 0x28, Size: 0x10]
	delegate OnTaskSuccess;//[Offset: 0x38, Size: 0x10]
	delegate OnTaskFailed;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AndroidInputManager.Object
	delegate OnAndroidBackPressed;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ProtectBaseManager.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RegistedActorContainer
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AntiCheatSetting
	int64 ID;//[Offset: 0x0, Size: 0x8]
	int64 ValueType;//[Offset: 0x8, Size: 0x8]
	double ValueStart;//[Offset: 0x10, Size: 0x8]
	double ValueEnd;//[Offset: 0x18, Size: 0x8]
	int64 Tolerance;//[Offset: 0x20, Size: 0x8]
	int64 ProbeInterval;//[Offset: 0x28, Size: 0x8]
	FString VariableName;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScreenshotConfig
	bool EnableOnCurrentReportGameCheating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int MaxCountInRound;//[Offset: 0x4, Size: 0x4]
	FString ScreenshotMoment;//[Offset: 0x8, Size: 0x10]
	int ScreenshotInterval;//[Offset: 0x18, Size: 0x4]
	int ScreenshotWidth;//[Offset: 0x1c, Size: 0x4]
	int ScreenshotQuality;//[Offset: 0x20, Size: 0x4]
	FString ImageSaveType;//[Offset: 0x28, Size: 0x10]
	FString ScreenshotMode;//[Offset: 0x38, Size: 0x10]
	int ImageMaxSize;//[Offset: 0x48, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVibrateManager.SolarGameManager.SolarAbstractManager.SolarContainer.Object
	GameplayVibrateDataAsset* GameplayVibrateDataAsset;//[Offset: 0x50, Size: 0x8]
	<enum,enum> CurrentVibrateCategoryIntensityMobile;//[Offset: 0x58, Size: 0x50]
	<enum,enum> CurrentVibrateCategoryIntensityGamepad;//[Offset: 0xa8, Size: 0x50]
	DataTable* WeaponVibrateTable;//[Offset: 0xf8, Size: 0x8]
	VibrateConfig* VibrateConfig;//[Offset: 0x100, Size: 0x8]
	enum WeaponVibrateFactorMobile;//[Offset: 0x108, Size: 0x1]
	enum WeaponVibrateFactorGamepad;//[Offset: 0x109, Size: 0x1]
	float CacheWeaponChargeTime;//[Offset: 0x10c, Size: 0x4]
	void Stop();// 0x5f41078ea041
	void SetWeaponVibrateFactor();// 0x5f40078ea041
	void SetVibrateAbilityEnable(bool bOnEnable);// 0x5f3f078ea041
	void SetGameplayVibrateIntensityByUserSetting();// 0x5f3e078ea041
	void SetGameplayVibrateIntensity(enum Category, enum Intensity);// 0x5f3d078ea041
	void SendLoopParam(int Amplitude, int Interval);// 0x5f3c078ea041
	void PlayWeaponVibrate(int InWeaponID, enum InType, float InChargeTime);// 0x5f3b078ea041
	void PlayByParams(out const VibratePlayParams Params, const enum DeviceType);// 0x5f3a078ea041
	bool GetVibrateAbilityEnable();// 0x5f39078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VibratePlayParams
	FString ClipToPlay;//[Offset: 0x0, Size: 0x10]
	int Duration;//[Offset: 0x10, Size: 0x4]
	int Loop;//[Offset: 0x14, Size: 0x4]
	int Priority;//[Offset: 0x18, Size: 0x4]
	int Interval;//[Offset: 0x1c, Size: 0x4]
	int Amplitude;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayVibrateDataAsset.DataAsset.Object
	<enum,VibrateIntensityPlayParams> CategoryIntensityMap;//[Offset: 0x30, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VibrateIntensityPlayParams
	<enum,VibrateDevicePlayParams> IntensityMap;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VibrateDevicePlayParams
	<enum,VibratePlayParams> DeviceMap;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VibrateConfig.DataAsset.Object
	DataTable* dataTab;//[Offset: 0x30, Size: 0x8]
	<enum,VibrateWeaponFactorDeviceMap> WeaponVibrateFactorMap;//[Offset: 0x38, Size: 0x50]
	SoftObjectPath WeaponDataTabPath;//[Offset: 0x88, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VibrateWeaponFactorDeviceMap
	<enum,float> DeviceMap;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlueCircleManager.GameManagerBase.Info.Actor.Object
	BlueCircleInfo[] BlueCircleInfoList;//[Offset: 0x228, Size: 0x10]
	SolarBlueCircle* BlueCircle;//[Offset: 0x238, Size: 0x8]
	class Actor* BlueCircleClass;//[Offset: 0x240, Size: 0x8]
	int[] LevelToOutcomIDs;//[Offset: 0x248, Size: 0x10]
	int[] ExtraOutcomeIDs;//[Offset: 0x258, Size: 0x10]
	BlueCircleInfo ActiveBlueCircleInfo;//[Offset: 0x268, Size: 0x14]
	void OnRep_ActiveBlueCircleInfo();// 0x4567078ea041
	void OnLevelLoaded(FString LevelName);// 0x4566078ea041
	int[] GetExtraOutcomeIDs();// 0x4565078ea041
	BlueCircleInfo GetActiveBlueCircleInfo();// 0x4564078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameManagerBase.Info.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlueCircleInfo
	Vector CenterLocation;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
	bool bHiddenInLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBlueCircle.Actor.Object
	float HightLimit;//[Offset: 0x228, Size: 0x4]
	float MinimumDistance;//[Offset: 0x22c, Size: 0x4]
	float FadeOutTime;//[Offset: 0x230, Size: 0x4]
	StaticMeshComponent* CenterStaticMeshComponent;//[Offset: 0x238, Size: 0x8]
	StaticMeshComponent* GlowStaticMeshComponent;//[Offset: 0x240, Size: 0x8]
	void SetBlueCircleEnd();// 0x4ec2078ea041
	void OnCustomGameStateChanged(const enum NewGameState);// 0x4ec1078ea041
	StaticMeshComponent* GetGlowStaticMeshComponent();// 0x4ec0078ea041
	StaticMeshComponent* GetCenterStaticMeshComponent();// 0x4ebf078ea041
	void BlueCircleFadeout();// 0x4ebe078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSpreadAndRecoil.Object
	SolarWeapon* Weapon;//[Offset: 0x28, Size: 0x8]
	WeaponShootSpeedPatternRuntime* ShootSpeedPattern;//[Offset: 0x38, Size: 0x8]
	WeaponSpreadPatternRuntime* SpreadPattern;//[Offset: 0x40, Size: 0x8]
	WeaponRecoilPatternRuntime* RecoilPattern;//[Offset: 0x48, Size: 0x8]
	WeaponTPPKickPatternRuntime* TPPKickPattern;//[Offset: 0x50, Size: 0x8]
	WeaponGunKickPatternRuntime* GunKickPattern;//[Offset: 0x58, Size: 0x8]
	RecoverableRecoilPatternRuntime* CrossHairKickPattern;//[Offset: 0x60, Size: 0x8]
	WeaponCameraShakePatternRuntime* ShakePatternOnShot;//[Offset: 0x68, Size: 0x8]
	WeaponCameraShakePatternRuntime* ShakePatternOnScopeShot;//[Offset: 0x70, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponShootSpeedPatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPatternRuntime.Object
	SolarPattern* PattenData;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPattern.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSpreadPatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponRecoilPatternRuntime.RecoverableRecoilPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RecoverableRecoilPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponTPPKickPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponGunKickPatternRuntime.SolarIncreaseAndDecreasePatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponCameraShakePatternRuntime.SolarPatternRuntime.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundGroupPlayContextByCharacter.SoundGroupPlayContext
	SolarCharacter* Self;//[Offset: 0x8, Size: 0x8]
	SolarCharacter* Instigator;//[Offset: 0x10, Size: 0x8]
	SolarCharacter* LocalCharacter;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundGroupPlayContext
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerWeaponRecoilComponent.WeaponRecoilComponent.ActorComponent.Object
	enum CurrentCharacterState;//[Offset: 0x230, Size: 0x1]
	enum CurrentPostureType;//[Offset: 0x231, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartClipComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool IsSupportExtract();// 0x619d078ea041
	Rotator GetHandRotOffset();// 0x619c078ea041
	Vector GetHandLocOffset();// 0x619b078ea041
	float GetDropLifeSpan();// 0x619a078ea041
	FName GetCharacterHandSocket(enum ClipAttachType);// 0x6199078ea041
	FName GetCharacterHandInverseSocket(enum ClipAttachType);// 0x6198078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PartID;//[Offset: 0x5f8, Size: 0x4]
	WeaponPartDataAsset* PartDataAsset;//[Offset: 0x600, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartDataAsset.DataAsset.Object
	bool bOnlyData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int[] OnlyDataForWeaponSkinIDArray;//[Offset: 0x38, Size: 0x10]
	SoftObjectPath ViewStaticMeshPath;//[Offset: 0x48, Size: 0x18]
	Transform PreviewTransform;//[Offset: 0x60, Size: 0x30]
	SoftObjectPath FightStaticMeshPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath PartIcon;//[Offset: 0xa8, Size: 0x18]
	<int,Vector> SpecificScaleMap;//[Offset: 0xc0, Size: 0x50]
	WeaponPartWeaponAttributeDataAsset* WeaponAttributeConfig;//[Offset: 0x110, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartWeaponAttributeDataAsset.DataAsset.Object
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x30, Size: 0x10]
	WeaponPartWeaponAttributeByWeaponType[] ModifiersByWeaponType;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAttributeModifierContainer
	WeaponAttributeModifier[] Modifiers;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAttributeModifier
	GameplayTag AttributeTag;//[Offset: 0x0, Size: 0x8]
	WeaponAttributeParam[] Modifiers;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAttributeParam
	enum ParamType;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartWeaponAttributeByWeaponType
	enum WeaponType;//[Offset: 0x0, Size: 0x1]
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x8, Size: 0x10]
	WeaponPartWeaponAttributeByWeaponID[] ModifiersByWeaponID;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartWeaponAttributeByWeaponID
	int weaponid;//[Offset: 0x0, Size: 0x4]
	WeaponAttributeModifierContainer AttributeModifiers;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualBulletSpawnParameter
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	float FireTimeStamp;//[Offset: 0x4, Size: 0x4]
	float PreElapsedTime;//[Offset: 0x8, Size: 0x4]
	Vector PlayerViewDir;//[Offset: 0xc, Size: 0xc]
	Vector_NetQuantize PlayerViewLoc;//[Offset: 0x18, Size: 0xc]
	byte IsScopeOpen;//[Offset: 0x24, Size: 0x1]
	int8 FireChargePhase;//[Offset: 0x25, Size: 0x1]
	float FireChargeTime;//[Offset: 0x28, Size: 0x4]
	Vector_NetQuantize StartLoc;//[Offset: 0x2c, Size: 0xc]
	Vector_NetQuantize TargetLoc;//[Offset: 0x38, Size: 0xc]
	Vector_NetQuantizeNormal Dir;//[Offset: 0x44, Size: 0xc]
	Vector_NetQuantize MuzzleFxLoc;//[Offset: 0x50, Size: 0xc]
	float CurveOffsetAngle;//[Offset: 0x5c, Size: 0x4]
	SolarVirtualBulletHomingTarget HomingTarget;//[Offset: 0x60, Size: 0x18]
	AmmoConfig* Ammo;//[Offset: 0x78, Size: 0x8]
	FString AntiData;//[Offset: 0x80, Size: 0x10]
	Actor* Target;//[Offset: 0x90, Size: 0x8]
	Vector_NetQuantize HitTargetRelativeLocation;//[Offset: 0x98, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualBulletHomingTarget
	bool bSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bLocalCharacterLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	Actor* HomingTargetActor;//[Offset: 0x4, Size: 0x8]
	Vector CurrentLoc;//[Offset: 0xc, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpawnProjParam
	Vector_NetQuantize Start;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	byte Mode;//[Offset: 0x18, Size: 0x1]
	byte CurRocketNum;//[Offset: 0x19, Size: 0x1]
	bool bTriggerAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a, Size: 0x1]
	float Scale;//[Offset: 0x1c, Size: 0x4]
	float SpeedScale;//[Offset: 0x20, Size: 0x4]
	Actor* Target;//[Offset: 0x24, Size: 0x8]
	uint32 SpawnID;//[Offset: 0x2c, Size: 0x4]
	float Timestamp;//[Offset: 0x30, Size: 0x4]
	SolarPlayerController* InstigatorController;//[Offset: 0x34, Size: 0x8]
	Vector_NetQuantize RelativeLocation;//[Offset: 0x3c, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MutiBulletHitData
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	int8 FireMode;//[Offset: 0x4, Size: 0x1]
	int8 IsScopeOpen;//[Offset: 0x5, Size: 0x1]
	bool bValidHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	Vector WeaponLocation;//[Offset: 0x14, Size: 0xc]
	float ServerTimeSeconds;//[Offset: 0x20, Size: 0x4]
	float DamageScale;//[Offset: 0x24, Size: 0x4]
	int LastClipAmmo;//[Offset: 0x28, Size: 0x4]
	float LastFireTime;//[Offset: 0x2c, Size: 0x4]
	SolarWeaponHitAntiData[] HitAntiDatas;//[Offset: 0x30, Size: 0x10]
	BulletHitDetailData[] HitDetailDataArray;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlaySoundParams
	bool HasSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool InSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool IsInRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	int SoundFireAutoCount;//[Offset: 0x4, Size: 0x4]
	bool bTriggerSoundFireBurst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FireMode
	byte Index;//[Offset: 0x0, Size: 0x1]
	float FireRateAccumulation;//[Offset: 0x4, Size: 0x4]
	float FireRateAccumulationBurstInterval;//[Offset: 0x8, Size: 0x4]
	ParticleSystemComponent* ChargingEffect;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponProjectileSpline.Actor.Object
	SplineComponent* Spline;//[Offset: 0x228, Size: 0x8]
	SplineMeshComponent* SplineMeshComponentCache;//[Offset: 0x238, Size: 0x8]
	StaticMeshComponent* PreviewedStaticMesh;//[Offset: 0x240, Size: 0x8]
	SceneComponent* PreviewRoot;//[Offset: 0x248, Size: 0x8]
	void ShowHitPointAt(out const Vector Loc);// 0x5fa5078ea041
	void SetPreviewTransform(out const Vector PreviewLoc, out const Vector PreviewUpDir, out const Vector PreviewScale);// 0x5fa4078ea041
	void SetPoints(out const Vector[] Points);// 0x5fa3078ea041
	void SetNeedUpdateDisplayThrowTrajectory(bool Value);// 0x5fa2078ea041
	void K2_OnDisplaySummonPreview();// 0x5fa1078ea041
	void HideHitPoint();// 0x5fa0078ea041
	void HideAllSummonPreview();// 0x5f9f078ea041
	void Hide();// 0x5f9e078ea041
	SplineMeshComponent* GetSplineMeshComponent();// 0x5f9d078ea041
	void DrawSplineMesh(out const Vector[] InPredictPoints);// 0x5f9c078ea041
	void ChangeSummonPreviewAttachParent();// 0x5f9b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x600, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x658, Size: 0xc]
	float SplineBoundaryMin;//[Offset: 0x664, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x668, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x678, Size: 0x8]
	float SplineBoundaryMax;//[Offset: 0x680, Size: 0x4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x684, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x684, Size: 0x1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x684, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x685, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x688, Size: 0x4]
	void UpdateMesh();// 0x6cbf078ea041
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x6cbe078ea041
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x6cbd078ea041
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x6cbc078ea041
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x6cbb078ea041
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x6cba078ea041
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x6cb9078ea041
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x6cb8078ea041
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x6cb7078ea041
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x6cb6078ea041
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x6cb5078ea041
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x6cb4078ea041
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x6cb3078ea041
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x6cb2078ea041
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x6cb1078ea041
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x6cb0078ea041
	Vector GetStartTangent();// 0x6caf078ea041
	Vector2D GetStartScale();// 0x6cae078ea041
	float GetStartRoll();// 0x6cad078ea041
	Vector GetStartPosition();// 0x6cac078ea041
	Vector2D GetStartOffset();// 0x6cab078ea041
	Vector GetSplineUpDir();// 0x6caa078ea041
	byte GetForwardAxis();// 0x6ca9078ea041
	Vector GetEndTangent();// 0x6ca8078ea041
	Vector2D GetEndScale();// 0x6ca7078ea041
	float GetEndRoll();// 0x6ca6078ea041
	Vector GetEndPosition();// 0x6ca5078ea041
	Vector2D GetEndOffset();// 0x6ca4078ea041
	float GetBoundaryMin();// 0x6ca3078ea041
	float GetBoundaryMax();// 0x6ca2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x38, Size: 0x8]
	Vector EndTangent;//[Offset: 0x40, Size: 0xc]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x540, Size: 0x68]
	InterpCurveVector SplineInfo;//[Offset: 0x5a8, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5c0, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5d8, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x5f0, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x60c, Size: 0x4]
	float Duration;//[Offset: 0x610, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x617, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61a, Size: 0x1]
	float LoopPosition;//[Offset: 0x61c, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x620, Size: 0xc]
	void UpdateSpline();// 0x41f5078ea041
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x41f4078ea041
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x41f3078ea041
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x41f2078ea041
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x41f1078ea041
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x41f0078ea041
	void SetSplineWorldPoints(out const Vector[] Points);// 0x41ef078ea041
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x41ee078ea041
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x41ed078ea041
	void SetSplineLocalPoints(out const Vector[] Points);// 0x41ec078ea041
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x41eb078ea041
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x41ea078ea041
	void SetDrawDebug(bool bShow);// 0x41e9078ea041
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x41e8078ea041
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x41e7078ea041
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x41e6078ea041
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x41e5078ea041
	bool IsClosedLoop();// 0x41e4078ea041
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x41e3078ea041
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x41e2078ea041
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x41e1078ea041
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x41e0078ea041
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x41df078ea041
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x41de078ea041
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x41dd078ea041
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x41dc078ea041
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x41db078ea041
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x41da078ea041
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41d9078ea041
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41d8078ea041
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41d7078ea041
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41d6078ea041
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x41d5078ea041
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x41d4078ea041
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x41d3078ea041
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x41d2078ea041
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41d1078ea041
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41d0078ea041
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41cf078ea041
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41ce078ea041
	byte GetSplinePointType(int PointIndex);// 0x41cd078ea041
	float GetSplineLength();// 0x41cc078ea041
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x41cb078ea041
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x41ca078ea041
	Vector GetScaleAtSplineInputKey(float InKey);// 0x41c9078ea041
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x41c8078ea041
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41c7078ea041
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41c6078ea041
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41c5078ea041
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41c4078ea041
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41c3078ea041
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41c2078ea041
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41c1078ea041
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41c0078ea041
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41bf078ea041
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41be078ea041
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41bd078ea041
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41bc078ea041
	int GetNumberOfSplineSegments();// 0x41bb078ea041
	int GetNumberOfSplinePoints();// 0x41ba078ea041
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41b9078ea041
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41b8078ea041
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41b7078ea041
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41b6078ea041
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x41b5078ea041
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x41b4078ea041
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41b3078ea041
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x41b2078ea041
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x41b1078ea041
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x41b0078ea041
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x41af078ea041
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x41ae078ea041
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41ad078ea041
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x41ac078ea041
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x41ab078ea041
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x41aa078ea041
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x41a9078ea041
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a8078ea041
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x41a7078ea041
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a6078ea041
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x41a5078ea041
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a4078ea041
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a3078ea041
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a2078ea041
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x41a1078ea041
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x41a0078ea041
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x419f078ea041
	void ClearSplinePoints(bool bUpdateSpline);// 0x419e078ea041
	void AddSplineWorldPoint(out const Vector Position);// 0x419d078ea041
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x419c078ea041
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x419b078ea041
	void AddSplineLocalPoint(out const Vector Position);// 0x419a078ea041
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x4199078ea041
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x4198078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplineMetadata.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleLoopListener.Object
	void OnParticleFinished(ParticleSystemComponent* PS);// 0x5f47078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAnimationInfo
	SoftObjectPath AssetPath;//[Offset: 0x0, Size: 0x18]
	float PlayRate;//[Offset: 0x18, Size: 0x4]
	bool bUseAdaptivePlayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	AnimMontage* Animation;//[Offset: 0x20, Size: 0x8]
	AnimMontage* AnimOverride;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShakeData
	class CameraShake* CameraShakeClass;//[Offset: 0x0, Size: 0x8]
	CurveFloat* CameraShakeScaleCurve;//[Offset: 0x8, Size: 0x8]
	float ScaleMultiplier;//[Offset: 0x10, Size: 0x4]
	float ScopeScaleMultiplier;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AttachedEffectParam
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Scale;//[Offset: 0x18, Size: 0xc]
	byte LocationType;//[Offset: 0x24, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x26, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LocationEffectParam
	Rotator Rotation;//[Offset: 0x0, Size: 0xc]
	Vector Scale;//[Offset: 0xc, Size: 0xc]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum PoolingMethod;//[Offset: 0x19, Size: 0x1]
	bool bAutoActivateSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartsComponent.ActorComponent.Object
	WeaponPartScopeComp* ScopeComp;//[Offset: 0xc8, Size: 0x8]
	WeaponPartClipComp* ClipComp;//[Offset: 0xd0, Size: 0x8]
	WeaponPartMuzzleComp* MuzzleComp;//[Offset: 0xd8, Size: 0x8]
	WeaponPartGripComp* GripComp;//[Offset: 0xe0, Size: 0x8]
	WeaponPartGunStockComp* GunStockComp;//[Offset: 0xe8, Size: 0x8]
	StaticMeshComponent* CrossHairPlane;//[Offset: 0xf0, Size: 0x8]
	StaticMeshComponent* RedCrosshairPanel;//[Offset: 0xf8, Size: 0x8]
	bool bQuickScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	FName ScopeSocket;//[Offset: 0x104, Size: 0x8]
	FName GripSocket;//[Offset: 0x10c, Size: 0x8]
	FName ClipSocket;//[Offset: 0x114, Size: 0x8]
	FName OldClipSocket;//[Offset: 0x11c, Size: 0x8]
	FName MuzzleSocket;//[Offset: 0x124, Size: 0x8]
	FName GunStockSocket;//[Offset: 0x12c, Size: 0x8]
	SolarWeapon* MyWeaponActor;//[Offset: 0x138, Size: 0x8]
	void UpdateSinglePartHoldView(WeaponPartComp* PartComp, bool bLocal);// 0x61a5078ea041
	void ShowParts(bool Show, enum Flag);// 0x61a4078ea041
	bool IsPartExist(int ID);// 0x61a3078ea041
	bool IsDefaultPart(const int PartID);// 0x61a2078ea041
	bool IsAmmoExist(int ID);// 0x61a1078ea041
	WeaponPartComp*[] GetValidWeaponParts();// 0x61a0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartScopeComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	float FovValue;//[Offset: 0x6bc, Size: 0x4]
	float HipToAdsTime;//[Offset: 0x6c0, Size: 0x4]
	CurveFloat* FovChangeCurve;//[Offset: 0x6c8, Size: 0x8]
	float HitEffectScale;//[Offset: 0x6d0, Size: 0x4]
	MaterialInstance* ScopeCrossHairMaterial;//[Offset: 0x7d8, Size: 0x8]
	StaticMesh* ScopeCrossHairMesh;//[Offset: 0x7e0, Size: 0x8]
	MaterialInstance* ScopeEnemyMakerMaterial;//[Offset: 0x7e8, Size: 0x8]
	StaticMesh* ScopeEnemyMakerMesh;//[Offset: 0x7f0, Size: 0x8]
	StaticMesh* ScopeMeshForFPP;//[Offset: 0x7f8, Size: 0x8]
	StaticMesh* ScopeMeshForTPP;//[Offset: 0x800, Size: 0x8]
	void OpenScope(float Time);// 0x61ad078ea041
	bool IsOpened();// 0x61ac078ea041
	enum GetScopeType();// 0x61ab078ea041
	Vector GetScopeAimCenterPoint();// 0x61aa078ea041
	Rotator GetFPPRotation();// 0x61a9078ea041
	Vector GetFPPLocation();// 0x61a8078ea041
	float GetDistanceToEyeWhenScope();// 0x61a7078ea041
	void CloseScope();// 0x61a6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartMuzzleComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool HasSilencer();// 0x619f078ea041
	bool HasFlameArrester();// 0x619e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartGripComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartGunStockComp.WeaponPartComp.WeaponPartStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponShotHitResult
	Actor* Actor;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize Location;//[Offset: 0x8, Size: 0xc]
	FName BoneName;//[Offset: 0x14, Size: 0x8]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x1c, Size: 0xc]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	PrimitiveComponent* Component;//[Offset: 0x2c, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x34, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OverrideBulletStruct
	class SolarBullet* PrimaryOverrideBulletClass;//[Offset: 0x0, Size: 0x8]
	class SolarBullet* SecondaryOverrideBulletClass;//[Offset: 0x8, Size: 0x8]
	class SolarBullet* PrimaryOverrideTraceBulletClass;//[Offset: 0x10, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChargingPilePreset
	SoftObjectPath NormalMeshPath;//[Offset: 0x0, Size: 0x18]
	SoftObjectPath BrokenMeshPath;//[Offset: 0x18, Size: 0x18]
	SoftObjectPath BrokenMatPath;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath RangeRingPath;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath RangeRingMatPath;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath ChargeCirclePath;//[Offset: 0x78, Size: 0x18]
	SoftObjectPath ChargeCircleMatPath;//[Offset: 0x90, Size: 0x18]
	SoftObjectPath ChargeParticleEffectPath;//[Offset: 0xa8, Size: 0x18]
	SoftObjectPath OutlineMatPath;//[Offset: 0xc0, Size: 0x18]
	Transform RangeRingTrans;//[Offset: 0xe0, Size: 0x30]
	Transform ChargeCircleTrans;//[Offset: 0x110, Size: 0x30]
	Vector BeamStartPos;//[Offset: 0x140, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarDestructibleActor.StaticMeshActor.Actor.Object
	byte[] OnHitIgnoreChannels;//[Offset: 0x238, Size: 0x10]
	float AddForceCoefficient;//[Offset: 0x248, Size: 0x4]
	float BrokenDestroyTime;//[Offset: 0x24c, Size: 0x4]
	bool bChildDetachOnBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	FString BrokenSoundName;//[Offset: 0x258, Size: 0x10]
	Vector BrokenSoundLocationOffset;//[Offset: 0x268, Size: 0xc]
	void OnDestructibleActorHit(Actor* SelfActor, Actor* OtherActor, out const HitResult Hit, float SpeedDifference);// 0x50d7078ea041
	void OnClientBrokenEffect();// 0x50d6078ea041
	void OnBroken(SolarVehiclePawn* VehiclePawn, float SpeedDifference, Vector Impulse, Vector ImpactPoint);// 0x50d5078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x228, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x231, Size: 0x1]
	void SetMobility(byte InMobility);// 0x4e91078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleEjectParams
	float EjectTime;//[Offset: 0x0, Size: 0x4]
	float EjectDistance;//[Offset: 0x4, Size: 0x4]
	float EjectBreakableTime;//[Offset: 0x8, Size: 0x4]
	float EjectCameraFadeOutTime;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterTagListenerForOrnamentComp
	<OrnamentCompAndVisibilityConfigPair> OrnamentCompPairs;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OrnamentCompAndVisibilityConfigPair
	SceneComponent* OrnamentComp;//[Offset: 0x0, Size: 0x8]
	OrnamentComponentVisibilityConfig* VisibilityConfig;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OrnamentComponentVisibilityConfig.DataAsset.Object
	GameplayTagRequirements VisibleTagRequirements;//[Offset: 0x30, Size: 0x50]
	GameplayTag VisibilityFlagTag;//[Offset: 0x80, Size: 0x8]
	GameplayTagRequirements GetVisibleTagRequirements();// 0x4b33078ea041
	GameplayTag GetVisibilityFlagTag();// 0x4b32078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OrnamentMontageInfo
	AnimMontage* ActiveMontage;//[Offset: 0x0, Size: 0x8]
	GameplayTag OrnamentTag;//[Offset: 0x8, Size: 0x8]
	bool bForcePlayBit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBackpackActor.Actor.Object
	SceneComponent* BackpackRoot;//[Offset: 0x228, Size: 0x8]
	BackpackVertAnimMeshComponent* BackpackMesh;//[Offset: 0x230, Size: 0x8]
	SolarCharacter* BackPackActorOwner;//[Offset: 0x238, Size: 0x8]
	SolarBackpackSFX*[] BackpackSFX;//[Offset: 0x240, Size: 0x10]
	SolarBackpackSFX* BackpackOffgasSFX;//[Offset: 0x250, Size: 0x8]
	bool bEnableMeshEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 0x1]
	class SolarBackpackSFX* TrailClass;//[Offset: 0x270, Size: 0x8]
	class SolarBackpackSFX* OffgasClass;//[Offset: 0x278, Size: 0x8]
	<ParticleSystemComponent*> ListenSet;//[Offset: 0x280, Size: 0x50]
	FString AssemblingId;//[Offset: 0x2d8, Size: 0x10]
	FName KnapsackFlySoundName;//[Offset: 0x2e8, Size: 0x8]
	FName StartKnapsackLandingSoundName;//[Offset: 0x2f0, Size: 0x8]
	FName StopKnapsackLandingSoundName;//[Offset: 0x2f8, Size: 0x8]
	FName StartWallRunSoundName;//[Offset: 0x300, Size: 0x8]
	FName StopWallRunSoundName;//[Offset: 0x308, Size: 0x8]
	FName PrimaryWeaponAttachSocketName;//[Offset: 0x310, Size: 0x8]
	FName SecondaryWeaponAttachSocketName;//[Offset: 0x318, Size: 0x8]
	void SetBackpackVisibilityByFlag(bool bNewVisibility, int Flag);// 0x4ea7078ea041
	void RefreshActorEffect();// 0x4ea6078ea041
	void OnMeshEffectFactorChange();// 0x4ea5078ea041
	void OnChildPSCompPreActive(ParticleSystemComponent* PSComponent);// 0x4ea4078ea041
	void OnChildPSCompFinish(ParticleSystemComponent* PSComponent);// 0x4ea3078ea041
	bool IsFly();// 0x4ea2078ea041
	bool IsCharging();// 0x4ea1078ea041
	bool HasEnergy();// 0x4ea0078ea041
	float GetBackpackOriginScale();// 0x4e9f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BackpackVertAnimMeshComponent.VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VertexAnimInfo DefaultAnimInfo;//[Offset: 0x628, Size: 0x10]
	<byte,VertexAnimInfo> BackPackAnimInfoMap;//[Offset: 0x638, Size: 0x50]
	SolarCharacter* SolarCharacter;//[Offset: 0x688, Size: 0x8]
	SolarBackpackActor* BackPackActor;//[Offset: 0x690, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VertAnimMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void PlayInfo(out const VertexAnimInfo InAnimInfo);// 0x44fc078ea041
	void Play(int InStartFrame, int InEndFrame, float InLength, bool InLoop);// 0x44fb078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VertexAnimInfo
	int StartFrame;//[Offset: 0x0, Size: 0x4]
	int EndFrame;//[Offset: 0x4, Size: 0x4]
	float Length;//[Offset: 0x8, Size: 0x4]
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBackpackSFX.Actor.Object
	void OnPropellingModeChanged(enum PropellingMode);// 0x4eb3078ea041
	ParticleSystemComponent* GetTrailEffectComponent();// 0x4eb2078ea041
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal);// 0x4eb1078ea041
	void BackpackSFXEnd();// 0x4eb0078ea041
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0x4eaf078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicateMaxPileData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int MaxPile;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ReplicateItemData
	int ItemID;//[Offset: 0x0, Size: 0x4]
	int count;//[Offset: 0x4, Size: 0x4]
	int Slot;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponIgnoreScopeLists
	enum[] Weapon1IgnoreList;//[Offset: 0x0, Size: 0x10]
	enum[] Weapon2IgnoreList;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BackpackJetPrepelInfo
	bool IsPropelling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int PropellingCounter;//[Offset: 0x4, Size: 0x4]
	byte JetType;//[Offset: 0x8, Size: 0x1]
	bool bCheckGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHitTraceComponent.ActorComponent.Object
	SolarCharacter* CharacterOwner;//[Offset: 0xc0, Size: 0x8]
	SolarHitTraceActor*[] CreatedHitTraceActors;//[Offset: 0xc8, Size: 0x10]
	void OnHitTraceActorDestroyed(Actor* Actor);// 0x5264078ea041
	void OnCharacterTakeDamage(out const HitTraceInfo HitTraceInfo);// 0x5263078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHitTraceActor.Actor.Object
	HitTraceInfo HitTraceInfo;//[Offset: 0x228, Size: 0x28]
	float RadiusValue;//[Offset: 0x250, Size: 0x4]
	float HeightValue;//[Offset: 0x254, Size: 0x4]
	float RadiusValueWithCameraSphere;//[Offset: 0x258, Size: 0x4]
	float DistanceFromCamera;//[Offset: 0x25c, Size: 0x4]
	float RestrictedZoneRadius;//[Offset: 0x260, Size: 0x4]
	SolarCharacter* CharacterOwner;//[Offset: 0x268, Size: 0x8]
	CurveFloat* HitDistanceOffsetCurve;//[Offset: 0x270, Size: 0x8]
	CurveFloat* HitPitchVerticalValueCurve;//[Offset: 0x278, Size: 0x8]
	CurveFloat* HitPitchHorizontalValueCurve;//[Offset: 0x280, Size: 0x8]
	void UpdateTraceActor();// 0x5262078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HitTraceInfo
	Actor* CausingActor;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantizeNormal TraceDirection;//[Offset: 0x8, Size: 0xc]
	Vector DamageCauserLocation;//[Offset: 0x14, Size: 0xc]
	float Damage;//[Offset: 0x20, Size: 0x4]
	enum WeaponType;//[Offset: 0x24, Size: 0x1]
	bool bIsVehicleHitTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool IsBump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeamRescueComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb8, Size: 0x8]
	float TempReqTime;//[Offset: 0xd4, Size: 0x4]
	float RequestTimeout;//[Offset: 0xd8, Size: 0x4]
	bool bSendRequest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	bool bLastRescueBtnVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 0x1]
	SolarCharacter* ClosestTarget;//[Offset: 0xe0, Size: 0x8]
	SolarCharacter*[] NearByDeathVergeTeamMates;//[Offset: 0xf0, Size: 0x10]
	void TryRescueClosestTeammateLuaCall();// 0x5e07078ea041
	void TryRescueClosestTeammate();// 0x5e06078ea041
	void ShowTeamRescueToUI(bool IsShow);// 0x5e05078ea041
	void SetRescueBtnVisibility(bool bIsVisible);// 0x5e04078ea041
	void ReqStartTeamRescue(SolarCharacter* TargetCharacter);// 0x5e03078ea041
	void ReqCancelTeamRescure();// 0x5e02078ea041
	void OnRescueStateChangeInternal();// 0x5e01078ea041
	void OnRescueStateChange();// 0x5e00078ea041
	void DetectRescueTeammate(float DeltaTime);// 0x5dff078ea041
	bool CanRescue(SolarCharacter* Player, const bool bStart);// 0x5dfe078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUAVRescue.SolarUAV.SummonItemBase.Pawn.Actor.Object
	enum NewState;//[Offset: 0x549, Size: 0x1]
	GameplayTagContainer HideIfCharacterOwnTags;//[Offset: 0x550, Size: 0x20]
	AnimationAsset* SuspendAnim_Active_NotWork;//[Offset: 0x570, Size: 0x8]
	AnimationAsset* SuspendAnim_Active_Work;//[Offset: 0x578, Size: 0x8]
	AnimationAsset* SuspendAnim_Deactive;//[Offset: 0x580, Size: 0x8]
	AnimationAsset* ActiveAnim;//[Offset: 0x588, Size: 0x8]
	AnimationAsset* DeactiveAnim;//[Offset: 0x590, Size: 0x8]
	AnimationAsset* BeginWorkAnim;//[Offset: 0x598, Size: 0x8]
	AnimationAsset* EndWorkAnim;//[Offset: 0x5a0, Size: 0x8]
	AnimationAsset* ExplodeAnim;//[Offset: 0x5a8, Size: 0x8]
	ParticleSystem* ActiveEffect;//[Offset: 0x5b0, Size: 0x8]
	ParticleSystem* AppearBeginEffect;//[Offset: 0x5b8, Size: 0x8]
	FName AppearBeginEffectSocket;//[Offset: 0x5c0, Size: 0x8]
	ParticleSystem* JetEffect;//[Offset: 0x5c8, Size: 0x8]
	FName JetEffectSocket;//[Offset: 0x5d0, Size: 0x8]
	Transform JetEffectTrans;//[Offset: 0x5e0, Size: 0x30]
	ParticleSystem* ActiveLoopEffect;//[Offset: 0x610, Size: 0x8]
	ParticleSystem* ChaActiveEffect;//[Offset: 0x618, Size: 0x8]
	ParticleSystem* ExplodeEffect;//[Offset: 0x620, Size: 0x8]
	ParticleSystem* DeathVergeEffect;//[Offset: 0x628, Size: 0x8]
	FName ChaActiveEffectSocket;//[Offset: 0x630, Size: 0x8]
	float AppearEffectLength;//[Offset: 0x638, Size: 0x4]
	MaterialInstance* MatAppearing;//[Offset: 0x640, Size: 0x8]
	MatAppearingData[] MatAppearingData;//[Offset: 0x648, Size: 0x10]
	MaterialInstance* MatAppearEndBody;//[Offset: 0x658, Size: 0x8]
	MaterialInstance* MatAppearEndEye;//[Offset: 0x660, Size: 0x8]
	FString BeginSound;//[Offset: 0x668, Size: 0x10]
	FString EndSound;//[Offset: 0x678, Size: 0x10]
	FString ActiveChaSound;//[Offset: 0x688, Size: 0x10]
	FString ActiveAnimSound;//[Offset: 0x698, Size: 0x10]
	FString BeginActiveLoopSound;//[Offset: 0x6a8, Size: 0x10]
	FString EndActiveLoopSound;//[Offset: 0x6b8, Size: 0x10]
	FString DeactiveAnimSound;//[Offset: 0x6c8, Size: 0x10]
	FString ExplodeSound;//[Offset: 0x6d8, Size: 0x10]
	FString BeginDeathVergeLoopSound;//[Offset: 0x6e8, Size: 0x10]
	FString EndDeathVergeLoopSound;//[Offset: 0x6f8, Size: 0x10]
	float ChaSpeedThreshold;//[Offset: 0x708, Size: 0x4]
	float RotateSpeed;//[Offset: 0x70c, Size: 0x4]
	float YawOffset;//[Offset: 0x710, Size: 0x4]
	CurveFloat* ActivatingScaleCurve;//[Offset: 0x718, Size: 0x8]
	CurveFloat* DeactivatingScaleCurve;//[Offset: 0x720, Size: 0x8]
	CurveFloat* TargetSpeedByDistance;//[Offset: 0x728, Size: 0x8]
	float Acceleration;//[Offset: 0x730, Size: 0x4]
	float MaxDistance;//[Offset: 0x734, Size: 0x4]
	Vector DefaultLocationOffset;//[Offset: 0x744, Size: 0xc]
	Vector CrouchLocationOffset;//[Offset: 0x750, Size: 0xc]
	float TargetLocationOffsetSpeed;//[Offset: 0x75c, Size: 0x4]
	float ActiveDuration;//[Offset: 0x784, Size: 0x4]
	float ActiveEffectLength;//[Offset: 0x788, Size: 0x4]
	float DeathVergeHealthThreshold;//[Offset: 0x78c, Size: 0x4]
	SoftObjectPath UAVIcon;//[Offset: 0x790, Size: 0x18]
	ParticleSystemComponent* DeathVergeEffectHandle;//[Offset: 0x7b8, Size: 0x8]
	ParticleSystemComponent* ActiveLoopEffectHandle;//[Offset: 0x7c0, Size: 0x8]
	bool bFollowCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1]
	bool bAppearEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cb, Size: 0x1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 0x1]
	bool bPermanent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x831, Size: 0x1]
	bool bExplodeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x832, Size: 0x1]
	float HealTickInterval;//[Offset: 0x858, Size: 0x4]
	float HealFirstTimeDelay;//[Offset: 0x85c, Size: 0x4]
	float HealHealthAmount;//[Offset: 0x860, Size: 0x4]
	float HealShieldAmount;//[Offset: 0x864, Size: 0x4]
	ParticleSystem* HealLineEffect;//[Offset: 0x868, Size: 0x8]
	FName HealMeshSocket;//[Offset: 0x870, Size: 0x8]
	FString BeginHealSound;//[Offset: 0x878, Size: 0x10]
	FString BeginHealLoopSound;//[Offset: 0x888, Size: 0x10]
	FString EndHealSound;//[Offset: 0x898, Size: 0x10]
	FString EndHealLoopSound;//[Offset: 0x8a8, Size: 0x10]
	FString BeginHealHPLoopSound;//[Offset: 0x8b8, Size: 0x10]
	FString EndHealHPLoopSound;//[Offset: 0x8c8, Size: 0x10]
	FString BeginHealShieldLoopSound;//[Offset: 0x8d8, Size: 0x10]
	FString EndHealShieldLoopSound;//[Offset: 0x8e8, Size: 0x10]
	ParticleSystemComponent* HealLineEffectHandle;//[Offset: 0x8f8, Size: 0x8]
	ParticleSystem* RescueEffect;//[Offset: 0x908, Size: 0x8]
	ParticleSystem* RescueEffect_Enermy;//[Offset: 0x910, Size: 0x8]
	Transform RescueEffectTransform;//[Offset: 0x920, Size: 0x30]
	FName RescueMeshSocket;//[Offset: 0x950, Size: 0x8]
	float RescueTime;//[Offset: 0x958, Size: 0x4]
	bool bCheckRescueBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 0x1]
	float CheckRescueBlockInteval;//[Offset: 0x960, Size: 0x4]
	FString BeginRescueLoopSound;//[Offset: 0x968, Size: 0x10]
	FString EndRescueLoopSound;//[Offset: 0x978, Size: 0x10]
	FString CompleteRescueSound;//[Offset: 0x988, Size: 0x10]
	ParticleSystemComponent* RescueEffectHandle;//[Offset: 0x998, Size: 0x8]
	MaterialInstanceDynamic* MatInstanceAppearingBody;//[Offset: 0x9b0, Size: 0x8]
	MaterialInstanceDynamic* MatInstanceAppearingEye;//[Offset: 0x9b8, Size: 0x8]
	bool bNavigateToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0, Size: 0x1]
	float RecordInterval;//[Offset: 0x9c4, Size: 0x4]
	float NavigateInterval;//[Offset: 0x9c8, Size: 0x4]
	float BeginNavigateDistance;//[Offset: 0x9cc, Size: 0x4]
	float EndNavigateDistance;//[Offset: 0x9d0, Size: 0x4]
	class GameplayEffect* UAVHealBuffGameplayEffect;//[Offset: 0xa00, Size: 0x8]
	class GameplayEffect* UAVRescueGameplayEffect;//[Offset: 0xa08, Size: 0x8]
	void TickRescue(float DeltaTime);// 0x5ed3078ea041
	void TickNavigate(float DeltaTime);// 0x5ed2078ea041
	void TickHeal(float DeltaTime);// 0x5ed1078ea041
	void ServerSetRescueBlocked(bool bBlocked);// 0x5ed0078ea041
	void OnRescueComplete();// 0x5ecf078ea041
	void OnRep_NewState();// 0x5ece078ea041
	void OnRep_Active();// 0x5ecd078ea041
	void OnCheckUAVHide(const GameplayTag Tag, int NewCount);// 0x5ecc078ea041
	void OnCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x5ecb078ea041
	void OnCharacterDeathVergeStatusTag(const GameplayTag Tag, int NewCount);// 0x5eca078ea041
	void OnCharacterDeathStatusTag(const GameplayTag Tag, int NewCount);// 0x5ec9078ea041
	float GetRescueTime();// 0x5ec8078ea041
	void CompleteRescueImmediate();// 0x5ec7078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUAV.SummonItemBase.Pawn.Actor.Object
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad, Size: 0x1]
	float DebugLineThickness;//[Offset: 0x4b0, Size: 0x4]
	SkeletalMeshComponent* Mesh;//[Offset: 0x4b8, Size: 0x8]
	FName AttachCharacterSocketName;//[Offset: 0x4c0, Size: 0x8]
	AnimationAsset* AppearAnim;//[Offset: 0x4c8, Size: 0x8]
	float AppearAnimLength;//[Offset: 0x4d0, Size: 0x4]
	AnimationAsset* DisappearAnim;//[Offset: 0x4d8, Size: 0x8]
	float DisppearAnimLength;//[Offset: 0x4e0, Size: 0x4]
	bool bProbeCollisionConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	float ProbeCollisionInterval;//[Offset: 0x4f4, Size: 0x4]
	float ProbeCollisionRadius;//[Offset: 0x4f8, Size: 0x4]
	float AvoidCollisionMaxHeight;//[Offset: 0x4fc, Size: 0x4]
	float AvoidCollisionOverTime;//[Offset: 0x500, Size: 0x4]
	float AvoidCollisionCDTime;//[Offset: 0x504, Size: 0x4]
	void UAVDestroy();// 0x5ec6078ea041
	void OnCharacterInVehicleTag(const GameplayTag Tag, int NewCount);// 0x5ec5078ea041
	void Disappear();// 0x5ec4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SummonItemBase.Pawn.Actor.Object
	delegate OnDeath;//[Offset: 0x2b8, Size: 0x1]
	AkComponent* AkAudioComponent;//[Offset: 0x2c0, Size: 0x8]
	StaticMeshComponent* HPBar;//[Offset: 0x2c8, Size: 0x8]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x2d0, Size: 0x4]
	SolarCharacter* SourceSummoner;//[Offset: 0x2d4, Size: 0x8]
	SolarPlayerState* SourceSummonerPS;//[Offset: 0x2dc, Size: 0x8]
	enum DeathReason;//[Offset: 0x2e4, Size: 0x1]
	float CurrentHealth;//[Offset: 0x2e8, Size: 0x4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	HitSoundReplicationData HitSoundData;//[Offset: 0x2f0, Size: 0x80]
	float FunctionalTimerMax;//[Offset: 0x374, Size: 0x4]
	float FunctionalTimerDelta;//[Offset: 0x378, Size: 0x4]
	Vector CenterOffset;//[Offset: 0x394, Size: 0xc]
	GameplayEffectSpecHandle GEToSelfHandle;//[Offset: 0x3a0, Size: 0x10]
	GameplayEffectSpecHandle GEToTargetHandle;//[Offset: 0x3b0, Size: 0x10]
	enum SummonItemType;//[Offset: 0x3c0, Size: 0x1]
	float MaxHealth;//[Offset: 0x3c4, Size: 0x4]
	float ReducedHealth;//[Offset: 0x3c8, Size: 0x4]
	float DelayDestroyTime;//[Offset: 0x3cc, Size: 0x4]
	bool bTeammateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	bool bSuicideWithSummonerChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 0x1]
	float TimeDuration;//[Offset: 0x3d4, Size: 0x4]
	bool bOnlyOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 0x1]
	bool bEnableHPBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 0x1]
	bool bHPDefaultVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da, Size: 0x1]
	FName HPBarTagName;//[Offset: 0x3dc, Size: 0x8]
	FName HPBarPercentName;//[Offset: 0x3e4, Size: 0x8]
	FName HPBarColorName;//[Offset: 0x3ec, Size: 0x8]
	LinearColor HPBarColorTeammate;//[Offset: 0x3f4, Size: 0x10]
	LinearColor HPBarColorEnemy;//[Offset: 0x404, Size: 0x10]
	int HPBarMaterialIndex;//[Offset: 0x414, Size: 0x4]
	Vector CenterLocationOffset;//[Offset: 0x418, Size: 0xc]
	float DestroyDeathWithinSeconds;//[Offset: 0x424, Size: 0x4]
	bool bSupportAssistAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	WeaponAssistAimTargetConfig AssistAimTargetConfig;//[Offset: 0x430, Size: 0x48]
	bool bCanAffectedByEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 0x1]
	bool bShowDamageText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 0x1]
	SolarSpawnAdjustConfig* SpawnAdjustConfig;//[Offset: 0x480, Size: 0x8]
	bool bAddCoreToActorCollisionIgnoreSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 0x1]
	bool bDestroyWhenHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 0x1]
	bool bEnableHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48a, Size: 0x1]
	FName HitSoundSubTableKey;//[Offset: 0x48c, Size: 0x8]
	FName HitSoundSubTableKey2;//[Offset: 0x494, Size: 0x8]
	SolarLandscapeListenerConfig LandscapeListenerConfig;//[Offset: 0x49c, Size: 0x10]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 0x1]
	void SwitchFunctionalTimer(bool InbEnable, float InMaxTime);// 0x4d55078ea041
	void Suicide();// 0x4d54078ea041
	bool RequestPlaySoundByTeam(out const <enum,SolarSummonSoundData> InSoundData);// 0x4d53078ea041
	bool RequestPlaySound(out const FString[] InSoundData);// 0x4d52078ea041
	void ReceiveUpdateHealthEvent(float InCurrentHealthRate);// 0x4d51078ea041
	void ReceiveUpdateFunctionalTimerEvent(float InTimerRate);// 0x4d50078ea041
	void ReceiveDeathEvent(enum InDeathReason);// 0x4d4f078ea041
	void OnSourceCharacterChange();// 0x4d4e078ea041
	void OnRep_HitSoundData(out const HitSoundReplicationData LastData);// 0x4d4d078ea041
	void OnRep_Dead();// 0x4d4c078ea041
	void OnRep_CurrentHealth();// 0x4d4b078ea041
	void OnLocalPlayerSpectateTargetChanged(SolarPlayerState* InOldTarget, SolarSpectateInfo* InSpectateInfo);// 0x4d4a078ea041
	void K2_PlaySoundGroup(FName InSoundGroupName, SoundGroupPlayContextByCharacter InContext);// 0x4d49078ea041
	bool IsDead();// 0x4d48078ea041
	SolarCharacter* GetSourceSummoner();// 0x4d47078ea041
	float GetMaxHealth();// 0x4d46078ea041
	float GetCurrentHealth();// 0x4d45078ea041
	class Object GetClassType();// 0x4d44078ea041
	void BindLocalPlayerSpectateDelegates(SolarSpectateInfo* InSpectateInfo);// 0x4d43078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSummonSoundData
	FString[] SoundNames;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MatAppearingData
	CurveFloat* MatCurve;//[Offset: 0x0, Size: 0x8]
	FName MatParam;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAssistAimTargetConfig
	Vector2D BaseFollowTriggerExtent;//[Offset: 0x0, Size: 0x8]
	Vector2D BaseFollowStopExtent;//[Offset: 0x8, Size: 0x8]
	BaseFollowExtentByTag[] BaseFollowExtentByTags;//[Offset: 0x10, Size: 0x10]
	Vector2D TargetVelocityFollowTriggerExtent;//[Offset: 0x20, Size: 0x8]
	Vector2D LockAimingExtent;//[Offset: 0x28, Size: 0x8]
	Vector2D GlobalSensitivityScaleTriggerExtent;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BaseFollowExtentByTag
	GameplayTagRequirements TagRequirements;//[Offset: 0x0, Size: 0x50]
	Vector2D BaseFollowTriggerExtent;//[Offset: 0x50, Size: 0x8]
	Vector2D BaseFollowStopExtent;//[Offset: 0x58, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarSpawnAdjustConfig.DataAsset.Object
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	byte[] AdjustBlockTypes;//[Offset: 0x38, Size: 0x10]
	Vector AdjustDetectBoxExtent;//[Offset: 0x48, Size: 0xc]
	Vector AdjustDetectBoxOffset;//[Offset: 0x54, Size: 0xc]
	bool bUseActorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float AdjustVerticalDist;//[Offset: 0x64, Size: 0x4]
	float AdjustHorizonDist;//[Offset: 0x68, Size: 0x4]
	float AdjustFindStep;//[Offset: 0x6c, Size: 0x4]
	float TraceUpLength;//[Offset: 0x70, Size: 0x4]
	float TraceDownLength;//[Offset: 0x74, Size: 0x4]
	float TraceZOffset;//[Offset: 0x78, Size: 0x4]
	byte[] AdjustPlaceTypes;//[Offset: 0x80, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemComponent.ActorComponent.Object
	SolarCharacter* OwnerChara;//[Offset: 0xb0, Size: 0x8]
	void UseItemRequestLuaCall(int ItemID, int Num);// 0x53a6078ea041
	void OnPlayerBackpackItemUpdate();// 0x53a5078ea041
	bool CanUseMedicine();// 0x53a4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPickupComponent.CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* OwnerChar;//[Offset: 0x560, Size: 0x8]
	float PickUpHighlyThresholdFactor;//[Offset: 0x570, Size: 0x4]
	bool bWantedClearItemData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575, Size: 0x1]
	<enum,SolarPickupHandlerBase*> PickupHandlerMap;//[Offset: 0x588, Size: 0x50]
	SolarPickupHandlerBase* NormalPickupHandler;//[Offset: 0x5d8, Size: 0x8]
	bool GlobalPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]
	AirDropTreasureBox* TagetAirDropBox;//[Offset: 0x5e4, Size: 0x8]
	ActorArrayMap NormalPickupItems;//[Offset: 0x5f8, Size: 0x50]
	Actor*[] ProccessedList;//[Offset: 0x648, Size: 0x10]
	Actor*[] SortedPickupActors;//[Offset: 0x658, Size: 0x10]
	bool bPickupListVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 0x1]
	bool bPickupListCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66a, Size: 0x1]
	UIManager* UIManager;//[Offset: 0x670, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x678, Size: 0x8]
	bool GlobalAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d2, Size: 0x1]
	float UnAutoPickupItemTime;//[Offset: 0x6d4, Size: 0x4]
	float AutoPickupTime;//[Offset: 0x6d8, Size: 0x4]
	bool StopAutoPickupWhenClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	bool bReqPickItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 0x1]
	bool bPickupCheckBoxOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 0x1]
	TimerHandle AutoPickupTimer;//[Offset: 0x708, Size: 0x8]
	delegate OnItemDataSet;//[Offset: 0x748, Size: 0x10]
	delegate UpdateCheckBoxesVisibility;//[Offset: 0x758, Size: 0x10]
	delegate OnUpdateCheckBoxesHighLight;//[Offset: 0x768, Size: 0x10]
	delegate OnUpdateCheckBoxesStates;//[Offset: 0x778, Size: 0x10]
	delegate OnPickupListClear;//[Offset: 0x788, Size: 0x10]
	delegate OnTogglePickupList;//[Offset: 0x798, Size: 0x10]
	bool ListenFireReslutFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 0x1]
	float DelayedDisplayTime;//[Offset: 0x7ac, Size: 0x4]
	TimerHandle AutoShowPickupListHandle;//[Offset: 0x7b0, Size: 0x8]
	TimerHandle DelayProcessFireResultHandle;//[Offset: 0x7b8, Size: 0x8]
	TimerHandle EnsuredAutoShowHandle;//[Offset: 0x7c0, Size: 0x8]
	FString[] FireResultMsgs;//[Offset: 0x7c8, Size: 0x10]
	DeathTreasureBox*[] NearByDeathboxes;//[Offset: 0x7e8, Size: 0x10]
	DeathTreasureBox* NearestResurrectBox;//[Offset: 0x7f8, Size: 0x8]
	bool LastResurrecteBtnVisbile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 0x1]
	float CheckResurrectInterval;//[Offset: 0x804, Size: 0x4]
	float TempResurrectInterval;//[Offset: 0x808, Size: 0x4]
	float CheckStopResurrectInterval;//[Offset: 0x80c, Size: 0x4]
	float TempStopResurrectInterval;//[Offset: 0x810, Size: 0x4]
	int PickupRecommendPriority;//[Offset: 0x818, Size: 0x4]
	<enum,int> ItemPriorityMap;//[Offset: 0x820, Size: 0x50]
	<enum,int> ItemMutiPickupMap;//[Offset: 0x870, Size: 0x50]
	<enum,int> WeaponPartPriorityMap;//[Offset: 0x8c0, Size: 0x50]
	<int,int> WeaponPartIDPriorityMap;//[Offset: 0x910, Size: 0x50]
	Actor* PendingFirstItemActor;//[Offset: 0x960, Size: 0x8]
	void UpdateResurrection(const float InDeltaTime);// 0x558d078ea041
	void UpdateItemUI(bool bForce);// 0x558c078ea041
	void UpdateCheckboxSwitches(const bool InPickupOpen);// 0x558b078ea041
	void TryReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x558a078ea041
	void TryPickupTreasureItem(SolarTreasureBoxActor* PickActor, out const SolarItemData ItemData, const int TargetIndex);// 0x5589078ea041
	void TryPickupItem(Actor* PickActor, const int TargetIndex);// 0x5588078ea041
	bool TryOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x5587078ea041
	void TryClearDirtyData(const bool bForce);// 0x5586078ea041
	void TryChangePickupListVisibility(const enum InReason, const bool InVisibility);// 0x5585078ea041
	bool TryCancelOpenAirDropTreasureBox(AirDropTreasureBox* AirDropTreasureBox);// 0x5584078ea041
	void TogglePickupList(const bool InVisibility);// 0x5583078ea041
	void StopListenFireInput(bool bIsInstantlyStop);// 0x5582078ea041
	void StopAutoPickupTimer();// 0x5581078ea041
	void StartListenFireInput();// 0x5580078ea041
	void StartAutoPickupTimer();// 0x557f078ea041
	bool ShouldPickupTreasureBoxItem(SolarTreasureBoxActor* InTreasureBox);// 0x557e078ea041
	void SetStopAutoPickupWhenClose(const bool InStopAutoPickupWhenClose);// 0x557d078ea041
	void SetPickupSwitchInLua(const bool IsOpen);// 0x557c078ea041
	void SetPickupSwitch(const bool IsOpen);// 0x557b078ea041
	void SetPickupListVisibility(const bool InVisibility);// 0x557a078ea041
	void SetPickupCapsuleSize(out const Vector Size);// 0x5579078ea041
	void SetAutoPickupSwitch(const bool InCanAutoPickup);// 0x5578078ea041
	void RestartPickupTimer();// 0x5577078ea041
	void ReqPickupWeapon(Actor* WeaponData, bool IsAutoPickup, const int TargetIndex);// 0x5576078ea041
	void ReqPickupTreasureItem(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID, bool IsAutoPickup, int TargetIndex, enum InItemType, bool bSorted);// 0x5575078ea041
	void ReqPickupItem(SolarItemActor* ItemActor, bool IsAutoPickup, int TargetIndex);// 0x5574078ea041
	void ReqOpenTreasureBox(SolarTreasureBoxActor* TreasureBox);// 0x5573078ea041
	void RemoveNearbyDeathbox(DeathTreasureBox* InDeathBox);// 0x5572078ea041
	void RefreshResurrectBtn();// 0x5571078ea041
	void RefreshPickupTimer();// 0x5570078ea041
	void RefreshItemUI();// 0x556f078ea041
	void RecheckPendingActors();// 0x556e078ea041
	void ReceiveFireResult(FString InFireResultMsg);// 0x556d078ea041
	void ProcessFireResultMsgs();// 0x556c078ea041
	void OnWeaponUpgrade(SolarPlayerWeapon* InWeapon);// 0x556b078ea041
	void OnWeaponSlotEquip(int InWeaponSlotID, SolarPlayerWeapon* InWeapon);// 0x556a078ea041
	void OnUsingSkillStatusChanged();// 0x5569078ea041
	void OnUpdateItemUIDataChanged(Object* Object, int OldItemID, int NewItemID);// 0x5568078ea041
	void OnTreasureBoxStateChange(int64 ThisID, const enum State);// 0x5567078ea041
	void OnPickupSettingChanged();// 0x5566078ea041
	void OnPickupConfirmHandle();// 0x5565078ea041
	void OnPickupActorEnd(Actor* ItemActor);// 0x5564078ea041
	void OnPickupActorBegin(Actor* ItemActor);// 0x5563078ea041
	void OnEquipChanged();// 0x5562078ea041
	void OnCharacterDeathBegin();// 0x5561078ea041
	void OnActorDestroyed(Actor* Actor);// 0x5560078ea041
	void MarkDirtyForTick();// 0x555f078ea041
	bool IsValidItemActor(const Actor* ItemActor);// 0x555e078ea041
	bool IsNeedReplace(const enum InType, out const SolarItemData InItemData);// 0x555d078ea041
	bool IsEquipItem(const enum InType);// 0x555c078ea041
	bool IsCharacterInAir();// 0x555b078ea041
	void InitPickupPriorityMaps();// 0x555a078ea041
	SolarItemData GetTreasureItemDataByThisID(SolarTreasureBoxActor* TreasureBox, int64 ItemThisID);// 0x5559078ea041
	int GetPickupWeaponPartTypePriority(out const SolarItemData InItemData);// 0x5558078ea041
	int GetPickupTypePriority(const enum InItemType);// 0x5557078ea041
	Actor* GetPickupTreasureBoxActor();// 0x5556078ea041
	int GetPickupPriority(out const SolarItemData InItemType);// 0x5555078ea041
	DeathTreasureBox* GetNearestResurrectBox();// 0x5554078ea041
	<int,ActorArray> GetItemDataMap();// 0x5553078ea041
	int GetItemDataCount(enum PickupItemType);// 0x5552078ea041
	bool GetIsGlobalPickup();// 0x5551078ea041
	bool GetIsAutoPickupHomeItems();// 0x5550078ea041
	void DoStopOpeningAirDropBox();// 0x554f078ea041
	void DoOpenAirDropBox();// 0x554e078ea041
	void DetectNearestResurrectTarget();// 0x554d078ea041
	void CloseItemUI();// 0x554c078ea041
	void ClearAutoShowPickupListHandle();// 0x554b078ea041
	void ClearAllTimer();// 0x554a078ea041
	void CheckToShowConfirm(out const SolarItemData ItemData);// 0x5549078ea041
	bool CheckIsItemMaximizing(const int ItemID);// 0x5548078ea041
	bool CanResurrectOwner(DeathTreasureBox* InDeathBox, out float OutDistance);// 0x5547078ea041
	bool CanMutiAutoPickup(const enum InItemType);// 0x5546078ea041
	void CallHUDSetTreasureBoxActor(Actor* InActor);// 0x5545078ea041
	void CallHUDSetAirdropBoxActor(Actor* InActor);// 0x5544078ea041
	void CallHUDSetActiveResurrectBtn(const bool Inactive);// 0x5543078ea041
	void CallHUDSetActiveOpenBoxProgress(const bool Inactive);// 0x5542078ea041
	void CallHUDSetActiveOpenBoxBtn(const bool Inactive);// 0x5541078ea041
	void CallHUDHideOpenBoxUIByThisID(const int64 InThisID);// 0x5540078ea041
	void CallHUDHideAirdropBoxUIByThisID(const int64 InThisID);// 0x553f078ea041
	void AddNearbyDeathbox(DeathTreasureBox* InDeathBox);// 0x553e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPickupHandlerBase.Object
	enum Type;//[Offset: 0x28, Size: 0x1]
	SolarPickupComponent* OwnerComponent;//[Offset: 0x30, Size: 0x8]
	SolarItemManager* ItemManager;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorArrayMap
	<int,ActorArray> ActorArrayMap;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorArray
	Actor*[] ActorArray;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTreatmentComponent.ActorComponent.Object
	delegate OnCharacterHealthLow;//[Offset: 0xb0, Size: 0x10]
	SolarCharacter* OwnerCharacter;//[Offset: 0xd0, Size: 0x8]
	void TryStopTreatment();// 0x5e45078ea041
	void TryStatisticsTreatedTimes();// 0x5e44078ea041
	void TryStartTreatment();// 0x5e43078ea041
	void StopProgress();// 0x5e42078ea041
	void StartProgress();// 0x5e41078ea041
	bool IsMedicineEnough();// 0x5e40078ea041
	bool IsFullHealth();// 0x5e3f078ea041
	bool IsAbleToContinueTreatment();// 0x5e3e078ea041
	void IncreaseTreatedTimes();// 0x5e3d078ea041
	bool CanStartTreatment();// 0x5e3c078ea041
	bool CanBeTreated();// 0x5e3b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ShieldSoundData
	<enum,enum> SoundData;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeammateHUDWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CheckHUDDistanceToCenter;//[Offset: 0x6a0, Size: 0x4]
	float HUDTranslucentValue;//[Offset: 0x6a4, Size: 0x4]
	float LocationUpdateTolerance;//[Offset: 0x6a8, Size: 0x4]
	float InterpolationTimeRatio;//[Offset: 0x6ac, Size: 0x4]
	float InterpolationSpeed;//[Offset: 0x6b0, Size: 0x4]
	float InterpolationEaseInOutExp;//[Offset: 0x6b4, Size: 0x4]
	CurveFloat* DistanceToScaleCurve;//[Offset: 0x6b8, Size: 0x8]
	bool bUseDistanceToCharacterForScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1]
	class WorldMark_ReviveTeammatesFalling* DyingMarkClass;//[Offset: 0x6c8, Size: 0x8]
	WorldMark_ReviveTeammatesFalling* DyingMark;//[Offset: 0x6d0, Size: 0x8]
	class WorldMark_HUDTeammateOffScreen* TeammateHUDOffScreenClass;//[Offset: 0x6d8, Size: 0x8]
	WorldMark_HUDTeammateOffScreen* OffScreenWorldMark;//[Offset: 0x6e0, Size: 0x8]
	Vector TargetWorldLocation;//[Offset: 0x6ec, Size: 0xc]
	FString NotifyHelpSoundName;//[Offset: 0x718, Size: 0x10]
	void SetHUDVisibilityByGameState(bool bVis);// 0x5dfd078ea041
	void SetHUDVisibility(bool bVis);// 0x5dfc078ea041
	void SelectHeroStateChangedEvent(bool bHUDVisible);// 0x5dfb078ea041
	void RemindTeammateRescueHelp(SolarPlayerState* SolarPlayerState);// 0x5dfa078ea041
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x5df9078ea041
	void OnRescueStateChanged(byte CurrentRescueState);// 0x5df8078ea041
	void OnRefreshHUDShouldShowOffScreen();// 0x5df7078ea041
	void OnGameUserOffScreenChanged();// 0x5df6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x571, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x572, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x578, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x580, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 0x1]
	float RedrawTime;//[Offset: 0x58c, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x598, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x5a4, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ad, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x5ae, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5af, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5b0, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x5b8, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x5c8, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x5d8, Size: 0x4]
	enum BlendMode;//[Offset: 0x5dc, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dd, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5de, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x5e0, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x608, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x610, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x618, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x620, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x628, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x630, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x638, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x640, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x648, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x651, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x654, Size: 0x8]
	int LayerZOrder;//[Offset: 0x65c, Size: 0x4]
	enum GeometryMode;//[Offset: 0x660, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x664, Size: 0x4]
	void SetWindowVisibility(enum InVisibility);// 0x5df5078ea041
	void SetWindowFocusable(bool bInWindowFocusable);// 0x5df4078ea041
	void SetWidgetSpace(enum NewSpace);// 0x5df3078ea041
	void SetWidget(UserWidget* Widget);// 0x5df2078ea041
	void SetTwoSided(const bool bWantTwoSided);// 0x5df1078ea041
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x5df0078ea041
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x5def078ea041
	void SetRedrawTime(float InRedrawTime);// 0x5dee078ea041
	void SetPivot(out const Vector2D InPivot);// 0x5ded078ea041
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x5dec078ea041
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x5deb078ea041
	void SetGeometryMode(enum InGeometryMode);// 0x5dea078ea041
	void SetDrawSize(Vector2D Size);// 0x5de9078ea041
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x5de8078ea041
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x5de7078ea041
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x5de6078ea041
	void RequestRedraw();// 0x5de5078ea041
	enum GetWindowVisiblility();// 0x5de4078ea041
	bool GetWindowFocusable();// 0x5de3078ea041
	enum GetWidgetSpace();// 0x5de2078ea041
	UserWidget* GetUserWidgetObject();// 0x5de1078ea041
	bool GetTwoSided();// 0x5de0078ea041
	bool GetTickWhenOffscreen();// 0x5ddf078ea041
	TextureRenderTarget2D* GetRenderTarget();// 0x5dde078ea041
	float GetRedrawTime();// 0x5ddd078ea041
	Vector2D GetPivot();// 0x5ddc078ea041
	LocalPlayer* GetOwnerPlayer();// 0x5ddb078ea041
	MaterialInstanceDynamic* GetMaterialInstance();// 0x5dda078ea041
	bool GetManuallyRedraw();// 0x5dd9078ea041
	enum GetGeometryMode();// 0x5dd8078ea041
	Vector2D GetDrawSize();// 0x5dd7078ea041
	bool GetDrawAtDesiredSize();// 0x5dd6078ea041
	float GetCylinderArcAngle();// 0x5dd5078ea041
	Vector2D GetCurrentDrawSize();// 0x5dd4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMark_ReviveTeammatesFalling.WorldMark_ReviveBase.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* Panel;//[Offset: 0x4e0, Size: 0x8]
	CanvasPanel* Panel_rotate;//[Offset: 0x4e8, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x4f0, Size: 0x8]
	Image* Img_Light;//[Offset: 0x4f8, Size: 0x8]
	Image* img_HeadBg_Shadow;//[Offset: 0x500, Size: 0x8]
	Image* img_PlayerHead;//[Offset: 0x508, Size: 0x8]
	Image* ProgressCD;//[Offset: 0x510, Size: 0x8]
	MaterialInstanceDynamic* CDMaterial;//[Offset: 0x518, Size: 0x8]
	FName ProgressParamName;//[Offset: 0x520, Size: 0x8]
	LinearColor ProgressParamDefaultValue;//[Offset: 0x528, Size: 0x10]
	FString TimeParamName;//[Offset: 0x538, Size: 0x10]
	int TimeFormatLocalTextID;//[Offset: 0x548, Size: 0x4]
	void SetPlayerRescueState(bool InBeingRescue);// 0x6259078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMark_ReviveBase.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	CurveFloat* ScaleChangeDistanceScaleCurve;//[Offset: 0x480, Size: 0x8]
	float LerpSpeed;//[Offset: 0x488, Size: 0x4]
	WidgetAnimation* Occupy_Anim;//[Offset: 0x490, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x498, Size: 0x8]
	WidgetAnimation* Anim_Exit;//[Offset: 0x4a0, Size: 0x8]
	delegate OnExitAnimationFinished;//[Offset: 0x4a8, Size: 0x10]
	FString StartNotifySoundName;//[Offset: 0x4c0, Size: 0x10]
	FString NotifySoundName;//[Offset: 0x4d0, Size: 0x10]
	void SetPlayerIDAndChangeColor(FString PlayerId);// 0x6257078ea041
	void InitBySolarPlayerState(SolarPlayerState* PlayerState);// 0x6256078ea041
	void ExitAnimEnd();// 0x6255078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	int ReservedLayerSpace;//[Offset: 0x14c, Size: 0x4]
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x4712078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x149, Size: 0x1]
	byte StretchDirection;//[Offset: 0x14a, Size: 0x1]
	float UserSpecifiedScale;//[Offset: 0x14c, Size: 0x4]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 0x1]
	float IgnoreSlightScaleModificationPercent;//[Offset: 0x154, Size: 0x4]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x6438078ea041
	void SetStretchDirection(byte InStretchDirection);// 0x6437078ea041
	void SetStretch(byte InStretch);// 0x6436078ea041
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x6435078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMark_HUDTeammateOffScreen.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* Panel_Num;//[Offset: 0x480, Size: 0x8]
	CanvasPanel* Panel_Arrow;//[Offset: 0x488, Size: 0x8]
	SolarTextBlock* Txt_Num;//[Offset: 0x490, Size: 0x8]
	void SetPlayerIDAndColor(FString PlayerId);// 0x6254078ea041
	void RefreshPosInTeam(const byte PosInTeam);// 0x6253078ea041
	void OnUpdateMemberNum(const byte PosInTeam);// 0x6252078ea041
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x6251078ea041
	void OnRescueStateChanged(byte CurrentRescueState);// 0x6250078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	FText Text;//[Offset: 0x160, Size: 0x18]
	int LocTextID;//[Offset: 0x178, Size: 0x4]
	enum PreviewLang;//[Offset: 0x17c, Size: 0x1]
	bool bCapitalsLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d, Size: 0x1]
	Vector2D CalcSize;//[Offset: 0x180, Size: 0x8]
	delegate TextDelegate;//[Offset: 0x188, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x198, Size: 0x28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1c0, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x1d0, Size: 0x60]
	SlateFontSizeForLang SpecialLangFont;//[Offset: 0x230, Size: 0x18]
	SlateBrush StrikeBrush;//[Offset: 0x250, Size: 0xe0]
	SlateBrush BackgroundBrush;//[Offset: 0x330, Size: 0xe0]
	Vector2D ShadowOffset;//[Offset: 0x410, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x418, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x428, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x438, Size: 0x4]
	int MaxRowCount;//[Offset: 0x43c, Size: 0x4]
	int MinFontSize;//[Offset: 0x440, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x445, Size: 0x1]
	bool bUsingAccurateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x446, Size: 0x1]
	bool bEnableCacheSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x447, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool bNeverResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1]
	void SetWrapTextAt(float InWrapTextAt);// 0x5e1b078ea041
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x5e1a078ea041
	void SetText(FText InText);// 0x5e19078ea041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x5e18078ea041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x5e17078ea041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x5e16078ea041
	void SetOpacity(float InOpacity);// 0x5e15078ea041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x5e14078ea041
	void SetMargin(Margin InMargin);// 0x5e13078ea041
	void SetLocTextID(int InLocTextID);// 0x5e12078ea041
	void SetLocLangTextData(FText InText, bool InEnableLocText, int InLocTextID, enum InPreviewLang, SlateFontSizeForLang InSlateFontSizeForLang);// 0x5e11078ea041
	void SetLineHeightPercentage(float InLineHeightPercentage);// 0x5e10078ea041
	void SetFont(SlateFontInfo InFontInfo);// 0x5e0f078ea041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x5e0e078ea041
	void SetBackgroundBrush(SlateBrush InBackgroundBrush);// 0x5e0d078ea041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x5e0c078ea041
	Vector2D GetTextSize();// 0x5e0b078ea041
	FText GetText();// 0x5e0a078ea041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x5e09078ea041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x5e08078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateFontSizeForLang
	bool bEnableFontForLang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int DefaultFontSize;//[Offset: 0x4, Size: 0x4]
	SlateFontSizeLangData[] FontForLangGroup;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateFontSizeLangData
	enum SpecialLang;//[Offset: 0x0, Size: 0x1]
	int SpecialFontSize;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xc0, Size: 0x4]
	int SizeY;//[Offset: 0xc4, Size: 0x4]
	bool bAutoRTSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	LinearColor ClearColor;//[Offset: 0xcc, Size: 0x10]
	byte AddressX;//[Offset: 0xdc, Size: 0x1]
	byte AddressY;//[Offset: 0xdd, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xde, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xde, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xde, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xdf, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0xe1, Size: 0x1]
	byte MipsAddressU;//[Offset: 0xe2, Size: 0x1]
	byte MipsAddressV;//[Offset: 0xe3, Size: 0x1]
	byte OverrideFormat;//[Offset: 0xe4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xb8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarRadarComponent.ActorComponent.Object
	RadarScanSoundDataAsset* RadarScanSoundDataAsset;//[Offset: 0xc8, Size: 0x8]
	class UserWidget* ScannedScreenUIClass;//[Offset: 0xd0, Size: 0x8]
	FName ScannedEffectID;//[Offset: 0xd8, Size: 0x8]
	UserWidget* CreatedScreenUI;//[Offset: 0x100, Size: 0x8]
	TimerHandle DetectedTimerHandle;//[Offset: 0x108, Size: 0x8]
	int TimerHandleCounter;//[Offset: 0x110, Size: 0x4]
	<int,TimerHandle> DetectedTimerHandles;//[Offset: 0x118, Size: 0x50]
	SolarCharacter* CharacterOwner;//[Offset: 0x168, Size: 0x8]
	ScannedInfo[] CurrentScanResults;//[Offset: 0x170, Size: 0x10]
	float CurrentSpanTimer;//[Offset: 0x180, Size: 0x4]
	FName[] ActivedRadarTags;//[Offset: 0x188, Size: 0x10]
	MaterialChangeHandle DetectedMaterialHandle;//[Offset: 0x198, Size: 0x8]
	void WarningByRadarNotifation(float InRemainingTime);// 0x570a078ea041
	void OnRecivedScanResults();// 0x5709078ea041
	void OnRecieveOnceScanStart(int ScanedNum, bool bSuperRader);// 0x5708078ea041
	void OnRadarScanStart(out RadarDataSpec RadarDataSpec);// 0x5707078ea041
	void OnRadarScanEnd(out RadarDataSpec RadarDataSpec);// 0x5706078ea041
	void OnRadarImmunityTagChanged(const GameplayTag Tag, int NewCount);// 0x5705078ea041
	void OnPlayerDeath(SolarCharacter* InPlayer);// 0x5704078ea041
	void OnDetectedByRadar(bool bOnceScan, float InDetectedTime, out const GameplayTag InRadarImmunityTag, bool bSuperRader);// 0x5703078ea041
	void OnceScanSuccessNotifation(int ScanedNum);// 0x5702078ea041
	void OnceScanFailedNotifation();// 0x5701078ea041
	void OnAllRadarRemoved();// 0x5700078ea041
	void MarkedByOnceScanNotifation();// 0x56ff078ea041
	FString GetModuleName_Implementation();// 0x56fe078ea041
	void ExposedByRadarNotifation();// 0x56fd078ea041
	void ChangeDetectedMaterial(bool bInDetected);// 0x56fc078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RadarDataSpec.FastArraySerializerItem
	GameplayAbilitySpecHandle RadarHandle;//[Offset: 0xc, Size: 0x4]
	byte RadarType;//[Offset: 0x10, Size: 0x1]
	Vector2D RadarRange;//[Offset: 0x14, Size: 0x8]
	Pawn* RadarSpawner;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RadarScanSoundDataAsset.DataAsset.Object
	FString RadarScan_Loop_Start;//[Offset: 0x30, Size: 0x10]
	FString RadarScan_Loop_End;//[Offset: 0x40, Size: 0x10]
	FString RadarScan_Once_Success;//[Offset: 0x50, Size: 0x10]
	FString RadarScan_Once_Failed;//[Offset: 0x60, Size: 0x10]
	FString SuperRadarScan_FoundEnemy;//[Offset: 0x70, Size: 0x10]
	FString SuperRadarScan_FoundByEnemy;//[Offset: 0x80, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScannedInfo
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	enum TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector TargetLocation;//[Offset: 0xc, Size: 0xc]
	float TargetToward;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MaterialChangeHandle
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RadarDataSpecContainer.FastArraySerializer
	RadarDataSpec[] Radars;//[Offset: 0x108, Size: 0x10]
	SolarRadarComponent* Owner;//[Offset: 0x118, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CriticalHitInfo
	SolarPlayerState* Instigator;//[Offset: 0x0, Size: 0x8]
	float Damage;//[Offset: 0x8, Size: 0x4]
	float DamageTime;//[Offset: 0xc, Size: 0x4]
	int LastDamageWeaponID;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMarkComponent.ActorComponent.Object
	SolarCharacter* Owner;//[Offset: 0xc8, Size: 0x8]
	uint32 WorldMarkPoolOriginSize;//[Offset: 0xd0, Size: 0x4]
	float MinCheckDistance;//[Offset: 0xd4, Size: 0x4]
	float MaxCheckDistance;//[Offset: 0xd8, Size: 0x4]
	bool AutoMarkIsCoolingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 0x1]
	int AttachedToCharacterNumLimit;//[Offset: 0x138, Size: 0x4]
	HUD_WorldMark*[] ChosenMarksTable;//[Offset: 0x190, Size: 0x10]
	HUD_WorldMark* CurrentChosenMark;//[Offset: 0x1a0, Size: 0x8]
	HitResult CachedHitResult;//[Offset: 0x1d8, Size: 0x88]
	HUD_WorldMark*[] WorldMarkPool;//[Offset: 0x278, Size: 0x10]
	void VehicleNotify(int VehicleID, int NameLocID, SolarPlayerController* Controller);// 0x628f078ea041
	bool VagueMarkCharacter();// 0x628e078ea041
	void UpdateAttachedMarks();// 0x628d078ea041
	void UnMarkItemByIDLuaCall(int64 instanceID);// 0x628c078ea041
	void ResponseChosenMark();// 0x628b078ea041
	void RemoveWorldMark(int PosInTeam, out const WorldMarkData InWorldMarkedData);// 0x628a078ea041
	void RemoveItemMarkWhenPlayerPicked(out const int64 InItemInstanceId);// 0x6289078ea041
	void RemoveAttachedMarkByActors(out Actor*[] InActors);// 0x6288078ea041
	void ReleaseWorldMarkPool();// 0x6287078ea041
	void RefreshChosenMark();// 0x6286078ea041
	void RecycleWorldMark(HUD_WorldMark* WorldMark);// 0x6285078ea041
	void PushBackQueueGroupMapWidget(enum Type, int PosInTeam, HUD_WorldMark* Widget);// 0x6284078ea041
	HUD_WorldMark* PopQueueGroupMapWidget(enum Type, int PosInTeam);// 0x6283078ea041
	void OnVehicleEndPlay(Actor* Actor, byte EndPlayReason);// 0x6282078ea041
	void OnMarkBeChosen(HUD_WorldMark* MarkWidget, bool IfWasChosen);// 0x6281078ea041
	void NotifyThatToFarToMark();// 0x6280078ea041
	void MarkWarningOnWorld();// 0x627f078ea041
	void MarkQuickChatOnWorld(int QuickChatID);// 0x627e078ea041
	void MarkPointOnWorld();// 0x627d078ea041
	void MarkOnWorldByMinimapPosition(int PosInTeam, out const Vector2D MinimapPos);// 0x627c078ea041
	void MarkItemInPickupList(out const Vector ItemLocation, out const SolarItemData ItemData);// 0x627b078ea041
	void MarkActorByAttachToThem(Actor* InActor);// 0x627a078ea041
	void InteractTypeNotify(enum Type, SolarPlayerController* Controller);// 0x6279078ea041
	void InitWorldMarkPool();// 0x6278078ea041
	void Init(SolarCharacter* Character);// 0x6277078ea041
	HUD_WorldMarkPanel* GetWorldMarkPanel();// 0x6276078ea041
	int GetQuickVoiceLocalizationID(out const int VoiceID);// 0x6275078ea041
	FString GetQuickVoiceEventName(out const int VoiceID);// 0x6274078ea041
	int GetQueueGroupMapSize(enum Type, int PosInTeam);// 0x6273078ea041
	FString GetInvalidTypeDefaultIconPath();// 0x6272078ea041
	FString GetInteractiveObjectsFullPath(enum Type);// 0x6271078ea041
	HUD_WorldMark* GetFreeWorldMark();// 0x6270078ea041
	void CreateWorldMarkInternal(int PosInTeam, out const WorldMarkData InWorldMarkedData, Object* IconAsset);// 0x626f078ea041
	void CreateWorldMark(int PosInTeam, out WorldMarkData InWorldMarkedData);// 0x626e078ea041
	void CreateWarningWidget(out WorldMarkData Data, bool NeedSendMessage);// 0x626d078ea041
	void CreateItemMarkWidget(out WorldMarkData Data);// 0x626c078ea041
	void CreateInvalidWidget(out WorldMarkData Data, bool bShouldNotify);// 0x626b078ea041
	void ClearCachedWorldMarkLineTraceResult();// 0x626a078ea041
	bool CheckMarkPointIsOutOfMap(out const Vector Location);// 0x6269078ea041
	bool CheckIfWorldPosValid(out WorldMarkData Data, out const int PosInTeam);// 0x6268078ea041
	bool CheckIfThisItemBeenMarkedInternal(int instanceID, int PosInTeam);// 0x6267078ea041
	bool CheckAutoMarkDamagingCharacter();// 0x6266078ea041
	void CacheWorldMarkLineTraceResult();// 0x6265078ea041
	void AutoMarkDamagingCharacter();// 0x6264078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUD_WorldMark.SolarUserWidget.UserWidget.Widget.Visual.Object
	float LiveTime;//[Offset: 0x400, Size: 0x4]
	float ExtraLiveTime;//[Offset: 0x404, Size: 0x4]
	Vector2D WarningIconOffset;//[Offset: 0x408, Size: 0x8]
	Vector2D PostProcessingRectangleOffset;//[Offset: 0x410, Size: 0x8]
	float PostProcessingRadius;//[Offset: 0x418, Size: 0x4]
	float ResponCheckRangeParam;//[Offset: 0x41c, Size: 0x4]
	float RefreshTime;//[Offset: 0x420, Size: 0x4]
	Vector WorldPos;//[Offset: 0x424, Size: 0xc]
	Vector2D ScreenSize;//[Offset: 0x430, Size: 0x8]
	Vector2D IconSize;//[Offset: 0x440, Size: 0x8]
	bool bIsOutOfRangeLastTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	bool bHasBeenAnsweredByMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1]
	bool bIfWasChosen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44a, Size: 0x1]
	bool bIsCreateBySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44b, Size: 0x1]
	Image* ImgMarkArrow;//[Offset: 0x450, Size: 0x8]
	Image* ImgItemMarkArrow;//[Offset: 0x458, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x460, Size: 0x8]
	float UpdateIconStyleTime_LowLevel;//[Offset: 0x468, Size: 0x4]
	float UpdateIconStyleTime_HighLevel;//[Offset: 0x46c, Size: 0x4]
	int PosInTeam;//[Offset: 0x474, Size: 0x4]
	WorldMarkData Data;//[Offset: 0x478, Size: 0x78]
	enum Type;//[Offset: 0x4f0, Size: 0x1]
	float MaxWorldDistance;//[Offset: 0x4f4, Size: 0x4]
	float MinWorldDistance;//[Offset: 0x4f8, Size: 0x4]
	CurveFloat* OpacityCurve;//[Offset: 0x500, Size: 0x8]
	bool bAttachToObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 0x1]
	float WarningAnimationTotalTime;//[Offset: 0x524, Size: 0x4]
	float WarningAnimationCurrentTime;//[Offset: 0x528, Size: 0x4]
	bool WarningAnimationNeedPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 0x1]
	void UpdateStyleByScreenPosition(Vector2D ScreenPos, bool bOutOfRange);// 0x48d7078ea041
	void UpdateDistance(out const Vector TargetPos);// 0x48d6078ea041
	void SwitchWidget(bool bOutOfRange);// 0x48d5078ea041
	void SetIfBeChosen(bool bIfChosen);// 0x48d4078ea041
	void ResponseByLocal();// 0x48d3078ea041
	void RemoveItemMarkWhenPlayerPicked();// 0x48d2078ea041
	void OnPlayerDead(out const KillInfo DeathMsgInfo);// 0x48d1078ea041
	void LogMarkResponse();// 0x48d0078ea041
	void InitWidget(Object* Owner, int InPosInTeam, out const WorldMarkData InWorldMarkedData, Object* IconImg);// 0x48cf078ea041
	void InitAttachedWidget(Actor* ActorAttachedTo);// 0x48ce078ea041
	void DestroySelf();// 0x48cd078ea041
	bool CheckIsLowLevelDevice();// 0x48cc078ea041
	void CancelResponse();// 0x48cb078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KillInfo
	FString KillerPlayerId;//[Offset: 0x0, Size: 0x10]
	int KillerSkinID;//[Offset: 0x10, Size: 0x4]
	int KillerTeamID;//[Offset: 0x14, Size: 0x4]
	FString KillerName;//[Offset: 0x18, Size: 0x10]
	int KillerFlag;//[Offset: 0x28, Size: 0x4]
	FString VictimPlayerID;//[Offset: 0x30, Size: 0x10]
	int VictimSkinID;//[Offset: 0x40, Size: 0x4]
	int VictimTeamID;//[Offset: 0x44, Size: 0x4]
	FString VictimName;//[Offset: 0x48, Size: 0x10]
	int VictimFlag;//[Offset: 0x58, Size: 0x4]
	FString KillIcon;//[Offset: 0x60, Size: 0x10]
	FString KillLeaderID;//[Offset: 0x70, Size: 0x10]
	enum KillParamsCompressInfo;//[Offset: 0x80, Size: 0x2]
	int KillNum;//[Offset: 0x84, Size: 0x4]
	int WeaponSkinID;//[Offset: 0x88, Size: 0x4]
	byte KillerVipType;//[Offset: 0x8c, Size: 0x1]
	byte VictimVipType;//[Offset: 0x8d, Size: 0x1]
	enum KillerInputType;//[Offset: 0x8e, Size: 0x1]
	enum VictimInputType;//[Offset: 0x8f, Size: 0x1]
	bool bDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	bool bPlayComboKillSoundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 0x1]
	int KillReportID;//[Offset: 0x94, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUD_WorldMarkPanel.SolarUserWidget.UserWidget.Widget.Visual.Object
	HUD_MarkEnemyInfo*[] MarkdEnemyWidgets;//[Offset: 0x400, Size: 0x10]
	CanvasPanel* MarkPanel;//[Offset: 0x410, Size: 0x8]
	class HUD_MarkEnemyInfo* MarkEnemyInfoWidgetClass;//[Offset: 0x418, Size: 0x8]
	class HUD_MarkDoppelganger* MarkDoppelgangerWidgetClass;//[Offset: 0x420, Size: 0x8]
	class HUD_ScanEffect* ScanEffectWidgetClass;//[Offset: 0x428, Size: 0x8]
	HUD_MarkEnemyInfo*[] MarkEnemyWidgets;//[Offset: 0x430, Size: 0x10]
	HUD_MarkDoppelganger* MarkDoppelgangerWidget;//[Offset: 0x440, Size: 0x8]
	MeshRectangleWidget* MeshWidget_Warning;//[Offset: 0x480, Size: 0x8]
	void RegisterDataProvider();// 0x48e3078ea041
	void OnSuperRadarStart(out const FString[] InPlayers);// 0x48e2078ea041
	void OnSuperRadarRemovePlayer(FString InPlayer);// 0x48e1078ea041
	void OnSuperRadarEnd();// 0x48e0078ea041
	void OnSpectateTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x48df078ea041
	void OnScoutCharactersChange(FString[] ScoutedCharacters, FString[] ToBeScoutedCharacters);// 0x48de078ea041
	FString OnRegisterPositionMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, out const Vector InPosition);// 0x48dd078ea041
	FString OnRegisterActorMarkRequested(out ActorMarkBase* OutResult, const class ActorMarkBase InMarkClass, Actor* FollowActor);// 0x48dc078ea041
	void OnDoppelgangerActive(SolarCharacter* InDoppelganger, bool bActive);// 0x48db078ea041
	void OnDamagingActorsChange();// 0x48da078ea041
	void OnBattleHUDVisibleChanged(bool Visible);// 0x48d9078ea041
	void OnAimingEnemy(SolarCharacter* InEnemy);// 0x48d8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUD_MarkEnemyInfo.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarTextBlock* Txt_Lvl;//[Offset: 0x400, Size: 0x8]
	DeathViewHPWidget* HPAndShield;//[Offset: 0x408, Size: 0x8]
	CanvasPanel* CanvasPanel;//[Offset: 0x410, Size: 0x8]
	WidgetAnimation* Anim_Exit;//[Offset: 0x418, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x420, Size: 0x8]
	float UpdateVisibleInterval;//[Offset: 0x428, Size: 0x4]
	CurveFloat* DistaceToScaleCurve;//[Offset: 0x430, Size: 0x8]
	<class Actor> OcculusionIgnoreClasses;//[Offset: 0x438, Size: 0x50]
	float MinDisplayHpValue;//[Offset: 0x488, Size: 0x4]
	float HPGridUnit;//[Offset: 0x48c, Size: 0x4]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 0x1]
	byte[] OccQueryTypes;//[Offset: 0x498, Size: 0x10]
	FName[] OcclusionCheckBones;//[Offset: 0x4a8, Size: 0x10]
	WidgetAnimation* Anim_Name_Exit;//[Offset: 0x4b8, Size: 0x8]
	WidgetAnimation* Anim_Name_Enter;//[Offset: 0x4c0, Size: 0x8]
	SolarTextBlock* Txt_PlayerName;//[Offset: 0x4c8, Size: 0x8]
	HUD_ScanEffect* ScanEffectWidget;//[Offset: 0x4d0, Size: 0x8]
	float ZOffset;//[Offset: 0x50c, Size: 0x4]
	void HideNameMark();// 0x4877078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DeathViewHPWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	bool bSplitHPBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	SolarShieldProgressBoard* AdvBar_Shield;//[Offset: 0x430, Size: 0x8]
	SolarHPProgressBoard* AdvBar_HP;//[Offset: 0x438, Size: 0x8]
	LinearColor HPColorNormal;//[Offset: 0x460, Size: 0x10]
	LinearColor HPColorDying;//[Offset: 0x470, Size: 0x10]
	void UpdateHPBar(const float InCurHealth, const float InMaxHealth, const float InHPGridUnit);// 0x4749078ea041
	void OnSpecTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x4748078ea041
	void OnShieldValueChanged(const SinglePlayerShieldModel* ShieldModel);// 0x4747078ea041
	void OnShieldChanged(const SinglePlayerShieldModel* ShieldModel);// 0x4746078ea041
	void OnShieldAvailableChanged(const SinglePlayerShieldModel* ShieldModel);// 0x4745078ea041
	void OnHPModelChanged(const SinglePlayerHPModel* HPModel);// 0x4744078ea041
	void OnCharacterEndPlay(SolarCharacter* Character);// 0x4743078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarShieldProgressBoard.SolarAdvProgressBoard.UserWidget.Widget.Visual.Object
	float AutoRechargeSpeed;//[Offset: 0x2b4, Size: 0x4]
	float RechargeTime;//[Offset: 0x2b8, Size: 0x4]
	float PreChangeSpeed;//[Offset: 0x2bc, Size: 0x4]
	void UpdateCurrentValue(float Current);// 0x577d078ea041
	void SetSpeed(float NewSpeed);// 0x577c078ea041
	void SetProgressColorByID(out const LinearColor InColor, const int InID);// 0x577b078ea041
	void SetPreAddColor();// 0x577a078ea041
	void PreAddValue(const float InCurrentValue, const float InChangeValue, const enum RechargeState, const bool bInFixPreAdd);// 0x5779078ea041
	void InitProgressBoard(float Current, float Max, int Fragment);// 0x5778078ea041
	void InitProgress();// 0x5777078ea041
	float GetSpeed();// 0x5776078ea041
	void DoMinusValue(const float InCurrentValue, const float InChangeValue);// 0x5775078ea041
	void DoAddValue(const float InCurrentValue);// 0x5774078ea041
	void CancelAddValue(const float InCurrentValue, const float InChangeValue);// 0x5773078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAdvProgressBoard.UserWidget.Widget.Visual.Object
	Image* ProgressBoard;//[Offset: 0x260, Size: 0x8]
	MaterialInstance* ProgressShader;//[Offset: 0x268, Size: 0x8]
	LinearColor IncreaseColor;//[Offset: 0x270, Size: 0x10]
	LinearColor DecreaseColor;//[Offset: 0x280, Size: 0x10]
	AdvProgressChannelInfo[] ChannelList;//[Offset: 0x290, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AdvProgressChannelInfo
	enum State;//[Offset: 0x0, Size: 0x1]
	float Percent;//[Offset: 0x4, Size: 0x4]
	float TargetPercent;//[Offset: 0x8, Size: 0x4]
	float Speed;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHPProgressBoard.UserWidget.Widget.Visual.Object
	Image* ProgressBoard;//[Offset: 0x260, Size: 0x8]
	MaterialInstance* ProgressShader;//[Offset: 0x268, Size: 0x8]
	float Speed;//[Offset: 0x270, Size: 0x4]
	float RechargeSpeed;//[Offset: 0x274, Size: 0x4]
	float RechargeTime;//[Offset: 0x278, Size: 0x4]
	int RechargeIndex;//[Offset: 0x27c, Size: 0x4]
	bool bDebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	float Percent1;//[Offset: 0x284, Size: 0x4]
	float Percent2;//[Offset: 0x288, Size: 0x4]
	float Percent3;//[Offset: 0x28c, Size: 0x4]
	float Percent4;//[Offset: 0x290, Size: 0x4]
	bool bNeedAlternateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 0x1]
	LinearColor IncreaseColor;//[Offset: 0x298, Size: 0x10]
	LinearColor DecreaseColor;//[Offset: 0x2a8, Size: 0x10]
	void UpdateMaxValue(float Max);// 0x531f078ea041
	void UpdateCurrentValue(float Current);// 0x531e078ea041
	void SetSpacing(const float InValue);// 0x531d078ea041
	void SetProgressColorByID(out const LinearColor InColor, const int InID);// 0x531c078ea041
	void SetPreAddColor();// 0x531b078ea041
	void SetPercentageByIndex(float Percent, int Index);// 0x531a078ea041
	void SetFragment(float Num);// 0x5319078ea041
	void SetCurrentValueInstantly(float Current);// 0x5318078ea041
	void SetAlternateColor(out const LinearColor InColor, bool IsChangeBoth, bool IsForIncrease);// 0x5317078ea041
	void PreAddValue(const float InCurrentValue, const float InChangeValue, const enum RechargeState, const bool bInFixPreAdd, const bool bInAdaptiveRecharge);// 0x5316078ea041
	void InitProgressBoard(float Current, float Max, float Fragment);// 0x5315078ea041
	void InitProgress();// 0x5314078ea041
	LinearColor GetAlternateColor(bool bIncrease);// 0x5313078ea041
	void DoMinusValue(const float InCurrentValue, const float InChangeValue);// 0x5312078ea041
	void DoAddValue(const float InCurrentValue, const float InChangeValue);// 0x5311078ea041
	void CancelAddValue(const float InCurrentValue, const float InChangeValue);// 0x5310078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SinglePlayerShieldModel.SingleCharacterModelBase.Object
	void ShieldValueChanged(const enum InWidgetState, const float InCurValue, const float InChangeValue, const enum InRechargeState, bool bInFixPreAdd);// 0x56cd078ea041
	void ShieldChanged(const bool bInAvailable, const float InCurValue, const float InMaxValue, const int InQualityColor, const bool bInIsAdvancedShield);// 0x56cc078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SingleCharacterModelBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SinglePlayerHPModel.SingleCharacterModelBase.Object
	void OnRescueStateChanged(byte InRescueState);// 0x55ec078ea041
	void OnHPValueChanged(const SolarCharacter* Character);// 0x55eb078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUD_ScanEffect.SolarUserWidget.UserWidget.Widget.Visual.Object
	WidgetAnimation* Anim_Scan;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_FadeOut;//[Offset: 0x408, Size: 0x8]
	FString ScanSound;//[Offset: 0x410, Size: 0x10]
	float MinAnimLength;//[Offset: 0x420, Size: 0x4]
	FName BoneName;//[Offset: 0x424, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUD_MarkDoppelganger.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* CanvasPanel;//[Offset: 0x400, Size: 0x8]
	DeathViewHPWidget* HPAndShield;//[Offset: 0x408, Size: 0x8]
	float ZOffset;//[Offset: 0x410, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeshRectangleWidget.MeshWidgetUWidget.Widget.Visual.Object
	MaterialInterface* BaseMaterial;//[Offset: 0x148, Size: 0x8]
	int NumFloat4PerInstance;//[Offset: 0x150, Size: 0x4]
	void SetInstanceNum(int NewNum);// 0x4215078ea041
	void ModifyInstanceNum(int dNum);// 0x4214078ea041
	void InitUnitTestProvider();// 0x4213078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MeshWidgetUWidget.Widget.Visual.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterMovementComponent.SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SolarCharacter* SolarCharacterOwner;//[Offset: 0x6b0, Size: 0x8]
	float DefaultUnscaledCapsuleHalfHeight;//[Offset: 0x6b8, Size: 0x4]
	float DefaultLazyRefreshBonesDelay;//[Offset: 0x6bc, Size: 0x4]
	bool bKeepWalkSpeedOnTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	float MinJogSpeedScaleOnBlocked;//[Offset: 0x6e4, Size: 0x4]
	float MinRunSpeedScaleOnBlocked;//[Offset: 0x6e8, Size: 0x4]
	float MinSprintSpeedScaleOnBlocked;//[Offset: 0x6ec, Size: 0x4]
	float MinCrawlSpeedScaleOnBlocked;//[Offset: 0x6f0, Size: 0x4]
	float MinSwimSpeedScaleOnBlocked;//[Offset: 0x6f4, Size: 0x4]
	float MinAccelerationProjectRatioForValidGroundSlide;//[Offset: 0x6f8, Size: 0x4]
	bool bOverrideFallingGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 0x1]
	float OverriddenFallingGravity;//[Offset: 0x700, Size: 0x4]
	float FallingHorizontalSpeedUpperLimit;//[Offset: 0x704, Size: 0x4]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x708, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x70c, Size: 0x1]
	enum CurrentAirMoveMode;//[Offset: 0x742, Size: 0x1]
	enum LastAirMoveMode;//[Offset: 0x743, Size: 0x1]
	CustomJumpParams CustomJumpParams;//[Offset: 0x748, Size: 0x98]
	CustomJumpParams CustomLaunchParams;//[Offset: 0x7e0, Size: 0x98]
	JetPackConfig* JetPackConfig;//[Offset: 0x888, Size: 0x8]
	float HinderAngel;//[Offset: 0x8c4, Size: 0x4]
	float HinderPercent;//[Offset: 0x8c8, Size: 0x4]
	float HinderZ;//[Offset: 0x8cc, Size: 0x4]
	float SwimSpeedWhenSprintLockConfig;//[Offset: 0x8d0, Size: 0x4]
	float SwimSpeedConfig;//[Offset: 0x8d4, Size: 0x4]
	float SwimSpeedSmoothSpeed;//[Offset: 0x8d8, Size: 0x4]
	float SwimMaxFloatingUpSpeed;//[Offset: 0x8dc, Size: 0x4]
	float SwimMaxSinkingSpeed;//[Offset: 0x8e0, Size: 0x4]
	PhysicsVolume* NextPhysicsVolume;//[Offset: 0x8e4, Size: 0x8]
	bool bWantDeathVerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a9, Size: 0x1]
	float DeathVergeBodyRadius;//[Offset: 0x9ac, Size: 0x4]
	float DeathVergeHalfHeight;//[Offset: 0x9b0, Size: 0x4]
	Actor* HangingTargetObj;//[Offset: 0x9b8, Size: 0x8]
	Vector HangingTargetVelocity;//[Offset: 0x9c0, Size: 0xc]
	bool UseHangingTargetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cc, Size: 0x1]
	bool UseHangingTargetPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cd, Size: 0x1]
	float SkywardFlyVerticalAcceleration;//[Offset: 0x9d0, Size: 0x4]
	float MaxSkywardFlyHorizontalSpeed;//[Offset: 0x9d4, Size: 0x4]
	float MaxSkywardFlyVerticalSpeed;//[Offset: 0x9d8, Size: 0x4]
	float BrakingDecelerationSkywardFlying;//[Offset: 0x9dc, Size: 0x4]
	float SkywardFlyLateralFriction;//[Offset: 0x9e0, Size: 0x4]
	float SkywardFlyAirControl;//[Offset: 0x9e4, Size: 0x4]
	float SkywardFlyAirControlBoostMultiplier;//[Offset: 0x9e8, Size: 0x4]
	float SkywardFlyAirControlBoostVelocityThreshold;//[Offset: 0x9ec, Size: 0x4]
	float HitHeadFallingVerticalSpeed;//[Offset: 0x9f0, Size: 0x4]
	float HitHeadVerticalDeceleration;//[Offset: 0x9f4, Size: 0x4]
	void UpdateCharacterStateAfterMovement__DelegateSignature(SolarCharacterMovementComponent* MovementComponent, float DeltaTime);// 0x1ce1078ea041
	void SetHinderZ(float InHinderZ);// 0x1ce0078ea041
	void SetHinderAngel(float InHinderAngel);// 0x1cdf078ea041
	void OnMovementBaseChanged(Character* Character, PrimitiveComponent* OldBase, PrimitiveComponent* NewBase);// 0x1cde078ea041
	void HinderUphill(out const Vector SlopeNormal, out Vector MoveVelocity);// 0x1cdd078ea041
	enum GetLastWalkMode();// 0x1cdc078ea041
	enum GetCurrentWalkMode();// 0x1cda078ea041
	void ForcedJump();// 0x1cd9078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterMovementCompBase.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float SimStepOptimizedDist;//[Offset: 0x618, Size: 0x4]
	int TimeDiscrepancyUploadThres;//[Offset: 0x650, Size: 0x4]
	SolarClientAdjustPositionInfo CachedClientAdjustPositionInfo;//[Offset: 0x658, Size: 0x38]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarClientAdjustPositionInfo
	PrimitiveComponent* NewBase;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomJumpParams
	float JumpHeight;//[Offset: 0x0, Size: 0x4]
	float JumpTime;//[Offset: 0x4, Size: 0x4]
	float JumpDelay;//[Offset: 0x8, Size: 0x4]
	bool bEnableLateralSpeedAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	RuntimeFloatCurve LateralSpeedAdjustCurve;//[Offset: 0x10, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: JetPackConfig.DataAsset.Object
	float CurrentSpeedResidueHorizontal;//[Offset: 0x30, Size: 0x4]
	float CurrentSpeedResidueVertical;//[Offset: 0x34, Size: 0x4]
	float AltitudeLimitation;//[Offset: 0x38, Size: 0x4]
	float DashHeightForLimitedAltitude;//[Offset: 0x3c, Size: 0x4]
	float SlantDashInputThreshold;//[Offset: 0x40, Size: 0x4]
	float VerticalDashTime;//[Offset: 0x44, Size: 0x4]
	float VerticalDashHeight;//[Offset: 0x48, Size: 0x4]
	float VerticalDashAngle;//[Offset: 0x4c, Size: 0x4]
	float VerticalDashMaxHorizontalEndSpeed;//[Offset: 0x50, Size: 0x4]
	float VerticalDashBreakableTime;//[Offset: 0x54, Size: 0x4]
	float VerticalDashCameraFadeOutTime;//[Offset: 0x58, Size: 0x4]
	float SlantDashTime;//[Offset: 0x5c, Size: 0x4]
	float SlantDashHeight;//[Offset: 0x60, Size: 0x4]
	float SlantDashAngle;//[Offset: 0x64, Size: 0x4]
	float SlantDashMaxHorizontalEndSpeed;//[Offset: 0x68, Size: 0x4]
	float SlantDashBreakableTime;//[Offset: 0x6c, Size: 0x4]
	float SlantDashCameraFadeOutTime;//[Offset: 0x70, Size: 0x4]
	float HorizontalDashTime;//[Offset: 0x74, Size: 0x4]
	float HorizontalDashDistance;//[Offset: 0x78, Size: 0x4]
	float HorizontalDashAngle;//[Offset: 0x7c, Size: 0x4]
	float HorizontalDashEndSpeed;//[Offset: 0x80, Size: 0x4]
	float HorizontalDashBreakableTime;//[Offset: 0x84, Size: 0x4]
	float HorizontalDashCameraFadeOutTime;//[Offset: 0x88, Size: 0x4]
	float UnderWaterHorizontalDashTime;//[Offset: 0x8c, Size: 0x4]
	float UnderWaterHorizontalDashDistance;//[Offset: 0x90, Size: 0x4]
	float UnderWaterHorizontalDashBreakableTime;//[Offset: 0x94, Size: 0x4]
	float UnderWaterHorizontalDashCameraFadeOutTime;//[Offset: 0x98, Size: 0x4]
	VehicleEjectParams DefaultVehicleEjectParams;//[Offset: 0x9c, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCapsuleRoot.Actor.Object
	SceneComponent* RootComp;//[Offset: 0x230, Size: 0x8]
	WidgetComponent* LocationSign;//[Offset: 0x238, Size: 0x8]
	float CatchupDuration;//[Offset: 0x250, Size: 0x4]
	float CatchupBaseLerp;//[Offset: 0x254, Size: 0x4]
	MiniMapAirlineData MiniMapData;//[Offset: 0x27c, Size: 0x30]
	UsingAirlineData CurrentAirline;//[Offset: 0x2ac, Size: 0x44]
	float CruiseStartTime;//[Offset: 0x2f0, Size: 0x4]
	Vector CruiseStartLoc;//[Offset: 0x2f4, Size: 0xc]
	Rotator CruiseStartRot;//[Offset: 0x300, Size: 0xc]
	int ForceParachuteWarningTime;//[Offset: 0x30c, Size: 0x4]
	float MaxAllowedSmoothDistance;//[Offset: 0x310, Size: 0x4]
	float ClientSpeedScale;//[Offset: 0x314, Size: 0x4]
	float ClientRotationSmoothSpeed;//[Offset: 0x318, Size: 0x4]
	CapsuleFormationData* CapsuleFormationData;//[Offset: 0x338, Size: 0x8]
	<Vector,TeamFormationUnit> CruiseFormation;//[Offset: 0x340, Size: 0x50]
	BoarderInfo[] BoardingPlayerList;//[Offset: 0x390, Size: 0x10]
	void ServerUnBoardCharacter(SolarCharacter* Character);// 0x4fab078ea041
	void OnRep_MiniMapAirline();// 0x4faa078ea041
	void OnRep_CurrentAirline();// 0x4fa9078ea041
	MiniMapAirlineData K2_GetAirlineData();// 0x4fa8078ea041
	SolarCapsuleRoot* GetSolarCapsuleRoot(const Object* WorldContextObject);// 0x4fa7078ea041
	float GetCruiseProgress();// 0x4fa6078ea041
	int BoardingCharacter(out const BoarderInfo BoarderInfo);// 0x4fa5078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoarderInfo
	SolarCharacter* Boarder;//[Offset: 0x0, Size: 0x8]
	int BoarderTeamID;//[Offset: 0x8, Size: 0x4]
	int BoarderTeamSize;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UsingAirlineData
	int MapId;//[Offset: 0x0, Size: 0x4]
	Vector StartPoint;//[Offset: 0x4, Size: 0xc]
	Vector EndPoint;//[Offset: 0x10, Size: 0xc]
	Vector2D Direction;//[Offset: 0x1c, Size: 0x8]
	float Speed;//[Offset: 0x24, Size: 0x4]
	float Height;//[Offset: 0x28, Size: 0x4]
	Vector CanParachutePoint;//[Offset: 0x2c, Size: 0xc]
	Vector ForceParachutePoint;//[Offset: 0x38, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CapsuleFormationData.DataAsset.Object
	<byte,EchelonFormation> TeamFormation;//[Offset: 0x30, Size: 0x50]
	CruiseFormation CruiseFormation;//[Offset: 0x80, Size: 0x10]
	void OverrideTeamFormation(out const <byte,EchelonFormation> InNewFormation);// 0x457d078ea041
	void ClearTeamFormationData();// 0x457c078ea041
	void ClearCruiseFormationData();// 0x457b078ea041
	void AddTeamFormationLocation(const byte InEchelon, out const Vector InLocation);// 0x457a078ea041
	void AddLocationToTeamFormation(out <byte,EchelonFormation> InFormation, const byte InEchelon, out const Vector InLocation);// 0x4579078ea041
	void AddEchelonFormation(const byte InEchelon, out const EchelonFormation InFormation);// 0x4578078ea041
	void AddCruiseFormation(out const CruiseFormation InFormation);// 0x4577078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EchelonFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CruiseFormation
	Vector[] LocationList;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TeamFormationUnit
	<byte,EchelonFormationUnit> TeamFormation;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EchelonFormationUnit
	BoardingSpotInfo[] EchelonFormation;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoardingSpotInfo
	Vector SpotLocation;//[Offset: 0x0, Size: 0xc]
	SolarPlayerState* BoardingPlayer;//[Offset: 0x10, Size: 0x8]
	SolarPlayerState* LeaderPlayer;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterCruiseComponent.ActorComponent.Object
	SolarCapsuleActor* BoardedCapsulePrivate;//[Offset: 0xb0, Size: 0x8]
	FName CruiseStartSoundGroupName;//[Offset: 0xc4, Size: 0x8]
	SolarCharacter* GetCharacterOwner();// 0x46db078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCapsuleActor.Actor.Object
	SoftObjectPath StartCruisingPath;//[Offset: 0x228, Size: 0x18]
	SoftObjectPath StopCruisingPath;//[Offset: 0x240, Size: 0x18]
	FName CruiseCharacterBindingName;//[Offset: 0x258, Size: 0x8]
	FName CruiseCapsuleBindingName;//[Offset: 0x260, Size: 0x8]
	FName CruiseCameraBindingName;//[Offset: 0x268, Size: 0x8]
	float SequenceCameraBlendDuration;//[Offset: 0x270, Size: 0x4]
	AnimationAsset* CapsuleCruisingLoopAnim;//[Offset: 0x278, Size: 0x8]
	AnimSequence* CharacterCruiseLoopAnim;//[Offset: 0x280, Size: 0x8]
	SoftObjectPath CapsuleCruisingStopAnimPath;//[Offset: 0x288, Size: 0x18]
	AnimSequence* CharacterCruiseEndAnim;//[Offset: 0x2a0, Size: 0x8]
	SkeletalMeshComponent* CapsuleSkeletalMesh;//[Offset: 0x2a8, Size: 0x8]
	StaticMeshComponent*[] AirflowMeshEffects;//[Offset: 0x2b0, Size: 0x10]
	ParticleSystemComponent*[] AirflowParticleEffects;//[Offset: 0x2c0, Size: 0x10]
	LevelSequenceActor* SequenceActor;//[Offset: 0x2d0, Size: 0x8]
	CineCameraActor* SequenceCamera;//[Offset: 0x2d8, Size: 0x8]
	LevelSequence* StartCruisingSequence;//[Offset: 0x2e0, Size: 0x8]
	LevelSequence* StopCruisingSequence;//[Offset: 0x2e8, Size: 0x8]
	AnimationAsset* CapsuleCruisingEndAnim;//[Offset: 0x2f0, Size: 0x8]
	SolarCharacter* BoardedCharacterPrivate;//[Offset: 0x2f8, Size: 0x8]
	ParticleSystemComponent* CloudParticleComponent;//[Offset: 0x300, Size: 0x8]
	SoftObjectPath CloudParticlePath;//[Offset: 0x308, Size: 0x18]
	ParticleSystem* CloudParticleAsset;//[Offset: 0x340, Size: 0x8]
	SoftObjectPath CapsuleSinglyCruisingStopAnimPath;//[Offset: 0x350, Size: 0x18]
	AnimationAsset* CapsuleSinglyCruisingEndAnim;//[Offset: 0x368, Size: 0x8]
	FName FX_MashCapsuleActorBindingName;//[Offset: 0x370, Size: 0x8]
	SkeletalMeshActor* FX_MashCapsuleActor;//[Offset: 0x378, Size: 0x8]
	LevelSequence* StartSingleCruiseSequence;//[Offset: 0x380, Size: 0x8]
	float CharacterParachuteAnimTime;//[Offset: 0x388, Size: 0x4]
	void StopCruiseSequenceFinished();// 0x4fa4078ea041
	void StartCruiseSequenceFinished();// 0x4fa3078ea041
	void PlayStopSinglyCruiseAnimation();// 0x4fa2078ea041
	void PlayStopCruiseSequence();// 0x4fa1078ea041
	void PlayStopCruiseAnimation();// 0x4fa0078ea041
	void PlayStartCruiseSequence();// 0x4f9f078ea041
	void PlayCruiseLoopAnimation();// 0x4f9e078ea041
	void OnSingleCruiseLevelSequenceFinished();// 0x4f9d078ea041
	void HideCapsuleAirflowVFX();// 0x4f9c078ea041
	SolarCapsuleActor* CreateCapsuleActorForBoarder(SolarCharacter* InBoarder, class SolarCapsuleActor CapsuleActorClass);// 0x4f9b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x238, Size: 0x14]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x250, Size: 0x8]
	SoftObjectPath LevelSequence;//[Offset: 0x258, Size: 0x18]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x270, Size: 0x10]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x280, Size: 0x2]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x288, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x290, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x298, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x298, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x2a0, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2a8, Size: 0x8]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	void ShowBurnin();// 0x38d7078ea041
	void SetSequence(LevelSequence* InSequence);// 0x38d6078ea041
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x38d5078ea041
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x38d4078ea041
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x38d3078ea041
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x38d2078ea041
	void ResetBindings();// 0x38d1078ea041
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x38d0078ea041
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x38cf078ea041
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x38ce078ea041
	void OnLevelSequenceLoaded__DelegateSignature();// 0x38cd078ea041
	LevelSequence* LoadSequence();// 0x38cc078ea041
	void HideBurnin();// 0x38cb078ea041
	LevelSequencePlayer* GetSequencePlayer();// 0x38ca078ea041
	LevelSequence* GetSequence();// 0x38c9078ea041
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x38c8078ea041
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x38c7078ea041
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x38c6078ea041
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x38c5078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x888, Size: 0x10]
	CameraComponent* GetActiveCameraComponent();// 0x65ed078ea041
	LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x65ec078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x408, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x418, Size: 0x10]
	delegate OnStop;//[Offset: 0x428, Size: 0x10]
	delegate OnPause;//[Offset: 0x438, Size: 0x10]
	delegate OnFinished;//[Offset: 0x448, Size: 0x10]
	byte status;//[Offset: 0x458, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x460, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x468, Size: 0x4]
	int DurationFrames;//[Offset: 0x46c, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x470, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x488, Size: 0x14]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4a0, Size: 0x320]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x828, Size: 0x10]
	interface class None* PlaybackClient;//[Offset: 0x838, Size: 0x10]
	void StopAtCurrentTime();// 0x42e5078ea041
	void Stop();// 0x42e4078ea041
	void SetTimeRange(float StartTime, float Duration);// 0x42e3078ea041
	void SetPlayRate(float PlayRate);// 0x42e2078ea041
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x42e1078ea041
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x42e0078ea041
	void SetFrameRate(FrameRate FrameRate);// 0x42df078ea041
	void SetFrameRange(int StartFrame, int Duration);// 0x42de078ea041
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x42dd078ea041
	void ScrubToSeconds(float TimeInSeconds);// 0x42dc078ea041
	bool ScrubToMarkedFrame(FString InLabel);// 0x42db078ea041
	void ScrubToFrame(FrameTime NewPosition);// 0x42da078ea041
	void Scrub();// 0x42d9078ea041
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x42d8078ea041
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x42d7078ea041
	void PlayToSeconds(float TimeInSeconds);// 0x42d6078ea041
	bool PlayToMarkedFrame(FString InLabel);// 0x42d5078ea041
	void PlayToFrame(FrameTime NewPosition);// 0x42d4078ea041
	void PlayReverse();// 0x42d3078ea041
	void PlayLooping(int NumLoops);// 0x42d2078ea041
	void Play();// 0x42d1078ea041
	void Pause();// 0x42d0078ea041
	void JumpToSeconds(float TimeInSeconds);// 0x42cf078ea041
	void JumpToPosition(float NewPlaybackPosition);// 0x42ce078ea041
	bool JumpToMarkedFrame(FString InLabel);// 0x42cd078ea041
	void JumpToFrame(FrameTime NewPosition);// 0x42cc078ea041
	bool IsReversed();// 0x42cb078ea041
	bool IsPlaying();// 0x42ca078ea041
	bool IsPaused();// 0x42c9078ea041
	void GoToEndAndStop();// 0x42c8078ea041
	QualifiedFrameTime GetStartTime();// 0x42c7078ea041
	float GetPlayRate();// 0x42c6078ea041
	float GetPlaybackStart();// 0x42c5078ea041
	float GetPlaybackPosition();// 0x42c4078ea041
	float GetPlaybackEnd();// 0x42c3078ea041
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x42c2078ea041
	float GetLength();// 0x42c1078ea041
	FrameRate GetFrameRate();// 0x42c0078ea041
	int GetFrameDuration();// 0x42bf078ea041
	QualifiedFrameTime GetEndTime();// 0x42be078ea041
	QualifiedFrameTime GetDuration();// 0x42bd078ea041
	bool GetDisableCameraCuts();// 0x42bc078ea041
	QualifiedFrameTime GetCurrentTime();// 0x42bb078ea041
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x42ba078ea041
	void ChangePlaybackDirection();// 0x42b9078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 0x50]
	class Object* DirectorClass;//[Offset: 0x490, Size: 0x8]
	void RemoveMetaDataByClass(class Object InClass);// 0x4020078ea041
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x401f078ea041
	Object* FindMetaDataByClass(class Object InClass);// 0x401e078ea041
	Object* CopyMetaData(Object* InMetaData);// 0x401d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceObjectReferenceMap
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x65e8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceBurnInInitSettings.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x260, Size: 0xb8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x318, Size: 0x8]
	void SetSettings(Object* InSettings);// 0x65ea078ea041
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x65e9078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 0xc]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x820, Size: 0x50]
	CineCameraComponent* GetCineCameraComponent();// 0x57e8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x40, Size: 0xc]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x950, Size: 0xc]
	CameraFilmbackSettings Filmback;//[Offset: 0x95c, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x968, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x980, Size: 0x58]
	float CurrentFocalLength;//[Offset: 0x9d8, Size: 0x4]
	float CurrentAperture;//[Offset: 0x9dc, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x9e0, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x9f0, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0xa00, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0xa10, Size: 0x10]
	FString DefaultFilmbackPreset;//[Offset: 0xa20, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0xa30, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0xa40, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0xa44, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x64bb078ea041
	void SetFilmbackPresetByName(FString InPresetName);// 0x64ba078ea041
	void SetCurrentFocalLength(out const float InFocalLength);// 0x64b9078ea041
	float GetVerticalFieldOfView();// 0x64b8078ea041
	NamedLensPreset[] GetLensPresetsCopy();// 0x64b7078ea041
	FString GetLensPresetName();// 0x64b6078ea041
	float GetHorizontalFieldOfView();// 0x64b5078ea041
	FString GetFilmbackPresetName();// 0x64b4078ea041
	FString GetDefaultFilmbackPresetName();// 0x64b3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x38]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]
	float FocusOffset;//[Offset: 0x50, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0xc]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 0x1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x238, Size: 0x8]
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x240, Size: 0x8]
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x248, Size: 0x8]
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x250, Size: 0x8]
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x258, Size: 0x8]
	void OnRep_ReplicatedPhysAsset();// 0x6c7d078ea041
	void OnRep_ReplicatedMesh();// 0x6c7c078ea041
	void OnRep_ReplicatedMaterial1();// 0x6c7b078ea041
	void OnRep_ReplicatedMaterial0();// 0x6c7a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SingleCruiseBaseParam
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SingleCapsuleRootActor.Actor.Object
	SingleCruiseParamForReplicated SingleCruiseParam;//[Offset: 0x230, Size: 0x28]
	float ParachuteTime;//[Offset: 0x258, Size: 0x4]
	enum SingleCruiseState;//[Offset: 0x260, Size: 0x1]
	void OnRep_SingleCruiseState(enum LastCruiseState);// 0x4fac078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SingleCruiseParamForReplicated
	SolarCharacter* CurrentCharacter;//[Offset: 0x0, Size: 0x8]
	Vector StartLocation;//[Offset: 0x8, Size: 0xc]
	Vector EndLocation;//[Offset: 0x14, Size: 0xc]
	float FlyDuringTime;//[Offset: 0x20, Size: 0x4]
	float StartTime;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x228, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	void OnRep_bEnabled();// 0x6735078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	bool EnableFarlightMobile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 0x1]
	SLDistanceFogData DistanceFogData_M;//[Offset: 0x318, Size: 0x18]
	SLHeightFogData HeightFogData_M;//[Offset: 0x330, Size: 0x10]
	SLDirectionalLightScattering ScatteringData_M;//[Offset: 0x340, Size: 0x20]
	LinearColor FogColor_M;//[Offset: 0x360, Size: 0x10]
	float FogDensity;//[Offset: 0x370, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x374, Size: 0x4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x378, Size: 0xc]
	LinearColor FogInscatteringColor;//[Offset: 0x384, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x398, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x3a0, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x3a4, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x3b4, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x3b8, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x3bc, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x3c0, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x3c4, Size: 0x10]
	float FogMaxOpacity;//[Offset: 0x3d4, Size: 0x4]
	float StartDistance;//[Offset: 0x3d8, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x3dc, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x3e4, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x3e8, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x3ec, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x3fc, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x400, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x404, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x675c078ea041
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x675b078ea041
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x675a078ea041
	void SetVolumetricFogDistance(float NewValue);// 0x6759078ea041
	void SetVolumetricFogAlbedo(Color NewValue);// 0x6758078ea041
	void SetVolumetricFog(bool bNewValue);// 0x6757078ea041
	void SetStartDistance(float Value);// 0x6756078ea041
	void SetSecondFogData_FogHeightOffset(float Value);// 0x6755078ea041
	void SetSecondFogData_FogHeightFalloff(float Value);// 0x6754078ea041
	void SetSecondFogData_FogDensity(float Value);// 0x6753078ea041
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x6752078ea041
	void SetInscatteringTextureTint(LinearColor Value);// 0x6751078ea041
	void SetInscatteringColorCubemapAngle(float Value);// 0x6750078ea041
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x674f078ea041
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x674e078ea041
	void SetFogMaxOpacity(float Value);// 0x674d078ea041
	void SetFogInscatteringColor(LinearColor Value);// 0x674c078ea041
	void SetFogHeightFalloff(float Value);// 0x674b078ea041
	void SetFogDensity(float Value);// 0x674a078ea041
	void SetFogCutoffDistance(float Value);// 0x6749078ea041
	void SetDirectionalInscatteringStartDistance(float Value);// 0x6748078ea041
	void SetDirectionalInscatteringExponent(float Value);// 0x6747078ea041
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x6746078ea041
	void Set_HStartDistance(float _HStartDistance);// 0x6745078ea041
	void Set_HMaxFadingDistance(float _HMaxFadingDistance);// 0x6744078ea041
	void Set_HFogHeight(float _HFogHeight);// 0x6743078ea041
	void Set_HFogFallOff(float _HFogFallOff);// 0x6742078ea041
	void Set_FogColor_M(LinearColor _FogColor_M);// 0x6741078ea041
	void Set_DStartDistance(float _DStartDistance);// 0x6740078ea041
	void Set_DMaxOpacity(float _DMaxOpacity);// 0x673f078ea041
	void Set_DMaxDistance(float _DMaxDistance);// 0x673e078ea041
	void Set_DirectionalInscatteringStartDistance_M(float _DirectionalInscatteringStartDistance_M);// 0x673d078ea041
	void Set_DirectionalInscatteringMaxDistance_M(float _DirectionalInscatteringMaxDistance_M);// 0x673c078ea041
	void Set_DirectionalInscatteringGamma_M(float _DirectionalInscatteringGamma_M);// 0x673b078ea041
	void Set_DirectionalInscatteringExponent_M(float _DirectionalInscatteringExponent_M);// 0x673a078ea041
	void Set_DirectionalInscatteringColor_M(LinearColor _DirectionalInscatteringColor_M);// 0x6739078ea041
	void Set_DFogHeight(float _DFogHeight);// 0x6738078ea041
	void Set_DFogGamma(float _DFogGamma);// 0x6737078ea041
	void Set_DFogFallOff(float _DFogFallOff);// 0x6736078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SLDistanceFogData
	float DFogHeight;//[Offset: 0x0, Size: 0x4]
	float DFogFallOff;//[Offset: 0x4, Size: 0x4]
	float DMaxDistance;//[Offset: 0x8, Size: 0x4]
	float DFogGamma;//[Offset: 0xc, Size: 0x4]
	float DMaxOpacity;//[Offset: 0x10, Size: 0x4]
	float DStartDistance;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SLHeightFogData
	float HFogHeight;//[Offset: 0x0, Size: 0x4]
	float HFogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float HStartDistance;//[Offset: 0x8, Size: 0x4]
	float HMaxFadingDistance;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SLDirectionalLightScattering
	float DirectionalInscatteringExponent_M;//[Offset: 0x0, Size: 0x4]
	float DirectionalInscatteringStartDistance_M;//[Offset: 0x4, Size: 0x4]
	float DirectionalInscatteringMaxDistance_M;//[Offset: 0x8, Size: 0x4]
	LinearColor DirectionalInscatteringColor_M;//[Offset: 0xc, Size: 0x10]
	float DirectionalInscatteringGamma_M;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSystemPlayerBase.WeaponSystemBase.ActorComponent.Object
	bool bHasPrimarySlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bHasSecondarySlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	bool bHasTertiarySlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1]
	SolarUnArmWeapon* Punch;//[Offset: 0x2a4, Size: 0x8]
	SolarPlayerWeapon* PrimarySlotWeapon;//[Offset: 0x2ac, Size: 0x8]
	SolarPlayerWeapon* SecondarySlotWeapon;//[Offset: 0x2b4, Size: 0x8]
	SolarPlayerWeapon* TertiarySlotWeapon;//[Offset: 0x2bc, Size: 0x8]
	SolarPlayerWeapon* LastHeldWeapon;//[Offset: 0x2c4, Size: 0x8]
	SolarPlayerWeapon* HeldWeapon;//[Offset: 0x2cc, Size: 0x8]
	bool bSwapWeaponSlotBitMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1]
	void TriggerBoltAnim();// 0x6221078ea041
	void SpawnMeleeWeapon();// 0x6220078ea041
	void ResetCurrentWeaponFireState();// 0x621f078ea041
	void RefreshWeaponRelativeTransOnBackpack(byte WeaponSlot);// 0x621e078ea041
	void PostBolt();// 0x621d078ea041
	void OpenScopeForSpectator();// 0x621c078ea041
	void OnRep_TertiarySlotWeapon();// 0x621b078ea041
	void OnRep_SwapWeaponSlotBitMark();// 0x621a078ea041
	void OnRep_SecondarySlotWeapon();// 0x6219078ea041
	void OnRep_Punch();// 0x6218078ea041
	void OnRep_PrimarySlotWeapon();// 0x6217078ea041
	void OnRep_LastHeldWeapon();// 0x6216078ea041
	void OnRep_HeldWeapon();// 0x6215078ea041
	SolarPlayerWeapon* GetWeaponBySlot(int InSlotType);// 0x6214078ea041
	SolarUnArmWeapon* GetUnArmWeapon();// 0x6213078ea041
	SolarPlayerWeapon* GetPackSecondaryWeapon();// 0x6212078ea041
	SolarPlayerWeapon* GetPackPrimaryWeapon();// 0x6211078ea041
	int GetLastActiveWeaponSlot();// 0x6210078ea041
	bool GetIsUnArm();// 0x620f078ea041
	float GetCurrentWeaponReloadTime(int Mode);// 0x620e078ea041
	bool GetCurrentWeaponIsOverloading();// 0x620d078ea041
	Texture2D* GetCurrentWeaponIcon();// 0x620c078ea041
	float GetCurrentWeaponBoltTime(int Mode);// 0x620b078ea041
	SolarPlayerWeapon* GetCurrentWeapon();// 0x620a078ea041
	float GetCurrentSwitchWeaponTime();// 0x6209078ea041
	int GetCurrentActiveSlot();// 0x6208078ea041
	StaticMesh* GetClipMeshOfCurrentWeapon();// 0x6207078ea041
	void GameStatisticsWeaponSkill(const int InFireMode);// 0x6206078ea041
	void CrosshairQuitReload();// 0x6205078ea041
	void CrosshairEnterReload();// 0x6204078ea041
	void CloseScopeForSpectator();// 0x6203078ea041
	void CleanWeaponSlotsUI();// 0x6202078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarUnArmWeapon.Actor.Object
	float Angle;//[Offset: 0x230, Size: 0x4]
	byte[] HitDetectableTypes;//[Offset: 0x238, Size: 0x10]
	float Interval;//[Offset: 0x248, Size: 0x4]
	class UserWidget* CrossHair;//[Offset: 0x250, Size: 0x8]
	SoftObjectPath FireIconPath;//[Offset: 0x258, Size: 0x18]
	GameplayCueTag HitCueTag;//[Offset: 0x270, Size: 0x8]
	SlateBrush FireBtnBrush;//[Offset: 0x280, Size: 0xe0]
	SolarAbilitySystemComponent* AbilitySystemComponent;//[Offset: 0x360, Size: 0x8]
	SolarCharacterBase* AttackTargetCharacter;//[Offset: 0x370, Size: 0x8]
	SolarDamageInfo DamageInfo;//[Offset: 0x3c8, Size: 0x40]
	void TryDealMeleeDamage(out const Vector Location, float DetectSphereRadius);// 0x5eda078ea041
	void ServerDealMeleeDamage(SolarCharacterBase* Target, Vector ClientHitLoc, bool bHeavyPunch);// 0x5ed9078ea041
	bool HitAnyCharacters(out SolarCharacterBase* HitTarget, out const Vector Location, out const float DetectSphereRadius);// 0x5ed8078ea041
	SlateBrush GetFireButtonBrush();// 0x5ed7078ea041
	SolarCharacterBase* GetAttackTargetCharacter();// 0x5ed6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponSystemVehicleComponent.WeaponSystemBase.ActorComponent.Object
	WeaponSystemInteract WeaponSystemInteract;//[Offset: 0x180, Size: 0x50]
	SolarVehicleWeapon* CurrentWeapon;//[Offset: 0x1e8, Size: 0x8]
	SolarCharacter* MyPawn;//[Offset: 0x1f0, Size: 0x8]
	WeaponAction WeaponEquipAction;//[Offset: 0x214, Size: 0x8]
	WeaponAction WeaponUnequipAction;//[Offset: 0x21c, Size: 0x8]
	<FName,enum> SavedWeaponScopeMap;//[Offset: 0x228, Size: 0x50]
	bool bQuickAdsHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	float QuickAdsPressedTime;//[Offset: 0x288, Size: 0x4]
	void ServerStatVehicleWeaponFire(const int InFireMode);// 0x624c078ea041
	void ServerReload(const byte ModeIndex, const int Need);// 0x624b078ea041
	void ServerChangeWeaponScopeType(enum InScopeType);// 0x624a078ea041
	void OnRep_WeaponUnequipAction();// 0x6249078ea041
	void OnRep_WeaponEquipAction();// 0x6248078ea041
	void OnRep_CurrentWeapon(SolarVehicleWeapon* PreviousWeapon);// 0x6247078ea041
	void OnQuickAdsFire();// 0x6246078ea041
	SolarVehicleWeapon* GetCurrentVehicleWeapon();// 0x6245078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleWeapon.SolarWeapon.Actor.Object
	float MaxWeaponPitch;//[Offset: 0x8e8, Size: 0x4]
	float MinWeaponPitch;//[Offset: 0x8ec, Size: 0x4]
	float MaxWeaponYaw;//[Offset: 0x8f0, Size: 0x4]
	float MinWeaponYaw;//[Offset: 0x8f4, Size: 0x4]
	float PitchFollowSpeed;//[Offset: 0x8f8, Size: 0x4]
	float YawFollowSpeed;//[Offset: 0x8fc, Size: 0x4]
	float SimulationSmoothLerpSpeed;//[Offset: 0x900, Size: 0x4]
	float SimulationSmoothLerpThreshold;//[Offset: 0x904, Size: 0x4]
	bool bAbsoluteRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908, Size: 0x1]
	bool bHasScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x909, Size: 0x1]
	bool bHiddenMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90a, Size: 0x1]
	Vector ScopeCameraOffset;//[Offset: 0x90c, Size: 0xc]
	Vector ScopeTargetOffset;//[Offset: 0x918, Size: 0xc]
	float ScopeCameraDistance;//[Offset: 0x924, Size: 0x4]
	float ScopeBlendTime;//[Offset: 0x928, Size: 0x4]
	VehicleCameraDataAsset* ScopeCameraData;//[Offset: 0x930, Size: 0x8]
	float ScopeFOVSwitchSpeed;//[Offset: 0x938, Size: 0x4]
	float QuickAdsFireDelay;//[Offset: 0x93c, Size: 0x4]
	enum DefaultWeaponScopeType;//[Offset: 0x940, Size: 0x1]
	class VehicleWeaponScopeWidget* ScopeUI;//[Offset: 0x948, Size: 0x8]
	float PitchCameraOffset;//[Offset: 0x950, Size: 0x4]
	bool bCameraFocusWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954, Size: 0x1]
	bool bUseNormalCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x955, Size: 0x1]
	byte FireType;//[Offset: 0x956, Size: 0x1]
	FName FireSocketName;//[Offset: 0x958, Size: 0x8]
	float UpdateShotStartLocThreshold;//[Offset: 0x960, Size: 0x4]
	byte FireAixsType;//[Offset: 0x964, Size: 0x1]
	FName TurretVSocketName;//[Offset: 0x968, Size: 0x8]
	FName TurretHSocketName;//[Offset: 0x970, Size: 0x8]
	float ShootTolerance;//[Offset: 0x978, Size: 0x4]
	SolarVehiclePawn* AttachedVehicle;//[Offset: 0x980, Size: 0x8]
	SolarCharacter* WeaponOwner;//[Offset: 0x988, Size: 0x8]
	bool bVehicleWeaponScopeOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 0x1]
	bool bActivedWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x991, Size: 0x1]
	uint32 RotationYawAndPitchPacket;//[Offset: 0x994, Size: 0x4]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x9b0, Size: 0x8]
	class SkeletalMeshComponent* VehicleStencilClass;//[Offset: 0x9b8, Size: 0x28]
	SkeletalMeshComponent* VehicleStencilNew;//[Offset: 0x9e0, Size: 0x8]
	FName AttachBoneName;//[Offset: 0x9e8, Size: 0x8]
	bool bUseAssistLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbf0, Size: 0x1]
	bool bShowAssistLockUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbf0, Size: 0x1]
	Vector2D AssistLockImageSize;//[Offset: 0xbf4, Size: 0x8]
	Vector2D PCAssistLockImageSize;//[Offset: 0xbfc, Size: 0x8]
	bool bAutoLockSpreadSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc04, Size: 0x1]
	float AutoLockSpreadDecPerSecond;//[Offset: 0xc08, Size: 0x4]
	float PreSelectProgress;//[Offset: 0xc0c, Size: 0x4]
	RuntimeFloatCurve ProgressUpgradeSpeedCurve;//[Offset: 0xc10, Size: 0x88]
	enum AssistLockState;//[Offset: 0xc98, Size: 0x1]
	bool bSimulateWeaponFireSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc99, Size: 0x1]
	float TriggerSmoothReticleDistance;//[Offset: 0xc9c, Size: 0x4]
	Vector2D SmoothReticleSpeed;//[Offset: 0xca0, Size: 0x8]
	Transform CachedWeaponRelativeTransform;//[Offset: 0xcb0, Size: 0x30]
	Transform CachedFireMuzzleTransform;//[Offset: 0xce0, Size: 0x30]
	Transform CachedTurretVSocketTransform;//[Offset: 0xd10, Size: 0x30]
	Transform CachedTurretHSocketTransform;//[Offset: 0xd40, Size: 0x30]
	float SimulateMuzzleDistanceThreshold;//[Offset: 0xd70, Size: 0x4]
	class SolarBullet* VehicleWeaponPrimaryOverrideBulletClass;//[Offset: 0xdd0, Size: 0x8]
	class SolarBullet* VehicleWeaponSecondaryOverrideBulletClass;//[Offset: 0xdd8, Size: 0x8]
	class SolarBullet* VehicleWeaponPrimaryOverrideTraceBulletClass;//[Offset: 0xde0, Size: 0x8]
	GameplayTagContainer BlockVehicleWeaponFireTags;//[Offset: 0xde8, Size: 0x20]
	bool bEnablePreAimingLaser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe21, Size: 0x1]
	bool bNotOptTickIntervalPreAimingActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe22, Size: 0x1]
	FName PreAimingLaserLaunchScoket;//[Offset: 0xe24, Size: 0x8]
	ParticleSystem* PreAimingLaserFX;//[Offset: 0xe30, Size: 0x28]
	ParticleSystem* PreAimingLaserEnermyFX;//[Offset: 0xe58, Size: 0x28]
	int PreAimingLaserChagringPhase;//[Offset: 0xe80, Size: 0x4]
	ParticleSystemComponent* PreAimingLaserEffect;//[Offset: 0xe88, Size: 0x8]
	bool bEnableBackupAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe90, Size: 0x1]
	int BackupAmmoFireCost;//[Offset: 0xe94, Size: 0x4]
	int MaxBackupAmmo;//[Offset: 0xe98, Size: 0x4]
	float ReloadBackupAmmoInterval;//[Offset: 0xe9c, Size: 0x4]
	int ReloadBackupAmmoNum;//[Offset: 0xea0, Size: 0x4]
	int CurrentBackupAmmo;//[Offset: 0xea4, Size: 0x4]
	bool bEnableRechamber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 0x1]
	float PlayRechamberFinishTime;//[Offset: 0xeb4, Size: 0x4]
	FString RechamberStartAndStopSound;//[Offset: 0xec0, Size: 0x10]
	FString RechamberFinishSound;//[Offset: 0xed0, Size: 0x10]
	VehicleVFX RechamberAlertVFX;//[Offset: 0xee0, Size: 0x90]
	int RechamberAlertMaterialIndex;//[Offset: 0xf70, Size: 0x4]
	bool bKeepWeaponStateAfterUncontrolled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf74, Size: 0x1]
	FString ReloadSoundName1P;//[Offset: 0xf78, Size: 0x10]
	FString ReloadSoundName3P;//[Offset: 0xf88, Size: 0x10]
	FString ReloadSoundName3PEnemy;//[Offset: 0xf98, Size: 0x10]
	bool bReloadingAfterUncontrol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa8, Size: 0x1]
	class SolarVehicleGameplayAbility* ReloadAbilityClass;//[Offset: 0xfb0, Size: 0x8]
	bool bIsLargeCaliberWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb8, Size: 0x1]
	CameraShakeData[] LargeCaliberHitCameraShakes;//[Offset: 0xfc0, Size: 0x10]
	ParticleSystem* BulletTargetAreaInSameTeam;//[Offset: 0xfd0, Size: 0x28]
	MaterialInterface* BulletDecalMaterialInSameTeam;//[Offset: 0xff8, Size: 0x28]
	ParticleSystem* BulletTargetAreaInEnemy;//[Offset: 0x1020, Size: 0x28]
	MaterialInterface* BulletDecalMaterialInEnemy;//[Offset: 0x1048, Size: 0x28]
	float AreaParticleScale;//[Offset: 0x1070, Size: 0x4]
	Vector AreaDecalSize;//[Offset: 0x1074, Size: 0xc]
	float AreaFadeOutTime;//[Offset: 0x1080, Size: 0x4]
	FName AreaFadeOutName;//[Offset: 0x1084, Size: 0x8]
	float ForceAreaDisplayRange;//[Offset: 0x108c, Size: 0x4]
	float AreaDisplayMaxRange;//[Offset: 0x1090, Size: 0x4]
	<FireUniqueID,BulletLandAreaData> BulletLandAreaMap;//[Offset: 0x1098, Size: 0x50]
	WeaponRecoilComponent* RecoilComponent;//[Offset: 0x10e8, Size: 0x8]
	void VehicleWeaponOpenScope();// 0x5efd078ea041
	void VehicleWeaponCloseScope();// 0x5efc078ea041
	void ServerUpdateVehicleWeaponRotate(uint32 PackedRotation);// 0x5efb078ea041
	void ServerSendCurveShotHit(uint32 SpawnID, float InTime, SolarPlayerController* InPlayerController, const HitResult InHit);// 0x5efa078ea041
	void ServerCancelVehicleFireAbility(const GameplayAbilitySpecHandle InAbilityHandle);// 0x5ef9078ea041
	void ServerAddWeaponFireTagToCharacter(SolarCharacter* InFiredCharacter);// 0x5ef8078ea041
	void ResetWeaponRotation(float DeltaTime);// 0x5ef7078ea041
	void OnVehicleWeaponUnControlled();// 0x5ef6078ea041
	void OnVehicleWeaponControlled();// 0x5ef5078ea041
	void OnStencilLoaded();// 0x5ef4078ea041
	void OnRep_BackupAmmoChanged(int InOldAmmo);// 0x5ef3078ea041
	void LocallyVehicleWeaponTick(float DeltaTime);// 0x5ef2078ea041
	bool IsPlayerLocallyControlledWeapon();// 0x5ef1078ea041
	void InitializeVehicleWeapon(SolarVehiclePawn* VehicleWeaponOwner, out const FName WeaponAttachSocket);// 0x5ef0078ea041
	Vector GetShotTargetLocation();// 0x5eef078ea041
	byte GetFireType();// 0x5eee078ea041
	Vector GetAimTargetLocation();// 0x5eed078ea041
	void ClientWeaponReloadFailed(float InSpentTime, bool bWasCancelled);// 0x5eec078ea041
	void ClientSendBackupAmmo(int InCurrentAmmo);// 0x5eeb078ea041
	void ClientFinishedWeaponReload();// 0x5eea078ea041
	void ClientDrawDebugString(const Vector TextLocation, FString Text, const Color TextColor, float Duration);// 0x5ee9078ea041
	bool CheckCanOpenScope();// 0x5ee8078ea041
	bool CanEnterFireState();// 0x5ee7078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleCameraDataAsset.DataAsset.Object
	RuntimeFloatCurve TargetArmLengthCurve;//[Offset: 0x30, Size: 0x88]
	float TargetArmLengthInterpSpeed;//[Offset: 0xb8, Size: 0x4]
	Vector TargetOffset;//[Offset: 0xbc, Size: 0xc]
	FName TargetOffsetSocket;//[Offset: 0xc8, Size: 0x8]
	bool bTargetOffsetIgnoreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	bool bTargetOffsetIgnorePitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 0x1]
	bool bCameraRollSameWithVehicleRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 0x1]
	Vector SocketOffset;//[Offset: 0xd4, Size: 0xc]
	float MinPitch;//[Offset: 0xe0, Size: 0x4]
	float MaxPitch;//[Offset: 0xe4, Size: 0x4]
	float MinYaw;//[Offset: 0xe8, Size: 0x4]
	float MaxYaw;//[Offset: 0xec, Size: 0x4]
	RuntimeFloatCurve CameraFovCurve;//[Offset: 0xf0, Size: 0x88]
	float CameraFovInterpSpeed;//[Offset: 0x178, Size: 0x4]
	bool bCameraFollowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 0x1]
	float DefaultPitch;//[Offset: 0x180, Size: 0x4]
	RuntimeFloatCurve CameraFollowSpeedCurve;//[Offset: 0x188, Size: 0x88]
	float CameraFollowTimeThreshold;//[Offset: 0x210, Size: 0x4]
	float CameraResetFollowSpeed;//[Offset: 0x214, Size: 0x4]
	float CameraFollowSpeedThreshold;//[Offset: 0x218, Size: 0x4]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 0x1]
	RuntimeFloatCurve CameraLagInterpSpeedCurve;//[Offset: 0x220, Size: 0x88]
	RuntimeFloatCurve CameraLagCurve;//[Offset: 0x2a8, Size: 0x88]
	RuntimeFloatCurve AdditionalTargetOffsetOnZ;//[Offset: 0x330, Size: 0x88]
	float BlendTime;//[Offset: 0x3b8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleWeaponScopeWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum PresetScopeType;//[Offset: 0x400, Size: 0x1]
	Image* img_Vehicle;//[Offset: 0x408, Size: 0x8]
	Image* Img_Weapon;//[Offset: 0x410, Size: 0x8]
	CanvasPanel* Panel_Pitch;//[Offset: 0x418, Size: 0x8]
	WeaponScopeSliderWidget* Crosshair_Slider;//[Offset: 0x420, Size: 0x8]
	SolarCheckBox* Btn_Pitch;//[Offset: 0x428, Size: 0x8]
	CanvasPanel* SecondReticlePanel;//[Offset: 0x430, Size: 0x8]
	CanvasPanel* Panel_BG;//[Offset: 0x438, Size: 0x8]
	CanvasPanel* Panel_Border;//[Offset: 0x440, Size: 0x8]
	Image* ReticleDirection;//[Offset: 0x448, Size: 0x8]
	CanvasPanel* Coredot;//[Offset: 0x450, Size: 0x8]
	SolarWeaponRechamberWidget* HUD_CarFireCD_L;//[Offset: 0x458, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x460, Size: 0x8]
	CanvasPanelSlot* SecondReticleSlot;//[Offset: 0x468, Size: 0x8]
	CanvasPanelSlot* ReticleDirectionSlot;//[Offset: 0x470, Size: 0x8]
	Image* ProgressImage;//[Offset: 0x478, Size: 0x8]
	WidgetAnimation* ProgressAnima;//[Offset: 0x480, Size: 0x8]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x488, Size: 0x8]
	void UpdateScopeUI(SolarVehicleWeapon* VehicleWeapon, out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x616c078ea041
	void SetChargeProgress(out Image* InProgressImage, out WidgetAnimation* InProgressAnima);// 0x616b078ea041
	void OnUpdateChargeProgress(bool InbCharging, int InChargeMode, float InChargeProgress);// 0x616a078ea041
	void OnScopeTriggerChanged(bool bChecked);// 0x6169078ea041
	void OnScopeOpened();// 0x6168078ea041
	void InitScopeUI(SolarVehiclePawn* InVehicle, bool bSpectate);// 0x6167078ea041
	void ApplyWeaponCrossHairToScope(out const VehicleWeaponCrossHairInfo InCrossHairInfo);// 0x6166078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleWeaponCrossHairInfo
	bool bShowCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector2D CrossHairPosition;//[Offset: 0x4, Size: 0x8]
	float CrossHairOpacity;//[Offset: 0xc, Size: 0x4]
	bool bShowReticleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Vector2D ReticleDirectionPosition;//[Offset: 0x14, Size: 0x8]
	float ReticleDirectionAngle;//[Offset: 0x1c, Size: 0x4]
	bool bCrossHairForbid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponScopeSliderWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	ScopeSliderData[] ScopeSliderDatas;//[Offset: 0x400, Size: 0x10]
	int ScopeSliderType;//[Offset: 0x410, Size: 0x4]
	float SliderAnimPlaySpeed;//[Offset: 0x414, Size: 0x4]
	float SliderValueScale;//[Offset: 0x418, Size: 0x4]
	Slider* Slider_ADS;//[Offset: 0x420, Size: 0x8]
	SolarTextBlock* Txt_Scope;//[Offset: 0x428, Size: 0x8]
	WidgetAnimation* Anim_Type0;//[Offset: 0x430, Size: 0x8]
	WidgetAnimation* Anim_Type1;//[Offset: 0x438, Size: 0x8]
	WidgetAnimation* AnimToPlay;//[Offset: 0x440, Size: 0x8]
	void OnSwitchToNextVehicleScope();// 0x61e6078ea041
	void OnSliderValueChangedOnPC(float InValue);// 0x61e5078ea041
	void OnSliderValueChanged(float InValue);// 0x61e4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScopeSliderData
	Vector2D SliderPercentRange;//[Offset: 0x0, Size: 0x8]
	float SliderAnimeTimer;//[Offset: 0x8, Size: 0x4]
	enum ScopeMagnifier;//[Offset: 0xc, Size: 0x1]
	FText DisplayText;//[Offset: 0x10, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x138, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x13c, Size: 0x10]
	float MinValue;//[Offset: 0x14c, Size: 0x4]
	float MaxValue;//[Offset: 0x150, Size: 0x4]
	SliderStyle WidgetStyle;//[Offset: 0x160, Size: 0x560]
	byte Orientation;//[Offset: 0x6c0, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x6c4, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x6d4, Size: 0x10]
	Vector2D SliderHandleOffset;//[Offset: 0x6e4, Size: 0x8]
	bool CommitTouchStartValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 0x1]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ed, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ee, Size: 0x1]
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ef, Size: 0x1]
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 0x1]
	float StepSize;//[Offset: 0x6f4, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x700, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x710, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x720, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x730, Size: 0x10]
	delegate OnValueChanged;//[Offset: 0x740, Size: 0x10]
	void SetValue(float InValue);// 0x3e8d078ea041
	void SetStepSize(float InValue);// 0x3e8c078ea041
	void SetSliderHandleOffset(Vector2D InValue);// 0x3e8b078ea041
	void SetSliderHandleColor(LinearColor InValue);// 0x3e8a078ea041
	void SetSliderBarColor(LinearColor InValue);// 0x3e89078ea041
	void SetNormalBarImage(out const SlateBrush InImage);// 0x3e88078ea041
	void SetMinValue(float InValue);// 0x3e87078ea041
	void SetMaxValue(float InValue);// 0x3e86078ea041
	void SetLocked(bool InValue);// 0x3e85078ea041
	void SetIndentHandle(bool InValue);// 0x3e84078ea041
	void SetHoveredBarImage(out const SlateBrush InImage);// 0x3e83078ea041
	void SetBarThickness(float InValue);// 0x3e82078ea041
	float GetValue();// 0x3e81078ea041
	float GetNormalizedValue();// 0x3e80078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x10, Size: 0xe0]
	SlateBrush HoveredBarImage;//[Offset: 0xf0, Size: 0xe0]
	SlateBrush DisabledBarImage;//[Offset: 0x1d0, Size: 0xe0]
	SlateBrush NormalThumbImage;//[Offset: 0x2b0, Size: 0xe0]
	SlateBrush HoveredThumbImage;//[Offset: 0x390, Size: 0xe0]
	SlateBrush DisabledThumbImage;//[Offset: 0x470, Size: 0xe0]
	float BarThickness;//[Offset: 0x550, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCheckBox.CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	Widget* OnGroup;//[Offset: 0xac8, Size: 0x8]
	Widget* OffGroup;//[Offset: 0xad0, Size: 0x8]
	enum CheckedGroupVisibility;//[Offset: 0xad8, Size: 0x1]
	enum UncheckedGroupVisibility;//[Offset: 0xad9, Size: 0x1]
	void OnStateChanged(bool bIsChecked);// 0x507d078ea041
	void ManualSetIsChecked(bool InIsChecked, bool bBroadCast);// 0x507c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponRechamberWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* img_FireCD;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* EmptyBullet_Anim;//[Offset: 0x408, Size: 0x8]
	MaterialInstanceDynamic* ProgressMaterial;//[Offset: 0x410, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleVFX
	ParticleSystem* Particle;//[Offset: 0x0, Size: 0x28]
	FName AttachedSocket;//[Offset: 0x28, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x30, Size: 0x30]
	CurveFloat* ActivateCurve;//[Offset: 0x60, Size: 0x8]
	FName ParameterName;//[Offset: 0x68, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleGameplayAbility.GameplayAbility.Object
	bool bCancelAfterVacateSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 0x1]
	bool bCancelManually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 0x1]
	GameplayTagContainer GameplayCueTags;//[Offset: 0x400, Size: 0x20]
	FString AbilityActivateVirationHeString;//[Offset: 0x420, Size: 0x10]
	FString AbilityEndVirationHeString;//[Offset: 0x430, Size: 0x10]
	bool bPressToActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	bool bCheckInstigatorBeforeActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 0x1]
	bool bActivateAbilityOnGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x442, Size: 0x1]
	float DurationTime;//[Offset: 0x444, Size: 0x4]
	class GameplayEffect* ActivateEffect;//[Offset: 0x448, Size: 0x8]
	byte AbilityCount;//[Offset: 0x450, Size: 0x1]
	float AbilityCountRecoverTime;//[Offset: 0x454, Size: 0x4]
	Texture2D* AbilityIcon;//[Offset: 0x458, Size: 0x28]
	Texture2D* AdditionalAbilityIcon;//[Offset: 0x480, Size: 0x28]
	int AbilityDescription;//[Offset: 0x4a8, Size: 0x4]
	FString AbilityTextType;//[Offset: 0x4b0, Size: 0x10]
	float DamageToVehicle;//[Offset: 0x4c0, Size: 0x4]
	float DamageToCharacter;//[Offset: 0x4c4, Size: 0x4]
	class CameraShake* ActivateCameraShake;//[Offset: 0x4c8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BulletLandAreaData
	ParticleSystemComponent* TargetParticleComponent;//[Offset: 0x0, Size: 0x8]
	DecalComponent* TargetDecalComponent;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x318, Size: 0x8]
	int SortOrder;//[Offset: 0x320, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x324, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x328, Size: 0x4]
	float FadeDuration;//[Offset: 0x32c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x330, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x334, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	Vector DecalSize;//[Offset: 0x33c, Size: 0xc]
	void SetSortOrder(int Value);// 0x4064078ea041
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x4063078ea041
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x4062078ea041
	void SetFadeIn(float StartDelay, float Duaration);// 0x4061078ea041
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x4060078ea041
	float GetFadeStartDelay();// 0x405f078ea041
	float GetFadeInStartDelay();// 0x405e078ea041
	float GetFadeInDuration();// 0x405d078ea041
	float GetFadeDuration();// 0x405c078ea041
	MaterialInterface* GetDecalMaterial();// 0x405b078ea041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x405a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponAction
	int ActionCount;//[Offset: 0x0, Size: 0x4]
	int ActionParameter;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoardedVehicleInfo
	SolarVehiclePawn* BoardedVehicle;//[Offset: 0x0, Size: 0x8]
	int BoardedSeatIndex;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScoutEnemyObject.Object
	ScoutEnemyConfig* ScoutEnemyConfig;//[Offset: 0x70, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScoutEnemyConfig.DataAsset.Object
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int ScoutMaxNum;//[Offset: 0x34, Size: 0x4]
	float TimeToScanEffect;//[Offset: 0x38, Size: 0x4]
	float MaxDetectionDistance;//[Offset: 0x3c, Size: 0x4]
	Vector2D BondingBoxExtent;//[Offset: 0x40, Size: 0x8]
	bool bSupportHipFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	<enum,float> BoxScaleRatioByScope;//[Offset: 0x50, Size: 0x50]
	byte[] TargetOccBlockTypes;//[Offset: 0xa0, Size: 0x10]
	GameplayTagContainer BlockWithMyTags;//[Offset: 0xb0, Size: 0x20]
	GameplayTagContainer BlockWithEnemyTags;//[Offset: 0xd0, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterBillboardIconComponent.SceneComponent.ActorComponent.Object
	CharacterBillboardIconConfigDataAsset* ConfigDataAsset;//[Offset: 0x318, Size: 0x8]
	enum ActiveMassInVisibilityWarningType;//[Offset: 0x320, Size: 0x1]
	SolarCharacter* CharacterOwner;//[Offset: 0x328, Size: 0x8]
	StaticMeshComponent* BillboardOne;//[Offset: 0x330, Size: 0x8]
	StaticMeshComponent* BillboardTwo;//[Offset: 0x338, Size: 0x8]
	<GameplayTag,SolarCharacterBillboardIconRuntimeInfo> ActiveIcons;//[Offset: 0x340, Size: 0x50]
	StaticMeshComponent*[] IdleComponents;//[Offset: 0x3c0, Size: 0x10]
	void K2_RemoveBillboardIcon(GameplayTag IconTag);// 0x4fb2078ea041
	void K2_AddBillboardIcon(GameplayTag IconTag, bool bUsingCount);// 0x4fb1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterBillboardIconConfigDataAsset.DataAsset.Object
	Vector BillboardComponentScale;//[Offset: 0x30, Size: 0xc]
	Vector BillboardOffsetDefault;//[Offset: 0x3c, Size: 0xc]
	Vector BillboardOffsetCrouch;//[Offset: 0x48, Size: 0xc]
	Vector BillboardOffsetCrawl;//[Offset: 0x54, Size: 0xc]
	float BillboardOffsetSmoothSpeed;//[Offset: 0x60, Size: 0x4]
	float BillboardOffsetForceNoSmoothDistance;//[Offset: 0x64, Size: 0x4]
	class StaticMeshComponent* IconComponentClass;//[Offset: 0x68, Size: 0x8]
	SolarCharacterBillboardIconGroupConfig[] IconGroupConfigs;//[Offset: 0x70, Size: 0x10]
	GameplayTag CharacterInvisibilityWarningIconTag;//[Offset: 0x80, Size: 0x8]
	GameplayTag VehicleInvisibilityWarningIconTag;//[Offset: 0x88, Size: 0x8]
	FName IconOffsetYParamName;//[Offset: 0x90, Size: 0x8]
	int CoexistIconMaxCount;//[Offset: 0x98, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterBillboardIconGroupConfig
	SolarCharacterBillboardIconConfig[] IconConfigs;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterBillboardIconConfig
	GameplayTag IconTag;//[Offset: 0x0, Size: 0x8]
	Texture2D* IconSoftPtr;//[Offset: 0x8, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterBillboardIconRuntimeInfo
	StaticMeshComponent* Component;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DuckRollingMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class PrimitiveComponent* ShieldComponentClass;//[Offset: 0xc20, Size: 0x8]
	<SoftObjectPath,SoftObjectPath> MaterialEffectMaterialMapping;//[Offset: 0xc28, Size: 0x50]
	float HeadRelativeHeight;//[Offset: 0xc78, Size: 0x4]
	PrimitiveComponent* ShieldComponent;//[Offset: 0xc80, Size: 0x8]
	Object*[] MeshOverrides;//[Offset: 0xc88, Size: 0x10]
	Object*[] LoadedEffectMaterials;//[Offset: 0xc98, Size: 0x10]
	void ReceiveOnRegister();// 0x4768078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleUpgradeEffectContainer.FastArraySerializer
	BattleUpgradeEffect[] DataArray;//[Offset: 0x108, Size: 0x10]
	SolarCharacter* Owner;//[Offset: 0x118, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleUpgradeEffect.FastArraySerializerItem
	int Level;//[Offset: 0xc, Size: 0x4]
	int EffectID;//[Offset: 0x10, Size: 0x4]
	int[] EffectCandidate;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkywardDiveLauncher.SummonItemBase.Pawn.Actor.Object
	SkeletalMeshComponent* GroundMesh;//[Offset: 0x4b0, Size: 0x8]
	BoxComponent* TriggerVolume;//[Offset: 0x4b8, Size: 0x8]
	float SpawnTimeConfig;//[Offset: 0x4c0, Size: 0x4]
	ParticleSystem* AvailableDeviceParticle;//[Offset: 0x4c8, Size: 0x8]
	ParticleSystem* SpawnBeamParticle;//[Offset: 0x4d0, Size: 0x8]
	FString SpawnSoundName;//[Offset: 0x4d8, Size: 0x10]
	AnimSequence* SpawnAnim;//[Offset: 0x4e8, Size: 0x8]
	LaunchDeviceInfo[] LauncherDeviceArray;//[Offset: 0x4f0, Size: 0x10]
	float CharacterLaunchPadHeightOffset;//[Offset: 0x500, Size: 0x4]
	float LowHealthPercentage;//[Offset: 0x504, Size: 0x4]
	ParticleSystem* LowHealthParticle;//[Offset: 0x508, Size: 0x8]
	ParticleSystem* DeathExplodeParticle;//[Offset: 0x510, Size: 0x8]
	FString DeathExplodeSoundName;//[Offset: 0x518, Size: 0x10]
	ParticleSystemComponent* SpawnBeamEffect;//[Offset: 0x528, Size: 0x8]
	ParticleSystemComponent* LowHealthEffect;//[Offset: 0x530, Size: 0x8]
	bool bNewlySpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	void OnTriggerVolumeOverlapedEnd(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4d57078ea041
	void OnTriggerVolumeOverlapedBegin(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4d56078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: LaunchDeviceInfo
	bool bIsUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName LaunchPadLocSocketName;//[Offset: 0x4, Size: 0x8]
	FName PrepareEffectLocSocketName;//[Offset: 0xc, Size: 0x8]
	ParticleSystemComponent* AvailableDeviceEffect;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotAIController.SolarBotControllerBase.SolarAIControllerBase.AIController.Controller.Actor.Object
	SolarBotLootComponent* BotLootComponent;//[Offset: 0x660, Size: 0x8]
	SolarPerceptionComponent* BotPerceptionComponent;//[Offset: 0x668, Size: 0x8]
	class NavigationQueryFilter* BPDefaultNavigationFilterClass;//[Offset: 0x670, Size: 0x8]
	<GameplayTag,BehaviorTree*> SubTreeMap;//[Offset: 0x678, Size: 0x50]
	float MinSpecVehicleDeltaPitch;//[Offset: 0x6c8, Size: 0x4]
	delegate OnBotAIDeath;//[Offset: 0x6d0, Size: 0x10]
	bool bInitDefaultWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	int BotDefaultWeaponId;//[Offset: 0x6e4, Size: 0x4]
	bool bSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 0x1]
	int UniqueSpawnerID;//[Offset: 0x6ec, Size: 0x4]
	int DefaultDifficultyLevel;//[Offset: 0x6f0, Size: 0x4]
	int CurrentDifficultyLevel;//[Offset: 0x6f4, Size: 0x4]
	SolarBotShootSimulater* ShootSimulater;//[Offset: 0x700, Size: 0x8]
	enum BotAIType;//[Offset: 0x768, Size: 0x1]
	int BotFeature;//[Offset: 0x76c, Size: 0x4]
	NgaiAIControllerComponent* NgaiComponent;//[Offset: 0x778, Size: 0x8]
	float ValidEmojiUseDistance;//[Offset: 0x790, Size: 0x4]
	float WorldMarkMessageDelayTime;//[Offset: 0x860, Size: 0x4]
	void UpdateDynamicSubtree();// 0x4f1f078ea041
	void StopBehaviorTree();// 0x4f1e078ea041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x4f1d078ea041
	bool SetupBotAITargetSelectConfig();// 0x4f1c078ea041
	bool SetupBotAIDifficulty(int DifficultyLevel, bool bAsDefault);// 0x4f1b078ea041
	bool SetupBotAICanUseCharacterData(int CharacterId, int SkinId);// 0x4f1a078ea041
	void SetLootSubtree(BehaviorTree* BehaviorAsset);// 0x4f19078ea041
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x4f18078ea041
	bool SetBotConfigPresetByID(int BotConfigPresetID);// 0x4f17078ea041
	void SetBattleSubtree(BehaviorTree* BehaviorAsset);// 0x4f16078ea041
	void OnReset();// 0x4f15078ea041
	void OnEnterLanding();// 0x4f14078ea041
	bool IsTeamLeader();// 0x4f13078ea041
	bool IsInPlayerTeam();// 0x4f12078ea041
	bool IsIndependent();// 0x4f11078ea041
	bool IsAccompanyingPlayer();// 0x4f10078ea041
	enum[] GetPreferPickHeroTypes();// 0x4f0f078ea041
	byte GetMyTeamID();// 0x4f0e078ea041
	bool CanActivateVehicleAbility(int SeatIndex, int AbilityIndex);// 0x4f0d078ea041
	float CalculateScoreForAITarget(const Actor* AITargetActor);// 0x4f0c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotControllerBase.SolarAIControllerBase.AIController.Controller.Actor.Object
	NavAgentProperties VehicleAgentProperties;//[Offset: 0x360, Size: 0x30]
	SolarFollowingComponent* PathFollowingComp;//[Offset: 0x390, Size: 0x8]
	float CharacterLookAtInterpSpeed;//[Offset: 0x3a4, Size: 0x4]
	Vector2D MovementVector;//[Offset: 0x3a8, Size: 0x8]
	SolarBotAIConfig* BotConfigPreset;//[Offset: 0x3d8, Size: 0x8]
	SolarBotBattleConfigNew DefaultBotBattleConfig;//[Offset: 0x3e0, Size: 0xd8]
	SolarBotBattleConfig DefaultBattleConfig;//[Offset: 0x4b8, Size: 0x158]
	bool bAimBoneWhenFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 0x1]
	FName FireTargetBoneName;//[Offset: 0x614, Size: 0x8]
	float BotAIAttackRange;//[Offset: 0x630, Size: 0x4]
	float BotAIAttackRangeUnArm;//[Offset: 0x634, Size: 0x4]
	bool bCanAutoSwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 0x1]
	float MinimumDistanceForRepeatedBoarding;//[Offset: 0x648, Size: 0x4]
	void SetDynamicFireConfig(out const BotSpecifiedFireConfig AdditiveConfig);// 0x4f0b078ea041
	void SetBotConfigPreset(SolarBotAIConfig* InConfig);// 0x4f0a078ea041
	void OnPlayerGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x4f09078ea041
	SolarFollowingComponent* GetSolarFollowingComponent();// 0x4f08078ea041
	SolarCharacter* GetPossessedCharacter();// 0x4f07078ea041
	void GetOnVehicle(SolarVehiclePawn* Vehicle);// 0x4f06078ea041
	void GetOffVehicle();// 0x4f05078ea041
	BotFireConfig GetFireConfig(const Actor* InTargetActor, bool bModified);// 0x4f04078ea041
	void ClearAllDynamicFireConfig();// 0x4f03078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAIControllerBase.AIController.Controller.Actor.Object
	BehaviorTree* BehaviorTree;//[Offset: 0x350, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f0, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f0, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f0, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2f8, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x300, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x308, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x310, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x318, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x320, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x328, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x330, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x4dd5078ea041
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4dd4078ea041
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x4dd3078ea041
	void SetMoveBlockDetection(bool bEnable);// 0x4dd2078ea041
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x4dd1078ea041
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x4dd0078ea041
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x4dcf078ea041
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4dce078ea041
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4dcd078ea041
	void K2_SetFocus(Actor* NewFocus);// 0x4dcc078ea041
	void K2_SetFocalPoint(Vector FP);// 0x4dcb078ea041
	void K2_ClearFocus();// 0x4dca078ea041
	bool HasPartialPath();// 0x4dc9078ea041
	PathFollowingComponent* GetPathFollowingComponent();// 0x4dc8078ea041
	byte GetMoveStatus();// 0x4dc7078ea041
	Vector GetImmediateMoveDestination();// 0x4dc6078ea041
	Actor* GetFocusActor();// 0x4dc5078ea041
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x4dc4078ea041
	Vector GetFocalPoint();// 0x4dc3078ea041
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x4dc2078ea041
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4dc1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BotSpecifiedFireConfig
	enum UsedWeaponType;//[Offset: 0x0, Size: 0x1]
	enum TargetCtlType;//[Offset: 0x1, Size: 0x1]
	enum TargetType;//[Offset: 0x2, Size: 0x1]
	BotFireConfig FireConfig;//[Offset: 0x4, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BotFireConfig
	float ShootDisperse;//[Offset: 0x0, Size: 0x4]
	float HitRate;//[Offset: 0x4, Size: 0x4]
	float ActiveDamageRate;//[Offset: 0x8, Size: 0x4]
	float ActiveDamageFactor;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlackboardKeyType.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x6df7078ea041
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x6df6078ea041
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x6df5078ea041
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x6df4078ea041
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x6df3078ea041
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x6df2078ea041
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x6df1078ea041
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x6df0078ea041
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x6def078ea041
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x6dee078ea041
	bool IsVectorValueSet(out const FName KeyName);// 0x6ded078ea041
	Vector GetValueAsVector(out const FName KeyName);// 0x6dec078ea041
	FString GetValueAsString(out const FName KeyName);// 0x6deb078ea041
	Rotator GetValueAsRotator(out const FName KeyName);// 0x6dea078ea041
	Object* GetValueAsObject(out const FName KeyName);// 0x6de9078ea041
	FName GetValueAsName(out const FName KeyName);// 0x6de8078ea041
	int GetValueAsInt(out const FName KeyName);// 0x6de7078ea041
	float GetValueAsFloat(out const FName KeyName);// 0x6de6078ea041
	byte GetValueAsEnum(out const FName KeyName);// 0x6de5078ea041
	class Object GetValueAsClass(out const FName KeyName);// 0x6de4078ea041
	bool GetValueAsBool(out const FName KeyName);// 0x6de3078ea041
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x6de2078ea041
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x6de1078ea041
	void ClearValue(out const FName KeyName);// 0x6de0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8]
	void StopLogic(FString reason);// 0x6ddb078ea041
	void StartLogic();// 0x6dda078ea041
	void RestartLogic();// 0x6dd9078ea041
	bool IsRunning();// 0x6dd8078ea041
	bool IsPaused();// 0x6dd7078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4]
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTAuxiliaryNode.BTNode.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotLootComponent.ActorComponent.Object
	SolarBotLootValuationConfig DefaultValuationConfig;//[Offset: 0xb0, Size: 0x44]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotLootValuationConfig
	float MoveCostFactor;//[Offset: 0x0, Size: 0x4]
	float DistSelfToSpawnerFactor;//[Offset: 0x4, Size: 0x4]
	float DistSpawnerOffsetFactor;//[Offset: 0x8, Size: 0x4]
	float AvgDistSpawnerToTeammatesFactor;//[Offset: 0xc, Size: 0x4]
	float AssualtRifleBaseValue;//[Offset: 0x10, Size: 0x4]
	float ShotgunBaseValue;//[Offset: 0x14, Size: 0x4]
	float SubmachinegunBaseValue;//[Offset: 0x18, Size: 0x4]
	float SniperBaseValue;//[Offset: 0x1c, Size: 0x4]
	float WeaponQualityValue;//[Offset: 0x20, Size: 0x4]
	float AmmoBaseValue;//[Offset: 0x24, Size: 0x4]
	float AmmoMatchFactor;//[Offset: 0x28, Size: 0x4]
	float ShieldBaseValue;//[Offset: 0x2c, Size: 0x4]
	float ShieldQualityValue;//[Offset: 0x30, Size: 0x4]
	float JetpackModuleBaseValue;//[Offset: 0x34, Size: 0x4]
	float JetpackModuleQualityValue;//[Offset: 0x38, Size: 0x4]
	float MedkitBaseValue;//[Offset: 0x3c, Size: 0x4]
	float MedkitHPRatioFactor;//[Offset: 0x40, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	SolarBotThreatConfig DefaultThreatConfig;//[Offset: 0x180, Size: 0x70]
	<enum,class Actor> ConfigAreaTypeIdentifyMap;//[Offset: 0x1f0, Size: 0x50]
	PerceivableEAInfluenceConfig EffectAreasInfluenceConfig;//[Offset: 0x240, Size: 0x60]
	float MaxInfluenceRadius;//[Offset: 0x2a0, Size: 0x4]
	float SmokeGrenadeAffectRadius;//[Offset: 0x2a4, Size: 0x4]
	float EnergyBubbleAffectRadius;//[Offset: 0x2a8, Size: 0x4]
	float SummonWallAffectRadius;//[Offset: 0x2ac, Size: 0x4]
	float UAVShieldAffectRadius;//[Offset: 0x2b0, Size: 0x4]
	float UAVRescueAffectRadius;//[Offset: 0x2b4, Size: 0x4]
	bool bTargetSelectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	FName[] ForbiddenTags;//[Offset: 0x2c0, Size: 0x10]
	int MaxNumCachedDamage;//[Offset: 0x308, Size: 0x4]
	void UpdateSenseConfig(float NewSightRadius, float SightLoseRange);// 0x552f078ea041
	void SetTargetSelectEnabled(bool bInEnable);// 0x552e078ea041
	void SetForbiddenTags(out const FName[] Tags, bool bCleanExists);// 0x552d078ea041
	void OnBotPerceptionUpdated(Actor* Actor, AIStimulus Stimulus);// 0x552c078ea041
	bool IsInEffectAreaOfType(enum Type, const Actor* InTestActor);// 0x552b078ea041
	bool IsInAnyEffectArea(out PerceivableEffectArea[] ActiveEffectAreas, const Actor* InTestActor);// 0x552a078ea041
	float GetTargetCurrentThreatValue(SolarCharacter* ThreatTarget);// 0x5529078ea041
	void ClearCurrentThreat(bool bCleanBestTarget);// 0x5528078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x5527078ea041
	void RequestStimuliListenerUpdate();// 0x5526078ea041
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x5525078ea041
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x5524078ea041
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5523078ea041
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5522078ea041
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x5521078ea041
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x5520078ea041
	void ForgetAll();// 0x551f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotThreatConfig
	float ThreatUpdateInterval;//[Offset: 0x0, Size: 0x4]
	float AttackTriggerThreshold;//[Offset: 0x4, Size: 0x4]
	float CancelAttackTriggerThreshold;//[Offset: 0x8, Size: 0x4]
	float SwitchTargetDifferenceValue;//[Offset: 0xc, Size: 0x4]
	float DistanceThreshold;//[Offset: 0x10, Size: 0x4]
	float DistanceThresholdInSmoke;//[Offset: 0x14, Size: 0x4]
	float SightLoseRange;//[Offset: 0x18, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x1c, Size: 0x4]
	float SightIncreaseBase;//[Offset: 0x20, Size: 0x4]
	float SightIncreaseDistanceFactor;//[Offset: 0x24, Size: 0x4]
	float SightDecreaseBase;//[Offset: 0x28, Size: 0x4]
	float SightDecreaseDistanceFactor;//[Offset: 0x2c, Size: 0x4]
	float SightDecreaseMax;//[Offset: 0x30, Size: 0x4]
	float SightMaxValue;//[Offset: 0x34, Size: 0x4]
	float HearingAddBase;//[Offset: 0x38, Size: 0x4]
	float HearingAddDistanceFactor;//[Offset: 0x3c, Size: 0x4]
	float HearingDecreasePerTick;//[Offset: 0x40, Size: 0x4]
	float HearingMaxValue;//[Offset: 0x44, Size: 0x4]
	float HitSoundAlertRange;//[Offset: 0x48, Size: 0x4]
	float BotThreatFactor;//[Offset: 0x4c, Size: 0x4]
	float PlayerThreatFactor;//[Offset: 0x50, Size: 0x4]
	float DeathVergeFactor;//[Offset: 0x54, Size: 0x4]
	float MassInvisibilityPrepareFactor;//[Offset: 0x58, Size: 0x4]
	float MaxDistanceThreatFactor;//[Offset: 0x5c, Size: 0x4]
	float DistanceThreatFactorDecayRate;//[Offset: 0x60, Size: 0x4]
	float AccompanyThreatMaxValue;//[Offset: 0x64, Size: 0x4]
	float AccompanyThreatAddBase;//[Offset: 0x68, Size: 0x4]
	float AccompanyDecreasePerTick;//[Offset: 0x6c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x90, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0xa0, Size: 0x4]
	void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x6dc7078ea041
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x6dc6078ea041
	bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x6dc5078ea041
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x6dc4078ea041
	class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x6dc3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0x88, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9b, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 0x8]
	void AILoggingVerbose();// 0x6dd4078ea041
	void AIIgnorePlayers();// 0x6dd3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x130, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x268, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x6dde078ea041
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x6ddd078ea041
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CoolDownDuration, bool bAddToExistingDuration);// 0x6ddc078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xb0, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xc0, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xd0, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x134, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x13c, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x140, Size: 0x8]
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x6e35078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] options;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryItemType.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4]
	byte TestPurpose;//[Offset: 0x30, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIDataProvider.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryContext.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x2f8e078ea041
	Vector[] GetResultsAsLocations();// 0x2f8d078ea041
	Actor*[] GetResultsAsActors();// 0x2f8c078ea041
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x2f8b078ea041
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x2f8a078ea041
	float GetItemScore(int ItemIndex);// 0x2f89078ea041
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x2f87078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x6db1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIHotSpotManager.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavLocalGridManager.Object
	bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x6e3c078ea041
	void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x6e3b078ea041
	bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x6e3a078ea041
	int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6e39078ea041
	int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6e38078ea041
	int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6e37078ea041
	int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x6e36078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AISenseEvent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 0xc]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 0xc]
	FName Tag;//[Offset: 0x24, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PerceivableEAInfluenceConfig
	<enum,float> AreaTypeValueMap;//[Offset: 0x0, Size: 0x50]
	float HostileAreaFactor;//[Offset: 0x50, Size: 0x4]
	float NeutralAreaFactor;//[Offset: 0x54, Size: 0x4]
	float FriendlyAreaFactor;//[Offset: 0x58, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PerceivableEffectArea
	enum AreaType;//[Offset: 0x0, Size: 0x1]
	Vector EffectLocation;//[Offset: 0x4, Size: 0xc]
	float EffectRadius;//[Offset: 0x10, Size: 0x4]
	Actor* EffectActor;//[Offset: 0x14, Size: 0x8]
	Actor* Instigator;//[Offset: 0x1c, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotAIConfig.DataAsset.Object
	GameplayTagContainer IdentifierTags;//[Offset: 0x30, Size: 0x20]
	SolarBotConfigSection_Battle* BattleSection;//[Offset: 0x50, Size: 0x8]
	SolarBotConfigSection_Loot* LootSection;//[Offset: 0x58, Size: 0x8]
	SolarBotConfigSection_Perception* PerceptionSection;//[Offset: 0x60, Size: 0x8]
	SolarBotConfigSection*[] CustomSections;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotConfigSection_Battle.SolarBotConfigSection.Object
	bool bEnableNewBattleConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	SolarBotBattleConfigNew BotBattleConfig;//[Offset: 0x38, Size: 0xd8]
	SolarBotBattleConfig BattleConfig;//[Offset: 0x110, Size: 0x158]
	SolarBotUseSniperPosConfig SniperPosConfig;//[Offset: 0x268, Size: 0x1c]
	BehaviorTree* BattleSubTree;//[Offset: 0x288, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotConfigSection.Object
	GameplayTag SectionTag;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotBattleConfigNew
	BotFireConfig DefaultFireConfig;//[Offset: 0x0, Size: 0x10]
	BotSpecifiedFireConfig[] SpecifiedFireConfigs;//[Offset: 0x10, Size: 0x10]
	float DefaultFireLockRadius;//[Offset: 0x20, Size: 0x4]
	<enum,RangeFloat> ShotLockRadiusMap;//[Offset: 0x28, Size: 0x50]
	bool bPreventFatalDamageToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bEnableShootSimulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	SolarBotShootConfig DefaultShootConfig;//[Offset: 0x7c, Size: 0x58]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotShootConfig
	enum FirePolicy;//[Offset: 0x0, Size: 0x1]
	float FollowInterpSpeed;//[Offset: 0x4, Size: 0x4]
	float AntiHorizRecoilStrenghth;//[Offset: 0x8, Size: 0x4]
	float AntiVertRecoilStrenghth;//[Offset: 0xc, Size: 0x4]
	float LockHeightOffset;//[Offset: 0x10, Size: 0x4]
	float AimInterpSpeed;//[Offset: 0x14, Size: 0x4]
	float MaxFollowDeltaAngle;//[Offset: 0x18, Size: 0x4]
	float MaxPreciseMoveAngle;//[Offset: 0x1c, Size: 0x4]
	float RoughMoveMaxAngle;//[Offset: 0x20, Size: 0x4]
	float FollowMoveSpeed;//[Offset: 0x24, Size: 0x4]
	float PreciseMoveSpeed;//[Offset: 0x28, Size: 0x4]
	float RoughMoveSpeed;//[Offset: 0x2c, Size: 0x4]
	float LockMoveSpeed;//[Offset: 0x30, Size: 0x4]
	float PreciseMoveDeviationYaw;//[Offset: 0x34, Size: 0x4]
	float PreciseMoveDeviationPitch;//[Offset: 0x38, Size: 0x4]
	float RoughMoveDeviationYaw;//[Offset: 0x3c, Size: 0x4]
	float RoughMoveDeviationPitch;//[Offset: 0x40, Size: 0x4]
	float LockMoveMaxDeltaYaw;//[Offset: 0x44, Size: 0x4]
	float LockMoveMaxDeltaPitch;//[Offset: 0x48, Size: 0x4]
	float RoughMoveReactionTime;//[Offset: 0x4c, Size: 0x4]
	float PreciseMoveReactionTime;//[Offset: 0x50, Size: 0x4]
	float MaxFollowUnreachTime;//[Offset: 0x54, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotBattleConfig
	BotFireConfig DefaultFireConfig;//[Offset: 0x0, Size: 0x10]
	BotFireConfig FireConfigToBot;//[Offset: 0x10, Size: 0x10]
	<enum,BotFireConfig> WeaponFireConfigs;//[Offset: 0x20, Size: 0x50]
	<enum,BotFireConfig> WeaponFireConfigsToBot;//[Offset: 0x70, Size: 0x50]
	BotFireConfig VehicleFireConfig;//[Offset: 0xc0, Size: 0x10]
	BotFireConfig VehicleFireConfigToBot;//[Offset: 0xd0, Size: 0x10]
	bool bPreventFatalDamageToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	float DamageFactorToVehicle;//[Offset: 0xe4, Size: 0x4]
	float DamageFactorToBotVehicle;//[Offset: 0xe8, Size: 0x4]
	float DamageFactorToSummonItem;//[Offset: 0xec, Size: 0x4]
	float DamageFactorToBotSummonItem;//[Offset: 0xf0, Size: 0x4]
	float BotAIAttackRange;//[Offset: 0xf4, Size: 0x4]
	float BotAIAttackRangeUnArm;//[Offset: 0xf8, Size: 0x4]
	bool bEnableShootSimulator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	SolarBotShootConfig DefaultShootConfig;//[Offset: 0x100, Size: 0x58]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotUseSniperPosConfig
	int MinNumSpawnerHasSearched;//[Offset: 0x0, Size: 0x4]
	float MinElapsedReachedZone;//[Offset: 0x4, Size: 0x4]
	float MinEnemyDistance;//[Offset: 0x8, Size: 0x4]
	int MinNumBeHitAbandonPos;//[Offset: 0xc, Size: 0x4]
	int MaxDurationOccupyPos;//[Offset: 0x10, Size: 0x4]
	float MaxDurationReachedPos;//[Offset: 0x14, Size: 0x4]
	float IntervalUseNextPos;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotConfigSection_Loot.SolarBotConfigSection.Object
	SolarBotLootValuationConfig ValuationConfig;//[Offset: 0x30, Size: 0x44]
	SolarBotLootSearchConfig SearchConfig;//[Offset: 0x74, Size: 0x44]
	SolarBotLootWeaponFeedConfig WeaponFeedConfig;//[Offset: 0xb8, Size: 0x20]
	BehaviorTree* LootSubTree;//[Offset: 0xd8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotLootSearchConfig
	float HPRatioToUseMedicine;//[Offset: 0x0, Size: 0x4]
	float ShieldRatioToRecharge;//[Offset: 0x4, Size: 0x4]
	float MaxSearchRangeNearbyPlayer;//[Offset: 0x8, Size: 0x4]
	float MinSearchRangeNearbyPlayer;//[Offset: 0xc, Size: 0x4]
	float RadiusTolerance;//[Offset: 0x10, Size: 0x4]
	Vector2D NearbyEnemyOuterFactorRange;//[Offset: 0x14, Size: 0x8]
	Vector2D NearbyEnemyInnerFactorRange;//[Offset: 0x1c, Size: 0x8]
	Vector2D NearbyEnemyCountRange;//[Offset: 0x24, Size: 0x8]
	Vector2D NearbySpawnerOuterFactorRange;//[Offset: 0x2c, Size: 0x8]
	Vector2D NearbySpawnerInnerFactorRange;//[Offset: 0x34, Size: 0x8]
	Vector2D NearbySpawnerCountRange;//[Offset: 0x3c, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotLootWeaponFeedConfig
	float MaxNoWeaponTime;//[Offset: 0x0, Size: 0x4]
	int[] FeedWeaponIDs;//[Offset: 0x8, Size: 0x10]
	float CheckPlayerSightInterval;//[Offset: 0x18, Size: 0x4]
	bool bStartFeedAfterSearchedAnySpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotConfigSection_Perception.SolarBotConfigSection.Object
	SolarBotThreatConfig ThreatConfig;//[Offset: 0x30, Size: 0x70]
	<enum,SolarBotThreatConfig> WPSpecificThreatConfig;//[Offset: 0xa0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotShootSimulater.Object
	SolarBotAIController* OwnerController;//[Offset: 0x28, Size: 0x8]
	Actor* LockedTargetActor;//[Offset: 0x30, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NgaiAIControllerComponent.ActorComponent.Object
	SolarCharacterBase* EnemyCharacterBase;//[Offset: 0xb0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0x100, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x5161078ea041
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x5160078ea041
	Vector GetPathDestination();// 0x515f078ea041
	byte GetPathActionType();// 0x515e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x230, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x238, Size: 0x78]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b0, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b0, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x2b1, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x2b4, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x2b8, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3a0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x6e48078ea041
	bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x6e47078ea041
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x6e46078ea041
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x6e45078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x6e3f078ea041
	void Finish(byte WithResult);// 0x6e3e078ea041
	PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x6e3d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayResourceSet
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarFollowingComponent.CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bEnableOffmeshDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	float MinDetectInterval;//[Offset: 0x2a0, Size: 0x4]
	uint32 MaxDetectIteration;//[Offset: 0x2a4, Size: 0x4]
	Vector InitialOffmeshSolveExtent;//[Offset: 0x2a8, Size: 0xc]
	float MinZDiffDetectUndergroud;//[Offset: 0x2b4, Size: 0x4]
	float AgentSwimingHalfHeightPct;//[Offset: 0x2b8, Size: 0x4]
	float AgentNormalHalfHeightPct;//[Offset: 0x2bc, Size: 0x4]
	float ReachTestCheckAngleWV;//[Offset: 0x2c0, Size: 0x4]
	float MinSpeedLastSegmentWV;//[Offset: 0x2c4, Size: 0x4]
	float TurningSpeedWV;//[Offset: 0x2c8, Size: 0x4]
	float TurningSteeringThresholdWV;//[Offset: 0x2cc, Size: 0x4]
	float BlockDetectionDistanceCharacter;//[Offset: 0x2d0, Size: 0x4]
	float BlockDetectionDistanceVehicle;//[Offset: 0x2d4, Size: 0x4]
	bool bEnableSolveBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	SolarVehiclePawn* VehicleActor;//[Offset: 0x320, Size: 0x8]
	float SensorTraceDistance;//[Offset: 0x334, Size: 0x4]
	bool bEnableDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	float RightSensorAlpha;//[Offset: 0x33c, Size: 0x4]
	float CentralSensorAlpha;//[Offset: 0x340, Size: 0x4]
	float LeftSensorAlpha;//[Offset: 0x344, Size: 0x4]
	float SteeringAngle;//[Offset: 0x348, Size: 0x4]
	float VehicleSteeringSensitivity;//[Offset: 0x34c, Size: 0x4]
	float BrakingForce;//[Offset: 0x350, Size: 0x4]
	float DecelerationDistance;//[Offset: 0x354, Size: 0x4]
	float VehicleDecelerationSpeed;//[Offset: 0x358, Size: 0x4]
	float VehicleTurningSpeed;//[Offset: 0x35c, Size: 0x4]
	float CheckReverseDistance;//[Offset: 0x360, Size: 0x4]
	float HoverCheckBlockSpeed;//[Offset: 0x364, Size: 0x4]
	float WheeledCheckBlockSpeed;//[Offset: 0x368, Size: 0x4]
	float LeggedVehicleCheckBlockSpeed;//[Offset: 0x36c, Size: 0x4]
	float CheckBlockTime;//[Offset: 0x374, Size: 0x4]
	int TryReverseTimes;//[Offset: 0x380, Size: 0x4]
	float TryReverseDurationTime;//[Offset: 0x384, Size: 0x4]
	float SolveBlockGoFrontTime;//[Offset: 0x390, Size: 0x4]
	bool bPathFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 0x1]
	bool bKeepVelocityDuringRVO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	VehicleDetector[] DetectorList;//[Offset: 0x3b8, Size: 0x10]
	float BlockAlpha;//[Offset: 0x3c8, Size: 0x4]
	bool bNeedReFindPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 0x1]
	int VehicleBlockedLocationCheckCount;//[Offset: 0x3d0, Size: 0x4]
	float VehicleBlockedLocationDistance;//[Offset: 0x3d4, Size: 0x4]
	void SetVehicle(Actor* VehicleActorIn);// 0x5165078ea041
	void OnUpdatedCharacterMovementModeChanged(Character* Character, byte PrevMovementMode, byte PreviousCustomMode);// 0x5164078ea041
	void OnUpdatedCharacterLanded(out const HitResult Hit);// 0x5163078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x268, Size: 0x8]
	Vector CrowdAgentMoveDirection;//[Offset: 0x270, Size: 0xc]
	void SuspendCrowdSteering(bool bSuspend);// 0x5162078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleDetector
	Rotator VehicleLocalRotator;//[Offset: 0x0, Size: 0xc]
	Vector StartLocParameter;//[Offset: 0xc, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterSkinConfig.DataAsset.Object
	SoftObjectPath SkinIcon;//[Offset: 0x30, Size: 0x18]
	SoftObjectPath DefaultIcon;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath SkinRes;//[Offset: 0x60, Size: 0x18]
	SoftObjectPath CharaSkinRes;//[Offset: 0x78, Size: 0x18]
	SoftClassPath AnimBPRes;//[Offset: 0x90, Size: 0x18]
	<GameplayTag,StaticMeshOrnamentConfig> StaticMeshOrnamentsConfig;//[Offset: 0xa8, Size: 0x50]
	<GameplayTag,SkeletalMeshOrnamentConfig> SkeletalMeshOrnamentsConfig;//[Offset: 0xf8, Size: 0x50]
	<GameplayTag,ChildActorOrnamentConfig> ChildActorOrnamentsConfig;//[Offset: 0x148, Size: 0x50]
	<GameplayTag,StaticMeshOrnamentConfig> GetStaticMeshOrnamentsConfig();// 0x46ee078ea041
	SoftObjectPath GetSkinRes();// 0x46ed078ea041
	SoftObjectPath GetSkinIcon();// 0x46ec078ea041
	<GameplayTag,SkeletalMeshOrnamentConfig> GetSkeletalMeshOrnamentsConfig();// 0x46eb078ea041
	<GameplayTag,ChildActorOrnamentConfig> GetChildActorOrnamentsConfig();// 0x46ea078ea041
	SoftObjectPath GetCharaSkinRes();// 0x46e9078ea041
	SoftObjectPath GetAnimBPRes();// 0x46e8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: StaticMeshOrnamentConfig
	SoftObjectPath OrnamentRes;//[Offset: 0x0, Size: 0x18]
	FName OrnamentAttachSocket;//[Offset: 0x18, Size: 0x8]
	Transform OrnamentRelativeTransform;//[Offset: 0x20, Size: 0x30]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x50, Size: 0x18]
	FName[] OrnamentComponentTags;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshOrnamentConfig
	SoftObjectPath OrnamentRes;//[Offset: 0x0, Size: 0x18]
	SoftClassPath OrnamentABPRes;//[Offset: 0x18, Size: 0x18]
	FName OrnamentAttachSocket;//[Offset: 0x30, Size: 0x8]
	Transform OrnamentRelativeTransform;//[Offset: 0x40, Size: 0x30]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x70, Size: 0x18]
	FName[] OrnamentComponentTags;//[Offset: 0x88, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChildActorOrnamentConfig
	SoftClassPath OrnamentRes;//[Offset: 0x0, Size: 0x18]
	FName OrnamentAttachSocket;//[Offset: 0x18, Size: 0x8]
	Transform OrnamentRelativeTransform;//[Offset: 0x20, Size: 0x30]
	SoftObjectPath OrnamentVisibilityConfig;//[Offset: 0x50, Size: 0x18]
	FName[] OrnamentComponentTags;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BackpackStatisticsInfo
	bool IsVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	Vector PlayerStartLocation;//[Offset: 0x4, Size: 0xc]
	Vector PlayerEndLocation;//[Offset: 0x10, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RestoreAbilityInfo
	GameplayAbilitySpecHandle Handle;//[Offset: 0x0, Size: 0x4]
	PredictionKey ActivationPredictionKey;//[Offset: 0x8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScannedInfo_NetQuantize
	uint32 UniqueId;//[Offset: 0x0, Size: 0x4]
	byte TargetType;//[Offset: 0x4, Size: 0x1]
	uint32 VehicleID;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize TargetLocation;//[Offset: 0xc, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleWeakPointSpec
	float CurrentHealth;//[Offset: 0x0, Size: 0x4]
	bool bInRepairing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	SolarVehicleWeakPointComponent* WeakPointMeshComponent;//[Offset: 0x8, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x10, Size: 0x8]
	byte WeakPointID;//[Offset: 0x18, Size: 0x1]
	FName[] WeakPointSockets;//[Offset: 0x20, Size: 0x10]
	Vector WeakPointOffset;//[Offset: 0x30, Size: 0xc]
	StaticMesh* WeakPointStaticMesh;//[Offset: 0x40, Size: 0x28]
	Transform WeakPointRelativeTransform;//[Offset: 0x70, Size: 0x30]
	float MaxWeakPointHealth;//[Offset: 0xa0, Size: 0x4]
	float RepairDuration;//[Offset: 0xa4, Size: 0x4]
	bool bRecoverBoneScaleAfterVFXFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	VehicleVFX BrokenWeakPointVFX;//[Offset: 0xb0, Size: 0x90]
	VehicleVFX RepairingWeakPointVFX;//[Offset: 0x140, Size: 0x90]
	float FacingAngle;//[Offset: 0x1d0, Size: 0x4]
	float DistFromCharacterToWeakPoint;//[Offset: 0x1d4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleWeakPointComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleSeatSlot
	FName SeatSocketName;//[Offset: 0x0, Size: 0x8]
	FName SeatWeaponSocket;//[Offset: 0x8, Size: 0x8]
	bool bDisplayBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool SeatStickOutEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	VehicleCameraDataAsset* OutShootCameraData;//[Offset: 0x18, Size: 0x8]
	VehicleCameraDataAsset* OutShootAimCameraData;//[Offset: 0x20, Size: 0x8]
	CurveFloat* OutShootPitchLimitCurve;//[Offset: 0x28, Size: 0x8]
	VehicleSeatAbility[] VechicleAbilities;//[Offset: 0x30, Size: 0x10]
	class SolarVehicleWeapon* VehicleWeaponClass;//[Offset: 0x40, Size: 0x8]
	class SolarVehicleWeapon* VehicleWeaponSkinClass;//[Offset: 0x48, Size: 0x8]
	bool bAutoEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Texture2D* SeatDisplayIcon;//[Offset: 0x58, Size: 0x28]
	float DamageRatio;//[Offset: 0x80, Size: 0x4]
	float PenetrationDamageRatio;//[Offset: 0x84, Size: 0x4]
	BoxSphereBounds PenetrationSphere;//[Offset: 0x88, Size: 0x1c]
	Rotator EjectRotation;//[Offset: 0xa4, Size: 0xc]
	bool bOverrideDefaultEjectParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	VehicleEjectParams EjectParams;//[Offset: 0xb4, Size: 0x10]
	SolarCharacter* SeatPassenger;//[Offset: 0xc4, Size: 0x8]
	SolarVehicleWeapon* SeatWeapon;//[Offset: 0xd0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleSeatAbility
	class SolarVehicleGameplayAbility* AbilityClass;//[Offset: 0x0, Size: 0x8]
	GameplayAbilitySpecHandle ServerOrDriverAbilityHandle;//[Offset: 0x8, Size: 0x4]
	GameplayAbilitySpecHandle SkinPreAbilityHandle;//[Offset: 0xc, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimDetailMode;//[Offset: 0xc18, Size: 0x1]
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc40, Size: 0x1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc40, Size: 0x1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc40, Size: 0x1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x3bfe078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarNetMovementComponent.ActorComponent.Object
	float InterpolatedBackTime;//[Offset: 0xe4, Size: 0x4]
	float ServerBufferCheckMinSpeed;//[Offset: 0xe8, Size: 0x4]
	float ServerBufferIgnoreCheckTimer;//[Offset: 0xec, Size: 0x4]
	float AtRestThresholdCount;//[Offset: 0xf0, Size: 0x4]
	enum ExtrapolationMode;//[Offset: 0xf4, Size: 0x1]
	bool bUseExtrapolationTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 0x1]
	float ExtrapolationTimeLimit;//[Offset: 0xf8, Size: 0x4]
	bool bUseExtrapolationDistanceLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 0x1]
	float ExtrapolationDistanceLimit;//[Offset: 0x100, Size: 0x4]
	float SendPositionThreshold;//[Offset: 0x104, Size: 0x4]
	float SendRotationThreshold;//[Offset: 0x108, Size: 0x4]
	float SendVelocityThreshold;//[Offset: 0x10c, Size: 0x4]
	float SendAngularVelocityThreshold;//[Offset: 0x110, Size: 0x4]
	float ResetTimeOffsetsThreshold;//[Offset: 0x114, Size: 0x4]
	float UsingRepLocationThreshold;//[Offset: 0x118, Size: 0x4]
	float LinearVelcolityForPositionThreshold;//[Offset: 0x11c, Size: 0x4]
	float ReceivedPositionThreshold;//[Offset: 0x120, Size: 0x4]
	float AngularVelocityForRotationThreshold;//[Offset: 0x124, Size: 0x4]
	float ReceivedRotationThreshold;//[Offset: 0x128, Size: 0x4]
	float PositionSnapThreshold;//[Offset: 0x12c, Size: 0x4]
	float RotationSnapThreshold;//[Offset: 0x130, Size: 0x4]
	float PositionLerpSpeed;//[Offset: 0x134, Size: 0x4]
	float RotationLerpSpeed;//[Offset: 0x138, Size: 0x4]
	float SpeedOfLerp;//[Offset: 0x13c, Size: 0x4]
	enum SyncPosition;//[Offset: 0x140, Size: 0x1]
	enum SyncRotation;//[Offset: 0x141, Size: 0x1]
	enum SyncVelocity;//[Offset: 0x142, Size: 0x1]
	enum SyncAngularVelocity;//[Offset: 0x143, Size: 0x1]
	bool bSyncDesiredYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool isPositionCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	bool isRotationCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 0x1]
	bool isVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 0x1]
	bool isAngularVelocityCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	float SendRate;//[Offset: 0x14c, Size: 0x4]
	float TimeSmoothing;//[Offset: 0x150, Size: 0x4]
	bool bUsingOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	bool bAlwaysSendOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 0x1]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x190, Size: 0x8]
	SceneComponent* RelativeComponent;//[Offset: 0x198, Size: 0x8]
	SolarVehiclePawn* PreviousBaseVehicleActor;//[Offset: 0x1a0, Size: 0x8]
	float AtRestPositionThreshold;//[Offset: 0x510, Size: 0x4]
	float AtRestRotationThreshold;//[Offset: 0x514, Size: 0x4]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x528, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleAbilitySystemComponent.AbilitySystemComponent.GameplayTasksComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSpringArmComponent.SolarSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	SolarVehicleCameraComponent* VehicleCamera;//[Offset: 0x3f8, Size: 0x8]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x400, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleCameraComponent.SolarCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	SolarVehiclePawn* Vehicle;//[Offset: 0xa28, Size: 0x8]
	SolarVehicleSpringArmComponent* VehicleSpringArm;//[Offset: 0xa30, Size: 0x8]
	VehicleCameraDataAsset*[] CameraDataAssets;//[Offset: 0xa50, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleAttributeSet.SolarAttributeSet.AttributeSet.Object
	GameplayAttributeData CurrentVehicleHealth;//[Offset: 0x30, Size: 0x10]
	GameplayAttributeData MaxVehicleHealth;//[Offset: 0x40, Size: 0x10]
	GameplayAttributeData MaxBrokenHealth;//[Offset: 0x50, Size: 0x10]
	GameplayAttributeData StealthMaterialPercent;//[Offset: 0x60, Size: 0x10]
	GameplayAttributeData SpeedMultiplier;//[Offset: 0x70, Size: 0x10]
	GameplayAttributeData CurrentVehicleWholeShield;//[Offset: 0x80, Size: 0x10]
	GameplayAttributeData MaxVehicleWholeShield;//[Offset: 0x90, Size: 0x10]
	void OnRep_StealthMaterialPercent(out const GameplayAttributeData OldStealthMaterialPercent);// 0x5f08078ea041
	void OnRep_SpeedMultiplier(out const GameplayAttributeData OldSpeedMultiplier);// 0x5f07078ea041
	void OnRep_MaxVehicleWholeShield(out const GameplayAttributeData OldMaxVehicleWholeShield);// 0x5f06078ea041
	void OnRep_MaxVehicleHealth(out const GameplayAttributeData OldMaxVehicleHealth);// 0x5f05078ea041
	void OnRep_MaxBrokenHealth(out const GameplayAttributeData OldMaxBrokenHealth);// 0x5f04078ea041
	void OnRep_CurrentVehicleWholeShield(out const GameplayAttributeData OldVehicleWholeShield);// 0x5f03078ea041
	void OnRep_CurrentVehicleHealth(out const GameplayAttributeData OldVehicleHealth);// 0x5f02078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BasedMovement
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x8, Size: 0xc]
	Rotator Rotation;//[Offset: 0x14, Size: 0xc]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleGA_Carpad.SolarVehicleGameplayAbility.GameplayAbility.Object
	float CarpadJumpVelocity;//[Offset: 0x4e8, Size: 0x4]
	float PitchDegree;//[Offset: 0x4ec, Size: 0x4]
	bool bControllableInLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	void CarpadJumpLanding(out const HitResult LandedHit);// 0x5f0b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VehicleVFXMesh
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x28]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x28, Size: 0x10]
	FName AttachedSocket;//[Offset: 0x38, Size: 0x8]
	Transform OffsetTransform;//[Offset: 0x40, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleMaterialData
	int8 MaterialIndex;//[Offset: 0x0, Size: 0x1]
	FName ParamName;//[Offset: 0x4, Size: 0x8]
	float OnValue;//[Offset: 0xc, Size: 0x4]
	float OffValue;//[Offset: 0x10, Size: 0x4]
	float ActiveSpeed;//[Offset: 0x14, Size: 0x4]
	MaterialInstanceDynamic* MatInstanceDynamic;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DamageStatusVehicleVFXs
	VehicleVFX[] VehicleVFXs;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarNavModifierComponent.NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	void OnVehicleRootHit(PrimitiveComponent* HitComp, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x550b078ea041
	void OnDriverGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x550a078ea041
	void OnDriverGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x5509078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe0, Size: 0x8]
	Vector FailsafeExtent;//[Offset: 0xe8, Size: 0xc]
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	void SetAreaClass(class NavArea NewAreaClass);// 0x5508078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	Object* CachedNavParent;//[Offset: 0xd8, Size: 0x8]
	void SetNavigationRelevancy(bool bRelevant);// 0x5507078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterRoleAbilityInfo
	bool bHasAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float StartCDTime;//[Offset: 0x4, Size: 0x4]
	float TotalCDTime;//[Offset: 0x8, Size: 0x4]
	int State;//[Offset: 0xc, Size: 0x4]
	bool bOngoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleUpgradeEffectParamData
	enum EffectType;//[Offset: 0x0, Size: 0x1]
	int ParameterSum;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InteractiveTaskConfig.TableRowBase
	int TaskID;//[Offset: 0x8, Size: 0x4]
	int GiftID;//[Offset: 0xc, Size: 0x4]
	int TaskName;//[Offset: 0x10, Size: 0x4]
	FString Describe;//[Offset: 0x18, Size: 0x10]
	int TaskUpgradeDescribe;//[Offset: 0x28, Size: 0x4]
	SoftObjectPath TaskIcon;//[Offset: 0x30, Size: 0x18]
	enum CurrencyType;//[Offset: 0x48, Size: 0x1]
	int MaxTaskLevel;//[Offset: 0x4c, Size: 0x4]
	int[] TaskTarget;//[Offset: 0x50, Size: 0x10]
	int[] UpgradePrice;//[Offset: 0x60, Size: 0x10]
	int[] TaskReward;//[Offset: 0x70, Size: 0x10]
	enum TaskType;//[Offset: 0x80, Size: 0x1]
	int Param;//[Offset: 0x84, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementTempData
	int TotalAccountExp;//[Offset: 0x0, Size: 0x4]
	int AccountLevel;//[Offset: 0x4, Size: 0x4]
	int CurCharacterLevel;//[Offset: 0x58, Size: 0x4]
	int TotalCharacterExp;//[Offset: 0x5c, Size: 0x4]
	bool bCharExpFull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bHaveRankData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	int RankBeforeScore;//[Offset: 0x64, Size: 0x4]
	int RankAfterScore;//[Offset: 0x68, Size: 0x4]
	int RankSurviveScore;//[Offset: 0x6c, Size: 0x4]
	int RankBeforeSurviveScore;//[Offset: 0x70, Size: 0x4]
	int RankDefeatScore;//[Offset: 0x74, Size: 0x4]
	int RankBeforeDefeatScore;//[Offset: 0x78, Size: 0x4]
	float RankDefeatRatio;//[Offset: 0x7c, Size: 0x4]
	int RankLegend;//[Offset: 0x80, Size: 0x4]
	byte RankProtectType;//[Offset: 0x84, Size: 0x1]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	int WinninScoreID;//[Offset: 0x88, Size: 0x4]
	int BattlePassID;//[Offset: 0x8c, Size: 0x4]
	int BattlePassAddExp;//[Offset: 0x90, Size: 0x4]
	int BattlePassExp;//[Offset: 0x94, Size: 0x4]
	int[] BattlePassTaskID;//[Offset: 0x98, Size: 0x10]
	int[] BattlePassTaskWeek;//[Offset: 0xa8, Size: 0x10]
	int[] BattlePassTaskAdd;//[Offset: 0xb8, Size: 0x10]
	int[] BattlePassTaskVal;//[Offset: 0xc8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExposeLocationMap
	<SolarPlayerState*,int> InnerMap;//[Offset: 0x0, Size: 0x50]
	SolarPlayerState* Owner;//[Offset: 0x50, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAchievementComponent.ActorComponent.Object
	DataTable* AchievementHandleConfig;//[Offset: 0xb0, Size: 0x8]
	class AchievementFormula* AchievementFormulaClass;//[Offset: 0xb8, Size: 0x8]
	AchievementFormula* AchievementFormula;//[Offset: 0xc0, Size: 0x8]
	<int,AchievementResult> AllStatisticAchievement;//[Offset: 0x170, Size: 0x50]
	void UnlockAchievement(int InAchievementID);// 0x4dab078ea041
	void SetAchievementValue(int InAchievementID, int InUpdateValue);// 0x4daa078ea041
	bool IsAchievementCompleted(int InAchievementID);// 0x4da9078ea041
	void IncreaseAchievementValue(int InAchievementID, int InUpdateValue);// 0x4da8078ea041
	int GetAchievementPorgressValue(int InAchievementID);// 0x4da7078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AchievementFormula.Actor.Object
	SolarAchievementComponent* GetAchievementComponent();// 0x4da6078ea041
	int GetAchievedTargetValue(int InAchievementID);// 0x4da5078ea041
	int[] GetAchievedConditionValue(int InAchievementID);// 0x4da4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AchievementResult
	int AchievementID;//[Offset: 0x0, Size: 0x4]
	int ProgressValue;//[Offset: 0x4, Size: 0x4]
	bool IsUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum AchievementReportType;//[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpatializeInfoTrack.SpatializeInfo.Info.Actor.Object
	TrackArray TrackArray;//[Offset: 0x230, Size: 0x130]
	float Timeout;//[Offset: 0x3ec, Size: 0x4]
	float MinRevealDistance;//[Offset: 0x3f0, Size: 0x4]
	int MaxTrackNum;//[Offset: 0x3f4, Size: 0x4]
	<TrackItem,3DMeshWidgetTrack*> CurTrackWidgets;//[Offset: 0x3f8, Size: 0x50]
	void UpdateWidgets(bool bFromNetUpdate);// 0x5fff078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpatializeInfo.Info.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TrackArray.FastArraySerializer
	TrackItem[] Tracks;//[Offset: 0x108, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TrackItem.SpatializeItem.FastArraySerializerItem
	float Time;//[Offset: 0x18, Size: 0x4]
	FString PID;//[Offset: 0x20, Size: 0x10]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bProjected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	Vector FloorLocation;//[Offset: 0x34, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpatializeItem.FastArraySerializerItem
	Vector Location;//[Offset: 0xc, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: 3DMeshWidgetTrack.3DMeshWidget.Actor.Object
	Vector BoxHalfExtent;//[Offset: 0x240, Size: 0xc]
	float PlayerNearbyAlpha;//[Offset: 0x24c, Size: 0x4]
	bool bDebugCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	FName MaterialAlphaParamName;//[Offset: 0x254, Size: 0x8]
	FName MaterialCountDownName;//[Offset: 0x25c, Size: 0x8]
	float MaxTraceDist;//[Offset: 0x264, Size: 0x4]
	float DistFromGround;//[Offset: 0x268, Size: 0x4]
	StaticMeshComponent* StaticMeshCountDown;//[Offset: 0x270, Size: 0x8]
	TextRenderComponent* DistTextComp;//[Offset: 0x278, Size: 0x8]
	MaterialInstanceDynamic* DynamicMaterialIcon;//[Offset: 0x280, Size: 0x8]
	MaterialInstanceDynamic* DynamicMaterialCountDown;//[Offset: 0x288, Size: 0x8]
	MaterialInstanceDynamic* DynamicMaterialDistText;//[Offset: 0x290, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: 3DMeshWidget.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* StaticMeshComp;//[Offset: 0x230, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x540, Size: 0x18]
	MaterialInterface* TextMaterial;//[Offset: 0x558, Size: 0x8]
	bool bFullyExpandedUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 0x1]
	Font* Font;//[Offset: 0x568, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x570, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x571, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x574, Size: 0x4]
	float XScale;//[Offset: 0x578, Size: 0x4]
	float YScale;//[Offset: 0x57c, Size: 0x4]
	float WorldSize;//[Offset: 0x580, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x584, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x588, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x58c, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x590, Size: 0x1]
	void SetYScale(float Value);// 0x6cfc078ea041
	void SetXScale(float Value);// 0x6cfb078ea041
	void SetWorldSize(float Value);// 0x6cfa078ea041
	void SetVertSpacingAdjust(float Value);// 0x6cf9078ea041
	void SetVerticalAlignment(byte Value);// 0x6cf8078ea041
	void SetTextRenderColor(Color Value);// 0x6cf7078ea041
	void SetTextMaterial(MaterialInterface* Material);// 0x6cf6078ea041
	void SetText(FString Value);// 0x6cf5078ea041
	void SetHorizSpacingAdjust(float Value);// 0x6cf4078ea041
	void SetHorizontalAlignment(byte Value);// 0x6cf3078ea041
	void SetFont(Font* Value);// 0x6cf2078ea041
	void K2_SetText(out const FText Value);// 0x6cf1078ea041
	Vector GetTextWorldSize();// 0x6cf0078ea041
	Vector GetTextLocalSize();// 0x6cef078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBattleWeaponData
	int weaponid;//[Offset: 0x0, Size: 0x4]
	int SkinId;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickInfo.Info.Actor.Object
	FString TeamName;//[Offset: 0x228, Size: 0x10]
	delegate HeroRequestDelegate;//[Offset: 0x238, Size: 0x10]
	enum HeroPickType;//[Offset: 0x248, Size: 0x1]
	int TeammateNumMode;//[Offset: 0x24c, Size: 0x4]
	HeroPickWidget* HeroPickWidget;//[Offset: 0x250, Size: 0x8]
	PlayerSelectInfo[] PlayerSelectInfos;//[Offset: 0x258, Size: 0x10]
	float HeroPickTime;//[Offset: 0x268, Size: 0x4]
	float WaitingToStartTime;//[Offset: 0x270, Size: 0x4]
	int CurrentPickPlayerIndex;//[Offset: 0x274, Size: 0x4]
	float Duration;//[Offset: 0x278, Size: 0x4]
	void ShowHeroPickView();// 0x481b078ea041
	void OnRep_WaitingToStartTime();// 0x481a078ea041
	void OnRep_SelectPlayerChange();// 0x4819078ea041
	void OnRep_PlayerSelectInfos();// 0x4818078ea041
	void OnRep_HeroPickTime();// 0x4817078ea041
	void OnGameStart();// 0x4816078ea041
	void NetMulticastHeroRequest(int PlayPos, int CharacterId);// 0x4815078ea041
	bool HasConfirmInPos(int Pos);// 0x4814078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	HeroPickInfo* PickInfo;//[Offset: 0x408, Size: 0x8]
	TileView* CharacterList;//[Offset: 0x410, Size: 0x8]
	HeroPickPlayerSlot*[] PlayerSlots;//[Offset: 0x418, Size: 0x10]
	<int,HeroPickCharacterData*> SelectDataMap;//[Offset: 0x428, Size: 0x50]
	HeroPickDetail* UI_HeroPick_Detail;//[Offset: 0x490, Size: 0x8]
	int CurrentSelectCharacterID;//[Offset: 0x498, Size: 0x4]
	bool Enable3DLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	bool HasTimelineDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49d, Size: 0x1]
	bool UseOpeningTransitionAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49e, Size: 0x1]
	bool StartSkinUIAtTheBeginning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49f, Size: 0x1]
	void TryToEnableHeroRequest();// 0x4845078ea041
	void ShowPlayerConfirm(int Pos);// 0x4844078ea041
	void ShowMyTurn(bool bShow);// 0x4843078ea041
	void ShowMainUICharacter(bool bShow);// 0x4842078ea041
	void ShowHeroRequest(int Pos, int CharacterId);// 0x4841078ea041
	void SetMidCharacterNameAndIcon(int InCharacterId, int SkinId);// 0x4840078ea041
	void SetHeroHPAndSpeed(const int HP, const int Speed);// 0x483f078ea041
	void SetHeroFeatures(out const int[] InHeroFeatures);// 0x483e078ea041
	void SetEnableRequestHero(bool Enable);// 0x483d078ea041
	void SetEnabledCountdownDisplay(bool Enable);// 0x483c078ea041
	void SetCountDownText(FString Text);// 0x483b078ea041
	void SetClassNameAndIcon(FString ClassName, out const Texture2D* ClassIcon);// 0x483a078ea041
	void SetCharacterNameAndIcon(FString Name, FString SkinName, out const Texture2D* CharacterIcon);// 0x4839078ea041
	void ServerHeroRequest();// 0x4838078ea041
	void RefreshTacticalSkillIcon(out const Texture2D* TacticalSkillIcon);// 0x4837078ea041
	void RefreshSuperSkillIcon(out const Texture2D* SuperSkillIcon);// 0x4836078ea041
	void RefreshPassiveSKillIcon(out const Texture2D* PassiveSkillIcon);// 0x4835078ea041
	void PlayCharacterConfirmVoice(int SkinId);// 0x4834078ea041
	void OnGameStateSet(GameStateBase* GameState);// 0x4833078ea041
	int GetTeammateNumMode();// 0x4832078ea041
	HeroPickCharacterData* FindCharacterListData(int CharacterId);// 0x4831078ea041
	void Enable3DHeroPickLayout(bool Enalbe3DLayout);// 0x4830078ea041
	void Display3DHeroSelectedAnim(int CharacterId, int SkinId, bool IsConfirm);// 0x482f078ea041
	void ConfirmSelect();// 0x482e078ea041
	void BP_OnSelfConfirmSelected();// 0x482d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0xbec, Size: 0x4]
	float EntryWidth;//[Offset: 0xbf0, Size: 0x4]
	enum TileAlignment;//[Offset: 0xbf4, Size: 0x1]
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf5, Size: 0x1]
	void SetEntryWidth(float NewWidth);// 0x3f85078ea041
	void SetEntryHeight(float NewHeight);// 0x3f84078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ListView.ListViewBase.Widget.Visual.Object
	byte Orientation;//[Offset: 0xb28, Size: 0x1]
	byte SelectionMode;//[Offset: 0xb29, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0xb2a, Size: 0x1]
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2b, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 0x1]
	float EntrySpacing;//[Offset: 0xb30, Size: 0x4]
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 0x1]
	float ListItemStartPosOffset;//[Offset: 0xb38, Size: 0x4]
	Object*[] ListItems;//[Offset: 0xb40, Size: 0x10]
	bool EnableDelayAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb60, Size: 0x1]
	float DelayAddInterval;//[Offset: 0xb64, Size: 0x4]
	int NumInPanel;//[Offset: 0xb68, Size: 0x4]
	Object*[] DelayAddedListItems;//[Offset: 0xb70, Size: 0x10]
	bool DelayAddAnimFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb80, Size: 0x1]
	delegate BP_OnEntryInitialized;//[Offset: 0xb88, Size: 0x10]
	delegate BP_OnItemClicked;//[Offset: 0xb98, Size: 0x10]
	delegate BP_OnItemDoubleClicked;//[Offset: 0xba8, Size: 0x10]
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0xbb8, Size: 0x10]
	delegate BP_OnItemSelectionChanged;//[Offset: 0xbc8, Size: 0x10]
	delegate BP_OnItemScrolledIntoView;//[Offset: 0xbd8, Size: 0x10]
	void SetSelectionMode(byte SelectionMode);// 0x3f60078ea041
	void SetSelectedIndex(int Index);// 0x3f5f078ea041
	void ScrollIndexIntoView(int Index);// 0x3f5e078ea041
	void RemoveItem(Object* Item);// 0x3f5d078ea041
	void NavigateToIndex(int Index);// 0x3f5c078ea041
	bool IsRefreshPending();// 0x3f5b078ea041
	int GetNumItems();// 0x3f5a078ea041
	Object*[] GetListItems();// 0x3f59078ea041
	Object* GetItemAt(int Index);// 0x3f58078ea041
	int GetIndexForItem(Object* Item);// 0x3f57078ea041
	Object*[] GetDelayAddedListItems();// 0x3f56078ea041
	void ClearListItems();// 0x3f55078ea041
	void BP_SetSelectedItem(Object* Item);// 0x3f54078ea041
	void BP_SetListItems(out const Object*[] InListItems);// 0x3f53078ea041
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x3f52078ea041
	void BP_SetDelayAddListItems(out const Object*[] InListItems);// 0x3f51078ea041
	void BP_ScrollItemIntoView(Object* Item);// 0x3f50078ea041
	void BP_NavigateToItem(Object* Item);// 0x3f4f078ea041
	bool BP_IsItemVisible(Object* Item);// 0x3f4e078ea041
	bool BP_GetSelectedItems(out Object*[] Items);// 0x3f4d078ea041
	Object* BP_GetSelectedItem();// 0x3f4c078ea041
	int BP_GetNumItemsSelected();// 0x3f4b078ea041
	void BP_DoDelayAddTick(float DeltaTime);// 0x3f4a078ea041
	void BP_ClearSelection();// 0x3f49078ea041
	void BP_CancelScrollIntoView();// 0x3f48078ea041
	void AddItem(Object* Item);// 0x3f47078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x138, Size: 0x8]
	float WheelScrollMultiplier;//[Offset: 0x140, Size: 0x4]
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 0x1]
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 0x1]
	bool bClampScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 0x1]
	bool bDisableScroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147, Size: 0x1]
	float FixedLineScrollOffset;//[Offset: 0x148, Size: 0x4]
	delegate BP_OnEntryGeneratedPre;//[Offset: 0x150, Size: 0x10]
	delegate BP_OnEntryGenerated;//[Offset: 0x160, Size: 0x10]
	delegate BP_OnEntryReleased;//[Offset: 0x170, Size: 0x10]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x180, Size: 0x80]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x200, Size: 0x7f0]
	enum ScrollBarVisibility;//[Offset: 0x9f0, Size: 0x1]
	Vector2D ScrollbarThickness;//[Offset: 0x9f4, Size: 0x8]
	Margin ScrollbarPadding;//[Offset: 0x9fc, Size: 0x10]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0c, Size: 0x1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0d, Size: 0x1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x3f46078ea041
	void SetScrollOffset(const float InScrollOffset);// 0x3f45078ea041
	void SetScrollBarVisibility(enum InVisibility);// 0x3f44078ea041
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x3f43078ea041
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x3f42078ea041
	void SetEnableScrollAnimation(bool bNewEnableScrollAnimation);// 0x3f41078ea041
	void SetDisableScroll(bool bInDisableScroll);// 0x3f40078ea041
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x3f3f078ea041
	void ScrollToTop();// 0x3f3e078ea041
	void ScrollToBottom();// 0x3f3d078ea041
	void RequestRefresh();// 0x3f3c078ea041
	void RegenerateAllEntries();// 0x3f3b078ea041
	float GetScrollOffset();// 0x3f3a078ea041
	UserWidget*[] GetDisplayedEntryWidgets();// 0x3f39078ea041
	bool GetDisableScroll();// 0x3f38078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x10, Size: 0xe0]
	SlateBrush VerticalBackgroundImage;//[Offset: 0xf0, Size: 0xe0]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x1d0, Size: 0xe0]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x2b0, Size: 0xe0]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x390, Size: 0xe0]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x470, Size: 0xe0]
	SlateBrush NormalThumbImage;//[Offset: 0x550, Size: 0xe0]
	SlateBrush HoveredThumbImage;//[Offset: 0x630, Size: 0xe0]
	SlateBrush DraggedThumbImage;//[Offset: 0x710, Size: 0xe0]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickPlayerSlot.SolarUserWidget.UserWidget.Widget.Visual.Object
	enum UiState;//[Offset: 0x418, Size: 0x1]
	void UpdateSelectPercent(float Percent);// 0x482b078ea041
	void UpdateIconAndName(FString HeroName, int HeroExpLevel, out const Texture2D* IconPath);// 0x482a078ea041
	void ShowConfirm();// 0x4829078ea041
	void SetPlayerPos(FString playerName, const byte InPosInTeam);// 0x4828078ea041
	void CloseHeroRequest();// 0x4827078ea041
	void ChangeUIStage(enum State);// 0x4826078ea041
	void BP_ShowHeroRequest(FString HeroName);// 0x4825078ea041
	void BP_CloseHeroRequest();// 0x4824078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickCharacterData.Object
	int CharacterId;//[Offset: 0x28, Size: 0x4]
	int SkinId;//[Offset: 0x2c, Size: 0x4]
	int CharacterProficiencyLevel;//[Offset: 0x30, Size: 0x4]
	int CharacterOwnerType;//[Offset: 0x34, Size: 0x4]
	enum OwnType;//[Offset: 0x40, Size: 0x1]
	int ConfigSortNum;//[Offset: 0x44, Size: 0x4]
	FString HeroName;//[Offset: 0x48, Size: 0x10]
	int[] SelectedPlayerPos;//[Offset: 0x58, Size: 0x10]
	int ConfirmPos;//[Offset: 0x68, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickDetail.SolarUserWidget.UserWidget.Widget.Visual.Object
	void UpdateCharacterDetails(const int CharacterId);// 0x4813078ea041
	void RefreshSkillInfo(int SkillType, FString Attribute, FString SkillName, FString SkillDescription, out const Texture2D* SkillIcon);// 0x4812078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PlayerSelectInfo
	SolarPlayerState* Player;//[Offset: 0x0, Size: 0x8]
	int PlayerPos;//[Offset: 0x8, Size: 0x4]
	int CharacterId;//[Offset: 0xc, Size: 0x4]
	int SkinId;//[Offset: 0x10, Size: 0x4]
	int HeroExpLevel;//[Offset: 0x14, Size: 0x4]
	bool HasConfirm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	float PlayerSelectTime;//[Offset: 0x1c, Size: 0x4]
	bool IsInHeroPickProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameModeStatisticsComponent.GameModeCompBase.ActorComponent.Object
	<FString,PlayerStatisticsData*> AllPlayerStatData;//[Offset: 0xe0, Size: 0x50]
	enum[] SpecialFuncTag;//[Offset: 0x130, Size: 0x10]
	int[] GetValue_IntArray(FString InPlayerID, enum InType);// 0x51d3078ea041
	int GetValue_Int(FString InPlayerID, enum InType);// 0x51d2078ea041
	PlayerStatisticsData* GetPlayerStatData(FString InPlayerID);// 0x51d1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameModeCompBase.ActorComponent.Object
	bool bPreStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bTakeChargeStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bPostStartPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]
	bool bPreHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 0x1]
	bool bTakeChargeHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe, Size: 0x1]
	bool bPostHandleMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf, Size: 0x1]
	bool bPreRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]
	bool bTakeChargeRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3, Size: 0x1]
	bool bPostRestartPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	bool bPreEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 0x1]
	bool bTakeChargeEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	bool bPostEndPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	void PreStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x44c5078ea041
	void PreRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x44c4078ea041
	void PreHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x44c3078ea041
	void PreGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x44c2078ea041
	void PreGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x44c1078ea041
	void PreGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x44c0078ea041
	void PreGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x44bf078ea041
	void PreEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x44be078ea041
	void PostStartPlayBind(out const GameModeCompBase*[] ComponentCollection);// 0x44bd078ea041
	void PostRestartPlayerBind(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x44bc078ea041
	void PostHandleMatchHasStartedBind(out const GameModeCompBase*[] ComponentCollection);// 0x44bb078ea041
	void PostGameModeStartPlay(out const GameModeCompBase*[] ComponentCollection);// 0x44ba078ea041
	void PostGameModeRestartPlayer(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x44b9078ea041
	void PostGameModeHandleMatchHasStarted(out const GameModeCompBase*[] ComponentCollection);// 0x44b8078ea041
	void PostGameModeEndPlay(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x44b7078ea041
	void PostEndPlayBind(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x44b6078ea041
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x44b5078ea041
	void OnGameModeRestartPlayer(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x44b4078ea041
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x44b3078ea041
	void OnGameModeEndPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x44b2078ea041
	SolarGameMode* GetGameModeOwner();// 0x44b1078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate PreStartPlay;//[Offset: 0x310, Size: 0x10]
	delegate CalledStartPlay;//[Offset: 0x320, Size: 0x10]
	delegate PostStartPlay;//[Offset: 0x330, Size: 0x10]
	delegate PreHandleMatchHasStarted;//[Offset: 0x340, Size: 0x10]
	delegate CalledHandleMatchHasStarted;//[Offset: 0x350, Size: 0x10]
	delegate PostHandleMatchHasStarted;//[Offset: 0x360, Size: 0x10]
	delegate PreRestartPlayer;//[Offset: 0x370, Size: 0x10]
	delegate CalledRestartPlayer;//[Offset: 0x380, Size: 0x10]
	delegate PostRestartPlayer;//[Offset: 0x390, Size: 0x10]
	delegate PreEndPlay;//[Offset: 0x3a0, Size: 0x10]
	delegate CalledEndPlay;//[Offset: 0x3b0, Size: 0x10]
	delegate PostEndPlay;//[Offset: 0x3c0, Size: 0x10]
	GameModeCompBase*[] GameModeComponents;//[Offset: 0x3d0, Size: 0x10]
	int GamePlayMode;//[Offset: 0x3e4, Size: 0x4]
	class Actor[] ManagerClasses;//[Offset: 0x3e8, Size: 0x10]
	FString CharacterClassPath;//[Offset: 0x3f8, Size: 0x10]
	int CharacterIdInTrainningCourse;//[Offset: 0x408, Size: 0x4]
	int SkinIdInTrainningCourse;//[Offset: 0x40c, Size: 0x4]
	int BagIdInTrainingCourse;//[Offset: 0x410, Size: 0x4]
	bool bManuallyModifyCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 0x1]
	int SpecifiedCharacterSkinID;//[Offset: 0x418, Size: 0x4]
	bool bManuallyModifyCharacterBagId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 0x1]
	int SpecifiedCharacterBagID;//[Offset: 0x420, Size: 0x4]
	bool bManuallyModifyCharacterBagTrailId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	int SpecifiedCharacterBagTrailID;//[Offset: 0x428, Size: 0x4]
	delegate OnPostSpawnDefaultSolarCharacterAtTransform;//[Offset: 0x430, Size: 0x10]
	SolarGameModeAIComponent* AIMgrComponent;//[Offset: 0x440, Size: 0x8]
	SolarGameModeStatisticsComponent* StatComponent;//[Offset: 0x448, Size: 0x8]
	SolarTeamInfo*[] Teams;//[Offset: 0x450, Size: 0x10]
	SolarTeamInfo*[] AliveTeams;//[Offset: 0x460, Size: 0x10]
	SolarPlayerState*[] AlivePlayers;//[Offset: 0x470, Size: 0x10]
	class SolarTeamInfo* TeamClass;//[Offset: 0x480, Size: 0x8]
	DataTable* TeamDataTable;//[Offset: 0x488, Size: 0x8]
	SolarFlyTrail* FlyTrailActor;//[Offset: 0x548, Size: 0x8]
	FString[] BannedPlayerIDList;//[Offset: 0x590, Size: 0x10]
	SolarCharacterDataCollector* CharacterDataCollector;//[Offset: 0x5a0, Size: 0x8]
	void UpdatePlayerData(int CharacterSkinID, int CharacterBagID, int CharacterBagTrailID, SolarPlayerState* PlayerState);// 0x22ed078ea041
	void UpdateDeserterTag(SolarPlayerState* PlayerState);// 0x22ec078ea041
	void UpdateBotPlayerData(SolarPlayerState* PlayerState);// 0x22eb078ea041
	void UpdateAliveTeamsAndPlayers();// 0x22ea078ea041
	FString TryKickOutOnlinePlayer(FString PlayerId, const bool IsAllowReconnect);// 0x22e9078ea041
	void SolarGM_SetAntiCheatData(FString InVariableName, float InMin, float InMax, float InThreshold, bool bInBanPlayer);// 0x22e8078ea041
	void SetGamePlayMode(int InGamePlayMode);// 0x22e7078ea041
	void SendHitMsgWithBool(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, bool bo);// 0x22e6078ea041
	void SendHitMsg(SolarCharacterBase* HitedPlayer, out const interface classNone PC, enum MsgType, float Damage, FString Params);// 0x22e5078ea041
	void RestartPlayerTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x22e4078ea041
	void RestartPlayerEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, Controller* NewPlayer);// 0x22e3078ea041
	void PresettleAll();// 0x22e2078ea041
	void PreAssignTeam(byte DesiredTeamID, FString[] Players);// 0x22e1078ea041
	void PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature(SolarPlayerState* NewPlayer, SolarCharacter* NewCharacter);// 0x22e0078ea041
	void OnStartBattleresponded();// 0x22df078ea041
	bool OnPlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x22de078ea041
	void NotifyItemStateChanged(const Actor* Item, const int State);// 0x22dd078ea041
	void KickOutPlayerToLobby(FString InPlayerID);// 0x22dc078ea041
	void KickOutAllPlayerToLobby();// 0x22db078ea041
	bool IsCustomRoom(int InRuleID);// 0x22da078ea041
	bool IsBannedForCheating(FString PlayerId);// 0x22d9078ea041
	void InitCharacterClassPath(int CharacterId);// 0x22d8078ea041
	void GetTeams(out SolarTeamInfo*[] OutTeams, bool FilterNoMemberTeam, bool FilterAlreadySettled);// 0x22d7078ea041
	int GetRandomCharacterID();// 0x22d6078ea041
	int[] GetRandomAISkinIDByEliminateIDs(out const int[] EliminateIDs);// 0x22d5078ea041
	int[] GetRandomAISkinID(const SolarPlayerState* InPS, bool bOnlyLowerPos);// 0x22d4078ea041
	int GetMatchTeammateCount();// 0x22d3078ea041
	int GetGamePlayMode();// 0x22d2078ea041
	GameModeGlobalSetting* GetGameModeSetting(const Object* WorldContextObject);// 0x22d1078ea041
	void GetEmptyTeams(out SolarTeamInfo*[] OutTeams, bool Reverse);// 0x22d0078ea041
	void GameModeComponentTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection);// 0x22cf078ea041
	void GameModeComponentEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection);// 0x22ce078ea041
	void EndPlayTakeChargeEvent__DelegateSignature(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x22cd078ea041
	void EndPlayEvent__DelegateSignature(out const GameModeCompBase*[] ComponentCollection, byte EndPlayReason);// 0x22cc078ea041
	void EnableActorChannelCloseDelayForCharacters();// 0x22cb078ea041
	void DisableActorChannelCloseDelayForCharacters(Actor* Actor, byte EndPlayReason);// 0x22ca078ea041
	SolarPlayerState* CreateBotAISingle(int CharacterId, out const Vector Location, enum[] JoinPolicies, class SolarBotAIController ControllerClass, const int Difficultly);// 0x22c9078ea041
	SolarPlayerState* CreateBotAIAndJoinTeamByName(int CharacterId, out const Vector Location, FString TeamName, class SolarBotAIController ControllerClass, const int Difficultly);// 0x22c8078ea041
	SolarPlayerState* CreateBotAIAndJoinTeamByID(int CharacterId, out const Vector Location, const byte TeamID, class SolarBotAIController ControllerClass, const int Difficultly);// 0x22c7078ea041
	SolarPlayerState* CreateBotAIAndJoinTeam(int CharacterId, out const Vector Location, SolarTeamInfo* TeamInfo, class SolarBotAIController ControllerClass, const int Difficultly);// 0x22c6078ea041
	SolarPlayerState* CreateBotAI(int CharacterId, out const Vector Location, const int Difficultly);// 0x22c5078ea041
	bool CanPlayerBattle(SolarPlayerState* PlayerState);// 0x22c4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c8, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	int NumSpectators;//[Offset: 0x2d4, Size: 0x4]
	int NumPlayers;//[Offset: 0x2d8, Size: 0x4]
	int NumBots;//[Offset: 0x2dc, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x2e0, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x2e4, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e8, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2f0, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x300, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x304, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	void StartMatch();// 0x22c3078ea041
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x22c2078ea041
	void Say(FString Msg);// 0x22c1078ea041
	void RestartGame();// 0x22c0078ea041
	bool ReadyToStartMatch();// 0x22bf078ea041
	bool ReadyToEndMatch();// 0x22be078ea041
	void K2_OnSetMatchState(FName NewState);// 0x22bd078ea041
	bool IsMatchInProgress();// 0x22bc078ea041
	bool HasMatchEnded();// 0x22bb078ea041
	FName GetMatchState();// 0x22ba078ea041
	void EndMatch();// 0x22b9078ea041
	void AbortMatch();// 0x22b8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	class SolarBotAIController* BotAIControllerClass;//[Offset: 0xd0, Size: 0x8]
	class SolarAIControllerBase* OfflinePlayerAIControllerClass;//[Offset: 0xd8, Size: 0x8]
	SolarGameMode* GameModeOwner;//[Offset: 0xe0, Size: 0x8]
	bool bEnableIrisAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bEnableMLSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	bool bPreserveBotOnMatchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]
	bool bUseCtrlIndexAsBotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 0x1]
	class SolarBotAITeamManager* BotTeamManagerClass;//[Offset: 0xf0, Size: 0x8]
	class SolarPreservedBotManager* BotPreservedManagerClass;//[Offset: 0xf8, Size: 0x8]
	int MaxNumPreservedBots;//[Offset: 0x100, Size: 0x4]
	float MaxRatioPreservedBots;//[Offset: 0x104, Size: 0x4]
	SolarBotAITeamManager* BotTeamManager;//[Offset: 0x108, Size: 0x8]
	SolarPreservedBotManager* BotPreservedManager;//[Offset: 0x110, Size: 0x8]
	bool bInitBotByTeamPreset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bCanBotTeamRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	bool bCanPlayerTeamRebirth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]
	bool bCanBotTeamBuyRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1]
	bool bCanPlayerTeamBuyRescue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	SolarFuncBotController*[] FunctionalBots;//[Offset: 0x120, Size: 0x10]
	<enum,class SolarBotWarmSystemBase> WarmSystemClassConfig;//[Offset: 0x130, Size: 0x50]
	SolarBotWarmSystemBase* BotWarmSystem;//[Offset: 0x180, Size: 0x8]
	bool bEnableBehaviorMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	bool bOnlyRecordPlayerCombat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1]
	SolarBotBehaviorMonitor* BehaviorMonitor;//[Offset: 0x190, Size: 0x8]
	SolarFuncBotController* SpawnFunctionalBot(out const SolarFuncBotSpawnParam SpawnParam);// 0x4c0f078ea041
	void OnBattleStarted();// 0x4c0e078ea041
	void OnBattleOver();// 0x4c0d078ea041
	void OnAllBotSpawnFinished();// 0x4c0c078ea041
	void OnAcquiredIrisAIFeedStrategy(out const FeedBotStrategyInfo[] StrategyInfos);// 0x4c0b078ea041
	void GetDeathBoxExtraStuff(SolarPlayerState* BotState, SolarPlayerState* PlayerState, out <int,int> Stuff);// 0x4c0a078ea041
	enum GetCurrentWarmSystemType();// 0x4c09078ea041
	SolarGameModeAIComponent* Get(const Object* Context);// 0x4c08078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarFuncBotSpawnParam
	class SolarFuncBotController* CtrlSubClass;//[Offset: 0x0, Size: 0x8]
	class SolarCharacter* CharacterSubClass;//[Offset: 0x8, Size: 0x8]
	int CharacterId;//[Offset: 0x10, Size: 0x4]
	int SkinId;//[Offset: 0x14, Size: 0x4]
	SolarBotAIConfig* ConfigPreset;//[Offset: 0x18, Size: 0x8]
	Transform SpawnTrans;//[Offset: 0x20, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarFuncBotController.SolarBotControllerBase.SolarAIControllerBase.AIController.Controller.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotAITeamManager.Object
	float UpdateInterval;//[Offset: 0x28, Size: 0x4]
	float DefaultSeparateDistance;//[Offset: 0x2c, Size: 0x4]
	float DefaultReturnDistance;//[Offset: 0x30, Size: 0x4]
	class SolarBotTeamVisualizer* DebugVisualizerClass;//[Offset: 0x90, Size: 0x8]
	SolarBotTeamVisualizer* DebugVisualizer;//[Offset: 0x98, Size: 0x8]
	SolarBotAIConfig*[] CandidateBotConfigs;//[Offset: 0xb0, Size: 0x10]
	<SolarCharacter*,SolarBotAIController*> AllocatedCharacters;//[Offset: 0xc0, Size: 0x50]
	SolarCharacter*[] AbandonedCharacters;//[Offset: 0x110, Size: 0x10]
	<enum,BotEmojiSetting> EmojiTaskSettings;//[Offset: 0x120, Size: 0x50]
	<int,enum> ResponseToVoiceType;//[Offset: 0x170, Size: 0x50]
	<enum,enum> ResponseToMarkType;//[Offset: 0x1c0, Size: 0x50]
	<enum,BotResponseSetting> ResponseTaskSettings;//[Offset: 0x210, Size: 0x50]
	void UpdateAllocatedList(SolarBotAIController* InController, out const SolarCharacter*[] AliveCharacterArray);// 0x4f41078ea041
	bool TryCancelCurrentRescueTarget(SolarBotAIController* InController, const SolarCharacter* CancelledCharacter);// 0x4f40078ea041
	bool ShouldTeamActivate(out const SolarBotTeamInfo BotInfo);// 0x4f3f078ea041
	void SetTeamBlackboardValueAsVector(int TeamID, out const FName KeyName, Vector VectorValue, enum InBotState, bool bSkipIndependent);// 0x4f3e078ea041
	void SetTeamBlackboardValueAsString(int TeamID, out const FName KeyName, FString StringValue, enum InBotState, bool bSkipIndependent);// 0x4f3d078ea041
	void SetTeamBlackboardValueAsRotator(int TeamID, out const FName KeyName, Rotator VectorValue, enum InBotState, bool bSkipIndependent);// 0x4f3c078ea041
	void SetTeamBlackboardValueAsObject(int TeamID, out const FName KeyName, Object* ObjectValue, enum InBotState, bool bSkipIndependent);// 0x4f3b078ea041
	void SetTeamBlackboardValueAsName(int TeamID, out const FName KeyName, FName NameValue, enum InBotState, bool bSkipIndependent);// 0x4f3a078ea041
	void SetTeamBlackboardValueAsInt(int TeamID, out const FName KeyName, int IntValue, enum InBotState, bool bSkipIndependent);// 0x4f39078ea041
	void SetTeamBlackboardValueAsFloat(int TeamID, out const FName KeyName, float FloatValue, enum InBotState, bool bSkipIndependent);// 0x4f38078ea041
	void SetTeamBlackboardValueAsEnum(int TeamID, out const FName KeyName, byte EnumValue, enum InBotState, bool bSkipIndependent);// 0x4f37078ea041
	void SetTeamBlackboardValueAsClass(int TeamID, out const FName KeyName, class Object ClassValue, enum InBotState, bool bSkipIndependent);// 0x4f36078ea041
	void SetTeamBlackboardValueAsBool(int TeamID, out const FName KeyName, bool BoolValue, enum InBotState, bool bSkipIndependent);// 0x4f35078ea041
	void SetBotDropOut(const SolarBotAIController* InController, bool bDropOut);// 0x4f34078ea041
	void OnTeamDeactive(out const SolarBotTeamInfo TeamInfo);// 0x4f33078ea041
	void OnTeamActivate(out const SolarBotTeamInfo TeamInfo);// 0x4f32078ea041
	void OnBotUnRegister(out const SolarBotMemberInfo BotInfo);// 0x4f31078ea041
	void OnBotStateChanged(out const SolarBotMemberInfo BotInfo, enum OldState);// 0x4f30078ea041
	void OnBotRegister(out const SolarBotMemberInfo BotInfo);// 0x4f2f078ea041
	bool IsValidTeamID(int InTeamId);// 0x4f2e078ea041
	bool IsTeamLeader(const SolarBotAIController* InController);// 0x4f2d078ea041
	bool IsIndependent(const SolarBotAIController* InController);// 0x4f2c078ea041
	bool GetTeamPlayerInfo(const SolarBotAIController* InController, out SolarCharacter*[] PlayerArray);// 0x4f2b078ea041
	bool GetRescueInfo(SolarBotAIController* InController, out SolarCharacter*[] DyingPlayerArray, out SolarCharacter*[] DeadPlayerArray, out SolarCharacter*[] DyingBotArray, out SolarCharacter*[] DeadBotArray);// 0x4f2a078ea041
	bool GetBotTeamInfo(const SolarBotAIController* InController, out SolarBotTeamInfo OutTeamInfo);// 0x4f29078ea041
	bool GetBotMemberInfo(const SolarBotAIController* InController, out SolarBotMemberInfo OutMemberInfo);// 0x4f28078ea041
	SolarBotAITeamManager* Get(const Object* Context);// 0x4f27078ea041
	bool CheckBotTeamState(const SolarBotAIController* InController, enum MemberState);// 0x4f26078ea041
	Vector CalculateTeamPosition(out const SolarBotTeamInfo TeamInfo);// 0x4f25078ea041
	bool AllocatedRescueTarget(SolarBotAIController* InController, SolarCharacter* RescuedCharacter);// 0x4f24078ea041
	void AbandonedCurrentRescueTarget(SolarBotAIController* InController, SolarCharacter* AbandonedCharacter);// 0x4f23078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotTeamInfo
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int TeamID;//[Offset: 0x4, Size: 0x4]
	Vector TeamPosition;//[Offset: 0x8, Size: 0xc]
	float SeparateDistance;//[Offset: 0x14, Size: 0x4]
	float ReturnDistance;//[Offset: 0x18, Size: 0x4]
	bool bPlayerNeedPraise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bHasInitByTeamConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	SolarBotMemberInfo[] MemberInfos;//[Offset: 0x20, Size: 0x10]
	<enum,float> TeamEmojiTimeStamp;//[Offset: 0x30, Size: 0x50]
	<enum,float> TeamResponseTimeStamp;//[Offset: 0x80, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotMemberInfo
	SolarBotAIController* BotController;//[Offset: 0x0, Size: 0x8]
	enum MemberState;//[Offset: 0x8, Size: 0x1]
	<enum,float> MemberEmojiTimeStamp;//[Offset: 0x10, Size: 0x50]
	<enum,float> MemberResponseTimeStamp;//[Offset: 0x60, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotTeamVisualizer.Info.Actor.Object
	Color[] DrawDebugColors;//[Offset: 0x228, Size: 0x10]
	Font* TextFont;//[Offset: 0x238, Size: 0x8]
	BotTeamDebugInfo[] BotTeamDebugInfos;//[Offset: 0x240, Size: 0x10]
	float ScreamDebugInfoLifeTime;//[Offset: 0x250, Size: 0x4]
	<int,FString> CharacterIDToNameMap;//[Offset: 0x258, Size: 0x50]
	float DebugTextScale;//[Offset: 0x2a8, Size: 0x4]
	float ScreamDebugInfoTriggerTime;//[Offset: 0x2ac, Size: 0x4]
	WarmBotDebugInfo[] ScreamDebugInfos;//[Offset: 0x2b0, Size: 0x10]
	FString DebugPrefix;//[Offset: 0x2c0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BotTeamDebugInfo
	int TeamID;//[Offset: 0x0, Size: 0x4]
	BotMemberDebugInfo[] MemberDebugInfos;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BotMemberDebugInfo
	Vector MemberLocation;//[Offset: 0x0, Size: 0xc]
	FString IDStr;//[Offset: 0x10, Size: 0x10]
	enum MemberState;//[Offset: 0x20, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WarmBotDebugInfo
	ActiveBotDebugInfo[] PoppedBots;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveBotDebugInfo
	FString BotName;//[Offset: 0x0, Size: 0x10]
	bool bTeleSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	int BotCharacterID;//[Offset: 0x14, Size: 0x4]
	int BotTeamID;//[Offset: 0x18, Size: 0x4]
	FString BotConfigName;//[Offset: 0x20, Size: 0x10]
	Vector BotLocation;//[Offset: 0x30, Size: 0xc]
	Vector WarmTargetLocation;//[Offset: 0x3c, Size: 0xc]
	float DistanceToWarmTarget;//[Offset: 0x48, Size: 0x4]
	Vector BotLocationOnTeleport;//[Offset: 0x4c, Size: 0xc]
	Vector WarmTargetLocationOnTeleport;//[Offset: 0x58, Size: 0xc]
	float DistanceToWarmTargetOnTeleport;//[Offset: 0x64, Size: 0x4]
	bool bIsAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BotEmojiSetting
	<int,float> EmojiPool;//[Offset: 0x0, Size: 0x50]
	GameplayTagContainer TagsRequested;//[Offset: 0x50, Size: 0x20]
	float PersonalCD;//[Offset: 0x70, Size: 0x4]
	float TeamCD;//[Offset: 0x74, Size: 0x4]
	float MinTimeDelay;//[Offset: 0x78, Size: 0x4]
	float MaxTimeDelay;//[Offset: 0x7c, Size: 0x4]
	float TriggeredProbability;//[Offset: 0x80, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BotResponseSetting
	float PersonalCD;//[Offset: 0x0, Size: 0x4]
	float TeamCD;//[Offset: 0x4, Size: 0x4]
	float MinTimeDelay;//[Offset: 0x8, Size: 0x4]
	float MaxTimeDelay;//[Offset: 0xc, Size: 0x4]
	float TriggeredProbability;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPreservedBotManager.Object
	<SolarPlayerState*,enum> PreservedBots;//[Offset: 0x38, Size: 0x50]
	SolarPlayerState*[] FailedBots;//[Offset: 0x88, Size: 0x10]
	<int,Vector> SilenceLocationInDiffMap;//[Offset: 0x98, Size: 0x50]
	float MinDetectDistance;//[Offset: 0xec, Size: 0x4]
	SolarPreservedBotPopTask*[] PopTasks;//[Offset: 0x110, Size: 0x10]
	EQSParametrizedQueryExecutionRequest DefaultPopQuery;//[Offset: 0x120, Size: 0x48]
	<enum,EQSParametrizedQueryExecutionRequest> PopQueryMap;//[Offset: 0x168, Size: 0x50]
	EnvQuery* SeparateQuery;//[Offset: 0x1b8, Size: 0x8]
	byte SeparateEQSRunMode;//[Offset: 0x1c0, Size: 0x1]
	SolarBotTimelineAIItemSetting DefaultItemTemplate;//[Offset: 0x1c8, Size: 0xf0]
	float TimeBetweenDyingAndDead;//[Offset: 0x2b8, Size: 0x4]
	delegate OnSendBotsSuccess;//[Offset: 0x2c8, Size: 0x10]
	delegate OnSendBotsFail;//[Offset: 0x2d8, Size: 0x10]
	void TryUpdateEquipment(const Object* Context, out const SolarBotTimelineAIItemSetting ItemSetting);// 0x56e2078ea041
	bool TryPopBotByNum(const Object* Context, int PopNum, out const PopParameter InPopParam);// 0x56e1078ea041
	void TryPopAllBotByGuarantee(const Object* Context, out const Vector PopLocation);// 0x56e0078ea041
	void TryPopAllBot(const Object* Context, out const PopParameter InPopParam);// 0x56df078ea041
	void TryKillOneBot();// 0x56de078ea041
	void TryAddPreservedBot(SolarPlayerState* InBot, const float DelayTime);// 0x56dd078ea041
	void OnPopSingleBotSuccess(SolarPreservedBotPopTask* InTask);// 0x56dc078ea041
	void OnPopBotsFinished(SolarPreservedBotPopTask* InTask);// 0x56db078ea041
	void OnGetFinalTeleportLocSuccess(SolarPreservedBotPopTask* InTask, SolarPlayerState* BotPS, out const Vector TeleportLoc);// 0x56da078ea041
	void OnGetFinalTeleportLocFail(SolarPreservedBotPopTask* InTask, SolarPlayerState* BotPS);// 0x56d9078ea041
	void OnCharacterDeath(const SolarPlayerController* InPlayer);// 0x56d8078ea041
	void InitBotPreservedManager(byte InActivePlayerNum, int GameModeId);// 0x56d7078ea041
	SolarPreservedBotManager* Get(const Object* Context);// 0x56d6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPreservedBotPopTask.Object
	int CurrentTaskID;//[Offset: 0x28, Size: 0x4]
	Vector[] PickedTeleportCenters;//[Offset: 0x40, Size: 0x10]
	SolarPlayerState*[] FailedBots;//[Offset: 0x50, Size: 0x10]
	SolarBotAIController*[] PendingSeparateBots;//[Offset: 0x60, Size: 0x10]
	delegate OnGetTeleportLocationSuccess;//[Offset: 0x70, Size: 0x10]
	delegate OnPopBotsFinished;//[Offset: 0x80, Size: 0x10]
	delegate OnGetFinalTeleportLocSuccess;//[Offset: 0x90, Size: 0x10]
	delegate OnGetFinalTeleportLocFail;//[Offset: 0xa0, Size: 0x10]
	Vector GetWarmTargetTraceCenter();// 0x56e5078ea041
	Vector GetWarmTargetLocation();// 0x56e4078ea041
	Actor*[] GetWarmTargetActors();// 0x56e3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EQSParametrizedQueryExecutionRequest
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 0x8]
	AIDynamicParam[] QueryConfig;//[Offset: 0x8, Size: 0x10]
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x18, Size: 0x28]
	byte RunMode;//[Offset: 0x40, Size: 0x1]
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	float Value;//[Offset: 0xc, Size: 0x4]
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10]
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8]
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8]
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1]
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotTimelineAIItemSetting
	<enum,SolarBotTimelineEquipmentArray> Equipment;//[Offset: 0x0, Size: 0x50]
	<int,IntPoint> Consumable;//[Offset: 0x50, Size: 0x50]
	<enum,SolarBotTimelineEquipmentArray> WeaponPart;//[Offset: 0xa0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotTimelineEquipmentArray
	<int,int> IDArray;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PopParameter
	SolarPlayerState*[] WarmTargets;//[Offset: 0x0, Size: 0x10]
	Vector PopLocation;//[Offset: 0x10, Size: 0xc]
	TraceRecord[] TargetTraces;//[Offset: 0x20, Size: 0x10]
	EnvQuery* TeleportLocEQS;//[Offset: 0x30, Size: 0x8]
	byte TeleportLocEQSRunMode;//[Offset: 0x38, Size: 0x1]
	bool bPopVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bForcePop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TraceRecord
	Vector[] TargetTrace;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotWarmSystemBase.Object
	float UpdateInterval;//[Offset: 0x28, Size: 0x4]
	int MaxNumExtraExpItem;//[Offset: 0x2c, Size: 0x4]
	int MaxNumExtraWeaponPart;//[Offset: 0x30, Size: 0x4]
	bool bRemoveOriginWeaponParts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	<enum,SolarWeaponPartBonusDropSetting> WeaponPartDropPriorityConfig;//[Offset: 0x38, Size: 0x50]
	float WeaponPartBasePriorityPerLevel;//[Offset: 0x88, Size: 0x4]
	SolarBotTimelineGameSetting WarmSysGameSetting;//[Offset: 0x98, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWeaponPartBonusDropSetting
	<enum,float> PriorityMap;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotTimelineGameSetting.TableRowBase
	enum WarmSystemType;//[Offset: 0x8, Size: 0x1]
	int MaxiumTeam;//[Offset: 0xc, Size: 0x4]
	FString Comment;//[Offset: 0x10, Size: 0x10]
	DataTable* Action;//[Offset: 0x20, Size: 0x8]
	DataTable* Item;//[Offset: 0x28, Size: 0x8]
	DataTable* Downsize;//[Offset: 0x30, Size: 0x8]
	<DataTable*,float> ItemProgressionWeightMap;//[Offset: 0x38, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBotBehaviorMonitor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FeedBotStrategyInfo
	FString PlayerId;//[Offset: 0x0, Size: 0x10]
	float FeedPriority;//[Offset: 0x10, Size: 0x4]
	float Difficulty;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarFlyTrail.Actor.Object
	SolarTrailProxyComponent*[] CachedProxyComponents;//[Offset: 0x228, Size: 0x10]
	SoftObjectPath TrailEffectClass;//[Offset: 0x238, Size: 0x18]
	class SolarTrailEffect* FallbackTrailEffectClass;//[Offset: 0x250, Size: 0x28]
	class Object* CachedTrailEffectClass;//[Offset: 0x278, Size: 0x8]
	CharacterSkydiveTrailStaticInfoContainer SkydiveTrailStaticInfo;//[Offset: 0x2d0, Size: 0x120]
	PackedSkydiveTrailFrameInfoContainer SkydiveTrailFrameInfo;//[Offset: 0x3f0, Size: 0x120]
	class SkydiveTrailEffect* SkydiveTrailEffectClass;//[Offset: 0x510, Size: 0x8]
	<SolarPlayerState*,CharacterSkydiveTrailData> SkydiveTrailData;//[Offset: 0x518, Size: 0x50]
	SolarPlayerState* LocalPlayerSkydiveTrailProxy;//[Offset: 0x568, Size: 0x8]
	void OnRep_TrailEffectClass();// 0x515d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTrailProxyComponent.SceneComponent.ActorComponent.Object
	SolarCharacter* PlayerBeingTracked;//[Offset: 0x314, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTrailEffect.Actor.Object
	void OnFinished();// 0x5157078ea041
	Transform GetTrackingTransform(const SolarCharacter* Character);// 0x5156078ea041
	void AttachToCharacter(const SolarCharacter* Character);// 0x5155078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterSkydiveTrailStaticInfoContainer.FastArraySerializer
	CharacterSkydiveTrailStaticInfo[] InfoArray;//[Offset: 0x108, Size: 0x10]
	SolarFlyTrail* Owner;//[Offset: 0x118, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterSkydiveTrailStaticInfo.FastArraySerializerItem
	FString CharacterId;//[Offset: 0x10, Size: 0x10]
	SolarPlayerState* PlayerState;//[Offset: 0x20, Size: 0x8]
	FString TrailAssemblingId;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PackedSkydiveTrailFrameInfoContainer.FastArraySerializer
	PackedSkydiveTrailFrameInfo[] InfoArray;//[Offset: 0x108, Size: 0x10]
	SolarFlyTrail* Owner;//[Offset: 0x118, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PackedSkydiveTrailFrameInfo.FastArraySerializerItem
	float Timestamp;//[Offset: 0xc, Size: 0x4]
	SkydiveTrailFrameInfo[] FrameInfos;//[Offset: 0x10, Size: 0x10]
	SolarPlayerState*[] FinishedPlayerStates;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkydiveTrailFrameInfo
	SolarPlayerState* OwnerPlayerState;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize Location;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize Velocity;//[Offset: 0x14, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SkydiveTrailEffect.Actor.Object
	SolarFlyTrail* FlyTrailManager;//[Offset: 0x228, Size: 0x8]
	void UpdateTrailEffect(const float CurrentTime);// 0x515c078ea041
	void OnTrailFinish();// 0x515b078ea041
	void InitEffectAppearance(bool IsDefender, bool IsSameTeamWithLocalPlayer);// 0x515a078ea041
	void InitAppearanceByPlayerState(const SolarPlayerState* PlayerState);// 0x5159078ea041
	void AddTrailPoint(float Timestamp, out const Vector Location, out const Vector Velocity);// 0x5158078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterSkydiveTrailData
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharacterDataCollector.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeamInfoComponent.ActorComponent.Object
	int KillDownCount;//[Offset: 0xb0, Size: 0x4]
	int AssistCount;//[Offset: 0xb4, Size: 0x4]
	int DeathCount;//[Offset: 0xb8, Size: 0x4]
	int SaveCount;//[Offset: 0xbc, Size: 0x4]
	SolarTeamAttributeSet TeamAttributeSet;//[Offset: 0xc0, Size: 0x78]
	WorldMarkDataDetails WorldMarkDatas;//[Offset: 0x138, Size: 0x120]
	void OnWorldMarkAttachedActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x5dd3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeamAttributeSet
	SolarTeamAttribute TeamTreatmentDurationReductionMultiple;//[Offset: 0x0, Size: 0x18]
	SolarTeamAttribute TeamShieldChargeDurationReductionMultiple;//[Offset: 0x18, Size: 0x18]
	SolarTeamAttribute TeamBigShieldChargeDurationReductionMultiple;//[Offset: 0x30, Size: 0x18]
	SolarTeamAttribute TeamItemDiscountMultiple;//[Offset: 0x48, Size: 0x18]
	SolarTeamAttribute TeamItemAdditionMultiple;//[Offset: 0x60, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeamAttribute
	float Value;//[Offset: 0x0, Size: 0x4]
	SCMPlayerState*[] Contributors;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMarkDataDetails.FastArraySerializer
	byte PlayerPosMax;//[Offset: 0x101, Size: 0x1]
	WorldMarkData[] AllMarkDatas;//[Offset: 0x108, Size: 0x10]
	SolarTeamInfoComponent* Owner;//[Offset: 0x118, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGroundPreviewActor.SolarDormantActor.Actor.Object
	SolarItemData ItemData;//[Offset: 0x270, Size: 0xb8]
	float SpawnOffset;//[Offset: 0x328, Size: 0x4]
	SphereComponent* SphereComponent;//[Offset: 0x330, Size: 0x8]
	SoftObjectPath[] DiscardMatPath;//[Offset: 0x338, Size: 0x10]
	SoftObjectPath OutlineMatPath;//[Offset: 0x348, Size: 0x18]
	byte[] MarkedTeamIdList;//[Offset: 0x368, Size: 0x10]
	int WeaponLevel;//[Offset: 0x378, Size: 0x4]
	enum WeaponType;//[Offset: 0x37c, Size: 0x1]
	int FireModeNameLocalizationID;//[Offset: 0x380, Size: 0x4]
	SlateBrush TriggerIcon;//[Offset: 0x390, Size: 0xe0]
	int weaponid;//[Offset: 0x470, Size: 0x4]
	bool bIsItemWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 0x1]
	bool bIsSummonVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x475, Size: 0x1]
	bool bIsAntiVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x476, Size: 0x1]
	SkeletalMeshComponent* SkeletalMeshComp;//[Offset: 0x478, Size: 0x8]
	SolarItemBurstShowComponent* BurstShowComponent;//[Offset: 0x480, Size: 0x8]
	SolarLandscapeListenerConfig LandscapeListenerConfig;//[Offset: 0x490, Size: 0x10]
	void UnMarkThisItem(byte TeamID);// 0x525d078ea041
	void SetItemData(out const SolarItemData _ItemData);// 0x525c078ea041
	void OnRep_ItemDataChange();// 0x525b078ea041
	void NotifyThisItemWasPickedUp();// 0x525a078ea041
	void MarkThisItem(byte TeamID);// 0x5259078ea041
	int GetQuality();// 0x5258078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameLevelManager.GameManagerBase.Info.Actor.Object
	FString DesiredLoadLevel;//[Offset: 0x248, Size: 0x10]
	FString[] DesiredLoadElementLevels;//[Offset: 0x268, Size: 0x10]
	FString[] DesiredUnLoadElementLevels;//[Offset: 0x278, Size: 0x10]
	<FString,LevelStreamingDynamic*> LevelKeyToObject;//[Offset: 0x330, Size: 0x50]
	<SolarCharacter*> MovementDisabledCharacters;//[Offset: 0x380, Size: 0x50]
	FString[] LoadingElementLevelNames;//[Offset: 0x430, Size: 0x10]
	FString[] UnLoadingElementLevelNames;//[Offset: 0x440, Size: 0x10]
	GameMapElementManager* MapElementManager;//[Offset: 0x468, Size: 0x8]
	void SetMinimapFootprintVisible(bool bVisible);// 0x4796078ea041
	void OnStreamingLevelLoaded();// 0x4795078ea041
	void OnScoutPlayerDepart();// 0x4794078ea041
	void OnRep_DesiredUnLoadElementLevels();// 0x4793078ea041
	void OnRep_DesiredLoadLevel();// 0x4792078ea041
	void OnRep_DesiredLoadElementLevels();// 0x4791078ea041
	void OnLevelLoaded();// 0x4790078ea041
	void OnElementStreamingLevelUnLoaded();// 0x478f078ea041
	void OnElementStreamingLevelLoaded();// 0x478e078ea041
	void OnCharacterEndPlay(Actor* Actor, byte EndPlayReason);// 0x478d078ea041
	void LevelManagerTick();// 0x478c078ea041
	int GetCurrentMapID();// 0x478b078ea041
	FString GetCurrentLevel();// 0x478a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameMapElementManager.GameManagerBase.Info.Actor.Object
	<FString,SCMMapElementBase*> MapElementListWithID;//[Offset: 0x228, Size: 0x50]
	SCMMapElementBase*[] MapElementList;//[Offset: 0x278, Size: 0x10]
	SCMPlayerStart*[] PlayerStartList;//[Offset: 0x288, Size: 0x10]
	void OnAddNewMapElement(Actor* InNewActor);// 0x4797078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	float Distance;//[Offset: 0x254, Size: 0x4]
	FString Side;//[Offset: 0x258, Size: 0x10]
	FString Job;//[Offset: 0x268, Size: 0x10]
	FString ElementID;//[Offset: 0x278, Size: 0x10]
	enum Type;//[Offset: 0x288, Size: 0x1]
	enum State;//[Offset: 0x289, Size: 0x1]
	enum Visibility;//[Offset: 0x28a, Size: 0x1]
	FName ElementName;//[Offset: 0x28c, Size: 0x8]
	Vector[] PlayerLocations;//[Offset: 0x298, Size: 0x10]
	enum SetElementVisibility(const enum NewType);// 0x4c26078ea041
	enum SetElementState(const enum NewState);// 0x4c25078ea041
	void OnElementVisibilityChanged(const enum CurrentVisibility);// 0x4c24078ea041
	void OnElementStateChanged(const enum CurrentState);// 0x4c23078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomSettlementManager.GameManagerBase.Info.Actor.Object
	bool HasReportAllCompetitionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	void SettlePlayer(SolarPlayerState* InPlayer);// 0x4734078ea041
	void SettleAllPlayer(out SolarPlayerState*[] InAllPlayers);// 0x4733078ea041
	void ReportAllPlayerCompetitionData();// 0x4732078ea041
	void NormalSettlePlayer(SolarPlayerState* Player);// 0x4731078ea041
	void CompetitionSettlePlayer(SolarPlayerState* Player);// 0x4730078ea041
	void CompetitionSettleAllPlayer(out SolarPlayerState*[] InAllPlayers);// 0x472f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameDataManager.GameManagerBase.Info.Actor.Object
	int[] IntegerValues;//[Offset: 0x230, Size: 0x10]
	float[] FloatValues;//[Offset: 0x240, Size: 0x10]
	byte[] ByteValues;//[Offset: 0x250, Size: 0x10]
	bool[] BoolValues;//[Offset: 0x260, Size: 0x10]
	Vector[] FVectorValues;//[Offset: 0x270, Size: 0x10]
	FString[] FStringValues;//[Offset: 0x280, Size: 0x10]
	SCMHostData GlobalDataMap;//[Offset: 0x2f0, Size: 0x488]
	<FString,SCMHostData> SideDataMap;//[Offset: 0x778, Size: 0x50]
	<FString,SCMHostData> PlayerDataMap;//[Offset: 0x7c8, Size: 0x50]
	SCMHostData SideDataDefaultTemplate;//[Offset: 0x818, Size: 0x488]
	SCMHostData PlayerDataDefaultTemplate;//[Offset: 0xca0, Size: 0x488]
	<FString,Rank*> RanKMap;//[Offset: 0x1128, Size: 0x50]
	DataTable* DataTable;//[Offset: 0x1198, Size: 0x8]
	DataTable* GeneralDataTable;//[Offset: 0x11a0, Size: 0x8]
	void RemoveHost(enum HostType, FString HostID);// 0x4785078ea041
	void RemoveData(enum HostType, FString HostID, FString DataName, enum DataSetType);// 0x4784078ea041
	void NotifyRemoveHost(enum HostType, FString HostID);// 0x4783078ea041
	void AddDataByTableRow(FName RowName, out const SCMDataBoardRow InTableRow);// 0x4782078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMHostData
	HostChangeData DataChangeToGlobal;//[Offset: 0x0, Size: 0xf0]
	HostChangeData DataChangeToSide;//[Offset: 0xf0, Size: 0xf0]
	HostChangeData DataChangeToSelf;//[Offset: 0x1e0, Size: 0xf0]
	<FString,SCMSaveData> DataMap;//[Offset: 0x2d0, Size: 0x50]
	<FString,SCMArrayData> ArrayDataMap;//[Offset: 0x320, Size: 0x50]
	<FString,SCMMapData> MapDataMap;//[Offset: 0x370, Size: 0x50]
	delegate SCMDataChangeDelegate;//[Offset: 0x460, Size: 0x10]
	FString Name;//[Offset: 0x470, Size: 0x10]
	enum HostType;//[Offset: 0x480, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HostChangeData
	<FString,enum> DataChangeMap;//[Offset: 0x0, Size: 0x50]
	<FString,SCMChangeDataArray> ArrayChangeMap;//[Offset: 0x50, Size: 0x50]
	<FString,SCMChangeDataMap> MapChangeMap;//[Offset: 0xa0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMChangeDataArray
	enum[] ChangeType;//[Offset: 0x0, Size: 0x10]
	uint32[] ChangeIndexArray;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMChangeDataMap
	enum[] ChangeType;//[Offset: 0x0, Size: 0x10]
	FString[] ChangeKeyArray;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMSaveData.SCMSaveDataBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMSaveDataBase
	FString Name;//[Offset: 0x0, Size: 0x10]
	enum Type;//[Offset: 0x10, Size: 0x1]
	enum RepType;//[Offset: 0x11, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMArrayData.SCMSaveDataBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMMapData.SCMSaveDataBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMDataBoardRow.TableRowBase
	enum Type;//[Offset: 0x8, Size: 0x1]
	enum DataSetType;//[Offset: 0x9, Size: 0x1]
	FString Default;//[Offset: 0x10, Size: 0x10]
	FString[] DefaultArray;//[Offset: 0x20, Size: 0x10]
	<FString,FString> DefaultMap;//[Offset: 0x30, Size: 0x50]
	enum HostType;//[Offset: 0x80, Size: 0x1]
	enum ReplicateType;//[Offset: 0x81, Size: 0x1]
	enum SettleGatherType;//[Offset: 0x82, Size: 0x1]
	enum Rank;//[Offset: 0x83, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Rank.Object
	<uint32,SpecificRankChangeEventMap(MulticastInlineDelegateProperty)> SpecificRankChangeEventMap;//[Offset: 0x28, Size: 0x50]
	SCMRankListMulticast[] RankListChangeMulticasts;//[Offset: 0x78, Size: 0x10]
	enum RankType;//[Offset: 0xa8, Size: 0x1]
	enum HostType;//[Offset: 0xa9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMRankListMulticast
	int BeginRank;//[Offset: 0x0, Size: 0x4]
	int EndRank;//[Offset: 0x4, Size: 0x4]
	delegate RankListChangeMulticast;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_BattleRoylePoisonCircle_C.BP_CustomPoisonCircle_Template_C.SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_CustomPoisonCircle_Template_C.SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4c8, Size: 0x8]
	StaticMeshComponent* StaticMeshCicle;//[Offset: 0x4d0, Size: 0x8]
	StaticMeshComponent* SafeArea;//[Offset: 0x4d8, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x4e0, Size: 0x8]
	float Distance Threshold;//[Offset: 0x4e8, Size: 0x4]
	float InitRadius;//[Offset: 0x4ec, Size: 0x4]
	Vector InitPosition;//[Offset: 0x4f0, Size: 0xc]
	FString GetModuleName();// 0xc3fe07b6a001
	void SetMeshVisibility(float CallFunc_GetCurrentSafeAreaRadius_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetViewportFocusedCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0xc3ff07b6a001
	static void DataTrace(int inInt, Vector Vector, float InFloat, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0xc40007b6a001
	void OnLoaded_2CF9BD9E4D7B992D773DE7AE62F29135(Object* Loaded);// 0xc40107b6a001
	void ReceiveBeginPlay();// 0xc40207b6a001
	void ReceiveTick(float DeltaSeconds);// 0xc40307b6a001
	void [S]SetNextArea(Vector Center, float Radius, float WaitTime, float MoveTime, int DamageLevel);// 0xc40407b6a001
	void ShowEffectInside(bool bInside);// 0x1253107b6a008
	void Evnet_ResetMaterial();// 0xd9122093a6652c82
	static void ExecuteUbergraph_BP_CustomPoisonCircle_Template(int EntryPoint, float CallFunc_GetCurBattleTime_ReturnValue, bool CallFunc_IsServer_ReturnValue, int CallFunc_FTrunc_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, float K2Node_Event_DeltaSeconds, Vector K2Node_CustomEvent_Center, float K2Node_CustomEvent_Radius, float K2Node_CustomEvent_WaitTime, float K2Node_CustomEvent_MoveTime, int K2Node_CustomEvent_DamageLevel, bool K2Node_Event_bInside, float CallFunc_Conv_IntToFloat_ReturnValue, CircleSafeAreaInfo K2Node_MakeStruct_CircleSafeAreaInfo, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_VectorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, Object* Temp_object_Variable, Object* K2Node_CustomEvent_Loaded, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, Material* K2Node_DynamicCast_AsMaterial, bool K2Node_DynamicCast_bSuccess);// 0x1254d07b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCircleSafeArea.SolarSafeArea.SCMMapElementBase.Actor.Object
	<float,CurveFloat*> MiniMapScaleMap;//[Offset: 0x468, Size: 0x50]
	CircleSafeAreaInfo[] SafeAreaConfigArr;//[Offset: 0x4b8, Size: 0x10]
	void SetNextSafeArea(out const CircleSafeAreaInfo AreaInfo);// 0x50a9078ea041
	void Init(out const Vector InSafeAreaCenterPos, float InPoisonCircleRadius);// 0x50a8078ea041
	float GetNextSafeAreaRadius();// 0x50a7078ea041
	CurveFloat* GetMiniMapFOVCurveByRadius(float InRadius);// 0x50a6078ea041
	float GetCurrentSafeAreaRadius();// 0x50a5078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CircleSafeAreaInfo.SafeAreaInfoBase
	float Radius;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SafeAreaInfoBase
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float WaitTime;//[Offset: 0xc, Size: 0x4]
	float ShrinkTime;//[Offset: 0x10, Size: 0x4]
	float DamageValue;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PointerToUberGraphFrame
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10]
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18]
	int ArgumentValueInt;//[Offset: 0x30, Size: 0x4]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 0x4]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PlayerState_BattleRoyaleMap01_C.BP_PlayerState_BattleRoyale_C.BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	void OnGameStart_2D3E27E908DBD65032F16AA2F0BD59D1();// 0xd025079109f1
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2D3D4A4C08DBD65032F168B8F0BD59A0(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff8ef83d90
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2D3C608F08DBD65032F166D8F0BD5971(out const byte InPosInTeam, bool InIsLastOne);// 0x2844a07b6a008
	void OnTeammatePlayerStateRepDelegate_2D3BEEF408DBD65032F163A4F0BD5920();// 0x1c0c05407cf20c7
	void OnGameStart_2D394EE508DBD65032445F92F0AC0BE9();// 0xfffffffee35f0e00
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2D38408408DBD65032445D4EF0AC0BAF(out const byte InPosInTeam, bool InIsLastOne);// 0x6ff900791a002
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2D3789C008DBD65032445B8CF0AC0B82(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRepDelegate_2D3612DD08DBD65032445876F0AC0B35();// 0xffffff8c078ea000
	void OnGameStart_2D3415C708DBD65031D92CB8F0A153A1();// 0x26970078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2D333B8808DBD65031D92AECF0A15373(out const byte InPosInTeam, bool InIsLastOne);// 0xc1a378d0d3c1be92
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2D32110208DBD65031D928F8F0A15341(out const byte InPosInTeam, bool InIsLastOne);// 0x2740707b6a008
	void OnTeammatePlayerStateRepDelegate_2D31D59808DBD65031D92664F0A15300();// 0xd9122093a6652c82
	void OnGameStart_2D2B9DAB08DBD650314CD894F0934B36();// 0xd9122093a6652c82
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2D2A21A108DBD650314CD6B4F0934B07(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2D291B1708DBD650314CD542F0934AE1(out const byte InPosInTeam, bool InIsLastOne);// 0x260cb07b6a008
	void OnTeammatePlayerStateRepDelegate_2D288C4C08DBD650314CD2C2F0934AA3();// 0xffffff94078ea007
	void OnGameStart_2D2225DF08DBD65030F616DAF08A9E3E();// 0xffffff8b078ea002
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2D21ABBD08DBD65030F61522F08A9E11(out const byte InPosInTeam, bool InIsLastOne);// 0x2682e078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2D20B39208DBD65030F613CEF08A9DF0(out const byte InPosInTeam, bool InIsLastOne);// 0x2682d078ea041
	void OnTeammatePlayerStateRepDelegate_2D1FD68408DBD65030F6116CF08A9DB4();// 0x2682c078ea041
	void OnGameStart_2D1E30CB08DBD65030E95BB6F0895853();// 0x26820078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2D1DB2B508DBD65030E959F4F0895826(out const byte InPosInTeam, bool InIsLastOne);// 0x2681f078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2D1C4F5B08DBD65030E95878F0895801(out const byte InPosInTeam, bool InIsLastOne);// 0x2734307b6a000
	void OnTeammatePlayerStateRepDelegate_2D1B19E708DBD65030E95634F08957C7();// 0xffffff8c078ea000
	void OnGameStart_2D0860D708DBD65030490116F0794F44();// 0xd9122093a6652c82
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2D077D6E08DBD6503048FF54F0794F16(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2D064CA908DBD6503048FDD8F0794EF0(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffecc53a420
	void OnTeammatePlayerStateRepDelegate_2D05392E08DBD6503048FB26F0794EAD();// 0x2283e07b6a001
	void OnGameStart_2D04A34008DBD65030323A62F0770832();// 0x2672a078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2D033DB208DBD650303238DCF077080B(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2D02A4EC08DBD65030323792F07707E9(out const byte InPosInTeam, bool InIsLastOne);// 0x26728078ea041
	void OnTeammatePlayerStateRepDelegate_2D01430508DBD65030323562F07707B3();// 0x286e207b6a008
	void OnGameStart_2CEB083808DBD6502F8EE10AF066B276();// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CEACF1708DBD6502F8EDF7AF066B24E(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c078ea000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CE9093F08DBD6502F8EDD7CF066B21A(out const byte InPosInTeam, bool InIsLastOne);// 0x2663d078ea041
	void OnTeammatePlayerStateRepDelegate_2CE8BB6908DBD6502F8EDB10F066B1DE();// 0xad7a079106ac
	void OnGameStart_2CE6045708DBD6502F4009EAF05ED026();// 0xad3b0791064e
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CE5CBAB08DBD6502F40083CF05ECFFA(out const byte InPosInTeam, bool InIsLastOne);// 0xd9122093a6652c82
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CE43C8B08DBD6502F4006D4F05ECFD7(out const byte InPosInTeam, bool InIsLastOne);// 0xe26b07911919
	void OnTeammatePlayerStateRepDelegate_2CE3B61C08DBD6502F4004AEF05ECFA1();// 0x2dffba07bda02e
	void OnGameStart_2CE0728008DBD6502EDA80CAF054A8D5();// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CDF4A5308DBD6502EDA7EA4F054A89F(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c078ea000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CDE54AE08DBD6502EDA7D00F054A874(out const byte InPosInTeam, bool InIsLastOne);// 0x26568078ea041
	void OnTeammatePlayerStateRepDelegate_2CDD2ADB08DBD6502EDA7A58F054A832();// 0xff00a68c068f46ff
	void OnGameStart_2CDBD1A308DBD6502E8B9B04F04CC50E();// 0x80097fab088fa0a5
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CDA326808DBD6502E8B9910F04CC4DD(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8f078ea002
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CD94F8E08DBD6502E8B974EF04CC4B0(out const byte InPosInTeam, bool InIsLastOne);// 0x3da4c6078f3a79
	void OnTeammatePlayerStateRepDelegate_2CD8D58008DBD6502E8B94BAF04CC46F();// 0x283c407b6a008
	void OnGameStart_2CD6397D08DBD6502E3F4132F045227A();// 0xffffff8f078ea002
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CD5BDEE08DBD6502E3F3F3EF0452247(out const byte InPosInTeam, bool InIsLastOne);// 0x174f3078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CD4D75E08DBD6502E3F3CAAF0452205(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8b078ea002
	void OnTeammatePlayerStateRepDelegate_2CD38B3508DBD6502E3F3A48F04521CA();// 0x3068da60
	void OnGameStart_2CCF121308DBD6502E168666F0410FCB();// 0x26747078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CCE221208DBD6502E1684C2F0410FA2(out const byte InPosInTeam, bool InIsLastOne);// 0x263ec07b6a008
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CCD64A108DBD6502E16835AF0410F7D(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c878ea000
	void OnTeammatePlayerStateRepDelegate_2CCCE3F908DBD6502E168116F0410F45();// 0xffffffff0d8e7580
	void OnGameStart_2CCAA5F908DBD6502DD1D908F03A31A8();// 0xfffffffefe406e00
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CC97EA908DBD6502DD1D714F03A3176(out const byte InPosInTeam, bool InIsLastOne);// 0x262eb07b6a008
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CC8583A08DBD6502DD1D57AF03A314D(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRepDelegate_2CC7E95608DBD6502DD1D2BEF03A3108();// 0x2436507b6a008
	void OnGameStart_2CC2F3FA08DBD6502D758482F030F602();// 0xd9122093a6652c82
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CC1F72808DBD6502D75828EF030F5CF(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CC01B0908DBD6502D7580F4F030F5A6(out const byte InPosInTeam, bool InIsLastOne);// 0x307b01e0
	void OnTeammatePlayerStateRepDelegate_2CBFA9C808DBD6502D757E10F030F55E();// 0x285c407b6a008
	void OnGameStart_2CAFE69908DBD6502D446028F02C0BF8();// 0x2406207b6a008
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CAE0B4008DBD6502D445E52F02C0BC9(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CAD78D008DBD6502D445C7CF02C0B9B(out const byte InPosInTeam, bool InIsLastOne);// 0x2400107b6a008
	void OnTeammatePlayerStateRepDelegate_2CAC164308DBD6502D4459DEF02C0B59();// 0xffffff8c078ea000
	void OnGameStart_2CAB9C6308DBD6502D352BA8F02A86B9();// 0xf9ec07b6a001
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CAA794C08DBD6502D352932F02A8679(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c078ea000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CA9F20408DBD6502D3526D0F02A863C(out const byte InPosInTeam, bool InIsLastOne);// 0xd9122093a6652c82
	void OnTeammatePlayerStateRepDelegate_2CA8E6F308DBD6502D35237EF02A85E9();// 0x2dffba07bda02e
	void OnGameStart_2CA2A12708DBD6502CB8903EF01E10C7();// 0x2406d07b6a001
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2CA137BB08DBD6502CB88D82F01E1081(out const byte InPosInTeam, bool InIsLastOne);// 0xd9122093a6652c82
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2CA036C408DBD6502CB88BDEF01E1058(out const byte InPosInTeam, bool InIsLastOne);// 0x1942c078ea041
	void OnTeammatePlayerStateRepDelegate_2C9FB70808DBD6502CB8895EF01E1019();// 0xffffff8d078ea001
	void OnGameStart_2C9D9DE308DBD6502C7A2F9CF017D3EB();// 0x25ee4078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C9C917C08DBD6502C7A2D26F017D3AC(out const byte InPosInTeam, bool InIsLastOne);// 0x2441207b6a008
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C9B645008DBD6502C7A2B46F017D37B(out const byte InPosInTeam, bool InIsLastOne);// 0x268fe07b6a008
	void OnTeammatePlayerStateRepDelegate_2C9A840808DBD6502C7A2830F017D32E();// 0x6ff920793a004
	void OnGameStart_2C94D2C608DBD6502C145F64F00DA57E();// 0x25daf078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C93B3DD08DBD6502C145DB6F00DA554(out const byte InPosInTeam, bool InIsLastOne);// 0x25dae078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C927DCA08DBD6502C145C26F00DA52B(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRepDelegate_2C91D08C08DBD6502C1459C4F00DA4F0();// 0xa5c4552f8e810e93
	void OnGameStart_2C90E6ED08DBD6502BFD8D16F00B5D43();// 0x2739b07b6a008
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C8F964F08DBD6502BFD8B7CF00B5D1B(out const byte InPosInTeam, bool InIsLastOne);// 0xab250790fd2e
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C8EB61408DBD6502BFD8A32F00B5CFA(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRepDelegate_2C8DBB6408DBD6502BFD8802F00B5CC3();// 0xb13307b6a001
	void OnGameStart_2C8A504B08DBD6502B7E7A80EFFEA835();// 0xd9122093a6652c82
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C89D42A08DBD6502B7E783CEFFEA7FA(out const byte InPosInTeam, bool InIsLastOne);// 0x1688b07b6a008
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C8897B308DBD6502B7E7666EFFEA7CB(out const byte InPosInTeam, bool InIsLastOne);// 0x2607907b6a008
	void OnTeammatePlayerStateRepDelegate_2C87419508DBD6502B7E7396EFFEA785();// 0x69f2078f6dba
	void OnGameStart_2C85B44508DBD6502B4E2470EFF9D2CD();// 0xffffff8c078ea000
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C848DEB08DBD6502B4E220EEFF9D28F(out const byte InPosInTeam, bool InIsLastOne);// 0x75a4078fd53b
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C833D8308DBD6502B4E2010EFF9D25C(out const byte InPosInTeam, bool InIsLastOne);// 0x273b807b6a008
	void OnTeammatePlayerStateRepDelegate_2C82647908DBD6502B4E1D04EFF9D210();// 0xd9122093a6652c82
	void OnGameStart_2C7A89E008DBD6502AF83722EFF13B12();// 0xffffffffc848aa20
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C7965DE08DBD6502AF8356AEFF13AE6(out const byte InPosInTeam, bool InIsLastOne);// 0x12c7c07b6a008
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C781FD808DBD6502AF8340CEFF13AC2(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRepDelegate_2C779B2E08DBD6502AF831B4EFF13A87();// 0x38ffbc07bda065
	void OnGameStart_2C75368A08DBD6502AC2CC5EEFEBE397();// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C7448C608DBD6502AC2CACEEFEBE370(out const byte InPosInTeam, bool InIsLastOne);// 0x10f7c07b6a001
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C7367EB08DBD6502AC2C95CEFEBE34A(out const byte InPosInTeam, bool InIsLastOne);// 0x78ed078fdfa6
	void OnTeammatePlayerStateRepDelegate_2C7258EB08DBD6502AC2C70EEFEBE311();// 0xd84507b6a001
	void OnGameStart_2C551BBC08DBD6502A41E63EEFDEFFC9();// 0xd9122093a6652c82
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C541EA608DBD6502A41DE96EFDEFF04(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffefd608020
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C53126D08DBD6502A41DC70EFDEFECC(out const byte InPosInTeam, bool InIsLastOne);// 0xd9122093a6652c82
	void OnTeammatePlayerStateRepDelegate_2C52C49608DBD6502A41D91EEFDEFE79();// 0xd9122093a6652c82
	void OnGameStart_2C4EE20108DBD6502A09C574EFD962E7();// 0xffffff8c078ea000
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C4D422808DBD6502A09C3D0EFD962BC(out const byte InPosInTeam, bool InIsLastOne);// 0xfb82078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C4C577208DBD6502A09C24AEFD96295(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c078e9fff
	void OnTeammatePlayerStateRepDelegate_2C4B053408DBD6502A09C024EFD96260();// 0xfda7078ea001
	void OnGameStart_2C448DC208DBD650299DD1A2EFCE9752();// 0x98bf07b6a008
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C4351E108DBD650299DCED2EFCE970A(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C42659208DBD650299DCC84EFCE96CF(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8f078ea002
	void OnTeammatePlayerStateRepDelegate_2C41A86108DBD650299DC6DAEFCE963F();// 0x12a49078ea041
	void OnGameStart_2C37F0E908DBD65029135D74EFC0BEE6();// 0xbffff93b3a04c11
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C362C0F08DBD65029135BBCEFC0BEBA(out const byte InPosInTeam, bool InIsLastOne);// 0x1bce9078ea001
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C3528F508DBD650291359FAEFC0BE8D(out const byte InPosInTeam, bool InIsLastOne);// 0xd9122093a6652c82
	void OnTeammatePlayerStateRepDelegate_2C34B23208DBD65029135766EFC0BE4D();// 0x15a7d07b6a008
	void OnGameStart_2C31C65F08DBD650288A0E20EFB303C5();// 0x19424078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C30EF9E08DBD650288A0C86EFB3039B(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C2FA21F08DBD650288A0B32EFB30379(out const byte InPosInTeam, bool InIsLastOne);// 0xd9122093a6652c82
	void OnTeammatePlayerStateRepDelegate_2C2E1ED508DBD650288A08F8EFB30343();// 0xea2e07b6a001
	void OnGameStart_2C11C63D08DBD6502718688EEF8E0CCF();// 0xfffffffec5d4eca0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C101CC008DBD650271866C2EF8E0CA1(out const byte InPosInTeam, bool InIsLastOne);// 0x1b51207b6a001
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C0F84DA08DBD65027186500EF8E0C75(out const byte InPosInTeam, bool InIsLastOne);// 0xd9122093a6652c82
	void OnTeammatePlayerStateRepDelegate_2C0EE3F408DBD65027186258EF8E0C32();// 0x278cb07b6a008
	void OnGameStart_2C0BFD9A08DBD6502708DDB0EF8C7EEC();// 0xf92307b6a001
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C0AA65908DBD6502708DB94EF8C7EB6(out const byte InPosInTeam, bool InIsLastOne);// 0x228ae078ea002
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C09190C08DBD6502708D9D2EF8C7E8A(out const byte InPosInTeam, bool InIsLastOne);// 0x1a5f8078ea041
	void OnTeammatePlayerStateRepDelegate_2C080DC508DBD6502708D702EF8C7E43();// 0x1247707910644
	void OnGameStart_2C07751208DBD6502700591AEF8BA4DD();// 0x1a5fd078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2C06C66108DBD65027005726EF8BA4AC(out const byte InPosInTeam, bool InIsLastOne);// 0xd9122093a6652c82
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2C0516A108DBD6502700558CEF8BA482(out const byte InPosInTeam, bool InIsLastOne);// 0x21511078ea041
	void OnTeammatePlayerStateRepDelegate_2C0402BB08DBD650270052DAEF8BA43E();// 0x20a7d078ea041
	void OnGameStart_2BDDD96008DBD65026EF53A4EF89F11F();// 0x1a59407b6a001
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2BDC66C108DBD65026EF4EC2EF89F0A3(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff8d391720
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2BDB799B08DBD65026EF431EEF89EF78(out const byte InPosInTeam, bool InIsLastOne);// 0x417fff8c490ea000
	void OnTeammatePlayerStateRepDelegate_2BDAB16608DBD65026EF39B4EF89EE88();// 0x20c63078ea001
	void OnGameStart_2BD2F9BB08DBD65026E80C84EF8936CE();// 0xfffffffec5d4f8d0
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2BD1119E08DBD65026E808CEEF893670(out const byte InPosInTeam, bool InIsLastOne);// 0xd9122093a6652c82
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2BD0F2EF08DBD65026E8064EEF89362F(out const byte InPosInTeam, bool InIsLastOne);// 0x2500e07b6a008
	void OnTeammatePlayerStateRepDelegate_2BCFF2AC08DBD65026E7F5DCEF89348C();// 0xffffff8c078ea000
	void OnGameStart_2BC89EA008DBD65026DE39F2EF883B5A();// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2BC7829308DBD65026DE370EEF883B10(out const byte InPosInTeam, bool InIsLastOne);// 0x25f20078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2BC60F7E08DBD65026DE3470EF883ACD(out const byte InPosInTeam, bool InIsLastOne);// 0x22f6d07b6a008
	void OnTeammatePlayerStateRepDelegate_2BC5070F08DBD65026DE3056EF883A65();// 0xffffff8f078ea002
	void OnGameStart_2BC476BB08DBD65026DDF7DAEF8834BE();// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2BC31CE708DBD65026DDF438EF883461(out const byte InPosInTeam, bool InIsLastOne);// 0xfffffffec5d533e0
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2BC2C91608DBD65026DDF0B4EF883407(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8f078ea002
	void OnTeammatePlayerStateRepDelegate_2BC16B5108DBD65026DDEB3CEF88337C();// 0x243de07b6a008
	void OnGameStart_2B901F1B08DBD65026C81E92EF86056A();// 0xb43607b6a008
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2B8F727508DBD65026C81D5CEF86054A(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff993a3700
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2B8EAA3408DBD65026C81C26EF86052C(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8f078ea002
	void OnTeammatePlayerStateRepDelegate_2B8DDFC508DBD65026C81A14EF8604F8();// 0x2dffba07bda02e
	void OnGameStart_2B8C391508DBD65026C7F714EF860177();// 0x2fffbc07bda065
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2B8B4CE308DBD65026C7F5CAEF860155(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c078ea000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2B8A4AFF08DBD65026C7F476EF860133(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c078ea000
	void OnTeammatePlayerStateRepDelegate_2B8917A208DBD65026C7F1F6EF8600F4();// 0x24b3107b6a008
	void OnGameStart_2B87116108DBD65026C15AF8EF855840();// 0xffffff8f078ea002
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2B86891B08DBD65026C159B8EF855820(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff4ec06c60
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2B855A3608DBD65026C157BAEF8557ED(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8f078ea002
	void OnTeammatePlayerStateRepDelegate_2B84F2D808DBD65026C155BCEF8557BB();// 0x1526b07b6a008
	void OnGameStart_2B837E8F08DBD65026C13B7CEF85551B();// 0xffffff8f078ea002
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2B82643308DBD65026C13A50EF8554FC(out const byte InPosInTeam, bool InIsLastOne);// 0xa3ab078ea001
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2B81F10A08DBD65026C1394CEF8554E2(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c078ea000
	void OnTeammatePlayerStateRepDelegate_2B80633F08DBD65026C13744EF8554AF();// 0x98e107b6a001
	void OnGameStart_2B34556E08DBD65026AA7E28EF830EF8();// 0x2408094098ee108
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2B33B4E008DBD65026AA7CCAEF830ED5(out const byte InPosInTeam, bool InIsLastOne);// 0x1fe1607b6a001
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2B320FCE08DBD65026AA7B44EF830EAF(out const byte InPosInTeam, bool InIsLastOne);// 0x17b7807b6a008
	void OnTeammatePlayerStateRepDelegate_2B31740C08DBD65026AA79DCEF830E8B();// 0x1b3a9078ea001
	void OnGameStart_2B303F5308DBD65026AA61A4EF830C1E();// 0x2dffba07bda02e
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_2B2FC76208DBD65026AA600AEF830BF6(out const byte InPosInTeam, bool InIsLastOne);// 0x24a35078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_2B2EE88408DBD65026AA5ED4EF830BD6(out const byte InPosInTeam, bool InIsLastOne);// 0x24a34078ea041
	void OnTeammatePlayerStateRepDelegate_2B2D681108DBD65026AA5CCCEF830BA4();// 0x24a33078ea041
	void OnGameStart_1895AEF608DBD650256321AAEF625285();// 0x17ed2078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_1894F1DC08DBD65025631FDEEF625258(out const byte InPosInTeam, bool InIsLastOne);// 0x17ecc078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1893621808DBD65025631C64EF6251FF(out const byte InPosInTeam, bool InIsLastOne);// 0x17ec4078ea041
	void OnTeammatePlayerStateRepDelegate_18928F4308DBD650256319A8EF6251B9();// 0x37ffbd07bda065
	void OnGameStart_17D87AFA08DBD65025568EAEEF61109F();// 0x17863078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_17D751ED08DBD65025568D3CEF61107A(out const byte InPosInTeam, bool InIsLastOne);// 0x17862078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_17D6552F08DBD65025568C10EF61105C(out const byte InPosInTeam, bool InIsLastOne);// 0x17861078ea041
	void OnTeammatePlayerStateRepDelegate_17D5837D08DBD6502556897CEF61101C();// 0xff00a68c068f46ff
	void OnGameStart_17D2351C08DBD65025563422EF610791();// 0x1784e078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_17D1E6F108DBD650255632B0EF61076C(out const byte InPosInTeam, bool InIsLastOne);// 0x1784d078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_17D0623608DBD6502556315CEF61074A(out const byte InPosInTeam, bool InIsLastOne);// 0x2690f07b6a008
	void OnTeammatePlayerStateRepDelegate_17CF6E5408DBD65025562F36EF610714();// 0xfffffffef7df9560
	void OnGameStart_17B4B99608DBD65025560858EF610330();// 0x177f8078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_17B3C6C808DBD650255606A0EF610304(out const byte InPosInTeam, bool InIsLastOne);// 0x177f6078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_17B2F64E08DBD6502556051AEF6102DD(out const byte InPosInTeam, bool InIsLastOne);// 0x177f5078ea041
	void OnTeammatePlayerStateRepDelegate_17B1523E08DBD650255602D6EF6102A4();// 0xfffffffef5f7faa0
	void OnGameStart_17AB9F8608DBD65025549860EF60DE64();// 0x17768078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_17AA45FB08DBD650255496EEEF60DE40(out const byte InPosInTeam, bool InIsLastOne);// 0x17767078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_17A903BE08DBD65025549586EF60DE1B(out const byte InPosInTeam, bool InIsLastOne);// 0x17766078ea041
	void OnTeammatePlayerStateRepDelegate_17A835B808DBD6502554934CEF60DDE3();// 0xfffffffef7ded0d0
	void OnGameStart_17A7A3D808DBD65025546E94EF60DA37();// 0x1774f078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_17A6B65208DBD65025546CBEEF60DA08(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c078ea000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_17A534BD08DBD650255469E4EF60D9BF(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8c078ea000
	void OnTeammatePlayerStateRepDelegate_17A4B4F508DBD6502554667EEF60D969();// 0x10e4c07b6a008
	void OnGameStart_179C549808DBD650254EB5E4EF6047BF();// 0x78c6078fdf72
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_179BDC0508DBD650254EB36EEF604780(out const byte InPosInTeam, bool InIsLastOne);// 0x17504078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_179A944E08DBD650254EB0D0EF60473D(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRepDelegate_1799B2B108DBD650254EAEAAEF604706();// 0xffffffff950422c0
	void OnGameStart_179861F008DBD650254E8B3CEF60437A();// 0x2fffbd07bda065
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_17974DC008DBD650254E89ACEF604353(out const byte InPosInTeam, bool InIsLastOne);// 0x64ffff07f0a061
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_179669CD08DBD650254E8858EF604331(out const byte InPosInTeam, bool InIsLastOne);// 0x1c008c07a3a100
	void OnTeammatePlayerStateRepDelegate_1795A22308DBD650254E8556EF6042E5();// 0x16dbd07b6a000
	void OnGameStart_17944D6C08DBD650254E59A0EF603E84();// 0x129b7078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_179300FB08DBD650254E54B4EF603E07(out const byte InPosInTeam, bool InIsLastOne);// 0x16dc407b6a000
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1792EEE308DBD650254E5270EF603DCC(out const byte InPosInTeam, bool InIsLastOne);// 0xd9122093a6652c82
	void OnTeammatePlayerStateRepDelegate_1791561608DBD650254E4E88EF603D69();// 0x5078ea002
	void OnGameStart_1790E43208DBD650254E223CEF6038FA();// 0xffffff8c078ea001
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_178FF49C08DBD650254E1F26EF6038AB(out const byte InPosInTeam, bool InIsLastOne);// 0x1973007b6a001
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_178E55D808DBD650254E1CCEEF60386F(out const byte InPosInTeam, bool InIsLastOne);// 0x1372707b6a008
	void OnTeammatePlayerStateRepDelegate_178DA76E08DBD650254E17D8EF6037F2();// 0x13e0607b6a008
	void OnGameStart_178CDDD508DBD650254DC74CEF602FE3();// 0x78fffe0802a06e
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_178B8A9708DBD650254DC238EF602F60(out const byte InPosInTeam, bool InIsLastOne);// 0x8b6078ea002
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_178A218408DBD650254DC08AEF602F35(out const byte InPosInTeam, bool InIsLastOne);// 0x2dffba07bda02e
	void OnTeammatePlayerStateRepDelegate_1789949608DBD650254DBDA6EF602EED();// 0x68038c0976a003
	void OnGameStart_1788187408DBD650254D8642EF602962();// 0xffffff8f078ea002
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_178716AC08DBD650254D8458EF602930(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff4ebfa940
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_1786FD3708DBD650254D8282EF602901(out const byte InPosInTeam, bool InIsLastOne);// 0xffffff8f078ea002
	void OnTeammatePlayerStateRepDelegate_1785735408DBD650254D7F4EEF6028B0();// 0x884b078ea041
	void OnGameStart_17849E2B08DBD650254D06A4EF601C9E();// 0x27d11078ea000
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_178351ED08DBD650254D02D0EF601C3C(out const byte InPosInTeam, bool InIsLastOne);// 0x1b0f2078ea001
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_178219B908DBD650254D00D2EF601C0A(out const byte InPosInTeam, bool InIsLastOne);// 0xffffffff4dae9e40
	void OnTeammatePlayerStateRepDelegate_1781357208DBD650254CFC04EF601B90();// 0x1ae1d07b6a001
	void OnGameStart_1610141208DBD650249C6D3AEF4E73AE();// 0x12a2a078ea041
	void OnTeammatePlayerStateRemovedInBattlePhaseDelegate_160F35BF08DBD650249C6A24EF4E735F(out const byte InPosInTeam, bool InIsLastOne);// 0x129d7078ea041
	void OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate_160E6C5008DBD650249C67CCEF4E7323(out const byte InPosInTeam, bool InIsLastOne);// 0x1451007b6a008
	void OnTeammatePlayerStateRepDelegate_160D26C908DBD650249C63C6EF4E72BD();// 0x1307d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PlayerState_BattleRoyale_C.BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd70, Size: 0x8]
	BPC_BuyResurrection_C* BPC_BuyResurrection;//[Offset: 0xd78, Size: 0x8]
	SolarUserWidget* DeathUI;//[Offset: 0xd80, Size: 0x8]
	byte PlayerBattleState;//[Offset: 0xd88, Size: 0x1]
	delegate OnRequestReplied;//[Offset: 0xd90, Size: 0x10]
	int Intervened By AI;//[Offset: 0xda0, Size: 0x4]
	bool bFirstDive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda4, Size: 0x1]
	bool PlayerCanRebirthBlueprint(bool Temp_bool_Variable, bool Temp_bool_Variable, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_PlayerCanRebirthBlueprint_ReturnValue, bool CallFunc_IsPlayerReviving_ReturnValue, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, bool K2Node_Select_Default);// 0x10e8b07b6a001
	bool PlayerIsResurrecting();// 0x10eb807b6a001
	bool IsPlayerWaitingForTeammatesHelp(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x12ab2078ea041
	void GetItemData(int ItemID, out bool Valid, out int ID, out int Quality, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_ItemInBattle CallFunc_TryGetRowData_ReturnValue);// 0xffffffff0395c2a0
	static void GetPlayerChestOpen(out FString Output, FString[] OutputString, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] K2Node_MakeArray_Array, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_GetItemData_Valid, int CallFunc_GetItemData_ID, int CallFunc_GetItemData_Quality, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x77bf078fdd32
	void GetSinglePlayerItem(int ItemID, out bool HasItem, out int count, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByID_ItemData, bool CallFunc_GetBackpackItemDataByID_ReturnValue);// 0x10ec007b6a001
	void GetWeaponPartData(int ItemID, out bool Valid, out int ID, out int Quality, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_WeaponParts CallFunc_GetRowData_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x10ec107b6a001
	static void GetPlayerItems(out FString Output, FString[] OutputString, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int[] K2Node_MakeArray_Array, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetSinglePlayerItem_HasItem, int CallFunc_GetSinglePlayerItem_Count, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x10ec207b6a001
	void Get Player Accessories(out FString Output, FString[] OutputString, <IntPoint,int> Accessories, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, FString CallFunc_JoinStringArray_ReturnValue, int Temp_int_Variable, IntPoint[] CallFunc_Map_Keys_Keys, IntPoint CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_NotEqual_IntInt_ReturnValue, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_IsValid_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, WeaponPartsData CallFunc_GetWeaponParts_Parts, bool CallFunc_GetWeaponParts_ReturnValue, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_GetWeaponPartData_Valid, int CallFunc_GetWeaponPartData_ID, int CallFunc_GetWeaponPartData_Quality, int Temp_int_Variable, IntPoint K2Node_MakeStruct_IntPoint, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, IntPoint K2Node_MakeStruct_IntPoint, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, IntPoint K2Node_MakeStruct_IntPoint, IntPoint K2Node_MakeStruct_IntPoint, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x10ec307b6a001
	void Set Intervened By AI(int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue);// 0x10ec407b6a001
	void GetNearestPos(byte Index, Vector Nearest, float Distance, Vector CLocation, byte Temp_byte_Variable, class Actor Temp_class_Variable, class Actor Temp_class_Variable, class Actor Temp_class_Variable, class Actor K2Node_Select_Default, Actor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, Actor* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x10ec507b6a001
	void OnRep_PlayerBattleState(bool CallFunc_IsServer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x10ec607b6a001
	void [s]SetPlayerState(byte State);// 0x10ec707b6a001
	void ReceiveBeginPlay();// 0x10e9f07b6a001
	void Event_RespondReconnection();// 0x1250507b6a008
	void ResurrectionStateChange(enum NewState);// 0x10ec907b6a001
	void RequestNearestPos(byte Type);// 0x10eca07b6a001
	void OnNearestPosReceived(byte Type, Vector Pos);// 0x124fd07b6a008
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x10ea007b6a001
	void DelayAndBeginSpectate();// 0x10ecc07b6a001
	void ExecuteUbergraph_BP_PlayerState_BattleRoyale(int EntryPoint, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, bool CallFunc___A_BindOnBasicSystemReady_bReady, bool CallFunc_IsServer_ReturnValue, enum K2Node_CustomEvent_NewState, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_Type, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Pos, int K2Node_Event_GainedExp, int K2Node_Event_CurrentExp, int K2Node_Event_TotalExp, enum K2Node_Event_BehaviorType, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BeginSpectateOtherPlayer_ReturnValue);// 0x10ecd07b6a001
	void OnRequestReplied__DelegateSignature(byte Type, Vector Pos);// 0x12999078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PlayerState_Framework_C.SCMPlayerState.SolarPlayerState.PlayerState.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc38, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xc40, Size: 0x8]
	Vector[] DeathLocations;//[Offset: 0xc48, Size: 0x10]
	Vector[] LandLocations;//[Offset: 0xc58, Size: 0x10]
	int ResurrectTime;//[Offset: 0xc68, Size: 0x4]
	Vector ResurrectLocation;//[Offset: 0xc6c, Size: 0xc]
	class SolarUserWidget* ResurrectUI;//[Offset: 0xc78, Size: 0x28]
	S_ResurrectInfo ResurrectOptions;//[Offset: 0xca0, Size: 0x5]
	delegate OnResurrectionBegin;//[Offset: 0xca8, Size: 0x10]
	delegate OnResurrectionFinished;//[Offset: 0xcb8, Size: 0x10]
	UI_Resurrect_C* ResurrectUIObj;//[Offset: 0xcc8, Size: 0x8]
	byte ResurrectType;//[Offset: 0xcd0, Size: 0x1]
	bool bIsResurrecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd1, Size: 0x1]
	BP_Logic_Framework_C* Logic;//[Offset: 0xcd8, Size: 0x8]
	bool bShouldSettle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce0, Size: 0x1]
	UI_MapMark_ReviveTeammates_C*[] UI_MapMark_ReviveTeammatesArr;//[Offset: 0xce8, Size: 0x10]
	ActorMarkBase* DeathBoxMark;//[Offset: 0xcf8, Size: 0x8]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0xd00, Size: 0x8]
	TimerHandle LandedDetectionHandel;//[Offset: 0xd08, Size: 0x8]
	MapMarkBase*[] DeathBoxMiniMapMark;//[Offset: 0xd10, Size: 0x10]
	delegate OnResurrectTimeChange;//[Offset: 0xd20, Size: 0x10]
	int AiCompCd;//[Offset: 0xd30, Size: 0x4]
	ActorMarkBase* RebirthedDeathBoxMark;//[Offset: 0xd38, Size: 0x8]
	bool bIsReviveSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd40, Size: 0x1]
	BP_DBox_Default_C* DeathBoxRef;//[Offset: 0xd48, Size: 0x8]
	Vector DeathBoxLoc;//[Offset: 0xd50, Size: 0xc]
	byte CharacterHealthState;//[Offset: 0xd5c, Size: 0x1]
	enum ResurrectMethod;//[Offset: 0xd5d, Size: 0x1]
	Vector TempDeathBoxLoc;//[Offset: 0xd60, Size: 0xc]
	int ResurrectTimeCfg;//[Offset: 0xd6c, Size: 0x4]
	void ReceiveEndPlay(byte EndPlayReason);// 0xba0107b6a008
	int LuaGetExpFromWeaponImplementation(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage);// 0x13079078ea041
	int GetWeaponSettlmentExp(int weaponid);// 0x12a34078ea041
	int CalculateZomborg();// 0x2dffba07bda02e
	void ReceiveClientInitialize(Controller* C);// 0xffffffff021e3fc0
	float CalculateCharacterExp();// 0x13074078ea041
	void ReceiveSideReplicatedAfter();// 0x13076078ea041
	float CalculateAccountExp();// 0x13073078ea041
	void OnRep_UserId();// 0x13e0307b6a008
	int GetExpAddValueFromItem(int ItemID);// 0x12a3d078ea041
	void NotifyUpdateTeamMateLevelUI();// 0xffffffff8cfdf000
	void ReceiveTalentStateSet(enum InState);// 0x13067078ea041
	void OnRep_RTCType();// 0x12a3f078ea041
	void OnReceiveExposedLocation(SolarPlayerState* OtherPS, out const Vector Location);// 0x129d2078ea041
	void OnStopReceiveExposedLocation(SolarPlayerState* OtherPS);// 0x1306e078ea041
	void OnRep_BattleVoiceId();// 0x1207b07b6a008
	float GetExpSettleModePunishRatio();// 0x2dffba07bda02e
	void ReceiveTeamIdReplicated(bool bRelatedToSelf);// 0x27b0c07b6a008
	void ReceivePostInitializeComponents();// 0x1306d078ea041
	void OnResurrectTimeChangedCopy(int ResurrectTime, int Cfg_ResurrectTime);// 0x1ad4607b6a001
	void OnRep_TeammatesState();// 0xffffff8c078e9fff
	FString GetModuleName();// 0x10e8707b6a001
	void OnResurrectTimeChanged(int ResurrectTime, int Cfg_ResurrectTime);// 0x10e8807b6a001
	void GetResurrectLocation(out Vector Location);// 0x10e8907b6a001
	void Remove All Revive Mark(SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x10e8a07b6a001
	Vector GetDeathBoxLocation(BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetDeathBoxLoc_ReturnValue);// 0x10e8c07b6a001
	bool PlayerCanRebirthBlueprint(CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess);// 0x10e8d07b6a001
	void OnRep_CharacterHealthState(GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess);// 0xffffffffc8915680
	void Handling Is Resurrecting(bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue);// 0x10e8f07b6a001
	static void GetSpecialHitTypeArray(out int[] NewParam, byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int[] K2Node_MakeArray_Array);// 0x10e9007b6a001
	void Set Death Box Ref(BP_DBox_Default_C* InDeathBox, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x10e9107b6a001
	void OnRep_bIsReviveSkydiving(bool CallFunc_IsServer_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2fad0be0
	void Remove Punctuation(bool bKeepRebornLine, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x10e9307b6a001
	static int GetExpByBehavior(enum InBehaviorType, int InParamOne, int InParamTwo, float InDamage, int Multiplier, int ID, byte CallFunc_MakeLiteralByte_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, int[] CallFunc_GetSpecialHitTypeArray_NewParam, bool CallFunc_Array_Contains_ReturnValue, int Temp_int_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_Variable, int K2Node_Select_Default, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, const SolarTablesData_Behavior CallFunc_GetRowData_ReturnValue, const SolarTablesData_EscapeExp CallFunc_GetRowData_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, bool CallFunc_HasRowKey_ReturnValue, const SolarTablesData_ItemBehavior CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue);// 0x10e9407b6a001
	void IsAiCompCdClear(out bool Result, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x10e9507b6a001
	void OnRep_bIsResurrecting();// 0x10e9607b6a001
	static void Create Punctuation(Vector InputPin, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, UI_WorldMark_ReviveTeammates_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates, bool K2Node_DynamicCast_bSuccess, Transform CallFunc_Conv_VectorToTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SI_RebornLine_C* CallFunc_FinishSpawningActor_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x10e9707b6a001
	void GetLogicBase(out BP_Logic_Framework_C* Output_Get, bool CallFunc_IsValid_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess);// 0x10e9807b6a001
	void OnRep_ResurrectTime(bool CallFunc_IsServer_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x10e9907b6a001
	void Death Cleanup UI(PlayerController* CallFunc_GetPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue);// 0x10e9a07b6a001
	void Get Resurrect UI(out UI_Resurrect_C* Output_Get, UserWidget* CallFunc_CreateSolarWidget_ReturnValue, UI_Resurrect_C* K2Node_DynamicCast_AsUI_Resurrect, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess, UI_Resurrect_C* CallFunc_GetResurrectByItemUI_Output_Get);// 0x10e9b07b6a001
	void GetLastDeathLocation(out Vector Output, int CallFunc_Array_LastIndex_ReturnValue, Vector CallFunc_Array_Get_Item);// 0x10e9c07b6a001
	void OnCharacterLanded();// 0x10e9d07b6a001
	void OnPlayerInteract(byte InteractType);// 0x10e9e07b6a001
	void ReceiveBeginPlay();// 0x10ea107b6a001
	void OnCharacterEjectStateChanged(byte State, SolarCharacter* TargetCharacter);// 0x10ea207b6a001
	void OnTimeCut();// 0x10ea307b6a001
	void [s]RequestResurrectInTime(int Time, byte Type, Vector Location, S_ResurrectInfo options, bool bUseParamZ);// 0x10ea407b6a001
	void [c]ShowResurrectUI(int Time, byte Type);// 0x10ea507b6a001
	void DropPickableItem(Object* Item);// 0x10ea607b6a001
	void PickupPickableItem(Object* Item);// 0x10ea707b6a001
	void Event_CreateDeathBoxMark();// 0x10ea807b6a001
	void Event_OnResEnd(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x10ea907b6a001
	void AiCompCountDown();// 0x10eaa07b6a001
	void ResetAiCompTimer(int Time);// 0x10eab07b6a001
	void OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum BehaviorType);// 0x10eac07b6a001
	void [C]OnPlayerGainExperience(int GainedExp, int CurrentExp, int TotalExp, enum Type);// 0x10ead07b6a001
	void Event_EnterSkydiveFly();// 0x10eae07b6a001
	void OnInteractBtnHit(Object* Publisher, Object* Payload, out const FString[] MetaData);// 0x10eaf07b6a001
	void [S] Request Actor Removal(Actor* Target Actor);// 0x1299a078ea041
	void OnOtherPlayerStopSpectateMyTeam(SolarSpectateInfo* InSpectateInfo);// 0x10eb107b6a001
	void ExecuteUbergraph_BP_PlayerState_Framework(int EntryPoint, int Temp_int_Variable, bool Temp_bool_Variable, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, UI_WorldMark_ReviveTeammatesDeathbox_C* K2Node_DynamicCast_AsUI_World_Mark_Revive_Teammates_Deathbox, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameManagerBase* CallFunc_GetGameManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameReviveItemManager* K2Node_DynamicCast_AsGame_Revive_Item_Manager, bool K2Node_DynamicCast_bSuccess, GameManagerBase* CallFunc_GetGameManager_ReturnValue, byte K2Node_CustomEvent_InteractType, BP_ReviveItemManger_0_C* K2Node_DynamicCast_AsBP_Revive_Item_Manger, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, int Temp_int_Variable, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_Array_Add_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Location, S_ResurrectInfo K2Node_CustomEvent_Options, bool K2Node_CustomEvent_bUseParamZ, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_NotEqual_ByteByte_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Vector K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int K2Node_Select_Default, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, int CallFunc_Add_IntInt_ReturnValue, UI_Resurrect_C* CallFunc_Get_Resurrect_UI_Output_Get, interface classNone K2Node_DynamicCast_AsI_Resurrect, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsLocalPlayerCameraFocusingMe_ReturnValue, int Temp_int_Variable, Object* K2Node_CustomEvent_Item, Object* K2Node_CustomEvent_Item, interface classNone K2Node_DynamicCast_AsI_Pickable_Item, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsI_Pickable_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsServer_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, int Temp_int_Variable, byte K2Node_CustomEvent_ResurrectType, BP_PlayerState_Framework_C* K2Node_CustomEvent_TargetPlayer, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsServer_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_CustomEvent_Time, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int K2Node_Event_GainedExp, int K2Node_Event_CurrentExp, int K2Node_Event_TotalExp, enum K2Node_Event_BehaviorType, int K2Node_CustomEvent_GainedExp, int K2Node_CustomEvent_CurrentExp, int K2Node_CustomEvent_TotalExp, enum K2Node_CustomEvent_Type, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Object* K2Node_CustomEvent_Publisher, Object* K2Node_CustomEvent_Payload, const FString[] K2Node_CustomEvent_Metadata, int Temp_int_Variable, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, Actor* K2Node_CustomEvent_Target_Actor, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, enum CallFunc_GetBuildConfiguration_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Vector CallFunc_GetDeathBoxLoc_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_SI_RebornLine_C* CallFunc_FinishSpawningActor_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, SolarSpectateInfo* K2Node_Event_InSpectateInfo, Vector CallFunc_GetResurrectLocation_Location, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_ResurrectCharacter_ReturnValue, int Temp_int_Variable, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, SingleCruiseBaseParam CallFunc_GenSingleCruiseParam_ReturnValue, SolarPlayerState* CallFunc_GetLocalPlayerState_ReturnValue, bool CallFunc_IsSpectatingOtherPlayer_ReturnValue, SolarCharacter* CallFunc___C_Get_Viewport_Focused_Character_Character, enum K2Node_Select_Default, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromCharacter_ReturnValue, int Temp_int_Variable, enum Temp_byte_Variable, int K2Node_Select_Default, const SolarTablesData_QuickVoice CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue);// 0x10e7107b6a008
	void OnResurrectTimeChange__DelegateSignature(int Time);// 0x10ed007b6a001
	void OnResurrectionFinished__DelegateSignature(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x10ed107b6a001
	void OnResurrectionBegin__DelegateSignature(int Time, byte Type, Vector Location, S_ResurrectInfo options);// 0xd9122093a6652c82
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_ReviveItemManger_BattleRoyale_C.BP_ReviveItemManger_0_C.GameReviveItemManager.GameManagerBase.Info.Actor.Object
	int PointError;//[Offset: 0x360, Size: 0x4]
	float R;//[Offset: 0x364, Size: 0x4]
	float X;//[Offset: 0x368, Size: 0x4]
	float Y;//[Offset: 0x36c, Size: 0x4]
	Vector LeftUp;//[Offset: 0x370, Size: 0xc]
	Vector RightDown;//[Offset: 0x37c, Size: 0xc]
	void GetSingleCruiseEndCenter(Vector DeathBoxLocation, out Vector Location, float Local_Length, Vector Local_CurFlyCriclePoint, float Local_Distance, Vector Local_SelfLocation, Vector Local_CircleLocation, float Local_CircleRadius, bool CallFunc_Less_FloatFloat_ReturnValue, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_GetCurrentSafeAreaRadius_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Vector_Distance2D_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D[] K2Node_MakeArray_Array, Vector2D CallFunc___S_Get_Point_On_Line_TargetPoint, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x1291107b6a001
	static void RevivePlayer(SolarCharacter* None, out const Transform None, out bool bool, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, int CallFunc_FTrunc_ReturnValue, Vector CallFunc____________, float CallFunc________Z, bool CallFunc_____________, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, Vector CallFunc_GetSingleCruiseEndCenter_Location, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo);// 0x1105307b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_ReviveItemManger_0_C.GameReviveItemManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x278, Size: 0x8]
	int ReviveItem;//[Offset: 0x280, Size: 0x4]
	<SolarPlayerState*,int> Player_ReviveTimes;//[Offset: 0x288, Size: 0x50]
	int AdvanceNoticeTime;//[Offset: 0x2d8, Size: 0x4]
	F_ReviveItemData[] ReviveItemData;//[Offset: 0x2e0, Size: 0x10]
	bool ClearItemNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool AdvanceNotice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]
	int CurTime;//[Offset: 0x2f4, Size: 0x4]
	bool bCanReviveImmediatelyWhenDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 0x1]
	int ReviveDisableCountDown;//[Offset: 0x2fc, Size: 0x4]
	int ReviveStartRecycleTime;//[Offset: 0x300, Size: 0x4]
	<byte,FString> NoticeSound;//[Offset: 0x308, Size: 0x50]
	UI_Resurrect_C* ResurrectByItemUI;//[Offset: 0x358, Size: 0x8]
	void GetResurrectByItemUI(out UI_Resurrect_C* Output_Get, UserWidget* CallFunc_CreateSolarWidget_ReturnValue, UI_Resurrect_C* K2Node_DynamicCast_AsUI_Resurrect, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x110ae07b6a00b
	void SetPlayerReviveData(SolarPlayerState* Player, F_ReviveItemData Data, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, F_ReviveItemData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x110ad07b6a00b
	void GetPlayerReviveData(SolarPlayerState* Player, out F_ReviveItemData Data, out bool bFind, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, F_ReviveItemData CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x1113307b6a001
	void RemovePlayerFromRevivingPlayerArr(out const SolarPlayerState* Player, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x1110407b6a001
	void AddPlayerIntoRevivingPlayerArr(out const SolarPlayerState* Player, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x12161079122c6
	void OnRep_AdvanceNotice(bool CallFunc_IsServer_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x1109207b6a001
	void OnRep_ClearItemNotice();// 0x1109307b6a001
	static bool [ S]Try to Revive Player with Item(SolarPlayerState* Player, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, FString CallFunc_Conv_IntToString_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsPlayerReviving_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, bool CallFunc_RevivePlayer_Bool, FString CallFunc_Vector2String_Str, bool CallFunc_PlayerTryUseReviveItem_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_CanPlayerUseReviveItem_ReturnValue);// 0x1109407b6a001
	void Set Player Use Revive Item Times(SolarPlayerState* Player, bool Local_Find, F_ReviveItemData CallFunc_GetPlayerReviveData_Data, bool CallFunc_GetPlayerReviveData_bFind, F_ReviveItemData K2Node_MakeStruct_F_ReviveItemData, int CallFunc_Add_IntInt_ReturnValue, F_ReviveItemData K2Node_MakeStruct_F_ReviveItemData);// 0x1109507b6a001
	void [ A]Get Player Use Revive Item Times(SolarPlayerState* Player, out int Value, int Local_Times, bool Local_Find, F_ReviveItemData CallFunc_GetPlayerReviveData_Data, bool CallFunc_GetPlayerReviveData_bFind);// 0x1109607b6a001
	bool CanPlayerUseReviveItem(const SolarPlayerState* InPlayerState, bool bCheckItemNum, int CallFunc_GetMaxReviveUsage_ReturnValue, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetPlayerReviveItemNum_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, bool CallFunc_IsOutBySelf_ReturnValue, bool CallFunc_IsPlayerOffline_ReturnValue, int CallFunc_GetMaxReviveUsage_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1109707b6a001
	bool CanGlobalUseReviveItem(bool CallFunc_CanGlobalUseReviveItem_ReturnValue);// 0x1109807b6a001
	void RevivePlayer(SolarCharacter* None, out const Transform None, out bool bool, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, int CallFunc_FTrunc_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x1109907b6a001
	void ReceiveBeginPlay();// 0x1109a07b6a001
	void Event_ClearRevive();// 0x1109b07b6a001
	void OnPlayerResurrected(byte ResurrectType, BP_PlayerState_Framework_C* TargetPlayer);// 0x1109c07b6a001
	void Event_ClearReviveNotifyInAdvance();// 0x1109d07b6a001
	void Event_InitReviveItem();// 0x1109e07b6a001
	void UpdateTime();// 0x1109f07b6a001
	void DownReviveImmediately(SolarPlayerState* Player);// 0x110a007b6a001
	void OnPlayerHealthStateChanged(BP_PlayerState_Framework_C* InPlayerState, byte NewState);// 0x110a107b6a001
	void ReviveDisableNotice(int Time);// 0x110a207b6a001
	void Event_PlayerReconnect(SCMPlayerState* Player);// 0x2fa62940
	void OnStartReviveItemRecycleCountDownDataRequested();// 0xa52d078ea041
	void OnSpecTargetChanged_Event(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x110ab07b6a001
	void ExecuteUbergraph_BP_ReviveItemManger(int EntryPoint, bool Temp_bool_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, const byte[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_IsClosed_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const FString[] Temp_string_Variable, byte Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Has_Been_Initd_Variable, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool Temp_bool_IsClosed_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_IsClosed_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, const byte[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const byte[] Temp_byte_Variable, const FString[] Temp_string_Variable, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_GetPlayerReviveItemNum_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_ClearBackpackItem_ReturnValue, byte K2Node_CustomEvent_ResurrectType, BP_PlayerState_Framework_C* K2Node_CustomEvent_TargetPlayer, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetReviveItemRepoTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, const FString[] Temp_string_Variable, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, SolarPlayerState* K2Node_CustomEvent_Player, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_PlayerState_Framework_C* K2Node_CustomEvent_InPlayerState, byte K2Node_CustomEvent_NewState, bool Temp_bool_Has_Been_Initd_Variable, bool K2Node_Select_Default, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetReviveItemRepoTime_ReturnValue, int CallFunc_FTrunc_ReturnValue, int K2Node_CustomEvent_Time, bool CallFunc_LessEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Round_ReturnValue, const enum[] Temp_byte_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const byte Temp_byte_Variable, const byte Temp_byte_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue, SCMPlayerState* K2Node_CustomEvent_Player, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue, SolarPlayerState* K2Node_CustomEvent_OldTarget, SolarPlayerState* K2Node_CustomEvent_NewTarget, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, UI_Resurrect_C* CallFunc_GetResurrectByItemUI_Output_Get, bool CallFunc_IsValid_ReturnValue, const byte Temp_byte_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_PlaySound2Dbyname_ReturnValue);// 0x21aff07b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameReviveItemManager.GameManagerBase.Info.Actor.Object
	int MaxReviveUsage;//[Offset: 0x228, Size: 0x4]
	float ReviveItemRepoTime;//[Offset: 0x22c, Size: 0x4]
	float ReviveProximityRadius;//[Offset: 0x230, Size: 0x4]
	float ReviveHeight;//[Offset: 0x234, Size: 0x4]
	float ReviveWaitTime;//[Offset: 0x238, Size: 0x4]
	bool bGlobalUseRevieItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	float DownedReviveButtonDelayTime;//[Offset: 0x240, Size: 0x4]
	float MinReviveRadius;//[Offset: 0x244, Size: 0x4]
	float MaxReviveRadius;//[Offset: 0x248, Size: 0x4]
	Vector SingleCruiseDirection;//[Offset: 0x24c, Size: 0xc]
	float CapsuleAirlineTotalTime;//[Offset: 0x258, Size: 0x4]
	float CapsuleAirlineTotalDistance;//[Offset: 0x25c, Size: 0x4]
	float CapsuleExtendRadius;//[Offset: 0x260, Size: 0x4]
	float CapsuleExtendHalfheight;//[Offset: 0x264, Size: 0x4]
	SolarPlayerState*[] InRevivingPlayerState;//[Offset: 0x268, Size: 0x10]
	bool TryToRevivePlayerWithItem(const SolarPlayerState* InPlayerState);// 0x47ea078ea041
	void SetMaxReviveUsage(const int InUsage);// 0x47e9078ea041
	void SetGlobalUseReviveItem(const bool InCanUseItem);// 0x47e8078ea041
	bool PlayerTryUseReviveItem(SolarPlayerState* InPlayerState, const int InUseNum);// 0x47e7078ea041
	void OnTeammateReviveManagerRefresh();// 0x47e6078ea041
	void OnStartReviveItemRecycleCountDownDataRequested();// 0x47e5078ea041
	void OnRep_MaxUseage();// 0x47e4078ea041
	void OnRep_GlobalUseRevieItem();// 0x47e3078ea041
	bool IsPlayerReviving(const SolarPlayerState* InPlayerState);// 0x47e2078ea041
	float GetReviveWaitTime();// 0x47e1078ea041
	float GetReviveProximityRadius();// 0x47e0078ea041
	float GetReviveItemRepoTime();// 0x47df078ea041
	int GetReviveItemID();// 0x47de078ea041
	float GetReviveHeight();// 0x47dd078ea041
	int GetPlayerReviveItemNum(const SolarPlayerState* InPlayerState);// 0x47dc078ea041
	int GetMaxReviveUsage();// 0x47db078ea041
	float GetDownedReviveButtonDelayTime();// 0x47da078ea041
	SingleCruiseBaseParam GenSingleCruiseParam(Vector DeathLocation);// 0x47d9078ea041
	void ClearAllPlayersReviveItem();// 0x47d8078ea041
	bool CanPlayerUseReviveItem(const SolarPlayerState* InPlayerState, bool bCheckItemNum);// 0x47d7078ea041
	bool CanGlobalUseReviveItem();// 0x47d6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: F_ReviveItemData
	FString PlayerID_3_454127FA49A9E9B7DFC44B8255034BF1;//[Offset: 0x0, Size: 0x10]
	int Times_5_60AE18DB4EC5A089DB2C648682EFCFC5;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	float TimeOutSeconds;//[Offset: 0xcc, Size: 0x4]
	bool bUseNewAiComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	delegate OnConfigInitiated;//[Offset: 0x138, Size: 0x10]
	delegate OnBattleStart;//[Offset: 0x148, Size: 0x10]
	delegate OnPlayerOut;//[Offset: 0x158, Size: 0x10]
	delegate OnPlayerReconnected;//[Offset: 0x168, Size: 0x10]
	void UpdateAliveTeamsAndPlayers();// 0x45d8078ea041
	void ReceiveSpectatorJoinData(SCMPlayerState* Player);// 0x45d7078ea041
	void ReceiveServerLevelLoaded(FString LevelName);// 0x45d6078ea041
	bool ReceivePlayerTeamPreJoinRequest(out const SCMPlayerState*[] PreJoinPlayers, int TeamID);// 0x45d5078ea041
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x45d4078ea041
	void ReceivePlayerReJoin(SCMPlayerState* NewPlayer);// 0x45d3078ea041
	void ReceivePlayerPreLogin(FString PlayerId, SCMPlayerState* OfflinePlayer, out FString ErrorMsg);// 0x45d2078ea041
	void ReceivePlayerNonSpectatorJoinData(SCMPlayerState* Player);// 0x45d1078ea041
	void ReceivePlayerLevelLoaded(SCMPlayerController* Player, FString LevelName);// 0x45d0078ea041
	void ReceivePlayerJoinData(FString PlayerId);// 0x45cf078ea041
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x45ce078ea041
	void ReceivePlayerJoin(SCMPlayerState* NewPlayer, bool IsAI);// 0x45cd078ea041
	void ReceivePlayerCancelJoin(FString PlayerId);// 0x45cc078ea041
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x45cb078ea041
	void ReceiveOBPlayersChanged();// 0x45ca078ea041
	void ReceiveGameModeInit();// 0x45c9078ea041
	void ReceiveBattleTick(float BattleTime, float DeltaTime);// 0x45c8078ea041
	void ReceiveBattleEnd();// 0x45c7078ea041
	void ReceiveBattleBegin();// 0x45c6078ea041
	void OnStartBattle();// 0x45c5078ea041
	void OnPlayerSettled(SCMPlayerState* Player);// 0x45c4078ea041
	void OnPlayerReconnect(SCMPlayerState* Player);// 0x45c3078ea041
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x45c2078ea041
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x45c1078ea041
	void OnPlayerDisconnect(SCMPlayerState* OfflinePlayer);// 0x45c0078ea041
	void OnPlayerCheat(SCMPlayerState* CheatPlayer);// 0x45bf078ea041
	void OnPlayerAbnormal(SCMPlayerState* CheatPlayer);// 0x45be078ea041
	void OnMatchEnd(const int RPCID);// 0x45bd078ea041
	void OnDSClose();// 0x45bc078ea041
	void OnBotAIDataReady(int AICount);// 0x45bb078ea041
	bool IsAllowReconnectGame(SCMPlayerState* InPC);// 0x45ba078ea041
	void CallOnPlayerReconnected(SCMPlayerState* InPlayerState);// 0x45b9078ea041
	void CallOnPlayerOut(SCMPlayerState* InPlayerState);// 0x45b8078ea041
	void CallOnConfigInitiated();// 0x45b7078ea041
	void CallOnBattleStart();// 0x45b6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMPlayerController.SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	SCMPlayerRPCComponent* RpcComponent;//[Offset: 0xed0, Size: 0x8]
	void ServerHandlePlayerLevelLoaded(FString LevelName);// 0x4c1f078ea041
	void RequestUpdataDataManager();// 0x4c1e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMPlayerRPCComponent.ActorComponent.Object
	void ReceivedLevelLoaded(FString LevelName);// 0x4c22078ea041
	void ReceivedCharacter();// 0x4c21078ea041
	void ReceivedBeginLevelLoad(FString LevelName);// 0x4c20078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Logic_BattleRoyale_C.BP_Logic_Framework_C.CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1b0, Size: 0x8]
	int WaitTime;//[Offset: 0x1b8, Size: 0x4]
	PlayerStart*[] WaitinglandStart;//[Offset: 0x1c0, Size: 0x10]
	BP_GameState_BattleRoyale_C* GameState;//[Offset: 0x1d0, Size: 0x8]
	delegate OnGoInToBattleState;//[Offset: 0x1d8, Size: 0x10]
	bool bWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	SolarTablesData_WarmGameMode WarmGameInfo;//[Offset: 0x1f0, Size: 0x68]
	DataTable* BattleTimeline;//[Offset: 0x258, Size: 0x8]
	<int,S_EventList_BattleRoyal> EventList;//[Offset: 0x260, Size: 0x50]
	BP_MapInfoComponent_C* MapInfo;//[Offset: 0x2b0, Size: 0x8]
	int ShrinkIndex;//[Offset: 0x2b8, Size: 0x4]
	BP_BattleRoylePoisonCircle_C* PoisonCircle;//[Offset: 0x2c0, Size: 0x8]
	BP_SolarBombingManager_C* BoomingManager;//[Offset: 0x2c8, Size: 0x8]
	byte ModeBattleState;//[Offset: 0x2d0, Size: 0x1]
	Vector[] AirDropPosHistoryRecord;//[Offset: 0x2d8, Size: 0x10]
	int AiLevel;//[Offset: 0x2e8, Size: 0x4]
	int DSTime;//[Offset: 0x2ec, Size: 0x4]
	<byte,bool> ModeEventValid;//[Offset: 0x2f0, Size: 0x50]
	int TotalPlayer;//[Offset: 0x340, Size: 0x4]
	BP_ReviveItemManger_BattleRoyale_C* ReviveManager;//[Offset: 0x348, Size: 0x8]
	BP_Formula_BattleRoyale_C* BR Formula Manager;//[Offset: 0x350, Size: 0x8]
	int TeamMemberCount;//[Offset: 0x358, Size: 0x4]
	BehaviorTree* BotBehaviorTree;//[Offset: 0x360, Size: 0x8]
	SCMPlayerState*[] PlayersQuitOnWaitingLand;//[Offset: 0x368, Size: 0x10]
	int PlayerCountMax;//[Offset: 0x378, Size: 0x4]
	bool bCanSpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	class BP_BattleRoylePoisonCircle_C* PoisonCircleClass;//[Offset: 0x380, Size: 0x8]
	class SolarBotAIController* AIController;//[Offset: 0x388, Size: 0x8]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x390, Size: 0x8]
	float[] RadiusArr;//[Offset: 0x398, Size: 0x10]
	int AILevelMax;//[Offset: 0x3a8, Size: 0x4]
	delegate BattleStateChanged;//[Offset: 0x3b0, Size: 0x10]
	int PlayerCountBattleStart;//[Offset: 0x3c0, Size: 0x4]
	int ChestSpawnerID;//[Offset: 0x3c4, Size: 0x4]
	BPC_AiManagerBattleRoyale_C* AiManager;//[Offset: 0x3c8, Size: 0x8]
	class GameplayAbility* CelebrateWinnerGAClass;//[Offset: 0x3d0, Size: 0x8]
	void GetPlayerDataTraceByPlayer(BP_PlayerState_BattleRoyale_C* InPlayerState, out <FString,FString> Map, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetPlayerItems_Output, FString CallFunc_Get_Player_Accessories_Output, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_GetCharacterLocation_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, <FString,FString> K2Node_MakeMap_Map);// 0x1104a07b6a001
	void HandleWinnerTeamPostSlomo(SolarTeamInfo* WinnerTeam);// 0x1104b07b6a001
	void HandleWinnerTeamPreSlomo(SolarTeamInfo* WinnerTeam, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, SolarPlayerState* CallFunc_Array_Get_Item, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, GameplayAbilitySpecHandle CallFunc_K2_GiveAbility_ReturnValue);// 0x1104c07b6a001
	void PresettleAll(int TeamRank, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue);// 0x1103007b6a001
	void DealTeammateAISettle(SolarPlayerState* Player, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, FString CallFunc_Conv_TextToString_ReturnValue, const byte[] K2Node_MakeArray_Array, bool CallFunc_SetDataBool_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x1104d07b6a001
	void Custom Room Start(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x1108a07b6a001
	void SendItemToPlayer(SolarPlayerState* Player, out const <int,int> ItemMap, FString NewLocalVar, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_GetDisplayName_ReturnValue, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Left_ReturnValue, enum CallFunc_AddBackpackItem_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1104e07b6a001
	static void GetVehicleDataTrace(out const <FString,FString> Map, int NewLocalVar, <int,int> VehicleData, FString[] CarNum, int Temp_int_Array_Index_Variable, SolarVehicleSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, Actor*[] CallFunc_GetActiveVehicleList_OutActiveVehicles, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, Actor* CallFunc_Array_Get_Item, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, SolarVehiclePawn* K2Node_DynamicCast_AsSolar_Vehicle_Pawn, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int CallFunc_GetVehicleTypeID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, class Actor CallFunc_GetObjectClass_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, Actor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, FString CallFunc_JoinStringArray_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int[] CallFunc_Map_Keys_Keys, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1104f07b6a001
	static void Init Poison Circle(out BP_MapInfoComponent_C* MapInfo, bool CallFunc_IsValid_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, Vector CallFunc_Get_Safe_Area_Center_Pos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool Temp_bool_Variable, Vector CallFunc_MakeVector_ReturnValue, Transform CallFunc_Conv_VectorToTransform_ReturnValue, int CallFunc__S_GetMapIDByName_MapID, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_BattleRoylePoisonCircle_C* CallFunc_FinishSpawningActor_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector K2Node_Select_Default);// 0x1105007b6a001
	void GetAiManager(out BPC_AiManagerBattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0x1105107b6a001
	void SetSkillStateByBattleState(byte Temp_byte_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, S_SkillState Temp_struct_Variable, bool K2Node_SwitchEnum_CmpSuccess, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, S_SkillState K2Node_Select_Default, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x1105207b6a001
	int Get Shrink Index(bool Temp_bool_Variable, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, int CallFunc_Get_Safe_Area_Centers_Len_Len, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int K2Node_Select_Default);// 0x1101507b6a001
	void TryPushBattleState(byte TargetState, bool ForcePush, byte StateOld, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc__A_GetBattleTime_Time, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, bool CallFunc_BooleanAND_ReturnValue, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc__A_GetDSTime_Time, int CallFunc_Get_Current_Player_Count_Result, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool Temp_bool_Variable, byte Temp_byte_Variable, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Greater_ByteByte_ReturnValue);// 0x2dffba07bda02e
	static void GetWeaponID(int ItemID, out int weaponid, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, const SolarTablesData_GunProperty CallFunc_GetRowData_ReturnValue, bool CallFunc_HasRowKey_ReturnValue);// 0x1105507b6a001
	static void VehicleDataTrace(<FString,FString> CallFunc_GetVehicleDataTrace_Map);// 0x1105607b6a001
	static void GetPlayerDataTrace(BP_PlayerState_BattleRoyale_C* Player, out <FString,FString> Map, int CallFunc_GetPlayerStatisticData_OutValue, int CallFunc_GetPlayerStatisticData_OutValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_GetPlayerItems_Output, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Get_Player_Accessories_Output, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, int CallFunc_GetCharacterID_CharacterID, int CallFunc_GetCharacterID_SkinID, int CallFunc_GetCharacterID_ColorID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocationInSafeArea_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, int CallFunc_Clamp_ReturnValue, SolarItemData CallFunc_GetBackpackItemDataByType_ItemData, bool CallFunc_GetBackpackItemDataByType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetWeaponID_WeaponID, Vector CallFunc_GetCharacterLocation_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, <FString,FString> K2Node_MakeMap_Map);// 0x1105707b6a001
	static void KickOutExcessAI(BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_DeleteAIFromBattleForPlayer_ReturnValue, int K2Node_Copy_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Greater_IntInt_ReturnValue);// 0x1105807b6a001
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg, bool Temp_bool_Variable, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, FString Temp_string_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, FString Temp_string_Variable, FString K2Node_Select_Default);// 0x1105907b6a001
	void GetAiLevel(SolarPlayerState* Target, out int DefaultDifficultyLevel, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1105a07b6a001
	void Get Config(out CFG_BattleRoyale_C* CFG, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x1105b07b6a001
	static void DataTrace(const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const enum[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarPlayerState*[] K2Node_MakeArray_Array);// 0x1105c07b6a001
	void UpdatePlayerData(SolarPlayerState* Target, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_SetDataByte_ReturnValue);// 0x1105d07b6a001
	void PreSettleDeal(SCMPlayerState* Player, enum OutType, bool Lamster, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool CallFunc_QuitImmediately_SendToSettle, bool CallFunc_IsLamster_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_UpdateTeamData_bAced, bool CallFunc_HasBeenEliminated_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_BoolToString_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, SCMPlayerState*[] K2Node_MakeArray_Array, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool K2Node_Select_Default, byte K2Node_Select_Default);// 0x1105e07b6a001
	void Will Master Leaving Disband Room(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1105f07b6a001
	void Is Master Disbanding Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1106007b6a001
	void Is Kick Out Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1106107b6a001
	void Is Side Switch Legal(out bool Result, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1106207b6a001
	void BuyResurrectionDeal(PlayerState* Player, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1106307b6a001
	static void UpdateWinnerData(FString Team, const byte[] Temp_byte_Variable, bool CallFunc_SetDataBool_ReturnValue, bool CallFunc_SetDataBool_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, bool CallFunc_SetDataByte_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_SetDataInt_ReturnValue);// 0x1106407b6a001
	bool IsLamster(SCMPlayerState* Player, enum Index, bool Temp_bool_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0x1106507b6a001
	bool CanPlayerBattle(SCMPlayerState* Player, byte State, bool IsBot, bool CanRevive, bool Alive, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue);// 0x1106607b6a001
	static void UpdateTeamData(FString Team, out bool bAced, SolarTeamInfo* LocalTeam, bool Aced, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, BP_GameState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Game_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_SetDataInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasBeenEliminated_ReturnValue, bool CallFunc_SetDataBool_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1106707b6a001
	void GetConiReviveManager(out BP_ReviveItemManger_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue);// 0x1106807b6a001
	bool IsAllowReconnectGame(SCMPlayerState* InPC, bool Temp_bool_Variable, bool CallFunc_CanPlayerBattle_ReturnValue, bool CallFunc_PlayerCanRebirthByAllMeans_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, bool K2Node_Select_Default, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue);// 0x1106907b6a001
	void QuitImmediately(enum Index, SCMPlayerState* InputPin, out bool SendToSettle, bool ToSettle, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0x1106a07b6a001
	void Update Player Data Trace(SCMPlayerState* PlayerState, Vector NewLocalVar, FString CallFunc_GetDisplayName_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, SolarGameInstanceBase* CallFunc_GetSolarGameInstanceBase_ReturnValue, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue, BlueCircleManager* CallFunc_GetBlueCircleManager_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarInteractableManager* CallFunc_GetSolarInteractableManager_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, int CallFunc_GetShieldUpgradeItemShopGroupID_ReturnValue, FString CallFunc_Vector2String_Str, FString CallFunc_Conv_IntToString_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, int CallFunc_GetAiLevel_DefaultDifficultyLevel, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_FTrunc_ReturnValue, FString CallFunc_DataTraceDefender_Name, FString CallFunc_DataTraceDefender_Data, FString CallFunc_Conv_IntToString_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetConiReviveManager_Output_Get, int CallFunc___A_Get_Player_Use_Revive_Item_Times_Value, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetPlayerForceJumped_ReturnValue, Vector CallFunc_GetPlayerLandLocation_Location, bool CallFunc_GetPlayerLandLocation_Succeed, FString CallFunc_Bool2String_String, FString CallFunc_Conv_BoolToString_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, FString CallFunc_Vector2String_Str, float CallFunc_Distance2D_ReturnValue, Vector CallFunc_GetPlayerEjectLocation_Location, bool CallFunc_GetPlayerEjectLocation_Succeed, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Bool2String_String, FString CallFunc_Vector2String_Str, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_VectorArray2String_Str, FString CallFunc_GetTeamName_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_VectorArray2String_Str, FString CallFunc_Conv_IntToString_ReturnValue, byte CallFunc_GetTeamRank_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, int CallFunc_GetZomborg_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_Conv_IntToString_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, int Temp_int_Variable, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1106b07b6a001
	static void Create Airdrop(int ChestID, Transform TempPos, bool DuplicateFlag, Transform[] TempAirDropPos, int Temp_int_Array_Index_Variable, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, FString CallFunc_Conv_VectorToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int Temp_int_Loop_Counter_Variable, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, float CallFunc_GetTimeSeconds_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Transform[] CallFunc_GetSolarItemManagerAirDropRelatedInfo_TransformsArr, int CallFunc_GetSolarItemManagerAirDropRelatedInfo_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Transform CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, float CallFunc_Vector_Distance_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x1106c07b6a001
	void StartCruising(CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, SolarCharacter*[] CallFunc__A_GetCharacters_Characters, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, AirlineData CallFunc_GetAirline_Airline, int CallFunc_GetAirline_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AirlineCruise_C* CallFunc_GetComponentByClass_ReturnValue);// 0x1106d07b6a001
	void InitElements(Vector CallFunc_MakeVector_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_Formula_BattleRoyale_C* CallFunc_FinishSpawningActor_ReturnValue, BP_SolarBombingManager_C* CallFunc_FinishSpawningActor_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0x1106e07b6a001
	void Get Map Info(out BP_MapInfoComponent_C* MapInfo, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue);// 0x1106f07b6a001
	void Init Timeline Event(out DataTable* BattleTimeline, S_Event_BattleRoyale[] TempList, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_Array_Get_Item, S_Event_BattleRoyale CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int Temp_int_Array_Index_Variable, FName CallFunc_Array_Get_Item, S_Event_BattleRoyale CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, S_Event_BattleRoyale[] K2Node_MakeArray_Array, int CallFunc_Array_Add_ReturnValue, S_EventList_BattleRoyal K2Node_MakeStruct_S_EventList_BattleRoyal, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, int Temp_int_Loop_Counter_Variable, const FString Temp_string_Variable, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, S_EventList_BattleRoyal K2Node_MakeStruct_S_EventList_BattleRoyal, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x1107007b6a001
	void ExecuteBattleEvent(out const S_Event_BattleRoyale S_Event_BattleRoyale, const FString Temp_string_Variable, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const FString Temp_string_Variable, int CallFunc_Conv_StringToInt_ReturnValue, const FString Temp_string_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, const FString Temp_string_Variable, float CallFunc_Conv_StringToFloat_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, const FString Temp_string_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, const byte[] Temp_byte_Variable, const FString[] Temp_string_Variable, bool Temp_bool_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const FString Temp_string_Variable, int CallFunc_Get_Shrink_Index_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Get_Shrink_Index_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, const byte[] Temp_byte_Variable, Vector CallFunc_Random_Get_Fake_Bomb_Point_Pos, bool CallFunc_Random_Get_Fake_Bomb_Point_Success, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_Select_Default, const FString[] Temp_string_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const FString Temp_string_Variable, BP_MapInfoComponent_C* CallFunc_Get_Map_Info_MapInfo, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector CallFunc_Get_Safe_Area_Center_Pos, int CallFunc_Conv_StringToInt_ReturnValue);// 0x1107107b6a001
	void UpdateBattleState(byte NewState, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_SetDataByte_ReturnValue, BP_GameState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Game_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x1107207b6a001
	void GetGameState(out BP_GameState_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Game_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x1103407b6a001
	void GetPlayerStartOnWaitingland(out PlayerStart*[] PlayerStarts, PlayerStart*[] CallFunc_GetAllActorsOfClassWithTag_OutActors, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x1107407b6a001
	void GetBattleRoyaleMode(out BP_Mode_BattleRoyale_C* AsBP SCM Battle Royale, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Mode_BattleRoyale_C* K2Node_DynamicCast_AsBP_Mode_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0x1107507b6a001
	static void InitModeSetting(SolarTablesData_WarmGameMode NewLocalVar, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc__S_PlayInEditor_bIsEditor, FString CallFunc_Conv_BoolToString_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetAiManager_Output_Get, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetTeamPlayerCount_Num_Mode, FString CallFunc_Conv_IntToString_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_GetAILevelCurrentMatch_ReturnValue, int K2Node_Select_Default, int CallFunc_RandomIntInRange_ReturnValue, int CallFunc_Clamp_ReturnValue, class Object CallFunc_LoadClassAsset_Blocking_ReturnValue, class SolarBotAIController K2Node_ClassDynamicCast_AsSolar_Bot_AIController, bool K2Node_ClassDynamicCast_bSuccess, Object* CallFunc_LoadAsset_Blocking_ReturnValue, BehaviorTree* K2Node_DynamicCast_AsBehavior_Tree, bool K2Node_DynamicCast_bSuccess, int K2Node_Select_Default, int K2Node_Select_Default, int CallFunc_GetWramGameType_ReturnValue, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0x1107607b6a001
	void GMSpawnAI();// 0x1107707b6a001
	void OnMatchEnd(const int RPCID);// 0x1103107b6a001
	void OnBattleStateChanged(byte OldState, byte NewState);// 0x1107807b6a001
	void ReceiveBattleTick(float BattleTime, float DeltaTime);// 0x1107907b6a001
	void PreSettle(SCMPlayerState* Player, enum OutType);// 0x1103207b6a001
	void BattleInitFinished();// 0x1103307b6a001
	void OnDSClose();// 0x10ff507b6a001
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x1103507b6a001
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x1103607b6a001
	void UpdateAliveTeamsAndPlayers();// 0x1107a07b6a001
	void MatchEnd();// 0x1107b07b6a001
	void VehicleSnapshot();// 0x1107c07b6a001
	void Snapshot();// 0x1107d07b6a001
	void CustomEvent();// 0x2fa63160
	void OnCountDownFinished();// 0x1107f07b6a001
	void ExecuteUbergraph_BP_Logic_BattleRoyale(int EntryPoint, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool CallFunc_IsPackagedForDistribution_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, int CallFunc_Array_Length_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, <FString,FString> CallFunc_GetPlayerDataTraceByPlayer_Map, int CallFunc_Array_Length_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BPC_AiManagerBattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue, const int K2Node_Event_RPCId, byte K2Node_CustomEvent_OldState, byte K2Node_CustomEvent_NewState, int Temp_int_Variable, float K2Node_Event_BattleTime, float K2Node_Event_deltaTime, int CallFunc_FFloor_ReturnValue, S_EventList_BattleRoyal CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_OutType, SCMPlayerState*[] K2Node_MakeArray_Array, S_Event_BattleRoyale CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Variable, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_Get_Current_Player_Count_Result, int CallFunc_UpdatePlayerCount_Current, int CallFunc_UpdatePlayerCount_Current, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc__s_UpdateTeamCountMax_ReturnValue, int CallFunc__S_UpdateTeamsCount_Current, const <FString,FString> K2Node_MakeMap_Map, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_IsAI, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool K2Node_Select_Default, BP_Character_Framework_C* K2Node_DynamicCast_AsBP_Character_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc__S_SkyDiveFly_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int64 CallFunc_GetFrameCount_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, bool Temp_bool_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_OutType, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, int CallFunc_GetAIAccompanyTimelineID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_MapInfoComponent_C* CallFunc_Init_Poison_Circle_MapInfo, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc__S_UpdateTeamsCount_Current, int CallFunc_UpdatePlayerCount_Current, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, enum K2Node_Select_Default, bool Temp_bool_Variable, bool K2Node_Select_Default, GameModeGlobalSetting* CallFunc_GetGameModeSetting_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, byte Temp_byte_Variable, bool Temp_bool_Variable, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, S_SkillState K2Node_Select_Default, S_SkillState K2Node_Select_Default, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_Greater_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const Transform CallFunc_GetTransform_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, BP_CustomRoomManager_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, int[] CallFunc_GetSpawnList___ID___, int[] CallFunc_GetSpawnList___ID___, int[] CallFunc_GetSpawnList_____ID___, int[] CallFunc_GetSpawnList_____ID___, GameplayConfigBase* CallFunc_GetConfigs_ReturnValue, CGMGameplayConfig* K2Node_DynamicCast_AsCGMGameplay_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_TryGetCustomParam_OutValue, bool CallFunc_TryGetCustomParam_ReturnValue, byte Temp_byte_Variable, int CallFunc_FTrunc_ReturnValue, bool K2Node_Select_Default, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, SolarTeamInfo* CallFunc_Array_Get_Item, FString CallFunc_Conv_TextToString_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int64 CallFunc_GetFrameCount_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_HeroPickManager_C* K2Node_DynamicCast_AsBP_Hero_Pick_Manager, bool K2Node_DynamicCast_bSuccess, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, BP_GameState_BattleRoyale_C* CallFunc_GetGameState_Output_Get, float CallFunc_Add_FloatFloat_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_GreaterEqual_IntInt_ReturnValue, float CallFunc_GetWorldDeltaSeconds_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, int CallFunc__s_UpdateTeamCountMax_ReturnValue, bool K2Node_Select_Default, float CallFunc_GetTotalTime_TotalTime, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_IsValidIndex_ReturnValue, <FString,FString> CallFunc_GetPlayerDataTraceByPlayer_Map, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x1108007b6a001
	void BattleStateChanged__DelegateSignature(byte NewState);// 0x2fa633e0
	void OnGoInToBattleState__DelegateSignature();// 0x1108307b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Logic_Framework_C.CGMLogicComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x178, Size: 0x8]
	bool bBattleStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	bool bZeroMatchFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	delegate OnPlayerJoin;//[Offset: 0x188, Size: 0x10]
	delegate OnZeroMatchFinished;//[Offset: 0x198, Size: 0x10]
	bool bConfigInitiated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	bool bDSClosing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 0x1]
	void Custom Room Start(const <FString,FString> K2Node_MakeMap_Map);// 0x2fa66b80
	void OnPlayerQuit(SCMPlayerState* Player, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, bool CallFunc_IsInPreparation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x1103707b6a001
	static void PresettleAll(const enum[] Temp_byte_Variable, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_HasSettled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x1103807b6a001
	void FinishConfigInitiate();// 0x1103907b6a001
	void Update();// 0x1103a07b6a001
	void Get Current Player Count(out int Result, const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x1103b07b6a001
	void ReceiveBeginPlay();// 0x1103c07b6a001
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x1103d07b6a001
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x1103e07b6a001
	void PreSettle(SCMPlayerState* Player, enum OutType);// 0x1103f07b6a001
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x1104007b6a001
	void BattleInitFinished();// 0x1104107b6a001
	void ReceiveServerLevelLoaded(FString LevelName);// 0x1104207b6a001
	void ReceiveBattleBegin();// 0x1104307b6a001
	void OnPlayerDisconnect(SCMPlayerState* OfflinePlayer);// 0x1104407b6a001
	void OnMatchEnd(const int RPCID);// 0x1104507b6a001
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x1104607b6a001
	void OnDSClose();// 0x1104707b6a001
	void OnPlayerCheat(SCMPlayerState* CheatPlayer);// 0x2fa65640
	void OnPlayerReconnect(SCMPlayerState* Player);// 0xfffdff8d078ea000
	void OnPlayerAbnormal(SCMPlayerState* CheatPlayer);// 0x1108407b6a001
	static void ExecuteUbergraph_BP_Logic_Framework(int EntryPoint, SCMPlayerState* K2Node_Event_OfflineTimeoutPlayer, SCMPlayerState* K2Node_Event_OfflineTimeoutPlayer, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SCMPlayerState* K2Node_CustomEvent_Player, enum K2Node_CustomEvent_OutType, SCMPlayerState* K2Node_Event_Player, enum K2Node_Event_OutType, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, FString K2Node_Event_LevelName, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, SCMPlayerState* K2Node_Event_OfflinePlayer, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, const int K2Node_Event_RPCId, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc__A_GetDSTime_Time, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_IsAI, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc__S_PlayInEditor_bIsEditor, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* K2Node_Event_CheatPlayer, SCMPlayerState* K2Node_Event_Player, SCMPlayerState* K2Node_Event_CheatPlayer, SolarGameMode* CallFunc_GetGameModeOwner_ReturnValue);// 0x2fa650a0
	void OnZeroMatchFinished__DelegateSignature();// 0x2fa65dc0
	void OnPlayerJoin__DelegateSignature(SCMPlayerState* NewPlayer, bool bIsAi);// 0x2fa686b0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_GameState_BattleRoyale_C.BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x700, Size: 0x8]
	BPC_CountDown_C* BPC_CountDown;//[Offset: 0x708, Size: 0x8]
	int MapId;//[Offset: 0x710, Size: 0x4]
	int AirlineID;//[Offset: 0x714, Size: 0x4]
	byte BattleState;//[Offset: 0x718, Size: 0x1]
	delegate BroadcastBattleStateChange;//[Offset: 0x720, Size: 0x10]
	FString WinTeam;//[Offset: 0x730, Size: 0x10]
	UI_HUD_Notice_VICTORY_C* VICTORYUI;//[Offset: 0x740, Size: 0x8]
	bool HasTop3Team;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 0x1]
	void Get Actual UICount Down Time(out float CountDownTime, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0xbbd207b6a001
	void CloseEmptyVictoryUI();// 0xbbd307b6a001
	void OnRep_HasTop3Team(UserWidget* CallFunc_ShowSolarWidget_ReturnValue, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, bool CallFunc_DoesDistributeForDomestic_ReturnValue, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, SolarPlayerState* CallFunc_GetLocalOrSpecTargetPlayerState_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte CallFunc_GetTeamRank_ReturnValue, bool CallFunc_LessEqual_ByteByte_ReturnValue);// 0xbbef07b6a001
	void ShowEmptyVictoryUI(PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, SolarPlayerState* K2Node_DynamicCast_AsSolar_Player_State, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0xbbf007b6a001
	void OnRep_WinTeam(int Temp_int_Array_Index_Variable, const byte[] Temp_byte_Variable, const enum[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x12a00078ea041
	void ShowVictoryUI(bool Temp_bool_Variable, const class SolarUserWidget Temp_class_Variable, const class SolarUserWidget Temp_class_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Get_Actual_UICount_Down_Time_CountDownTime, bool CallFunc_IsPCPlatform_IsPCPlatform, PlayerController* CallFunc_GetPlayerController_ReturnValue, const class SolarUserWidget K2Node_Select_Default, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, SolarPlayerState* K2Node_DynamicCast_AsSolar_Player_State, bool K2Node_DynamicCast_bSuccess, UINoticeVictory* K2Node_DynamicCast_AsUINotice_Victory, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0xbc1307b6a001
	void OnRep_BattleState();// 0xbc1407b6a001
	void OnRep_MapID(bool CallFunc_IsServer_ReturnValue);// 0xbc1507b6a001
	void ReceiveBeginPlay();// 0xbc1607b6a001
	void OnBattleStateChange(byte ChangeType);// 0xbc1707b6a001
	void StartCountdown(int Time);// 0xbc5907b6a001
	void BattleEnd(FString WinTeam);// 0xbc5a07b6a001
	void OnConfigInit();// 0xbc5b07b6a001
	void OnShowVictoryUI();// 0x129fe078ea041
	void NetMulticastCelebrateBattleEnd(Vector Location);// 0x124c307b6a008
	void CelebrateBattleEnd(Vector Location);// 0xbc5e07b6a001
	void ExecuteUbergraph_BP_GameState_BattleRoyale(int EntryPoint, BP_SetRenderParametersBasedOnDifferentStates_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_Time, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString K2Node_CustomEvent_WinTeam, bool CallFunc_IsSupportCharacterRole_ReturnValue, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, Actor* CallFunc_SolarSpawnActor_ReturnValue, Vector K2Node_CustomEvent_Location, GameplayConfigBase* CallFunc_GetConfigs_ReturnValue, Vector K2Node_Event_Location, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayingReplay_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_IsServer_ReturnValue, SolarCityName*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, SolarCityName* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetCameraFocusedCharacter_ReturnValue);// 0xbc7807b6a001
	void BroadcastBattleStateChange__DelegateSignature(byte Now State);// 0xbc7a07b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x680, Size: 0x8]
	BPC_PlayerManager_C* PlayerManager;//[Offset: 0x688, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x690, Size: 0x8]
	delegate OnBasicSystemReady;//[Offset: 0x698, Size: 0x10]
	bool bBasicSystemReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 0x1]
	delegate OnOBPlayerListChanged;//[Offset: 0x6b0, Size: 0x10]
	delegate OnRoomDataChanged;//[Offset: 0x6c0, Size: 0x10]
	int WarmGameID;//[Offset: 0x6d0, Size: 0x4]
	delegate OnPlayerBattleStateChanged;//[Offset: 0x6d8, Size: 0x10]
	delegate OnGameStateChanged;//[Offset: 0x6e8, Size: 0x10]
	enum GameState;//[Offset: 0x6f8, Size: 0x1]
	void OnRep_GameState();// 0xbc7e07b6a001
	void SetGameState(enum NewState);// 0xbc7f07b6a001
	void OnDataManagerPrepare();// 0xbc8007b6a001
	void ReceiveBeginPlay();// 0xbcf507b6a001
	void OnOBPlayerListChange();// 0xbcf607b6a001
	void OnCustomRoomDataChange(out const CustomRoomData InCustomRoomData);// 0xbb1107b6a001
	void OnPlayerBattleStateChange(const SCMPlayerState* PlayerState);// 0xbcf807b6a001
	static void ExecuteUbergraph_BP_GameState_Framework(int EntryPoint, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsServer_ReturnValue, const CustomRoomData K2Node_Event_InCustomRoomData, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsPlayingReplay_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString Temp_string_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetWramGameType_ReturnValue, const SCMPlayerState* K2Node_Event_PlayerState, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString Temp_string_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xbcf907b6a001
	void OnGameStateChanged__DelegateSignature(enum NewState);// 0xbcfa07b6a001
	void OnPlayerBattleStateChanged__DelegateSignature(SCMPlayerState* Player);// 0xbd2b07b6a001
	void OnRoomDataChanged__DelegateSignature(CustomRoomData RoomData);// 0xbbab07b6a001
	void OnOBPlayerListChanged__DelegateSignature();// 0x788a078fdf22
	void OnBasicSystemReady_0__DelegateSignature();// 0xffffffffc8a159e0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	enum InGameState;//[Offset: 0x4e0, Size: 0x1]
	bool bInSelectHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1, Size: 0x1]
	CustomRoomData CustomRoomData;//[Offset: 0x520, Size: 0xd8]
	bool bCustomRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1]
	GameManagerBase*[] GameManagers;//[Offset: 0x600, Size: 0x10]
	GameDataManager* GameDataManager;//[Offset: 0x610, Size: 0x8]
	CustomSettlementManager* SettlementManager;//[Offset: 0x618, Size: 0x8]
	CGMManagerConfigComponent* ManagerConfigComponent;//[Offset: 0x630, Size: 0x8]
	CGFormula* InsFormula;//[Offset: 0x638, Size: 0x8]
	SolarPlayerState*[] PlayersWithTrackingAbility;//[Offset: 0x640, Size: 0x10]
	SpatializeInfoTrack*[] TrackInfos;//[Offset: 0x650, Size: 0x10]
	bool bBasicSystemReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66b, Size: 0x1]
	delegate OnBasicSystemReady;//[Offset: 0x670, Size: 0x10]
	void SetRoomPoolPrizeType(int TypeID);// 0x1c29078ea041
	void SetRoomPasssd(FString Passwd);// 0x1c28078ea041
	void SetRoomName(FString Name);// 0x1c27078ea041
	void SetRoomLevelLimit(int Level);// 0x1c26078ea041
	void SetRoomEnableSwapPos(bool bIsEnabled);// 0x1c25078ea041
	void SetRoomEnableInvite(bool bIsEnabled);// 0x1c24078ea041
	void OnTournamentBattleEnd();// 0x1c23078ea041
	void OnServerCustomRoomDataReady();// 0x1c22078ea041
	void OnRep_InGameState();// 0x1c21078ea041
	void OnRep_GameManagerList();// 0x1c20078ea041
	void OnRep_GameDataManager();// 0x1c1f078ea041
	void OnRep_CustomRoomData();// 0x1c1e078ea041
	void OnRep_bInSelectHero();// 0x1c1d078ea041
	void OnPlayerBattleStateChange(const SCMPlayerState* PlayerState);// 0x1c1c078ea041
	void OnDataManagerPrepare();// 0x1c1b078ea041
	void OnCustomRoomDataChange(out const CustomRoomData InCustomRoomData);// 0x1c1a078ea041
	void NotifyVipPlayerJoin(int FlagID, byte VipType, enum InputType, FString NickName, bool bCustomRoom, bool bInTournament);// 0x1c19078ea041
	void NotifyRoomDataChanged();// 0x1c18078ea041
	void MultiClientAllManagersOnRepDelegate__DelegateSignature();// 0x1c17078ea041
	bool IsNeedCalculateTournamentPoints();// 0x1c16078ea041
	bool IsInTournament();// 0x1c15078ea041
	bool IsInCustomServer();// 0x1c14078ea041
	bool IsCustomRoomMode();// 0x1c13078ea041
	bool IsAtNonSettlementStage();// 0x1c12078ea041
	void InitKnockoutPointParams(out KnockoutParams InParams);// 0x1c10078ea041
	TournamentData GetTournamentData();// 0x1c0f078ea041
	bool GetOBSCMPlayerList(out SCMPlayerState*[] OutPlayerList);// 0x1c0e078ea041
	CGMManagerConfigComponent* GetManagerConfigComponent();// 0x1c0d078ea041
	CGFormula* GetFormula();// 0x1c0c078ea041
	CustomRoomData GetCustomRoomData();// 0x1c06078ea041
	CGMGameplayConfig* GetCGMGameplayConfig();// 0x1c05078ea041
	void ClearCustomRoomData();// 0x1c04078ea041
	void CallOnBasicSystemReady();// 0x1c03078ea041
	int CalculateKnockoutPoints(const int InTeamRank, const int InKillNum, const float InTotalDamage, const float InTotalDamageTaken);// 0x1c02078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	bool IsBattleEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 0x1]
	bool IsBattleSettlement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 0x1]
	enum BattleEndType;//[Offset: 0x4d2, Size: 0x1]
	bool IsBattleOver();// 0x1c01078ea041
	bool GetIsBattleSettlement();// 0x1c00078ea041
	enum GetBattleEndType();// 0x1bfe078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_CountDown_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	UI_CountDown_C* CountDownWidget;//[Offset: 0xb8, Size: 0x8]
	int Time;//[Offset: 0xc0, Size: 0x4]
	TimerHandle Timer;//[Offset: 0xc8, Size: 0x8]
	int LocalTime;//[Offset: 0xd0, Size: 0x4]
	TimerHandle LocalTimer;//[Offset: 0xd8, Size: 0x8]
	delegate OnLocalTimeChange;//[Offset: 0xe0, Size: 0x10]
	delegate OnCountDownFinished;//[Offset: 0xf0, Size: 0x10]
	int MatchingText;//[Offset: 0x100, Size: 0x4]
	int MatchingTime;//[Offset: 0x104, Size: 0x4]
	delegate OnMatchCountDownFinished;//[Offset: 0x108, Size: 0x10]
	TimerHandle TimerMatch;//[Offset: 0x118, Size: 0x8]
	bool bCountDownFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	FString CountSoundName;//[Offset: 0x128, Size: 0x10]
	void OnRep_CountSoundName(bool CallFunc_NotEqual_StrStr_ReturnValue, bool CallFunc_IsPlayingReplay_ReturnValue);// 0xc3dd07b6a001
	void [C]CountEnd(bool CallFunc_IsPlayingReplay_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue);// 0xc3de07b6a001
	void [S]StopMatchCountDown(bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0xc3df07b6a001
	static void [S]StartMatchCountDown(int MatchTime, out const delegate Event, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0xc3e007b6a001
	static void [S]StartCountDown(int Time, FString SoundName, out const delegate Event, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0xc3e107b6a001
	void [C]StopCountDown(const <FString,FString> K2Node_MakeMap_Map, int CallFunc_StopSound2D_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xc3e207b6a001
	void OnRep_Time(bool CallFunc_IsServer_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0xc3e307b6a001
	void GetCountDownWidget(out UI_CountDown_C* Output_Get1, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_CountDown_C* K2Node_DynamicCast_AsUI_Count_Down, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0xc3e407b6a001
	void ReceiveBeginPlay();// 0xc3e507b6a001
	void StartCountdown(int Time);// 0xc3e607b6a001
	void OnCountDownTime();// 0xc3e707b6a001
	void [C]ClientCountDown();// 0xc3e807b6a001
	void CountDownTick();// 0xc3e907b6a001
	void MCountDownTick();// 0xc3ea07b6a001
	void CustomEvent(enum NewState);// 0xc3eb07b6a001
	static void ExecuteUbergraph_BPC_CountDown(int EntryPoint, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_IntInt_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsServer_ReturnValue, int K2Node_CustomEvent_Time, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, int CallFunc_PlaySound2D_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, UI_CountDown_C* CallFunc_GetCountDownWidget_Output_Get1, GameStateBase* CallFunc_GetGameState_ReturnValue, enum K2Node_CustomEvent_NewState, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0xc3ec07b6a001
	void OnMatchCountDownFinished__DelegateSignature();// 0x1252907b6a008
	void OnCountDownFinished__DelegateSignature();// 0xc3ee07b6a001
	void OnLocalTimeChange__DelegateSignature(int Time);// 0x1252507b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CountDown_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Flip;//[Offset: 0x408, Size: 0x8]
	TextBlock* Number;//[Offset: 0x410, Size: 0x8]
	UI_HUD_Notice_Lv3_C* UI_HUD_Notice_Lv3;//[Offset: 0x418, Size: 0x8]
	WidgetSwitcher* wStyle;//[Offset: 0x420, Size: 0x8]
	int Time;//[Offset: 0x428, Size: 0x4]
	FString TimeName;//[Offset: 0x430, Size: 0x10]
	void SequenceEvent__ENTRYPOINTUI_CountDown(Overlay* NumberContainer);// 0xfffffffecc5b7200
	void SetMiniCountDownText(FString InText);// 0x3f7fff8c470ea000
	void SetCountDownStyle(byte Style, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x12fec07b6a001
	void Finish();// 0xffffff8c078ea000
	void NumberContainer_Event(Overlay* NumberContainer);// 0x12fea07b6a001
	void PreConstruct(bool IsDesignTime);// 0x12feb07b6a001
	void None(int Time);// 0xffffff8f078ea002
	void CustomEvent();// 0xffffffff97fc7a80
	void None(FString None);// 0x9619078f30b7
	void CountDownBySingleNumber(int Number);// 0xffffff8c078ea000
	void CustomEvent(enum ChangeType, int OldValue, int NewValue);// 0xffffff8f078ea002
	void CustomEvent(enum ChangeType, int OldValue, int NewValue);// 0x3effff8c078ea001
	void ExecuteUbergraph_UI_CountDown(int EntryPoint, enum K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_OldValue, int K2Node_CustomEvent_NewValue, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_IntToText_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Overlay* K2Node_CustomEvent_NumberContainer, bool K2Node_Event_IsDesignTime, FText CallFunc_Conv_IntToText_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_Time, FString K2Node_CustomEvent_____, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BindDataChangeEventInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int K2Node_CustomEvent_Number, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, enum K2Node_CustomEvent_ChangeType, int K2Node_CustomEvent_OldValue, int K2Node_CustomEvent_NewValue, int CallFunc_Abs_Int_ReturnValue, bool CallFunc_UnbindDataChangeEventInt_ReturnValue);// 0x162d707b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_HUD_Notice_Lv3_C.UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x428, Size: 0x8]
	WidgetAnimation* ant_exit;//[Offset: 0x430, Size: 0x8]
	WidgetAnimation* Appear_Anim;//[Offset: 0x438, Size: 0x8]
	Image* Img_Txt_bg;//[Offset: 0x440, Size: 0x8]
	SolarRichTextBlock* Txt_Ballte_Notice;//[Offset: 0x448, Size: 0x8]
	static void SetNoticeText(FString InText, FText CallFunc_Conv_StringToText_ReturnValue);// 0xb75f07b6a001
	void Construct();// 0x2124b078ea041
	void ShowNotice(FString Text, float Duration);// 0x2dffba07bda02e
	static void ExecuteUbergraph_UI_HUD_Notice_Lv3(int EntryPoint, FString K2Node_CustomEvent_Text, float K2Node_CustomEvent_Duration, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xb7ad07b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarRichTextBlock* TextWidget;//[Offset: 0x400, Size: 0x8]
	Image* TxtBg;//[Offset: 0x408, Size: 0x8]
	Image* Icon;//[Offset: 0x410, Size: 0x8]
	Image* IconBg;//[Offset: 0x418, Size: 0x8]
	void ShowEnterAnimation();// 0x454d078ea041
	void SetIconBrush(FString IconPath);// 0x454c078ea041
	void SetColor(out const NoticeColorData InColorData);// 0x454b078ea041
	void ResetIsPlayingVoice(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x454a078ea041
	void ResetIsPlayingBeKillLeaderVoice(enum CallbackType, AkCallbackInfo* CallbackInfo);// 0x4549078ea041
	WidgetAnimation* GetExitAnimation();// 0x4548078ea041
	WidgetAnimation* GetEnterAnimation();// 0x4547078ea041
	void DefaultClose();// 0x4546078ea041
	void CloseNotice();// 0x4545078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NoticeColorData
	LinearColor TextBg;//[Offset: 0x0, Size: 0x10]
	LinearColor IconBg;//[Offset: 0x10, Size: 0x10]
	LinearColor Icon;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarRichTextBlock.TextLayoutWidget.Widget.Visual.Object
	bool bEnableLocText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	FText Text;//[Offset: 0x160, Size: 0x18]
	int LocTextID;//[Offset: 0x178, Size: 0x4]
	enum PreviewLang;//[Offset: 0x17c, Size: 0x1]
	DataTable* TextStyleSet;//[Offset: 0x180, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x188, Size: 0x10]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x1a0, Size: 0x460]
	float MinDesiredWidth;//[Offset: 0x600, Size: 0x4]
	int MaxRowCount;//[Offset: 0x604, Size: 0x4]
	int MinFontSize;//[Offset: 0x608, Size: 0x4]
	bool bUsingAccurateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 0x1]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0xa70, Size: 0x10]
	void SetWrapTextAt(float InWrapTextAt);// 0x5754078ea041
	void SetWrappingPolicy(enum InWrappingPolicy);// 0x5753078ea041
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x5752078ea041
	void SetText(out const FText InText);// 0x5751078ea041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x5750078ea041
	void SetLocTextID(int InLocTextID);// 0x574f078ea041
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x574e078ea041
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x574d078ea041
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x574c078ea041
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x574b078ea041
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x574a078ea041
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x5749078ea041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x5748078ea041
	enum GetWrappingPolicy();// 0x5747078ea041
	DataTable* GetTextStyleSet();// 0x5746078ea041
	FText GetText();// 0x5745078ea041
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x5744078ea041
	void ClearAllDefaultStyleOverrides();// 0x5743078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x60]
	SlateColor ColorAndOpacity;//[Offset: 0x68, Size: 0x28]
	Vector2D ShadowOffset;//[Offset: 0x90, Size: 0x8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x98, Size: 0x10]
	SlateColor SelectedBackgroundColor;//[Offset: 0xa8, Size: 0x28]
	LinearColor HighlightColor;//[Offset: 0xd0, Size: 0x10]
	SlateBrush HighlightShape;//[Offset: 0xe0, Size: 0xe0]
	SlateBrush StrikeBrush;//[Offset: 0x1c0, Size: 0xe0]
	SlateBrush UnderlineBrush;//[Offset: 0x2a0, Size: 0xe0]
	SlateBrush BackgroundBrush;//[Offset: 0x380, Size: 0xe0]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RichTextBlockDecorator.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x14c, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x3e9e078ea041
	void SetActiveWidget(Widget* Widget);// 0x3e9d078ea041
	Widget* GetWidgetAtIndex(int Index);// 0x3e9c078ea041
	int GetNumWidgets();// 0x3e9b078ea041
	int GetActiveWidgetIndex();// 0x3e9a078ea041
	Widget* GetActiveWidget();// 0x3e99078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x3f8b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3f96078ea041
	void SetPadding(Margin InPadding);// 0x3f95078ea041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3f94078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_HUD_Notice_VICTORY_C.UINoticeVictory.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4a0, Size: 0x8]
	int CountDownTime;//[Offset: 0x4a8, Size: 0x4]
	FString GetModuleName();// 0x12eaa07b6a008
	void PreConstruct(bool IsDesignTime);// 0xffffff8c07a482ec
	void CloseSelf();// 0x1127f078ea041
	void OnEndAnimFinish();// 0x12f3107b6a008
	void ExecuteUbergraph_UI_HUD_Notice_VICTORY(int EntryPoint, bool K2Node_Event_IsDesignTime, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x1484507b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UINoticeVictory.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	delegate OnAppearAnimFinishedDelegate;//[Offset: 0x428, Size: 0x10]
	FName BackToLobbyActionName;//[Offset: 0x438, Size: 0x8]
	WidgetAnimation* Appear_Anim;//[Offset: 0x440, Size: 0x8]
	WidgetAnimation* Loop_Anim;//[Offset: 0x448, Size: 0x8]
	WidgetAnimation* Exit_Anim;//[Offset: 0x450, Size: 0x8]
	Button* Btn_Return;//[Offset: 0x458, Size: 0x8]
	SolarTextBlock* Txt_Exit;//[Offset: 0x460, Size: 0x8]
	delegate EndAnimFinishedEvent;//[Offset: 0x468, Size: 0x10]
	delegate AppearAnimFinishedEvent;//[Offset: 0x478, Size: 0x10]
	void PlayAppearAnim(float InTimeToEnd);// 0x6148078ea041
	void OnReturnBtnClick();// 0x6147078ea041
	void OnEndAnimFinish();// 0x6146078ea041
	void OnAppearAnimFinished();// 0x6145078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_PlayerManager_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	BP_PlayerState_Framework_C*[] AliveRealPlayers;//[Offset: 0xb8, Size: 0x10]
	BP_PlayerState_Framework_C*[] AliveAiPlayers;//[Offset: 0xc8, Size: 0x10]
	BPC_Death_Framework_C* DeathComponent;//[Offset: 0xd8, Size: 0x8]
	BP_PlayerState_Framework_C*[] RealPlayers;//[Offset: 0xe0, Size: 0x10]
	<FString,int> TeamRealPlayerCount;//[Offset: 0xf0, Size: 0x50]
	BP_PlayerState_Framework_C*[] GetPlayerList(byte Type, byte Temp_byte_Variable, BP_PlayerState_Framework_C*[] K2Node_Select_Default);// 0xbd3007b6a001
	void ReceiveBeginPlay();// 0xbd4307b6a001
	void OnPlayerDie(BP_PlayerState_Framework_C* Player);// 0xbd4407b6a001
	void OnPlayerResurrect(BP_PlayerState_Framework_C* Player);// 0xbd4507b6a001
	void BattleStart();// 0x126ee07baa021
	void PlayerOut(SCMPlayerState* Player);// 0xffffff8f078ea002
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0xbd4807b6a001
	void ExecuteUbergraph_BPC_PlayerManager(int EntryPoint, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Array_Index_Variable, const byte[] Temp_byte_Variable, const FString[] Temp_string_Variable, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_Framework_C* K2Node_CustomEvent_Player, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, BP_PlayerState_Framework_C*[] K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, SCMPlayerState* K2Node_CustomEvent_Player, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, const BP_PlayerState_Framework_C*[] K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_Framework_C* CallFunc_GetComponentByClass_ReturnValue, BPC_Death_Framework_C* CallFunc_GetComponentByClass_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, SCMPlayerState* K2Node_CustomEvent_NewPlayer, bool K2Node_CustomEvent_bIsAi, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C*[] K2Node_Select_Default, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int K2Node_Copy_ReturnValue, int K2Node_Select_Default);// 0x1244007b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_Death_Framework_C.CGMDeathComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd0, Size: 0x8]
	delegate OnPlayerDie;//[Offset: 0xd8, Size: 0x10]
	delegate OnPlayerResurrect;//[Offset: 0xe8, Size: 0x10]
	delegate OnPlayerKill;//[Offset: 0xf8, Size: 0x10]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x108, Size: 0x8]
	S_SkillState SkillStateAfterRevive;//[Offset: 0x110, Size: 0x2]
	void GMRevive(SCMPlayerState* InKilled, out bool AutoRevive, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetLastDeathLocation_Output, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess);// 0xbbe007b6a001
	void Try Buy Resurrect(SCMPlayerState* Player, SolarPointDamageEvent DamageEvent, out bool Succeed, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsOfflinePlayer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_CheckAllTeammateDied_IfAllDied, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xbbe107b6a001
	bool CheckTerminator(SCMPlayerState* InKiller, SCMPlayerState* InKilled, BP_DefenderManager_C* CallFunc_GetDefenderManager_AsBP_Defender_Manager, bool CallFunc_UpdateCheckTerminator_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xbbe207b6a001
	void GetDefenderManager(out BP_DefenderManager_C* AsBP Defender Manager, bool CallFunc_IsValid_ReturnValue, GameManagerBase* CallFunc_GetGameManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0xbbe307b6a001
	void UpdateDataTrace(byte Type, SCMPlayerState* Killer, SCMPlayerState* Killed, out const SolarPointDamageEvent DamageEvent, Actor* DamageCauser, <FString,FString> AdditionalData, int MoneyNum, <FString,FString> Temp, byte Temp_byte_Variable, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_DeathReason2String_TraceString, FText CallFunc_Conv_BoolToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_BoolToText_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString K2Node_Select_Default, FString Temp_string_Variable, int Temp_int_Array_Index_Variable, FString K2Node_Select_Default, FString CallFunc_Array_Get_Item, <FString,FString> K2Node_MakeMap_Map, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xbbe407b6a001
	void ReceivePlayerKill(SCMPlayerState* Killer, SCMPlayerState* Killed, out const SCMPlayerState*[] Assists, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x42b3ff8c4a42a000
	void ReceivePlayerDeathVerge(SCMPlayerState* InAttacker, SCMPlayerState* InDeathVergePlayer, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0xbbe607b6a001
	void ReceivePlayerResurrect(SolarCharacter* ResurrectCharacter, SCMPlayerState* ResurrectPlayer);// 0xbbf607b6a001
	void ExecuteUbergraph_BPC_Death_Framework(int EntryPoint, SCMPlayerState* K2Node_Event_Killer, SCMPlayerState* K2Node_Event_Killed, const SCMPlayerState*[] K2Node_Event_Assists, const SolarPointDamageEvent K2Node_Event_InDamageEvent, Actor* K2Node_Event_InDamageCauser, SCMPlayerState* K2Node_Event_InAttacker, SCMPlayerState* K2Node_Event_InDeathVergePlayer, const SolarPointDamageEvent K2Node_Event_InDamageEvent, Actor* K2Node_Event_InDamageCauser, bool CallFunc_CheckTerminator_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue, SolarCharacter* K2Node_Event_ResurrectCharacter, SCMPlayerState* K2Node_Event_ResurrectPlayer, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0xbbf707b6a001
	void OnPlayerKill__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0xbbf807b6a001
	void OnPlayerResurrect__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0xbbf907b6a001
	void OnPlayerDie__DelegateSignature(BP_PlayerState_Framework_C* Player);// 0x73c0cc45f7f6a000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGMDeathComponent.CustomGameModeComponent.GameModeCompBase.ActorComponent.Object
	void ReceivePlayerResurrect(SolarCharacter* ResurrectCharacter, SCMPlayerState* ResurrectPlayer);// 0x45a5078ea041
	void ReceivePlayerKill(SCMPlayerState* Killer, SCMPlayerState* Killed, out const SCMPlayerState*[] Assists, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x45a4078ea041
	void ReceivePlayerDeathVerge(SCMPlayerState* InAttacker, SCMPlayerState* InDeathVergePlayer, out const SolarPointDamageEvent InDamageEvent, Actor* InDamageCauser);// 0x45a3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_DefenderManager_C.DefenderManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2b8, Size: 0x8]
	UI_OpeningShow_C* DefenderUI;//[Offset: 0x2c0, Size: 0x8]
	float ShowTime-Defender;//[Offset: 0x2c8, Size: 0x4]
	float ShowTime-Self;//[Offset: 0x2cc, Size: 0x4]
	byte UiState;//[Offset: 0x2d0, Size: 0x1]
	int TerminatorReward;//[Offset: 0x2d4, Size: 0x4]
	bool DataReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	UI_Common_Transition_Anim_C* Anim;//[Offset: 0x2e0, Size: 0x8]
	bool bBattleStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	void OnRep_BattleStarted();// 0xbc3107b6a001
	void DataTraceDefender(SolarPlayerState* Target, out FString Name, out FString Data, bool Temp_bool_Variable, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_IsDefender_ReturnValue, bool CallFunc_IsTerminator_ReturnValue, FString Temp_string_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString K2Node_Select_Default, FString Temp_string_Variable, FString K2Node_Select_Default);// 0xbc3207b6a001
	void GetExtraReward(out int Reward);// 0xbc3307b6a001
	void SetShowTime(float ShowTime-Self, float ShowTime-Defender);// 0xbc3407b6a001
	void GetTotalTime(out float TotalTime, float CallFunc_Add_FloatFloat_ReturnValue);// 0xbc3507b6a001
	static void GetUI(out UI_OpeningShow_C* Output_Get, const FString[] Temp_string_Variable, UserWidget* CallFunc_CreateSolarWidget_ReturnValue, UI_OpeningShow_C* K2Node_DynamicCast_AsUI_Opening_Show, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, const enum[] Temp_byte_Variable, byte CallFunc_GetTeamID_ReturnValue, const byte[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0xbc3607b6a001
	void OnRep_UIState(bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsPlayingReplay_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsOBPlayer_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Not_PreBool_ReturnValue);// 0xbc3707b6a001
	void ReceiveBeginPlay();// 0xbc3807b6a001
	void [S]ShowDefenderUI();// 0xbc3907b6a001
	void OnUIStateChanged(byte UiState);// 0xbc3a07b6a001
	void OnDefenderDataReady();// 0xbc3b07b6a001
	void ShowDefenderUIForReplay();// 0x3f7fff8c470ea000
	void OnSideHeroPickEnd_Event(FString Side);// 0xffffffff9939cb30
	void CustomEvent(enum NewState);// 0xbc3e07b6a001
	void ExecuteUbergraph_BP_DefenderManager(int EntryPoint, GameManagerBase* CallFunc_GetGameManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_HeroPickManager_C* K2Node_DynamicCast_AsBP_Hero_Pick_Manager, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_IsClosed_Variable, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_UIState, UI_OpeningShow_C* CallFunc_GetUI_Output_Get, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, const SolarPlayerState*[] CallFunc_GetDefenderList_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_OpeningShow_C* CallFunc_GetUI_Output_Get, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString K2Node_CustomEvent_Side, bool CallFunc_IsOBPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum CallFunc_GetInGameState_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, enum K2Node_CustomEvent_NewState, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x3f7fff8c470ea000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DefenderManager.GameManagerBase.Info.Actor.Object
	delegate OnRepDefenderListNotify;//[Offset: 0x228, Size: 0x10]
	TerminatorNotifyUIConfig TerminatorNotifyUIConfig;//[Offset: 0x238, Size: 0x28]
	class SolarTrailEffect* TrailEffect;//[Offset: 0x260, Size: 0x8]
	FString DefenderSide;//[Offset: 0x268, Size: 0x10]
	SolarPlayerState*[] DefenderList;//[Offset: 0x278, Size: 0x10]
	FString TerminatorPlayerId;//[Offset: 0x290, Size: 0x10]
	bool UpdateCheckTerminator(SCMPlayerState* InKiller, SCMPlayerState* InKilled);// 0x475f078ea041
	void StartConfirmDefender();// 0x475e078ea041
	void ShowDefenderUIForReplay();// 0x475d078ea041
	void OnRep_DefenderList();// 0x475c078ea041
	bool IsTerminator(FString InSolarPlayerID);// 0x475b078ea041
	bool IsDefender(FString InPlayerSide);// 0x475a078ea041
	SolarPlayerState*[] GetDefenderList();// 0x4759078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TerminatorNotifyUIConfig
	int LocalizationID;//[Offset: 0x0, Size: 0x4]
	class UINoticeBase* TerminatorNotifyUI;//[Offset: 0x18, Size: 0x8]
	enum NoticeType;//[Offset: 0x20, Size: 0x1]
	float NoticeTime;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_OpeningShow_C.UIDefenderTeamShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x520, Size: 0x8]
	WidgetAnimation* Enter_Anim;//[Offset: 0x528, Size: 0x8]
	Image* de_img_Bg;//[Offset: 0x530, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x538, Size: 0x8]
	Image* Img_Flash_Left;//[Offset: 0x540, Size: 0x8]
	Image* Img_Flash_Right;//[Offset: 0x548, Size: 0x8]
	Image* Img_TitleBg;//[Offset: 0x550, Size: 0x8]
	Image* M_Glitch_Blue_Left;//[Offset: 0x558, Size: 0x8]
	Image* M_Glitch_Blue_Right;//[Offset: 0x560, Size: 0x8]
	Image* my_img_Bg;//[Offset: 0x568, Size: 0x8]
	Overlay* Overlay_Tip;//[Offset: 0x570, Size: 0x8]
	RichTextBlock* Txt_Tips;//[Offset: 0x578, Size: 0x8]
	SolarTextBlock* Txt_Title;//[Offset: 0x580, Size: 0x8]
	SolarTextBlock* Txt_Title;//[Offset: 0x588, Size: 0x8]
	SolarTextBlock* Txt_Title_VX;//[Offset: 0x590, Size: 0x8]
	enum BP_TeamType;//[Offset: 0x598, Size: 0x1]
	int TerminatorReward;//[Offset: 0x59c, Size: 0x4]
	void UpdateOpeningShow(enum TeamType);// 0xbe2c07b6a001
	void OnSolarUIOpened();// 0xffffff8f078ea002
	void OnSolarUIClosed();// 0xd9122093a6652c82
	static void ExecuteUbergraph_UI_OpeningShow(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, enum Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, enum K2Node_Event_TeamType, UIDefenderPlaerShowWidget*[] K2Node_MakeArray_Array, bool CallFunc_GreaterEqual_IntInt_ReturnValue, UIDefenderPlaerShowWidget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, enum K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue, int K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, int K2Node_Select_Default, bool CallFunc_Conv_IntToBool_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, LinearColor K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, LinearColor K2Node_Select_Default);// 0xffffff8c078ea000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UIDefenderTeamShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x400, Size: 0x8]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x408, Size: 0x8]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x410, Size: 0x8]
	UIDefenderPlaerShowWidget* Player;//[Offset: 0x418, Size: 0x8]
	WidgetAnimation* Exit_Anim;//[Offset: 0x420, Size: 0x8]
	int PlayerNum;//[Offset: 0x428, Size: 0x4]
	bool bIsMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]
	FName LevelName;//[Offset: 0x430, Size: 0x8]
	FString ActorName;//[Offset: 0x438, Size: 0x10]
	FString ActorName;//[Offset: 0x448, Size: 0x10]
	FString ActorName;//[Offset: 0x458, Size: 0x10]
	FString ActorName;//[Offset: 0x468, Size: 0x10]
	FString CameraName;//[Offset: 0x478, Size: 0x10]
	FString CameraName;//[Offset: 0x488, Size: 0x10]
	FString CameraName;//[Offset: 0x498, Size: 0x10]
	FString CameraName;//[Offset: 0x4a8, Size: 0x10]
	SolarPlayerState*[] MyTeamPlayerState;//[Offset: 0x4b8, Size: 0x10]
	SolarPlayerState*[] DefenderTeamPlayerState;//[Offset: 0x4c8, Size: 0x10]
	UIDefenderPlaerShowWidget*[] ShowWidget;//[Offset: 0x4d8, Size: 0x10]
	Actor*[] OutActors;//[Offset: 0x4e8, Size: 0x10]
	SceneCapture2D*[] OutSceneCapture2Ds;//[Offset: 0x4f8, Size: 0x10]
	WidgetTransform[] Transforms;//[Offset: 0x508, Size: 0x10]
	void UpdateOpeningShow(enum TeamType);// 0x60d4078ea041
	void SwitchTeamShow(enum TeamType);// 0x60d3078ea041
	void ShowPlayerInfo();// 0x60d2078ea041
	void SetMyTeamPlayerState(out const SolarPlayerState*[] TeamPlayerState);// 0x60d1078ea041
	void SetDefenderTeamPlayerState(out const SolarPlayerState*[] TeamPlayerState);// 0x60d0078ea041
	void CloseDefenderTeamShowWidget();// 0x60cf078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UIDefenderPlaerShowWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	ScaleBox* ScaleBox_Card;//[Offset: 0x400, Size: 0x8]
	FString playerName;//[Offset: 0x408, Size: 0x10]
	int Level;//[Offset: 0x418, Size: 0x4]
	int RankLevelID;//[Offset: 0x41c, Size: 0x4]
	int PlayerGender;//[Offset: 0x420, Size: 0x4]
	bool bIsMyTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 0x1]
	int PlayerSeat;//[Offset: 0x428, Size: 0x4]
	bool bIsMySelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]
	int CardPose;//[Offset: 0x430, Size: 0x4]
	int Cardbackground;//[Offset: 0x434, Size: 0x4]
	ExpRankMedalData[] AllExpRankMedalData;//[Offset: 0x438, Size: 0x10]
	int CharacterExp;//[Offset: 0x448, Size: 0x4]
	MedalInfo[] TargetCardMedalArray;//[Offset: 0x450, Size: 0x10]
	SolarPlayerState* PlayerState;//[Offset: 0x460, Size: 0x8]
	SolarBusinessCardCharacter* RTCharacter;//[Offset: 0x468, Size: 0x8]
	Actor* RTCharacterBackground;//[Offset: 0x470, Size: 0x8]
	Vector RTLocation;//[Offset: 0x478, Size: 0xc]
	void SetPlayerShowInfo(SolarPlayerState* PS, bool bIsSelf, int Seat, bool bIsSelfTeam, int SelfLevel, Vector CardRTLocation);// 0x60ce078ea041
	void SetPlayerBusinessInfo(SolarPlayerState* PS, int PlayerNumber, ExpRankMedalData ExpRankMedalData);// 0x60cd078ea041
	void SetCharacterSkin();// 0x60cc078ea041
	void SetBusinessCard(int PoseId, int BackgroundId, int SkinId, ScaleBox* ParentPanel);// 0x60cb078ea041
	void OnRefreshWidget();// 0x60ca078ea041
	FString GetNameCardCharacterPathByCharacterIDAndCardPose(int CharacterId, int CardPoseID);// 0x60c9078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBusinessCardCharacter.Actor.Object
	void SetSkin(SkeletalMesh* LoadedSkinRes, MaterialInterface* LoadedCharaSkinRes);// 0x4f78078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x160, Size: 0x18]
	DataTable* TextStyleSet;//[Offset: 0x178, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x180, Size: 0x10]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x1a0, Size: 0x460]
	float MinDesiredWidth;//[Offset: 0x600, Size: 0x4]
	enum TextTransformPolicy;//[Offset: 0x604, Size: 0x1]
	TextBlockStyle DefaultTextStyle;//[Offset: 0x610, Size: 0x460]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0xa70, Size: 0x10]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x3f74078ea041
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x3f73078ea041
	void SetText(out const FText InText);// 0x3f72078ea041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3f71078ea041
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x3f70078ea041
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x3f6f078ea041
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x3f6e078ea041
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x3f6d078ea041
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x3f6c078ea041
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x3f6b078ea041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x3f6a078ea041
	FText GetText();// 0x3f69078ea041
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x3f68078ea041
	void ClearAllDefaultStyleOverrides();// 0x3f67078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x238, Size: 0x8]
	void OnInterpToggle(bool bEnable);// 0x6c6a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x228, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x3a8, Size: 0x1]
	float FOVAngle;//[Offset: 0x3ac, Size: 0x4]
	float OrthoWidth;//[Offset: 0x3b0, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x3b8, Size: 0x8]
	bool bAutoSceneCapture2DSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	byte CompositeMode;//[Offset: 0x3c1, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x3d0, Size: 0x5c0]
	float PostProcessBlendWeight;//[Offset: 0x990, Size: 0x4]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x994, Size: 0x1]
	float CustomNearClippingPlane;//[Offset: 0x998, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99c, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x9a0, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x9e4, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x9f0, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9fc, Size: 0x1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9fc, Size: 0x1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fd, Size: 0x1]
	bool bControlSceneCaptureComponent2DFPS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fe, Size: 0x1]
	int MaxSceneCaptureComponent2DFPS;//[Offset: 0xa00, Size: 0x4]
	void CaptureScene();// 0x6c6c078ea041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x6c6b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x314, Size: 0x1]
	byte CaptureSource;//[Offset: 0x315, Size: 0x1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x316, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x316, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x318, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x328, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x338, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x348, Size: 0x10]
	float LODDistanceFactor;//[Offset: 0x358, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x35c, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x360, Size: 0x4]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x368, Size: 0x10]
	FString ProfilingEventName;//[Offset: 0x388, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x6c43078ea041
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x6c42078ea041
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x6c41078ea041
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x6c40078ea041
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x6c3f078ea041
	void HideComponent(PrimitiveComponent* InComponent);// 0x6c3e078ea041
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x6c3d078ea041
	void ClearShowOnlyComponents();// 0x6c3c078ea041
	void ClearHiddenComponents();// 0x6c3b078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Common_Transition_Anim_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_Transition;//[Offset: 0x408, Size: 0x8]
	WidgetAnimation* Anim_Transition_Exit;//[Offset: 0x410, Size: 0x8]
	WidgetAnimation* Anim_Transition_Loop;//[Offset: 0x418, Size: 0x8]
	WidgetAnimation* Anim_Transition_Enter;//[Offset: 0x420, Size: 0x8]
	void OnSolarUIOpened();// 0x243df07b6a008
	void ExecuteUbergraph_UI_Common_Transition_Anim(int EntryPoint, int CallFunc_StaticPostAkEventByName_ReturnValue, int CallFunc_StaticPostAkEventByName_ReturnValue);// 0x2785c07b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_HeroPickManager_C.HeroPickManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2f8, Size: 0x8]
	delegate OnAllHeroPickEnd;//[Offset: 0x300, Size: 0x10]
	delegate OnSideHeroPickEnd;//[Offset: 0x310, Size: 0x10]
	void ReceiveAllHeroPickEnd();// 0xbc6b07b6a001
	void ReceiveTeamPickHeroEnd(FString TeamName);// 0xbc6c07b6a001
	void ExecuteUbergraph_BP_HeroPickManager(int EntryPoint, FString K2Node_Event_TeamName);// 0x2889007b6a008
	void OnSideHeroPickEnd__DelegateSignature(FString Side);// 0x2dffba07bda02e
	void OnAllHeroPickEnd__DelegateSignature();// 0xbcef078ea001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickManager.GameManagerBase.Info.Actor.Object
	delegate OnAllPlayersGotoPickHero;//[Offset: 0x228, Size: 0x1]
	HeroPickInfo*[] HeroPickArray;//[Offset: 0x240, Size: 0x10]
	HeroPickInfo*[] PendingRemoveHeroPickArray;//[Offset: 0x250, Size: 0x10]
	bool EnableLimitPickTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	bool UseOpeningTransitionAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	bool StartSkinUIAtTheBeginning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 0x1]
	float HeroPickTime;//[Offset: 0x264, Size: 0x4]
	float TransitionAnimTime;//[Offset: 0x268, Size: 0x4]
	float WaitingToStartTime;//[Offset: 0x26c, Size: 0x4]
	float WaitingForEndTime;//[Offset: 0x270, Size: 0x4]
	HeroPickRuleBase* AIPickRule;//[Offset: 0x278, Size: 0x8]
	float HeroRequestDuration;//[Offset: 0x280, Size: 0x4]
	SoftObjectPath[] ElementLevels;//[Offset: 0x288, Size: 0x10]
	bool bIsAllPlayerSelecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	<FName,LevelStreamingDynamic*> AllLevelMap;//[Offset: 0x2a0, Size: 0x50]
	bool TeamBeginHeroPick(FString TeamName);// 0x4823078ea041
	void SetHeroPickTime(float InHeroPickTime);// 0x4822078ea041
	void ReceiveTeamPickHeroEnd(FString TeamName);// 0x4821078ea041
	void ReceiveAllHeroPickEnd();// 0x4820078ea041
	bool PlayerBeginHeroPick(SolarPlayerState* Player);// 0x481f078ea041
	void OnLevelLoaded();// 0x481e078ea041
	void On_RepAllPlayerSelectEnd();// 0x481d078ea041
	void AllPlayersGotoPickHero();// 0x481c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeroPickRuleBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_SkillState
	enum UniqueAbility_4_1687CEEF476DE16EEE6A42B53EC116E7;//[Offset: 0x0, Size: 0x1]
	enum TacticsAbility_5_36D081C34231A20607055BA95F67E65B;//[Offset: 0x1, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	class CGFormula* Formula;//[Offset: 0x38, Size: 0x8]
	bool bAllowChangePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	SettlementPageConfig* SettlePageConfig;//[Offset: 0x48, Size: 0x8]
	<FString,SCMMapConfig> MapConfig;//[Offset: 0x50, Size: 0x50]
	float VictorySlomoDelay;//[Offset: 0xa0, Size: 0x4]
	float VictorySlomoDilation;//[Offset: 0xa4, Size: 0x4]
	float VictorySlomoDuration;//[Offset: 0xa8, Size: 0x4]
	CharacterMovementNetworkOptions VictoryMovementNetworkOptions;//[Offset: 0xac, Size: 0xc]
	<FString,float> VictorySFXAndVOMap;//[Offset: 0xb8, Size: 0x50]
	float VictoryMusicDelayTime;//[Offset: 0x108, Size: 0x4]
	FString VictoryMusicName;//[Offset: 0x110, Size: 0x10]
	float VictoryUIWaittime;//[Offset: 0x120, Size: 0x4]
	SoftObjectPath VictoryHitEffect;//[Offset: 0x128, Size: 0x18]
	FName VictoryHitSocketName;//[Offset: 0x140, Size: 0x8]
	float VictoryHitEffectDelayTime;//[Offset: 0x148, Size: 0x4]
	SoftObjectPath VictoryDeathEffect;//[Offset: 0x150, Size: 0x18]
	float VictoryDeathEffectDelayTime;//[Offset: 0x168, Size: 0x4]
	DataManagerConfig DataManagerConfig;//[Offset: 0x170, Size: 0x10]
	bool EnableUltimateSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	enum UltimateSkillStateOperationOnInit;//[Offset: 0x181, Size: 0x1]
	bool EnableTacticalSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 0x1]
	enum TacticalSkillStateOperationOnInit;//[Offset: 0x183, Size: 0x1]
	int AirDropSkillMode;//[Offset: 0x184, Size: 0x4]
	class GameplayAbility[] CharacterExtraAbilities;//[Offset: 0x188, Size: 0x10]
	bool EnableWeaponUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	int InitInGamePlayerLevel;//[Offset: 0x19c, Size: 0x4]
	bool EnablePlayerUpgrade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	InGameLevelingConfig InGameLevelingConfig;//[Offset: 0x1a8, Size: 0x8]
	enum[] CharacterDamageUpgradeTypes;//[Offset: 0x1b0, Size: 0x10]
	ExpItemConfig ExpItemConfig;//[Offset: 0x1c0, Size: 0x10]
	ExpItemReduceRate ExpItemReduceRateConfig;//[Offset: 0x1d0, Size: 0x8]
	BoxBurstItemConfig BoxBurstItemConfig;//[Offset: 0x1d8, Size: 0x8]
	bool bIfShouldSpawnDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bIfSupportDeathverge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 0x1]
	<int,int> DeathBoxEnergyLimitConfig;//[Offset: 0x1e8, Size: 0x50]
	bool bAutoMarkDamagedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	<enum,float> CustomParams;//[Offset: 0x240, Size: 0x50]
	float MoveSpeedScale;//[Offset: 0x290, Size: 0x4]
	float ShieldScale;//[Offset: 0x294, Size: 0x4]
	float HealthScale;//[Offset: 0x298, Size: 0x4]
	int Resurgence;//[Offset: 0x29c, Size: 0x4]
	bool EnableSect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	CustomRoomData CustomRoomData;//[Offset: 0x2a8, Size: 0xd8]
	bool bIsCustomRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool bEnableTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	float InitTrackingDelay;//[Offset: 0x384, Size: 0x4]
	float TrackingTimeInterval;//[Offset: 0x388, Size: 0x4]
	float DefaultTrackMaxRevealDistance;//[Offset: 0x38c, Size: 0x4]
	float TrackReplaceDistance;//[Offset: 0x390, Size: 0x4]
	float MinRevealDistance;//[Offset: 0x394, Size: 0x4]
	float TrackTimeout;//[Offset: 0x398, Size: 0x4]
	int MaxTrackNum;//[Offset: 0x39c, Size: 0x4]
	FinalsBGMData FinalsBGMData;//[Offset: 0x3a0, Size: 0x28]
	bool bEnableSkydivingTrail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 0x1]
	class Actor* FlyTrailClass;//[Offset: 0x3d0, Size: 0x28]
	class Actor* DebugTrailEffectClass;//[Offset: 0x3f8, Size: 0x28]
	bool TryGetCustomParam(enum InType, out float OutValue);// 0x45b5078ea041
	void SetCustomParam(enum InType, float InValue);// 0x45b4078ea041
	void OnRep_MoveSpeedScale();// 0x45b3078ea041
	bool IsEnableSect();// 0x45b2078ea041
	bool IsCustomRoomMode();// 0x45b1078ea041
	int GetRequiredExpForLevel(int InLevel);// 0x45b0078ea041
	int GetMaxShieldMatCountToDeathbox(const int InLevel);// 0x45af078ea041
	int GetMaxInGameLevel();// 0x45ae078ea041
	float GetExpItemReduceRate(int DeathCount);// 0x45ad078ea041
	int GetExpItemCountByLevel(const int InLevel, const int InLevelGap);// 0x45ac078ea041
	CustomRoomData GetCustomRoomData();// 0x45ab078ea041
	int[] GetBurstItemSplitPiles(const int ItemID);// 0x45aa078ea041
	Rotator GetBurstItemRotator(const int ItemID);// 0x45a9078ea041
	float[] GetBurstItemModelScale(const int ItemID);// 0x45a8078ea041
	int GetBurstItemMaxPileNum(const int ItemID);// 0x45a7078ea041
	int[] GetBurstItemIDs();// 0x45a6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGFormula.Info.Actor.Object
	KnockoutParams KnockoutParams;//[Offset: 0x228, Size: 0x28]
	bool bInitKnockParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]
	FString[] MakeStringForLuaByAnyStruct(Object* AnyStruct);// 0x45a0078ea041
	bool IsSettlementBagItem(SolarPlayerState* InPS);// 0x459f078ea041
	void InitKnockoutPointParams(out KnockoutParams InParams);// 0x459e078ea041
	int GetZomborg(SolarPlayerState* InPS);// 0x459d078ea041
	void GetWeeklyChallenge(FString InSolarPlayerID, out FString[] OutChallengeName, out int[] OutChallengeValue);// 0x459c078ea041
	int GetWeaponExp(SolarPlayerState* InPS, int InWeaponID);// 0x459b078ea041
	void GetTeamScoreComparison(SolarPlayerState* InPS, out FString OutTeamScore);// 0x459a078ea041
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult);// 0x4599078ea041
	void GetShowPageIndexs(SolarPlayerState* InPS, out const SettlePageParam InParam, out int[] OutResult);// 0x4598078ea041
	SettlementReward[] GetSettlementRewards(SolarPlayerState* InPS);// 0x4597078ea041
	FString[] GetPersonalResultPlayerExData(FString SolarPlayerID, out FString InPBName);// 0x4596078ea041
	float GetKDA(SolarPlayerState* InPS);// 0x4595078ea041
	FString[] GetGroupResultPlayerExData(FString SolarPlayerID, out FString InPBName);// 0x4594078ea041
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(SolarPlayerState* InPS);// 0x4593078ea041
	int GetCombatScore(SolarPlayerState* InPS);// 0x4592078ea041
	<int,int> GetCollectionItemRewards(SolarPlayerState* InPS);// 0x4591078ea041
	void GetCharacterExp(SolarPlayerState* InPS, out int OutGetExp, out int[] OutReason);// 0x4590078ea041
	int GetAccountExp(SolarPlayerState* InPS);// 0x458f078ea041
	int CalculateTeamRank(SolarPlayerState* InPS);// 0x458e078ea041
	enum[] CalculatePunish(SolarPlayerState* InPS);// 0x458d078ea041
	int CalculatePlayerRank(SolarPlayerState* InPS);// 0x458c078ea041
	float CalculateMVPScore(SolarPlayerState* InPS);// 0x458b078ea041
	int CalculateKnockoutPoints(const int InTeamRank, const int InKillNum, const float InTotalDamage, const float InTotalDamageTaken);// 0x458a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlePageParam
	int WeaponExpSettlmentNum;//[Offset: 0x0, Size: 0x4]
	bool IsRankFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SettlementPageConfig.DataAsset.Object
	int PageSkipIndex;//[Offset: 0x30, Size: 0x4]
	class SolarUWSettlementBase[] SettlementPage;//[Offset: 0x38, Size: 0x10]
	FString EnterSettleSoundEvent;//[Offset: 0x48, Size: 0x10]
	FString ExitSettleSoundEvent;//[Offset: 0x58, Size: 0x10]
	int[] PageIndexs;//[Offset: 0x68, Size: 0x10]
	bool IsCustomRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool IsSoloModePlayerDropout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool IsSoloModeAIEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMMapConfig
	FString Desc;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath LevelMap;//[Offset: 0x10, Size: 0x18]
	int MiniMapId;//[Offset: 0x28, Size: 0x4]
	bool IsStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	<FString,SCMElementMapConfig> ElementGroups;//[Offset: 0x30, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCMElementMapConfig
	SoftObjectPath ElementLevel;//[Offset: 0x0, Size: 0x18]
	bool LoadWithLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum LoadType;//[Offset: 0x19, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CharacterMovementNetworkOptions
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	float MaxLocationDifferenceToTrustClientMove;//[Offset: 0x4, Size: 0x4]
	enum ClientMoveTrustType;//[Offset: 0x8, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: DataManagerConfig
	DataTable* GeneralDataTable;//[Offset: 0x0, Size: 0x8]
	DataTable* DataTable;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InGameLevelingConfig
	DataTable* ExpTable;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExpItemConfig
	DataTable* ConfigTable;//[Offset: 0x0, Size: 0x8]
	DataTable* KilledConfigTable;//[Offset: 0x8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ExpItemReduceRate
	DataTable* ConfigTable;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BoxBurstItemConfig
	DataTable* ConfigTable;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: FinalsBGMData
	bool bEnableFinalsBGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte FinalsBGMSafeAreaIndex;//[Offset: 0x1, Size: 0x1]
	byte FinalsBGMPlayTeamCount;//[Offset: 0x2, Size: 0x1]
	byte FinalsBGMStopTeamCount;//[Offset: 0x3, Size: 0x1]
	FString FinalsBGMName_Play;//[Offset: 0x8, Size: 0x10]
	FString FinalsBGMName_Stop;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_ResurrectInfo
	bool bClearWeapons_8_85433FCD494E4E2DDCA2F6AB69D508C9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bClearAllItems_7_1B66870A49E70A4A31DBD1B93C1AE45D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bEmptyEnergy_9_422079A04E20412A0DD60594501D7D8C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bReChargeJetToFull_10_2649F2CB4F2A722D287E91848E966DBF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	enum ResurrectMethod_15_E3E0A84B479C7DB70DAAF88AAF99DA23;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CFG_Framework_C.CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	BP_ConfigSave_C* ModeConfig;//[Offset: 0x420, Size: 0x8]
	bool None;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 0x1]
	void GetSkillStateByNameEnum(byte Enum, out S_SkillState Out);// 0x1102b07b6a001
	static CustomRoomData GetCustomRoomData(bool Temp_bool_Variable, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, CustomRoomData K2Node_Select_Default);// 0x2fa64fb0
	bool IsCustomRoomMode(bool Temp_bool_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default);// 0x2dffba07bda02e
	void GetSavedConfig(out BP_ConfigSave_C* AsBP Config Save, out bool bSuccess, SaveGame* CallFunc_LoadGameFromSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ConfigSave_C* K2Node_DynamicCast_AsBP_Config_Save, bool K2Node_DynamicCast_bSuccess);// 0x1102f07b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_ConfigSave_C.SaveGame.Object
	bool bEnableAiTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bEnableCustomRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	CustomRoomData CustomRoomConfig;//[Offset: 0x30, Size: 0xd8]
	bool bIsCustomRoomHost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_BuyResurrection_C.SolarResurrectionComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x150, Size: 0x8]
	UI_BuyResurrectionPanel_C* UI_BuyResurrectionPanel;//[Offset: 0x158, Size: 0x8]
	BP_ReviveItemManger_BattleRoyale_C* ReviveItemManger;//[Offset: 0x160, Size: 0x8]
	int SuccessTime;//[Offset: 0x168, Size: 0x4]
	bool BuyResurrectionSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 0x1]
	float RemindTeammateEffectCooldown;//[Offset: 0x170, Size: 0x4]
	float BuyResurrectionInvincibleTime;//[Offset: 0x174, Size: 0x4]
	Vector RebornLoc;//[Offset: 0x178, Size: 0xc]
	void CheckAllTeammateDied(out bool IfAllDied, int CallFunc_Get_Alive_Team_Player_Num_Num, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x10fc107b6a001
	void RefreshUI(Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsPlayerLocallyControlled_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x10fc207b6a001
	SCMPlayerState*[] GetTeammatesArr(const FString[] Temp_string_Variable, const enum[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetTeamID_ReturnValue, const byte[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue);// 0x10fc307b6a001
	void On All Teammates Killed(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_ObjectToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, BPC_BuyResurrection_C* CallFunc_GetComponentByClass_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x10fc407b6a001
	void Get Alive Team Player Num(SCMPlayerState* OutPlayer, out int Num, int NumberOfSurvivingTeammates, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_ReviveItemManger_BattleRoyale_C* CallFunc_GetActorOfClass_ReturnValue, SCMPlayerState*[] CallFunc_GetTeammatesArr_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_IsPlayerReviving_ReturnValue, bool CallFunc_CanPlayerUseReviveItem_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x10fc507b6a001
	void Show Buy Resurrection UI(bool Visible, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, UI_BuyResurrectionPanel_C* K2Node_DynamicCast_AsUI_Buy_Resurrection_Panel, bool K2Node_DynamicCast_bSuccess);// 0x10fc607b6a001
	void Event_LeaveWhileWaiting();// 0x10fc707b6a001
	void ClientDoCameraFade();// 0x10fc807b6a001
	void Event_OnRevivingComplete(FString PlayerId);// 0x10fc907b6a001
	void Event_OnRevivedComplete();// 0x10fca07b6a001
	void Event_OnResurrectionStateChanged(enum LastState);// 0x7175078fd0d0
	void SetCharacterResVis(bool Vis);// 0xd9122093a6652c82
	void OnReviveSelf(bool bOverrideLocation, out const Vector ReviveLocation);// 0x10fcd07b6a001
	static void ExecuteUbergraph_BPC_BuyResurrection(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, GameplayEventData K2Node_MakeStruct_GameplayEventData, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_Get_Alive_Team_Player_Num_Num, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, const <FString,FString> K2Node_MakeMap_Map, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsServer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, const <FString,FString> K2Node_MakeMap_Map, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetUserID_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_IsValid_ReturnValue, FString K2Node_Event_PlayerID, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum K2Node_Event_LastState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_CustomEvent_Vis, GameplayEventData K2Node_MakeStruct_GameplayEventData, int Temp_int_Variable, bool K2Node_Event_bOverrideLocation, const Vector K2Node_Event_ReviveLocation, S_ResurrectInfo K2Node_MakeStruct_S_ResurrectInfo, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x10fcf07b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarResurrectionComponent.ActorComponent.Object
	byte bEnableResurrection;//[Offset: 0xb0, Size: 0x1]
	DeathTreasureBox* DeathBox;//[Offset: 0xb8, Size: 0x8]
	Vector DeathBoxLoc;//[Offset: 0xc0, Size: 0xc]
	enum ResurrectionState;//[Offset: 0xcc, Size: 0x1]
	delegate OnResurrectionStateChanged;//[Offset: 0xd0, Size: 0x10]
	float CurrentCountDownStartTime;//[Offset: 0xe0, Size: 0x4]
	float CountDownAccTime;//[Offset: 0xe4, Size: 0x4]
	float ConfigCountDownTime;//[Offset: 0xf0, Size: 0x4]
	float ResurrectionClutchTime;//[Offset: 0xf4, Size: 0x4]
	bool bIsTimeoutCountDownPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	delegate OnTimeoutCountDownStateChanged;//[Offset: 0x108, Size: 0x10]
	WorldMark_ReviveTeammates* DeathBoxMark;//[Offset: 0x118, Size: 0x8]
	class WorldMark_ReviveTeammates* DeathBoxMarkClass;//[Offset: 0x120, Size: 0x8]
	Actor* RebornLine;//[Offset: 0x128, Size: 0x8]
	class Actor* RebornLineClass;//[Offset: 0x130, Size: 0x8]
	int RemindTeammateRescueSoundID;//[Offset: 0x138, Size: 0x4]
	void TryContinueTimeoutCountDown();// 0x25df078ea041
	void SetResurrectionState(enum NewState, bool bShouldNotifyOnServer);// 0x25de078ea041
	void SetDeathBox(DeathTreasureBox* InDeathBox);// 0x25dd078ea041
	void ServerNotifyTeammatesHelp();// 0x25dc078ea041
	void OnTimeoutCountDownStateChanged__DelegateSignature(bool bPaused);// 0x25db078ea041
	void OnReviveSelf(bool bOverrideLocation, out const Vector ReviveLocation);// 0x25da078ea041
	void OnResurrectionStateChanged__DelegateSignature(enum NewState);// 0x25d9078ea041
	void OnRep_ResurrectionState(enum LastState);// 0x25d8078ea041
	void OnRep_DeathBox(DeathTreasureBox* LastDeathBox);// 0x25d7078ea041
	void OnRep_bIsTimeoutCountDownPaused();// 0x25d6078ea041
	void MulticastPlayMarkNotify();// 0x25d5078ea041
	void LazyPauseTimeoutCountDownByClutchTime();// 0x25d4078ea041
	float GetWaitTimeRemaining();// 0x25d3078ea041
	SolarCharacter* GetRevivingCharacter();// 0x25d2078ea041
	SolarCharacter* GetOwnerCharacter();// 0x25d1078ea041
	Vector GetDeathBoxLoc();// 0x25d0078ea041
	void Event_OnRevivingComplete(FString PlayerId);// 0x25cf078ea041
	void Event_OnRevivedComplete();// 0x25ce078ea041
	void Event_OnResurrectionStateChanged(enum LastState);// 0x25cc078ea041
	void EnterBuyResurrectionProcess();// 0x25cb078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_BuyResurrectionPanel_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	Panel_Interact_Progress_C* Panel_Interact_Progress;//[Offset: 0x408, Size: 0x8]
	CanvasPanel* Root;//[Offset: 0x410, Size: 0x8]
	UI_HUD_Notice_BuyResurrection_C* UI_HUD_Notice_BuyResurrection;//[Offset: 0x418, Size: 0x8]
	BPC_BuyResurrection_C* BuyComp;//[Offset: 0x420, Size: 0x8]
	FString NotifyString;//[Offset: 0x428, Size: 0x10]
	bool IsBeingRevived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 0x1]
	void Set Btn Vis(bool Show);// 0xbc4707b6a001
	void Set Btna And Tip Visibility(bool Visibility, Actor* CallFunc_GetOwner_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0xbc4807b6a001
	void Event_Init(BPC_BuyResurrection_C* BuyComp);// 0xbc4907b6a001
	void EventOnStateChange(enum NewState);// 0xbc4a07b6a001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0xbc4b07b6a001
	void OnReviveStateChange(SolarPlayerState* RevivingMePlayer);// 0x2fa630c0
	void BndEvt__Panel_Interact_Progress_K2Node_ComponentBoundEvent_1_SimpleDynamicMulticastDelegate__DelegateSignature();// 0xbf1b07b6a001
	void Notify Teammate Revive();// 0xbc5107b6a001
	void ExecuteUbergraph_UI_BuyResurrectionPanel(int EntryPoint, const <FString,FString> Temp_string_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_GetNoticeFormatText_ReturnValue, BPC_BuyResurrection_C* K2Node_CustomEvent_BuyComp, enum K2Node_CustomEvent_NewState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_GetWaitTimeRemaining_ReturnValue, int CallFunc_FTrunc_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_IsValid_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromUI_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarPlayerState* K2Node_CustomEvent_RevivingMePlayer, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromUI_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2888f07b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: Panel_Interact_Progress_C.SolarProgressiveInteractButton.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4b0, Size: 0x8]
	WidgetAnimation* Enter_Anim;//[Offset: 0x4b8, Size: 0x8]
	WidgetAnimation* Select_Anim;//[Offset: 0x4c0, Size: 0x8]
	SolarButton* Btn_Interact;//[Offset: 0x4c8, Size: 0x8]
	WidgetSwitcher* CancelableSwitcher;//[Offset: 0x4d0, Size: 0x8]
	Image* Img_Icon;//[Offset: 0x4d8, Size: 0x8]
	Image* img_Icon_Light;//[Offset: 0x4e0, Size: 0x8]
	Image* Img_Light;//[Offset: 0x4e8, Size: 0x8]
	Image* Img_Light;//[Offset: 0x4f0, Size: 0x8]
	WidgetSwitcher* InteractableSwitcher;//[Offset: 0x4f8, Size: 0x8]
	CanvasPanel* Panel_CD;//[Offset: 0x500, Size: 0x8]
	SolarAdapterWidget* Panel_Interact_KeyMapping;//[Offset: 0x508, Size: 0x8]
	CanvasPanel* Panel_Progress_CountDown;//[Offset: 0x510, Size: 0x8]
	CanvasPanel* Panel_ReduceCD;//[Offset: 0x518, Size: 0x8]
	UI_Button_ReduceCD_Clock_C* ReduceCD_Clock;//[Offset: 0x520, Size: 0x8]
	UI_Button_ReduceCD_Light_C* ReduceCD_Light;//[Offset: 0x528, Size: 0x8]
	SolarTextBlock* Txt_Cancel;//[Offset: 0x530, Size: 0x8]
	SolarTextBlock* Txt_Interact;//[Offset: 0x538, Size: 0x8]
	SolarTextBlock* Txt_Interact_Desktop;//[Offset: 0x540, Size: 0x8]
	UI_Button_Selected_Anim_C* UI_Button_Selected_Anim;//[Offset: 0x548, Size: 0x8]
	UI_Skill_CDRefresh_Anim_C* UI_Skill_CDRefresh_Anim;//[Offset: 0x550, Size: 0x8]
	enum State;//[Offset: 0x558, Size: 0x1]
	byte InteractType;//[Offset: 0x559, Size: 0x1]
	bool ShowProgressBarPrevInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55a, Size: 0x1]
	bool NonProgressText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55b, Size: 0x1]
	bool HideNonCancellableTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 0x1]
	void RefreshToNonCancellableInteracting();// 0xc02807b6a001
	void RefreshToCancellableInteracting();// 0xc02907b6a001
	void RefreshToPreInteract();// 0xc02a07b6a001
	void PlayFadeInAnim();// 0xc02b07b6a001
	void HidePassiveBuff();// 0xc02c07b6a001
	void ShowPassiveBuff(int CharacterId, int LocalTextId);// 0xc02d07b6a001
	void EnablePassiveBuffDisplay(int CharacterId, int LocalTextId);// 0xc02e07b6a001
	void SetProgressBarRatio(float Ratio);// 0xc02f07b6a001
	void SetProgressBarVisiblity(bool bShow, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0xc03007b6a001
	static void SetInteractType(byte InteractType, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, byte Temp_byte_Variable, int K2Node_Select_Default, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, byte Temp_byte_Variable, Vector2D K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default);// 0xc03107b6a001
	void UpdateStateView(enum InState, byte Temp_byte_Variable, bool K2Node_SwitchEnum_CmpSuccess, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte K2Node_Select_Default, byte K2Node_Select_Default);// 0xc03207b6a001
	void PreConstruct(bool IsDesignTime);// 0xc03307b6a001
	void Construct();// 0xc03407b6a001
	void BP_UpdateStateView(enum InState);// 0xc03507b6a001
	void BndEvt__Btn_Interact_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0xc03607b6a001
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0xd9122093a6652c82
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x1633207b6a001
	void ExecuteUbergraph_Panel_Interact_Progress(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, enum K2Node_Event_InState, bool CallFunc_IsPlatformDesktop_ReturnValue, enum K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, const WidgetAnimation* K2Node_Event_Animation, enum K2Node_Select_Default, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, const WidgetAnimation* K2Node_Event_Animation, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x1c71e078ea001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarProgressiveInteractButton.SolarUserWidget.UserWidget.Widget.Visual.Object
	delegate OnCompleteDelegate;//[Offset: 0x400, Size: 0x10]
	delegate OnCancelDelegate;//[Offset: 0x410, Size: 0x10]
	delegate OnStartInteract;//[Offset: 0x420, Size: 0x10]
	bool bIsInCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 0x1]
	GaugeImage* Image_GameProgressBar;//[Offset: 0x468, Size: 0x8]
	SolarTextBlock* Text_GameProgressTime;//[Offset: 0x470, Size: 0x8]
	Button* BTN_GameProgressCancel;//[Offset: 0x478, Size: 0x8]
	TextBlock* Text_GameProgressTips;//[Offset: 0x480, Size: 0x8]
	HorizontalBox* HorizontalBox_Cancel;//[Offset: 0x488, Size: 0x8]
	HUDPassiveHeadWidget* Panel_PassiveBuff;//[Offset: 0x490, Size: 0x8]
	Overlay* Overlay_CD;//[Offset: 0x498, Size: 0x8]
	GaugeImage* Image_CD;//[Offset: 0x4a0, Size: 0x8]
	SolarTextBlock* Txt_CDTime;//[Offset: 0x4a8, Size: 0x8]
	void UpdateGameProgressTipsText(const int InTextId);// 0x28f5078ea041
	void UpdateGameProgressText();// 0x28f4078ea041
	void UpdateGameProgressBarPercent(const float InPercent);// 0x28f3078ea041
	void UpdateGameProgress(const float InAddition);// 0x28f2078ea041
	void TryCancelInteraction();// 0x28f1078ea041
	void StopGameProgress(const int InActionID);// 0x28f0078ea041
	void StopCountDownProgress(const int InActionID);// 0x28ef078ea041
	void StartCountDownProgress(out const CountDownInfo InCountInfo);// 0x28ee078ea041
	void SimpleDynamicMulticastDelegate__DelegateSignature();// 0x28ed078ea041
	void ShowPassiveBuff(int CharacterId, int LocalTextId);// 0x28ec078ea041
	void RefreshToPreInteract();// 0x28eb078ea041
	void RefreshToNonCancellableInteracting();// 0x28ea078ea041
	void RefreshToCancellableInteracting();// 0x28e9078ea041
	void OnSteamCancelCountDown();// 0x28e8078ea041
	void OnParentVisibilityChanged(const bool bVisible);// 0x28e7078ea041
	void OnCompleteInternal();// 0x28e6078ea041
	void OnCancelButtonClicked();// 0x28e5078ea041
	void HidePassiveBuff();// 0x28e4078ea041
	void EnterCD(float TotalTime, float StartTime);// 0x28e3078ea041
	void BP_UpdateStateView(enum InState);// 0x28e2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CountDownInfo
	int TextID;//[Offset: 0x0, Size: 0x4]
	float Time;//[Offset: 0x4, Size: 0x4]
	float RemainingTime;//[Offset: 0x8, Size: 0x4]
	bool bShowBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int PassiveTextID;//[Offset: 0x10, Size: 0x4]
	GameplayTag GameplayTag;//[Offset: 0x14, Size: 0x8]
	int ContributorCharacterId;//[Offset: 0x40, Size: 0x4]
	enum State;//[Offset: 0x44, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GaugeImage.UserWidget.Widget.Visual.Object
	enum GaugeType;//[Offset: 0x260, Size: 0x1]
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 0x1]
	Vector2D ImageSize;//[Offset: 0x264, Size: 0x8]
	float InitialDegree;//[Offset: 0x26c, Size: 0x4]
	bool bSymmetric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	Vector2D CenterOffset;//[Offset: 0x274, Size: 0x8]
	Object* ResourceObject;//[Offset: 0x280, Size: 0x8]
	float Progress;//[Offset: 0x288, Size: 0x4]
	MaterialInterface* MaterialDegree360;//[Offset: 0x290, Size: 0x8]
	MaterialInterface* MaterialDegree180;//[Offset: 0x298, Size: 0x8]
	MaterialInterface* MaterialDegree90;//[Offset: 0x2a0, Size: 0x8]
	MaterialInterface* MaterialDegreeLR;//[Offset: 0x2a8, Size: 0x8]
	MaterialInterface* MaterialDegreeUD;//[Offset: 0x2b0, Size: 0x8]
	Image* TargetImage;//[Offset: 0x2b8, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x2c0, Size: 0x8]
	void UpdateProgress(float InProgress);// 0x47ee078ea041
	void SetProgress(float InProgress);// 0x47ed078ea041
	void SetImage(Object* RO);// 0x47ec078ea041
	Image* GetInternalImage();// 0x47eb078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x6410078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x6414078ea041
	void SetSize(SlateChildSize InSize);// 0x6413078ea041
	void SetPadding(Margin InPadding);// 0x6412078ea041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x6411078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4]
	byte SizeRule;//[Offset: 0x4, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUDPassiveHeadWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	Image* Img_Head;//[Offset: 0x400, Size: 0x8]
	SolarTextBlock* Txt_Buff;//[Offset: 0x408, Size: 0x8]
	void SetData(int InContributorCharacterId, int InLocalTipsID);// 0x4937078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarButton.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x150, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x160, Size: 0x3e0]
	byte ImageFillType;//[Offset: 0x540, Size: 0x1]
	float ImageFillRatioHorizontal;//[Offset: 0x544, Size: 0x4]
	float ImageFillRatioVertical;//[Offset: 0x548, Size: 0x4]
	float ImageFillPixelLeft;//[Offset: 0x54c, Size: 0x4]
	float ImageFillPixelTop;//[Offset: 0x550, Size: 0x4]
	float ImageFillPixelRight;//[Offset: 0x554, Size: 0x4]
	float ImageFillPixelBottom;//[Offset: 0x558, Size: 0x4]
	LinearColor ColorAndOpacity;//[Offset: 0x55c, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x56c, Size: 0x10]
	bool bReleaseUnfocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 0x1]
	bool bEnableClickSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57d, Size: 0x1]
	FString ClickSoundEventName;//[Offset: 0x580, Size: 0x10]
	byte ClickMethod;//[Offset: 0x590, Size: 0x1]
	byte TouchMethod;//[Offset: 0x591, Size: 0x1]
	byte PressMethod;//[Offset: 0x592, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x593, Size: 0x1]
	delegate OnClicked;//[Offset: 0x598, Size: 0x10]
	delegate OnPressed;//[Offset: 0x5a8, Size: 0x10]
	delegate OnReleased;//[Offset: 0x5b8, Size: 0x10]
	delegate OnHovered;//[Offset: 0x5c8, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x5d8, Size: 0x10]
	delegate OnFocusLosted;//[Offset: 0x5e8, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x4f80078ea041
	void SetStyle(out const ButtonStyle InStyle);// 0x4f7f078ea041
	void SetPressMethod(byte InPressMethod);// 0x4f7e078ea041
	void SetImageFillType(byte InImageFillType);// 0x4f7d078ea041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4f7c078ea041
	void SetClickMethod(byte InClickMethod);// 0x4f7b078ea041
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x4f7a078ea041
	bool IsPressed();// 0x4f79078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Button_ReduceCD_Clock_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	Image* Img_Light;//[Offset: 0x408, Size: 0x8]
	Image* MI_Clock;//[Offset: 0x410, Size: 0x8]
	LinearColor ClockColor;//[Offset: 0x418, Size: 0x10]
	LinearColor LightColor;//[Offset: 0x428, Size: 0x10]
	void PreConstruct(bool IsDesignTime);// 0x1368407b6a008
	void ExecuteUbergraph_UI_Button_ReduceCD_Clock(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x268c107b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Button_ReduceCD_Light_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Image* MI_RingGlow;//[Offset: 0x268, Size: 0x8]
	Image* MI_RingGlow;//[Offset: 0x270, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8]
	float Size;//[Offset: 0x280, Size: 0x4]
	LinearColor Color;//[Offset: 0x284, Size: 0x10]
	void RefreshColor();// 0x12b58078ea041
	void PreConstruct(bool IsDesignTime);// 0x7729078fdc60
	void ExecuteUbergraph_UI_Button_ReduceCD_Light(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x268ab07b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x160, Size: 0x4]
	float HeightOverride;//[Offset: 0x164, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0x168, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0x16c, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0x170, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x174, Size: 0x4]
	float MinAspectRatio;//[Offset: 0x178, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0x17c, Size: 0x4]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x180, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x180, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x180, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x180, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x180, Size: 0x1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x180, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x180, Size: 0x1]
	void SetWidthOverride(float InWidthOverride);// 0x3fa7078ea041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3fa6078ea041
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x3fa5078ea041
	void SetMinAspectRatio(float InMinAspectRatio);// 0x3fa4078ea041
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x3fa3078ea041
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x3fa2078ea041
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x3fa1078ea041
	void SetHeightOverride(float InHeightOverride);// 0x3fa0078ea041
	void ClearWidthOverride();// 0x3f9f078ea041
	void ClearMinDesiredWidth();// 0x3f9e078ea041
	void ClearMinDesiredHeight();// 0x3f9d078ea041
	void ClearMinAspectRatio();// 0x3f9c078ea041
	void ClearMaxDesiredWidth();// 0x3f9b078ea041
	void ClearMaxDesiredHeight();// 0x3f9a078ea041
	void ClearMaxAspectRatio();// 0x3f99078ea041
	void ClearHeightOverride();// 0x3f98078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Button_Selected_Anim_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	WidgetAnimation* Select_Anim;//[Offset: 0x268, Size: 0x8]
	Image* MI_Circle_01;//[Offset: 0x270, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8]
	float Size;//[Offset: 0x280, Size: 0x4]
	LinearColor Color;//[Offset: 0x284, Size: 0x10]
	void PreConstruct(bool IsDesignTime);// 0xcfb607b6a001
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x12b5b078ea041
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x2dffba07bda02e
	void ExecuteUbergraph_UI_Button_Selected_Anim(int EntryPoint, const WidgetAnimation* K2Node_Event_Animation, bool K2Node_Event_IsDesignTime, const WidgetAnimation* K2Node_Event_Animation, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x12b6d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Skill_CDRefresh_Anim_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	WidgetAnimation* Refresh_Anim;//[Offset: 0x268, Size: 0x8]
	Image* MI_Glow;//[Offset: 0x270, Size: 0x8]
	Image* MI_RingGlow;//[Offset: 0x278, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x280, Size: 0x8]
	float Size;//[Offset: 0x288, Size: 0x4]
	LinearColor Color;//[Offset: 0x28c, Size: 0x10]
	void SetColor(LinearColor Color);// 0xcfea07b6a001
	void Play(bool CallFunc_IsAnimationPlaying_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0xcfeb07b6a001
	void RefreshColor();// 0xcfec07b6a001
	void PreConstruct(bool IsDesignTime);// 0x12b5a078ea041
	void Construct();// 0xcfee07b6a001
	void ExecuteUbergraph_UI_Skill_CDRefresh_Anim(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2dffba07bda02e
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_HUD_Notice_BuyResurrection_C.UI_NoticeBase_C.UINoticeBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x428, Size: 0x8]
	WidgetAnimation* ant_exit;//[Offset: 0x430, Size: 0x8]
	WidgetAnimation* Appear_Anim;//[Offset: 0x438, Size: 0x8]
	Image* Img_Txt_bg;//[Offset: 0x440, Size: 0x8]
	RichTextBlock* Txt_Ballte_Notice;//[Offset: 0x448, Size: 0x8]
	SolarTextBlock* Txt_Ballte_Notice;//[Offset: 0x450, Size: 0x8]
	SolarTextBlock* Txt_Ballte_Notice;//[Offset: 0x458, Size: 0x8]
	void Construct();// 0x1459307b6a008
	void ShowNotice(FString Text, float Duration);// 0xffffff8b078ea002
	void ExecuteUbergraph_UI_HUD_Notice_BuyResurrection(int EntryPoint, FString K2Node_CustomEvent_Text, float K2Node_CustomEvent_Duration, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x20a96078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUDDispatcherBase.Object
	delegate OnSkydivingLeaderIndexReplicated;//[Offset: 0x38, Size: 0x10]
	delegate OnSkydivingMemberStatusUpdated;//[Offset: 0x48, Size: 0x10]
	delegate TrySkydiveUnfollow;//[Offset: 0x58, Size: 0x10]
	float SkydivingLeaderTransferCooldown;//[Offset: 0xc0, Size: 0x4]
	float SkydivingLeaderVoiceCooldown;//[Offset: 0xc4, Size: 0x4]
	delegate OnTeammateStateReplicated;//[Offset: 0x100, Size: 0x10]
	delegate OnTeammatePlayerStateReplicated;//[Offset: 0x110, Size: 0x10]
	delegate OnCharacterPSInGameChanged;//[Offset: 0x120, Size: 0x10]
	delegate OnPlayerOperationInGameChanged;//[Offset: 0x130, Size: 0x10]
	delegate OnTeammatePSRemoveWhenPreparation;//[Offset: 0x140, Size: 0x10]
	delegate OnTeammatePSRemoveWhenBattle;//[Offset: 0x150, Size: 0x10]
	delegate OnTeammateHPChanged;//[Offset: 0x160, Size: 0x10]
	delegate OnTeammateShieldChanged;//[Offset: 0x170, Size: 0x10]
	delegate OnTeammateReviveItemChanged;//[Offset: 0x180, Size: 0x10]
	delegate OnTeammateReviveManagerChanged;//[Offset: 0x190, Size: 0x10]
	delegate OnReviveStateChanged;//[Offset: 0x1a0, Size: 0x10]
	delegate OnTeammateReviveStateChanged;//[Offset: 0x1b0, Size: 0x10]
	delegate OnTeammateResurrectTimeChanged;//[Offset: 0x1c0, Size: 0x10]
	delegate OnTeammateCallForHelpNotify;//[Offset: 0x1d0, Size: 0x10]
	delegate OnRemindTeammateRescueNotify;//[Offset: 0x1e0, Size: 0x10]
	delegate OnTeammateHUDOutScreen;//[Offset: 0x1f0, Size: 0x10]
	delegate OnTeammateHUDIntoScreen;//[Offset: 0x200, Size: 0x10]
	delegate OnKillLeaderChangedNotify;//[Offset: 0x220, Size: 0x10]
	delegate OnTeammateNetStateChanged;//[Offset: 0x270, Size: 0x10]
	delegate OnNavMapMarked;//[Offset: 0x280, Size: 0x10]
	delegate OnNavMapMarkCleared;//[Offset: 0x290, Size: 0x10]
	delegate OnTalentInitialized;//[Offset: 0x2a0, Size: 0x10]
	delegate OnTeammateCharacterIdChanged;//[Offset: 0x2b0, Size: 0x10]
	delegate OnTeammateSkinIdChanged;//[Offset: 0x2c0, Size: 0x10]
	delegate OnLevelChanged;//[Offset: 0x2d0, Size: 0x10]
	delegate OnSkillCDStateChanged;//[Offset: 0x2e0, Size: 0x10]
	delegate OnTeammateTalentStateChanged;//[Offset: 0x2f0, Size: 0x10]
	delegate OnSpecTargetChanged;//[Offset: 0x300, Size: 0x10]
	delegate OnBindHPPanelDelegate;//[Offset: 0x310, Size: 0x10]
	delegate OnBindItemPanelDelegate;//[Offset: 0x320, Size: 0x10]
	delegate OnBindPowerBarDelegate;//[Offset: 0x330, Size: 0x10]
	delegate OnRefreshBackpackItemDelegate;//[Offset: 0x340, Size: 0x10]
	delegate OnRefreshBackpackEquipDelegate;//[Offset: 0x350, Size: 0x10]
	delegate OnRefreshBackpackWeaponDelegate;//[Offset: 0x360, Size: 0x10]
	delegate OnRefreshBackpackWeaponPartDelegate;//[Offset: 0x370, Size: 0x10]
	delegate OnRefreshBroadCastModeDelegate;//[Offset: 0x380, Size: 0x10]
	delegate OnSetActiveOpenBoxBtnDelegate;//[Offset: 0x390, Size: 0x10]
	delegate OnSetActiveOpenBoxProgressDelegate;//[Offset: 0x3a0, Size: 0x10]
	delegate OnSetTreasureBoxActorDelegate;//[Offset: 0x3b0, Size: 0x10]
	delegate OnSetAirdropBoxActorDelegate;//[Offset: 0x3c0, Size: 0x10]
	delegate OnHideTreasureBoxUIDelegate;//[Offset: 0x3d0, Size: 0x10]
	delegate OnHideAirdropBoxUIDelegate;//[Offset: 0x3e0, Size: 0x10]
	delegate OnSetPickupSwitchDelegate;//[Offset: 0x3f0, Size: 0x10]
	delegate OnAirdropCharChangeDelegate;//[Offset: 0x400, Size: 0x10]
	delegate OnAirdropProgressChangeDelegate;//[Offset: 0x410, Size: 0x10]
	delegate OnPlayerNumberChanged;//[Offset: 0x420, Size: 0x10]
	delegate OnCapsulePlayerNumChanged;//[Offset: 0x430, Size: 0x10]
	delegate OnBombingStarted;//[Offset: 0x440, Size: 0x10]
	delegate OnBombingStopped;//[Offset: 0x450, Size: 0x10]
	delegate OnItemDiscarded;//[Offset: 0x460, Size: 0x10]
	delegate OnSettingRequestOpened;//[Offset: 0x470, Size: 0x10]
	delegate OnSettingRequestClosed;//[Offset: 0x480, Size: 0x10]
	delegate OnMigrateAccountVisibilityRequestChanged;//[Offset: 0x490, Size: 0x10]
	delegate OnCustomizeVisibilityRequestChanged;//[Offset: 0x4a0, Size: 0x10]
	delegate OnDriveCustomizeOpened;//[Offset: 0x4b0, Size: 0x10]
	delegate OnDriveCustomizeClosed;//[Offset: 0x4c0, Size: 0x10]
	delegate OnBackpackTookPickup;//[Offset: 0x4d0, Size: 0x10]
	delegate OnBackpackReleasedPickup;//[Offset: 0x4e0, Size: 0x10]
	delegate OnToggleCursorVisibility;//[Offset: 0x4f0, Size: 0x10]
	delegate OnBackpackVisibilitySet;//[Offset: 0x500, Size: 0x10]
	delegate OnElectricShopVisibilitySet;//[Offset: 0x510, Size: 0x10]
	delegate OnBigMapVisibilitySet;//[Offset: 0x520, Size: 0x10]
	delegate OnRescueBtnVisibilitySet;//[Offset: 0x530, Size: 0x10]
	delegate OnBuyResurrectBtnVisibilitySet;//[Offset: 0x540, Size: 0x10]
	delegate OnBigMapCloseButtonClicked;//[Offset: 0x550, Size: 0x10]
	delegate OnPickupFlagChanged;//[Offset: 0x560, Size: 0x10]
	delegate OnPickupListVisibilityChanged;//[Offset: 0x570, Size: 0x10]
	delegate OnPickupItemSet;//[Offset: 0x580, Size: 0x10]
	delegate OnPickupItemCalculated;//[Offset: 0x590, Size: 0x10]
	delegate OnPickupCheckValidUpdated;//[Offset: 0x5a0, Size: 0x10]
	delegate OnPickupCheckHighlightUpdated;//[Offset: 0x5b0, Size: 0x10]
	delegate OnPickupCheckStatesUpdated;//[Offset: 0x5c0, Size: 0x10]
	delegate OnPickupItemSelected;//[Offset: 0x5d0, Size: 0x10]
	delegate OnTogglePickupDelegate;//[Offset: 0x5e0, Size: 0x10]
	delegate OnPickupListDataUpdated;//[Offset: 0x5f0, Size: 0x10]
	delegate OnPickupSingleDataUpdated;//[Offset: 0x600, Size: 0x10]
	delegate OnPlayerDead;//[Offset: 0x610, Size: 0x10]
	delegate OnJoyStickSprintStateReset;//[Offset: 0x620, Size: 0x10]
	delegate OnJoyStickInputReset;//[Offset: 0x630, Size: 0x10]
	delegate OnJoyStickResetAll;//[Offset: 0x640, Size: 0x10]
	delegate OnTutorialSequenceRequested;//[Offset: 0x650, Size: 0x10]
	delegate OnDrivingTutorialStopped;//[Offset: 0x660, Size: 0x10]
	delegate OnFireButtonsInputReset;//[Offset: 0x670, Size: 0x10]
	delegate OnTeamDeathMatchLeaderboard;//[Offset: 0x680, Size: 0x10]
	delegate OnGameModeChangeWeapon;//[Offset: 0x690, Size: 0x10]
	bool bBackpackVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 0x1]
	bool bElectricShopVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a1, Size: 0x1]
	bool bBigMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a2, Size: 0x1]
	bool bMapVehicleSpawnListVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a3, Size: 0x1]
	bool bRescueBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a4, Size: 0x1]
	bool bBuyResurrectBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a5, Size: 0x1]
	delegate OnInBattle;//[Offset: 0x6a8, Size: 0x10]
	delegate OnNotInBattle;//[Offset: 0x6b8, Size: 0x10]
	delegate OnRadarStationUpdated;//[Offset: 0x6c8, Size: 0x10]
	delegate OnAngleViewEnabled;//[Offset: 0x6d8, Size: 0x10]
	delegate OnCharacterSwimStateChanged;//[Offset: 0x6e8, Size: 0x10]
	delegate OnCharacterWaterClimbAvailable;//[Offset: 0x6f8, Size: 0x10]
	delegate OnHitTraceAdded;//[Offset: 0x708, Size: 0x10]
	delegate OnHitTraceCleared;//[Offset: 0x718, Size: 0x10]
	delegate OnProfessionFunctionalChanged;//[Offset: 0x728, Size: 0x10]
	delegate OnPickupListAdd;//[Offset: 0x738, Size: 0x10]
	delegate OnPickupListRemove;//[Offset: 0x748, Size: 0x10]
	delegate OnTeammateStateChanged;//[Offset: 0x758, Size: 0x10]
	delegate OnRepliableMessageChanged;//[Offset: 0x768, Size: 0x10]
	delegate OnPlayerFlagDisplayChanged;//[Offset: 0x778, Size: 0x10]
	delegate OnSpectateModeEntered;//[Offset: 0x788, Size: 0x10]
	delegate OnSpectateModeExited;//[Offset: 0x798, Size: 0x10]
	delegate OnSpectateReferToChanged;//[Offset: 0x7a8, Size: 0x10]
	delegate OnSpectateTargetItemsChanged;//[Offset: 0x7b8, Size: 0x10]
	delegate OnPlayersCountChanged;//[Offset: 0x7c8, Size: 0x10]
	delegate OnEndMatchCountdownChanged;//[Offset: 0x7d8, Size: 0x10]
	delegate OnMarkButtonHoverChanged;//[Offset: 0x7e8, Size: 0x10]
	delegate OnMarkButtonTouchMoved;//[Offset: 0x7f8, Size: 0x10]
	delegate OnMarkButtonTouchMovedByGamepad;//[Offset: 0x808, Size: 0x10]
	delegate OnMarkButtonBeenLongPressed;//[Offset: 0x818, Size: 0x10]
	delegate OnMarkButtonDragSelectEnded;//[Offset: 0x828, Size: 0x10]
	delegate OnBattleModeChanged;//[Offset: 0x838, Size: 0x10]
	delegate OnCharacterSet;//[Offset: 0x850, Size: 0x10]
	delegate OnCharacterIDSet;//[Offset: 0x860, Size: 0x10]
	delegate OnCharacterHPChanged;//[Offset: 0x870, Size: 0x10]
	delegate OnCharacterDead;//[Offset: 0x8a0, Size: 0x10]
	delegate OnCharacterEnterWater;//[Offset: 0x8b0, Size: 0x10]
	delegate OnCharacterSelfRebirth;//[Offset: 0x8c0, Size: 0x10]
	delegate OnCharacterLevelUp;//[Offset: 0x8d0, Size: 0x10]
	delegate OnCharacterGainExp;//[Offset: 0x8e0, Size: 0x10]
	delegate OnCharacterLevelExpChanged;//[Offset: 0x8f0, Size: 0x10]
	delegate OnCharacterAllReady;//[Offset: 0x900, Size: 0x10]
	delegate OnBattleUpgradeEffect;//[Offset: 0x910, Size: 0x10]
	delegate OnSelectingBattleUpgradeEffectBegin;//[Offset: 0x920, Size: 0x10]
	delegate OnSelectingBattleUpgradeEffectFinish;//[Offset: 0x930, Size: 0x10]
	delegate OnSpectateBattleUpgradeEffectUpdate;//[Offset: 0x940, Size: 0x10]
	delegate OnTeammateRebirth;//[Offset: 0x950, Size: 0x10]
	delegate OnDamagingActorsChange;//[Offset: 0x960, Size: 0x10]
	delegate OnAimingEnemy;//[Offset: 0x970, Size: 0x10]
	delegate OnScoutCharactersChange;//[Offset: 0x980, Size: 0x10]
	delegate OnDoppelgangerActive;//[Offset: 0x990, Size: 0x10]
	delegate OnCharacterLevelChanged;//[Offset: 0x9a8, Size: 0x10]
	delegate OnRapidBoostActivationChanged;//[Offset: 0x9c8, Size: 0x10]
	delegate OnTrySpawnSuperRadar;//[Offset: 0x9d8, Size: 0x10]
	delegate OnSuperScaningStart;//[Offset: 0x9e8, Size: 0x10]
	delegate OnSuperScaningRemovePlayer;//[Offset: 0x9f8, Size: 0x10]
	delegate OnSuperScaningEnd;//[Offset: 0xa08, Size: 0x10]
	delegate OnSuperScanCameraMoveForward;//[Offset: 0xa18, Size: 0x10]
	delegate OnSuperScanCameraMoveRight;//[Offset: 0xa28, Size: 0x10]
	delegate OnSuperScaningWidgetShow;//[Offset: 0xa38, Size: 0x10]
	delegate OnRoleAbilityChange;//[Offset: 0xa58, Size: 0x10]
	delegate OnRoleAbilityStartCD;//[Offset: 0xa68, Size: 0x10]
	delegate OnRoleAbilityEndCD;//[Offset: 0xa78, Size: 0x10]
	delegate OnRoleAbilityCDDurationChange;//[Offset: 0xa88, Size: 0x10]
	delegate OnRoleAbilityStartCDUTCTimeUpdate;//[Offset: 0xa98, Size: 0x10]
	delegate OnRoleAbilityStateChange;//[Offset: 0xaa8, Size: 0x10]
	delegate OnRoleAbilityEnd;//[Offset: 0xab8, Size: 0x10]
	delegate OnRoleAbilityContinous;//[Offset: 0xac8, Size: 0x10]
	delegate OnRoleAbilityBuffContinous;//[Offset: 0xad8, Size: 0x10]
	delegate OnRoleAbilityBuffUpdate;//[Offset: 0xae8, Size: 0x10]
	delegate OnRoleAbilityBuffEnd;//[Offset: 0xaf8, Size: 0x10]
	delegate OnRoleAbilityBuffPause;//[Offset: 0xb08, Size: 0x10]
	delegate OnRoleAbilityBuffResume;//[Offset: 0xb18, Size: 0x10]
	delegate OnRoleAbilityHideControlHUD;//[Offset: 0xb28, Size: 0x10]
	delegate OnRoleAbilityInputAction;//[Offset: 0xb38, Size: 0x10]
	delegate OnRoleAbilityAddSummonBuff;//[Offset: 0xb48, Size: 0x10]
	delegate OnRoleAbilityUsingStatusChanged;//[Offset: 0xb58, Size: 0x10]
	delegate OnRoleAbilityCanTriggerAgain;//[Offset: 0xb68, Size: 0x10]
	delegate OnCharacterNightComesActorChanged;//[Offset: 0xb78, Size: 0x10]
	delegate OnMobileWeaponInputAction;//[Offset: 0xb88, Size: 0x10]
	delegate OnCanSkilledJump;//[Offset: 0xb98, Size: 0x10]
	delegate Top3Team;//[Offset: 0xba8, Size: 0x10]
	delegate OnRoleGEShieldMultiRecoverCoolDownEffect;//[Offset: 0xbb8, Size: 0x10]
	delegate OnMemberFlagIDChanged01;//[Offset: 0xbe8, Size: 0x10]
	delegate OnMemberFlagIDChanged02;//[Offset: 0xbf8, Size: 0x10]
	delegate OnMemberFlagIDChanged03;//[Offset: 0xc08, Size: 0x10]
	delegate OnMemberFlagIDChanged04;//[Offset: 0xc18, Size: 0x10]
	delegate OnDrivingStateChanged;//[Offset: 0xc28, Size: 0x10]
	delegate OnVehicleWeaponAbilityActivated;//[Offset: 0xc38, Size: 0x10]
	delegate OnVehicleScopeInitialized;//[Offset: 0xc48, Size: 0x10]
	delegate OnVehicleScopeValueChanged;//[Offset: 0xc58, Size: 0x10]
	delegate OnSwitchToNextVehicleScope;//[Offset: 0xc68, Size: 0x10]
	delegate OnVehicleWeaponScopeDelegate;//[Offset: 0xc78, Size: 0x10]
	delegate OnTransformerChangeWeaponDelegate;//[Offset: 0xc88, Size: 0x10]
	delegate OnVehicleTypeChangeDelegate;//[Offset: 0xc98, Size: 0x10]
	delegate OnVehicleWeaponNoAmmoAlert;//[Offset: 0xca8, Size: 0x10]
	delegate OnVehicleAbilityActivationChanged;//[Offset: 0xcb8, Size: 0x10]
	delegate OnMapVehicleSpawnListInitialized;//[Offset: 0xcc8, Size: 0x10]
	delegate OnVehicleFlyingProgressVisible;//[Offset: 0xcd8, Size: 0x10]
	delegate OnInputSprintLockStart;//[Offset: 0xce8, Size: 0x10]
	delegate OnSprintIconActived;//[Offset: 0xcf8, Size: 0x10]
	delegate OnSprintIconHide;//[Offset: 0xd08, Size: 0x10]
	delegate OnSprintLockIconActived;//[Offset: 0xd18, Size: 0x10]
	delegate OnTeamMessageReceive;//[Offset: 0xd28, Size: 0x10]
	delegate OnVJetForbiddenChanged;//[Offset: 0xd38, Size: 0x10]
	delegate OnHJetForbiddenChanged;//[Offset: 0xd48, Size: 0x10]
	delegate OnVJetTotalTimesSet;//[Offset: 0xd58, Size: 0x10]
	delegate OnHJetTotalTimesSet;//[Offset: 0xd68, Size: 0x10]
	delegate OnVJetRestTimesSet;//[Offset: 0xd78, Size: 0x10]
	delegate OnHJetRestTimesSet;//[Offset: 0xd88, Size: 0x10]
	delegate OnVJetChargeStateChanged;//[Offset: 0xd98, Size: 0x10]
	delegate OnVJetCDStateChanged;//[Offset: 0xda8, Size: 0x10]
	delegate OnHJetChargeStateChanged;//[Offset: 0xdb8, Size: 0x10]
	delegate OnHJetCDStateChanged;//[Offset: 0xdc8, Size: 0x10]
	delegate OnVJetTimesCharging;//[Offset: 0xdd8, Size: 0x10]
	delegate OnHJetTimesCharging;//[Offset: 0xde8, Size: 0x10]
	delegate OnVJetCoolingDown;//[Offset: 0xdf8, Size: 0x10]
	delegate OnHJetCoolingDown;//[Offset: 0xe08, Size: 0x10]
	delegate OnVJetModuleLevelChanged;//[Offset: 0xe18, Size: 0x10]
	delegate OnHJetModuleLevelChanged;//[Offset: 0xe28, Size: 0x10]
	delegate OnSkydiveFlyStateChanged;//[Offset: 0xe38, Size: 0x10]
	delegate OnSkydiveAltitudeUpdate;//[Offset: 0xe48, Size: 0x10]
	delegate OnSkydiveSpeedUpdate;//[Offset: 0xe58, Size: 0x10]
	delegate OnShowGameNoticeDelegate;//[Offset: 0xe68, Size: 0x10]
	delegate OnSetGameNoticeVisibilityDelegate;//[Offset: 0xe78, Size: 0x10]
	delegate OnStartCountDownDelegate;//[Offset: 0xe88, Size: 0x10]
	delegate OnStopCountDownDelegate;//[Offset: 0xe98, Size: 0x10]
	delegate OnHideInteractionListRequested;//[Offset: 0xea8, Size: 0x10]
	delegate OnCancelHideInteractionListRequested;//[Offset: 0xeb8, Size: 0x10]
	delegate OnInteractionTriggerAppear;//[Offset: 0xec8, Size: 0x10]
	delegate OnInteractionTriggerDisappear;//[Offset: 0xed8, Size: 0x10]
	delegate OnStartInteractionCountDown;//[Offset: 0xee8, Size: 0x10]
	delegate OnStopInteractionCountDown;//[Offset: 0xef8, Size: 0x10]
	delegate OnStartReviveTeammateCountDownDelegate;//[Offset: 0xf08, Size: 0x10]
	delegate OnStopReviveTeammateCountDownDelegate;//[Offset: 0xf18, Size: 0x10]
	delegate OnReviveWillBeDisabledHintDelegate;//[Offset: 0xf28, Size: 0x10]
	delegate OnStartReviveItemRecycleCountDownDelegate;//[Offset: 0xf38, Size: 0x10]
	delegate OnOverlapElectricShopDelegate;//[Offset: 0xfa8, Size: 0x10]
	delegate OnUpdateVehicleInteractionDelegate;//[Offset: 0xfb8, Size: 0x10]
	delegate OnCruiseHeightSet;//[Offset: 0xfc8, Size: 0x10]
	delegate OnEnterCruisingDelegate;//[Offset: 0xfd8, Size: 0x10]
	delegate OnEnterParachutingDelegate;//[Offset: 0xfe8, Size: 0x10]
	delegate OnEnterLandingDelegate;//[Offset: 0xff8, Size: 0x10]
	delegate OnMapSkydivingIconsUpdateDelegate;//[Offset: 0x1008, Size: 0x10]
	delegate OnEShopWeaponUpgradeDelegate;//[Offset: 0x1018, Size: 0x10]
	delegate OnEShopShieldUpgradeDelegate;//[Offset: 0x1028, Size: 0x10]
	delegate OnEShopPurchaseSuccessDelegate;//[Offset: 0x1038, Size: 0x10]
	delegate OnEShopItemCDRefreshDelegate;//[Offset: 0x1048, Size: 0x10]
	delegate OnEShopItemRefreshDelegate;//[Offset: 0x1058, Size: 0x10]
	delegate OnEShopSlotWeaponUpgradeDelegate;//[Offset: 0x1068, Size: 0x10]
	delegate OnEShopWeaponChangeDelegate;//[Offset: 0x1078, Size: 0x10]
	delegate OnEShopPoolRefreshDelegate;//[Offset: 0x1088, Size: 0x10]
	delegate TryOpenElectricShopDelegate;//[Offset: 0x1098, Size: 0x10]
	delegate OnTeammateHomePanelGetting;//[Offset: 0x10a8, Size: 0x10]
	delegate OnHomeBattleUIGetting;//[Offset: 0x10b8, Size: 0x10]
	delegate OnHomeMainBuildGetting;//[Offset: 0x10c8, Size: 0x10]
	delegate OnHomeFriendListGetting;//[Offset: 0x10d8, Size: 0x10]
	delegate OnHomeLevelUpUIGetting;//[Offset: 0x10e8, Size: 0x10]
	delegate OnShieldAvailableChanged;//[Offset: 0x10f8, Size: 0x10]
	delegate OnShieldChanged;//[Offset: 0x1108, Size: 0x10]
	delegate OnRechargeShieldEnd;//[Offset: 0x1118, Size: 0x10]
	delegate OnShieldFXUpdated;//[Offset: 0x1128, Size: 0x10]
	delegate OnShieldValueChanged;//[Offset: 0x1138, Size: 0x10]
	delegate OnMaxShieldValueUpdate;//[Offset: 0x1148, Size: 0x10]
	delegate FOnSteamRechargeShield;//[Offset: 0x1158, Size: 0x10]
	delegate TryCancelCountDown;//[Offset: 0x1168, Size: 0x10]
	delegate OnEnemyShieldChanged;//[Offset: 0x1178, Size: 0x10]
	delegate OnEnemyShieldValueChanged;//[Offset: 0x1188, Size: 0x10]
	delegate OnShieldUpgradeStart;//[Offset: 0x1198, Size: 0x10]
	delegate OnShieldUpgradeInterrupt;//[Offset: 0x11a8, Size: 0x10]
	delegate OnShieldUpgradeFinish;//[Offset: 0x11b8, Size: 0x10]
	delegate OnShieldUpgradeItemCountChanged;//[Offset: 0x11c8, Size: 0x10]
	delegate OnShieldUpgradeItemCountChangedBP;//[Offset: 0x11d8, Size: 0x10]
	delegate OnAckShieldUpgradeShopInteract;//[Offset: 0x11e8, Size: 0x10]
	delegate TryOpenTreasureBoxDelegate;//[Offset: 0x11f8, Size: 0x10]
	delegate TryOpenAirDropTreasureBoxDelegate;//[Offset: 0x1208, Size: 0x10]
	delegate TryCancelAirDropTreasureBoxDelegate;//[Offset: 0x1218, Size: 0x10]
	delegate TryPickupFirstItemDelegate;//[Offset: 0x1228, Size: 0x10]
	delegate CheckPickupItemValidDelegate;//[Offset: 0x1238, Size: 0x10]
	delegate CheckPickupItemValidInBackpack;//[Offset: 0x1248, Size: 0x10]
	delegate SelectItemIndex;//[Offset: 0x1258, Size: 0x10]
	delegate SelectPreviousItem;//[Offset: 0x1268, Size: 0x10]
	delegate SelectNextItem;//[Offset: 0x1278, Size: 0x10]
	delegate OnPickupEntryPlayAnim;//[Offset: 0x1298, Size: 0x10]
	delegate OnRequstPickupEntryPlayAnim;//[Offset: 0x12a8, Size: 0x10]
	delegate OnRequstPickupEntryPlayAnimCustom;//[Offset: 0x12b8, Size: 0x10]
	delegate OnRequstPickupSpecificItem;//[Offset: 0x12c8, Size: 0x10]
	delegate NotifyTeammateReviving;//[Offset: 0x12d8, Size: 0x10]
	delegate OnInteractEvent;//[Offset: 0x12e8, Size: 0x10]
	delegate OnSetBackpackDropMaskVisibility;//[Offset: 0x12f8, Size: 0x10]
	delegate OnEndBackpackDragDrop;//[Offset: 0x1308, Size: 0x10]
	delegate OnBackpackHUDVisibilityChanged;//[Offset: 0x1318, Size: 0x10]
	delegate OnBattleHUDVisibilityChanged;//[Offset: 0x1348, Size: 0x10]
	delegate OnMicroPhonePressed;//[Offset: 0x1358, Size: 0x10]
	delegate OnSpeakerPressed;//[Offset: 0x1368, Size: 0x10]
	delegate OnSwitchEMP;//[Offset: 0x1378, Size: 0x10]
	delegate OnToggleAssistAim;//[Offset: 0x1388, Size: 0x10]
	delegate OnToggleAutoFire;//[Offset: 0x1398, Size: 0x10]
	delegate OnTreatmentEnd;//[Offset: 0x13a8, Size: 0x10]
	void VehicleWeaponScopeChanged__DelegateSignature(bool BOpened);// 0x2878078ea041
	void VehicleWeaponNoAmmoAlert__DelegateSignature();// 0x2877078ea041
	void VehicleTypeChanged__DelegateSignature();// 0x2876078ea041
	void VehicleFlyingProgress__DelegateSignature(bool bVisible);// 0x2875078ea041
	void VehicleAbilityActivationChanged__DelegateSignature(bool bInActivated, bool bCanCancel, int InAbilityIndex, float InDurationTime);// 0x2874078ea041
	void TwoIntUIInteractDelegate__DelegateSignature(int Value01, int Value02);// 0x2873078ea041
	void TwoIntImplementableDelegate__DelegateSignature(int Value01, int Value02);// 0x2872078ea041
	bool TrySkydiveUnfollow__DelegateSignature();// 0x2871078ea041
	void TransformerWeaponChanged__DelegateSignature(enum InType);// 0x286f078ea041
	void Top3Team__DelegateSignature();// 0x286e078ea041
	void ToggledBigMapVisibility();// 0x286d078ea041
	void ToggledBackpackVisibility();// 0x286c078ea041
	void StopDrivingTutorial();// 0x286b078ea041
	void SprintLockIconActived__DelegateSignature(out const Vector2D InSprintPosition);// 0x286a078ea041
	void SolarPlayerStateDelegate__DelegateSignature(SolarPlayerState* InPlayerState);// 0x2869078ea041
	void SimpleUIInteractDelegate__DelegateSignature();// 0x2868078ea041
	void SimpleTriggerDelegate__DelegateSignature();// 0x2867078ea041
	void SimpleStringDelegate__DelegateSignature(FString Value);// 0x2866078ea041
	void SimpleSpectatorDelegate__DelegateSignature();// 0x2865078ea041
	void SimplePlayerStateDelegate__DelegateSignature(SolarPlayerState* TeammatePS);// 0x2864078ea041
	void SimpleOnRefreshDelegate__DelegateSignature();// 0x2863078ea041
	bool SimpleOnBindRetOneParamDelegate__DelegateSignature(bool bAutoPickup);// 0x2862078ea041
	bool SimpleOnBindRetOneIntParamDelegate__DelegateSignature(int InIthisID);// 0x2861078ea041
	bool SimpleOnBindRetDelegate__DelegateSignature();// 0x2860078ea041
	void SimpleOnBindDelegate__DelegateSignature();// 0x285f078ea041
	void SimpleImplementableDelegate__DelegateSignature();// 0x285e078ea041
	void SimpleFloatDelegate__DelegateSignature(float Value);// 0x285d078ea041
	void SimpleCharacterLuaDelegate__DelegateSignature();// 0x285c078ea041
	void SimpleBoolDelegate__DelegateSignature(bool Value);// 0x285b078ea041
	void ShowSuperScanChooseUI(bool bShow);// 0x285a078ea041
	void ShieldUpgradeItemCntChangedBPDelegate__DelegateSignature(const int ShieldLevel, const int ShieldMaxLevel, const int ShieldUpgradeItemNum, const int NeedShieldUpgradeItemNum, const int MaxShieldUpgradeItemNum);// 0x2859078ea041
	void SetRescueBtnVisibility(bool bVisible);// 0x2858078ea041
	void SetMapVehicleSpawnListVisibility(bool bVisible);// 0x2857078ea041
	void SetElectricShopVisibility(bool bVisible);// 0x2856078ea041
	void SetBuyResurrectBtnVisibility(const bool bVisible);// 0x2855078ea041
	void SetBigMapVisibility(bool bVisible);// 0x2854078ea041
	void SetBackpackVisibility(bool bInValue);// 0x2853078ea041
	void RequestHideInteractionList();// 0x2852078ea041
	void RequestCancelHideInteractionList();// 0x2851078ea041
	void RemoveItemFromPickup(Object* InCardItem, const bool bPickup);// 0x2850078ea041
	void PlayerTutorialSequence(const bool bPlay);// 0x284f078ea041
	void PickupListRemoveDelegate__DelegateSignature(Object* CardItem, bool bPickup);// 0x284e078ea041
	void PickupListDelegate__DelegateSignature(Object* CardItem);// 0x284d078ea041
	void OnWidgetVisibilitySet__DelegateSignature(bool bVisible);// 0x284c078ea041
	void OnWidgetButtonClicked__DelegateSignature();// 0x284b078ea041
	void OnVehicleWeaponAbilityActivated__DelegateSignature(bool bInActive);// 0x284a078ea041
	void OnVehicleScopeValueChanged__DelegateSignature(float InValue);// 0x2849078ea041
	void OnVehicleScopeInitialized__DelegateSignature(UserWidget* Widget, bool bInSpectate);// 0x2848078ea041
	void OnUpdateVehicleInteractionDelegate__DelegateSignature(enum UiState, SolarVehiclePawn* InVehicleComponent);// 0x2846078ea041
	void OnTutorialSequenceRequested__DelegateSignature(bool bPlay);// 0x2845078ea041
	void OnTrySpawnSuperRadar__DelegateSignature(bool bSpawn);// 0x2844078ea041
	void OnTreatmentDelegate__DelegateSignature(bool bWasCancelled);// 0x2843078ea041
	void OnTeamMessageReceive__DelegateSignature(FString MemberName, FString Message1, bool bLocalPlayer, bool bSound, int PosInTeam, FString Message2);// 0x2842078ea041
	void OnTeammateTalentStateChanged__DelegateSignature(enum TalentState, byte PosInTeam, float AdditionalParam);// 0x2841078ea041
	void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh);// 0x2840078ea041
	void OnTeammateShieldChanged__DelegateSignature(byte PosInTeam, out const ShieldInfo OldShield, out const ShieldInfo NewShield);// 0x283f078ea041
	void OnTeammateReviveStateChanged__DelegateSignature(SolarPlayerState* RevivingMePlayer, SolarPlayerState* SolarPlayerState);// 0x283e078ea041
	void OnTeammateReviveItemChanged__DelegateSignature(byte PosInTeam, byte ReviveItemNum, bool bCanRebirth);// 0x283d078ea041
	void OnTeammateResurrectTimeChanged__DelegateSignature(SolarPlayerState* SolarPlayerState, int ResurrectTime, int ResurrectTimeCfg);// 0x283c078ea041
	void OnTeammateRescueStateChanged__DelegateSignature(SolarCharacter* InCharacter);// 0x283b078ea041
	void OnTeammatePlatStateRemove__DelegateSignature(byte PosInTeam, bool bLastOne);// 0x283a078ea041
	void OnTeammateIntegerDataChanged__DelegateSignature(int Data, byte PosInTeam);// 0x2839078ea041
	void OnTeammateHUDIntoScreen__DelegateSignature(SolarPlayerState* SolarPlayerState);// 0x2838078ea041
	void OnTeammateHPChanged__DelegateSignature(byte PosInTeam, float CurrentHP, float MaxHP);// 0x2837078ea041
	void OnTeammateCallForHelpNotify__DelegateSignature(SolarPlayerState* SolarPlayerState);// 0x2836078ea041
	void OnTeammateBattleStateChanged__DelegateSignature(SCMPlayerState* TeammateState);// 0x2835078ea041
	void OnTeammateActionStateChanged__DelegateSignature(SolarPlayerState* SolarPlayerState, const GameplayTag Tag, int NewCount);// 0x2834078ea041
	void OnSwitchToNextVehicleScope__DelegateSignature();// 0x2833078ea041
	void OnSwitchEMP__DelegateSignature(SolarCharacter* InCharacter, bool InbSwitchOnEMP);// 0x2832078ea041
	void OnSuperScaningWidgetShow__DelegateSignature(bool bShow);// 0x2831078ea041
	void OnSuperScaningStart__DelegateSignature(out const FString[] InScanPlayers);// 0x2830078ea041
	void OnSuperScaningRemovePlayer__DelegateSignature(FString InRemovePlayer);// 0x282f078ea041
	void OnSuperScaningEnd__DelegateSignature();// 0x282e078ea041
	void OnStopCountDownDelegate__DelegateSignature(const int InTextId);// 0x282d078ea041
	void OnSteamRechargeShieldDecl__DelegateSignature(const bool bUseBigRecharger);// 0x282c078ea041
	void OnStartCountDownDelegate__DelegateSignature(out const CountDownInfo InCountDownInfo);// 0x282b078ea041
	void OnSprintIconHide__DelegateSignature();// 0x282a078ea041
	void OnSprintIconActived__DelegateSignature(out const Vector2D InSprintPosition);// 0x2829078ea041
	void OnSpectateTargetItemsChanged__DelegateSignature(ReplicateItemData[] InItemDatas);// 0x2828078ea041
	void OnSpectateTargetChanged(SolarPlayerState* OldTarget, SolarSpectateInfo* SpectateInfo);// 0x2827078ea041
	void OnSpectateReferToChanged__DelegateSignature(const SolarPlayerState* ReferToPlayerState, enum State);// 0x2825078ea041
	void OnSpectateBattleUpgradeEffectUpdate__DelegateSignature(SolarSpectateInfo* SpectateInfo);// 0x2824078ea041
	void OnSpecTargetOrLocalCauseDamageChanged__DelegateSignature(float CauseDamage);// 0x2823078ea041
	void OnSpecTargetOrLocalAssistChanged__DelegateSignature(int Assist);// 0x2822078ea041
	void OnSpecTargetChanged__DelegateSignature(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x2821078ea041
	void OnSkydivingMemberDataUpdated__DelegateSignature(SolarPlayerState* MemberPS);// 0x2820078ea041
	void OnSkydivingFollowRequestResponded__DelegateSignature(SolarPlayerState* Follower, bool bAgreed);// 0x281f078ea041
	void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed);// 0x281e078ea041
	void OnSkydiveFlyStateChanged__DelegateSignature(SolarCharacter* InCharacter);// 0x281d078ea041
	void OnSkydiveDataUpdate__DelegateSignature(float NewData);// 0x281c078ea041
	void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue);// 0x281b078ea041
	void OnSkillActivationChanged__DelegateSignature(bool bActivated);// 0x281a078ea041
	void OnShowGameNotice__DelegateSignature(const int InNoticeID, out const HUDNoticeParams InNoiceParams);// 0x2819078ea041
	void OnShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, FString SolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x2818078ea041
	void OnShieldDelegate__DelegateSignature();// 0x2817078ea041
	void OnShieldChanged__DelegateSignature(float CurValue, float MaxValue, int QualityColor, bool bAdvancedShield);// 0x2816078ea041
	void OnShieldAvailableChanged__DelegateSignature(bool bAvailable);// 0x2815078ea041
	void OnSetTreasureBoxActorDelegate__DelegateSignature(Actor* InActor);// 0x2814078ea041
	void OnSetPickupSwitchDelegate__DelegateSignature(enum InType, bool InFlag);// 0x2813078ea041
	void OnSetGameNoticeVisibility__DelegateSignature(enum InNoticeType, bool InVisibility);// 0x2812078ea041
	void OnSetBackpackDropMaskVisibility__DelegateSignature(bool bVisible);// 0x2811078ea041
	void OnSetActiveOpenBoxDelegate__DelegateSignature(bool Inactive);// 0x2810078ea041
	void OnSelectItemIndexDelegate__DelegateSignature(int Index);// 0x280f078ea041
	void OnSelectingBattleUpgradeEffectFinish__DelegateSignature(int SelectedIndex);// 0x280e078ea041
	void OnSelectingBattleUpgradeEffectBegin__DelegateSignature(SolarCharacter* Target, int Level, out const int[] EffectIDArray);// 0x280d078ea041
	void OnScoutedCharactersChange__DelegateSignature(FString[] ScoutedCharacters, FString[] ToBeScoutedCharacters);// 0x280c078ea041
	void OnRoleRecoveringShieldChange__DelegateSignature(const float InCurrentShieldValue, const float InRecoveringShieldValue);// 0x280b078ea041
	void OnRoleRecoveringHealthChange__DelegateSignature(const float InCurrentHealthValue, const float InRecoveringHealthValue);// 0x280a078ea041
	void OnRoleGEShieldMultiRecoverCoolDownChange__DelegateSignature(int NewCount);// 0x2809078ea041
	void OnRoleAbilityUsingStatusChanged__DelegateSignature(const GameplayTag Tag, int NewCount);// 0x2808078ea041
	void OnRoleAbilityStateChange__DelegateSignature(int RoleAbilityIndex, int State);// 0x2807078ea041
	void OnRoleAbilityStartCDUTCTimeUpdate__DelegateSignature(int RoleAbilityIndex, float InServerTime);// 0x2806078ea041
	void OnRoleAbilityStartCD__DelegateSignature(int RoleAbilityIndex, float StartCDServerTime, float StartCDTimeForReplay);// 0x2805078ea041
	void OnRoleAbilityInputAction__DelegateSignature(int RoleAbilityIndex, bool bPress, bool bCanActive);// 0x2804078ea041
	void OnRoleAbilityHideControlHUD__DelegateSignature(bool bHide);// 0x2803078ea041
	void OnRoleAbilityEndCD__DelegateSignature(int RoleAbilityIndex);// 0x2802078ea041
	void OnRoleAbilityEnd__DelegateSignature(int RoleAbilityIndex);// 0x2801078ea041
	void OnRoleAbilityContinous__DelegateSignature(int RoleAbilityIndex, bool bTurnOn, float Duration);// 0x2800078ea041
	void OnRoleAbilityChange__DelegateSignature(int RoleAbilityIndex, bool bHaveAbility, int CharacterId, int PlayerLevel);// 0x27ff078ea041
	void OnRoleAbilityCDDurationChange__DelegateSignature(int RoleAbilityIndex, int Duration, bool bDurationReduced);// 0x27fe078ea041
	void OnRoleAbilityCanTriggerAgain__DelegateSignature(int RoleAbilityIndex, bool bCanTriggerAgain, float LeftTime, float Duration);// 0x27fd078ea041
	void OnRoleAbilityBuffUpdate__DelegateSignature(out const ActiveGameplayEffectHandle ActiveEffectHandle, float Duration, float RemainTime, bool bInPrePhase, float PreDuration, float PreRemainTime);// 0x27fc078ea041
	void OnRoleAbilityBuffPause__DelegateSignature(bool bIsMainDuration, const SolarCharacter* SourceCharacter, byte AbilityIndex);// 0x27fb078ea041
	void OnRoleAbilityBuffEnd__DelegateSignature(bool bIsMainDuration, out const ActiveGameplayEffectHandle InGameplayEffectHandle);// 0x27fa078ea041
	void OnRoleAbilityBuffContinous__DelegateSignature(bool bIsMainDuration, const SolarCharacter* SourceCharacter, byte AbilityIndex, float Duration, float PreDuration, out const ActiveGameplayEffectHandle ActiveEffectHandle);// 0x27f9078ea041
	void OnRoleAbilityAddSummonBuff__DelegateSignature(out const SoftObjectPath ImagePath, const Actor* InActor);// 0x27f8078ea041
	void OnReviveStateChanged__DelegateSignature(SolarPlayerState* RevivingMePlayer);// 0x27f7078ea041
	void OnRepliableMessageChanged__DelegateSignature();// 0x27f6078ea041
	void OnRemindTeammateRescueNotify__DelegateSignature(SolarPlayerState* SolarPlayerState);// 0x27f5078ea041
	void OnRechargeShieldEnd__DelegateSignature(bool bWasCancelled);// 0x27f4078ea041
	void OnQuickVoiceWheelLongPressEnd__DelegateSignature(bool bPlayerDead);// 0x27f3078ea041
	void OnPoisonEffectUpdated__DelegateSignature(float PosX, float PosY, float Radius);// 0x27f2078ea041
	void OnPlayersCountChanged__DelegateSignature(int Num);// 0x27f1078ea041
	void OnPlayerFlagDisplayChanged__DelegateSignature(bool bDisplay);// 0x27f0078ea041
	void OnPlayerDead__DelegateSignature(out const KillInfo DeathMsgInfo);// 0x27ed078ea041
	void OnPickupSingleDataUpdated__DelegateSignature(const Object* InPickupItem);// 0x27ec078ea041
	void OnPickupListVisibilityChanged__DelegateSignature(bool bVisible);// 0x27eb078ea041
	void OnPickupListDataUpdated__DelegateSignature(out const Object*[] InPickupItemList, out const int[] InThisIds);// 0x27ea078ea041
	void OnPickupItemSet__DelegateSignature(out const Actor*[] InActorList, const enum InType, const bool bShowPickupList);// 0x27e9078ea041
	void OnPickupItemSelected__DelegateSignature(Object* SelectWidget, int SelectWidgetThisID);// 0x27e8078ea041
	void OnPickupFlagChanged__DelegateSignature(bool bFlag, bool bNotSelf);// 0x27e7078ea041
	void OnPickupCheckValidUpdated__DelegateSignature(out const ItemCountsList ItemCountsList);// 0x27e6078ea041
	void OnPickupCheckStatesUpdated__DelegateSignature(bool bItemUpdate);// 0x27e5078ea041
	void OnPickupCheckHighlightUpdated__DelegateSignature(enum Type, bool IsRecommend);// 0x27e4078ea041
	void OnOverlapElectricShopDelegate__DelegateSignature(const bool InOverlap);// 0x27e3078ea041
	void OnOnTeammateHUDOutScreen__DelegateSignature(SolarPlayerState* SolarPlayerState);// 0x27e2078ea041
	void OnNavMapMarked__DelegateSignature(byte PosInTeam, out const Vector2D MarkPosition);// 0x27e1078ea041
	void OnNavMapMarkCleared__DelegateSignature(byte PosInTeam);// 0x27e0078ea041
	void OnMobileWeaponInputAction__DelegateSignature(byte InButtonType);// 0x27de078ea041
	void OnMemberFlagIDChanged__DelegateSignature(int FlagID, bool bClanFlag);// 0x27dd078ea041
	void OnMaxShieldValueUpdate__DelegateSignature(const float MaxShieldVal);// 0x27dc078ea041
	void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter, Vector2D TouchLocalPos);// 0x27db078ea041
	void OnMarkButtonSimpleTriggered__DelegateSignature();// 0x27da078ea041
	void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered);// 0x27d9078ea041
	void OnKillLeaderChangedNotify__DelegateSignature(SolarPlayerState* KillLeader);// 0x27d8078ea041
	void OnJetTimesChanged__DelegateSignature(int NewTimes);// 0x27d7078ea041
	void OnJetModuleLevelChanged__DelegateSignature(int NewLevel);// 0x27d6078ea041
	void OnJetFlyStateChanged__DelegateSignature(bool bStart);// 0x27d5078ea041
	void OnJetFlyForbiddenChanged__DelegateSignature(enum ForbiddenType, bool bAdded);// 0x27d4078ea041
	void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent);// 0x27d3078ea041
	void OnInteractionTriggerDelegate__DelegateSignature(out const InteractionTriggerInfo TriggerInfo);// 0x27d2078ea041
	void OnInputTypeChanged__DelegateSignature(SolarPlayerState* PlayerState);// 0x27d1078ea041
	void OnInputSprintLockStart__DelegateSignature();// 0x27d0078ea041
	void OnInitElectricShopDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x27cf078ea041
	void OnInhibitBattlePromptTagChanged__DelegateSignature(const GameplayTag Tag, int NewCount);// 0x27ce078ea041
	UserWidget* OnHomelandGetWidget__DelegateSignature();// 0x27cd078ea041
	void OnHideUIByThisIDDelegate__DelegateSignature(int64 InThisID);// 0x27cc078ea041
	void OnEShopWeaponUpgradeDelegate__DelegateSignature(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x27cb078ea041
	void OnEShopWeaponChangeDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x27ca078ea041
	void OnEShopSlotWeaponUpgradeDelegate__DelegateSignature(int InWeaponSlot);// 0x27c9078ea041
	void OnEShopShieldUpgradeDelegate__DelegateSignature(SolarCharacter* InCharacter);// 0x27c8078ea041
	void OnEShopPurchaseSuccessDelegate__DelegateSignature(int InProductID, SolarCharacter* InCharacter);// 0x27c7078ea041
	void OnEShopInfoUpdateDelegate__DelegateSignature(SolarElectricShop* InElectricShop);// 0x27c6078ea041
	void OnEnemyShieldValueChanged__DelegateSignature(enum WidgetState, float CurValue, float ChangeValue, FString SolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x27c5078ea041
	void OnEnemyShieldChanged__DelegateSignature(FString SolarPlayerID, float CurValue, float MaxValue, int QualityColor, bool bAdvancedShield);// 0x27c4078ea041
	void OnEndMatchCountdownChanged__DelegateSignature(int Seconds);// 0x27c3078ea041
	void OnDrivingTutorialStopped__DelegateSignature();// 0x27c2078ea041
	void OnDrivingStateChanged__DelegateSignature(enum DriveState);// 0x27c1078ea041
	void OnDoppelgangerActive__DelegateSignature(SolarCharacter* InDoppelganger, bool bActive);// 0x27c0078ea041
	void OnDamagingActorsChange__DelegateSignature();// 0x27bf078ea041
	void OnCreateReviveWorldMarkDelegate__DelegateSignature(SolarPlayerState* InPlayerState, out const Vector InWorldLoc);// 0x27be078ea041
	void OnCreateCustomMapMarkDelegate__DelegateSignature(class MapMarkBase MapMarkClass, Actor* OwnerActor, out const Vector2D MarkPos, bool bSupportEdge, bool bSupportEdgeInBigMap, int ZOrder);// 0x27bd078ea041
	void OnCharacterStateChanged__DelegateSignature();// 0x27bc078ea041
	void OnCharacterSet__DelegateSignature(SolarCharacter* ControlledCharacter);// 0x27bb078ea041
	void OnCharacterSelfRebirth__DelegateSignature(SolarCharacter* RebirthCharacter);// 0x27ba078ea041
	void OnCharacterRescueStateChanged__DelegateSignature(byte NewRescueState);// 0x27b9078ea041
	void OnCharacterNightComesActorChanged__DelegateSignature(Actor* InActor);// 0x27b8078ea041
	void OnCharacterLevelUp__DelegateSignature(int NewLevel, int OldLevel);// 0x27b7078ea041
	void OnCharacterLevelExpChanged__DelegateSignature(int NewLevel, float NewExpRatio);// 0x27b6078ea041
	void OnCharacterLevelChanged__DelegateSignature(int InLevel);// 0x27b5078ea041
	void OnCharacterIDSet__DelegateSignature(int CharacterId);// 0x27b4078ea041
	void OnCharacterHPChanged__DelegateSignature(float CurrentHP, float MaxHP);// 0x27b3078ea041
	void OnCharacterGainExp__DelegateSignature(int ExpAdded);// 0x27b2078ea041
	void OnCharacterDead__DelegateSignature(SolarCharacter* InCharacter);// 0x27b1078ea041
	void OnCharacterAllReady__DelegateSignature(SolarCharacter* ControlledCharacter);// 0x27b0078ea041
	void OnCanSkilledJump__DelegateSignature(bool bValue);// 0x27af078ea041
	void OnBombingStarted__DelegateSignature(int BombId, out const Vector Location, float Radius);// 0x27ae078ea041
	void OnBattleUpgradeEffect__DelegateSignature(enum EffectType, int ParamSum);// 0x27ad078ea041
	void OnBattleModeChanged__DelegateSignature(byte NewModeType);// 0x27ac078ea041
	void OnBattleHUDVisibilityChanged__DelegateSignature(bool bVisible);// 0x27ab078ea041
	void OnBackpackTookPickup__DelegateSignature(out const Vector2D NewPosition);// 0x27aa078ea041
	void OnAirdropBoxInfoChangeDelegate__DelegateSignature(AirDropTreasureBox* InAirdropBox);// 0x27a9078ea041
	void OnAimingEnemy__DelegateSignature(SolarCharacter* InEnemy);// 0x27a8078ea041
	void MapVehicleSpawnListInitialized__DelegateSignature();// 0x27a7078ea041
	void LocalPlayerSkidivingCaptainChanged__DelegateSignature(int TeamIndex, FString playerName, bool IsLocalPlayer);// 0x27a6078ea041
	void JoyStickSimpleDeleghate__DelegateSignature();// 0x27a5078ea041
	bool IsElectricShopVisible();// 0x27a4078ea041
	bool IsBigMapVisible();// 0x27a3078ea041
	void IntUIInteractDelegate__DelegateSignature(int Value);// 0x27a2078ea041
	void IntImplementableDelegate__DelegateSignature(int Value);// 0x27a1078ea041
	void InternalCallSkydiveSpeed();// 0x27a0078ea041
	void InternalCallSkydiveFlyStateChanged();// 0x279f078ea041
	void IntCharacterLuaDelegate__DelegateSignature(int Value);// 0x279e078ea041
	void HitTraceInfoDelegate__DelegateSignature(out const HitTraceInfo Info);// 0x279d078ea041
	SolarUserWidget* GetWorldMarkPanel();// 0x279c078ea041
	UserWidget* GetTeammateHomePanel();// 0x279b078ea041
	HUDDispatcherBase* GetHUDDispatcher_FromUI(const Widget* InWidget);// 0x279a078ea041
	HUDDispatcherBase* GetHUDDispatcher_FromPC(const PlayerController* InPC);// 0x2799078ea041
	HUDDispatcherBase* GetHUDDispatcher_FromHUD(const HUD* InHUD);// 0x2798078ea041
	HUDDispatcherBase* GetHUDDispatcher_FromCharacter(const SolarCharacter* InCharacter, bool bCheckControlled);// 0x2797078ea041
	UserWidget* GetHomeMainBuild();// 0x2796078ea041
	UserWidget* GetHomeLevelUpUI();// 0x2795078ea041
	UserWidget* GetHomeFriendList();// 0x2794078ea041
	UserWidget* GetHomeBattleUI();// 0x2793078ea041
	void BroadcastVJetForbiddenChanged(enum Types, bool bAdded);// 0x2792078ea041
	void BroadcastVJetCDStateChanged(bool bCD);// 0x2791078ea041
	void BroadcastTrySpawnSuperRadar(bool bSpawn);// 0x2790078ea041
	bool BroadcastTryPickupFirstItem(const bool bAutoPickup);// 0x278f078ea041
	void BroadcastTop3Team();// 0x278e078ea041
	void BroadcastToggleCursorVisibility(const bool bIsVisible);// 0x278d078ea041
	void BroadcastToggleAutoFire();// 0x278c078ea041
	void BroadcastToggleAssistAim();// 0x278b078ea041
	void BroadcastSpectateTargetItemsChanged(out const ReplicateItemData[] InItemDatas);// 0x278a078ea041
	void BroadcastSpectateTargetChanged(SolarPlayerState* OldTarget, SolarPlayerState* NewTarget);// 0x2789078ea041
	void BroadcastSpectateBattleUpgradeEffectUpdate(SolarSpectateInfo* SpectateInfo);// 0x2788078ea041
	void BroadcastSkydiveSpeed();// 0x2787078ea041
	bool BroadcastShieldValueChanged(const enum WidgetState, const float InCurValue, const float InChangeValue, FString InSolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x2786078ea041
	void BroadcastShieldUpgradeStart();// 0x2785078ea041
	void BroadcastShieldUpgradeShopInteract();// 0x2784078ea041
	void BroadcastShieldUpgradeItemCountChanged(const int NewCount, const int LastCount);// 0x2783078ea041
	void BroadcastShieldUpgradeInterrupt();// 0x2782078ea041
	void BroadcastShieldUpgradeFinish();// 0x2781078ea041
	void BroadcastShieldFXUpdated();// 0x2780078ea041
	bool BroadcastShieldChanged(const float CurValue, const float MaxValue, const int QualityColor, const bool bAdvancedShield);// 0x277f078ea041
	bool BroadcastShieldAvailable(const bool bAvailable);// 0x277e078ea041
	void BroadcastSettingRequestOpened(const int InOwnerType);// 0x277d078ea041
	void BroadcastSettingRequestClosed();// 0x277c078ea041
	void BroadcastSetBackpackDropMaskVisibility(const bool bVisible);// 0x277b078ea041
	void BroadcastSelectPreviousItem();// 0x277a078ea041
	void BroadcastSelectNextItem();// 0x2779078ea041
	void BroadcastSelectItemIndex(const int Index);// 0x2778078ea041
	void BroadcastSelectingBattleUpgradeEffectFinish(int SelectedIndex);// 0x2777078ea041
	void BroadcastSelectingBattleUpgradeEffectBegin(SolarCharacter* Target, int Level, out const int[] EffectIDArray);// 0x2776078ea041
	void BroadcastScoutCharactersChange(FString[] ScoutedCharacters, FString[] ToBeScoutedCharacters);// 0x2775078ea041
	void BroadcastRescueBtnVisibility();// 0x2774078ea041
	void BroadcastRequsetPickupSpecificItem(const int InThisID, const int InPeferSlotIndex);// 0x2773078ea041
	void BroadcastRequsetPickupEntryPlayAnimCustom(Object* InCustomObj);// 0x2772078ea041
	void BroadcastRequsetPickupEntryPlayAnim(const int InThisID);// 0x2771078ea041
	void BroadcastProfessionFunctionalChanged(const bool bEnabled);// 0x2770078ea041
	void BroadcastPlayerFlagDisplayChanged(bool bDisplay);// 0x276f078ea041
	void BroadcastPickupToggleChanged();// 0x276e078ea041
	void BroadcastPickupEntryPlayAnim(const float InAnimTime);// 0x276d078ea041
	void BroadcastOnTeammateStateChangedDelegate();// 0x276c078ea041
	void BroadcastOnTeammateRebirth();// 0x276b078ea041
	void BroadcastOnStopRescueTeammateCountDown(const int InTextId);// 0x276a078ea041
	void BroadcastOnStopInteractionCountDown(out const CountDownInfo InCountInfo);// 0x2769078ea041
	void BroadcastOnStopCountDownDelegate(const int InTextId);// 0x2768078ea041
	void BroadcastOnStartReviveItemRecycleCountDown(const int CurrentTime, const int DurationTime);// 0x2767078ea041
	void BroadcastOnStartRescueTeammateCountDown(out const CountDownInfo InCountDownInfo);// 0x2766078ea041
	void BroadcastOnStartInteractionCountDown(out const CountDownInfo InCountInfo);// 0x2765078ea041
	void BroadcastOnStartCountDownDelegate(out const CountDownInfo InCountDownInfo);// 0x2762078ea041
	void BroadcastOnSkydiveFlyStateChanged();// 0x2761078ea041
	void BroadcastOnShowGameNoticeDelegate(const int InNoticeID, out const HUDNoticeParams InNoticeParams);// 0x275f078ea041
	void BroadcastOnSetTreasureBoxActorDelegate(Actor* InActor);// 0x275e078ea041
	void BroadcastOnSetPickupSwitchDelegate(const enum InType, const bool InFlag);// 0x275d078ea041
	void BroadcastOnSetGameNoticeVisibility(enum InNoticeType, bool InVisibility);// 0x275c078ea041
	void BroadcastOnSetAirdropBoxActorDelegate(Actor* InActor);// 0x275b078ea041
	void BroadcastOnSetActiveOpenBoxProgressDelegate(const bool Inactive);// 0x275a078ea041
	void BroadcastOnSetActiveOpenBoxBtnDelegate(const bool Inactive);// 0x2759078ea041
	void BroadcastOnRightMouseButtonDownEvent();// 0x2758078ea041
	void BroadcastOnReviveWorldMarkPlayAnim(SolarPlayerState* InPlayerState);// 0x2757078ea041
	void BroadcastOnReviveWillBeDisabledHint(const int HintDuration);// 0x2756078ea041
	void BroadcastOnReviveStateChanged(SolarPlayerState* RevivingMeTeammatePlayer);// 0x2755078ea041
	void BroadcastOnReviveDisabledHint();// 0x2754078ea041
	void BroadcastOnRemoveReviveWorldMark(SolarPlayerState* InPlayerState);// 0x2753078ea041
	void BroadcastOnRemoveAllReviveWorldMark();// 0x2752078ea041
	void BroadcastOnRefreshBackpackWeaponPartDelegate();// 0x2751078ea041
	void BroadcastOnRefreshBackpackWeaponDelegate();// 0x2750078ea041
	void BroadcastOnRefreshBackpackItemDelegate();// 0x274f078ea041
	void BroadcastOnRefreshBackpackEquipDelegate();// 0x274e078ea041
	void BroadcastOnOverlapElectricShopDelegate(const bool InOverlap);// 0x274d078ea041
	void BroadcastOnOnCreateReviveWorldMark(SolarPlayerState* InPlayerState, out const Vector InWorldLoc);// 0x274c078ea041
	void BroadcastOnInteractionTriggerDisappear(out const InteractionTriggerInfo TriggerInfo);// 0x274b078ea041
	void BroadcastOnInteractionTriggerAppear(out const InteractionTriggerInfo TriggerInfo);// 0x2749078ea041
	bool BroadcastOnInteractEvent();// 0x2748078ea041
	void BroadcastOnInitElectricShopDelegate(SolarCharacter* InCharcter);// 0x2747078ea041
	void BroadcastOnHideTreasureBoxUIDelegate(const int64 InThisID);// 0x2746078ea041
	void BroadcastOnHideAirdropBoxUIDelegate(const int64 InThisID);// 0x2745078ea041
	void BroadcastOnGameUserPickupSettingChanged();// 0x2744078ea041
	void BroadcastOnEShopWeaponUpgradeDelegate(SolarPlayerWeapon* InWeapon, SolarCharacter* InCharacter);// 0x2743078ea041
	void BroadcastOnEShopWeaponChangeDelegate(SolarCharacter* InCharacter);// 0x2742078ea041
	void BroadcastOnEShopSlotWeaponUpgradeDelegate(int InWeaponSlot);// 0x2741078ea041
	void BroadcastOnEShopShieldUpgradeDelegate(SolarCharacter* InCharacter);// 0x2740078ea041
	void BroadcastOnEShopPurchaseSuccessDelegate(int InProductID, SolarCharacter* InCharacter);// 0x273f078ea041
	void BroadcastOnEShopPoolRefreshDelegate(SolarElectricShop* InElectricShop);// 0x273e078ea041
	void BroadcastOnEShopItemRefreshDelegate(SolarElectricShop* InElectricShop);// 0x273d078ea041
	void BroadcastOnEShopItemCDRefreshDelegate(SolarElectricShop* InElectricShop);// 0x273c078ea041
	void BroadcastOnCreateCustomMapMark(class MapMarkBase MapMarkClass, Actor* OwnerActor, out const Vector2D MarkPos, bool bSupportEdge, bool bSupportEdgeInBigMap, int ZOrder);// 0x273b078ea041
	void BroadcastOnBindPowerBarDelegates();// 0x273a078ea041
	void BroadcastOnBindItemPanelDelegates();// 0x2739078ea041
	void BroadcastOnBindHPPanelDelegates();// 0x2738078ea041
	void BroadcastOnBackpackHUDVisibilityChanged(const bool bVisible);// 0x2737078ea041
	void BroadcastOnAirdropProgressChangeDelegate(AirDropTreasureBox* InAirdropBox);// 0x2736078ea041
	void BroadcastOnAirdropCharChangeDelegate(AirDropTreasureBox* InAirdropBox);// 0x2735078ea041
	void BroadcastMigrateAccountVisibilityRequestChanged(const bool bVisible);// 0x2734078ea041
	void BroadcastMaxShieldValueUpdate(const float MaxShieldValue);// 0x2733078ea041
	void BroadcastJoyStickSprintStateReset();// 0x2732078ea041
	void BroadcastJoyStickResetAll();// 0x2731078ea041
	void BroadcastJoyStickInputReset();// 0x2730078ea041
	void BroadcastItemHUDStyleChange(const enum Style);// 0x272e078ea041
	void BroadcastItemDiscarded(const int InItemID, const int InTotalCount);// 0x272d078ea041
	void BroadcastHJetTimesChargingProgress(float Value, float Percent);// 0x272c078ea041
	void BroadcastHJetForbiddenChanged(enum Types, bool bAdded);// 0x272a078ea041
	void BroadcastHJetCDStateChanged(bool bCD);// 0x2729078ea041
	void BroadcastFireButtonsReset();// 0x2728078ea041
	bool BroadcastEnemyShieldValueChanged(const enum WidgetState, const float InCurValue, const float InChangeValue, FString InSolarPlayerID, const enum ShieldRechargeState, bool bFixPreAdd);// 0x2727078ea041
	bool BroadcastEnemyShieldChanged(FString InSolarPlayerID, const float CurValue, const float MaxValue, const int QualityColor, const bool bAdvancedShield);// 0x2726078ea041
	void BroadcastEndBackpackDragDrop(const bool bVisible);// 0x2725078ea041
	void BroadcastDriveCustomizeOpened(const int InLayoutType);// 0x2724078ea041
	void BroadcastDriveCustomizeClosed();// 0x2723078ea041
	void BroadcastDamagingActorsChange();// 0x2722078ea041
	void BroadcastCustomizeVisibilityRequestChanged(const bool bVisible);// 0x2721078ea041
	bool BroadcastCheckPickupItemVaildInBackpack(const int InThisID);// 0x2720078ea041
	bool BroadcastCheckPickupItemVaild(const int InThisID);// 0x271f078ea041
	void BroadcastCharacterRescueStateChanged(const byte NewRescueState);// 0x271e078ea041
	void BroadcastCharacterLevelExpChanged(const int NewLevel, const float NewExpRatio);// 0x271d078ea041
	void BroadcastCharacterHPState();// 0x271c078ea041
	void BroadcastCharacterGainExp(const int ExpAdded);// 0x271b078ea041
	void BroadcastBuyResurrectBtnVisibility();// 0x271a078ea041
	void BroadcastBattleUpgradeEffect(const enum EffectType, const int ParamSum);// 0x2719078ea041
	void BroadcastBattleModeChanged(byte InModeType);// 0x2718078ea041
	void BroadcastBattleHUDVisibilityChanged(const bool bVisible);// 0x2717078ea041
	void BroadcastBackpackTakesPickup(out const Vector2D NewPosition);// 0x2716078ea041
	void BroadcastBackpackReleasesPickup();// 0x2715078ea041
	void BroadcastAimingEnemy(SolarCharacter* InEnemy);// 0x2714078ea041
	void BoolUIInteractDelegate__DelegateSignature(bool bValue);// 0x2713078ea041
	void BoolGameModeLuaDelegate__DelegateSignature(bool bValue);// 0x2712078ea041
	void BoolCharacterLuaDelegate__DelegateSignature(bool bValue);// 0x2711078ea041
	void BindLocalSpectateDelegates(SolarSpectateInfo* SpectateInfo);// 0x2710078ea041
	void AddItemToPickup(Object* InCardItem);// 0x270f078ea041
	void ActionWheelCommandExecDelegate__DelegateSignature();// 0x270e078ea041
	void ActionWheelCommandCancelDelegate__DelegateSignature();// 0x270d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HUDNoticeParams
	<FString,FString> Params;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ItemCountsList
	<enum,int> Type2IntMap;//[Offset: 0x0, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InteractionTriggerInfo
	GameplayTag GameplayTag;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldMark_ReviveTeammates.WorldMark_ReviveBase.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* Panel;//[Offset: 0x4e0, Size: 0x8]
	CanvasPanel* Panel_rotate;//[Offset: 0x4e8, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x4f0, Size: 0x8]
	Image* Img_Light;//[Offset: 0x4f8, Size: 0x8]
	Image* img_HeadBg_Shadow;//[Offset: 0x500, Size: 0x8]
	Image* img_PlayerHead;//[Offset: 0x508, Size: 0x8]
	Image* ProgressCD;//[Offset: 0x510, Size: 0x8]
	SolarTextBlock* Txt_Recover;//[Offset: 0x518, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x520, Size: 0x8]
	SolarTextBlock* Txt_Recover_Off;//[Offset: 0x528, Size: 0x8]
	MaterialInstanceDynamic* CDMaterial;//[Offset: 0x530, Size: 0x8]
	SolarResurrectionComponent* ResurrectionComp;//[Offset: 0x538, Size: 0x8]
	FName ProgressParamName;//[Offset: 0x540, Size: 0x8]
	LinearColor ProgressParamDefaultValue;//[Offset: 0x548, Size: 0x10]
	FString TimeParamName;//[Offset: 0x558, Size: 0x10]
	int DistanceLocalTextID;//[Offset: 0x568, Size: 0x4]
	int RecoverLocalTextID;//[Offset: 0x56c, Size: 0x4]
	int TimeFormatLocalTextID;//[Offset: 0x570, Size: 0x4]
	float TickInterval;//[Offset: 0x574, Size: 0x4]
	float TickDeltaTime;//[Offset: 0x578, Size: 0x4]
	void SetOutOfScreen(bool OutOfScreen);// 0x6258078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGMManagerConfigComponent.SolarGameplayConfigComponent.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CFG_BattleRoyale_C.CFG_Framework_C.CGMGameplayConfig.GameplayConfigBase.DataAsset.Object
	int None;//[Offset: 0x42c, Size: 0x4]
	int None;//[Offset: 0x430, Size: 0x4]
	int None;//[Offset: 0x434, Size: 0x4]
	BehaviorTree* None;//[Offset: 0x438, Size: 0x28]
	BehaviorTree* None;//[Offset: 0x460, Size: 0x28]
	BehaviorTree* None;//[Offset: 0x488, Size: 0x28]
	int None;//[Offset: 0x4b0, Size: 0x4]
	DataTable* None;//[Offset: 0x4b8, Size: 0x8]
	int None;//[Offset: 0x4c0, Size: 0x4]
	class SolarBotAIController* AIController;//[Offset: 0x4c8, Size: 0x28]
	bool None;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 0x1]
	float None;//[Offset: 0x4f4, Size: 0x4]
	float None;//[Offset: 0x4f8, Size: 0x4]
	int None;//[Offset: 0x4fc, Size: 0x4]
	int None;//[Offset: 0x500, Size: 0x4]
	int None;//[Offset: 0x504, Size: 0x4]
	int None;//[Offset: 0x508, Size: 0x4]
	int None;//[Offset: 0x50c, Size: 0x4]
	Int32Range None;//[Offset: 0x510, Size: 0x10]
	Int32Range None;//[Offset: 0x520, Size: 0x10]
	float None;//[Offset: 0x530, Size: 0x4]
	S_SkillState None;//[Offset: 0x534, Size: 0x2]
	S_SkillState None;//[Offset: 0x536, Size: 0x2]
	<int,int> None;//[Offset: 0x538, Size: 0x50]
	<int,int> None;//[Offset: 0x588, Size: 0x50]
	S_SkillState None;//[Offset: 0x5d8, Size: 0x2]
	S_SkillState None;//[Offset: 0x5da, Size: 0x2]
	bool None;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 0x1]
	S_SkillState None;//[Offset: 0x5dd, Size: 0x2]
	int TopVictoryTeamRank;//[Offset: 0x5e0, Size: 0x4]
	int MaxBattleCountDown;//[Offset: 0x5e4, Size: 0x4]
	void GetSkillStateByNameEnum(byte Enum, out S_SkillState Out, bool K2Node_SwitchEnum_CmpSuccess);// 0x2fa66220
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SetRenderParametersBasedOnDifferentStates_C.SolarRenderParametersBasedOnDifferentStates.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x230, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x238, Size: 0x8]
	SolarCharacter* Solar Character;//[Offset: 0x240, Size: 0x8]
	TimerHandle Loop Timer;//[Offset: 0x248, Size: 0x8]
	float Min Skydiving Height;//[Offset: 0x250, Size: 0x4]
	ExponentialHeightFog* Height Fog;//[Offset: 0x258, Size: 0x8]
	bool Interpolate Fog Color;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	LinearColor Default Fog Color;//[Offset: 0x264, Size: 0x10]
	LinearColor Landing Fog Color;//[Offset: 0x274, Size: 0x10]
	float Characte Start  Skydiving Height;//[Offset: 0x284, Size: 0x4]
	float Max Skydiving Height;//[Offset: 0x288, Size: 0x4]
	bool Interpolate Fog Density;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 0x1]
	float Default Fog Density;//[Offset: 0x290, Size: 0x4]
	float Landing Fog Density;//[Offset: 0x294, Size: 0x4]
	bool Interpolate Fog Height Falloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	float Default Fog Height Falloff;//[Offset: 0x29c, Size: 0x4]
	float Landing Fog Height Falloff;//[Offset: 0x2a0, Size: 0x4]
	bool Interpolate Start Distance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	float Default Start Distance;//[Offset: 0x2a8, Size: 0x4]
	float Landing Start Distance;//[Offset: 0x2ac, Size: 0x4]
	enum Character Skydiving State;//[Offset: 0x2b0, Size: 0x1]
	enum BeginPlayState;//[Offset: 0x2b1, Size: 0x1]
	TimerHandle Reset Fog Loop Timer;//[Offset: 0x2b8, Size: 0x8]
	TimerHandle Fog Loop Timer;//[Offset: 0x2c0, Size: 0x8]
	void Interpolation Start Distance(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0x10e7507b6a001
	void Interpolation Fog Height Falloff(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0x10e7607b6a001
	void Interpolation Fog Density(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0x10e7707b6a001
	void Interpolation Fog Color(out LinearColor Fog Color after Interpolation, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_MapRangeClamped_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue);// 0x10e7807b6a001
	static void HeightFog(enum Character Skydiving State, bool K2Node_SwitchEnum_CmpSuccess, LinearColor CallFunc_Interpolation_Fog_Color_Fog_Color_after_Interpolation, LinearColor CallFunc_Interpolation_Fog_Color_Fog_Color_after_Interpolation, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors, ExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue);// 0x10e7907b6a001
	void MaterialShadowDistance_Change(enum Character Skydiving State, float CallFunc_GetConsoleVariableFloatValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x10e7a07b6a001
	void TreeCullDistance_Change(enum Character Skydiving State, bool K2Node_SwitchEnum_CmpSuccess);// 0x10e7b07b6a001
	void SetRenderParamerts(SolarCharacter* Solar Character);// 0x10e7c07b6a001
	void Set Render Paramerts With Height();// 0x10e7d07b6a001
	void ReceiveBeginPlay();// 0x10e7e07b6a001
	void ResetToInitialState(SolarCharacter* Solar Character);// 0x10e7f07b6a001
	void Reset Set Fog();// 0x7652078fdb33
	void Flying set Fog();// 0x14c2507b6a008
	void ExecuteUbergraph_BP_SetRenderParametersBasedOnDifferentStates(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, SolarCharacter* K2Node_CustomEvent_Solar_Character, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_LessEqual_FloatFloat_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool Temp_bool_IsClosed_Variable, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetCameraFocusedCharacter_ReturnValue, SolarCharacter* K2Node_CustomEvent_Solar_Character, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, SolarCharacter* CallFunc_GetCameraFocusedCharacter_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0xf5becc0c08edb600
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarRenderParametersBasedOnDifferentStates.Actor.Object
	DataTable* StreamingDistanceDataTable;//[Offset: 0x228, Size: 0x8]
	void SetRelativeStreamingDistanceScale(enum InCharacterSkydivingState);// 0x571a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCityName.Actor.Object
	SolarStrongholdNamesConfig* NameConfigCN;//[Offset: 0x228, Size: 0x8]
	SolarStrongholdNamesConfig* NameConfigEN;//[Offset: 0x230, Size: 0x8]
	Texture* NameTextureCN;//[Offset: 0x238, Size: 0x8]
	Texture* NameTextureEN;//[Offset: 0x240, Size: 0x8]
	MaterialInterface* NameMaterial;//[Offset: 0x248, Size: 0x8]
	FString PointName;//[Offset: 0x250, Size: 0x10]
	MaterialInterface* TextMaterial;//[Offset: 0x260, Size: 0x8]
	SoftObjectPath FontPath;//[Offset: 0x268, Size: 0x18]
	float BaseScale;//[Offset: 0x280, Size: 0x4]
	float HightLimit;//[Offset: 0x284, Size: 0x4]
	float MinimumDistance;//[Offset: 0x288, Size: 0x4]
	int LocTextID;//[Offset: 0x28c, Size: 0x4]
	bool bCapitalsLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	float GradientFadeTime;//[Offset: 0x294, Size: 0x4]
	enum PreviewLang;//[Offset: 0x298, Size: 0x1]
	SoftObjectPath PreviewFontPath;//[Offset: 0x2a0, Size: 0x18]
	MaterialInstanceDynamic* MaterialDynamic;//[Offset: 0x2c0, Size: 0x8]
	MaterialInstanceDynamic* TextMaterialDynamic;//[Offset: 0x2c8, Size: 0x8]
	void SetSolarCityNameTickAndShow(enum OldMode, enum CurMode);// 0x50af078ea041
	void SetSolarCityNameTick(bool bNeedTick);// 0x50ae078ea041
	void SetForceDisplay(bool bDisplay);// 0x50ad078ea041
	void OnCharacterOnRep();// 0x50ac078ea041
	FString[] GetLocalizationCityNamesWithAllLanguages();// 0x50ab078ea041
	FString GetLocalizationCityName(bool bGetNameWithLang);// 0x50aa078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarStrongholdNamesConfig.DataAsset.Object
	<FString,Vector4> NamesMap;//[Offset: 0x30, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WarmGameMode.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int UniqueId;//[Offset: 0x10, Size: 0x4]
	int CCUStart;//[Offset: 0x14, Size: 0x4]
	int CCUEnd;//[Offset: 0x18, Size: 0x4]
	int NumOfAI;//[Offset: 0x1c, Size: 0x4]
	int AiLevel;//[Offset: 0x20, Size: 0x4]
	FString AILevelConfig;//[Offset: 0x28, Size: 0x10]
	int AITeamPresetsID;//[Offset: 0x38, Size: 0x4]
	bool EnableTeamManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int MinPlayer;//[Offset: 0x40, Size: 0x4]
	int MaxRealGroup;//[Offset: 0x44, Size: 0x4]
	int LeastRealPlayer;//[Offset: 0x48, Size: 0x4]
	int MaxWait;//[Offset: 0x4c, Size: 0x4]
	bool HasMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	int ReadyStateTime;//[Offset: 0x54, Size: 0x4]
	int StopMatchTime;//[Offset: 0x58, Size: 0x4]
	bool HasAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool AIAccompany;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	int AIAccompanyTimeline;//[Offset: 0x60, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesDataBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomRoomManager.GameManagerBase.Info.Actor.Object
	int RoomTeamMemberLimit;//[Offset: 0x230, Size: 0x4]
	int RoomLeftTime;//[Offset: 0x234, Size: 0x4]
	bool bIsGameStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	bool bIsWeaponSettingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]
	bool bIsVehicleSettingOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a, Size: 0x1]
	CategoryConfig[] CustomCategoryConfigs;//[Offset: 0x240, Size: 0x10]
	byte[] WeaponTypeAvailableList;//[Offset: 0x250, Size: 0x10]
	byte[] VehicleClassAvailableList;//[Offset: 0x260, Size: 0x10]
	int[] WeaponSettingBlacklist;//[Offset: 0x270, Size: 0x10]
	int[] VehicleTypeSettingBlacklist;//[Offset: 0x280, Size: 0x10]
	UserSetting[] UserSettingList;//[Offset: 0x290, Size: 0x10]
	delegate WeaponTypeAvailableChangedEvent;//[Offset: 0x2a0, Size: 0x10]
	delegate WeaponSettingBlacklistChangedEvent;//[Offset: 0x2b0, Size: 0x10]
	delegate VehicleClassAvailableChangedEvent;//[Offset: 0x2c0, Size: 0x10]
	delegate VehicleTypeSettingBlacklistChangedEvent;//[Offset: 0x2d0, Size: 0x10]
	delegate UserSettingsChangedEvent;//[Offset: 0x2e0, Size: 0x10]
	CustomRoomData RoomData;//[Offset: 0x300, Size: 0xd8]
	void WeaponTypeAvailableChangedEvent__DelegateSignature(out const byte[] WeaponTypeAvailableList);// 0x2294078ea041
	void WeaponSettingBlacklistChangedEvent__DelegateSignature(out const int[] WeaponSettingBlacklist);// 0x2293078ea041
	void VehicleTypeSettingBlacklistChangedEvent__DelegateSignature(out const int[] VehicleTypeSettingBlacklist);// 0x2292078ea041
	void VehicleClassAvailableChangedEvent__DelegateSignature(out const byte[] VehicleClassAvailableList);// 0x2291078ea041
	void UserSettingsChangedEvent__DelegateSignature(out const UserSetting[] UserSettingList);// 0x228f078ea041
	void SetTimerToNoticeTeamsInfoChanged();// 0x228e078ea041
	void ReceiveUserSettingChanged(const int Category, const int Name, const int NewIndex);// 0x228d078ea041
	void ReceiveTournamentDealy();// 0x228c078ea041
	void ReceivePlayerRemoved(FString SolarPlayerID, enum reason);// 0x228b078ea041
	void OnUserSettingChangedEvent(out const int Name, CustomParamConfig ConfigInfo, out const int Value);// 0x228a078ea041
	void OnTournamentDealy();// 0x2289078ea041
	void OnTeamsInfoPostChanged();// 0x2288078ea041
	void OnServerPreKickPlayer(SolarPlayerState* PS);// 0x2287078ea041
	void OnRoomOwnerLeftRoom();// 0x2286078ea041
	void OnRep_WeaponTypeAvailableList();// 0x2285078ea041
	void OnRep_WeaponSettingBlacklist();// 0x2284078ea041
	void OnRep_VehicleTypeSettingBlacklist();// 0x2283078ea041
	void OnRep_VehicleClassAvailableList();// 0x2282078ea041
	void OnRep_SettingsValueList();// 0x2281078ea041
	void OnPlayerRemovedFromRoom(FString SolarPlayerID, enum reason);// 0x227f078ea041
	bool OnGameStart();// 0x227e078ea041
	void OnClientRoomDataReadyLuaCall();// 0x227d078ea041
	void OnClientRoomDataReady();// 0x227c078ea041
	bool IsWeaponTypeAvailable(byte WeaponType);// 0x227b078ea041
	bool IsWeaponSettingOpen();// 0x227a078ea041
	bool IsWeaponAvailable(int weaponid);// 0x2279078ea041
	bool IsVehicleTypeAvailable(int VehicleTypeID);// 0x2278078ea041
	bool IsVehicleSettingOpen();// 0x2277078ea041
	bool IsVehicleClassAvailable(byte VehicleClassValue);// 0x2276078ea041
	bool IsRoomOwner(const SCMPlayerState* Player);// 0x2275078ea041
	bool IsRoomHasMinimalSides();// 0x2274078ea041
	bool IsRoomHasEnoughPlayers();// 0x2273078ea041
	byte[] GetWeaponTypeAvailableList();// 0x2272078ea041
	void GetWeaponSettingLists(out int[] OutWeaponBlacklist, out int[] OutWeaponWhitelist);// 0x2271078ea041
	int[] GetWeaponSettingBlacklist();// 0x2270078ea041
	void GetVehicleTypeSettingLists(out int[] OutVehicleBlacklist, out int[] OutVehicleWhitelist);// 0x226f078ea041
	int[] GetVehicleTypeSettingBlacklist();// 0x226e078ea041
	byte[] GetVehicleClassAvailableList();// 0x226d078ea041
	float GetModeParam(int Category, int Name, out CustomParamConfig ParamInfo);// 0x226a078ea041
	int GetCustomParamIndex(int Category, int Name);// 0x2269078ea041
	void ExecuteGameStart();// 0x2268078ea041
	bool CheckWeaponTypeCanSetting(enum WeaponUIType);// 0x2266078ea041
	bool CheckWeaponCanSetting(int weaponid);// 0x2265078ea041
	bool CheckVehicleTypeCanSetting(int VehicleTypeID);// 0x2264078ea041
	bool CheckVehicleClassCanSetting(enum VehicleClass);// 0x2262078ea041
	bool CheckCustomServerOwnerAuthority(const SCMPlayerState* Player);// 0x2261078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UserSetting
	int Name;//[Offset: 0x0, Size: 0x4]
	int Category;//[Offset: 0x4, Size: 0x4]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	enum ValueType;//[Offset: 0x9, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]
	float[] ValueRange;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomParamConfig
	int DisplayName;//[Offset: 0x0, Size: 0x4]
	int Desc;//[Offset: 0x4, Size: 0x4]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	enum ValueType;//[Offset: 0x9, Size: 0x1]
	int DefaultIndex;//[Offset: 0xc, Size: 0x4]
	float[] ValueRange;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CategoryConfig
	int Category;//[Offset: 0x0, Size: 0x4]
	CustomParamConfig[] Configs;//[Offset: 0x8, Size: 0x10]
	class UserWidget* StyleClass;//[Offset: 0x18, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_EventList_BattleRoyal
	S_Event_BattleRoyale[] EventList_3_9C55B4BD476EE1024C917DAC11DB6F31;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_Event_BattleRoyale
	int BattleTime_15_6488AAB44E84633B11E7DF844AD3B376;//[Offset: 0x0, Size: 0x4]
	byte EventType_11_8FC191774137C63ED18FD5987B59941D;//[Offset: 0x4, Size: 0x1]
	<FString,FString> EventParam_10_DC47076342DAE72F001FD1A032026480;//[Offset: 0x8, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_MapInfoComponent_C.CGMMapInfo.GameModeCompBase.ActorComponent.Object
	AirlineData Airline;//[Offset: 0x180, Size: 0x28]
	Vector[] SafeAreaCenters;//[Offset: 0x1a8, Size: 0x10]
	bool StaticAirline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	bool StaticSafeArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 0x1]
	DataTable* DT_EventTimeline_BattleRoyale;//[Offset: 0x1c0, Size: 0x8]
	bool UsePoisonCircleMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	Vector2D TempDir;//[Offset: 0x1cc, Size: 0x8]
	bool UseFakePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 0x1]
	<int,Vector2D> FakePointRangeArr;//[Offset: 0x1d8, Size: 0x50]
	bool UseFakeBombPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	<int,Vector2D> FakeBombPointRangeArr;//[Offset: 0x230, Size: 0x50]
	Vector PreCirclePoint;//[Offset: 0x280, Size: 0xc]
	float[] CircleRadiusArr;//[Offset: 0x290, Size: 0x10]
	int StaticAirlineID;//[Offset: 0x2a0, Size: 0x4]
	Int32Range OverrideCenterIndex;//[Offset: 0x2a4, Size: 0x10]
	void Calculate Required Parameters(out float[] RadiusArr, int Index, out float Radius, out float MaxOffset, out float GoToTheCentreRadius, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_FMin_ReturnValue);// 0xc3a007b6a001
	void Random Get Fake Bomb Point(out const int Key, out Vector Pos, out bool Success, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_RandomUnitVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0xc3a107b6a001
	void SetFakeBombPointRangeArrr(<int,Vector2D> FakeBombPointRangeArr);// 0xc3a207b6a001
	void SetFakePointRnageArr(<int,Vector2D> FakePointRnageArr);// 0xc3a307b6a001
	void Get Safe Area Centers Len(out int Len, int CallFunc_Array_Length_ReturnValue);// 0xc3a407b6a001
	void CalculateFakePoint(Vector Centre, float SmallRadiu, float LargeRadiu, int Index, out Vector Pos, Vector TempPos, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Max_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Normal_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_VSize2D_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, float CallFunc_Array_Get_Item, Vector CallFunc_Multiply_VectorInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_SelectFloat_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FMin_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector2D CallFunc_Normal2D_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0xc3a507b6a001
	static void Join Next(float Radius, float MaxOffset, int LastIndex, out Vector[] TargetArray, float GoToTheCentreRadius, bool AddFlag, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, Vector CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_RandomFloatInRange_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Conv_FloatToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int Temp_int_Variable, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Vector_Normal2D_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_Random_Selection_Add, int CallFunc_Array_Add_ReturnValue);// 0xc3a607b6a001
	void Random Selection(float TargetDisMax, float Radius, out Vector[] TargetArray, bool NeedCheckBoundary, out bool Add, int CallFunc_Array_LastIndex_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Array_Get_Item, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_JudgeBoundary_DontInBoundary, int CallFunc_Array_Add_ReturnValue);// 0xc3a707b6a001
	void JudgeBoundary(Vector Pos, float Radius, out bool DontInBoundary, Vector2D NewLocalVar, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, bool CallFunc_CheckMapDarkDataWithVector_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_IsPointInBox_ReturnValue);// 0xc3a807b6a001
	void Calculate Poison Circle Point Array(out float[] RadiusArr, Vector FirstPoint, bool Failed, int Index, Vector[] TempAreaPosArray, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Calculate_Required_Parameters_Radius, float CallFunc_Calculate_Required_Parameters_MaxOffset, float CallFunc_Calculate_Required_Parameters_GoToTheCentreRadius, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_PoisonCircleMarker_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, SolarMapManager* CallFunc__A_GetMapManager_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_GetRandomVectorFromMapDarkData_ReturnValue, int CallFunc_Max_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xc3a907b6a001
	void Get Safe Area Center(int Index, out Vector Pos, Vector Point, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_StructToJson_Json, BP_PlayerState_Framework_C*[] CallFunc_GetPlayerList_ReturnValue, BP_PlayerState_Framework_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_InRange_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, const <FString,FString> K2Node_MakeMap_Map, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, Vector2D CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Vector2D[] CallFunc_Map_Values_Values, int CallFunc_Array_LastIndex_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector2D CallFunc_Array_Get_Item, Vector2D K2Node_Select_Default, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_CalculateFakePoint_Pos, Vector[] K2Node_Select_Default, Vector CallFunc_Array_Get_Item);// 0xc3aa07b6a001
	int GetAirline(out AirlineData Airline, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue);// 0x124f907b6a008
	void SetStaticSafeArea(out Vector[] SafeAreaCenters, Int32Range OverrideIndexRange);// 0x124c107b6a008
	void SetStaticAirline(AirlineData Airline, int StaticAirlineID);// 0x1251d07b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CGMMapInfo.GameModeCompBase.ActorComponent.Object
	Vector[] AreaPosArray;//[Offset: 0xd0, Size: 0x10]
	int MapId;//[Offset: 0xe0, Size: 0x4]
	int UsedAirlineID;//[Offset: 0xe4, Size: 0x4]
	AirlineData UsedAirlineData;//[Offset: 0xe8, Size: 0x28]
	<int,AirlineData> AirlineDataList;//[Offset: 0x120, Size: 0x50]
	int MaskWidth;//[Offset: 0x170, Size: 0x4]
	float MaskScale;//[Offset: 0x174, Size: 0x4]
	int MapWidth;//[Offset: 0x178, Size: 0x4]
	int MapHeight;//[Offset: 0x17c, Size: 0x4]
	void LoadAirlineData();// 0x45dd078ea041
	void InitInfo(int InMapID);// 0x45dc078ea041
	int GetUsedAirlineData(out AirlineData OutData);// 0x45db078ea041
	int GetMapIDByName(SCustomGameState* InGameState, FString Name);// 0x45da078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AirlineData
	float AirlineHeight;//[Offset: 0x0, Size: 0x4]
	float AirlineSpeed;//[Offset: 0x4, Size: 0x4]
	Vector2D StartPoint;//[Offset: 0x8, Size: 0x8]
	Vector2D EndPoint;//[Offset: 0x10, Size: 0x8]
	Vector2D RealStartPoint;//[Offset: 0x18, Size: 0x8]
	Vector2D RealEndPoint;//[Offset: 0x20, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PoisonCircleMarker_C.SolarMapElementBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x298, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a0, Size: 0x8]
	void ReceiveBeginPlay();// 0x148db07b6a008
	void ExecuteUbergraph_BP_PoisonCircleMarker(int EntryPoint);// 0x2546e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarBombingManager_C.SolarBombingZoneManager.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 0x8]
	FString GetModuleName();// 0x1243c07b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBombingZoneManager.Actor.Object
	class SolarBombActor* BPClass;//[Offset: 0x228, Size: 0x8]
	BombingZone[] ZoneArray;//[Offset: 0x230, Size: 0x10]
	int WeightInCar;//[Offset: 0x244, Size: 0x4]
	int WeightInPoision;//[Offset: 0x248, Size: 0x4]
	int WeightInRoom;//[Offset: 0x24c, Size: 0x4]
	Vector2D LocationLimit;//[Offset: 0x250, Size: 0x8]
	float NotifyTime;//[Offset: 0x258, Size: 0x4]
	void OnCreateBombingZone(int ID, bool bSpecificLocation, Vector TargetLocation);// 0x4f02078ea041
	BombingZoneBomb GetBombData(int ZoneId);// 0x4f01078ea041
	bool CreateBombingZone(out BombingZone Zone, bool bSpecificLocation, Vector TargetLocation);// 0x4f00078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BombingZoneBomb
	float Radius;//[Offset: 0x0, Size: 0x4]
	float MaxDamage;//[Offset: 0x4, Size: 0x4]
	float MinDamage;//[Offset: 0x8, Size: 0x4]
	float VehicleMaxDamage;//[Offset: 0xc, Size: 0x4]
	float VehicleMinDamage;//[Offset: 0x10, Size: 0x4]
	float InVehicleDamageScale;//[Offset: 0x14, Size: 0x4]
	float LandingTime;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BombingZone
	int instanceID;//[Offset: 0x0, Size: 0x4]
	int ConfigID;//[Offset: 0x4, Size: 0x4]
	float Radius;//[Offset: 0x8, Size: 0x4]
	float Duration;//[Offset: 0xc, Size: 0x4]
	int MinBomb;//[Offset: 0x10, Size: 0x4]
	int MaxBomb;//[Offset: 0x14, Size: 0x4]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	BombingZoneBomb Bomb;//[Offset: 0x24, Size: 0x1c]
	enum State;//[Offset: 0x40, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarBombActor.Actor.Object
	bool bFireWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	BombingZoneBomb BombConfig;//[Offset: 0x22c, Size: 0x1c]
	bool bAutoDestroyAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	float TargetLandingTime;//[Offset: 0x254, Size: 0x4]
	ParticleSystem* WaterBombEffect;//[Offset: 0x258, Size: 0x8]
	ParticleSystem* BombEffect;//[Offset: 0x260, Size: 0x8]
	MaterialInstanceDynamic* GuideLine;//[Offset: 0x268, Size: 0x8]
	AkComponent* AkAudioComponent;//[Offset: 0x270, Size: 0x8]
	SolarAkGameObject* SolarAkGameObject;//[Offset: 0x278, Size: 0x8]
	void InitSolarAkGameObject(ActorComponent* Component, bool bReset);// 0x4eff078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Formula_BattleRoyale_C.BP_FormulaBase_C.CGFormula.Info.Actor.Object
	int WarmGameExp;//[Offset: 0x25c, Size: 0x4]
	<SolarPlayerState*,bool> WeaponExp;//[Offset: 0x260, Size: 0x50]
	<int> WarmGameIdSet;//[Offset: 0x2b0, Size: 0x50]
	BP_DefenderManager_C* DefenderManager;//[Offset: 0x300, Size: 0x8]
	static SettlementReward[] GetSettlementRewards(SolarPlayerState* InPS, int MatchRuleID, int MaxRealPersonIndex, int MaxRealPerson, int ItemID, int[] ItemDrop, SolarPlayerState* PS, int RealPersonCount, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Variable, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_GetMatchRuleID_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_Greater_IntInt_ReturnValue, const SolarTablesData_BattleEndRankSettlement CallFunc_GetRowData_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, SolarGameState* K2Node_DynamicCast_AsSolar_Game_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SettlementReward K2Node_MakeStruct_SettlementReward, int CallFunc_Array_Get_Item, SettlementReward[] K2Node_MakeArray_Array, int CallFunc_Array_Get_Item, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_LessEqual_IntInt_ReturnValue, int[] CallFunc_GetRowKeys_OutKeys, int CallFunc_GetRowKeys_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, const SolarTablesData_BattleEndRankSettlement CallFunc_GetRowData_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffffff6b079560
	bool IsSettlementBagItem(SolarPlayerState* InPS, byte CallFunc_GetBattleState_State, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0xc44707b6a001
	void GetDefenderManager(out BP_DefenderManager_C* Output_Get, bool CallFunc_IsValid_ReturnValue, DefenderManager* CallFunc_GetDefenderManager_ReturnValue, BP_DefenderManager_C* K2Node_DynamicCast_AsBP_Defender_Manager, bool K2Node_DynamicCast_bSuccess);// 0x278d107b6a008
	void MVPLifeTimeScore(float Life Time, out float LTMVPScore, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0xbc0d07b6a001
	static void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult, int[] Result, const int Temp_int_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int[] CallFunc_GetStrategyGuideConditions_OutResult, int CallFunc_Array_Add_ReturnValue);// 0xbc0e07b6a001
	int CalculateTeamRank(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, FString CallFunc_GetTeamName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0xbc0f07b6a001
	int CalculatePlayerRank(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0xbc1807b6a001
	float BattleStateDealFloat(float Input, byte Temp_byte_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, byte CallFunc_GetBattleState_State, float K2Node_Select_Default);// 0xbc1907b6a001
	int BattleStateDealInt(int Input, byte Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_GetBattleState_State, int K2Node_Select_Default);// 0xbc1a07b6a001
	void GetBattleState(out byte State, byte CallFunc_GetDataByte_OutValue, bool CallFunc_GetDataByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0xbc1b07b6a001
	float GetKDA(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float Temp_float_Variable, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BattleStateDealFloat_ReturnValue);// 0xbc1c07b6a001
	static SettlementParam_ExtraRewardInfo[] GetExtraRewards(SolarPlayerState* InPS, SettlementParam_ExtraRewardInfo[] CommonRewards, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString Temp_string_Variable, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, bool Temp_bool_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default, byte CallFunc_GetBattleState_State, FString CallFunc_FormatRewardItem_ItemString, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString[] K2Node_MakeArray_Array, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Combine_Reward_Item_RewardString, int Temp_int_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, bool Temp_bool_Variable, int CallFunc_Array_Add_ReturnValue, int K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, int CallFunc_Array_Add_ReturnValue, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo[] Temp_struct_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, bool Temp_bool_Variable, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, SettlementParam_ExtraRewardInfo[] K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_FormatRewardItem_ItemString, FString K2Node_Select_Default, FString[] K2Node_MakeArray_Array, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo[] K2Node_MakeArray_Array);// 0xbc1d07b6a001
	void GetPlayerData(SolarPlayerState* Player, out int KillCount, out int KillDown, out int Assist, out int SaveCount, out float LifeTime, out float CauseDamage, out int Rank, out int TeamRank, out int DeathCount, out bool TeamAced, out bool IsMVP, out bool IsCustomRoomActive, out byte DefenderType, FString TeamName, FString PlayerId, FString CallFunc_GetTeamName_ReturnValue, byte CallFunc_GetDataByte_OutValue, bool CallFunc_GetDataByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_GetDataBool_OutValue, bool CallFunc_GetDataBool_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue, int CallFunc_GetDataInt_OutValue, bool CallFunc_GetDataInt_ReturnValue);// 0xbc1e07b6a001
	float CalculateMVPScore(SolarPlayerState* InPS, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_MVPLifeTimeScore_LTMVPScore, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BattleStateDealFloat_ReturnValue);// 0xbc1f07b6a001
	int GetZomborg(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool Temp_bool_Variable, int CallFunc_FTrunc_ReturnValue, int Temp_int_Variable, int K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int K2Node_Select_Default);// 0xbc2007b6a001
	int GetWeaponExp(SolarPlayerState* InPS, int InWeaponID, int Exp, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, float CallFunc_GetMapDataFloat_OutValue, bool CallFunc_GetMapDataFloat_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_GetMapDataInt_OutValue, bool CallFunc_GetMapDataInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int Temp_int_Variable, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, const bool Temp_bool_Variable, int CallFunc_Round_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue);// 0xbc2107b6a001
	static void GetCharacterExp(SolarPlayerState* InPS, out int OutGetExp, out int[] OutReason, int[] ExpReason, int Exp, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_GetPoint CallFunc_TryGetRowData_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xbc2207b6a001
	int GetAccountExp(SolarPlayerState* InPS, bool Temp_bool_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_BattleStateDealInt_ReturnValue, int CallFunc_GetFixedLevelExp_ReturnValue, int K2Node_Select_Default);// 0xbc2307b6a001
	static void GetShowPageIndexs(SolarPlayerState* InPS, out const SettlePageParam InParam, out int[] OutResult, SolarPlayerState* PlayerState, int[] SettlePages, const int Temp_int_Variable, int CallFunc_GetPlayerData_KillCount, int CallFunc_GetPlayerData_KillDown, int CallFunc_GetPlayerData_Assist, int CallFunc_GetPlayerData_SaveCount, float CallFunc_GetPlayerData_LifeTime, float CallFunc_GetPlayerData_CauseDamage, int CallFunc_GetPlayerData_Rank, int CallFunc_GetPlayerData_TeamRank, int CallFunc_GetPlayerData_DeathCount, bool CallFunc_GetPlayerData_TeamAced, bool CallFunc_GetPlayerData_IsMvp, bool CallFunc_GetPlayerData_IsCustomRoomActive, byte CallFunc_GetPlayerData_DefenderType, const int Temp_int_Variable, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const int Temp_int_Variable, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, SolarGameInstanceBase* CallFunc_GetSolarGameInstanceBase_ReturnValue, SolarLuaHelper* CallFunc_GetSolarLuaHelper_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_IsBattlePassInfoUpdated_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, int[] K2Node_MakeArray_Array);// 0x3f7fff8c078ea003
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_FormulaBase_C.CGFormula.Info.Actor.Object
	float ExpGain-LifeTimeLimit;//[Offset: 0x258, Size: 0x4]
	<int,int> GetCollectionItemRewards(SolarPlayerState* InPS, <int,int> CollectionItemOutBattle, int Temp_int_Array_Index_Variable, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, int Temp_int_Loop_Counter_Variable, FText CallFunc_Format_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_Collect CallFunc_TryGetRowData_ReturnValue);// 0xd9122093a6652c82
	int GetFixedLevelExp(int Origin, SolarPlayerState* Player, int finalExp, bool Temp_bool_Variable, float CallFunc_GetDataFloat_OutValue, bool CallFunc_GetDataFloat_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool Temp_bool_Variable, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_AccountFixedExp CallFunc_TryGetRowData_ReturnValue, int K2Node_Select_Default, int K2Node_Select_Default);// 0xffffff8c4a42a000
	void GetStrategyGuideConditions(SolarPlayerState* InPS, out int[] OutResult, int[] Result, const int Temp_int_Variable, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_Greater_IntInt_ReturnValue, PlayerStatisticsData* CallFunc_GetPlayerStatData_ReturnValue, int[] CallFunc_GetValue_IntArray_OutResult, int CallFunc_GetPlayerStatisticData_OutValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetPlayerStatisticData_OutValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const int Temp_int_Variable, bool CallFunc_BooleanOR_ReturnValue, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2fa5e020
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_TablesReader.Object
	SolarTables_Reader_AccountFixedExp* AccountFixedExp;//[Offset: 0x28, Size: 0x8]
	SolarTables_Reader_AccountFlag* AccountFlag;//[Offset: 0x30, Size: 0x8]
	SolarTables_Reader_Airline* Airline;//[Offset: 0x38, Size: 0x8]
	SolarTables_Reader_Armory* Armory;//[Offset: 0x40, Size: 0x8]
	SolarTables_Reader_BattleUpgradeContent* BattleUpgradeContent;//[Offset: 0x48, Size: 0x8]
	SolarTables_Reader_BattleUpgradeEffect* BattleUpgradeEffect;//[Offset: 0x50, Size: 0x8]
	SolarTables_Reader_BattleUpgradeEffectPool* BattleUpgradeEffectPool;//[Offset: 0x58, Size: 0x8]
	SolarTables_Reader_BattleEndRankSettlement* BattleEndRankSettlement;//[Offset: 0x60, Size: 0x8]
	SolarTables_Reader_BpAward* BpAward;//[Offset: 0x68, Size: 0x8]
	SolarTables_Reader_Behavior* Behavior;//[Offset: 0x70, Size: 0x8]
	SolarTables_Reader_EscapeExp* EscapeExp;//[Offset: 0x78, Size: 0x8]
	SolarTables_Reader_CaseToggleAlphabet* CaseToggleAlphabet;//[Offset: 0x80, Size: 0x8]
	SolarTables_Reader_UnitCharacter* UnitCharacter;//[Offset: 0x88, Size: 0x8]
	SolarTables_Reader_CharacterAbility* CharacterAbility;//[Offset: 0x90, Size: 0x8]
	SolarTables_Reader_CharacterPassiveAbility* CharacterPassiveAbility;//[Offset: 0x98, Size: 0x8]
	SolarTables_Reader_GetPoint* GetPoint;//[Offset: 0xa0, Size: 0x8]
	SolarTables_Reader_ChestSpawn* ChestSpawn;//[Offset: 0xa8, Size: 0x8]
	SolarTables_Reader_ChestSpawnGroup* ChestSpawnGroup;//[Offset: 0xb0, Size: 0x8]
	SolarTables_Reader_ClanFlag* ClanFlag;//[Offset: 0xb8, Size: 0x8]
	SolarTables_Reader_DayAndNight* DayAndNight;//[Offset: 0xc0, Size: 0x8]
	SolarTables_Reader_DsVariableRange* DsVariableRange;//[Offset: 0xc8, Size: 0x8]
	SolarTables_Reader_EShop* EShop;//[Offset: 0xd0, Size: 0x8]
	SolarTables_Reader_EShopDemoModel* EShopDemoModel;//[Offset: 0xd8, Size: 0x8]
	SolarTables_Reader_EShopGoodsPool* EShopGoodsPool;//[Offset: 0xe0, Size: 0x8]
	SolarTables_Reader_EShopGoodsPoolGroup* EShopGoodsPoolGroup;//[Offset: 0xe8, Size: 0x8]
	SolarTables_Reader_EShopSpawn* EShopSpawn;//[Offset: 0xf0, Size: 0x8]
	SolarTables_Reader_BattleRoyaleMode* BattleRoyaleMode;//[Offset: 0xf8, Size: 0x8]
	SolarTables_Reader_GameModeGroup* GameModeGroup;//[Offset: 0x100, Size: 0x8]
	SolarTables_Reader_GameModeMain* GameModeMain;//[Offset: 0x108, Size: 0x8]
	SolarTables_Reader_OutcomeSet* OutcomeSet;//[Offset: 0x110, Size: 0x8]
	SolarTables_Reader_GameTimeLine* GameTimeLine;//[Offset: 0x118, Size: 0x8]
	SolarTables_Reader_GlobalOutcome* GlobalOutcome;//[Offset: 0x120, Size: 0x8]
	SolarTables_Reader_GlobalSensitivity* GlobalSensitivity;//[Offset: 0x128, Size: 0x8]
	SolarTables_Reader_HeroPowerFormula* HeroPowerFormula;//[Offset: 0x130, Size: 0x8]
	SolarTables_Reader_InputAction* InputAction;//[Offset: 0x138, Size: 0x8]
	SolarTables_Reader_InputMapping* InputMapping;//[Offset: 0x140, Size: 0x8]
	SolarTables_Reader_Item* Item;//[Offset: 0x148, Size: 0x8]
	SolarTables_Reader_BackpackProperty* BackpackProperty;//[Offset: 0x150, Size: 0x8]
	SolarTables_Reader_BackpackTrailProperty* BackpackTrailProperty;//[Offset: 0x158, Size: 0x8]
	SolarTables_Reader_CapsuleProperty* CapsuleProperty;//[Offset: 0x160, Size: 0x8]
	SolarTables_Reader_Dance* Dance;//[Offset: 0x168, Size: 0x8]
	SolarTables_Reader_Emote* Emote;//[Offset: 0x170, Size: 0x8]
	SolarTables_Reader_KillNotify* KillNotify;//[Offset: 0x178, Size: 0x8]
	SolarTables_Reader_MaterialProperty* MaterialProperty;//[Offset: 0x180, Size: 0x8]
	SolarTables_Reader_VehicleSkinProperty* VehicleSkinProperty;//[Offset: 0x188, Size: 0x8]
	SolarTables_Reader_Voice* Voice;//[Offset: 0x190, Size: 0x8]
	SolarTables_Reader_WeaponSkinProperty* WeaponSkinProperty;//[Offset: 0x198, Size: 0x8]
	SolarTables_Reader_ItemCustomType* ItemCustomType;//[Offset: 0x1a0, Size: 0x8]
	SolarTables_Reader_ItemInBattle* ItemInBattle;//[Offset: 0x1a8, Size: 0x8]
	SolarTables_Reader_ArmorProperty* ArmorProperty;//[Offset: 0x1b0, Size: 0x8]
	SolarTables_Reader_Chest* Chest;//[Offset: 0x1b8, Size: 0x8]
	SolarTables_Reader_Collect* Collect;//[Offset: 0x1c0, Size: 0x8]
	SolarTables_Reader_EnergyProperty* EnergyProperty;//[Offset: 0x1c8, Size: 0x8]
	SolarTables_Reader_ExtraEnergyProperty* ExtraEnergyProperty;//[Offset: 0x1d0, Size: 0x8]
	SolarTables_Reader_GunProperty* GunProperty;//[Offset: 0x1d8, Size: 0x8]
	SolarTables_Reader_ItemBehavior* ItemBehavior;//[Offset: 0x1e0, Size: 0x8]
	SolarTables_Reader_ItemWeaponParts* ItemWeaponParts;//[Offset: 0x1e8, Size: 0x8]
	SolarTables_Reader_JetPackModuleProperty* JetPackModuleProperty;//[Offset: 0x1f0, Size: 0x8]
	SolarTables_Reader_ShieldProperty* ShieldProperty;//[Offset: 0x1f8, Size: 0x8]
	SolarTables_Reader_ItemQuality* ItemQuality;//[Offset: 0x200, Size: 0x8]
	SolarTables_Reader_ItemSound* ItemSound;//[Offset: 0x208, Size: 0x8]
	SolarTables_Reader_LobbyAutoDownload* LobbyAutoDownload;//[Offset: 0x210, Size: 0x8]
	SolarTables_Reader_LanguageSwitcher* LanguageSwitcher;//[Offset: 0x218, Size: 0x8]
	SolarTables_Reader_Localization* Localization;//[Offset: 0x220, Size: 0x8]
	SolarTables_Reader_Localization_BattleUI* Localization_BattleUI;//[Offset: 0x228, Size: 0x8]
	SolarTables_Reader_Localization_EventSystem* Localization_EventSystem;//[Offset: 0x230, Size: 0x8]
	SolarTables_Reader_Localization_General* Localization_General;//[Offset: 0x238, Size: 0x8]
	SolarTables_Reader_Localization_Heroes* Localization_Heroes;//[Offset: 0x240, Size: 0x8]
	SolarTables_Reader_Localization_Item* Localization_Item;//[Offset: 0x248, Size: 0x8]
	SolarTables_Reader_Localization_Tournament* Localization_Tournament;//[Offset: 0x250, Size: 0x8]
	SolarTables_Reader_Localization_Uncategorized* Localization_Uncategorized;//[Offset: 0x258, Size: 0x8]
	SolarTables_Reader_GameMap* GameMap;//[Offset: 0x260, Size: 0x8]
	SolarTables_Reader_MapMarkIcon* MapMarkIcon;//[Offset: 0x268, Size: 0x8]
	SolarTables_Reader_MatchRule* MatchRule;//[Offset: 0x270, Size: 0x8]
	SolarTables_Reader_RankMatch* RankMatch;//[Offset: 0x278, Size: 0x8]
	SolarTables_Reader_NameCardBackground* NameCardBackground;//[Offset: 0x280, Size: 0x8]
	SolarTables_Reader_NameCardPose* NameCardPose;//[Offset: 0x288, Size: 0x8]
	SolarTables_Reader_ObGift* ObGift;//[Offset: 0x290, Size: 0x8]
	SolarTables_Reader_OBSubtitle_Action2Feature* OBSubtitle_Action2Feature;//[Offset: 0x298, Size: 0x8]
	SolarTables_Reader_OBSubtitle_Feature2Emotion* OBSubtitle_Feature2Emotion;//[Offset: 0x2a0, Size: 0x8]
	SolarTables_Reader_OBSubtitle_Emotion2Pattern* OBSubtitle_Emotion2Pattern;//[Offset: 0x2a8, Size: 0x8]
	SolarTables_Reader_OBSubtitle_Pattern2Subtitle* OBSubtitle_Pattern2Subtitle;//[Offset: 0x2b0, Size: 0x8]
	SolarTables_Reader_Outcome* Outcome;//[Offset: 0x2b8, Size: 0x8]
	SolarTables_Reader_OutcomeContent* OutcomeContent;//[Offset: 0x2c0, Size: 0x8]
	SolarTables_Reader_PickupPriorityItem* PickupPriorityItem;//[Offset: 0x2c8, Size: 0x8]
	SolarTables_Reader_PickupPriorityWeaponPart* PickupPriorityWeaponPart;//[Offset: 0x2d0, Size: 0x8]
	SolarTables_Reader_CharacterVoiceover* CharacterVoiceover;//[Offset: 0x2d8, Size: 0x8]
	SolarTables_Reader_QuickChat* QuickChat;//[Offset: 0x2e0, Size: 0x8]
	SolarTables_Reader_QuickVoice* QuickVoice;//[Offset: 0x2e8, Size: 0x8]
	SolarTables_Reader_VODownload* VODownload;//[Offset: 0x2f0, Size: 0x8]
	SolarTables_Reader_RankLevel* RankLevel;//[Offset: 0x2f8, Size: 0x8]
	SolarTables_Reader_AutoDirector* AutoDirector;//[Offset: 0x300, Size: 0x8]
	SolarTables_Reader_AutoDirectorActivityScore* AutoDirectorActivityScore;//[Offset: 0x308, Size: 0x8]
	SolarTables_Reader_CircularCameras* CircularCameras;//[Offset: 0x310, Size: 0x8]
	SolarTables_Reader_HotSpot* HotSpot;//[Offset: 0x318, Size: 0x8]
	SolarTables_Reader_LookAtCameras* LookAtCameras;//[Offset: 0x320, Size: 0x8]
	SolarTables_Reader_Rescue* Rescue;//[Offset: 0x328, Size: 0x8]
	SolarTables_Reader_Skin* Skin;//[Offset: 0x330, Size: 0x8]
	SolarTables_Reader_Achievement* Achievement;//[Offset: 0x338, Size: 0x8]
	SolarTables_Reader_TaskProgress* TaskProgress;//[Offset: 0x340, Size: 0x8]
	SolarTables_Reader_TaskSystem* TaskSystem;//[Offset: 0x348, Size: 0x8]
	SolarTables_Reader_PlayerOperationListLayout* PlayerOperationListLayout;//[Offset: 0x350, Size: 0x8]
	SolarTables_Reader_Variables* Variables;//[Offset: 0x358, Size: 0x8]
	SolarTables_Reader_Vehicle* Vehicle;//[Offset: 0x360, Size: 0x8]
	SolarTables_Reader_VehicleSkin* VehicleSkin;//[Offset: 0x368, Size: 0x8]
	SolarTables_Reader_VehicleType* VehicleType;//[Offset: 0x370, Size: 0x8]
	SolarTables_Reader_VehicleSpawn* VehicleSpawn;//[Offset: 0x378, Size: 0x8]
	SolarTables_Reader_VehicleSpawnGroup* VehicleSpawnGroup;//[Offset: 0x380, Size: 0x8]
	SolarTables_Reader_WarmGame* WarmGame;//[Offset: 0x388, Size: 0x8]
	SolarTables_Reader_WarmGameMode* WarmGameMode;//[Offset: 0x390, Size: 0x8]
	SolarTables_Reader_WeaponDamage* WeaponDamage;//[Offset: 0x398, Size: 0x8]
	SolarTables_Reader_Weapon* Weapon;//[Offset: 0x3a0, Size: 0x8]
	SolarTables_Reader_WeaponAmmo* WeaponAmmo;//[Offset: 0x3a8, Size: 0x8]
	SolarTables_Reader_WeaponBattleUpgrade* WeaponBattleUpgrade;//[Offset: 0x3b0, Size: 0x8]
	SolarTables_Reader_WeaponDefault* WeaponDefault;//[Offset: 0x3b8, Size: 0x8]
	SolarTables_Reader_WeaponKillTip* WeaponKillTip;//[Offset: 0x3c0, Size: 0x8]
	SolarTables_Reader_WeaponParts* WeaponParts;//[Offset: 0x3c8, Size: 0x8]
	SolarTables_Reader_WeaponPartsOp* WeaponPartsOp;//[Offset: 0x3d0, Size: 0x8]
	SolarTables_Reader_WeaponQuality* WeaponQuality;//[Offset: 0x3d8, Size: 0x8]
	SolarTables_Reader_SecondMode* SecondMode;//[Offset: 0x3e0, Size: 0x8]
	SolarTables_Reader_WeaponSkin* WeaponSkin;//[Offset: 0x3e8, Size: 0x8]
	SolarTables_Reader_WeaponSound* WeaponSound;//[Offset: 0x3f0, Size: 0x8]
	SolarTables_Reader_WeaponStatu* WeaponStatu;//[Offset: 0x3f8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_AccountFixedExp.SolarTableReaderBase.Object
	SolarTablesData_AccountFixedExp TryGetRowData(int Key, out bool HasKey);// 0x58a7078ea041
	bool HasRowKey(int Key);// 0x58a6078ea041
	bool HasColKey(FString Key);// 0x58a5078ea041
	FString GetTableName();// 0x58a4078ea041
	int GetRowKeys(out int[] OutKeys);// 0x58a3078ea041
	SolarTablesData_AccountFixedExp GetRowData(int Key);// 0x58a2078ea041
	int GetRowCount();// 0x58a1078ea041
	int GetDataNum();// 0x58a0078ea041
	FString[] GetColKeys();// 0x589f078ea041
	int GetColCount();// 0x589e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTableReaderBase.Object
	int RandomRangeInt(out const SolarTablesRangeInt InData);// 0x589d078ea041
	float RandomRangeFloat(out const SolarTablesRangeFloat InData);// 0x589c078ea041
	bool IsReaderValid();// 0x589b078ea041
	FString GetLocText(out const SolarTablesLocalText InData);// 0x589a078ea041
	FString GetDeviceRes(out const SolarTablesDeviceRes InData);// 0x5899078ea041
	bool ContainsRangeInt(out const SolarTablesRangeInt InData, int In, bool bEqualMin, bool bEqualMax);// 0x5898078ea041
	bool ContainsRangeFloat(out const SolarTablesRangeFloat InData, float In, bool bEqualMin, bool bEqualMax);// 0x5897078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_AccountFixedExp.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Exp;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesRangeInt
	int Left;//[Offset: 0x0, Size: 0x4]
	int Right;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesRangeFloat
	float Left;//[Offset: 0x0, Size: 0x4]
	float Right;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesLocalText
	int ID;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesDeviceRes
	FString res;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_AccountFlag.SolarTableReaderBase.Object
	SolarTablesData_AccountFlag TryGetRowData(int Key, out bool HasKey);// 0x58b1078ea041
	bool HasRowKey(int Key);// 0x58b0078ea041
	bool HasColKey(FString Key);// 0x58af078ea041
	FString GetTableName();// 0x58ae078ea041
	int GetRowKeys(out int[] OutKeys);// 0x58ad078ea041
	SolarTablesData_AccountFlag GetRowData(int Key);// 0x58ac078ea041
	int GetRowCount();// 0x58ab078ea041
	int GetDataNum();// 0x58aa078ea041
	FString[] GetColKeys();// 0x58a9078ea041
	int GetColCount();// 0x58a8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_AccountFlag.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int FlagType;//[Offset: 0x10, Size: 0x4]
	FString FlagIcon;//[Offset: 0x18, Size: 0x10]
	FString StateName;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Airline.SolarTableReaderBase.Object
	SolarTablesData_Airline TryGetRowData(int Key, out bool HasKey);// 0x58c5078ea041
	bool HasRowKey(int Key);// 0x58c4078ea041
	bool HasColKey(FString Key);// 0x58c3078ea041
	FString GetTableName();// 0x58c2078ea041
	int GetRowKeys(out int[] OutKeys);// 0x58c1078ea041
	SolarTablesData_Airline GetRowData(int Key);// 0x58c0078ea041
	int GetRowCount();// 0x58bf078ea041
	int GetDataNum();// 0x58be078ea041
	FString[] GetColKeys();// 0x58bd078ea041
	int GetColCount();// 0x58bc078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Airline.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float[] AirlineCoordinateA;//[Offset: 0x10, Size: 0x10]
	float[] RealPointA;//[Offset: 0x20, Size: 0x10]
	float[] AirlineCoordinateB;//[Offset: 0x30, Size: 0x10]
	float[] RealPointB;//[Offset: 0x40, Size: 0x10]
	int UseGameMode;//[Offset: 0x50, Size: 0x4]
	int MapId;//[Offset: 0x54, Size: 0x4]
	float AirlineAltitude;//[Offset: 0x58, Size: 0x4]
	float CapsuleSpeed;//[Offset: 0x5c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Armory.SolarTableReaderBase.Object
	SolarTablesData_Armory TryGetRowData(int Key, out bool HasKey);// 0x58d9078ea041
	bool HasRowKey(int Key);// 0x58d8078ea041
	bool HasColKey(FString Key);// 0x58d7078ea041
	FString GetTableName();// 0x58d6078ea041
	int GetRowKeys(out int[] OutKeys);// 0x58d5078ea041
	SolarTablesData_Armory GetRowData(int Key);// 0x58d4078ea041
	int GetRowCount();// 0x58d3078ea041
	int GetDataNum();// 0x58d2078ea041
	FString[] GetColKeys();// 0x58d1078ea041
	int GetColCount();// 0x58d0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Armory.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WeaponType;//[Offset: 0x10, Size: 0x4]
	int WeaponDescription;//[Offset: 0x14, Size: 0x4]
	int SkillName;//[Offset: 0x18, Size: 0x4]
	int SkillDescription;//[Offset: 0x1c, Size: 0x4]
	FString UrlName;//[Offset: 0x20, Size: 0x10]
	FString WeaponMovie;//[Offset: 0x30, Size: 0x10]
	FString WeaponConfig;//[Offset: 0x40, Size: 0x10]
	int WeaponUnlockLevel;//[Offset: 0x50, Size: 0x4]
	int WeaponDamage;//[Offset: 0x54, Size: 0x4]
	int WeaponRateOfFire;//[Offset: 0x58, Size: 0x4]
	int WeaponRecoil;//[Offset: 0x5c, Size: 0x4]
	int WeaponSpread;//[Offset: 0x60, Size: 0x4]
	int WeaponRange;//[Offset: 0x64, Size: 0x4]
	int WeaponMobility;//[Offset: 0x68, Size: 0x4]
	FString SilhouetteIcon;//[Offset: 0x70, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BattleUpgradeContent.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeContent TryGetRowData(int Key, out bool HasKey);// 0x591f078ea041
	bool HasRowKey(int Key);// 0x591e078ea041
	bool HasColKey(FString Key);// 0x591d078ea041
	FString GetTableName();// 0x591c078ea041
	int GetRowKeys(out int[] OutKeys);// 0x591b078ea041
	SolarTablesData_BattleUpgradeContent GetRowData(int Key);// 0x591a078ea041
	int GetRowCount();// 0x5919078ea041
	int GetDataNum();// 0x5918078ea041
	FString[] GetColKeys();// 0x5917078ea041
	int GetColCount();// 0x5916078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BattleUpgradeContent.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ModelID;//[Offset: 0x10, Size: 0x10]
	int Grade;//[Offset: 0x20, Size: 0x4]
	int[] UpgradeContent;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BattleUpgradeEffect.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeEffect TryGetRowData(int Key, out bool HasKey);// 0x5929078ea041
	bool HasRowKey(int Key);// 0x5928078ea041
	bool HasColKey(FString Key);// 0x5927078ea041
	FString GetTableName();// 0x5926078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5925078ea041
	SolarTablesData_BattleUpgradeEffect GetRowData(int Key);// 0x5924078ea041
	int GetRowCount();// 0x5923078ea041
	int GetDataNum();// 0x5922078ea041
	FString[] GetColKeys();// 0x5921078ea041
	int GetColCount();// 0x5920078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BattleUpgradeEffect.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum Effect;//[Offset: 0x10, Size: 0x1]
	int EffectValue;//[Offset: 0x14, Size: 0x4]
	int StackingTimes;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BattleUpgradeEffectPool.SolarTableReaderBase.Object
	SolarTablesData_BattleUpgradeEffectPool TryGetRowData(int Key, out bool HasKey);// 0x5933078ea041
	bool HasRowKey(int Key);// 0x5932078ea041
	bool HasColKey(FString Key);// 0x5931078ea041
	FString GetTableName();// 0x5930078ea041
	int GetRowKeys(out int[] OutKeys);// 0x592f078ea041
	SolarTablesData_BattleUpgradeEffectPool GetRowData(int Key);// 0x592e078ea041
	int GetRowCount();// 0x592d078ea041
	int GetDataNum();// 0x592c078ea041
	FString[] GetColKeys();// 0x592b078ea041
	int GetColCount();// 0x592a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BattleUpgradeEffectPool.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] Pool;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BattleEndRankSettlement.SolarTableReaderBase.Object
	SolarTablesData_BattleEndRankSettlement TryGetRowData(int Key, out bool HasKey);// 0x590b078ea041
	bool HasRowKey(int Key);// 0x590a078ea041
	bool HasColKey(FString Key);// 0x5909078ea041
	FString GetTableName();// 0x5908078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5907078ea041
	SolarTablesData_BattleEndRankSettlement GetRowData(int Key);// 0x5906078ea041
	int GetRowCount();// 0x5905078ea041
	int GetDataNum();// 0x5904078ea041
	FString[] GetColKeys();// 0x5903078ea041
	int GetColCount();// 0x5902078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BattleEndRankSettlement.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int RuleID;//[Offset: 0x10, Size: 0x4]
	int RealPerson;//[Offset: 0x14, Size: 0x4]
	int[] ItemDrop;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BpAward.SolarTableReaderBase.Object
	SolarTablesData_BpAward TryGetRowData(int Key, out bool HasKey);// 0x5947078ea041
	bool HasRowKey(int Key);// 0x5946078ea041
	bool HasColKey(FString Key);// 0x5945078ea041
	FString GetTableName();// 0x5944078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5943078ea041
	SolarTablesData_BpAward GetRowData(int Key);// 0x5942078ea041
	int GetRowCount();// 0x5941078ea041
	int GetDataNum();// 0x5940078ea041
	FString[] GetColKeys();// 0x593f078ea041
	int GetColCount();// 0x593e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BpAward.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int BpID;//[Offset: 0x10, Size: 0x4]
	int Level;//[Offset: 0x14, Size: 0x4]
	int Exp;//[Offset: 0x18, Size: 0x4]
	int UpdateValue;//[Offset: 0x1c, Size: 0x4]
	int[] FreeAward;//[Offset: 0x20, Size: 0x10]
	int[] PayAward;//[Offset: 0x30, Size: 0x10]
	bool UnlockExtraTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool BuyLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool LoopReward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Behavior.SolarTableReaderBase.Object
	SolarTablesData_Behavior TryGetRowData(int Key, out bool HasKey);// 0x593d078ea041
	bool HasRowKey(int Key);// 0x593c078ea041
	bool HasColKey(FString Key);// 0x593b078ea041
	FString GetTableName();// 0x593a078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5939078ea041
	SolarTablesData_Behavior GetRowData(int Key);// 0x5938078ea041
	int GetRowCount();// 0x5937078ea041
	int GetDataNum();// 0x5936078ea041
	FString[] GetColKeys();// 0x5935078ea041
	int GetColCount();// 0x5934078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Behavior.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum BehaviorType;//[Offset: 0x10, Size: 0x1]
	int CharacterGetExp;//[Offset: 0x14, Size: 0x4]
	int WeaponGetExp;//[Offset: 0x18, Size: 0x4]
	int WeaponExp;//[Offset: 0x1c, Size: 0x4]
	int WeaponExp;//[Offset: 0x20, Size: 0x4]
	int WeaponExp;//[Offset: 0x24, Size: 0x4]
	SolarTablesLocalText CharaGetExpText;//[Offset: 0x28, Size: 0x4]
	int WeaponGetExpText;//[Offset: 0x2c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EscapeExp.SolarTableReaderBase.Object
	SolarTablesData_EscapeExp TryGetRowData(int Key, out bool HasKey);// 0x59f1078ea041
	bool HasRowKey(int Key);// 0x59f0078ea041
	bool HasColKey(FString Key);// 0x59ef078ea041
	FString GetTableName();// 0x59ee078ea041
	int GetRowKeys(out int[] OutKeys);// 0x59ed078ea041
	SolarTablesData_EscapeExp GetRowData(int Key);// 0x59ec078ea041
	int GetRowCount();// 0x59eb078ea041
	int GetDataNum();// 0x59ea078ea041
	FString[] GetColKeys();// 0x59e9078ea041
	int GetColCount();// 0x59e8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EscapeExp.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum BehaviorType;//[Offset: 0x10, Size: 0x1]
	int CharacterGetExp;//[Offset: 0x14, Size: 0x4]
	int WeaponGetExp;//[Offset: 0x18, Size: 0x4]
	int WeaponExp;//[Offset: 0x1c, Size: 0x4]
	int WeaponExp;//[Offset: 0x20, Size: 0x4]
	int WeaponExp;//[Offset: 0x24, Size: 0x4]
	SolarTablesLocalText CharaGetExpText;//[Offset: 0x28, Size: 0x4]
	int WeaponGetExpText;//[Offset: 0x2c, Size: 0x4]
	int ExpID;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_CaseToggleAlphabet.SolarTableReaderBase.Object
	SolarTablesData_CaseToggleAlphabet TryGetRowData(int Key, out bool HasKey);// 0x595b078ea041
	bool HasRowKey(int Key);// 0x595a078ea041
	bool HasColKey(FString Key);// 0x5959078ea041
	FString GetTableName();// 0x5958078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5957078ea041
	SolarTablesData_CaseToggleAlphabet GetRowData(int Key);// 0x5956078ea041
	int GetRowCount();// 0x5955078ea041
	int GetDataNum();// 0x5954078ea041
	FString[] GetColKeys();// 0x5953078ea041
	int GetColCount();// 0x5952078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_CaseToggleAlphabet.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	bool IsLower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	FString de;//[Offset: 0x18, Size: 0x10]
	FString fr;//[Offset: 0x28, Size: 0x10]
	FString es;//[Offset: 0x38, Size: 0x10]
	FString pt;//[Offset: 0x48, Size: 0x10]
	FString it;//[Offset: 0x58, Size: 0x10]
	FString pl;//[Offset: 0x68, Size: 0x10]
	FString tr;//[Offset: 0x78, Size: 0x10]
	FString ru;//[Offset: 0x88, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_UnitCharacter.SolarTableReaderBase.Object
	SolarTablesData_UnitCharacter TryGetRowData(int Key, out bool HasKey);// 0x5c7b078ea041
	bool HasRowKey(int Key);// 0x5c7a078ea041
	bool HasColKey(FString Key);// 0x5c79078ea041
	FString GetTableName();// 0x5c78078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c77078ea041
	SolarTablesData_UnitCharacter GetRowData(int Key);// 0x5c76078ea041
	int GetRowCount();// 0x5c75078ea041
	int GetDataNum();// 0x5c74078ea041
	FString[] GetColKeys();// 0x5c73078ea041
	int GetColCount();// 0x5c72078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_UnitCharacter.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText name_extra;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText Info;//[Offset: 0x18, Size: 0x4]
	int Gender;//[Offset: 0x1c, Size: 0x4]
	int Body;//[Offset: 0x20, Size: 0x4]
	enum CharacterType;//[Offset: 0x24, Size: 0x1]
	FString ClassTypeIcon;//[Offset: 0x28, Size: 0x10]
	SolarTablesLocalText ClassTypeInfo;//[Offset: 0x38, Size: 0x4]
	bool defaultChara;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	int defaultSkin;//[Offset: 0x40, Size: 0x4]
	int defaultPose;//[Offset: 0x44, Size: 0x4]
	int defaultBackground;//[Offset: 0x48, Size: 0x4]
	bool usableChara;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	FString CharacterProtrait;//[Offset: 0x50, Size: 0x10]
	FString UrlName;//[Offset: 0x60, Size: 0x10]
	<FString,FString> CharacterAttributesID;//[Offset: 0x70, Size: 0x50]
	float MaxNormalHP;//[Offset: 0xc0, Size: 0x4]
	int defaultArmor;//[Offset: 0xc4, Size: 0x4]
	int defaultShield;//[Offset: 0xc8, Size: 0x4]
	int defaultJetPackModule;//[Offset: 0xcc, Size: 0x4]
	FString BasicItemMax;//[Offset: 0xd0, Size: 0x10]
	float InitialSolarCharge;//[Offset: 0xe0, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0xe4, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0xe8, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0xec, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0xf0, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0xf4, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0xf8, Size: 0x4]
	float InitialEnergyLimit;//[Offset: 0xfc, Size: 0x4]
	float InitialExtraEnergyLimit;//[Offset: 0x100, Size: 0x4]
	float InitialExtraEnergyCharge;//[Offset: 0x104, Size: 0x4]
	float InitialChargeCD;//[Offset: 0x108, Size: 0x4]
	int ExpID;//[Offset: 0x10c, Size: 0x4]
	float ExpBonus;//[Offset: 0x110, Size: 0x4]
	int CharaGiftID;//[Offset: 0x114, Size: 0x4]
	FString CharacterIngameBP;//[Offset: 0x118, Size: 0x10]
	FString AnimBPResPath;//[Offset: 0x128, Size: 0x10]
	int StandJogSpeed;//[Offset: 0x138, Size: 0x4]
	int StandRunSpeed;//[Offset: 0x13c, Size: 0x4]
	int StandSprintSpeed;//[Offset: 0x140, Size: 0x4]
	int CrouchJogSpeed;//[Offset: 0x144, Size: 0x4]
	int CrouchRunSpeed;//[Offset: 0x148, Size: 0x4]
	int CrouchSprintSpeed;//[Offset: 0x14c, Size: 0x4]
	int ItemID;//[Offset: 0x150, Size: 0x4]
	float BackpackScale;//[Offset: 0x154, Size: 0x4]
	int CharacterSize;//[Offset: 0x158, Size: 0x4]
	int BotConfigID;//[Offset: 0x15c, Size: 0x4]
	int CharacterSort;//[Offset: 0x160, Size: 0x4]
	int CharacterTag1;//[Offset: 0x164, Size: 0x4]
	int CharacterTag2;//[Offset: 0x168, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_CharacterAbility.SolarTableReaderBase.Object
	SolarTablesData_CharacterAbility TryGetRowData(int Key, out bool HasKey);// 0x5965078ea041
	bool HasRowKey(int Key);// 0x5964078ea041
	bool HasColKey(FString Key);// 0x5963078ea041
	FString GetTableName();// 0x5962078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5961078ea041
	SolarTablesData_CharacterAbility GetRowData(int Key);// 0x5960078ea041
	int GetRowCount();// 0x595f078ea041
	int GetDataNum();// 0x595e078ea041
	FString[] GetColKeys();// 0x595d078ea041
	int GetColCount();// 0x595c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_CharacterAbility.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int CharacterId;//[Offset: 0x10, Size: 0x4]
	FString DataAssetsPath;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Name;//[Offset: 0x28, Size: 0x4]
	SolarTablesLocalText Info;//[Offset: 0x2c, Size: 0x4]
	int DataID;//[Offset: 0x30, Size: 0x4]
	FString AbilityBP;//[Offset: 0x38, Size: 0x10]
	FString Icon;//[Offset: 0x48, Size: 0x10]
	int Data;//[Offset: 0x58, Size: 0x4]
	bool IfActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_CharacterPassiveAbility.SolarTableReaderBase.Object
	SolarTablesData_CharacterPassiveAbility TryGetRowData(int Key, out bool HasKey);// 0x596f078ea041
	bool HasRowKey(int Key);// 0x596e078ea041
	bool HasColKey(FString Key);// 0x596d078ea041
	FString GetTableName();// 0x596c078ea041
	int GetRowKeys(out int[] OutKeys);// 0x596b078ea041
	SolarTablesData_CharacterPassiveAbility GetRowData(int Key);// 0x596a078ea041
	int GetRowCount();// 0x5969078ea041
	int GetDataNum();// 0x5968078ea041
	FString[] GetColKeys();// 0x5967078ea041
	int GetColCount();// 0x5966078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_CharacterPassiveAbility.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString DataAssetsPath;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GetPoint.SolarTableReaderBase.Object
	SolarTablesData_GetPoint TryGetRowData(int Key, out bool HasKey);// 0x5a5f078ea041
	bool HasRowKey(int Key);// 0x5a5e078ea041
	bool HasColKey(FString Key);// 0x5a5d078ea041
	FString GetTableName();// 0x5a5c078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a5b078ea041
	SolarTablesData_GetPoint GetRowData(int Key);// 0x5a5a078ea041
	int GetRowCount();// 0x5a59078ea041
	int GetDataNum();// 0x5a58078ea041
	FString[] GetColKeys();// 0x5a57078ea041
	int GetColCount();// 0x5a56078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GetPoint.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Point;//[Offset: 0x10, Size: 0x4]
	int TaskValue;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText TaskText;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ChestSpawn.SolarTableReaderBase.Object
	SolarTablesData_ChestSpawn TryGetRowData(int Key, out bool HasKey);// 0x598d078ea041
	bool HasRowKey(int Key);// 0x598c078ea041
	bool HasColKey(FString Key);// 0x598b078ea041
	FString GetTableName();// 0x598a078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5989078ea041
	SolarTablesData_ChestSpawn GetRowData(int Key);// 0x5988078ea041
	int GetRowCount();// 0x5987078ea041
	int GetDataNum();// 0x5986078ea041
	FString[] GetColKeys();// 0x5985078ea041
	int GetColCount();// 0x5984078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ChestSpawn.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum ChestType;//[Offset: 0x10, Size: 0x1]
	int[] Chests;//[Offset: 0x18, Size: 0x10]
	int[] Weight;//[Offset: 0x28, Size: 0x10]
	int SpawnCount;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ChestSpawnGroup.SolarTableReaderBase.Object
	SolarTablesData_ChestSpawnGroup TryGetRowData(int Key, out bool HasKey);// 0x5997078ea041
	bool HasRowKey(int Key);// 0x5996078ea041
	bool HasColKey(FString Key);// 0x5995078ea041
	FString GetTableName();// 0x5994078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5993078ea041
	SolarTablesData_ChestSpawnGroup GetRowData(int Key);// 0x5992078ea041
	int GetRowCount();// 0x5991078ea041
	int GetDataNum();// 0x5990078ea041
	FString[] GetColKeys();// 0x598f078ea041
	int GetColCount();// 0x598e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ChestSpawnGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ChestGroup;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ClanFlag.SolarTableReaderBase.Object
	SolarTablesData_ClanFlag TryGetRowData(int Key, out bool HasKey);// 0x59ab078ea041
	bool HasRowKey(int Key);// 0x59aa078ea041
	bool HasColKey(FString Key);// 0x59a9078ea041
	FString GetTableName();// 0x59a8078ea041
	int GetRowKeys(out int[] OutKeys);// 0x59a7078ea041
	SolarTablesData_ClanFlag GetRowData(int Key);// 0x59a6078ea041
	int GetRowCount();// 0x59a5078ea041
	int GetDataNum();// 0x59a4078ea041
	FString[] GetColKeys();// 0x59a3078ea041
	int GetColCount();// 0x59a2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ClanFlag.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString FlagIcon;//[Offset: 0x10, Size: 0x10]
	FString WebIcon;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_DayAndNight.SolarTableReaderBase.Object
	SolarTablesData_DayAndNight TryGetRowData(int Key, out bool HasKey);// 0x59c9078ea041
	bool HasRowKey(int Key);// 0x59c8078ea041
	bool HasColKey(FString Key);// 0x59c7078ea041
	FString GetTableName();// 0x59c6078ea041
	int GetRowKeys(out int[] OutKeys);// 0x59c5078ea041
	SolarTablesData_DayAndNight GetRowData(int Key);// 0x59c4078ea041
	int GetRowCount();// 0x59c3078ea041
	int GetDataNum();// 0x59c2078ea041
	FString[] GetColKeys();// 0x59c1078ea041
	int GetColCount();// 0x59c0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_DayAndNight.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int TimeOfDays;//[Offset: 0x10, Size: 0x4]
	int ChangingSpeed;//[Offset: 0x14, Size: 0x4]
	float ChargingRate;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_DsVariableRange.SolarTableReaderBase.Object
	SolarTablesData_DsVariableRange TryGetRowData(int Key, out bool HasKey);// 0x59d3078ea041
	bool HasRowKey(int Key);// 0x59d2078ea041
	bool HasColKey(FString Key);// 0x59d1078ea041
	FString GetTableName();// 0x59d0078ea041
	int GetRowKeys(out int[] OutKeys);// 0x59cf078ea041
	SolarTablesData_DsVariableRange GetRowData(int Key);// 0x59ce078ea041
	int GetRowCount();// 0x59cd078ea041
	int GetDataNum();// 0x59cc078ea041
	FString[] GetColKeys();// 0x59cb078ea041
	int GetColCount();// 0x59ca078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_DsVariableRange.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString VariableName;//[Offset: 0x10, Size: 0x10]
	float ValueStart;//[Offset: 0x20, Size: 0x4]
	float ValueEnd;//[Offset: 0x24, Size: 0x4]
	int ValueType;//[Offset: 0x28, Size: 0x4]
	int Tolerance;//[Offset: 0x2c, Size: 0x4]
	int ProbeInterval;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EShop.SolarTableReaderBase.Object
	SolarTablesData_EShop TryGetRowData(int Key, out bool HasKey);// 0x59fb078ea041
	bool HasRowKey(int Key);// 0x59fa078ea041
	bool HasColKey(FString Key);// 0x59f9078ea041
	FString GetTableName();// 0x59f8078ea041
	int GetRowKeys(out int[] OutKeys);// 0x59f7078ea041
	SolarTablesData_EShop GetRowData(int Key);// 0x59f6078ea041
	int GetRowCount();// 0x59f5078ea041
	int GetDataNum();// 0x59f4078ea041
	FString[] GetColKeys();// 0x59f3078ea041
	int GetColCount();// 0x59f2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EShop.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] PoolGroupID;//[Offset: 0x10, Size: 0x10]
	bool IfMapShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	int[] PoolRefreshTime;//[Offset: 0x28, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EShopDemoModel.SolarTableReaderBase.Object
	SolarTablesData_EShopDemoModel TryGetRowData(int Key, out bool HasKey);// 0x5a05078ea041
	bool HasRowKey(int Key);// 0x5a04078ea041
	bool HasColKey(FString Key);// 0x5a03078ea041
	FString GetTableName();// 0x5a02078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a01078ea041
	SolarTablesData_EShopDemoModel GetRowData(int Key);// 0x5a00078ea041
	int GetRowCount();// 0x59ff078ea041
	int GetDataNum();// 0x59fe078ea041
	FString[] GetColKeys();// 0x59fd078ea041
	int GetColCount();// 0x59fc078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EShopDemoModel.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ModelID;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EShopGoodsPool.SolarTableReaderBase.Object
	SolarTablesData_EShopGoodsPool TryGetRowData(int Key, out bool HasKey);// 0x5a0f078ea041
	bool HasRowKey(int Key);// 0x5a0e078ea041
	bool HasColKey(FString Key);// 0x5a0d078ea041
	FString GetTableName();// 0x5a0c078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a0b078ea041
	SolarTablesData_EShopGoodsPool GetRowData(int Key);// 0x5a0a078ea041
	int GetRowCount();// 0x5a09078ea041
	int GetDataNum();// 0x5a08078ea041
	FString[] GetColKeys();// 0x5a07078ea041
	int GetColCount();// 0x5a06078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EShopGoodsPool.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] Equipments;//[Offset: 0x10, Size: 0x10]
	int[] Prize;//[Offset: 0x20, Size: 0x10]
	int[] Nums;//[Offset: 0x30, Size: 0x10]
	int[] Weight;//[Offset: 0x40, Size: 0x10]
	int NumbersToDisplay;//[Offset: 0x50, Size: 0x4]
	int ColdDown;//[Offset: 0x54, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EShopGoodsPoolGroup.SolarTableReaderBase.Object
	SolarTablesData_EShopGoodsPoolGroup TryGetRowData(int Key, out bool HasKey);// 0x5a19078ea041
	bool HasRowKey(int Key);// 0x5a18078ea041
	bool HasColKey(FString Key);// 0x5a17078ea041
	FString GetTableName();// 0x5a16078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a15078ea041
	SolarTablesData_EShopGoodsPoolGroup GetRowData(int Key);// 0x5a14078ea041
	int GetRowCount();// 0x5a13078ea041
	int GetDataNum();// 0x5a12078ea041
	FString[] GetColKeys();// 0x5a11078ea041
	int GetColCount();// 0x5a10078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EShopGoodsPoolGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] PoolIDs;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EShopSpawn.SolarTableReaderBase.Object
	SolarTablesData_EShopSpawn TryGetRowData(int Key, out bool HasKey);// 0x5a23078ea041
	bool HasRowKey(int Key);// 0x5a22078ea041
	bool HasColKey(FString Key);// 0x5a21078ea041
	FString GetTableName();// 0x5a20078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a1f078ea041
	SolarTablesData_EShopSpawn GetRowData(int Key);// 0x5a1e078ea041
	int GetRowCount();// 0x5a1d078ea041
	int GetDataNum();// 0x5a1c078ea041
	FString[] GetColKeys();// 0x5a1b078ea041
	int GetColCount();// 0x5a1a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EShopSpawn.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] Eshops;//[Offset: 0x10, Size: 0x10]
	int[] Weight;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BattleRoyaleMode.SolarTableReaderBase.Object
	SolarTablesData_BattleRoyaleMode TryGetRowData(int Key, out bool HasKey);// 0x5915078ea041
	bool HasRowKey(int Key);// 0x5914078ea041
	bool HasColKey(FString Key);// 0x5913078ea041
	FString GetTableName();// 0x5912078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5911078ea041
	SolarTablesData_BattleRoyaleMode GetRowData(int Key);// 0x5910078ea041
	int GetRowCount();// 0x590f078ea041
	int GetDataNum();// 0x590e078ea041
	FString[] GetColKeys();// 0x590d078ea041
	int GetColCount();// 0x590c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BattleRoyaleMode.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] GlobalOutcomes;//[Offset: 0x10, Size: 0x10]
	int BattleMap;//[Offset: 0x20, Size: 0x4]
	int ReadyMap;//[Offset: 0x24, Size: 0x4]
	float ReadyStateTime;//[Offset: 0x28, Size: 0x4]
	int StartTime;//[Offset: 0x2c, Size: 0x4]
	float EenTime;//[Offset: 0x30, Size: 0x4]
	int CharacterEXPCoefficient;//[Offset: 0x34, Size: 0x4]
	FString[] EventSets;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GameModeGroup.SolarTableReaderBase.Object
	SolarTablesData_GameModeGroup TryGetRowData(int Key, out bool HasKey);// 0x5a41078ea041
	bool HasRowKey(int Key);// 0x5a40078ea041
	bool HasColKey(FString Key);// 0x5a3f078ea041
	FString GetTableName();// 0x5a3e078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a3d078ea041
	SolarTablesData_GameModeGroup GetRowData(int Key);// 0x5a3c078ea041
	int GetRowCount();// 0x5a3b078ea041
	int GetDataNum();// 0x5a3a078ea041
	FString[] GetColKeys();// 0x5a39078ea041
	int GetColCount();// 0x5a38078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GameModeGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText ModeGroupName;//[Offset: 0x10, Size: 0x4]
	int SortId;//[Offset: 0x14, Size: 0x4]
	int[] ModeID;//[Offset: 0x18, Size: 0x10]
	FString GroupBg;//[Offset: 0x28, Size: 0x10]
	FString Icon_s;//[Offset: 0x38, Size: 0x10]
	FString Icon_mini;//[Offset: 0x48, Size: 0x10]
	FString Icon_recruit;//[Offset: 0x58, Size: 0x10]
	int DefaultSelect;//[Offset: 0x68, Size: 0x4]
	bool IfMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	FString GuideVideoUrl;//[Offset: 0x70, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GameModeMain.SolarTableReaderBase.Object
	SolarTablesData_GameModeMain TryGetRowData(int Key, out bool HasKey);// 0x5a4b078ea041
	bool HasRowKey(int Key);// 0x5a4a078ea041
	bool HasColKey(FString Key);// 0x5a49078ea041
	FString GetTableName();// 0x5a48078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a47078ea041
	SolarTablesData_GameModeMain GetRowData(int Key);// 0x5a46078ea041
	int GetRowCount();// 0x5a45078ea041
	int GetDataNum();// 0x5a44078ea041
	FString[] GetColKeys();// 0x5a43078ea041
	int GetColCount();// 0x5a42078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GameModeMain.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int groupid;//[Offset: 0x10, Size: 0x4]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	int DefaultSelect;//[Offset: 0x18, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x1c, Size: 0x4]
	SolarTablesLocalText Desc;//[Offset: 0x20, Size: 0x4]
	SolarTablesLocalText DetailDes;//[Offset: 0x24, Size: 0x4]
	FString Icon;//[Offset: 0x28, Size: 0x10]
	FString Icon_s;//[Offset: 0x38, Size: 0x10]
	FString Icon_recruit;//[Offset: 0x48, Size: 0x10]
	FString Icon_recruit_issue;//[Offset: 0x58, Size: 0x10]
	FString Icon_mini;//[Offset: 0x68, Size: 0x10]
	bool IfRecruitShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	int ModeType;//[Offset: 0x7c, Size: 0x4]
	int OutcomeSet;//[Offset: 0x80, Size: 0x4]
	int LifeTime;//[Offset: 0x84, Size: 0x4]
	int[] AccessClient;//[Offset: 0x88, Size: 0x10]
	int[] AccessServer;//[Offset: 0x98, Size: 0x10]
	int[] AccessAccount;//[Offset: 0xa8, Size: 0x10]
	int[] AccessActivity;//[Offset: 0xb8, Size: 0x10]
	int UnlockLvl;//[Offset: 0xc8, Size: 0x4]
	int[] MatchRule;//[Offset: 0xd0, Size: 0x10]
	int DefaultMatchRule;//[Offset: 0xe0, Size: 0x4]
	int Backpack;//[Offset: 0xe4, Size: 0x4]
	FString UIConfig;//[Offset: 0xe8, Size: 0x10]
	FString ModeConfig;//[Offset: 0xf8, Size: 0x10]
	FString Parameters;//[Offset: 0x108, Size: 0x10]
	bool AIMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	FString SettlementBPPath;//[Offset: 0x120, Size: 0x10]
	bool ReEnterBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool IsAutoFillTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]
	int[] CustomRoomNum;//[Offset: 0x138, Size: 0x10]
	bool GetSupplyBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	int ChunkID;//[Offset: 0x14c, Size: 0x4]
	int[] ChunkIdList;//[Offset: 0x150, Size: 0x10]
	enum ClassModeType;//[Offset: 0x160, Size: 0x1]
	bool WarmUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 0x1]
	bool EnableCustomRoomReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x162, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_OutcomeSet.SolarTableReaderBase.Object
	SolarTablesData_OutcomeSet TryGetRowData(int Key, out bool HasKey);// 0x5bef078ea041
	bool HasRowKey(int Key);// 0x5bee078ea041
	bool HasColKey(FString Key);// 0x5bed078ea041
	FString GetTableName();// 0x5bec078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5beb078ea041
	SolarTablesData_OutcomeSet GetRowData(int Key);// 0x5bea078ea041
	int GetRowCount();// 0x5be9078ea041
	int GetDataNum();// 0x5be8078ea041
	FString[] GetColKeys();// 0x5be7078ea041
	int GetColCount();// 0x5be6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_OutcomeSet.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] OutcomeRef;//[Offset: 0x10, Size: 0x10]
	int[] GlobalOutcome;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GameTimeLine.SolarTableReaderBase.Object
	SolarTablesData_GameTimeLine TryGetRowData(int Key, out bool HasKey);// 0x5a55078ea041
	bool HasRowKey(int Key);// 0x5a54078ea041
	bool HasColKey(FString Key);// 0x5a53078ea041
	FString GetTableName();// 0x5a52078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a51078ea041
	SolarTablesData_GameTimeLine GetRowData(int Key);// 0x5a50078ea041
	int GetRowCount();// 0x5a4f078ea041
	int GetDataNum();// 0x5a4e078ea041
	FString[] GetColKeys();// 0x5a4d078ea041
	int GetColCount();// 0x5a4c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GameTimeLine.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] CheckEvent;//[Offset: 0x10, Size: 0x10]
	int GameMode;//[Offset: 0x20, Size: 0x4]
	int StartTime;//[Offset: 0x24, Size: 0x4]
	int DaylightChange;//[Offset: 0x28, Size: 0x4]
	int AirDrops;//[Offset: 0x2c, Size: 0x4]
	bool IfPoisonShrink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int[] RedZone;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GlobalOutcome.SolarTableReaderBase.Object
	SolarTablesData_GlobalOutcome TryGetRowData(int Key, out bool HasKey);// 0x5a69078ea041
	bool HasRowKey(int Key);// 0x5a68078ea041
	bool HasColKey(FString Key);// 0x5a67078ea041
	FString GetTableName();// 0x5a66078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a65078ea041
	SolarTablesData_GlobalOutcome GetRowData(int Key);// 0x5a64078ea041
	int GetRowCount();// 0x5a63078ea041
	int GetDataNum();// 0x5a62078ea041
	FString[] GetColKeys();// 0x5a61078ea041
	int GetColCount();// 0x5a60078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GlobalOutcome.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ItemIDs;//[Offset: 0x10, Size: 0x10]
	int[] ItemNums;//[Offset: 0x20, Size: 0x10]
	int SingleMaxTimes;//[Offset: 0x30, Size: 0x4]
	int TotalMaxTimes;//[Offset: 0x34, Size: 0x4]
	int TotalMinTimes;//[Offset: 0x38, Size: 0x4]
	int[] AffectedOutcomes;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GlobalSensitivity.SolarTableReaderBase.Object
	SolarTablesData_GlobalSensitivity TryGetRowData(int Key, out bool HasKey);// 0x5a73078ea041
	bool HasRowKey(int Key);// 0x5a72078ea041
	bool HasColKey(FString Key);// 0x5a71078ea041
	FString GetTableName();// 0x5a70078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a6f078ea041
	SolarTablesData_GlobalSensitivity GetRowData(int Key);// 0x5a6e078ea041
	int GetRowCount();// 0x5a6d078ea041
	int GetDataNum();// 0x5a6c078ea041
	FString[] GetColKeys();// 0x5a6b078ea041
	int GetColCount();// 0x5a6a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GlobalSensitivity.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float[] HoldWeaponSensitivity;//[Offset: 0x10, Size: 0x10]
	float[] FireWeaponSensitivity;//[Offset: 0x20, Size: 0x10]
	float ShoulderShootSenSItivity;//[Offset: 0x30, Size: 0x4]
	float ShoulderShootFireSenSItivity;//[Offset: 0x34, Size: 0x4]
	float[] SkillSensitivity;//[Offset: 0x38, Size: 0x10]
	float[] SightSensitivity;//[Offset: 0x48, Size: 0x10]
	float[] VehicleDriverSensitivity;//[Offset: 0x58, Size: 0x10]
	float[] VehicleFireSensitivity;//[Offset: 0x68, Size: 0x10]
	float[] SuperSkillSensitivity;//[Offset: 0x78, Size: 0x10]
	float[] TacticalSkillSensitivity;//[Offset: 0x88, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_HeroPowerFormula.SolarTableReaderBase.Object
	SolarTablesData_HeroPowerFormula TryGetRowData(int Key, out bool HasKey);// 0x5a87078ea041
	bool HasRowKey(int Key);// 0x5a86078ea041
	bool HasColKey(FString Key);// 0x5a85078ea041
	FString GetTableName();// 0x5a84078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a83078ea041
	SolarTablesData_HeroPowerFormula GetRowData(int Key);// 0x5a82078ea041
	int GetRowCount();// 0x5a81078ea041
	int GetDataNum();// 0x5a80078ea041
	FString[] GetColKeys();// 0x5a7f078ea041
	int GetColCount();// 0x5a7e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_HeroPowerFormula.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MatchRuleID;//[Offset: 0x10, Size: 0x4]
	int Battlerank;//[Offset: 0x14, Size: 0x4]
	int RankScore;//[Offset: 0x18, Size: 0x4]
	float KillRealConfig;//[Offset: 0x1c, Size: 0x4]
	float KillAiConfig;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_InputAction.SolarTableReaderBase.Object
	SolarTablesData_InputAction TryGetRowData(FString Key, out bool HasKey);// 0x5a9b078ea041
	bool HasRowKey(FString Key);// 0x5a9a078ea041
	bool HasColKey(FString Key);// 0x5a99078ea041
	FString GetTableName();// 0x5a98078ea041
	int GetRowKeys(out FString[] OutKeys);// 0x5a97078ea041
	SolarTablesData_InputAction GetRowData(FString Key);// 0x5a96078ea041
	int GetRowCount();// 0x5a95078ea041
	int GetDataNum();// 0x5a94078ea041
	FString[] GetColKeys();// 0x5a93078ea041
	int GetColCount();// 0x5a92078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_InputAction.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	bool bFlagBigMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bFlagBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	bool bFlagChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]
	bool bFlagParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 0x1]
	bool bFlagSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool bFlagTeamDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool bFlagRelive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_InputMapping.SolarTableReaderBase.Object
	SolarTablesData_InputMapping TryGetRowData(FString Key, out bool HasKey);// 0x5aa5078ea041
	bool HasRowKey(FString Key);// 0x5aa4078ea041
	bool HasColKey(FString Key);// 0x5aa3078ea041
	FString GetTableName();// 0x5aa2078ea041
	int GetRowKeys(out FString[] OutKeys);// 0x5aa1078ea041
	SolarTablesData_InputMapping GetRowData(FString Key);// 0x5aa0078ea041
	int GetRowCount();// 0x5a9f078ea041
	int GetDataNum();// 0x5a9e078ea041
	FString[] GetColKeys();// 0x5a9d078ea041
	int GetColCount();// 0x5a9c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_InputMapping.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	FString ActionName;//[Offset: 0x20, Size: 0x10]
	enum ActionType;//[Offset: 0x30, Size: 0x1]
	float Scale;//[Offset: 0x34, Size: 0x4]
	enum TriggerType;//[Offset: 0x38, Size: 0x1]
	FString FirstDefaultKeys;//[Offset: 0x40, Size: 0x10]
	FString SecondDefaultKeys;//[Offset: 0x50, Size: 0x10]
	FString ThirdDefaultKeys;//[Offset: 0x60, Size: 0x10]
	enum CtrlType;//[Offset: 0x70, Size: 0x1]
	enum ContextType;//[Offset: 0x71, Size: 0x1]
	enum RelatedType;//[Offset: 0x72, Size: 0x1]
	SolarTablesLocalText ActionDisplayName;//[Offset: 0x74, Size: 0x4]
	SolarTablesLocalText ActionTipsDesc;//[Offset: 0x78, Size: 0x4]
	enum TabType;//[Offset: 0x7c, Size: 0x1]
	int GroupIndex;//[Offset: 0x80, Size: 0x4]
	SolarTablesLocalText GroupTitle;//[Offset: 0x84, Size: 0x4]
	enum GroupType;//[Offset: 0x88, Size: 0x1]
	int GroupPriority;//[Offset: 0x8c, Size: 0x4]
	bool AffectedByActionTipsSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Item.SolarTableReaderBase.Object
	SolarTablesData_Item TryGetRowData(int Key, out bool HasKey);// 0x5aaf078ea041
	bool HasRowKey(int Key);// 0x5aae078ea041
	bool HasColKey(FString Key);// 0x5aad078ea041
	FString GetTableName();// 0x5aac078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5aab078ea041
	SolarTablesData_Item GetRowData(int Key);// 0x5aaa078ea041
	int GetRowCount();// 0x5aa9078ea041
	int GetDataNum();// 0x5aa8078ea041
	FString[] GetColKeys();// 0x5aa7078ea041
	int GetColCount();// 0x5aa6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Item.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BackpackProperty.SolarTableReaderBase.Object
	SolarTablesData_BackpackProperty TryGetRowData(int Key, out bool HasKey);// 0x58f7078ea041
	bool HasRowKey(int Key);// 0x58f6078ea041
	bool HasColKey(FString Key);// 0x58f5078ea041
	FString GetTableName();// 0x58f4078ea041
	int GetRowKeys(out int[] OutKeys);// 0x58f3078ea041
	SolarTablesData_BackpackProperty GetRowData(int Key);// 0x58f2078ea041
	int GetRowCount();// 0x58f1078ea041
	int GetDataNum();// 0x58f0078ea041
	FString[] GetColKeys();// 0x58ef078ea041
	int GetColCount();// 0x58ee078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BackpackProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	FString BackpackMeshPath;//[Offset: 0x50, Size: 0x10]
	FString PreviewBpPath;//[Offset: 0x60, Size: 0x10]
	int StartFrame;//[Offset: 0x70, Size: 0x4]
	int EndFrame;//[Offset: 0x74, Size: 0x4]
	float Length;//[Offset: 0x78, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_BackpackTrailProperty.SolarTableReaderBase.Object
	SolarTablesData_BackpackTrailProperty TryGetRowData(int Key, out bool HasKey);// 0x5901078ea041
	bool HasRowKey(int Key);// 0x5900078ea041
	bool HasColKey(FString Key);// 0x58ff078ea041
	FString GetTableName();// 0x58fe078ea041
	int GetRowKeys(out int[] OutKeys);// 0x58fd078ea041
	SolarTablesData_BackpackTrailProperty GetRowData(int Key);// 0x58fc078ea041
	int GetRowCount();// 0x58fb078ea041
	int GetDataNum();// 0x58fa078ea041
	FString[] GetColKeys();// 0x58f9078ea041
	int GetColCount();// 0x58f8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_BackpackTrailProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	FString PreviewTrailPath;//[Offset: 0x50, Size: 0x10]
	FString AssemblingId;//[Offset: 0x60, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_CapsuleProperty.SolarTableReaderBase.Object
	SolarTablesData_CapsuleProperty TryGetRowData(int Key, out bool HasKey);// 0x5951078ea041
	bool HasRowKey(int Key);// 0x5950078ea041
	bool HasColKey(FString Key);// 0x594f078ea041
	FString GetTableName();// 0x594e078ea041
	int GetRowKeys(out int[] OutKeys);// 0x594d078ea041
	SolarTablesData_CapsuleProperty GetRowData(int Key);// 0x594c078ea041
	int GetRowCount();// 0x594b078ea041
	int GetDataNum();// 0x594a078ea041
	FString[] GetColKeys();// 0x5949078ea041
	int GetColCount();// 0x5948078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_CapsuleProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	FString CapsuleBPPath;//[Offset: 0x50, Size: 0x10]
	FString PreviewBpPath;//[Offset: 0x60, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Dance.SolarTableReaderBase.Object
	SolarTablesData_Dance TryGetRowData(int Key, out bool HasKey);// 0x59bf078ea041
	bool HasRowKey(int Key);// 0x59be078ea041
	bool HasColKey(FString Key);// 0x59bd078ea041
	FString GetTableName();// 0x59bc078ea041
	int GetRowKeys(out int[] OutKeys);// 0x59bb078ea041
	SolarTablesData_Dance GetRowData(int Key);// 0x59ba078ea041
	int GetRowCount();// 0x59b9078ea041
	int GetDataNum();// 0x59b8078ea041
	FString[] GetColKeys();// 0x59b7078ea041
	int GetColCount();// 0x59b6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Dance.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int LoopTime;//[Offset: 0x50, Size: 0x4]
	FString BlueprintPath;//[Offset: 0x58, Size: 0x10]
	int ShopID;//[Offset: 0x68, Size: 0x4]
	bool IfDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	FString BeginTime;//[Offset: 0x70, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Emote.SolarTableReaderBase.Object
	SolarTablesData_Emote TryGetRowData(int Key, out bool HasKey);// 0x59dd078ea041
	bool HasRowKey(int Key);// 0x59dc078ea041
	bool HasColKey(FString Key);// 0x59db078ea041
	FString GetTableName();// 0x59da078ea041
	int GetRowKeys(out int[] OutKeys);// 0x59d9078ea041
	SolarTablesData_Emote GetRowData(int Key);// 0x59d8078ea041
	int GetRowCount();// 0x59d7078ea041
	int GetDataNum();// 0x59d6078ea041
	FString[] GetColKeys();// 0x59d5078ea041
	int GetColCount();// 0x59d4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Emote.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int EmoteType;//[Offset: 0x50, Size: 0x4]
	FString EmoteBlueprintPath;//[Offset: 0x58, Size: 0x10]
	FString EmoteResourcePath;//[Offset: 0x68, Size: 0x10]
	float EmoteDuration;//[Offset: 0x78, Size: 0x4]
	FString EmoteAppearSound;//[Offset: 0x80, Size: 0x10]
	FString EmoteSound;//[Offset: 0x90, Size: 0x10]
	int ShopID;//[Offset: 0xa0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_KillNotify.SolarTableReaderBase.Object
	SolarTablesData_KillNotify TryGetRowData(int Key, out bool HasKey);// 0x5aff078ea041
	bool HasRowKey(int Key);// 0x5afe078ea041
	bool HasColKey(FString Key);// 0x5afd078ea041
	FString GetTableName();// 0x5afc078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5afb078ea041
	SolarTablesData_KillNotify GetRowData(int Key);// 0x5afa078ea041
	int GetRowCount();// 0x5af9078ea041
	int GetDataNum();// 0x5af8078ea041
	FString[] GetColKeys();// 0x5af7078ea041
	int GetColCount();// 0x5af6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_KillNotify.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	FString KillNotifyPath;//[Offset: 0x50, Size: 0x10]
	FString KillNotifySpecialPath;//[Offset: 0x60, Size: 0x10]
	FString KillNotifyBackGroundPath;//[Offset: 0x70, Size: 0x10]
	FString KillNotifyBackground;//[Offset: 0x80, Size: 0x10]
	FString TextColor;//[Offset: 0x90, Size: 0x10]
	FString IconColor;//[Offset: 0xa0, Size: 0x10]
	FString Param;//[Offset: 0xb0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_MaterialProperty.SolarTableReaderBase.Object
	SolarTablesData_MaterialProperty TryGetRowData(int Key, out bool HasKey);// 0x5b8b078ea041
	bool HasRowKey(int Key);// 0x5b8a078ea041
	bool HasColKey(FString Key);// 0x5b89078ea041
	FString GetTableName();// 0x5b88078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b87078ea041
	SolarTablesData_MaterialProperty GetRowData(int Key);// 0x5b86078ea041
	int GetRowCount();// 0x5b85078ea041
	int GetDataNum();// 0x5b84078ea041
	FString[] GetColKeys();// 0x5b83078ea041
	int GetColCount();// 0x5b82078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_MaterialProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int Prize;//[Offset: 0x50, Size: 0x4]
	bool IfCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	int Level;//[Offset: 0x58, Size: 0x4]
	SolarTablesLocalText CoverName;//[Offset: 0x5c, Size: 0x4]
	int Substitution;//[Offset: 0x60, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_VehicleSkinProperty.SolarTableReaderBase.Object
	SolarTablesData_VehicleSkinProperty TryGetRowData(int Key, out bool HasKey);// 0x5ca3078ea041
	bool HasRowKey(int Key);// 0x5ca2078ea041
	bool HasColKey(FString Key);// 0x5ca1078ea041
	FString GetTableName();// 0x5ca0078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c9f078ea041
	SolarTablesData_VehicleSkinProperty GetRowData(int Key);// 0x5c9e078ea041
	int GetRowCount();// 0x5c9d078ea041
	int GetDataNum();// 0x5c9c078ea041
	FString[] GetColKeys();// 0x5c9b078ea041
	int GetColCount();// 0x5c9a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_VehicleSkinProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int VehicleSkinId;//[Offset: 0x50, Size: 0x4]
	int VehicleSkinAquiredThre;//[Offset: 0x54, Size: 0x4]
	int JumpPage;//[Offset: 0x58, Size: 0x4]
	FString KillBroadcast;//[Offset: 0x60, Size: 0x10]
	bool DisplayInVehiclery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Voice.SolarTableReaderBase.Object
	SolarTablesData_Voice TryGetRowData(int Key, out bool HasKey);// 0x5cd5078ea041
	bool HasRowKey(int Key);// 0x5cd4078ea041
	bool HasColKey(FString Key);// 0x5cd3078ea041
	FString GetTableName();// 0x5cd2078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5cd1078ea041
	SolarTablesData_Voice GetRowData(int Key);// 0x5cd0078ea041
	int GetRowCount();// 0x5ccf078ea041
	int GetDataNum();// 0x5cce078ea041
	FString[] GetColKeys();// 0x5ccd078ea041
	int GetColCount();// 0x5ccc078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Voice.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int Type;//[Offset: 0x50, Size: 0x4]
	int VoiceID;//[Offset: 0x54, Size: 0x4]
	int CharacterId;//[Offset: 0x58, Size: 0x4]
	bool IfBotUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool IfDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	bool IfDefaultEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponSkinProperty.SolarTableReaderBase.Object
	SolarTablesData_WeaponSkinProperty TryGetRowData(int Key, out bool HasKey);// 0x5d57078ea041
	bool HasRowKey(int Key);// 0x5d56078ea041
	bool HasColKey(FString Key);// 0x5d55078ea041
	FString GetTableName();// 0x5d54078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5d53078ea041
	SolarTablesData_WeaponSkinProperty GetRowData(int Key);// 0x5d52078ea041
	int GetRowCount();// 0x5d51078ea041
	int GetDataNum();// 0x5d50078ea041
	FString[] GetColKeys();// 0x5d4f078ea041
	int GetColCount();// 0x5d4e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponSkinProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemClass;//[Offset: 0x30, Size: 0x4]
	int ItemType;//[Offset: 0x34, Size: 0x4]
	bool ShowInStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool IfUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool IfRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum StackType;//[Offset: 0x3b, Size: 0x1]
	int[] JumpLink;//[Offset: 0x40, Size: 0x10]
	int WeaponSkinID;//[Offset: 0x50, Size: 0x4]
	FString WeaponIcon_M;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ItemCustomType.SolarTableReaderBase.Object
	SolarTablesData_ItemCustomType TryGetRowData(int Key, out bool HasKey);// 0x5ac3078ea041
	bool HasRowKey(int Key);// 0x5ac2078ea041
	bool HasColKey(FString Key);// 0x5ac1078ea041
	FString GetTableName();// 0x5ac0078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5abf078ea041
	SolarTablesData_ItemCustomType GetRowData(int Key);// 0x5abe078ea041
	int GetRowCount();// 0x5abd078ea041
	int GetDataNum();// 0x5abc078ea041
	FString[] GetColKeys();// 0x5abb078ea041
	int GetColCount();// 0x5aba078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ItemCustomType.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] ItemIDs;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ItemInBattle.SolarTableReaderBase.Object
	SolarTablesData_ItemInBattle TryGetRowData(int Key, out bool HasKey);// 0x5acd078ea041
	bool HasRowKey(int Key);// 0x5acc078ea041
	bool HasColKey(FString Key);// 0x5acb078ea041
	FString GetTableName();// 0x5aca078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5ac9078ea041
	SolarTablesData_ItemInBattle GetRowData(int Key);// 0x5ac8078ea041
	int GetRowCount();// 0x5ac7078ea041
	int GetDataNum();// 0x5ac6078ea041
	FString[] GetColKeys();// 0x5ac5078ea041
	int GetColCount();// 0x5ac4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ItemInBattle.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ArmorProperty.SolarTableReaderBase.Object
	SolarTablesData_ArmorProperty TryGetRowData(int Key, out bool HasKey);// 0x58cf078ea041
	bool HasRowKey(int Key);// 0x58ce078ea041
	bool HasColKey(FString Key);// 0x58cd078ea041
	FString GetTableName();// 0x58cc078ea041
	int GetRowKeys(out int[] OutKeys);// 0x58cb078ea041
	SolarTablesData_ArmorProperty GetRowData(int Key);// 0x58ca078ea041
	int GetRowCount();// 0x58c9078ea041
	int GetDataNum();// 0x58c8078ea041
	FString[] GetColKeys();// 0x58c7078ea041
	int GetColCount();// 0x58c6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ArmorProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxValue;//[Offset: 0x74, Size: 0x4]
	float RecoverySpeed;//[Offset: 0x78, Size: 0x4]
	float EnergyCost;//[Offset: 0x7c, Size: 0x4]
	float MaterialCost;//[Offset: 0x80, Size: 0x4]
	float MinMaterialCost;//[Offset: 0x84, Size: 0x4]
	int ArmorWorth;//[Offset: 0x88, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Chest.SolarTableReaderBase.Object
	SolarTablesData_Chest TryGetRowData(int Key, out bool HasKey);// 0x5983078ea041
	bool HasRowKey(int Key);// 0x5982078ea041
	bool HasColKey(FString Key);// 0x5981078ea041
	FString GetTableName();// 0x5980078ea041
	int GetRowKeys(out int[] OutKeys);// 0x597f078ea041
	SolarTablesData_Chest GetRowData(int Key);// 0x597e078ea041
	int GetRowCount();// 0x597d078ea041
	int GetDataNum();// 0x597c078ea041
	FString[] GetColKeys();// 0x597b078ea041
	int GetColCount();// 0x597a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Chest.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int openType;//[Offset: 0x74, Size: 0x4]
	int CostQuantity;//[Offset: 0x78, Size: 0x4]
	int CostType;//[Offset: 0x7c, Size: 0x4]
	int OpenTime;//[Offset: 0x80, Size: 0x4]
	int Drop;//[Offset: 0x84, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Collect.SolarTableReaderBase.Object
	SolarTablesData_Collect TryGetRowData(int Key, out bool HasKey);// 0x59b5078ea041
	bool HasRowKey(int Key);// 0x59b4078ea041
	bool HasColKey(FString Key);// 0x59b3078ea041
	FString GetTableName();// 0x59b2078ea041
	int GetRowKeys(out int[] OutKeys);// 0x59b1078ea041
	SolarTablesData_Collect GetRowData(int Key);// 0x59b0078ea041
	int GetRowCount();// 0x59af078ea041
	int GetDataNum();// 0x59ae078ea041
	FString[] GetColKeys();// 0x59ad078ea041
	int GetColCount();// 0x59ac078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Collect.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int lobbyCollectId;//[Offset: 0x74, Size: 0x4]
	int Level;//[Offset: 0x78, Size: 0x4]
	int EventId;//[Offset: 0x7c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_EnergyProperty.SolarTableReaderBase.Object
	SolarTablesData_EnergyProperty TryGetRowData(int Key, out bool HasKey);// 0x59e7078ea041
	bool HasRowKey(int Key);// 0x59e6078ea041
	bool HasColKey(FString Key);// 0x59e5078ea041
	FString GetTableName();// 0x59e4078ea041
	int GetRowKeys(out int[] OutKeys);// 0x59e3078ea041
	SolarTablesData_EnergyProperty GetRowData(int Key);// 0x59e2078ea041
	int GetRowCount();// 0x59e1078ea041
	int GetDataNum();// 0x59e0078ea041
	FString[] GetColKeys();// 0x59df078ea041
	int GetColCount();// 0x59de078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_EnergyProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float AddedEnergyMax;//[Offset: 0x74, Size: 0x4]
	int EnergyModuleWorth;//[Offset: 0x78, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ExtraEnergyProperty.SolarTableReaderBase.Object
	SolarTablesData_ExtraEnergyProperty TryGetRowData(int Key, out bool HasKey);// 0x5a2d078ea041
	bool HasRowKey(int Key);// 0x5a2c078ea041
	bool HasColKey(FString Key);// 0x5a2b078ea041
	FString GetTableName();// 0x5a2a078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a29078ea041
	SolarTablesData_ExtraEnergyProperty GetRowData(int Key);// 0x5a28078ea041
	int GetRowCount();// 0x5a27078ea041
	int GetDataNum();// 0x5a26078ea041
	FString[] GetColKeys();// 0x5a25078ea041
	int GetColCount();// 0x5a24078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ExtraEnergyProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int QualityColor;//[Offset: 0x74, Size: 0x4]
	float ExtraEnergyMax;//[Offset: 0x78, Size: 0x4]
	float ExtraEnergyCharge;//[Offset: 0x7c, Size: 0x4]
	float ChargeCD;//[Offset: 0x80, Size: 0x4]
	int ExtraEnergyWorth;//[Offset: 0x84, Size: 0x4]
	float RechargeFrequencyFromSky;//[Offset: 0x88, Size: 0x4]
	float RechargeFrequencyFromDeathBox;//[Offset: 0x8c, Size: 0x4]
	float RechargeFrequencyFromPile;//[Offset: 0x90, Size: 0x4]
	float RechargeQuantityFromSky;//[Offset: 0x94, Size: 0x4]
	float RechargeQuantityFromDeathBox;//[Offset: 0x98, Size: 0x4]
	float RechargeQuantityFromPile;//[Offset: 0x9c, Size: 0x4]
	FString Sketch;//[Offset: 0xa0, Size: 0x10]
	int SketchLevel;//[Offset: 0xb0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GunProperty.SolarTableReaderBase.Object
	SolarTablesData_GunProperty TryGetRowData(int Key, out bool HasKey);// 0x5a7d078ea041
	bool HasRowKey(int Key);// 0x5a7c078ea041
	bool HasColKey(FString Key);// 0x5a7b078ea041
	FString GetTableName();// 0x5a7a078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a79078ea041
	SolarTablesData_GunProperty GetRowData(int Key);// 0x5a78078ea041
	int GetRowCount();// 0x5a77078ea041
	int GetDataNum();// 0x5a76078ea041
	FString[] GetColKeys();// 0x5a75078ea041
	int GetColCount();// 0x5a74078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GunProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int weaponid;//[Offset: 0x74, Size: 0x4]
	bool Disused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	FString BigIcon;//[Offset: 0x80, Size: 0x10]
	int WeaponLv;//[Offset: 0x90, Size: 0x4]
	bool UseWeaponAccessory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	int WeaponAccessory1;//[Offset: 0x98, Size: 0x4]
	int WeaponAccessory2;//[Offset: 0x9c, Size: 0x4]
	int WeaponAccessory3;//[Offset: 0xa0, Size: 0x4]
	int WeaponAccessory4;//[Offset: 0xa4, Size: 0x4]
	int WeaponAccessory5;//[Offset: 0xa8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ItemBehavior.SolarTableReaderBase.Object
	SolarTablesData_ItemBehavior TryGetRowData(int Key, out bool HasKey);// 0x5ab9078ea041
	bool HasRowKey(int Key);// 0x5ab8078ea041
	bool HasColKey(FString Key);// 0x5ab7078ea041
	FString GetTableName();// 0x5ab6078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5ab5078ea041
	SolarTablesData_ItemBehavior GetRowData(int Key);// 0x5ab4078ea041
	int GetRowCount();// 0x5ab3078ea041
	int GetDataNum();// 0x5ab2078ea041
	FString[] GetColKeys();// 0x5ab1078ea041
	int GetColCount();// 0x5ab0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ItemBehavior.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int BehaviorExpID;//[Offset: 0x74, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ItemWeaponParts.SolarTableReaderBase.Object
	SolarTablesData_ItemWeaponParts TryGetRowData(int Key, out bool HasKey);// 0x5aeb078ea041
	bool HasRowKey(int Key);// 0x5aea078ea041
	bool HasColKey(FString Key);// 0x5ae9078ea041
	FString GetTableName();// 0x5ae8078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5ae7078ea041
	SolarTablesData_ItemWeaponParts GetRowData(int Key);// 0x5ae6078ea041
	int GetRowCount();// 0x5ae5078ea041
	int GetDataNum();// 0x5ae4078ea041
	FString[] GetColKeys();// 0x5ae3078ea041
	int GetColCount();// 0x5ae2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ItemWeaponParts.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int PartsType;//[Offset: 0x74, Size: 0x4]
	int Level;//[Offset: 0x78, Size: 0x4]
	FString PreviewIcon;//[Offset: 0x80, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_JetPackModuleProperty.SolarTableReaderBase.Object
	SolarTablesData_JetPackModuleProperty TryGetRowData(int Key, out bool HasKey);// 0x5af5078ea041
	bool HasRowKey(int Key);// 0x5af4078ea041
	bool HasColKey(FString Key);// 0x5af3078ea041
	FString GetTableName();// 0x5af2078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5af1078ea041
	SolarTablesData_JetPackModuleProperty GetRowData(int Key);// 0x5af0078ea041
	int GetRowCount();// 0x5aef078ea041
	int GetDataNum();// 0x5aee078ea041
	FString[] GetColKeys();// 0x5aed078ea041
	int GetColCount();// 0x5aec078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_JetPackModuleProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	int VerticalDashSpeedTimes;//[Offset: 0x74, Size: 0x4]
	int HorizontalDashSpeedTimes;//[Offset: 0x78, Size: 0x4]
	float VerticalDashSpeedScale;//[Offset: 0x7c, Size: 0x4]
	float HorizontalDashSpeedScale;//[Offset: 0x80, Size: 0x4]
	float VerticalDashCoolDownScale;//[Offset: 0x84, Size: 0x4]
	float HorizontalDashCoolDownScale;//[Offset: 0x88, Size: 0x4]
	float VerticalDashEnergyScale;//[Offset: 0x8c, Size: 0x4]
	float HorizontalDashEnergyScale;//[Offset: 0x90, Size: 0x4]
	float VerticalChargingScale;//[Offset: 0x94, Size: 0x4]
	float HorizontalChargingScale;//[Offset: 0x98, Size: 0x4]
	int JetPackModuleWorth;//[Offset: 0x9c, Size: 0x4]
	FString Sketch;//[Offset: 0xa0, Size: 0x10]
	int SketchLevel;//[Offset: 0xb0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ShieldProperty.SolarTableReaderBase.Object
	SolarTablesData_ShieldProperty TryGetRowData(int Key, out bool HasKey);// 0x5c53078ea041
	bool HasRowKey(int Key);// 0x5c52078ea041
	bool HasColKey(FString Key);// 0x5c51078ea041
	FString GetTableName();// 0x5c50078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c4f078ea041
	SolarTablesData_ShieldProperty GetRowData(int Key);// 0x5c4e078ea041
	int GetRowCount();// 0x5c4d078ea041
	int GetDataNum();// 0x5c4c078ea041
	FString[] GetColKeys();// 0x5c4b078ea041
	int GetColCount();// 0x5c4a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ShieldProperty.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString Icon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText Info;//[Offset: 0x28, Size: 0x4]
	int Quality;//[Offset: 0x2c, Size: 0x4]
	int ItemType;//[Offset: 0x30, Size: 0x4]
	bool IfReplace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int Pile;//[Offset: 0x38, Size: 0x4]
	FString AbilityBP;//[Offset: 0x40, Size: 0x10]
	FString ItemBP;//[Offset: 0x50, Size: 0x10]
	FString AudioEventName;//[Offset: 0x60, Size: 0x10]
	bool UseOnPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	float MaxValue;//[Offset: 0x74, Size: 0x4]
	float RecoverySpeed;//[Offset: 0x78, Size: 0x4]
	float EnergyCost;//[Offset: 0x7c, Size: 0x4]
	int CoolDownTime;//[Offset: 0x80, Size: 0x4]
	float RecoveryDuration;//[Offset: 0x84, Size: 0x4]
	float RecoveryDurationB;//[Offset: 0x88, Size: 0x4]
	float RecoveryAmount;//[Offset: 0x8c, Size: 0x4]
	float EnergyConsumption;//[Offset: 0x90, Size: 0x4]
	int ShieldWorth;//[Offset: 0x94, Size: 0x4]
	FString Sketch;//[Offset: 0x98, Size: 0x10]
	int SketchLevel;//[Offset: 0xa8, Size: 0x4]
	int QualityColor;//[Offset: 0xac, Size: 0x4]
	int AutoRecharge;//[Offset: 0xb0, Size: 0x4]
	float LeaveCombatTime;//[Offset: 0xb4, Size: 0x4]
	float AutoRechargeInterval;//[Offset: 0xb8, Size: 0x4]
	float AutoRechargeValue;//[Offset: 0xbc, Size: 0x4]
	int NextUpgradeCost;//[Offset: 0xc0, Size: 0x4]
	int NextUpgradeItemID;//[Offset: 0xc4, Size: 0x4]
	int UpgradeItemCost;//[Offset: 0xc8, Size: 0x4]
	float UpgradeTimeCost;//[Offset: 0xcc, Size: 0x4]
	float ShieldRechargeDelayTime;//[Offset: 0xd0, Size: 0x4]
	float ShieldRecoveryTime;//[Offset: 0xd4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ItemQuality.SolarTableReaderBase.Object
	SolarTablesData_ItemQuality TryGetRowData(int Key, out bool HasKey);// 0x5ad7078ea041
	bool HasRowKey(int Key);// 0x5ad6078ea041
	bool HasColKey(FString Key);// 0x5ad5078ea041
	FString GetTableName();// 0x5ad4078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5ad3078ea041
	SolarTablesData_ItemQuality GetRowData(int Key);// 0x5ad2078ea041
	int GetRowCount();// 0x5ad1078ea041
	int GetDataNum();// 0x5ad0078ea041
	FString[] GetColKeys();// 0x5acf078ea041
	int GetColCount();// 0x5ace078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ItemQuality.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float[] Color;//[Offset: 0x10, Size: 0x10]
	float[] HUDColor;//[Offset: 0x20, Size: 0x10]
	float[] OutsideColor;//[Offset: 0x30, Size: 0x10]
	float[] InsideColor;//[Offset: 0x40, Size: 0x10]
	float[] HighQualityColor;//[Offset: 0x50, Size: 0x10]
	float[] LowQualityColor;//[Offset: 0x60, Size: 0x10]
	float[] HUDBGColor;//[Offset: 0x70, Size: 0x10]
	float[] HUDDecorateColor;//[Offset: 0x80, Size: 0x10]
	FString Qualitypic;//[Offset: 0x90, Size: 0x10]
	FString QualityColor;//[Offset: 0xa0, Size: 0x10]
	FString Qualitystr;//[Offset: 0xb0, Size: 0x10]
	FString QualityBG;//[Offset: 0xc0, Size: 0x10]
	FString QualityBG2;//[Offset: 0xd0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ItemSound.SolarTableReaderBase.Object
	SolarTablesData_ItemSound TryGetRowData(int Key, out bool HasKey);// 0x5ae1078ea041
	bool HasRowKey(int Key);// 0x5ae0078ea041
	bool HasColKey(FString Key);// 0x5adf078ea041
	FString GetTableName();// 0x5ade078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5add078ea041
	SolarTablesData_ItemSound GetRowData(int Key);// 0x5adc078ea041
	int GetRowCount();// 0x5adb078ea041
	int GetDataNum();// 0x5ada078ea041
	FString[] GetColKeys();// 0x5ad9078ea041
	int GetColCount();// 0x5ad8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ItemSound.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString PickupSound;//[Offset: 0x10, Size: 0x10]
	FString EquippedSound;//[Offset: 0x20, Size: 0x10]
	FString PassiveSound;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_LobbyAutoDownload.SolarTableReaderBase.Object
	SolarTablesData_LobbyAutoDownload TryGetRowData(int Key, out bool HasKey);// 0x5b13078ea041
	bool HasRowKey(int Key);// 0x5b12078ea041
	bool HasColKey(FString Key);// 0x5b11078ea041
	FString GetTableName();// 0x5b10078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b0f078ea041
	SolarTablesData_LobbyAutoDownload GetRowData(int Key);// 0x5b0e078ea041
	int GetRowCount();// 0x5b0d078ea041
	int GetDataNum();// 0x5b0c078ea041
	FString[] GetColKeys();// 0x5b0b078ea041
	int GetColCount();// 0x5b0a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_LobbyAutoDownload.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ChunkID;//[Offset: 0x10, Size: 0x4]
	int ChunkName;//[Offset: 0x14, Size: 0x4]
	bool IncludeMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool IncludeOptional;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_LanguageSwitcher.SolarTableReaderBase.Object
	SolarTablesData_LanguageSwitcher TryGetRowData(FString Key, out bool HasKey);// 0x5b09078ea041
	bool HasRowKey(FString Key);// 0x5b08078ea041
	bool HasColKey(FString Key);// 0x5b07078ea041
	FString GetTableName();// 0x5b06078ea041
	int GetRowKeys(out FString[] OutKeys);// 0x5b05078ea041
	SolarTablesData_LanguageSwitcher GetRowData(FString Key);// 0x5b04078ea041
	int GetRowCount();// 0x5b03078ea041
	int GetDataNum();// 0x5b02078ea041
	FString[] GetColKeys();// 0x5b01078ea041
	int GetColCount();// 0x5b00078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_LanguageSwitcher.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	FString ButtonText;//[Offset: 0x20, Size: 0x10]
	bool IfOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int LanguageIndex;//[Offset: 0x34, Size: 0x4]
	FString MarqueeDirection;//[Offset: 0x38, Size: 0x10]
	FString TextAbbr;//[Offset: 0x48, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization.SolarTableReaderBase.Object
	SolarTablesData_Localization TryGetRowData(int Key, out bool HasKey);// 0x5b1d078ea041
	bool HasRowKey(int Key);// 0x5b1c078ea041
	bool HasColKey(FString Key);// 0x5b1b078ea041
	FString GetTableName();// 0x5b1a078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b19078ea041
	SolarTablesData_Localization GetRowData(int Key);// 0x5b18078ea041
	int GetRowCount();// 0x5b17078ea041
	int GetDataNum();// 0x5b16078ea041
	FString[] GetColKeys();// 0x5b15078ea041
	int GetColCount();// 0x5b14078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_BattleUI.SolarTableReaderBase.Object
	SolarTablesData_Localization_BattleUI TryGetRowData(int Key, out bool HasKey);// 0x5b27078ea041
	bool HasRowKey(int Key);// 0x5b26078ea041
	bool HasColKey(FString Key);// 0x5b25078ea041
	FString GetTableName();// 0x5b24078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b23078ea041
	SolarTablesData_Localization_BattleUI GetRowData(int Key);// 0x5b22078ea041
	int GetRowCount();// 0x5b21078ea041
	int GetDataNum();// 0x5b20078ea041
	FString[] GetColKeys();// 0x5b1f078ea041
	int GetColCount();// 0x5b1e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_BattleUI.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_EventSystem.SolarTableReaderBase.Object
	SolarTablesData_Localization_EventSystem TryGetRowData(int Key, out bool HasKey);// 0x5b31078ea041
	bool HasRowKey(int Key);// 0x5b30078ea041
	bool HasColKey(FString Key);// 0x5b2f078ea041
	FString GetTableName();// 0x5b2e078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b2d078ea041
	SolarTablesData_Localization_EventSystem GetRowData(int Key);// 0x5b2c078ea041
	int GetRowCount();// 0x5b2b078ea041
	int GetDataNum();// 0x5b2a078ea041
	FString[] GetColKeys();// 0x5b29078ea041
	int GetColCount();// 0x5b28078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_EventSystem.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_General.SolarTableReaderBase.Object
	SolarTablesData_Localization_General TryGetRowData(int Key, out bool HasKey);// 0x5b3b078ea041
	bool HasRowKey(int Key);// 0x5b3a078ea041
	bool HasColKey(FString Key);// 0x5b39078ea041
	FString GetTableName();// 0x5b38078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b37078ea041
	SolarTablesData_Localization_General GetRowData(int Key);// 0x5b36078ea041
	int GetRowCount();// 0x5b35078ea041
	int GetDataNum();// 0x5b34078ea041
	FString[] GetColKeys();// 0x5b33078ea041
	int GetColCount();// 0x5b32078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_General.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_Heroes.SolarTableReaderBase.Object
	SolarTablesData_Localization_Heroes TryGetRowData(int Key, out bool HasKey);// 0x5b45078ea041
	bool HasRowKey(int Key);// 0x5b44078ea041
	bool HasColKey(FString Key);// 0x5b43078ea041
	FString GetTableName();// 0x5b42078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b41078ea041
	SolarTablesData_Localization_Heroes GetRowData(int Key);// 0x5b40078ea041
	int GetRowCount();// 0x5b3f078ea041
	int GetDataNum();// 0x5b3e078ea041
	FString[] GetColKeys();// 0x5b3d078ea041
	int GetColCount();// 0x5b3c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_Heroes.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_Item.SolarTableReaderBase.Object
	SolarTablesData_Localization_Item TryGetRowData(int Key, out bool HasKey);// 0x5b4f078ea041
	bool HasRowKey(int Key);// 0x5b4e078ea041
	bool HasColKey(FString Key);// 0x5b4d078ea041
	FString GetTableName();// 0x5b4c078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b4b078ea041
	SolarTablesData_Localization_Item GetRowData(int Key);// 0x5b4a078ea041
	int GetRowCount();// 0x5b49078ea041
	int GetDataNum();// 0x5b48078ea041
	FString[] GetColKeys();// 0x5b47078ea041
	int GetColCount();// 0x5b46078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_Item.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_Tournament.SolarTableReaderBase.Object
	SolarTablesData_Localization_Tournament TryGetRowData(int Key, out bool HasKey);// 0x5b59078ea041
	bool HasRowKey(int Key);// 0x5b58078ea041
	bool HasColKey(FString Key);// 0x5b57078ea041
	FString GetTableName();// 0x5b56078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b55078ea041
	SolarTablesData_Localization_Tournament GetRowData(int Key);// 0x5b54078ea041
	int GetRowCount();// 0x5b53078ea041
	int GetDataNum();// 0x5b52078ea041
	FString[] GetColKeys();// 0x5b51078ea041
	int GetColCount();// 0x5b50078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_Tournament.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Localization_Uncategorized.SolarTableReaderBase.Object
	SolarTablesData_Localization_Uncategorized TryGetRowData(int Key, out bool HasKey);// 0x5b63078ea041
	bool HasRowKey(int Key);// 0x5b62078ea041
	bool HasColKey(FString Key);// 0x5b61078ea041
	FString GetTableName();// 0x5b60078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b5f078ea041
	SolarTablesData_Localization_Uncategorized GetRowData(int Key);// 0x5b5e078ea041
	int GetRowCount();// 0x5b5d078ea041
	int GetDataNum();// 0x5b5c078ea041
	FString[] GetColKeys();// 0x5b5b078ea041
	int GetColCount();// 0x5b5a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Localization_Uncategorized.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString zh_CN;//[Offset: 0x10, Size: 0x10]
	FString en;//[Offset: 0x20, Size: 0x10]
	FString pt;//[Offset: 0x30, Size: 0x10]
	FString ind;//[Offset: 0x40, Size: 0x10]
	FString zh_TW;//[Offset: 0x50, Size: 0x10]
	FString ja;//[Offset: 0x60, Size: 0x10]
	FString ko;//[Offset: 0x70, Size: 0x10]
	FString fr;//[Offset: 0x80, Size: 0x10]
	FString de;//[Offset: 0x90, Size: 0x10]
	FString ru;//[Offset: 0xa0, Size: 0x10]
	FString ar;//[Offset: 0xb0, Size: 0x10]
	FString tr;//[Offset: 0xc0, Size: 0x10]
	FString tl;//[Offset: 0xd0, Size: 0x10]
	FString es;//[Offset: 0xe0, Size: 0x10]
	FString hi;//[Offset: 0xf0, Size: 0x10]
	FString vi;//[Offset: 0x100, Size: 0x10]
	FString th;//[Offset: 0x110, Size: 0x10]
	FString it;//[Offset: 0x120, Size: 0x10]
	FString pl;//[Offset: 0x130, Size: 0x10]
	FString po;//[Offset: 0x140, Size: 0x10]
	FString Op;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_GameMap.SolarTableReaderBase.Object
	SolarTablesData_GameMap TryGetRowData(int Key, out bool HasKey);// 0x5a37078ea041
	bool HasRowKey(int Key);// 0x5a36078ea041
	bool HasColKey(FString Key);// 0x5a35078ea041
	FString GetTableName();// 0x5a34078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a33078ea041
	SolarTablesData_GameMap GetRowData(int Key);// 0x5a32078ea041
	int GetRowCount();// 0x5a31078ea041
	int GetDataNum();// 0x5a30078ea041
	FString[] GetColKeys();// 0x5a2f078ea041
	int GetColCount();// 0x5a2e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_GameMap.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString MapName;//[Offset: 0x18, Size: 0x10]
	FString ResPath;//[Offset: 0x28, Size: 0x10]
	int MapImage;//[Offset: 0x38, Size: 0x4]
	float[] MapImageSize;//[Offset: 0x40, Size: 0x10]
	float[] MapTopLeftCoord;//[Offset: 0x50, Size: 0x10]
	float[] MapRightBottomCoord;//[Offset: 0x60, Size: 0x10]
	int[] LocationIcon;//[Offset: 0x70, Size: 0x10]
	FString[] ItemSubLevels;//[Offset: 0x80, Size: 0x10]
	float HorizonLineZ;//[Offset: 0x90, Size: 0x4]
	float TopZ;//[Offset: 0x94, Size: 0x4]
	float BottomZ;//[Offset: 0x98, Size: 0x4]
	float AverageZ;//[Offset: 0x9c, Size: 0x4]
	float InitFogZ;//[Offset: 0xa0, Size: 0x4]
	float TargetFogZ;//[Offset: 0xa4, Size: 0x4]
	float MapFOV;//[Offset: 0xa8, Size: 0x4]
	int Speed1;//[Offset: 0xac, Size: 0x4]
	int Speed2;//[Offset: 0xb0, Size: 0x4]
	float MapFOV1;//[Offset: 0xb4, Size: 0x4]
	float MapFOV2;//[Offset: 0xb8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_MapMarkIcon.SolarTableReaderBase.Object
	SolarTablesData_MapMarkIcon TryGetRowData(int Key, out bool HasKey);// 0x5b77078ea041
	bool HasRowKey(int Key);// 0x5b76078ea041
	bool HasColKey(FString Key);// 0x5b75078ea041
	FString GetTableName();// 0x5b74078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b73078ea041
	SolarTablesData_MapMarkIcon GetRowData(int Key);// 0x5b72078ea041
	int GetRowCount();// 0x5b71078ea041
	int GetDataNum();// 0x5b70078ea041
	FString[] GetColKeys();// 0x5b6f078ea041
	int GetColCount();// 0x5b6e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_MapMarkIcon.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString AtlasPath;//[Offset: 0x10, Size: 0x10]
	float[] IconSize;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_MatchRule.SolarTableReaderBase.Object
	SolarTablesData_MatchRule TryGetRowData(int Key, out bool HasKey);// 0x5b81078ea041
	bool HasRowKey(int Key);// 0x5b80078ea041
	bool HasColKey(FString Key);// 0x5b7f078ea041
	FString GetTableName();// 0x5b7e078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b7d078ea041
	SolarTablesData_MatchRule GetRowData(int Key);// 0x5b7c078ea041
	int GetRowCount();// 0x5b7b078ea041
	int GetDataNum();// 0x5b7a078ea041
	FString[] GetColKeys();// 0x5b79078ea041
	int GetColCount();// 0x5b78078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_MatchRule.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MatchType;//[Offset: 0x10, Size: 0x4]
	int MinPlayer;//[Offset: 0x14, Size: 0x4]
	int MaxPlayer;//[Offset: 0x18, Size: 0x4]
	int NumMode;//[Offset: 0x1c, Size: 0x4]
	int StopMatchTime;//[Offset: 0x20, Size: 0x4]
	int[] PlayerStructure;//[Offset: 0x28, Size: 0x10]
	int MinGroup;//[Offset: 0x38, Size: 0x4]
	int EloSettleType;//[Offset: 0x3c, Size: 0x4]
	int RankSettleType;//[Offset: 0x40, Size: 0x4]
	int groupid;//[Offset: 0x44, Size: 0x4]
	int RankGroupNameID;//[Offset: 0x48, Size: 0x4]
	bool MatchSameBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int KeepMatchTimeID;//[Offset: 0x50, Size: 0x4]
	int OBNum;//[Offset: 0x54, Size: 0x4]
	bool MaxPlayerStopMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	int StatisticsType;//[Offset: 0x5c, Size: 0x4]
	int HistoryModeType;//[Offset: 0x60, Size: 0x4]
	bool HeroCombatAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	int RestartMatchTime;//[Offset: 0x68, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_RankMatch.SolarTableReaderBase.Object
	SolarTablesData_RankMatch TryGetRowData(int Key, out bool HasKey);// 0x5c35078ea041
	bool HasRowKey(int Key);// 0x5c34078ea041
	bool HasColKey(FString Key);// 0x5c33078ea041
	FString GetTableName();// 0x5c32078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c31078ea041
	SolarTablesData_RankMatch GetRowData(int Key);// 0x5c30078ea041
	int GetRowCount();// 0x5c2f078ea041
	int GetDataNum();// 0x5c2e078ea041
	FString[] GetColKeys();// 0x5c2d078ea041
	int GetColCount();// 0x5c2c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_RankMatch.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MatchType;//[Offset: 0x10, Size: 0x4]
	int NumOfAI;//[Offset: 0x14, Size: 0x4]
	int AiLevel;//[Offset: 0x18, Size: 0x4]
	FString AILevelConfig;//[Offset: 0x20, Size: 0x10]
	int AITeamPresetsID;//[Offset: 0x30, Size: 0x4]
	bool EnableTeamManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	int[] MLApplication;//[Offset: 0x38, Size: 0x10]
	int MLApply;//[Offset: 0x48, Size: 0x4]
	int MaxWait;//[Offset: 0x4c, Size: 0x4]
	int StopMatchTime;//[Offset: 0x50, Size: 0x4]
	bool HasAITeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool AIAccompany;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	int AIAccompanyTimeline;//[Offset: 0x58, Size: 0x4]
	int MinPlayer;//[Offset: 0x5c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_NameCardBackground.SolarTableReaderBase.Object
	SolarTablesData_NameCardBackground TryGetRowData(int Key, out bool HasKey);// 0x5b95078ea041
	bool HasRowKey(int Key);// 0x5b94078ea041
	bool HasColKey(FString Key);// 0x5b93078ea041
	FString GetTableName();// 0x5b92078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b91078ea041
	SolarTablesData_NameCardBackground GetRowData(int Key);// 0x5b90078ea041
	int GetRowCount();// 0x5b8f078ea041
	int GetDataNum();// 0x5b8e078ea041
	FString[] GetColKeys();// 0x5b8d078ea041
	int GetColCount();// 0x5b8c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_NameCardBackground.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	int ShopID;//[Offset: 0x18, Size: 0x4]
	int Exclusive;//[Offset: 0x1c, Size: 0x4]
	int IsAIEquiped;//[Offset: 0x20, Size: 0x4]
	FString BackgroundPath;//[Offset: 0x28, Size: 0x10]
	FString BackgroundTexturePath;//[Offset: 0x38, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_NameCardPose.SolarTableReaderBase.Object
	SolarTablesData_NameCardPose TryGetRowData(int Key, out bool HasKey);// 0x5b9f078ea041
	bool HasRowKey(int Key);// 0x5b9e078ea041
	bool HasColKey(FString Key);// 0x5b9d078ea041
	FString GetTableName();// 0x5b9c078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b9b078ea041
	SolarTablesData_NameCardPose GetRowData(int Key);// 0x5b9a078ea041
	int GetRowCount();// 0x5b99078ea041
	int GetDataNum();// 0x5b98078ea041
	FString[] GetColKeys();// 0x5b97078ea041
	int GetColCount();// 0x5b96078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_NameCardPose.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	int ShopID;//[Offset: 0x18, Size: 0x4]
	int Exclusive;//[Offset: 0x1c, Size: 0x4]
	int IsAIEquiped;//[Offset: 0x20, Size: 0x4]
	FString PosePath;//[Offset: 0x28, Size: 0x10]
	FString PosePath_M;//[Offset: 0x38, Size: 0x10]
	FString PosePath_F;//[Offset: 0x48, Size: 0x10]
	FString PosePath_MCP;//[Offset: 0x58, Size: 0x10]
	FString PosePath_FFM;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_ObGift.SolarTableReaderBase.Object
	SolarTablesData_ObGift TryGetRowData(int Key, out bool HasKey);// 0x5ba9078ea041
	bool HasRowKey(int Key);// 0x5ba8078ea041
	bool HasColKey(FString Key);// 0x5ba7078ea041
	FString GetTableName();// 0x5ba6078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5ba5078ea041
	SolarTablesData_ObGift GetRowData(int Key);// 0x5ba4078ea041
	int GetRowCount();// 0x5ba3078ea041
	int GetDataNum();// 0x5ba2078ea041
	FString[] GetColKeys();// 0x5ba1078ea041
	int GetColCount();// 0x5ba0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_ObGift.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int gift_type;//[Offset: 0x10, Size: 0x4]
	FString item_name;//[Offset: 0x18, Size: 0x10]
	FString item_back_res;//[Offset: 0x28, Size: 0x10]
	FString item_text_res;//[Offset: 0x38, Size: 0x10]
	int gift_hot_num;//[Offset: 0x48, Size: 0x4]
	int currency_type;//[Offset: 0x4c, Size: 0x4]
	int item_price;//[Offset: 0x50, Size: 0x4]
	float item_back;//[Offset: 0x54, Size: 0x4]
	int item_show_time;//[Offset: 0x58, Size: 0x4]
	int item_id;//[Offset: 0x5c, Size: 0x4]
	int small_time;//[Offset: 0x60, Size: 0x4]
	int interact_num;//[Offset: 0x64, Size: 0x4]
	int CD;//[Offset: 0x68, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_OBSubtitle_Action2Feature.SolarTableReaderBase.Object
	SolarTablesData_OBSubtitle_Action2Feature TryGetRowData(int Key, out bool HasKey);// 0x5bb3078ea041
	bool HasRowKey(int Key);// 0x5bb2078ea041
	bool HasColKey(FString Key);// 0x5bb1078ea041
	FString GetTableName();// 0x5bb0078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5baf078ea041
	SolarTablesData_OBSubtitle_Action2Feature GetRowData(int Key);// 0x5bae078ea041
	int GetRowCount();// 0x5bad078ea041
	int GetDataNum();// 0x5bac078ea041
	FString[] GetColKeys();// 0x5bab078ea041
	int GetColCount();// 0x5baa078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_OBSubtitle_Action2Feature.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString ActionName;//[Offset: 0x10, Size: 0x10]
	int Priority;//[Offset: 0x20, Size: 0x4]
	int DefualtEmotion;//[Offset: 0x24, Size: 0x4]
	int MaxSuccessiveCount;//[Offset: 0x28, Size: 0x4]
	int[] FeatureList;//[Offset: 0x30, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_OBSubtitle_Feature2Emotion.SolarTableReaderBase.Object
	SolarTablesData_OBSubtitle_Feature2Emotion TryGetRowData(int Key, out bool HasKey);// 0x5bc7078ea041
	bool HasRowKey(int Key);// 0x5bc6078ea041
	bool HasColKey(FString Key);// 0x5bc5078ea041
	FString GetTableName();// 0x5bc4078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5bc3078ea041
	SolarTablesData_OBSubtitle_Feature2Emotion GetRowData(int Key);// 0x5bc2078ea041
	int GetRowCount();// 0x5bc1078ea041
	int GetDataNum();// 0x5bc0078ea041
	FString[] GetColKeys();// 0x5bbf078ea041
	int GetColCount();// 0x5bbe078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_OBSubtitle_Feature2Emotion.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString FeatureName;//[Offset: 0x10, Size: 0x10]
	int[] EmotionList;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_OBSubtitle_Emotion2Pattern.SolarTableReaderBase.Object
	SolarTablesData_OBSubtitle_Emotion2Pattern TryGetRowData(int Key, out bool HasKey);// 0x5bbd078ea041
	bool HasRowKey(int Key);// 0x5bbc078ea041
	bool HasColKey(FString Key);// 0x5bbb078ea041
	FString GetTableName();// 0x5bba078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5bb9078ea041
	SolarTablesData_OBSubtitle_Emotion2Pattern GetRowData(int Key);// 0x5bb8078ea041
	int GetRowCount();// 0x5bb7078ea041
	int GetDataNum();// 0x5bb6078ea041
	FString[] GetColKeys();// 0x5bb5078ea041
	int GetColCount();// 0x5bb4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_OBSubtitle_Emotion2Pattern.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int EmotionLevel;//[Offset: 0x10, Size: 0x4]
	int[] PatternList;//[Offset: 0x18, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_OBSubtitle_Pattern2Subtitle.SolarTableReaderBase.Object
	SolarTablesData_OBSubtitle_Pattern2Subtitle TryGetRowData(int Key, out bool HasKey);// 0x5bd1078ea041
	bool HasRowKey(int Key);// 0x5bd0078ea041
	bool HasColKey(FString Key);// 0x5bcf078ea041
	FString GetTableName();// 0x5bce078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5bcd078ea041
	SolarTablesData_OBSubtitle_Pattern2Subtitle GetRowData(int Key);// 0x5bcc078ea041
	int GetRowCount();// 0x5bcb078ea041
	int GetDataNum();// 0x5bca078ea041
	FString[] GetColKeys();// 0x5bc9078ea041
	int GetColCount();// 0x5bc8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_OBSubtitle_Pattern2Subtitle.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText[] SubTitleList;//[Offset: 0x10, Size: 0x10]
	int[] ENLengthList;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Outcome.SolarTableReaderBase.Object
	SolarTablesData_Outcome TryGetRowData(int Key, out bool HasKey);// 0x5bdb078ea041
	bool HasRowKey(int Key);// 0x5bda078ea041
	bool HasColKey(FString Key);// 0x5bd9078ea041
	FString GetTableName();// 0x5bd8078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5bd7078ea041
	SolarTablesData_Outcome GetRowData(int Key);// 0x5bd6078ea041
	int GetRowCount();// 0x5bd5078ea041
	int GetDataNum();// 0x5bd4078ea041
	FString[] GetColKeys();// 0x5bd3078ea041
	int GetColCount();// 0x5bd2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Outcome.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int OutcomeType;//[Offset: 0x10, Size: 0x4]
	int MaxTimes;//[Offset: 0x14, Size: 0x4]
	int MinTimes;//[Offset: 0x18, Size: 0x4]
	int[] Contents;//[Offset: 0x20, Size: 0x10]
	int[] LimitId;//[Offset: 0x30, Size: 0x10]
	int[] LimitIdMax;//[Offset: 0x40, Size: 0x10]
	int[] LimitIdMin;//[Offset: 0x50, Size: 0x10]
	FString Refresh;//[Offset: 0x60, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_OutcomeContent.SolarTableReaderBase.Object
	SolarTablesData_OutcomeContent TryGetRowData(int Key, out bool HasKey);// 0x5be5078ea041
	bool HasRowKey(int Key);// 0x5be4078ea041
	bool HasColKey(FString Key);// 0x5be3078ea041
	FString GetTableName();// 0x5be2078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5be1078ea041
	SolarTablesData_OutcomeContent GetRowData(int Key);// 0x5be0078ea041
	int GetRowCount();// 0x5bdf078ea041
	int GetDataNum();// 0x5bde078ea041
	FString[] GetColKeys();// 0x5bdd078ea041
	int GetColCount();// 0x5bdc078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_OutcomeContent.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int ItemID;//[Offset: 0x10, Size: 0x4]
	int Weight;//[Offset: 0x14, Size: 0x4]
	int[] RandomNum;//[Offset: 0x18, Size: 0x10]
	int MaxTimes;//[Offset: 0x28, Size: 0x4]
	int MinTimes;//[Offset: 0x2c, Size: 0x4]
	int RelatedContentID;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_PickupPriorityItem.SolarTableReaderBase.Object
	SolarTablesData_PickupPriorityItem TryGetRowData(int Key, out bool HasKey);// 0x5bf9078ea041
	bool HasRowKey(int Key);// 0x5bf8078ea041
	bool HasColKey(FString Key);// 0x5bf7078ea041
	FString GetTableName();// 0x5bf6078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5bf5078ea041
	SolarTablesData_PickupPriorityItem GetRowData(int Key);// 0x5bf4078ea041
	int GetRowCount();// 0x5bf3078ea041
	int GetDataNum();// 0x5bf2078ea041
	FString[] GetColKeys();// 0x5bf1078ea041
	int GetColCount();// 0x5bf0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_PickupPriorityItem.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int PriorityValue;//[Offset: 0x10, Size: 0x4]
	int MutiAutoPickup;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_PickupPriorityWeaponPart.SolarTableReaderBase.Object
	SolarTablesData_PickupPriorityWeaponPart TryGetRowData(int Key, out bool HasKey);// 0x5c03078ea041
	bool HasRowKey(int Key);// 0x5c02078ea041
	bool HasColKey(FString Key);// 0x5c01078ea041
	FString GetTableName();// 0x5c00078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5bff078ea041
	SolarTablesData_PickupPriorityWeaponPart GetRowData(int Key);// 0x5bfe078ea041
	int GetRowCount();// 0x5bfd078ea041
	int GetDataNum();// 0x5bfc078ea041
	FString[] GetColKeys();// 0x5bfb078ea041
	int GetColCount();// 0x5bfa078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_PickupPriorityWeaponPart.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int PriorityValue;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_CharacterVoiceover.SolarTableReaderBase.Object
	SolarTablesData_CharacterVoiceover TryGetRowData(int Key, out bool HasKey);// 0x5979078ea041
	bool HasRowKey(int Key);// 0x5978078ea041
	bool HasColKey(FString Key);// 0x5977078ea041
	FString GetTableName();// 0x5976078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5975078ea041
	SolarTablesData_CharacterVoiceover GetRowData(int Key);// 0x5974078ea041
	int GetRowCount();// 0x5973078ea041
	int GetDataNum();// 0x5972078ea041
	FString[] GetColKeys();// 0x5971078ea041
	int GetColCount();// 0x5970078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_CharacterVoiceover.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int QuickVoiceID;//[Offset: 0x10, Size: 0x4]
	int CharacterId;//[Offset: 0x14, Size: 0x4]
	int SkinId;//[Offset: 0x18, Size: 0x4]
	FString AudioEventName;//[Offset: 0x20, Size: 0x10]
	int LocalizationID;//[Offset: 0x30, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_QuickChat.SolarTableReaderBase.Object
	SolarTablesData_QuickChat TryGetRowData(int Key, out bool HasKey);// 0x5c17078ea041
	bool HasRowKey(int Key);// 0x5c16078ea041
	bool HasColKey(FString Key);// 0x5c15078ea041
	FString GetTableName();// 0x5c14078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c13078ea041
	SolarTablesData_QuickChat GetRowData(int Key);// 0x5c12078ea041
	int GetRowCount();// 0x5c11078ea041
	int GetDataNum();// 0x5c10078ea041
	FString[] GetColKeys();// 0x5c0f078ea041
	int GetColCount();// 0x5c0e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_QuickChat.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int LocalizationID;//[Offset: 0x10, Size: 0x4]
	FString zh_CN;//[Offset: 0x18, Size: 0x10]
	FString en;//[Offset: 0x28, Size: 0x10]
	FString pt;//[Offset: 0x38, Size: 0x10]
	FString ind;//[Offset: 0x48, Size: 0x10]
	FString fr;//[Offset: 0x58, Size: 0x10]
	FString de;//[Offset: 0x68, Size: 0x10]
	FString ru;//[Offset: 0x78, Size: 0x10]
	FString ar;//[Offset: 0x88, Size: 0x10]
	FString es;//[Offset: 0x98, Size: 0x10]
	FString hi;//[Offset: 0xa8, Size: 0x10]
	FString it;//[Offset: 0xb8, Size: 0x10]
	FString ja;//[Offset: 0xc8, Size: 0x10]
	FString ko;//[Offset: 0xd8, Size: 0x10]
	FString ms;//[Offset: 0xe8, Size: 0x10]
	FString pl;//[Offset: 0xf8, Size: 0x10]
	FString th;//[Offset: 0x108, Size: 0x10]
	FString tl;//[Offset: 0x118, Size: 0x10]
	FString tr;//[Offset: 0x128, Size: 0x10]
	FString vi;//[Offset: 0x138, Size: 0x10]
	FString zh_TW;//[Offset: 0x148, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_QuickVoice.SolarTableReaderBase.Object
	SolarTablesData_QuickVoice TryGetRowData(int Key, out bool HasKey);// 0x5c21078ea041
	bool HasRowKey(int Key);// 0x5c20078ea041
	bool HasColKey(FString Key);// 0x5c1f078ea041
	FString GetTableName();// 0x5c1e078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c1d078ea041
	SolarTablesData_QuickVoice GetRowData(int Key);// 0x5c1c078ea041
	int GetRowCount();// 0x5c1b078ea041
	int GetDataNum();// 0x5c1a078ea041
	FString[] GetColKeys();// 0x5c19078ea041
	int GetColCount();// 0x5c18078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_QuickVoice.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString Icon;//[Offset: 0x10, Size: 0x10]
	int LocalizationID;//[Offset: 0x20, Size: 0x4]
	FString AudioEventName;//[Offset: 0x28, Size: 0x10]
	FString AudioEventNameFemale;//[Offset: 0x38, Size: 0x10]
	int IsMarkIcon;//[Offset: 0x48, Size: 0x4]
	int PassiveTriggeredCD;//[Offset: 0x4c, Size: 0x4]
	int PassiveTriggeredProb;//[Offset: 0x50, Size: 0x4]
	FString ReplyMessageID;//[Offset: 0x58, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_VODownload.SolarTableReaderBase.Object
	SolarTablesData_VODownload TryGetRowData(int Key, out bool HasKey);// 0x5ccb078ea041
	bool HasRowKey(int Key);// 0x5cca078ea041
	bool HasColKey(FString Key);// 0x5cc9078ea041
	FString GetTableName();// 0x5cc8078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5cc7078ea041
	SolarTablesData_VODownload GetRowData(int Key);// 0x5cc6078ea041
	int GetRowCount();// 0x5cc5078ea041
	int GetDataNum();// 0x5cc4078ea041
	FString[] GetColKeys();// 0x5cc3078ea041
	int GetColCount();// 0x5cc2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_VODownload.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString ChunkDir;//[Offset: 0x10, Size: 0x10]
	int ChunkID;//[Offset: 0x20, Size: 0x4]
	FString ButtonText;//[Offset: 0x28, Size: 0x10]
	int LanguageIndex;//[Offset: 0x38, Size: 0x4]
	int IsDefaultChunk;//[Offset: 0x3c, Size: 0x4]
	FString WwiseLanguageCode;//[Offset: 0x40, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_RankLevel.SolarTableReaderBase.Object
	SolarTablesData_RankLevel TryGetRowData(int Key, out bool HasKey);// 0x5c2b078ea041
	bool HasRowKey(int Key);// 0x5c2a078ea041
	bool HasColKey(FString Key);// 0x5c29078ea041
	FString GetTableName();// 0x5c28078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c27078ea041
	SolarTablesData_RankLevel GetRowData(int Key);// 0x5c26078ea041
	int GetRowCount();// 0x5c25078ea041
	int GetDataNum();// 0x5c24078ea041
	FString[] GetColKeys();// 0x5c23078ea041
	int GetColCount();// 0x5c22078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_RankLevel.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int RankID;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText RankName;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x18, Size: 0x4]
	int LevelID;//[Offset: 0x1c, Size: 0x4]
	int RankStart;//[Offset: 0x20, Size: 0x4]
	int RankEnd;//[Offset: 0x24, Size: 0x4]
	int RankProtect;//[Offset: 0x28, Size: 0x4]
	int FrustrationValue;//[Offset: 0x2c, Size: 0x4]
	int RankReduce;//[Offset: 0x30, Size: 0x4]
	FString Icon;//[Offset: 0x38, Size: 0x10]
	FString Icon_s;//[Offset: 0x48, Size: 0x10]
	FString IconWord;//[Offset: 0x58, Size: 0x10]
	FString IconWord_s;//[Offset: 0x68, Size: 0x10]
	int RandomLowerLimit;//[Offset: 0x78, Size: 0x4]
	int RandomUpLimit;//[Offset: 0x7c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_AutoDirector.SolarTableReaderBase.Object
	SolarTablesData_AutoDirector TryGetRowData(int Key, out bool HasKey);// 0x58e3078ea041
	bool HasRowKey(int Key);// 0x58e2078ea041
	bool HasColKey(FString Key);// 0x58e1078ea041
	FString GetTableName();// 0x58e0078ea041
	int GetRowKeys(out int[] OutKeys);// 0x58df078ea041
	SolarTablesData_AutoDirector GetRowData(int Key);// 0x58de078ea041
	int GetRowCount();// 0x58dd078ea041
	int GetDataNum();// 0x58dc078ea041
	FString[] GetColKeys();// 0x58db078ea041
	int GetColCount();// 0x58da078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_AutoDirector.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int SpectateAreaRadius;//[Offset: 0x10, Size: 0x4]
	int CollectScoreWindow;//[Offset: 0x14, Size: 0x4]
	float MinFocusTime;//[Offset: 0x18, Size: 0x4]
	float MaxFocusTime;//[Offset: 0x1c, Size: 0x4]
	float NewCutThreshold;//[Offset: 0x20, Size: 0x4]
	float PreFreeCameraTime;//[Offset: 0x24, Size: 0x4]
	int AutoDirectorMinEnableTime;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_AutoDirectorActivityScore.SolarTableReaderBase.Object
	SolarTablesData_AutoDirectorActivityScore TryGetRowData(int Key, out bool HasKey);// 0x58ed078ea041
	bool HasRowKey(int Key);// 0x58ec078ea041
	bool HasColKey(FString Key);// 0x58eb078ea041
	FString GetTableName();// 0x58ea078ea041
	int GetRowKeys(out int[] OutKeys);// 0x58e9078ea041
	SolarTablesData_AutoDirectorActivityScore GetRowData(int Key);// 0x58e8078ea041
	int GetRowCount();// 0x58e7078ea041
	int GetDataNum();// 0x58e6078ea041
	FString[] GetColKeys();// 0x58e5078ea041
	int GetColCount();// 0x58e4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_AutoDirectorActivityScore.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float Score;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_CircularCameras.SolarTableReaderBase.Object
	SolarTablesData_CircularCameras TryGetRowData(int Key, out bool HasKey);// 0x59a1078ea041
	bool HasRowKey(int Key);// 0x59a0078ea041
	bool HasColKey(FString Key);// 0x599f078ea041
	FString GetTableName();// 0x599e078ea041
	int GetRowKeys(out int[] OutKeys);// 0x599d078ea041
	SolarTablesData_CircularCameras GetRowData(int Key);// 0x599c078ea041
	int GetRowCount();// 0x599b078ea041
	int GetDataNum();// 0x599a078ea041
	FString[] GetColKeys();// 0x5999078ea041
	int GetColCount();// 0x5998078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_CircularCameras.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MiniDistance;//[Offset: 0x10, Size: 0x4]
	float BorderRatio;//[Offset: 0x14, Size: 0x4]
	int FOV;//[Offset: 0x18, Size: 0x4]
	int Pitch;//[Offset: 0x1c, Size: 0x4]
	int InitAngleWithMainDir;//[Offset: 0x20, Size: 0x4]
	float BlendAlpha;//[Offset: 0x24, Size: 0x4]
	float AngularSpeed;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_HotSpot.SolarTableReaderBase.Object
	SolarTablesData_HotSpot TryGetRowData(int Key, out bool HasKey);// 0x5a91078ea041
	bool HasRowKey(int Key);// 0x5a90078ea041
	bool HasColKey(FString Key);// 0x5a8f078ea041
	FString GetTableName();// 0x5a8e078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5a8d078ea041
	SolarTablesData_HotSpot GetRowData(int Key);// 0x5a8c078ea041
	int GetRowCount();// 0x5a8b078ea041
	int GetDataNum();// 0x5a8a078ea041
	FString[] GetColKeys();// 0x5a89078ea041
	int GetColCount();// 0x5a88078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_HotSpot.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString UIResource;//[Offset: 0x10, Size: 0x10]
	float JumpTime;//[Offset: 0x20, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_LookAtCameras.SolarTableReaderBase.Object
	SolarTablesData_LookAtCameras TryGetRowData(int Key, out bool HasKey);// 0x5b6d078ea041
	bool HasRowKey(int Key);// 0x5b6c078ea041
	bool HasColKey(FString Key);// 0x5b6b078ea041
	FString GetTableName();// 0x5b6a078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5b69078ea041
	SolarTablesData_LookAtCameras GetRowData(int Key);// 0x5b68078ea041
	int GetRowCount();// 0x5b67078ea041
	int GetDataNum();// 0x5b66078ea041
	FString[] GetColKeys();// 0x5b65078ea041
	int GetColCount();// 0x5b64078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_LookAtCameras.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int MiniDistance;//[Offset: 0x10, Size: 0x4]
	float BorderRatio;//[Offset: 0x14, Size: 0x4]
	int FOV;//[Offset: 0x18, Size: 0x4]
	int Pitch;//[Offset: 0x1c, Size: 0x4]
	int InitAngleWithMainDir;//[Offset: 0x20, Size: 0x4]
	float BlendAlpha;//[Offset: 0x24, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Rescue.SolarTableReaderBase.Object
	SolarTablesData_Rescue TryGetRowData(int Key, out bool HasKey);// 0x5c3f078ea041
	bool HasRowKey(int Key);// 0x5c3e078ea041
	bool HasColKey(FString Key);// 0x5c3d078ea041
	FString GetTableName();// 0x5c3c078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c3b078ea041
	SolarTablesData_Rescue GetRowData(int Key);// 0x5c3a078ea041
	int GetRowCount();// 0x5c39078ea041
	int GetDataNum();// 0x5c38078ea041
	FString[] GetColKeys();// 0x5c37078ea041
	int GetColCount();// 0x5c36078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Rescue.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float RescueMaxDistance;//[Offset: 0x10, Size: 0x4]
	float FallenHp;//[Offset: 0x14, Size: 0x4]
	float RescueRecoveryHp;//[Offset: 0x18, Size: 0x4]
	int RescueTime;//[Offset: 0x1c, Size: 0x4]
	float[] FallenLossHp;//[Offset: 0x20, Size: 0x10]
	float[] FallenMoveLossHp;//[Offset: 0x30, Size: 0x10]
	float FallenMoveSpeed;//[Offset: 0x40, Size: 0x4]
	float RescueMoveSpeed;//[Offset: 0x44, Size: 0x4]
	float InvincibleTime;//[Offset: 0x48, Size: 0x4]
	float MaxRescueAngle;//[Offset: 0x4c, Size: 0x4]
	float RemindRescueCooldownTime;//[Offset: 0x50, Size: 0x4]
	float RemindRescueSoundCD;//[Offset: 0x54, Size: 0x4]
	int RemindRescueSoundIndex;//[Offset: 0x58, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Skin.SolarTableReaderBase.Object
	SolarTablesData_Skin TryGetRowData(int Key, out bool HasKey);// 0x5c5d078ea041
	bool HasRowKey(int Key);// 0x5c5c078ea041
	bool HasColKey(FString Key);// 0x5c5b078ea041
	FString GetTableName();// 0x5c5a078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c59078ea041
	SolarTablesData_Skin GetRowData(int Key);// 0x5c58078ea041
	int GetRowCount();// 0x5c57078ea041
	int GetDataNum();// 0x5c56078ea041
	FString[] GetColKeys();// 0x5c55078ea041
	int GetColCount();// 0x5c54078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Skin.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int CharaId;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FString BeginTime;//[Offset: 0x20, Size: 0x10]
	int ShopPropertyid;//[Offset: 0x30, Size: 0x4]
	int ItemID;//[Offset: 0x34, Size: 0x4]
	FString MVPDataAssetPath;//[Offset: 0x38, Size: 0x10]
	FString MVPSequencePath;//[Offset: 0x48, Size: 0x10]
	int SceneId;//[Offset: 0x58, Size: 0x4]
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	FString CharacterSkinResource;//[Offset: 0x60, Size: 0x10]
	FString CharacterLobbySkinResource;//[Offset: 0x70, Size: 0x10]
	FString ChunkDir;//[Offset: 0x80, Size: 0x10]
	int ChunkID;//[Offset: 0x90, Size: 0x4]
	FString CharacterLowSkinResource;//[Offset: 0x98, Size: 0x10]
	int[] CharacterPrologue;//[Offset: 0xa8, Size: 0x10]
	FString CharacterProtrait;//[Offset: 0xb8, Size: 0x10]
	int SkinSort;//[Offset: 0xc8, Size: 0x4]
	int MVPSettlementStartFrame;//[Offset: 0xcc, Size: 0x4]
	int MVPSettlementEndFrame;//[Offset: 0xd0, Size: 0x4]
	int MVPAnchorPoint;//[Offset: 0xd4, Size: 0x4]
	FString IdleShowSequencePath;//[Offset: 0xd8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Achievement.SolarTableReaderBase.Object
	SolarTablesData_Achievement TryGetRowData(int Key, out bool HasKey);// 0x58bb078ea041
	bool HasRowKey(int Key);// 0x58ba078ea041
	bool HasColKey(FString Key);// 0x58b9078ea041
	FString GetTableName();// 0x58b8078ea041
	int GetRowKeys(out int[] OutKeys);// 0x58b7078ea041
	SolarTablesData_Achievement GetRowData(int Key);// 0x58b6078ea041
	int GetRowCount();// 0x58b5078ea041
	int GetDataNum();// 0x58b4078ea041
	FString[] GetColKeys();// 0x58b3078ea041
	int GetColCount();// 0x58b2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Achievement.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Order;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText AchieveName;//[Offset: 0x14, Size: 0x4]
	int AchieveTab;//[Offset: 0x18, Size: 0x4]
	int AchieveType;//[Offset: 0x1c, Size: 0x4]
	int AchieveScore;//[Offset: 0x20, Size: 0x4]
	int[] AwardList;//[Offset: 0x28, Size: 0x10]
	FString AchieveIcon;//[Offset: 0x38, Size: 0x10]
	FString AchieveIconS;//[Offset: 0x48, Size: 0x10]
	int AchieveTask;//[Offset: 0x58, Size: 0x4]
	int[] AchieveTV;//[Offset: 0x60, Size: 0x10]
	int AchieveTT;//[Offset: 0x70, Size: 0x4]
	int ReportType;//[Offset: 0x74, Size: 0x4]
	SolarTablesLocalText AchieveTC;//[Offset: 0x78, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_TaskProgress.SolarTableReaderBase.Object
	SolarTablesData_TaskProgress TryGetRowData(int Key, out bool HasKey);// 0x5c67078ea041
	bool HasRowKey(int Key);// 0x5c66078ea041
	bool HasColKey(FString Key);// 0x5c65078ea041
	FString GetTableName();// 0x5c64078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c63078ea041
	SolarTablesData_TaskProgress GetRowData(int Key);// 0x5c62078ea041
	int GetRowCount();// 0x5c61078ea041
	int GetDataNum();// 0x5c60078ea041
	FString[] GetColKeys();// 0x5c5f078ea041
	int GetColCount();// 0x5c5e078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_TaskProgress.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int isRefresh;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_TaskSystem.SolarTableReaderBase.Object
	SolarTablesData_TaskSystem TryGetRowData(int Key, out bool HasKey);// 0x5c71078ea041
	bool HasRowKey(int Key);// 0x5c70078ea041
	bool HasColKey(FString Key);// 0x5c6f078ea041
	FString GetTableName();// 0x5c6e078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c6d078ea041
	SolarTablesData_TaskSystem GetRowData(int Key);// 0x5c6c078ea041
	int GetRowCount();// 0x5c6b078ea041
	int GetDataNum();// 0x5c6a078ea041
	FString[] GetColKeys();// 0x5c69078ea041
	int GetColCount();// 0x5c68078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_TaskSystem.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int taskDesc;//[Offset: 0x10, Size: 0x4]
	int Task;//[Offset: 0x14, Size: 0x4]
	int TaskType;//[Offset: 0x18, Size: 0x4]
	FString cond1_sheet;//[Offset: 0x20, Size: 0x10]
	int cond1;//[Offset: 0x30, Size: 0x4]
	FString cond2_sheet;//[Offset: 0x38, Size: 0x10]
	int cond2;//[Offset: 0x48, Size: 0x4]
	FString cond3_sheet;//[Offset: 0x50, Size: 0x10]
	int cond3;//[Offset: 0x60, Size: 0x4]
	int Target;//[Offset: 0x64, Size: 0x4]
	int[] Item;//[Offset: 0x68, Size: 0x10]
	int MinLevel;//[Offset: 0x78, Size: 0x4]
	int[] link;//[Offset: 0x80, Size: 0x10]
	int Weight;//[Offset: 0x90, Size: 0x4]
	int sort;//[Offset: 0x94, Size: 0x4]
	bool Progress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	bool isCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	int circleTimes;//[Offset: 0x9c, Size: 0x4]
	int resetType;//[Offset: 0xa0, Size: 0x4]
	int[] taskTips;//[Offset: 0xa8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_PlayerOperationListLayout.SolarTableReaderBase.Object
	SolarTablesData_PlayerOperationListLayout TryGetRowData(int Key, out bool HasKey);// 0x5c0d078ea041
	bool HasRowKey(int Key);// 0x5c0c078ea041
	bool HasColKey(FString Key);// 0x5c0b078ea041
	FString GetTableName();// 0x5c0a078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c09078ea041
	SolarTablesData_PlayerOperationListLayout GetRowData(int Key);// 0x5c08078ea041
	int GetRowCount();// 0x5c07078ea041
	int GetDataNum();// 0x5c06078ea041
	FString[] GetColKeys();// 0x5c05078ea041
	int GetColCount();// 0x5c04078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_PlayerOperationListLayout.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString UIName;//[Offset: 0x10, Size: 0x10]
	int Normal;//[Offset: 0x20, Size: 0x4]
	int Driver;//[Offset: 0x24, Size: 0x4]
	int Passgner;//[Offset: 0x28, Size: 0x4]
	int EquipVehicleWeapon;//[Offset: 0x2c, Size: 0x4]
	int Cruising;//[Offset: 0x30, Size: 0x4]
	int Parachuting;//[Offset: 0x34, Size: 0x4]
	int Swimming;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Variables.SolarTableReaderBase.Object
	SolarTablesData_Variables TryGetRowData(FString Key, out bool HasKey);// 0x5c85078ea041
	bool HasRowKey(FString Key);// 0x5c84078ea041
	bool HasColKey(FString Key);// 0x5c83078ea041
	FString GetTableName();// 0x5c82078ea041
	int GetRowKeys(out FString[] OutKeys);// 0x5c81078ea041
	SolarTablesData_Variables GetRowData(FString Key);// 0x5c80078ea041
	int GetRowCount();// 0x5c7f078ea041
	int GetDataNum();// 0x5c7e078ea041
	FString[] GetColKeys();// 0x5c7d078ea041
	int GetColCount();// 0x5c7c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Variables.SolarTablesDataBase
	FString ID;//[Offset: 0x10, Size: 0x10]
	FString Value;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Vehicle.SolarTableReaderBase.Object
	SolarTablesData_Vehicle TryGetRowData(int Key, out bool HasKey);// 0x5c8f078ea041
	bool HasRowKey(int Key);// 0x5c8e078ea041
	bool HasColKey(FString Key);// 0x5c8d078ea041
	FString GetTableName();// 0x5c8c078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c8b078ea041
	SolarTablesData_Vehicle GetRowData(int Key);// 0x5c8a078ea041
	int GetRowCount();// 0x5c89078ea041
	int GetDataNum();// 0x5c88078ea041
	FString[] GetColKeys();// 0x5c87078ea041
	int GetColCount();// 0x5c86078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Vehicle.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	FString VehicleBP;//[Offset: 0x18, Size: 0x10]
	int groupid;//[Offset: 0x28, Size: 0x4]
	int VehicleTypeID;//[Offset: 0x2c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_VehicleSkin.SolarTableReaderBase.Object
	SolarTablesData_VehicleSkin TryGetRowData(int Key, out bool HasKey);// 0x5c99078ea041
	bool HasRowKey(int Key);// 0x5c98078ea041
	bool HasColKey(FString Key);// 0x5c97078ea041
	FString GetTableName();// 0x5c96078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c95078ea041
	SolarTablesData_VehicleSkin GetRowData(int Key);// 0x5c94078ea041
	int GetRowCount();// 0x5c93078ea041
	int GetDataNum();// 0x5c92078ea041
	FString[] GetColKeys();// 0x5c91078ea041
	int GetColCount();// 0x5c90078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_VehicleSkin.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int VehicleTypeID;//[Offset: 0x10, Size: 0x4]
	int ItemID;//[Offset: 0x14, Size: 0x4]
	SolarTablesLocalText SkinName;//[Offset: 0x18, Size: 0x4]
	bool IfShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	FString BeginTime;//[Offset: 0x20, Size: 0x10]
	int[] JumpLink;//[Offset: 0x30, Size: 0x10]
	FString VehicleSkinBPPath;//[Offset: 0x40, Size: 0x10]
	FString VehiclePreviewBP;//[Offset: 0x50, Size: 0x10]
	FString VehicleIcon;//[Offset: 0x60, Size: 0x10]
	FString VehicleSound;//[Offset: 0x70, Size: 0x10]
	int AIRandomWeight;//[Offset: 0x80, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_VehicleType.SolarTableReaderBase.Object
	SolarTablesData_VehicleType TryGetRowData(int Key, out bool HasKey);// 0x5cc1078ea041
	bool HasRowKey(int Key);// 0x5cc0078ea041
	bool HasColKey(FString Key);// 0x5cbf078ea041
	FString GetTableName();// 0x5cbe078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5cbd078ea041
	SolarTablesData_VehicleType GetRowData(int Key);// 0x5cbc078ea041
	int GetRowCount();// 0x5cbb078ea041
	int GetDataNum();// 0x5cba078ea041
	FString[] GetColKeys();// 0x5cb9078ea041
	int GetColCount();// 0x5cb8078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_VehicleType.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int DefaultId;//[Offset: 0x10, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x14, Size: 0x4]
	FString VehicleIcon;//[Offset: 0x18, Size: 0x10]
	FString AudioEventName;//[Offset: 0x28, Size: 0x10]
	int VehicleClass;//[Offset: 0x38, Size: 0x4]
	float LobbyDurability;//[Offset: 0x3c, Size: 0x4]
	float LobbySpeed;//[Offset: 0x40, Size: 0x4]
	float LobbyFirepower;//[Offset: 0x44, Size: 0x4]
	float LobbyControl;//[Offset: 0x48, Size: 0x4]
	int SeatNum;//[Offset: 0x4c, Size: 0x4]
	int[] Seat1WeaponID;//[Offset: 0x50, Size: 0x10]
	int[] Seat2WeaponID;//[Offset: 0x60, Size: 0x10]
	int[] Seat3WeaponID;//[Offset: 0x70, Size: 0x10]
	int[] Seat4WeaponID;//[Offset: 0x80, Size: 0x10]
	int[] Seat1SkillID;//[Offset: 0x90, Size: 0x10]
	int[] Seat2SkillID;//[Offset: 0xa0, Size: 0x10]
	int[] Seat3SkillID;//[Offset: 0xb0, Size: 0x10]
	int[] Seat4SkillID;//[Offset: 0xc0, Size: 0x10]
	FString VehicleLink;//[Offset: 0xd0, Size: 0x10]
	FString SilhouetteIcon;//[Offset: 0xe0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_VehicleSpawn.SolarTableReaderBase.Object
	SolarTablesData_VehicleSpawn TryGetRowData(int Key, out bool HasKey);// 0x5cad078ea041
	bool HasRowKey(int Key);// 0x5cac078ea041
	bool HasColKey(FString Key);// 0x5cab078ea041
	FString GetTableName();// 0x5caa078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5ca9078ea041
	SolarTablesData_VehicleSpawn GetRowData(int Key);// 0x5ca8078ea041
	int GetRowCount();// 0x5ca7078ea041
	int GetDataNum();// 0x5ca6078ea041
	FString[] GetColKeys();// 0x5ca5078ea041
	int GetColCount();// 0x5ca4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_VehicleSpawn.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] VehicleSet;//[Offset: 0x10, Size: 0x10]
	int[] WeightSet;//[Offset: 0x20, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_VehicleSpawnGroup.SolarTableReaderBase.Object
	SolarTablesData_VehicleSpawnGroup TryGetRowData(int Key, out bool HasKey);// 0x5cb7078ea041
	bool HasRowKey(int Key);// 0x5cb6078ea041
	bool HasColKey(FString Key);// 0x5cb5078ea041
	FString GetTableName();// 0x5cb4078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5cb3078ea041
	SolarTablesData_VehicleSpawnGroup GetRowData(int Key);// 0x5cb2078ea041
	int GetRowCount();// 0x5cb1078ea041
	int GetDataNum();// 0x5cb0078ea041
	FString[] GetColKeys();// 0x5caf078ea041
	int GetColCount();// 0x5cae078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_VehicleSpawnGroup.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int[] VehicleIDs;//[Offset: 0x10, Size: 0x10]
	int[] VehicleCounts;//[Offset: 0x20, Size: 0x10]
	int[] VehicleSum;//[Offset: 0x30, Size: 0x10]
	FString VehicleWeightSet;//[Offset: 0x40, Size: 0x10]
	int[] AlternateId;//[Offset: 0x50, Size: 0x10]
	FString AlternateType;//[Offset: 0x60, Size: 0x10]
	FString AlternateTime;//[Offset: 0x70, Size: 0x10]
	FString AlternateDate;//[Offset: 0x80, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WarmGame.SolarTableReaderBase.Object
	SolarTablesData_WarmGame TryGetRowData(int Key, out bool HasKey);// 0x5cdf078ea041
	bool HasRowKey(int Key);// 0x5cde078ea041
	bool HasColKey(FString Key);// 0x5cdd078ea041
	FString GetTableName();// 0x5cdc078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5cdb078ea041
	SolarTablesData_WarmGame GetRowData(int Key);// 0x5cda078ea041
	int GetRowCount();// 0x5cd9078ea041
	int GetDataNum();// 0x5cd8078ea041
	FString[] GetColKeys();// 0x5cd7078ea041
	int GetColCount();// 0x5cd6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WarmGame.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WarmType;//[Offset: 0x10, Size: 0x4]
	int MatchType;//[Offset: 0x14, Size: 0x4]
	int EloStart;//[Offset: 0x18, Size: 0x4]
	int EloEnd;//[Offset: 0x1c, Size: 0x4]
	int NumStart;//[Offset: 0x20, Size: 0x4]
	int NumEnd;//[Offset: 0x24, Size: 0x4]
	int KillStart;//[Offset: 0x28, Size: 0x4]
	int KillEnd;//[Offset: 0x2c, Size: 0x4]
	FString WarmSubType;//[Offset: 0x30, Size: 0x10]
	int UniqueId;//[Offset: 0x40, Size: 0x4]
	FString Abid;//[Offset: 0x48, Size: 0x10]
	FString WarmGameFillCheckBox;//[Offset: 0x58, Size: 0x10]
	FString WarmGameFillTeammate;//[Offset: 0x68, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WarmGameMode.SolarTableReaderBase.Object
	SolarTablesData_WarmGameMode TryGetRowData(int Key, out bool HasKey);// 0x5ce9078ea041
	bool HasRowKey(int Key);// 0x5ce8078ea041
	bool HasColKey(FString Key);// 0x5ce7078ea041
	FString GetTableName();// 0x5ce6078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5ce5078ea041
	SolarTablesData_WarmGameMode GetRowData(int Key);// 0x5ce4078ea041
	int GetRowCount();// 0x5ce3078ea041
	int GetDataNum();// 0x5ce2078ea041
	FString[] GetColKeys();// 0x5ce1078ea041
	int GetColCount();// 0x5ce0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponDamage.SolarTableReaderBase.Object
	SolarTablesData_WeaponDamage TryGetRowData(int Key, out bool HasKey);// 0x5d11078ea041
	bool HasRowKey(int Key);// 0x5d10078ea041
	bool HasColKey(FString Key);// 0x5d0f078ea041
	FString GetTableName();// 0x5d0e078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5d0d078ea041
	SolarTablesData_WeaponDamage GetRowData(int Key);// 0x5d0c078ea041
	int GetRowCount();// 0x5d0b078ea041
	int GetDataNum();// 0x5d0a078ea041
	FString[] GetColKeys();// 0x5d09078ea041
	int GetColCount();// 0x5d08078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponDamage.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float NpcDamageFactor;//[Offset: 0x10, Size: 0x4]
	float BotDamageFactor;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_Weapon.SolarTableReaderBase.Object
	SolarTablesData_Weapon TryGetRowData(int Key, out bool HasKey);// 0x5cf3078ea041
	bool HasRowKey(int Key);// 0x5cf2078ea041
	bool HasColKey(FString Key);// 0x5cf1078ea041
	FString GetTableName();// 0x5cf0078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5cef078ea041
	SolarTablesData_Weapon GetRowData(int Key);// 0x5cee078ea041
	int GetRowCount();// 0x5ced078ea041
	int GetDataNum();// 0x5cec078ea041
	FString[] GetColKeys();// 0x5ceb078ea041
	int GetColCount();// 0x5cea078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_Weapon.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	SolarTablesLocalText Name;//[Offset: 0x10, Size: 0x4]
	enum WeaponType;//[Offset: 0x14, Size: 0x1]
	int WeaponBrand;//[Offset: 0x18, Size: 0x4]
	bool SupportSecondaryAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int[] AccessoryID;//[Offset: 0x20, Size: 0x10]
	FString WeaponIcon;//[Offset: 0x30, Size: 0x10]
	bool Single;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool Burst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool Automatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool OneKeyScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	float HitHead;//[Offset: 0x44, Size: 0x4]
	int SecModeLimitTypeID;//[Offset: 0x48, Size: 0x4]
	int BurstMaxCount;//[Offset: 0x4c, Size: 0x4]
	FString WeaponDamage;//[Offset: 0x50, Size: 0x10]
	float MaxSpread;//[Offset: 0x60, Size: 0x4]
	float MinSpread;//[Offset: 0x64, Size: 0x4]
	float HipFireBaseSpread;//[Offset: 0x68, Size: 0x4]
	float VhADSBaseSpread;//[Offset: 0x6c, Size: 0x4]
	float ADSBaseSpread;//[Offset: 0x70, Size: 0x4]
	float SpreadStatuSpeed;//[Offset: 0x74, Size: 0x4]
	float SpreadStatuIncreaseID;//[Offset: 0x78, Size: 0x4]
	float SpreadStatuReduceID;//[Offset: 0x7c, Size: 0x4]
	int SpreadCOPID;//[Offset: 0x80, Size: 0x4]
	int PrimaryAmmo;//[Offset: 0x84, Size: 0x4]
	int PrimaryAmmoCap;//[Offset: 0x88, Size: 0x4]
	int SecondaryAmmo;//[Offset: 0x8c, Size: 0x4]
	int SecondaryAmmoCap;//[Offset: 0x90, Size: 0x4]
	bool CanOverload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	float OverloadMaxValue;//[Offset: 0x98, Size: 0x4]
	float NormalOverloadCoolingRate;//[Offset: 0x9c, Size: 0x4]
	float OverloadCoolingPeriod;//[Offset: 0xa0, Size: 0x4]
	float OverloadWarningRate;//[Offset: 0xa4, Size: 0x4]
	bool CanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	float AutoFireDelayMs;//[Offset: 0xac, Size: 0x4]
	float AutoFireEndDelayMs;//[Offset: 0xb0, Size: 0x4]
	bool CanAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	float[] HipSoftZone;//[Offset: 0xb8, Size: 0x10]
	float HipAimAssistStepRatio;//[Offset: 0xc8, Size: 0x4]
	float HipMinAssistStepRatio;//[Offset: 0xcc, Size: 0x4]
	float HipAimAssistStepSpeed;//[Offset: 0xd0, Size: 0x4]
	float[] AdsSoftZone;//[Offset: 0xd8, Size: 0x10]
	float AdsAimAssistStepRatio;//[Offset: 0xe8, Size: 0x4]
	float AdsMinAssistStepRatio;//[Offset: 0xec, Size: 0x4]
	float AdsAimAssistStepSpeed;//[Offset: 0xf0, Size: 0x4]
	bool CanOpenScopeAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 0x1]
	float OpenScopeAimAssistStepRatio;//[Offset: 0xf8, Size: 0x4]
	float OpenScopeMinAssistStepRatio;//[Offset: 0xfc, Size: 0x4]
	float OpenScopeAssistStepSpeed;//[Offset: 0x100, Size: 0x4]
	float OnVehicleAssistStepRatio;//[Offset: 0x104, Size: 0x4]
	float Weight;//[Offset: 0x108, Size: 0x4]
	float HipFireSpeed;//[Offset: 0x10c, Size: 0x4]
	float ADSFireSpeed;//[Offset: 0x110, Size: 0x4]
	int[] DefaultParts;//[Offset: 0x118, Size: 0x10]
	float ScopeOpenTime;//[Offset: 0x128, Size: 0x4]
	float FovFactor;//[Offset: 0x12c, Size: 0x4]
	float WeaponSwitchTime;//[Offset: 0x130, Size: 0x4]
	float WeaponUnequipTime;//[Offset: 0x134, Size: 0x4]
	int[] PartSlots;//[Offset: 0x138, Size: 0x10]
	<FString,FString> EquipAttributeSub;//[Offset: 0x148, Size: 0x50]
	<FString,FString> HoldAttributeSub;//[Offset: 0x198, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponAmmo.SolarTableReaderBase.Object
	SolarTablesData_WeaponAmmo TryGetRowData(int Key, out bool HasKey);// 0x5cfd078ea041
	bool HasRowKey(int Key);// 0x5cfc078ea041
	bool HasColKey(FString Key);// 0x5cfb078ea041
	FString GetTableName();// 0x5cfa078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5cf9078ea041
	SolarTablesData_WeaponAmmo GetRowData(int Key);// 0x5cf8078ea041
	int GetRowCount();// 0x5cf7078ea041
	int GetDataNum();// 0x5cf6078ea041
	FString[] GetColKeys();// 0x5cf5078ea041
	int GetColCount();// 0x5cf4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponAmmo.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int AmmoType;//[Offset: 0x10, Size: 0x4]
	int PropID;//[Offset: 0x14, Size: 0x4]
	int SoundID;//[Offset: 0x18, Size: 0x4]
	bool IfTimedExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	int BounceTimes;//[Offset: 0x20, Size: 0x4]
	float LifeTime;//[Offset: 0x24, Size: 0x4]
	float BaseReloadTime;//[Offset: 0x28, Size: 0x4]
	float ReloadBoltTime;//[Offset: 0x2c, Size: 0x4]
	enum FireMethodType;//[Offset: 0x30, Size: 0x1]
	enum TrajectoryType;//[Offset: 0x31, Size: 0x1]
	float CustomValue;//[Offset: 0x34, Size: 0x4]
	enum TriggerType;//[Offset: 0x38, Size: 0x1]
	float MaxRange;//[Offset: 0x3c, Size: 0x4]
	float EffRange;//[Offset: 0x40, Size: 0x4]
	float ProjectileMaxGravity;//[Offset: 0x44, Size: 0x4]
	float DamageMaxRange;//[Offset: 0x48, Size: 0x4]
	float DamageEffRange;//[Offset: 0x4c, Size: 0x4]
	float Radius;//[Offset: 0x50, Size: 0x4]
	float PostFireOverload;//[Offset: 0x54, Size: 0x4]
	float InitSpeed;//[Offset: 0x58, Size: 0x4]
	float FireStreakBreakTime;//[Offset: 0x5c, Size: 0x4]
	enum FireCostType;//[Offset: 0x60, Size: 0x1]
	int FireCostPerAttack;//[Offset: 0x64, Size: 0x4]
	int FireSpeedChangeTime;//[Offset: 0x68, Size: 0x4]
	float FireSpeedChangeCOP;//[Offset: 0x6c, Size: 0x4]
	float FireIntervalRevertPreTime;//[Offset: 0x70, Size: 0x4]
	float FireIntervalReavertSpeed;//[Offset: 0x74, Size: 0x4]
	float FastestFireInterval;//[Offset: 0x78, Size: 0x4]
	float SlowestFireInterval;//[Offset: 0x7c, Size: 0x4]
	float BaseFireInterval;//[Offset: 0x80, Size: 0x4]
	float BoltActionTime;//[Offset: 0x84, Size: 0x4]
	float BurstShootInterval;//[Offset: 0x88, Size: 0x4]
	float BurstFireInterval;//[Offset: 0x8c, Size: 0x4]
	float StartBoltDuration;//[Offset: 0x90, Size: 0x4]
	bool UsePrimaryModeAmmoCap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	bool UseBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 0x1]
	float[] SkillCDDiscountArray;//[Offset: 0x98, Size: 0x10]
	int SkillType;//[Offset: 0xa8, Size: 0x4]
	float VhADSSpreadCOP;//[Offset: 0xac, Size: 0x4]
	float ADSSpreadCOP;//[Offset: 0xb0, Size: 0x4]
	float SpreadFirePreTime;//[Offset: 0xb4, Size: 0x4]
	float SpreadPostFireSpeed;//[Offset: 0xb8, Size: 0x4]
	float SpreadRestorePreTime;//[Offset: 0xbc, Size: 0x4]
	float SpreadRestoreSpeed;//[Offset: 0xc0, Size: 0x4]
	float VRecoilCostTime;//[Offset: 0xc4, Size: 0x4]
	int VRecoilAPoint;//[Offset: 0xc8, Size: 0x4]
	float VRecoilAPointMax;//[Offset: 0xcc, Size: 0x4]
	float VRecoilAPointMin;//[Offset: 0xd0, Size: 0x4]
	int VRecoilBPoint;//[Offset: 0xd4, Size: 0x4]
	float VRecoilBPointMax;//[Offset: 0xd8, Size: 0x4]
	float VRecoilBPointMin;//[Offset: 0xdc, Size: 0x4]
	float HRecoilCostTime;//[Offset: 0xe0, Size: 0x4]
	int HRecoilAPoint;//[Offset: 0xe4, Size: 0x4]
	float HRecoilAPointMax;//[Offset: 0xe8, Size: 0x4]
	float HRecoilAPointMin;//[Offset: 0xec, Size: 0x4]
	int HRecoilBPoint;//[Offset: 0xf0, Size: 0x4]
	float HRecoilBPointMax;//[Offset: 0xf4, Size: 0x4]
	float HRecoilBPointMin;//[Offset: 0xf8, Size: 0x4]
	int RecoilCOP;//[Offset: 0xfc, Size: 0x4]
	float ADSRecoilCOP;//[Offset: 0x100, Size: 0x4]
	float RollCostTime;//[Offset: 0x104, Size: 0x4]
	int RollAPoint;//[Offset: 0x108, Size: 0x4]
	int RollBPoint;//[Offset: 0x10c, Size: 0x4]
	float RollHightestPointMax;//[Offset: 0x110, Size: 0x4]
	float RollHightestPointMin;//[Offset: 0x114, Size: 0x4]
	float RollLowesttPointMax;//[Offset: 0x118, Size: 0x4]
	float RollLowesttPointMin;//[Offset: 0x11c, Size: 0x4]
	float ADSRollCOP;//[Offset: 0x120, Size: 0x4]
	float ScopeRollCostTime;//[Offset: 0x124, Size: 0x4]
	int ScopeRollAPoint;//[Offset: 0x128, Size: 0x4]
	int ScopeRollBPoint;//[Offset: 0x12c, Size: 0x4]
	float ScopeRollHightestPointMax;//[Offset: 0x130, Size: 0x4]
	float ScopeRollHightestPointMin;//[Offset: 0x134, Size: 0x4]
	float ScopeRollLowesttPointMax;//[Offset: 0x138, Size: 0x4]
	float ScopeRollLowesttPointMin;//[Offset: 0x13c, Size: 0x4]
	float ScopeVMaxDistanceOffSet;//[Offset: 0x140, Size: 0x4]
	float ScopeHMaxDistanceOffSet;//[Offset: 0x144, Size: 0x4]
	float ScopeVVibrationDuration;//[Offset: 0x148, Size: 0x4]
	float ScopeHVibrationDuration;//[Offset: 0x14c, Size: 0x4]
	float CrossHairVibrationScale;//[Offset: 0x150, Size: 0x4]
	float ScopeVContinuousFallingDuration;//[Offset: 0x154, Size: 0x4]
	int ScopeVContinuousFallingPointIndex;//[Offset: 0x158, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponBattleUpgrade.SolarTableReaderBase.Object
	SolarTablesData_WeaponBattleUpgrade TryGetRowData(int Key, out bool HasKey);// 0x5d07078ea041
	bool HasRowKey(int Key);// 0x5d06078ea041
	bool HasColKey(FString Key);// 0x5d05078ea041
	FString GetTableName();// 0x5d04078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5d03078ea041
	SolarTablesData_WeaponBattleUpgrade GetRowData(int Key);// 0x5d02078ea041
	int GetRowCount();// 0x5d01078ea041
	int GetDataNum();// 0x5d00078ea041
	FString[] GetColKeys();// 0x5cff078ea041
	int GetColCount();// 0x5cfe078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponBattleUpgrade.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Exp;//[Offset: 0x10, Size: 0x4]
	int Retrofit;//[Offset: 0x14, Size: 0x4]
	int UpgradeCost;//[Offset: 0x18, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponDefault.SolarTableReaderBase.Object
	SolarTablesData_WeaponDefault TryGetRowData(int Key, out bool HasKey);// 0x5d1b078ea041
	bool HasRowKey(int Key);// 0x5d1a078ea041
	bool HasColKey(FString Key);// 0x5d19078ea041
	FString GetTableName();// 0x5d18078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5d17078ea041
	SolarTablesData_WeaponDefault GetRowData(int Key);// 0x5d16078ea041
	int GetRowCount();// 0x5d15078ea041
	int GetDataNum();// 0x5d14078ea041
	FString[] GetColKeys();// 0x5d13078ea041
	int GetColCount();// 0x5d12078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponDefault.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	enum AccessoryType1;//[Offset: 0x10, Size: 0x1]
	int[] SlotSubtype1;//[Offset: 0x18, Size: 0x10]
	int AccessoryID1;//[Offset: 0x28, Size: 0x4]
	enum AccessoryType2;//[Offset: 0x2c, Size: 0x1]
	int[] SlotSubtype2;//[Offset: 0x30, Size: 0x10]
	int AccessoryID2;//[Offset: 0x40, Size: 0x4]
	enum AccessoryType3;//[Offset: 0x44, Size: 0x1]
	int[] SlotSubtype3;//[Offset: 0x48, Size: 0x10]
	int AccessoryID3;//[Offset: 0x58, Size: 0x4]
	enum AccessoryType4;//[Offset: 0x5c, Size: 0x1]
	int[] SlotSubtype4;//[Offset: 0x60, Size: 0x10]
	int AccessoryID4;//[Offset: 0x70, Size: 0x4]
	enum AccessoryType5;//[Offset: 0x74, Size: 0x1]
	int[] SlotSubtype5;//[Offset: 0x78, Size: 0x10]
	int AccessoryID5;//[Offset: 0x88, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponKillTip.SolarTableReaderBase.Object
	SolarTablesData_WeaponKillTip TryGetRowData(int Key, out bool HasKey);// 0x5d25078ea041
	bool HasRowKey(int Key);// 0x5d24078ea041
	bool HasColKey(FString Key);// 0x5d23078ea041
	FString GetTableName();// 0x5d22078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5d21078ea041
	SolarTablesData_WeaponKillTip GetRowData(int Key);// 0x5d20078ea041
	int GetRowCount();// 0x5d1f078ea041
	int GetDataNum();// 0x5d1e078ea041
	FString[] GetColKeys();// 0x5d1d078ea041
	int GetColCount();// 0x5d1c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponKillTip.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int KillTipType;//[Offset: 0x10, Size: 0x4]
	int KillTipValue;//[Offset: 0x14, Size: 0x4]
	FString KillTipIcon;//[Offset: 0x18, Size: 0x10]
	SolarTablesLocalText KillTipname;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponParts.SolarTableReaderBase.Object
	SolarTablesData_WeaponParts TryGetRowData(int Key, out bool HasKey);// 0x5d2f078ea041
	bool HasRowKey(int Key);// 0x5d2e078ea041
	bool HasColKey(FString Key);// 0x5d2d078ea041
	FString GetTableName();// 0x5d2c078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5d2b078ea041
	SolarTablesData_WeaponParts GetRowData(int Key);// 0x5d2a078ea041
	int GetRowCount();// 0x5d29078ea041
	int GetDataNum();// 0x5d28078ea041
	FString[] GetColKeys();// 0x5d27078ea041
	int GetColCount();// 0x5d26078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponParts.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WeaponLevel;//[Offset: 0x10, Size: 0x4]
	enum PartsType;//[Offset: 0x14, Size: 0x1]
	<FString,FString> AttributeSub;//[Offset: 0x18, Size: 0x50]
	int PartsQuality;//[Offset: 0x68, Size: 0x4]
	FString PartsBPResource;//[Offset: 0x70, Size: 0x10]
	FString PartsIcon;//[Offset: 0x80, Size: 0x10]
	int EffectCondition;//[Offset: 0x90, Size: 0x4]
	int[] PartsEffect;//[Offset: 0x98, Size: 0x10]
	float[] PartsValue;//[Offset: 0xa8, Size: 0x10]
	int[] PartsWeaponID;//[Offset: 0xb8, Size: 0x10]
	int PartsName;//[Offset: 0xc8, Size: 0x4]
	FString[] PartsDesc;//[Offset: 0xd0, Size: 0x10]
	int WeaponPartDamage;//[Offset: 0xe0, Size: 0x4]
	int WeaponPartRateOfFire;//[Offset: 0xe4, Size: 0x4]
	int WeaponPartRecoil;//[Offset: 0xe8, Size: 0x4]
	int WeaponPartSpread;//[Offset: 0xec, Size: 0x4]
	int WeaponPartRange;//[Offset: 0xf0, Size: 0x4]
	int WeaponPartMobility;//[Offset: 0xf4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponPartsOp.SolarTableReaderBase.Object
	SolarTablesData_WeaponPartsOp TryGetRowData(int Key, out bool HasKey);// 0x5d39078ea041
	bool HasRowKey(int Key);// 0x5d38078ea041
	bool HasColKey(FString Key);// 0x5d37078ea041
	FString GetTableName();// 0x5d36078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5d35078ea041
	SolarTablesData_WeaponPartsOp GetRowData(int Key);// 0x5d34078ea041
	int GetRowCount();// 0x5d33078ea041
	int GetDataNum();// 0x5d32078ea041
	FString[] GetColKeys();// 0x5d31078ea041
	int GetColCount();// 0x5d30078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponPartsOp.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int EffectOperator;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponQuality.SolarTableReaderBase.Object
	SolarTablesData_WeaponQuality TryGetRowData(int Key, out bool HasKey);// 0x5d43078ea041
	bool HasRowKey(int Key);// 0x5d42078ea041
	bool HasColKey(FString Key);// 0x5d41078ea041
	FString GetTableName();// 0x5d40078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5d3f078ea041
	SolarTablesData_WeaponQuality GetRowData(int Key);// 0x5d3e078ea041
	int GetRowCount();// 0x5d3d078ea041
	int GetDataNum();// 0x5d3c078ea041
	FString[] GetColKeys();// 0x5d3b078ea041
	int GetColCount();// 0x5d3a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponQuality.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int Quality;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_SecondMode.SolarTableReaderBase.Object
	SolarTablesData_SecondMode TryGetRowData(int Key, out bool HasKey);// 0x5c49078ea041
	bool HasRowKey(int Key);// 0x5c48078ea041
	bool HasColKey(FString Key);// 0x5c47078ea041
	FString GetTableName();// 0x5c46078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5c45078ea041
	SolarTablesData_SecondMode GetRowData(int Key);// 0x5c44078ea041
	int GetRowCount();// 0x5c43078ea041
	int GetDataNum();// 0x5c42078ea041
	FString[] GetColKeys();// 0x5c41078ea041
	int GetColCount();// 0x5c40078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_SecondMode.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int UpperLimit;//[Offset: 0x10, Size: 0x4]
	float RestoreProgressPerSec;//[Offset: 0x14, Size: 0x4]
	float RestoreProgressPerKill;//[Offset: 0x18, Size: 0x4]
	float RestoreProgressPerDmg;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponSkin.SolarTableReaderBase.Object
	SolarTablesData_WeaponSkin TryGetRowData(int Key, out bool HasKey);// 0x5d4d078ea041
	bool HasRowKey(int Key);// 0x5d4c078ea041
	bool HasColKey(FString Key);// 0x5d4b078ea041
	FString GetTableName();// 0x5d4a078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5d49078ea041
	SolarTablesData_WeaponSkin GetRowData(int Key);// 0x5d48078ea041
	int GetRowCount();// 0x5d47078ea041
	int GetDataNum();// 0x5d46078ea041
	FString[] GetColKeys();// 0x5d45078ea041
	int GetColCount();// 0x5d44078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponSkin.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	int WeaponSkinType;//[Offset: 0x10, Size: 0x4]
	FString WeaponSkillQuality;//[Offset: 0x18, Size: 0x10]
	int SortId;//[Offset: 0x28, Size: 0x4]
	int weaponid;//[Offset: 0x2c, Size: 0x4]
	FString WeaponSkinResource;//[Offset: 0x30, Size: 0x10]
	int WeaponSkinAquiredThru;//[Offset: 0x40, Size: 0x4]
	int JumpPage;//[Offset: 0x44, Size: 0x4]
	FString KillBroadcast;//[Offset: 0x48, Size: 0x10]
	int ShopPropertyid;//[Offset: 0x58, Size: 0x4]
	int ItemID;//[Offset: 0x5c, Size: 0x4]
	bool DisplayInWeaponry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FString ChunkDir;//[Offset: 0x68, Size: 0x10]
	int ChunkID;//[Offset: 0x78, Size: 0x4]
	int AIRandomWeight;//[Offset: 0x7c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponSound.SolarTableReaderBase.Object
	SolarTablesData_WeaponSound TryGetRowData(int Key, out bool HasKey);// 0x5d61078ea041
	bool HasRowKey(int Key);// 0x5d60078ea041
	bool HasColKey(FString Key);// 0x5d5f078ea041
	FString GetTableName();// 0x5d5e078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5d5d078ea041
	SolarTablesData_WeaponSound GetRowData(int Key);// 0x5d5c078ea041
	int GetRowCount();// 0x5d5b078ea041
	int GetDataNum();// 0x5d5a078ea041
	FString[] GetColKeys();// 0x5d59078ea041
	int GetColCount();// 0x5d58078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponSound.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	FString Play_Fire_Auto_1P;//[Offset: 0x10, Size: 0x10]
	FString Play_Fire_Auto_3P;//[Offset: 0x20, Size: 0x10]
	FString Play_Fire_Auto_3P_Enemy;//[Offset: 0x30, Size: 0x10]
	FString Stop_Fire_Auto_1P;//[Offset: 0x40, Size: 0x10]
	FString Stop_Fire_Auto_3P;//[Offset: 0x50, Size: 0x10]
	FString Stop_Fire_Auto_3P_Enemy;//[Offset: 0x60, Size: 0x10]
	FString Play_Fire_Sigle_1P;//[Offset: 0x70, Size: 0x10]
	FString Play_Fire_Sigle_3P;//[Offset: 0x80, Size: 0x10]
	FString Play_Fire_Sigle_3P_Enemy;//[Offset: 0x90, Size: 0x10]
	FString Play_Fire_Burst_1P;//[Offset: 0xa0, Size: 0x10]
	FString Play_Fire_Burst_3P;//[Offset: 0xb0, Size: 0x10]
	FString Play_Fire_Burst_3P_Enemy;//[Offset: 0xc0, Size: 0x10]
	FString Stop_Fire_Burst_1P;//[Offset: 0xd0, Size: 0x10]
	FString Stop_Fire_Burst_3P;//[Offset: 0xe0, Size: 0x10]
	FString Stop_Fire_Burst_3P_Enemy;//[Offset: 0xf0, Size: 0x10]
	FString Play_FIRE_LAST_1P;//[Offset: 0x100, Size: 0x10]
	FString Play_FIRE_LAST_3P;//[Offset: 0x110, Size: 0x10]
	FString Play_FIRE_LAST_3P_Enemy;//[Offset: 0x120, Size: 0x10]
	FString Remain_Gun_RTPC_NAME;//[Offset: 0x130, Size: 0x10]
	FString Play_Skill_Cast_1P;//[Offset: 0x140, Size: 0x10]
	FString Play_Skill_Cast_3P;//[Offset: 0x150, Size: 0x10]
	FString Play_Skill_Cast_3P_Enemy;//[Offset: 0x160, Size: 0x10]
	FString Play_Fire_Lay_Tl_1P;//[Offset: 0x170, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P;//[Offset: 0x180, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P_Enemy;//[Offset: 0x190, Size: 0x10]
	FString Play_Land_Fly_Once_3P;//[Offset: 0x1a0, Size: 0x10]
	FString Play_Land_Fly_Once_3P_Enemy;//[Offset: 0x1b0, Size: 0x10]
	FString Play_Land_Fly_Loop_1P;//[Offset: 0x1c0, Size: 0x10]
	FString Play_Land_Fly_Loop_3P;//[Offset: 0x1d0, Size: 0x10]
	FString Play_Land_Fly_Loop_3P_Enemy;//[Offset: 0x1e0, Size: 0x10]
	FString Stop_Land_Fly_Loop_1P;//[Offset: 0x1f0, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P;//[Offset: 0x200, Size: 0x10]
	FString Stop_Land_Fly_Loop_3P_Enemy;//[Offset: 0x210, Size: 0x10]
	FString Play_Land_Common_Hit_1P;//[Offset: 0x220, Size: 0x10]
	FString Play_Land_Common_Hit_3P;//[Offset: 0x230, Size: 0x10]
	FString Play_Land_Common_Hit_3P_Enemy;//[Offset: 0x240, Size: 0x10]
	FString Play_Fire_Overload_1P;//[Offset: 0x250, Size: 0x10]
	FString Play_Fire_Overload_3P;//[Offset: 0x260, Size: 0x10]
	FString Play_Fire_Overload_3P_Enemy;//[Offset: 0x270, Size: 0x10]
	FString Play_Reload_01_1P;//[Offset: 0x280, Size: 0x10]
	FString Play_Reload_01_3P;//[Offset: 0x290, Size: 0x10]
	FString Play_Reload_01_3P_Enemy;//[Offset: 0x2a0, Size: 0x10]
	FString Play_Reload_02_1P;//[Offset: 0x2b0, Size: 0x10]
	FString Play_Reload_02_3P;//[Offset: 0x2c0, Size: 0x10]
	FString Play_Reload_02_3P_Enemy;//[Offset: 0x2d0, Size: 0x10]
	FString Play_Reload_03_1P;//[Offset: 0x2e0, Size: 0x10]
	FString Play_Reload_03_3P;//[Offset: 0x2f0, Size: 0x10]
	FString Play_Reload_03_3P_Enemy;//[Offset: 0x300, Size: 0x10]
	FString Play_Bolt_1P;//[Offset: 0x310, Size: 0x10]
	FString Play_Bolt_3P;//[Offset: 0x320, Size: 0x10]
	FString Play_Bolt_3P_Enemy;//[Offset: 0x330, Size: 0x10]
	FString Play_Vehicle_Gun_On_3P;//[Offset: 0x340, Size: 0x10]
	FString Play_Vehicle_Gun_On_3P_Enemy;//[Offset: 0x350, Size: 0x10]
	FString Play_Vehicle_Gun_Loop_3P;//[Offset: 0x360, Size: 0x10]
	FString Play_Vehicle_Gun_Loop_3P_Enemy;//[Offset: 0x370, Size: 0x10]
	FString Play_Vehicle_Gun_Off_3P;//[Offset: 0x380, Size: 0x10]
	FString Play_Vehicle_Gun_Off_3P_Enemy;//[Offset: 0x390, Size: 0x10]
	FString Play_Fire_Auto_1P_Mute;//[Offset: 0x3a0, Size: 0x10]
	FString Play_Fire_Auto_3P_Mute;//[Offset: 0x3b0, Size: 0x10]
	FString Play_Fire_Auto_3P_Enemy_Mute;//[Offset: 0x3c0, Size: 0x10]
	FString Stop_Fire_Auto_1P_Mute;//[Offset: 0x3d0, Size: 0x10]
	FString Stop_Fire_Auto_3P_Mute;//[Offset: 0x3e0, Size: 0x10]
	FString Stop_Fire_Auto_3P_Enemy_Mute;//[Offset: 0x3f0, Size: 0x10]
	FString Play_Fire_Sigle_1P_Mute;//[Offset: 0x400, Size: 0x10]
	FString Play_Fire_Sigle_3P_Mute;//[Offset: 0x410, Size: 0x10]
	FString Play_Fire_Sigle_3P_Enemy_Mute;//[Offset: 0x420, Size: 0x10]
	FString Play_Fire_Burst_1P_Mute;//[Offset: 0x430, Size: 0x10]
	FString Play_Fire_Burst_3P_Mute;//[Offset: 0x440, Size: 0x10]
	FString Play_Fire_Burst_3P_Enemy_Mute;//[Offset: 0x450, Size: 0x10]
	FString Stop_Fire_Burst_1P_Mute;//[Offset: 0x460, Size: 0x10]
	FString Stop_Fire_Burst_3P_Mute;//[Offset: 0x470, Size: 0x10]
	FString Stop_Fire_Burst_3P_Enemy_Mute;//[Offset: 0x480, Size: 0x10]
	FString Play_Fire_Lay_Tl_1P_Mute;//[Offset: 0x490, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P_Mute;//[Offset: 0x4a0, Size: 0x10]
	FString Play_Fire_Lay_Tl_3P_Enemy_Mute;//[Offset: 0x4b0, Size: 0x10]
	FString Play_Fire_Empty_1p;//[Offset: 0x4c0, Size: 0x10]
	FString Play_Fire_Empty_3p;//[Offset: 0x4d0, Size: 0x10]
	FString Play_Fire_Empty_3p_Enemy;//[Offset: 0x4e0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTables_Reader_WeaponStatu.SolarTableReaderBase.Object
	SolarTablesData_WeaponStatu TryGetRowData(int Key, out bool HasKey);// 0x5d6b078ea041
	bool HasRowKey(int Key);// 0x5d6a078ea041
	bool HasColKey(FString Key);// 0x5d69078ea041
	FString GetTableName();// 0x5d68078ea041
	int GetRowKeys(out int[] OutKeys);// 0x5d67078ea041
	SolarTablesData_WeaponStatu GetRowData(int Key);// 0x5d66078ea041
	int GetRowCount();// 0x5d65078ea041
	int GetDataNum();// 0x5d64078ea041
	FString[] GetColKeys();// 0x5d63078ea041
	int GetColCount();// 0x5d62078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTablesData_WeaponStatu.SolarTablesDataBase
	int ID;//[Offset: 0xc, Size: 0x4]
	float Stand;//[Offset: 0x10, Size: 0x4]
	float CrouchDown;//[Offset: 0x14, Size: 0x4]
	float Still;//[Offset: 0x18, Size: 0x4]
	float Run;//[Offset: 0x1c, Size: 0x4]
	float Spint;//[Offset: 0x20, Size: 0x4]
	float Jump;//[Offset: 0x24, Size: 0x4]
	float Fly;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2358, Size: 0x8]
	class GameplayAbility[] DefaultAbilitiesExtra;//[Offset: 0x2360, Size: 0x10]
	S_AiItem NewVar;//[Offset: 0x2370, Size: 0xc]
	void GetWeaponLevelDamageBonus(out float Result, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, int CallFunc_GetCurrentActiveSlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x10e5607b6a001
	byte [A]GetHealthState(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, bool CallFunc_IsDying_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, byte K2Node_Select_Default, byte K2Node_Select_Default);// 0x10e5707b6a001
	bool [S]SkyDiveFly(Vector Location, float Height, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool Temp_bool_Variable, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_K2_TeleportTo_ReturnValue, bool CallFunc_TryActivateAbilityByClass_ReturnValue, bool K2Node_Select_Default);// 0x10e5807b6a001
	bool [S]Set Sky Dive State(bool CallFunc_TryActivateAbilityByClass_ReturnValue);// 0x10e5907b6a001
	void OnCompleted_84F20D844D539263D5B45F9EDF867241(SolarPlayerWeapon* Weapon);// 0x10e5a07b6a001
	void OnCompleted_C9B9AA40496B70A95EF897A2092C6753(SolarPlayerWeapon* Weapon);// 0x10e5b07b6a001
	void OnCompleted_9F8149E84A6F3575574B32ADD8BF2960(SolarPlayerWeapon* Weapon);// 0x10e5c07b6a001
	void BeginPlayBlueprint();// 0x6188c0793a100
	void SetWeapon(byte Slot, int WeapoinId, out const WeaponPartsData Parts);// 0x10e5e07b6a001
	void BatchSetItem(out const S_AiItem[] ItemList);// 0xffffff8c078ea000
	void [s]GiveWeapon(const bool bDestroyPrevWeapon, const byte Slot, const int ItemID);// 0x10e6007b6a001
	static void ExecuteUbergraph_BP_Character_Framework(int EntryPoint, const byte Temp_byte_Variable, byte Temp_byte_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, const int Temp_int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, const int K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, SolarPlayerWeapon* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, SolarPlayerWeapon* Temp_object_Variable, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, const byte Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarPlayerWeapon* K2Node_CustomEvent_Weapon, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const byte Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const byte Temp_byte_Variable, const byte Temp_byte_Variable, const byte Temp_byte_Variable, byte Temp_byte_Variable, int Temp_int_Variable, const byte K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, const byte[] K2Node_MakeArray_Array, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_AddBackpackItem_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_SetWeaponPartByPartID_Success, FString CallFunc_Conv_BoolToString_ReturnValue, SolarPlayerWeapon* Temp_object_Variable, const <FString,FString> K2Node_MakeMap_Map, int Temp_int_Variable, class GameplayAbility CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameplayAbilitySpecHandle CallFunc_K2_GiveAbility_ReturnValue, byte K2Node_CustomEvent_Slot, int K2Node_CustomEvent_WeapoinId, const WeaponPartsData K2Node_CustomEvent_Parts, bool CallFunc_SetWeaponParts_ReturnValue, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, const S_AiItem[] K2Node_CustomEvent_ItemList, S_AiItem CallFunc_Array_Get_Item, S_AiItem CallFunc_Array_Get_Item, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, const bool K2Node_CustomEvent_bDestroyPrevWeapon, const byte K2Node_CustomEvent_Slot, const int K2Node_CustomEvent_ItemID, const <FString,FString> K2Node_MakeMap_Map, SolarGameModeWeaponAction* CallFunc_SetCharacterWeaponBySeq_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x10e6207b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x22a0, Size: 0x8]
	SolarAbilityComponent* SolarAbility;//[Offset: 0x22a8, Size: 0x8]
	Vector PreviousLocation;//[Offset: 0x22b0, Size: 0xc]
	float Time;//[Offset: 0x22bc, Size: 0x4]
	float CurrentTime;//[Offset: 0x22c0, Size: 0x4]
	float PreviousTime;//[Offset: 0x22c4, Size: 0x4]
	float DeltaTime;//[Offset: 0x22c8, Size: 0x4]
	Vector DeltaLocation;//[Offset: 0x22cc, Size: 0xc]
	bool OnTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d8, Size: 0x1]
	float Speed;//[Offset: 0x22dc, Size: 0x4]
	Vector2D Direction;//[Offset: 0x22e0, Size: 0x8]
	float[] SpeedRecord;//[Offset: 0x22e8, Size: 0x10]
	Vector[] LocationRecord;//[Offset: 0x22f8, Size: 0x10]
	float[] Record_X;//[Offset: 0x2308, Size: 0x10]
	float[] Record_y;//[Offset: 0x2318, Size: 0x10]
	float SpeedFixBase;//[Offset: 0x2328, Size: 0x4]
	CurveFloat* SpeedFix;//[Offset: 0x2330, Size: 0x8]
	delegate OnEjectingStateChanged;//[Offset: 0x2338, Size: 0x10]
	byte EjectState;//[Offset: 0x2348, Size: 0x1]
	int PoisonDamageNum;//[Offset: 0x234c, Size: 0x4]
	SolarCharacter* Shadow AI;//[Offset: 0x2350, Size: 0x8]
	SolarCameraComponent* GetSolarCameraComponent();// 0x10e3207b6a001
	SolarSpringArmComponent* GetSolarSpringArmComponent();// 0x10e3307b6a001
	static void RefreshRenderConsoleVarForSkydive(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarCityName*[] CallFunc_GetAllActorsOfClass_OutActors, SolarCityName* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_SetRenderParametersBasedOnDifferentStates_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x10e3407b6a001
	bool Is Observation Target(bool CallFunc_IsBeingSpectated_ReturnValue, bool CallFunc_IsPlayerLocallyControlledOrSpectated_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x10e3507b6a001
	float FixSpeed(float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x10e3607b6a001
	void FigureSpeed(float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_GetFixedSpeed_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x10e3707b6a001
	float GetFixedY(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue);// 0x10e3807b6a001
	float GetFixedX(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue);// 0x10e3907b6a001
	void SetCameraInput(Vector NewLocalVar, bool Temp_bool_Variable, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector Temp_struct_Variable, float CallFunc_GetFixedY_ReturnValue, float CallFunc_GetFixedX_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Multiply_VectorFloat_ReturnValue);// 0x10e3a07b6a001
	void SetCameraInput(float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, FString CallFunc_Conv_Vector2dToString_ReturnValue);// 0x10e3b07b6a001
	Vector GetFixedLocation(Vector InLocation, int NewLocalVar, Vector NewLocalVar, bool Temp_bool_Variable, bool Temp_bool_Variable, Vector Temp_struct_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector CallFunc_Divide_VectorInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector K2Node_Select_Default, Vector CallFunc_Array_Get_Item, Vector K2Node_Select_Default, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x10e3c07b6a001
	float GetFixedSpeed(float NewParam, int NewLocalVar, float NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x10e3d07b6a001
	static void DecelerationEffectUpdate(out float Altitude, out ParticleSystemComponent*[] Effects, float tmpAltitudePercent, float CallFunc_GetSkydiveLandingHeight_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x10e3e07b6a001
	void UndecelerationEffectUpdate(out float Altitude, out ParticleSystemComponent*[] Effects, float L_Var, CurveFloat* UndecelerationEffectCurve, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetFloatValue_ReturnValue);// 0x10e3f07b6a001
	void InpActEvt_BackSpace_K2Node_InputKeyEvent(Key Key);// 0x10e4007b6a001
	void InpActEvt_Home_K2Node_InputKeyEvent(Key Key);// 0x10e4107b6a001
	void InpActEvt_End_K2Node_InputKeyEvent(Key Key);// 0x10e4207b6a001
	void InpActEvt_Delete_K2Node_InputKeyEvent(Key Key);// 0x10e4307b6a001
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround);// 0x10e4407b6a001
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater);// 0x10e4507b6a001
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x10e4607b6a001
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate);// 0x10e4707b6a001
	void ReceiveEndPlay(byte EndPlayReason);// 0x10e4807b6a001
	void ReceiveBeginPlay();// 0x129f7078ea041
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope);// 0xffffff8c078ea000
	void Event_UseReviveItem(SCMPlayerState* Player);// 0xffffff8b078ea002
	void OnSkydiveStageChanged(enum LastStage, enum CurrentStage);// 0x1774c078ea041
	void OnCharacterEjectStateChanged(byte State);// 0x10e6307b6a001
	static void ExecuteUbergraph_BP_SolarCharacterPlayer(int EntryPoint, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, ParticleSystemComponent*[] CallFunc_GetAllSkydiveFlyingEffects_OutEffects, float K2Node_Event_DistanceToGround, ParticleSystemComponent*[] CallFunc_GetAllSkydiveLandingEffects_OutEffects, bool K2Node_Event_bIsInWater, Key K2Node_InputKeyEvent_Key, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, float K2Node_Event_FallingRate, byte K2Node_Event_EndPlayReason, bool CallFunc_IsEditor_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Key K2Node_InputKeyEvent_Key, float K2Node_Event_InDuration, bool K2Node_Event_bInOpenScope, SCMPlayerState* K2Node_CustomEvent_Player, bool CallFunc_HasAuthority_ReturnValue, Key K2Node_InputKeyEvent_Key, bool CallFunc_IsEditor_ReturnValue, bool CallFunc_IsEditor_ReturnValue, bool CallFunc_IsEditor_ReturnValue, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, enum K2Node_Event_LastStage, enum K2Node_Event_CurrentStage, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte K2Node_Select_Default, bool CallFunc_BooleanOR_ReturnValue, byte K2Node_CustomEvent_State, bool CallFunc_IsValid_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, ABP_SolarCharacter_FPP_C* K2Node_DynamicCast_AsABP_Solar_Character_FPP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsBeingSpectated_ReturnValue, Key K2Node_InputKeyEvent_Key);// 0x10e6407b6a001
	void OnEjectingStateChanged__DelegateSignature(byte State, SolarCharacter* TargetCharacter);// 0x10e68078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponPartsData
	int ScopeId;//[Offset: 0x0, Size: 0x4]
	int GripID;//[Offset: 0x4, Size: 0x4]
	int GunStockID;//[Offset: 0x8, Size: 0x4]
	int MuzzleID;//[Offset: 0xc, Size: 0x4]
	int ClipID;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_AiItem
	byte ItemType_2_314140C646418678444E9DB5DBB9CB11;//[Offset: 0x0, Size: 0x1]
	int ItemID_5_9414785640F928576D3321856C20F5FD;//[Offset: 0x4, Size: 0x4]
	int Count_7_49130AA64D9339657AC5579D1E066466;//[Offset: 0x8, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGameModeWeaponAction.BlueprintAsyncActionBase.Object
	delegate OnCompleted;//[Offset: 0x30, Size: 0x10]
	SolarGameModeWeaponAction* SetCharacterWeaponBySeq(Object* WorldContextObject, SolarCharacter* TargetCharacter, const bool bDestroyPrevWeapon, const byte Slot, const int ItemID);// 0x4c29078ea041
	void OnWeaponCreated(byte SlotIndex, SolarPlayerWeapon* WeaponPtr, SolarBackpackComponent* SolarBackpackComponent);// 0x4c28078ea041
	void CreateWeaponAsync(const byte SlotIndex, bool bDestroyPrevWeapon, out const SolarItemData InItemData, SolarBackpackComponent* InSolarBackpackComponent);// 0x4c27078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ABP_SolarCharacter_FPP_C.AnimInstance.Object
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x268, Size: 0x30]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x298, Size: 0x28]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2c0, Size: 0x28]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x2e8, Size: 0x78]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x360, Size: 0x30]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x390, Size: 0x78]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x408, Size: 0x30]
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x438, Size: 0xb0]
	AnimNode_Slot AnimGraphNode_Slot;//[Offset: 0x4e8, Size: 0x48]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x530, Size: 0x78]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool;//[Offset: 0x5a8, Size: 0xa8]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x650, Size: 0x20]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x670, Size: 0x20]
	SolarCharacter* SolarCharacter;//[Offset: 0x690, Size: 0x8]
	bool IsScopeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	float ScopeFadeTime;//[Offset: 0x69c, Size: 0x4]
	bool IsWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 0x1]
	bool IsShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a1, Size: 0x1]
	bool ShootDouble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a2, Size: 0x1]
	float Horizontal;//[Offset: 0x6a4, Size: 0x4]
	float Vertical;//[Offset: 0x6a8, Size: 0x4]
	bool bUseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 0x1]
	float K2Node_Event_DeltaTimeX;//[Offset: 0x6b0, Size: 0x4]
	SolarCharacter* K2Node_DynamicCast_AsSolar_Character;//[Offset: 0x6b8, Size: 0x8]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 0x1]
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_TransitionResult_768665AB4918F96C9C3C8F92EF926EE4();// 0x10e69078ea041
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_TransitionResult_01B670704C4A0F8E519CD8A192C5E1D6();// 0x10e6a078ea041
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SolarCharacter_FPP_AnimGraphNode_BlendListByBool_F136F87A4DDCD2678555C9B592100DA7();// 0x10e6b078ea041
	void BlueprintUpdateAnimation(float bpp__DeltaTimeX__pf);// 0x10e6c078ea041
	void BlueprintInitializeAnimation();// 0x10e6d078ea041
	void BlueprintBeginPlay();// 0x10e6e078ea041
	void AnimGraph(out PoseLink bpp__AnimGraph__pf);// 0x25a5407b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PoseLink.PoseLinkBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x10, Size: 0x10]
	FName Name;//[Offset: 0x20, Size: 0x8]
	FName Group;//[Offset: 0x28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_Base
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x30, Size: 0x8]
	float PlayRateBasis;//[Offset: 0x38, Size: 0x4]
	float PlayRate;//[Offset: 0x3c, Size: 0x4]
	InputScaleBiasClamp PlayRateScaleBiasClamp;//[Offset: 0x40, Size: 0x30]
	float StartPosition;//[Offset: 0x70, Size: 0x4]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_AssetPlayerBase.AnimNode_Base
	int GroupIndex;//[Offset: 0x10, Size: 0x4]
	byte GroupRole;//[Offset: 0x14, Size: 0x1]
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	float BlendWeight;//[Offset: 0x18, Size: 0x4]
	float InternalTimeAccumulator;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputScaleBiasClamp
	bool bMapRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bInterpResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	InputRange InRange;//[Offset: 0x4, Size: 0x8]
	InputRange OutRange;//[Offset: 0xc, Size: 0x8]
	float Scale;//[Offset: 0x14, Size: 0x4]
	float Bias;//[Offset: 0x18, Size: 0x4]
	float ClampMin;//[Offset: 0x1c, Size: 0x4]
	float ClampMax;//[Offset: 0x20, Size: 0x4]
	float InterpSpeedIncreasing;//[Offset: 0x24, Size: 0x4]
	float InterpSpeedDecreasing;//[Offset: 0x28, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: InputRange
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_StateResult.AnimNode_Root.AnimNode_Base
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x10, Size: 0x4]
	int MaxTransitionsPerFrame;//[Offset: 0x14, Size: 0x4]
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x10, Size: 0x10]
	FName SlotName;//[Offset: 0x20, Size: 0x8]
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x10, Size: 0x10]
	float[] BlendTime;//[Offset: 0x20, Size: 0x10]
	enum TransitionType;//[Offset: 0x30, Size: 0x1]
	enum BlendType;//[Offset: 0x31, Size: 0x1]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	CurveFloat* CustomBlendCurve;//[Offset: 0x38, Size: 0x8]
	BlendProfile* BlendProfile;//[Offset: 0x40, Size: 0x8]
	int LODThreshold;//[Offset: 0x48, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_ConvertLocalToComponentSpace.AnimNode_Base
	PoseLink LocalPose;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AnimNode_ConvertComponentToLocalSpace.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x10, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ComponentSpacePoseLink.PoseLinkBase
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSubsystem.WorldSubsystem.Subsystem.Object
	delegate OnVehicleSpawned;//[Offset: 0x30, Size: 0x10]
	delegate OnVehicleDestroyed;//[Offset: 0x40, Size: 0x10]
	void GetActiveVehicleList(out Actor*[] OutActiveVehicles);// 0x5f38078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WorldSubsystem.Subsystem.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_AiManagerBattleRoyale_C.BPC_AiManagerBase_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe8, Size: 0x8]
	SCMPlayerState*[] TempAI;//[Offset: 0xf0, Size: 0x10]
	<FString,int> MemberAIOrder;//[Offset: 0x100, Size: 0x50]
	int SpawnIndex;//[Offset: 0x150, Size: 0x4]
	bool bCanSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	<FString,int> PureAIOrder;//[Offset: 0x158, Size: 0x50]
	bool bSpawnPlayerTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 0x1]
	int AiCountPreSpawn;//[Offset: 0x1ac, Size: 0x4]
	int RealPlayer;//[Offset: 0x1b0, Size: 0x4]
	SCMPlayerState*[] TeammateAI;//[Offset: 0x1b8, Size: 0x10]
	bool bTeammateAiFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	S_WarmGameConfig WarmGameConfig;//[Offset: 0x1d0, Size: 0x18]
	bool bIsWarmGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 0x1]
	FString[] PureAiTeams;//[Offset: 0x1f0, Size: 0x10]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	int GetMatchTeammateCount(SolarGameMode* CallFunc_GetSolarGameMode_ReturnValue, int CallFunc_GetMatchTeammateCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_SelectInt_ReturnValue);// 0xc37f07b6a001
	static void ReplenishAITeammate(byte[] NewLocalVar, SolarTeamInfo*[] emptyTeam, FString[] AITeam, const enum[] Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, const byte[] Temp_byte_Variable, int CallFunc_Add_IntInt_ReturnValue, const enum[] Temp_byte_Variable, int Temp_int_Array_Index_Variable, int CallFunc_GetMatchTeammateCount_ReturnValue, const FString[] Temp_string_Variable, SolarTeamInfo* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsAPlayerTeam_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, <FString,int> CallFunc_GetMemberAIOrder_Team_Count, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const enum[] Temp_byte_Variable, SolarTeamInfo* CallFunc_Array_Get_Item, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, SolarPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsAOnlyBotTeam_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, const byte[] Temp_byte_Variable, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, const FString[] Temp_string_Variable, SCMPlayerState* CallFunc_Array_Get_Item, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, int CallFunc_Map_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Pick_Team_Team);// 0xc38007b6a001
	BPC_CountDown_C* GetCountDownComponent(GameStateBase* CallFunc_GetGameState_ReturnValue, BPC_CountDown_C* CallFunc_GetComponentByClass_ReturnValue);// 0xc38107b6a001
	static void StopAiBehavior(SCMPlayerState*[] Temp, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, SolarBotAIController* CallFunc_GetAIController_Controller, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xc38207b6a001
	bool CanModeSpawnAiTeammate(bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, bool CallFunc__S_PlayInEditor_bIsEditor, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0xc38307b6a001
	void GetAIController(SolarPlayerState* PlayerState, out SolarBotAIController* Controller, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, SolarBotAIController* CallFunc_GetSolarAIController_ReturnValue);// 0xc38407b6a001
	void SpawnAI(bool bTeammateAI, FString Team, out SCMPlayerState* PlayerState, bool Temp_bool_Variable, SolarGameMode* CallFunc_GetSolarGameMode_ReturnValue, int CallFunc_Map_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const SCMPlayerState*[] K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_GetRandomCharacter_Output, int CallFunc_GetRandomDifficulty_Difficulty, Object* CallFunc_LoadAsset_Blocking_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, BehaviorTree* K2Node_DynamicCast_AsBehavior_Tree, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_SpawnLocation_ReturnValue, SolarPlayerState* CallFunc_CreateBotAIAndJoinTeamByName_ReturnValue, SCMPlayerState* K2Node_DynamicCast_AsSCMPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue);// 0xc38507b6a001
	void GetSpawnInterval(out float Interval, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, BPC_CountDown_C* CallFunc_GetCountDownComponent_ReturnValue, BPC_CountDown_C* CallFunc_GetCountDownComponent_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, float K2Node_Select_Default, float K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0xc38607b6a001
	static void UpdatePureAiOrder(int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetMatchTeammateCount_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int K2Node_Select_Default, FString[] CallFunc_Map_Keys_Keys);// 0xc38707b6a001
	void Pick Team(bool RealPlayerTeam, out FString Team, FString tempTeam, bool Temp_bool_Variable, <FString,int> K2Node_Select_Default, FString[] CallFunc_Map_Keys_Keys, bool CallFunc_Map_Remove_ReturnValue, int CallFunc_Array_LastIndex_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0xc38807b6a001
	static void DeleteTempAI(int count, int Temp_int_Variable, SCMPlayerState* CallFunc_Array_Get_Item, const SCMPlayerState*[] K2Node_MakeArray_Array, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_DeleteAIFromBattleForPlayer_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0xc38907b6a001
	void RunBehaviourTree(SCMPlayerState* Player, BehaviorTree* BTAsset, enum CallFunc_GetPlayerPawn_outType, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xc38a07b6a001
	static Vector SpawnLocation(BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, PlayerStart*[] CallFunc_GetPlayerStartOnWaitingland_PlayerStarts, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue);// 0xc38b07b6a001
	bool IsPlayerFull(BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xc38c07b6a001
	BP_Logic_BattleRoyale_C* GetLogicComponent(GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0xc38d07b6a001
	void MatchFinished();// 0xc38e07b6a001
	void PreSpawnAI();// 0xc38f07b6a001
	void ReceiveBeginPlay();// 0x124c007b6a008
	void SpawnAIDynamic();// 0xc39107b6a001
	void OnBattleStateChanged(byte NewState);// 0x124be07b6a008
	void CustomEvent();// 0xc39307b6a001
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0x124c507b6a008
	static void ExecuteUbergraph_BPC_AiManagerBattleRoyale(int EntryPoint, bool Temp_bool_Variable, bool Temp_bool_Variable, bool CallFunc_IsPlayerFull_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Map_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsPlayerFull_ReturnValue, SCMPlayerState* CallFunc_SpawnAI_PlayerState, int CallFunc_Map_Length_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_RandomIntInRange_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_NewState, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, CFG_BattleRoyale_C* CallFunc_Get_Config_CFG, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BehaviorTree* K2Node_Select_Default, Object* CallFunc_LoadAsset_Blocking_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BehaviorTree* K2Node_DynamicCast_AsBehavior_Tree, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetSpawnInterval_Interval, FString CallFunc_Pick_Team_Team, int Temp_int_Variable, SCMPlayerState* CallFunc_SpawnAI_PlayerState, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, int K2Node_Select_Default, SCMPlayerState* K2Node_Event_NewPlayer, bool K2Node_Event_bIsAi, bool CallFunc_Not_PreBool_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetLogicComponent_ReturnValue, int CallFunc_Get_Current_Player_Count_Result, bool CallFunc__s_GetWarmGameInfo_bIsWarmGame, SolarTablesData_WarmGameMode CallFunc__s_GetWarmGameInfo_WarmGameInfo, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_CanModeSpawnAiTeammate_ReturnValue, <FString,int> CallFunc_GetMemberAIOrder_Team_Count);// 0x19435078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_AiManagerBase_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	FString PreSpawnAiTeams;//[Offset: 0xb8, Size: 0x10]
	int TeammateCount;//[Offset: 0xc8, Size: 0x4]
	SCMPlayerState*[] AIList;//[Offset: 0xd0, Size: 0x10]
	int AILevelMax;//[Offset: 0xe0, Size: 0x4]
	int DefaultAiLevel;//[Offset: 0xe4, Size: 0x4]
	static void GetRandomDifficulty(out int Difficulty, <int,int> CallFunc_GetAILevelConfigCurrentMatch_AILevelConfig, bool CallFunc_GetAILevelConfigCurrentMatch_ReturnValue, int CallFunc_GetRandomKeyInWidget_HitKey);// 0xc40907b6a001
	void GetMemberAIOrder(out <FString,int> Team-Count, SolarTeamInfo* NewLocalVar, SolarTeamInfo*[] RealPlayerTeams, <FString,int> TempTeamCount, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarGameMode* CallFunc_GetSolarGameMode_ReturnValue, int CallFunc_GetMatchTeammateCount_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo*[] CallFunc_GetPlayerTeams_OutTeams, int CallFunc_Array_Length_ReturnValue, SolarTeamInfo* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_HasTeammatesAI_ReturnValue);// 0xc40a07b6a001
	void ReceiveBeginPlay();// 0x1251907b6a008
	void OnPlayerJoin(SCMPlayerState* NewPlayer, bool bIsAi);// 0x1254507b6a008
	void CustomEvent();// 0xc40d07b6a001
	static void ExecuteUbergraph_BPC_AiManagerBase(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, GameModeBase* CallFunc_GetGameMode_ReturnValue, SCMPlayerState* K2Node_CustomEvent_NewPlayer, bool K2Node_CustomEvent_bIsAi, BP_Logic_Framework_C* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_Array_Add_ReturnValue, <int,int> CallFunc_GetAILevelConfigCurrentMatch_AILevelConfig, bool CallFunc_GetAILevelConfigCurrentMatch_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_MaxOfIntArray_IndexOfMaxValue, int CallFunc_MaxOfIntArray_MaxValue);// 0x15af307b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_WarmGameConfig
	class BP_WarmGameLogicBase_C* WarmGameLogic_11_C4D3600041B8F0E806BDC09E30D6C1D0;//[Offset: 0x0, Size: 0x8]
	S_WarmGameAiConfig[] AiTeammates_15_B5CA8DEC448F508FECCA08B77C240AFC;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_WarmGameLogicBase_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
	void Event_ExecLogic();// 0xffffff8b078ea002
	void ExecuteUbergraph_BP_WarmGameLogicBase(int EntryPoint);// 0x2fa0dd00
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_WarmGameAiConfig
	SolarBotAIConfig* ConfigPreset_9_3A28EF82445B053255E222A49DE8116E;//[Offset: 0x0, Size: 0x8]
	int Difficulty_2_BC1C176F4C7CBB4D6FC889B2806BF007;//[Offset: 0x8, Size: 0x4]
	int Preference_6_7DE61082428EF32F3BEFE6AFA07875B9;//[Offset: 0xc, Size: 0x4]
	int Substitute_5_5FA843ED4EF730ADF049548C170D13E7;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_AirlineCruise_C.AirlineCruiseComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x140, Size: 0x8]
	int AirlineID;//[Offset: 0x148, Size: 0x4]
	<SolarPlayerState*,Vector> EjectLocation;//[Offset: 0x150, Size: 0x50]
	<SolarPlayerState*,Vector> LandLocation;//[Offset: 0x1a0, Size: 0x50]
	SolarPlayerState*[] ForceJumpPlayerList;//[Offset: 0x1f0, Size: 0x10]
	SolarCharacter*[] CruisePlayers;//[Offset: 0x200, Size: 0x10]
	AirlineData AirlineData;//[Offset: 0x210, Size: 0x28]
	float Height;//[Offset: 0x238, Size: 0x4]
	float Speed;//[Offset: 0x23c, Size: 0x4]
	bool ClearAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	bool bUseSpecificAirlineData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1]
	AirlineData SpecificAirlineData;//[Offset: 0x244, Size: 0x28]
	bool GetPlayerForceJumped(out const SolarPlayerState* TargetPlayer, bool CallFunc_Array_Contains_ReturnValue);// 0xc39207b6a001
	void GetPlayerLandLocation(out const SolarPlayerState* TargetPlayer, out Vector Location, out bool Succeed, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0xc3d307b6a001
	void GetPlayerEjectLocation(out const SolarPlayerState* TargetPlayer, out Vector Location, out bool Succeed, Vector CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0xc3d407b6a001
	void GetAirlineData_RealWorld(out const AirlineData AirlineData, out Vector2D LineStart, out Vector2D LineEnd, out Vector2D JumpStart, out Vector2D JumpEnd, out float Speed, out float Hight, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue);// 0xc3d507b6a001
	void MiniMap2RealWorld(Vector2D JumpStart, Vector2D JumpEnd, Vector2D LineStart, Vector2D LineEnd, out Vector2D JumpStartR, out Vector2D JumpEndR, out Vector2D LineStartR, out Vector2D LineEndR, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector CallFunc__A_MiniMapToWorldLocation_WorldLocation, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue);// 0xc3d607b6a001
	static void StartParachutingWithRandomAirline(out SolarCharacter*[] TargetCharacters, out int Air Line ID, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SolarCharacter* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_BeginCruise_IntoParachuteZoneTime, float CallFunc_BeginCruise_ForceParachuteTime, float CallFunc_BeginCruise_CruiseEndTime, BP_MapInfoComponent_C* CallFunc_GetComponentByClass_ReturnValue, AirlineData CallFunc_GetUsedAirlineData_OutData, int CallFunc_GetUsedAirlineData_ReturnValue, Vector2D CallFunc_GetAirlineData_RealWorld_LineStart, Vector2D CallFunc_GetAirlineData_RealWorld_LineEnd, Vector2D CallFunc_GetAirlineData_RealWorld_JumpStart, Vector2D CallFunc_GetAirlineData_RealWorld_JumpEnd, float CallFunc_GetAirlineData_RealWorld_Speed, float CallFunc_GetAirlineData_RealWorld_Hight, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x1254107b6a008
	void StartParachuting(out const SolarCharacter*[] TargetCharacters, bool ClearAllItems, int AirlineID, out const AirlineData AirlineData);// 0xc3d807b6a001
	void OnPlayerEjectingStateChanged(byte State, SolarCharacter* TargetCharacter);// 0x7302622f8ea000
	void SetSpecificAirlineData(out const AirlineData AirlineData);// 0xc3da07b6a001
	void ExecuteUbergraph_BPC_AirlineCruise(int EntryPoint, int Temp_int_Array_Index_Variable, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, const SolarCharacter*[] K2Node_CustomEvent_TargetCharacters, bool K2Node_CustomEvent_ClearAllItems, int K2Node_CustomEvent_AirlineID, const AirlineData K2Node_CustomEvent_AirlineData, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, byte Temp_byte_Variable, <SolarPlayerState*,Vector> K2Node_Select_Default, BoarderInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, SBattleRoyaleGameModeAIComp* CallFunc_GetAiComp_AiComp, SolarCharacter* CallFunc_Array_Get_Item, const Transform CallFunc_GetTransform_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, float CallFunc_BeginCruise_IntoParachuteZoneTime, float CallFunc_BeginCruise_ForceParachuteTime, float CallFunc_BeginCruise_CruiseEndTime, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, const AirlineData K2Node_CustomEvent_AirlineData, const AirlineData K2Node_Select_Default, Vector2D CallFunc_GetAirlineData_RealWorld_LineStart, Vector2D CallFunc_GetAirlineData_RealWorld_LineEnd, Vector2D CallFunc_GetAirlineData_RealWorld_JumpStart, Vector2D CallFunc_GetAirlineData_RealWorld_JumpEnd, float CallFunc_GetAirlineData_RealWorld_Speed, float CallFunc_GetAirlineData_RealWorld_Hight, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue);// 0x1252107b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AirlineCruiseComponent.GameModeCompBase.ActorComponent.Object
	int UsedAirlineID;//[Offset: 0xcc, Size: 0x4]
	class SolarCapsuleRoot* CapsuleRootClass;//[Offset: 0xd0, Size: 0x8]
	SolarCapsuleRoot* CapsuleRoot;//[Offset: 0xd8, Size: 0x8]
	<int,AirlineData> AirlineDataList;//[Offset: 0xe0, Size: 0x50]
	SolarCharacter* CruiseTemplate;//[Offset: 0x130, Size: 0x8]
	void OnPlayerJoin(SCMPlayerState* PlayerState);// 0x44c9078ea041
	void OnCruiseCompleted(Actor* DestroyedRoot);// 0x44c8078ea041
	void OnAIJoin(SCMPlayerState* PlayerState);// 0x44c7078ea041
	int GetUsedAirlineData(out AirlineData OutData);// 0x44c6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SBattleRoyaleGameModeAIComp.SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	bool bBotSkipAICruise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	float MaxLootDistanceToAirline;//[Offset: 0x19c, Size: 0x4]
	bool bCanSelectLootZoneOutPoisonCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Mode_BattleRoyale_C.BP_Mode_Framework_C.SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x798, Size: 0x8]
	BPC_WarmGame_BattleRoyale_C* BPC_WarmGame_BattleRoyale;//[Offset: 0x7a0, Size: 0x8]
	BPC_AiManagerBattleRoyale_C* BPC_AiManagerBattleRoyale;//[Offset: 0x7a8, Size: 0x8]
	NgaiGameModeComponent* NgaiGameMode;//[Offset: 0x7b0, Size: 0x8]
	BattleRoyaleGameModeAIComp_Custom_C* BattleRoyaleGameModeAIComp_Custom;//[Offset: 0x7b8, Size: 0x8]
	BPC_AirlineCruise_C* BPC_AirlineCruise;//[Offset: 0x7c0, Size: 0x8]
	BP_MapInfoComponent_C* BP_MapInfoComponent;//[Offset: 0x7c8, Size: 0x8]
	AirlineCruiseComponent* GetAirlineCruiseComponent();// 0xc2df07b6a001
	bool IsKillWhenPlayerOut(SolarPlayerState* PlayerState, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsKillWhenPlayerOut_ReturnValue, bool CallFunc_IsKillWhenPlayerOut_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_DoesDistributeForDomestic_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, int CallFunc_GetRemainingTeamCount_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xc2d007b6a001
	void ReceiveBeginPlay();// 0xffffffffc85b59f0
	void UpdateDeserterTag(SolarPlayerState* PlayerState);// 0xc2e407b6a001
	void ExecuteUbergraph_BP_Mode_BattleRoyale(int EntryPoint, bool CallFunc_DoesDistributeForDomestic_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, int CallFunc_GetRemainingTeamCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_BattleRoyale_C* K2Node_DynamicCast_AsCFG_Battle_Royale, bool K2Node_DynamicCast_bSuccess, SolarPlayerState* K2Node_Event_PlayerState, byte CallFunc_GetTeamRank_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_LessEqual_ByteByte_ReturnValue, bool CallFunc_CanPlayerBattle_ReturnValue, bool CallFunc_HasSettled_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_GetRemainingTeamCount_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xffffff8b078ea002
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Mode_Framework_C.SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x790, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SCustomGameMode.SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	float TimeOutSeconds;//[Offset: 0x5e0, Size: 0x4]
	CGMLogicComponent* LogicComponent;//[Offset: 0x698, Size: 0x8]
	CGMDeathComponent* DeathComponent;//[Offset: 0x6a0, Size: 0x8]
	SCMPlayerController*[] WaitingPlayers;//[Offset: 0x6b8, Size: 0x10]
	delegate OnPlayerJoin;//[Offset: 0x6d8, Size: 0x10]
	delegate OnAIJoin;//[Offset: 0x6e8, Size: 0x10]
	delegate OnPlayerOutEvent;//[Offset: 0x6f8, Size: 0x10]
	class GameManagerBase[] GameManagerClasses;//[Offset: 0x708, Size: 0x10]
	class CGMLogicComponent* LogicComponentClass;//[Offset: 0x718, Size: 0x8]
	class CGMDeathComponent* DeathComponentClass;//[Offset: 0x720, Size: 0x8]
	class SCMPlayerRPCComponent* PlayerRPCComponentClass;//[Offset: 0x728, Size: 0x8]
	void TimerStartGame();// 0x266c078ea041
	void StartBattle();// 0x266b078ea041
	void ResendResurrectCoin(SolarCharacter* ResurrectCharacter, SCMPlayerState* ResurrectPlayer);// 0x266a078ea041
	bool RequestAllowReconnectGame(SCMPlayerState* InPC);// 0x2669078ea041
	void ReceiveSpectatorJoinData(SCMPlayerState* Player);// 0x2668078ea041
	void ReceiveServerLevelLoaded(FString LevelName);// 0x2667078ea041
	bool ReceivePlayerReJoinRequest(FString PlayerId, out FString ErrorMsg);// 0x2666078ea041
	void ReceivePlayerReJoin(SCMPlayerState* NewPlayer);// 0x2665078ea041
	void ReceivePlayerPreLogin(FString PlayerId, SCMPlayerState* OfflinePlayer, out FString ErrorMsg);// 0x2664078ea041
	void ReceivePlayerNonSpectatorJoinData(SCMPlayerState* Player);// 0x2663078ea041
	void ReceivePlayerLevelLoaded(SCMPlayerController* Player, FString LevelName);// 0x2662078ea041
	void ReceivePlayerJoinData(FString PlayerId);// 0x2661078ea041
	void ReceivePlayerJoinBattle(SCMPlayerState* NewPlayer, bool IsAI);// 0x2660078ea041
	void ReceivePlayerJoin(SCMPlayerState* NewPlayer, bool IsAI);// 0x265f078ea041
	void ReceivePlayerCheat(SolarPlayerState* InCheater);// 0x265e078ea041
	void ReceivePlayerCancelJoin(FString PlayerId);// 0x265d078ea041
	void ReceivePlayerBattleEnd(SCMPlayerState* Player, enum OutType);// 0x265c078ea041
	void ReceivePlayerAbnormal(SolarPlayerState* InAbnormalPlayer);// 0x265b078ea041
	void ReceiveOBPlayersChanged();// 0x265a078ea041
	void ReceiveGameModeInit();// 0x2659078ea041
	void ReceiveBattleTick(float InBattleTime, float DeltaTime);// 0x2658078ea041
	void ReceiveBattleEnd();// 0x2657078ea041
	void ReceiveBattleBegin();// 0x2656078ea041
	void OnTeamInTournamentSettled(FString Side, byte TeamID);// 0x2655078ea041
	void OnReceivePlayerLogin(PlayerController* PlayerController);// 0x2654078ea041
	void OnReceivePlayerBattleStart(PlayerController* PlayerController);// 0x2653078ea041
	void OnReceiveBattleStart();// 0x2652078ea041
	void OnPlayerSettled(SCMPlayerState* Player);// 0x2651078ea041
	void OnPlayerOut__DelegateSignature(SCMPlayerState* Player, enum OutType);// 0x2650078ea041
	void OnPlayerOfflineTimeOut(SCMPlayerState* OfflineTimeoutPlayer);// 0x264f078ea041
	void OnPlayerJoin__DelegateSignature(SCMPlayerState* Player);// 0x264e078ea041
	void OnPlayerGiveUp(SCMPlayerState* OfflineTimeoutPlayer);// 0x264d078ea041
	void OnMatchEnd(const int RPCID);// 0x264c078ea041
	void OnDSClose();// 0x264b078ea041
	void OnBotAIDataReady(int AICount);// 0x264a078ea041
	void OnAIJoin__DelegateSignature(SCMPlayerState* BotAI);// 0x2649078ea041
	void NotifyDSBattleOver();// 0x2648078ea041
	void NotifyBotAIDataReady(int AICount);// 0x2647078ea041
	bool IsKillWhenPlayerOut(SolarPlayerState* PlayerState);// 0x2646078ea041
	bool IsEnableLogicComp();// 0x2645078ea041
	int GetCurMapID();// 0x2644078ea041
	void CreateHomeActor(FString Path);// 0x2643078ea041
	bool CheckLogicComponentIsA(class CGMLogicComponent ClassPath);// 0x2642078ea041
	bool ChangePlayerCharacter(SCMPlayerState* Player, int CharacterId, int SkinId);// 0x2641078ea041
	bool ChangeBotAICharacter(SolarPlayerState* Player, int CharacterId, int SkinId);// 0x2640078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SBattleGameMode.SolarGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnPlayerDisconnectedGame;//[Offset: 0x5a8, Size: 0x10]
	delegate OnPlayerReconnectedGame;//[Offset: 0x5b8, Size: 0x10]
	int SettlementStageConfigID;//[Offset: 0x5d0, Size: 0x4]
	void SettlePlayerBattleData(SolarPlayerState* Player);// 0x263f078ea041
	void ReceiveBattleSettlement();// 0x263e078ea041
	void ReceiveBattleOver();// 0x263d078ea041
	void OnPlayerLeaveDSTimeOut(SolarPlayerState* PlayerState);// 0x263c078ea041
	bool IsAutoSettlementWhenKilled();// 0x263b078ea041
	bool IsAllowReconnectGame(SolarPlayerState* Player);// 0x263a078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BPC_WarmGame_BattleRoyale_C.SolarWarmGameComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 0x8]
	BP_Logic_BattleRoyale_C* MainLogic;//[Offset: 0xb8, Size: 0x8]
	SCMPlayerState* RealPlayer;//[Offset: 0xc0, Size: 0x8]
	Vector[] VehiclePos;//[Offset: 0xc8, Size: 0x10]
	bool GuidArrowVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	Vector[] SafeAreaCenter;//[Offset: 0xe0, Size: 0x10]
	Vector[] WeaponPos;//[Offset: 0xf0, Size: 0x10]
	Vector[] ItemPos;//[Offset: 0x100, Size: 0x10]
	SolarCharacter* LocalCharacter;//[Offset: 0x110, Size: 0x8]
	UI_WorldMark_Common_C* WorldMark;//[Offset: 0x118, Size: 0x8]
	Vector SafeCenter;//[Offset: 0x120, Size: 0xc]
	UI_HUD_Notice_Lv3_C* Notice;//[Offset: 0x130, Size: 0x8]
	Margin NoticePadding;//[Offset: 0x138, Size: 0x10]
	float ArrowScale;//[Offset: 0x148, Size: 0x4]
	BP_DirectionArrow_C* DirectionArrow;//[Offset: 0x150, Size: 0x8]
	bool isShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	<int,S_WarmGameConfig> None;//[Offset: 0x160, Size: 0x50]
	<int,SolarBotAIConfig*> TeammatesAIConfig;//[Offset: 0x1b0, Size: 0x50]
	bool bCanAiReviveByItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	SolarBotAIConfig* DefaultAccompanyBotConfig;//[Offset: 0x208, Size: 0x8]
	bool IsWarmGame(int CallFunc_GetWramGameType_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0xc3af07b6a001
	void GetAIPickResult(out const int[] InCharactetIDs, out int OutCharacterID, out int OutSkinId, int SelectedSkin, int cid, S_WarmGameAiConfig[] NewLocalVar, int CallFunc_Array_Length_ReturnValue, int CallFunc__a_GetCharacterIDBySkinID_CharacterID, int CallFunc_Subtract_IntInt_ReturnValue, bool Temp_bool_Variable, int CallFunc_GetWramGameType_ReturnValue, S_WarmGameConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, S_WarmGameAiConfig CallFunc_Array_Get_Item, int CallFunc__a_GetCharacterIDBySkinID_CharacterID, bool CallFunc_Array_Contains_ReturnValue, int K2Node_Select_Default);// 0xc3b007b6a001
	void Create Warm Logic Actor And Exec(out bool Success, Transform CallFunc_MakeTransform_ReturnValue, int CallFunc_GetWramGameType_ReturnValue, bool CallFunc_IsWarmGame_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, S_WarmGameConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_WarmGameLogicBase_C* CallFunc_FinishSpawningActor_ReturnValue);// 0xc3b107b6a001
	void CheckSpAIForWarmGame(out bool SpecialAI, int CallFunc_GetWramGameType_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xc3b207b6a001
	static void [s]SetBotBT(BehaviorTree* BotBehaviorTree, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, BP_Logic_BattleRoyale_C* CallFunc_GetMainLogic_Output_Get, FString CallFunc_GetDisplayName_ReturnValue, bool K2Node_Select_Default, FString CallFunc_Conv_BoolToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map);// 0xc3b307b6a001
	void [c]ShowNotice(bool Visible, FString Text, float Duration, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_HUD_Notice_Lv3_C* K2Node_DynamicCast_AsUI_HUD_Notice_Lv, bool K2Node_DynamicCast_bSuccess);// 0xc37307b6a008
	void [c]RequestNearestPosition(byte Target, float Distance, Vector nearestLocation, Vector PlayerLocation, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess);// 0xc3f007b6a001
	void OnRep_WeaponPos();// 0xc3b607b6a001
	void UpdatePos();// 0xc3b707b6a001
	void [c]CreateWorldMark(Vector Pos, int None, out UI_WorldMark_Common_C* AsUI World Mark Common, SlateBrush K2Node_MakeStruct_SlateBrush, ActorMarkBase* CallFunc_RegisterWorldMarkOnPos_ReturnValue, UI_WorldMark_Common_C* K2Node_DynamicCast_AsUI_World_Mark_Common, bool K2Node_DynamicCast_bSuccess, Image* CallFunc_SpawnObject_ReturnValue);// 0xc3b807b6a001
	SolarCharacter* [c]LocalCharacter(bool CallFunc_IsValid_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue);// 0xc3b907b6a001
	void [c]PlayerHasWeapon(out bool HasWeapon, out bool HasVehicleWeapon, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SolarWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xc3ba07b6a001
	void UpdateArrowDirection(SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, bool CallFunc_IsServer_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, BP_DirectionArrow_C* CallFunc_GetGuidArrow_Output_Get);// 0xc3bb07b6a001
	void UpdateItemPos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_SolarItemSpawner_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_SolarItemSpawner_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xc3bc07b6a001
	void UpdateWeaponPos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SolarGroundPreviewActor*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, SolarGroundPreviewActor* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xc3bd07b6a001
	void GetGuidArrow(out BP_DirectionArrow_C* Output_Get, SolarPlayerCameraManager* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, BP_DirectionArrow_C* CallFunc_FinishSpawningActor_ReturnValue);// 0xc3be07b6a001
	void [C]ShowArrow(bool bNewVisibility, BP_DirectionArrow_C* CallFunc_GetGuidArrow_Output_Get);// 0xc3bf07b6a001
	void UpdateVehiclePos(Vector[] NewLocalVar, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_SolarVehicleSpawner_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_SolarVehicleSpawner_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xc3c007b6a001
	void GetNearestPosition(byte Target, out Vector Location, float Distance, Vector nearestLocation, Vector PlayerLocation, byte Temp_byte_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector[] K2Node_Select_Default, Vector CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0xc3c107b6a001
	void [A]GetPlayBattleCount(out int count);// 0xc3c207b6a001
	static void [ S]Game Mode Special Config(out bool SpecialConfig, out int Order, out bool isB, <int> B_id, <int> A_id, <int> order3, <int> order2, <int> order1, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, <int> K2Node_MakeVariable_MakeVariableOutput, int CallFunc_GetWramGameType_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0xc3c307b6a001
	void [C]PlayerABTest(out bool SpecialConfig);// 0xc3c407b6a001
	void GetMainLogic(out BP_Logic_BattleRoyale_C* Output_Get, bool CallFunc_IsValid_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, BP_Logic_BattleRoyale_C* CallFunc_GetComponentByClass_ReturnValue);// 0xc3c507b6a001
	void ReceiveBeginPlay();// 0xc3c607b6a001
	void ReceiveTick(float DeltaSeconds);// 0xc3c707b6a001
	void OnSystemReady();// 0xc3c807b6a001
	void PlanyerEnterSafeArea(Actor* Actor);// 0xc3c907b6a001
	void PlayerLeaveSafeArea(Actor* Actor);// 0xc3ca07b6a001
	void OnNextSafeAreaSetted(Vector Center, float Radius, float WaitTime, float MoveTime, int Index);// 0xc3cb07b6a001
	void OnRequestReceived(byte Type, Vector Pos);// 0xc3cc07b6a001
	void OnEjectStateChanged(byte State, SolarCharacter* TargetCharacter);// 0x1251107b6a008
	void ConfigFinished();// 0x1250907b6a008
	void CustomEvent();// 0xc3cf07b6a001
	void ExecuteUbergraph_BPC_WarmGame_BattleRoyale(int EntryPoint, bool CallFunc_IsWarmGame_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, const byte[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, const enum[] Temp_byte_Variable, bool CallFunc_IsServer_ReturnValue, int Temp_int_Array_Index_Variable, Actor* K2Node_CustomEvent_Actor, Actor* K2Node_CustomEvent_Actor, delegate K2Node_CreateDelegate_OutputDelegate, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, Vector K2Node_CustomEvent_Center, float K2Node_CustomEvent_Radius, float K2Node_CustomEvent_WaitTime, float K2Node_CustomEvent_MoveTime, int K2Node_CustomEvent_Index, bool CallFunc_IsServer_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc___S_Game_Mode_Special_Config_SpecialConfig, int CallFunc___S_Game_Mode_Special_Config_Order, bool CallFunc___S_Game_Mode_Special_Config_isB, bool CallFunc_IsServer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Pos, UI_WorldMark_Common_C* CallFunc__c_CreateWorldMark_AsUI_World_Mark_Common, bool K2Node_SwitchEnum_CmpSuccess, const <FString,FString> Temp_string_Variable, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, BP_SolarCharacterPlayer_C* K2Node_DynamicCast_AsBP_Solar_Character_Player, bool K2Node_DynamicCast_bSuccess, byte K2Node_CustomEvent_State, SolarCharacter* K2Node_CustomEvent_TargetCharacter, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SolarCharacter* CallFunc__c_LocalCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsLocationInTargetSafeArea_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_CheckSpAIForWarmGame_SpecialAI, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Create_Warm_Logic_Actor_And_Exec_Success, bool CallFunc_IsServer_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, SolarGameModeAIComponent* CallFunc_GetComponentByClass_ReturnValue, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, FString[] CallFunc_Map_Keys_Keys, CGMLogicComponent* CallFunc__S_GetModeMainLogic_ReturnValue, FString CallFunc_Array_Get_Item, const FString[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, SolarCharacter* CallFunc_GetPossessedCharacter_ReturnValue, int CallFunc_GetCharacterID_CharacterID, int CallFunc_GetCharacterID_SkinID, int CallFunc_GetCharacterID_ColorID, Actor* CallFunc_GetOwner_ReturnValue, SolarBotAIConfig* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, SolarBotAIController* K2Node_DynamicCast_AsSolar_Bot_AIController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xffffff8c078ea000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWarmGameComponent.ActorComponent.Object
	bool IsWarmGame();// 0x5f43078ea041
	void GetAIPickResult(out const int[] InCharactetIDs, out int OutCharacterID, out int OutSkinId);// 0x5f42078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_WorldMark_Common_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x480, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x488, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x490, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x498, Size: 0x8]
	int HideDistance;//[Offset: 0x4a0, Size: 0x4]
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0xc66d07b6a001
	static FText Get_Distance_Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0xc66e07b6a001
	void SetIcon(Widget* Content, int None, PanelSlot* CallFunc_AddChild_ReturnValue);// 0xc66f07b6a001
	void PreConstruct(bool IsDesignTime);// 0x2dffba07bda02e
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x14d4a07b6a008
	void ExecuteUbergraph_UI_WorldMark_Common(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, enum K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue);// 0x1972607b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x6465078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8]
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x6469078ea041
	void SetSize(SlateChildSize InSize);// 0x6468078ea041
	void SetPadding(Margin InPadding);// 0x6467078ea041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x6466078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_DirectionArrow_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* FX_G_Mesh_Arrow_Guide_001;//[Offset: 0x230, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x238, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
	void Init(Actor* AttachTarget, float Scale, Vector Position);// 0xc64307b6a001
	void SetVisiblity(bool NewVisiblity);// 0xc63607b6a008
	void UpdateDirection(Rotator Rotation);// 0x121a907b6a008
	static void ExecuteUbergraph_BP_DirectionArrow(int EntryPoint, Actor* K2Node_CustomEvent_AttachTarget, float K2Node_CustomEvent_Scale, Vector K2Node_CustomEvent_Position, Vector CallFunc_MakeVector_ReturnValue, bool K2Node_CustomEvent_NewVisiblity, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, Rotator K2Node_CustomEvent_Rotation, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult);// 0x1746607b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarItemSpawner_C.SolarItemSpawner.SolarMapElementBase.Actor.Object
	StaticMeshComponent* Cube;//[Offset: 0x390, Size: 0x8]
	BillboardComponent* Billboard;//[Offset: 0x398, Size: 0x8]
	SceneComponent* SceneRoot;//[Offset: 0x3a0, Size: 0x8]
	void UserConstructionScript(enum Temp_byte_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, Vector CallFunc_Divide_VectorFloat_ReturnValue, MaterialInterface* K2Node_Select_Default, int K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x2faccb80
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerCameraManager.PlayerCameraManager.Actor.Object
	Actor* OldViewTarget;//[Offset: 0x30a0, Size: 0x8]
	CameraModifier_CameraShakeWithCurve* CachedCameraShakeModWithCurve;//[Offset: 0x30a8, Size: 0x8]
	void OnPlayerGetOnViewTargetVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x55ea078ea041
	MinimalViewInfo GetDebugPOV();// 0x55e9078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraModifier_CameraShakeWithCurve.CameraModifier.Object
	<class CameraShakeWithCurve,CameraShakeWithCurvePool> ShakePoolByClass;//[Offset: 0x48, Size: 0x50]
	CameraShakeWithCurveTemplatePool[] ShakePoolByTemplate;//[Offset: 0x98, Size: 0x10]
	ActiveCameraShakeWithCurve[] ActiveShakes;//[Offset: 0xa8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShakeWithCurve.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bDisableObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	CameraModifier_CameraShakeWithCurve* Modifier;//[Offset: 0x30, Size: 0x8]
	float ShakeTime;//[Offset: 0x38, Size: 0x4]
	RuntimeFloatCurve ShakeCurve;//[Offset: 0x40, Size: 0x88]
	CameraShakeWithCurve_Element*[] ShakeElements;//[Offset: 0xc8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShakeWithCurve_Element.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShakeWithCurvePool
	CameraShakeWithCurve*[] PooledShakes;//[Offset: 0x0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CameraShakeWithCurveTemplatePool
	CameraShakeWithCurve*[] PooledShakes;//[Offset: 0x8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActiveCameraShakeWithCurve
	CameraShakeWithCurve* ShakeInstance;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarVehicleSpawner_C.SolarVehicleSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	None* SolarVehicleSpawnerVis;//[Offset: 0x3f0, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x3f8, Size: 0x8]
	StaticMeshComponent* Cube1;//[Offset: 0x400, Size: 0x8]
	StaticMeshComponent* Cube;//[Offset: 0x408, Size: 0x8]
	SceneComponent* SceneRoot;//[Offset: 0x410, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleSpawner.SolarItemSpawner.SolarMapElementBase.Actor.Object
	int SpawnID;//[Offset: 0x390, Size: 0x4]
	enum VehicleSpawnType;//[Offset: 0x394, Size: 0x1]
	bool bVehicleRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 0x1]
	int VehicleRefreshSecond;//[Offset: 0x398, Size: 0x4]
	bool bVehicleRefreshRand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	bool bVehicleRefreshWaitPreBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 0x1]
	int64 VehicleRefreshCheckRoleDisSquared;//[Offset: 0x3a0, Size: 0x8]
	byte[] VehicleCheckObjectTypes;//[Offset: 0x3a8, Size: 0x10]
	Vector VehicleCheckBoxSize;//[Offset: 0x3b8, Size: 0xc]
	class SolarVehicleSpawnEffect* VehicleSpawnEffectClass;//[Offset: 0x3c8, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NgaiGameModeComponent.GameModeCompBase.ActorComponent.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleRoyaleGameModeAIComp_Custom_C.SBattleRoyaleGameModeAIComp.SolarGameModeAIComponent.GameModeCompBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1b8, Size: 0x8]
	int AllBOT_Num;//[Offset: 0x1c0, Size: 0x4]
	BP_SolarCharacterPlayer_C*[] AllBOT_Falling;//[Offset: 0x1c8, Size: 0x10]
	BP_SolarCharacterPlayer_C* Player;//[Offset: 0x1d8, Size: 0x8]
	bool IsCustomMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	SCMPlayerState*[] AllRealPlayers;//[Offset: 0x1e8, Size: 0x10]
	static void Get All Bot Character and Set Bt Tree(BehaviorTree* BTAsset, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, BP_SolarCharacterPlayer_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_SolarCharacterPlayer_C* CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Controller* CallFunc_GetController_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue, AIController* K2Node_DynamicCast_AsAIController, bool K2Node_DynamicCast_bSuccess, bool CallFunc_RunBehaviorTree_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xc3d207b6a001
	void OnGameModeHandleMatchHasStarted(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, bool CallFunc_OnGameModeHandleMatchHasStarted_bOutSuccess);// 0xc42807b6a00b
	void OnGameModeStartPlay(out bool bOutSuccess, out const GameModeCompBase*[] ComponentCollection, bool CallFunc_OnGameModeStartPlay_bOutSuccess);// 0x1253507b6a008
	void Event_AIBeginPlay();// 0x1255907b6a008
	void MainTick();// 0xc41407b6a001
	static void ExecuteUbergraph_BattleRoyaleGameModeAIComp_Custom(int EntryPoint, BPC_PlayerManager_C* CallFunc__s_GetPlayerManager_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x15ac207b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_CustomRoomManager_BattleRoyale_C.BP_CustomroomManager_C.CustomRoomManager.GameManagerBase.Info.Actor.Object
	void OnPlayerRemovedFromRoom(FString SolarPlayerID, enum reason);// 0x2c078ea0a0
	void OnClientRoomDataReadyLuaCall();// 0xfffffffef5f7fce0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_CustomroomManager_C.CustomRoomManager.GameManagerBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x440, Size: 0x8]
	bool HUD Initialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	UI_CreateRoom_HUD_C* UI_RoomHUD;//[Offset: 0x450, Size: 0x8]
	UI_CreateRoom_Management_Main_C* UI_RoomOperate;//[Offset: 0x458, Size: 0x8]
	byte TeamMemberCount;//[Offset: 0x460, Size: 0x1]
	bool IsLocalPlayerOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 0x1]
	bool TEMP Flag UI Refreshed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 0x1]
	FString[] PlayerPendingRemoval;//[Offset: 0x468, Size: 0x10]
	int TeamCount;//[Offset: 0x478, Size: 0x4]
	int DeathmatchModeGroupID;//[Offset: 0x47c, Size: 0x4]
	int SoloGameModeID;//[Offset: 0x480, Size: 0x4]
	void GetSpawnList(out int[] None, out int[] None, out int[] None, out int[] None, bool Temp_bool_Variable, int[] Temp_int_Variable, bool Temp_bool_Variable, int[] Temp_int_Variable, bool Temp_bool_Variable, int[] Temp_int_Variable, bool Temp_bool_Variable, int[] Temp_int_Variable, int[] CallFunc_GetVehicleTypeSettingLists_OutVehicleBlacklist, int[] CallFunc_GetVehicleTypeSettingLists_OutVehicleWhitelist, int[] K2Node_Select_Default, int[] CallFunc_GetWeaponSettingLists_OutWeaponBlacklist, int[] CallFunc_GetWeaponSettingLists_OutWeaponWhitelist, int[] K2Node_Select_Default, int[] K2Node_Select_Default, int[] K2Node_Select_Default);// 0xf78707b6a001
	void GetModeRoomUIType(out byte NewParam, int CallFunc_GetGameModeGroupID_ReturnValue, int CallFunc_GetGameModeID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0xf78807b6a001
	CustomRoomData GetRoomInfo(CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool CallFunc__S_PlayInEditor_bIsEditor);// 0xf78907b6a001
	void IsPlayerLocalPendingKill(SCMPlayerState* Player, out bool Result, int CallFunc_Array_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0xf78a07b6a001
	static bool IsRoomOwner(const SCMPlayerState* Player, bool Temp_bool_Variable, bool CallFunc_IsRoomOwner_ReturnValue, bool Temp_bool_Variable, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, bool CallFunc__S_PlayInEditor_bIsEditor, bool CallFunc_EqualEqual_ByteByte_ReturnValue, CGMGameplayConfig* CallFunc_GetCGMGameplayConfig_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, BP_ConfigSave_C* CallFunc_GetSavedConfig_AsBP_Config_Save, bool CallFunc_GetSavedConfig_bSuccess, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue);// 0xf78b07b6a001
	void Switch Mgmt UI Display(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue);// 0xf78c07b6a001
	void RemoveRoomUI(bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xf78d07b6a001
	void Get Team Member Count(out int Result, byte Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default);// 0xf78e07b6a001
	static void TEMP Delayed Flag Update(const FString[] Temp_string_Variable, const byte[] Temp_byte_Variable, bool CallFunc_IsRoomHasMinimalSides_ReturnValue, bool CallFunc_IsRoomHasEnoughPlayers_ReturnValue, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, const enum[] K2Node_MakeArray_Array, SCMPlayerState*[] CallFunc_FindPlayers_ReturnValue, int CallFunc_Array_Length_ReturnValue);// 0xf78f07b6a001
	static void PreUpdateOB(FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SCMPlayerState*[] CallFunc_GetOBPlayers_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xf79007b6a001
	void Refresh All Teams on UI(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, byte CallFunc_GetModeRoomUIType_NewParam, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Not_PreBool_ReturnValue, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, SolarTeamInfo* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, TileView* CallFunc_Get_Active_TileView_Result, TileView* CallFunc_Get_Active_TileView_Result, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_CreateRoom_Management_Team_1M_C* CallFunc_Create_ReturnValue, UI_CreateRoom_Management_Team_2M_C* CallFunc_Create_ReturnValue, UI_CreateRoom_Management_Team_4M_C* CallFunc_Create_ReturnValue, int CallFunc_Get_Team_Member_Count_Result, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte K2Node_Select_Default);// 0xf79107b6a001
	static void Init CustomRoom Info(bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool CallFunc__S_PlayInEditor_bIsEditor, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int CallFunc_GetMatchRuleID_ReturnValue, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_MatchRule CallFunc_TryGetRowData_ReturnValue, int K2Node_Select_Default, byte K2Node_Select_Default);// 0xf79207b6a001
	void Get Custom Room Mode(out byte RoomMode, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0xf79307b6a001
	static void Get Mode Name Localization(out int Mode Local ID, out int Group Local ID, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, int CallFunc_GetGameModeID_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, const SolarTablesData_GameModeMain CallFunc_GetRowData_ReturnValue, int K2Node_Select_Default);// 0xf79407b6a001
	void Refresh START in Top HUD(bool CallFunc_IsRoomHasMinimalSides_ReturnValue, bool CallFunc_IsRoomHasEnoughPlayers_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xf79507b6a001
	void Create Room Manager Operate UI(byte CallFunc_GetModeRoomUIType_NewParam, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, byte CallFunc_Get_Custom_Room_Mode_RoomMode, int CallFunc_Conv_Int64ToInt_ReturnValue, int CallFunc_Conv_Int64ToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, int CallFunc_Get_Mode_Name_Localization_Mode_Local_ID, int CallFunc_Get_Mode_Name_Localization_Group_Local_ID, UI_CreateRoom_Management_Main_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Main, bool K2Node_DynamicCast_bSuccess);// 0xf79607b6a001
	void Create Room Manager HUD(SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_IsRoomOwner_ReturnValue, SolarUserWidget* CallFunc__c__Create_Widget_And_Display_ReturnValue, UI_CreateRoom_HUD_C* K2Node_DynamicCast_AsUI_Create_Room_HUD, bool K2Node_DynamicCast_bSuccess);// 0xf79707b6a001
	bool OnGameStart(bool Temp_bool_Variable, FString Temp_string_Variable, FString Temp_string_Variable, bool CallFunc_IsServer_ReturnValue, CGMLogicComponent* CallFunc__s__Get_Logic_Component_Logic_Component, BP_Logic_Framework_C* K2Node_DynamicCast_AsBP_Logic_Framework, bool K2Node_DynamicCast_bSuccess, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xf79807b6a001
	void OnTournamentDealy();// 0xf79907b6a001
	void Manual Trigger Refresh(FString DEBUG Reason);// 0xf79a07b6a001
	void RefreshOB();// 0xf79b07b6a001
	void RefreshRoomData(CustomRoomData RoomData);// 0xf79c07b6a001
	void UnbaindAllEvents();// 0xf79d07b6a001
	void RefreshTeamPlayers(SCMPlayerState* Player);// 0xf79e07b6a001
	void OnClientRoomDataReady();// 0x2fad1630
	void ReceiveBeginPlay();// 0x2dffba07bda02e
	void OnTeamsInfoPostChanged();// 0xd9122093a6652c82
	static void ExecuteUbergraph_BP_CustomroomManager(int EntryPoint, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsServer_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, FString K2Node_CustomEvent_DEBUG_Reason, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, BP_GameState_Framework_C* K2Node_DynamicCast_AsBP_Game_State_Framework, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, CustomRoomData K2Node_CustomEvent_RoomData, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* K2Node_CustomEvent_Player, bool CallFunc_IsInPreparation_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsCustomRoomMode_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc__S_PlayInEditor_bIsEditor, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, CustomRoomData CallFunc_GetRoomInfo_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue);// 0xf7a007b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_HUD_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	UI_Component_Btn_C* Btn_GameStart;//[Offset: 0x408, Size: 0x8]
	UI_Component_Btn_C* Btn_RoomManage;//[Offset: 0x410, Size: 0x8]
	UI_KeyPrompt_C* Panel_Shortcut;//[Offset: 0x418, Size: 0x8]
	UI_KeyPrompt_C* Panel_Shortcut;//[Offset: 0x420, Size: 0x8]
	HorizontalBox* panel_spectators;//[Offset: 0x428, Size: 0x8]
	UI_CreateRoom_HUD_Prize_C* PrizePool;//[Offset: 0x430, Size: 0x8]
	SolarRichTextBlock* Txt_Countdown;//[Offset: 0x438, Size: 0x8]
	SolarTextBlock* Txt_Spectators;//[Offset: 0x440, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_Manage;//[Offset: 0x448, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_Start;//[Offset: 0x450, Size: 0x8]
	bool bIsOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 0x1]
	FString GetModuleName();// 0xf7c107b6a001
	void SetOnwerMode(bool IsOwner, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue);// 0xf7c207b6a001
	void ShowSpectator(bool Show);// 0xf7c307b6a001
	void Construct();// 0xf7c407b6a001
	void Start Ticking();// 0xf7c507b6a001
	void TikTok();// 0xf7c607b6a001
	void BndEvt__UI_Component_Btn_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature();// 0xf7c707b6a001
	void BndEvt__UI_Component_Btn_1_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature();// 0xf7c807b6a001
	void Update Button State(bool Can Start);// 0x16dde07b6a000
	void OnRoomInfoSwitch();// 0xf7ca07b6a001
	void OnStartGame();// 0xf7cb07b6a001
	void Event_RoomInfoSwitch();// 0xf7cc07b6a001
	void Event_GameStart();// 0x6188c0793a100
	void OnShow();// 0x15b9907b6a008
	void OnHide();// 0xf7fa07b6a001
	static void ExecuteUbergraph_UI_CreateRoom_HUD(int EntryPoint, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, byte Temp_byte_Variable, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, byte Temp_byte_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_ListenForInputActionEx_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_ListenForInputActionEx_ReturnValue, bool K2Node_CustomEvent_Can_Start, byte K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsPlatformDesktop_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, bool CallFunc_IsAvailable_Availble, FText CallFunc___________, FString CallFunc_Conv_TextToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xf81107b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_Btn_C.ComponentButtonBaseWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x408, Size: 0x8]
	WidgetAnimation* Anim_Enter;//[Offset: 0x410, Size: 0x8]
	WidgetAnimation* Anim_Remind;//[Offset: 0x418, Size: 0x8]
	WidgetAnimation* Anim_Hold;//[Offset: 0x420, Size: 0x8]
	WidgetAnimation* Anim_Hover;//[Offset: 0x428, Size: 0x8]
	SolarImage* Img_Btn;//[Offset: 0x430, Size: 0x8]
	SolarImage* Img_Icon;//[Offset: 0x438, Size: 0x8]
	SolarImage* img_Mask;//[Offset: 0x440, Size: 0x8]
	SolarImage* Img_Shadow;//[Offset: 0x448, Size: 0x8]
	CanvasPanel* Panel_Press;//[Offset: 0x450, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x458, Size: 0x8]
	SizeBox* Size_Btn;//[Offset: 0x460, Size: 0x8]
	SizeBox* Size_Icon;//[Offset: 0x468, Size: 0x8]
	SolarTextBlock* Text_Btn;//[Offset: 0x470, Size: 0x8]
	NamedSlot* WidgetSlot;//[Offset: 0x478, Size: 0x8]
	byte BtnType;//[Offset: 0x480, Size: 0x1]
	byte BtnState;//[Offset: 0x481, Size: 0x1]
	Vector2D BtnSize;//[Offset: 0x484, Size: 0x8]
	bool IsUseBtnImag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 0x1]
	bool IsUseText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 0x1]
	FString Text;//[Offset: 0x490, Size: 0x10]
	bool IsUseLocID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	int LocID;//[Offset: 0x4a4, Size: 0x4]
	enum PreviewLang;//[Offset: 0x4a8, Size: 0x1]
	delegate OnClicked;//[Offset: 0x4b0, Size: 0x10]
	delegate OnPressed;//[Offset: 0x4c0, Size: 0x10]
	delegate OnReleased;//[Offset: 0x4d0, Size: 0x10]
	bool IsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 0x1]
	Object* Icon;//[Offset: 0x4e8, Size: 0x8]
	Vector2D Icon_Size;//[Offset: 0x4f0, Size: 0x8]
	void StopAnims();// 0xfc3a07b6a001
	void IsAvailable(out bool Availble, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0xfc3d07b6a001
	static void SetBtnTxt(FString NewParam, FText CallFunc_Conv_StringToText_ReturnValue);// 0xfc3c07b6a001
	void SetBtnState(byte State, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x1462d07b6a008
	FString GetLocalText(FString CallFunc_GetLocalText_ReturnValue);// 0xfc3b07b6a001
	void PreConstruct(bool IsDesignTime);// 0x2dffba07bda02e
	void Update(bool IsDesignTime);// 0xffffff8b078ea002
	void SetBtnText(FString None, byte None);// 0x9b4507b6a008
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0xfc3607b6a001
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_7_OnButtonPressedEvent__DelegateSignature();// 0x2dffba07bda02e
	void BndEvt__OperateArea_K2Node_ComponentBoundEvent_8_OnButtonReleasedEvent__DelegateSignature();// 0x2df99650
	void OnLocalLangChangedEx(FString InLang);// 0xffffff8c078ea000
	void ExecuteUbergraph_UI_Component_Btn(int EntryPoint, FString K2Node_Event_InLang, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, bool K2Node_CustomEvent_IsDesignTime, FString K2Node_CustomEvent_____, byte K2Node_CustomEvent_____, FString CallFunc_GetLocalText_ReturnValue, FString K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, enum K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, LinearColor K2Node_Select_Default, Object* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, enum K2Node_Select_Default, LinearColor K2Node_Select_Default, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, enum K2Node_Select_Default);// 0xfc3207b6a001
	void OnReleased__DelegateSignature();// 0xfc3107b6a001
	void OnClicked__DelegateSignature();// 0xfc3307b6a001
	void OnPressed__DelegateSignature();// 0xfd8407b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ComponentButtonBaseWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	SolarButton* OperateArea;//[Offset: 0x400, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarImage.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x140, Size: 0xe0]
	byte FillType;//[Offset: 0x220, Size: 0x1]
	SolarImageProgressInfo ImageProgressInfo;//[Offset: 0x228, Size: 0x20]
	delegate BrushDelegate;//[Offset: 0x248, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x258, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x268, Size: 0x10]
	bool bEnableLocImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	FText ImagePath;//[Offset: 0x280, Size: 0x18]
	int LocTextID;//[Offset: 0x298, Size: 0x4]
	enum PreviewLang;//[Offset: 0x29c, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x2a0, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x2b0, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x2c0, Size: 0x10]
	void UpdateImageAsync(int NewLocTextID);// 0x5334078ea041
	void UpdateImage(int NewLocTextID);// 0x5333078ea041
	void SetOpacity(float InOpacity);// 0x5332078ea041
	void SetImageProgressInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x5331078ea041
	void SetImageProgressByInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x5330078ea041
	void SetImageProgress(float InProgress);// 0x532f078ea041
	void SetImageFillType(byte InImageFillType);// 0x532e078ea041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x532d078ea041
	void SetBrushTintColor(SlateColor TintColor);// 0x532c078ea041
	void SetBrushSize(Vector2D DesiredSize);// 0x532b078ea041
	void SetBrushResourceObject(Object* ResourceObject);// 0x532a078ea041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x5329078ea041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x5328078ea041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x5327078ea041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x5326078ea041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x5325078ea041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x5324078ea041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x5323078ea041
	void SetBrush(out const SlateBrush InBrush);// 0x5322078ea041
	float GetImageProgressByInfo(out const SolarImageProgressInfo InSolarImageProgressInfo);// 0x5321078ea041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x5320078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarImageProgressInfo
	byte ProgressType;//[Offset: 0x0, Size: 0x1]
	byte LineProgressDir;//[Offset: 0x1, Size: 0x1]
	byte QuaterProgressPrivot;//[Offset: 0x2, Size: 0x1]
	byte HalfProgressPrivot;//[Offset: 0x3, Size: 0x1]
	float CircleProgressInitDegree;//[Offset: 0x4, Size: 0x4]
	bool bInvertProgressDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float Progress;//[Offset: 0xc, Size: 0x4]
	Material* Material;//[Offset: 0x10, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x18, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_KeyPrompt_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	Button* BtnKey;//[Offset: 0x268, Size: 0x8]
	Overlay* Overlay;//[Offset: 0x270, Size: 0x8]
	SolarAdapterWidget* Panel_Shortcut;//[Offset: 0x278, Size: 0x8]
	byte None;//[Offset: 0x280, Size: 0x1]
	FString ActionName;//[Offset: 0x288, Size: 0x10]
	byte None;//[Offset: 0x298, Size: 0x1]
	bool bEnableBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1]
	bool bDisableEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 0x1]
	delegate OnClicked;//[Offset: 0x2a0, Size: 0x10]
	bool bEnableInputSettingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	int ActionDescLocID;//[Offset: 0x2b4, Size: 0x4]
	bool bEnableHighResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	void SetActionName(FString InActionName);// 0xf6d707b6a001
	static void RefreshKeyPromptUI(WidgetOverrideParam[] CallFunc_BuildOverrideParams_Array, UserWidget* CallFunc_GetAdapteeWidget_ReturnValue, UI_KeyMappingPrompt_C* K2Node_DynamicCast_AsUI_Key_Mapping_Prompt, bool K2Node_DynamicCast_bSuccess);// 0xf6d807b6a001
	void GetSplitActionName(FString SourceString, out FString NewParam, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue);// 0xf6d907b6a001
	void BuildOverrideActionDescParam(int LocTextID, out WidgetOverrideParam WidgetOverrideParam, WidgetOverrideParam K2Node_MakeStruct_WidgetOverrideParam);// 0xf6da07b6a001
	static void BuildOverrideParams(out const WidgetOverrideParam[] Array, SolarTables_TablesReader* CallFunc__A_GetExcelTableReader_TablesReader, bool CallFunc_EqualEqual_IntInt_ReturnValue, WidgetOverrideParam CallFunc_BuildOverrideActionDescParam_WidgetOverrideParam, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_GetSplitActionName_NewParam, WidgetOverrideParam K2Node_MakeStruct_WidgetOverrideParam, bool CallFunc_TryGetRowData_HasKey, const SolarTablesData_InputMapping CallFunc_TryGetRowData_ReturnValue, WidgetOverrideParam CallFunc_BuildOverrideActionDescParam_WidgetOverrideParam, const WidgetOverrideParam[] K2Node_MakeArray_Array);// 0xf6db07b6a001
	void SetOperationType(byte Type, UserWidget* CallFunc_GetAdapteeWidget_ReturnValue, UI_KeyMappingPrompt_C* K2Node_DynamicCast_AsUI_Key_Mapping_Prompt, bool K2Node_DynamicCast_bSuccess);// 0xf6dc07b6a001
	void PreConstruct(bool IsDesignTime);// 0xf6dd07b6a001
	void BndEvt__BtnKey_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x1499007b6a008
	void ExecuteUbergraph_UI_KeyPrompt(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x1482a07b6a008
	void OnClicked__DelegateSignature();// 0x1495507b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_KeyMappingPrompt_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_Press;//[Offset: 0x408, Size: 0x8]
	Overlay* Empty;//[Offset: 0x410, Size: 0x8]
	Overlay* EmptyDisable;//[Offset: 0x418, Size: 0x8]
	UI_Component_Gamepad_C* Gamepad;//[Offset: 0x420, Size: 0x8]
	HorizontalBox* HorizontalLayout;//[Offset: 0x428, Size: 0x8]
	SizeBox* Icon;//[Offset: 0x430, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x438, Size: 0x8]
	UI_Component_Keyboard_C* Keyboard;//[Offset: 0x440, Size: 0x8]
	WidgetSwitcher* KeySwitcher;//[Offset: 0x448, Size: 0x8]
	UI_Component_Mouse_C* Mouse;//[Offset: 0x450, Size: 0x8]
	Overlay* Overlay_Root;//[Offset: 0x458, Size: 0x8]
	SolarTextBlock* Txt_Hold;//[Offset: 0x460, Size: 0x8]
	TextBlock* Txt_Key;//[Offset: 0x468, Size: 0x8]
	SolarTextBlock* Txt_Shortcut;//[Offset: 0x470, Size: 0x8]
	VerticalBox* VerticalLayOut;//[Offset: 0x478, Size: 0x8]
	byte Style;//[Offset: 0x480, Size: 0x1]
	bool bDisableEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 0x1]
	bool bEnableInputSettingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 0x1]
	FString GetModuleName();// 0xf70707b6a001
	void SetEnableInputSettingHide(bool bEnable);// 0xf70807b6a001
	void SetOperationTypeImpl(byte InType, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0xf70907b6a001
	void RefreshEmptyDisplay(bool bInEmpty, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, HorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue);// 0xf70a07b6a001
	void SetEnableEmptyDispaly(bool bEnable);// 0xf70b07b6a001
	void SetStyle(byte Style, Margin Temp_struct_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, byte Temp_byte_Variable, Margin Temp_struct_Variable, Margin Temp_struct_Variable, Margin Temp_struct_Variable, byte Temp_byte_Variable, PanelWidget* Temp_object_Variable, byte Temp_byte_Variable, Widget* Temp_object_Variable, byte Temp_byte_Variable, Widget* Temp_object_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, enum K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, VerticalBoxSlot* CallFunc_SlotAsVerticalBoxSlot_ReturnValue, Margin K2Node_MakeStruct_Margin, HorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue, Margin K2Node_Select_Default, Margin Temp_struct_Variable, Margin Temp_struct_Variable, byte Temp_byte_Variable, PanelWidget* K2Node_Select_Default, Margin K2Node_Select_Default, Widget* K2Node_Select_Default, Widget* K2Node_Select_Default, PanelSlot* CallFunc_AddChild_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, VerticalBoxSlot* K2Node_DynamicCast_AsVertical_Box_Slot, bool K2Node_DynamicCast_bSuccess, VerticalBoxSlot* K2Node_DynamicCast_AsVertical_Box_Slot, bool K2Node_DynamicCast_bSuccess, HorizontalBoxSlot* K2Node_DynamicCast_AsHorizontal_Box_Slot, bool K2Node_DynamicCast_bSuccess, HorizontalBoxSlot* K2Node_DynamicCast_AsHorizontal_Box_Slot, bool K2Node_DynamicCast_bSuccess);// 0xf70c07b6a001
	void OnChangeAdapterSlotWidgetGameplayTag(out const GameplayTag InGameplayTag, out const FString[] MetaData);// 0xf70d07b6a001
	void OnChangeAdapterSlotWidgetParameters(out const WidgetOverrideParam[] Params);// 0xf70e07b6a001
	void OnLoadAdapterSlotWidgetFinished();// 0xd9122093a6652c82
	void PreConstruct(bool IsDesignTime);// 0x1482807b6a008
	void ExecuteUbergraph_UI_KeyMappingPrompt(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, const GameplayTag K2Node_Event_InGameplayTag, const FString[] K2Node_Event_MetaData, const WidgetOverrideParam[] K2Node_Event_Params, bool K2Node_Event_IsDesignTime, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x148d807b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_Gamepad_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	Image* img_DoubleClick;//[Offset: 0x408, Size: 0x8]
	Image* img_Hold;//[Offset: 0x410, Size: 0x8]
	Image* Img_MainKey;//[Offset: 0x418, Size: 0x8]
	Image* Img_ModifierKey;//[Offset: 0x420, Size: 0x8]
	SolarImage* Img_PlusIcon;//[Offset: 0x428, Size: 0x8]
	Overlay* Overlay_Normal;//[Offset: 0x430, Size: 0x8]
	SizeBox* SizeBox_MainKey;//[Offset: 0x438, Size: 0x8]
	SizeBox* SizeBox_ModifierKey;//[Offset: 0x440, Size: 0x8]
	bool bCustomRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 0x1]
	FString ActionName;//[Offset: 0x450, Size: 0x10]
	float Size;//[Offset: 0x460, Size: 0x4]
	FString GetModuleName();// 0xf72a07b6a001
	void SetMainKeySelection();// 0xf72b07b6a001
	void SetMainKeyNormal();// 0xf72c07b6a001
	void GetGamepadIconByKey(Key InKey, out PaperSprite* GamepadIcon);// 0xf72d07b6a001
	void SetData(Key ModifierKey, Key MainKey, Key LocalMainKey, Key LocalModifierKey, PaperSprite* CallFunc_GetGamepadIconByKey_GamepadIcon, bool CallFunc_EqualEqual_KeyKey_ReturnValue, PaperSprite* CallFunc_GetGamepadIconByKey_GamepadIcon, bool CallFunc_EqualEqual_KeyKey_ReturnValue);// 0xd9122093a6652c82
	void PreConstruct(bool IsDesignTime);// 0x147cb07b6a008
	void ExecuteUbergraph_UI_Component_Gamepad(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x1493307b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_Keyboard_C.SolarComponentKeyWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x2a8, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x2b0, Size: 0x8]
	Image* Img_Bg_Frame;//[Offset: 0x2b8, Size: 0x8]
	Image* Img_Bg_Frame;//[Offset: 0x2c0, Size: 0x8]
	SolarImage* Img_PlusIcon;//[Offset: 0x2c8, Size: 0x8]
	WidgetSwitcher* KeyAndMouseSwitcher;//[Offset: 0x2d0, Size: 0x8]
	UI_Component_Mouse_C* Mouse;//[Offset: 0x2d8, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x2e0, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x2e8, Size: 0x8]
	TextBlock* Txt_Key;//[Offset: 0x2f0, Size: 0x8]
	TextBlock* Txt_Key;//[Offset: 0x2f8, Size: 0x8]
	bool Red;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	bool Yellow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 0x1]
	int Font_Size;//[Offset: 0x304, Size: 0x4]
	Vector2D BG_Size;//[Offset: 0x308, Size: 0x8]
	bool bCustomRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	TextBlock* NewVar;//[Offset: 0x318, Size: 0x8]
	FString GetModuleName();// 0xf74d07b6a001
	void BP_RefreshKeyboardUI(TextBlock* InTxtKey, Image* InImgBg, SizeBox* InSizeBox, Image* LocalImgBg, SizeBox* LocalSizeBox, TextBlock* LocalTxtKey, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue);// 0xf74e07b6a001
	void PreConstruct(bool IsDesignTime);// 0xf72f07b6a001
	void Construct();// 0xaf2d079109ca
	void ExecuteUbergraph_UI_Component_Keyboard(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2dffba07bda02e
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarComponentKeyWidget.UserWidget.Widget.Visual.Object
	FString ActionName;//[Offset: 0x260, Size: 0x10]
	FString KeyBoardText;//[Offset: 0x270, Size: 0x10]
	FString[] KeyBoardTextArray;//[Offset: 0x280, Size: 0x10]
	delegate UpdateKeyboardMappingDelegate;//[Offset: 0x290, Size: 0x10]
	void UpdateKeyboardMappingInternal(FString ModifyActionName);// 0x50b3078ea041
	void OnUpdateKeyboardMapping(out const <FString> ActionNames);// 0x50b2078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_Mouse_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	CanvasPanel* Direction;//[Offset: 0x268, Size: 0x8]
	Image* Img_Mouse;//[Offset: 0x270, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8]
	byte Mouse;//[Offset: 0x280, Size: 0x1]
	bool HUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 0x1]
	FString ActionName;//[Offset: 0x288, Size: 0x10]
	bool bCustomRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	Vector2D Size;//[Offset: 0x29c, Size: 0x8]
	FString GetModuleName();// 0xf75d07b6a001
	void SetData(Key KeySetting, out byte Type, out bool Succeed, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_Key_IsMouseButton_ReturnValue);// 0xf75e07b6a001
	void UpdateImage(byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, bool Temp_bool_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool K2Node_SwitchEnum_CmpSuccess, enum K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default, Object* K2Node_Select_Default);// 0x5b7078ea62b
	void PreConstruct(bool IsDesignTime);// 0x2dffba07bda02e
	void ExecuteUbergraph_UI_Component_Mouse(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x175f807b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_HUD_Prize_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	WidgetAnimation* Anim_Fold_Expanded;//[Offset: 0x268, Size: 0x8]
	WidgetAnimation* Anim_Refresh_Folded;//[Offset: 0x270, Size: 0x8]
	UI_Component_Btn_C* Btn_Details;//[Offset: 0x278, Size: 0x8]
	SolarInputButton* Btn_Expand;//[Offset: 0x280, Size: 0x8]
	SolarInputButton* Btn_Fold;//[Offset: 0x288, Size: 0x8]
	Image* Img_Arrow;//[Offset: 0x290, Size: 0x8]
	Image* Img_Arrow;//[Offset: 0x298, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x2a0, Size: 0x8]
	Image* img_Btn_Bg;//[Offset: 0x2a8, Size: 0x8]
	Image* img_Btn_Bg;//[Offset: 0x2b0, Size: 0x8]
	Image* img_ExpandedBg;//[Offset: 0x2b8, Size: 0x8]
	Image* img_PlayerPrize;//[Offset: 0x2c0, Size: 0x8]
	Image* img_PlayerPrize;//[Offset: 0x2c8, Size: 0x8]
	Image* img_PlayerPrize;//[Offset: 0x2d0, Size: 0x8]
	Image* img_Prize;//[Offset: 0x2d8, Size: 0x8]
	Image* Img_Refresh_Light;//[Offset: 0x2e0, Size: 0x8]
	Image* Img_Refresh_Wipes;//[Offset: 0x2e8, Size: 0x8]
	WidgetSwitcher* Switcher_Prize;//[Offset: 0x2f0, Size: 0x8]
	SolarTextBlock* Txt_Prize;//[Offset: 0x2f8, Size: 0x8]
	SolarTextBlock* Txt_Prize;//[Offset: 0x300, Size: 0x8]
	SolarTextBlock* Txt_Prize;//[Offset: 0x308, Size: 0x8]
	SolarTextBlock* Txt_Prize;//[Offset: 0x310, Size: 0x8]
	SolarTextBlock* Txt_PrizePool;//[Offset: 0x318, Size: 0x8]
	int PrizeType;//[Offset: 0x320, Size: 0x4]
	FString GetModuleName();// 0xfa8b07b6a001
	static void SetPrizeType(int PrizeType, int Temp_int_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, Object* Temp_object_Variable, Object* Temp_object_Variable, int Temp_int_Variable, Object* K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, int Temp_int_Variable, Object* K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int Temp_int_Variable, LinearColor K2Node_Select_Default);// 0x1567707b6a008
	void PreConstruct(bool IsDesignTime);// 0x16e9f07b6a008
	void ExecuteUbergraph_UI_CreateRoom_HUD_Prize(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2dffba07bda02e
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SolarVirtualInput VirtualActionInput;//[Offset: 0x5c8, Size: 0x20]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVirtualInput
	enum InputBindType;//[Offset: 0x0, Size: 0x1]
	Key VirtualKey;//[Offset: 0x8, Size: 0x18]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Main_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_OB_Exit;//[Offset: 0x408, Size: 0x8]
	WidgetAnimation* Anim_OB_Enter;//[Offset: 0x410, Size: 0x8]
	WidgetAnimation* Enter_Anim;//[Offset: 0x418, Size: 0x8]
	UI_CreateRoom_Mangement_Btn_C* Btn_Fill;//[Offset: 0x420, Size: 0x8]
	SolarButton* Btn_Fill1;//[Offset: 0x428, Size: 0x8]
	UI_CreateRoom_Mangement_Btn_C* Btn_Invite;//[Offset: 0x430, Size: 0x8]
	SolarButton* Btn_Invite1;//[Offset: 0x438, Size: 0x8]
	UI_CreateRoom_Mangement_Btn_C* Btn_Invite2;//[Offset: 0x440, Size: 0x8]
	UI_CreateRoom_Mangement_Btn_C* Btn_Random;//[Offset: 0x448, Size: 0x8]
	SolarButton* Btn_Random1;//[Offset: 0x450, Size: 0x8]
	UI_Component_Btn_C* Btn_Setting;//[Offset: 0x458, Size: 0x8]
	SolarButton* Btn_SpectateList;//[Offset: 0x460, Size: 0x8]
	UI_Component_Btn_C* Btn_StartGame;//[Offset: 0x468, Size: 0x8]
	Button* Button_BanSwap;//[Offset: 0x470, Size: 0x8]
	SolarCheckBox* Guest_Invite;//[Offset: 0x478, Size: 0x8]
	SolarCheckBox* Guest_Swap;//[Offset: 0x480, Size: 0x8]
	HorizontalBox* HorizontalBox_SubGameModeInfo;//[Offset: 0x488, Size: 0x8]
	Overlay* MessageBox;//[Offset: 0x490, Size: 0x8]
	UI_Component_Option_C* Option_Invite;//[Offset: 0x498, Size: 0x8]
	UI_Component_Option_C* Option_Swap;//[Offset: 0x4a0, Size: 0x8]
	CanvasPanel* Panel_Guest;//[Offset: 0x4a8, Size: 0x8]
	CanvasPanel* Panel_Homeowner;//[Offset: 0x4b0, Size: 0x8]
	CanvasPanel* panel_Spectate;//[Offset: 0x4b8, Size: 0x8]
	ParticleSystemWidget* Par_Spark;//[Offset: 0x4c0, Size: 0x8]
	SolarRichTextBlock* RichText_Members;//[Offset: 0x4c8, Size: 0x8]
	UI_CreateRoom_Management_Solo_C* Solo;//[Offset: 0x4d0, Size: 0x8]
	WidgetSwitcher* Switcher_Mode;//[Offset: 0x4d8, Size: 0x8]
	UI_CreateRoom_Management_TDM_C* TDM;//[Offset: 0x4e0, Size: 0x8]
	TileView* TileView_Player_Info_1M;//[Offset: 0x4e8, Size: 0x8]
	TileView* TileView_Player_Info_2M;//[Offset: 0x4f0, Size: 0x8]
	TileView* TileView_Player_Info_4M;//[Offset: 0x4f8, Size: 0x8]
	SolarTextBlock* Txt_Countdown;//[Offset: 0x500, Size: 0x8]
	SolarTextBlock* Txt_Map;//[Offset: 0x508, Size: 0x8]
	SolarTextBlock* Txt_Members;//[Offset: 0x510, Size: 0x8]
	SolarTextBlock* Txt_Mode;//[Offset: 0x518, Size: 0x8]
	SolarTextBlock* Txt_Password;//[Offset: 0x520, Size: 0x8]
	SolarTextBlock* Txt_RankedMatch;//[Offset: 0x528, Size: 0x8]
	SolarTextBlock* Txt_Room_ID;//[Offset: 0x530, Size: 0x8]
	SolarRichTextBlock* Txt_Viewer_Num;//[Offset: 0x538, Size: 0x8]
	UI_Component_ReturnBtn_C* UI_Component_ReturnBtn;//[Offset: 0x540, Size: 0x8]
	UI_CreateRoom_SocialList_C* UI_CreateRoom_SocialList;//[Offset: 0x548, Size: 0x8]
	UI_CreateRoom_Management_Team_OB_C* UI_Management_OB;//[Offset: 0x550, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_Down;//[Offset: 0x558, Size: 0x8]
	byte Team_Member_Count;//[Offset: 0x560, Size: 0x1]
	int Max Member Count;//[Offset: 0x564, Size: 0x4]
	FString Selected Player;//[Offset: 0x568, Size: 0x10]
	int SelcetedPos;//[Offset: 0x578, Size: 0x4]
	FString SelectedTeam;//[Offset: 0x580, Size: 0x10]
	UI_CreateRoom_Management_Player_Info_C* SelectedInfoWidget;//[Offset: 0x590, Size: 0x8]
	FString ToDeletePlayer;//[Offset: 0x598, Size: 0x10]
	int MaxOBPlayerCount;//[Offset: 0x5a8, Size: 0x4]
	bool SelectedOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	int NowOBPlayerCount;//[Offset: 0x5b0, Size: 0x4]
	UI_CreateRoom_Management_Team_C*[] All Team Widgets;//[Offset: 0x5b8, Size: 0x10]
	Object* _TileViewInitItem;//[Offset: 0x5c8, Size: 0x8]
	Object* _TileViewInitWidget;//[Offset: 0x5d0, Size: 0x8]
	delegate OnEnableInviteChanged;//[Offset: 0x5d8, Size: 0x10]
	byte RoomMode;//[Offset: 0x5e8, Size: 0x1]
	byte ModeRoomUIType;//[Offset: 0x5e9, Size: 0x1]
	FString GetModuleName();// 0xf7fb07b6a001
	void SetModeRoomUI(byte ModeRoomUIType, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Conv_ByteToInt_ReturnValue, UI_CreateRoom_Management_Team_C*[] CallFunc_GetTeams_Teams, UI_CreateRoom_Management_Team_C*[] CallFunc_GetTeams_Teams);// 0xf7fc07b6a001
	void OnConfirmKickPlayerOut(SCMPlayerState* Player, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue);// 0xf7fd07b6a001
	void RestoreSelectedWidgets(bool CallFunc_IsValid_ReturnValue);// 0xf7fe07b6a001
	void RestoreSelectedParams();// 0xf7ff07b6a001
	void CallLuaShowKickConfirmWindow(SCMPlayerState* PS);// 0xf80007b6a001
	void IsGuestSwapOpen(out bool bIsOpen, bool CallFunc_IsChecked_ReturnValue);// 0xf80107b6a001
	void CallLuaOnGuestInviteChanged(bool bIsChecked);// 0xf80207b6a001
	void RefreshGuestData(bool bEnableSwap, bool bEnableInvite, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_IsChecked_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0xf80307b6a001
	void Get Active TileView(out TileView* Result, byte Temp_byte_Variable, TileView* K2Node_Select_Default);// 0xf80407b6a001
	static void Trim Pending Removal Players(out SCMPlayerState*[] Player List, out SCMPlayerState*[] Trimmed Player List, SCMPlayerState*[] LOCAL Player List, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsPlayerLocalPendingKill_Result, int CallFunc_Array_Add_ReturnValue);// 0xf80507b6a001
	void PlayEnter(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0xf80607b6a001
	void Set Room Mode(byte RoomMode, bool K2Node_SwitchEnum_CmpSuccess);// 0xf80707b6a001
	void GetPlayerByIDAndOB(FString PlayerId, bool bIsOB, out SCMPlayerState* Player, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SCMPlayerState* CallFunc_FindOBPlayerByPlayerID_ReturnValue);// 0xf80807b6a001
	static void RefreshOB(SCMPlayerState*[] CallFunc_GetOBPlayers_ReturnValue, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, const <FString,FString> K2Node_MakeMap_Map, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xf80907b6a001
	static void Init OB(int OBPlayerCount, bool CallFunc_Greater_IntInt_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0xf80a07b6a001
	void Update Button State(bool Can Start, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte K2Node_Select_Default);// 0xf80b07b6a001
	void State Team();// 0xf80c07b6a001
	void Init Room Mgmt UI(byte Team Type, FString Master Name, FString Room PW, FString Room ID, int ModeName LocalID, int ModeGroup LocalID, int MaxOBPlayerCount, byte RoomMode, byte ModeRoomUIType, FText Temp_text_Variable, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText Temp_text_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, const <FString,FString> Temp_string_Variable, const <FString,FString> Temp_string_Variable, bool K2Node_SwitchEnum_CmpSuccess, FText Temp_text_Variable, byte Temp_byte_Variable, FText K2Node_Select_Default, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, enum K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetNoticeFormatText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xf80d07b6a001
	void PreConstruct(bool IsDesignTime);// 0xf80e07b6a001
	void Start Ticking();// 0xf80f07b6a001
	void TikTok();// 0xf81007b6a001
	void OnMemberCountChanged(int NowCount, int MaxCount, bool Can Start);// 0xf7cf07b6a001
	void BndEvt__Btn_StartGame_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature();// 0xf7a607b6a00b
	void BndEvt__TileView_Player_Info_K2Node_ComponentBoundEvent_2_OnListEntryInitializedDynamic__DelegateSignature(Object* Item, UserWidget* Widget);// 0xf81307b6a001
	void BndEvt__TileView_Player_Info_K2Node_ComponentBoundEvent_4_OnListEntryGeneratedDynamic__DelegateSignature(UserWidget* Widget);// 0xf81407b6a001
	void InitDeletePanel();// 0xf81507b6a001
	void ALL_WIDGET Selection(bool Selection is OB, UI_CreateRoom_Management_Player_Info_C* SelectedInfoWidget);// 0xf81607b6a001
	void ALL_WIDGET Deselection();// 0xf81707b6a001
	void ALL_WIDGET Update();// 0xf81807b6a001
	void BndEvt__TileView_Player_Info_2M_K2Node_ComponentBoundEvent_5_OnListEntryInitializedDynamic__DelegateSignature(Object* Item, UserWidget* Widget);// 0xf81907b6a001
	void BndEvt__TileView_Player_Info_4M_K2Node_ComponentBoundEvent_6_OnListEntryInitializedDynamic__DelegateSignature(Object* Item, UserWidget* Widget);// 0xf81a07b6a001
	void BndEvt__TileView_Player_Info_2M_K2Node_ComponentBoundEvent_7_OnListEntryGeneratedDynamic__DelegateSignature(UserWidget* Widget);// 0xf81b07b6a001
	void BndEvt__TileView_Player_Info_4M_K2Node_ComponentBoundEvent_8_OnListEntryGeneratedDynamic__DelegateSignature(UserWidget* Widget);// 0xf81c07b6a001
	void BndEvt__Option_Swap_K2Node_ComponentBoundEvent_12_OnOptionCheckStateChanged__DelegateSignature(bool bIsChecked);// 0xf81d07b6a001
	void BndEvt__Option_Invite_K2Node_ComponentBoundEvent_13_OnOptionCheckStateChanged__DelegateSignature(bool bIsChecked);// 0xf81e07b6a001
	void BndEvt__Button_BanSwap_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();// 0xf81f07b6a001
	void BndEvt__Guest_Invite_K2Node_ComponentBoundEvent_9_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0xf82007b6a001
	void Side_WIDGET Update(FString Side);// 0xf82107b6a001
	void BndEvt__UI_Component_ReturnBtn_K2Node_ComponentBoundEvent_11_OnClicked__DelegateSignature();// 0xf82207b6a001
	void OnShow();// 0xf82307b6a001
	void OnEvnetCloseAction();// 0xf82407b6a001
	void ReceiveHide();// 0xf82507b6a001
	void BindTeams(out const UI_CreateRoom_Management_Team_C*[] Teams);// 0xf82607b6a001
	void BindSimpleTeam(UI_CreateRoom_Management_Team_C* Team);// 0xf82707b6a001
	void OB UI EventBinding();// 0xf82807b6a001
	void Trigger Flag Update();// 0xf82907b6a001
	void OnDeleteClicked(FString Clicked Player, FString Clicked Side);// 0x16ded07b6a008
	void OnSlotClicked(FString Clicked Player, FString Clicked Side, bool Is OB, int PosIndex, UI_CreateRoom_Management_Team_C* TeamWidget, UI_CreateRoom_Management_Player_Info_C* InfoWidget);// 0xf82b07b6a001
	static void ExecuteUbergraph_UI_CreateRoom_Management_Main(int EntryPoint, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool K2Node_Event_IsDesignTime, int K2Node_CustomEvent_NowCount, int K2Node_CustomEvent_MaxCount, bool K2Node_CustomEvent_Can_Start, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, Object* K2Node_ComponentBoundEvent_Item, UserWidget* K2Node_ComponentBoundEvent_Widget, UserWidget* K2Node_ComponentBoundEvent_Widget, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_CustomEvent_Selection_is_OB, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_SelectedInfoWIdget, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UI_CreateRoom_Management_Team_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Team, bool K2Node_DynamicCast_bSuccess, UI_CreateRoom_Management_Team_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Team, bool K2Node_DynamicCast_bSuccess, Object* K2Node_ComponentBoundEvent_Item, UserWidget* K2Node_ComponentBoundEvent_Widget, Object* K2Node_ComponentBoundEvent_Item, UserWidget* K2Node_ComponentBoundEvent_Widget, UI_CreateRoom_Management_Team_C* K2Node_DynamicCast_AsUI_Create_Room_Management_Team, bool K2Node_DynamicCast_bSuccess, UserWidget* K2Node_ComponentBoundEvent_Widget, UserWidget* K2Node_ComponentBoundEvent_Widget, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_ComponentBoundEvent_bIsChecked, FString K2Node_CustomEvent_Side, int Temp_int_Array_Index_Variable, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_Less_IntInt_ReturnValue, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, FText CallFunc___________, bool K2Node_SwitchEnum_CmpSuccess, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, FString CallFunc_GetLocalText_ReturnValue, FString CallFunc_GetLocalText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, const UI_CreateRoom_Management_Team_C*[] K2Node_CustomEvent_Teams, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UI_CreateRoom_Management_Team_C* K2Node_CustomEvent_Team, SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo* CallFunc_GetTeamByName_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, SCMPlayerState*[] CallFunc_GetSCMPlayerStateTeamMembers_OutTeamMembers, SCMPlayerState*[] CallFunc_Trim_Pending_Removal_Players_Trimmed_Player_List, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString K2Node_CustomEvent_Clicked_Player, FString K2Node_CustomEvent_Clicked_Side, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_CustomEvent_Clicked_Player, FString K2Node_CustomEvent_Clicked_Side, bool K2Node_CustomEvent_Is_OB, int K2Node_CustomEvent_PosIndex, UI_CreateRoom_Management_Team_C* K2Node_CustomEvent_TeamWidget, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_InfoWidget, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, SCMPlayerState* CallFunc_GetPlayerByIDAndOB_Player, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Loop_Counter_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_ListenForInputActionEx_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_BooleanAND_ReturnValue, UI_CreateRoom_Management_Team_C* CallFunc_Array_Get_Item);// 0x128210790dfc7
	void OnEnableInviteChanged__DelegateSignature(bool bEnable);// 0x197fa078ea001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	bool Team_Owner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 0x1]
	FString TeamName;//[Offset: 0x410, Size: 0x10]
	FString[] SolarPlayerID;//[Offset: 0x420, Size: 0x10]
	byte Initial State;//[Offset: 0x430, Size: 0x1]
	bool HUD Initialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 0x1]
	bool bIsOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x432, Size: 0x1]
	UI_CreateRoom_Management_Player_Info_C*[] Player Info Widget List;//[Offset: 0x438, Size: 0x10]
	int MaxOBCount;//[Offset: 0x448, Size: 0x4]
	delegate OnSlotClicked;//[Offset: 0x450, Size: 0x10]
	delegate OnDeleteClicked;//[Offset: 0x460, Size: 0x10]
	delegate OnTeamUpdated;//[Offset: 0x470, Size: 0x10]
	FString Room Master Player ID;//[Offset: 0x480, Size: 0x10]
	byte RoomMode;//[Offset: 0x490, Size: 0x1]
	void IsPreJobInThePos(out SCMPlayerState*[] PreJob, int Pos, out bool _Have, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2dffba07bda02e
	void IsPlayerInThePos(out SCMPlayerState*[] PS, int Pos, out bool _Have, out SCMPlayerState* _OutPS, bool _IsHave, SCMPlayerState* _PS, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x15c1307b6a008
	void CanBeSelected(FString SelectedPlayer, out bool bResult, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xf89407b6a001
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0x15c1007b6a008
	void InitOBCount(int count, byte RoomMode, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Texture2D* CallFunc_Get_Portrait_from_Avatar_ID_Portrait_Texture, int CallFunc_Array_Length_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x21509078ea041
	void Try Update Team Widget(out SCMPlayerState*[] Updated Player List, out UI_CreateRoom_Management_Player_Info_C*[] Player Info Widget List, SCMPlayerState* _CACHE_PS, bool _CACHE_Have, bool _CACHE_IsPreJoin, int _CACHE_PreJoinedNum, int _CACHE_PosInTeam, bool _CACHE Is Owner, FString _CACHE Player ID, FText _CACHE Player Name, bool Have New Player, FString[] Player ID Array, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, SCMPlayerState* CallFunc_Array_Get_Item, FString CallFunc_GetTeamName_ReturnValue, FString CallFunc_GetTeamName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsPreJoinPlayer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool Temp_bool_Variable, byte Temp_byte_Variable, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, FString Temp_string_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, SolarTextBlock* CallFunc_Get_SideText_by_Panel_Target_Panel, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Len_ReturnValue, bool K2Node_Select_Default, int Temp_int_Variable, FString K2Node_Select_Default, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsPreJoinPlayer_ReturnValue, bool Temp_bool_Variable, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_IsPlayerInThePos__Have, SCMPlayerState* CallFunc_IsPlayerInThePos__OutPS, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, FString CallFunc_SelectString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Find_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0xf89707b6a001
	void Get SideText by Panel(out SolarTextBlock* Target Panel);// 0xf89807b6a001
	void Init Data(FString Team Name, byte Init State);// 0xf89907b6a001
	void Set State(bool Team Owner, bool Locked, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, Widget* CallFunc_Get_UI_Refs_from_Panel_Horizontal_Box_Ref, WidgetSwitcher* CallFunc_Get_UI_Refs_from_Panel_WidgetSwitcher_IsOwner, bool CallFunc_IsValid_ReturnValue, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0xf89a07b6a001
	void BP_OnEntryReleased();// 0xf89b07b6a001
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0xf89c07b6a001
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0xf89d07b6a001
	void OnListItemObjectSet(Object* ListItemObject);// 0xf89e07b6a001
	void PreConstruct(bool IsDesignTime);// 0xf89f07b6a001
	void Construct();// 0xf8a007b6a001
	void Update Team UI(out const SCMPlayerState*[] Team Players);// 0xf8a107b6a001
	void Do Deselection();// 0xf8a207b6a001
	void Portrait Clicked(FString Solar Player ID, int PosIndex, UI_CreateRoom_Management_Player_Info_C* InfoWidget);// 0xf8a307b6a001
	void Delete Clicked(FString Solar Player ID);// 0xf8a407b6a001
	void Do Selection(bool SelectedOB, UI_CreateRoom_Management_Player_Info_C* SelectedInfoWidget, FString SelectedSide);// 0xf8a507b6a001
	void Init OB UI();// 0x2df94fb0
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team(int EntryPoint, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool K2Node_Event_bIsExpanded, bool K2Node_Event_bIsSelected, Object* K2Node_Event_ListItemObject, bool K2Node_Event_IsDesignTime, const SCMPlayerState*[] K2Node_CustomEvent_Team_Players, FString K2Node_CustomEvent_Solar_Player_ID, int K2Node_CustomEvent_PosIndex, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_InfoWidget, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_CustomEvent_Solar_Player_ID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_CustomEvent_SelectedOB, UI_CreateRoom_Management_Player_Info_C* K2Node_CustomEvent_SelectedInfoWIdget, FString K2Node_CustomEvent_SelectedSide, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xf8d507b6a001
	void OnTeamUpdated__DelegateSignature();// 0x15c1207b6a008
	void OnDeleteClicked__DelegateSignature(FString Clicked Player, FString Clicked Side);// 0x15c0c07b6a008
	void OnSlotClicked__DelegateSignature(FString Clicked Player, FString Clicked Side, bool Is OB, int PosIndex, UI_CreateRoom_Management_Team_C* TeamWidget, UI_CreateRoom_Management_Player_Info_C* InfoWidget);// 0x2df95e10
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Player_Info_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	Button* Btn_Delete;//[Offset: 0x408, Size: 0x8]
	Button* Btn_Portrait;//[Offset: 0x410, Size: 0x8]
	SolarImage* Img_Frame;//[Offset: 0x418, Size: 0x8]
	SolarImage* Img_Owner;//[Offset: 0x420, Size: 0x8]
	SolarImage* Img_Portrait;//[Offset: 0x428, Size: 0x8]
	SolarImage* Img_Selected;//[Offset: 0x430, Size: 0x8]
	Overlay* Overlay_Change;//[Offset: 0x438, Size: 0x8]
	Overlay* Overlay_Closed;//[Offset: 0x440, Size: 0x8]
	CanvasPanel* Overlay_Delete;//[Offset: 0x448, Size: 0x8]
	Overlay* Overlay_Locked;//[Offset: 0x450, Size: 0x8]
	Overlay* Overlay_Owner;//[Offset: 0x458, Size: 0x8]
	Overlay* Overlay_Portrait;//[Offset: 0x460, Size: 0x8]
	Overlay* overlay_yourself;//[Offset: 0x468, Size: 0x8]
	CanvasPanel* Panel_Name;//[Offset: 0x470, Size: 0x8]
	SolarTextBlock* Txt_PlayerName;//[Offset: 0x478, Size: 0x8]
	SolarTextBlock* Txt_YourSelf;//[Offset: 0x480, Size: 0x8]
	UI_Anim_Waiting_C* UI_Anim_Waiting;//[Offset: 0x488, Size: 0x8]
	UI_Component_PlayerHead_C* UI_Component_PlayerHead;//[Offset: 0x490, Size: 0x8]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	bool Selected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 0x1]
	bool Owner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 0x1]
	bool Change_Btn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49b, Size: 0x1]
	bool Delete_Btn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	FString Current_Player_ID;//[Offset: 0x4a0, Size: 0x10]
	UI_CreateRoom_Management_Team_C* Team UI Ref;//[Offset: 0x4b0, Size: 0x8]
	bool Yourself;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8, Size: 0x1]
	bool Closed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 0x1]
	bool Waiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 0x1]
	int PosIndex;//[Offset: 0x4bc, Size: 0x4]
	byte RoomMode;//[Offset: 0x4c0, Size: 0x1]
	bool IsHaveName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 0x1]
	FString GetModuleName();// 0xf8fc07b6a001
	void IsSoloMode(out bool bIsSoloMode, CustomRoomManager* CallFunc_GetCustomRoomManager_ReturnValue, BP_CustomroomManager_C* K2Node_DynamicCast_AsBP_Customroom_Manager, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetModeRoomUIType_NewParam, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0xf8fd07b6a001
	void RestoreSelcetion();// 0xf8fe07b6a001
	void SetSelectedState(bool bSelected, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0xf8ff07b6a001
	void SetDeleteState(bool bDelete, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0xf90007b6a001
	void SetChangeState(bool bChange, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0xf90107b6a001
	void RefreshState(bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default, bool K2Node_Select_Default);// 0xf90207b6a001
	void CallLuaRefreshByPS(SCMPlayerState* PS);// 0xf90307b6a001
	void GetClickedEnable(out bool Enable, bool CallFunc_IsSoloMode_bIsSoloMode, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0xf90407b6a001
	void Setup State(bool Locked, bool Selected, bool Owner, bool Change_Btn, bool Delete_Btn, bool Yourself, bool Closed, bool Waiting);// 0xf90507b6a001
	void BP_OnEntryReleased();// 0xf90607b6a001
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0xf90707b6a001
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0xf90807b6a001
	void OnListItemObjectSet(Object* ListItemObject);// 0xf90907b6a001
	void PreConstruct(bool IsDesignTime);// 0xf90a07b6a001
	void BndEvt__Btn_Portrait_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xde4d07b6a001
	void BndEvt__Btn_Delete_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x1427a07b6a008
	void ExecuteUbergraph_UI_CreateRoom_Management_Player_Info(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, bool K2Node_Event_bIsExpanded, bool K2Node_Event_bIsSelected, Object* K2Node_Event_ListItemObject, bool K2Node_Event_IsDesignTime, bool CallFunc_GetClickedEnable_Enable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, CustomRoomData CallFunc_GetCustomRoomData_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x143d007b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Anim_Waiting_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_Loop;//[Offset: 0x408, Size: 0x8]
	void PreConstruct(bool IsDesignTime);// 0x2537c078ea041
	void Construct();// 0xfffdff8d078ea000
	void ExecuteUbergraph_UI_Anim_Waiting(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime);// 0xf89607b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_PlayerHead_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	SolarButton* Btn_ShowCard;//[Offset: 0x408, Size: 0x8]
	CanvasPanel* Canvas_Frame;//[Offset: 0x410, Size: 0x8]
	SolarImageURL* Img_Avatar;//[Offset: 0x418, Size: 0x8]
	Image* Img_AvatarFrame;//[Offset: 0x420, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x428, Size: 0x8]
	Image* Img_BGLine;//[Offset: 0x430, Size: 0x8]
	Image* Img_Empty;//[Offset: 0x438, Size: 0x8]
	Image* Img_Gender;//[Offset: 0x440, Size: 0x8]
	Image* Img_Gender_Bg;//[Offset: 0x448, Size: 0x8]
	Image* Img_Hover;//[Offset: 0x450, Size: 0x8]
	Image* Img_Social;//[Offset: 0x458, Size: 0x8]
	Overlay* Overlay_Normal;//[Offset: 0x460, Size: 0x8]
	CanvasPanel* Panel_FrameAnim;//[Offset: 0x468, Size: 0x8]
	SizeBox* Size;//[Offset: 0x470, Size: 0x8]
	SizeBox* Size;//[Offset: 0x478, Size: 0x8]
	SizeBox* Size_Avatar;//[Offset: 0x480, Size: 0x8]
	SizeBox* Size_Vip;//[Offset: 0x488, Size: 0x8]
	UI_Vip_Icon_Type_C* UI_Vip;//[Offset: 0x490, Size: 0x8]
	bool ShowBusinessCardBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	delegate OnClicked;//[Offset: 0x4a0, Size: 0x10]
	delegate OnReleased;//[Offset: 0x4b0, Size: 0x10]
	bool IsNonuseFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 0x1]
	bool Empty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 0x1]
	byte Social;//[Offset: 0x4c2, Size: 0x1]
	bool GenderOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c3, Size: 0x1]
	byte Gender;//[Offset: 0x4c4, Size: 0x1]
	float Size;//[Offset: 0x4c8, Size: 0x4]
	bool Vip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 0x1]
	byte StateHD;//[Offset: 0x4cd, Size: 0x1]
	bool IsCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ce, Size: 0x1]
	void OnURLDownloadFinish_27D8F2C308DBD6502601A92EEF722CDF(bool bSuccess);// 0x1a48c07b6a001
	void OnClicked_27D75FE508DBD6502601A7F8EF722CC1();// 0x2131407b6a001
	void OnURLDownloadFinish_27D6F3CA08DBD6502601A104EF722C0E(bool bSuccess);// 0x2691507b6a008
	void OnClicked_27D5185908DBD65026019ED4EF722BD7();// 0x1224407b6a008
	void OnURLDownloadFinish_27D0EFD608DBD650260167A2EF722651(bool bSuccess);// 0xd9122093a6652c82
	void OnClicked_27CF304008DBD65026016612EF722629();// 0xffffffff4c2847a0
	void OnURLDownloadFinish_27CE45D708DBD65026015DB6EF722554(bool bSuccess);// 0xd9122093a6652c82
	void OnClicked_27CD969C08DBD65026015B86EF72251C();// 0x1bcd707b6a001
	void OnURLDownloadFinish_27C872BD08DBD65026010A3CEF721CFA(bool bSuccess);// 0xb8bd07b6a008
	void OnClicked_27C74F7208DBD650260108E8EF721CD9();// 0x1c8b3078ea001
	void OnURLDownloadFinish_27C6ABD108DBD650260101C2EF721C21(bool bSuccess);// 0xffffff8f078ea002
	void OnClicked_27C5B97F08DBD6502600FEACEF721BD4();// 0x38ffbc07bda065
	void SetAvatarCopy(int AvatarID, FString AvatarUrl);// 0x231dc07b6a008
	void SetVipTypeCopy(byte VipType, int CallFunc_Conv_ByteToInt_ReturnValue);// 0xd9122093a6652c82
	void RefreshByPSCopy(SolarPlayerState* PS, bool bWithoutGender);// 0xd9122093a6652c82
	void ForceShowFrameCopy(int FrameID);// 0x2864407b6a008
	void OnSolarUIOpened();// 0x1c861078ea001
	void OnSolarUIClosed();// 0x2dffba07bda02e
	void ConstructCopy();// 0x2dffba07bda02e
	void OnInitialized();// 0x1715107b6a000
	void Destruct();// 0x283ab07b6a008
	FString GetModuleName();// 0xf94d07b6a001
	void ForceShowFrame(int FrameID);// 0xf94e07b6a001
	void RefreshByPS(SolarPlayerState* PS, bool bWithoutGender);// 0xf94f07b6a001
	void SetAvatarSize(bool IsCustom, bool Temp_bool_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, Vector2D K2Node_Select_Default);// 0xf95007b6a001
	void SetAvatar(int AvatarID, FString AvatarUrl);// 0xf95107b6a001
	void SetStateHD(byte StateHD, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0xf95207b6a001
	void SetDefaultSteamAvatar();// 0xf95307b6a001
	void SetVipType(byte VipType, int CallFunc_Conv_ByteToInt_ReturnValue);// 0xf95407b6a001
	static EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent, EventReply CallFunc_Unhandled_ReturnValue);// 0xf95507b6a001
	void SetAvatarState(bool IsCollapsed, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0xf95607b6a001
	void SetAvatarIcon(int InAvatarID, Texture2D* CallFunc_GetAvatarIconWithID_OutAvatar);// 0xf95707b6a001
	void SetEmptyState(bool IsEmpty, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, enum K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, SlateBrush K2Node_MakeStruct_SlateBrush);// 0xf95807b6a001
	void SetPlayerGender(byte Gender, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, byte Temp_byte_Variable, LinearColor K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, byte Temp_byte_Variable, Object* K2Node_Select_Default, enum Temp_byte_Variable, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Margin K2Node_MakeStruct_Margin, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default);// 0xf95907b6a001
	void SetSocialIcon(byte Social, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin, enum K2Node_Select_Default, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue);// 0xf95a07b6a001
	void Update();// 0xf95b07b6a001
	void PreConstruct(bool IsDesignTime);// 0xf95c07b6a001
	void BndEvt__Btn_PlayerInfo_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0xf95d07b6a001
	void BndEvt__Btn_PlayerInfo_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xf95e07b6a001
	void Construct();// 0xf95f07b6a001
	void ExecuteUbergraph_UI_Component_PlayerHead(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, enum K2Node_Select_Default, bool K2Node_Event_IsDesignTime, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, enum K2Node_Select_Default, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin);// 0x15b9807b6a008
	void OnReleased__DelegateSignature();// 0x15c1407b6a008
	void OnClicked__DelegateSignature();// 0xf7f1078ea001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarImageURL.Widget.Visual.Object
	FString URL;//[Offset: 0x138, Size: 0x10]
	bool bDownloadFailedResetToPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
	bool bDownloadFailedAutoRetry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x149, Size: 0x1]
	int AutoRetryDelayTime;//[Offset: 0x14c, Size: 0x4]
	int AutoRetryTimes;//[Offset: 0x150, Size: 0x4]
	SlateBrush Brush;//[Offset: 0x160, Size: 0xe0]
	SlateBrush PlaceholderBrush;//[Offset: 0x240, Size: 0xe0]
	byte Filter;//[Offset: 0x320, Size: 0x1]
	delegate BrushDelegate;//[Offset: 0x324, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x334, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x344, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x358, Size: 0x10]
	delegate OnURLDownloadFinish;//[Offset: 0x368, Size: 0x10]
	void URLDownloadFinish__DelegateSignature(bool bSuccess);// 0x29bc078ea041
	void UpdateURLImage();// 0x29bb078ea041
	void SetURLForNextTick(FString URLForNextTick);// 0x29ba078ea041
	void SetOpacity(float InOpacity);// 0x29b9078ea041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x29b8078ea041
	void SetBrushTintColor(SlateColor TintColor);// 0x29b7078ea041
	void SetBrushSize(Vector2D DesiredSize);// 0x29b6078ea041
	void SetBrushResourceObject(Object* ResourceObject);// 0x29b5078ea041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x29b4078ea041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x29b3078ea041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x29b2078ea041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x29b1078ea041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x29b0078ea041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x29af078ea041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x29ae078ea041
	void SetBrush(out const SlateBrush InBrush);// 0x29ad078ea041
	void ResetToPlaceholder();// 0x29ac078ea041
	void OnDownloadImageSuccess(FString InUrl, out const DownloaderResponse InResponse);// 0x29ab078ea041
	void OnDownloadImageFailed(FString InUrl, out const enum InFailedType, out const int InErrorCode);// 0x29aa078ea041
	void LoadURLImage(Texture2DDynamic* Texture);// 0x29a9078ea041
	FString GetUrl();// 0x29a8078ea041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x29a7078ea041
	enum GetDownloadState();// 0x29a5078ea041
	void DownloadImage(FString InUrl);// 0x29a4078ea041
	void CancelDownload();// 0x29a3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Vip_Icon_Type_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	SolarImage* Img_Vip_Icon;//[Offset: 0x408, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x410, Size: 0x8]
	int Type;//[Offset: 0x418, Size: 0x4]
	void SetType(int Type, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, Object* Temp_object_Variable, enum K2Node_Select_Default, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default);// 0x2dffba07bda02e
	void PreConstruct(bool IsDesignTime);// 0x1757f078ea000
	void ExecuteUbergraph_UI_Vip_Icon_Type(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x1567307b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Mangement_Btn_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	SolarButton* Btn_Common;//[Offset: 0x268, Size: 0x8]
	SolarImage* Image_Icon;//[Offset: 0x270, Size: 0x8]
	Overlay* Overlay_Mask;//[Offset: 0x278, Size: 0x8]
	SolarTextBlock* Txt_Btn;//[Offset: 0x280, Size: 0x8]
	bool CD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	FText Type;//[Offset: 0x290, Size: 0x18]
	int LocID;//[Offset: 0x2a8, Size: 0x4]
	bool None;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	Object* Icon;//[Offset: 0x2b0, Size: 0x8]
	delegate OnClicked;//[Offset: 0x2b8, Size: 0x10]
	static void SetBtnTxt(FString NewParam, FText CallFunc_Conv_StringToText_ReturnValue);// 0xfa2b07b6a001
	void SetInCD(bool CD, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float K2Node_Select_Default, enum K2Node_Select_Default);// 0xfa2c07b6a001
	void PreConstruct(bool IsDesignTime);// 0xfa2d07b6a001
	void BndEvt__Btn_Random_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xdea907b6a001
	void ExecuteUbergraph_UI_CreateRoom_Mangement_Btn(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0xdea807b6a001
	void OnClicked__DelegateSignature();// 0xffffff8c078ea000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_Option_C.SolarCheckButtonWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x420, Size: 0x8]
	CanvasPanel* Panel_Disabled;//[Offset: 0x428, Size: 0x8]
	SolarCheckBox* SolarCheckBox_Option;//[Offset: 0x430, Size: 0x8]
	SolarTextBlock* Txt_Option;//[Offset: 0x438, Size: 0x8]
	bool UseText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 0x1]
	FText Text;//[Offset: 0x448, Size: 0x18]
	int TextID;//[Offset: 0x460, Size: 0x4]
	enum TextPreviewLang;//[Offset: 0x464, Size: 0x1]
	SlateFontSizeForLang SpecialLangFont;//[Offset: 0x468, Size: 0x18]
	bool Disabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 0x1]
	delegate OnOptionCheckStateChanged;//[Offset: 0x488, Size: 0x10]
	bool bCustomClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 0x1]
	int OptionType;//[Offset: 0x49c, Size: 0x4]
	FString GetModuleName();// 0xffffff8c078ea000
	void SetTextID(int LocTextID);// 0xffffff8c078ea000
	void SetText(FString NewParam, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2607807b6a008
	void SetEnabled(bool Enabled, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum CallFunc_GetCheckedState_ReturnValue, LinearColor K2Node_Select_Default, enum K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, enum K2Node_Select_Default);// 0x12ca107b6a001
	static void SetOptionType(int OptionType, int Temp_int_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, SlateBrush K2Node_MakeStruct_SlateBrush, SlateBrush K2Node_MakeStruct_SlateBrush, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush, CheckBoxStyle K2Node_MakeStruct_CheckBoxStyle);// 0xffffffffc8622d90
	void ManualOptionSetIsChecked(bool bIsChecked);// 0xffffff8b078ea002
	void BP_OnEntryReleased();// 0x80003fab08cee020
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0xb48f078ea041
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0xffffff8c07a45c39
	void OnListItemObjectSet(Object* ListItemObject);// 0x12c8707b6a001
	void PreConstruct(bool IsDesignTime);// 0x12c8607b6a001
	void BndEvt__SolarCheckBox_Option_K2Node_ComponentBoundEvent_0_OnCheckBoxComponentStateChanged__DelegateSignature(bool bIsChecked);// 0x12c8507b6a001
	void OnSelected(bool bSelected);// 0x25b13078ea041
	void SetDisbaled(bool Disabled);// 0xffffff8b078ea002
	void RefreshOptionTxtUI();// 0x25a4d07b6a001
	void ExecuteUbergraph_UI_Component_Option(int EntryPoint, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, bool K2Node_Event_bIsExpanded, bool K2Node_Event_bIsSelected, Object* K2Node_Event_ListItemObject, bool K2Node_Event_IsDesignTime, enum K2Node_Select_Default, enum K2Node_Select_Default, enum CallFunc_GetCheckedState_ReturnValue, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, bool K2Node_ComponentBoundEvent_bIsChecked, bool K2Node_Event_bSelected, bool K2Node_CustomEvent_Disabled);// 0x12ca007b6a001
	void OnOptionCheckStateChanged__DelegateSignature(bool bIsChecked);// 0x2dffba07bda02e
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCheckButtonWidget.SolarUserWidget.UserWidget.Widget.Visual.Object
	delegate OnClickedEvent;//[Offset: 0x408, Size: 0x10]
	void SetButtonIndex(int InButtonIndex);// 0x508a078ea041
	void PostClickedEvent();// 0x5089078ea041
	void OnStateChanged(bool bIsChecked);// 0x5088078ea041
	void OnSelected(bool bSelected);// 0x5087078ea041
	ReturnValue(MulticastInlineDelegateProperty) GetOnClickedEvent();// 0x5086078ea041
	int GetButtonIndex();// 0x5085078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSystemWidget.Widget.Visual.Object
	ParticleSystem* ParticleSystemTemplate;//[Offset: 0x138, Size: 0x8]
	bool bReactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	bool bActiveSysWhenInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
	ParticleSystemComponent* WorldParticleComponent;//[Offset: 0x148, Size: 0x8]
	Actor* WorldParticleActor;//[Offset: 0x150, Size: 0x8]
	void SetReactivate(bool bActivateAndReset);// 0x3cff078ea041
	void ActivateParticles(bool bActive, bool bReset);// 0x3cfe078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Solo_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_Loop;//[Offset: 0x408, Size: 0x8]
	UI_CreateRoom_Management_Team_Solo_C* Team;//[Offset: 0x410, Size: 0x8]
	UI_CreateRoom_Management_Team_Solo_C* Team;//[Offset: 0x418, Size: 0x8]
	static void GetTeams(out UI_CreateRoom_Management_Team_C*[] Teams, UI_CreateRoom_Management_Team_C*[] K2Node_MakeArray_Array);// 0xf9ed07b6a001
	static void InitTeams(SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, SolarTeamInfo* CallFunc_Array_Get_Item, SolarTeamInfo* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x1567507b6a008
	void PreConstruct(bool IsDesignTime);// 0x2dffba07bda02e
	void ExecuteUbergraph_UI_CreateRoom_Management_Solo(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x1631a07b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_Solo_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x498, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x4a0, Size: 0x8]
	void Construct();// 0x25b4d078ea041
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_Solo(int EntryPoint, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0xf8d407b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_TDM_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* Anim_Loop;//[Offset: 0x408, Size: 0x8]
	UI_CreateRoom_Management_Team_TDM_C* Team;//[Offset: 0x410, Size: 0x8]
	UI_CreateRoom_Management_Team_TDM_C* Team;//[Offset: 0x418, Size: 0x8]
	static void GetTeams(out UI_CreateRoom_Management_Team_C*[] Teams, UI_CreateRoom_Management_Team_C*[] K2Node_MakeArray_Array);// 0xfa0f07b6a001
	void InitTeams(SolarGameState* CallFunc_GetSolarGameState_ReturnValue, SolarTeamInfo*[] CallFunc_GetTeams_OutTeams, SolarTeamInfo* CallFunc_Array_Get_Item, SolarTeamInfo* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x2648207b6a008
	void PreConstruct(bool IsDesignTime);// 0x7884078fdf1a
	void ExecuteUbergraph_UI_CreateRoom_Management_TDM(int EntryPoint, bool K2Node_Event_IsDesignTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x1630b07b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_TDM_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x498, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x4a0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x4a8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x4b0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* Player;//[Offset: 0x4b8, Size: 0x8]
	void Construct();// 0x1618507b6a008
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_TDM(int EntryPoint, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0xf8d207b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Component_ReturnBtn_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 0x8]
	SolarButton* Btn_Return;//[Offset: 0x268, Size: 0x8]
	Image* Image;//[Offset: 0x270, Size: 0x8]
	SizeBox* SizeBox;//[Offset: 0x278, Size: 0x8]
	SolarTextBlock* Txt_Title;//[Offset: 0x280, Size: 0x8]
	delegate OnClicked;//[Offset: 0x288, Size: 0x10]
	delegate OnPressed;//[Offset: 0x298, Size: 0x10]
	bool UseTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	FText Title;//[Offset: 0x2b0, Size: 0x18]
	int TitleID;//[Offset: 0x2c8, Size: 0x4]
	bool UseID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	enum PreviewLang;//[Offset: 0x2cd, Size: 0x1]
	float SizeX;//[Offset: 0x2d0, Size: 0x4]
	void PreConstruct(bool IsDesignTime);// 0xf9c907b6a001
	void BndEvt__Btn_Return_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xf9ca07b6a001
	void BndEvt__Btn_Return_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0xf9cb07b6a001
	void ExecuteUbergraph_UI_Component_ReturnBtn(int EntryPoint, int CallFunc_PlaySound2D_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, enum K2Node_Select_Default);// 0x2dffba07bda02e
	void OnPressed__DelegateSignature();// 0x156c407b6a008
	void OnClicked__DelegateSignature();// 0x787e078fdf12
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_SocialList_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	Button* Btn_LeftTeam;//[Offset: 0x400, Size: 0x8]
	FString GetModuleName();// 0x21af007b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_OB_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x498, Size: 0x8]
	Overlay* Panel_Spectator;//[Offset: 0x4a0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4a8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4b0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4b8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4c0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4c8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4d0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4d8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4e0, Size: 0x8]
	void UpdateOB(out SCMPlayerState*[] PlayerStateList, bool T_Waiting, FString T_PlayerID, SCMPlayerState* T_PS, int T_Index, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, SCMPlayerState* CallFunc_GetLocalPlayer_ReturnValue, byte Temp_byte_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, SCMPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsPreJoinPlayer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_Select_Default, UI_CreateRoom_Management_Player_Info_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0xf8c707b6a001
	void PreConstruct(bool IsDesignTime);// 0xfa2f07b6a001
	void Construct();// 0xfa2e07b6a001
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_OB(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x1c008c07a3a100
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_1M_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x498, Size: 0x8]
	HorizontalBox* HorizontalBox;//[Offset: 0x4a0, Size: 0x8]
	CanvasPanel* Panel_Owner;//[Offset: 0x4a8, Size: 0x8]
	Overlay* Panel_Team;//[Offset: 0x4b0, Size: 0x8]
	SolarTextBlock* Txt_SideName_P1;//[Offset: 0x4b8, Size: 0x8]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x4c0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4c8, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_IsOwner;//[Offset: 0x4d0, Size: 0x8]
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0xf84607b6a001
	void Get SideText by Panel(out SolarTextBlock* Target Panel, bool Temp_bool_Variable, SolarTextBlock* K2Node_Select_Default);// 0xf84707b6a001
	void PreConstruct(bool IsDesignTime);// 0xf84807b6a001
	void Construct();// 0x2dffba07bda02e
	void ExecuteUbergraph_UI_CreateRoom_Management_Team_1M(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x2df97f30
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_2M_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x498, Size: 0x8]
	HorizontalBox* HorizontalBox;//[Offset: 0x4a0, Size: 0x8]
	CanvasPanel* Panel_Owner;//[Offset: 0x4a8, Size: 0x8]
	Overlay* Panel_Team;//[Offset: 0x4b0, Size: 0x8]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x4b8, Size: 0x8]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x4c0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4c8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4d0, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_IsOwner;//[Offset: 0x4d8, Size: 0x8]
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0xf86607b6a001
	void Get SideText by Panel(out SolarTextBlock* Target Panel, bool Temp_bool_Variable, SolarTextBlock* K2Node_Select_Default);// 0xf86707b6a001
	void PreConstruct(bool IsDesignTime);// 0xf86807b6a001
	void Construct();// 0xde16078ea001
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_2M(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x2df98160
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_CreateRoom_Management_Team_4M_C.UI_CreateRoom_Management_Team_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x498, Size: 0x8]
	HorizontalBox* HorizontalBox;//[Offset: 0x4a0, Size: 0x8]
	CanvasPanel* Panel_Owner;//[Offset: 0x4a8, Size: 0x8]
	Overlay* Panel_Team;//[Offset: 0x4b0, Size: 0x8]
	SolarTextBlock* Txt_SideName_P2;//[Offset: 0x4b8, Size: 0x8]
	SolarTextBlock* Txt_SideName_P4;//[Offset: 0x4c0, Size: 0x8]
	SolarTextBlock* Txt_Team_P4;//[Offset: 0x4c8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4d0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4d8, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4e0, Size: 0x8]
	UI_CreateRoom_Management_Player_Info_C* UI_CreateRoom_Management_Player_Info;//[Offset: 0x4e8, Size: 0x8]
	WidgetSwitcher* WidgetSwitcher_IsOwner;//[Offset: 0x4f0, Size: 0x8]
	void Get UI Refs from Panel(out Widget* Horizontal Box Ref, out WidgetSwitcher* WidgetSwitcher_IsOwner);// 0xf88c07b6a001
	void Get SideText by Panel(out SolarTextBlock* Target Panel, bool Temp_bool_Variable, SolarTextBlock* K2Node_Select_Default);// 0xf88d07b6a001
	void PreConstruct(bool IsDesignTime);// 0xf88e07b6a001
	void Construct();// 0x1767207b6a008
	static void ExecuteUbergraph_UI_CreateRoom_Management_Team_4M(int EntryPoint, bool K2Node_Event_IsDesignTime, UI_CreateRoom_Management_Player_Info_C*[] K2Node_MakeArray_Array);// 0x73c11304a7f6a000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_Resurrect_C.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 0x8]
	WidgetAnimation* CountDown_Progress_Anim;//[Offset: 0x408, Size: 0x8]
	WidgetAnimation* CountDown_Anim;//[Offset: 0x410, Size: 0x8]
	WidgetAnimation* Resurrecting_Enter_Anim;//[Offset: 0x418, Size: 0x8]
	WidgetAnimation* ReliveProp_Anim;//[Offset: 0x420, Size: 0x8]
	Overlay* Countdown;//[Offset: 0x428, Size: 0x8]
	Image* img_Props;//[Offset: 0x430, Size: 0x8]
	Image* Img_RebirthTimeMAT;//[Offset: 0x438, Size: 0x8]
	TextBlock* Txt_RebirthTimeNum;//[Offset: 0x440, Size: 0x8]
	int ReviveWaitTime;//[Offset: 0x448, Size: 0x4]
	BP_PlayerState_Framework_C* Player;//[Offset: 0x450, Size: 0x8]
	TimerHandle HandleEnterAnimEnd;//[Offset: 0x458, Size: 0x8]
	TimerHandle HandleFinishAnimEnd;//[Offset: 0x460, Size: 0x8]
	float FadeDuringTime;//[Offset: 0x468, Size: 0x4]
	void RemoveInputFlag(PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarInputSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsSpectatingOtherPlayer_ReturnValue);// 0x1110507b6a001
	void AddInputFlag(PlayerController* CallFunc_GetPlayerController_ReturnValue, SolarInputSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, SolarPlayerController* K2Node_DynamicCast_AsSolar_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsSpectatingOtherPlayer_ReturnValue);// 0x1110607b6a001
	void TryCloseByPlayer(BP_PlayerState_Framework_C* OldPlayer, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x1110707b6a001
	void Visible and Invisible Protection(out bool Exec, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsLocalPlayerCameraFocusingMe_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x1110807b6a001
	void SetIcon(byte Type, byte Temp_byte_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* Temp_object_Variable, Object* K2Node_Select_Default, SlateBrush K2Node_MakeStruct_SlateBrush);// 0x1110907b6a001
	void UIEvent_Show(int ReviveWaitTime);// 0x1110a07b6a001
	void ShowResurrectUI(int Time, byte Type, BP_PlayerState_Framework_C* Player);// 0x1110b07b6a001
	void RebirthCountDown(int Time);// 0x1110c07b6a001
	void CloseUI();// 0x110d4078ea001
	void BeginCountDown();// 0x2fa65ff0
	void EndEvent();// 0x1110f07b6a001
	void ExecuteUbergraph_UI_Resurrect(int EntryPoint, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_ReviveWaitTime, FText CallFunc_Conv_IntToText_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_SafeDivide_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_Event_Time, byte K2Node_Event_Type, BP_PlayerState_Framework_C* K2Node_Event_Player, delegate K2Node_CreateDelegate_OutputDelegate, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_Visible_and_Invisible_Protection_Exec, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int K2Node_CustomEvent_Time, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_Subtract_IntInt_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue);// 0x110d8078ea001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarInputSubsystem.WorldSubsystem.Subsystem.Object
	InputDeviceProxy CurrentInputDeviceProxy;//[Offset: 0x78, Size: 0xc]
	bool TestInputActionFlag(enum InFlagBit);// 0x5352078ea041
	void RemoveInputActionFlag(enum InFlagBit);// 0x5351078ea041
	void OnLocalPlayerAddedEvent(LocalPlayer* NewLocalPlayer);// 0x5350078ea041
	void OnInputMethodChanged(enum InInputType);// 0x534f078ea041
	void OnGamepadTypeChanged(FName InGamepadType);// 0x534e078ea041
	void OnControllerConnectionChange(bool bIsConnected, int UserId, int ControllerId);// 0x534d078ea041
	void AddInputActionFlag(enum InFlagBit);// 0x534c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_DBox_Default_C.DeathTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x760, Size: 0x8]
	SceneComponent* FX_Position;//[Offset: 0x768, Size: 0x8]
	bool ResurrectionComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 0x1]
	LinearColor[] QualityMap;//[Offset: 0x778, Size: 0x10]
	ParticleSystem*[] DeadBox_Particle;//[Offset: 0x788, Size: 0x10]
	ParticleSystemComponent* QualityEffect;//[Offset: 0x798, Size: 0x8]
	int NewBoxParticle;//[Offset: 0x7a0, Size: 0x4]
	bool CanBuyResurrect(const SolarCharacter* InReqCharacter, SCMPlayerState* OwnerPlayer, SCMPlayerState* CallFunc_GetPlayerStateByCharacterOrController_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SolarResurrectionComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsTeammateWith_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue);// 0x10faf07b6a001
	bool IsSameTeam(byte CharacterTeamID, FString CallFunc_Conv_ByteToString_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, byte CallFunc_GetTeamID_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_ByteToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x6188c0793a100
	void UserConstructionScript();// 0xffffff8c078ea000
	void ReceiveBeginPlay();// 0x10fc007b6a001
	void ExecuteUbergraph_BP_DBox_Default(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarResurrectionComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess);// 0x6ff900791a002
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_WorldMark_ReviveTeammates_C.WorldMark_ReviveTeammates.WorldMark_ReviveBase.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5b0, Size: 0x8]
	CanvasPanel* CanvasPanel;//[Offset: 0x5b8, Size: 0x8]
	Image* Img_Arrow;//[Offset: 0x5c0, Size: 0x8]
	Image* Img_Arrow_Light_Off;//[Offset: 0x5c8, Size: 0x8]
	Image* Img_BG_Off;//[Offset: 0x5d0, Size: 0x8]
	CanvasPanel* Panel_Off_Screen;//[Offset: 0x5d8, Size: 0x8]
	int HideDistance;//[Offset: 0x5e0, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x5e8, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x5f8, Size: 0x10]
	bool IsOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	void SetIsOnScreen(bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, enum K2Node_Select_Default, float K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, Vector2D K2Node_Select_Default, enum K2Node_Select_Default);// 0x1115507b6a001
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, CharacterSkinConfig* CallFunc_GetSkinConfig_ReturnValue, SoftObjectPath CallFunc_GetSkinIcon_ReturnValue, MaterialInstance* K2Node_DynamicCast_AsMaterial_Instance, bool K2Node_DynamicCast_bSuccess, Texture2D* CallFunc_LoadTexture2DBySoftPath_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, SolarResurrectionComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1115607b6a001
	void SetColor(byte Index, byte CallFunc_Subtract_ByteByte_ReturnValue, byte CallFunc_BMax_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, SlateColor K2Node_MakeStruct_SlateColor);// 0x1109107b6a001
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x1115807b6a001
	void SetIcon(Widget* Content, int None, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x1115907b6a001
	void PreConstruct(bool IsDesignTime);// 0x1115a07b6a001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1115b07b6a001
	void OnInitialized();// 0x1115c07b6a001
	void SetPlayerIDAndChangeColor(FString PlayerId);// 0x12875078ea001
	void SetOutOfScreen(bool OutOfScreen);// 0x1115e07b6a001
	static void ExecuteUbergraph_UI_WorldMark_ReviveTeammates(int EntryPoint, bool K2Node_Event_IsDesignTime, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, FString K2Node_Event_PlayerID, Vector2D CallFunc_GetSize_ReturnValue, bool K2Node_Event_OutOfScreen, bool CallFunc_Not_PreBool_ReturnValue);// 0x73c111b4a7f6a000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SI_RebornLine_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x228, Size: 0x8]
	StaticMeshComponent* FX_Tag;//[Offset: 0x230, Size: 0x8]
	StaticMeshComponent* FX_Tag_Glow;//[Offset: 0x238, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
	void ReceiveBeginPlay();// 0x10fbc07b6a001
	void Event_SetWaitingColor();// 0xffffff8c078ea052
	void Event_SetFinishColor();// 0x1766c07b6a008
	void ExecuteUbergraph_BP_SI_RebornLine(int EntryPoint);// 0x10fb107b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_MapMark_ReviveTeammates_C.MapMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x440, Size: 0x8]
	WidgetAnimation* Occupy_Loop_Anim;//[Offset: 0x448, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x450, Size: 0x8]
	Image* Img_Light;//[Offset: 0x458, Size: 0x8]
	Image* Img_Light;//[Offset: 0x460, Size: 0x8]
	Image* Img_Revival;//[Offset: 0x468, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x470, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x478, Size: 0x8]
	int HideDistance;//[Offset: 0x480, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x488, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x498, Size: 0x10]
	FString PlayerId;//[Offset: 0x4a8, Size: 0x10]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1113007b6a001
	void SetColor(byte Index, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, byte Temp_byte_Variable, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, LinearColor K2Node_Select_Default);// 0x1113107b6a001
	void SetIcon(Widget* Content, int None, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x1113207b6a001
	void Event_PlayAnim();// 0x1290707b6a001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x110c8078ea001
	void ExecuteUbergraph_UI_MapMark_ReviveTeammates(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, SolarCharacter* CallFunc_GetSolarCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsAlive_ReturnValue);// 0x11127078ea001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGlobalEventSystem.GameInstanceSubsystem.Subsystem.Object
	<class SolarGlobalEventBase,ListenerEventsByClass(MulticastInlineDelegateProperty)> ListenerEventsByClass;//[Offset: 0x30, Size: 0x50]
	<FName,ListenerEventsByName(MulticastInlineDelegateProperty)> ListenerEventsByName;//[Offset: 0x80, Size: 0x50]
	<GameplayTag,ListenerEventsByGameplayTag(MulticastInlineDelegateProperty)> ListenerEventsByGameplayTag;//[Offset: 0xd0, Size: 0x50]
	void UnbindGlobalEventByName(FName EventName, out const delegate Event);// 0x5253078ea041
	void UnbindGlobalEventByGameplayTag(GameplayTag EventGameplayTag, out const delegate Event);// 0x5252078ea041
	void UnbindGlobalEventByClass(class SolarGlobalEventBase EventClass, out const delegate Event);// 0x5251078ea041
	void UnbindAllGlobalEventsByName(Object* Unsubscriber, FName EventName);// 0x5250078ea041
	void UnbindAllGlobalEventsByGameplayTag(Object* Unsubscriber, GameplayTag EventGameplayTag);// 0x524f078ea041
	void UnbindAllGlobalEventsByClass(Object* Unsubscriber, class SolarGlobalEventBase EventClass);// 0x524e078ea041
	void GetAllBoundObjectsToEventByName(FName EventName, out Object*[] Objects);// 0x524d078ea041
	void GetAllBoundObjectsToEventByGameplayTag(GameplayTag EventGameplayTag, out Object*[] Objects);// 0x524c078ea041
	void GetAllBoundObjectsToEventByClass(class SolarGlobalEventBase EventClass, out Object*[] Objects);// 0x524b078ea041
	void GetAllActiveGlobalEventsClass(out class SolarGlobalEventBase[] Events);// 0x524a078ea041
	void GetAllActiveGlobalEventNames(out FName[] Events);// 0x5249078ea041
	void GetAllActiveGlobalEventGameplayTag(out GameplayTag[] Events);// 0x5248078ea041
	void ClearGlobalEventByName(FName EventName, const bool bForceClear);// 0x5247078ea041
	void ClearGlobalEventByGameplayTag(GameplayTag EventGameplayTag, const bool bForceClear);// 0x5246078ea041
	void ClearGlobalEventByClass(class SolarGlobalEventBase EventClass, const bool bForceClear);// 0x5245078ea041
	void ClearAllGlobalEventsClass(const bool bForceClear);// 0x5244078ea041
	void ClearAllGlobalEventNames(const bool bForceClear);// 0x5243078ea041
	void ClearAllGlobalEventGameplayTags(const bool bForceClear);// 0x5242078ea041
	void CallGlobalEventByName(Object* Publisher, FName EventName, Object* Payload, out const FString[] MetaData);// 0x5241078ea041
	void CallGlobalEventByGameplayTag(Object* Publisher, GameplayTag EventGameplayTag, Object* Payload, out const FString[] MetaData);// 0x5240078ea041
	void CallGlobalEventByClass(Object* Publisher, class SolarGlobalEventBase EventClass, Object* Payload, out const FString[] MetaData);// 0x523f078ea041
	void BindGlobalEventByName(FName EventName, out const delegate Event);// 0x523e078ea041
	void BindGlobalEventByGameplayTag(GameplayTag EventGameplayTag, out const delegate Event);// 0x523d078ea041
	void BindGlobalEventByClass(class SolarGlobalEventBase EventClass, out const delegate Event);// 0x523c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarGlobalEventBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: UI_WorldMark_ReviveTeammatesDeathbox_C.ActorMarkBase.SolarUserWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x480, Size: 0x8]
	TextBlock* Distance;//[Offset: 0x488, Size: 0x8]
	Image* Img_Bg;//[Offset: 0x490, Size: 0x8]
	Image* Img_Light;//[Offset: 0x498, Size: 0x8]
	Image* Img_Light;//[Offset: 0x4a0, Size: 0x8]
	Image* Img_Revival;//[Offset: 0x4a8, Size: 0x8]
	VerticalBox* Panel;//[Offset: 0x4b0, Size: 0x8]
	ScaleBox* ScaleBox;//[Offset: 0x4b8, Size: 0x8]
	int HideDistance;//[Offset: 0x4c0, Size: 0x4]
	LinearColor[] Color;//[Offset: 0x4c8, Size: 0x10]
	LinearColor[] Color;//[Offset: 0x4d8, Size: 0x10]
	FString PlayerId;//[Offset: 0x4e8, Size: 0x10]
	FString DistanceLocalString;//[Offset: 0x4f8, Size: 0x10]
	void Set Player ID And Change Color(FString PlayerId, SCMPlayerState* CallFunc_FindPlayerByPlayerID_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1117707b6a001
	void SetColor(byte Index, byte CallFunc_Subtract_ByteByte_ReturnValue, byte CallFunc_BMax_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, LinearColor CallFunc_Array_Get_Item, LinearColor CallFunc_Array_Get_Item, SlateColor K2Node_MakeStruct_SlateColor);// 0x1117807b6a001
	enum GetVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x1117907b6a001
	static FText Get_Distance_Text(float CallFunc_GetDistance_ReturnValue, int CallFunc_FFloor_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x1117a07b6a001
	void SetIcon(Widget* Content, int None, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x1117b07b6a001
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x1117c07b6a001
	void PreConstruct(bool IsDesignTime);// 0x12879078ea001
	void OnInitialized();// 0xffffffff4ddbfc60
	void ExecuteUbergraph_UI_WorldMark_ReviveTeammatesDeathbox(int EntryPoint, const <FString,FString> Temp_string_Variable, FString CallFunc_GetNoticeFormatText_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, FText CallFunc_Get_Distance_Text_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x3ee0b5e0078ea000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_GameState_BattleRoyaleMap01_C.BP_GameState_BattleRoyale_C.BP_GameState_Framework_C.SCustomGameState.SBattleGameState.SolarGameState.GameState.GameStateBase.Info.Actor.Object
	void NotifyCheatedPlayer(SolarPlayerState* CheatedPlayerState, out const FText OutReason);// 0x12a6f078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBagsTrail_Common_C.SolarBackpackSFX.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_WallRunLoop;//[Offset: 0x288, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_Trail;//[Offset: 0x290, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_DropSlowDown;//[Offset: 0x298, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_SkyDivingLanding;//[Offset: 0x2a0, Size: 0x8]
	SceneComponent* VFX;//[Offset: 0x2a8, Size: 0x8]
	float TrailFade_Size_581709C845BD673DB0841C82710F99F1;//[Offset: 0x2b0, Size: 0x4]
	byte TrailFade__Direction_581709C845BD673DB0841C82710F99F1;//[Offset: 0x2b4, Size: 0x1]
	TimelineComponent* TrailFade;//[Offset: 0x2b8, Size: 0x8]
	void OnWallRun();// 0xd9122093a6652c82
	void BackpackSFXEnd();// 0x167ef07b6a008
	void BackpackSFXLaunch(bool GroundDetected, out const Vector GroundLocation, out const Vector GroundNormal, Rotator CallFunc_MakeRotFromZ_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue);// 0x129e6078ea041
	void BackpackSFXBegin(byte InJetType, bool GroundDetected, bool K2Node_SwitchEnum_CmpSuccess);// 0x9bb2078ea041
	void UpdateTrailParticle(BackpackTrailAssemblingParams SoftObjectRef, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffff8c078ea000
	ParticleSystemComponent* GetTrailEffectComponent();// 0xe41107b6a001
	void FX_FinishDeactive();// 0xcc4a078ea041
	void SkyDivingLanding();// 0xffffff8f078ea002
	void DropSlowDown();// 0xffffff8f078ea002
	void Normal Jet Fly();// 0x394078ea407
	void FX_InitializeDeactive();// 0x1419a07b6a008
	void TrailFade__FinishedFunc();// 0x12c6a07b6a008
	void TrailFade__UpdateFunc();// 0x1448807b6a008
	void OnBackpackTrailAssembling(out const BackpackTrailAssemblingParams Params, enum PropellingMode);// 0xffffffff8efd10e0
	void TryFadeOutTrail();// 0x2dffba07bda02e
	void ExecuteUbergraph_BP_PBagsTrail_Common(int EntryPoint, const BackpackTrailAssemblingParams K2Node_Event_Params, enum K2Node_Event_PropellingMode, bool CallFunc_IsActive_ReturnValue);// 0x136db07b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BackpackTrailAssemblingParams.TableRowBase
	ParticleSystem* TrailParticle;//[Offset: 0x8, Size: 0x28]
	ParticleSystem* WallRunTrailParticle;//[Offset: 0x30, Size: 0x28]
	ParticleSystem* OffgasParticle;//[Offset: 0x58, Size: 0x28]
	ParticleSystem* WallRunOffgasParticle;//[Offset: 0x80, Size: 0x28]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	void Stop();// 0x6d13078ea041
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x6d12078ea041
	void SetTimelineLengthMode(byte NewLengthMode);// 0x6d11078ea041
	void SetTimelineLength(float NewLength);// 0x6d10078ea041
	void SetPlayRate(float NewRate);// 0x6d0f078ea041
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x6d0e078ea041
	void SetNewTime(float NewTime);// 0x6d0d078ea041
	void SetLooping(bool bNewLooping);// 0x6d0c078ea041
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x6d0b078ea041
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x6d0a078ea041
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x6d09078ea041
	void ReverseFromEnd();// 0x6d08078ea041
	void Reverse();// 0x6d07078ea041
	void PlayFromStart();// 0x6d06078ea041
	void Play();// 0x6d05078ea041
	void OnRep_Timeline();// 0x6d04078ea041
	bool IsReversing();// 0x6d03078ea041
	bool IsPlaying();// 0x6d02078ea041
	bool IsLooping();// 0x6d01078ea041
	float GetTimelineLength();// 0x6d00078ea041
	float GetPlayRate();// 0x6cff078ea041
	float GetPlaybackPosition();// 0x6cfe078ea041
	bool GetIgnoreTimeDilation();// 0x6cfd078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBagsOffgas_Common_C.SolarBackpackSFX.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	ParticleSystemComponent* FX_BoostClimb_Start;//[Offset: 0x288, Size: 0x8]
	ParticleSystemComponent* FX_PowerBag_MainJet;//[Offset: 0x290, Size: 0x8]
	SceneComponent* VFX;//[Offset: 0x298, Size: 0x8]
	void BackpackSFXBegin(byte InJetType, bool GroundDetected);// 0x12c1607baa021
	void BackpackSFXEnd();// 0xffffff8c078ea000
	void OnBackpackTrailAssembling(out const BackpackTrailAssemblingParams Params, enum PropellingMode);// 0x1567807b6a008
	static void ExecuteUbergraph_BP_PBagsOffgas_Common(int EntryPoint, byte K2Node_Event_InJetType, bool K2Node_Event_GroundDetected, bool K2Node_SwitchEnum_CmpSuccess, const BackpackTrailAssemblingParams K2Node_Event_Params, enum K2Node_Event_PropellingMode, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x12c2207b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SETTFormula_BigEscape_C.SettlementFormula.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 0x8]
	int[] PersonalRankExpReward;//[Offset: 0x230, Size: 0x10]
	SettlementParam_ExtraRewardInfo RankReward;//[Offset: 0x240, Size: 0x40]
	SettlementParam_ExtraRewardInfo[] CommonRewards;//[Offset: 0x280, Size: 0x10]
	int WarmGame Account Exp;//[Offset: 0x290, Size: 0x4]
	float GetKDA(out const SettlementParam_KDA InParam, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x1625007b6a008
	void TEMP Is Player In NewPlayer Games(out bool Result, int CallFunc_GetWramGameType_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x129c5078ea041
	SettlementParam_ExtraRewardInfo[] GetExtraRewards(out const SettlementParam_CommonExp InParam, int Temp_int_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, byte CallFunc_GetTeamRank_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, FString Temp_string_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, int Temp_int_Variable, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, int Temp_int_Variable, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, int K2Node_Select_Default, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, int Temp_int_Variable, bool Temp_bool_Variable, FString CallFunc_FormatRewardItem_ItemString, int K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString[] K2Node_MakeArray_Array, FString CallFunc_FormatRewardItem_ItemString, FString CallFunc_Combine_Reward_Item_RewardString, FString[] K2Node_MakeArray_Array, FString K2Node_Select_Default, FString CallFunc_Combine_Reward_Item_RewardString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString K2Node_Select_Default, FString CallFunc_FormatRewardItem_ItemString, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, FString CallFunc_FormatRewardItem_ItemString, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString CallFunc_FormatRewardItem_ItemString, FString[] K2Node_MakeArray_Array, FString CallFunc_Combine_Reward_Item_RewardString, FString K2Node_Select_Default, SettlementParam_ExtraRewardInfo K2Node_MakeStruct_SettlementParam_ExtraRewardInfo, SettlementParam_ExtraRewardInfo[] K2Node_MakeArray_Array);// 0x25ee2078ea041
	void MVPLifeTimeScore(float Life Time, out float LTMVPScore, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x176b507b6a008
	FString[] GetSettlementItems(out const SettlementParam_CommonExp InParam, FString[] K2Node_MakeArray_Array);// 0x1258507b6a008
	int[] GetShowPageIndexs(out const SettlementParam_PageParam InParam, int[] FullPage, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, bool Temp_bool_Variable, int K2Node_Select_Default, int Temp_int_Variable, int Temp_int_Variable, int[] K2Node_MakeArray_Array, int K2Node_Select_Default, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x1688f07b6a008
	float CalculateMVPScore(out const SolarGameModeInfo GameInfo, out const SettlementParam_MVP Param, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_MVPLifeTimeScore_LTMVPScore, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2859607b6a008
	int GetZomborg(out const SettlementParam_Zomborg InParam, int Result, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Round_ReturnValue);// 0x11abc07b6a008
	int GetWeaponExp(out const SettlementParam_WeaponExp InParam, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue);// 0x1688a07b6a008
	int GetCharaterExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo, int CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x174fc078ea041
	int GetAccountExp(out const SettlementParam_CommonExp InParam, out const SolarGameModeInfo InGameInfo, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_TEMP_Is_Player_In_NewPlayer_Games_Result, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue);// 0x1c008c07a3a100
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_BlueCircleManager_C.BlueCircleManager.GameManagerBase.Info.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_BlueCircle_C.SolarBlueCircle.Actor.Object
	StaticMeshComponent* FX_Tag_Glow;//[Offset: 0x258, Size: 0x8]
	StaticMeshComponent* FX_Tag_Center;//[Offset: 0x260, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x268, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x270, Size: 0x8]
	StaticMeshComponent* GetGlowStaticMeshComponent();// 0x38ffbc07bda065
	StaticMeshComponent* GetCenterStaticMeshComponent();// 0x27b4b07b6a008
	FString GetModuleName();// 0x4e1078ea555
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarCapsuleActorRoot_C.SolarCapsuleRoot.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Character_BattleRoyaleMap01_C.BP_Character_BattleRoyale_C.BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Character_BattleRoyale_C.BP_Character_Framework_C.BP_SolarCharacterPlayer_C.SolarCharacter.SolarCharacterBase.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2380, Size: 0x8]
	delegate OnPlayerRevive;//[Offset: 0x2388, Size: 0x10]
	ActorMarkBase* DeathBoxMark;//[Offset: 0x2398, Size: 0x8]
	MapMarkBase*[] DeathBoxMiniMapMark;//[Offset: 0x23a0, Size: 0x10]
	int Index;//[Offset: 0x23b0, Size: 0x4]
	int UI_Relive_StartTime;//[Offset: 0x23b4, Size: 0x4]
	TimerHandle LandedDetectionHandel;//[Offset: 0x23b8, Size: 0x8]
	BP_SI_RebornLine_C* RebornLine;//[Offset: 0x23c0, Size: 0x8]
	<int,float> Level-Damage;//[Offset: 0x23c8, Size: 0x50]
	static void GetWeaponLevelDamageBonus(out float Result, bool Temp_bool_Variable, float Temp_float_Variable, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, int CallFunc_GetCurrentActiveSlot_ReturnValue, SolarItemData CallFunc_GetBackpackWeaponBySlot_ItemData, bool CallFunc_GetBackpackWeaponBySlot_ReturnValue, float CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Select_Default);// 0x10e1d07b6a001
	void Death Cleanup UI(SolarPlayerController* CallFunc_GetSolarPlayerController_ReturnValue, HUDDispatcherBase* CallFunc_GetHUDDispatcher_FromPC_ReturnValue);// 0x10e1e07b6a001
	float TakeDamageResolve(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x10e1f07b6a001
	bool OnShouldTakeDamage(float Damage, out const SolarPointDamageEvent DamageEvent, SCMPlayerState* EventInstigator, Actor* DamageCauser);// 0x10e2007b6a001
	void SetReviveCameraFade(float Time);// 0x10e2107b6a001
	void ReceiveBeginPlay();// 0x10e2207b6a001
	void Debug Set DayAndNightTime(float Time);// 0xffffff8f078ea002
	void SetMapID(int MapId);// 0x10e2407b6a001
	void Event_OnResBegin(int Time, byte Type, Vector Location, S_ResurrectInfo options);// 0x10e2507b6a001
	void BeginPlayBlueprint();// 0x10e2607b6a001
	void OnCharacterEjectStateChanged(byte State);// 0x1299d078ea041
	static void ExecuteUbergraph_BP_Character_BattleRoyale(int EntryPoint, bool CallFunc_IsInSkywardDive_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsServer_ReturnValue, float K2Node_Event_Time, float K2Node_CustomEvent_Time, GameInstance* CallFunc_GetGameInstance_ReturnValue, int K2Node_CustomEvent_MapID, bool CallFunc_IsValid_ReturnValue, SolarGameInstanceBase* K2Node_DynamicCast_AsSolar_Game_Instance_Base, bool K2Node_DynamicCast_bSuccess, SolarMapManager* CallFunc_GetSolarMapManager_ReturnValue, int K2Node_CustomEvent_Time, byte K2Node_CustomEvent_Type, Vector K2Node_CustomEvent_Location, S_ResurrectInfo K2Node_CustomEvent_Options, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, SolarPlayerState* CallFunc_GetSolarPlayerState_ReturnValue, BP_PlayerState_Framework_C* K2Node_DynamicCast_AsBP_Player_State_Framework, bool K2Node_DynamicCast_bSuccess, CGMGameplayConfig* CallFunc__A_GetModeConfig_ModeConfig, float CallFunc_GetCurBattleTime_ReturnValue, CFG_Framework_C* K2Node_DynamicCast_AsCFG_Framework, bool K2Node_DynamicCast_bSuccess, int CallFunc_FTrunc_ReturnValue, S_SkillState CallFunc_GetSkillStateByNameEnum_Out, S_SkillState CallFunc_GetSkillStateByNameEnum_Out, byte K2Node_Event_State, bool K2Node_SwitchEnum_CmpSuccess, BP_PlayerState_BattleRoyale_C* K2Node_DynamicCast_AsBP_Player_State_Battle_Royale, bool K2Node_DynamicCast_bSuccess, S_SkillState K2Node_Select_Default);// 0x1b2c807b6a001
	void OnPlayerRevive__DelegateSignature(SolarCharacter* TargetCharacter);// 0x27b4d07b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarItemRoot_C.SolarItemRootActor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x240, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_KillinfoManager_C.KillInfoManager.GameManagerBase.Info.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: KillInfoManager.GameManagerBase.Info.Actor.Object
	enum[] KillEffectsOrder;//[Offset: 0x228, Size: 0x10]
	enum[] GlobalInfoList;//[Offset: 0x238, Size: 0x10]
	FString KillLeaderID;//[Offset: 0x438, Size: 0x10]
	int KillLeaderKillNum;//[Offset: 0x448, Size: 0x4]
	FString AnnihilatorID;//[Offset: 0x450, Size: 0x10]
	FString KillLeaderChangeVoiceName;//[Offset: 0x468, Size: 0x10]
	FString KillLeaderShutDownVoiceName;//[Offset: 0x478, Size: 0x10]
	FString BeKillLeaderVoiceName;//[Offset: 0x488, Size: 0x10]
	FString ShutDownKillLeaderVoiceName;//[Offset: 0x498, Size: 0x10]
	<int,FString> KillTotalVoiceMap;//[Offset: 0x4a8, Size: 0x50]
	<int,FString> ComboKillSoundEffectMap;//[Offset: 0x4f8, Size: 0x50]
	FString RevengeVoiceName;//[Offset: 0x548, Size: 0x10]
	FString KillDownVoiceName;//[Offset: 0x558, Size: 0x10]
	FString ClearTeamVoiceName;//[Offset: 0x568, Size: 0x10]
	FString ShutDownVoiceName;//[Offset: 0x578, Size: 0x10]
	FString KillDefenderVoiceName;//[Offset: 0x588, Size: 0x10]
	CustomNoticeImageTable* NoticeImageConfig;//[Offset: 0x598, Size: 0x8]
	bool PlayKillInfoVoice(out const NoticeData InNoticeData, out const delegate InDelegate);// 0x49b3078ea041
	void OnRep_KillLeaderID();// 0x49b2078ea041
	void ClientKillInfoNotify(SolarPlayerState* InKiller, SolarPlayerState* InVictim, int KillExtraInfoHashValue);// 0x49b1078ea041
	void ClientKillEffectNotify(SolarPlayerState* InKiller, SolarPlayerState* InVictim, int KillEffectExtraInfoHashValue);// 0x49b0078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: NoticeData
	int NoticeId;//[Offset: 0x0, Size: 0x4]
	enum NoticeType;//[Offset: 0x4, Size: 0x1]
	float ConfigShowTime;//[Offset: 0x8, Size: 0x4]
	float Duration;//[Offset: 0xc, Size: 0x4]
	FString NoticeText;//[Offset: 0x10, Size: 0x10]
	enum NoticeColor;//[Offset: 0x20, Size: 0x1]
	FString NoticeClassPath;//[Offset: 0x28, Size: 0x10]
	FString NoticeIconPath;//[Offset: 0x38, Size: 0x10]
	UINoticeBase* NoticeWidget;//[Offset: 0x48, Size: 0x8]
	<FString,FString> Param;//[Offset: 0x50, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CustomNoticeImageTable.DataTable.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarUnArmWeapon_C.SolarUnArmWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Controller_BattleRoyaleMap01_C.BP_Controller_BattleRoyale_C.BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	void OnCatchInputActionDelegate_18F05E0808DBD650258994A2EF662AD1(FName ActionName, byte InputEventType);// 0x78e7078fdf9e
	void OnEnterLandingDelegate_18EF1DD708DBD650258992FEEF662AA7();// 0xc39607b6a008
	void UpdateEnableAiPalRate(int Rate);// 0x18095078ea041
	void DebugInitTask();// 0x18094078ea041
	void DebugSetPlayerData();// 0x18093078ea041
	void NotifyCrouchIsLocked();// 0x18092078ea041
	FString GetNoticeLocalText(int InNoticeID, out const <FString,FString> InNoticeParams);// 0x18091078ea041
	void DebugUpdateTask();// 0x18090078ea041
	void ReceiveEndPlay(byte EndPlayReason);// 0x1808f078ea041
	void TryRecordBattlePlayerData();// 0x1808e078ea041
	int QueryStage();// 0x1808d078ea041
	IntPoint GetMobileStandardScreenSize();// 0x1808c078ea041
	void OnCharacterRebirthLua();// 0x1808b078ea041
	void ShowBackpackUI();// 0x1808a078ea041
	void SetInputActionSwitch(int ActionID, bool bOn);// 0x18089078ea041
	void LuaShowUI(FString WidgetPath, FString UIName);// 0x18088078ea041
	void NotifyMonsterSpawn();// 0x18087078ea041
	void RecordSpectateInfoToBI(out SpectateReportInfo SpectateReportInfo);// 0x18086078ea041
	void ReceiveBeginPlay();// 0x32ffbd07bda065
	void OnCharacterDeathLua();// 0x18084078ea041
	bool IsMatching();// 0x18083078ea041
	void CustomModeShowNotice(const int InType, const int InNoticeID, class Object InClass, const float InTime, FString InText, Object* InIcon, const int InNoticeColor);// 0x1808207b6a001
	void UpdateAiPalRate(int Rate);// 0x18081078ea041
	IntPoint GetCustomStandardScreenSize();// 0x1808007b6a001
	void OnNotifyLockPlayer(FString Name);// 0x1807f078ea041
	void SolarGM_BattleLua(FString CmdName, out const FString[] Params);// 0xffffffb7078ea000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Controller_BattleRoyale_C.BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Controller_Framework_C.SCMPlayerController.SolarPlayerController.SolarPlayerControllerBase.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xed8, Size: 0x8]
	PoseSnapshot Snapshot;//[Offset: 0xee0, Size: 0x38]
	float TempMaxDist;//[Offset: 0xf18, Size: 0x4]
	int TempMaxIndex;//[Offset: 0xf1c, Size: 0x4]
	int EnableAiPalRate;//[Offset: 0xf20, Size: 0x4]
	void UpdateAiPalRate(int Rate);// 0xffffffff0d69d1c0
	void OnRep_EnableAiPalRate();// 0x1971407b6a001
	void OnNotifyLockPlayer(FString Name);// 0x4460f25e078ea114
	void RequestNotifyLockPlayer(FString Name);// 0xb0ed07b6a008
	void InpActEvt_GMT_K2Node_InputActionEvent(Key Key);// 0x32ffbd07bda065
	void InputReviveSelfReleased();// 0xffffff8b078ea002
	void AssembleCustomAntiCheatData(SolarWeapon* ActiveWeapon, SolarVehiclePawn* BoardedVehicle);// 0xffffff8c078e9fff
	void CustomAntiCheatDataExport(out const FString[] DataName, out const FString[] DataContent);// 0xb10b07b6a008
	void ClientNotifyLockPlayer(FString Name);// 0xffffff8c078ea044
	static void ExecuteUbergraph_BP_Controller_Framework(int EntryPoint, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, const FString[] Temp_string_Variable, enum CallFunc_GetBuildConfiguration_ReturnValue, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Key K2Node_InputActionEvent_Key, byte CallFunc_MakeLiteralByte_ReturnValue, SolarWeapon* K2Node_Event_ActiveWeapon, SolarVehiclePawn* K2Node_Event_BoardedVehicle, const FString[] K2Node_Event_DataName, const FString[] K2Node_Event_DataContent, FString CallFunc_Conv_ByteToString_ReturnValue, FString K2Node_CustomEvent_Name, const FString[] K2Node_MakeArray_Array);// 0x149eb07b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_HUD_BattleRoyaleMap01_C.BP_HUD_BattleRoyale_C.BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_HUD_BattleRoyale_C.BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_HUD_Framework_C.BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3b0, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3b8, Size: 0x8]
	delegate OnWindowVisibiltyChanged;//[Offset: 0x3c0, Size: 0x10]
	void RemoveInputActionFlagTeamDeath(SolarInputSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffff8f078ea002
	void AddInputActionFlagTeamDeath(SolarInputSubsystem* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x32ffbc07bda065
	void BP_SCustomHUDBase_AutoGenFunc(Object* Publisher, Object* Payload, out const FString[] MetaData, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x1a7b2078ea041
	void ReceiveBeginPlay();// 0x9fbc07b6a008
	void EventOnWindowVisibiltyChanged(byte UIType, byte Visibility);// 0xb479078ea041
	void ExecuteUbergraph_BP_HUD_Framework(int EntryPoint, byte K2Node_CustomEvent_UIType, byte K2Node_CustomEvent_Visibility, SolarGlobalEventSystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x264d607b6a008
	void OnWindowVisibiltyChanged__DelegateSignature(byte UIType, byte Visibility);// 0xd84907b6a001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleHUDForTechDesign.BattleHUDBase.SolarHUD.HUD.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BattleHUDBase.SolarHUD.HUD.Actor.Object
	class HUDDispatcherBase* Dispatcher;//[Offset: 0x318, Size: 0x8]
	HUDDispatcherBase* WidgetEventDispatcher;//[Offset: 0x320, Size: 0x8]
	SoftObjectPath TeammateUI;//[Offset: 0x328, Size: 0x18]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	bool bUseBattleDeathView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	SolarPlayersHPModel* PlayersHPModel;//[Offset: 0x348, Size: 0x8]
	SolarPlayersShieldModel* PlayersShieldModel;//[Offset: 0x350, Size: 0x8]
	SolarTeamInfoModel* TeamInfoModelModel;//[Offset: 0x358, Size: 0x8]
	void ShowDiePage_Deprecated();// 0x4527078ea041
	void OnPlayerStateRepInController(enum RepType, PlayerState* PlayerState);// 0x4526078ea041
	void OnPlayerStateRepInCharacter(enum RepType, PlayerState* PlayerState);// 0x4525078ea041
	void OnNewTeamInfo(SolarTeamInfo* TeamInfo);// 0x4524078ea041
	void OnCharacterEndPlay(SolarCharacter* Character);// 0x4523078ea041
	UISubsystem* GetUISubSystem();// 0x4522078ea041
	void CloseDiePage_Deprecated(const class UserWidget InDiePageClass);// 0x4521078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHUD.HUD.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayersHPModel.SolarCharactersModelBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarCharactersModelBase.Object
	<FString,SingleCharacterModelBase*> PlayersModel;//[Offset: 0x28, Size: 0x50]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayersShieldModel.SolarCharactersModelBase.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarTeamInfoModel.Object
	delegate OnTeamInfoReplicated;//[Offset: 0x40, Size: 0x10]
	void SimpleTeamInfoDelegate__DelegateSignature(SolarTeamInfo* PreTeamInfo, SolarTeamInfo* NowTeamInfo);// 0x2a0e078ea041
	void OnMyTeamInfoReplicated(SolarTeamInfo* InPreTeamInfo, SolarTeamInfo* InMyTeamInfo);// 0x2a0d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_TeamPerspective_LocalPlayer_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	CueContent[] CueContents;//[Offset: 0x298, Size: 0x10]
	bool WhileActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x46c9078ea041
	bool OnRemoveInternal(SolarCharacter* NullableCharacter, out const GameplayCueParameters Parameters);// 0x46c8078ea041
	void OnLocalPlayerSpectateMeStatusChanged(SolarCharacter* Character, bool bIsSpectating);// 0x46c7078ea041
	bool OnExecuteInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x46c6078ea041
	bool OnActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters);// 0x46c5078ea041
	bool ListenLocalPlayerSpectateMeStatus();// 0x46c4078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayCueNotify_Actor.Actor.Object
	bool bAutoDestroyOnRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	float AutoDestroyDelay;//[Offset: 0x22c, Size: 0x4]
	bool WarnIfTimelineIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	bool WarnIfLatentActionIsStillRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 0x1]
	GameplayTag GameplayCueTag;//[Offset: 0x234, Size: 0x8]
	GameplayTagReferenceHelper ReferenceHelper;//[Offset: 0x240, Size: 0x10]
	FName GameplayCueName;//[Offset: 0x250, Size: 0x8]
	bool bAutoAttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool IsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	bool bUniqueInstancePerInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 0x1]
	bool bUniqueInstancePerSourceObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 0x1]
	bool bAllowMultipleOnActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 0x1]
	bool bAllowMultipleWhileActiveEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 0x1]
	int NumPreallocatedInstances;//[Offset: 0x260, Size: 0x4]
	bool WhileActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x3ce9078ea041
	bool OnRemove(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x3ce8078ea041
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x3ce7078ea041
	bool OnExecute(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x3ce6078ea041
	bool OnActive(Actor* MyTarget, out const GameplayCueParameters Parameters);// 0x3ce5078ea041
	void K2_HandleGameplayCue(Actor* MyTarget, byte EventType, out const GameplayCueParameters Parameters);// 0x3ce4078ea041
	void K2_EndGameplayCue();// 0x3ce3078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: CueContent
	enum PlayTiming;//[Offset: 0x0, Size: 0x1]
	FName CustomEvent;//[Offset: 0x4, Size: 0x8]
	byte VisibleTargetFlag;//[Offset: 0xc, Size: 0x1]
	GameplayTagRequirements PlayTagRequirements;//[Offset: 0x10, Size: 0x50]
	ActorEffectContent[] ActorEffectContents;//[Offset: 0x60, Size: 0x10]
	BuffEffectContent[] BuffEffectContents;//[Offset: 0x70, Size: 0x10]
	SoundContent[] SoundContents;//[Offset: 0x80, Size: 0x10]
	HeadIconContent[] HeadIconContents;//[Offset: 0x90, Size: 0x10]
	ParticleSystemContent[] ParticleSystemContents;//[Offset: 0xa0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorEffectContent
	class ActorEffect* ActorEffectClass;//[Offset: 0x0, Size: 0x8]
	enum AffectedActorType;//[Offset: 0x8, Size: 0x1]
	bool bHideFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	GameplayTag VisibilityFlagTag;//[Offset: 0xc, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BuffEffectContent
	FName BuffEffectID;//[Offset: 0x0, Size: 0x8]
	bool bStopOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum BuffEffectType;//[Offset: 0x9, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SoundContent
	FName SoundGroupName;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: HeadIconContent
	GameplayTag HeadIconTag;//[Offset: 0x0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ParticleSystemContent
	ActorParticleEffectSpawnInfo SpawnInfo;//[Offset: 0x0, Size: 0x70]
	bool bStopOnEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ActorParticleEffectSpawnInfo
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 0x28]
	enum AttachOption;//[Offset: 0x28, Size: 0x1]
	FName AttachPointName;//[Offset: 0x2c, Size: 0x8]
	byte LocationType;//[Offset: 0x34, Size: 0x1]
	Vector Location;//[Offset: 0x38, Size: 0xc]
	Rotator Rotation;//[Offset: 0x44, Size: 0xc]
	Vector Scale;//[Offset: 0x50, Size: 0xc]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	bool bEnablePooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 0x1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GameplayTagReferenceHelper
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_MC_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	void LobbyForceSetLOD();// 0x17feb07b6a001
	MaterialInstanceDynamic* TryCreateDynamicMaterialInstance(PrimitiveComponent* Component, int ElementIndex, MaterialInterface* SourceMaterial, FName OptionlName, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x17fea07b6a001
	void FX_Idle();// 0x17fe907b6a001
	void FX_Flying();// 0x17fe807b6a001
	void FX_Charging();// 0x6188c0793a100
	void FX_LowPower();// 0x2156107b6a001
	void FX_Default(bool CallFunc_IsFly_ReturnValue);// 0x2dffba07bda02e
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_TeamPerspective_Teammate_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_ParkourVertAcc_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_ParkourHoriAcc_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_HOD_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Ornament_EnergyShield_N_Set01_FX_C.Actor.Object
	ParticleSystemComponent* FX_PsmTM_IdleShow_LinkIdleLoopInGame;//[Offset: 0x228, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Ornament_EnergyShield_N_Set01_Anim_C.SolarOrnamentHackerBall.SolarOrnamentChildActor.Actor.Object
	SkeletalMeshComponent* Avatar_PsmTM_EnergyShield_Normal;//[Offset: 0x280, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarOrnamentHackerBall.SolarOrnamentChildActor.Actor.Object
	SolarCharacter* OwnerCharacter;//[Offset: 0x228, Size: 0x8]
	SkeletalMeshComponent* OwnerMeshComp;//[Offset: 0x230, Size: 0x8]
	FName SoftAttachBoneName;//[Offset: 0x238, Size: 0x8]
	FName SoftAttachSecondBoneName;//[Offset: 0x240, Size: 0x8]
	Transform AttachRelativeTransform;//[Offset: 0x250, Size: 0x30]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarOrnamentChildActor.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_NovaCSM_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8]
	void FX_Flying();// 0x2dffba07bda02e
	void FX_Idle();// 0xffffffff4d518240
	void FX_LowPower();// 0x24a9c07b6a001
	void FX_Charging();// 0x24a9b07b6a001
	void FX_Default();// 0x24a9a07b6a001
	void OnMeshEffectFactorChange();// 0xfffffffed6c80360
	void ExecuteUbergraph_BP_PBags_NovaCSM_Set01(int EntryPoint, bool CallFunc_IsCharging_ReturnValue, bool CallFunc_HasEnergy_ReturnValue);// 0x2dffba07bda02e
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarFlyTrail_C.SolarFlyTrail.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x570, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_UAVRescue_C.SolarUAVRescue.SolarUAV.SummonItemBase.Pawn.Actor.Object
	ParticleSystemComponent* FX_MainJet;//[Offset: 0xa20, Size: 0x8]
	Actor* ShieldObj;//[Offset: 0xa28, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_PsmEM_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8]
	void OnMeshEffectFactorChange();// 0x26010078ea041
	void ExecuteUbergraph_BP_PBags_PsmEM_Set01(int EntryPoint, bool CallFunc_IsCharging_ReturnValue, bool CallFunc_HasEnergy_ReturnValue);// 0xffffffff4c2832a0
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_PBags_MphyMM_Set01_C.BP_SolarBackpackActor_C.SolarBackpackActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 0x8]
	StaticMeshComponent* FX_G_Mesh_PBags_MphyMM_Set01;//[Offset: 0x328, Size: 0x8]
	void FX_Flying(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x25dd207b6a001
	void FX_Idle(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x25dd107b6a001
	void FX_LowPower(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x25dd007b6a001
	void FX_Charging(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0xffffff8b078ea002
	void OnMeshEffectFactorChange();// 0x24de607b6a008
	void ExecuteUbergraph_BP_PBags_MphyMM_Set01(int EntryPoint);// 0xd9122093a6652c82
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_SkydiveSound_C.ChaGC_SkydiveSound.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b8, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGC_SkydiveSound.GameplayCueNotify_Actor.Actor.Object
	FName[] StartSoundGroups;//[Offset: 0x298, Size: 0x10]
	FName[] StopSoundGroups;//[Offset: 0x2a8, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_SkydiveFly_C.ChaGC_SkydiveFly.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x308, Size: 0x8]
	ParticleSystemComponent* Particle;//[Offset: 0x310, Size: 0x8]
	ParticleSystem* EnemyParticleAsset;//[Offset: 0x318, Size: 0x8]
	ParticleSystem* FriendParticleAsset;//[Offset: 0x320, Size: 0x8]
	ParticleSystem* DefenderParticleAsset;//[Offset: 0x328, Size: 0x8]
	bool ShowParticleInLowLevelGraphicsQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	void ShowEncircleParticle(bool bIsLocalTeam, bool bIsDefender, bool Temp_bool_Variable, bool CallFunc_IsLowLevelGraphicsQuality_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, ParticleSystem* K2Node_Select_Default, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue);// 0x9ac007b6a00b
	bool OnRemoveInternal(SolarCharacter* NullableCharacter, out const GameplayCueParameters Parameters, bool CallFunc_OnRemoveInternal_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x1c00054078ee0c7
	bool WhileActiveInternal(SolarCharacter* Character, out const GameplayCueParameters Parameters, bool CallFunc_WhileActiveInternal_ReturnValue);// 0xffffff8f078ea002
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGC_SkydiveFly.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	float MinBoostDuration;//[Offset: 0x2b0, Size: 0x4]
	bool bIsBoost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	SoftObjectPath SkywardDiveParticle;//[Offset: 0x2c8, Size: 0x18]
	FName[] SkywardDiveParticlePackageSocketNames;//[Offset: 0x2e0, Size: 0x10]
	ParticleSystemComponent*[] CacheSkywardDiveEffects;//[Offset: 0x2f0, Size: 0x10]
	void ShowEncircleParticle(bool bIsLocalTeam, bool bIsDefender);// 0x46cb078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SkydivingTrailEffect_C.SkydiveTrailEffect.Actor.Object
	SplineComponent* Spline;//[Offset: 0x230, Size: 0x8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x238, Size: 0x8]
	float ParticleAlphaFadeOut_Alpha_56079AFA4AF8F5EF2064FC9C87D0666D;//[Offset: 0x240, Size: 0x4]
	byte ParticleAlphaFadeOut__Direction_56079AFA4AF8F5EF2064FC9C87D0666D;//[Offset: 0x244, Size: 0x1]
	TimelineComponent* ParticleAlphaFadeOut;//[Offset: 0x248, Size: 0x8]
	float[] SplinePointsTimeArray;//[Offset: 0x250, Size: 0x10]
	float VelocityToTangentScale;//[Offset: 0x260, Size: 0x4]
	float TrackDelay;//[Offset: 0x264, Size: 0x4]
	ParticleSystem* TrailParticleAsset;//[Offset: 0x268, Size: 0x8]
	ParticleSystem* DefenderTrailParticleAsset;//[Offset: 0x270, Size: 0x8]
	float ParticleDestroyDelay;//[Offset: 0x278, Size: 0x4]
	int SplinePointCountCheck;//[Offset: 0x27c, Size: 0x4]
	float CurrentTime;//[Offset: 0x280, Size: 0x4]
	bool IsDefender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	bool IsSameTeamWithLocalPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]
	LinearColor EnemyTrailColor;//[Offset: 0x288, Size: 0x10]
	LinearColor TeammateTrailColor;//[Offset: 0x298, Size: 0x10]
	S_RandomColorLimit ETColor;//[Offset: 0x2a8, Size: 0x20]
	S_RandomColorLimit TMColor;//[Offset: 0x2c8, Size: 0x20]
	float LastTime;//[Offset: 0x2e8, Size: 0x4]
	bool PrintDebugMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 0x1]
	bool EndPointReached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 0x1]
	float MissEndPointTolerance;//[Offset: 0x2f0, Size: 0x4]
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 0x1]
	float K2Node_Event_CurrentTime;//[Offset: 0x2f8, Size: 0x4]
	float CallFunc_Array_Get_Item;//[Offset: 0x2fc, Size: 0x4]
	float CallFunc_Array_Get_Item;//[Offset: 0x300, Size: 0x4]
	float CallFunc_Get_Spline_Input_Key_InputKey;//[Offset: 0x304, Size: 0x4]
	Vector CallFunc_BreakTransform_Location;//[Offset: 0x308, Size: 0xc]
	Rotator CallFunc_BreakTransform_Rotation;//[Offset: 0x314, Size: 0xc]
	Vector CallFunc_BreakTransform_Scale;//[Offset: 0x320, Size: 0xc]
	HitResult CallFunc_K2_SetWorldLocation_SweepHitResult;//[Offset: 0x32c, Size: 0x88]
	void UserConstructionScript();// 0x26a5e078ea041
	void UpdateParticleTransform(Vector bpp__WorldLocation__pf, Rotator bpp__WorldRotation__pf);// 0x26a64078ea041
	void TryRemoveSplinePoint();// 0x26a5d078ea041
	void ReceiveBeginPlay();// 0x26a62078ea041
	void ParticleAlphaFadeOut__UpdateFunc();// 0x2870d07b6a008
	void ParticleAlphaFadeOut__FinishedFunc();// 0xffffff8c078ea000
	void MoveSplinePoint(Vector bpp__WorldDeltaLocation__pf);// 0x26a61078ea041
	void MoveSplineComponent(Vector bpp__WorldLocationDelta__pf);// 0x286ea07b6a008
	void InitEffectAppearance(bool bpp__IsDefender__pf, bool bpp__IsSameTeamWithLocalPlayer__pf);// 0x26b87078ea000
	void Get Spline Input Key(out float bpp__InputKey__pf);// 0x2871107b6a008
	void FadeOutAndDestroy();// 0x2871307b6a008
	void ClearData();// 0x286f507b6a008
	void AddTrailPointImpl(Vector bpp__Location__pf, Vector bpp__Velocity__pf);// 0xffffff8c078ea000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: S_RandomColorLimit
	float RMin_16_D340624D4CA7609174F8B3A2E021478F;//[Offset: 0x0, Size: 0x4]
	float RMax_17_6F8317D14D28873889D4798D04D309D5;//[Offset: 0x4, Size: 0x4]
	float GMin_18_AA7F58234EA5DE4481D0B18DFA77CACE;//[Offset: 0x8, Size: 0x4]
	float GMax_19_D145518C468C4DD9C9A890ABBEF4CFCB;//[Offset: 0xc, Size: 0x4]
	float BMin_20_B066DE7141BF9F5484855C800AA462A6;//[Offset: 0x10, Size: 0x4]
	float BMax_21_A60CD6F6464031C0C446E3820B3F510A;//[Offset: 0x14, Size: 0x4]
	float AMin_22_A090280047E8555BE863B4B9276145A9;//[Offset: 0x18, Size: 0x4]
	float AMax_23_9214E9E5434D0202F89F66BAF5199F2A;//[Offset: 0x1c, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ChaGCBP_TeamPerspective_Opponent_C.ChaGC_CharacterActorCueBase.GameplayCueNotify_Actor.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2b0, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Hover_Soroll04_C.SolarIronManVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1920, Size: 0x8]
	ActiveGameplayEffectHandle InhibitDamageReactionGEHandle;//[Offset: 0x1928, Size: 0x8]
	void ReceiveBeginPlay();// 0x2dffba07bda02e
	void ApplyInhibitDamageReactionGameplayEffect(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0xd9122093a6652c82
	void RemoveInhibitDamageReactionGameplayEffect(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0xd9122093a6652c82
	static void ExecuteUbergraph_BP_VH_Hover_Soroll04(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_HasAuthority_ReturnValue, int K2Node_CustomEvent_GetOnSeatIndex, SolarCharacter* K2Node_CustomEvent_GetOnPlayer, int K2Node_CustomEvent_GetOffSeatIndex, SolarCharacter* K2Node_CustomEvent_GetOffPlayer, AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, AbilitySystemComponent* CallFunc_GetAbilitySystemComponent_ReturnValue, ActiveGameplayEffectHandle CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue, bool CallFunc_RemoveActiveGameplayEffect_ReturnValue);// 0x2692707b6a008
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarIronManVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	FName LeftHandSocket;//[Offset: 0x13e0, Size: 0x8]
	FName RightHandSocket;//[Offset: 0x13e8, Size: 0x8]
	FName LeftFootSocket;//[Offset: 0x13f0, Size: 0x8]
	FName RightFootSocket;//[Offset: 0x13f8, Size: 0x8]
	FName BackPackSocket;//[Offset: 0x1400, Size: 0x8]
	AnimMontage* RotationLaserMontage;//[Offset: 0x1408, Size: 0x28]
	Vector BoxHalfSize;//[Offset: 0x1430, Size: 0xc]
	int QuerySameActorMaxNum;//[Offset: 0x143c, Size: 0x4]
	float VehicleSpeedThresholdFromStandToLie;//[Offset: 0x1440, Size: 0x4]
	VehicleVFX LeftHandBulletEffect;//[Offset: 0x1450, Size: 0x90]
	VehicleVFX LeftHandMuzzleEffect;//[Offset: 0x14e0, Size: 0x90]
	VehicleVFX RightHandBulletEffect;//[Offset: 0x1570, Size: 0x90]
	VehicleVFX RightHandMuzzleEffect;//[Offset: 0x1600, Size: 0x90]
	VehicleVFX HitEffect;//[Offset: 0x1690, Size: 0x90]
	VehicleVFX[] IronManJetEffectInfo;//[Offset: 0x1720, Size: 0x10]
	byte[] HitDecalExceptObjTypes;//[Offset: 0x1730, Size: 0x10]
	ParticleSystem* HitDecalParticle;//[Offset: 0x1740, Size: 0x28]
	Vector HitDecalScale;//[Offset: 0x1768, Size: 0xc]
	float HitDecalInterval;//[Offset: 0x1774, Size: 0x4]
	float HitDecalBeginTime;//[Offset: 0x1778, Size: 0x4]
	float HitDecalEndTime;//[Offset: 0x177c, Size: 0x4]
	float HitDecalLength;//[Offset: 0x1780, Size: 0x4]
	float SmoothRotationSpeed;//[Offset: 0x1788, Size: 0x4]
	float MaxJetEffectFXkgValue;//[Offset: 0x178c, Size: 0x4]
	FName JetEffectFXkgName;//[Offset: 0x1790, Size: 0x8]
	class GameplayEffect* CanNotSwitchSeat;//[Offset: 0x1798, Size: 0x8]
	StaticMesh* IronManStaticMeshWithDriver;//[Offset: 0x17f0, Size: 0x28]
	StaticMesh* IronManStaticMeshWithNoDriver;//[Offset: 0x1818, Size: 0x28]
	float MaxSpeedAfterCollision;//[Offset: 0x1840, Size: 0x4]
	bool bAddRiderSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1844, Size: 0x1]
	VehicleSeatSlot RiderSeatSlot;//[Offset: 0x1848, Size: 0xd8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SolarHoverVehicleMovement* VehicleMovement;//[Offset: 0x13c0, Size: 0x8]
	void OnVehicleRootHitForAttachPlatform(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x4e35078ea041
	void OnPlatformActorEndplay(Actor* Actor, byte EndPlayReason);// 0x4e34078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHoverVehicleMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x230, Size: 0x8]
	float MinLocationDiffForThrusterTrace;//[Offset: 0x238, Size: 0x4]
	float MinRotationDiffForThrusterTrace;//[Offset: 0x23c, Size: 0x4]
	float DriverJustOnTimer;//[Offset: 0x240, Size: 0x4]
	Vector MassOffset;//[Offset: 0x244, Size: 0xc]
	float HoverForce;//[Offset: 0x250, Size: 0x4]
	float HoverSpringCoefficient;//[Offset: 0x254, Size: 0x4]
	float HoverDampingCoefficient;//[Offset: 0x258, Size: 0x4]
	float HoverHeight;//[Offset: 0x25c, Size: 0x4]
	float MinHoverHeight;//[Offset: 0x260, Size: 0x4]
	float BouncinessForMinHoverHeight;//[Offset: 0x264, Size: 0x4]
	ThrusterData[] ThrusterDataArray;//[Offset: 0x268, Size: 0x10]
	CurveFloat* DustEffectScaleCurve;//[Offset: 0x278, Size: 0x8]
	float HoverHeightBlendSpeed;//[Offset: 0x280, Size: 0x4]
	float ThrusterTargetAnimationBlendSpeed;//[Offset: 0x284, Size: 0x4]
	float YawDegreeDifference;//[Offset: 0x288, Size: 0x4]
	float SpoilerRotateSpeed;//[Offset: 0x28c, Size: 0x4]
	float MaxRudderRoll;//[Offset: 0x290, Size: 0x4]
	float MinRudderRoll;//[Offset: 0x294, Size: 0x4]
	float MaxRudderYaw;//[Offset: 0x298, Size: 0x4]
	float MinRudderYaw;//[Offset: 0x29c, Size: 0x4]
	float MeshLeaningTime;//[Offset: 0x2a0, Size: 0x4]
	float MeshRecoverTime;//[Offset: 0x2a4, Size: 0x4]
	float MeshRotateThreshold;//[Offset: 0x2a8, Size: 0x4]
	Rotator ClockwiseMeshRotator;//[Offset: 0x2ac, Size: 0xc]
	RuntimeFloatCurve AccelerationCurve;//[Offset: 0x2b8, Size: 0x88]
	float MaxSideMovingSpeed;//[Offset: 0x340, Size: 0x4]
	float MaxBackwardMovingSpeed;//[Offset: 0x344, Size: 0x4]
	float DecelerationDegree;//[Offset: 0x348, Size: 0x4]
	float DecelerationOnInput;//[Offset: 0x34c, Size: 0x4]
	float DecelerationOnMovingDirection;//[Offset: 0x350, Size: 0x4]
	float MinDecelerationOnMovingDirection;//[Offset: 0x354, Size: 0x4]
	GameplayTagContainer IgnoreDecelerationOnMovingDirectionTags;//[Offset: 0x358, Size: 0x20]
	RuntimeFloatCurve DecelerationOnSide;//[Offset: 0x378, Size: 0x88]
	RuntimeFloatCurve AccelerationMultiplierForSideVelocity;//[Offset: 0x400, Size: 0x88]
	float MaxControllableDegree;//[Offset: 0x488, Size: 0x4]
	GameplayTagContainer InAirControllableTags;//[Offset: 0x490, Size: 0x20]
	float AdditionalDegreeForStabilize;//[Offset: 0x4b0, Size: 0x4]
	RuntimeFloatCurve StabilizeDampingCurve;//[Offset: 0x4b8, Size: 0x88]
	RuntimeFloatCurve StabilizeSpeedCurve;//[Offset: 0x540, Size: 0x88]
	float TimerForAntiStuck;//[Offset: 0x5c8, Size: 0x4]
	float StuckAcceleration;//[Offset: 0x5cc, Size: 0x4]
	float StuckAccelerationLerpSpeed;//[Offset: 0x5d0, Size: 0x4]
	float GravityAcceleration;//[Offset: 0x5d4, Size: 0x4]
	float GravityWithoutDriver;//[Offset: 0x5d8, Size: 0x4]
	float LandingDuration;//[Offset: 0x5dc, Size: 0x4]
	float MaximumVelocityOnZWithoutDriver;//[Offset: 0x5e0, Size: 0x4]
	float DecelerationRateWithoutDriver;//[Offset: 0x5e4, Size: 0x4]
	float AngularDampingWithoutDriver;//[Offset: 0x5e8, Size: 0x4]
	float WaterLineForFloatingForce;//[Offset: 0x5ec, Size: 0x4]
	float UpwardAccelerationFloatingOnWater;//[Offset: 0x5f0, Size: 0x4]
	float WaterAlignSpeed;//[Offset: 0x5f4, Size: 0x4]
	float WaterHeightWithoutDriver;//[Offset: 0x5f8, Size: 0x4]
	PIDController UpwardForcePIDController;//[Offset: 0x5fc, Size: 0x1c]
	float RotateAccelaration;//[Offset: 0x618, Size: 0x4]
	float RotateDecelaration;//[Offset: 0x61c, Size: 0x4]
	float MaxAngularSpeed;//[Offset: 0x620, Size: 0x4]
	float HoverHeightMultiplierAfterBroken;//[Offset: 0x624, Size: 0x4]
	float ParticleMultiplierAfterBroken;//[Offset: 0x628, Size: 0x4]
	VehicleVFX[] ThrusterParticles;//[Offset: 0x630, Size: 0x10]
	VehicleVFX MovementParticles;//[Offset: 0x640, Size: 0x90]
	ThrusterState[] ThrusterStateArray;//[Offset: 0x910, Size: 0x10]
	SolarHoverVehicle* VehiclePawn;//[Offset: 0x920, Size: 0x8]
	SolarNetMovementComponent* VehicleNetMovement;//[Offset: 0x928, Size: 0x8]
	AkComponent* AkComponent;//[Offset: 0x930, Size: 0x8]
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x530f078ea041
	void OnDriverGetOnVehicle(int GetOnSeatIndex, SolarCharacter* GetOnPlayer);// 0x530e078ea041
	void OnDriverGetOffVehicle(int GetOffSeatIndex, SolarCharacter* GetOffPlayer);// 0x530d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ThrusterData
	float HoverHeightMultiplierInForward;//[Offset: 0x0, Size: 0x4]
	float HoverHeightMultiplierInBackward;//[Offset: 0x4, Size: 0x4]
	float HoverHeightMultiplierInLeft;//[Offset: 0x8, Size: 0x4]
	float HoverHeightMultiplierInRight;//[Offset: 0xc, Size: 0x4]
	bool bRaiseDust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float DustEffectScale;//[Offset: 0x14, Size: 0x4]
	Vector DustEffectOffest;//[Offset: 0x18, Size: 0xc]
	FName ThrusterSocket;//[Offset: 0x24, Size: 0x8]
	Vector ThrusterOffsetIfNoValidSocket;//[Offset: 0x2c, Size: 0xc]
	float SweepRadius;//[Offset: 0x38, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: PIDController
	float PCoeff;//[Offset: 0x0, Size: 0x4]
	float ICoeff;//[Offset: 0x4, Size: 0x4]
	float DCoeff;//[Offset: 0x8, Size: 0x4]
	float Minimum;//[Offset: 0xc, Size: 0x4]
	float Maximum;//[Offset: 0x10, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ThrusterState
	HitResult TouchGroundHit;//[Offset: 0x38, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Hover_Soroll04_ShapedGun_C.SolarVehicleIronManWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleIronManWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	WeaponFireLaserCollector* LaserCollector;//[Offset: 0x10f0, Size: 0x8]
	AnimMontage* DriverStandAttackRight;//[Offset: 0x1100, Size: 0x28]
	AnimMontage* DriverLieAttackRight;//[Offset: 0x1128, Size: 0x28]
	FName AttackSectionName;//[Offset: 0x1150, Size: 0x8]
	void ServerUpdateLaserInfo(const Vector InTarget, Actor* InTargetActor);// 0x5f24078ea041
	void ServerLaserHit(const HitResult[] Hits, float InActivateTime);// 0x5f23078ea041
	void ServerInterruptLaser();// 0x5f22078ea041
	void ServerActivateLaserShot(const Vector InTarget, Actor* InTargetActor);// 0x5f21078ea041
	SkeletalMeshComponent* GetDriverCharacterMesh();// 0x5f20078ea041
	void ClientUpdateLaserInfo(const Vector InTarget, Actor* InTargetActor);// 0x5f1f078ea041
	void ClientLaserHit(const HitResult[] Hits, float InActivateTime);// 0x5f1e078ea041
	void ClientInterruptLaser();// 0x5f1d078ea041
	void ClientActivateLaserShot(const Vector InTarget, Actor* InTargetActor);// 0x5f1c078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponFireLaserCollector.ActorComponent.Object
	SolarWeapon* OwnerWeapon;//[Offset: 0xb8, Size: 0x8]
	AkComponent* FireAkComponent;//[Offset: 0xc0, Size: 0x8]
	AkComponent* ImpactAkComponent;//[Offset: 0xc8, Size: 0x8]
	WeaponFireLaserElement ActElement;//[Offset: 0xd0, Size: 0x48]
	WeaponFireLaserElement[] FadingElements;//[Offset: 0x118, Size: 0x10]
	ParticleSystem* ExplodeEffectParticle;//[Offset: 0x140, Size: 0x8]
	ParticleSystem* DecalsEffectParticle;//[Offset: 0x148, Size: 0x8]
	ParticleSystemComponent*[] CacheParticles;//[Offset: 0x150, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WeaponFireLaserElement
	ParticleSystemComponent* BeamEffect;//[Offset: 0x38, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Tire_WL01_Flamethrower_C.BP_SolarVehicleWeapon_C.SolarVehicleWeapon.SolarWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarVehicleWeapon_C.SolarVehicleWeapon.SolarWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarVH_Tire_WL01_new_C.BP_WheeledVehicleBase_C.SolarWheeledVehicle.SolarVehiclePawn.Pawn.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_WheeledVehicleBase_C.SolarWheeledVehicle.SolarVehiclePawn.Pawn.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWheeledVehicle.SolarVehiclePawn.Pawn.Actor.Object
	SolarWheeledVehicleMovement* VehicleMovement;//[Offset: 0x13c8, Size: 0x8]
	bool bReplicatedDrift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d0, Size: 0x1]
	bool bReplicatedIsBurnout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d1, Size: 0x1]
	float PlatformDetachImpulse;//[Offset: 0x13d4, Size: 0x4]
	void StatVehicleAutoSteering(bool bInSameDirection);// 0x578c078ea041
	void ServerSetIsDrift(bool bInDrift, byte InDriveType);// 0x578b078ea041
	void ServerSetIsBurnout(bool bInBurnout);// 0x578a078ea041
	void OnRep_IsBurnout();// 0x5789078ea041
	void OnRep_Drift();// 0x5788078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarWheeledVehicleMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float LowFrameRateDeltaTime;//[Offset: 0x138, Size: 0x4]
	float MinLocationDiffForSuspensionTrace;//[Offset: 0x13c, Size: 0x4]
	float Mass;//[Offset: 0x140, Size: 0x4]
	float CenterOfMassOffsetOnZ;//[Offset: 0x144, Size: 0x4]
	float CenterOfMassOffsetOnX;//[Offset: 0x148, Size: 0x4]
	float SuspensionClampRatioInLowFrame;//[Offset: 0x14c, Size: 0x4]
	RuntimeFloatCurve AccelerationCurve;//[Offset: 0x150, Size: 0x88]
	RuntimeFloatCurve AccelerationCurveReverse;//[Offset: 0x1d8, Size: 0x88]
	int ReverseEvaluationAccuracy;//[Offset: 0x260, Size: 0x4]
	RuntimeFloatCurve SteerAngleLimit;//[Offset: 0x268, Size: 0x88]
	RuntimeFloatCurve SteeringResetSpeed;//[Offset: 0x2f0, Size: 0x88]
	RuntimeFloatCurve SteeringSpeed;//[Offset: 0x378, Size: 0x88]
	RuntimeFloatCurve SteeringFraction;//[Offset: 0x400, Size: 0x88]
	RuntimeFloatCurve SteerAngleMutiplier;//[Offset: 0x488, Size: 0x88]
	float LowSteeringSpeed;//[Offset: 0x510, Size: 0x4]
	float LowSteeringSpeedAccelerationMultiplier;//[Offset: 0x514, Size: 0x4]
	float LowSteeringSpeedAngleLimitMultiplier;//[Offset: 0x518, Size: 0x4]
	float LowSpeedSteeringThresholdOnHorizontalInput;//[Offset: 0x51c, Size: 0x4]
	float FlightStabilizationDamping;//[Offset: 0x520, Size: 0x4]
	float LateralFrictionWhenOnlySteeringWheelsOnGround;//[Offset: 0x524, Size: 0x4]
	WheelData[] Wheels;//[Offset: 0x528, Size: 0x10]
	float DepenetrationForceMultiplierForVelocityUp;//[Offset: 0x538, Size: 0x4]
	float RotationMinAngle;//[Offset: 0x53c, Size: 0x4]
	float MaxPitchRotation;//[Offset: 0x540, Size: 0x4]
	float MaxRollRotation;//[Offset: 0x544, Size: 0x4]
	float RotationTimeLimit;//[Offset: 0x548, Size: 0x4]
	bool bOpenTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 0x1]
	float PitchTorqueInDegree;//[Offset: 0x550, Size: 0x4]
	float RollTorqueInDegree;//[Offset: 0x554, Size: 0x4]
	float TorqueForUpsideDown;//[Offset: 0x558, Size: 0x4]
	float MaxAngularVelocityInAir;//[Offset: 0x55c, Size: 0x4]
	float TorqueLerpAcceleration;//[Offset: 0x560, Size: 0x4]
	float BalanceAngularVelocityWheelsOnGround;//[Offset: 0x564, Size: 0x4]
	CurveFloat* DustEffectScaleCurve;//[Offset: 0x568, Size: 0x8]
	<byte,ParticleSystem*> BrokenWheelDustEffect;//[Offset: 0x570, Size: 0x50]
	float WheelDecelerationInBrakeLock;//[Offset: 0x5c0, Size: 0x4]
	float WheelLerpSpeedInSlip;//[Offset: 0x5c4, Size: 0x4]
	float GravityAcceleration;//[Offset: 0x5c8, Size: 0x4]
	float GravityAccelerationInAir;//[Offset: 0x5cc, Size: 0x4]
	float MinHeightForGravityAccelerationInAir;//[Offset: 0x5d0, Size: 0x4]
	float MaxHeightForGravityAccelerationInAir;//[Offset: 0x5d4, Size: 0x4]
	float GravityTransitionDuration;//[Offset: 0x5d8, Size: 0x4]
	float MaxStaticDegree;//[Offset: 0x5dc, Size: 0x4]
	RuntimeFloatCurve GravityMultiplierForAcceleration;//[Offset: 0x5e0, Size: 0x88]
	float DecelerationUnderWater;//[Offset: 0x668, Size: 0x4]
	bool bAutoSteeringEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1]
	float AutoSteeringThresholdTime;//[Offset: 0x670, Size: 0x4]
	float AutoSteeringSpeedThreshold;//[Offset: 0x674, Size: 0x4]
	float AutoSteeringTraceRadius;//[Offset: 0x678, Size: 0x4]
	Vector LeftAutoSteeringTraceStart;//[Offset: 0x67c, Size: 0xc]
	Vector RightAutoSteeringTraceStart;//[Offset: 0x688, Size: 0xc]
	float LeftToRightTangentDegree;//[Offset: 0x694, Size: 0x4]
	float AutoSteeringAngleLimit;//[Offset: 0x698, Size: 0x4]
	float AutoSteeringSpeed;//[Offset: 0x69c, Size: 0x4]
	float AutoSteeringResetSpeed;//[Offset: 0x6a0, Size: 0x4]
	float AutoSteeringLimitInputY;//[Offset: 0x6a4, Size: 0x4]
	WheeledVehicleInputDataAsset* InputData;//[Offset: 0x6a8, Size: 0x8]
	float SteeringLimitMultiplierInDrift;//[Offset: 0x6b0, Size: 0x4]
	float AccelerationMultiplierInDrift;//[Offset: 0x6b4, Size: 0x4]
	float AccelerationInDriftLerpSpeed;//[Offset: 0x6b8, Size: 0x4]
	float AccelerationOutDriftLerpSpeed;//[Offset: 0x6bc, Size: 0x4]
	float MinDriftSpeed;//[Offset: 0x6c0, Size: 0x4]
	float DriftCompensationRate;//[Offset: 0x6c4, Size: 0x4]
	float DriftCancelTimeWithoutInput;//[Offset: 0x6c8, Size: 0x4]
	<byte,ParticleSystem*> DriftParticles;//[Offset: 0x6d0, Size: 0x50]
	float TimerForAntiStuck;//[Offset: 0x720, Size: 0x4]
	float StuckAcceleration;//[Offset: 0x724, Size: 0x4]
	float StuckAccelerationLerpSpeed;//[Offset: 0x728, Size: 0x4]
	float MinAntiRollThreshold;//[Offset: 0x72c, Size: 0x4]
	float MaxAntiRollThreshold;//[Offset: 0x730, Size: 0x4]
	GearSetting[] ForwardGears;//[Offset: 0x738, Size: 0x10]
	float ReverseRpm;//[Offset: 0x748, Size: 0x4]
	float SlipRpmMultiplier;//[Offset: 0x74c, Size: 0x4]
	float RpmSlipSpeed;//[Offset: 0x750, Size: 0x4]
	bool bCanInRPMRedLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 0x1]
	float BurnoutDelayTime;//[Offset: 0x758, Size: 0x4]
	float BurnoutSoundRatio;//[Offset: 0x75c, Size: 0x4]
	SolarVehiclePawn* VehiclePawn;//[Offset: 0x8c8, Size: 0x8]
	SkeletalMeshComponent* VehicleMesh;//[Offset: 0x8d0, Size: 0x8]
	float InputVecXForRotateInAir;//[Offset: 0x8d8, Size: 0x4]
	float InputVecYForRotateInAir;//[Offset: 0x8dc, Size: 0x4]
	float BalanceRotateSpendTime;//[Offset: 0x8e0, Size: 0x4]
	float InputRotateSpendTime;//[Offset: 0x8e4, Size: 0x4]
	byte[] InAirWheelsIndex;//[Offset: 0x8e8, Size: 0x10]
	AkComponent* AkAudioComponent;//[Offset: 0x908, Size: 0x8]
	void SetIsDrift(bool bInDrift, bool bResetDrift);// 0x5fec078ea041
	void SetIsBurnout(bool bInBurnout);// 0x5feb078ea041
	void SetDriveType(enum InType);// 0x5fea078ea041
	void SetCanAutoSteering(bool bCan);// 0x5fe9078ea041
	void SetCanAdjustInAir(bool bCan);// 0x5fe8078ea041
	void OnVehicleSkinSoundUpdate(SolarVehicleSoundDataAsset* OldVehicleSoundDataAsset, SolarVehicleSoundDataAsset* NewVehicleSoundDataAsset);// 0x5fe7078ea041
	void OnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x5fe6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WheelData
	bool bIsPowered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIsPoweredInDrift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]
	Vector Offset;//[Offset: 0xc, Size: 0xc]
	Vector WheelForceOffset;//[Offset: 0x18, Size: 0xc]
	float Radius;//[Offset: 0x24, Size: 0x4]
	float RadiusAfterBroken;//[Offset: 0x28, Size: 0x4]
	float Width;//[Offset: 0x2c, Size: 0x4]
	float MaxRaise;//[Offset: 0x30, Size: 0x4]
	float MaxDrop;//[Offset: 0x34, Size: 0x4]
	float SpringStiffness;//[Offset: 0x38, Size: 0x4]
	float DamperStiffness;//[Offset: 0x3c, Size: 0x4]
	float LaterialFriction;//[Offset: 0x40, Size: 0x4]
	float LaterialFrictionAfterBroken;//[Offset: 0x44, Size: 0x4]
	float LaterialFrictionInDrift;//[Offset: 0x48, Size: 0x4]
	float DriftingLaterialFrictionLerpSpeed;//[Offset: 0x4c, Size: 0x4]
	RuntimeFloatCurve EndDriftFrictionCurve;//[Offset: 0x50, Size: 0x88]
	VehicleVFX DriftDecal;//[Offset: 0xe0, Size: 0x90]
	float RollingFriction;//[Offset: 0x170, Size: 0x4]
	float BrakeDeceleration;//[Offset: 0x174, Size: 0x4]
	float DustEffectScale;//[Offset: 0x178, Size: 0x4]
	float DustEffectScaleAfterBroken;//[Offset: 0x17c, Size: 0x4]
	float DriftEffectScale;//[Offset: 0x180, Size: 0x4]
	ParticleSystemComponent* RaiseDustParticleComponent;//[Offset: 0x260, Size: 0x8]
	ParticleSystemComponent* DriftParticleComponent;//[Offset: 0x268, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: WheeledVehicleInputDataAsset.DataAsset.Object
	float BrakeDelayTime;//[Offset: 0x30, Size: 0x4]
	float ThrottleReleaseDelayTime;//[Offset: 0x34, Size: 0x4]
	float MicroThrottleInputThreshold;//[Offset: 0x38, Size: 0x4]
	float MicroThrottleInputSpeed;//[Offset: 0x3c, Size: 0x4]
	RuntimeFloatCurve JoyStickSteeringInputCurve;//[Offset: 0x40, Size: 0x88]
	RuntimeFloatCurve KeyboardSteeringInputCurve;//[Offset: 0xc8, Size: 0x88]
	RuntimeFloatCurve GamepadThrottleInputCurve;//[Offset: 0x150, Size: 0x88]
	RuntimeFloatCurve GamepadBrakeInputCurve;//[Offset: 0x1d8, Size: 0x88]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: GearSetting
	float MinSpeed;//[Offset: 0x0, Size: 0x4]
	float MaxSpeed;//[Offset: 0x4, Size: 0x4]
	float StartRpm;//[Offset: 0x8, Size: 0x4]
	float MaxRpm;//[Offset: 0xc, Size: 0x4]
	float RpmDescendSpeed;//[Offset: 0x10, Size: 0x4]
	float MinDescendRPM;//[Offset: 0x14, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Hover_Soroll05_AirPlaneWeapon_C.SolarVehicleAirPlaneWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarVehicleAirPlaneWeapon.SolarVehicleWeapon.SolarWeapon.Actor.Object
	SolarAirPlaneMissileConfig* MissileDataAsset;//[Offset: 0x10f0, Size: 0x8]
	float ProjectileGravityScale;//[Offset: 0x10f8, Size: 0x4]
	float ProjectileSpeed;//[Offset: 0x10fc, Size: 0x4]
	float ProjectileMaxRange;//[Offset: 0x1100, Size: 0x4]
	float RandomConeHalfAngle;//[Offset: 0x1104, Size: 0x4]
	int ScatterProjectileCounter;//[Offset: 0x1108, Size: 0x4]
	float BulletSplitMinTime;//[Offset: 0x110c, Size: 0x4]
	float BulletSplitCheckDistance;//[Offset: 0x1110, Size: 0x4]
	float HitEndDelayTime;//[Offset: 0x1114, Size: 0x4]
	float ExpectEndTime;//[Offset: 0x1118, Size: 0x4]
	ClusterBombBullet[] ClusterBombBullets;//[Offset: 0x1120, Size: 0x10]
	void ServerClusterBombShot(const SpawnClusterBombParam InClusterBomb);// 0x5f01078ea041
	void MulticastDrawExplosionDebug(const HitResult DebugResult);// 0x5f00078ea041
	void ClientScatterBulletSpawn(const SolarVirtualBulletSpawnParameter[] InSpawnParameters);// 0x5eff078ea041
	void ClientClusterBombShot(const SpawnClusterBombParam InClusterBomb);// 0x5efe078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SpawnClusterBombParam
	FireUniqueID FireUniqueID;//[Offset: 0x0, Size: 0x4]
	float FireTimeStamp;//[Offset: 0x4, Size: 0x4]
	Vector_NetQuantize StartLoc;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantizeNormal StartDir;//[Offset: 0x14, Size: 0xc]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAirPlaneMissileConfig.DataAsset.Object
	ParticleSystem* ProjectileParticle;//[Offset: 0x30, Size: 0x28]
	SolarDamageInfo MissileDamageInfo;//[Offset: 0x58, Size: 0x40]
	class SolarBullet* MissileBulletClass;//[Offset: 0x98, Size: 0x8]
	FString BulletExplosionSound3P;//[Offset: 0xa0, Size: 0x10]
	FString BulletExplosionSound3PEnemy;//[Offset: 0xb0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ClusterBombBullet
	SolarVirtualBulletHitParameter CacheHitParam;//[Offset: 0x0, Size: 0x78]
	ParticleSystemComponent* BulletEffectComponent;//[Offset: 0x110, Size: 0x8]
	SolarAirPlaneMissileConfig* MissileDataAsset;//[Offset: 0x118, Size: 0x8]
	SolarVirtualBulletAKComponent* BulletAkComponent;//[Offset: 0x120, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Hover_Soroll05_C.SolarAirPlaneVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarAirPlaneVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	StaticMeshComponent* WingCollisionComponent;//[Offset: 0x13e0, Size: 0x8]
	AirPlaneVehicleDataAsset* AirPlaneData;//[Offset: 0x13e8, Size: 0x8]
	float MaxTakingOffTime;//[Offset: 0x13f0, Size: 0x4]
	float TakingOffHeight;//[Offset: 0x13f4, Size: 0x4]
	float TakingOffGravity;//[Offset: 0x13f8, Size: 0x4]
	float CruisingGravity;//[Offset: 0x13fc, Size: 0x4]
	float CrusingPitchOffSetBasedOnCamera;//[Offset: 0x1400, Size: 0x4]
	class GameplayEffect* CruisingEffect;//[Offset: 0x1408, Size: 0x8]
	VehicleCameraDataAsset* CruisingCameraData;//[Offset: 0x1410, Size: 0x8]
	float StartRollingServerWorldTime;//[Offset: 0x1418, Size: 0x4]
	byte RollingCount;//[Offset: 0x141c, Size: 0x1]
	ParticleSystemComponent*[] ThrusterParticleComponents;//[Offset: 0x14a0, Size: 0x10]
	ParticleSystemComponent*[] WingParticleComponents;//[Offset: 0x14b0, Size: 0x10]
	ParticleSystemComponent*[] BulletParticleComponents;//[Offset: 0x14c0, Size: 0x10]
	MaterialInstanceDynamic* AmmoMatInstanceDynamic;//[Offset: 0x14d0, Size: 0x8]
	void NetMulticastPlayAnim(enum RollDirection);// 0x4e37078ea041
	void ClientResetCruising(SolarCharacter* InDriver);// 0x4e36078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: AirPlaneVehicleDataAsset.DataAsset.Object
	RuntimeFloatCurve AdditionalLiftCurveBasedOnVelocity;//[Offset: 0x30, Size: 0x88]
	RuntimeFloatCurve AdditionalLiftCurveBasedOnVelocityZ;//[Offset: 0xb8, Size: 0x88]
	RuntimeFloatCurve AdditionalLiftCurveBasedOnPitch;//[Offset: 0x140, Size: 0x88]
	RuntimeFloatCurve AdditionalLiftForPitchUpFactorCurve;//[Offset: 0x1c8, Size: 0x88]
	float AdditionalLiftForClampGravity;//[Offset: 0x250, Size: 0x4]
	RuntimeFloatCurve AdditionalLiftCurveForPitchUp;//[Offset: 0x258, Size: 0x88]
	RuntimeFloatCurve CruisingSpeedMultiplier;//[Offset: 0x2e0, Size: 0x88]
	GameplayTag RollingCostTag;//[Offset: 0x368, Size: 0x8]
	float CruisingRotateAccelaration;//[Offset: 0x370, Size: 0x4]
	float CruisingRotateDecelaration;//[Offset: 0x374, Size: 0x4]
	float CruisingMaxAngularSpeed;//[Offset: 0x378, Size: 0x4]
	float CruisingClampMaxSpeedMultiplier;//[Offset: 0x37c, Size: 0x4]
	GameplayTagContainer CancelCruisingTags;//[Offset: 0x380, Size: 0x20]
	float RollBackEndSpeed;//[Offset: 0x3a0, Size: 0x4]
	float RollBackCameraDuration;//[Offset: 0x3a4, Size: 0x4]
	VehicleVFX[] ThrusterParticles;//[Offset: 0x3a8, Size: 0x10]
	float ThrusterParticleWithThrottle;//[Offset: 0x3b8, Size: 0x4]
	float ThrusterParticleWithoutThrottle;//[Offset: 0x3bc, Size: 0x4]
	float ThrusterParticleSpeed;//[Offset: 0x3c0, Size: 0x4]
	float ThrusterParticleDeactivateSpeed;//[Offset: 0x3c4, Size: 0x4]
	VehicleVFX[] WingParticles;//[Offset: 0x3c8, Size: 0x10]
	float WingParticleSpeed;//[Offset: 0x3d8, Size: 0x4]
	float WingParticleDeactivateSpeed;//[Offset: 0x3dc, Size: 0x4]
	float PreTakeOffDuration;//[Offset: 0x3e0, Size: 0x4]
	float PreTakeOffHoverForceMultiplier;//[Offset: 0x3e4, Size: 0x4]
	float TakingOffPitchOffset;//[Offset: 0x3e8, Size: 0x4]
	RuntimeFloatCurve TakingOffStabilizeSpeedCurve;//[Offset: 0x3f0, Size: 0x88]
	int AmmoMaterialIndex;//[Offset: 0x478, Size: 0x4]
	FName MataterialProgressParam;//[Offset: 0x47c, Size: 0x8]
	FName MataterialColorParam;//[Offset: 0x484, Size: 0x8]
	LinearColor NormalColor;//[Offset: 0x48c, Size: 0x10]
	LinearColor ReloadingColor;//[Offset: 0x49c, Size: 0x10]
	FloatRange MataterialProgressRange;//[Offset: 0x4ac, Size: 0x10]
	VehicleVFX[] BulletSocketParticles;//[Offset: 0x4c0, Size: 0x10]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Tire_9A03_Rocket_C.BP_SolarVehicleWeapon_C.SolarVehicleWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x10f0, Size: 0x8]
	void OnFireChargeBurstCountChange(int BurstSum);// 0xa74e0790efc6
	void ExecuteUbergraph_BP_VH_Tire_9A03_Rocket(int EntryPoint, int CallFunc_WeaponPostAkEventByName_ReturnValue, int K2Node_Event_BurstSum, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0xffffffff8ef81e50
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_VH_Hover_9A03_C.SolarHoverCraftVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	BoxComponent* Platform;//[Offset: 0x1470, Size: 0x8]
	BoxComponent* AutofirecheckComponent.;//[Offset: 0x1478, Size: 0x8]
	FName PhysicsBone;//[Offset: 0x1480, Size: 0x8]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarHoverCraftVehicle.SolarHoverVehicle.SolarVehiclePawn.Pawn.Actor.Object
	float MeshOffsetWithoutDriver;//[Offset: 0x13e0, Size: 0x4]
	float MeshOffsetLerpSpeed;//[Offset: 0x13e4, Size: 0x4]
	<enum,float> HoverCraftHitImpulseMul;//[Offset: 0x13e8, Size: 0x50]
	float HoverCraftHitImpulseLimit;//[Offset: 0x1438, Size: 0x4]
	BoxComponent* BodyBoxComp;//[Offset: 0x1440, Size: 0x8]
	int[] BodyTraceExceptVehicleTypeIDs;//[Offset: 0x1448, Size: 0x10]
	void OnHoverCraftVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x5308078ea041
	void CheckBody();// 0x5307078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_FX_Def_C.SolarItemCountActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 0x8]
	StaticMeshComponent* 3DIcon;//[Offset: 0x250, Size: 0x8]
	TextRenderComponent* TextRender;//[Offset: 0x258, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 0x8]
	void ReceiveBeginPlay();// 0xfffffffec332cf90
	void SetItemCount(int count);// 0xffffff8c078ea000
	void ExecuteUbergraph_BP_FX_Def(int EntryPoint, int K2Node_Event_Count, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x9619078f30b7
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarItemCountActor.Actor.Object
	TextRenderComponent* TextPtr;//[Offset: 0x230, Size: 0x8]
	FString TextPrefix;//[Offset: 0x238, Size: 0x10]
	void SetItemCount(int count);// 0x516d078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SI_ElectricboxB_C.ElectronicTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x640, Size: 0x8]
	BoxComponent* SummonCollision;//[Offset: 0x648, Size: 0x8]
	StaticMeshComponent* 3DIcon;//[Offset: 0x650, Size: 0x8]
	float OpenAnimation_OpenCurve_D871E75F4C49C735C04C6C90FE58E949;//[Offset: 0x658, Size: 0x4]
	byte OpenAnimation__Direction_D871E75F4C49C735C04C6C90FE58E949;//[Offset: 0x65c, Size: 0x1]
	TimelineComponent* OpenAnimation;//[Offset: 0x660, Size: 0x8]
	void OpenAnimation__FinishedFunc();// 0xe02207b6a008
	void OpenAnimation__UpdateFunc();// 0xd9122093a6652c82
	void PlayOpenAnimation();// 0xd9122093a6652c82
	void ExecuteUbergraph_BP_SI_ElectricboxB(int EntryPoint);// 0x21387078ea001
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: ElectronicTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	FString OnFinishSpawnLoopAudio;//[Offset: 0x600, Size: 0x10]
	FString OnStopLoopAudio;//[Offset: 0x610, Size: 0x10]
	FString OnOpenAudio;//[Offset: 0x620, Size: 0x10]
	SpawnedActorHandle CachedActorHandle;//[Offset: 0x630, Size: 0x4]
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SI_ElectricboxC_C.ElectronicTreasureBox.SolarTreasureBoxActor.SolarItemActor.SolarDormantActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x640, Size: 0x8]
	BoxComponent* SummonCollision;//[Offset: 0x648, Size: 0x8]
	StaticMeshComponent* SM_SI_ElectricboxC_FX;//[Offset: 0x650, Size: 0x8]
	SceneComponent* VFX;//[Offset: 0x658, Size: 0x8]
	StaticMeshComponent* 3DIcon;//[Offset: 0x660, Size: 0x8]
	float OpenAnimation_OpenCurve_89E5397146EB1D36476B268C4D975163;//[Offset: 0x668, Size: 0x4]
	byte OpenAnimation__Direction_89E5397146EB1D36476B268C4D975163;//[Offset: 0x66c, Size: 0x1]
	TimelineComponent* OpenAnimation;//[Offset: 0x670, Size: 0x8]
	void OpenAnimation__FinishedFunc();// 0x23f8207b6a008
	void OpenAnimation__UpdateFunc();// 0xffffff8c078ea000
	void PlayOpenAnimation();// 0x1a48d07b6a001
	void ExecuteUbergraph_BP_SI_ElectricboxC(int EntryPoint);// 0x23f38078ea000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Shotgun_Mphy04_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0xd9122093a6652c82
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd80, Size: 0x8]
	WeaponPartStaticMeshComponent* RedCrosshair;//[Offset: 0xd88, Size: 0x8]
	WeaponPartStaticMeshComponent* CrossHair;//[Offset: 0xd90, Size: 0x8]
	WeaponPartMuzzleComp* WeaponPartMuzzleComp;//[Offset: 0xd98, Size: 0x8]
	WeaponPartGripComp* WeaponPartGripComp;//[Offset: 0xda0, Size: 0x8]
	WeaponPartGunStockComp* WeaponPartGunStockComp;//[Offset: 0xda8, Size: 0x8]
	WeaponPartClipComp* WeaponPartClipComp;//[Offset: 0xdb0, Size: 0x8]
	WeaponPartScopeComp* WeaponPartScopeComp;//[Offset: 0xdb8, Size: 0x8]
	void ReceiveBeginPlay();// 0xd9122093a6652c82
	void K2_SwitchDrawDistance(bool Hold);// 0xd9122093a6652c82
	void ExecuteUbergraph_BP_SolarPlayerWeapon(int EntryPoint, bool K2Node_Event_hold);// 0x800b7fab078ea023
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	WeaponPartsComponent* WeaponPartsComponent;//[Offset: 0xd70, Size: 0x8]
	bool QueryCanEquipPart(const enum Type, const int InWeaponID);// 0x56ca078ea041
	bool GetEquippedScopeTypeAndLevel(out enum Type, out int Level);// 0x56c9078ea041
	int GetEquippedPartLevel(const enum Type);// 0x56c8078ea041
	void GameStatisticsWeaponAddExp(float newExp, float AddExp, int OldLevel, int NewLevel, int reason);// 0x56c7078ea041
	bool CanEquipPart(const enum Type);// 0x56c6078ea041
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: SplineActor_C.SolarWeaponProjectileSpline.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x250, Size: 0x8]
	StaticMeshComponent* Sphere;//[Offset: 0x258, Size: 0x8]
	SplineMeshComponent* SplineMesh;//[Offset: 0x260, Size: 0x8]
	SplineMeshComponent* GetSplineMeshComponent();// 0xb2f407b6a008
	void CreateSpline(out Vector[] Pos);// 0x9619078f30b7
	void ReceiveBeginPlay();// 0xd9122093a6652c82
	void SetPoints(out const Vector[] Points);// 0x27b5b07b6a008
	void Hide();// 0x25e5007b6a008
	void ShowHitPointAt(out const Vector Loc);// 0x24567078ea041
	void HideHitPoint();// 0xd9122093a6652c82
	void ExecuteUbergraph_SplineActor(int EntryPoint, const Vector[] K2Node_Event_Points, const Vector K2Node_Event_Loc, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult);// 0x2dffba07bda02e
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_FX_Exp_C.SolarItemCountActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x248, Size: 0x8]
	StaticMeshComponent* 3DIcon;//[Offset: 0x250, Size: 0x8]
	TextRenderComponent* TextRender;//[Offset: 0x258, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 0x8]
	void ReceiveBeginPlay();// 0x2dffba07bda02e
	void SetItemCount(int count);// 0xd9122093a6652c82
	static void ExecuteUbergraph_BP_FX_Exp(int EntryPoint, int K2Node_Event_Count, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0xd9122093a6652c82
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


Class: BP_Sniper_Mphy02_Set00_C.BP_SolarPlayerWeapon_C.SolarPlayerNormalWeapon.SolarPlayerWeapon.SolarWeapon.Actor.Object
	FString GetModuleName();// 0xffffff8c878ea000
<----Generated by SSpawner v1.0.5 https://t.me/SSpawner ---->


